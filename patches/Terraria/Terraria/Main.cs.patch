--- src/merged\Terraria\Main.cs
+++ src/Terraria\Terraria\Main.cs
@@ -3940,39 +_,39 @@
 			Main.Configuration.Put("UseHeatDistortion", Main.UseHeatDistortion);
 			Main.Configuration.Put("WaveQuality", Main.WaveQuality);
 			Main.Configuration.Put("MouseColor", new Dictionary<string, byte>
-			{
-				{
-					"R",
-					Main.mouseColor.R
-				},
-				{
-					"G",
-					Main.mouseColor.G
-				},
-				{
-					"B",
-					Main.mouseColor.B
-				}
-			});
+				{
+					{
+						"R",
+						Main.mouseColor.R
+					},
+					{
+						"G",
+						Main.mouseColor.G
+					},
+					{
+						"B",
+						Main.mouseColor.B
+					}
+				});
 			Main.Configuration.Put("MouseBorderColor", new Dictionary<string, byte>
-			{
-				{
-					"R",
-					Main.MouseBorderColor.R
-				},
-				{
-					"G",
-					Main.MouseBorderColor.G
-				},
-				{
-					"B",
-					Main.MouseBorderColor.B
-				},
-				{
-					"A",
-					Main.MouseBorderColor.A
-				}
-			});
+				{
+					{
+						"R",
+						Main.MouseBorderColor.R
+					},
+					{
+						"G",
+						Main.MouseBorderColor.G
+					},
+					{
+						"B",
+						Main.MouseBorderColor.B
+					},
+					{
+						"A",
+						Main.MouseBorderColor.A
+					}
+				});
 			Main.Configuration.Put("QuickLaunch", Main.SkipAssemblyLoad);
 			bool flag = Main.Configuration.Save(true);
 			return flag && PlayerInput.Save();
@@ -12724,8 +_,7 @@
 							Main.butterflyCageMode[num17, num18] = (byte)Main.rand.Next(5);
 							if (Main.rand.Next(2) == 0)
 							{
-								byte* expr_3D6A = ref Main.butterflyCageMode[num17, num18];
-								*expr_3D6A += 10;
+								Main.butterflyCageMode[num17, num18] += 10;
 							}
 						}
 						int num19 = Main.rand.Next(3, 16);
@@ -12767,13 +_,11 @@
 										{
 											if (Main.butterflyCageMode[num17, num18] >= 10)
 											{
-												byte* expr_3F3E = ref Main.butterflyCageMode[num17, num18];
-												*expr_3F3E -= 10;
+												Main.butterflyCageMode[num17, num18] -= 10;
 											}
 											else
 											{
-												byte* expr_3F60 = ref Main.butterflyCageMode[num17, num18];
-												*expr_3F60 += 10;
+												Main.butterflyCageMode[num17, num18] += 10;
 											}
 										}
 									}
@@ -12797,13 +_,11 @@
 									{
 										if (Main.butterflyCageMode[num17, num18] >= 10)
 										{
-											byte* expr_406B = ref Main.butterflyCageMode[num17, num18];
-											*expr_406B -= 10;
+											Main.butterflyCageMode[num17, num18] -= 10;
 										}
 										else
 										{
-											byte* expr_408D = ref Main.butterflyCageMode[num17, num18];
-											*expr_408D += 10;
+											Main.butterflyCageMode[num17, num18] += 10;
 										}
 									}
 								}
@@ -15231,16 +_,14 @@
 		public static string GetInputText(string oldString)
 		{
 #if CLIENT
-			Main.<>c__DisplayClass1e <>c__DisplayClass1e = new Main.<>c__DisplayClass1e();
-			<>c__DisplayClass1e.oldString = oldString;
 			if (!Main.hasFocus)
 			{
-				return <>c__DisplayClass1e.oldString;
+				return oldString;
 			}
 			Main.inputTextEnter = false;
 			Main.inputTextEscape = false;
-			string text = <>c__DisplayClass1e.oldString;
-			<>c__DisplayClass1e.newKeys = "";
+			string text = oldString;
+			string newKeys = "";
 			if (text == null)
 			{
 				text = "";
@@ -15254,17 +_,16 @@
 				}
 				else if (Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.X) && !Main.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.X))
 				{
-					PlatformUtilities.SetClipboard(<>c__DisplayClass1e.oldString);
+					PlatformUtilities.SetClipboard(oldString);
 					text = "";
 				}
 				else if ((Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.C) && !Main.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.C)) || (Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Insert) && !Main.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Insert)))
 				{
-					PlatformUtilities.SetClipboard(<>c__DisplayClass1e.oldString);
+					PlatformUtilities.SetClipboard(oldString);
 				}
 				else if (Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.V) && !Main.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.V))
 				{
-					Main.<>c__DisplayClass1e expr_13B = <>c__DisplayClass1e;
-					expr_13B.newKeys += PlatformUtilities.GetClipboard();
+					newKeys += PlatformUtilities.GetClipboard();
 				}
 			}
 			else
@@ -15273,11 +_,11 @@
 				{
 					if (Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Delete) && !Main.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Delete))
 					{
-						Thread thread = new Thread(delegate
-						{
-							if (<>c__DisplayClass1e.oldString.Length > 0)
-							{
-								Clipboard.SetText(<>c__DisplayClass1e.oldString);
+						Thread thread = new Thread((ThreadStart)delegate
+						{
+							if (oldString.Length > 0)
+							{
+								Clipboard.SetText(oldString);
 							}
 						});
 						thread.SetApartmentState(ApartmentState.STA);
@@ -15289,7 +_,7 @@
 					}
 					if (Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Insert) && !Main.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Insert))
 					{
-						Thread thread2 = new Thread(delegate
+						Thread thread2 = new Thread((ThreadStart)delegate
 						{
 							string text2 = Clipboard.GetText();
 							for (int l = 0; l < text2.Length; l++)
@@ -15299,7 +_,7 @@
 									text2 = text2.Replace(string.Concat(text2[l--]), "");
 								}
 							}
-							<>c__DisplayClass1e.newKeys += text2;
+							newKeys += text2;
 						});
 						thread2.SetApartmentState(ApartmentState.STA);
 						thread2.Start();
@@ -15322,13 +_,12 @@
 					}
 					else if (num >= 32 && num != 127)
 					{
-						Main.<>c__DisplayClass1e expr_25B = <>c__DisplayClass1e;
-						expr_25B.newKeys += str;
+						newKeys += str;
 					}
 				}
 			}
 			Main.keyCount = 0;
-			text += <>c__DisplayClass1e.newKeys;
+			text += newKeys;
 			Main.oldInputText = Main.inputText;
 			Main.inputText = Keyboard.GetState();
 			Microsoft.Xna.Framework.Input.Keys[] pressedKeys = Main.inputText.GetPressedKeys();
@@ -19828,7 +_,7 @@
 												expr_76F9_cp_0.velocity.Y = expr_76F9_cp_0.velocity.Y - 2f;
 												Main.dust[num164].noGravity = true;
 											}
-											color.A = Main.mouseTextColor / 2;
+											color.A = (byte)(Main.mouseTextColor / 2);
 											color.G = Main.mouseTextColor;
 											color.B = Main.mouseTextColor;
 										}
@@ -19840,8 +_,8 @@
 												int num165 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 43, 0f, 0f, 254, newColor, 0.5f);
 												Main.dust[num165].velocity *= 0f;
 											}
-											byte b4 = (Main.mouseTextColor + color.G * 2) / 3;
-											byte b5 = (Main.mouseTextColor + color.B * 2) / 3;
+											byte b4 = (byte)((Main.mouseTextColor + color.G * 2) / 3);
+											byte b5 = (byte)((Main.mouseTextColor + color.B * 2) / 3);
 											if (b4 > color.G)
 											{
 												color.G = b4;
@@ -20105,9 +_,9 @@
 												}
 												Microsoft.Xna.Framework.Color color11 = color;
 												Microsoft.Xna.Framework.Color color12 = array[num169];
-												color11.R = (color.R + color12.R) / 2;
-												color11.G = (color.G + color12.G) / 2;
-												color11.B = (color.B + color12.B) / 2;
+												color11.R = (byte)((color.R + color12.R) / 2);
+												color11.G = (byte)((color.G + color12.G) / 2);
+												color11.B = (byte)((color.B + color12.B) / 2);
 												if (flag17)
 												{
 													color11 = tile.actColor(color11);
@@ -20152,9 +_,9 @@
 												}
 												Microsoft.Xna.Framework.Color color13 = color;
 												Microsoft.Xna.Framework.Color color14 = array[num172];
-												color13.R = (color.R + color14.R) / 2;
-												color13.G = (color.G + color14.G) / 2;
-												color13.B = (color.B + color14.B) / 2;
+												color13.R = (byte)((color.R + color14.R) / 2);
+												color13.G = (byte)((color.G + color14.G) / 2);
+												color13.B = (byte)((color.B + color14.B) / 2);
 												if (flag19)
 												{
 													color13 = tile.actColor(color13);
@@ -20968,7 +_,7 @@
 				}
 				if (type4 == 334 && frameX >= 5000)
 				{
-					short arg_D4C2_0 = frameY / 18;
+					short arg_D4C2_0 = (short)(frameY / 18);
 					int num311 = (int)frameX;
 					int num312 = 0;
 					int num313 = num311 % 5000;
@@ -22064,25 +_,23 @@
 								switch (m)
 								{
 								case 0:
-									IL_2E2:
+								default:
 									num3 = num2;
 									num4 = 0f;
-									goto IL_316;
+									break;
 								case 1:
 									num3 = -num2;
 									num4 = 0f;
-									goto IL_316;
+									break;
 								case 2:
 									num3 = 0f;
 									num4 = num2;
-									goto IL_316;
+									break;
 								case 3:
 									num3 = 0f;
 									num4 = -num2;
-									goto IL_316;
-								}
-								goto IL_2E2;
-								IL_316:
+									break;
+								}
 								position = new Vector2(player.position.X + num3, player.position.Y + player.gfxOffY + num4);
 								this.DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, player.ghostFade);
 							}
@@ -22112,25 +_,23 @@
 								switch (n)
 								{
 								case 0:
-									IL_41E:
+								default:
 									num6 = num5;
 									num7 = 0f;
-									goto IL_452;
+									break;
 								case 1:
 									num6 = -num5;
 									num7 = 0f;
-									goto IL_452;
+									break;
 								case 2:
 									num6 = 0f;
 									num7 = num5;
-									goto IL_452;
+									break;
 								case 3:
 									num6 = 0f;
 									num7 = -num5;
-									goto IL_452;
-								}
-								goto IL_41E;
-								IL_452:
+									break;
+								}
 								position = new Vector2(player.position.X + num6, player.position.Y + player.gfxOffY + num7);
 								this.DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, player.ghostFade);
 							}
@@ -23746,7 +_,6 @@
 					Texture2D texture = Main.npcTexture[type];
 					Vector2 vector17 = nPC.Center - Main.screenPosition;
 					Microsoft.Xna.Framework.Rectangle frame = nPC.frame;
-					frame.Size() / 2f;
 					SpriteEffects spriteEffects2 = spriteEffects ^ SpriteEffects.FlipHorizontally;
 					float rotation8 = nPC.rotation;
 					Microsoft.Xna.Framework.Color color20 = color9;
@@ -24658,7 +_,7 @@
 								if (type >= 87 && type <= 92)
 								{
 									Microsoft.Xna.Framework.Color alpha6 = nPC.GetAlpha(color9);
-									byte b5 = (Main.tileColor.R + Main.tileColor.G + Main.tileColor.B) / 3;
+									byte b5 = (byte)((Main.tileColor.R + Main.tileColor.G + Main.tileColor.B) / 3);
 									if (alpha6.R < b5)
 									{
 										alpha6.R = b5;
@@ -29131,7 +_,7 @@
 						Microsoft.Xna.Framework.Color color42 = color25;
 						color42 = projectile.GetAlpha(color42);
 						color42 *= (float)(num207 - num209) / 15f;
-						projectile.oldPos[num209] - Main.screenPosition + new Vector2(num149 + (float)num148, (float)(projectile.height / 2) + projectile.gfxOffY);
+						Vector2 _ = projectile.oldPos[num209] - Main.screenPosition + new Vector2(num149 + (float)num148, (float)(projectile.height / 2) + projectile.gfxOffY);
 						Main.spriteBatch.Draw(texture2D11, projectile.oldPos[num209] + new Vector2((float)projectile.width, (float)projectile.height) / 2f - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y4, texture2D11.Width, num206)), color42, projectile.rotation, new Vector2((float)texture2D11.Width / 2f, (float)num206 / 2f), MathHelper.Lerp(projectile.scale, value18, (float)num209 / 15f), spriteEffects, 0f);
 					}
 					Main.spriteBatch.Draw(texture2D11, projectile.Center - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y4, texture2D11.Width, num206)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D11.Width / 2f, (float)num206 / 2f), projectile.scale, spriteEffects, 0f);
@@ -29150,7 +_,7 @@
 						Microsoft.Xna.Framework.Color color43 = color25;
 						color43 = projectile.GetAlpha(color43);
 						color43 *= (float)(num211 - num213) / 15f;
-						projectile.oldPos[num213] - Main.screenPosition + new Vector2(num149 + (float)num148, (float)(projectile.height / 2) + projectile.gfxOffY);
+						Vector2 _ = projectile.oldPos[num213] - Main.screenPosition + new Vector2(num149 + (float)num148, (float)(projectile.height / 2) + projectile.gfxOffY);
 						Main.spriteBatch.Draw(texture2D12, projectile.oldPos[num213] + new Vector2((float)projectile.width, (float)projectile.height) / 2f - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y5, texture2D12.Width, num210)), color43, projectile.rotation, new Vector2((float)texture2D12.Width / 2f, (float)num210 / 2f), MathHelper.Lerp(projectile.scale, value19, (float)num213 / 15f), spriteEffects, 0f);
 					}
 					Main.spriteBatch.Draw(texture2D12, projectile.Center - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y5, texture2D12.Width, num210)), Microsoft.Xna.Framework.Color.White, projectile.rotation, new Vector2((float)texture2D12.Width / 2f, (float)num210 / 2f), projectile.scale + 0.2f, spriteEffects, 0f);
@@ -29366,7 +_,7 @@
 					Vector2 vector29 = new Vector2(projectile.scale);
 					DelegateMethods.f_1 = 1f;
 					DelegateMethods.c_1 = value25 * 0.75f * projectile.Opacity;
-					projectile.oldPos[0] + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
+					Vector2 _ = projectile.oldPos[0] + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
 					Utils.DrawLaser(Main.spriteBatch, tex, value26 - Main.screenPosition, value26 + projectile.velocity * num228 - Main.screenPosition, vector29, new Utils.LaserLineFraming(DelegateMethods.RainbowLaserDraw));
 					DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * 0.75f * projectile.Opacity;
 					Utils.DrawLaser(Main.spriteBatch, tex, value26 - Main.screenPosition, value26 + projectile.velocity * num228 - Main.screenPosition, vector29 / 2f, new Utils.LaserLineFraming(DelegateMethods.RainbowLaserDraw));
@@ -29386,14 +_,14 @@
 					DelegateMethods.f_1 = 1f;
 					DelegateMethods.c_1 = c_;
 					DelegateMethods.i_1 = 54000 - (int)Main.time / 2;
-					projectile.oldPos[0] + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
+					Vector2 _ = projectile.oldPos[0] + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
 					Utils.DrawLaser(Main.spriteBatch, tex2, value27 - Main.screenPosition, value27 + projectile.velocity * num229 - Main.screenPosition, vector30, new Utils.LaserLineFraming(DelegateMethods.TurretLaserDraw));
 					DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * 0.75f * projectile.Opacity;
 					Utils.DrawLaser(Main.spriteBatch, tex2, value27 - Main.screenPosition, value27 + projectile.velocity * num229 - Main.screenPosition, vector30 / 2f, new Utils.LaserLineFraming(DelegateMethods.TurretLaserDraw));
 				}
 				else if (projectile.type == 611)
 				{
-					projectile.position + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
+					Vector2 _ = projectile.position + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
 					Texture2D texture2D22 = Main.projectileTexture[projectile.type];
 					Microsoft.Xna.Framework.Color alpha3 = projectile.GetAlpha(color25);
 					if (projectile.velocity == Vector2.Zero)
@@ -30309,7 +_,7 @@
 						color68 = projectile.GetAlpha(color68);
 						color68 *= (float)(num305 - num307) / 15f;
 						Microsoft.Xna.Framework.Color alpha7 = projectile.GetAlpha(color25);
-						projectile.oldPos[num307] - Main.screenPosition + new Vector2(num149 + (float)num148, (float)(projectile.height / 2) + projectile.gfxOffY);
+						Vector2 _ = projectile.oldPos[num307] - Main.screenPosition + new Vector2(num149 + (float)num148, (float)(projectile.height / 2) + projectile.gfxOffY);
 						Main.spriteBatch.Draw(texture2D39, projectile.oldPos[num307] + new Vector2((float)projectile.width, (float)projectile.height) / 2f - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y13, texture2D39.Width, num304)), Microsoft.Xna.Framework.Color.Lerp(alpha7, color68, 0.3f), projectile.rotation, new Vector2((float)texture2D39.Width / 2f, (float)num304 / 2f), MathHelper.Lerp(projectile.scale, value54, (float)num307 / 15f), spriteEffects, 0f);
 					}
 					Main.spriteBatch.Draw(texture2D39, projectile.Center - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y13, texture2D39.Width, num304)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D39.Width / 2f, (float)num304 / 2f), projectile.scale, spriteEffects, 0f);
@@ -43426,7 +_,7 @@
 				Main.screenPosition.X = 0f;
 			}
 			Main.background = 0;
-			byte b = (255 + Main.tileColor.R * 2) / 3;
+			byte b = (byte)((255 + Main.tileColor.R * 2) / 3);
 			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, 255);
 			this.logoRotation += this.logoRotationSpeed * 3E-05f;
 			if ((double)this.logoRotation > 0.1)
@@ -46376,9 +_,9 @@
 						if (num57 == 4)
 						{
 							color7 = color;
-							color7.R = (255 + color7.R) / 2;
-							color7.G = (255 + color7.R) / 2;
-							color7.B = (255 + color7.R) / 2;
+							color7.R = (byte)((255 + color7.R) / 2);
+							color7.G = (byte)((255 + color7.R) / 2);
+							color7.B = (byte)((255 + color7.R) / 2);
 						}
 						int num58 = 255;
 						int num59 = (int)color7.R - (255 - num58);
@@ -46488,9 +_,9 @@
 							if (num68 == 4)
 							{
 								color8 = color;
-								color8.R = (255 + color8.R) / 2;
-								color8.G = (255 + color8.R) / 2;
-								color8.B = (255 + color8.R) / 2;
+								color8.R = (byte)((255 + color8.R) / 2);
+								color8.G = (byte)((255 + color8.R) / 2);
+								color8.B = (byte)((255 + color8.R) / 2);
 							}
 							int num69 = (int)color8.R - (255 - num66);
 							if (num69 < 0)
@@ -46563,9 +_,9 @@
 						break;
 					}
 					Microsoft.Xna.Framework.Color textColor = color;
-					textColor.R = (255 + textColor.R) / 2;
-					textColor.G = (255 + textColor.R) / 2;
-					textColor.B = (255 + textColor.R) / 2;
+					textColor.R = (byte)((255 + textColor.R) / 2);
+					textColor.G = (byte)((255 + textColor.R) / 2);
+					textColor.B = (byte)((255 + textColor.R) / 2);
 					int num76 = 255;
 					int num77 = (int)textColor.R - (255 - num76);
 					if (num77 < 0)
@@ -46639,9 +_,9 @@
 						if (num85 == 4)
 						{
 							color9 = color;
-							color9.R = (255 + color9.R) / 2;
-							color9.G = (255 + color9.R) / 2;
-							color9.B = (255 + color9.R) / 2;
+							color9.R = (byte)((255 + color9.R) / 2);
+							color9.G = (byte)((255 + color9.R) / 2);
+							color9.B = (byte)((255 + color9.R) / 2);
 						}
 						int num86 = 255;
 						int num87 = (int)color9.R - (255 - num86);
@@ -46729,9 +_,9 @@
 								color10 = color;
 								break;
 							}
-							color10.R = (255 + color10.R) / 2;
-							color10.G = (255 + color10.G) / 2;
-							color10.B = (255 + color10.B) / 2;
+							color10.R = (byte)((255 + color10.R) / 2);
+							color10.G = (byte)((255 + color10.G) / 2);
+							color10.B = (byte)((255 + color10.B) / 2);
 						}
 						int num93 = (int)(255f * (this.menuItemScale[num91] * 2f - 1f));
 						if (array[num91])
@@ -46772,7 +_,7 @@
 							}
 							else
 							{
-								color10.A -= Main.mouseTextColor / 5;
+								color10.A -= (byte)(Main.mouseTextColor / 5);
 							}
 						}
 						int num98 = 0;
@@ -46914,9 +_,9 @@
 				if (num103 == 4)
 				{
 					color11 = color;
-					color11.R = (255 + color11.R) / 2;
-					color11.G = (255 + color11.R) / 2;
-					color11.B = (255 + color11.R) / 2;
+					color11.R = (byte)((255 + color11.R) / 2);
+					color11.G = (byte)((255 + color11.R) / 2);
+					color11.B = (byte)((255 + color11.R) / 2);
 				}
 				color11.A = (byte)((float)color11.A * 0.3f);
 				int num104 = 0;
@@ -46949,9 +_,9 @@
 				if (num106 == 4)
 				{
 					color12 = color;
-					color12.R = (255 + color12.R) / 2;
-					color12.G = (255 + color12.R) / 2;
-					color12.B = (255 + color12.R) / 2;
+					color12.R = (byte)((255 + color12.R) / 2);
+					color12.G = (byte)((255 + color12.R) / 2);
+					color12.B = (byte)((255 + color12.R) / 2);
 				}
 				color12.A = (byte)((float)color12.A * 0.3f);
 				int num107 = 0;
@@ -47694,9 +_,9 @@
 														}
 														break;
 													}
-													color4.R = (color3.R + color5.R) / 2;
-													color4.G = (color3.G + color5.G) / 2;
-													color4.B = (color3.B + color5.B) / 2;
+													color4.R = (byte)((color3.R + color5.R) / 2);
+													color4.G = (byte)((color3.G + color5.G) / 2);
+													color4.B = (byte)((color3.B + color5.B) / 2);
 													color4.R = (byte)((float)color4.R * x);
 													color4.G = (byte)((float)color4.G * y);
 													color4.B = (byte)((float)color4.B * z);
@@ -47744,9 +_,9 @@
 													num29 = 8;
 													break;
 												}
-												color7.R = (color3.R + color8.R) / 2;
-												color7.G = (color3.G + color8.G) / 2;
-												color7.B = (color3.B + color8.B) / 2;
+												color7.R = (byte)((color3.R + color8.R) / 2);
+												color7.G = (byte)((color3.G + color8.G) / 2);
+												color7.B = (byte)((color3.B + color8.B) / 2);
 												color7.R = (byte)((float)color7.R * x);
 												color7.G = (byte)((float)color7.G * y);
 												color7.B = (byte)((float)color7.B * z);
@@ -48013,9 +_,9 @@
 													}
 													break;
 												}
-												color15.R = (color14.R + color16.R) / 2;
-												color15.G = (color14.G + color16.G) / 2;
-												color15.B = (color14.B + color16.B) / 2;
+												color15.R = (byte)((color14.R + color16.R) / 2);
+												color15.G = (byte)((color14.G + color16.G) / 2);
+												color15.B = (byte)((color14.B + color16.B) / 2);
 												color15.R = (byte)((float)color15.R * x);
 												color15.G = (byte)((float)color15.G * y);
 												color15.B = (byte)((float)color15.B * z);
@@ -48053,9 +_,9 @@
 													num57 = 8;
 													break;
 												}
-												color18.R = (color14.R + color19.R) / 2;
-												color18.G = (color14.G + color19.G) / 2;
-												color18.B = (color14.B + color19.B) / 2;
+												color18.R = (byte)((color14.R + color19.R) / 2);
+												color18.G = (byte)((color14.G + color19.G) / 2);
+												color18.B = (byte)((color14.B + color19.B) / 2);
 												color18.R = (byte)((float)color18.R * x);
 												color18.G = (byte)((float)color18.G * y);
 												color18.B = (byte)((float)color18.B * z);
@@ -48295,9 +_,9 @@
 													}
 													break;
 												}
-												color26.R = (color25.R + color27.R) / 2;
-												color26.G = (color25.G + color27.G) / 2;
-												color26.B = (color25.B + color27.B) / 2;
+												color26.R = (byte)((color25.R + color27.R) / 2);
+												color26.G = (byte)((color25.G + color27.G) / 2);
+												color26.B = (byte)((color25.B + color27.B) / 2);
 												color26.R = (byte)((float)color26.R * x);
 												color26.G = (byte)((float)color26.G * y);
 												color26.B = (byte)((float)color26.B * z);
@@ -48326,9 +_,9 @@
 													num77 = 8;
 													break;
 												}
-												color28.R = (color25.R + color29.R) / 2;
-												color28.G = (color25.G + color29.G) / 2;
-												color28.B = (color25.B + color29.B) / 2;
+												color28.R = (byte)((color25.R + color29.R) / 2);
+												color28.G = (byte)((color25.G + color29.G) / 2);
+												color28.B = (byte)((color25.B + color29.B) / 2);
 												color28.R = (byte)((float)color28.R * x);
 												color28.G = (byte)((float)color28.G * y);
 												color28.B = (byte)((float)color28.B * z);
@@ -48865,9 +_,9 @@
 														}
 														break;
 													}
-													color4.R = (color3.R + color5.R) / 2;
-													color4.G = (color3.G + color5.G) / 2;
-													color4.B = (color3.B + color5.B) / 2;
+													color4.R = (byte)((color3.R + color5.R) / 2);
+													color4.G = (byte)((color3.G + color5.G) / 2);
+													color4.B = (byte)((color3.B + color5.B) / 2);
 													color4.R = (byte)((float)color4.R * num5);
 													color4.G = (byte)((float)color4.G * num6);
 													color4.B = (byte)((float)color4.B * num7);
@@ -48915,9 +_,9 @@
 													num35 = 8;
 													break;
 												}
-												color7.R = (color3.R + color8.R) / 2;
-												color7.G = (color3.G + color8.G) / 2;
-												color7.B = (color3.B + color8.B) / 2;
+												color7.R = (byte)((color3.R + color8.R) / 2);
+												color7.G = (byte)((color3.G + color8.G) / 2);
+												color7.B = (byte)((color3.B + color8.B) / 2);
 												color7.R = (byte)((float)color7.R * num5);
 												color7.G = (byte)((float)color7.G * num6);
 												color7.B = (byte)((float)color7.B * num7);
@@ -49184,9 +_,9 @@
 													}
 													break;
 												}
-												color15.R = (color14.R + color16.R) / 2;
-												color15.G = (color14.G + color16.G) / 2;
-												color15.B = (color14.B + color16.B) / 2;
+												color15.R = (byte)((color14.R + color16.R) / 2);
+												color15.G = (byte)((color14.G + color16.G) / 2);
+												color15.B = (byte)((color14.B + color16.B) / 2);
 												color15.R = (byte)((float)color15.R * num5);
 												color15.G = (byte)((float)color15.G * num6);
 												color15.B = (byte)((float)color15.B * num7);
@@ -49224,9 +_,9 @@
 													num63 = 8;
 													break;
 												}
-												color18.R = (color14.R + color19.R) / 2;
-												color18.G = (color14.G + color19.G) / 2;
-												color18.B = (color14.B + color19.B) / 2;
+												color18.R = (byte)((color14.R + color19.R) / 2);
+												color18.G = (byte)((color14.G + color19.G) / 2);
+												color18.B = (byte)((color14.B + color19.B) / 2);
 												color18.R = (byte)((float)color18.R * num5);
 												color18.G = (byte)((float)color18.G * num6);
 												color18.B = (byte)((float)color18.B * num7);
@@ -49460,9 +_,9 @@
 													}
 													break;
 												}
-												color26.R = (color25.R + color27.R) / 2;
-												color26.G = (color25.G + color27.G) / 2;
-												color26.B = (color25.B + color27.B) / 2;
+												color26.R = (byte)((color25.R + color27.R) / 2);
+												color26.G = (byte)((color25.G + color27.G) / 2);
+												color26.B = (byte)((color25.B + color27.B) / 2);
 												color26.R = (byte)((float)color26.R * num5);
 												color26.G = (byte)((float)color26.G * num6);
 												color26.B = (byte)((float)color26.B * num7);
@@ -49491,9 +_,9 @@
 													num83 = 8;
 													break;
 												}
-												color28.R = (color25.R + color29.R) / 2;
-												color28.G = (color25.G + color29.G) / 2;
-												color28.B = (color25.B + color29.B) / 2;
+												color28.R = (byte)((color25.R + color29.R) / 2);
+												color28.G = (byte)((color25.G + color29.G) / 2);
+												color28.B = (byte)((color25.B + color29.B) / 2);
 												color28.R = (byte)((float)color28.R * num5);
 												color28.G = (byte)((float)color28.G * num6);
 												color28.B = (byte)((float)color28.B * num7);
@@ -51353,9 +_,9 @@
 				}
 			}
 			Main.tileColor.A = 255;
-			Main.tileColor.R = (Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.R * 7) / 10;
-			Main.tileColor.G = (Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.G * 7) / 10;
-			Main.tileColor.B = (Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.B * 7) / 10;
+			Main.tileColor.R = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.R * 7) / 10);
+			Main.tileColor.G = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.G * 7) / 10);
+			Main.tileColor.B = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.B * 7) / 10);
 			Main.backColor = Main.bgColor;
 			Main.trueBackColor = Main.backColor;
 			Lighting.Initialize(true);
@@ -52842,10 +_,10 @@
 										num26 = (float)color4.B * num17;
 										num27 = (float)color4.A * num17;
 										color4 = new Microsoft.Xna.Framework.Color((int)((byte)num24), (int)((byte)num25), (int)((byte)num26), (int)((byte)num27));
-										color3.R = (color2.R * 3 + color4.R * 2) / 5;
-										color3.G = (color2.G * 3 + color4.G * 2) / 5;
-										color3.B = (color2.B * 3 + color4.B * 2) / 5;
-										color3.A = (color2.A * 3 + color4.A * 2) / 5;
+										color3.R = (byte)((color2.R * 3 + color4.R * 2) / 5);
+										color3.G = (byte)((color2.G * 3 + color4.G * 2) / 5);
+										color3.B = (byte)((color2.B * 3 + color4.B * 2) / 5);
+										color3.A = (byte)((color2.A * 3 + color4.A * 2) / 5);
 										Main.spriteBatch.Draw(Main.liquidTexture[num12], value - Main.screenPosition + new Vector2((float)num28, (float)num29) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(value2.X + num28, value2.Y + num29, width, height)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 									}
 								}
@@ -57701,9 +_,9 @@
 				}
 			}
 			Main.tileColor.A = 255;
-			Main.tileColor.R = (Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.R * 7) / 10;
-			Main.tileColor.G = (Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.G * 7) / 10;
-			Main.tileColor.B = (Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.B * 7) / 10;
+			Main.tileColor.R = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.R * 7) / 10);
+			Main.tileColor.G = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.G * 7) / 10);
+			Main.tileColor.B = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.B * 7) / 10);
 			Main.tileColor = SkyManager.Instance.ProcessTileColor(Main.tileColor);
 			float num55 = (float)(Main.maxTilesX / 4200);
 			num55 *= num55;

