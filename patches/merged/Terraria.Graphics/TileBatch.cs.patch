--- src/decompiled\Terraria.Graphics\TileBatch.cs
+++ src/merged\Terraria.Graphics\TileBatch.cs
@@ -1,11 +_,19 @@
 using Microsoft.Xna.Framework;
 using Microsoft.Xna.Framework.Graphics;
 using System;
+#if !WINDOWS
+using System.Collections.Generic;
+#endif
 
 namespace Terraria.Graphics
 {
+#if WINDOWS
 	public class TileBatch
+#else
+    public class TileBatch : IDisposable
+#endif
 	{
+#if WINDOWS
 		private struct SpriteData
 		{
 			public Vector4 Source;
@@ -32,9 +_,109 @@
 		private Texture2D[] _spriteTextures;
 
 		private int _queuedSpriteCount;
-
-		private SpriteBatch _spriteBatch;
-
+#else
+		private class TextureComparer : IComparer<TileBatch.BatchDrawInfo>
+		{
+			public static TileBatch.TextureComparer Instance = new TileBatch.TextureComparer();
+
+			public int Compare(TileBatch.BatchDrawInfo info1, TileBatch.BatchDrawInfo info2)
+			{
+				return info1.Texture.GetHashCode().CompareTo(info2.Texture.GetHashCode());
+			}
+		}
+
+		private struct BatchDrawInfo
+		{
+			public static readonly TileBatch.BatchDrawInfo Empty = new TileBatch.BatchDrawInfo(null, 0, 0);
+
+			public readonly Texture2D Texture;
+
+			public readonly int Index;
+
+			public int Count;
+
+			public BatchDrawInfo(Texture2D texture, int index, int count)
+			{
+				this.Texture = texture;
+				this.Index = index;
+				this.Count = count;
+			}
+
+			public BatchDrawInfo(Texture2D texture)
+			{
+				this.Texture = texture;
+				this.Index = 0;
+				this.Count = 0;
+			}
+		}
+
+		private class BatchDrawGroup
+		{
+			public VertexPositionColorTexture[] VertexArray;
+
+			public TileBatch.BatchDrawInfo[] BatchDraws;
+
+			public int BatchDrawCount;
+
+			public int SpriteCount;
+
+			public int VertexCount
+			{
+				get
+				{
+					return this.SpriteCount * 4;
+				}
+			}
+
+			public BatchDrawGroup()
+			{
+				this.VertexArray = new VertexPositionColorTexture[8192];
+				this.BatchDraws = new TileBatch.BatchDrawInfo[2048];
+				this.BatchDrawCount = 0;
+				this.SpriteCount = 0;
+			}
+
+			public void Reset()
+			{
+				this.BatchDrawCount = 0;
+				this.SpriteCount = 0;
+			}
+
+			public void AddBatch(TileBatch.BatchDrawInfo batch)
+			{
+				TileBatch.BatchDrawInfo[] arg_18_0 = this.BatchDraws;
+				int batchDrawCount = this.BatchDrawCount;
+				this.BatchDrawCount = batchDrawCount + 1;
+				arg_18_0[batchDrawCount] = batch;
+			}
+		}
+
+		private SpriteSortMode _sortMode;
+
+		private const int MAX_SPRITES = 2048;
+
+		private const int MAX_VERTICES = 8192;
+
+		private const int MAX_INDICES = 12288;
+
+		private const int INITIAL_BATCH_DRAW_GROUP_COUNT = 32;
+
+		private short[] _sortedIndexData = new short[12288];
+
+		private DynamicIndexBuffer _sortedIndexBuffer;
+
+		private int _lastBatchDrawGroupIndex;
+
+		private TileBatch.BatchDrawInfo _currentBatchDrawInfo;
+
+		private List<TileBatch.BatchDrawGroup> _batchDrawGroups = new List<TileBatch.BatchDrawGroup>();
+
+		private readonly GraphicsDevice _graphicsDevice;
+#endif
+
+        private SpriteBatch _spriteBatch;
+
+#if WINDOWS
 		private static Vector2 _vector2Zero;
 
 		private static Rectangle? _nullRectangle;
@@ -54,7 +_,7 @@
 			this._graphicsDevice = graphicsDevice;
 			this._spriteBatch = new SpriteBatch(graphicsDevice);
 			this.Allocate();
-		}
+        }
 
 		private void Allocate()
 		{
@@ -91,7 +_,7 @@
 			}
 		}
 
-		private void FlushRenderState()
+        private void FlushRenderState()
 		{
 			this.Allocate();
 			this._graphicsDevice.SetVertexBuffer(this._vertexBuffer);
@@ -375,6 +_,321 @@
 				1f,
 				1f
 			};
-		}
-	}
+        }
+#else
+		public void Begin()
+		{
+			this.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, Matrix.Identity);
+		}
+
+		public void Begin(SpriteSortMode sortMode, BlendState blendState)
+		{
+			this.Begin(sortMode, blendState, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, Matrix.Identity);
+		}
+
+		public void Begin(SpriteSortMode sortMode, BlendState blendState, SamplerState samplerState, DepthStencilState depthStencilState, RasterizerState rasterizerState)
+		{
+			this.Begin(sortMode, blendState, samplerState, depthStencilState, rasterizerState, null, Matrix.Identity);
+		}
+
+		public void Begin(SpriteSortMode sortMode, BlendState blendState, SamplerState samplerState, DepthStencilState depthStencilState, RasterizerState rasterizerState, Effect effect)
+		{
+			this.Begin(sortMode, blendState, samplerState, depthStencilState, rasterizerState, effect, Matrix.Identity);
+		}
+
+		public void Begin(SpriteSortMode sortMode, BlendState blendState, SamplerState samplerState, DepthStencilState depthStencilState, RasterizerState rasterizerState, Effect effect, Matrix transformationMatrix)
+		{
+			if (sortMode != SpriteSortMode.Deferred && sortMode != SpriteSortMode.Texture)
+			{
+				throw new NotImplementedException("TileBatch only supports SpriteSortMode.Deferred and SpriteSortMode.Texture.");
+			}
+			this._sortMode = sortMode;
+			this._spriteBatch.Begin(sortMode, blendState, samplerState, depthStencilState, rasterizerState, effect, transformationMatrix);
+			this._spriteBatch.End();
+		}
+
+		public void End()
+		{
+			if (this._sortMode == SpriteSortMode.Deferred)
+			{
+				this.DrawBatch();
+				return;
+			}
+			if (this._sortMode == SpriteSortMode.Texture)
+			{
+				this.SortedDrawBatch();
+			}
+		}
+
+		public void Draw(Texture2D texture, Vector2 position, VertexColors colors)
+		{
+			this.Draw(texture, position, null, colors, Vector2.Zero, 1f, SpriteEffects.None);
+		}
+
+		public void Draw(Texture2D texture, Vector4 destination, VertexColors colors)
+		{
+			this.InternalDraw(texture, destination, null, colors, 0f, Vector2.Zero, SpriteEffects.None, 0f);
+		}
+
+		public void Draw(Texture2D texture, Vector4 destination, Rectangle? sourceRectangle, VertexColors colors)
+		{
+			this.InternalDraw(texture, destination, sourceRectangle, colors, 0f, Vector2.Zero, SpriteEffects.None, 0f);
+		}
+
+		public void Draw(Texture2D texture, Vector2 position, Rectangle? sourceRectangle, VertexColors colors, Vector2 origin, float scale, SpriteEffects effects)
+		{
+			float z;
+			float w;
+			if (sourceRectangle.HasValue)
+			{
+				z = (float)sourceRectangle.Value.Width * scale;
+				w = (float)sourceRectangle.Value.Height * scale;
+			}
+			else
+			{
+				z = (float)texture.Width * scale;
+				w = (float)texture.Height * scale;
+			}
+			this.InternalDraw(texture, new Vector4(position.X, position.Y, z, w), sourceRectangle, colors, 0f, origin * scale, effects, 0f);
+		}
+
+		public void Draw(Texture2D texture, Vector4 destination, Rectangle? sourceRectangle, VertexColors colors, Vector2 origin, SpriteEffects effects, float rotation)
+		{
+			this.InternalDraw(texture, destination, sourceRectangle, colors, rotation, origin, effects, 0f);
+		}
+
+		internal void InternalDraw(Texture2D texture, Vector4 destinationRectangle, Rectangle? sourceRectangle, VertexColors colors, float rotation, Vector2 origin, SpriteEffects effect, float depth)
+		{
+			Vector4 vector;
+			if (sourceRectangle.HasValue)
+			{
+				vector.X = (float)sourceRectangle.Value.X;
+				vector.Y = (float)sourceRectangle.Value.Y;
+				vector.Z = (float)sourceRectangle.Value.Width;
+				vector.W = (float)sourceRectangle.Value.Height;
+			}
+			else
+			{
+				vector.X = 0f;
+				vector.Y = 0f;
+				vector.Z = (float)texture.Width;
+				vector.W = (float)texture.Height;
+			}
+			Vector2 vector2;
+			vector2.X = vector.X / (float)texture.Width;
+			vector2.Y = vector.Y / (float)texture.Height;
+			Vector2 vector3;
+			vector3.X = (vector.X + vector.Z) / (float)texture.Width;
+			vector3.Y = (vector.Y + vector.W) / (float)texture.Height;
+			if ((effect & SpriteEffects.FlipVertically) != SpriteEffects.None)
+			{
+				float y = vector3.Y;
+				vector3.Y = vector2.Y;
+				vector2.Y = y;
+			}
+			if ((effect & SpriteEffects.FlipHorizontally) != SpriteEffects.None)
+			{
+				float x = vector3.X;
+				vector3.X = vector2.X;
+				vector2.X = x;
+			}
+			this.QueueSprite(destinationRectangle, -origin, colors, vector, vector2, vector3, texture, depth, rotation);
+		}
+
+		public TileBatch(GraphicsDevice graphicsDevice)
+		{
+			this._spriteBatch = new SpriteBatch(graphicsDevice);
+			this._graphicsDevice = graphicsDevice;
+			for (int i = 0; i < 32; i++)
+			{
+				this._batchDrawGroups.Add(new TileBatch.BatchDrawGroup());
+			}
+			this._sortedIndexBuffer = new DynamicIndexBuffer(graphicsDevice, IndexElementSize.SixteenBits, 12288, BufferUsage.WriteOnly);
+		}
+
+		~TileBatch()
+		{
+			this.Dispose();
+		}
+
+		public void Dispose()
+		{
+			this._sortedIndexBuffer.Dispose();
+			this._spriteBatch.Dispose();
+		}
+
+		private void SortAndApplyIndexData(TileBatch.BatchDrawGroup batchDrawGroup)
+		{
+			Array.Sort<TileBatch.BatchDrawInfo>(batchDrawGroup.BatchDraws, 0, batchDrawGroup.BatchDrawCount, TileBatch.TextureComparer.Instance);
+			int num = 0;
+			for (int i = 0; i < batchDrawGroup.BatchDrawCount; i++)
+			{
+				TileBatch.BatchDrawInfo batchDrawInfo = batchDrawGroup.BatchDraws[i];
+				for (int j = 0; j < batchDrawInfo.Count; j++)
+				{
+					int num2 = batchDrawInfo.Index * 4 + j * 4;
+					this._sortedIndexData[num] = (short)num2;
+					this._sortedIndexData[num + 1] = (short)(num2 + 1);
+					this._sortedIndexData[num + 2] = (short)(num2 + 2);
+					this._sortedIndexData[num + 3] = (short)(num2 + 3);
+					this._sortedIndexData[num + 4] = (short)(num2 + 2);
+					this._sortedIndexData[num + 5] = (short)(num2 + 1);
+					num += 6;
+				}
+			}
+			this._sortedIndexBuffer.SetData<short>(this._sortedIndexData, 0, num);
+		}
+
+		private void SortedDrawBatch()
+		{
+			if (this._lastBatchDrawGroupIndex == 0 && this._batchDrawGroups[this._lastBatchDrawGroupIndex].SpriteCount == 0)
+			{
+				return;
+			}
+			this.FlushRemainingBatch();
+			VertexBuffer vertexBuffer = this._graphicsDevice.GetVertexBuffers()[0].VertexBuffer;
+			this._graphicsDevice.Indices = this._sortedIndexBuffer;
+			for (int i = 0; i <= this._lastBatchDrawGroupIndex; i++)
+			{
+				TileBatch.BatchDrawGroup batchDrawGroup = this._batchDrawGroups[i];
+				int vertexCount = batchDrawGroup.VertexCount;
+				vertexBuffer.SetData<VertexPositionColorTexture>(this._batchDrawGroups[i].VertexArray, 0, vertexCount);
+				this.SortAndApplyIndexData(batchDrawGroup);
+				int num = 0;
+				for (int j = 0; j < batchDrawGroup.BatchDrawCount; j++)
+				{
+					TileBatch.BatchDrawInfo batchDrawInfo = batchDrawGroup.BatchDraws[j];
+					this._graphicsDevice.Textures[0] = batchDrawInfo.Texture;
+					int num2 = batchDrawInfo.Count;
+					while (j + 1 < batchDrawGroup.BatchDrawCount && batchDrawInfo.Texture == batchDrawGroup.BatchDraws[j + 1].Texture)
+						{
+						num2 += batchDrawGroup.BatchDraws[j + 1].Count;
+						j++;
+ 					}
+					this._graphicsDevice.DrawIndexedPrimitives(PrimitiveType.TriangleList, 0, 0, num2 * 4, num, num2 * 2);
+					num += num2 * 6;
+				}
+				batchDrawGroup.Reset();
+			}
+			this._currentBatchDrawInfo = TileBatch.BatchDrawInfo.Empty;
+			this._lastBatchDrawGroupIndex = 0;
+		}
+
+		private void DrawBatch()
+		{
+			if (this._lastBatchDrawGroupIndex == 0 && this._batchDrawGroups[this._lastBatchDrawGroupIndex].SpriteCount == 0)
+ 			{
+ 				return;
+ 			}
+			this.FlushRemainingBatch();
+			VertexBuffer vertexBuffer = this._graphicsDevice.GetVertexBuffers()[0].VertexBuffer;
+			for (int i = 0; i <= this._lastBatchDrawGroupIndex; i++)
+			{
+				TileBatch.BatchDrawGroup batchDrawGroup = this._batchDrawGroups[i];
+				int vertexCount = batchDrawGroup.VertexCount;
+				vertexBuffer.SetData<VertexPositionColorTexture>(this._batchDrawGroups[i].VertexArray, 0, vertexCount);
+				for (int j = 0; j < batchDrawGroup.BatchDrawCount; j++)
+				{
+					TileBatch.BatchDrawInfo batchDrawInfo = batchDrawGroup.BatchDraws[j];
+					this._graphicsDevice.Textures[0] = batchDrawInfo.Texture;
+					this._graphicsDevice.DrawIndexedPrimitives(PrimitiveType.TriangleList, 0, 0, batchDrawInfo.Count * 4, batchDrawInfo.Index * 6, batchDrawInfo.Count * 2);
+				}
+				batchDrawGroup.Reset();
+			}
+			this._currentBatchDrawInfo = TileBatch.BatchDrawInfo.Empty;
+			this._lastBatchDrawGroupIndex = 0;
+		}
+
+		private void QueueSprite(Vector4 destinationRect, Vector2 origin, VertexColors colors, Vector4 sourceRectangle, Vector2 texCoordTL, Vector2 texCoordBR, Texture2D texture, float depth, float rotation)
+		{
+			this.UpdateCurrentBatchDraw(texture);
+			float num = origin.X / sourceRectangle.Z;
+			float arg_49_0 = origin.Y / sourceRectangle.W;
+			float x = destinationRect.X;
+			float y = destinationRect.Y;
+			float z = destinationRect.Z;
+			float w = destinationRect.W;
+			float num2 = num * z;
+			float num3 = arg_49_0 * w;
+			TileBatch.BatchDrawGroup arg_8C_0 = this._batchDrawGroups[this._lastBatchDrawGroupIndex];
+			float num4;
+			float num5;
+			if (rotation != 0f)
+			{
+				num4 = (float)Math.Cos((double)rotation);
+				num5 = (float)Math.Sin((double)rotation);
+		}
+			else
+			{
+				num4 = 1f;
+				num5 = 0f;
+			}
+			int num6 = arg_8C_0.VertexCount;
+			arg_8C_0.VertexArray[num6].Position.X = x + num2 * num4 - num3 * num5;
+			arg_8C_0.VertexArray[num6].Position.Y = y + num2 * num5 + num3 * num4;
+			arg_8C_0.VertexArray[num6].Position.Z = depth;
+			arg_8C_0.VertexArray[num6].Color = colors.TopLeftColor;
+			arg_8C_0.VertexArray[num6].TextureCoordinate.X = texCoordTL.X;
+			arg_8C_0.VertexArray[num6].TextureCoordinate.Y = texCoordTL.Y;
+			num6++;
+			arg_8C_0.VertexArray[num6].Position.X = x + (num2 + z) * num4 - num3 * num5;
+			arg_8C_0.VertexArray[num6].Position.Y = y + (num2 + z) * num5 + num3 * num4;
+			arg_8C_0.VertexArray[num6].Position.Z = depth;
+			arg_8C_0.VertexArray[num6].Color = colors.TopRightColor;
+			arg_8C_0.VertexArray[num6].TextureCoordinate.X = texCoordBR.X;
+			arg_8C_0.VertexArray[num6].TextureCoordinate.Y = texCoordTL.Y;
+			num6++;
+			arg_8C_0.VertexArray[num6].Position.X = x + num2 * num4 - (num3 + w) * num5;
+			arg_8C_0.VertexArray[num6].Position.Y = y + num2 * num5 + (num3 + w) * num4;
+			arg_8C_0.VertexArray[num6].Position.Z = depth;
+			arg_8C_0.VertexArray[num6].Color = colors.BottomLeftColor;
+			arg_8C_0.VertexArray[num6].TextureCoordinate.X = texCoordTL.X;
+			arg_8C_0.VertexArray[num6].TextureCoordinate.Y = texCoordBR.Y;
+			num6++;
+			arg_8C_0.VertexArray[num6].Position.X = x + (num2 + z) * num4 - (num3 + w) * num5;
+			arg_8C_0.VertexArray[num6].Position.Y = y + (num2 + z) * num5 + (num3 + w) * num4;
+			arg_8C_0.VertexArray[num6].Position.Z = depth;
+			arg_8C_0.VertexArray[num6].Color = colors.BottomRightColor;
+			arg_8C_0.VertexArray[num6].TextureCoordinate.X = texCoordBR.X;
+			arg_8C_0.VertexArray[num6].TextureCoordinate.Y = texCoordBR.Y;
+			arg_8C_0.SpriteCount++;
+		}
+
+		private void UpdateCurrentBatchDraw(Texture2D texture)
+		{
+			TileBatch.BatchDrawGroup batchDrawGroup = this._batchDrawGroups[this._lastBatchDrawGroupIndex];
+			if (batchDrawGroup.SpriteCount >= 2048)
+			{
+				this._currentBatchDrawInfo.Count = 2048 - this._currentBatchDrawInfo.Index;
+				this._batchDrawGroups[this._lastBatchDrawGroupIndex].AddBatch(this._currentBatchDrawInfo);
+				this._currentBatchDrawInfo = new TileBatch.BatchDrawInfo(texture);
+				this._lastBatchDrawGroupIndex++;
+				if (this._lastBatchDrawGroupIndex >= this._batchDrawGroups.Count)
+				{
+					this._batchDrawGroups.Add(new TileBatch.BatchDrawGroup());
+					return;
+				}
+			}
+			else if (texture != this._currentBatchDrawInfo.Texture)
+			{
+				if (batchDrawGroup.SpriteCount != 0 || this._lastBatchDrawGroupIndex != 0)
+				{
+					this._currentBatchDrawInfo.Count = batchDrawGroup.SpriteCount - this._currentBatchDrawInfo.Index;
+					batchDrawGroup.AddBatch(this._currentBatchDrawInfo);
+				}
+				this._currentBatchDrawInfo = new TileBatch.BatchDrawInfo(texture, batchDrawGroup.SpriteCount, 0);
+			}
+		}
+
+		private void FlushRemainingBatch()
+		{
+			TileBatch.BatchDrawGroup batchDrawGroup = this._batchDrawGroups[this._lastBatchDrawGroupIndex];
+			if (this._currentBatchDrawInfo.Index != batchDrawGroup.SpriteCount)
+			{
+				this._currentBatchDrawInfo.Count = batchDrawGroup.SpriteCount - this._currentBatchDrawInfo.Index;
+				batchDrawGroup.AddBatch(this._currentBatchDrawInfo);
+			}
+ 		}
+#endif
+    }
 }

