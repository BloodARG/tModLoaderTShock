--- src/Terraria\Terraria\Lighting.cs
+++ src/tModLoader\Terraria\Lighting.cs
@@ -8,6 +_,7 @@
 using Terraria.Graphics;
 using Terraria.ID;
 using Terraria.Utilities;
+using Terraria.ModLoader;
 
 namespace Terraria
 {
@@ -121,7 +_,7 @@
 		private static int firstToLightY;
 		private static int lastToLightX;
 		private static int lastToLightY;
-		private static float negLight = 0.04f;
+		internal static float negLight = 0.04f;
 		private static float negLight2 = 0.16f;
 		private static float wetLightR = 0.16f;
 		private static float wetLightG = 0.16f;
@@ -129,7 +_,7 @@
 		private static float honeyLightR = 0.16f;
 		private static float honeyLightG = 0.16f;
 		private static float honeyLightB = 0.16f;
-		private static float blueWave = 1f;
+		internal static float blueWave = 1f;
 		private static int blueDir = 1;
 		private static int minX7;
 		private static int maxX7;
@@ -608,6 +_,7 @@
 				Main.player[Main.myPlayer].NPCBannerBuff[m] = false;
 			}
 			Main.player[Main.myPlayer].hasBanner = false;
+			WorldHooks.ResetNearbyTileEffects();
 			int[] screenTileCounts = Main.screenTileCounts;
 			Array.Clear(screenTileCounts, 0, screenTileCounts.Length);
 			num4 = Lighting.firstToLightX;
@@ -621,6 +_,7 @@
 			for (int n = num4; n < num5; n++)
 			{
 				Lighting.LightingState[] array3 = Lighting.states[n - Lighting.firstToLightX];
+				//patch file: n, num17
 				for (int num17 = num6; num17 < num7; num17++)
 				{
 					Lighting.LightingState lightingState3 = array3[num17 - Lighting.firstToLightY];
@@ -772,7 +_,7 @@
 							lightingState3.b2 = num20;
 						}
 					}
-					byte wall = tile.wall;
+					ushort wall = tile.wall;
 					if (wall <= 137)
 					{
 						if (wall != 33)
@@ -879,8 +_,10 @@
 								break;
 						}
 					}
+					WallLoader.ModifyLight(n, num17, wall, ref num18, ref num19, ref num20);
 					if (tile.active())
 					{
+						bool closer = false;
 						if (n > num4 + num15 && n < num5 - num15 && num17 > num6 + num16 && num17 < num7 - num16)
 						{
 							screenTileCounts[(int)tile.type]++;
@@ -915,6 +_,7 @@
 									Main.player[Main.myPlayer].hasBanner = true;
 								}
 							}
+							closer = true;
 						}
 						ushort type = tile.type;
 						if (type != 139)
@@ -968,6 +_,11 @@
 						{
 							Main.musicBox = (int)(tile.frameY / 36);
 						}
+						if (TileLoader.IsModMusicBox(tile) && tile.frameX >= 36)
+						{
+							Main.musicBox = SoundLoader.tileToMusic[tile.type][tile.frameY / 36 * 36];
+						}
+						TileLoader.NearbyEffects(n, num17, type, closer);
 						if (Main.tileBlockLight[(int)tile.type] && (Lighting.lightMode >= 2 || (tile.type != 131 && !tile.inActive() && tile.slope() == 0)))
 						{
 							lightingState3.stopLight = true;
@@ -2451,16 +_,19 @@
 						}
 					}
 					IL_3257:
+					TileLoader.ModifyLight(n, num17, tile.type, ref num18, ref num19, ref num20);
 					if (Lighting.RGB)
 					{
 						if (lightingState3.r2 < num18)
 						{
 							lightingState3.r2 = num18;
 						}
+						//patch file: num18, num19
 						if (lightingState3.g2 < num19)
 						{
 							lightingState3.g2 = num19;
 						}
+						//patch file: num19, num20
 						if (lightingState3.b2 < num20)
 						{
 							lightingState3.b2 = num20;
@@ -2595,7 +_,7 @@
 			if (Main.player[Main.myPlayer].accOreFinder)
 			{
 				Main.player[Main.myPlayer].bestOre = -1;
-				for (int num62 = 0; num62 < 467; num62++)
+				for (int num62 = 0; num62 < Main.tileValue.Length; num62++)
 				{
 					if (screenTileCounts[num62] > 0 && Main.tileValue[num62] > 0 && (Main.player[Main.myPlayer].bestOre < 0 || Main.tileValue[num62] > Main.tileValue[Main.player[Main.myPlayer].bestOre]))
 					{
@@ -2603,6 +_,7 @@
 					}
 				}
 			}
+			WorldHooks.TileCountsAvailable(screenTileCounts);
 			if (Main.holyTiles < 0)
 			{
 				Main.holyTiles = 0;
@@ -2748,6 +_,7 @@
 							Lighting.wetLightB = 0f;
 							break;
 					}
+					WaterStyleLoader.LightColorMultiplier(Main.waterStyle, ref Lighting.wetLightR, ref Lighting.wetLightG, ref Lighting.wetLightB);
 				}
 				else
 				{

