--- src/Terraria\Terraria\Main.cs
+++ src/tModLoader\Terraria\Main.cs
@@ -48,6 +_,8 @@
 using Terraria.IO;
 using Terraria.Localization;
 using Terraria.Map;
+using Terraria.ModLoader;
+using Terraria.ModLoader.IO;
 using Terraria.Net;
 using Terraria.ObjectData;
 using Terraria.Social;
@@ -155,7 +_,7 @@
 		public static int AnnouncementBoxRange = -1;
 		public static Vector2 destroyerHB = new Vector2(0f, 0f);
 		public static FavoritesFile LocalFavoriteData = new FavoritesFile(Main.SavePath + "/favorites.json", false);
-		public static FavoritesFile CloudFavoritesData = new FavoritesFile("/favorites.json", true);
+		public static FavoritesFile CloudFavoritesData = new FavoritesFile("/ModLoader/favorites.json", true);
 		public static FileMetadata WorldFileMetadata;
 		public static FileMetadata MapFileMetadata;
 		private AchievementManager _achievements;
@@ -194,11 +_,13 @@
 		public static bool UseHeatDistortion = true;
 		public static int npcStreamSpeed = 60;
 		public static int musicError = 0;
+		public static int soundError = 0;
+		public static int ambientError = 0;
 		public static bool dedServFPS = false;
 		public static int dedServCount1 = 0;
 		public static int dedServCount2 = 0;
 		public static bool superFast = false;
-		public static int MaxShopIDs = 22;
+		public static int MaxShopIDs = 22 + 1;
 		public static bool[] hairLoaded = new bool[134];
 		public static bool[] wingsLoaded = new bool[38];
 		public static bool[] goreLoaded = new bool[1087];
@@ -478,10 +_,10 @@
 		private static bool flameRingLoaded;
 		private Texture2D flameRingTexture;
 		private Texture2D mapDeathTexture;
-		private RenderTarget2D[,] mapTarget = new RenderTarget2D[Main.mapTargetX, Main.mapTargetY];
+		public RenderTarget2D[, ] mapTarget = new RenderTarget2D[Main.mapTargetX, Main.mapTargetY];
 		private RenderTarget2D mapSectionTexture;
-		public static bool[,] initMap = new bool[Main.mapTargetX, Main.mapTargetY];
-		public static bool[,] mapWasContentLost = new bool[Main.mapTargetX, Main.mapTargetY];
+		public static bool[, ] initMap = new bool[Main.mapTargetX, Main.mapTargetY];
+		public static bool[, ] mapWasContentLost = new bool[Main.mapTargetX, Main.mapTargetY];
 		public Texture2D[] infoIconTexture = new Texture2D[14];
 		public static Texture2D[] wireUITexture = new Texture2D[12];
 		public static Texture2D builderAccTexture;
@@ -539,12 +_,12 @@
 		private int lastTileX;
 		private int firstTileY;
 		private int lastTileY;
-		private double bgParallax;
-		private int bgStart;
-		private int bgLoops;
+		internal double bgParallax;
+		internal int bgStart;
+		internal int bgLoops;
 		private int bgStartY;
 		private int bgLoopsY;
-		private int bgTop;
+		internal int bgTop;
 		public static int renderCount = 99;
 		public static GraphicsDeviceManager graphics;
 		public static SpriteBatch spriteBatch;
@@ -893,18 +_,18 @@
 		public static Texture2D snowMoonTexture;
 		public static Texture2D oneDropLogo;
 		public static int numTileColors = 31;
-		public static RenderTarget2D[,] tileAltTexture = new RenderTarget2D[467, Main.numTileColors];
-		public static bool[,] tileAltTextureInit = new bool[467, Main.numTileColors];
-		public static bool[,] tileAltTextureDrawn = new bool[467, Main.numTileColors];
+		public static RenderTarget2D[, ] tileAltTexture = new RenderTarget2D[467, Main.numTileColors];
+		public static bool[, ] tileAltTextureInit = new bool[467, Main.numTileColors];
+		public static bool[, ] tileAltTextureDrawn = new bool[467, Main.numTileColors];
 		public static int numTreeStyles = 19;
-		public static RenderTarget2D[,] treeTopAltTexture = new RenderTarget2D[Main.numTreeStyles, Main.numTileColors];
-		public static RenderTarget2D[,] treeBranchAltTexture = new RenderTarget2D[Main.numTreeStyles, Main.numTileColors];
-		public static bool[,] treeAltTextureInit = new bool[Main.numTreeStyles, Main.numTileColors];
-		public static bool[,] treeAltTextureDrawn = new bool[Main.numTreeStyles, Main.numTileColors];
-		public static bool[,] checkTreeAlt = new bool[Main.numTreeStyles, Main.numTileColors];
-		public static RenderTarget2D[,] wallAltTexture = new RenderTarget2D[231, Main.numTileColors];
-		public static bool[,] wallAltTextureInit = new bool[231, Main.numTileColors];
-		public static bool[,] wallAltTextureDrawn = new bool[231, Main.numTileColors];
+		public static RenderTarget2D[, ] treeTopAltTexture = new RenderTarget2D[Main.numTreeStyles, Main.numTileColors];
+		public static RenderTarget2D[, ] treeBranchAltTexture = new RenderTarget2D[Main.numTreeStyles, Main.numTileColors];
+		public static bool[, ] treeAltTextureInit = new bool[Main.numTreeStyles, Main.numTileColors];
+		public static bool[, ] treeAltTextureDrawn = new bool[Main.numTreeStyles, Main.numTileColors];
+		public static bool[, ] checkTreeAlt = new bool[Main.numTreeStyles, Main.numTileColors];
+		public static RenderTarget2D[, ] wallAltTexture = new RenderTarget2D[231, Main.numTileColors];
+		public static bool[, ] wallAltTextureInit = new bool[231, Main.numTileColors];
+		public static bool[, ] wallAltTextureDrawn = new bool[231, Main.numTileColors];
 		public static Texture2D[] tileTexture = new Texture2D[467];
 		public static Texture2D blackTileTexture;
 		public static Texture2D[] wallTexture = new Texture2D[231];
@@ -920,7 +_,7 @@
 		public static Texture2D[] treeTopTexture = new Texture2D[Main.numTreeStyles];
 		public static Texture2D[] treeBranchTexture = new Texture2D[Main.numTreeStyles];
 		public static Texture2D[] woodTexture = new Texture2D[7];
-		public static RenderTarget2D[,] woodAltTexture = new RenderTarget2D[Main.woodTexture.Length, Main.numTileColors];
+		public static RenderTarget2D[, ] woodAltTexture = new RenderTarget2D[Main.woodTexture.Length, Main.numTileColors];
 		public static Texture2D shroomCapTexture;
 		public static Texture2D inventoryBackTexture;
 		public static Texture2D inventoryBack2Texture;
@@ -976,7 +_,7 @@
 		public static Texture2D pumpkingFaceTexture;
 		public static Texture2D dukeFishronTexture;
 		public static Texture2D miniMinotaurTexture;
-		public static Texture2D[,] playerTextures;
+		public static Texture2D[, ] playerTextures;
 		public static bool UseExperimentalFeatures = false;
 		public static string DefaultSeed = "";
 		public static Texture2D[] playerHairTexture = new Texture2D[134];
@@ -1052,7 +_,7 @@
 		public static AudioEngine engine;
 		public static SoundBank soundBank;
 		public static WaveBank waveBank;
-		public static Cue[] music = new Cue[42];
+		public static MusicWrapper[] music = new MusicWrapper[42];
 		public static float[] musicFade = new float[42];
 		public static float musicVolume = 0.75f;
 		public static float ambientVolume = 0.75f;
@@ -1119,11 +_,11 @@
 		public static int[] redBirdCageFrameCounter = new int[Main.cageFrames];
 		public static int[] blueBirdCageFrame = new int[Main.cageFrames];
 		public static int[] blueBirdCageFrameCounter = new int[Main.cageFrames];
-		public static byte[,] butterflyCageMode = new byte[9, Main.cageFrames];
-		public static int[,] butterflyCageFrame = new int[9, Main.cageFrames];
-		public static int[,] butterflyCageFrameCounter = new int[9, Main.cageFrames];
-		public static int[,] scorpionCageFrame = new int[2, Main.cageFrames];
-		public static int[,] scorpionCageFrameCounter = new int[2, Main.cageFrames];
+		public static byte[, ] butterflyCageMode = new byte[9, Main.cageFrames];
+		public static int[, ] butterflyCageFrame = new int[9, Main.cageFrames];
+		public static int[, ] butterflyCageFrameCounter = new int[9, Main.cageFrames];
+		public static int[, ] scorpionCageFrame = new int[2, Main.cageFrames];
+		public static int[, ] scorpionCageFrameCounter = new int[2, Main.cageFrames];
 		public static int[] snailCageFrame = new int[Main.cageFrames];
 		public static int[] snailCageFrameCounter = new int[Main.cageFrames];
 		public static int[] snail2CageFrame = new int[Main.cageFrames];
@@ -1135,15 +_,15 @@
 		public static int[] frogCageFrameCounter = new int[Main.cageFrames];
 		public static int[] mouseCageFrame = new int[Main.cageFrames];
 		public static int[] mouseCageFrameCounter = new int[Main.cageFrames];
-		public static byte[,] jellyfishCageMode = new byte[3, Main.cageFrames];
-		public static int[,] jellyfishCageFrame = new int[3, Main.cageFrames];
-		public static int[,] jellyfishCageFrameCounter = new int[3, Main.cageFrames];
+		public static byte[, ] jellyfishCageMode = new byte[3, Main.cageFrames];
+		public static int[, ] jellyfishCageFrame = new int[3, Main.cageFrames];
+		public static int[, ] jellyfishCageFrameCounter = new int[3, Main.cageFrames];
 		public static int[] wormCageFrame = new int[Main.cageFrames];
 		public static int[] wormCageFrameCounter = new int[Main.cageFrames];
 		public static int[] penguinCageFrame = new int[Main.cageFrames];
 		public static int[] penguinCageFrameCounter = new int[Main.cageFrames];
-		public static int[,] slugCageFrame = new int[3, Main.cageFrames];
-		public static int[,] slugCageFrameCounter = new int[3, Main.cageFrames];
+		public static int[, ] slugCageFrame = new int[3, Main.cageFrames];
+		public static int[, ] slugCageFrameCounter = new int[3, Main.cageFrames];
 		public static int[] grasshopperCageFrame = new int[Main.cageFrames];
 		public static int[] grasshopperCageFrameCounter = new int[Main.cageFrames];
 		public static bool[] tileSand = new bool[467];
@@ -1157,7 +_,7 @@
 		public static int[] backgroundHeight = new int[207];
 		public static bool tilesLoaded = false;
 		public static WorldMap Map = new WorldMap(Main.maxTilesX, Main.maxTilesY);
-		public static Tile[,] tile = new Tile[Main.maxTilesX, Main.maxTilesY];
+		public static Tile[, ] tile = new Tile[Main.maxTilesX, Main.maxTilesY];
 		public static Dust[] dust = new Dust[6001];
 		public static Star[] star = new Star[130];
 		public static Item[] item = new Item[401];
@@ -1166,7 +_,7 @@
 		public static Gore[] gore = new Gore[501];
 		public static Rain[] rain = new Rain[Main.maxRain + 1];
 		public static Projectile[] projectile = new Projectile[1001];
-		public static int[,] projectileIdentity = new int[256, 1001];
+		public static int[, ] projectileIdentity = new int[256, 1001];
 		public static CombatText[] combatText = new CombatText[100];
 		public static ItemText[] itemText = new ItemText[20];
 		public static Chest[] chest = new Chest[1000];
@@ -1311,9 +_,9 @@
 		public static List<WorldFileData> WorldList = new List<WorldFileData>();
 		public static WorldFileData ActiveWorldFileData = new WorldFileData();
 		public static string WorldPath = Main.SavePath + Path.DirectorySeparatorChar + "Worlds";
-		public static string CloudWorldPath = "worlds";
+		public static string CloudWorldPath = "ModLoader/worlds";
 		public static string PlayerPath = Main.SavePath + Path.DirectorySeparatorChar + "Players";
-		public static string CloudPlayerPath = "players";
+		public static string CloudPlayerPath = "ModLoader/players";
 		public static Preferences Configuration = new Preferences(Main.SavePath + Path.DirectorySeparatorChar + "config.json", false, false);
 		public static Preferences InputProfiles = new Preferences(Main.SavePath + Path.DirectorySeparatorChar + "input profiles.json", false, false);
 		public static string[] itemName = new string[3884];
@@ -2036,14 +_,14 @@
 		private int selectedMenu2 = -1;
 		public static int selectedPlayer = 0;
 		public static int selectedWorld = 0;
-		public static int menuMode = 0;
+		public static int menuMode = Interface.loadModsID;
 		public static int menuSkip = 0;
 		private static Item cpItem = new Item();
 		public int textBlinkerCount;
 		public int textBlinkerState;
 		public static string newWorldName = "";
-		private static int[] specX = new int[1000];
-		private static int[] specY = new int[1000];
+		public static int[] specX = new int[1000];
+		public static int[] specY = new int[1000];
 		public static bool HoveringOverAnNPC = false;
 		public static string hoverItemName = "";
 		public static Microsoft.Xna.Framework.Color inventoryBack = new Microsoft.Xna.Framework.Color(220, 220, 220, 220);
@@ -2052,7 +_,7 @@
 		private static int UI_ScreenAnchorX = Main.screenWidth - 800;
 		private static int UIDisplay_ManaPerStar = 20;
 		private static float UIDisplay_LifePerHeart = 20f;
-		private static int rare = 0;
+		public static int rare = 0;
 		public static int hairStart = 0;
 		private static int oldHairStyle;
 		private static Microsoft.Xna.Framework.Color oldHairColor;
@@ -2064,7 +_,7 @@
 		public static Player dresserDummy;
 		private bool _needToSetupDrawInterfaceLayers = true;
 		private List<MethodSequenceListItem> _drawInterfaceLayers;
-		private static GameTime _drawInterfaceGameTime;
+		public static GameTime _drawInterfaceGameTime;
 		private static bool _MouseOversCanClear = false;
 		private static Vector2 _itemIconCacheScreenPosition;
 		private static int _itemIconCacheSelectedItemID;
@@ -2088,6 +_,7 @@
 		protected List<Tuple<int, int, ushort>> DrawWiresSpecialTiles = new List<Tuple<int, int, ushort>>();
 		private static string[] MonolithFilterNames = new string[]
 		{
+
 			"MonolithVortex",
 			"MonolithNebula",
 			"MonolithStardust",
@@ -2095,6 +_,7 @@
 		};
 		private static string[] MonolithSkyNames = new string[]
 		{
+
 			"MonolithVortex",
 			"MonolithNebula",
 			"MonolithStardust",
@@ -2102,12 +_,12 @@
 		};
 		private static float tranSpeed = 0.05f;
 		private static float atmo = 0f;
-		private static float bgScale = 1f;
-		private static int bgW = (int)(1024f * Main.bgScale);
-		private static Microsoft.Xna.Framework.Color backColor = Microsoft.Xna.Framework.Color.White;
-		private static Microsoft.Xna.Framework.Color trueBackColor = Main.backColor;
-		private float screenOff;
-		private float scAdj;
+		internal static float bgScale = 1f;
+		internal static int bgW = (int)(1024f * Main.bgScale);
+		internal static Microsoft.Xna.Framework.Color backColor = Microsoft.Xna.Framework.Color.White;
+		internal static Microsoft.Xna.Framework.Color trueBackColor = Main.backColor;
+		internal float screenOff;
+		internal float scAdj;
 		private float cTop;
 		private static SlotVector<ActiveSound> _trackedSounds = new SlotVector<ActiveSound>(4096);
 
@@ -2141,12 +_,14 @@
 			{
 				return Main.ActiveWorldFileData != null && Main.ActiveWorldFileData.IsExpertMode;
 			}
+
 			set
 			{
 				if (Main.ActiveWorldFileData == null)
 				{
 					return;
 				}
+
 				Main.ActiveWorldFileData.IsExpertMode = value;
 			}
 		}
@@ -2200,6 +_,7 @@
 				{
 					result.Y = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY;
 				}
+
 				return result;
 			}
 		}
@@ -2267,6 +_,8 @@
 				return !Main.instance.GraphicsDevice.IsDisposed && Main.instance.GraphicsDevice.GraphicsDeviceStatus == GraphicsDeviceStatus.Normal;
 			}
 		}
+
+		public static ulong TileFrameSeed => Main._tileFrameSeed;
 
 		public static void FindAnnouncementBoxStatus()
 		{
@@ -2298,6 +_,7 @@
 			{
 				return pos;
 			}
+
 			pos.Y = (float)Main.screenHeight - pos.Y - height;
 			return pos;
 		}
@@ -2308,6 +_,7 @@
 			{
 				return pos;
 			}
+
 			pos.Y = Main.screenHeight - pos.Y - height;
 			return pos;
 		}
@@ -2318,6 +_,7 @@
 			{
 				return box;
 			}
+
 			box.Y = Main.screenHeight - box.Y - box.Height;
 			return box;
 		}
@@ -2350,6 +_,7 @@
 			{
 				Main.itemAnimationsRegistered.Add(index);
 			}
+
 			Main.itemAnimations[index] = animation;
 		}
 
@@ -2359,6 +_,7 @@
 			{
 				Main.itemAnimations[i] = null;
 			}
+
 			Main.itemAnimationsRegistered.Clear();
 			Main.RegisterItemAnimation(3581, new DrawAnimationVertical(4, 4));
 			Main.RegisterItemAnimation(3580, new DrawAnimationVertical(4, 4));
@@ -2376,6 +_,7 @@
 			{
 				return;
 			}
+
 			Main.anglerWhoFinishedToday.Clear();
 			Main.anglerQuestFinished = false;
 			bool flag = NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3 || Main.hardMode || NPC.downedSlimeKing || NPC.downedQueenBee;
@@ -2385,63 +_,80 @@
 				flag2 = false;
 				Main.anglerQuest = Main.rand.Next(Main.anglerQuestItemNetIDs.Length);
 				int num = Main.anglerQuestItemNetIDs[Main.anglerQuest];
+				//patch file: num, flag2
 				if (num == 2454 && (!Main.hardMode || WorldGen.crimson))
 				{
 					flag2 = true;
 				}
+
 				if (num == 2457 && WorldGen.crimson)
 				{
 					flag2 = true;
 				}
+
 				if (num == 2462 && !Main.hardMode)
 				{
 					flag2 = true;
 				}
+
 				if (num == 2463 && (!Main.hardMode || !WorldGen.crimson))
 				{
 					flag2 = true;
 				}
+
 				if (num == 2465 && !Main.hardMode)
 				{
 					flag2 = true;
 				}
+
 				if (num == 2468 && !Main.hardMode)
 				{
 					flag2 = true;
 				}
+
 				if (num == 2471 && !Main.hardMode)
 				{
 					flag2 = true;
 				}
+
 				if (num == 2473 && !Main.hardMode)
 				{
 					flag2 = true;
 				}
+
 				if (num == 2477 && !WorldGen.crimson)
 				{
 					flag2 = true;
 				}
+
 				if (num == 2480 && !Main.hardMode)
 				{
 					flag2 = true;
 				}
+
 				if (num == 2483 && !Main.hardMode)
 				{
 					flag2 = true;
 				}
+
 				if (num == 2484 && !Main.hardMode)
 				{
 					flag2 = true;
 				}
+
 				if (num == 2485 && WorldGen.crimson)
 				{
 					flag2 = true;
 				}
+
 				if ((num == 2476 || num == 2453 || num == 2473) && !flag)
 				{
 					flag2 = true;
 				}
-			}
+
+				ItemLoader.IsAnglerQuestAvailable(num, ref flag2);
+			}
+
 			NetMessage.SendAnglerQuest(-1);
 		}
 
@@ -2463,6 +_,7 @@
 					Main.WorldList.Add(WorldFileData.FromInvalidWorld(files[i], false));
 				}
 			}
+
 			if (SocialAPI.Cloud != null)
 			{
 				List<string> files2 = SocialAPI.Cloud.GetFiles(Regex.Escape(Main.CloudWorldPath) + "/.+\\.wld");
@@ -2479,6 +_,7 @@
 					}
 				}
 			}
+
 			Main.WorldList.Sort(new Comparison<WorldFileData>(Main.WorldListSortMethod));
 		}
 
@@ -2501,6 +_,7 @@
 					Main.PlayerList.Add(fileData);
 				}
 			}
+
 			if (SocialAPI.Cloud != null)
 			{
 				List<string> files2 = SocialAPI.Cloud.GetFiles(Regex.Escape(Main.CloudPlayerPath) + "/.+\\.plr");
@@ -2513,6 +_,7 @@
 					}
 				}
 			}
+
 			Main.PlayerList.Sort(new Comparison<PlayerFileData>(Main.PlayerListSortMethod));
 		}
 
@@ -2557,6 +_,7 @@
 			catch
 			{
 			}
+
 			try
 			{
 				using (FileStream fileStream = new FileStream(Main.SavePath + Path.DirectorySeparatorChar + "servers.dat", FileMode.Create))
@@ -2625,40 +_,48 @@
 			Main.Configuration.Put("UseHeatDistortion", Main.UseHeatDistortion);
 			Main.Configuration.Put("WaveQuality", Main.WaveQuality);
 			Main.Configuration.Put("MouseColor", new Dictionary<string, byte>
-				{
-					{
+			{
+				{
+
 						"R",
 						Main.mouseColor.R
-					},
-					{
+				},
+				{
+
 						"G",
 						Main.mouseColor.G
-					},
-					{
+				},
+				{
+
 						"B",
 						Main.mouseColor.B
-					}
-				});
+				}
+			});
 			Main.Configuration.Put("MouseBorderColor", new Dictionary<string, byte>
-				{
-					{
+			{
+				{
+
 						"R",
 						Main.MouseBorderColor.R
-					},
-					{
+				},
+				{
+
 						"G",
 						Main.MouseBorderColor.G
-					},
-					{
+				},
+				{
+
 						"B",
 						Main.MouseBorderColor.B
-					},
-					{
+				},
+				{
+
 						"A",
 						Main.MouseBorderColor.A
-					}
-				});
+				}
+			});
 			Main.Configuration.Put("QuickLaunch", Main.SkipAssemblyLoad);
+			ModLoader.ModLoader.SaveConfiguration();
 			bool flag = Main.Configuration.Save(true);
 			return flag && PlayerInput.Save();
 		}
@@ -2689,9 +_,11 @@
 				{
 					File.Delete(Main.SavePath + Path.DirectorySeparatorChar + "config.dat");
 				}
+
 				Lighting.LightingThreads = 0;
 				return;
 			}
+
 			Main.Configuration.Load();
 			Main.Configuration.Get<bool>("SmartCursorToggle", ref Main.cSmartCursorToggle);
 			Main.Configuration.Get<bool>("MapEnabled", ref Main.mapEnabled);
@@ -2710,6 +_,7 @@
 			{
 				Main.FavoriteKey = favoriteKey;
 			}
+
 			Main.Configuration.Get<bool>("WindowMaximized", ref Main.screenMaximized);
 			Main.Configuration.Get<bool>("WindowBorderless", ref Main.screenBorderless);
 			Main.PendingBorderlessState = Main.screenBorderless;
@@ -2729,15 +_,18 @@
 					Main.FrameSkipMode = 1;
 				}
 			}
+
 			Main.Configuration.Get<int>("FrameSkipMode", ref Main.FrameSkipMode);
 			if (Main.FrameSkipMode < 0)
 			{
 				Main.FrameSkipMode = 0;
 			}
+
 			if (Main.FrameSkipMode > 2)
 			{
 				Main.FrameSkipMode = 2;
 			}
+
 			Main.Configuration.Get<int>("LightingMode", ref Lighting.lightMode);
 			Main.Configuration.Get<int>("LightingThreads", ref Lighting.LightingThreads);
 			Main.Configuration.Get<float>("Parallax", ref Main.caveParallax);
@@ -2761,10 +_,12 @@
 			{
 				Main.WaveQuality = 3;
 			}
+
 			if (Main.WaveQuality < 0)
 			{
 				Main.WaveQuality = 0;
 			}
+
 			bool fullscreen = false;
 			int preferredBackBufferWidth = Main.graphics.PreferredBackBufferWidth;
 			int preferredBackBufferHeight = Main.graphics.PreferredBackBufferHeight;
@@ -2778,32 +_,39 @@
 			{
 				Main.mouseColor.R = b;
 			}
+
 			if (dictionary.TryGetValue("G", out b))
 			{
 				Main.mouseColor.G = b;
 			}
+
 			if (dictionary.TryGetValue("B", out b))
 			{
 				Main.mouseColor.B = b;
 			}
+
 			dictionary.Clear();
 			Main.Configuration.Get<Dictionary<string, byte>>("MouseBorderColor", ref dictionary);
 			if (dictionary.TryGetValue("R", out b))
 			{
 				Main.MouseBorderColor.R = b;
 			}
+
 			if (dictionary.TryGetValue("G", out b))
 			{
 				Main.MouseBorderColor.G = b;
 			}
+
 			if (dictionary.TryGetValue("B", out b))
 			{
 				Main.MouseBorderColor.B = b;
 			}
+
 			if (dictionary.TryGetValue("A", out b))
 			{
 				Main.MouseBorderColor.A = b;
 			}
+
 			Main.Configuration.Get<bool>("QuickLaunch", ref Main.SkipAssemblyLoad);
 			int num = -1;
 			Main.Configuration.Get<int>("LockOnPriority", ref num);
@@ -2811,17 +_,20 @@
 			{
 				num = 0;
 			}
+
 			if (num > 2)
 			{
 				num = 2;
 			}
+
 			LockOnHelper.UseMode = (LockOnHelper.LockOnMode)num;
 			if (LockOnHelper.UseMode == LockOnHelper.LockOnMode.FocusTarget)
 			{
 				LockOnHelper.UseMode = LockOnHelper.LockOnMode.ThreeDS;
 			}
+
 			Main.Configuration.Get<bool>("InvisibleCursorForGamepad", ref Main.InvisibleCursorForGamepad);
-#if CLIENT && WINDOWS
+			#if CLIENT && WINDOWS
 			Form form = (Form)Control.FromHandle(Main.instance.Window.Handle);
 			if (Main.screenBorderless)
 			{
@@ -2837,7 +_,8 @@
 			{
 				form.FormBorderStyle = FormBorderStyle.Sizable;
 			}
-#endif
+
+			#endif
 			Main.SetDisplayMode(preferredBackBufferWidth, preferredBackBufferHeight, fullscreen);
 			Main.Configuration.Get<bool>("SettingsUnlock_WorldEvil", ref Main.SettingsUnlock_WorldEvil);
 			Main.Configuration.Get<bool>("SettingsEnabled_MinersWobble", ref Main.SettingsEnabled_MinersWobble);
@@ -2847,10 +_,12 @@
 			{
 				Lighting.LightingThreads = 0;
 			}
+
 			if (num2 <= 147)
 			{
 				Main.terrariasFixedTiming = !Main.terrariasFixedTiming;
 			}
+
 			if (num2 <= 162)
 			{
 				bool flag2 = false;
@@ -2865,6 +_,7 @@
 					Main.mouseColor.B = Main.Configuration.Get<byte>("MouseColorB", Main.mouseColor.B);
 				}
 			}
+
 			if (num2 <= 162)
 			{
 				Main.Configuration.Get<string>("KeyUp", ref Main.cUp);
@@ -2968,6 +_,8 @@
 					Main.cMapAlphaDown
 				};
 			}
+
+			ModLoader.ModLoader.LoadConfiguration();
 			PlayerInput.Load();
 			if (num2 < 165)
 			{
@@ -2979,6 +_,7 @@
 				{
 				}
 			}
+
 			if (num2 != 188)
 			{
 				Main.SaveSettings();
@@ -3002,6 +_,7 @@
 								{
 									Main.clientUUID = binaryReader.ReadString();
 								}
+
 								bool flag = binaryReader.ReadBoolean();
 								Main.mouseColor.R = binaryReader.ReadByte();
 								Main.mouseColor.G = binaryReader.ReadByte();
@@ -3011,6 +_,7 @@
 								{
 									Main.ambientVolume = binaryReader.ReadSingle();
 								}
+
 								Main.musicVolume = binaryReader.ReadSingle();
 								Main.cUp = binaryReader.ReadString();
 								Main.cDown = binaryReader.ReadString();
@@ -3022,60 +_,72 @@
 								{
 									Main.cInv = binaryReader.ReadString();
 								}
+
 								if (num >= 12)
 								{
 									Main.cHeal = binaryReader.ReadString();
 									Main.cMana = binaryReader.ReadString();
 									Main.cBuff = binaryReader.ReadString();
 								}
+
 								if (num >= 13)
 								{
 									Main.cHook = binaryReader.ReadString();
 								}
+
 								Main.caveParallax = binaryReader.ReadSingle();
 								if (num >= 2)
 								{
 									Main.terrariasFixedTiming = binaryReader.ReadBoolean();
 								}
+
 								if (num >= 91 && binaryReader.ReadBoolean())
 								{
-#if CLIENT && WINDOWS
+									#if CLIENT && WINDOWS
 									Form form = (Form)Control.FromHandle(base.Window.Handle);
 									form.WindowState = FormWindowState.Maximized;
-#endif
-								}
+									#endif
+								}
+
 								if (num >= 4)
 								{
 									int width = binaryReader.ReadInt32();
 									int height = binaryReader.ReadInt32();
 									Main.SetDisplayMode(width, height, flag);
 								}
+
 								if (num >= 8)
 								{
 									Main.autoSave = binaryReader.ReadBoolean();
 								}
+
 								if (num >= 9)
 								{
 									Main.autoPause = binaryReader.ReadBoolean();
 								}
+
 								if (num >= 19)
 								{
 									Main.showItemText = binaryReader.ReadBoolean();
 								}
+
 								if (num >= 30)
 								{
 									Main.cTorch = binaryReader.ReadString();
 									Lighting.lightMode = (int)binaryReader.ReadByte();
 									Main.qaStyle = (int)binaryReader.ReadByte();
 								}
+
 								if (num >= 37)
 								{
 									Main.BackgroundEnabled = binaryReader.ReadBoolean();
 								}
+
 								if (num >= 39)
 								{
 									Lang.lang = (int)binaryReader.ReadByte();
 								}
+
 								if (num >= 46)
 								{
 									Main.mapEnabled = binaryReader.ReadBoolean();
@@ -3086,6 +_,7 @@
 									Main.cMapAlphaUp = binaryReader.ReadString();
 									Main.cMapAlphaDown = binaryReader.ReadString();
 								}
+
 								if (num >= 89)
 								{
 									Lighting.LightingThreads = binaryReader.ReadInt32();
@@ -3094,25 +_,31 @@
 										Lighting.LightingThreads = Environment.ProcessorCount - 1;
 									}
 								}
+
 								if (num >= 100)
 								{
 									Main.cSmart = binaryReader.ReadString();
 									Main.cSmartCursorToggle = binaryReader.ReadBoolean();
 								}
+
 								if (num >= 107)
 								{
 									Main.invasionProgressMode = (int)binaryReader.ReadByte();
 								}
+
 								if (num >= 111)
 								{
 									Main.placementPreview = binaryReader.ReadBoolean();
 								}
+
 								if (num >= 111)
 								{
 									Main.placementPreview = binaryReader.ReadBoolean();
 								}
+
 								Main.SetFullScreen(flag);
 							}
+
 							binaryReader.Close();
 						}
 					}
@@ -3130,9 +_,13 @@
 				FileUtilities.Delete(Main.PlayerList[i].Path, Main.PlayerList[i].IsCloudSave);
 				FileUtilities.Delete(Main.PlayerList[i].Path + ".bak", Main.PlayerList[i].IsCloudSave);
 			}
+
+			//patch file
 			catch
 			{
 			}
+
+			PlayerIO.ErasePlayer(Main.PlayerList[i].Path, Main.PlayerList[i].IsCloudSave);
 			try
 			{
 				string path = Main.PlayerList[i].Path.Substring(0, Main.PlayerList[i].Path.Length - 4);
@@ -3140,6 +_,7 @@
 				{
 					Directory.Delete(path, true);
 				}
+
 				Main.LoadPlayers();
 			}
 			catch
@@ -3153,18 +_,20 @@
 			{
 				if (!Main.WorldList[i].IsCloudSave)
 				{
-#if WINDOWS
+					#if WINDOWS
 					FileOperationAPIWrapper.MoveToRecycleBin(Main.WorldList[i].Path);
 					FileOperationAPIWrapper.MoveToRecycleBin(Main.WorldList[i].Path + ".bak");
-#else
+					#else
 					File.Delete(Main.WorldList[i].Path);
 					File.Delete(Main.WorldList[i].Path + ".bak");
-#endif
+					#endif
 				}
 				else if (SocialAPI.Cloud != null)
 				{
 					SocialAPI.Cloud.Delete(Main.WorldList[i].Path);
 				}
+
+				WorldIO.EraseWorld(Main.WorldList[i].Path, Main.WorldList[i].IsCloudSave);
 				Main.LoadWorlds();
 			}
 			catch
@@ -3191,50 +_,55 @@
 				{
 					str = "-";
 				}
+
 				text += str;
 			}
+
 			string text3 = cloudSave ? Main.CloudPlayerPath : Main.PlayerPath;
 			string path = string.Concat(new object[]
-				{
-					text3,
+			{
+				text3,
 					Path.DirectorySeparatorChar,
 					text,
 					".plr"
-				});
+			});
 			string fullPath = FileUtilities.GetFullPath(path, cloudSave);
 			if (fullPath.StartsWith("\\\\.\\", StringComparison.Ordinal))
 			{
 				text += "_";
 			}
+
 			if (FileUtilities.Exists(string.Concat(new object[]
-					{
-						text3,
+			{
+				text3,
 						Path.DirectorySeparatorChar,
 						text,
 						".plr"
-					}), cloudSave))
+			}), cloudSave))
 			{
 				int num = 2;
 				while (FileUtilities.Exists(string.Concat(new object[]
-						{
-							text3,
+				{
+					text3,
 							Path.DirectorySeparatorChar,
 							text,
 							num,
 							".plr"
-						}), cloudSave))
+				}), cloudSave))
 				{
 					num++;
 				}
+
 				text += num;
 			}
+
 			return string.Concat(new object[]
-				{
-					text3,
+			{
+				text3,
 					Path.DirectorySeparatorChar,
 					text,
 					".plr"
-				});
+			});
 		}
 
 		public static string GetWorldPathFromName(string worldName, bool cloudSave)
@@ -3256,50 +_,55 @@
 				{
 					str = "-";
 				}
+
 				text += str;
 			}
+
 			string text3 = cloudSave ? Main.CloudWorldPath : Main.WorldPath;
 			string path = string.Concat(new object[]
-				{
-					text3,
+			{
+				text3,
 					Path.DirectorySeparatorChar,
 					text,
 					".wld"
-				});
+			});
 			string fullPath = FileUtilities.GetFullPath(path, cloudSave);
 			if (fullPath.StartsWith("\\\\.\\", StringComparison.Ordinal))
 			{
 				text += "_";
 			}
+
 			if (FileUtilities.Exists(string.Concat(new object[]
-					{
-						text3,
+			{
+				text3,
 						Path.DirectorySeparatorChar,
 						text,
 						".wld"
-					}), cloudSave))
+			}), cloudSave))
 			{
 				int num = 2;
 				while (FileUtilities.Exists(string.Concat(new object[]
-						{
-							text3,
+				{
+					text3,
 							Path.DirectorySeparatorChar,
 							text,
 							num,
 							".wld"
-						}), cloudSave))
+				}), cloudSave))
 				{
 					num++;
 				}
+
 				text += num;
 			}
+
 			return string.Concat(new object[]
-				{
-					text3,
+			{
+				text3,
 					Path.DirectorySeparatorChar,
 					text,
 					".wld"
-				});
+			});
 		}
 
 		public void autoCreate(string worldSize)
@@ -3309,6 +_,7 @@
 				Main.autoGen = false;
 				return;
 			}
+
 			if (worldSize == "1")
 			{
 				Main.maxTilesX = 4200;
@@ -3316,6 +_,7 @@
 				Main.autoGen = true;
 				return;
 			}
+
 			if (worldSize == "2")
 			{
 				Main.maxTilesX = 6300;
@@ -3323,6 +_,7 @@
 				Main.autoGen = true;
 				return;
 			}
+
 			if (worldSize == "3")
 			{
 				Main.maxTilesX = 8400;
@@ -3352,6 +_,7 @@
 								string file = text.Substring(6);
 								Main.ActiveWorldFileData = WorldFile.GetAllMetadata(file, false);
 							}
+
 							if (text.Length > 5 && text.Substring(0, 5).ToLower() == "port=")
 							{
 								string value = text.Substring(5);
@@ -3364,6 +_,7 @@
 								{
 								}
 							}
+
 							if (text.Length > 11 && text.Substring(0, 11).ToLower() == "maxplayers=")
 							{
 								string value2 = text.Substring(11);
@@ -3376,6 +_,7 @@
 								{
 								}
 							}
+
 							if (text.Length > 11 && text.Substring(0, 9).ToLower() == "priority=" && !Program.LaunchParameters.ContainsKey("-forcepriority"))
 							{
 								string value3 = text.Substring(9);
@@ -3415,36 +_,48 @@
 								{
 								}
 							}
+
 							if (text.Length > 9 && text.Substring(0, 9).ToLower() == "password=")
 							{
 								string serverPassword = text.Substring(9);
 								Netplay.ServerPassword = serverPassword;
 							}
+
 							if (text.Length > 5 && text.Substring(0, 5).ToLower() == "motd=")
 							{
 								string text2 = text.Substring(5);
 								Main.motd = text2;
 							}
+
 							if (text.Length > 5 && text.Substring(0, 5).ToLower() == "lang=")
 							{
 								string value4 = text.Substring(5);
 								Lang.lang = Convert.ToInt32(value4);
 							}
+
 							if (text.Length >= 10 && text.Substring(0, 10).ToLower() == "worldpath=")
 							{
 								string worldPath = text.Substring(10);
 								Main.WorldPath = worldPath;
 							}
+
 							if (text.Length >= 10 && text.Substring(0, 10).ToLower() == "worldname=")
 							{
 								string text3 = text.Substring(10);
 								Main.worldName = text3;
 							}
+
+							if (text.Length >= 8 && text.Substring(0, 8).ToLower() == "modpath=")
+							{
+								ModLoader.ModLoader.modPath = text.Substring(8);
+							}
+
 							if (text.Length > 8 && text.Substring(0, 8).ToLower() == "banlist=")
 							{
 								string banFilePath = text.Substring(8);
 								Netplay.BanFilePath = banFilePath;
 							}
+
 							if (text.Length > 11 && text.Substring(0, 11).ToLower() == "difficulty=")
 							{
 								string a = text.Substring(11);
@@ -3457,6 +_,7 @@
 									Main.expertMode = true;
 								}
 							}
+
 							if (text.Length > 11 && text.Substring(0, 11).ToLower() == "autocreate=")
 							{
 								string a2 = text.Substring(11);
@@ -3483,6 +_,7 @@
 									Main.autoGen = true;
 								}
 							}
+
 							if (text.Length > 7 && text.Substring(0, 7).ToLower() == "secure=")
 							{
 								string a3 = text.Substring(7);
@@ -3491,6 +_,7 @@
 									Netplay.spamCheck = true;
 								}
 							}
+
 							if (text.Length > 5 && text.Substring(0, 5).ToLower() == "upnp=")
 							{
 								string a4 = text.Substring(5);
@@ -3499,6 +_,7 @@
 									Netplay.UseUPNP = false;
 								}
 							}
+
 							if (text.Length > 10 && text.Substring(0, 10).ToLower() == "npcstream=")
 							{
 								string value5 = text.Substring(10);
@@ -3579,18 +_,20 @@
 			{
 				string text = "terraria" + Main.rand.Next(2147483647);
 				Console.Title = text;
-#if WINDOWS
+				#if WINDOWS
 				IntPtr intPtr = Main.FindWindow(null, text);
 				if (intPtr != IntPtr.Zero)
 				{
 					Main.ShowWindow(intPtr, 0);
 				}
-#endif
+
+				#endif
 			}
 			else
 			{
-				Console.Title = "Terraria Server " + Main.versionNumber2;
-			}
+				Console.Title = "Terraria Server " + Main.versionNumber2 + " - " + ModLoader.ModLoader.versionedName;
+			}
+
 			Main.dedServ = true;
 			Main.showSplash = false;
 			this.Initialize();
@@ -3598,25 +_,28 @@
 			{
 				Lang.setLang(true);
 			}
+
 			Lang.setLang(false);
+			ModLoader.ModLoader.do_Load(null);
 			while (Main.worldPathName == null || Main.worldPathName == "")
 			{
 				bool flag = true;
 				while (flag)
 				{
 					Main.LoadWorlds();
-					Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2));
+					Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2) + " - " + ModLoader.ModLoader.versionedName);
 					Console.WriteLine("");
 					for (int i = 0; i < Main.WorldList.Count; i++)
 					{
 						Console.WriteLine(string.Concat(new object[]
-								{
-									i + 1,
+						{
+							i + 1,
 									'\t',
 									'\t',
 									Main.WorldList[i].Name
-								}));
-					}
+						}));
+					}
+
 					string text2 = Language.GetTextValue("CLI.NewWorld_Command");
 					string text3 = Language.GetTextValue("CLI.DeleteWorld_Example");
 					int num = (Math.Max(Main.newWorldName.Length, text3.Length) + 1) / 8;
@@ -3624,6 +_,8 @@
 					text3 = text3 + new string('\t', num - text3.Length / 8) + Language.GetTextValue("CLI.DeleteWorld_Description");
 					Console.WriteLine(text2);
 					Console.WriteLine(text3);
+					Console.WriteLine("m\t\tMods Menu");
+					Console.WriteLine("b\t\tMod Browser");
 					Console.WriteLine("");
 					Console.Write(Language.GetTextValue("CLI.ChooseWorld"));
 					string text4 = Console.ReadLine();
@@ -3631,6 +_,7 @@
 					{
 						text4 = "";
 					}
+
 					try
 					{
 						Console.Clear();
@@ -3638,6 +_,7 @@
 					catch
 					{
 					}
+
 					if (text4.StartsWith(Language.GetTextValue("CLI.DeleteWorld_Command") + " "))
 					{
 						try
@@ -3660,6 +_,7 @@
 						catch
 						{
 						}
+
 						try
 						{
 							Console.Clear();
@@ -3670,6 +_,7 @@
 							continue;
 						}
 					}
+
 					if (text4 == "n" || text4 == "N")
 					{
 						bool flag2 = true;
@@ -3708,6 +_,7 @@
 							catch
 							{
 							}
+
 							try
 							{
 								Console.Clear();
@@ -3716,6 +_,7 @@
 							{
 							}
 						}
+
 						flag2 = true;
 						while (flag2)
 						{
@@ -3743,6 +_,7 @@
 							catch
 							{
 							}
+
 							try
 							{
 								Console.Clear();
@@ -3751,6 +_,7 @@
 							{
 							}
 						}
+
 						if (Main.SettingsUnlock_WorldEvil)
 						{
 							flag2 = true;
@@ -3786,6 +_,7 @@
 								catch
 								{
 								}
+
 								try
 								{
 									Console.Clear();
@@ -3795,6 +_,7 @@
 								}
 							}
 						}
+
 						flag2 = true;
 						while (flag2)
 						{
@@ -3806,6 +_,7 @@
 							{
 								flag2 = false;
 							}
+
 							try
 							{
 								Console.Clear();
@@ -3814,6 +_,7 @@
 							{
 							}
 						}
+
 						string text6 = "";
 						flag2 = Main.UseSeedUI;
 						while (flag2)
@@ -3830,6 +_,7 @@
 							{
 								text6 = "";
 							}
+
 							try
 							{
 								Console.Clear();
@@ -3838,6 +_,7 @@
 							{
 							}
 						}
+
 						Main.worldName = Main.newWorldName;
 						Main.ActiveWorldFileData = WorldFile.CreateMetadata(Main.worldName, SocialAPI.Cloud != null && SocialAPI.Cloud.EnabledByDefault, Main.expertMode);
 						text6 = text6.Trim();
@@ -3849,6 +_,7 @@
 						{
 							Main.ActiveWorldFileData.SetSeed(text6);
 						}
+
 						Main.menuMode = 10;
 						Main.serverGenLock = true;
 						GenerationProgress generationProgress = new GenerationProgress();
@@ -3862,6 +_,7 @@
 								Console.WriteLine(Main.statusText);
 							}
 						}
+
 						try
 						{
 							Console.Clear();
@@ -3871,12 +_,14 @@
 						{
 							goto IL_783;
 						}
+
 						goto IL_726;
 						IL_783:
 						if (!Main.serverGenLock)
 						{
 							continue;
 						}
+
 						IL_726:
 						Main.statusText = string.Format("{0:0.0%} - " + generationProgress.Message + " - {1:0.0%}", generationProgress.TotalProgress, generationProgress.Value);
 						if (Main.oldStatusText != Main.statusText)
@@ -3885,12 +_,24 @@
 							Console.WriteLine(Main.statusText);
 							goto IL_783;
 						}
+
 						goto IL_783;
 					}
+					else if (text4 == "m" || text4 == "M")
+					{
+						Interface.ServerModMenu();
+						continue;
+					}
+					else if (text4 == "b" || text4 == "b")
+					{
+						Interface.ServerModBrowserMenu();
+						continue;
+					}
 					else
 					{
 						try
 						{
+							//patch file
 							int num6 = Convert.ToInt32(text4);
 							num6--;
 							if (num6 >= 0 && num6 < Main.WorldList.Count)
@@ -3908,17 +_,20 @@
 										{
 											text7 = "8";
 										}
+
 										int num7 = Convert.ToInt32(text7);
 										if (num7 <= 255 && num7 >= 1)
 										{
 											Main.maxNetPlayers = num7;
 											flag3 = false;
 										}
+
 										flag3 = false;
 									}
 									catch
 									{
 									}
+
 									try
 									{
 										Console.Clear();
@@ -3927,6 +_,7 @@
 									{
 									}
 								}
+
 								flag3 = true;
 								while (flag3)
 								{
@@ -3940,6 +_,7 @@
 										{
 											text8 = "7777";
 										}
+
 										int num8 = Convert.ToInt32(text8);
 										if (num8 <= 65535)
 										{
@@ -3950,6 +_,7 @@
 									catch
 									{
 									}
+
 									try
 									{
 										Console.Clear();
@@ -3958,6 +_,7 @@
 									{
 									}
 								}
+
 								flag3 = true;
 								while (flag3)
 								{
@@ -3981,6 +_,7 @@
 									catch
 									{
 									}
+
 									try
 									{
 										Console.Clear();
@@ -3989,6 +_,7 @@
 									{
 									}
 								}
+
 								Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2));
 								Console.WriteLine("");
 								Console.Write(Language.GetTextValue("CLI.EnterServerPassword"));
@@ -4010,6 +_,7 @@
 					}
 				}
 			}
+
 			try
 			{
 				Console.Clear();
@@ -4017,6 +_,7 @@
 			catch
 			{
 			}
+
 			WorldGen.serverLoadWorld();
 			Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber));
 			Console.WriteLine("");
@@ -4026,12 +_,17 @@
 				{
 					Main.statusText = string.Format("{0:0.0%} - " + Main.AutogenProgress.Message + " - {1:0.0%}", Main.AutogenProgress.TotalProgress, Main.AutogenProgress.Value);
 				}
+
 				if (Main.oldStatusText != Main.statusText)
 				{
 					Main.oldStatusText = Main.statusText;
 					Console.WriteLine(Main.statusText);
 				}
 			}
+
+			//run one tick to JIT all the game content now rather than when a player connects
+			Console.WriteLine("Running one update...");
+			Update(new GameTime());
 			try
 			{
 				Console.Clear();
@@ -4039,6 +_,7 @@
 			catch
 			{
 			}
+
 			Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber));
 			Console.WriteLine("");
 			Console.WriteLine(Language.GetTextValue("CLI.ListeningOnPort", Netplay.ListenPort));
@@ -4050,50 +_,43 @@
 			{
 				Main.startDedInput();
 			}
+
 			stopwatch.Start();
-			double num9 = 16.666666666666668;
-			double num10 = 0.0;
-			int num11 = 0;
-			Stopwatch stopwatch2 = new Stopwatch();
-			stopwatch2.Start();
+			double delta = 1000 / 60D;
+			double target = delta;
 			while (!Netplay.disconnect)
 			{
-				double totalMilliseconds = stopwatch.Elapsed.TotalMilliseconds;
-				if (totalMilliseconds + num10 >= num9)
-				{
-					num11++;
-					num10 += totalMilliseconds - num9;
-					stopwatch.Reset();
-					stopwatch.Start();
+				{
 					if (Main.oldStatusText != Main.statusText)
 					{
 						Main.oldStatusText = Main.statusText;
 						Console.WriteLine(Main.statusText);
 					}
+
 					if (Netplay.anyClients)
 					{
 						this.Update(new GameTime());
 					}
+					else
+					{
+						Netplay.OnUpdate();
+					}
+
 					if (Main.OnTick != null)
 					{
 						Main.OnTick();
 					}
-					double num12 = stopwatch.Elapsed.TotalMilliseconds + num10;
-					if (num12 < num9)
-					{
-						int num13 = (int)(num9 - num12) - 1;
-						if (num13 > 1)
-						{
-							Thread.Sleep(num13 - 1);
-							if (!Netplay.anyClients)
-							{
-								num10 = 0.0;
-								Thread.Sleep(10);
-							}
-						}
-					}
-				}
-				Thread.Sleep(0);
+
+					double now = stopwatch.ElapsedMilliseconds;
+					double remaining = target - now;
+					target += delta; //new target
+					if (target < now) //can't catch up, reset target
+					{
+						target = now + delta;
+					}
+
+					Thread.Sleep(Math.Max((int)remaining, 0));
+				}
 			}
 		}
 
@@ -4106,6 +_,7 @@
 				Main.npcName[i] = Lang.npcName(nPC.netID, false);
 				Main.npcNameEnglish[i] = Lang.npcName(nPC.netID, true);
 			}
+
 			Projectile projectile = new Projectile();
 			for (int j = 0; j < 714; j++)
 			{
@@ -4135,6 +_,7 @@
 						Console.WriteLine("");
 						List<string> list = new List<string>
 						{
+
 							"Help",
 							"Playing",
 							"Clear",
@@ -4162,6 +_,7 @@
 						{
 							list.Add("Seed");
 						}
+
 						int num = 0;
 						for (int i = 0; i < list.Count; i++)
 						{
@@ -4171,13 +_,23 @@
 								num = text3.Length;
 							}
 						}
+
+						var modHelpList = CommandManager.GetHelp(CommandType.Console);
+						foreach (var entry in modHelpList)
+							if (entry.Item1.Length > num)
+								num = entry.Item1.Length;
+
 						int num2 = (num + 1) / 8;
 						for (int j = 0; j < list.Count; j++)
 						{
 							string text4 = Language.Exists("CLI." + list[j] + "_Example") ? Language.GetTextValue("CLI." + list[j] + "_Example") : Language.GetTextValue("CLI." + list[j] + "_Command");
 							Console.WriteLine(text4 + new string('\t', num2 - text4.Length / 8) + Language.GetTextValue("CLI." + list[j] + "_Description"));
 						}
-					}
+
+						foreach (var entry in modHelpList)
+							Console.WriteLine(entry.Item1 + new string('\t', num2 - entry.Item1.Length / 8) + entry.Item2);
+					}
+					else if (CommandManager.HandleCommand(text, new ConsoleCommandCaller())) {}
 					else if (text == Language.GetTextValue("CLI.Settle_Command"))
 					{
 						if (!Liquid.panicMode)
@@ -4249,6 +_,7 @@
 						{
 							num3 += 54000.0;
 						}
+
 						num3 = num3 / 86400.0 * 24.0;
 						double num4 = 7.5;
 						num3 = num3 - num4 - 12.0;
@@ -4256,10 +_,12 @@
 						{
 							num3 += 24.0;
 						}
+
 						if (num3 >= 12.0)
 						{
 							text5 = "PM";
 						}
+
 						int num5 = (int)num3;
 						double num6 = num3 - (double)num5;
 						num6 = (double)((int)(num6 * 60.0));
@@ -4268,22 +_,25 @@
 						{
 							text6 = "0" + text6;
 						}
+
 						if (num5 > 12)
 						{
 							num5 -= 12;
 						}
+
 						if (num5 == 0)
 						{
 							num5 = 12;
 						}
+
 						Console.WriteLine(Language.GetTextValue("CLI.Time", string.Concat(new object[]
-									{
-										num5,
+						{
+							num5,
 										":",
 										text6,
 										" ",
 										text5
-									})));
+						})));
 					}
 					else if (text == Language.GetTextValue("CLI.MaxPlayers_Command"))
 					{
@@ -4295,7 +_,7 @@
 					}
 					else if (text == Language.GetTextValue("CLI.Version_Command"))
 					{
-						Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber));
+						Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber) + " - " + ModLoader.ModLoader.versionedName);
 					}
 					else
 					{
@@ -4311,6 +_,7 @@
 								continue;
 							}
 						}
+
 						if (text == Language.GetTextValue("CLI.Playing_Command"))
 						{
 							int num7 = 0;
@@ -4320,14 +_,15 @@
 								{
 									num7++;
 									Console.WriteLine(string.Concat(new object[]
-											{
-												Main.player[k].name,
+									{
+										Main.player[k].name,
 												" (",
 												Netplay.Clients[k].Socket.GetRemoteAddress(),
 												")"
-											}));
-								}
-							}
+									}));
+								}
+							}
+
 							if (num7 == 0)
 							{
 								Console.WriteLine(Language.GetTextValue("CLI.NoPlayers"));
@@ -4485,6 +_,7 @@
 					NetMessage.SendData(51, -1, -1, "", Main.myPlayer, 3f, 0f, 0f, 0, 0, 0);
 					return;
 				}
+
 				Main.fastForwardTime = true;
 				Main.sundialCooldown = 8;
 				NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
@@ -4498,30 +_,31 @@
 				Main.dayRate = 60;
 				return;
 			}
+
 			Main.dayRate = 1;
 		}
 
 		public Main()
 		{
 			Main.instance = this;
-#if CLIENT
+			#if CLIENT
 			Main.graphics = new GraphicsDeviceManager((Game)this);
 			base.Content.RootDirectory = "Content";
-#endif
+			#endif
 		}
 
 		protected void SetTitle()
 		{
-#if CLIENT
+			#if CLIENT
 			Main._cachedTitle = Lang.title();
 			base.Window.Title = Main._cachedTitle;
-#endif
+			#endif
 		}
 
 		public static void InitLifeBytes()
 		{
 			NPC nPC = new NPC();
-			for (int i = -65; i < 580; i++)
+			for (int i = -65; i < NPCLoader.NPCCount; i++)
 			{
 				if (i != 0)
 				{
@@ -4572,9 +_,9 @@
 
 		protected override void Initialize()
 		{
-#if SERVER
+			#if SERVER
 			Main.netMode = 2;
-#endif
+			#endif
 			Main.LocalFavoriteData.Load();
 			Main.CloudFavoritesData.Load();
 			Main.FindAnnouncementBoxStatus();
@@ -4589,14 +_,14 @@
 			TileEntity.InitializeAll();
 			Projectile.InitializeStaticThings();
 			Main.InitializeItemAnimations();
-#if CLIENT
+			#if CLIENT
 			Lighting.Initialize(false);
 			MapHelper.Initialize();
 			TimeLogger.Initialize();
-#else
+			#else
 			Mount.Initialize();
 			Minecart.Initialize();
-#endif
+			#endif
 			WorldGen.RandomizeBackgrounds();
 			WorldGen.RandomizeCaveBackgrounds();
 			WorldGen.RandomizeMoonState();
@@ -4607,6 +_,7 @@
 			{
 				Main.projFrames[i] = 1;
 			}
+
 			Main.projFrames[706] = 8;
 			Main.projFrames[712] = 8;
 			Main.projFrames[663] = 7;
@@ -4980,6 +_,7 @@
 			{
 				Main.buffNoSave[j] = true;
 			}
+
 			Main.buffNoTimeDisplay[19] = true;
 			Main.buffNoTimeDisplay[27] = true;
 			Main.buffNoTimeDisplay[28] = true;
@@ -5119,6 +_,7 @@
 			{
 				Main.npcCatchable[k] = false;
 			}
+
 			Main.npcCatchable[46] = true;
 			Main.npcCatchable[55] = true;
 			Main.npcCatchable[74] = true;
@@ -5153,6 +_,7 @@
 			{
 				Main.npcCatchable[l] = true;
 			}
+
 			Main.SetTileValue();
 			Main.tileSpelunker[6] = true;
 			Main.tileSpelunker[7] = true;
@@ -5397,6 +_,7 @@
 				Main.tileLavaDeath[m] = true;
 				Main.tileNoSunLight[m] = false;
 			}
+
 			Main.tileSolid[284] = true;
 			Main.tileBlockLight[284] = true;
 			Main.tileSolid[346] = true;
@@ -5633,6 +_,7 @@
 					Main.tileShine2[n] = true;
 				}
 			}
+
 			Main.tileFrameImportant[269] = true;
 			Main.tileFrameImportant[390] = true;
 			Main.tileNoAttach[390] = true;
@@ -5654,6 +_,7 @@
 			{
 				Main.wallHouse[num] = true;
 			}
+
 			Main.wallHouse[146] = true;
 			Main.wallHouse[147] = true;
 			Main.wallHouse[149] = true;
@@ -5780,6 +_,7 @@
 			{
 				Main.wallDungeon[num2] = false;
 			}
+
 			Main.wallDungeon[7] = true;
 			Main.wallDungeon[8] = true;
 			Main.wallDungeon[9] = true;
@@ -5795,10 +_,12 @@
 				Main.recentIP[num3] = "";
 				Main.recentPort[num3] = 0;
 			}
+
 			if (Main.rand == null)
 			{
 				Main.rand = new UnifiedRandom((int)DateTime.Now.Ticks);
 			}
+
 			this.SetTitle();
 			Main.lo = Main.rand.Next(6);
 			Main.critterCage = true;
@@ -5806,6 +_,7 @@
 			{
 				Main.CritterCages();
 			}
+
 			Main.critterCage = false;
 			Main.tileBrick[1] = true;
 			Main.tileBrick[54] = true;
@@ -6670,6 +_,7 @@
 					Main.tileObsidianKill[num5] = true;
 				}
 			}
+
 			Main.tileObsidianKill[77] = true;
 			Main.tileObsidianKill[78] = true;
 			Main.tileObsidianKill[82] = true;
@@ -6748,6 +_,7 @@
 					Main.wallBlend[num6] = num6;
 				}
 			}
+
 			Main.wallBlend[65] = 63;
 			Main.wallBlend[66] = 63;
 			Main.wallBlend[68] = 63;
@@ -6811,9 +_,11 @@
 				{
 					Main.tileNoSunLight[num7] = true;
 				}
+
 				Main.tileFrame[num7] = 0;
 				Main.tileFrameCounter[num7] = 0;
 			}
+
 			Main.tileNoSunLight[379] = false;
 			Main.tileNoSunLight[54] = false;
 			Main.tileNoSunLight[328] = false;
@@ -6827,48 +_,59 @@
 			{
 				this.menuItemScale[num8] = 0.8f;
 			}
+
 			for (int num9 = 0; num9 < 6001; num9++)
 			{
 				Main.dust[num9] = new Dust();
 				Main.dust[num9].dustIndex = num9;
 			}
+
 			for (int num10 = 0; num10 < 401; num10++)
 			{
 				Main.item[num10] = new Item();
 			}
+
 			for (int num11 = 0; num11 < 201; num11++)
 			{
 				Main.npc[num11] = new NPC();
 				Main.npc[num11].whoAmI = num11;
 			}
+
 			for (int num12 = 0; num12 < 256; num12++)
 			{
 				Main.player[num12] = new Player();
 			}
+
 			for (int num13 = 0; num13 < 1001; num13++)
 			{
 				Main.projectile[num13] = new Projectile();
 			}
+
 			for (int num14 = 0; num14 < 501; num14++)
 			{
 				Main.gore[num14] = new Gore();
 			}
+
 			for (int num15 = 0; num15 < Main.maxRain + 1; num15++)
 			{
 				Main.rain[num15] = new Rain();
 			}
+
 			for (int num16 = 0; num16 < 200; num16++)
 			{
 				Main.cloud[num16] = new Cloud();
 			}
+
 			for (int num17 = 0; num17 < 100; num17++)
 			{
 				Main.combatText[num17] = new CombatText();
 			}
+
 			for (int num18 = 0; num18 < 20; num18++)
 			{
 				Main.itemText[num18] = new ItemText();
 			}
+
 			int num19 = 0;
 			while (num19 < 3884)
 			{
@@ -6879,14 +_,17 @@
 				{
 					Item.headType[item.headSlot] = item.type;
 				}
+
 				if (item.bodySlot > 0)
 				{
 					Item.bodyType[item.bodySlot] = item.type;
 				}
+
 				if (item.legSlot > 0)
 				{
 					Item.legType[item.legSlot] = item.type;
 				}
+
 				int type = item.type;
 				if (type <= 1931)
 				{
@@ -6905,6 +_,7 @@
 							{
 								goto IL_60FE;
 							}
+
 							switch (type)
 							{
 								case 739:
@@ -6916,10 +_,11 @@
 									goto IL_60FE;
 								default:
 									if (type == 788)
-									{
-										goto IL_60FE;
-									}
-									break;
+								{
+									goto IL_60FE;
+								}
+
+								break;
 							}
 						}
 					}
@@ -6929,6 +_,7 @@
 						{
 							goto IL_60FE;
 						}
+
 						switch (type)
 						{
 							case 1444:
@@ -6943,10 +_,12 @@
 						{
 							goto IL_60FE;
 						}
+
 						if (type == 1827)
 						{
 							goto IL_610E;
 						}
+
 						switch (type)
 						{
 							case 1930:
@@ -6970,6 +_,7 @@
 						{
 							goto IL_60FE;
 						}
+
 						switch (type)
 						{
 							case 3209:
@@ -6977,10 +_,11 @@
 								goto IL_60FE;
 							default:
 								if (type == 3245)
-								{
-									goto IL_610E;
-								}
-								break;
+							{
+								goto IL_610E;
+							}
+
+							break;
 						}
 					}
 				}
@@ -6990,6 +_,7 @@
 					{
 						goto IL_60FE;
 					}
+
 					switch (type)
 					{
 						case 3569:
@@ -7001,6 +_,7 @@
 				{
 					goto IL_60FE;
 				}
+
 				IL_611C:
 				num19++;
 				continue;
@@ -7011,25 +_,30 @@
 				Item.claw[item.type] = true;
 				goto IL_611C;
 			}
+
 			Main.InitLifeBytes();
 			for (int num20 = 0; num20 < Recipe.maxRecipes; num20++)
 			{
 				Main.recipe[num20] = new Recipe();
 				Main.availableRecipeY[num20] = (float)(65 * num20);
 			}
+
 			Recipe.SetupRecipes();
 			for (int num21 = 0; num21 < Main.numChatLines; num21++)
 			{
 				Main.chatLine[num21] = new ChatLine();
 			}
+
 			for (int num22 = 0; num22 < Liquid.resLiquid; num22++)
 			{
 				Main.liquid[num22] = new Liquid();
 			}
+
 			for (int num23 = 0; num23 < 10000; num23++)
 			{
 				Main.liquidBuffer[num23] = new LiquidBuffer();
 			}
+
 			this.waterfallManager = new WaterfallManager();
 			Lighting.LightingThreads = 0;
 			this.shop[0] = new Chest(false);
@@ -7039,6 +_,7 @@
 				this.shop[num24] = new Chest(false);
 				this.shop[num24].SetupShop(num24);
 			}
+
 			Main.teamColor[0] = Microsoft.Xna.Framework.Color.White;
 			Main.teamColor[1] = new Microsoft.Xna.Framework.Color(218, 59, 59);
 			Main.teamColor[2] = new Microsoft.Xna.Framework.Color(59, 218, 85);
@@ -7049,6 +_,7 @@
 			{
 				Main.LoadPlayers();
 			}
+
 			for (int num25 = 1; num25 < 714; num25++)
 			{
 				Projectile projectile = new Projectile();
@@ -7057,11 +_,13 @@
 				{
 					Main.projHostile[num25] = true;
 				}
+
 				if (projectile.aiStyle == 7)
 				{
 					Main.projHook[num25] = true;
 				}
 			}
+
 			Netplay.Initialize();
 			NetworkInitializer.Load();
 			if (Main.skipMenu)
@@ -7077,21 +_,24 @@
 				Main.ActivePlayerFileData.StartPlayTimer();
 				Player.Hooks.EnterWorld(Main.myPlayer);
 			}
-#if CLIENT && WINDOWS
+
+			#if CLIENT && WINDOWS
 			else
 			{
 				IntPtr systemMenu = Main.GetSystemMenu(base.Window.Handle, false);
 				int menuItemCount = Main.GetMenuItemCount(systemMenu);
 				Main.RemoveMenu(systemMenu, menuItemCount - 1, 1024);
 			}
-#endif
+
+			#endif
 			if (Main.dedServ)
 			{
 				return;
 			}
+
 			MessageBuffer.OnTileChangeReceived += new TileChangeReceivedEvent(this.OnTileChangeEvent);
 			Main.clientUUID = Guid.NewGuid().ToString();
-#if CLIENT
+			#if CLIENT
 			FilterManager arg_6400_0 = Filters.Scene;
 			keyBoardInput.newKeyEvent += delegate(char keyStroke)
 			{
@@ -7102,7 +_,7 @@
 					Main.keyCount++;
 				}
 			};
-#endif
+			#endif
 			base.Initialize();
 			base.Window.AllowUserResizing = true;
 			this.OpenSettings();
@@ -7110,10 +_,12 @@
 			{
 				Main.screenWidth = GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Width;
 			}
+
 			if (Main.screenHeight > GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Height)
 			{
 				Main.screenHeight = GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Height;
 			}
+
 			Main.graphics.ApplyChanges();
 			this.CheckBunny();
 			base.GraphicsDevice.DeviceLost += new EventHandler<EventArgs>(this.GraphicsDeviceLost);
@@ -7123,15 +_,17 @@
 			{
 				Lang.setLang(true);
 			}
+
 			Lang.setLang(false);
 			if (Lang.lang == 0)
 			{
 				Main.menuMode = 1212;
 			}
+
 			this.OpenRecent();
 			Star.SpawnStars();
 			WorldGen.RandomizeWeather();
-#if CLIENT
+			#if CLIENT
 			this._achievements = new AchievementManager();
 			AchievementInitializer.Load();
 			DyeInitializer.Load();
@@ -7140,7 +_,7 @@
 			AchievementCompleteUI.Initialize();
 			UILinksInitializer.Load();
 			ItemSorting.SetupWhiteLists();
-#endif
+			#endif
 			foreach (DisplayMode current in GraphicsAdapter.DefaultAdapter.SupportedDisplayModes)
 			{
 				if (current.Width >= Main.minScreenW && current.Height >= Main.minScreenH && current.Width <= Main.maxScreenW && current.Height <= Main.maxScreenH)
@@ -7154,6 +_,7 @@
 							break;
 						}
 					}
+
 					if (flag)
 					{
 						Main.displayHeight[Main.numDisplayModes] = current.Height;
@@ -7162,12 +_,14 @@
 					}
 				}
 			}
+
 			if (Main.autoJoin)
 			{
 				Main.LoadPlayers();
 				Main.menuMode = 1;
 				Main.menuMultiplayer = true;
 			}
+
 			Main.fpsTimer.Start();
 		}
 
@@ -7186,8 +_,10 @@
 						return result;
 					}
 				}
+
 				result = base.Content.Load<T>(path);
 			}
+
 			return result;
 		}
 
@@ -7199,7 +_,13 @@
 			{
 				TexturePackSupport.Enabled = true;
 			}
-			TexturePackSupport.FindTexturePack();
+
+			TexturePackSupport.FindTexturePacks();
+			for (int i = 1; i < 42; i++)
+			{
+				Main.music[i] = new MusicWrapper();
+			}
+
 			TextureManager.Initialize();
 			this.mapSectionTexture = new RenderTarget2D(base.GraphicsDevice, 200, 150);
 			Main.ShaderContentManager = new ContentManager(base.Content.ServiceProvider, base.Content.RootDirectory);
@@ -7216,6 +_,7 @@
 				Main.musicVolume = 0f;
 				Main.soundVolume = 0f;
 			}
+
 			this.LoadTextures();
 			this.LoadFonts();
 			Mount.Initialize();
@@ -7242,139 +_,161 @@
 			for (int i = 0; i < Main.PVPTexture.Length; i++)
 			{
 				Main.PVPTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"UI",
 							Path.DirectorySeparatorChar,
 							"PVP_",
 							i
-						}));
-			}
+				}));
+			}
+
 			for (int j = 0; j < Main.EquipPageTexture.Length; j++)
 			{
 				Main.EquipPageTexture[j] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"UI",
 							Path.DirectorySeparatorChar,
 							"DisplaySlots_",
 							j
-						}));
-			}
+				}));
+			}
+
 			for (int k = 0; k < Main.craftToggleTexture.Length; k++)
 			{
 				Main.craftToggleTexture[k] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"UI",
 							Path.DirectorySeparatorChar,
 							"Craft_Toggle_",
 							k
-						}));
-			}
+				}));
+			}
+
 			for (int l = 0; l < Main.inventorySortTexture.Length; l++)
 			{
 				Main.inventorySortTexture[l] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"UI",
 							Path.DirectorySeparatorChar,
 							"Sort_",
 							l
-						}));
-			}
+				}));
+			}
+
 			for (int m = 0; m < Main.textGlyphTexture.Length; m++)
 			{
 				Main.textGlyphTexture[m] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"UI",
 							Path.DirectorySeparatorChar,
 							"Glyphs_",
 							m
-						}));
-			}
+				}));
+			}
+
 			for (int n = 0; n < Main.hotbarRadialTexture.Length; n++)
 			{
 				Main.hotbarRadialTexture[n] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"UI",
 							Path.DirectorySeparatorChar,
 							"HotbarRadial_",
 							n
-						}));
-			}
+				}));
+			}
+
 			for (int num = 0; num < this.infoIconTexture.Length; num++)
 			{
 				this.infoIconTexture[num] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"UI",
 							Path.DirectorySeparatorChar,
 							"InfoIcon_",
 							num
-						}));
-			}
+				}));
+			}
+
 			for (int num2 = 0; num2 < Main.reforgeTexture.Length; num2++)
 			{
 				Main.reforgeTexture[num2] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"UI",
 							Path.DirectorySeparatorChar,
 							"Reforge_",
 							num2
-						}));
-			}
+				}));
+			}
+
 			for (int num3 = 0; num3 < Main.cameraTexture.Length; num3++)
 			{
 				Main.cameraTexture[num3] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"UI",
 							Path.DirectorySeparatorChar,
 							"Camera_",
 							num3
-						}));
-			}
+				}));
+			}
+
 			for (int num4 = 0; num4 < Main.wireUITexture.Length; num4++)
 			{
 				Main.wireUITexture[num4] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"UI",
 							Path.DirectorySeparatorChar,
 							"Wires_",
 							num4
-						}));
-			}
+				}));
+			}
+
 			Main.builderAccTexture = this.OurLoad<Texture2D>(string.Concat(new object[]
-					{
+			{
+
 						"Images",
 						Path.DirectorySeparatorChar,
 						"UI",
 						Path.DirectorySeparatorChar,
 						"BuilderIcons"
-					}));
+			}));
 			Main.quicksIconTexture = this.OurLoad<Texture2D>(string.Concat(new object[]
-					{
+			{
+
 						"Images",
 						Path.DirectorySeparatorChar,
 						"UI",
 						Path.DirectorySeparatorChar,
 						"UI_quickicon1"
-					}));
+			}));
 			Main.craftUpButtonTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "RecUp");
 			Main.craftDownButtonTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "RecDown");
 			Main.scrollLeftButtonTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "RecLeft");
@@ -7398,13 +_,15 @@
 			for (int num5 = 1; num5 <= 3; num5++)
 			{
 				Main.jellyfishBowlTexture[num5 - 1] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"jellyfishBowl",
 							num5
-						}));
-			}
+				}));
+			}
+
 			Main.glowSnailTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "GlowSnail");
 			Main.iceQueenTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "IceQueen");
 			Main.santaTankTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "SantaTank");
@@ -7436,38 +_,43 @@
 			Main.colorBarTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "ColorBar");
 			Main.colorBlipTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "ColorBlip");
 			Main.colorHighlightTexture = this.OurLoad<Texture2D>(string.Concat(new object[]
-					{
+			{
+
 						"Images",
 						Path.DirectorySeparatorChar,
 						"UI",
 						Path.DirectorySeparatorChar,
 						"Slider_Highlight"
-					}));
+			}));
 			Main.LockOnCursorTexture = this.OurLoad<Texture2D>(string.Concat(new object[]
-					{
+			{
+
 						"Images",
 						Path.DirectorySeparatorChar,
 						"UI",
 						Path.DirectorySeparatorChar,
 						"LockOn_Cursor"
-					}));
+			}));
 			Main.rainTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Rain");
 			for (int num6 = 0; num6 < 245; num6++)
 			{
 				Main.glowMaskTexture[num6] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Glow_",
 							num6
-						}));
-			}
+				}));
+			}
+
 			for (int num7 = 0; num7 < Main.highlightMaskTexture.Length; num7++)
 			{
 				if (TileID.Sets.HasOutlines[num7])
 				{
 					Main.highlightMaskTexture[num7] = this.OurLoad<Texture2D>(string.Concat(new object[]
-							{
+					{
+
 								"Images",
 								Path.DirectorySeparatorChar,
 								"Misc",
@@ -7476,102 +_,120 @@
 								Path.DirectorySeparatorChar,
 								"Tiles_",
 								num7
-							}));
-				}
-			}
+					}));
+				}
+			}
+
 			for (int num8 = 0; num8 < 90; num8++)
 			{
 				Main.extraTexture[num8] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Extra_",
 							num8
-						}));
-			}
+				}));
+			}
+
 			for (int num9 = 0; num9 < 4; num9++)
 			{
 				Main.coinTexture[num9] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Coin_",
 							num9
-						}));
-			}
+				}));
+			}
+
 			Main.magicPixel = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "MagicPixel");
 			Main.settingsPanelTexture = this.OurLoad<Texture2D>(string.Concat(new object[]
-					{
+			{
+
 						"Images",
 						Path.DirectorySeparatorChar,
 						"UI",
 						Path.DirectorySeparatorChar,
 						"Settings_Panel"
-					}));
+			}));
 			Main.settingsPanelTexture2 = this.OurLoad<Texture2D>(string.Concat(new object[]
-					{
+			{
+
 						"Images",
 						Path.DirectorySeparatorChar,
 						"UI",
 						Path.DirectorySeparatorChar,
 						"Settings_Panel_2"
-					}));
+			}));
 			Main.miniMapFrameTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "MiniMapFrame");
 			Main.miniMapFrame2Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "MiniMapFrame2");
 			for (int num10 = 0; num10 < Main.xmasTree.Length; num10++)
 			{
 				Main.xmasTree[num10] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Xmas_",
 							num10
-						}));
-			}
+				}));
+			}
+
 			for (int num11 = 0; num11 < 4; num11++)
 			{
 				Main.clothesTexture[num11] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Clothes_",
 							num11
-						}));
-			}
+				}));
+			}
+
 			for (int num12 = 0; num12 < Main.FlameTexture.Length; num12++)
 			{
 				Main.FlameTexture[num12] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Flame_",
 							num12
-						}));
-			}
+				}));
+			}
+
 			for (int num13 = 0; num13 < 3; num13++)
 			{
 				Main.miniMapButtonTexture[num13] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"MiniMapButton_",
 							num13
-						}));
-			}
+				}));
+			}
+
 			for (int num14 = 0; num14 < 8; num14++)
 			{
 				Main.mapIconTexture[num14] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Map_",
 							num14
-						}));
-			}
+				}));
+			}
+
 			for (int num15 = 0; num15 < Main.underworldTexture.Length; num15++)
 			{
 				Main.underworldTexture[num15] = this.OurLoad<Texture2D>("Images/Backgrounds/Underworld " + num15);
 			}
+
 			Main.destTexture[0] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Dest1");
 			Main.destTexture[1] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Dest2");
 			Main.destTexture[2] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Dest3");
@@ -7585,77 +_,90 @@
 			Main.hbTexture1 = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "HealthBar1");
 			Main.hbTexture2 = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "HealthBar2");
 			Main.loTexture = this.OurLoad<Texture2D>(string.Concat(new object[]
-					{
+			{
+
 						"Images",
 						Path.DirectorySeparatorChar,
 						"logo_",
 						Main.rand.Next(1, 9)
-					}));
+			}));
 			Main.spriteBatch = new SpriteBatch(base.GraphicsDevice);
 			Main.tileBatch = new TileBatch(base.GraphicsDevice);
 			for (int num16 = 1; num16 < 2; num16++)
 			{
 				Main.bannerTexture[num16] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"House_Banner_",
 							num16
-						}));
-			}
+				}));
+			}
+
 			for (int num17 = 0; num17 < Main.npcHeadTexture.Length; num17++)
 			{
 				Main.npcHeadTexture[num17] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"NPC_Head_",
 							num17
-						}));
-			}
+				}));
+			}
+
 			for (int num18 = 0; num18 < Main.npcHeadBossTexture.Length; num18++)
 			{
 				Main.npcHeadBossTexture[num18] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"NPC_Head_Boss_",
 							num18
-						}));
-			}
+				}));
+			}
+
 			for (int num19 = 1; num19 < Main.BackPackTexture.Length; num19++)
 			{
 				Main.BackPackTexture[num19] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"BackPack_",
 							num19
-						}));
-			}
+				}));
+			}
+
 			for (int num20 = 1; num20 < 206; num20++)
 			{
 				Main.buffTexture[num20] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Buff_",
 							num20
-						}));
-			}
+				}));
+			}
+
 			this.LoadBackground(0);
 			this.LoadBackground(49);
 			Main.minecartMountTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Minecart");
 			for (int num21 = 0; num21 < Main.rudolphMountTexture.Length; num21++)
 			{
 				Main.rudolphMountTexture[num21] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Rudolph_",
 							num21
-						}));
-			}
+				}));
+			}
+
 			Main.bunnyMountTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Bunny");
 			Main.pigronMountTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Pigron");
 			Main.slimeMountTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Slime");
@@ -7690,54 +_,64 @@
 				else
 				{
 					Main.itemTexture[num22] = this.OurLoad<Texture2D>(string.Concat(new object[]
-							{
+					{
+
 								"Images",
 								Path.DirectorySeparatorChar,
 								"Item_",
 								num22
-							}));
-				}
-			}
+					}));
+				}
+			}
+
 			for (int num24 = 0; num24 < Main.gemTexture.Length; num24++)
 			{
 				Main.gemTexture[num24] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Gem_",
 							num24
-						}));
-			}
+				}));
+			}
+
 			for (int num25 = 0; num25 < 22; num25++)
 			{
 				Main.cloudTexture[num25] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Cloud_",
 							num25
-						}));
-			}
+				}));
+			}
+
 			for (int num26 = 0; num26 < 5; num26++)
 			{
 				Main.starTexture[num26] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Star_",
 							num26
-						}));
-			}
+				}));
+			}
+
 			for (int num27 = 0; num27 < 12; num27++)
 			{
 				Main.liquidTexture[num27] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Liquid_",
 							num27
-						}));
-			}
+				}));
+			}
+
 			this.waterfallManager.LoadContent();
 			Main.npcToggleTexture[0] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "House_1");
 			Main.npcToggleTexture[1] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "House_2");
@@ -7761,23 +_,26 @@
 			for (int num28 = 0; num28 < Main.cursorTextures.Length; num28++)
 			{
 				Main.cursorTextures[num28] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"UI",
 							Path.DirectorySeparatorChar,
 							"Cursor_",
 							num28
-						}));
-			}
+				}));
+			}
+
 			Main.cursorRadialTexture = this.OurLoad<Texture2D>(string.Concat(new object[]
-					{
+			{
+
 						"Images",
 						Path.DirectorySeparatorChar,
 						"UI",
 						Path.DirectorySeparatorChar,
 						"Radial"
-					}));
+			}));
 			Main.ninjaTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Ninja");
 			Main.antLionTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "AntlionBody");
 			Main.spikeBaseTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Spike_Base");
@@ -7793,33 +_,39 @@
 			for (int num29 = 0; num29 < Main.moonTexture.Length; num29++)
 			{
 				Main.moonTexture[num29] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Moon_",
 							num29
-						}));
-			}
+				}));
+			}
+
 			for (int num30 = 0; num30 < Main.treeTopTexture.Length; num30++)
 			{
 				Main.treeTopTexture[num30] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Tree_Tops_",
 							num30
-						}));
-			}
+				}));
+			}
+
 			for (int num31 = 0; num31 < Main.treeBranchTexture.Length; num31++)
 			{
 				Main.treeBranchTexture[num31] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Tree_Branches_",
 							num31
-						}));
-			}
+				}));
+			}
+
 			Main.shroomCapTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Shroom_Tops");
 			Main.inventoryBackTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back");
 			Main.inventoryBack2Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back2");
@@ -7861,13 +_,15 @@
 			for (int num32 = 0; num32 < 17; num32++)
 			{
 				Main.chainsTexture[num32] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Chains_",
 							num32
-						}));
-			}
+				}));
+			}
+
 			Main.chain20Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain20");
 			Main.fishingLineTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "FishingLine");
 			Main.chainTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain");
@@ -7918,23 +_,27 @@
 			for (int num33 = 1; num33 < Main.gemChainTexture.Length; num33++)
 			{
 				Main.gemChainTexture[num33] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"GemChain_",
 							num33
-						}));
-			}
+				}));
+			}
+
 			for (int num34 = 1; num34 < Main.golemTexture.Length; num34++)
 			{
 				Main.golemTexture[num34] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"GolemLights",
 							num34
-						}));
-			}
+				}));
+			}
+
 			Main.npcAltTextures = new Texture2D[Main.npcTexture.Length][];
 			for (int num35 = 0; num35 < NPCID.Sets.ExtraTextureCount.Length; num35++)
 			{
@@ -7945,17 +_,19 @@
 					this.LoadNPC(num35);
 					Main.npcAltTextures[num35][0] = Main.npcTexture[num35];
 				}
+
 				for (int num37 = 1; num37 <= num36; num37++)
 				{
 					Main.npcAltTextures[num35][num37] = this.OurLoad<Texture2D>(string.Concat(new object[]
-							{
+					{
+
 								"Images",
 								Path.DirectorySeparatorChar,
 								"NPC_",
 								num35,
 								"_Alt_",
 								num37
-							}));
+					}));
 				}
 			}
 		}
@@ -7967,7 +_,7 @@
 			Main.waveBank = new WaveBank(Main.engine, "Content" + Path.DirectorySeparatorChar + "Wave Bank.xwb");
 			for (int i = 1; i < 42; i++)
 			{
-				Main.music[i] = Main.soundBank.GetCue("Music_" + i);
+				Main.music[i] = new MusicWrapper(Main.soundBank.GetCue("Music_" + i));
 			}
 		}
 
@@ -8026,58 +_,68 @@
 			for (int i = 0; i < Main.soundCoin.Length; i++)
 			{
 				Main.soundCoin[i] = this.OurLoad<SoundEffect>(string.Concat(new object[]
-						{
+				{
+
 							"Sounds",
 							Path.DirectorySeparatorChar,
 							"Coin_",
 							i
-						}));
+				}));
 				Main.soundInstanceCoin[i] = Main.soundCoin[i].CreateInstance();
 			}
+
 			for (int j = 0; j < Main.soundDrip.Length; j++)
 			{
 				Main.soundDrip[j] = this.OurLoad<SoundEffect>(string.Concat(new object[]
-						{
+				{
+
 							"Sounds",
 							Path.DirectorySeparatorChar,
 							"Drip_",
 							j
-						}));
+				}));
 				Main.soundInstanceDrip[j] = Main.soundDrip[j].CreateInstance();
 			}
+
 			for (int k = 0; k < Main.soundZombie.Length; k++)
 			{
 				Main.soundZombie[k] = this.OurLoad<SoundEffect>(string.Concat(new object[]
-						{
+				{
+
 							"Sounds",
 							Path.DirectorySeparatorChar,
 							"Zombie_",
 							k
-						}));
+				}));
 				Main.soundInstanceZombie[k] = Main.soundZombie[k].CreateInstance();
 			}
+
 			for (int l = 0; l < Main.soundLiquid.Length; l++)
 			{
 				Main.soundLiquid[l] = this.OurLoad<SoundEffect>(string.Concat(new object[]
-						{
+				{
+
 							"Sounds",
 							Path.DirectorySeparatorChar,
 							"Liquid_",
 							l
-						}));
+				}));
 				Main.soundInstanceLiquid[l] = Main.soundLiquid[l].CreateInstance();
 			}
+
 			for (int m = 0; m < Main.soundRoar.Length; m++)
 			{
 				Main.soundRoar[m] = this.OurLoad<SoundEffect>(string.Concat(new object[]
-						{
+				{
+
 							"Sounds",
 							Path.DirectorySeparatorChar,
 							"Roar_",
 							m
-						}));
+				}));
 				Main.soundInstanceRoar[m] = Main.soundRoar[m].CreateInstance();
 			}
+
 			Main.soundSplash[0] = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Splash_0");
 			Main.soundInstanceSplash[0] = Main.soundRoar[0].CreateInstance();
 			Main.soundSplash[1] = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Splash_1");
@@ -8097,50 +_,58 @@
 			for (int n = 1; n < 126; n++)
 			{
 				Main.soundItem[n] = this.OurLoad<SoundEffect>(string.Concat(new object[]
-						{
+				{
+
 							"Sounds",
 							Path.DirectorySeparatorChar,
 							"Item_",
 							n
-						}));
+				}));
 				Main.soundInstanceItem[n] = Main.soundItem[n].CreateInstance();
 			}
+
 			for (int num = 1; num < 58; num++)
 			{
 				Main.soundNPCHit[num] = this.OurLoad<SoundEffect>(string.Concat(new object[]
-						{
+				{
+
 							"Sounds",
 							Path.DirectorySeparatorChar,
 							"NPC_Hit_",
 							num
-						}));
+				}));
 				Main.soundInstanceNPCHit[num] = Main.soundNPCHit[num].CreateInstance();
 			}
+
 			for (int num2 = 1; num2 < 63; num2++)
 			{
 				Main.soundNPCKilled[num2] = this.OurLoad<SoundEffect>(string.Concat(new object[]
-						{
+				{
+
 							"Sounds",
 							Path.DirectorySeparatorChar,
 							"NPC_Killed_",
 							num2
-						}));
+				}));
 				Main.soundInstanceNPCKilled[num2] = Main.soundNPCKilled[num2].CreateInstance();
 			}
+
 			Main.trackableSounds = new SoundEffect[SoundID.TrackableLegacySoundCount];
 			Main.trackableSoundInstances = new SoundEffectInstance[Main.trackableSounds.Length];
 			for (int num3 = 0; num3 < Main.trackableSounds.Length; num3++)
 			{
 				Main.trackableSounds[num3] = this.OurLoad<SoundEffect>(string.Concat(new object[]
-						{
+				{
+
 							"Sounds",
 							Path.DirectorySeparatorChar,
 							"Custom",
 							Path.DirectorySeparatorChar,
 							SoundID.GetTrackableLegacySoundPath(num3)
-						}));
+				}));
 				Main.trackableSoundInstances[num3] = Main.trackableSounds[num3].CreateInstance();
 			}
+
 			Main.soundInstanceMoonlordCry = Main.soundNPCKilled[10].CreateInstance();
 		}
 
@@ -8159,6 +_,7 @@
 					NPC.waveNumber = 0;
 				}
 			}
+
 			if (Main.snowMoon)
 			{
 				Main.snowMoon = false;
@@ -8180,14 +_,15 @@
 				NPC.waveKills = 0f;
 				NPC.waveNumber = 1;
 				string invasionWaveText = Lang.GetInvasionWaveText(1, new short[]
-					{
-						305
-					});
+				{
+					305
+				});
 				if (Main.netMode == 0)
 				{
 					Main.NewText(invasionWaveText, 175, 75, 255, false);
 					return;
 				}
+
 				if (Main.netMode == 2)
 				{
 					NetMessage.SendData(25, -1, -1, invasionWaveText, 255, 175f, 75f, 255f, 0, 0, 0);
@@ -8205,15 +_,16 @@
 				NPC.waveKills = 0f;
 				NPC.waveNumber = 1;
 				string invasionWaveText = Lang.GetInvasionWaveText(1, new short[]
-					{
-						338,
+				{
+					338,
 						342
-					});
+				});
 				if (Main.netMode == 0)
 				{
 					Main.NewText(invasionWaveText, 175, 75, 255, false);
 					return;
 				}
+
 				if (Main.netMode == 2)
 				{
 					NetMessage.SendData(25, -1, -1, invasionWaveText, 255, 175f, 75f, 255f, 0, 0, 0);
@@ -8223,11 +_,12 @@
 
 		protected void UpdateAudio()
 		{
-#if !WINDOWS
+			#if !WINDOWS
 			if (Main.engine != null)
 			{
 				Main.engine.Update();
 			}
+
 			object audioLock = Main._audioLock;
 			lock (audioLock)
 			{
@@ -8246,7 +_,8 @@
 					}
 				}
 			}
-#endif
+
+			#endif
 			if (!Main.dedServ)
 			{
 				bool flag = (!Main.hasFocus || Main.gamePaused) && Main.netMode == 0;
@@ -8259,9 +_,11 @@
 							SlotVector<ActiveSound>.ItemPair current = enumerator.Current;
 							current.Value.Pause();
 						}
+
 						goto IL_A3;
 					}
 				}
+
 				if (Main._areSoundsPaused && !flag)
 				{
 					foreach (SlotVector<ActiveSound>.ItemPair current2 in ((IEnumerable<SlotVector<ActiveSound>.ItemPair>)Main._trackedSounds))
@@ -8269,6 +_,7 @@
 						current2.Value.Resume();
 					}
 				}
+
 				IL_A3:
 				Main._areSoundsPaused = flag;
 				if (!Main._areSoundsPaused)
@@ -8283,10 +_,12 @@
 					}
 				}
 			}
+
 			if (Main.musicVolume == 0f)
 			{
 				Main.curMusic = 0;
 			}
+
 			try
 			{
 				if (!Main.dedServ)
@@ -8308,6 +_,7 @@
 									}
 								}
 							}
+
 							for (int j = 0; j < Main.soundInstanceLiquid.Length; j++)
 							{
 								Main.soundInstanceLiquid[j].Stop();
@@ -8330,6 +_,7 @@
 							}
 						}
 					}
+
 					bool flag2 = false;
 					bool flag3 = false;
 					bool flag4 = false;
@@ -8344,6 +_,7 @@
 					bool flag13 = false;
 					Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)Main.screenPosition.X, (int)Main.screenPosition.Y, Main.screenWidth, Main.screenHeight);
 					int num = 5000;
+					int modMusic = -1;
 					for (int l = 0; l < 200; l++)
 					{
 						if (Main.npc[l].active)
@@ -8367,38 +_,43 @@
 												break;
 											default:
 												switch (type)
-												{
-													case 125:
+											{
+												case 125:
 													case 126:
 														break;
-													default:
+												default:
 														goto IL_4D9;
-												}
-												break;
+											}
+
+											break;
 										}
+
 										num2 = 2;
 										goto IL_4D9;
 									}
+
 									switch (type)
 									{
 										case 13:
 										case 14:
 										case 15:
 											num2 = 1;
-											goto IL_4D9;
+										goto IL_4D9;
 										default:
 											switch (type)
-											{
-												case 26:
+										{
+											case 26:
 												case 27:
 												case 28:
 												case 29:
 													break;
-												default:
+											default:
 													goto IL_4D9;
-											}
-											break;
+										}
+
+										break;
 									}
+
 									IL_486:
 									num2 = 11;
 								}
@@ -8408,6 +_,7 @@
 									{
 										goto IL_491;
 									}
+
 									switch (type)
 									{
 										case 143:
@@ -8434,13 +_,14 @@
 											break;
 										case 222:
 											num2 = 5;
-											break;
+										break;
 										default:
 											if (type == 245)
-											{
-												num2 = 4;
-											}
-											break;
+										{
+											num2 = 4;
+										}
+
+										break;
 									}
 								}
 							}
@@ -8456,15 +_,15 @@
 											case 263:
 											case 264:
 												num2 = 6;
-												goto IL_4D9;
+											goto IL_4D9;
 											case 265:
 												goto IL_4D9;
 											case 266:
 												goto IL_491;
 											default:
 												switch (type)
-												{
-													case 381:
+											{
+												case 381:
 													case 382:
 													case 383:
 													case 385:
@@ -8475,7 +_,7 @@
 													case 391:
 													case 395:
 														break;
-													case 384:
+												case 384:
 													case 387:
 													case 392:
 													case 393:
@@ -8483,13 +_,14 @@
 													case 396:
 													case 397:
 														goto IL_4D9;
-													case 398:
+												case 398:
 														num2 = 7;
+												goto IL_4D9;
+												default:
 														goto IL_4D9;
-													default:
-														goto IL_4D9;
-												}
-												break;
+											}
+
+											break;
 										}
 									}
 									else
@@ -8498,18 +_,20 @@
 										{
 											goto IL_4B5;
 										}
+
 										switch (type)
 										{
 											case 438:
 												if (Main.npc[l].ai[1] == 1f)
-												{
-													num2 = 4;
-													goto IL_4D9;
-												}
+											{
+												num2 = 4;
 												goto IL_4D9;
+											}
+
+											goto IL_4D9;
 											case 439:
 												num2 = 4;
-												goto IL_4D9;
+											goto IL_4D9;
 											default:
 												goto IL_4D9;
 										}
@@ -8527,10 +_,11 @@
 											goto IL_4B5;
 										default:
 											if (type != 507)
-											{
-												goto IL_4D9;
-											}
-											goto IL_4B5;
+										{
+											goto IL_4D9;
+										}
+
+										goto IL_4B5;
 									}
 								}
 								else
@@ -8539,94 +_,118 @@
 									{
 										goto IL_4B5;
 									}
+
 									if (type != 520)
 									{
 										goto IL_4D9;
 									}
 								}
+
 								num2 = 9;
 								goto IL_4D9;
 								IL_4B5:
 								num2 = 10;
 							}
+
 							IL_4D9:
-							if (NPCID.Sets.BelongsToInvasionOldOnesArmy[Main.npc[l].type])
+							if (Main.npc[l].type < NPCID.Sets.BelongsToInvasionOldOnesArmy.Length && NPCID.Sets.BelongsToInvasionOldOnesArmy[Main.npc[l].type])
 							{
 								num2 = 12;
 							}
+
 							if (num2 == 0 && Main.npc[l].boss)
 							{
 								num2 = 1;
 							}
-							if (num2 == 0)
+
+							if (num2 == 0 && (Main.npc[l].modNPC == null || Main.npc[l].modNPC.music < 0))
 							{
 								goto IL_5F6;
 							}
+
 							Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)(Main.npc[l].position.X + (float)(Main.npc[l].width / 2)) - num, (int)(Main.npc[l].position.Y + (float)(Main.npc[l].height / 2)) - num, num * 2, num * 2);
 							if (!rectangle.Intersects(value))
 							{
 								goto IL_5F6;
 							}
+
+							if (Main.npc[l].modNPC != null && Main.npc[l].modNPC.music >= 0 && modMusic < 0)
+							{
+								modMusic = Main.npc[l].modNPC.music;
+							}
+
 							if (num2 == 1)
 							{
 								flag2 = true;
 								break;
 							}
+
 							if (num2 == 2)
 							{
 								flag3 = true;
 								break;
 							}
+
 							if (num2 == 3)
 							{
 								flag4 = true;
 								break;
 							}
+
 							if (num2 == 4)
 							{
 								flag5 = true;
 								break;
 							}
+
 							if (num2 == 5)
 							{
 								flag6 = true;
 								break;
 							}
+
 							if (num2 == 6)
 							{
 								flag7 = true;
 								break;
 							}
+
 							if (num2 == 7)
 							{
 								flag8 = true;
 								break;
 							}
+
 							if (num2 == 8)
 							{
 								flag9 = true;
 								break;
 							}
+
 							if (num2 == 9)
 							{
 								flag10 = true;
 								break;
 							}
+
 							if (num2 == 10)
 							{
 								flag11 = true;
 								break;
 							}
+
 							if (num2 == 11)
 							{
 								flag12 = true;
 								break;
 							}
+
 							if (num2 == 12)
 							{
 								flag13 = true;
 								break;
 							}
+
 							break;
 							IL_491:
 							num2 = 3;
@@ -8635,9 +_,11 @@
 							num2 = 8;
 							goto IL_4D9;
 						}
+
 						IL_5F6:
 						;
 					}
+
 					int num3 = (int)((Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f);
 					if (Main.musicVolume == 0f)
 					{
@@ -8663,6 +_,10 @@
 						{
 							this.newMusic = 38;
 						}
+						else if (modMusic >= 0)
+						{
+							this.newMusic = modMusic;
+						}
 						else if (flag10)
 						{
 							this.newMusic = 37;
@@ -8792,16 +_,19 @@
 								{
 									Main.ugMusic = 4;
 								}
+
 								if (!Main.music[4].IsPlaying && !Main.music[31].IsPlaying)
 								{
 									if (Main.musicFade[4] == 1f)
 									{
 										Main.musicFade[31] = 1f;
 									}
+
 									if (Main.musicFade[31] == 1f)
 									{
 										Main.musicFade[4] = 1f;
 									}
+
 									int num6 = Main.rand.Next(2);
 									if (num6 == 0)
 									{
@@ -8814,6 +_,7 @@
 										Main.musicFade[4] = 0f;
 									}
 								}
+
 								this.newMusic = Main.ugMusic;
 							}
 						}
@@ -8848,6 +_,7 @@
 								{
 									Main.dayMusic = 1;
 								}
+
 								if (!Main.music[1].IsPlaying && !Main.music[18].IsPlaying)
 								{
 									int num7 = Main.rand.Next(2);
@@ -8860,6 +_,7 @@
 										Main.dayMusic = 18;
 									}
 								}
+
 								this.newMusic = Main.dayMusic;
 							}
 						}
@@ -8878,187 +_,238 @@
 								this.newMusic = 3;
 							}
 						}
+
 						if ((double)(Main.screenPosition.Y / 16f) < Main.worldSurface + 10.0 && Main.pumpkinMoon)
 						{
 							this.newMusic = 30;
 						}
+
 						if ((double)(Main.screenPosition.Y / 16f) < Main.worldSurface + 10.0 && Main.snowMoon)
 						{
 							this.newMusic = 32;
 						}
 					}
+
+					ModHooks.UpdateMusic(ref this.newMusic);
 					if (Main.gameMenu || Main.musicVolume == 0f)
 					{
 						Main.musicBox2 = -1;
 						Main.musicBox = -1;
 					}
+
 					if (Main.musicBox2 >= 0)
 					{
 						Main.musicBox = Main.musicBox2;
 					}
+
 					if (Main.musicBox >= 0)
 					{
 						if (Main.musicBox == 0)
 						{
 							this.newMusic = 1;
 						}
+
 						if (Main.musicBox == 1)
 						{
 							this.newMusic = 2;
 						}
+
 						if (Main.musicBox == 2)
 						{
 							this.newMusic = 3;
 						}
+
 						if (Main.musicBox == 4)
 						{
 							this.newMusic = 4;
 						}
+
 						if (Main.musicBox == 5)
 						{
 							this.newMusic = 5;
 						}
+
 						if (Main.musicBox == 3)
 						{
 							this.newMusic = 6;
 						}
+
 						if (Main.musicBox == 6)
 						{
 							this.newMusic = 7;
 						}
+
 						if (Main.musicBox == 7)
 						{
 							this.newMusic = 8;
 						}
+
 						if (Main.musicBox == 9)
 						{
 							this.newMusic = 9;
 						}
+
 						if (Main.musicBox == 8)
 						{
 							this.newMusic = 10;
 						}
+
 						if (Main.musicBox == 11)
 						{
 							this.newMusic = 11;
 						}
+
 						if (Main.musicBox == 10)
 						{
 							this.newMusic = 12;
 						}
+
 						if (Main.musicBox == 12)
 						{
 							this.newMusic = 13;
 						}
+
 						if (Main.musicBox == 13)
 						{
 							this.newMusic = 14;
 						}
+
 						if (Main.musicBox == 14)
 						{
 							this.newMusic = 15;
 						}
+
 						if (Main.musicBox == 15)
 						{
 							this.newMusic = 16;
 						}
+
 						if (Main.musicBox == 16)
 						{
 							this.newMusic = 17;
 						}
+
 						if (Main.musicBox == 17)
 						{
 							this.newMusic = 18;
 						}
+
 						if (Main.musicBox == 18)
 						{
 							this.newMusic = 19;
 						}
+
 						if (Main.musicBox == 19)
 						{
 							this.newMusic = 20;
 						}
+
 						if (Main.musicBox == 20)
 						{
 							this.newMusic = 21;
 						}
+
 						if (Main.musicBox == 21)
 						{
 							this.newMusic = 22;
 						}
+
 						if (Main.musicBox == 22)
 						{
 							this.newMusic = 23;
 						}
+
 						if (Main.musicBox == 23)
 						{
 							this.newMusic = 24;
 						}
+
 						if (Main.musicBox == 24)
 						{
 							this.newMusic = 25;
 						}
+
 						if (Main.musicBox == 25)
 						{
 							this.newMusic = 26;
 						}
+
 						if (Main.musicBox == 26)
 						{
 							this.newMusic = 27;
 						}
+
 						if (Main.musicBox == 27)
 						{
 							this.newMusic = 29;
 						}
+
 						if (Main.musicBox == 28)
 						{
 							this.newMusic = 30;
 						}
+
 						if (Main.musicBox == 29)
 						{
 							this.newMusic = 31;
 						}
+
 						if (Main.musicBox == 30)
 						{
 							this.newMusic = 32;
 						}
+
 						if (Main.musicBox == 31)
 						{
 							this.newMusic = 33;
 						}
+
 						if (Main.musicBox == 32)
 						{
 							this.newMusic = 38;
 						}
+
 						if (Main.musicBox == 33)
 						{
 							this.newMusic = 37;
 						}
+
 						if (Main.musicBox == 34)
 						{
 							this.newMusic = 35;
 						}
+
 						if (Main.musicBox == 35)
 						{
 							this.newMusic = 36;
 						}
+
 						if (Main.musicBox == 36)
 						{
 							this.newMusic = 34;
 						}
+
 						if (Main.musicBox == 37)
 						{
 							this.newMusic = 39;
 						}
+
 						if (Main.musicBox == 38)
 						{
 							this.newMusic = 40;
 						}
+
 						if (Main.musicBox == 39)
 						{
 							this.newMusic = 41;
 						}
-					}
+
+						if (Main.musicBox >= Main.maxMusic)
+						{
+							this.newMusic = Main.musicBox;
+						}
+					}
+
 					Main.curMusic = this.newMusic;
 					float num8 = 1f;
 					if (NPC.MoonLordCountdown > 0)
@@ -9074,13 +_,19 @@
 							num8 = 0f;
 							Main.curMusic = 0;
 						}
-						if (NPC.MoonLordCountdown == 1 && Main.curMusic >= 1 && Main.curMusic < 42)
+
+						if (NPC.MoonLordCountdown == 1 && Main.curMusic >= 1 && Main.curMusic < Main.music.Length)
 						{
 							Main.musicFade[Main.curMusic] = 0f;
 						}
 					}
-					for (int m = 1; m < 42; m++)
-					{
+
+					for (int m = 1; m < Main.music.Length; m++)
+					{
+						if (Main.music[m] == null)
+						{
+							continue; // Race condition, Music is resized during load.
+						}
 						if (m == 28)
 						{
 							if (Main.cloudAlpha > 0f && (double)Main.player[Main.myPlayer].position.Y < Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2) && !Main.player[Main.myPlayer].ZoneSnow)
@@ -9094,7 +_,7 @@
 								}
 								else if (!Main.music[m].IsPlaying)
 								{
-									Main.music[m] = Main.soundBank.GetCue("Music_" + m);
+									Main.music[m].cue = Main.soundBank.GetCue("Music_" + m);
 									Main.music[m].Play();
 									Main.music[m].SetVariable("Volume", Main.musicFade[m] * Main.ambientVolume);
 								}
@@ -9109,6 +_,7 @@
 									{
 										Main.musicFade[m] = 1f;
 									}
+
 									Main.music[m].SetVariable("Volume", Main.musicFade[m] * Main.ambientVolume);
 								}
 							}
@@ -9122,6 +_,7 @@
 								{
 									Main.musicFade[m] = 0f;
 								}
+
 								if (Main.musicFade[m] <= 0f)
 								{
 									Main.musicFade[m] -= 0f;
@@ -9141,7 +_,11 @@
 						{
 							if (!Main.music[m].IsPlaying)
 							{
-								Main.music[m] = Main.soundBank.GetCue("Music_" + m);
+								if (m < Main.maxMusic)
+								{
+									Main.music[m].cue = Main.soundBank.GetCue("Music_" + m);
+								}
+
 								Main.music[m].Play();
 								Main.music[m].SetVariable("Volume", Main.musicFade[m] * Main.musicVolume * num8);
 							}
@@ -9152,6 +_,7 @@
 								{
 									Main.musicFade[m] = 1f;
 								}
+
 								Main.music[m].SetVariable("Volume", Main.musicFade[m] * Main.musicVolume * num8);
 							}
 						}
@@ -9165,6 +_,7 @@
 							{
 								Main.musicFade[m] = 0f;
 							}
+
 							if (Main.musicFade[m] <= 0f)
 							{
 								Main.musicFade[m] -= 0f;
@@ -9180,6 +_,7 @@
 							Main.musicFade[m] = 0f;
 						}
 					}
+
 					if (Main.musicError > 0)
 					{
 						Main.musicError--;
@@ -9203,6 +_,7 @@
 			{
 				return;
 			}
+
 			if (Main.snowTiles > 0 && (double)Main.player[Main.myPlayer].position.Y < Main.worldSurface * 16.0)
 			{
 				int maxValue = 800 / Main.snowTiles;
@@ -9219,6 +_,7 @@
 						{
 							break;
 						}
+
 						if (Main.rand.Next(maxValue) == 0)
 						{
 							int num5 = Main.rand.Next(Main.screenWidth + 1000) - 500;
@@ -9227,6 +_,7 @@
 							{
 								num6 -= (int)Main.player[Main.myPlayer].velocity.Y;
 							}
+
 							if (Main.rand.Next(5) == 0)
 							{
 								num5 = Main.rand.Next(500) - 500;
@@ -9235,10 +_,12 @@
 							{
 								num5 = Main.rand.Next(500) + Main.screenWidth;
 							}
+
 							if (num5 < 0 || num5 > Main.screenWidth)
 							{
 								num6 += Main.rand.Next((int)((double)Main.screenHeight * 0.8)) + (int)((double)Main.screenHeight * 0.1);
 							}
+
 							num5 += (int)Main.screenPosition.X;
 							int num7 = num5 / 16;
 							int num8 = num6 / 16;
@@ -9261,6 +_,7 @@
 									Dust expr_370_cp_0 = Main.dust[num9];
 									expr_370_cp_0.velocity.Y = expr_370_cp_0.velocity.Y * 0.5f;
 								}
+
 								Dust expr_38E_cp_0 = Main.dust[num9];
 								expr_38E_cp_0.velocity.Y = expr_38E_cp_0.velocity.Y * (1f + 0.3f * Main.cloudAlpha);
 								Main.dust[num9].scale += Main.cloudAlpha * 0.2f;
@@ -9271,6 +_,7 @@
 					catch
 					{
 					}
+
 					num4++;
 				}
 			}
@@ -9286,6 +_,7 @@
 				Main.xMas = true;
 				return;
 			}
+
 			Main.xMas = false;
 		}
 
@@ -9299,11 +_,13 @@
 				Main.halloween = true;
 				return;
 			}
+
 			if (day <= 1 && month == 11)
 			{
 				Main.halloween = true;
 				return;
 			}
+
 			Main.halloween = false;
 		}
 
@@ -9313,10 +_,12 @@
 			{
 				return;
 			}
+
 			if (Main.netMode == 0 && Main.gameMenu)
 			{
 				return;
 			}
+
 			int num = 86400;
 			int num2 = num / 24;
 			float num3 = Math.Max(1f, 1f + 4f * Main.cloudAlpha);
@@ -9326,10 +_,12 @@
 				{
 					Main.cloudBGActive -= (float)Main.dayRate / num3;
 				}
+
 				if (Main.cloudBGActive < 1f)
 				{
 					Main.cloudBGActive = 1f;
 				}
+
 				if (Main.cloudBGActive == 1f && Main.rand.Next((int)((float)(num2 * 2 / Math.Max(Main.dayRate, 1)) * num3)) == 0)
 				{
 					Main.cloudBGActive = (float)(-(float)Main.rand.Next(num2 * 4, num * 4));
@@ -9350,10 +_,12 @@
 						Main.cloudBGActive += (float)(2 * Main.dayRate) * num3;
 					}
 				}
+
 				if (Main.cloudBGActive > 0f)
 				{
 					Main.cloudBGActive = 0f;
 				}
+
 				if (Main.cloudBGActive == 0f && Main.rand.Next((int)((float)(num2 * 8 / ((Main.dayRate == 0) ? 1 : Main.dayRate)) / num3)) == 0)
 				{
 					Main.cloudBGActive = (float)Main.rand.Next(num2 * 3, num * 2);
@@ -9380,13 +_,16 @@
 					{
 						Main.dust[num2].scale += 0.25f;
 					}
+
 					if (i < 5)
 					{
 						Main.dust[num2].scale += 0.25f;
 					}
 				}
+
 				return;
 			}
+
 			if (Style == 1)
 			{
 				Main.PlaySound(SoundID.Item8, effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2);
@@ -9399,21 +_,26 @@
 					{
 						Main.dust[num4].scale += 0.25f;
 					}
+
 					if (j < 5)
 					{
 						Main.dust[num4].scale += 0.25f;
 					}
 				}
+
 				return;
 			}
+
 			if (Style == 2)
 			{
 				for (int k = 0; k < 50; k++)
 				{
 					Main.dust[Dust.NewDust(new Vector2((float)effectRect.X, (float)effectRect.Y), effectRect.Width, effectRect.Height, 58, 0f, 0f, 150, Microsoft.Xna.Framework.Color.GhostWhite, 1.2f)].velocity *= 0.5f;
 				}
+
 				return;
 			}
+
 			if (Style == 3)
 			{
 				Main.PlaySound(SoundID.Item6, effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2);
@@ -9428,25 +_,31 @@
 							Main.dust[num5].velocity *= 0.75f;
 						}
 					}
+
 					if (Main.rand.Next(3) == 0)
 					{
 						Main.dust[num5].velocity *= 2f;
 						Main.dust[num5].scale *= 1.2f;
 					}
+
 					if (Main.rand.Next(3) == 0)
 					{
 						Main.dust[num5].velocity *= 2f;
 						Main.dust[num5].scale *= 1.2f;
 					}
+
 					if (Main.rand.Next(2) == 0)
 					{
 						Main.dust[num5].fadeIn = (float)Main.rand.Next(75, 100) * 0.01f;
 						Main.dust[num5].scale = (float)Main.rand.Next(25, 75) * 0.01f;
 					}
+
 					Main.dust[num5].scale *= 0.8f;
 				}
+
 				return;
 			}
+
 			if (Style == 4)
 			{
 				Main.PlaySound(SoundID.Item8, effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2);
@@ -9481,6 +_,7 @@
 					num3 = Main.ambientLavafallX;
 					num4 = Main.ambientLavafallY;
 				}
+
 				float num5 = Main.ambientLavafallStrength + Main.ambientLavaStrength;
 				Main.PlaySound(35, (int)num3, (int)num4, (int)num5, 1f, 0f);
 			}
@@ -9513,6 +_,7 @@
 									Main.bunnyCageFrame[i] = 1;
 								}
 							}
+
 							Main.bunnyCageFrameCounter[i] = 0;
 						}
 					}
@@ -9533,6 +_,7 @@
 							Main.bunnyCageFrameCounter[i] = 0;
 							Main.bunnyCageFrame[i]++;
 						}
+
 						if (Main.bunnyCageFrame[i] > 3)
 						{
 							Main.bunnyCageFrame[i] = 0;
@@ -9563,6 +_,7 @@
 									Main.bunnyCageFrame[i] = 12;
 								}
 							}
+
 							Main.bunnyCageFrameCounter[i] = 0;
 						}
 					}
@@ -9583,12 +_,14 @@
 							Main.bunnyCageFrameCounter[i] = 0;
 							Main.bunnyCageFrame[i]++;
 						}
+
 						if (Main.bunnyCageFrame[i] > 21)
 						{
 							Main.bunnyCageFrame[i] = 0;
 						}
 					}
 				}
+
 				for (int j = 0; j < Main.cageFrames; j++)
 				{
 					if (Main.squirrelCageFrame[j] == 0)
@@ -9612,6 +_,7 @@
 									Main.squirrelCageFrame[j] = 1;
 								}
 							}
+
 							Main.squirrelCageFrameCounter[j] = 0;
 						}
 					}
@@ -9632,6 +_,7 @@
 							Main.squirrelCageFrameCounter[j] = 0;
 							Main.squirrelCageFrame[j]++;
 						}
+
 						if (Main.squirrelCageFrame[j] > 3)
 						{
 							if (Main.rand.Next(5) == 0)
@@ -9674,6 +_,7 @@
 									Main.squirrelCageFrame[j] = 10;
 								}
 							}
+
 							Main.squirrelCageFrameCounter[j] = 0;
 						}
 					}
@@ -9703,6 +_,7 @@
 									Main.squirrelCageFrame[j] = 9;
 								}
 							}
+
 							Main.squirrelCageFrameCounter[j] = 0;
 						}
 					}
@@ -9714,12 +_,14 @@
 							Main.squirrelCageFrameCounter[j] = 0;
 							Main.squirrelCageFrame[j]++;
 						}
+
 						if (Main.squirrelCageFrame[j] > 17)
 						{
 							Main.squirrelCageFrame[j] = 0;
 						}
 					}
 				}
+
 				for (int k = 0; k < Main.cageFrames; k++)
 				{
 					if (Main.squirrelCageFrameOrange[k] == 0)
@@ -9743,6 +_,7 @@
 									Main.squirrelCageFrameOrange[k] = 1;
 								}
 							}
+
 							Main.squirrelCageFrameCounterOrange[k] = 0;
 						}
 					}
@@ -9763,6 +_,7 @@
 							Main.squirrelCageFrameCounterOrange[k] = 0;
 							Main.squirrelCageFrameOrange[k]++;
 						}
+
 						if (Main.squirrelCageFrameOrange[k] > 3)
 						{
 							if (Main.rand.Next(5) == 0)
@@ -9805,6 +_,7 @@
 									Main.squirrelCageFrameOrange[k] = 10;
 								}
 							}
+
 							Main.squirrelCageFrameCounterOrange[k] = 0;
 						}
 					}
@@ -9834,6 +_,7 @@
 									Main.squirrelCageFrameOrange[k] = 9;
 								}
 							}
+
 							Main.squirrelCageFrameCounterOrange[k] = 0;
 						}
 					}
@@ -9845,12 +_,14 @@
 							Main.squirrelCageFrameCounterOrange[k] = 0;
 							Main.squirrelCageFrameOrange[k]++;
 						}
+
 						if (Main.squirrelCageFrameOrange[k] > 17)
 						{
 							Main.squirrelCageFrameOrange[k] = 0;
 						}
 					}
 				}
+
 				for (int l = 0; l < Main.cageFrames; l++)
 				{
 					if (Main.mallardCageFrame[l] == 0 || Main.mallardCageFrame[l] == 4)
@@ -9880,6 +_,7 @@
 									Main.mallardCageFrame[l] = 1;
 								}
 							}
+
 							Main.mallardCageFrameCounter[l] = 0;
 						}
 					}
@@ -9891,6 +_,7 @@
 							Main.mallardCageFrameCounter[l] = 0;
 							Main.mallardCageFrame[l]++;
 						}
+
 						if (Main.mallardCageFrame[l] > 3)
 						{
 							if (Main.rand.Next(5) == 0)
@@ -9939,6 +_,7 @@
 									Main.mallardCageFrame[l] = 13;
 								}
 							}
+
 							Main.mallardCageFrameCounter[l] = 0;
 						}
 					}
@@ -9959,6 +_,7 @@
 									Main.mallardCageFrame[l] = 13;
 								}
 							}
+
 							Main.mallardCageFrameCounter[l] = 0;
 						}
 					}
@@ -9970,12 +_,14 @@
 							Main.mallardCageFrameCounter[l] = 0;
 							Main.mallardCageFrame[l]++;
 						}
+
 						if (Main.mallardCageFrame[l] > 23)
 						{
 							Main.mallardCageFrame[l] = 0;
 						}
 					}
 				}
+
 				for (int m = 0; m < Main.cageFrames; m++)
 				{
 					if (Main.duckCageFrame[m] == 0 || Main.duckCageFrame[m] == 4)
@@ -10005,6 +_,7 @@
 									Main.duckCageFrame[m] = 1;
 								}
 							}
+
 							Main.duckCageFrameCounter[m] = 0;
 						}
 					}
@@ -10016,6 +_,7 @@
 							Main.duckCageFrameCounter[m] = 0;
 							Main.duckCageFrame[m]++;
 						}
+
 						if (Main.duckCageFrame[m] > 3)
 						{
 							if (Main.rand.Next(5) == 0)
@@ -10064,6 +_,7 @@
 									Main.duckCageFrame[m] = 13;
 								}
 							}
+
 							Main.duckCageFrameCounter[m] = 0;
 						}
 					}
@@ -10084,6 +_,7 @@
 									Main.duckCageFrame[m] = 13;
 								}
 							}
+
 							Main.duckCageFrameCounter[m] = 0;
 						}
 					}
@@ -10095,12 +_,14 @@
 							Main.duckCageFrameCounter[m] = 0;
 							Main.duckCageFrame[m]++;
 						}
+
 						if (Main.duckCageFrame[m] > 23)
 						{
 							Main.duckCageFrame[m] = 0;
 						}
 					}
 				}
+
 				for (int n = 0; n < Main.cageFrames; n++)
 				{
 					if (Main.birdCageFrame[n] == 0)
@@ -10119,6 +_,7 @@
 									Main.birdCageFrame[n] = 1;
 								}
 							}
+
 							Main.birdCageFrameCounter[n] = 0;
 						}
 					}
@@ -10163,6 +_,7 @@
 									Main.birdCageFrame[n] = 11;
 								}
 							}
+
 							Main.birdCageFrameCounter[n] = 0;
 						}
 					}
@@ -10176,6 +_,7 @@
 							{
 								Main.birdCageFrame[n] = 0;
 							}
+
 							Main.birdCageFrameCounter[n] = 0;
 						}
 					}
@@ -10205,6 +_,7 @@
 							{
 								Main.birdCageFrame[n] = 15;
 							}
+
 							Main.birdCageFrameCounter[n] = 0;
 						}
 					}
@@ -10227,10 +_,12 @@
 							{
 								Main.birdCageFrame[n] = 0;
 							}
+
 							Main.birdCageFrameCounter[n] = 0;
 						}
 					}
 				}
+
 				for (int num2 = 0; num2 < Main.cageFrames; num2++)
 				{
 					if (Main.blueBirdCageFrame[num2] == 0)
@@ -10249,6 +_,7 @@
 									Main.blueBirdCageFrame[num2] = 1;
 								}
 							}
+
 							Main.blueBirdCageFrameCounter[num2] = 0;
 						}
 					}
@@ -10293,6 +_,7 @@
 									Main.blueBirdCageFrame[num2] = 11;
 								}
 							}
+
 							Main.blueBirdCageFrameCounter[num2] = 0;
 						}
 					}
@@ -10306,6 +_,7 @@
 							{
 								Main.blueBirdCageFrame[num2] = 0;
 							}
+
 							Main.blueBirdCageFrameCounter[num2] = 0;
 						}
 					}
@@ -10335,6 +_,7 @@
 							{
 								Main.blueBirdCageFrame[num2] = 15;
 							}
+
 							Main.blueBirdCageFrameCounter[num2] = 0;
 						}
 					}
@@ -10357,10 +_,12 @@
 							{
 								Main.blueBirdCageFrame[num2] = 0;
 							}
+
 							Main.blueBirdCageFrameCounter[num2] = 0;
 						}
 					}
 				}
+
 				for (int num3 = 0; num3 < Main.cageFrames; num3++)
 				{
 					if (Main.redBirdCageFrame[num3] == 0)
@@ -10379,6 +_,7 @@
 									Main.redBirdCageFrame[num3] = 1;
 								}
 							}
+
 							Main.redBirdCageFrameCounter[num3] = 0;
 						}
 					}
@@ -10423,6 +_,7 @@
 									Main.redBirdCageFrame[num3] = 11;
 								}
 							}
+
 							Main.redBirdCageFrameCounter[num3] = 0;
 						}
 					}
@@ -10436,6 +_,7 @@
 							{
 								Main.redBirdCageFrame[num3] = 0;
 							}
+
 							Main.redBirdCageFrameCounter[num3] = 0;
 						}
 					}
@@ -10465,6 +_,7 @@
 							{
 								Main.redBirdCageFrame[num3] = 15;
 							}
+
 							Main.redBirdCageFrameCounter[num3] = 0;
 						}
 					}
@@ -10487,10 +_,12 @@
 							{
 								Main.redBirdCageFrame[num3] = 0;
 							}
+
 							Main.redBirdCageFrameCounter[num3] = 0;
 						}
 					}
 				}
+
 				for (int num4 = 0; num4 < 2; num4++)
 				{
 					for (int num5 = 0; num5 < Main.cageFrames; num5++)
@@ -10523,6 +_,7 @@
 										Main.scorpionCageFrame[num4, num5] = 14;
 									}
 								}
+
 								Main.scorpionCageFrameCounter[num4, num5] = 0;
 							}
 						}
@@ -10553,6 +_,7 @@
 								{
 									Main.scorpionCageFrame[num4, num5] = 12;
 								}
+
 								Main.scorpionCageFrameCounter[num4, num5] = 0;
 							}
 						}
@@ -10580,6 +_,7 @@
 								{
 									Main.scorpionCageFrame[num4, num5] = 14;
 								}
+
 								if (Main.rand.Next(5) == 0)
 								{
 									Main.scorpionCageFrame[num4, num5] = 0;
@@ -10610,6 +_,7 @@
 										Main.scorpionCageFrame[num4, num5] = 16;
 									}
 								}
+
 								Main.scorpionCageFrameCounter[num4, num5] = 0;
 							}
 						}
@@ -10637,6 +_,7 @@
 								{
 									Main.scorpionCageFrame[num4, num5] = 16;
 								}
+
 								if (Main.rand.Next(5) == 0)
 								{
 									Main.scorpionCageFrame[num4, num5] = 4;
@@ -10645,6 +_,7 @@
 						}
 					}
 				}
+
 				for (int num6 = 0; num6 < Main.cageFrames; num6++)
 				{
 					if (Main.penguinCageFrame[num6] == 0)
@@ -10671,6 +_,7 @@
 									Main.penguinCageFrame[num6] = 1;
 								}
 							}
+
 							Main.penguinCageFrameCounter[num6] = 0;
 						}
 					}
@@ -10721,6 +_,7 @@
 							{
 								Main.penguinCageFrame[num6] = 0;
 							}
+
 							Main.penguinCageFrameCounter[num6] = 0;
 						}
 					}
@@ -10748,6 +_,7 @@
 									Main.penguinCageFrame[num6] = 9;
 								}
 							}
+
 							Main.penguinCageFrameCounter[num6] = 0;
 						}
 					}
@@ -10798,10 +_,12 @@
 							{
 								Main.penguinCageFrame[num6] = 8;
 							}
+
 							Main.penguinCageFrameCounter[num6] = 0;
 						}
 					}
 				}
+
 				for (int num7 = 0; num7 < Main.cageFrames; num7++)
 				{
 					if (Main.snailCageFrame[num7] >= 0 && Main.snailCageFrame[num7] <= 13)
@@ -10829,6 +_,7 @@
 									Main.snailCageFrame[num7] = 0;
 								}
 							}
+
 							Main.snailCageFrameCounter[num7] = 0;
 						}
 					}
@@ -10840,6 +_,7 @@
 							Main.snailCageFrameCounter[num7] = 0;
 							Main.snailCageFrame[num7]++;
 						}
+
 						if (Main.snailCageFrame[num7] > 18)
 						{
 							Main.snailCageFrame[num7] = 20;
@@ -10869,6 +_,7 @@
 						}
 					}
 				}
+
 				for (int num8 = 0; num8 < Main.cageFrames; num8++)
 				{
 					if (Main.snail2CageFrame[num8] >= 0 && Main.snail2CageFrame[num8] <= 13)
@@ -10896,6 +_,7 @@
 									Main.snail2CageFrame[num8] = 0;
 								}
 							}
+
 							Main.snail2CageFrameCounter[num8] = 0;
 						}
 					}
@@ -10907,6 +_,7 @@
 							Main.snail2CageFrameCounter[num8] = 0;
 							Main.snail2CageFrame[num8]++;
 						}
+
 						if (Main.snail2CageFrame[num8] > 18)
 						{
 							Main.snail2CageFrame[num8] = 20;
@@ -10936,6 +_,7 @@
 						}
 					}
 				}
+
 				for (int num9 = 0; num9 < Main.cageFrames; num9++)
 				{
 					if (Main.frogCageFrame[num9] == 0)
@@ -10951,6 +_,7 @@
 							{
 								Main.frogCageFrame[num9] = 12;
 							}
+
 							Main.frogCageFrameCounter[num9] = 0;
 						}
 					}
@@ -10971,6 +_,7 @@
 							Main.frogCageFrameCounter[num9] = 0;
 							Main.frogCageFrame[num9]++;
 						}
+
 						if (Main.frogCageFrame[num9] > 17)
 						{
 							if (Main.rand.Next(3) == 0)
@@ -10996,6 +_,7 @@
 							{
 								Main.frogCageFrame[num9] = 18;
 							}
+
 							Main.frogCageFrameCounter[num9] = 0;
 						}
 					}
@@ -11020,6 +_,7 @@
 							Main.frogCageFrameCounter[num9] = 0;
 							Main.frogCageFrame[num9]++;
 						}
+
 						if (Main.frogCageFrame[num9] > 17)
 						{
 							if (Main.rand.Next(3) == 0)
@@ -11033,6 +_,7 @@
 						}
 					}
 				}
+
 				for (int num10 = 0; num10 < Main.cageFrames; num10++)
 				{
 					if (Main.mouseCageFrame[num10] >= 0 && Main.mouseCageFrame[num10] <= 1)
@@ -11045,6 +_,7 @@
 							{
 								Main.mouseCageFrame[num10] = 0;
 							}
+
 							Main.mouseCageFrameCounter[num10] = 0;
 							if (Main.rand.Next(15) == 0)
 							{
@@ -11060,6 +_,7 @@
 							Main.mouseCageFrameCounter[num10] = 0;
 							Main.mouseCageFrame[num10]++;
 						}
+
 						if (Main.mouseCageFrame[num10] > 7)
 						{
 							Main.mouseCageFrame[num10] = 2;
@@ -11075,6 +_,7 @@
 							{
 								Main.mouseCageFrame[num10] = 2;
 							}
+
 							Main.mouseCageFrameCounter[num10] = 0;
 							if (Main.rand.Next(15) == 0)
 							{
@@ -11094,6 +_,7 @@
 							Main.mouseCageFrameCounter[num10] = 0;
 							Main.mouseCageFrame[num10]++;
 						}
+
 						if (Main.mouseCageFrame[num10] > 11)
 						{
 							Main.mouseCageFrame[num10] = 0;
@@ -11135,6 +_,7 @@
 						}
 					}
 				}
+
 				for (int num11 = 0; num11 < Main.cageFrames; num11++)
 				{
 					Main.wormCageFrameCounter[num11]++;
@@ -11148,6 +_,7 @@
 							{
 								Main.wormCageFrame[num11] = 0;
 							}
+
 							if (Main.wormCageFrame[num11] > 18)
 							{
 								if (Main.rand.Next(2) == 0)
@@ -11162,6 +_,7 @@
 						}
 					}
 				}
+
 				int num12 = 0;
 				for (int num13 = 0; num13 < 3; num13++)
 				{
@@ -11169,14 +_,15 @@
 					{
 						case 0:
 							num12 = 24;
-							break;
+						break;
 						case 1:
 							num12 = 31;
-							break;
+						break;
 						case 2:
 							num12 = 34;
-							break;
-					}
+						break;
+					}
+
 					for (int num14 = 0; num14 < Main.cageFrames; num14++)
 					{
 						if (++Main.slugCageFrameCounter[num13, num14] >= Main.rand.Next(5, 15))
@@ -11189,6 +_,7 @@
 						}
 					}
 				}
+
 				for (int num15 = 0; num15 < Main.cageFrames; num15++)
 				{
 					if (Main.grasshopperCageFrame[num15] >= 0 && Main.grasshopperCageFrame[num15] <= 1)
@@ -11201,6 +_,7 @@
 							{
 								Main.grasshopperCageFrame[num15] = 0;
 							}
+
 							Main.grasshopperCageFrameCounter[num15] = 0;
 							if (Main.rand.Next(15) == 0)
 							{
@@ -11216,6 +_,7 @@
 							Main.grasshopperCageFrameCounter[num15] = 0;
 							Main.grasshopperCageFrame[num15]++;
 						}
+
 						if (Main.grasshopperCageFrame[num15] > 5)
 						{
 							Main.grasshopperCageFrame[num15] = 6;
@@ -11231,6 +_,7 @@
 							{
 								Main.grasshopperCageFrame[num15] = 6;
 							}
+
 							Main.grasshopperCageFrameCounter[num15] = 0;
 							if (Main.rand.Next(15) == 0)
 							{
@@ -11246,12 +_,14 @@
 							Main.grasshopperCageFrameCounter[num15] = 0;
 							Main.grasshopperCageFrame[num15]++;
 						}
+
 						if (Main.grasshopperCageFrame[num15] > 11)
 						{
 							Main.grasshopperCageFrame[num15] = 0;
 						}
 					}
 				}
+
 				for (int num16 = 0; num16 < Main.cageFrames; num16++)
 				{
 					byte maxValue = 5;
@@ -11261,6 +_,7 @@
 						{
 							Main.fishBowlFrameMode[num16] = (byte)Main.rand.Next((int)maxValue);
 						}
+
 						Main.fishBowlFrameCounter[num16]++;
 						if (Main.fishBowlFrameCounter[num16] >= 5)
 						{
@@ -11289,6 +_,7 @@
 						{
 							Main.fishBowlFrameMode[num16] = (byte)Main.rand.Next((int)maxValue);
 						}
+
 						Main.fishBowlFrameCounter[num16]++;
 						if (Main.fishBowlFrameCounter[num16] >= 20)
 						{
@@ -11317,6 +_,7 @@
 						{
 							Main.fishBowlFrameMode[num16] = (byte)Main.rand.Next((int)maxValue);
 						}
+
 						Main.fishBowlFrameCounter[num16]++;
 						if (Main.fishBowlFrameCounter[num16] >= Main.rand.Next(5, 3600))
 						{
@@ -11345,6 +_,7 @@
 						{
 							Main.fishBowlFrameMode[num16] = (byte)Main.rand.Next((int)maxValue);
 						}
+
 						Main.fishBowlFrameCounter[num16]++;
 						if (Main.fishBowlFrameCounter[num16] >= 10)
 						{
@@ -11400,6 +_,7 @@
 						}
 					}
 				}
+
 				for (int num17 = 0; num17 < 9; num17++)
 				{
 					for (int num18 = 0; num18 < Main.cageFrames; num18++)
@@ -11413,23 +_,28 @@
 								Main.butterflyCageMode[num17, num18] += 10;
 							}
 						}
+
 						int num19 = Main.rand.Next(3, 16);
 						if (Main.butterflyCageMode[num17, num18] == 1 || Main.butterflyCageMode[num17, num18] == 11)
 						{
 							num19 = 3;
 						}
+
 						if (Main.butterflyCageMode[num17, num18] == 2 || Main.butterflyCageMode[num17, num18] == 12)
 						{
 							num19 = 5;
 						}
+
 						if (Main.butterflyCageMode[num17, num18] == 3 || Main.butterflyCageMode[num17, num18] == 13)
 						{
 							num19 = 10;
 						}
+
 						if (Main.butterflyCageMode[num17, num18] == 4 || Main.butterflyCageMode[num17, num18] == 14)
 						{
 							num19 = 15;
 						}
+
 						if (Main.butterflyCageMode[num17, num18] >= 10)
 						{
 							if (Main.butterflyCageFrame[num17, num18] <= 7)
@@ -11442,6 +_,7 @@
 									{
 										Main.butterflyCageFrame[num17, num18] = 7;
 									}
+
 									if (Main.butterflyCageFrame[num17, num18] == 1 || Main.butterflyCageFrame[num17, num18] == 4 || Main.butterflyCageFrame[num17, num18] == 6)
 									{
 										if (Main.rand.Next(20) == 0)
@@ -11470,6 +_,7 @@
 								{
 									Main.butterflyCageFrame[num17, num18] = 14;
 								}
+
 								if (Main.butterflyCageFrame[num17, num18] == 9 || Main.butterflyCageFrame[num17, num18] == 12 || Main.butterflyCageFrame[num17, num18] == 14)
 								{
 									if (Main.rand.Next(20) == 0)
@@ -11500,6 +_,7 @@
 								{
 									Main.butterflyCageFrame[num17, num18] = 0;
 								}
+
 								if ((Main.butterflyCageFrame[num17, num18] == 1 || Main.butterflyCageFrame[num17, num18] == 4 || Main.butterflyCageFrame[num17, num18] == 6) && Main.rand.Next(10) == 0)
 								{
 									Main.butterflyCageFrame[num17, num18] += 8;
@@ -11514,6 +_,7 @@
 							{
 								Main.butterflyCageFrame[num17, num18] = 8;
 							}
+
 							if ((Main.butterflyCageFrame[num17, num18] == 9 || Main.butterflyCageFrame[num17, num18] == 12 || Main.butterflyCageFrame[num17, num18] == 14) && Main.rand.Next(10) == 0)
 							{
 								Main.butterflyCageFrame[num17, num18] -= 8;
@@ -11521,6 +_,7 @@
 						}
 					}
 				}
+
 				for (int num20 = 0; num20 < 3; num20++)
 				{
 					for (int num21 = 0; num21 < Main.cageFrames; num21++)
@@ -11530,27 +_,33 @@
 						{
 							Main.jellyfishCageMode[num20, num21] = 1;
 						}
+
 						if (Main.jellyfishCageMode[num20, num21] == 2 && Main.rand.Next(60) == 0)
 						{
 							Main.jellyfishCageMode[num20, num21] = 3;
 						}
+
 						int num22 = 1;
 						if (Main.jellyfishCageMode[num20, num21] == 0)
 						{
 							num22 = Main.rand.Next(10, 20);
 						}
+
 						if (Main.jellyfishCageMode[num20, num21] == 1)
 						{
 							num22 = Main.rand.Next(15, 25);
 						}
+
 						if (Main.jellyfishCageMode[num20, num21] == 2)
 						{
 							num22 = Main.rand.Next(4, 9);
 						}
+
 						if (Main.jellyfishCageMode[num20, num21] == 3)
 						{
 							num22 = Main.rand.Next(15, 25);
 						}
+
 						if (Main.jellyfishCageMode[num20, num21] == 0 && Main.jellyfishCageFrame[num20, num21] <= 3 && Main.jellyfishCageFrameCounter[num20, num21] >= num22)
 						{
 							Main.jellyfishCageFrameCounter[num20, num21] = 0;
@@ -11560,6 +_,7 @@
 								Main.jellyfishCageFrame[num20, num21] = 0;
 							}
 						}
+
 						if (Main.jellyfishCageMode[num20, num21] == 1 && Main.jellyfishCageFrame[num20, num21] <= 7 && Main.jellyfishCageFrameCounter[num20, num21] >= num22)
 						{
 							Main.jellyfishCageFrameCounter[num20, num21] = 0;
@@ -11569,6 +_,7 @@
 								Main.jellyfishCageMode[num20, num21] = 2;
 							}
 						}
+
 						if (Main.jellyfishCageMode[num20, num21] == 2 && Main.jellyfishCageFrame[num20, num21] <= 9 && Main.jellyfishCageFrameCounter[num20, num21] >= num22)
 						{
 							Main.jellyfishCageFrameCounter[num20, num21] = 0;
@@ -11578,6 +_,7 @@
 								Main.jellyfishCageFrame[num20, num21] = 7;
 							}
 						}
+
 						if (Main.jellyfishCageMode[num20, num21] == 3 && Main.jellyfishCageFrame[num20, num21] <= 10 && Main.jellyfishCageFrameCounter[num20, num21] >= num22)
 						{
 							Main.jellyfishCageFrameCounter[num20, num21] = 0;
@@ -11617,14 +_,16 @@
 					this._crazyTestArrayMemoryLimit[i] = new Player();
 				}
 			}
+
 			int num2 = Main.rand.Next(this._crazyTestArrayMemoryLimit.Length);
 			Main.NewText(string.Concat(new object[]
-					{
+			{
+
 						"testing ",
 						num2,
 						" ",
 						this._crazyTestArrayMemoryLimit[num2].name
-					}), 255, 255, 255, false);
+			}), 255, 255, 255, false);
 		}
 
 		protected override void Update(GameTime gameTime)
@@ -11637,22 +_,34 @@
 					Main.OnEnginePreload();
 				}
 			}
-			this.DoUpdate(gameTime);
-			CinematicManager.Instance.Update(gameTime);
-			if (Main.netMode == 2)
-			{
-				for (int i = 0; i < 256; i++)
-				{
-					if (Netplay.Clients[i].Socket != null)
-					{
-						Netplay.Clients[i].Socket.SendQueuedPackets();
-					}
-				}
-				return;
-			}
-			if (Main.netMode == 1)
-			{
-				Netplay.Connection.Socket.SendQueuedPackets();
+
+			// TODO, should I put everything in the try catch? this is new stuff.
+			// also, vanilla itself now separated update and doupdate
+			try
+			{
+				this.DoUpdate(gameTime);
+				CinematicManager.Instance.Update(gameTime);
+				if (Main.netMode == 2)
+				{
+					for (int i = 0; i < 256; i++)
+					{
+						if (Netplay.Clients[i].Socket != null)
+						{
+							Netplay.Clients[i].Socket.SendQueuedPackets();
+						}
+					}
+
+					return;
+				}
+
+				if (Main.netMode == 1)
+				{
+					Netplay.Connection.Socket.SendQueuedPackets();
+				}
+			}
+			catch (Exception e)
+			{
+				ErrorLogger.LogException(e);
 			}
 		}
 
@@ -11663,10 +_,12 @@
 			{
 				Main.GlobalTime = (float)(gameTime.TotalGameTime.TotalSeconds % 3600.0);
 			}
+
 			if (Player.StopMoneyTroughFromWorking > 0 && !Main.mouseRight && Main.mouseRightRelease)
 			{
 				Player.StopMoneyTroughFromWorking--;
 			}
+
 			if (!Main.gameMenu || Main.menuMode != 888)
 			{
 				Main.MenuUI.SetState(null);
@@ -11675,35 +_,43 @@
 			{
 				Main.InGameUI.SetState(null);
 			}
+
 			if (Main.MenuUI != null)
 			{
 				Main.MenuUI.Update(gameTime);
 			}
+
 			if (Main.InGameUI != null)
 			{
 				Main.InGameUI.Update(gameTime);
 			}
+
 			Main.MouseOversTryToClear();
 			PlayerInput.ResetInputsOnActiveStateChange();
-#if CLIENT
+			#if CLIENT
 			if (Main.OnTick != null)
 			{
 				Main.OnTick();
 			}
-#endif
+
+			#endif
 			if (Main._hasPendingNetmodeChange)
 			{
 				Main.netMode = Main._targetNetMode;
 				Main._hasPendingNetmodeChange = false;
 			}
+
+			Netplay.OnUpdate();
 			if (CaptureManager.Instance.IsCapturing)
 			{
 				return;
 			}
+
 			if (Main.ActivePlayerFileData != null)
 			{
 				Main.ActivePlayerFileData.UpdatePlayTimer();
 			}
+
 			Main.ignoreErrors = true;
 			if (Main.expertMode)
 			{
@@ -11715,12 +_,14 @@
 				Main.damageMultiplier = 1f;
 				Main.knockBackMultiplier = 1f;
 			}
+
 			Main.gameInactive = !base.IsActive;
 			if (Main.chTitle)
 			{
 				Main.chTitle = false;
 				this.SetTitle();
 			}
+
 			Stopwatch stopwatch = new Stopwatch();
 			stopwatch.Start();
 			WorldGen.destroyObject = false;
@@ -11728,6 +_,7 @@
 			{
 				Main.mapFullscreen = false;
 			}
+
 			Main.UpdateSettingUnlocks();
 			if (Main.dedServ)
 			{
@@ -11738,18 +_,19 @@
 					{
 						Main.fpsTimer.Restart();
 					}
+
 					if (Main.fpsTimer.ElapsedMilliseconds >= 1000L)
 					{
 						Main.dedServCount1 += Main.updateTime;
 						Main.dedServCount2++;
 						float num = (float)Main.dedServCount1 / (float)Main.dedServCount2;
 						Console.WriteLine(string.Concat(new object[]
-								{
-									Main.updateTime,
+						{
+							Main.updateTime,
 									"  (",
 									num,
 									")"
-								}));
+						}));
 						Main.updateTime = 0;
 						Main.fpsTimer.Restart();
 					}
@@ -11760,9 +_,11 @@
 					{
 						Main.fpsTimer.Stop();
 					}
+
 					Main.updateTime = 0;
 				}
 			}
+
 			if (!Main.dedServ)
 			{
 				if (Main.superFast)
@@ -11788,18 +_,22 @@
 						base.IsFixedTimeStep = true;
 						Main.graphics.SynchronizeWithVerticalRetrace = true;
 					}
+
 					Main.graphics.SynchronizeWithVerticalRetrace = true;
 				}
+
 				if (Main.showSplash)
 				{
 					return;
 				}
+
 				if (!Main.gameMenu && Main.netMode == 1)
 				{
 					if (!Main.saveTime.IsRunning)
 					{
 						Main.saveTime.Start();
 					}
+
 					if (Main.saveTime.ElapsedMilliseconds > 300000L)
 					{
 						Main.saveTime.Reset();
@@ -11812,6 +_,7 @@
 					{
 						Main.saveTime.Start();
 					}
+
 					if (Main.saveTime.ElapsedMilliseconds > 600000L)
 					{
 						Main.saveTime.Reset();
@@ -11823,6 +_,7 @@
 				{
 					Main.saveTime.Stop();
 				}
+
 				Main.updateTime++;
 				if (Main.fpsTimer.ElapsedMilliseconds >= 1000L)
 				{
@@ -11836,19 +_,23 @@
 						Main.gfxRate = 0.01f;
 						Main.gfxQuality -= 0.1f;
 					}
+
 					if (Main.gfxQuality < 0f)
 					{
 						Main.gfxQuality = 0f;
 					}
+
 					if (Main.gfxQuality > 1f)
 					{
 						Main.gfxQuality = 1f;
 					}
+
 					if (Main.maxQ && base.IsActive)
 					{
 						Main.gfxQuality = 1f;
 						Main.maxQ = false;
 					}
+
 					Main.updateRate = Main.uCount;
 					Main.frameRate = Main.fpsCount;
 					Main.fpsCount = 0;
@@ -11864,8 +_,10 @@
 					{
 						Main.mapTimeMax = 0;
 					}
+
 					int arg_4AE_0 = Main.netMode;
 				}
+
 				if (Main.FrameSkipMode == 0 || Main.FrameSkipMode == 2)
 				{
 					Main.UpdateTimeAccumulator += gameTime.ElapsedGameTime.TotalSeconds;
@@ -11875,12 +_,15 @@
 						{
 							Main.instance.SuppressDraw();
 						}
+
 						return;
 					}
+
 					gameTime = new GameTime(gameTime.TotalGameTime, new TimeSpan(166666L));
 					Main.UpdateTimeAccumulator -= 0.016666666666666666;
 					Main.UpdateTimeAccumulator = Math.Min(Main.UpdateTimeAccumulator, 0.016666666666666666);
 				}
+
 				Main.uCount++;
 				Main.drawSkip = false;
 				Filters.Scene.Update(gameTime);
@@ -11894,6 +_,7 @@
 				{
 					Main.teamCooldown--;
 				}
+
 				if (Main.treeMntBG[1] == 94 || (Main.treeMntBG[1] >= 114 && Main.treeMntBG[1] <= 116))
 				{
 					Main.bgFrameCounter[0]++;
@@ -11906,6 +_,7 @@
 							Main.bgFrame[0] = 0;
 						}
 					}
+
 					if (Main.bgFrame[0] == 0)
 					{
 						Main.treeMntBG[1] = 94;
@@ -11922,6 +_,7 @@
 					{
 						Main.treeMntBG[1] = 116;
 					}
+
 					if (Main.bgFrame[0] == 0)
 					{
 						Main.treeMntBG[0] = 93;
@@ -11939,6 +_,7 @@
 						Main.treeMntBG[0] = 170;
 					}
 				}
+
 				if (Main.treeMntBG[1] >= 180 && Main.treeMntBG[1] <= 183)
 				{
 					Main.bgFrameCounter[0]++;
@@ -11951,6 +_,7 @@
 							Main.bgFrame[0] = 0;
 						}
 					}
+
 					if (Main.bgFrame[0] == 0)
 					{
 						Main.treeMntBG[1] = 180;
@@ -11968,6 +_,7 @@
 						Main.treeMntBG[1] = 183;
 					}
 				}
+
 				Animation.UpdateAll();
 				if (Main.qaStyle == 1)
 				{
@@ -11981,26 +_,31 @@
 				{
 					Main.gfxQuality = 0f;
 				}
+
 				Main.numDust = (int)(6000f * (Main.gfxQuality * 0.7f + 0.3f));
 				if ((double)Main.gfxQuality < 0.9)
 				{
 					Main.numDust = (int)((float)Main.numDust * Main.gfxQuality);
 				}
+
 				if (Main.numDust < 1000)
 				{
 					Main.numDust = 1000;
 				}
+
 				Gore.goreTime = (int)(600f * Main.gfxQuality);
 				if (!WorldGen.gen)
 				{
 					Liquid.maxLiquid = (int)(2500f + 2500f * Main.gfxQuality);
 					Liquid.cycles = (int)(17f - 10f * Main.gfxQuality);
 				}
+
 				if (Main.superFast)
 				{
 					Main.graphics.SynchronizeWithVerticalRetrace = false;
 					Main.drawSkip = false;
 				}
+
 				if ((double)Main.gfxQuality < 0.2)
 				{
 					Lighting.maxRenderCount = 8;
@@ -12021,11 +_,13 @@
 				{
 					Lighting.maxRenderCount = 4;
 				}
+
 				if (!WorldGen.gen && Liquid.quickSettle)
 				{
 					Liquid.maxLiquid = Liquid.resLiquid;
 					Liquid.cycles = 1;
 				}
+
 				Main.hasFocus = base.IsActive;
 				if (!Main.gameMenu || Main.netMode == 2)
 				{
@@ -12033,27 +_,31 @@
 					WorldFile.tempRainTime = Main.rainTime;
 					WorldFile.tempMaxRain = Main.maxRaining;
 				}
+
 				if (!base.IsActive && Main.netMode == 0)
 				{
-#if !MAC
+					#if !MAC
 					base.IsMouseVisible = true;
-#endif
+					#endif
 					if (Main.netMode != 2 && Main.myPlayer >= 0)
 					{
 						Main.player[Main.myPlayer].delayUseItem = true;
 					}
+
 					Main.mouseLeftRelease = false;
 					Main.mouseRightRelease = false;
 					if (Main.gameMenu)
 					{
 						Main.UpdateMenu();
 					}
+
 					Main.gamePaused = true;
 					return;
 				}
-#if !MAC
+
+				#if !MAC
 				base.IsMouseVisible = false;
-#endif
+				#endif
 				EmoteBubble.UpdateAll();
 				ScreenObstruction.Update();
 				ScreenDarkness.Update();
@@ -12064,32 +_,38 @@
 				{
 					Main.mouseTextColorChange = -4;
 				}
+
 				if (Main.mouseTextColor <= 175)
 				{
 					Main.mouseTextColorChange = 4;
 				}
+
 				Main.demonTorch += (float)Main.demonTorchDir * 0.01f;
 				if (Main.demonTorch > 1f)
 				{
 					Main.demonTorch = 1f;
 					Main.demonTorchDir = -1;
 				}
+
 				if (Main.demonTorch < 0f)
 				{
 					Main.demonTorch = 0f;
 					Main.demonTorchDir = 1;
 				}
+
 				Main.martianLight += (float)Main.martianLightDir * 0.015f;
 				if (Main.martianLight > 1f)
 				{
 					Main.martianLight = 1f;
 					Main.martianLightDir = -1;
 				}
+
 				if (Main.martianLight < 0f)
 				{
 					Main.martianLight = 0f;
 					Main.martianLightDir = 1;
 				}
+
 				int num2 = 7;
 				if (this.DiscoStyle == 0)
 				{
@@ -12100,6 +_,7 @@
 						this.DiscoStyle++;
 					}
 				}
+
 				if (this.DiscoStyle == 1)
 				{
 					Main.DiscoR -= num2;
@@ -12109,6 +_,7 @@
 						this.DiscoStyle++;
 					}
 				}
+
 				if (this.DiscoStyle == 2)
 				{
 					Main.DiscoB += num2;
@@ -12118,6 +_,7 @@
 						this.DiscoStyle++;
 					}
 				}
+
 				if (this.DiscoStyle == 3)
 				{
 					Main.DiscoG -= num2;
@@ -12127,6 +_,7 @@
 						this.DiscoStyle++;
 					}
 				}
+
 				if (this.DiscoStyle == 4)
 				{
 					Main.DiscoR += num2;
@@ -12136,6 +_,7 @@
 						this.DiscoStyle++;
 					}
 				}
+
 				if (this.DiscoStyle == 5)
 				{
 					Main.DiscoB -= num2;
@@ -12145,6 +_,7 @@
 						this.DiscoStyle = 0;
 					}
 				}
+
 				if (Main.gFadeDir == 1)
 				{
 					Main.gFader += 0.1f;
@@ -12163,25 +_,30 @@
 						Main.gFadeDir = 1;
 					}
 				}
+
 				Main.wFrCounter += Main.windSpeed * 2f;
 				if (Main.wFrCounter > 4f)
 				{
 					Main.wFrCounter = 0f;
 					Main.wFrame += 1f;
 				}
+
 				if (Main.wFrCounter < 0f)
 				{
 					Main.wFrCounter = 4f;
 					Main.wFrame -= 1f;
 				}
+
 				if (Main.wFrame > 16f)
 				{
 					Main.wFrame = 1f;
 				}
+
 				if (Main.wFrame < 1f)
 				{
 					Main.wFrame = 16f;
 				}
+
 				this.waterfallManager.UpdateFrame();
 				byte[] expr_CC5_cp_0 = Main.wallFrameCounter;
 				int expr_CC5_cp_1 = 136;
@@ -12197,6 +_,7 @@
 						Main.wallFrame[136] = 0;
 					}
 				}
+
 				byte[] expr_D33_cp_0 = Main.wallFrameCounter;
 				int expr_D33_cp_1 = 137;
 				expr_D33_cp_0[expr_D33_cp_1] += 1;
@@ -12211,6 +_,7 @@
 						Main.wallFrame[137] = 0;
 					}
 				}
+
 				int num3 = 226;
 				byte[] expr_DA4_cp_0 = Main.wallFrameCounter;
 				int expr_DA4_cp_1 = num3;
@@ -12226,6 +_,7 @@
 						Main.wallFrame[num3] = 0;
 					}
 				}
+
 				num3 = 227;
 				byte[] expr_E01_cp_0 = Main.wallFrameCounter;
 				int expr_E01_cp_1 = num3;
@@ -12241,6 +_,7 @@
 						Main.wallFrame[num3] = 0;
 					}
 				}
+
 				num3 = 225;
 				byte[] expr_E5D_cp_0 = Main.wallFrameCounter;
 				int expr_E5D_cp_1 = num3;
@@ -12256,6 +_,7 @@
 						Main.wallFrame[num3] = 0;
 					}
 				}
+
 				byte[] expr_EB7_cp_0 = Main.wallFrameCounter;
 				int expr_EB7_cp_1 = 172;
 				expr_EB7_cp_0[expr_EB7_cp_1] += 1;
@@ -12270,6 +_,7 @@
 						Main.wallFrame[172] = 0;
 					}
 				}
+
 				byte[] expr_F26_cp_0 = Main.wallFrameCounter;
 				int expr_F26_cp_1 = 168;
 				expr_F26_cp_0[expr_F26_cp_1] += 1;
@@ -12284,6 +_,7 @@
 						Main.wallFrame[168] = 0;
 					}
 				}
+
 				byte[] expr_F94_cp_0 = Main.wallFrameCounter;
 				int expr_F94_cp_1 = 169;
 				expr_F94_cp_0[expr_F94_cp_1] += 1;
@@ -12298,6 +_,7 @@
 						Main.wallFrame[169] = 0;
 					}
 				}
+
 				byte[] expr_1002_cp_0 = Main.wallFrameCounter;
 				int expr_1002_cp_1 = 144;
 				expr_1002_cp_0[expr_1002_cp_1] += 1;
@@ -12375,6 +_,8 @@
 						Main.wallFrameCounter[144] = 0;
 					}
 				}
+
+				WallLoader.AnimateWalls();
 				Main.tileFrameCounter[12]++;
 				if (Main.tileFrameCounter[12] > 5)
 				{
@@ -12385,6 +_,7 @@
 						Main.tileFrame[12] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[17]++;
 				if (Main.tileFrameCounter[17] > 5)
 				{
@@ -12395,6 +_,7 @@
 						Main.tileFrame[17] = 0;
 					}
 				}
+
 				if (++Main.tileFrameCounter[133] >= 4)
 				{
 					Main.tileFrameCounter[133] = 0;
@@ -12403,6 +_,7 @@
 						Main.tileFrame[133] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[31]++;
 				if (Main.tileFrameCounter[31] > 10)
 				{
@@ -12413,6 +_,7 @@
 						Main.tileFrame[31] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[77]++;
 				if (Main.tileFrameCounter[77] > 5)
 				{
@@ -12423,6 +_,7 @@
 						Main.tileFrame[77] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[106]++;
 				if (Main.tileFrameCounter[106] > 4)
 				{
@@ -12433,6 +_,7 @@
 						Main.tileFrame[106] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[207]++;
 				if (Main.tileFrameCounter[207] > 4)
 				{
@@ -12443,6 +_,7 @@
 						Main.tileFrame[207] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[215]++;
 				if (Main.tileFrameCounter[215] >= 4)
 				{
@@ -12453,6 +_,7 @@
 						Main.tileFrame[215] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[217]++;
 				if (Main.tileFrameCounter[217] > 4)
 				{
@@ -12463,6 +_,7 @@
 						Main.tileFrame[217] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[218]++;
 				if (Main.tileFrameCounter[218] > 4)
 				{
@@ -12473,6 +_,7 @@
 						Main.tileFrame[218] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[219]++;
 				if (Main.tileFrameCounter[219] > 4)
 				{
@@ -12483,6 +_,7 @@
 						Main.tileFrame[219] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[220]++;
 				if (Main.tileFrameCounter[220] > 4)
 				{
@@ -12493,6 +_,7 @@
 						Main.tileFrame[220] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[231]++;
 				if (Main.tileFrameCounter[231] > 16)
 				{
@@ -12503,6 +_,7 @@
 						Main.tileFrame[231] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[235]++;
 				if (Main.tileFrameCounter[235] > 20)
 				{
@@ -12512,6 +_,7 @@
 					{
 						Main.tileFrame[235] = 0;
 					}
+
 					if (Main.tileFrame[235] > 1)
 					{
 						Main.tileLighted[235] = true;
@@ -12521,6 +_,7 @@
 						Main.tileLighted[235] = false;
 					}
 				}
+
 				Main.tileFrameCounter[238]++;
 				if (Main.tileFrameCounter[238] > 20)
 				{
@@ -12531,6 +_,7 @@
 						Main.tileFrame[238] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[243]++;
 				if (Main.tileFrameCounter[243] > 4)
 				{
@@ -12541,6 +_,7 @@
 						Main.tileFrame[243] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[244]++;
 				if (Main.tileFrameCounter[244] > 4)
 				{
@@ -12551,6 +_,7 @@
 						Main.tileFrame[244] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[247]++;
 				if (Main.tileFrameCounter[247] > 4)
 				{
@@ -12561,6 +_,7 @@
 						Main.tileFrame[247] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[96]++;
 				if (Main.tileFrameCounter[96] > 4)
 				{
@@ -12571,6 +_,7 @@
 						Main.tileFrame[96] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[171]++;
 				if (Main.tileFrameCounter[171] > 16)
 				{
@@ -12581,6 +_,7 @@
 						Main.tileFrame[171] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[270]++;
 				if (Main.tileFrameCounter[270] > 8)
 				{
@@ -12591,6 +_,7 @@
 						Main.tileFrame[270] = 0;
 					}
 				}
+
 				Main.tileFrame[271] = Main.tileFrame[270];
 				Main.tileFrameCounter[272]++;
 				if (Main.tileFrameCounter[272] >= 10)
@@ -12602,6 +_,7 @@
 						Main.tileFrame[272] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[300]++;
 				if (Main.tileFrameCounter[300] >= 5)
 				{
@@ -12612,6 +_,7 @@
 						Main.tileFrame[300] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[301]++;
 				if (Main.tileFrameCounter[301] >= 5)
 				{
@@ -12622,6 +_,7 @@
 						Main.tileFrame[301] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[302]++;
 				if (Main.tileFrameCounter[302] >= 5)
 				{
@@ -12632,6 +_,7 @@
 						Main.tileFrame[302] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[303]++;
 				if (Main.tileFrameCounter[303] >= 5)
 				{
@@ -12642,6 +_,7 @@
 						Main.tileFrame[303] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[305]++;
 				if (Main.tileFrameCounter[305] >= 5)
 				{
@@ -12652,6 +_,7 @@
 						Main.tileFrame[305] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[306]++;
 				if (Main.tileFrameCounter[306] >= 5)
 				{
@@ -12662,6 +_,7 @@
 						Main.tileFrame[306] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[307]++;
 				if (Main.tileFrameCounter[307] >= 5)
 				{
@@ -12672,6 +_,7 @@
 						Main.tileFrame[307] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[308]++;
 				if (Main.tileFrameCounter[308] >= 5)
 				{
@@ -12682,6 +_,7 @@
 						Main.tileFrame[308] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[314]++;
 				if (Main.tileFrameCounter[314] >= 10)
 				{
@@ -12692,6 +_,7 @@
 						Main.tileFrame[314] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[326]++;
 				if (Main.tileFrameCounter[326] >= 5)
 				{
@@ -12702,6 +_,7 @@
 						Main.tileFrame[326] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[327]++;
 				if (Main.tileFrameCounter[327] >= 10)
 				{
@@ -12712,6 +_,7 @@
 						Main.tileFrame[327] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[345]++;
 				if (Main.tileFrameCounter[345] >= 10)
 				{
@@ -12722,6 +_,7 @@
 						Main.tileFrame[345] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[458]++;
 				if (Main.tileFrameCounter[458] >= 10)
 				{
@@ -12732,6 +_,7 @@
 						Main.tileFrame[458] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[459]++;
 				if (Main.tileFrameCounter[459] >= 10)
 				{
@@ -12742,6 +_,7 @@
 						Main.tileFrame[459] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[336]++;
 				if (Main.tileFrameCounter[336] >= 5)
 				{
@@ -12752,6 +_,7 @@
 						Main.tileFrame[336] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[328]++;
 				if (Main.tileFrameCounter[328] >= 5)
 				{
@@ -12762,6 +_,7 @@
 						Main.tileFrame[328] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[329]++;
 				if (Main.tileFrameCounter[329] >= 5)
 				{
@@ -12772,6 +_,7 @@
 						Main.tileFrame[329] = 0;
 					}
 				}
+
 				for (int i = 340; i <= 344; i++)
 				{
 					Main.tileFrameCounter[i]++;
@@ -12785,6 +_,7 @@
 						}
 					}
 				}
+
 				Main.tileFrameCounter[351]++;
 				if (Main.tileFrameCounter[351] >= 5)
 				{
@@ -12795,6 +_,7 @@
 						Main.tileFrame[351] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[354]++;
 				if (Main.tileFrameCounter[354] >= 5)
 				{
@@ -12805,6 +_,7 @@
 						Main.tileFrame[354] = 0;
 					}
 				}
+
 				Main.tileFrame[355] = Main.tileFrame[354];
 				Main.tileFrameCounter[377]++;
 				if (Main.tileFrameCounter[377] >= 5)
@@ -12816,6 +_,7 @@
 						Main.tileFrame[377] = 0;
 					}
 				}
+
 				Main.tileFrameCounter[379]++;
 				if (Main.tileFrameCounter[379] >= 10)
 				{
@@ -12826,6 +_,7 @@
 						Main.tileFrame[379] = 0;
 					}
 				}
+
 				if (++Main.tileFrameCounter[390] >= 8)
 				{
 					Main.tileFrameCounter[390] = 0;
@@ -12834,6 +_,7 @@
 						Main.tileFrame[390] = 0;
 					}
 				}
+
 				if (++Main.tileFrameCounter[228] >= 5)
 				{
 					Main.tileFrameCounter[228] = 0;
@@ -12842,6 +_,7 @@
 						Main.tileFrame[228] = 0;
 					}
 				}
+
 				if (++Main.tileFrameCounter[405] >= 5)
 				{
 					Main.tileFrameCounter[405] = 0;
@@ -12850,6 +_,7 @@
 						Main.tileFrame[405] = 0;
 					}
 				}
+
 				if (++Main.tileFrameCounter[406] >= 8)
 				{
 					Main.tileFrameCounter[406] = 0;
@@ -12858,6 +_,7 @@
 						Main.tileFrame[406] = 0;
 					}
 				}
+
 				if (++Main.tileFrameCounter[452] >= 5)
 				{
 					Main.tileFrameCounter[452] = 0;
@@ -12866,6 +_,7 @@
 						Main.tileFrame[452] = 0;
 					}
 				}
+
 				if (++Main.tileFrameCounter[455] >= 5)
 				{
 					Main.tileFrameCounter[455] = 0;
@@ -12874,6 +_,7 @@
 						Main.tileFrame[455] = 0;
 					}
 				}
+
 				if (++Main.tileFrameCounter[454] >= 10 && (Main.tileFrame[454] != 0 || Main.tileFrameCounter[454] >= 90))
 				{
 					Main.tileFrameCounter[454] = 0;
@@ -12882,24 +_,29 @@
 						Main.tileFrame[454] = 4;
 					}
 				}
+
 				Main.tileFrameCounter[453] += (WorldGen.gen ? 0 : Main.rand.Next(3));
 				if (++Main.tileFrameCounter[453] >= 60)
 				{
 					Main.tileFrameCounter[453] = 0;
 				}
+
 				if (++Main.tileFrame[412] >= 240)
 				{
 					Main.tileFrame[412] = 0;
 				}
+
 				Main.tileFrameCounter[456] += (WorldGen.gen ? 0 : Main.rand.Next(3));
 				if (++Main.tileFrameCounter[456] >= 80)
 				{
 					Main.tileFrameCounter[456] = 0;
 				}
+
 				if (++Main.tileFrame[456] >= 240)
 				{
 					Main.tileFrame[456] = 0;
 				}
+
 				if (++Main.tileFrameCounter[410] >= 8)
 				{
 					Main.tileFrameCounter[410] = 0;
@@ -12908,6 +_,7 @@
 						Main.tileFrame[410] = 0;
 					}
 				}
+
 				if (++Main.tileFrameCounter[421] >= 4)
 				{
 					Main.tileFrameCounter[421] = 0;
@@ -12916,6 +_,7 @@
 						Main.tileFrame[421] = 0;
 					}
 				}
+
 				if (++Main.tileFrameCounter[422] >= 4)
 				{
 					Main.tileFrameCounter[422] = 0;
@@ -12924,6 +_,7 @@
 						Main.tileFrame[422] = 3;
 					}
 				}
+
 				if (++Main.tileFrameCounter[463] >= 10)
 				{
 					Main.tileFrameCounter[463] = 0;
@@ -12932,6 +_,7 @@
 						Main.tileFrame[463] = 0;
 					}
 				}
+
 				if (++Main.tileFrameCounter[464] >= 5)
 				{
 					Main.tileFrameCounter[464] = 0;
@@ -12940,6 +_,8 @@
 						Main.tileFrame[464] = 0;
 					}
 				}
+
+				TileLoader.AnimateTiles();
 				Main.CritterCages();
 				Main.UpdateDrawAnimations();
 				if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F10) && !Main.drawingPlayerChat && !Main.editSign && !Main.editChest)
@@ -12956,12 +_,14 @@
 							Main.showFrameRate = true;
 						}
 					}
+
 					Main.frameRelease = false;
 				}
 				else
 				{
 					Main.frameRelease = true;
 				}
+
 				if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F9) && !Main.drawingPlayerChat && !Main.editSign && !Main.editChest)
 				{
 					if (Main.RGBRelease)
@@ -12969,12 +_,14 @@
 						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 						Lighting.NextLightMode();
 					}
+
 					Main.RGBRelease = false;
 				}
 				else
 				{
 					Main.RGBRelease = true;
 				}
+
 				if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F8) && !Main.drawingPlayerChat && !Main.editSign && !Main.editChest)
 				{
 					if (Main.netRelease)
@@ -12989,12 +_,14 @@
 							Main.netDiag = true;
 						}
 					}
+
 					Main.netRelease = false;
 				}
 				else
 				{
 					Main.netRelease = true;
 				}
+
 				if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F7) && !Main.drawingPlayerChat && !Main.editSign && !Main.editChest)
 				{
 					if (Main.drawRelease)
@@ -13013,12 +_,14 @@
 							Main.drawDiag = true;
 						}
 					}
+
 					Main.drawRelease = false;
 				}
 				else
 				{
 					Main.drawRelease = true;
 				}
+
 				if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F11))
 				{
 					if (Main.releaseUI)
@@ -13032,12 +_,14 @@
 							Main.hideUI = true;
 						}
 					}
+
 					Main.releaseUI = false;
 				}
 				else
 				{
 					Main.releaseUI = true;
 				}
+
 				if ((Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) || Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt)) && Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Enter) && Main.hasFocus)
 				{
 					if (Main.toggleFullscreen)
@@ -13045,13 +_,16 @@
 						Main.ToggleFullScreen();
 						Main.chatRelease = false;
 					}
+
 					Main.toggleFullscreen = false;
 				}
 				else
 				{
 					Main.toggleFullscreen = true;
 				}
+
 				PlayerInput.UpdateInput();
+				ModLoader.ModHooks.PostUpdateInput();
 				UILinkPointNavigator.Update();
 				Main.oldKeyState = Main.keyState;
 				Main.keyState = Keyboard.GetState();
@@ -13059,6 +_,7 @@
 				{
 					Main.drawingPlayerChat = false;
 				}
+
 				if (!Main.drawingPlayerChat)
 				{
 					Main.startChatLine = 0;
@@ -13073,6 +_,7 @@
 						{
 							Main.startChatLine = Main.numChatLines - Main.showCount - 1;
 						}
+
 						if (Main.chatLine[Main.startChatLine + Main.showCount].text == "")
 						{
 							Main.startChatLine--;
@@ -13086,10 +_,12 @@
 							Main.startChatLine = 0;
 						}
 					}
+
 					if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Escape))
 					{
 						Main.drawingPlayerChat = false;
 					}
+
 					string a = Main.chatText;
 					Main.chatText = Main.GetInputText(Main.chatText);
 					int num6 = Main.screenWidth - 330;
@@ -13100,17 +_,23 @@
 							Main.chatText = Main.chatText.Substring(0, Main.chatText.Length - 1);
 						}
 					}
+
 					if (a != Main.chatText)
 					{
 						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 					}
+
 					if (Main.inputTextEnter && Main.chatRelease)
 					{
-						if (Main.chatText != "")
+						var handled = chatText.Length > 0 && chatText[0] == '/' &&
+								CommandManager.HandleCommand(chatText, new ChatCommandCaller());
+
+						if (Main.chatText != "" && !handled)
 						{
 							NetMessage.SendData(25, -1, -1, Main.chatText, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
 						}
-						if (Main.netMode == 0 && Main.chatText != "")
+
+						if (Main.netMode == 0 && Main.chatText != "" && !handled)
 						{
 							Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
 							if (Main.player[Main.myPlayer].difficulty == 2)
@@ -13121,11 +_,13 @@
 							{
 								white = Main.mcColor;
 							}
+
 							string text = Main.chatText;
 							text = NameTagHandler.GenerateTag(Main.player[Main.myPlayer].name) + " " + Main.chatText;
 							Main.player[Main.myPlayer].chatOverhead.NewMessage(Main.chatText, Main.chatLength / 2);
 							Main.NewTextMultiline(text, false, white, Main.TextMaxLengthForScreen);
 						}
+
 						Main.chatText = "";
 						Main.drawingPlayerChat = false;
 						Main.chatRelease = false;
@@ -13135,7 +_,8 @@
 						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
 					}
 				}
-				if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Enter) && Main.netMode == 1 && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt) && Main.hasFocus)
+
+				if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Enter) && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt) && Main.hasFocus)
 				{
 					if (Main.chatRelease && !Main.drawingPlayerChat && !Main.editSign && !Main.editChest && !Main.gameMenu && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Escape))
 					{
@@ -13144,12 +_,14 @@
 						Main.clrInput();
 						Main.chatText = "";
 					}
+
 					Main.chatRelease = false;
 				}
 				else
 				{
 					Main.chatRelease = true;
 				}
+
 				if (Main.gameMenu)
 				{
 					Main.UpdateMenu();
@@ -13157,22 +_,28 @@
 					{
 						return;
 					}
+
 					Main.gamePaused = false;
 				}
+
 				Main.CheckInvasionProgressDisplay();
 			}
+
 			if (Main.netMode == 2)
 			{
 				Main.cloudAlpha = Main.maxRaining;
 			}
+
 			if (base.IsActive && Main.cloudAlpha > 0f)
 			{
 				Rain.MakeRain();
 			}
+
 			if (Main.netMode != 1)
 			{
 				this.updateCloudLayer();
 			}
+
 			this.UpdateWeather(gameTime);
 			Main.Ambience();
 			if (Main.netMode != 2)
@@ -13189,10 +_,12 @@
 						goto IL_3130;
 					}
 				}
+
 				Main.snowing();
 				IL_3130:
 				Sandstorm.EmitDust();
 			}
+
 			if (Main.netMode == 1)
 			{
 				for (int j = 0; j < 59; j++)
@@ -13202,6 +_,7 @@
 						NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].inventory[j].name, Main.myPlayer, (float)j, (float)Main.player[Main.myPlayer].inventory[j].prefix, 0f, 0, 0, 0);
 					}
 				}
+
 				for (int k = 0; k < Main.player[Main.myPlayer].armor.Length; k++)
 				{
 					if (Main.player[Main.myPlayer].armor[k].IsNotTheSameAs(Main.clientPlayer.armor[k]))
@@ -13209,6 +_,7 @@
 						NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].armor[k].name, Main.myPlayer, (float)(59 + k), (float)Main.player[Main.myPlayer].armor[k].prefix, 0f, 0, 0, 0);
 					}
 				}
+
 				for (int l = 0; l < Main.player[Main.myPlayer].miscEquips.Length; l++)
 				{
 					if (Main.player[Main.myPlayer].miscEquips[l].IsNotTheSameAs(Main.clientPlayer.miscEquips[l]))
@@ -13216,6 +_,7 @@
 						NetMessage.SendData(5, -1, -1, "", Main.myPlayer, (float)(58 + Main.player[Main.myPlayer].armor.Length + Main.player[Main.myPlayer].dye.Length + 1 + l), (float)Main.player[Main.myPlayer].miscEquips[l].prefix, 0f, 0, 0, 0);
 					}
 				}
+
 				for (int m = 0; m < Main.player[Main.myPlayer].miscDyes.Length; m++)
 				{
 					if (Main.player[Main.myPlayer].miscDyes[m].IsNotTheSameAs(Main.clientPlayer.miscDyes[m]))
@@ -13223,6 +_,7 @@
 						NetMessage.SendData(5, -1, -1, "", Main.myPlayer, (float)(58 + Main.player[Main.myPlayer].armor.Length + Main.player[Main.myPlayer].dye.Length + Main.player[Main.myPlayer].miscEquips.Length + 1 + m), (float)Main.player[Main.myPlayer].miscDyes[m].prefix, 0f, 0, 0, 0);
 					}
 				}
+
 				for (int n = 0; n < Main.player[Main.myPlayer].bank.item.Length; n++)
 				{
 					if (Main.player[Main.myPlayer].bank.item[n].IsNotTheSameAs(Main.clientPlayer.bank.item[n]))
@@ -13230,6 +_,7 @@
 						NetMessage.SendData(5, -1, -1, "", Main.myPlayer, (float)(58 + Main.player[Main.myPlayer].armor.Length + Main.player[Main.myPlayer].dye.Length + Main.player[Main.myPlayer].miscEquips.Length + Main.player[Main.myPlayer].miscDyes.Length + 1 + n), (float)Main.player[Main.myPlayer].bank.item[n].prefix, 0f, 0, 0, 0);
 					}
 				}
+
 				for (int num7 = 0; num7 < Main.player[Main.myPlayer].bank2.item.Length; num7++)
 				{
 					if (Main.player[Main.myPlayer].bank2.item[num7].IsNotTheSameAs(Main.clientPlayer.bank2.item[num7]))
@@ -13237,10 +_,12 @@
 						NetMessage.SendData(5, -1, -1, "", Main.myPlayer, (float)(58 + Main.player[Main.myPlayer].armor.Length + Main.player[Main.myPlayer].dye.Length + Main.player[Main.myPlayer].miscEquips.Length + Main.player[Main.myPlayer].miscDyes.Length + Main.player[Main.myPlayer].bank.item.Length + 1 + num7), (float)Main.player[Main.myPlayer].bank2.item[num7].prefix, 0f, 0, 0, 0);
 					}
 				}
+
 				if (Main.player[Main.myPlayer].trashItem.IsNotTheSameAs(Main.clientPlayer.trashItem))
 				{
 					NetMessage.SendData(5, -1, -1, "", Main.myPlayer, (float)(58 + Main.player[Main.myPlayer].armor.Length + Main.player[Main.myPlayer].dye.Length + Main.player[Main.myPlayer].miscEquips.Length + Main.player[Main.myPlayer].miscDyes.Length + Main.player[Main.myPlayer].bank.item.Length + Main.player[Main.myPlayer].bank2.item.Length + 1), (float)Main.player[Main.myPlayer].trashItem.prefix, 0f, 0, 0, 0);
 				}
+
 				for (int num8 = 0; num8 < Main.player[Main.myPlayer].bank3.item.Length; num8++)
 				{
 					if (Main.player[Main.myPlayer].bank3.item[num8].IsNotTheSameAs(Main.clientPlayer.bank3.item[num8]))
@@ -13248,6 +_,7 @@
 						NetMessage.SendData(5, -1, -1, "", Main.myPlayer, (float)(58 + Main.player[Main.myPlayer].armor.Length + Main.player[Main.myPlayer].dye.Length + Main.player[Main.myPlayer].miscEquips.Length + Main.player[Main.myPlayer].miscDyes.Length + Main.player[Main.myPlayer].bank.item.Length + Main.player[Main.myPlayer].bank2.item.Length + 2 + num8), (float)Main.player[Main.myPlayer].bank3.item[num8].prefix, 0f, 0, 0, 0);
 					}
 				}
+
 				for (int num9 = 0; num9 < Main.player[Main.myPlayer].dye.Length; num9++)
 				{
 					if (Main.player[Main.myPlayer].dye[num9].IsNotTheSameAs(Main.clientPlayer.dye[num9]))
@@ -13255,6 +_,7 @@
 						NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].dye[0].name, Main.myPlayer, (float)(58 + Main.player[Main.myPlayer].armor.Length + 1 + num9), (float)Main.player[Main.myPlayer].dye[num9].prefix, 0f, 0, 0, 0);
 					}
 				}
+
 				if (Main.player[Main.myPlayer].chest != Main.clientPlayer.chest && Main.player[Main.myPlayer].chest < 0)
 				{
 					if (Main.player[Main.myPlayer].editedChestName)
@@ -13267,6 +_,7 @@
 						{
 							NetMessage.SendData(33, -1, -1, "", Main.player[Main.myPlayer].chest, 0f, 0f, 0f, 0, 0, 0);
 						}
+
 						Main.player[Main.myPlayer].editedChestName = false;
 					}
 					else
@@ -13274,35 +_,48 @@
 						NetMessage.SendData(33, -1, -1, "", Main.player[Main.myPlayer].chest, 0f, 0f, 0f, 0, 0, 0);
 					}
 				}
+
 				if (Main.player[Main.myPlayer].talkNPC != Main.clientPlayer.talkNPC)
 				{
 					NetMessage.SendData(40, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
 				}
+
 				bool flag = false;
 				if (Main.player[Main.myPlayer].zone1 != Main.clientPlayer.zone1)
 				{
 					flag = true;
 				}
+
 				if (Main.player[Main.myPlayer].zone2 != Main.clientPlayer.zone2)
 				{
 					flag = true;
 				}
+
 				if (Main.player[Main.myPlayer].zone3 != Main.clientPlayer.zone3)
 				{
 					flag = true;
 				}
+
 				if (Main.player[Main.myPlayer].zone4 != Main.clientPlayer.zone4)
 				{
 					flag = true;
 				}
+
+				if (!PlayerHooks.CustomBiomesMatch(Main.player[Main.myPlayer], Main.clientPlayer))
+				{
+					flag = true;
+				}
+
 				if (flag)
 				{
 					NetMessage.SendData(36, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
 				}
+
 				if (Main.player[Main.myPlayer].statLife != Main.clientPlayer.statLife || Main.player[Main.myPlayer].statLifeMax != Main.clientPlayer.statLifeMax)
 				{
 					Main.player[Main.myPlayer].netLife = true;
 				}
+
 				if (Main.player[Main.myPlayer].netLifeTime > 0)
 				{
 					Main.player[Main.myPlayer].netLifeTime--;
@@ -13313,10 +_,12 @@
 					Main.player[Main.myPlayer].netLifeTime = 60;
 					NetMessage.SendData(16, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
 				}
+
 				if (Main.player[Main.myPlayer].statMana != Main.clientPlayer.statMana || Main.player[Main.myPlayer].statManaMax != Main.clientPlayer.statManaMax)
 				{
 					Main.player[Main.myPlayer].netMana = true;
 				}
+
 				if (Main.player[Main.myPlayer].netManaTime > 0)
 				{
 					Main.player[Main.myPlayer].netManaTime--;
@@ -13327,6 +_,7 @@
 					Main.player[Main.myPlayer].netManaTime = 60;
 					NetMessage.SendData(42, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
 				}
+
 				bool flag2 = false;
 				for (int num10 = 0; num10 < 22; num10++)
 				{
@@ -13335,34 +_,43 @@
 						flag2 = true;
 					}
 				}
+
 				if (flag2)
 				{
 					NetMessage.SendData(50, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
 					NetMessage.SendData(13, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
 				}
+
 				bool flag3 = false;
 				if (Main.player[Main.myPlayer].MinionRestTargetPoint != Main.clientPlayer.MinionRestTargetPoint)
 				{
 					flag3 = true;
 				}
+
 				if (flag3)
 				{
 					NetMessage.SendData(99, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
 				}
+
 				bool flag4 = false;
 				if (Main.player[Main.myPlayer].MinionAttackTargetNPC != Main.clientPlayer.MinionAttackTargetNPC)
 				{
 					flag4 = true;
 				}
+
 				if (flag4)
 				{
 					NetMessage.SendData(115, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
 				}
-			}
+
+				PlayerHooks.SendClientChanges(Main.player[Main.myPlayer], Main.clientPlayer);
+			}
+
 			if (Main.netMode == 1)
 			{
 				Main.clientPlayer = (Player)Main.player[Main.myPlayer].clientClone();
 			}
+
 			if (Main.netMode == 0 && (Main.playerInventory || Main.npcChatText != "" || Main.player[Main.myPlayer].sign >= 0 || Main.ingameOptionsWindow || Main.inFancyUI) && Main.autoPause)
 			{
 				if (!Main.drawingPlayerChat && !Main.editSign && !Main.editChest && !Main.blockInput)
@@ -13374,6 +_,7 @@
 						{
 							Main.player[Main.myPlayer].ToggleInv();
 						}
+
 						Main.player[Main.myPlayer].releaseInventory = false;
 					}
 					else
@@ -13381,6 +_,7 @@
 						Main.player[Main.myPlayer].releaseInventory = true;
 					}
 				}
+
 				if (Main.playerInventory)
 				{
 					int num11 = PlayerInput.ScrollWheelDelta / 120;
@@ -13414,10 +_,12 @@
 										Main.recStart = Main.numAvailableRecipes - num15;
 									}
 								}
+
 								num11 -= num17;
 							}
 						}
 					}
+
 					if (flag5)
 					{
 						Main.focusRecipe += num11;
@@ -13425,13 +_,16 @@
 						{
 							Main.focusRecipe = Main.numAvailableRecipes - 1;
 						}
+
 						if (Main.focusRecipe < 0)
 						{
 							Main.focusRecipe = 0;
 						}
 					}
+
 					Main.player[Main.myPlayer].dropItemCheck();
 				}
+
 				Main.player[Main.myPlayer].head = Main.player[Main.myPlayer].armor[0].headSlot;
 				Main.player[Main.myPlayer].body = Main.player[Main.myPlayer].armor[1].bodySlot;
 				Main.player[Main.myPlayer].legs = Main.player[Main.myPlayer].armor[2].legSlot;
@@ -13441,15 +_,18 @@
 					{
 						Main.player[Main.myPlayer].head = Main.player[Main.myPlayer].armor[10].headSlot;
 					}
+
 					if (Main.player[Main.myPlayer].armor[11].bodySlot >= 0)
 					{
 						Main.player[Main.myPlayer].body = Main.player[Main.myPlayer].armor[11].bodySlot;
 					}
+
 					if (Main.player[Main.myPlayer].armor[12].legSlot >= 0)
 					{
 						Main.player[Main.myPlayer].legs = Main.player[Main.myPlayer].armor[12].legSlot;
 					}
 				}
+
 				if (Main.editSign)
 				{
 					if (Main.player[Main.myPlayer].sign == -1)
@@ -13465,20 +_,24 @@
 				{
 					Main.editChest = false;
 				}
+
 				Main.player[Main.myPlayer].lastChest = Main.player[Main.myPlayer].chest;
 				if (Main.playerInventory)
 				{
 					Main.player[Main.myPlayer].AdjTiles();
 				}
+
 				Main.gamePaused = true;
 				return;
 			}
+
 			Main.gamePaused = false;
 			if (!Main.dedServ && (double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0 && Main.netMode != 2)
 			{
 				Star.UpdateStars();
 				Cloud.UpdateClouds();
 			}
+
 			PortalHelper.UpdatePortalPoints();
 			Main.tileSolid[379] = false;
 			Main.ActivePlayersCount = 0;
@@ -13496,8 +_,10 @@
 					{
 						goto IL_41E9;
 					}
+
 					goto IL_41DA;
 				}
+
 				goto IL_41DA;
 				IL_41E9:
 				num18++;
@@ -13506,6 +_,7 @@
 				Main.player[num18].Update(num18);
 				goto IL_41E9;
 			}
+
 			if (Main.netMode != 1)
 			{
 				try
@@ -13516,31 +_,38 @@
 				{
 				}
 			}
+
 			if (Main.netMode != 1)
 			{
 				PressurePlateHelper.Update();
 			}
+
 			for (int num19 = 0; num19 < 255; num19++)
 			{
 				Main.player[num19].activeNPCs = 0f;
 				Main.player[num19].townNPCs = 0f;
 			}
+
 			if (Main.wof >= 0 && !Main.npc[Main.wof].active)
 			{
 				Main.wof = -1;
 			}
+
 			if (NPC.golemBoss >= 0 && !Main.npc[NPC.golemBoss].active)
 			{
 				NPC.golemBoss = -1;
 			}
+
 			if (NPC.plantBoss >= 0 && !Main.npc[NPC.plantBoss].active)
 			{
 				NPC.plantBoss = -1;
 			}
+
 			if (NPC.crimsonBoss >= 0 && !Main.npc[NPC.crimsonBoss].active)
 			{
 				NPC.crimsonBoss = -1;
 			}
+
 			NPC.taxCollector = false;
 			NPC.ClearFoundActiveNPCs();
 			NPC.UpdateFoundActiveNPCs();
@@ -13560,8 +_,10 @@
 						Main.npc[num20] = new NPC();
 						goto IL_4320;
 					}
+
 					goto IL_4311;
 				}
+
 				goto IL_4311;
 				IL_4320:
 				num20++;
@@ -13570,6 +_,7 @@
 				Main.npc[num20].UpdateNPC(num20);
 				goto IL_4320;
 			}
+
 			int num21 = 0;
 			while (num21 < 500)
 			{
@@ -13585,8 +_,10 @@
 						Main.gore[num21] = new Gore();
 						goto IL_4367;
 					}
+
 					goto IL_435A;
 				}
+
 				goto IL_435A;
 				IL_4367:
 				num21++;
@@ -13595,6 +_,7 @@
 				Main.gore[num21].Update();
 				goto IL_4367;
 			}
+
 			Projectile.UpdateStaticThings();
 			LockOnHelper.SetUP();
 			int num22 = 0;
@@ -13613,8 +_,10 @@
 						Main.projectile[num22] = new Projectile();
 						goto IL_43C3;
 					}
+
 					goto IL_43B4;
 				}
+
 				goto IL_43B4;
 				IL_43C3:
 				num22++;
@@ -13623,6 +_,7 @@
 				Main.projectile[num22].Update(num22);
 				goto IL_43C3;
 			}
+
 			Main.ProjectileUpdateLoopIndex = -1;
 			LockOnHelper.SetDOWN();
 			int num23 = 0;
@@ -13640,8 +_,10 @@
 						Main.item[num23] = new Item();
 						goto IL_4419;
 					}
+
 					goto IL_440A;
 				}
+
 				goto IL_440A;
 				IL_4419:
 				num23++;
@@ -13650,6 +_,7 @@
 				Main.item[num23].UpdateItem(num23);
 				goto IL_4419;
 			}
+
 			if (Main.ignoreErrors)
 			{
 				try
@@ -13664,9 +_,11 @@
 						Main.dust[num24] = new Dust();
 						Main.dust[num24].dustIndex = num24;
 					}
+
 					goto IL_446E;
 				}
 			}
+
 			Dust.UpdateDust();
 			IL_446E:
 			if (Main.netMode != 2)
@@ -13674,6 +_,7 @@
 				CombatText.UpdateCombatText();
 				ItemText.UpdateItemText();
 			}
+
 			if (Main.ignoreErrors)
 			{
 				try
@@ -13687,6 +_,7 @@
 					goto IL_449C;
 				}
 			}
+
 			Main.UpdateTime();
 			IL_449C:
 			Main.tileSolid[379] = true;
@@ -13705,9 +_,11 @@
 						goto IL_44D0;
 					}
 				}
+
 				WorldGen.UpdateWorld();
 				Main.UpdateInvasion();
 			}
+
 			IL_44D0:
 			if (Main.ignoreErrors)
 			{
@@ -13717,10 +_,12 @@
 					{
 						Main.UpdateServer();
 					}
+
 					if (Main.netMode == 1)
 					{
 						Main.UpdateClient();
 					}
+
 					goto IL_4518;
 				}
 				catch
@@ -13729,14 +_,17 @@
 					goto IL_4518;
 				}
 			}
+
 			if (Main.netMode == 2)
 			{
 				Main.UpdateServer();
 			}
+
 			if (Main.netMode == 1)
 			{
 				Main.UpdateClient();
 			}
+
 			IL_4518:
 			if (Main.ignoreErrors)
 			{
@@ -13749,6 +_,7 @@
 							Main.chatLine[num25].showTime--;
 						}
 					}
+
 					goto IL_45B7;
 				}
 				catch
@@ -13757,9 +_,11 @@
 					{
 						Main.chatLine[num26] = new ChatLine();
 					}
+
 					goto IL_45B7;
 				}
 			}
+
 			for (int num27 = 0; num27 < Main.numChatLines; num27++)
 			{
 				if (Main.chatLine[num27].showTime > 0)
@@ -13767,6 +_,7 @@
 					Main.chatLine[num27].showTime--;
 				}
 			}
+
 			IL_45B7:
 			Main.upTimer = (float)stopwatch.Elapsed.TotalMilliseconds;
 			if (Main.upTimerMaxDelay > 0f)
@@ -13777,11 +_,13 @@
 			{
 				Main.upTimerMax = 0f;
 			}
+
 			if (Main.upTimer > Main.upTimerMax)
 			{
 				Main.upTimerMax = Main.upTimer;
 				Main.upTimerMaxDelay = 400f;
 			}
+
 			Chest.UpdateChestFrames();
 			if (Main.cameraLerp > 0f)
 			{
@@ -13790,11 +_,13 @@
 				{
 					Main.cameraLerp += (float)((Main.cameraLerpTimer - Main.cameraLerpTimeToggle) / 3 + 1) * 0.001f;
 				}
+
 				if (Main.cameraLerp > 1f)
 				{
 					Main.cameraLerp = 1f;
 				}
 			}
+
 			base.Update(gameTime);
 		}
 
@@ -13804,6 +_,7 @@
 			{
 				return;
 			}
+
 			if (Main.hardMode && !Main.SettingsUnlock_WorldEvil)
 			{
 				Main.SettingsUnlock_WorldEvil = true;
@@ -13817,6 +_,7 @@
 			{
 				return;
 			}
+
 			Main.npcChatText = Main.GetInputText(Main.npcChatText);
 			if (Main.inputTextEnter)
 			{
@@ -13827,6 +_,7 @@
 				Main.npcChatText += Encoding.ASCII.GetString(bytes);
 				return;
 			}
+
 			if (Main.inputTextEscape)
 			{
 				Main.InputTextSignCancel();
@@ -13839,12 +_,14 @@
 			{
 				return;
 			}
+
 			Main.npcChatText = Main.GetInputText(Main.npcChatText);
 			if (Main.inputTextEnter)
 			{
 				ChestUI.RenameChestSubmit(Main.player[Main.myPlayer]);
 				return;
 			}
+
 			if (Main.inputTextEscape)
 			{
 				ChestUI.RenameChestCancel();
@@ -13911,11 +_,12 @@
 
 		public static string GetInputText(string oldString)
 		{
-#if CLIENT
+			#if CLIENT
 			if (!Main.hasFocus)
 			{
 				return oldString;
 			}
+
 			Main.inputTextEnter = false;
 			Main.inputTextEscape = false;
 			string text = oldString;
@@ -13924,6 +_,7 @@
 			{
 				text = "";
 			}
+
 			bool flag = false;
 			if (Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftControl) || Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightControl))
 			{
@@ -13963,8 +_,10 @@
 						while (thread.IsAlive)
 						{
 						}
+
 						text = "";
 					}
+
 					if (Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Insert) && !Main.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Insert))
 					{
 						Thread thread2 = new Thread((ThreadStart)delegate
@@ -13977,6 +_,7 @@
 									text2 = text2.Replace(string.Concat(text2[l--]), "");
 								}
 							}
+
 							newKeys += text2;
 						});
 						thread2.SetApartmentState(ApartmentState.STA);
@@ -13986,6 +_,7 @@
 						}
 					}
 				}
+
 				for (int i = 0; i < Main.keyCount; i++)
 				{
 					int num = Main.keyInt[i];
@@ -14004,6 +_,7 @@
 					}
 				}
 			}
+
 			Main.keyCount = 0;
 			text += newKeys;
 			Main.oldInputText = Main.inputText;
@@ -14017,12 +_,14 @@
 					Main.backSpaceCount = 7;
 					flag = true;
 				}
+
 				Main.backSpaceCount--;
 			}
 			else
 			{
 				Main.backSpaceCount = 15;
 			}
+
 			for (int j = 0; j < pressedKeys.Length; j++)
 			{
 				bool flag2 = true;
@@ -14033,6 +_,7 @@
 						flag2 = false;
 					}
 				}
+
 				string a = string.Concat(pressedKeys[j]);
 				if (a == "Back" && (flag2 || flag) && text.Length > 0)
 				{
@@ -14047,10 +_,11 @@
 					}
 				}
 			}
+
 			return text;
-#else
+			#else
 			return "";
-#endif
+			#endif
 		}
 
 		public string TooltipMousetextProcessor(string tooltip)
@@ -14062,13 +_,14 @@
 				{
 					inputMode = InputMode.XBoxGamepadUI;
 				}
+
 				if (inputMode == InputMode.XBoxGamepadUI)
 				{
 					KeyConfiguration keyConfiguration = PlayerInput.CurrentProfile.InputModes[inputMode];
 					string text = PlayerInput.BuildCommand("", true, new List<string>[]
-						{
-							keyConfiguration.KeyStatus["MouseRight"]
-						});
+					{
+						keyConfiguration.KeyStatus["MouseRight"]
+					});
 					text = text.Replace(": ", "");
 					tooltip = tooltip.Replace("<right>", text);
 				}
@@ -14077,6 +_,7 @@
 					tooltip = tooltip.Replace("<right>", Language.GetTextValue("Controls.RightClick"));
 				}
 			}
+
 			return tooltip;
 		}
 
@@ -14086,10 +_,12 @@
 			{
 				return;
 			}
+
 			if (cursorText == null)
 			{
 				return;
 			}
+
 			int num = Main.mouseX + 10;
 			int num2 = Main.mouseY + 10;
 			new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
@@ -14098,24 +_,29 @@
 				this.MouseText_DrawItemTooltip(rare, diff, num, num2);
 				return;
 			}
+
 			if (Main.buffString != "" && Main.buffString != null)
 			{
 				this.MouseText_DrawBuffString(ref num, ref num2);
 			}
+
 			if (Main.ThickMouse)
 			{
 				num += 6;
 				num2 += 6;
 			}
+
 			Vector2 vector = Main.fontMouseText.MeasureString(cursorText);
 			if ((float)num + vector.X + 4f > (float)Main.screenWidth)
 			{
 				num = (int)((float)Main.screenWidth - vector.X - 4f);
 			}
+
 			if ((float)num2 + vector.Y + 4f > (float)Main.screenHeight)
 			{
 				num2 = (int)((float)Main.screenHeight - vector.Y - 4f);
 			}
+
 			Main.spriteBatch.DrawString(Main.fontMouseText, cursorText, new Vector2((float)num, (float)(num2 - 2)), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 			Main.spriteBatch.DrawString(Main.fontMouseText, cursorText, new Vector2((float)num, (float)(num2 + 2)), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 			Main.spriteBatch.DrawString(Main.fontMouseText, cursorText, new Vector2((float)(num - 2), (float)num2), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
@@ -14126,70 +_,87 @@
 			{
 				color = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num3)), (int)((byte)(175f * num3)), (int)((byte)(0f * num3)), (int)Main.mouseTextColor);
 			}
+
 			if (rare == -10)
 			{
 				color = new Microsoft.Xna.Framework.Color((int)((byte)(65f * num3)), (int)((byte)(255f * num3)), (int)((byte)(110f * num3)), (int)Main.mouseTextColor);
 			}
+
 			if (rare == -1)
 			{
 				color = new Microsoft.Xna.Framework.Color((int)((byte)(130f * num3)), (int)((byte)(130f * num3)), (int)((byte)(130f * num3)), (int)Main.mouseTextColor);
 			}
+
 			if (rare == 1)
 			{
 				color = new Microsoft.Xna.Framework.Color((int)((byte)(150f * num3)), (int)((byte)(150f * num3)), (int)((byte)(255f * num3)), (int)Main.mouseTextColor);
 			}
+
 			if (rare == 2)
 			{
 				color = new Microsoft.Xna.Framework.Color((int)((byte)(150f * num3)), (int)((byte)(255f * num3)), (int)((byte)(150f * num3)), (int)Main.mouseTextColor);
 			}
+
 			if (rare == 3)
 			{
 				color = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num3)), (int)((byte)(200f * num3)), (int)((byte)(150f * num3)), (int)Main.mouseTextColor);
 			}
+
 			if (rare == 4)
 			{
 				color = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num3)), (int)((byte)(150f * num3)), (int)((byte)(150f * num3)), (int)Main.mouseTextColor);
 			}
+
 			if (rare == 5)
 			{
 				color = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num3)), (int)((byte)(150f * num3)), (int)((byte)(255f * num3)), (int)Main.mouseTextColor);
 			}
+
 			if (rare == 6)
 			{
 				color = new Microsoft.Xna.Framework.Color((int)((byte)(210f * num3)), (int)((byte)(160f * num3)), (int)((byte)(255f * num3)), (int)Main.mouseTextColor);
 			}
+
 			if (rare == 7)
 			{
 				color = new Microsoft.Xna.Framework.Color((int)((byte)(150f * num3)), (int)((byte)(255f * num3)), (int)((byte)(10f * num3)), (int)Main.mouseTextColor);
 			}
+
 			if (rare == 8)
 			{
 				color = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num3)), (int)((byte)(255f * num3)), (int)((byte)(10f * num3)), (int)Main.mouseTextColor);
 			}
+
 			if (rare == 9)
 			{
 				color = new Microsoft.Xna.Framework.Color((int)((byte)(5f * num3)), (int)((byte)(200f * num3)), (int)((byte)(255f * num3)), (int)Main.mouseTextColor);
 			}
+
 			if (rare == 10)
 			{
 				color = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num3)), (int)((byte)(40f * num3)), (int)((byte)(100f * num3)), (int)Main.mouseTextColor);
 			}
+
 			if (rare >= 11)
 			{
 				color = new Microsoft.Xna.Framework.Color((int)((byte)(180f * num3)), (int)((byte)(40f * num3)), (int)((byte)(255f * num3)), (int)Main.mouseTextColor);
 			}
+
 			if (Main.toolTip.expert || rare == -12)
 			{
 				color = new Microsoft.Xna.Framework.Color((int)((byte)((float)Main.DiscoR * num3)), (int)((byte)((float)Main.DiscoG * num3)), (int)((byte)((float)Main.DiscoB * num3)), (int)Main.mouseTextColor);
 			}
+
 			if (diff == 1)
 			{
 				color = new Microsoft.Xna.Framework.Color((int)((byte)((float)Main.mcColor.R * num3)), (int)((byte)((float)Main.mcColor.G * num3)), (int)((byte)((float)Main.mcColor.B * num3)), (int)Main.mouseTextColor);
 			}
+
 			if (diff == 2)
 			{
 				color = new Microsoft.Xna.Framework.Color((int)((byte)((float)Main.hcColor.R * num3)), (int)((byte)((float)Main.hcColor.G * num3)), (int)((byte)((float)Main.hcColor.B * num3)), (int)Main.mouseTextColor);
 			}
+
 			Main.spriteBatch.DrawString(Main.fontMouseText, cursorText, new Vector2((float)num, (float)num2), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 		}
 
@@ -14204,28 +_,34 @@
 			{
 				num2 += 1f;
 			}
+
 			if (Main.player[Main.myPlayer].kbBuff)
 			{
 				num2 += 0.5f;
 			}
+
 			if (num2 != 1f)
 			{
 				Main.toolTip.knockBack *= num2;
 			}
+
 			if (Main.toolTip.ranged && Main.player[Main.myPlayer].shroomiteStealth)
 			{
 				Main.toolTip.knockBack *= 1f + (1f - Main.player[Main.myPlayer].stealth) * 0.5f;
 			}
+
 			int num3 = 20;
 			int num4 = 1;
 			string[] array = new string[num3];
 			bool[] array2 = new bool[num3];
 			bool[] array3 = new bool[num3];
+			string[] tooltipNames = new string[num3];
 			for (int i = 0; i < num3; i++)
 			{
 				array2[i] = false;
 				array3[i] = false;
 			}
+
 			array[0] = Main.toolTip.AffixName();
 			if (Main.toolTip.stack > 1)
 			{
@@ -14234,23 +_,30 @@
 				int arg_18C_1 = 0;
 				object obj = array4[0];
 				expr_148[arg_18C_1] = string.Concat(new object[]
-					{
-						obj,
+				{
+					obj,
 						" (",
 						Main.toolTip.stack,
 						")"
-					});
-			}
+				});
+			}
+
+			tooltipNames[0] = "ItemName";
 			if (Main.toolTip.favorited)
 			{
 				array[num4++] = Lang.tip[56];
+				tooltipNames[num4 - 1] = "Favorite";
 				array[num4++] = Lang.tip[57];
-			}
+				tooltipNames[num4 - 1] = "FavoriteDesc";
+			}
+
 			if (Main.toolTip.social)
 			{
 				array[num4] = Lang.tip[0];
+				tooltipNames[num4] = "Social";
 				num4++;
 				array[num4] = Lang.tip[1];
+				tooltipNames[num4] = "SocialDesc";
 				num4++;
 			}
 			else
@@ -14259,9 +_,13 @@
 				{
 					float num5 = 5E-06f;
 					int damage = Main.toolTip.damage;
+					Player player = Main.player[Main.myPlayer];
 					if (Main.toolTip.melee)
 					{
-						array[num4] = string.Concat((int)(Main.player[Main.myPlayer].meleeDamage * (float)damage + num5));
+						int damage2 = (int)(player.meleeDamage * (float)damage + num5);
+						ItemLoader.GetWeaponDamage(Main.toolTip, player, ref damage2);
+						PlayerHooks.GetWeaponDamage(player, Main.toolTip, ref damage2);
+						array[num4] = string.Concat(damage2);
 						string[] array5;
 						IntPtr intPtr;
 						(array5 = array)[(int)(intPtr = (IntPtr)num4)] = array5[(int)intPtr] + Lang.tip[2];
@@ -14273,33 +_,46 @@
 						{
 							num6 *= Main.player[Main.myPlayer].arrowDamage;
 						}
+
 						if (Main.toolTip.useAmmo == AmmoID.Arrow && Main.player[Main.myPlayer].archery)
 						{
 							num6 *= 1.2f;
 						}
+
 						if (Main.toolTip.useAmmo == AmmoID.Bullet || Main.toolTip.useAmmo == AmmoID.CandyCorn)
 						{
 							num6 *= Main.player[Main.myPlayer].bulletDamage;
 						}
+
 						if (Main.toolTip.useAmmo == AmmoID.Rocket || Main.toolTip.useAmmo == AmmoID.StyngerBolt || Main.toolTip.useAmmo == AmmoID.JackOLantern || Main.toolTip.useAmmo == AmmoID.NailFriendly)
 						{
 							num6 *= Main.player[Main.myPlayer].rocketDamage;
 						}
-						array[num4] = string.Concat((int)(num6 + num5));
+
+						int damage2 = (int)(num6 + num5);
+						ItemLoader.GetWeaponDamage(Main.toolTip, player, ref damage2);
+						PlayerHooks.GetWeaponDamage(player, Main.toolTip, ref damage2);
+						array[num4] = string.Concat(damage2);
 						string[] array6;
 						IntPtr intPtr2;
 						(array6 = array)[(int)(intPtr2 = (IntPtr)num4)] = array6[(int)intPtr2] + Lang.tip[3];
 					}
 					else if (Main.toolTip.magic)
 					{
-						array[num4] = string.Concat((int)(Main.player[Main.myPlayer].magicDamage * (float)damage + num5));
+						int damage2 = (int)(player.magicDamage * (float)damage + num5);
+						ItemLoader.GetWeaponDamage(Main.toolTip, player, ref damage2);
+						PlayerHooks.GetWeaponDamage(player, Main.toolTip, ref damage2);
+						array[num4] = string.Concat(damage2);
 						string[] array7;
 						IntPtr intPtr3;
 						(array7 = array)[(int)(intPtr3 = (IntPtr)num4)] = array7[(int)intPtr3] + Lang.tip[4];
 					}
 					else if (Main.toolTip.thrown)
 					{
-						array[num4] = string.Concat((int)(Main.player[Main.myPlayer].thrownDamage * (float)damage + num5));
+						int damage2 = (int)(player.thrownDamage * (float)damage + num5);
+						ItemLoader.GetWeaponDamage(Main.toolTip, player, ref damage2);
+						PlayerHooks.GetWeaponDamage(player, Main.toolTip, ref damage2);
+						array[num4] = string.Concat(damage2);
 						string[] array8;
 						IntPtr intPtr4;
 						(array8 = array)[(int)(intPtr4 = (IntPtr)num4)] = array8[(int)intPtr4] + Lang.tip[58];
@@ -14309,47 +_,65 @@
 						if (Main.toolTip.type == 3829 || Main.toolTip.type == 3830 || Main.toolTip.type == 3831)
 						{
 							array[num4] = string.Concat((int)((Main.player[Main.myPlayer].minionDamage * (float)damage + num5) * 3f));
+							int damage2 = (int)((player.minionDamage * (float)damage + num5) * 3f);
+							ItemLoader.GetWeaponDamage(Main.toolTip, player, ref damage2);
+							PlayerHooks.GetWeaponDamage(player, Main.toolTip, ref damage2);
+							array[num4] = string.Concat(damage2);
 						}
 						else
 						{
-							array[num4] = string.Concat((int)(Main.player[Main.myPlayer].minionDamage * (float)damage + num5));
-						}
+							int damage2 = (int)(player.minionDamage * (float)damage + num5);
+							ItemLoader.GetWeaponDamage(Main.toolTip, player, ref damage2);
+							PlayerHooks.GetWeaponDamage(player, Main.toolTip, ref damage2);
+							array[num4] = string.Concat(damage2);
+						}
+
 						string[] array4;
 						IntPtr intPtr;
 						(array4 = array)[(int)(intPtr = (IntPtr)num4)] = array4[(int)intPtr] + Lang.tip[53];
 					}
 					else
 					{
-						array[num4] = string.Concat(damage);
+						int damage2 = damage;
+						ItemLoader.GetWeaponDamage(Main.toolTip, player, ref damage2);
+						PlayerHooks.GetWeaponDamage(player, Main.toolTip, ref damage2);
+						array[num4] = string.Concat(damage2);
 						string[] array4;
 						IntPtr intPtr;
 						(array4 = array)[(int)(intPtr = (IntPtr)num4)] = array4[(int)intPtr] + Lang.tip[55];
 					}
+
+					tooltipNames[num4] = "Damage";
 					num4++;
 					if (Main.toolTip.melee)
 					{
 						int num7 = Main.player[Main.myPlayer].meleeCrit - Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].crit + Main.toolTip.crit;
 						array[num4] = num7 + Lang.tip[5];
+						tooltipNames[num4] = "CritChance";
 						num4++;
 					}
 					else if (Main.toolTip.ranged)
 					{
 						int num8 = Main.player[Main.myPlayer].rangedCrit - Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].crit + Main.toolTip.crit;
 						array[num4] = num8 + Lang.tip[5];
+						tooltipNames[num4] = "CritChance";
 						num4++;
 					}
 					else if (Main.toolTip.magic)
 					{
 						int num9 = Main.player[Main.myPlayer].magicCrit - Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].crit + Main.toolTip.crit;
 						array[num4] = num9 + Lang.tip[5];
+						tooltipNames[num4] = "CritChance";
 						num4++;
 					}
 					else if (Main.toolTip.thrown)
 					{
 						int num10 = Main.player[Main.myPlayer].thrownCrit - Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].crit + Main.toolTip.crit;
 						array[num4] = num10 + Lang.tip[5];
+						tooltipNames[num4] = "CritChance";
 						num4++;
 					}
+
 					if (Main.toolTip.useStyle > 0 && !Main.toolTip.summon)
 					{
 						if (Main.toolTip.useAnimation <= 8)
@@ -14384,21 +_,29 @@
 						{
 							array[num4] = Lang.tip[13];
 						}
+
+						tooltipNames[num4] = "Speed";
 						num4++;
 					}
+
 					float num11 = Main.toolTip.knockBack;
 					if (Main.toolTip.summon)
 					{
 						num11 += Main.player[Main.myPlayer].minionKB;
 					}
+
 					if ((Main.player[Main.myPlayer].magicQuiver && Main.toolTip.useAmmo == AmmoID.Arrow) || Main.toolTip.useAmmo == AmmoID.Stake)
 					{
 						num11 = (float)((int)(num11 * 1.1f));
 					}
+
 					if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type == 3106 && Main.toolTip.type == 3106)
 					{
 						num11 += num11 * (1f - Main.player[Main.myPlayer].stealth);
 					}
+
+					ItemLoader.GetWeaponKnockback(Main.toolTip, player, ref num11);
+					PlayerHooks.GetWeaponKnockback(player, Main.toolTip, ref num11);
 					if (num11 == 0f)
 					{
 						array[num4] = Lang.tip[14];
@@ -14435,60 +_,84 @@
 					{
 						array[num4] = Lang.tip[22];
 					}
+
+					tooltipNames[num4] = "Knockback";
 					num4++;
 				}
+
 				if (Main.toolTip.fishingPole > 0)
 				{
 					array[num4] = Language.GetTextValue("GameUI.PrecentFishingPower", Main.toolTip.fishingPole);
+					tooltipNames[num4] = "FishingPower";
 					num4++;
 					array[num4] = Language.GetTextValue("GameUI.BaitRequired");
+					tooltipNames[num4] = "NeedsBait";
 					num4++;
 				}
+
 				if (Main.toolTip.bait > 0)
 				{
 					array[num4] = Language.GetTextValue("GameUI.BaitPower", Main.toolTip.bait);
+					tooltipNames[num4] = "BaitPower";
 					num4++;
 				}
+
 				if (Main.toolTip.headSlot > 0 || Main.toolTip.bodySlot > 0 || Main.toolTip.legSlot > 0 || Main.toolTip.accessory || Main.projHook[Main.toolTip.shoot] || Main.toolTip.mountType != -1 || (Main.toolTip.buffType > 0 && (Main.lightPet[Main.toolTip.buffType] || Main.vanityPet[Main.toolTip.buffType])))
 				{
 					array[num4] = Lang.tip[23];
+					tooltipNames[num4] = "Equipable";
 					num4++;
 				}
+
 				if (Main.toolTip.tileWand > 0)
 				{
 					array[num4] = Lang.tip[52] + Lang.itemName(Main.toolTip.tileWand, false);
+					tooltipNames[num4] = "WandConsumes";
 					num4++;
 				}
+
 				if (Main.toolTip.questItem)
 				{
 					array[num4] = Lang.inter[65];
+					tooltipNames[num4] = "Quest";
 					num4++;
 				}
+
 				if (Main.toolTip.vanity)
 				{
 					array[num4] = Lang.tip[24];
+					tooltipNames[num4] = "Vanity";
 					num4++;
 				}
+
 				if (Main.toolTip.defense > 0)
 				{
 					array[num4] = Main.toolTip.defense + Lang.tip[25];
+					tooltipNames[num4] = "Defense";
 					num4++;
 				}
+
 				if (Main.toolTip.pick > 0)
 				{
 					array[num4] = Main.toolTip.pick + Lang.tip[26];
+					tooltipNames[num4] = "PickPower";
 					num4++;
 				}
+
 				if (Main.toolTip.axe > 0)
 				{
 					array[num4] = Main.toolTip.axe * 5 + Lang.tip[27];
+					tooltipNames[num4] = "AxePower";
 					num4++;
 				}
+
 				if (Main.toolTip.hammer > 0)
 				{
 					array[num4] = Main.toolTip.hammer + Lang.tip[28];
+					tooltipNames[num4] = "HammerPower";
 					num4++;
 				}
+
 				if (Main.toolTip.tileBoost != 0)
 				{
 					int tileBoost = Main.toolTip.tileBoost;
@@ -14500,67 +_,82 @@
 					{
 						array[num4] = tileBoost + Lang.tip[54];
 					}
+
+					tooltipNames[num4] = "TileBoost";
 					num4++;
 				}
+
 				if (Main.toolTip.healLife > 0)
 				{
 					array[num4] = string.Concat(new object[]
-						{
-							Lang.tip[29],
+					{
+						Lang.tip[29],
 							" ",
 							Main.toolTip.healLife,
 							" ",
 							Lang.tip[30]
-						});
+					});
+					tooltipNames[num4] = "HealLife";
 					num4++;
 				}
+
 				if (Main.toolTip.healMana > 0)
 				{
 					array[num4] = string.Concat(new object[]
-						{
-							Lang.tip[29],
+					{
+						Lang.tip[29],
 							" ",
 							Main.toolTip.healMana,
 							" ",
 							Lang.tip[31]
-						});
+					});
+					tooltipNames[num4] = "HealMana";
 					num4++;
 				}
+
 				if (Main.toolTip.mana > 0 && (Main.toolTip.type != 127 || !Main.player[Main.myPlayer].spaceGun))
 				{
 					array[num4] = string.Concat(new object[]
-						{
-							Lang.tip[32],
+					{
+						Lang.tip[32],
 							" ",
 							(int)((float)Main.toolTip.mana * Main.player[Main.myPlayer].manaCost),
 							" ",
 							Lang.tip[31]
-						});
+					});
+					tooltipNames[num4] = "UseMana";
 					num4++;
 				}
+
 				if (Main.toolTip.createWall > 0 || Main.toolTip.createTile > -1)
 				{
 					if (Main.toolTip.type != 213 && Main.toolTip.tileWand < 1)
 					{
 						array[num4] = Lang.tip[33];
+						tooltipNames[num4] = "Placeable";
 						num4++;
 					}
 				}
 				else if (Main.toolTip.ammo > 0 && !Main.toolTip.notAmmo)
 				{
 					array[num4] = Lang.tip[34];
+					tooltipNames[num4] = "Ammo";
 					num4++;
 				}
 				else if (Main.toolTip.consumable)
 				{
 					array[num4] = Lang.tip[35];
+					tooltipNames[num4] = "Consumable";
 					num4++;
 				}
+
 				if (Main.toolTip.material)
 				{
 					array[num4] = Lang.tip[36];
+					tooltipNames[num4] = "Material";
 					num4++;
 				}
+
 				if (Main.toolTip.toolTip != null)
 				{
 					if (Main.toolTip.type >= 1533 && Main.toolTip.type <= 1537 && !NPC.downedPlantBoss)
@@ -14571,23 +_,32 @@
 					{
 						array[num4] = this.TooltipMousetextProcessor(Main.toolTip.toolTip);
 					}
+
+					tooltipNames[num4] = "Tooltip";
 					num4++;
 				}
+
 				if (Main.toolTip.toolTip2 != null)
 				{
 					array[num4] = this.TooltipMousetextProcessor(Main.toolTip.toolTip2);
+					tooltipNames[num4] = "Tooltip2";
 					num4++;
 				}
+
 				if ((Main.toolTip.type == 3818 || Main.toolTip.type == 3819 || Main.toolTip.type == 3820 || Main.toolTip.type == 3824 || Main.toolTip.type == 3825 || Main.toolTip.type == 3826 || Main.toolTip.type == 3829 || Main.toolTip.type == 3830 || Main.toolTip.type == 3831 || Main.toolTip.type == 3832 || Main.toolTip.type == 3833 || Main.toolTip.type == 3834) && !Main.player[Main.myPlayer].downedDD2EventAnyDifficulty)
 				{
 					array[num4] = Lang.misc[104];
+					tooltipNames[num4] = "EtherianManaWarning";
 					num4++;
 				}
+
 				if (Main.toolTip.buffType == 26 && Main.expertMode)
 				{
 					array[num4] = Lang.misc[40];
+					tooltipNames[num4] = "WellFedExpert";
 					num4++;
 				}
+
 				if (Main.toolTip.buffTime > 0)
 				{
 					string text;
@@ -14599,15 +_,20 @@
 					{
 						text = Math.Round((double)Main.toolTip.buffTime / 60.0) + Lang.tip[38];
 					}
+
 					array[num4] = text;
+					tooltipNames[num4] = "BuffTime";
 					num4++;
 				}
+
 				if (Main.toolTip.type == 3262 || Main.toolTip.type == 3282 || Main.toolTip.type == 3283 || Main.toolTip.type == 3284 || Main.toolTip.type == 3285 || Main.toolTip.type == 3286 || Main.toolTip.type == 3316 || Main.toolTip.type == 3315 || Main.toolTip.type == 3317 || Main.toolTip.type == 3291 || Main.toolTip.type == 3389)
 				{
 					array[num4] = " ";
 					num = num4;
+					tooltipNames[num4] = "OneDropLogo";
 					num4++;
 				}
+
 				if (Main.toolTip.prefix > 0)
 				{
 					if (Main.cpItem == null || Main.cpItem.netID != Main.toolTip.netID)
@@ -14615,6 +_,7 @@
 						Main.cpItem = new Item();
 						Main.cpItem.netDefaults(Main.toolTip.netID);
 					}
+
 					if (Main.cpItem.damage != Main.toolTip.damage)
 					{
 						double num12 = (double)((float)Main.toolTip.damage - (float)Main.cpItem.damage);
@@ -14628,13 +_,17 @@
 						{
 							array[num4] = num12 + Lang.tip[39];
 						}
+
 						if (num12 < 0.0)
 						{
 							array3[num4] = true;
 						}
+
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixDamage";
 						num4++;
 					}
+
 					if (Main.cpItem.useAnimation != Main.toolTip.useAnimation)
 					{
 						double num13 = (double)((float)Main.toolTip.useAnimation - (float)Main.cpItem.useAnimation);
@@ -14649,13 +_,17 @@
 						{
 							array[num4] = num13 + Lang.tip[40];
 						}
+
 						if (num13 < 0.0)
 						{
 							array3[num4] = true;
 						}
+
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixSpeed";
 						num4++;
 					}
+
 					if (Main.cpItem.crit != Main.toolTip.crit)
 					{
 						double num14 = (double)((float)Main.toolTip.crit - (float)Main.cpItem.crit);
@@ -14667,13 +_,17 @@
 						{
 							array[num4] = num14 + Lang.tip[41];
 						}
+
 						if (num14 < 0.0)
 						{
 							array3[num4] = true;
 						}
+
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixCritChance";
 						num4++;
 					}
+
 					if (Main.cpItem.mana != Main.toolTip.mana)
 					{
 						double num15 = (double)((float)Main.toolTip.mana - (float)Main.cpItem.mana);
@@ -14687,13 +_,17 @@
 						{
 							array[num4] = num15 + Lang.tip[42];
 						}
+
 						if (num15 > 0.0)
 						{
 							array3[num4] = true;
 						}
+
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixUseMana";
 						num4++;
 					}
+
 					if (Main.cpItem.scale != Main.toolTip.scale)
 					{
 						double num16 = (double)(Main.toolTip.scale - Main.cpItem.scale);
@@ -14707,13 +_,17 @@
 						{
 							array[num4] = num16 + Lang.tip[43];
 						}
+
 						if (num16 < 0.0)
 						{
 							array3[num4] = true;
 						}
+
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixSize";
 						num4++;
 					}
+
 					if (Main.cpItem.shootSpeed != Main.toolTip.shootSpeed)
 					{
 						double num17 = (double)(Main.toolTip.shootSpeed - Main.cpItem.shootSpeed);
@@ -14727,13 +_,17 @@
 						{
 							array[num4] = num17 + Lang.tip[44];
 						}
+
 						if (num17 < 0.0)
 						{
 							array3[num4] = true;
 						}
+
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixShootSpeed";
 						num4++;
 					}
+
 					if (Main.cpItem.knockBack != knockBack)
 					{
 						double num18 = (double)(knockBack - Main.cpItem.knockBack);
@@ -14747,140 +_,187 @@
 						{
 							array[num4] = num18 + Lang.tip[45];
 						}
+
 						if (num18 < 0.0)
 						{
 							array3[num4] = true;
 						}
+
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixKnockback";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 62)
 					{
 						array[num4] = "+1" + Lang.tip[25];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDefense";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 63)
 					{
 						array[num4] = "+2" + Lang.tip[25];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDefense";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 64)
 					{
 						array[num4] = "+3" + Lang.tip[25];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDefense";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 65)
 					{
 						array[num4] = "+4" + Lang.tip[25];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDefense";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 66)
 					{
 						array[num4] = "+20 " + Lang.tip[31];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMaxMana";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 67)
 					{
 						array[num4] = "+2" + Lang.tip[5];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccCritChance";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 68)
 					{
 						array[num4] = "+4" + Lang.tip[5];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccCritChance";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 69)
 					{
 						array[num4] = "+1" + Lang.tip[39];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDamage";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 70)
 					{
 						array[num4] = "+2" + Lang.tip[39];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDamage";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 71)
 					{
 						array[num4] = "+3" + Lang.tip[39];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDamage";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 72)
 					{
 						array[num4] = "+4" + Lang.tip[39];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDamage";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 73)
 					{
 						array[num4] = "+1" + Lang.tip[46];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMoveSpeed";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 74)
 					{
 						array[num4] = "+2" + Lang.tip[46];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMoveSpeed";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 75)
 					{
 						array[num4] = "+3" + Lang.tip[46];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMoveSpeed";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 76)
 					{
 						array[num4] = "+4" + Lang.tip[46];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMoveSpeed";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 77)
 					{
 						array[num4] = "+1" + Lang.tip[47];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMeleeSpeed";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 78)
 					{
 						array[num4] = "+2" + Lang.tip[47];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMeleeSpeed";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 79)
 					{
 						array[num4] = "+3" + Lang.tip[47];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMeleeSpeed";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 80)
 					{
 						array[num4] = "+4" + Lang.tip[47];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMeleeSpeed";
 						num4++;
 					}
 				}
+
 				if (Main.toolTip.wornArmor && Main.player[Main.myPlayer].setBonus != "")
 				{
 					array[num4] = Lang.tip[48] + " " + Main.player[Main.myPlayer].setBonus;
+					tooltipNames[num4] = "SetBonus";
 					num4++;
 				}
 			}
+
 			if (Main.toolTip.expert)
 			{
 				array[num4] = Language.GetTextValue("GameUI.Expert");
+				tooltipNames[num4] = "Expert";
 				num4++;
 			}
+
 			float num19 = (float)Main.mouseTextColor / 255f;
+			//patch file: num20
 			float num20 = num19;
 			int a = (int)Main.mouseTextColor;
 			if (Main.npcShop > 0)
@@ -14888,6 +_,7 @@
 				int storeValue = Main.toolTip.GetStoreValue();
 				if (Main.toolTip.shopSpecialCurrency != -1)
 				{
+					tooltipNames[num4] = "SpecialPrice";
 					CustomCurrencyManager.GetPriceText(Main.toolTip.shopSpecialCurrency, array, ref num4, storeValue);
 					color = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num20)), (int)((byte)(255f * num20)), (int)((byte)(255f * num20)), a);
 				}
@@ -14906,79 +_,90 @@
 						{
 							num25 = 1;
 						}
+
 						num25 *= Main.toolTip.stack;
 					}
+
 					if (num25 < 1)
 					{
 						num25 = 1;
 					}
+
 					if (num25 >= 1000000)
 					{
 						num21 = num25 / 1000000;
 						num25 -= num21 * 1000000;
 					}
+
 					if (num25 >= 10000)
 					{
 						num22 = num25 / 10000;
 						num25 -= num22 * 10000;
 					}
+
 					if (num25 >= 100)
 					{
 						num23 = num25 / 100;
 						num25 -= num23 * 100;
 					}
+
 					if (num25 >= 1)
 					{
 						num24 = num25;
 					}
+
 					if (num21 > 0)
 					{
 						object obj = text2;
 						text2 = string.Concat(new object[]
-							{
-								obj,
+						{
+							obj,
 								num21,
 								" ",
 								Lang.inter[15],
 								" "
-							});
-					}
+						});
+					}
+
 					if (num22 > 0)
 					{
 						object obj = text2;
 						text2 = string.Concat(new object[]
-							{
-								obj,
+						{
+							obj,
 								num22,
 								" ",
 								Lang.inter[16],
 								" "
-							});
-					}
+						});
+					}
+
 					if (num23 > 0)
 					{
 						object obj = text2;
 						text2 = string.Concat(new object[]
-							{
-								obj,
+						{
+							obj,
 								num23,
 								" ",
 								Lang.inter[17],
 								" "
-							});
-					}
+						});
+					}
+
 					if (num24 > 0)
 					{
 						object obj = text2;
 						text2 = string.Concat(new object[]
-							{
-								obj,
+						{
+							obj,
 								num24,
 								" ",
 								Lang.inter[18],
 								" "
-							});
-					}
+						});
+					}
+
 					if (!Main.toolTip.buy)
 					{
 						array[num4] = Lang.tip[49] + " " + text2;
@@ -14987,6 +_,8 @@
 					{
 						array[num4] = Lang.tip[50] + " " + text2;
 					}
+
+					tooltipNames[num4] = "Price";
 					num4++;
 					if (num21 > 0)
 					{
@@ -15008,31 +_,43 @@
 				else if (Main.toolTip.type != 3817)
 				{
 					array[num4] = Lang.tip[51];
+					tooltipNames[num4] = "Price";
 					num4++;
 					color = new Microsoft.Xna.Framework.Color((int)((byte)(120f * num20)), (int)((byte)(120f * num20)), (int)((byte)(120f * num20)), a);
 				}
 			}
+
 			Vector2 zero = Vector2.Zero;
+			Microsoft.Xna.Framework.Color?[] overrideColor;
+			ItemLoader.ModifyTooltips(Main.toolTip, ref num4, tooltipNames, ref array,
+				ref array2, ref array3, ref num, out overrideColor);
 			int num26 = 0;
 			for (int j = 0; j < num4; j++)
 			{
+				/*
 				Vector2 vector = Main.fontMouseText.MeasureString(array[j]);
+				*/
+				Vector2 vector = ChatManager.GetStringSize(Main.fontMouseText, array[j], Vector2.One);
 				if (vector.X > zero.X)
 				{
 					zero.X = vector.X;
 				}
+
 				zero.Y += vector.Y + (float)num26;
 			}
+
 			X += Main.toolTipDistance;
 			Y += Main.toolTipDistance;
 			if ((float)X + zero.X + 4f > (float)Main.screenWidth)
 			{
 				X = (int)((float)Main.screenWidth - zero.X - 4f);
 			}
+
 			if ((float)Y + zero.Y + 4f > (float)Main.screenHeight)
 			{
 				Y = (int)((float)Main.screenHeight - zero.Y - 4f);
 			}
+
 			int num27 = 0;
 			num19 = (float)Main.mouseTextColor / 255f;
 			for (int k = 0; k < num4; k++)
@@ -15050,6 +_,7 @@
 						{
 							black = new Microsoft.Xna.Framework.Color(num29, num29, num29, num29);
 						}
+
 						if (l == 0)
 						{
 							num30--;
@@ -15066,6 +_,7 @@
 						{
 							num31++;
 						}
+
 						Main.spriteBatch.Draw(Main.oneDropLogo, new Vector2((float)num30, (float)num31), null, black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 					}
 				}
@@ -15079,62 +_,77 @@
 						{
 							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num20)), (int)((byte)(175f * num20)), (int)((byte)(0f * num20)), a);
 						}
+
 						if (rare == -1)
 						{
 							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)(130f * num20)), (int)((byte)(130f * num20)), (int)((byte)(130f * num20)), a);
 						}
+
 						if (rare == 1)
 						{
 							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)(150f * num20)), (int)((byte)(150f * num20)), (int)((byte)(255f * num20)), a);
 						}
+
 						if (rare == 2)
 						{
 							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)(150f * num20)), (int)((byte)(255f * num20)), (int)((byte)(150f * num20)), a);
 						}
+
 						if (rare == 3)
 						{
 							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num20)), (int)((byte)(200f * num20)), (int)((byte)(150f * num20)), a);
 						}
+
 						if (rare == 4)
 						{
 							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num20)), (int)((byte)(150f * num20)), (int)((byte)(150f * num20)), a);
 						}
+
 						if (rare == 5)
 						{
 							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num20)), (int)((byte)(150f * num20)), (int)((byte)(255f * num20)), a);
 						}
+
 						if (rare == 6)
 						{
 							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)(210f * num20)), (int)((byte)(160f * num20)), (int)((byte)(255f * num20)), a);
 						}
+
 						if (rare == 7)
 						{
 							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)(150f * num20)), (int)((byte)(255f * num20)), (int)((byte)(10f * num20)), a);
 						}
+
 						if (rare == 8)
 						{
 							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num20)), (int)((byte)(255f * num20)), (int)((byte)(10f * num20)), a);
 						}
+
 						if (rare == 9)
 						{
 							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)(5f * num20)), (int)((byte)(200f * num20)), (int)((byte)(255f * num20)), a);
 						}
+
 						if (rare == 10)
 						{
 							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num20)), (int)((byte)(40f * num20)), (int)((byte)(100f * num20)), a);
 						}
+
 						if (rare >= 11)
 						{
 							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)(180f * num20)), (int)((byte)(40f * num20)), (int)((byte)(255f * num20)), a);
 						}
+
 						if (diff == 1)
 						{
 							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)((float)Main.mcColor.R * num20)), (int)((byte)((float)Main.mcColor.G * num20)), (int)((byte)((float)Main.mcColor.B * num20)), a);
 						}
+
 						if (diff == 2)
 						{
 							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)((float)Main.hcColor.R * num20)), (int)((byte)((float)Main.hcColor.G * num20)), (int)((byte)((float)Main.hcColor.B * num20)), a);
 						}
+
 						if (Main.toolTip.expert || rare == -12)
 						{
 							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)((float)Main.DiscoR * num20)), (int)((byte)((float)Main.DiscoG * num20)), (int)((byte)((float)Main.DiscoB * num20)), a);
@@ -15155,8 +_,15 @@
 					{
 						baseColor = color;
 					}
+
+					if (overrideColor[k].HasValue)
+					{
+						baseColor = overrideColor[k].Value * num20;
+					}
+
 					ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, Main.fontMouseText, array[k], new Vector2((float)X, (float)(Y + num27)), baseColor, 0f, Vector2.Zero, Vector2.One, -1f, 2f);
 				}
+
 				num27 += (int)(Main.fontMouseText.MeasureString(array[k]).Y + (float)num26);
 			}
 		}
@@ -15170,7 +_,7 @@
 			if (Main.bannerMouseOver)
 			{
 				int num = 0;
-				for (int i = 0; i < 267; i++)
+				for (int i = 0; i < NPCLoader.NPCCount; i++)
 				{
 					if (Item.BannerToNPC(i) != 0 && Main.player[Main.myPlayer].NPCBannerBuff[i])
 					{
@@ -15186,22 +_,27 @@
 							num2 += 260;
 							num3 -= num4 * 20;
 						}
+
 						if (num > num4 * 2)
 						{
 							num5++;
 							num2 += 260;
 							num3 -= num4 * 20;
 						}
+
 						if (num > num4 * 3)
 						{
 							num5++;
 							num2 += 260;
 							num3 -= num4 * 20;
 						}
+
 						list.Add(new Vector2((float)(num2 - 260 * num5), (float)num3) + value - p.ToVector2());
 					}
 				}
 			}
+
+			BuffLoader.CustomBuffTipSize(Main.buffString, list);
 			Vector2 zero = Vector2.Zero;
 			foreach (Vector2 current in list)
 			{
@@ -15209,19 +_,23 @@
 				{
 					zero.X = current.X;
 				}
+
 				if (zero.Y < current.Y)
 				{
 					zero.Y = current.Y;
 				}
 			}
+
 			if ((float)X + zero.X + 24f > (float)Main.screenWidth)
 			{
 				X = (int)((float)Main.screenWidth - zero.X - 24f);
 			}
+
 			if ((float)Y + zero.Y + 4f > (float)Main.screenHeight)
 			{
 				Y = (int)((float)Main.screenHeight - zero.Y - 4f);
 			}
+
 			for (int j = 0; j < 5; j++)
 			{
 				int num6 = X;
@@ -15247,12 +_,14 @@
 				{
 					black = new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
 				}
+
 				Main.spriteBatch.DrawString(Main.fontMouseText, Main.buffString, new Vector2((float)num6, (float)num7), black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 			}
+
 			if (Main.bannerMouseOver)
 			{
 				int num8 = 0;
-				for (int k = 0; k < 267; k++)
+				for (int k = 0; k < NPCLoader.NPCCount; k++)
 				{
 					if (Item.BannerToNPC(k) != 0 && Main.player[Main.myPlayer].NPCBannerBuff[k])
 					{
@@ -15267,16 +_,19 @@
 								num9 += 260;
 								num10 -= num11 * 20;
 							}
+
 							if (num8 > num11 * 2)
 							{
 								num9 += 260;
 								num10 -= num11 * 20;
 							}
+
 							if (num8 > num11 * 3)
 							{
 								num9 += 260;
 								num10 -= num11 * 20;
 							}
+
 							Microsoft.Xna.Framework.Color black2 = Microsoft.Xna.Framework.Color.Black;
 							if (l == 0)
 							{
@@ -15299,11 +_,15 @@
 								float num12 = (float)Main.mouseTextColor / 255f;
 								black2 = new Microsoft.Xna.Framework.Color((int)((byte)(80f * num12)), (int)((byte)(255f * num12)), (int)((byte)(120f * num12)), (int)Main.mouseTextColor);
 							}
+
 							Main.spriteBatch.DrawString(Main.fontMouseText, Lang.npcName(Item.BannerToNPC(k), false), new Vector2((float)num9, (float)num10), black2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 						}
 					}
 				}
 			}
+
+			BuffLoader.DrawCustomBuffTip(Main.buffString, Main.spriteBatch,
+					X, Y + (int)Main.fontMouseText.MeasureString(Main.buffString).Y);
 		}
 
 		protected void DrawFPS()
@@ -15314,26 +_,27 @@
 				string text = string.Concat(Main.frameRate);
 				object obj = text;
 				text = string.Concat(new object[]
-					{
-						obj,
+				{
+					obj,
 						" (",
 						Liquid.numLiquid + LiquidBuffer.numLiquidBuffer,
 						")"
-					});
+				});
 				object obj2 = text;
 				text = string.Concat(new object[]
-					{
-						obj2,
+				{
+					obj2,
 						" (",
 						(int)(Main.gfxQuality * 100f),
 						"%)"
-					});
+				});
 				string text2 = text + " " + Main.debugWords;
 				int num = 4;
 				if (!Main.gameMenu)
 				{
 					num = Main.screenHeight - 24;
 				}
+
 				Vector2 position = new Vector2(4f, (float)num);
 				Vector2 origin = new Vector2(0f, 0f);
 				Vector2 vector = Main.fontMouseText.MeasureString(text2);
@@ -15341,6 +_,7 @@
 				{
 					position.X = (float)(Main.screenWidth - 4) - vector.X;
 				}
+
 				Main.spriteBatch.DrawString(Main.fontMouseText, text2, position, new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, origin, 1f, SpriteEffects.None, 0f);
 			}
 		}
@@ -15351,6 +_,7 @@
 			{
 				return;
 			}
+
 			string text = PlayerInput.ComposeInstructionsForGamepad();
 			if (text.Length > 0 && (!Main.player[Main.myPlayer].dead || Main.gameMenu))
 			{
@@ -15361,6 +_,7 @@
 				{
 					num = 55f;
 				}
+
 				Vector2 stringSize = ChatManager.GetStringSize(Main.fontMouseText, text, new Vector2(1f), -1f);
 				float num3 = num2;
 				Utils.Swap<float>(ref GlyphTagHandler.GlyphsScale, ref num3);
@@ -15397,8 +_,10 @@
 					{
 						num = 255;
 					}
+
 					return new Microsoft.Xna.Framework.Color(num, num2, num3, 255);
 				}
+
 				if (type == 211)
 				{
 					num4 = 0.3f + (float)Main.mouseTextColor / 300f;
@@ -15450,18 +_,22 @@
 					num3 = (int)((float)newColor.B * (1f + num4));
 				}
 			}
+
 			if (num > 255)
 			{
 				num = 255;
 			}
+
 			if (num2 > 255)
 			{
 				num2 = 255;
 			}
+
 			if (num3 > 255)
 			{
 				num3 = 255;
 			}
+
 			newColor.R = (byte)num;
 			newColor.G = (byte)num2;
 			newColor.B = (byte)num3;
@@ -15494,6 +_,7 @@
 			{
 				Main.critterCage = false;
 			}
+
 			Stopwatch stopwatch = new Stopwatch();
 			stopwatch.Start();
 			int num = (int)(255f * (1f - Main.gfxQuality) + 30f * Main.gfxQuality);
@@ -15503,6 +_,7 @@
 			{
 				zero = Vector2.Zero;
 			}
+
 			int num3 = 0;
 			int[] arg_7B_0 = Main.specX;
 			int num4 = (int)((Main.screenPosition.X - zero.X) / 16f - 1f);
@@ -15513,24 +_,29 @@
 			{
 				num4 = 0;
 			}
+
 			if (num5 > Main.maxTilesX)
 			{
 				num5 = Main.maxTilesX;
 			}
+
 			if (num6 < 0)
 			{
 				num6 = 0;
 			}
+
 			if (num7 > Main.maxTilesY)
 			{
 				num7 = Main.maxTilesY;
 			}
+
 			if (Main.sectionManager.FrameSectionsLeft > 0)
 			{
 				TimeLogger.DetailedDrawReset();
 				WorldGen.SectionTileFrameWithCheck(num4, num6, num5, num7);
 				TimeLogger.DetailedDrawTime(5);
 			}
+
 			Dictionary<Microsoft.Xna.Framework.Point, int> dictionary = new Dictionary<Microsoft.Xna.Framework.Point, int>();
 			Dictionary<Microsoft.Xna.Framework.Point, int> dictionary2 = new Dictionary<Microsoft.Xna.Framework.Point, int>();
 			Dictionary<Microsoft.Xna.Framework.Point, int> dictionary3 = new Dictionary<Microsoft.Xna.Framework.Point, int>();
@@ -15539,6 +_,7 @@
 			{
 				int arg_19A_0 = Main.netMode;
 			}
+
 			int num8 = 16;
 			Microsoft.Xna.Framework.Color[] array = new Microsoft.Xna.Framework.Color[9];
 			for (int i = num6; i < num7 + 4; i++)
@@ -15548,13 +_,16 @@
 					if (j == 809)
 					{
 					}
+
 					Tile tile = Main.tile[j, i];
+					//patch file: j, i
 					if (tile == null)
 					{
 						tile = new Tile();
 						Main.tile[j, i] = tile;
 						Main.mapTime += 60;
 					}
+
 					ushort type = tile.type;
 					short num9 = tile.frameX;
 					short num10 = tile.frameY;
@@ -15563,12 +_,14 @@
 					{
 						flag = true;
 					}
+
 					if (tile.active() && flag == solidOnly)
 					{
 						if (!Main.tileSetsLoaded[(int)type])
 						{
 							this.LoadTiles((int)type);
 						}
+
 						SpriteEffects effects = SpriteEffects.None;
 						if (type == 3 || type == 13 || type == 20 || type == 24 || type == 49 || type == 372 || type == 50 || type == 52 || type == 61 || type == 62 || type == 71 || type == 73 || type == 74 || type == 81 || type == 82 || type == 83 || type == 84 || type == 91 || type == 92 || type == 93 || type == 110 || type == 113 || type == 115 || type == 135 || type == 141 || type == 165 || type == 174 || type == 201 || type == 205 || type == 227 || type == 270 || type == 271 || type == 382)
 						{
@@ -15595,6 +_,8 @@
 						{
 							effects = SpriteEffects.FlipHorizontally;
 						}
+
+						TileLoader.SetSpriteEffects(j, i, type, ref effects);
 						Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
 						int num11 = 0;
 						int num12 = 16;
@@ -15602,6 +_,7 @@
 						{
 							num11 += 2;
 						}
+
 						if (type == 4 && WorldGen.SolidTile(j, i - 1))
 						{
 							num11 = 2;
@@ -15610,38 +_,47 @@
 								num11 = 4;
 							}
 						}
+
 						if (type == 336)
 						{
 							num11 = 2;
 						}
+
 						if (type == 457)
 						{
 							num11 = 2;
 						}
+
 						if (type == 466)
 						{
 							num11 = 2;
 						}
+
 						if ((type >= 275 && type <= 282) || type == 414 || type == 413)
 						{
 							num11 = 2;
 						}
+
 						if (type == 285 || type == 286 || type == 298 || type == 299 || type == 309 || type == 358 || type == 359 || type == 360 || type == 361 || type == 362 || type == 363 || type == 364 || type == 391 || type == 392 || type == 393 || type == 394 || type == 310)
 						{
 							num11 = 2;
 						}
+
 						if (type == 100 || type == 283)
 						{
 							num11 = 2;
 						}
+
 						if (type == 78 || type == 85 || type == 210 || type == 133 || type == 134 || type == 233)
 						{
 							num11 = 2;
 						}
+
 						if (type == 33 || type == 49 || type == 174 || type == 372)
 						{
 							num11 = -4;
 						}
+
 						if (type == 3 || type == 4 || type == 5 || type == 24 || type == 33 || type == 49 || type == 372 || type == 61 || type == 71 || type == 110 || type == 174 || type == 201 || type == 323 || type == 324)
 						{
 							num12 = 20;
@@ -15717,22 +_,27 @@
 						{
 							num12 = 16;
 						}
+
 						if (type == 52)
 						{
 							num11 -= 2;
 						}
+
 						if (type == 324)
 						{
 							num11 = -2;
 						}
+
 						if (type == 231 || type == 238)
 						{
 							num11 += 2;
 						}
+
 						if (type == 207)
 						{
 							num11 = 2;
 						}
+
 						if (type == 4 || type == 5 || type == 323 || type == 324)
 						{
 							num8 = 20;
@@ -15741,11 +_,13 @@
 						{
 							num8 = 16;
 						}
+
 						if (type == 73 || type == 74 || type == 113)
 						{
 							num11 -= 12;
 							num12 = 32;
 						}
+
 						if (type == 388 || type == 389)
 						{
 							TileObjectData tileData = TileObjectData.GetTileData((int)type, (int)(num9 / 18), 0);
@@ -15757,12 +_,15 @@
 								num12 = 18;
 							}
 						}
+
 						if (type == 410 && num10 == 36)
 						{
 							num12 = 18;
 						}
+
 						if (type == 227)
 						{
+							//patch file: num8, num12
 							num8 = 32;
 							num12 = 38;
 							if (num9 == 238)
@@ -15774,6 +_,7 @@
 								num11 -= 20;
 							}
 						}
+
 						if (type == 185 || type == 186 || type == 187)
 						{
 							num11 = 2;
@@ -15800,10 +_,12 @@
 								}
 							}
 						}
+
 						if (type == 178 && num10 <= 36)
 						{
 							num11 = 2;
 						}
+
 						if (type == 184)
 						{
 							num8 = 20;
@@ -15816,85 +_,104 @@
 								num11 = -2;
 							}
 						}
+
 						if (type == 28)
 						{
 							num11 += 2;
 						}
+
 						if (type == 81)
 						{
 							num11 -= 8;
 							num12 = 26;
 							num8 = 24;
 						}
+
 						if (type == 105)
 						{
 							num11 = 2;
 						}
+
 						if (type == 124)
 						{
 							num12 = 18;
 						}
+
 						if (type == 137)
 						{
 							num12 = 18;
 						}
+
 						if (type == 138)
 						{
 							num12 = 18;
 						}
+
 						if (type == 139 || type == 142 || type == 143)
 						{
 							num11 = 2;
 						}
+
+						TileLoader.SetDrawPositions(j, i, ref num8, ref num11, ref num12);
 						int num14 = 0;
 						if (tile.halfBrick())
 						{
 							num14 = 8;
 						}
+
 						int num15 = Main.tileFrame[(int)type] * 38;
 						int num16 = 0;
 						if (type == 272)
 						{
 							num15 = 0;
 						}
+
 						if (type == 106)
 						{
 							num15 = Main.tileFrame[(int)type] * 54;
 						}
+
 						if (type >= 300 && type <= 308)
 						{
 							num15 = Main.tileFrame[(int)type] * 54;
 							num11 = 2;
 						}
+
 						if (type == 354)
 						{
 							num15 = Main.tileFrame[(int)type] * 54;
 							num11 = 2;
 						}
+
 						if (type == 355)
 						{
 							num15 = Main.tileFrame[(int)type] * 54;
 							num11 = 2;
 						}
+
 						if (type == 377)
 						{
 							num15 = Main.tileFrame[(int)type] * 38;
 							num11 = 2;
 						}
+
 						if (type == 463)
 						{
 							num15 = Main.tileFrame[(int)type] * 72;
 							num11 = 2;
 						}
+
 						if (type == 464)
 						{
 							num15 = Main.tileFrame[(int)type] * 72;
 							num11 = 2;
 						}
+
 						if (type == 379)
 						{
 							num15 = Main.tileFrame[(int)type] * 90;
 						}
+
 						if (type == 349)
 						{
 							int num17 = (int)(num9 % 36);
@@ -15905,6 +_,7 @@
 								num9 = (short)(36 * num19 + num17);
 							}
 						}
+
 						if (type == 441)
 						{
 							int num20 = (int)(num9 % 36);
@@ -15915,20 +_,24 @@
 								num10 = (short)(38 * num22 + num21);
 							}
 						}
+
 						if (type == 390)
 						{
 							num15 = Main.tileFrame[(int)type] * 36;
 						}
+
 						if (type == 412)
 						{
 							num15 = 0;
 							num11 = 2;
 						}
+
 						if (type == 455)
 						{
 							num15 = 0;
 							num11 = 2;
 						}
+
 						if (type == 406)
 						{
 							int num23 = Main.tileFrame[(int)type];
@@ -15940,9 +_,11 @@
 							{
 								num23 = Main.tileFrame[(int)type] - 1;
 							}
+
 							num15 = num23 * 56;
 							num15 += (int)(num10 / 54 * 2);
 						}
+
 						if (type == 452)
 						{
 							int num24 = Main.tileFrame[(int)type];
@@ -15950,8 +_,10 @@
 							{
 								num24 = 0;
 							}
+
 							num15 = num24 * 54;
 						}
+
 						if (type == 455)
 						{
 							int num25 = 1 + Main.tileFrame[(int)type];
@@ -15959,13 +_,16 @@
 							{
 								num25 = 0;
 							}
+
 							num15 = num25 * 54;
 						}
+
 						if (type == 454)
 						{
 							int num26 = Main.tileFrame[(int)type];
 							num15 = num26 * 54;
 						}
+
 						if (type == 453)
 						{
 							int num27 = Main.tileFrameCounter[(int)type];
@@ -15975,6 +_,7 @@
 							num27 %= 3;
 							num15 = num27 * 54;
 						}
+
 						if (type == 456)
 						{
 							int num29 = Main.tileFrameCounter[(int)type];
@@ -15985,6 +_,7 @@
 							num29 %= 4;
 							num15 = num29 * 54;
 						}
+
 						if (type == 405)
 						{
 							int num32 = Main.tileFrame[(int)type];
@@ -15992,24 +_,30 @@
 							{
 								num32 = 0;
 							}
+
 							num15 = num32 * 38;
 						}
+
 						if (type == 12)
 						{
 							num15 = Main.tileFrame[(int)type] * 36;
 						}
+
 						if (type == 96)
 						{
 							num15 = Main.tileFrame[(int)type] * 36;
 						}
+
 						if (type == 238)
 						{
 							num15 = Main.tileFrame[(int)type] * 36;
 						}
+
 						if (type == 31)
 						{
 							num15 = Main.tileFrame[(int)type] * 36;
 						}
+
 						if (type == 215)
 						{
 							if (num10 < 36)
@@ -16020,28 +_,34 @@
 							{
 								num15 = 252;
 							}
+
 							num11 = 2;
 						}
+
 						if (type == 231)
 						{
 							num15 = Main.tileFrame[(int)type] * 54;
 							num11 = 2;
 						}
+
 						if (type == 243)
 						{
 							num15 = Main.tileFrame[(int)type] * 54;
 							num11 = 2;
 						}
+
 						if (type == 247)
 						{
 							num15 = Main.tileFrame[(int)type] * 54;
 							num11 = 2;
 						}
+
 						if (type == 228)
 						{
 							num15 = Main.tileFrame[(int)type] * 54;
 							num11 = 2;
 						}
+
 						if (type == 244)
 						{
 							num11 = 2;
@@ -16054,20 +_,24 @@
 								num15 = 0;
 							}
 						}
+
 						if (type == 235)
 						{
 							num15 = Main.tileFrame[(int)type] * 18;
 						}
+
 						if (type == 217 || type == 218)
 						{
 							num15 = Main.tileFrame[(int)type] * 36;
 							num11 = 2;
 						}
+
 						if (type == 219 || type == 220)
 						{
 							num15 = Main.tileFrame[(int)type] * 54;
 							num11 = 2;
 						}
+
 						if (type == 270 || type == 271)
 						{
 							int k = Main.tileFrame[(int)type] + j % 6;
@@ -16075,21 +_,26 @@
 							{
 								k += 3;
 							}
+
 							if (j % 3 == 0)
 							{
 								k += 3;
 							}
+
 							if (j % 4 == 0)
 							{
 								k += 3;
 							}
+
 							while (k > 5)
 							{
 								k -= 6;
 							}
+
 							num16 = k * 18;
 							num15 = 0;
 						}
+
 						if (type == 428)
 						{
 							num11 += 4;
@@ -16106,17 +_,18 @@
 							{
 								case 1:
 									num11 = -4;
-									break;
+								break;
 								case 2:
 									num11 = -2;
-									num8 = 24;
-									break;
+								num8 = 24;
+								break;
 								case 3:
 									num11 = -2;
-									num8 = 16;
-									break;
-							}
-						}
+								num8 = 16;
+								break;
+							}
+						}
+
 						if (TileID.Sets.TeamTiles[(int)type])
 						{
 							if (TileID.Sets.Platforms[(int)type])
@@ -16128,6 +_,14 @@
 								num15 += 90;
 							}
 						}
+
+						TileLoader.SetAnimationFrame(type, j, i, ref num16, ref num15);
+						if (!TileLoader.PreDraw(j, i, type, Main.spriteBatch))
+						{
+							TileLoader.PostDraw(j, i, type, Main.spriteBatch);
+							continue;
+						}
+
 						if (type == 373 || type == 374 || type == 375 || type == 461)
 						{
 							int num33 = 60;
@@ -16139,6 +_,7 @@
 							{
 								num33 = 180;
 							}
+
 							if (Main.rand.Next(num33 * 2) == 0 && tile.liquid == 0)
 							{
 								Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(j * 16, i * 16, 16, 16);
@@ -16158,6 +_,7 @@
 										}
 									}
 								}
+
 								if (flag2)
 								{
 									Vector2 position = new Vector2((float)(j * 16), (float)(i * 16));
@@ -16165,19 +_,27 @@
 									if (Main.waterStyle > 1)
 									{
 										num34 = 706 + Main.waterStyle - 1;
+										if (Main.waterStyle >= WaterStyleLoader.vanillaWaterCount)
+										{
+											num34 = WaterStyleLoader.GetWaterStyle(Main.waterStyle).GetDropletGore();
+										}
 									}
+
 									if (type == 374)
 									{
 										num34 = 716;
 									}
+
 									if (type == 375)
 									{
 										num34 = 717;
 									}
+
 									if (type == 461)
 									{
 										num34 = 943;
 									}
+
 									if (num34 != 943 || Main.rand.Next(3) == 0)
 									{
 										int num35 = Gore.NewGore(position, default(Vector2), num34, 1f);
@@ -16199,42 +_,52 @@
 								{
 									num15 = Main.bunnyCageFrame[num38] * 54;
 								}
+
 								if (type == 276 || type == 414)
 								{
 									num15 = Main.squirrelCageFrame[num38] * 54;
 								}
+
 								if (type == 413)
 								{
 									num15 = Main.squirrelCageFrameOrange[num38] * 54;
 								}
+
 								if (type == 277)
 								{
 									num15 = Main.mallardCageFrame[num38] * 54;
 								}
+
 								if (type == 278)
 								{
 									num15 = Main.duckCageFrame[num38] * 54;
 								}
+
 								if (type == 279 || type == 358)
 								{
 									num15 = Main.birdCageFrame[num38] * 54;
 								}
+
 								if (type == 280)
 								{
 									num15 = Main.blueBirdCageFrame[num38] * 54;
 								}
+
 								if (type == 281)
 								{
 									num15 = Main.redBirdCageFrame[num38] * 54;
 								}
+
 								if (type == 296)
 								{
 									num15 = Main.scorpionCageFrame[0, num38] * 54;
 								}
+
 								if (type == 297)
 								{
 									num15 = Main.scorpionCageFrame[0, num38] * 54;
 								}
+
 								if (type == 309)
 								{
 									num15 = Main.penguinCageFrame[num38] * 54;
@@ -16251,26 +_,32 @@
 								{
 									num15 = Main.snailCageFrame[num41] * 36;
 								}
+
 								if (type == 286)
 								{
 									num15 = Main.snail2CageFrame[num41] * 36;
 								}
+
 								if (type == 298 || type == 361)
 								{
 									num15 = Main.frogCageFrame[num41] * 36;
 								}
+
 								if (type == 299 || type == 363)
 								{
 									num15 = Main.mouseCageFrame[num41] * 36;
 								}
+
 								if (type == 310 || type == 364 || type == 391)
 								{
 									num15 = Main.wormCageFrame[num41] * 36;
 								}
+
 								if (type == 339 || type == 362)
 								{
 									num15 = Main.grasshopperCageFrame[num41] * 36;
 								}
+
 								if (type == 392 || type == 393 || type == 394)
 								{
 									num15 = Main.slugCageFrame[(int)(type - 392), num41] * 36;
@@ -16294,6 +_,7 @@
 									{
 										num45 = 8;
 									}
+
 									num15 = Main.butterflyCageFrame[num45, num44] * 36;
 								}
 								else if (type >= 316 && type <= 318)
@@ -16312,11 +_,13 @@
 									{
 										num47--;
 									}
+
 									num15 += num47 % 6;
 									if (num15 >= 6)
 									{
 										num15 -= 6;
 									}
+
 									num15 *= 72;
 								}
 								else
@@ -16340,6 +_,7 @@
 							{
 								num15 = Main.tileFrame[(int)type] * 90;
 							}
+
 							Texture2D texture2D = null;
 							Microsoft.Xna.Framework.Rectangle empty = Microsoft.Xna.Framework.Rectangle.Empty;
 							Microsoft.Xna.Framework.Color color2 = Microsoft.Xna.Framework.Color.Transparent;
@@ -16355,33 +_,38 @@
 									switch (num48)
 									{
 										case 10:
+										{
+											int num49 = (int)(num10 / 54);
+											if (num49 == 32)
 											{
-												int num49 = (int)(num10 / 54);
-												if (num49 == 32)
-												{
-													texture2D = Main.glowMaskTexture[57];
-													empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 54), num8, num12);
-													color2 = color3;
-												}
-												break;
+												texture2D = Main.glowMaskTexture[57];
+												empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 54), num8, num12);
+												color2 = color3;
 											}
+
+											break;
+										}
+
 										case 11:
+										{
+											int num49 = (int)(num10 / 54);
+											if (num49 == 32)
 											{
-												int num49 = (int)(num10 / 54);
-												if (num49 == 32)
-												{
-													texture2D = Main.glowMaskTexture[58];
-													empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 54), num8, num12);
-													color2 = color3;
-												}
-												if (num49 == 33)
-												{
-													texture2D = Main.glowMaskTexture[119];
-													empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 54), num8, num12);
-													color2 = color4;
-												}
-												break;
+												texture2D = Main.glowMaskTexture[58];
+												empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 54), num8, num12);
+												color2 = color3;
 											}
+
+											if (num49 == 33)
+											{
+												texture2D = Main.glowMaskTexture[119];
+												empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 54), num8, num12);
+												color2 = color4;
+											}
+
+											break;
+										}
+
 										case 12:
 										case 13:
 										case 16:
@@ -16389,119 +_,137 @@
 										case 20:
 											break;
 										case 14:
+										{
+											int num49 = (int)(num9 / 54);
+											if (num49 == 31)
 											{
-												int num49 = (int)(num9 / 54);
-												if (num49 == 31)
+												texture2D = Main.glowMaskTexture[67];
+												empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
+												color2 = color3;
+											}
+
+											if (num49 == 32)
+											{
+												texture2D = Main.glowMaskTexture[124];
+												empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
+												color2 = color4;
+											}
+
+											break;
+										}
+
+										case 15:
+										{
+											int num49 = (int)(num10 / 40);
+											if (num49 == 32)
+											{
+												texture2D = Main.glowMaskTexture[54];
+												empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 40), num8, num12);
+												color2 = color3;
+											}
+
+											if (num49 == 33)
+											{
+												texture2D = Main.glowMaskTexture[116];
+												empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 40), num8, num12);
+												color2 = color4;
+											}
+
+											break;
+										}
+
+										case 18:
+										{
+											int num49 = (int)(num9 / 36);
+											if (num49 == 27)
+											{
+												texture2D = Main.glowMaskTexture[69];
+												empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
+												color2 = color3;
+											}
+
+											if (num49 == 28)
+											{
+												texture2D = Main.glowMaskTexture[125];
+												empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
+												color2 = color4;
+											}
+
+											break;
+										}
+
+										case 19:
+										{
+											int num49 = (int)(num10 / 18);
+											if (num49 == 26)
+											{
+												texture2D = Main.glowMaskTexture[65];
+												empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 18), num8, num12);
+												color2 = color3;
+											}
+
+											if (num49 == 27)
+											{
+												texture2D = Main.glowMaskTexture[112];
+												empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 18), num8, num12);
+												color2 = color4;
+											}
+
+											break;
+										}
+
+										case 21:
+										{
+											int num49 = (int)(num9 / 36);
+											if (num49 == 48)
+											{
+												texture2D = Main.glowMaskTexture[56];
+												empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
+												color2 = color3;
+											}
+
+											if (num49 == 49)
+											{
+												texture2D = Main.glowMaskTexture[117];
+												empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
+												color2 = color4;
+											}
+
+											break;
+										}
+
+										default:
+											switch (num48)
+										{
+											case 33:
+													if (num9 / 18 == 0)
+											{
+												int num49 = (int)(num10 / 22);
+												if (num49 == 26)
 												{
-													texture2D = Main.glowMaskTexture[67];
-													empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
+													texture2D = Main.glowMaskTexture[61];
+													empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 22), num8, num12);
 													color2 = color3;
 												}
-												if (num49 == 32)
+											}
+
+											break;
+											case 34:
+													if (num9 / 54 == 0)
+											{
+												int num49 = (int)(num10 / 54);
+												if (num49 == 33)
 												{
-													texture2D = Main.glowMaskTexture[124];
-													empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
-													color2 = color4;
-												}
-												break;
-											}
-										case 15:
-											{
-												int num49 = (int)(num10 / 40);
-												if (num49 == 32)
-												{
-													texture2D = Main.glowMaskTexture[54];
-													empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 40), num8, num12);
+													texture2D = Main.glowMaskTexture[55];
+													empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 54), num8, num12);
 													color2 = color3;
 												}
-												if (num49 == 33)
-												{
-													texture2D = Main.glowMaskTexture[116];
-													empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 40), num8, num12);
-													color2 = color4;
-												}
-												break;
 											}
-										case 18:
-											{
-												int num49 = (int)(num9 / 36);
-												if (num49 == 27)
-												{
-													texture2D = Main.glowMaskTexture[69];
-													empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
-													color2 = color3;
-												}
-												if (num49 == 28)
-												{
-													texture2D = Main.glowMaskTexture[125];
-													empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
-													color2 = color4;
-												}
-												break;
-											}
-										case 19:
-											{
-												int num49 = (int)(num10 / 18);
-												if (num49 == 26)
-												{
-													texture2D = Main.glowMaskTexture[65];
-													empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 18), num8, num12);
-													color2 = color3;
-												}
-												if (num49 == 27)
-												{
-													texture2D = Main.glowMaskTexture[112];
-													empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 18), num8, num12);
-													color2 = color4;
-												}
-												break;
-											}
-										case 21:
-											{
-												int num49 = (int)(num9 / 36);
-												if (num49 == 48)
-												{
-													texture2D = Main.glowMaskTexture[56];
-													empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
-													color2 = color3;
-												}
-												if (num49 == 49)
-												{
-													texture2D = Main.glowMaskTexture[117];
-													empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
-													color2 = color4;
-												}
-												break;
-											}
-										default:
-											switch (num48)
-											{
-												case 33:
-													if (num9 / 18 == 0)
-													{
-														int num49 = (int)(num10 / 22);
-														if (num49 == 26)
-														{
-															texture2D = Main.glowMaskTexture[61];
-															empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 22), num8, num12);
-															color2 = color3;
-														}
-													}
-													break;
-												case 34:
-													if (num9 / 54 == 0)
-													{
-														int num49 = (int)(num10 / 54);
-														if (num49 == 33)
-														{
-															texture2D = Main.glowMaskTexture[55];
-															empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 54), num8, num12);
-															color2 = color3;
-														}
-													}
-													break;
-											}
+
 											break;
+										}
+
+										break;
 									}
 								}
 								else if (num48 != 42)
@@ -16511,84 +_,97 @@
 										switch (num48)
 										{
 											case 87:
+											{
+												int num49 = (int)(num9 / 54);
+												if (num49 == 26)
 												{
-													int num49 = (int)(num9 / 54);
-													if (num49 == 26)
-													{
-														texture2D = Main.glowMaskTexture[64];
-														empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
-														color2 = color3;
-													}
-													if (num49 == 27)
-													{
-														texture2D = Main.glowMaskTexture[121];
-														empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
-														color2 = color4;
-													}
-													break;
+													texture2D = Main.glowMaskTexture[64];
+													empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
+													color2 = color3;
 												}
+
+												if (num49 == 27)
+												{
+													texture2D = Main.glowMaskTexture[121];
+													empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
+													color2 = color4;
+												}
+
+												break;
+											}
+
 											case 88:
+											{
+												int num49 = (int)(num9 / 54);
+												if (num49 == 24)
 												{
-													int num49 = (int)(num9 / 54);
-													if (num49 == 24)
-													{
-														texture2D = Main.glowMaskTexture[59];
-														empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
-														color2 = color3;
-													}
-													if (num49 == 25)
-													{
-														texture2D = Main.glowMaskTexture[120];
-														empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
-														color2 = color4;
-													}
-													break;
+													texture2D = Main.glowMaskTexture[59];
+													empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
+													color2 = color3;
 												}
+
+												if (num49 == 25)
+												{
+													texture2D = Main.glowMaskTexture[120];
+													empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
+													color2 = color4;
+												}
+
+												break;
+											}
+
 											case 89:
+											{
+												int num49 = (int)(num9 / 54);
+												if (num49 == 29)
 												{
-													int num49 = (int)(num9 / 54);
-													if (num49 == 29)
-													{
-														texture2D = Main.glowMaskTexture[66];
-														empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
-														color2 = color3;
-													}
-													if (num49 == 30)
-													{
-														texture2D = Main.glowMaskTexture[123];
-														empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
-														color2 = color4;
-													}
-													break;
+													texture2D = Main.glowMaskTexture[66];
+													empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
+													color2 = color3;
 												}
+
+												if (num49 == 30)
+												{
+													texture2D = Main.glowMaskTexture[123];
+													empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
+													color2 = color4;
+												}
+
+												break;
+											}
+
 											case 90:
+											{
+												int num49 = (int)(num10 / 36);
+												if (num49 == 27)
 												{
-													int num49 = (int)(num10 / 36);
-													if (num49 == 27)
-													{
-														texture2D = Main.glowMaskTexture[52];
-														empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 36), num8, num12);
-														color2 = color3;
-													}
-													if (num49 == 28)
-													{
-														texture2D = Main.glowMaskTexture[113];
-														empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 36), num8, num12);
-														color2 = color4;
-													}
-													break;
+													texture2D = Main.glowMaskTexture[52];
+													empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 36), num8, num12);
+													color2 = color3;
 												}
+
+												if (num49 == 28)
+												{
+													texture2D = Main.glowMaskTexture[113];
+													empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 36), num8, num12);
+													color2 = color4;
+												}
+
+												break;
+											}
+
 											case 93:
+											{
+												int num49 = (int)(num9 / 54);
+												if (num49 == 27)
 												{
-													int num49 = (int)(num9 / 54);
-													if (num49 == 27)
-													{
-														texture2D = Main.glowMaskTexture[62];
-														empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 54), num8, num12);
-														color2 = color3;
-													}
-													break;
+													texture2D = Main.glowMaskTexture[62];
+													empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 54), num8, num12);
+													color2 = color3;
 												}
+
+												break;
+											}
 										}
 									}
 									else
@@ -16600,6 +_,7 @@
 											empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 36), num8, num12);
 											color2 = color3;
 										}
+
 										if (num49 == 28)
 										{
 											texture2D = Main.glowMaskTexture[114];
@@ -16625,71 +_,80 @@
 								{
 									case 100:
 										if (num9 / 36 == 0)
+									{
+										int num49 = (int)(num10 / 36);
+										if (num49 == 27)
 										{
-											int num49 = (int)(num10 / 36);
-											if (num49 == 27)
-											{
-												texture2D = Main.glowMaskTexture[68];
-												empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 36), num8, num12);
-												color2 = color3;
-											}
+											texture2D = Main.glowMaskTexture[68];
+											empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 36), num8, num12);
+											color2 = color3;
 										}
+									}
+
+									break;
+									case 101:
+									{
+										int num49 = (int)(num9 / 54);
+										if (num49 == 28)
+										{
+											texture2D = Main.glowMaskTexture[60];
+											empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
+											color2 = color3;
+										}
+
+										if (num49 == 29)
+										{
+											texture2D = Main.glowMaskTexture[115];
+											empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
+											color2 = color4;
+										}
+
 										break;
-									case 101:
-										{
-											int num49 = (int)(num9 / 54);
-											if (num49 == 28)
-											{
-												texture2D = Main.glowMaskTexture[60];
-												empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
-												color2 = color3;
-											}
-											if (num49 == 29)
-											{
-												texture2D = Main.glowMaskTexture[115];
-												empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
-												color2 = color4;
-											}
-											break;
-										}
+									}
+
 									case 102:
 									case 103:
 										break;
 									case 104:
+									{
+										int num49 = (int)(num9 / 36);
+										if (num49 == 24)
 										{
-											int num49 = (int)(num9 / 36);
-											if (num49 == 24)
-											{
-												texture2D = Main.glowMaskTexture[51];
-												empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
-												color2 = color3;
-											}
-											if (num49 == 25)
-											{
-												texture2D = Main.glowMaskTexture[118];
-												empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
-												color2 = color4;
-											}
-											break;
+											texture2D = Main.glowMaskTexture[51];
+											empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
+											color2 = color3;
 										}
+
+										if (num49 == 25)
+										{
+											texture2D = Main.glowMaskTexture[118];
+											empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
+											color2 = color4;
+										}
+
+										break;
+									}
+
 									default:
 										if (num48 == 172)
+									{
+										int num49 = (int)(num10 / 38);
+										if (num49 == 28)
 										{
-											int num49 = (int)(num10 / 38);
-											if (num49 == 28)
-											{
-												texture2D = Main.glowMaskTexture[88];
-												empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 38), num8, num12);
-												color2 = color3;
-											}
-											if (num49 == 29)
-											{
-												texture2D = Main.glowMaskTexture[122];
-												empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 38), num8, num12);
-												color2 = color4;
-											}
+											texture2D = Main.glowMaskTexture[88];
+											empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 38), num8, num12);
+											color2 = color3;
 										}
-										break;
+
+										if (num49 == 29)
+										{
+											texture2D = Main.glowMaskTexture[122];
+											empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 38), num8, num12);
+											color2 = color4;
+										}
+									}
+
+									break;
 								}
 							}
 							else if (num48 != 184)
@@ -16712,6 +_,7 @@
 										empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
 										color2 = color3;
 									}
+
 									if (num49 == 49)
 									{
 										texture2D = Main.glowMaskTexture[117];
@@ -16726,6 +_,7 @@
 								empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12);
 								color2 = color5;
 							}
+
 							Texture2D texture2D2 = null;
 							Microsoft.Xna.Framework.Rectangle empty2 = Microsoft.Xna.Framework.Rectangle.Empty;
 							Microsoft.Xna.Framework.Color transparent = Microsoft.Xna.Framework.Color.Transparent;
@@ -16737,6 +_,7 @@
 								{
 									flag3 = true;
 								}
+
 								if (num50 > 10)
 								{
 									texture2D2 = Main.highlightMaskTexture[(int)type];
@@ -16750,6 +_,7 @@
 									}
 								}
 							}
+
 							if (Main.player[Main.myPlayer].dangerSense)
 							{
 								bool flag4 = false || type == 135 || type == 137 || type == 138 || type == 141 || type == 210 || type == 442 || type == 443 || type == 444;
@@ -16760,25 +_,31 @@
 									{
 										flag4 = (flag4 || type == 37 || type == 58 || type == 76);
 									}
+
 									if (!Main.player[Main.myPlayer].iceSkate)
 									{
 										flag4 = (flag4 || type == 162);
 									}
 								}
+
+								flag4 = flag4 || TileLoader.Dangersense(j, i, type, Main.player[Main.myPlayer]);
 								if (flag4)
 								{
 									if (color.R < 255)
 									{
 										color.R = 255;
 									}
+
 									if (color.G < 50)
 									{
 										color.G = 50;
 									}
+
 									if (color.B < 50)
 									{
 										color.B = 50;
 									}
+
 									color.A = Main.mouseTextColor;
 									if (!Main.gamePaused && base.IsActive && Main.rand.Next(30) == 0)
 									{
@@ -16790,6 +_,7 @@
 									}
 								}
 							}
+
 							if (Main.player[Main.myPlayer].findTreasure)
 							{
 								bool flag5 = false;
@@ -16797,10 +_,12 @@
 								{
 									flag5 = true;
 								}
+
 								if (type == 186 && num9 >= 864 && num9 <= 1170)
 								{
 									flag5 = true;
 								}
+
 								if (flag5 || Main.tileSpelunker[(int)type] || (Main.tileAlch[(int)type] && type != 82))
 								{
 									byte b2 = 200;
@@ -16809,10 +_,12 @@
 									{
 										color.R = b2;
 									}
+
 									if (color.G < b3)
 									{
 										color.G = b3;
 									}
+
 									color.A = Main.mouseTextColor;
 									if (!Main.gamePaused && base.IsActive && Main.rand.Next(60) == 0)
 									{
@@ -16823,6 +_,7 @@
 									}
 								}
 							}
+
 							if (!Main.gamePaused && base.IsActive && (Lighting.lightMode < 2 || Main.rand.Next(4) == 0))
 							{
 								if (type == 238)
@@ -16850,6 +_,7 @@
 											}
 										}
 									}
+
 									if (num10 == 18 && (num9 == 0 || num9 == 36))
 									{
 										for (int n = 0; n < 1; n++)
@@ -16869,6 +_,7 @@
 										}
 									}
 								}
+
 								if (type == 139 && tile.frameX == 36 && tile.frameY % 36 == 0 && (int)Main.time % 7 == 0 && Main.rand.Next(3) == 0)
 								{
 									int num54 = Main.rand.Next(570, 573);
@@ -16880,12 +_,15 @@
 									{
 										position2.X -= 8f;
 									}
+
 									if (num54 == 571)
 									{
 										position2.X -= 4f;
 									}
+
 									Gore.NewGore(position2, velocity, num54, 0.8f);
 								}
+
 								if (type == 244 && num9 == 18 && num10 == 18 && Main.rand.Next(2) == 0)
 								{
 									if (Main.rand.Next(500) == 0)
@@ -16909,6 +_,7 @@
 										Gore.NewGore(new Vector2((float)(j * 16 + 8), (float)(i * 16 + 8)), default(Vector2), 411, (float)Main.rand.Next(51, 101) * 0.01f);
 									}
 								}
+
 								if (type == 165 && num9 >= 162 && num9 <= 214 && num10 == 72 && Main.rand.Next(60) == 0)
 								{
 									int num55 = Dust.NewDust(new Vector2((float)(j * 16 + 2), (float)(i * 16 + 6)), 8, 4, 153, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
@@ -16918,6 +_,7 @@
 									expr_2900_cp_0.velocity.X = expr_2900_cp_0.velocity.X * 0.05f;
 									Main.dust[num55].alpha = 100;
 								}
+
 								if (type == 42 && num9 == 0)
 								{
 									int num56 = (int)(num10 / 36);
@@ -16929,6 +_,7 @@
 											int num58 = Dust.NewDust(new Vector2((float)(j * 16 + 4), (float)(i * 16 + 4)), 8, 8, 58, 0f, 0f, 150, default(Microsoft.Xna.Framework.Color), 1f);
 											Main.dust[num58].velocity *= 0.5f;
 										}
+
 										if (Main.rand.Next(100) == 0)
 										{
 											int num59 = Gore.NewGore(new Vector2((float)(j * 16 - 2), (float)(i * 16 - 4)), default(Vector2), Main.rand.Next(16, 18), 1f);
@@ -16943,11 +_,13 @@
 										{
 											Main.dust[num60].noGravity = true;
 										}
+
 										Main.dust[num60].velocity *= 0.3f;
 										Dust expr_2AEA_cp_0 = Main.dust[num60];
 										expr_2AEA_cp_0.velocity.Y = expr_2AEA_cp_0.velocity.Y - 1.5f;
 									}
 								}
+
 								if (type == 215 && num10 < 36 && Main.rand.Next(3) == 0 && ((Main.drawToScreen && Main.rand.Next(4) == 0) || !Main.drawToScreen) && num10 == 0)
 								{
 									int num61 = Dust.NewDust(new Vector2((float)(j * 16 + 2), (float)(i * 16 - 4)), 4, 8, 31, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
@@ -16956,17 +_,20 @@
 										Dust expr_2B95_cp_0 = Main.dust[num61];
 										expr_2B95_cp_0.position.X = expr_2B95_cp_0.position.X + (float)Main.rand.Next(8);
 									}
+
 									if (num9 == 36)
 									{
 										Dust expr_2BC0_cp_0 = Main.dust[num61];
 										expr_2BC0_cp_0.position.X = expr_2BC0_cp_0.position.X - (float)Main.rand.Next(8);
 									}
+
 									Main.dust[num61].alpha += Main.rand.Next(100);
 									Main.dust[num61].velocity *= 0.2f;
 									Dust expr_2C22_cp_0 = Main.dust[num61];
 									expr_2C22_cp_0.velocity.Y = expr_2C22_cp_0.velocity.Y - (0.5f + (float)Main.rand.Next(10) * 0.1f);
 									Main.dust[num61].fadeIn = 0.5f + (float)Main.rand.Next(10) * 0.1f;
 								}
+
 								if (type == 4 && Main.rand.Next(40) == 0 && num9 < 66)
 								{
 									int num62 = (int)(num10 / 22);
@@ -17006,6 +_,7 @@
 									{
 										num62 = 58 + num62;
 									}
+
 									int num63;
 									if (num9 == 22)
 									{
@@ -17019,10 +_,12 @@
 									{
 										num63 = Dust.NewDust(new Vector2((float)(j * 16 + 4), (float)(i * 16)), 4, 4, num62, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
 									}
+
 									if (Main.rand.Next(3) != 0)
 									{
 										Main.dust[num63].noGravity = true;
 									}
+
 									Main.dust[num63].velocity *= 0.3f;
 									Dust expr_2E1A_cp_0 = Main.dust[num63];
 									expr_2E1A_cp_0.velocity.Y = expr_2E1A_cp_0.velocity.Y - 1.5f;
@@ -17032,6 +_,7 @@
 										Main.dust[num63].noGravity = true;
 									}
 								}
+
 								if (type == 93 && Main.rand.Next(40) == 0 && num9 == 0)
 								{
 									int num64 = (int)(num10 / 54);
@@ -17042,6 +_,7 @@
 										{
 											goto IL_2EEE;
 										}
+
 										int num66;
 										switch (num65)
 										{
@@ -17055,8 +_,9 @@
 												goto IL_2EEE;
 											case 20:
 												num66 = 59;
-												goto IL_2EFC;
+											goto IL_2EFC;
 										}
+
 										num66 = -1;
 										IL_2EFC:
 										if (num66 != -1)
@@ -17066,17 +_,20 @@
 											{
 												Main.dust[num67].noGravity = true;
 											}
+
 											Main.dust[num67].velocity *= 0.3f;
 											Dust expr_2F88_cp_0 = Main.dust[num67];
 											expr_2F88_cp_0.velocity.Y = expr_2F88_cp_0.velocity.Y - 1.5f;
 											goto IL_2F99;
 										}
+
 										goto IL_2F99;
 										IL_2EEE:
 										num66 = 6;
 										goto IL_2EFC;
 									}
 								}
+
 								IL_2F99:
 								if (type == 100 && Main.rand.Next(40) == 0 && num9 < 36)
 								{
@@ -17097,7 +_,7 @@
 											case 15:
 											case 16:
 												num69 = 6;
-												break;
+											break;
 											case 1:
 											case 3:
 											case 4:
@@ -17111,10 +_,11 @@
 												goto IL_3043;
 											case 20:
 												num69 = 59;
-												break;
+											break;
 											default:
 												goto IL_3043;
 										}
+
 										IL_3046:
 										if (num69 != -1)
 										{
@@ -17138,22 +_,26 @@
 											{
 												position3 = new Vector2((float)(j * 16), (float)(i * 16 + 2));
 											}
+
 											int num70 = Dust.NewDust(position3, 4, 4, num69, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
 											if (Main.rand.Next(3) != 0)
 											{
 												Main.dust[num70].noGravity = true;
 											}
+
 											Main.dust[num70].velocity *= 0.3f;
 											Dust expr_3141_cp_0 = Main.dust[num70];
 											expr_3141_cp_0.velocity.Y = expr_3141_cp_0.velocity.Y - 1.5f;
 											goto IL_3152;
 										}
+
 										goto IL_3152;
 										IL_3043:
 										num69 = -1;
 										goto IL_3046;
 									}
 								}
+
 								IL_3152:
 								if (type == 98 && Main.rand.Next(40) == 0 && num10 == 0 && num9 == 0)
 								{
@@ -17162,10 +_,12 @@
 									{
 										Main.dust[num71].noGravity = true;
 									}
+
 									Main.dust[num71].velocity *= 0.3f;
 									Dust expr_31FE_cp_0 = Main.dust[num71];
 									expr_31FE_cp_0.velocity.Y = expr_31FE_cp_0.velocity.Y - 1.5f;
 								}
+
 								if (type == 49 && Main.rand.Next(2) == 0)
 								{
 									int num72 = Dust.NewDust(new Vector2((float)(j * 16 + 4), (float)(i * 16 - 4)), 4, 4, 172, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
@@ -17178,10 +_,12 @@
 										Main.dust[num72].scale = 0.9f;
 										Main.dust[num72].noGravity = true;
 									}
+
 									Main.dust[num72].velocity *= 0.3f;
 									Dust expr_32D5_cp_0 = Main.dust[num72];
 									expr_32D5_cp_0.velocity.Y = expr_32D5_cp_0.velocity.Y - 1.5f;
 								}
+
 								if (type == 372 && Main.rand.Next(2) == 0)
 								{
 									int num73 = Dust.NewDust(new Vector2((float)(j * 16 + 4), (float)(i * 16 - 4)), 4, 4, 242, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
@@ -17194,10 +_,12 @@
 										Main.dust[num73].scale = 0.9f;
 										Main.dust[num73].noGravity = true;
 									}
+
 									Main.dust[num73].velocity *= 0.3f;
 									Dust expr_33AF_cp_0 = Main.dust[num73];
 									expr_33AF_cp_0.velocity.Y = expr_33AF_cp_0.velocity.Y - 1.5f;
 								}
+
 								if (type == 34 && Main.rand.Next(40) == 0 && num9 < 54)
 								{
 									int num74 = (int)(num10 / 54);
@@ -17230,22 +_,25 @@
 												goto IL_348C;
 											default:
 												switch (num65)
-												{
-													case 19:
+											{
+												case 19:
 													case 21:
 														goto IL_3481;
-													case 20:
+												case 20:
 														goto IL_348C;
-													default:
+												default:
 														if (num65 != 25)
-														{
-															goto IL_348C;
-														}
-														num77 = 59;
-														break;
+												{
+													goto IL_348C;
 												}
+
+												num77 = 59;
 												break;
+											}
+
+											break;
 										}
+
 										IL_348F:
 										if (num77 != -1)
 										{
@@ -17254,11 +_,13 @@
 											{
 												Main.dust[num78].noGravity = true;
 											}
+
 											Main.dust[num78].velocity *= 0.3f;
 											Dust expr_351A_cp_0 = Main.dust[num78];
 											expr_351A_cp_0.velocity.Y = expr_351A_cp_0.velocity.Y - 1.5f;
 											goto IL_352B;
 										}
+
 										goto IL_352B;
 										IL_348C:
 										num77 = -1;
@@ -17268,6 +_,7 @@
 										goto IL_348F;
 									}
 								}
+
 								IL_352B:
 								if (type == 22 && Main.rand.Next(400) == 0)
 								{
@@ -17347,6 +_,7 @@
 									{
 										velocity2.X = -Main.windSpeed;
 									}
+
 									int num83 = Main.tileFrame[(int)type];
 									int type2 = 907 + num83 / 5;
 									if (Main.rand.Next(2) == 0)
@@ -17362,6 +_,7 @@
 									{
 										velocity3.X = -Main.windSpeed;
 									}
+
 									int type3 = Main.rand.Next(825, 828);
 									if (Main.rand.Next(4) == 0)
 									{
@@ -17391,6 +_,7 @@
 									{
 										Main.dust[num85].noGravity = true;
 									}
+
 									Main.dust[num85].noLight = true;
 								}
 								else if (type == 61)
@@ -17402,6 +_,7 @@
 											int num86 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 44, 0f, 0f, 250, default(Microsoft.Xna.Framework.Color), 0.4f);
 											Main.dust[num86].fadeIn = 0.7f;
 										}
+
 										color.A = (byte)(245f - (float)Main.mouseTextColor * 1.5f);
 										color.R = (byte)(245f - (float)Main.mouseTextColor * 1.5f);
 										color.B = (byte)(245f - (float)Main.mouseTextColor * 1.5f);
@@ -17418,10 +_,12 @@
 										{
 											num87 = (int)color.G;
 										}
+
 										if ((int)color.B > num87)
 										{
 											num87 = (int)color.B;
 										}
+
 										num87 /= 30;
 										if (Main.rand.Next(Main.tileShine[(int)type]) < num87 && (type != 21 || (num9 >= 36 && num9 < 180) || (num9 >= 396 && num9 <= 409)))
 										{
@@ -17457,6 +_,7 @@
 												{
 													white = new Microsoft.Xna.Framework.Color(255, 255, 0, 255);
 												}
+
 												int num89 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 43, 0f, 0f, 254, white, 0.5f);
 												Main.dust[num89].velocity *= 0f;
 											}
@@ -17466,38 +_,47 @@
 												{
 													white = new Microsoft.Xna.Framework.Color(0, 0, 255, 255);
 												}
+
 												if (type == 64)
 												{
 													white = new Microsoft.Xna.Framework.Color(255, 0, 0, 255);
 												}
+
 												if (type == 65)
 												{
 													white = new Microsoft.Xna.Framework.Color(0, 255, 0, 255);
 												}
+
 												if (type == 66)
 												{
 													white = new Microsoft.Xna.Framework.Color(255, 255, 0, 255);
 												}
+
 												if (type == 67)
 												{
 													white = new Microsoft.Xna.Framework.Color(255, 0, 255, 255);
 												}
+
 												if (type == 68)
 												{
 													white = new Microsoft.Xna.Framework.Color(255, 255, 255, 255);
 												}
+
 												if (type == 12)
 												{
 													white = new Microsoft.Xna.Framework.Color(255, 0, 0, 255);
 												}
+
 												if (type == 204)
 												{
 													white = new Microsoft.Xna.Framework.Color(255, 0, 0, 255);
 												}
+
 												if (type == 211)
 												{
 													white = new Microsoft.Xna.Framework.Color(50, 255, 100, 255);
 												}
+												// TODO, ModTile hook for Shine color.
 												int num90 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 43, 0f, 0f, 254, white, 0.5f);
 												Main.dust[num90].velocity *= 0f;
 											}
@@ -17505,21 +_,25 @@
 									}
 								}
 							}
-							if (type == 21)
+
+							if (TileLoader.IsChest(type))
 							{
 								Microsoft.Xna.Framework.Point key = new Microsoft.Xna.Framework.Point(j, i);
 								if (num9 % 36 != 0)
 								{
 									key.X--;
 								}
+
 								if (num10 % 36 != 0)
 								{
 									key.Y--;
 								}
+
 								if (!dictionary.ContainsKey(key))
 								{
 									dictionary[key] = Chest.FindChest(key.X, key.Y);
 								}
+
 								int num91 = (int)(num9 / 18);
 								int num92 = (int)(num10 / 18);
 								int num93 = (int)(num9 / 36);
@@ -17533,21 +_,25 @@
 									{
 										num95 += 38;
 									}
+
 									if (frame == 2)
 									{
 										num95 += 76;
 									}
 								}
+
 								num15 = num95 - (int)num10;
 								if (num92 != 0)
 								{
 									num12 = 18;
 								}
+
 								if (num93 == 48 || num93 == 49)
 								{
 									empty = new Microsoft.Xna.Framework.Rectangle(16 * (num91 % 2), (int)num10 + num15, num8, num12);
 								}
 							}
+
 							if (type == 378)
 							{
 								Microsoft.Xna.Framework.Point key2 = new Microsoft.Xna.Framework.Point(j, i);
@@ -17555,14 +_,17 @@
 								{
 									key2.X--;
 								}
+
 								if (num10 % 54 != 0)
 								{
 									key2.Y -= (int)(num10 / 18);
 								}
+
 								if (!dictionary2.ContainsKey(key2))
 								{
 									dictionary2[key2] = TETrainingDummy.Find(key2.X, key2.Y);
 								}
+
 								if (dictionary2[key2] != -1)
 								{
 									int num96 = ((TETrainingDummy)TileEntity.ByID[dictionary2[key2]]).npc;
@@ -17575,6 +_,7 @@
 									}
 								}
 							}
+
 							if (type == 395)
 							{
 								Microsoft.Xna.Framework.Point key3 = new Microsoft.Xna.Framework.Point(j, i);
@@ -17582,10 +_,12 @@
 								{
 									key3.X--;
 								}
+
 								if (num10 % 36 != 0)
 								{
 									key3.Y--;
 								}
+
 								if (!dictionary3.ContainsKey(key3))
 								{
 									dictionary3[key3] = TEItemFrame.Find(key3.X, key3.Y);
@@ -17597,6 +_,7 @@
 									}
 								}
 							}
+
 							if (type == 269 || type == 128)
 							{
 								int num98 = (int)(num10 / 18);
@@ -17614,6 +_,7 @@
 												num100++;
 												num99 -= 100;
 											}
+
 											int num65 = num100;
 											if (num65 <= 36)
 											{
@@ -17631,22 +_,25 @@
 														break;
 													default:
 														switch (num65)
-														{
-															case 58:
+													{
+														case 58:
 															case 59:
 															case 60:
 															case 61:
 															case 62:
 															case 63:
 																break;
-															default:
+														default:
 																goto IL_4404;
-														}
-														break;
+													}
+
+													break;
 												}
 											}
+
 											flag6 = true;
 										}
+
 										IL_4404:
 										if (!flag6)
 										{
@@ -17655,12 +_,14 @@
 											num3++;
 										}
 									}
+
 									if (Main.tile[j, i - 1].frameX >= 100)
 									{
 										Main.specX[num3] = j;
 										Main.specY[num3] = i - 1;
 										num3++;
 									}
+
 									if (Main.tile[j, i - 2].frameX >= 100)
 									{
 										Main.specX[num3] = j;
@@ -17669,30 +_,35 @@
 									}
 								}
 							}
+
 							if (type == 5 && num10 >= 198 && num9 >= 22)
 							{
 								Main.specX[num3] = j;
 								Main.specY[num3] = i;
 								num3++;
 							}
+
 							if (type == 323 && num9 <= 132 && num9 >= 88)
 							{
 								Main.specX[num3] = j;
 								Main.specY[num3] = i;
 								num3++;
 							}
+
 							if (type == 412 && num9 == 0 && num10 == 0)
 							{
 								Main.specX[num3] = j;
 								Main.specY[num3] = i;
 								num3++;
 							}
+
 							if (type == 237 && num9 == 18 && num10 == 0)
 							{
 								Main.specX[num3] = j;
 								Main.specY[num3] = i;
 								num3++;
 							}
+
 							if (type == 334)
 							{
 								int num101 = (int)(num10 / 18);
@@ -17705,6 +_,7 @@
 										num103++;
 										num102 -= 5000;
 									}
+
 									if (num103 == 1 || num103 == 4)
 									{
 										Main.specX[num3] = j;
@@ -17713,30 +_,35 @@
 									}
 								}
 							}
+
 							if (type == 5 && num10 >= 198 && num9 >= 22)
 							{
 								Main.specX[num3] = j;
 								Main.specY[num3] = i;
 								num3++;
 							}
+
 							if (type == 323 && num9 <= 132 && num9 >= 88)
 							{
 								Main.specX[num3] = j;
 								Main.specY[num3] = i;
 								num3++;
 							}
+
 							if (type == 412 && num9 == 0 && num10 == 0)
 							{
 								Main.specX[num3] = j;
 								Main.specY[num3] = i;
 								num3++;
 							}
+
 							if (type == 237 && num9 == 18 && num10 == 0)
 							{
 								Main.specX[num3] = j;
 								Main.specY[num3] = i;
 								num3++;
 							}
+
 							if (type == 72 && num9 >= 36)
 							{
 								int num104 = 0;
@@ -17748,8 +_,11 @@
 								{
 									num104 = 2;
 								}
+
 								Main.spriteBatch.Draw(Main.shroomCapTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X - 22), (float)(i * 16 - (int)Main.screenPosition.Y - 26)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num104 * 62, 0, 60, 42)), Lighting.GetColor(j, i), 0f, default(Vector2), 1f, effects, 0f);
 							}
+
+							TileLoader.DrawEffects(j, i, type, Main.spriteBatch, ref color, ref num3);
 							if (color.R >= 1 || color.G >= 1 || color.B >= 1)
 							{
 								Tile tile2 = Main.tile[j + 1, i];
@@ -17761,21 +_,25 @@
 									tile2 = new Tile();
 									Main.tile[j + 1, i] = tile2;
 								}
+
 								if (tile3 == null)
 								{
 									tile3 = new Tile();
 									Main.tile[j - 1, i] = tile3;
 								}
+
 								if (tile4 == null)
 								{
 									tile4 = new Tile();
 									Main.tile[j, i - 1] = tile4;
 								}
+
 								if (tile5 == null)
 								{
 									tile5 = new Tile();
 									Main.tile[j, i + 1] = tile5;
 								}
+
 								if (solidOnly && flag && !tile.inActive() && !Main.tileSolidTop[(int)type])
 								{
 									bool flag7 = false;
@@ -17787,6 +_,7 @@
 											flag7 = true;
 										}
 									}
+
 									if (!flag7)
 									{
 										int num106 = 0;
@@ -17804,19 +_,21 @@
 											{
 												case 0:
 													flag12 = true;
-													break;
+												break;
 												case 1:
 													num107 = 1;
-													break;
+												break;
 												case 2:
 													num107 = 11;
-													break;
+												break;
 											}
+
 											if ((int)tile3.liquid > num106)
 											{
 												num106 = (int)tile3.liquid;
 											}
 										}
+
 										if (tile2.liquid > 0 && num108 != 2 && num108 != 4)
 										{
 											flag9 = true;
@@ -17824,19 +_,21 @@
 											{
 												case 0:
 													flag12 = true;
-													break;
+												break;
 												case 1:
 													num107 = 1;
-													break;
+												break;
 												case 2:
 													num107 = 11;
-													break;
+												break;
 											}
+
 											if ((int)tile2.liquid > num106)
 											{
 												num106 = (int)tile2.liquid;
 											}
 										}
+
 										if (tile4.liquid > 0 && num108 != 3 && num108 != 4)
 										{
 											flag10 = true;
@@ -17844,42 +_,47 @@
 											{
 												case 0:
 													flag12 = true;
-													break;
+												break;
 												case 1:
 													num107 = 1;
-													break;
+												break;
 												case 2:
 													num107 = 11;
-													break;
+												break;
 											}
 										}
+
 										if (tile5.liquid > 0 && num108 != 1 && num108 != 2)
 										{
 											if (tile5.liquid > 240)
 											{
 												flag11 = true;
 											}
+
 											switch (tile5.liquidType())
 											{
 												case 0:
 													flag12 = true;
-													break;
+												break;
 												case 1:
 													num107 = 1;
-													break;
+												break;
 												case 2:
 													num107 = 11;
-													break;
+												break;
 											}
 										}
+
 										if (waterStyleOverride != -1)
 										{
 											Main.waterStyle = waterStyleOverride;
 										}
+
 										if (num107 == 0)
 										{
 											num107 = Main.waterStyle;
 										}
+
 										if ((flag10 || flag11 || flag8 || flag9) && (!flag12 || num107 != 1))
 										{
 											Microsoft.Xna.Framework.Color color6 = Lighting.GetColor(j, i);
@@ -17890,6 +_,7 @@
 												flag8 = true;
 												flag9 = true;
 											}
+
 											if ((!flag10 || (!flag8 && !flag9)) && (!flag11 || !flag10))
 											{
 												if (flag10)
@@ -17914,6 +_,7 @@
 													{
 														y = 0;
 													}
+
 													if ((flag8 && flag9) || tile.halfBrick() || tile.slope() != 0)
 													{
 														value2 = new Vector2((float)(j * 16), (float)(i * 16 + (int)num109 * 2));
@@ -17931,6 +_,7 @@
 													}
 												}
 											}
+
 											float num110 = 0.5f;
 											if (num107 == 1)
 											{
@@ -17944,6 +_,7 @@
 													num110 = 1f;
 												}
 											}
+
 											if ((double)i < Main.worldSurface || num110 > 1f)
 											{
 												num110 = 1f;
@@ -17951,15 +_,18 @@
 												{
 													num110 = 0.65f;
 												}
+
 												if (tile.wall > 0)
 												{
 													num110 = 0.5f;
 												}
 											}
+
 											if (tile.halfBrick() && tile4.liquid > 0 && tile.wall > 0)
 											{
 												num110 = 0f;
 											}
+
 											float num111 = (float)color6.R * num110;
 											float num112 = (float)color6.G * num110;
 											float num113 = (float)color6.B * num110;
@@ -17969,6 +_,7 @@
 										}
 									}
 								}
+
 								if (type == 314)
 								{
 									if (tile.inActive())
@@ -17979,6 +_,7 @@
 									{
 										color = Main.shine(color, (int)type);
 									}
+
 									int num115;
 									int num116;
 									Minecart.TrackColors(j, i, tile, out num115, out num116);
@@ -17991,6 +_,7 @@
 									{
 										texture = Main.tileTexture[(int)type];
 									}
+
 									Texture2D texture2;
 									if (Main.canDrawColorTile(type, num116))
 									{
@@ -18000,28 +_,34 @@
 									{
 										texture2 = Main.tileTexture[(int)type];
 									}
+
 									tile.frameNumber();
 									if (num10 != -1)
 									{
 										Main.spriteBatch.Draw(texture2, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(Minecart.GetSourceRect((int)num10, Main.tileFrame[314])), color, 0f, default(Vector2), 1f, effects, 0f);
 									}
+
 									Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(Minecart.GetSourceRect((int)num9, Main.tileFrame[314])), color, 0f, default(Vector2), 1f, effects, 0f);
 									if (Minecart.DrawLeftDecoration((int)num10))
 									{
 										Main.spriteBatch.Draw(texture2, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)((i + 1) * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(Minecart.GetSourceRect(36, 0)), color, 0f, default(Vector2), 1f, effects, 0f);
 									}
+
 									if (Minecart.DrawLeftDecoration((int)num9))
 									{
 										Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)((i + 1) * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(Minecart.GetSourceRect(36, 0)), color, 0f, default(Vector2), 1f, effects, 0f);
 									}
+
 									if (Minecart.DrawRightDecoration((int)num10))
 									{
 										Main.spriteBatch.Draw(texture2, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)((i + 1) * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(Minecart.GetSourceRect(37, Main.tileFrame[314])), color, 0f, default(Vector2), 1f, effects, 0f);
 									}
+
 									if (Minecart.DrawRightDecoration((int)num9))
 									{
 										Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)((i + 1) * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(Minecart.GetSourceRect(37, 0)), color, 0f, default(Vector2), 1f, effects, 0f);
 									}
+
 									if (Minecart.DrawBumper((int)num9))
 									{
 										Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)((i - 1) * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(Minecart.GetSourceRect(39, 0)), color, 0f, default(Vector2), 1f, effects, 0f);
@@ -18057,6 +_,7 @@
 										num9 = Main.tile[j, i - (int)num10].frameX;
 										num10 = Main.tile[j, i - (int)num10].frameY;
 									}
+
 									if (num9 >= 10)
 									{
 										int num122 = 0;
@@ -18064,61 +_,75 @@
 										{
 											num122++;
 										}
+
 										if ((num10 & 2) == 2)
 										{
 											num122 += 2;
 										}
+
 										if ((num10 & 4) == 4)
 										{
 											num122 += 4;
 										}
+
 										int num123 = 0;
 										if ((num10 & 8) == 8)
 										{
 											num123++;
 										}
+
 										if ((num10 & 16) == 16)
 										{
 											num123 += 2;
 										}
+
 										if ((num10 & 32) == 32)
 										{
 											num123 += 4;
 										}
+
 										int num124 = 0;
 										if ((num10 & 64) == 64)
 										{
 											num124++;
 										}
+
 										if ((num10 & 128) == 128)
 										{
 											num124 += 2;
 										}
+
 										if ((num10 & 256) == 256)
 										{
 											num124 += 4;
 										}
+
 										if ((num10 & 512) == 512)
 										{
 											num124 += 8;
 										}
+
 										int num125 = 0;
 										if ((num10 & 1024) == 1024)
 										{
 											num125++;
 										}
+
 										if ((num10 & 2048) == 2048)
 										{
 											num125 += 2;
 										}
+
 										if ((num10 & 4096) == 4096)
 										{
 											num125 += 4;
 										}
+
 										if ((num10 & 8192) == 8192)
 										{
 											num125 += 8;
 										}
+
 										Microsoft.Xna.Framework.Color color8 = Lighting.GetColor(j + 1, i + 4);
 										Main.spriteBatch.Draw(Main.xmasTree[0], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 64, 128)), color8, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 										if (num122 > 0)
@@ -18129,18 +_,22 @@
 											{
 												color9 = new Microsoft.Xna.Framework.Color(255, 255, 255, 255);
 											}
+
 											Main.spriteBatch.Draw(Main.xmasTree[3], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(66 * num122, 0, 64, 128)), color9, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 										}
+
 										if (num123 > 0)
 										{
 											num123--;
 											Main.spriteBatch.Draw(Main.xmasTree[1], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(66 * num123, 0, 64, 128)), color8, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 										}
+
 										if (num124 > 0)
 										{
 											num124--;
 											Main.spriteBatch.Draw(Main.xmasTree[2], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(66 * num124, 0, 64, 128)), color8, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 										}
+
 										if (num125 > 0)
 										{
 											num125--;
@@ -18156,6 +_,7 @@
 									{
 										color10 = tile.actColor(color10);
 									}
+
 									if (tile.slope() == 0)
 									{
 										Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), color10, 0f, default(Vector2), 1f, effects, 0f);
@@ -18198,6 +_,7 @@
 												}
 											}
 										}
+
 										if (Main.canDrawColorTile(j, i))
 										{
 											Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, 16, 2)), color10, 0f, default(Vector2), 1f, effects, 0f);
@@ -18219,6 +_,7 @@
 												Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num138, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num136 * num137)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num138, (int)num10, num137, height2)), color10, 0f, default(Vector2), 1f, effects, 0f);
 											}
 										}
+
 										if (tile.slope() == 2)
 										{
 											for (int num139 = 0; num139 < 8; num139++)
@@ -18229,6 +_,7 @@
 												Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num141, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num139 * num140)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num141, (int)num10, num140, height3)), color10, 0f, default(Vector2), 1f, effects, 0f);
 											}
 										}
+
 										if (Main.canDrawColorTile(j, i))
 										{
 											Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + 14)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 + 14), 16, 2)), color10, 0f, default(Vector2), 1f, effects, 0f);
@@ -18249,6 +_,7 @@
 									{
 										color = Main.shine(color, (int)type);
 									}
+
 									if (TileID.Sets.Platforms[(int)tile.type])
 									{
 										if (Main.canDrawColorTile(j, i))
@@ -18259,6 +_,7 @@
 										{
 											Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
 										}
+
 										if (tile.slope() == 1 && Main.tile[j + 1, i + 1].active() && Main.tile[j + 1, i + 1].slope() != 2 && !Main.tile[j + 1, i + 1].halfBrick() && !TileID.Sets.BlocksStairs[(int)Main.tile[j + 1, i + 1].type] && !TileID.Sets.BlocksStairsAbove[(int)Main.tile[j, i + 1].type])
 										{
 											if (TileID.Sets.Platforms[(int)Main.tile[j + 1, i + 1].type] && Main.tile[j + 1, i + 1].slope() == 0)
@@ -18353,6 +_,7 @@
 												}
 											}
 										}
+
 										if (Main.canDrawColorTile(j, i))
 										{
 											Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)num10 + num15, 16, 2)), color, 0f, default(Vector2), 1f, effects, 0f);
@@ -18381,6 +_,7 @@
 												}
 											}
 										}
+
 										if (tile.slope() == 2)
 										{
 											for (int num155 = 0; num155 < 8; num155++)
@@ -18398,6 +_,7 @@
 												}
 											}
 										}
+
 										if (Main.canDrawColorTile(j, i))
 										{
 											Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + 14)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)(num10 + 14) + num15, 16, 2)), color, 0f, default(Vector2), 1f, effects, 0f);
@@ -18419,6 +_,7 @@
 									{
 										value4.X += (float)(2 * (num10 == 36).ToDirectionInt());
 									}
+
 									Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero + value4, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(255, 255, 255, 100), 0f, default(Vector2), 1f, effects, 0f);
 								}
 								else if (Main.tileAlch[(int)type])
@@ -18433,23 +_,28 @@
 										{
 											num158 = 84;
 										}
+
 										if (num159 == 1 && !Main.dayTime)
 										{
 											num158 = 84;
 										}
+
 										if (num159 == 3 && !Main.dayTime && (Main.bloodMoon || Main.moonPhase == 0))
 										{
 											num158 = 84;
 										}
+
 										if (num159 == 4 && (Main.raining || Main.cloudAlpha > 0f))
 										{
 											num158 = 84;
 										}
+
 										if (num159 == 5 && !Main.raining && Main.time > 40500.0)
 										{
 											num158 = 84;
 										}
 									}
+
 									if (num158 == 84)
 									{
 										if (num159 == 0 && Main.rand.Next(100) == 0)
@@ -18462,10 +_,12 @@
 											Main.dust[num160].noGravity = true;
 											Main.dust[num160].fadeIn = 1f;
 										}
+
 										if (num159 == 1 && Main.rand.Next(100) == 0)
 										{
 											Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 41, 0f, 0f, 250, default(Microsoft.Xna.Framework.Color), 0.8f);
 										}
+
 										if (num159 == 3)
 										{
 											if (Main.rand.Next(200) == 0)
@@ -18473,6 +_,7 @@
 												int num161 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 14, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 0.2f);
 												Main.dust[num161].fadeIn = 1.2f;
 											}
+
 											if (Main.rand.Next(75) == 0)
 											{
 												int num162 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 27, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
@@ -18482,6 +_,7 @@
 												expr_758F_cp_0.velocity.Y = expr_758F_cp_0.velocity.Y / 2f;
 											}
 										}
+
 										if (num159 == 4 && Main.rand.Next(150) == 0)
 										{
 											int num163 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 8, 16, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
@@ -18496,6 +_,7 @@
 											Main.dust[num163].fadeIn = 0.9f;
 											Main.dust[num163].noGravity = true;
 										}
+
 										if (num159 == 5)
 										{
 											if (Main.rand.Next(40) == 0)
@@ -18505,10 +_,12 @@
 												expr_76F9_cp_0.velocity.Y = expr_76F9_cp_0.velocity.Y - 2f;
 												Main.dust[num164].noGravity = true;
 											}
+
 											color.A = (byte)(Main.mouseTextColor / 2);
 											color.G = Main.mouseTextColor;
 											color.B = Main.mouseTextColor;
 										}
+
 										if (num159 == 6)
 										{
 											if (Main.rand.Next(30) == 0)
@@ -18517,18 +_,21 @@
 												int num165 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 43, 0f, 0f, 254, newColor, 0.5f);
 												Main.dust[num165].velocity *= 0f;
 											}
+
 											byte b4 = (byte)((Main.mouseTextColor + color.G * 2) / 3);
 											byte b5 = (byte)((Main.mouseTextColor + color.B * 2) / 3);
 											if (b4 > color.G)
 											{
 												color.G = b4;
 											}
+
 											if (b5 > color.B)
 											{
 												color.B = b5;
 											}
 										}
 									}
+
 									if (Main.canDrawColorTile(j, i))
 									{
 										Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
@@ -18544,6 +_,7 @@
 									bool flag13 = false;
 									bool flag14 = false;
 									bool flag15 = false;
+									Texture2D modCactusTexture = null;
 									if (!Main.canDrawColorTile(j, i))
 									{
 										int num166 = j;
@@ -18551,10 +_,12 @@
 										{
 											num166--;
 										}
+
 										if (num9 == 54)
 										{
 											num166++;
 										}
+
 										if (num9 == 108)
 										{
 											if (num10 == 18)
@@ -18566,38 +_,52 @@
 												num166++;
 											}
 										}
+
 										int num167 = i;
 										bool flag16 = false;
 										if (Main.tile[num166, num167].type == 80 && Main.tile[num166, num167].active())
 										{
 											flag16 = true;
 										}
+
 										while (!Main.tile[num166, num167].active() || !Main.tileSolid[(int)Main.tile[num166, num167].type] || !flag16)
 										{
 											if (Main.tile[num166, num167].type == 80 && Main.tile[num166, num167].active())
 											{
 												flag16 = true;
 											}
+
 											num167++;
 											if (num167 > i + 20)
 											{
 												break;
 											}
 										}
+
 										if (Main.tile[num166, num167].type == 112)
 										{
 											flag13 = true;
 										}
+
 										if (Main.tile[num166, num167].type == 116)
 										{
 											flag14 = true;
 										}
+
+										//patch file: num166, num167
 										if (Main.tile[num166, num167].type == 234)
 										{
 											flag15 = true;
 										}
+
+										modCactusTexture = TileLoader.GetCactusTexture(Main.tile[num166, num167].type);
 									}
-									if (flag13)
+
+									if (modCactusTexture != null)
+									{
+										Main.spriteBatch.Draw(modCactusTexture, new Vector2(j * 16 - (int)Main.screenPosition.X - ((float)num8 - 16f) / 2f, i * 16 - (int)Main.screenPosition.Y + num11) + zero, new Microsoft.Xna.Framework.Rectangle(num9, num10, num8, num12), color, 0f, default(Vector2), 1f, effects, 0f);
+									}
+									else if (flag13)
 									{
 										Main.spriteBatch.Draw(Main.evilCactusTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
 									}
@@ -18627,6 +_,7 @@
 									for (num168 += i % 3; num168 > 1; num168 -= 2)
 									{
 									}
+
 									num168 *= 90;
 									if (tile.inActive())
 									{
@@ -18636,6 +_,7 @@
 									{
 										color = Main.shine(color, (int)type);
 									}
+
 									if (Main.canDrawColorTile(j, i))
 									{
 										Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10 + num168, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
@@ -18651,6 +_,7 @@
 									{
 										color = new Microsoft.Xna.Framework.Color(Main.DiscoR, Main.DiscoG, Main.DiscoB, 255);
 									}
+
 									if (type != 19 && type != 380 && Main.tileSolid[(int)type] && !TileID.Sets.NotReallySolid[(int)type] && !tile.halfBrick() && (Main.tile[j - 1, i].halfBrick() || Main.tile[j + 1, i].halfBrick()))
 									{
 										if (tile.inActive())
@@ -18661,6 +_,7 @@
 										{
 											color = Main.shine(color, (int)type);
 										}
+
 										if (Main.tile[j - 1, i].halfBrick() && Main.tile[j + 1, i].halfBrick())
 										{
 											if (Main.canDrawColorTile(j, i))
@@ -18736,6 +_,7 @@
 											{
 												texture = Main.tileTexture[(int)type];
 											}
+
 											for (int num169 = 0; num169 < 9; num169++)
 											{
 												int num170 = 0;
@@ -18746,40 +_,41 @@
 												{
 													case 1:
 														width = 8;
-														num170 = 4;
-														break;
+													num170 = 4;
+													break;
 													case 2:
 														num170 = 12;
-														break;
+													break;
 													case 3:
 														height6 = 8;
-														num171 = 4;
-														break;
+													num171 = 4;
+													break;
 													case 4:
 														width = 8;
-														height6 = 8;
-														num170 = 4;
-														num171 = 4;
-														break;
+													height6 = 8;
+													num170 = 4;
+													num171 = 4;
+													break;
 													case 5:
 														num170 = 12;
-														num171 = 4;
-														height6 = 8;
-														break;
+													num171 = 4;
+													height6 = 8;
+													break;
 													case 6:
 														num171 = 12;
-														break;
+													break;
 													case 7:
 														width = 8;
-														height6 = 4;
-														num170 = 4;
-														num171 = 12;
-														break;
+													height6 = 4;
+													num170 = 4;
+													num171 = 12;
+													break;
 													case 8:
 														num170 = 12;
-														num171 = 12;
-														break;
+													num171 = 12;
+													break;
 												}
+
 												Microsoft.Xna.Framework.Color color11 = color;
 												Microsoft.Xna.Framework.Color color12 = array[num169];
 												color11.R = (byte)((color.R + color12.R) / 2);
@@ -18793,6 +_,7 @@
 												{
 													color11 = Main.shine(color11, (int)type);
 												}
+
 												Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num170, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num171)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num170 + num16, (int)num10 + num171 + num15, width, height6)), color11, 0f, default(Vector2), 1f, effects, 0f);
 											}
 										}
@@ -18810,6 +_,7 @@
 											{
 												texture = Main.tileTexture[(int)type];
 											}
+
 											for (int num172 = 0; num172 < 4; num172++)
 											{
 												int num173 = 0;
@@ -18818,15 +_,16 @@
 												{
 													case 1:
 														num173 = 8;
-														break;
+													break;
 													case 2:
 														num174 = 8;
-														break;
+													break;
 													case 3:
 														num173 = 8;
-														num174 = 8;
-														break;
+													num174 = 8;
+													break;
 												}
+
 												Microsoft.Xna.Framework.Color color13 = color;
 												Microsoft.Xna.Framework.Color color14 = array[num172];
 												color13.R = (byte)((color.R + color14.R) / 2);
@@ -18840,6 +_,7 @@
 												{
 													color13 = Main.shine(color13, (int)type);
 												}
+
 												Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num173, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num174)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num173 + num16, (int)num10 + num174 + num15, 8, 8)), color13, 0f, default(Vector2), 1f, effects, 0f);
 											}
 										}
@@ -18853,6 +_,7 @@
 											{
 												color = Main.shine(color, (int)type);
 											}
+
 											Texture2D texture;
 											if (Main.canDrawColorTile(j, i))
 											{
@@ -18862,6 +_,7 @@
 											{
 												texture = Main.tileTexture[(int)type];
 											}
+
 											Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)num10 + num15, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
 										}
 									}
@@ -18881,16 +_,19 @@
 												color = Main.shine(color, (int)type);
 											}
 										}
+
 										if (tile.inActive())
 										{
 											color = tile.actColor(color);
 										}
+
 										if (type == 128 || type == 269)
 										{
 											int num175;
 											for (num175 = (int)num9; num175 >= 100; num175 -= 100)
 											{
 											}
+
 											Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num175, (int)num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
 										}
 										else if (type == 334)
@@ -18902,10 +_,12 @@
 												num176 -= 5000;
 												num177++;
 											}
+
 											if (num177 != 0)
 											{
 												num176 = (num177 - 1) * 18;
 											}
+
 											Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num176, (int)num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
 										}
 										else if (type == 5)
@@ -18916,27 +_,38 @@
 											{
 												num178++;
 											}
+
 											if (num9 == 88 && num10 >= 66 && num10 <= 110)
 											{
 												num178--;
 											}
+
 											if (num9 == 22 && num10 >= 132)
 											{
 												num178--;
 											}
+
 											if (num9 == 44 && num10 >= 132)
 											{
 												num178++;
 											}
+
 											while (Main.tile[num178, num179].active() && Main.tile[num178, num179].type == 5)
 											{
 												num179++;
 											}
+
 											int treeVariant = Main.GetTreeVariant(num178, num179);
-											if (treeVariant == -1)
+											Texture2D modTreeTexture = TileLoader.GetTreeTexture(Main.tile[num178, num179]);
+											if (modTreeTexture != null)
+											{
+												Main.spriteBatch.Draw(modTreeTexture, new Vector2(j * 16 - (int)Main.screenPosition.X - (num8 - 16f) / 2f, i * 16 - (int)Main.screenPosition.Y + num11) + zero, new Microsoft.Xna.Framework.Rectangle(num9, num10, num8, num12), color, 0f, default(Vector2), 1f, effects, 0f);
+											}
+											else if (treeVariant == -1)
 											{
 												if (Main.canDrawColorTile(j, i))
 												{
+													//patch file
 													Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
 												}
 												else
@@ -18962,25 +_,36 @@
 											{
 												num182++;
 											}
+
 											if (Main.tile[num181, num182].active() && Main.tile[num181, num182].type == 53)
 											{
 												num180 = 0;
 											}
+
 											if (Main.tile[num181, num182].active() && Main.tile[num181, num182].type == 234)
 											{
 												num180 = 1;
 											}
+
 											if (Main.tile[num181, num182].active() && Main.tile[num181, num182].type == 116)
 											{
 												num180 = 2;
 											}
+
 											if (Main.tile[num181, num182].active() && Main.tile[num181, num182].type == 112)
 											{
+												//patch file: num181, num182
 												num180 = 3;
 											}
+
 											int y2 = 22 * num180;
 											int num183 = (int)num10;
-											if (Main.canDrawColorTile(j, i))
+											Texture2D modTreeTexture = TileLoader.GetPalmTreeTexture(Main.tile[num181, num182]);
+											if (modTreeTexture != null)
+											{
+												Main.spriteBatch.Draw(modTreeTexture, new Vector2(j * 16 - (int)Main.screenPosition.X - (num8 - 16f) / 2f + num181, i * 16 - (int)Main.screenPosition.Y + num11) + zero, new Microsoft.Xna.Framework.Rectangle(num9, y2, num8, num12), color, 0f, default(Vector2), 1f, effects, 0f);
+											}
+											else if (Main.canDrawColorTile(j, i))
 											{
 												Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num183, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, y2, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
 											}
@@ -19002,6 +_,7 @@
 												{
 													texture = Main.tileTexture[(int)type];
 												}
+
 												if (TileID.Sets.Platforms[(int)type])
 												{
 													Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num14)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)num10 + num15, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
@@ -19023,13 +_,16 @@
 												{
 													texture = Main.tileTexture[(int)type];
 												}
+
 												Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num14)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)num10 + num15, num8, num12 - num14)), color, 0f, default(Vector2), 1f, effects, 0f);
 											}
+
 											if (type == 27)
 											{
 												int num184 = 14;
 												Main.spriteBatch.Draw(Main.FlameTexture[num184], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10 + num15, num8, num12)), new Microsoft.Xna.Framework.Color(255, 255, 255, 255), 0f, default(Vector2), 1f, effects, 0f);
 											}
+
 											if (type == 215 && num10 < 36)
 											{
 												int num185 = 15;
@@ -19038,20 +_,25 @@
 												{
 													color15 = new Microsoft.Xna.Framework.Color((float)Main.DiscoR / 255f, (float)Main.DiscoG / 255f, (float)Main.DiscoB / 255f, 0f);
 												}
+
 												Main.spriteBatch.Draw(Main.FlameTexture[num185], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10 + num15, num8, num12)), color15, 0f, default(Vector2), 1f, effects, 0f);
 											}
+
 											if (type == 286)
 											{
 												Main.spriteBatch.Draw(Main.glowSnailTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)num10 + num15, num8, num12)), new Microsoft.Xna.Framework.Color(75, 100, 255, 0), 0f, default(Vector2), 1f, effects, 0f);
 											}
+
 											if (type == 270)
 											{
 												Main.spriteBatch.Draw(Main.fireflyJarTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
 											}
+
 											if (type == 271)
 											{
 												Main.spriteBatch.Draw(Main.lightningbugJarTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
 											}
+
 											if (type == 316 || type == 317 || type == 318)
 											{
 												int num186 = j - (int)(num9 / 18);
@@ -19060,10 +_,12 @@
 												num188 %= Main.cageFrames;
 												Main.spriteBatch.Draw(Main.jellyfishBowlTexture[(int)(type - 316)], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)num10 + Main.jellyfishCageFrame[(int)(type - 316), num188] * 36, num8, num12)), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
 											}
+
 											if (type == 149 && num9 < 54)
 											{
 												Main.spriteBatch.Draw(Main.xmasLightTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
 											}
+
 											if (type == 300 || type == 302 || type == 303 || type == 306)
 											{
 												int num189 = 9;
@@ -19071,14 +_,17 @@
 												{
 													num189 = 10;
 												}
+
 												if (type == 303)
 												{
 													num189 = 11;
 												}
+
 												if (type == 306)
 												{
 													num189 = 12;
 												}
+
 												Main.spriteBatch.Draw(Main.FlameTexture[num189], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10 + num15, num8, num12)), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
 											}
 											else if (Main.tileFlame[(int)type])
@@ -19126,6 +_,7 @@
 												{
 													num192 = 13;
 												}
+
 												if (num192 == 7)
 												{
 													for (int num193 = 0; num193 < 4; num193++)
@@ -19453,16 +_,19 @@
 														{
 															color16 = new Microsoft.Xna.Framework.Color((float)Main.DiscoR / 255f, (float)Main.DiscoG / 255f, (float)Main.DiscoB / 255f, 0f);
 														}
+
 														float num291 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.15f;
 														float num292 = (float)Utils.RandomInt(ref num190, -10, 1) * 0.35f;
 														Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num291, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num292) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), color16, 0f, default(Vector2), 1f, effects, 0f);
 													}
 												}
 											}
+
 											if (type == 144)
 											{
 												Main.spriteBatch.Draw(Main.timerTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
 											}
+
 											if (type == 237)
 											{
 												Main.spriteBatch.Draw(Main.sunAltarTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color((int)(Main.mouseTextColor / 2), (int)(Main.mouseTextColor / 2), (int)(Main.mouseTextColor / 2), 0), 0f, default(Vector2), 1f, effects, 0f);
@@ -19471,6 +_,7 @@
 									}
 								}
 							}
+
 							if (Main.tileGlowMask[(int)tile.type] != 0)
 							{
 								Texture2D texture = Main.glowMaskTexture[(int)Main.tileGlowMask[(int)tile.type]];
@@ -19480,26 +_,32 @@
 								{
 									color17 = new Microsoft.Xna.Framework.Color(new Vector4((float)(-(float)Math.Cos(((int)(num293 / 6.283) % 3 == 1) ? num293 : 0.0) * 0.2 + 0.2)));
 								}
+
 								if (tile.type == 381)
 								{
 									color17 = color5;
 								}
+
 								if (tile.type == 370)
 								{
 									color17 = color4;
 								}
+
 								if (tile.type == 390)
 								{
 									color17 = color4;
 								}
+
 								if (tile.type == 391)
 								{
 									color17 = new Microsoft.Xna.Framework.Color(250, 250, 250, 200);
 								}
+
 								if (tile.type == 209)
 								{
 									color17 = PortalHelper.GetPortalColor(Main.myPlayer, (tile.frameX >= 288) ? 1 : 0);
 								}
+
 								if (tile.type == 429 || tile.type == 445)
 								{
 									if (Main.canDrawColorTile(j, i))
@@ -19510,8 +_,10 @@
 									{
 										texture = Main.tileTexture[(int)type];
 									}
+
 									num15 = 18;
 								}
+
 								if (tile.slope() == 0 && !tile.halfBrick())
 								{
 									Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)num10 + num15, num8, num12)), color17, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
@@ -19532,27 +_,30 @@
 										{
 											case 2:
 												value5.X = 16 - num295;
-												num296 = 16 - num295;
-												break;
+											num296 = 16 - num295;
+											break;
 											case 3:
 												value5.Width = 16 - num295;
-												break;
+											break;
 											case 4:
 												value5.Width = 14 - num295;
-												value5.X = num295 + 2;
-												num296 = num295 + 2;
-												break;
+											value5.X = num295 + 2;
+											num296 = num295 + 2;
+											break;
 										}
+
 										Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num296, (float)(i * 16 - (int)Main.screenPosition.Y + num294 * 2)) + zero, new Microsoft.Xna.Framework.Rectangle?(value5), color17, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 									}
 								}
 							}
+
 							if (texture2D != null)
 							{
 								int num297 = 0;
 								int num298 = 0;
 								Main.spriteBatch.Draw(texture2D, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num297, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num298)) + zero, new Microsoft.Xna.Framework.Rectangle?(empty), color2, 0f, default(Vector2), 1f, effects, 0f);
 							}
+
 							if (texture2D2 != null)
 							{
 								empty2 = new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)num10 + num15, num8, num12);
@@ -19560,14 +_,18 @@
 								int num300 = 0;
 								Main.spriteBatch.Draw(texture2D2, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num299, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num300)) + zero, new Microsoft.Xna.Framework.Rectangle?(empty2), transparent, 0f, default(Vector2), 1f, effects, 0f);
 							}
-						}
-					}
-				}
-			}
+
+							TileLoader.PostDraw(j, i, type, Main.spriteBatch);
+						}
+					}
+				}
+			}
+
 			if (solidOnly)
 			{
 				this.DrawTileCracks(1);
 			}
+
 			for (int num301 = 0; num301 < num3; num301++)
 			{
 				int num302 = Main.specX[num301];
@@ -19580,6 +_,7 @@
 				{
 					Main.spriteBatch.Draw(Main.sunOrbTexture, new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X) + (float)num8 / 2f, (float)(num303 * 16 - (int)Main.screenPosition.Y - 36)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.sunOrbTexture.Width, Main.sunOrbTexture.Height)), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, 0), Main.sunCircle, new Vector2((float)(Main.sunOrbTexture.Width / 2), (float)(Main.sunOrbTexture.Height / 2)), 1f, SpriteEffects.None, 0f);
 				}
+
 				if ((type4 == 128 || type4 == 269) && frameX >= 100)
 				{
 					int num304 = (int)(frameY / 18);
@@ -19590,6 +_,7 @@
 						num306++;
 						num305 -= 100;
 					}
+
 					int num307 = -4;
 					SpriteEffects effects2 = SpriteEffects.FlipHorizontally;
 					if (num305 >= 36)
@@ -19597,6 +_,7 @@
 						effects2 = SpriteEffects.None;
 						num307 = -4;
 					}
+
 					if (num304 == 0)
 					{
 						bool flag21 = false;
@@ -19605,6 +_,7 @@
 						{
 							num308 = num306;
 						}
+
 						this.LoadArmorHead(num308);
 						Main.spriteBatch.Draw(Main.armorHeadTexture[num308], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X + num307), (float)(num303 * 16 - (int)Main.screenPosition.Y - 12)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, effects2, 0f);
 					}
@@ -19617,6 +_,7 @@
 							this.LoadArmorLegs(num309);
 							Main.spriteBatch.Draw(Main.armorLegTexture[num309], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X + num307), (float)(num303 * 16 - (int)Main.screenPosition.Y - 28)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, effects2, 0f);
 						}
+
 						this.LoadArmorBody(num306);
 						if (type4 == 269)
 						{
@@ -19626,6 +_,7 @@
 						{
 							Main.spriteBatch.Draw(Main.armorBodyTexture[num306], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X + num307), (float)(num303 * 16 - (int)Main.screenPosition.Y - 28)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, effects2, 0f);
 						}
+
 						if (num306 >= 0 && num306 < 208 && ArmorIDs.Body.Sets.NeedsToDrawArm[num306])
 						{
 							Main.spriteBatch.Draw(Main.armorArmTexture[num306], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X + num307), (float)(num303 * 16 - (int)Main.screenPosition.Y - 28)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, effects2, 0f);
@@ -19639,10 +_,12 @@
 						{
 							num310 = num306;
 						}
+
 						this.LoadArmorLegs(num310);
 						Main.spriteBatch.Draw(Main.armorLegTexture[num310], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X + num307), (float)(num303 * 16 - (int)Main.screenPosition.Y - 44)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, effects2, 0f);
 					}
 				}
+
 				if (type4 == 334 && frameX >= 5000)
 				{
 					short arg_D4C2_0 = (short)(frameY / 18);
@@ -19655,6 +_,7 @@
 						num312++;
 						num311 -= 5000;
 					}
+
 					int num314 = (int)Main.tile[num302 + 1, num303].frameX;
 					if (num314 >= 25000)
 					{
@@ -19664,6 +_,7 @@
 					{
 						num314 -= 10000;
 					}
+
 					Item item = new Item();
 					item.netDefaults(num313);
 					item.Prefix(num314);
@@ -19677,6 +_,7 @@
 					{
 						value6 = texture2D3.Frame(1, 1, 0, 0);
 					}
+
 					int width2 = value6.Width;
 					int height7 = value6.Height;
 					float num315 = 1f;
@@ -19691,12 +_,14 @@
 							num315 = 40f / (float)height7;
 						}
 					}
+
 					num315 *= item.scale;
 					SpriteEffects effects3 = SpriteEffects.None;
 					if (num312 >= 3)
 					{
 						effects3 = SpriteEffects.FlipHorizontally;
 					}
+
 					Microsoft.Xna.Framework.Color color18 = Lighting.GetColor(num302, num303);
 					Main.spriteBatch.Draw(texture2D3, new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X + 24), (float)(num303 * 16 - (int)Main.screenPosition.Y + 8)) + zero, new Microsoft.Xna.Framework.Rectangle?(value6), Lighting.GetColor(num302, num303), 0f, new Vector2((float)(width2 / 2), (float)(height7 / 2)), num315, effects3, 0f);
 					if (item.color != default(Microsoft.Xna.Framework.Color))
@@ -19704,6 +_,7 @@
 						Main.spriteBatch.Draw(texture2D3, new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X + 24), (float)(num303 * 16 - (int)Main.screenPosition.Y + 8)) + zero, new Microsoft.Xna.Framework.Rectangle?(value6), item.GetColor(color18), 0f, new Vector2((float)(width2 / 2), (float)(height7 / 2)), num315, effects3, 0f);
 					}
 				}
+
 				if (type4 == 395)
 				{
 					TEItemFrame tEItemFrame = (TEItemFrame)TileEntity.ByPosition[new Point16(num302, num303)];
@@ -19718,6 +_,7 @@
 					{
 						value7 = texture2D4.Frame(1, 1, 0, 0);
 					}
+
 					int width3 = value7.Width;
 					int height8 = value7.Height;
 					float num316 = 1f;
@@ -19732,6 +_,7 @@
 							num316 = 20f / (float)height8;
 						}
 					}
+
 					num316 *= item2.scale;
 					SpriteEffects effects4 = SpriteEffects.None;
 					Microsoft.Xna.Framework.Color color19 = Lighting.GetColor(num302, num303);
@@ -19745,6 +_,7 @@
 						Main.spriteBatch.Draw(texture2D4, new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X + 16), (float)(num303 * 16 - (int)Main.screenPosition.Y + 16)) + zero, new Microsoft.Xna.Framework.Rectangle?(value7), item2.GetColor(color19), 0f, new Vector2((float)(width3 / 2), (float)(height8 / 2)), num316, effects4, 0f);
 					}
 				}
+
 				if (type4 == 412)
 				{
 					Texture2D texture2D5 = Main.glowMaskTexture[202];
@@ -19755,10 +_,12 @@
 					Main.spriteBatch.Draw(texture2D5, new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X), (float)(num303 * 16 - (int)Main.screenPosition.Y + 2)) + zero, new Microsoft.Xna.Framework.Rectangle?(texture2D5.Frame(1, 4, 0, num318)), value8 * (1f - num319), 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 					Main.spriteBatch.Draw(texture2D5, new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X), (float)(num303 * 16 - (int)Main.screenPosition.Y + 2)) + zero, new Microsoft.Xna.Framework.Rectangle?(texture2D5.Frame(1, 4, 0, frameY2)), value8 * num319, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 				}
+
 				try
 				{
 					if (type4 == 5 && frameY >= 198 && frameX >= 22)
 					{
+						//frame
 						int num320 = 0;
 						if (frameX == 22)
 						{
@@ -19770,29 +_,45 @@
 							{
 								num320 = 2;
 							}
+
 							int num321 = 0;
+							//frame width
 							int num322 = 80;
+							//frame height
 							int num323 = 80;
+							//x offset left
 							int num324 = 32;
+							//y offset
 							int num325 = 0;
 							int num326 = num303;
+							Texture2D modTopTextures = null;
 							while (num326 < num303 + 100)
 							{
+								modTopTextures = TileLoader.GetTreeTopTextures(Main.tile[num302, num326].type,
+									num302, num326, ref num320, ref num322, ref num323, ref num324, ref num325);
+								if (modTopTextures != null)
+								{
+									break;
+								}
+
 								if (Main.tile[num302, num326].type == 2)
 								{
 									num321 = Main.GetTreeStyle(num302);
 									break;
 								}
+
 								if (Main.tile[num302, num326].type == 23)
 								{
 									num321 = 1;
 									break;
 								}
+
 								if (Main.tile[num302, num326].type == 70)
 								{
 									num321 = 14;
 									break;
 								}
+
 								if (Main.tile[num302, num326].type == 60)
 								{
 									num321 = 2;
@@ -19800,15 +_,18 @@
 									{
 										num321 = 11;
 									}
+
 									if ((double)num326 > Main.worldSurface)
 									{
 										num321 = 13;
 									}
+
 									num322 = 114;
 									num323 = 96;
 									num324 = 48;
 									break;
 								}
+
 								if (Main.tile[num302, num326].type == 147)
 								{
 									num321 = 4;
@@ -19820,10 +_,12 @@
 											num321 = 18;
 										}
 									}
+
 									if (WorldGen.snowBG != 2 && WorldGen.snowBG != 3 && WorldGen.snowBG != 32 && WorldGen.snowBG != 4 && WorldGen.snowBG != 42)
 									{
 										break;
 									}
+
 									if (WorldGen.snowBG % 2 == 0)
 									{
 										if (num302 < Main.maxTilesX / 2)
@@ -19831,6 +_,7 @@
 											num321 = 16;
 											break;
 										}
+
 										num321 = 17;
 										break;
 									}
@@ -19841,6 +_,7 @@
 											num321 = 16;
 											break;
 										}
+
 										num321 = 17;
 										break;
 									}
@@ -19852,6 +_,7 @@
 										num321 = 5;
 										break;
 									}
+
 									if (Main.tile[num302, num326].type == 109)
 									{
 										num321 = 3;
@@ -19861,11 +_,13 @@
 											num320 += 3;
 											break;
 										}
+
 										if (num302 % 3 == 2)
 										{
 											num320 += 6;
 											break;
 										}
+
 										break;
 									}
 									else
@@ -19874,17 +_,24 @@
 									}
 								}
 							}
+
 							if (num321 == 14)
 							{
 								float num327 = (float)Main.rand.Next(28, 42) * 0.005f;
 								num327 += (float)(270 - (int)Main.mouseTextColor) / 1000f;
 								Lighting.AddLight(num302, num303, 0.1f, 0.2f + num327 / 2f, 0.7f + num327);
 							}
-							if (tile6.color() > 0)
+
+							if (modTopTextures == null && tile6.color() > 0)
 							{
 								Main.checkTreeAlt[num321, (int)tile6.color()] = true;
 							}
-							if (tile6.color() > 0 && Main.treeAltTextureDrawn[num321, (int)tile6.color()])
+
+							if (modTopTextures != null)
+							{
+								Main.spriteBatch.Draw(modTopTextures, new Vector2(num302 * 16 - (int)Main.screenPosition.X - num324, num303 * 16 - (int)Main.screenPosition.Y - num323 + 16 + num325) + zero, new Microsoft.Xna.Framework.Rectangle(num320 * (num322 + 2), 0, num322, num323), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+							}
+							else if (tile6.color() > 0 && Main.treeAltTextureDrawn[num321, (int)tile6.color()])
 							{
 								Main.spriteBatch.Draw(Main.treeTopAltTexture[num321, (int)tile6.color()], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X - num324), (float)(num303 * 16 - (int)Main.screenPosition.Y - num323 + 16 + num325)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num320 * (num322 + 2), 0, num322, num323)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 							}
@@ -19903,25 +_,37 @@
 							{
 								num320 = 2;
 							}
+
 							int num328 = 0;
 							int num329 = num303;
+							Texture2D modBranchTextures = null;
 							while (num329 < num303 + 100)
 							{
+								modBranchTextures = TileLoader.GetTreeBranchTextures(Main.tile[num302 + 1, num329].type,
+									num302, num329, 1, ref num320);
+								if (modBranchTextures != null)
+								{
+									break;
+								}
+
 								if (Main.tile[num302 + 1, num329].type == 2)
 								{
 									num328 = Main.GetTreeStyle(num302 + 1);
 									break;
 								}
+
 								if (Main.tile[num302 + 1, num329].type == 23)
 								{
 									num328 = 1;
 									break;
 								}
+
 								if (Main.tile[num302 + 1, num329].type == 70)
 								{
 									num328 = 14;
 									break;
 								}
+
 								if (Main.tile[num302 + 1, num329].type == 60)
 								{
 									num328 = 2;
@@ -19930,6 +_,7 @@
 										num328 = 13;
 										break;
 									}
+
 									break;
 								}
 								else if (Main.tile[num302 + 1, num329].type == 147)
@@ -19940,6 +_,7 @@
 										num328 = 12;
 										break;
 									}
+
 									break;
 								}
 								else
@@ -19949,6 +_,7 @@
 										num328 = 5;
 										break;
 									}
+
 									if (Main.tile[num302 + 1, num329].type == 109)
 									{
 										num328 = 3;
@@ -19957,11 +_,13 @@
 											num320 += 3;
 											break;
 										}
+
 										if (num302 % 3 == 2)
 										{
 											num320 += 6;
 											break;
 										}
+
 										break;
 									}
 									else
@@ -19970,17 +_,24 @@
 									}
 								}
 							}
+
 							if (num328 == 14)
 							{
 								float num330 = (float)Main.rand.Next(28, 42) * 0.005f;
 								num330 += (float)(270 - (int)Main.mouseTextColor) / 1000f;
 								Lighting.AddLight(num302, num303, 0.1f, 0.2f + num330 / 2f, 0.7f + num330);
 							}
-							if (tile6.color() > 0)
+
+							if (modBranchTextures == null && tile6.color() > 0)
 							{
 								Main.checkTreeAlt[num328, (int)tile6.color()] = true;
 							}
-							if (tile6.color() > 0 && Main.treeAltTextureDrawn[num328, (int)tile6.color()])
+
+							if (modBranchTextures != null)
+							{
+								Main.spriteBatch.Draw(modBranchTextures, new Vector2(num302 * 16 - (int)Main.screenPosition.X - 24, num303 * 16 - (int)Main.screenPosition.Y - 12) + zero, new Microsoft.Xna.Framework.Rectangle(0, num320 * 42, 40, 40), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+							}
+							else if (tile6.color() > 0 && Main.treeAltTextureDrawn[num328, (int)tile6.color()])
 							{
 								Main.spriteBatch.Draw(Main.treeBranchAltTexture[num328, (int)tile6.color()], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X - 24), (float)(num303 * 16 - (int)Main.screenPosition.Y - 12)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num320 * 42, 40, 40)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 							}
@@ -19999,25 +_,37 @@
 							{
 								num320 = 2;
 							}
+
 							int num331 = 0;
 							int num332 = num303;
+							Texture2D modBranchTextures = null;
 							while (num332 < num303 + 100)
 							{
+								modBranchTextures = TileLoader.GetTreeBranchTextures(Main.tile[num302 - 1, num332].type,
+									num302, num332, -1, ref num320);
+								if (modBranchTextures != null)
+								{
+									break;
+								}
+
 								if (Main.tile[num302 - 1, num332].type == 2)
 								{
 									num331 = Main.GetTreeStyle(num302 - 1);
 									break;
 								}
+
 								if (Main.tile[num302 - 1, num332].type == 23)
 								{
 									num331 = 1;
 									break;
 								}
+
 								if (Main.tile[num302 - 1, num332].type == 70)
 								{
 									num331 = 14;
 									break;
 								}
+
 								if (Main.tile[num302 - 1, num332].type == 60)
 								{
 									num331 = 2;
@@ -20026,6 +_,7 @@
 										num331 = 13;
 										break;
 									}
+
 									break;
 								}
 								else if (Main.tile[num302 - 1, num332].type == 147)
@@ -20036,6 +_,7 @@
 										num331 = 12;
 										break;
 									}
+
 									break;
 								}
 								else
@@ -20045,6 +_,7 @@
 										num331 = 5;
 										break;
 									}
+
 									if (Main.tile[num302 - 1, num332].type == 109)
 									{
 										num331 = 3;
@@ -20053,11 +_,13 @@
 											num320 += 3;
 											break;
 										}
+
 										if (num302 % 3 == 2)
 										{
 											num320 += 6;
 											break;
 										}
+
 										break;
 									}
 									else
@@ -20066,17 +_,24 @@
 									}
 								}
 							}
+
 							if (num331 == 14)
 							{
 								float num333 = (float)Main.rand.Next(28, 42) * 0.005f;
 								num333 += (float)(270 - (int)Main.mouseTextColor) / 1000f;
 								Lighting.AddLight(num302, num303, 0.1f, 0.2f + num333 / 2f, 0.7f + num333);
 							}
-							if (tile6.color() > 0)
+
+							if (modBranchTextures == null && tile6.color() > 0)
 							{
 								Main.checkTreeAlt[num331, (int)tile6.color()] = true;
 							}
-							if (tile6.color() > 0 && Main.treeAltTextureDrawn[num331, (int)tile6.color()])
+
+							if (modBranchTextures != null)
+							{
+								Main.spriteBatch.Draw(modBranchTextures, new Vector2(num302 * 16 - (int)Main.screenPosition.X, num303 * 16 - (int)Main.screenPosition.Y - 12) + zero, new Microsoft.Xna.Framework.Rectangle(42, num320 * 42, 40, 40), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+							}
+							else if (tile6.color() > 0 && Main.treeAltTextureDrawn[num331, (int)tile6.color()])
 							{
 								Main.spriteBatch.Draw(Main.treeBranchAltTexture[num331, (int)tile6.color()], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X), (float)(num303 * 16 - (int)Main.screenPosition.Y - 12)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(42, num320 * 42, 40, 40)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 							}
@@ -20086,6 +_,7 @@
 							}
 						}
 					}
+
 					if (type4 == 323 && frameX >= 88 && frameX <= 132)
 					{
 						int num334 = 0;
@@ -20097,42 +_,59 @@
 						{
 							num334 = 2;
 						}
+
 						int num335 = 15;
 						int num336 = 0;
 						int num337 = 80;
 						int num338 = 80;
 						int num339 = 32;
 						int num340 = 0;
+						Texture2D modTopTextures = null;
 						for (int num341 = num303; num341 < num303 + 100; num341++)
 						{
+							modTopTextures = TileLoader.GetPalmTreeTopTextures(Main.tile[num302, num341].type);
+							if (modTopTextures != null)
+							{
+								break;
+							}
+
 							if (Main.tile[num302, num341].type == 53)
 							{
 								num336 = 0;
 								break;
 							}
+
 							if (Main.tile[num302, num341].type == 234)
 							{
 								num336 = 1;
 								break;
 							}
+
 							if (Main.tile[num302, num341].type == 116)
 							{
 								num336 = 2;
 								break;
 							}
+
 							if (Main.tile[num302, num341].type == 112)
 							{
 								num336 = 3;
 								break;
 							}
 						}
+
 						int frameY3 = (int)Main.tile[num302, num303].frameY;
 						int y3 = num336 * 82;
-						if (tile6.color() > 0)
+						if (modTopTextures == null && tile6.color() > 0)
 						{
 							Main.checkTreeAlt[num335, (int)tile6.color()] = true;
 						}
-						if (tile6.color() > 0 && Main.treeAltTextureDrawn[num335, (int)tile6.color()])
+
+						if (modTopTextures != null)
+						{
+							Main.spriteBatch.Draw(modTopTextures, new Vector2(num302 * 16 - (int)Main.screenPosition.X - num339 + frameY3, num303 * 16 - (int)Main.screenPosition.Y - num338 + 16 + num340) + zero, new Microsoft.Xna.Framework.Rectangle(num334 * (num337 + 2), y3, num337, num338), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+						}
+						else if (tile6.color() > 0 && Main.treeAltTextureDrawn[num335, (int)tile6.color()])
 						{
 							Main.spriteBatch.Draw(Main.treeTopAltTexture[num335, (int)tile6.color()], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X - num339 + frameY3), (float)(num303 * 16 - (int)Main.screenPosition.Y - num338 + 16 + num340)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num334 * (num337 + 2), y3, num337, num338)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 						}
@@ -20145,17 +_,21 @@
 				catch
 				{
 				}
-			}
+				TileLoader.SpecialDraw(type4, num302, num303, Main.spriteBatch);
+			}
+
 			if (TileObject.objectPreview.Active && Main.player[Main.myPlayer].showItemIcon && Main.placementPreview && !CaptureManager.Instance.Active)
 			{
 				this.LoadTiles((int)TileObject.objectPreview.Type);
 				TileObject.DrawPreview(Main.spriteBatch, TileObject.objectPreview, Main.screenPosition - zero);
 			}
+
 			if (solidOnly)
 			{
 				TimeLogger.DrawTime(0, stopwatch.Elapsed.TotalMilliseconds);
 				return;
 			}
+
 			TimeLogger.DrawTime(1, stopwatch.Elapsed.TotalMilliseconds);
 		}
 
@@ -20179,6 +_,7 @@
 						num4++;
 						j -= 100;
 					}
+
 					int num5 = -4;
 					SpriteEffects effects = SpriteEffects.FlipHorizontally;
 					if (j >= 36)
@@ -20186,6 +_,7 @@
 						effects = SpriteEffects.None;
 						num5 = -4;
 					}
+
 					if (num3 == 0)
 					{
 						this.LoadArmorHead(num4);
@@ -20200,6 +_,7 @@
 							this.LoadArmorLegs(num6);
 							Main.spriteBatch.Draw(Main.armorLegTexture[num6], new Vector2((float)(num * 16 - (int)Main.screenPosition.X + num5), (float)(num2 * 16 - (int)Main.screenPosition.Y - 28)) + offSet, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54)), Lighting.GetColor(num, num2), 0f, default(Vector2), 1f, effects, 0f);
 						}
+
 						this.LoadArmorBody(num4);
 						if (type == 269)
 						{
@@ -20217,17 +_,20 @@
 						{
 							case 83:
 								if (type == 128)
-								{
-									num7 = 117;
-								}
-								break;
+							{
+								num7 = 117;
+							}
+
+							break;
 							case 84:
 								if (type == 128)
-								{
-									num7 = 120;
-								}
-								break;
-						}
+							{
+								num7 = 120;
+							}
+
+							break;
+						}
+
 						this.LoadArmorLegs(num7);
 						Main.spriteBatch.Draw(Main.armorLegTexture[num7], new Vector2((float)(num * 16 - (int)Main.screenPosition.X + num5), (float)(num2 * 16 - (int)Main.screenPosition.Y - 44)) + offSet, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54)), Lighting.GetColor(num, num2), 0f, default(Vector2), 1f, effects, 0f);
 					}
@@ -20242,10 +_,11 @@
 				if (Main.gore[i].active && Main.gore[i].type > 0)
 				{
 					bool flag = false;
-					if (((Main.gore[i].type >= 706 && Main.gore[i].type <= 717) || Main.gore[i].type == 943) && (Main.gore[i].frame < 7 || Main.gore[i].frame > 9))
+					if (ModGore.DrawBackGore(Main.gore[i]))
 					{
 						flag = true;
 					}
+
 					if (flag)
 					{
 						this.LoadGore(Main.gore[i].type);
@@ -20272,7 +_,7 @@
 			{
 				if (Main.gore[i].active && Main.gore[i].type > 0)
 				{
-					if (((Main.gore[i].type >= 706 && Main.gore[i].type <= 717) || Main.gore[i].type == 943) && (Main.gore[i].frame < 7 || Main.gore[i].frame > 9))
+					if (ModGore.DrawBackGore(Main.gore[i]))
 					{
 						Main.drawBackGore = true;
 					}
@@ -20293,20 +_,23 @@
 					}
 				}
 			}
+
 			TimeLogger.DetailedDrawTime(24);
 		}
 
-		protected void DrawHealthBar(float X, float Y, int Health, int MaxHealth, float alpha, float scale = 1f)
+		public void DrawHealthBar(float X, float Y, int Health, int MaxHealth, float alpha, float scale = 1f)
 		{
 			if (Health <= 0)
 			{
 				return;
 			}
+
 			float num = (float)Health / (float)MaxHealth;
 			if (num > 1f)
 			{
 				num = 1f;
 			}
+
 			int num2 = (int)(36f * num);
 			float num3 = X - 18f * scale;
 			float num4 = Y;
@@ -20315,6 +_,7 @@
 				num4 -= Main.screenPosition.Y;
 				num4 = Main.screenPosition.Y + (float)Main.screenHeight - num4;
 			}
+
 			float num5 = 0f;
 			float num6 = 255f;
 			num -= 0.1f;
@@ -20330,6 +_,7 @@
 				num7 = 255f * num * 2f;
 				num8 = 255f;
 			}
+
 			float num9 = 0.95f;
 			num8 = num8 * alpha * num9;
 			num7 = num7 * alpha * num9;
@@ -20338,52 +_,64 @@
 			{
 				num8 = 0f;
 			}
+
 			if (num8 > 255f)
 			{
 				num8 = 255f;
 			}
+
 			if (num7 < 0f)
 			{
 				num7 = 0f;
 			}
+
 			if (num7 > 255f)
 			{
 				num7 = 255f;
 			}
+
 			if (num6 < 0f)
 			{
 				num6 = 0f;
 			}
+
 			if (num6 > 255f)
 			{
 				num6 = 255f;
 			}
+
 			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color((int)((byte)num8), (int)((byte)num7), (int)((byte)num5), (int)((byte)num6));
 			if (num2 < 3)
 			{
 				num2 = 3;
 			}
+
 			if (num2 < 34)
 			{
 				if (num2 < 36)
 				{
 					Main.spriteBatch.Draw(Main.hbTexture2, new Vector2(num3 - Main.screenPosition.X + (float)num2 * scale, num4 - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(2, 0, 2, Main.hbTexture2.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
 				}
+
 				if (num2 < 34)
 				{
 					Main.spriteBatch.Draw(Main.hbTexture2, new Vector2(num3 - Main.screenPosition.X + (float)(num2 + 2) * scale, num4 - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num2 + 2, 0, 36 - num2 - 2, Main.hbTexture2.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
 				}
+
 				if (num2 > 2)
 				{
 					Main.spriteBatch.Draw(Main.hbTexture1, new Vector2(num3 - Main.screenPosition.X, num4 - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, num2 - 2, Main.hbTexture1.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
 				}
+
 				Main.spriteBatch.Draw(Main.hbTexture1, new Vector2(num3 - Main.screenPosition.X + (float)(num2 - 2) * scale, num4 - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(32, 0, 2, Main.hbTexture1.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
 				return;
 			}
+
 			if (num2 < 36)
 			{
 				Main.spriteBatch.Draw(Main.hbTexture2, new Vector2(num3 - Main.screenPosition.X + (float)num2 * scale, num4 - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num2, 0, 36 - num2, Main.hbTexture2.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
 			}
+
 			Main.spriteBatch.Draw(Main.hbTexture1, new Vector2(num3 - Main.screenPosition.X, num4 - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, num2, Main.hbTexture1.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
 		}
 
@@ -20502,6 +_,10 @@
 			{
 				num = 6f;
 			}
+			else if (Main.npc[i].modNPC != null)
+			{
+				num = Main.npc[i].modNPC.drawOffsetY;
+			}
 			else if (Main.npc[i].type == 153 || Main.npc[i].type == 154)
 			{
 				num = 4f;
@@ -20542,10 +_,12 @@
 			{
 				num = -2f;
 			}
+
 			if (Main.npc[i].townNPC && Main.npc[i].ai[0] == 5f)
 			{
 				num -= 4f;
 			}
+
 			return num * Main.npc[i].scale;
 		}
 
@@ -20568,18 +_,22 @@
 							{
 								num3 = Main.player[Main.projectile[i].owner].cGrapple;
 							}
+
 							if (Main.projPet[Main.projectile[i].type] && !Main.projectile[i].minion && Main.projectile[i].owner != 255 && Main.projectile[i].damage == 0 && !ProjectileID.Sets.LightPet[Main.projectile[i].type])
 							{
 								num3 = Main.player[Main.projectile[i].owner].cPet;
 							}
+
 							if (!Main.projectile[i].minion && Main.projectile[i].owner != 255 && Main.projectile[i].damage == 0 && ProjectileID.Sets.LightPet[Main.projectile[i].type])
 							{
 								num3 = Main.player[Main.projectile[i].owner].cLight;
 							}
+
 							if (Main.projectile[i].type == 623 && Main.projectile[i].owner != 255)
 							{
 								num3 = Main.player[Main.projectile[i].owner].cPet;
 							}
+
 							if (num3 != 0)
 							{
 								if (num2 == 0)
@@ -20587,6 +_,7 @@
 									Main.spriteBatch.End();
 									Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, Main.Transform);
 								}
+
 								GameShaders.Armor.ApplySecondary(num3, Main.player[Main.projectile[i].owner], null);
 							}
 							else if (num2 != 0)
@@ -20594,6 +_,7 @@
 								Main.spriteBatch.End();
 								Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, Main.Transform);
 							}
+
 							num2 = num3;
 							this.DrawProj(i);
 						}
@@ -20616,18 +_,22 @@
 						{
 							num4 = Main.player[Main.projectile[j].owner].cGrapple;
 						}
+
 						if (Main.projPet[Main.projectile[j].type] && !Main.projectile[j].minion && Main.projectile[j].owner != 255 && Main.projectile[j].damage == 0 && !ProjectileID.Sets.LightPet[Main.projectile[j].type])
 						{
 							num4 = Main.player[Main.projectile[j].owner].cPet;
 						}
+
 						if (!Main.projectile[j].minion && Main.projectile[j].owner != 255 && Main.projectile[j].damage == 0 && ProjectileID.Sets.LightPet[Main.projectile[j].type])
 						{
 							num4 = Main.player[Main.projectile[j].owner].cLight;
 						}
+
 						if (Main.projectile[j].type == 623 && Main.projectile[j].owner != 255)
 						{
 							num4 = Main.player[Main.projectile[j].owner].cPet;
 						}
+
 						if (num4 != 0)
 						{
 							if (num2 == 0)
@@ -20635,6 +_,7 @@
 								Main.spriteBatch.End();
 								Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, Main.Transform);
 							}
+
 							GameShaders.Armor.ApplySecondary(num4, Main.player[Main.projectile[j].owner], null);
 						}
 						else if (num2 != 0)
@@ -20642,11 +_,13 @@
 							Main.spriteBatch.End();
 							Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, Main.Transform);
 						}
+
 						num2 = num4;
 						this.DrawProj(j);
 					}
 				}
 			}
+
 			Main.spriteBatch.End();
 			TimeLogger.DetailedDrawTime(20);
 		}
@@ -20663,12 +_,14 @@
 					{
 						player.PlayerFrame();
 					}
+
 					if (player.ghost)
 					{
 						for (int j = 0; j < 3; j++)
 						{
 							this.DrawGhost(player, player.shadowPos[j], 0.5f + 0.2f * (float)j);
 						}
+
 						this.DrawGhost(player, player.position, 0f);
 					}
 					else
@@ -20686,6 +_,7 @@
 								}
 							}
 						}
+
 						if (player.armorEffectDrawShadowEOCShield)
 						{
 							int num = player.eocDash / 4;
@@ -20693,11 +_,13 @@
 							{
 								num = 3;
 							}
+
 							for (int l = 0; l < num; l++)
 							{
 								this.DrawPlayer(player, player.shadowPos[l], player.shadowRotation[l], player.shadowOrigin[l], 0.5f + 0.2f * (float)l);
 							}
 						}
+
 						Vector2 position;
 						if (player.invis)
 						{
@@ -20716,6 +_,7 @@
 								player.invis = true;
 							}
 						}
+
 						if (player.armorEffectDrawOutlines)
 						{
 							Vector2 arg_23E_0 = player.position;
@@ -20723,6 +_,7 @@
 							{
 								player.ghostFade += player.ghostDir * 0.075f;
 							}
+
 							if ((double)player.ghostFade < 0.1)
 							{
 								player.ghostDir = 1f;
@@ -20733,6 +_,7 @@
 								player.ghostDir = -1f;
 								player.ghostFade = 0.9f;
 							}
+
 							float num2 = player.ghostFade * 5f;
 							for (int m = 0; m < 4; m++)
 							{
@@ -20743,25 +_,27 @@
 									case 0:
 									default:
 										num3 = num2;
-										num4 = 0f;
-										break;
+									num4 = 0f;
+									break;
 									case 1:
 										num3 = -num2;
-										num4 = 0f;
-										break;
+									num4 = 0f;
+									break;
 									case 2:
 										num3 = 0f;
-										num4 = num2;
-										break;
+									num4 = num2;
+									break;
 									case 3:
 										num3 = 0f;
-										num4 = -num2;
-										break;
-								}
+									num4 = -num2;
+									break;
+								}
+
 								position = new Vector2(player.position.X + num3, player.position.Y + player.gfxOffY + num4);
 								this.DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, player.ghostFade);
 							}
 						}
+
 						if (player.armorEffectDrawOutlinesForbidden)
 						{
 							Vector2 arg_37A_0 = player.position;
@@ -20769,6 +_,7 @@
 							{
 								player.ghostFade += player.ghostDir * 0.025f;
 							}
+
 							if ((double)player.ghostFade < 0.1)
 							{
 								player.ghostDir = 1f;
@@ -20779,6 +_,7 @@
 								player.ghostDir = -1f;
 								player.ghostFade = 0.9f;
 							}
+
 							float num5 = player.ghostFade * 5f;
 							for (int n = 0; n < 4; n++)
 							{
@@ -20789,25 +_,27 @@
 									case 0:
 									default:
 										num6 = num5;
-										num7 = 0f;
-										break;
+									num7 = 0f;
+									break;
 									case 1:
 										num6 = -num5;
-										num7 = 0f;
-										break;
+									num7 = 0f;
+									break;
 									case 2:
 										num6 = 0f;
-										num7 = num5;
-										break;
+									num7 = num5;
+									break;
 									case 3:
 										num6 = 0f;
-										num7 = -num5;
-										break;
-								}
+									num7 = -num5;
+									break;
+								}
+
 								position = new Vector2(player.position.X + num6, player.position.Y + player.gfxOffY + num7);
 								this.DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, player.ghostFade);
 							}
 						}
+
 						if (player.armorEffectDrawShadowBasilisk)
 						{
 							int num8 = (int)(player.basiliskCharge * 3f);
@@ -20823,6 +_,7 @@
 								this.DrawPlayer(player, player.shadowPos[num10], player.shadowRotation[num10], player.shadowOrigin[num10], 0.5f + 0.2f * (float)num10);
 							}
 						}
+
 						if (player.armorEffectDrawShadowLokis)
 						{
 							for (int num11 = 0; num11 < 3; num11++)
@@ -20830,6 +_,7 @@
 								this.DrawPlayer(player, Vector2.Lerp(player.shadowPos[num11], player.position + new Vector2(0f, player.gfxOffY), 0.5f), player.shadowRotation[num11], player.shadowOrigin[num11], MathHelper.Lerp(1f, 0.5f + 0.2f * (float)num11, 0.5f));
 							}
 						}
+
 						if (player.armorEffectDrawShadowSubtle)
 						{
 							for (int num12 = 0; num12 < 4; num12++)
@@ -20839,6 +_,7 @@
 								this.DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, 0.9f);
 							}
 						}
+
 						if (player.shadowDodge)
 						{
 							player.shadowDodgeCount += 1f;
@@ -20855,6 +_,7 @@
 								player.shadowDodgeCount = 0f;
 							}
 						}
+
 						if (player.shadowDodgeCount > 0f)
 						{
 							Vector2 arg_702_0 = player.position;
@@ -20864,6 +_,7 @@
 							position.X = player.position.X - player.shadowDodgeCount;
 							this.DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, 0.5f + (float)Main.rand.Next(-10, 11) * 0.005f);
 						}
+
 						position = player.position;
 						position.Y += player.gfxOffY;
 						if (player.stoned)
@@ -20877,6 +_,7 @@
 					}
 				}
 			}
+
 			Main.spriteBatch.End();
 			TimeLogger.DetailedDrawTime(21);
 		}
@@ -20888,76 +_,92 @@
 				armorEffectDrawShadowSubtle = true;
 				armorEffectDrawOutlines = true;
 			}
+
 			if (drawPlayer.head == 134 && drawPlayer.body == 95 && drawPlayer.legs == 79)
 			{
 				armorEffectDrawShadowSubtle = true;
 				armorEffectDrawOutlines = true;
 			}
+
 			if (drawPlayer.head == 107 && drawPlayer.body == 69 && drawPlayer.legs == 58)
 			{
 				armorEffectDrawShadowSubtle = true;
 				armorEffectDrawShadow = true;
 			}
+
 			if (drawPlayer.head == 108 && drawPlayer.body == 70 && drawPlayer.legs == 59)
 			{
 				armorEffectDrawShadowSubtle = true;
 				armorEffectDrawShadow = true;
 			}
+
 			if (drawPlayer.head == 109 && drawPlayer.body == 71 && drawPlayer.legs == 60)
 			{
 				armorEffectDrawShadowSubtle = true;
 				armorEffectDrawShadow = true;
 			}
+
 			if (drawPlayer.head == 110 && drawPlayer.body == 72 && drawPlayer.legs == 61)
 			{
 				armorEffectDrawShadowSubtle = true;
 				armorEffectDrawShadow = true;
 			}
+
 			if (drawPlayer.head == 193 && drawPlayer.body == 194 && drawPlayer.legs == 134)
 			{
 				armorEffectDrawShadowSubtle = true;
 				armorEffectDrawShadowLokis = true;
 				armorEffectDrawOutlines = true;
 			}
+
 			if (drawPlayer.mount.Active && drawPlayer.mount.Type == 3 && drawPlayer.velocity.Y != 0f && !drawPlayer.SlimeDontHyperJump)
 			{
 				armorEffectDrawShadow = true;
 			}
+
 			if (drawPlayer.mount.Active && drawPlayer.mount.Type == 10 && Math.Abs(drawPlayer.velocity.X) > drawPlayer.mount.DashSpeed - drawPlayer.mount.RunSpeed / 2f)
 			{
 				armorEffectDrawShadow = true;
 			}
+
 			if (drawPlayer.mount.Active && drawPlayer.mount.Type == 14 && Math.Abs(drawPlayer.velocity.X) > drawPlayer.mount.RunSpeed / 2f)
 			{
 				armorEffectDrawShadowBasilisk = true;
 			}
+
 			if (drawPlayer.body == 67 && drawPlayer.legs == 56 && drawPlayer.head >= 103 && drawPlayer.head <= 105)
 			{
 				armorEffectDrawShadow = true;
 			}
+
 			if ((drawPlayer.head == 78 || drawPlayer.head == 79 || drawPlayer.head == 80) && drawPlayer.body == 51 && drawPlayer.legs == 47)
 			{
 				armorEffectDrawShadowSubtle = true;
 			}
+
 			if (drawPlayer.head == 200 && drawPlayer.body == 198 && drawPlayer.legs == 142)
 			{
 				armorEffectDrawShadowLokis = true;
 				armorEffectDrawOutlinesForbidden = true;
 			}
+
 			if (drawPlayer.head == 171 && drawPlayer.body == 177 && drawPlayer.legs == 112)
 			{
 				armorEffectDrawShadow = true;
 				armorEffectDrawOutlines = true;
 			}
+
 			if (drawPlayer.head == 169 && drawPlayer.body == 175 && drawPlayer.legs == 110)
 			{
 				armorEffectDrawShadow = true;
 			}
+
 			if (drawPlayer.head == 170 && drawPlayer.body == 176 && drawPlayer.legs == 111)
 			{
 				armorEffectDrawShadowLokis = true;
 				armorEffectDrawOutlines = true;
 			}
+
 			if (drawPlayer.eocDash > 0)
 			{
 				armorEffectEOCShield = true;
@@ -20966,56 +_,69 @@
 			{
 				armorEffectDrawShadow = true;
 			}
+
 			if (drawPlayer.head == 5 && drawPlayer.body == 5 && drawPlayer.legs == 5)
 			{
 				armorEffectDrawShadow = true;
 			}
+
 			if (drawPlayer.head == 74 && drawPlayer.body == 48 && drawPlayer.legs == 44)
 			{
 				armorEffectDrawShadow = true;
 			}
+
 			if (drawPlayer.head == 76 && drawPlayer.body == 49 && drawPlayer.legs == 45)
 			{
 				armorEffectDrawShadow = true;
 			}
+
 			if (drawPlayer.head == 7 && drawPlayer.body == 7 && drawPlayer.legs == 7)
 			{
 				armorEffectDrawShadow = true;
 			}
+
 			if (drawPlayer.head == 22 && drawPlayer.body == 14 && drawPlayer.legs == 14)
 			{
 				armorEffectDrawShadow = true;
 			}
+
 			if (drawPlayer.dye[0].dye == 30 && drawPlayer.dye[1].dye == 30 && drawPlayer.dye[2].dye == 30 && drawPlayer.head == 4 && drawPlayer.body == 27 && drawPlayer.legs == 26)
 			{
 				armorEffectDrawShadow = true;
 				armorEffectDrawOutlines = true;
 			}
+
 			if (drawPlayer.head == 189 && drawPlayer.body == 190 && drawPlayer.legs == 130)
 			{
 				armorEffectDrawOutlines = true;
 			}
+
 			if (drawPlayer.body == 17 && drawPlayer.legs == 16 && (drawPlayer.head == 29 || drawPlayer.head == 30 || drawPlayer.head == 31))
 			{
 				armorEffectDrawShadow = true;
 			}
+
 			if (drawPlayer.body == 19 && drawPlayer.legs == 18 && (drawPlayer.head == 35 || drawPlayer.head == 36 || drawPlayer.head == 37))
 			{
 				armorEffectDrawOutlines = true;
 			}
+
 			if (drawPlayer.body == 24 && drawPlayer.legs == 23 && (drawPlayer.head == 41 || drawPlayer.head == 42 || drawPlayer.head == 43))
 			{
 				armorEffectDrawOutlines = true;
 				armorEffectDrawShadow = true;
 			}
+
 			if (drawPlayer.head == 157 && drawPlayer.legs == 98 && drawPlayer.body != 105)
 			{
 				int arg_4E6_0 = drawPlayer.body;
 			}
+
 			if (drawPlayer.body == 36 && drawPlayer.head == 56)
 			{
 				armorEffectDrawOutlines = true;
 			}
+
 			if (drawPlayer.stoned || drawPlayer.stealth != 1f)
 			{
 				armorEffectDrawOutlines = false;
@@ -21042,7 +_,7 @@
 			{
 				try
 				{
-					if (Main.npc[i].active && Main.npc[i].type > 0 && Main.npc[i].type < 580 && !Main.npc[i].hide)
+					if (Main.npc[i].active && Main.npc[i].type > 0 && !Main.npc[i].hide)
 					{
 						Main.npc[i].visualOffset *= 0.95f;
 						Main.npc[i].position += Main.npc[i].visualOffset;
@@ -21069,6 +_,7 @@
 											{
 												flag2 = false;
 											}
+
 											while (flag2)
 											{
 												num5 = (float)Math.Sqrt((double)(num3 * num3 + num4 * num4));
@@ -21110,6 +_,7 @@
 										num8 = (int)num10 - num9 + num8;
 										flag3 = false;
 									}
+
 									num10 = (float)num8 / num10;
 									num6 *= num10;
 									num7 *= num10;
@@ -21128,6 +_,7 @@
 								{
 									num11 = (int)Main.npc[i].ai[3] - 1;
 								}
+
 								Vector2 vector3 = new Vector2(Main.npc[i].position.X + (float)(Main.npc[i].width / 2), Main.npc[i].position.Y + (float)(Main.npc[i].height / 2));
 								float num12 = Main.npc[num11].Center.X - vector3.X;
 								float num13 = Main.npc[num11].Center.Y - vector3.Y;
@@ -21143,6 +_,7 @@
 										num14 = (int)num16 - num15 + num14;
 										flag4 = false;
 									}
+
 									num16 = (float)num14 / num16;
 									num12 *= num16;
 									num13 *= num16;
@@ -21154,12 +_,14 @@
 									Main.spriteBatch.Draw(Main.chain27Texture, new Vector2(vector3.X - Main.screenPosition.X, vector3.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain27Texture.Width, num14)), color3, rotation3, new Vector2((float)Main.chain27Texture.Width * 0.5f, (float)Main.chain27Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
 								}
 							}
+
 							if (NPCID.Sets.MustAlwaysDraw[Main.npc[i].type] || rectangle.Intersects(new Microsoft.Xna.Framework.Rectangle((int)Main.npc[i].position.X, (int)Main.npc[i].position.Y, Main.npc[i].width, Main.npc[i].height)))
 							{
 								this.DrawNPCCheckAlt(Main.npc[i]);
 								this.DrawNPC(i, behindTiles);
 							}
 						}
+
 						Main.npc[i].position -= Main.npc[i].visualOffset;
 					}
 				}
@@ -21170,20 +_,22 @@
 			}
 		}
 
-		protected void DrawNPCCheckAlt(NPC n)
+		public void DrawNPCCheckAlt(NPC n)
 		{
 			if (NPCID.Sets.ExtraTextureCount[n.type] == 0)
 			{
 				return;
 			}
+
 			if (!Main.NPCLoaded[n.type])
 			{
 				return;
 			}
+
 			Main.npcTexture[n.type] = Main.npcAltTextures[n.type][n.altTexture];
 		}
 
-		protected void DrawNPC(int iNPCIndex, bool behindTiles)
+		public void DrawNPC(int iNPCIndex, bool behindTiles)
 		{
 			NPC nPC = Main.npc[iNPCIndex];
 			int type = nPC.type;
@@ -21193,6 +_,7 @@
 				nPC.frame = new Microsoft.Xna.Framework.Rectangle(0, 0, Main.npcTexture[type].Width, Main.npcTexture[type].Height / Main.npcFrameCount[type]);
 				nPC.setFrameSize = false;
 			}
+
 			if (nPC.realLife == -1 && nPC.life >= nPC.lifeMax && !nPC.boss)
 			{
 				bool flag = Lighting.GetColor((int)((double)nPC.position.X + (double)nPC.width * 0.5) / 16, (int)(((double)nPC.position.Y + (double)nPC.height * 0.5) / 16.0)).ToVector3().Length() > 0.4325f;
@@ -21209,14 +_,17 @@
 						flag2 = true;
 					}
 				}
+
 				if (flag2 && nPC.lifeMax < 5)
 				{
 					flag2 = false;
 				}
+
 				if (flag2 && nPC.aiStyle == 25 && nPC.ai[0] == 0f)
 				{
 					flag2 = false;
 				}
+
 				if (flag2)
 				{
 					nPC.nameOver = MathHelper.Clamp(nPC.nameOver + 0.025f, 0f, 1f);
@@ -21230,6 +_,7 @@
 			{
 				nPC.nameOver = MathHelper.Clamp(nPC.nameOver - 0.025f, 0f, 1f);
 			}
+
 			if (type == 101)
 			{
 				bool flag3 = true;
@@ -21248,6 +_,7 @@
 						height = (int)num5 - 40 + 28;
 						flag4 = false;
 					}
+
 					num5 = 20f * num4 / num5;
 					num2 *= num5;
 					num3 *= num5;
@@ -21284,12 +_,14 @@
 						num9 = 20;
 						num8 = 12;
 					}
+
 					float num10 = (float)Math.Sqrt((double)(num6 * num6 + num7 * num7));
 					if (num10 < (float)num9)
 					{
 						num8 = (int)num10 - num9 + num8;
 						flag5 = false;
 					}
+
 					num10 = (float)num8 / num10;
 					num6 *= num10;
 					num7 *= num10;
@@ -21305,11 +_,13 @@
 						{
 							color2.R = 100;
 						}
+
 						if (color2.G < 150)
 						{
 							color2.G = 150;
 						}
 					}
+
 					if (type == 56)
 					{
 						Main.spriteBatch.Draw(Main.chain5Texture, new Vector2(vector2.X - Main.screenPosition.X, vector2.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain4Texture.Width, num8)), color2, rotation2, new Vector2((float)Main.chain4Texture.Width * 0.5f, (float)Main.chain4Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
@@ -21332,6 +_,7 @@
 					}
 				}
 			}
+
 			if (type == 327)
 			{
 				float rotation3 = 0f;
@@ -21340,6 +_,7 @@
 				Microsoft.Xna.Framework.Color color3 = Lighting.GetColor((int)vector3.X / 16, (int)(vector3.Y / 16f));
 				Main.spriteBatch.Draw(Main.pumpkingCloakTexture, new Vector2(vector3.X - Main.screenPosition.X, vector3.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.pumpkingCloakTexture.Height / 5 * num11, Main.pumpkingCloakTexture.Width, Main.pumpkingCloakTexture.Height / 5)), color3, rotation3, new Vector2((float)Main.pumpkingCloakTexture.Width * 0.5f, (float)Main.pumpkingCloakTexture.Height * 0.5f / 5f), 1f, SpriteEffects.None, 0f);
 			}
+
 			if (type == 328)
 			{
 				Vector2 vector4 = new Vector2(nPC.position.X + (float)nPC.width * 0.5f - 5f * nPC.ai[0], nPC.position.Y + 20f);
@@ -21366,6 +_,7 @@
 						vector4.X += num12 * num14;
 						vector4.Y += num13 * num14;
 					}
+
 					float rotation4 = (float)Math.Atan2((double)num13, (double)num12) - 1.57f;
 					Microsoft.Xna.Framework.Color color4 = Lighting.GetColor((int)vector4.X / 16, (int)(vector4.Y / 16f));
 					Main.spriteBatch.Draw(Main.pumpkingArmTexture, new Vector2(vector4.X - Main.screenPosition.X, vector4.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.pumpkingArmTexture.Width, Main.pumpkingArmTexture.Height)), color4, rotation4, new Vector2((float)Main.pumpkingArmTexture.Width * 0.5f, (float)Main.pumpkingArmTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
@@ -21376,6 +_,7 @@
 					}
 				}
 			}
+
 			if (type == 36)
 			{
 				Vector2 vector5 = new Vector2(nPC.position.X + (float)nPC.width * 0.5f - 5f * nPC.ai[0], nPC.position.Y + 20f);
@@ -21402,6 +_,7 @@
 						vector5.X += num15 * num17;
 						vector5.Y += num16 * num17;
 					}
+
 					float rotation5 = (float)Math.Atan2((double)num16, (double)num15) - 1.57f;
 					Microsoft.Xna.Framework.Color color5 = Lighting.GetColor((int)vector5.X / 16, (int)(vector5.Y / 16f));
 					Main.spriteBatch.Draw(Main.boneArmTexture, new Vector2(vector5.X - Main.screenPosition.X, vector5.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.boneArmTexture.Width, Main.boneArmTexture.Height)), color5, rotation5, new Vector2((float)Main.boneArmTexture.Width * 0.5f, (float)Main.boneArmTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
@@ -21419,6 +_,7 @@
 					}
 				}
 			}
+
 			if (nPC.aiStyle == 47)
 			{
 				Vector2 vector6 = new Vector2(nPC.Center.X, nPC.Center.Y);
@@ -21433,6 +_,7 @@
 				{
 					num19 += 66f;
 				}
+
 				float rotation6 = (float)Math.Atan2((double)num20, (double)num19) - 1.57f;
 				bool flag6 = true;
 				while (flag6)
@@ -21460,11 +_,13 @@
 						{
 							num19 += 66f;
 						}
+
 						Microsoft.Xna.Framework.Color color6 = Lighting.GetColor((int)vector6.X / 16, (int)(vector6.Y / 16f));
 						Main.spriteBatch.Draw(Main.chain21Texture, new Vector2(vector6.X - Main.screenPosition.X, vector6.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain21Texture.Width, Main.chain21Texture.Height)), color6, rotation6, new Vector2((float)Main.chain21Texture.Width * 0.5f, (float)Main.chain21Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
 					}
 				}
 			}
+
 			if (nPC.aiStyle >= 33 && nPC.aiStyle <= 36)
 			{
 				Vector2 vector7 = new Vector2(nPC.position.X + (float)nPC.width * 0.5f - 5f * nPC.ai[0], nPC.position.Y + 20f);
@@ -21491,6 +_,7 @@
 						vector7.X += num22 * num24;
 						vector7.Y += num23 * num24;
 					}
+
 					float rotation7 = (float)Math.Atan2((double)num23, (double)num22) - 1.57f;
 					Microsoft.Xna.Framework.Color color7 = Lighting.GetColor((int)vector7.X / 16, (int)(vector7.Y / 16f));
 					Main.spriteBatch.Draw(Main.boneArm2Texture, new Vector2(vector7.X - Main.screenPosition.X, vector7.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.boneArmTexture.Width, Main.boneArmTexture.Height)), color7, rotation7, new Vector2((float)Main.boneArmTexture.Width * 0.5f, (float)Main.boneArmTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
@@ -21508,6 +_,7 @@
 					}
 				}
 			}
+
 			if (nPC.aiStyle == 20)
 			{
 				Vector2 vector8 = new Vector2(nPC.position.X + (float)(nPC.width / 2), nPC.position.Y + (float)(nPC.height / 2));
@@ -21525,6 +_,7 @@
 						height2 = (int)num29 - 20 + 12;
 						flag7 = false;
 					}
+
 					num29 = 12f / num29;
 					num26 *= num29;
 					num27 *= num29;
@@ -21535,8 +_,10 @@
 					Microsoft.Xna.Framework.Color color8 = Lighting.GetColor((int)vector8.X / 16, (int)(vector8.Y / 16f));
 					Main.spriteBatch.Draw(Main.chainTexture, new Vector2(vector8.X - Main.screenPosition.X, vector8.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chainTexture.Width, height2)), color8, num28, new Vector2((float)Main.chainTexture.Width * 0.5f, (float)Main.chainTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
 				}
+
 				Main.spriteBatch.Draw(Main.spikeBaseTexture, new Vector2(nPC.ai[1] - Main.screenPosition.X, nPC.ai[2] - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.spikeBaseTexture.Width, Main.spikeBaseTexture.Height)), Lighting.GetColor((int)nPC.ai[1] / 16, (int)(nPC.ai[2] / 16f)), num28 - 0.75f, new Vector2((float)Main.spikeBaseTexture.Width * 0.5f, (float)Main.spikeBaseTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
 			}
+
 			Microsoft.Xna.Framework.Color color9 = Lighting.GetColor((int)((double)nPC.position.X + (double)nPC.width * 0.5) / 16, (int)(((double)nPC.position.Y + (double)nPC.height * 0.5) / 16.0));
 			if (type >= 277 && type <= 280)
 			{
@@ -21544,11 +_,13 @@
 				{
 					color9.R = 255;
 				}
+
 				if (color9.G < 175)
 				{
 					color9.G = 175;
 				}
 			}
+
 			if (type == -4)
 			{
 				int num30 = (int)color9.R;
@@ -21559,18 +_,22 @@
 				{
 					num30 = 255;
 				}
+
 				num31 *= 2;
 				if (num31 > 255)
 				{
 					num31 = 255;
 				}
+
 				num32 *= 2;
 				if (num32 > 255)
 				{
 					num32 = 255;
 				}
+
 				color9 = new Microsoft.Xna.Framework.Color(num30, num31, num32);
 			}
+
 			if (behindTiles && type != 113 && type != 114)
 			{
 				int num33 = (int)((nPC.position.X - 8f) / 16f);
@@ -21588,6 +_,7 @@
 					}
 				}
 			}
+
 			float num37 = 1f;
 			float num38 = 1f;
 			float num39 = 1f;
@@ -21600,10 +_,12 @@
 					Main.dust[num40].noGravity = true;
 					Main.dust[num40].fadeIn = 1.9f;
 				}
+
 				num37 *= 0.65f;
 				num39 *= 0.75f;
 				color9 = Main.buffColor(color9, num37, num38, num39, a);
 			}
+
 			if (nPC.venom)
 			{
 				if (Main.rand.Next(10) == 0)
@@ -21612,16 +_,19 @@
 					Main.dust[num41].noGravity = true;
 					Main.dust[num41].fadeIn = 1.5f;
 				}
+
 				num38 *= 0.45f;
 				num37 *= 0.75f;
 				color9 = Main.buffColor(color9, num37, num38, num39, a);
 			}
+
 			if (nPC.midas)
 			{
 				num39 *= 0.3f;
 				num37 *= 0.85f;
 				color9 = Main.buffColor(color9, num37, num38, num39, a);
 			}
+
 			if (nPC.shadowFlame && Main.rand.Next(5) < 4)
 			{
 				int num42 = Dust.NewDust(new Vector2(nPC.position.X - 2f, nPC.position.Y - 2f), nPC.width + 4, nPC.height + 4, 27, nPC.velocity.X * 0.4f, nPC.velocity.Y * 0.4f, 180, default(Microsoft.Xna.Framework.Color), 1.95f);
@@ -21637,6 +_,7 @@
 					Main.dust[num42].scale *= 0.5f;
 				}
 			}
+
 			if (nPC.onFire)
 			{
 				if (Main.rand.Next(4) < 3)
@@ -21652,8 +_,10 @@
 						Main.dust[num43].scale *= 0.5f;
 					}
 				}
+
 				Lighting.AddLight((int)(nPC.position.X / 16f), (int)(nPC.position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
 			}
+
 			if (nPC.daybreak)
 			{
 				if (Main.rand.Next(4) < 3)
@@ -21669,8 +_,10 @@
 						Main.dust[num44].scale *= 0.5f;
 					}
 				}
+
 				Lighting.AddLight((int)(nPC.position.X / 16f), (int)(nPC.position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
 			}
+
 			if (nPC.betsysCurse)
 			{
 				num37 *= 0.8f;
@@ -21688,8 +_,10 @@
 					Main.dust[num45].color = new Microsoft.Xna.Framework.Color(0, 0, 180, 255);
 					Main.dust[num45].velocity *= 0.2f;
 				}
+
 				Lighting.AddLight((int)(nPC.position.X / 16f), (int)(nPC.position.Y / 16f + 1f), 0.6f, 0.1f, 0.9f);
 			}
+
 			if (nPC.oiled)
 			{
 				num37 *= 0.7f;
@@ -21710,10 +_,12 @@
 						{
 							Main.dust[num46].alpha += 25;
 						}
+
 						if (Main.rand.Next(2) == 0)
 						{
 							Main.dust[num46].alpha += 25;
 						}
+
 						Main.dust[num46].noLight = true;
 						Main.dust[num46].velocity *= 0.2f;
 						Dust expr_2186_cp_0 = Main.dust[num46];
@@ -21722,6 +_,7 @@
 					}
 				}
 			}
+
 			if (nPC.dryadWard && nPC.velocity.X != 0f && Main.rand.Next(4) == 0)
 			{
 				int num47 = Dust.NewDust(new Vector2(nPC.position.X - 2f, nPC.position.Y + (float)nPC.height - 2f), nPC.width + 4, 4, 163, nPC.velocity.X * 0.4f, nPC.velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 1.5f);
@@ -21729,6 +_,7 @@
 				Main.dust[num47].noLight = true;
 				Main.dust[num47].velocity *= 0f;
 			}
+
 			if (nPC.dryadBane && Main.rand.Next(4) == 0)
 			{
 				int num48 = Dust.NewDust(new Vector2(nPC.position.X - 2f, nPC.position.Y), nPC.width + 4, nPC.height, 163, nPC.velocity.X * 0.4f, nPC.velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 1.5f);
@@ -21736,6 +_,7 @@
 				Main.dust[num48].velocity *= new Vector2(Main.rand.NextFloat() * 4f - 2f, 0f);
 				Main.dust[num48].noLight = true;
 			}
+
 			if (nPC.loveStruck && Main.rand.Next(5) == 0)
 			{
 				Vector2 value = new Vector2((float)Main.rand.Next(-10, 11), (float)Main.rand.Next(-10, 11));
@@ -21747,6 +_,7 @@
 				Gore expr_2481_cp_0 = Main.gore[num49];
 				expr_2481_cp_0.velocity.Y = expr_2481_cp_0.velocity.Y - 0.6f;
 			}
+
 			if (nPC.stinky)
 			{
 				num37 *= 0.7f;
@@ -21765,6 +_,7 @@
 					expr_25B5_cp_0.velocity.Y = expr_25B5_cp_0.velocity.Y - 0.5f;
 				}
 			}
+
 			if (nPC.dripping && Main.rand.Next(4) != 0)
 			{
 				Vector2 position2 = nPC.position;
@@ -21777,10 +_,12 @@
 					{
 						Main.dust[num51].alpha += 25;
 					}
+
 					if (Main.rand.Next(2) == 0)
 					{
 						Main.dust[num51].alpha += 25;
 					}
+
 					Main.dust[num51].noLight = true;
 					Main.dust[num51].velocity *= 0.2f;
 					Dust expr_26DA_cp_0 = Main.dust[num51];
@@ -21794,10 +_,12 @@
 					{
 						Main.dust[num52].alpha += 25;
 					}
+
 					if (Main.rand.Next(2) == 0)
 					{
 						Main.dust[num52].alpha += 25;
 					}
+
 					Main.dust[num52].noLight = true;
 					Main.dust[num52].noGravity = true;
 					Main.dust[num52].velocity *= 0.2f;
@@ -21806,6 +_,7 @@
 					Main.dust[num52].velocity += nPC.velocity;
 				}
 			}
+
 			if (nPC.drippingSlime)
 			{
 				if (Main.rand.Next(4) != 0)
@@ -21822,10 +_,12 @@
 						{
 							Main.dust[num53].alpha += 25;
 						}
+
 						if (Main.rand.Next(2) == 0)
 						{
 							Main.dust[num53].alpha += 25;
 						}
+
 						Main.dust[num53].noLight = true;
 						Main.dust[num53].velocity *= 0.2f;
 						Dust expr_2922_cp_0 = Main.dust[num53];
@@ -21833,14 +_,18 @@
 						Main.dust[num53].velocity += nPC.velocity;
 					}
 				}
+
 				num37 *= 0.8f;
 				num38 *= 0.8f;
 				color9 = Main.buffColor(color9, num37, num38, num39, a);
 			}
+
 			if (nPC.ichor)
 			{
+				//patch file: color9
 				color9 = new Microsoft.Xna.Framework.Color(255, 255, 0, 255);
 			}
+
 			if (nPC.onFrostBurn)
 			{
 				if (Main.rand.Next(4) < 3)
@@ -21856,8 +_,10 @@
 						Main.dust[num54].scale *= 0.5f;
 					}
 				}
+
 				Lighting.AddLight((int)(nPC.position.X / 16f), (int)(nPC.position.Y / 16f + 1f), 0.1f, 0.6f, 1f);
 			}
+
 			if (nPC.onFire2)
 			{
 				if (Main.rand.Next(4) < 3)
@@ -21873,8 +_,11 @@
 						Main.dust[num55].scale *= 0.5f;
 					}
 				}
+
 				Lighting.AddLight((int)(nPC.position.X / 16f), (int)(nPC.position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
 			}
+
+			NPCLoader.DrawEffects(nPC, ref color9);
 			if (Main.player[Main.myPlayer].detectCreature && nPC.lifeMax > 1)
 			{
 				byte b;
@@ -21892,19 +_,29 @@
 					b2 = 50;
 					b3 = 50;
 				}
+
 				if (color9.R < b)
 				{
 					color9.R = b;
 				}
+
 				if (color9.G < b2)
 				{
 					color9.G = b2;
 				}
+
 				if (color9.B < b3)
 				{
 					color9.B = b3;
 				}
 			}
+
+			if (!NPCLoader.PreDraw(Main.npc[iNPCIndex], Main.spriteBatch, color9))
+			{
+				NPCLoader.PostDraw(Main.npc[iNPCIndex], Main.spriteBatch, color9);
+				return;
+			}
+
 			if (type == 50)
 			{
 				Vector2 zero = Vector2.Zero;
@@ -21916,16 +_,20 @@
 				{
 					zero.Y += 2f;
 				}
+
 				if (nPC.frame.Y == 360)
 				{
 					zero.Y -= 2f;
 				}
+
 				if (nPC.frame.Y == 480)
 				{
 					zero.Y -= 6f;
 				}
+
 				Main.spriteBatch.Draw(Main.ninjaTexture, new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) + zero.X, nPC.position.Y - Main.screenPosition.Y + (float)(nPC.height / 2) + zero.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.ninjaTexture.Width, Main.ninjaTexture.Height)), color9, num56, new Vector2((float)(Main.ninjaTexture.Width / 2), (float)(Main.ninjaTexture.Height / 2)), 1f, SpriteEffects.None, 0f);
 			}
+
 			if (type == 71)
 			{
 				Vector2 zero2 = Vector2.Zero;
@@ -21937,20 +_,25 @@
 				{
 					zero2.Y += 2f;
 				}
+
 				if (nPC.frame.Y == 360)
 				{
 					zero2.Y -= 2f;
 				}
+
 				if (nPC.frame.Y == 480)
 				{
 					zero2.Y -= 6f;
 				}
+
 				Main.spriteBatch.Draw(Main.itemTexture[327], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) + zero2.X, nPC.position.Y - Main.screenPosition.Y + (float)(nPC.height / 2) + zero2.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[327].Width, Main.itemTexture[327].Height)), color9, num57, new Vector2((float)(Main.itemTexture[327].Width / 2), (float)(Main.itemTexture[327].Height / 2)), 1f, SpriteEffects.None, 0f);
 			}
+
 			if (type == 69)
 			{
 				Main.spriteBatch.Draw(Main.antLionTexture, new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2), nPC.position.Y - Main.screenPosition.Y + (float)nPC.height + 14f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.antLionTexture.Width, Main.antLionTexture.Height)), color9, -nPC.rotation * 0.3f, new Vector2((float)(Main.antLionTexture.Width / 2), (float)(Main.antLionTexture.Height / 2)), 1f, SpriteEffects.None, 0f);
 			}
+
 			if (type == 1 && nPC.ai[1] > 0f)
 			{
 				int num58 = (int)nPC.ai[1];
@@ -21965,12 +_,14 @@
 					num62 *= num59;
 					num63 *= num59;
 				}
+
 				if (num63 > num61)
 				{
 					num59 *= num61 / num63;
 					num62 *= num59;
 					num63 *= num59;
 				}
+
 				float num64 = -1f;
 				float num65 = 1f;
 				int num66 = nPC.frame.Y / (Main.npcTexture[type].Height / Main.npcFrameCount[type]);
@@ -21980,6 +_,7 @@
 				num67 -= 0.3f * (float)num66;
 				Main.spriteBatch.Draw(Main.itemTexture[num58], new Vector2(nPC.Center.X - Main.screenPosition.X + num64, nPC.Center.Y - Main.screenPosition.Y + nPC.gfxOffY + num65), null, color9, num67, new Vector2((float)(Main.itemTexture[num58].Width / 2), (float)(Main.itemTexture[num58].Height / 2)), num59, SpriteEffects.None, 0f);
 			}
+
 			float num68 = 0f;
 			float num69 = Main.NPCAddHeight(iNPCIndex);
 			Vector2 vector10 = new Vector2((float)(Main.npcTexture[type].Width / 2), (float)(Main.npcTexture[type].Height / Main.npcFrameCount[type] / 2));
@@ -22069,15 +_,18 @@
 			{
 				num69 += 6f;
 			}
+
 			if (nPC.aiStyle == 10 || type == 72)
 			{
 				color9 = Microsoft.Xna.Framework.Color.White;
 			}
+
 			SpriteEffects spriteEffects = SpriteEffects.None;
 			if (nPC.spriteDirection == 1)
 			{
 				spriteEffects = SpriteEffects.FlipHorizontally;
 			}
+
 			if (type == 124 && nPC.localAI[0] == 0f)
 			{
 				int num70 = 0;
@@ -22085,11 +_,13 @@
 				{
 					num70 += 4;
 				}
+
 				num70 += nPC.frame.Y / 56;
 				if (num70 >= Main.OffsetsPlayerHeadgear.Length)
 				{
 					num70 = 0;
 				}
+
 				float y = Main.OffsetsPlayerHeadgear[num70].Y;
 				this.LoadProjectile(582);
 				Texture2D texture2D = Main.projectileTexture[582];
@@ -22099,6 +_,7 @@
 				vector11 += new Vector2((float)(-(float)nPC.spriteDirection * 2), -2f);
 				Main.spriteBatch.Draw(texture2D, vector11, null, nPC.GetAlpha(color9), nPC.rotation, texture2D.Size() * new Vector2(0f, 0.5f), nPC.scale, spriteEffects, 0f);
 			}
+
 			if (type == 427 || type == 426 || type == 428 || type == 509 || type == 521 || type == 523 || type == 541 || (type >= 542 && type <= 545) || type == 546 || type == 552 || type == 553 || type == 554 || type == 561 || type == 562 || type == 563 || type == 555 || type == 556 || type == 557 || type == 558 || type == 559 || type == 560 || type == 574 || type == 575 || type == 568 || type == 569 || type == 572 || type == 573 || type == 566 || type == 567 || type == 570 || type == 578 || type == 571)
 			{
 				Texture2D texture2D2 = Main.npcTexture[type];
@@ -22122,62 +_,62 @@
 				{
 					case 426:
 						num76 = 4;
-						scaleFactor = 4f;
-						num77 = (float)Math.Cos((double)(Main.GlobalTime % 1.2f / 1.2f * 6.28318548f)) / 2f + 0.5f;
-						color10 = Microsoft.Xna.Framework.Color.Turquoise;
-						amount = 0.5f;
-						num71 = 6;
-						num72 = 2;
-						num74 = num71;
-						break;
+					scaleFactor = 4f;
+					num77 = (float)Math.Cos((double)(Main.GlobalTime % 1.2f / 1.2f * 6.28318548f)) / 2f + 0.5f;
+					color10 = Microsoft.Xna.Framework.Color.Turquoise;
+					amount = 0.5f;
+					num71 = 6;
+					num72 = 2;
+					num74 = num71;
+					break;
 					case 427:
 						num71 = 8;
-						num72 = 2;
-						num74 = num71 * 3;
-						break;
+					num72 = 2;
+					num74 = num71 * 3;
+					break;
 					default:
 						if (num79 != 509)
-						{
-							switch (num79)
-							{
-								case 521:
+					{
+						switch (num79)
+						{
+							case 521:
 									num71 = 10;
-									num72 = 2;
-									num74 = num71;
-									num75 = 1;
-									value3 = 0.3f;
-									break;
-								case 523:
+							num72 = 2;
+							num74 = num71;
+							num75 = 1;
+							value3 = 0.3f;
+							break;
+							case 523:
 									num76 = 3;
-									scaleFactor = 10f * nPC.scale;
-									amount = 0.5f;
-									amount2 = 0.8f;
-									color10 = Microsoft.Xna.Framework.Color.HotPink;
-									color10.A = 128;
-									num78 = nPC.localAI[0];
-									num77 = nPC.localAI[1];
-									break;
-								case 541:
+							scaleFactor = 10f * nPC.scale;
+							amount = 0.5f;
+							amount2 = 0.8f;
+							color10 = Microsoft.Xna.Framework.Color.HotPink;
+							color10.A = 128;
+							num78 = nPC.localAI[0];
+							num77 = nPC.localAI[1];
+							break;
+							case 541:
 									num76 = 4;
-									scaleFactor = 6f;
-									num77 = (float)Math.Cos((double)(Main.GlobalTime % 2.4f / 2.4f * 6.28318548f)) / 2f + 0.5f;
-									color10 = Microsoft.Xna.Framework.Color.Gold;
-									amount = 0.5f;
-									break;
-								case 542:
+							scaleFactor = 6f;
+							num77 = (float)Math.Cos((double)(Main.GlobalTime % 2.4f / 2.4f * 6.28318548f)) / 2f + 0.5f;
+							color10 = Microsoft.Xna.Framework.Color.Gold;
+							amount = 0.5f;
+							break;
+							case 542:
 								case 543:
 								case 544:
 								case 545:
 									num71 = 6;
-									num72 = 3;
-									num74 = num71 * 2;
-									break;
-								case 546:
+							num72 = 3;
+							num74 = num71 * 2;
+							break;
+							case 546:
 									num71 = 8;
-									num72 = 2;
-									num74 = num71 * 3;
-									break;
-								case 552:
+							num72 = 2;
+							num74 = num71 * 3;
+							break;
+							case 552:
 								case 553:
 								case 554:
 								case 555:
@@ -22193,79 +_,88 @@
 								case 572:
 								case 573:
 									num71 = 0;
-									if (type == 561 || type == 562 || type == 563)
-									{
-										num69 = -8f;
-									}
-									if (type == 555 || type == 556 || type == 557)
-									{
-										num69 = -5f;
-									}
-									if (type == 572 || type == 573)
-									{
-										num69 = -4f;
-									}
-									if (type == 570 || type == 571)
-									{
-										spriteEffects ^= SpriteEffects.FlipHorizontally;
-										num69 = -2f;
-									}
-									if (type == 568 || type == 569)
-									{
-										spriteEffects ^= SpriteEffects.FlipHorizontally;
-										num69 = -3f;
-										num76 = 4;
-										scaleFactor = 4f;
-										num77 = (float)Math.Cos((double)(Main.GlobalTime % 1.5f / 1.5f * 6.28318548f)) / 6f + 0.75f;
-										color10 = Microsoft.Xna.Framework.Color.HotPink;
-										color10.A = 127;
-										amount = 0.5f;
-									}
-									if (nPC.localAI[3] < 60f)
-									{
-										float num80 = 8f;
-										float num81 = nPC.localAI[3] / 60f;
-										num76 = 3;
-										num77 = 1f - num81 * num81;
-										scaleFactor = num80;
-										color10 = new Microsoft.Xna.Framework.Color(127, 0, 255, 0);
-										amount2 = 1f;
-										color11 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Transparent, color11, num81 * num81);
-									}
-									break;
-								case 558:
+							if (type == 561 || type == 562 || type == 563)
+							{
+								num69 = -8f;
+							}
+
+							if (type == 555 || type == 556 || type == 557)
+							{
+								num69 = -5f;
+							}
+
+							if (type == 572 || type == 573)
+							{
+								num69 = -4f;
+							}
+
+							if (type == 570 || type == 571)
+							{
+								spriteEffects ^= SpriteEffects.FlipHorizontally;
+								num69 = -2f;
+							}
+
+							if (type == 568 || type == 569)
+							{
+								spriteEffects ^= SpriteEffects.FlipHorizontally;
+								num69 = -3f;
+								num76 = 4;
+								scaleFactor = 4f;
+								num77 = (float)Math.Cos((double)(Main.GlobalTime % 1.5f / 1.5f * 6.28318548f)) / 6f + 0.75f;
+								color10 = Microsoft.Xna.Framework.Color.HotPink;
+								color10.A = 127;
+								amount = 0.5f;
+							}
+
+							if (nPC.localAI[3] < 60f)
+							{
+								float num80 = 8f;
+								float num81 = nPC.localAI[3] / 60f;
+								num76 = 3;
+								num77 = 1f - num81 * num81;
+								scaleFactor = num80;
+								color10 = new Microsoft.Xna.Framework.Color(127, 0, 255, 0);
+								amount2 = 1f;
+								color11 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Transparent, color11, num81 * num81);
+							}
+
+							break;
+							case 558:
 								case 559:
 								case 560:
 								case 574:
 								case 575:
 									if (nPC.ai[0] != 2f)
-									{
-										num71 = 0;
-									}
-									else
-									{
-										num71 = 6;
-										num72 = 2;
-										num74 = num71 * 3;
-										num75 = 1;
-									}
-									break;
-								case 566:
+							{
+								num71 = 0;
+							}
+							else
+							{
+								num71 = 6;
+								num72 = 2;
+								num74 = num71 * 3;
+								num75 = 1;
+							}
+
+							break;
+							case 566:
 								case 567:
 								case 578:
 									num71 = 0;
-									num69 = -2f;
-									break;
-							}
-						}
-						else
-						{
-							num71 = 6;
-							num72 = 2;
-							num74 = num71 * 3;
-						}
-						break;
-				}
+							num69 = -2f;
+							break;
+						}
+					}
+					else
+					{
+						num71 = 6;
+						num72 = 2;
+						num74 = num71 * 3;
+					}
+
+					break;
+				}
+
 				for (int n = num73; n < num71; n += num72)
 				{
 					Vector2 arg_3B84_0 = nPC.oldPos[n];
@@ -22278,12 +_,14 @@
 					{
 						float arg_3BC8_0 = nPC.oldRot[n];
 					}
+
 					float scale2 = MathHelper.Lerp(scale, value3, 1f - (float)(num71 - n) / (float)num74);
 					Vector2 vector12 = nPC.oldPos[n] + new Vector2((float)nPC.width, (float)nPC.height) / 2f - Main.screenPosition;
 					vector12 -= new Vector2((float)texture2D2.Width, (float)(texture2D2.Height / Main.npcFrameCount[type])) * nPC.scale / 2f;
 					vector12 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
 					Main.spriteBatch.Draw(texture2D2, vector12, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color12, nPC.rotation, vector10, scale2, spriteEffects, 0f);
 				}
+
 				for (int num82 = 0; num82 < num76; num82++)
 				{
 					Microsoft.Xna.Framework.Color color13 = color9;
@@ -22296,6 +_,7 @@
 					vector13 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
 					Main.spriteBatch.Draw(texture2D2, vector13, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color13, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 				}
+
 				Vector2 vector14 = nPC.Center - Main.screenPosition;
 				vector14 -= new Vector2((float)texture2D2.Width, (float)(texture2D2.Height / Main.npcFrameCount[type])) * nPC.scale / 2f;
 				vector14 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
@@ -22308,6 +_,7 @@
 				{
 					Main.spriteBatch.Draw(Main.glowMaskTexture[153], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(128 - nPC.alpha / 2, 128 - nPC.alpha / 2, 128 - nPC.alpha / 2, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 				}
+
 				if (type == 541)
 				{
 					Microsoft.Xna.Framework.Color color14 = new Microsoft.Xna.Framework.Color(127 - nPC.alpha, 127 - nPC.alpha, 127 - nPC.alpha, 0).MultiplyRGBA(Microsoft.Xna.Framework.Color.Gold);
@@ -22321,8 +_,10 @@
 						vector15 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
 						Main.spriteBatch.Draw(Main.glowMaskTexture[216], vector15, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color15, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 					}
+
 					Main.spriteBatch.Draw(Main.glowMaskTexture[216], vector14, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color14, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 				}
+
 				if ((type == 568 || type == 569) && nPC.localAI[3] >= 60f)
 				{
 					Microsoft.Xna.Framework.Color color16 = new Microsoft.Xna.Framework.Color(127 - nPC.alpha, 127 - nPC.alpha, 127 - nPC.alpha, 0).MultiplyRGBA(color10);
@@ -22336,6 +_,7 @@
 						vector16 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
 						Main.spriteBatch.Draw(Main.glowMaskTexture[224], vector16, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color17, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 					}
+
 					Main.spriteBatch.Draw(Main.glowMaskTexture[224], vector14, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color16, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 					float num85 = nPC.localAI[0];
 					if (num85 > 0f)
@@ -22349,6 +_,7 @@
 							color18 *= num87;
 							num86 = MathHelper.Lerp(1f, 0.5f, 1f - num87 * num87);
 						}
+
 						Texture2D texture2D3 = Main.extraTexture[89];
 						Vector2 origin = texture2D3.Size() / 2f;
 						Vector2 scale3 = new Vector2(num86);
@@ -22364,10 +_,12 @@
 						}
 					}
 				}
+
 				if (type == 546)
 				{
 					Main.spriteBatch.Draw(Main.extraTexture[76], vector14, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(255, 255, 255, 200), MathHelper.Clamp(nPC.velocity.X * 0.1f, -0.3926991f, 0.3926991f), vector10, nPC.scale, spriteEffects, 0f);
 				}
+
 				if ((type == 566 || type == 567) && nPC.localAI[3] >= 115f)
 				{
 					int frameY = (int)(Main.GlobalTime % 0.5f / 0.5f * 4f);
@@ -22380,32 +_,33 @@
 					{
 						case 0:
 							num93 = 6;
-							break;
+						break;
 						case 1:
 							num93 = 4;
-							break;
+						break;
 						case 2:
 							num93 = 2;
-							break;
+						break;
 						case 3:
 							num93 = 6;
-							break;
+						break;
 						case 4:
 							num93 = 8;
-							break;
+						break;
 						case 5:
 							num93 = 6;
-							break;
+						break;
 						case 6:
 							num93 = 4;
-							break;
+						break;
 						case 7:
 							num93 = 6;
-							break;
+						break;
 						case 8:
 							num93 = 2;
-							break;
-					}
+						break;
+					}
+
 					Microsoft.Xna.Framework.Color color19 = new Microsoft.Xna.Framework.Color(255, 255, 255, 130);
 					value4.Y += (float)num93;
 					Main.spriteBatch.Draw(texture2D4, vector14 + value4 * nPC.scale, new Microsoft.Xna.Framework.Rectangle?(rectangle), color19, MathHelper.Clamp(nPC.velocity.X * 0.1f, -0.3926991f, 0.3926991f), rectangle.Size() / 2f, nPC.scale * 0.7f, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
@@ -22435,32 +_,38 @@
 					{
 						spinningpoint2.X *= -1f;
 					}
+
 					Microsoft.Xna.Framework.Rectangle value7 = texture2D5.Frame(2, 5, num94 / 5, num94 % 5);
 					Vector2 origin2 = new Vector2(16f, 176f);
 					if (spriteEffects2.HasFlag(SpriteEffects.FlipHorizontally))
 					{
 						origin2.X = (float)value7.Width - origin2.X;
 					}
+
 					if (spriteEffects2.HasFlag(SpriteEffects.FlipHorizontally))
 					{
 						vector19.X = (float)frame.Width - vector19.X;
 					}
+
 					Texture2D texture2D6 = Main.extraTexture[81];
 					if (spriteEffects2.HasFlag(SpriteEffects.FlipHorizontally))
 					{
 						spinningpoint.X *= -1f;
 					}
+
 					Microsoft.Xna.Framework.Rectangle value8 = texture2D6.Frame(2, 5, num94 / 5, num94 % 5);
 					Vector2 origin3 = new Vector2(215f, 170f);
 					if (spriteEffects2.HasFlag(SpriteEffects.FlipHorizontally))
 					{
 						origin3.X = (float)value8.Width - origin3.X;
 					}
+
 					float num95 = Utils.InverseLerp(0f, 30f, nPC.localAI[1], true);
 					if (num95 == 1f)
 					{
 						num95 = Utils.InverseLerp(60f, 30f, nPC.localAI[1], true);
 					}
+
 					num95 = 2f;
 					Vector2 value9 = nPC.Size / 2f - Main.screenPosition;
 					int num96 = 9;
@@ -22477,12 +_,14 @@
 						Main.spriteBatch.Draw(texture, vector20, new Microsoft.Xna.Framework.Rectangle?(frame), color21, num100, vector19, 1f, spriteEffects2, 0f);
 						Main.spriteBatch.Draw(texture2D6, vector20 + spinningpoint.RotatedBy((double)num100, default(Vector2)), new Microsoft.Xna.Framework.Rectangle?(value8), color21, num100, origin3, 1f, spriteEffects2, 0f);
 					}
+
 					Main.spriteBatch.Draw(texture2D5, vector17 + spinningpoint2.RotatedBy((double)rotation8, default(Vector2)), new Microsoft.Xna.Framework.Rectangle?(value7), color20, rotation8, origin2, 1f, spriteEffects2, 0f);
 					Main.spriteBatch.Draw(texture, vector17, new Microsoft.Xna.Framework.Rectangle?(frame), color20, rotation8, vector19, 1f, spriteEffects2, 0f);
 					Main.spriteBatch.Draw(Main.glowMaskTexture[226], vector17, new Microsoft.Xna.Framework.Rectangle?(frame), value5 * (0.7f + 0.3f * num95), rotation8, vector19, 1f, spriteEffects2, 0f);
 					Main.spriteBatch.Draw(texture2D6, vector17 + spinningpoint.RotatedBy((double)rotation8, default(Vector2)), new Microsoft.Xna.Framework.Rectangle?(value8), color20, rotation8, origin3, 1f, spriteEffects2, 0f);
 					return;
 				}
+
 				if (type == 576 || type == 577)
 				{
 					Texture2D texture2D7 = Main.npcTexture[type];
@@ -22499,6 +_,7 @@
 					{
 						origin4.X = (float)(rectangle2.Width - num101);
 					}
+
 					Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
 					float amount3 = 0f;
 					float amount4 = 0f;
@@ -22514,6 +_,7 @@
 						amount4 = 1f;
 						color22 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Transparent, color22, num104 * num104);
 					}
+
 					for (int num105 = 0; num105 < num102; num105++)
 					{
 						Microsoft.Xna.Framework.Color color23 = color9;
@@ -22526,9 +_,11 @@
 						vector22 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
 						Main.spriteBatch.Draw(texture2D7, vector22, new Microsoft.Xna.Framework.Rectangle?(rectangle2), color23, nPC.rotation, origin4, nPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
 					}
+
 					Main.spriteBatch.Draw(texture2D7, vector21, new Microsoft.Xna.Framework.Rectangle?(rectangle2), nPC.GetAlpha(color22), nPC.rotation, origin4, nPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
 					return;
 				}
+
 				if (type == 564 || type == 565)
 				{
 					Texture2D texture2D8 = Main.npcTexture[type];
@@ -22545,6 +_,7 @@
 					{
 						origin5.X = (float)(rectangle3.Width - num106);
 					}
+
 					Microsoft.Xna.Framework.Color white2 = Microsoft.Xna.Framework.Color.White;
 					float amount5 = 0f;
 					float amount6 = 0f;
@@ -22563,6 +_,7 @@
 						amount6 = 1f;
 						color24 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Transparent, color24, num110 * num110);
 					}
+
 					for (int num111 = 0; num111 < num107; num111++)
 					{
 						Microsoft.Xna.Framework.Color color25 = color9;
@@ -22576,6 +_,7 @@
 						vector24 += ((float)num111 / (float)num107 * 6.28318548f).ToRotationVector2() * scaleFactor2 * num108;
 						Main.spriteBatch.Draw(texture2D8, vector24, new Microsoft.Xna.Framework.Rectangle?(rectangle3), color25, nPC.rotation, origin5, nPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
 					}
+
 					Microsoft.Xna.Framework.Color alpha3 = nPC.GetAlpha(color24);
 					num107 = 4;
 					scaleFactor2 = 4f;
@@ -22590,6 +_,7 @@
 						vector25 += ((float)num112 / (float)num107 * 6.28318548f).ToRotationVector2() * scaleFactor2 * num108;
 						Main.spriteBatch.Draw(texture2D8, vector25, new Microsoft.Xna.Framework.Rectangle?(rectangle3), color26, nPC.rotation, origin5, nPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
 					}
+
 					Main.spriteBatch.Draw(texture2D8, vector23, new Microsoft.Xna.Framework.Rectangle?(rectangle3), alpha3, nPC.rotation, origin5, nPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
 					if (nPC.Opacity > 0f)
 					{
@@ -22610,6 +_,7 @@
 							vector26 += ((float)num113 / (float)num107 * 6.28318548f).ToRotationVector2() * scaleFactor2 * num108;
 							Main.spriteBatch.Draw(Main.glowMaskTexture[225], vector26, new Microsoft.Xna.Framework.Rectangle?(rectangle3), color28, nPC.rotation, origin5, nPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
 						}
+
 						return;
 					}
 				}
@@ -22642,6 +_,7 @@
 						vector28 += ((float)num116 / (float)num114 * 6.28318548f).ToRotationVector2() * scaleFactor3 * num115;
 						Main.spriteBatch.Draw(texture2D9, vector28, new Microsoft.Xna.Framework.Rectangle?(rectangle4), color29, nPC.rotation, origin6, nPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
 					}
+
 					Microsoft.Xna.Framework.Color alpha4 = nPC.GetAlpha(newColor3);
 					num114 = 4;
 					scaleFactor3 = 4f;
@@ -22657,6 +_,7 @@
 						vector29 += ((float)num117 / (float)num114 * 6.28318548f).ToRotationVector2() * scaleFactor3 * num115;
 						Main.spriteBatch.Draw(texture2D9, vector29, new Microsoft.Xna.Framework.Rectangle?(rectangle4), color30, nPC.rotation, origin6, nPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
 					}
+
 					Main.spriteBatch.Draw(texture2D9, vector27, new Microsoft.Xna.Framework.Rectangle?(rectangle4), alpha4, nPC.rotation, origin6, nPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
 					if (nPC.ai[1] == 2f)
 					{
@@ -22671,8 +_,10 @@
 						{
 							Filters.Scene["CrystalWin"].GetShader().UseProgress(progress);
 						}
+
 						Filters.Scene["CrystalWin"].GetShader().UseTargetPosition(nPC.Center);
 					}
+
 					num114 = 4;
 					scaleFactor3 = 4f;
 					num115 = 0.625f + (float)Math.Sin((double)(Main.GlobalTime * 6.28318548f * 0.75f)) * 0.125f;
@@ -22688,6 +_,7 @@
 						vector30 += ((float)num118 / (float)num114 * 6.28318548f).ToRotationVector2() * scaleFactor3 * num115;
 						Main.spriteBatch.Draw(texture2D9, vector30, new Microsoft.Xna.Framework.Rectangle?(rectangle4), color31, nPC.rotation, origin6, nPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
 					}
+
 					if (nPC.alpha < 255)
 					{
 						float num119 = Main.GlobalTime % 3f / 3f;
@@ -22696,20 +_,24 @@
 						{
 							num120 = 1f - num119;
 						}
+
 						if (num120 < 0f)
 						{
 							num120 = 0f;
 						}
+
 						float num121 = (num119 + 0.5f) % 1f;
 						float num122 = num121;
 						if (num122 > 0.5f)
 						{
 							num122 = 1f - num121;
 						}
+
 						if (num122 < 0f)
 						{
 							num122 = 0f;
 						}
+
 						texture2D9 = Main.glowMaskTexture[239];
 						rectangle4 = texture2D9.Frame(1, 1, 0, 0);
 						origin6 = rectangle4.Size() / 2f;
@@ -22730,6 +_,7 @@
 						{
 							scale5.Y *= 0.6f;
 						}
+
 						position5.Y -= 6f;
 						Main.spriteBatch.Draw(texture2D9, position5, new Microsoft.Xna.Framework.Rectangle?(rectangle4), color32 * num122, nPC.rotation + 1.57079637f, origin6, scale5, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
 						Main.spriteBatch.Draw(texture2D9, position5, new Microsoft.Xna.Framework.Rectangle?(rectangle4), Microsoft.Xna.Framework.Color.Lerp(color32, Microsoft.Xna.Framework.Color.White, 0.5f), nPC.rotation + 1.57079637f, origin6, 1.5f, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
@@ -22747,6 +_,7 @@
 						Main.spriteBatch.Draw(texture2D10, vector31, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), nPC.GetAlpha(color9), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 						return;
 					}
+
 					if (type == 549)
 					{
 						Texture2D texture2 = Main.npcTexture[type];
@@ -22760,6 +_,7 @@
 						{
 							vector33 *= num123 / 240f + 0.5f;
 						}
+
 						Microsoft.Xna.Framework.Color alpha5 = nPC.GetAlpha(color9);
 						float num124 = Utils.InverseLerp(0f, 120f, num123, true);
 						float scaleFactor4 = MathHelper.Lerp(32f, 0f, num124);
@@ -22770,6 +_,7 @@
 						{
 							color33 = alpha5;
 						}
+
 						Main.spriteBatch.Draw(texture2, vector32, new Microsoft.Xna.Framework.Rectangle?(frame2), color33, nPC.rotation, origin7, vector33, spriteEffects, 0f);
 						float num125 = (nPC.ai[0] + 54f) % 180f;
 						num125 -= 120f;
@@ -22787,11 +_,13 @@
 								Main.spriteBatch.Draw(texture2, vector32 + (6.28318548f / num126 * num127).ToRotationVector2() * scaleFactor4, new Microsoft.Xna.Framework.Rectangle?(frame2), color33, nPC.rotation, origin7, vector33, spriteEffects, 0f);
 							}
 						}
+
 						float num128 = nPC.ai[0] / 180f - 0.76f;
 						if (num128 < 0f)
 						{
 							num128 += 1f;
 						}
+
 						float num129 = 0f;
 						float num130 = 0f;
 						float num131 = 0.6f;
@@ -22801,6 +_,7 @@
 							num129 = Utils.InverseLerp(num131, num132, num128, false);
 							num130 = MathHelper.Lerp(0.75f, 0.85f, num129);
 						}
+
 						num131 = num132;
 						num132 = num131 + 0.13f;
 						if (num128 >= num131 && num128 <= num132)
@@ -22808,6 +_,7 @@
 							num129 = 1f - Utils.InverseLerp(num131, num132, num128, false);
 							num130 = MathHelper.Lerp(1.3f, 0.85f, num129);
 						}
+
 						Vector2 value10 = new Vector2(0f, -150f);
 						int frameNumber = frame2.Y / frame2.Height;
 						float num133 = MathHelper.Clamp((num123 - 100f) / 40f, 0f, 1f);
@@ -22817,6 +_,7 @@
 						{
 							this.DrawElderEye(Main.spriteBatch, nPC.Center + value10, num129 * 0.5f, num130, frameNumber, new Microsoft.Xna.Framework.Color(255, 255, 255, 127));
 						}
+
 						if (num123 < 120f)
 						{
 							float num134 = 6.28318548f * num124 * (float)Math.Pow((double)num124, 2.0) * 2f + num124;
@@ -22826,6 +_,7 @@
 							{
 								Main.spriteBatch.Draw(texture2, vector32 + (num134 + 6.28318548f / num135 * num136).ToRotationVector2() * scaleFactor4, new Microsoft.Xna.Framework.Rectangle?(frame2), color33, nPC.rotation, origin7, vector33, spriteEffects, 0f);
 							}
+
 							return;
 						}
 					}
@@ -22873,6 +_,7 @@
 								Main.spriteBatch.Draw(texture2D11, vector34 + nPC.velocity.RotatedBy((double)((float)num140 * 1.57079637f), default(Vector2)) * scaleFactor8 + Vector2.UnitX * 2f, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0) * nPC.Opacity, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 							}
 						}
+
 						int num141 = 0;
 						string key = "";
 						int num79 = type;
@@ -22905,6 +_,7 @@
 							num141 = NPC.ShieldStrengthTowerNebula;
 							key = "Nebula";
 						}
+
 						float num142 = (float)num141 / (float)NPC.ShieldStrengthTowerMax;
 						if (num141 > 0)
 						{
@@ -22915,6 +_,7 @@
 							{
 								num143 = 1f - nPC.ai[3] / 30f;
 							}
+
 							Filters.Scene[key].GetShader().UseIntensity(1f + num143).UseProgress(0f);
 							DrawData value12 = new DrawData(TextureManager.Load("Images/Misc/Perlin"), value11 + new Vector2(300f, 300f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 600, 600)), Microsoft.Xna.Framework.Color.White * (num142 * 0.8f + 0.2f), nPC.rotation, new Vector2(300f, 300f), nPC.scale * (1f + num143 * 0.05f), spriteEffects, 0);
 							GameShaders.Misc["ForceField"].UseColor(new Vector3(1f + num143 * 0.5f));
@@ -22924,6 +_,7 @@
 							Main.spriteBatch.Begin();
 							return;
 						}
+
 						if (nPC.ai[3] > 0f)
 						{
 							Main.spriteBatch.End();
@@ -22939,6 +_,7 @@
 							Main.spriteBatch.Begin();
 							return;
 						}
+
 						Filters.Scene[key].GetShader().UseIntensity(0f).UseProgress(0f);
 						return;
 					}
@@ -22966,6 +_,7 @@
 								{
 									texture2D12 = Main.npcTexture[403];
 								}
+
 								Main.spriteBatch.Draw(texture2D12, vector35 + nPC2.oldPos[num148] - nPC2.position, null, nPC2.GetAlpha(color9) * (0.8f - num147 * (float)num148 / 2f), nPC2.oldRot[num148], vector10, nPC2.scale, spriteEffects, 0f);
 								if (num146 == 0)
 								{
@@ -22975,16 +_,19 @@
 								{
 									texture2D12 = Main.glowMaskTexture[133];
 								}
+
 								Main.spriteBatch.Draw(texture2D12, vector35 + nPC2.oldPos[num148] - nPC2.position, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * (1f - num147 * (float)num148 / 2f), nPC2.oldRot[num148], vector10, nPC2.scale, spriteEffects, 0f);
 								num146++;
 								num148 -= 2;
 							}
+
 							texture2D12 = Main.npcTexture[nPC2.type];
 							Main.spriteBatch.Draw(texture2D12, vector35, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), nPC.GetAlpha(color9), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 							texture2D12 = Main.glowMaskTexture[135];
 							Main.spriteBatch.Draw(texture2D12, vector35, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 							return;
 						}
+
 						if (type == 519)
 						{
 							NPC nPC3 = nPC;
@@ -23007,8 +_,10 @@
 								num149++;
 								num151--;
 							}
+
 							return;
 						}
+
 						if (type == 522)
 						{
 							NPC nPC4 = nPC;
@@ -23029,14 +_,17 @@
 								num153++;
 								num155--;
 							}
+
 							texture2D14 = Main.extraTexture[57];
 							Main.spriteBatch.Draw(texture2D14, vector37, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), 0f, texture2D14.Size() / 2f, nPC.scale, spriteEffects, 0f);
 							return;
 						}
+
 						if (type == 488)
 						{
 							return;
 						}
+
 						if (type == 370 || type == 372 || type == 373)
 						{
 							Texture2D texture2D15 = Main.npcTexture[type];
@@ -23061,6 +_,7 @@
 								num159 /= (float)num158;
 								color9 = Main.buffColor(color9, 1f - 0.5f * num159, 1f - 0.3f * num159, 1f - 0.5f * num159, 1f);
 							}
+
 							int num160 = 10;
 							int num161 = 2;
 							if (type == 370)
@@ -23069,10 +_,12 @@
 								{
 									num160 = 0;
 								}
+
 								if (nPC.ai[0] == 0f || nPC.ai[0] == 5f || nPC.ai[0] == 10f)
 								{
 									num160 = 7;
 								}
+
 								if (nPC.ai[0] == 1f)
 								{
 									color36 = Microsoft.Xna.Framework.Color.Blue;
@@ -23088,6 +_,7 @@
 								color36 = Microsoft.Xna.Framework.Color.Blue;
 								amount9 = 0.5f;
 							}
+
 							for (int num162 = 1; num162 < num160; num162 += num161)
 							{
 								Vector2 arg_7753_0 = nPC.oldPos[num162];
@@ -23100,6 +_,7 @@
 								vector38 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
 								Main.spriteBatch.Draw(texture2D15, vector38, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color38, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 							}
+
 							int num163 = 0;
 							float num164 = 0f;
 							float scaleFactor9 = 0f;
@@ -23109,6 +_,7 @@
 								{
 									num163 = 0;
 								}
+
 								if (nPC.ai[0] == 3f || nPC.ai[0] == 8f)
 								{
 									int num165 = 60;
@@ -23121,6 +_,7 @@
 										scaleFactor9 = 40f;
 									}
 								}
+
 								if (nPC.ai[0] == 4f && nPC.ai[2] > (float)num157)
 								{
 									num163 = 6;
@@ -23128,6 +_,7 @@
 									num164 /= 3f;
 									scaleFactor9 = 60f;
 								}
+
 								if (nPC.ai[0] == 9f && nPC.ai[2] > (float)num157)
 								{
 									num163 = 6;
@@ -23135,6 +_,7 @@
 									num164 /= 3f;
 									scaleFactor9 = 60f;
 								}
+
 								if (nPC.ai[0] == 12f)
 								{
 									num163 = 6;
@@ -23143,6 +_,7 @@
 									scaleFactor9 = 20f;
 								}
 							}
+
 							for (int num167 = 0; num167 < num163; num167++)
 							{
 								Microsoft.Xna.Framework.Color color39 = color9;
@@ -23154,6 +_,7 @@
 								vector39 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
 								Main.spriteBatch.Draw(texture2D15, vector39, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color39, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 							}
+
 							Vector2 vector40 = nPC.Center - Main.screenPosition;
 							vector40 -= new Vector2((float)texture2D15.Width, (float)(texture2D15.Height / Main.npcFrameCount[type])) * nPC.scale / 2f;
 							vector40 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
@@ -23174,6 +_,7 @@
 									color36 *= num168;
 									color40 *= num168;
 								}
+
 								if (nPC.ai[0] == 12f)
 								{
 									float num169 = nPC.ai[2];
@@ -23182,11 +_,13 @@
 									{
 										num169 = 1f - num169;
 									}
+
 									num169 *= 2f;
 									num169 = 1f - num169;
 									color36 *= num169;
 									color40 *= num169;
 								}
+
 								for (int num170 = 1; num170 < num160; num170 += num161)
 								{
 									Vector2 arg_7DEB_0 = nPC.oldPos[num170];
@@ -23198,6 +_,7 @@
 									vector41 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
 									Main.spriteBatch.Draw(texture2D15, vector41, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color41, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 								}
+
 								for (int num171 = 1; num171 < num163; num171++)
 								{
 									Microsoft.Xna.Framework.Color color42 = color40;
@@ -23209,6 +_,7 @@
 									vector42 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
 									Main.spriteBatch.Draw(texture2D15, vector42, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color42, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 								}
+
 								Main.spriteBatch.Draw(texture2D15, vector40, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color40, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 								return;
 							}
@@ -23226,6 +_,7 @@
 								{
 									rectangle5.Y += rectangle5.Height;
 								}
+
 								Microsoft.Xna.Framework.Color white4 = Microsoft.Xna.Framework.Color.White;
 								float amount10 = 0f;
 								Microsoft.Xna.Framework.Color color43 = color9;
@@ -23255,6 +_,7 @@
 								{
 									color43 = color9;
 								}
+
 								for (int num176 = num175; num176 < num173; num176 += num174)
 								{
 									Vector2 arg_8222_0 = nPC.oldPos[num176];
@@ -23268,6 +_,7 @@
 									vector43 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
 									Main.spriteBatch.Draw(texture2D17, vector43, new Microsoft.Xna.Framework.Rectangle?(rectangle5), color44, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 								}
+
 								int num177 = 0;
 								float num178 = 0f;
 								float scaleFactor10 = 0f;
@@ -23278,6 +_,7 @@
 									num178 /= 2f;
 									scaleFactor10 = 70f;
 								}
+
 								for (int num179 = 0; num179 < num177; num179++)
 								{
 									Microsoft.Xna.Framework.Color color45 = color9;
@@ -23289,12 +_,14 @@
 									vector44 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
 									Main.spriteBatch.Draw(texture2D17, vector44, new Microsoft.Xna.Framework.Rectangle?(rectangle5), color45, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 								}
+
 								Vector2 vector45 = nPC.Center - Main.screenPosition;
 								vector45 -= new Vector2((float)texture2D16.Width, (float)(texture2D16.Height / Main.npcFrameCount[type])) * nPC.scale / 2f;
 								vector45 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
 								Main.spriteBatch.Draw(texture2D16, vector45, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), nPC.GetAlpha(color9), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 								return;
 							}
+
 							if (type == 392 || type == 393 || type == 394 || type == 395)
 							{
 								Texture2D texture3 = Main.npcTexture[type];
@@ -23305,15 +_,18 @@
 								{
 									scaleFactor11 = -8f;
 								}
+
 								Main.spriteBatch.Draw(texture3, vector46, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), nPC.GetAlpha(color9), nPC.rotation, vector10 + Vector2.UnitY * scaleFactor11, nPC.scale, spriteEffects, 0f);
 								if (type == 392)
 								{
 									Main.spriteBatch.Draw(Main.glowMaskTexture[48], vector46, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), nPC.rotation, vector10 + Vector2.UnitY * scaleFactor11, nPC.scale, spriteEffects, 0f);
 								}
+
 								if (type == 395)
 								{
 									Main.spriteBatch.Draw(Main.glowMaskTexture[49], vector46, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), nPC.rotation, vector10 + Vector2.UnitY * scaleFactor11, nPC.scale, spriteEffects, 0f);
 								}
+
 								if (type == 394)
 								{
 									Main.spriteBatch.Draw(Main.glowMaskTexture[50], vector46, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), nPC.rotation, vector10 + Vector2.UnitY * scaleFactor11, nPC.scale, spriteEffects, 0f);
@@ -23327,6 +_,7 @@
 									Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), Microsoft.Xna.Framework.Color.White, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 									return;
 								}
+
 								if (type >= 87 && type <= 92)
 								{
 									Microsoft.Xna.Framework.Color alpha6 = nPC.GetAlpha(color9);
@@ -23335,17 +_,21 @@
 									{
 										alpha6.R = b5;
 									}
+
 									if (alpha6.G < b5)
 									{
 										alpha6.G = b5;
 									}
+
 									if (alpha6.B < b5)
 									{
 										alpha6.B = b5;
 									}
+
 									Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), alpha6, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 									return;
 								}
+
 								if (type == 491)
 								{
 									NPC nPC5 = nPC;
@@ -23368,6 +_,7 @@
 									{
 										Main.spriteBatch.Draw(texture2D18, vector47 + (new Vector2((float)(-96 + 34 * num181), 40f) * value14).RotatedBy((double)nPC5.rotation, default(Vector2)), new Microsoft.Xna.Framework.Rectangle?(rectangle6), alpha7, nPC5.rotation, origin8, nPC5.scale, spriteEffects, 0f);
 									}
+
 									texture2D18 = Main.extraTexture[42];
 									rectangle6 = texture2D18.Frame(1, 4, 0, num180 % 4);
 									origin8 = rectangle6.Size() * new Vector2(0.5f, 0f);
@@ -23375,6 +_,7 @@
 									{
 										Main.spriteBatch.Draw(texture2D18, vector47 + (new Vector2((float)(158 - 106 * num182), -302f) * value14).RotatedBy((double)nPC5.rotation, default(Vector2)), new Microsoft.Xna.Framework.Rectangle?(rectangle6), alpha7, nPC5.rotation, origin8, nPC5.scale, spriteEffects, 0f);
 									}
+
 									texture2D18 = Main.extraTexture[43];
 									rectangle6 = texture2D18.Frame(1, 4, 0, num180 % 4);
 									origin8 = rectangle6.Size() * new Vector2(0.5f, 0f);
@@ -23382,6 +_,7 @@
 									{
 										Main.spriteBatch.Draw(texture2D18, vector47 + (new Vector2((float)(42 - 178 * num183), -444f) * value14).RotatedBy((double)nPC5.rotation, default(Vector2)), new Microsoft.Xna.Framework.Rectangle?(rectangle6), alpha7, nPC5.rotation, origin8, nPC5.scale, spriteEffects, 0f);
 									}
+
 									texture2D18 = Main.extraTexture[44];
 									rectangle6 = texture2D18.Frame(1, 4, 0, num180 % 4);
 									origin8 = rectangle6.Size() * new Vector2(0.5f, 0f);
@@ -23405,6 +_,7 @@
 												Main.spriteBatch.Draw(texture2D18, vector47 + (new Vector2((float)(-122 + 68 * num184), -20f) * value14).RotatedBy((double)nPC5.rotation, default(Vector2)), new Microsoft.Xna.Framework.Rectangle?(rectangle6), alpha7, nPC5.rotation, origin8, nPC5.scale, spriteEffects, 0f);
 											}
 										}
+
 										return;
 									}
 								}
@@ -23440,6 +_,7 @@
 													break;
 												}
 											}
+
 											if (num188 != -1)
 											{
 												Vector2 vector49 = center + value15 * value17;
@@ -23449,6 +_,7 @@
 												{
 													Main.dust[Dust.NewDust(vector49 + vector50, 0, 0, 6, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f)].noGravity = true;
 												}
+
 												float num190 = (float)Math.Acos((double)(vector50.Length() / num186)) * -value17.X;
 												SpriteEffects effects = flag11 ? SpriteEffects.None : SpriteEffects.FlipHorizontally;
 												Vector2 origin11 = vector48;
@@ -23456,27 +_,32 @@
 												{
 													origin11.X = (float)texture2D19.Width - origin11.X;
 												}
+
 												Main.spriteBatch.Draw(texture2D19, vector49 - Main.screenPosition, null, alpha8, vector50.ToRotation() - num190 - 1.57079637f, origin11, 1f, effects, 0f);
 												if (flag10)
 												{
 													Main.dust[Dust.NewDust(vector49, 0, 0, 6, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f)].noGravity = true;
 												}
+
 												if (flag10)
 												{
 													Main.dust[Dust.NewDust(center, 0, 0, 6, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f)].noGravity = true;
 												}
+
 												if (flag10)
 												{
 													Main.dust[Dust.NewDust(vector49 + new Vector2(0f, num186).RotatedBy((double)(vector50.ToRotation() - num190 - 1.57079637f), default(Vector2)), 0, 0, 6, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f)].noGravity = true;
 												}
 											}
 										}
+
 										Main.spriteBatch.Draw(texture2D20, center - Main.screenPosition, null, alpha8, 0f, origin9, 1f, SpriteEffects.None, 0f);
 										Main.spriteBatch.Draw(texture2D20, center - Main.screenPosition, null, alpha8, 0f, origin10, 1f, SpriteEffects.FlipHorizontally, 0f);
 										Main.spriteBatch.Draw(texture5, center - Main.screenPosition, null, alpha8, 0f, new Vector2(112f, 101f), 1f, SpriteEffects.None, 0f);
 										Main.spriteBatch.Draw(texture4, center - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), alpha8, 0f, nPC.frame.Size() / 2f, 1f, SpriteEffects.None, 0f);
 										return;
 									}
+
 									if (type == 397)
 									{
 										Texture2D texture2D21 = Main.npcTexture[type];
@@ -23496,6 +_,7 @@
 										{
 											origin12.X = (float)texture2D21.Width - origin12.X;
 										}
+
 										Texture2D texture2D23 = Main.extraTexture[17];
 										Texture2D texture2D24 = Main.extraTexture[19];
 										Vector2 vector52 = new Vector2(26f, 42f);
@@ -23503,6 +_,7 @@
 										{
 											vector52.X = (float)texture2D23.Width - vector52.X;
 										}
+
 										Vector2 value22 = new Vector2(30f, 66f);
 										Vector2 value23 = new Vector2(1f * -value21.X, 3f);
 										Texture2D texture2D25 = Main.extraTexture[26];
@@ -23517,6 +_,7 @@
 										{
 											origin13.X = (float)texture2D22.Width - origin13.X;
 										}
+
 										float num193 = (float)Math.Acos((double)(vector54.Length() / num192)) * -value21.X;
 										Main.spriteBatch.Draw(texture2D22, vector53 - Main.screenPosition, null, alpha9, vector54.ToRotation() + num193 - 1.57079637f, origin13, 1f, spriteEffects, 0f);
 										if (nPC.ai[0] == -2f)
@@ -23532,9 +_,11 @@
 											Vector2 value26 = Utils.Vector2FromElipse(nPC.localAI[0].ToRotationVector2(), value22 * nPC.localAI[1]);
 											Main.spriteBatch.Draw(texture2D24, nPC.Center - Main.screenPosition + value26 + value23, null, alpha9, 0f, new Vector2((float)texture2D24.Width, (float)texture2D24.Height) / 2f, 1f, SpriteEffects.None, 0f);
 										}
+
 										Main.spriteBatch.Draw(texture2D21, nPC.Center - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), alpha9, 0f, origin12, 1f, spriteEffects, 0f);
 										return;
 									}
+
 									if (type == 396)
 									{
 										Texture2D texture6 = Main.npcTexture[type];
@@ -23573,11 +_,13 @@
 											Vector2 value32 = Utils.Vector2FromElipse(nPC.localAI[0].ToRotationVector2(), value27 * nPC.localAI[1]);
 											Main.spriteBatch.Draw(texture2D26, nPC.Center - Main.screenPosition + value32 + value28, null, alpha10, nPC.rotation, new Vector2((float)texture2D26.Width, (float)texture2D26.Height) / 2f, 1f, SpriteEffects.None, 0f);
 										}
+
 										Main.spriteBatch.Draw(texture6, nPC.Center - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), alpha10, nPC.rotation, origin14, 1f, spriteEffects, 0f);
 										Main.spriteBatch.Draw(texture2D28, (nPC.Center - Main.screenPosition + value30).Floor(), new Microsoft.Xna.Framework.Rectangle?(rectangle8), alpha10, nPC.rotation, rectangle8.Size() / 2f, 1f, spriteEffects, 0f);
 										Main.spriteBatch.Draw(texture2D27, (nPC.Center - Main.screenPosition + value29).Floor(), new Microsoft.Xna.Framework.Rectangle?(rectangle7), alpha10, nPC.rotation, rectangle7.Size() / 2f, 1f, spriteEffects, 0f);
 										return;
 									}
+
 									if (type == 400)
 									{
 										Texture2D texture8 = Main.npcTexture[type];
@@ -23592,10 +_,12 @@
 										Main.spriteBatch.Draw(texture2D30, nPC.Center - Main.screenPosition + value34, null, alpha11, nPC.rotation, texture2D30.Size() / 2f, nPC.localAI[2], SpriteEffects.None, 0f);
 										return;
 									}
+
 									if (type == 384)
 									{
 										return;
 									}
+
 									if (type == 416)
 									{
 										int num196 = -1;
@@ -23606,6 +_,7 @@
 										{
 											num196 = num197;
 										}
+
 										if (num196 != -1)
 										{
 											Vector2 position7 = nPC.position;
@@ -23615,20 +_,24 @@
 											nPC.gfxOffY = Main.npc[num196].gfxOffY;
 											spinningpoint3 = Main.npc[num196].velocity;
 										}
+
 										Microsoft.Xna.Framework.Rectangle frame3 = nPC.frame;
 										Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(position6.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, position6.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame3), nPC.GetAlpha(color9), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 										if (nPC.color != default(Microsoft.Xna.Framework.Color))
 										{
 											Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(position6.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, position6.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame3), nPC.GetColor(color9), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 										}
+
 										Main.spriteBatch.Draw(Main.glowMaskTexture[156], position6 + nPC.Size * new Vector2(0.5f, 1f) - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(255 - nPC.alpha, 255 - nPC.alpha, 255 - nPC.alpha, 255 - nPC.alpha), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 										float scaleFactor13 = 0.5f + (nPC.GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 0.5f;
 										for (int num198 = 0; num198 < 4; num198++)
 										{
 											Main.spriteBatch.Draw(Main.glowMaskTexture[156], position6 + nPC.Size * new Vector2(0.5f, 1f) - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY) + spinningpoint3.RotatedBy((double)((float)num198 * 1.57079637f), default(Vector2)) * scaleFactor13, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 										}
+
 										return;
 									}
+
 									if (type == 399)
 									{
 										Texture2D texture2D31 = Main.npcTexture[type];
@@ -23644,18 +_,22 @@
 											{
 												color46 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.LimeGreen, Microsoft.Xna.Framework.Color.Red, MathHelper.Clamp(nPC.ai[1] / 20f, 0f, 1f));
 											}
+
 											if (nPC.ai[0] == 2f)
 											{
 												color46 = Microsoft.Xna.Framework.Color.Red;
 											}
+
 											color46 *= 1f - num201;
 											color46.A = 0;
 											for (int num202 = 0; num202 < 2; num202++)
 											{
 												Main.spriteBatch.Draw(Main.extraTexture[27], nPC.Center - Main.screenPosition + Vector2.UnitY * (nPC.gfxOffY - 4f + 6f), null, color46, 1.57079637f, new Vector2(10f, 48f), num201 * 4f, SpriteEffects.None, 0f);
 											}
+
 											num200++;
 										}
+
 										Main.spriteBatch.Draw(texture2D31, new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), nPC.GetAlpha(color9), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 										texture2D31 = Main.glowMaskTexture[100];
 										Main.spriteBatch.Draw(texture2D31, new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(127 - nPC.alpha / 2, 127 - nPC.alpha / 2, 127 - nPC.alpha / 2, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
@@ -23667,6 +_,7 @@
 										Main.spriteBatch.Draw(texture2D31, position8, new Microsoft.Xna.Framework.Rectangle?(value35), new Microsoft.Xna.Framework.Color(127 - nPC.alpha / 2, 127 - nPC.alpha / 2, 127 - nPC.alpha / 2, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 										return;
 									}
+
 									if (type == 94)
 									{
 										for (int num203 = 1; num203 < 6; num203 += 2)
@@ -23680,6 +_,7 @@
 											Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.oldPos[num203].X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.oldPos[num203].Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), alpha12, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 										}
 									}
+
 									if (type == 125 || type == 126 || type == 127 || type == 128 || type == 129 || type == 130 || type == 131 || type == 139 || type == 140)
 									{
 										for (int num204 = 9; num204 >= 0; num204 -= 2)
@@ -23693,6 +_,7 @@
 											Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.oldPos[num204].X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.oldPos[num204].Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), alpha13, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 										}
 									}
+
 									if (type == 417 && nPC.ai[0] >= 6f && nPC.ai[0] <= 6f)
 									{
 										for (int num205 = 5; num205 >= 0; num205--)
@@ -23706,6 +_,7 @@
 											Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.oldPos[num205].X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.oldPos[num205].Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), alpha14, nPC.oldRot[num205], vector10, MathHelper.Lerp(0.5f, 1f, (5f - (float)num205) / 6f), spriteEffects, 0f);
 										}
 									}
+
 									if (type == 419 && nPC.ai[2] <= -9f)
 									{
 										int num206 = Main.glowMaskTexture[154].Height / Main.npcFrameCount[type];
@@ -23724,11 +_,13 @@
 											{
 												num209 += 3;
 											}
+
 											num209 += 5;
 											frame4.Y = num206 * num209;
 											Main.spriteBatch.Draw(Main.glowMaskTexture[154], new Vector2(nPC.oldPos[num208].X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.oldPos[num208].Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69), new Microsoft.Xna.Framework.Rectangle?(frame4), white5, nPC.oldRot[num208], vector10, MathHelper.Lerp(0.75f, 1.2f, (10f - (float)num208) / 10f), spriteEffects, 0f);
 										}
 									}
+
 									if (type == 418 && (nPC.ai[0] == 2f || nPC.ai[0] == 4f))
 									{
 										Texture2D texture2D32 = Main.extraTexture[55];
@@ -23740,6 +_,7 @@
 										{
 											num212 = 1f;
 										}
+
 										num210 %= 4;
 										for (int num213 = 6; num213 >= 0; num213--)
 										{
@@ -23757,10 +_,12 @@
 											{
 												num214 += 4;
 											}
+
 											Microsoft.Xna.Framework.Rectangle value36 = texture2D32.Frame(1, 4, 0, num214);
 											Main.spriteBatch.Draw(texture2D32, new Vector2(nPC.oldPos[num213].X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.oldPos[num213].Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69), new Microsoft.Xna.Framework.Rectangle?(value36), color47, nPC.oldRot[num213] + num211, origin16, MathHelper.Lerp(0.1f, 1.2f, (10f - (float)num213) / 10f), spriteEffects, 0f);
 										}
 									}
+
 									if (type == 516)
 									{
 										int num215 = Main.npcTexture[type].Height / Main.npcFrameCount[type];
@@ -23780,20 +_,24 @@
 											{
 												num218 += 4;
 											}
+
 											frame5.Y = num215 * num218;
 											Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.oldPos[num217].X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.oldPos[num217].Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69), new Microsoft.Xna.Framework.Rectangle?(frame5), color48, nPC.rotation, vector10, MathHelper.Lerp(0.35f, 1.2f, (10f - (float)num217) / 10f), spriteEffects, 0f);
 										}
 									}
+
 									Microsoft.Xna.Framework.Rectangle frame6 = nPC.frame;
 									if (type == 182 || type == 289)
 									{
 										frame6.Height -= 2;
 									}
+
 									if (nPC.aiStyle == 7)
 									{
 										NPC n2 = nPC;
 										this.DrawNPCExtras(n2, true, num69, num68, color9, vector10, spriteEffects);
 									}
+
 									if (type == 346 && (double)nPC.life < (double)nPC.lifeMax * 0.5)
 									{
 										Main.spriteBatch.Draw(Main.santaTankTexture, new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame6), nPC.GetAlpha(color9), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
@@ -23812,15 +_,18 @@
 											{
 												num69 = 2f;
 											}
+
 											if (nPC.direction < 0 && (nPC.rotation == 1.57f || nPC.rotation == 4.71f))
 											{
 												num219 = 1f;
 											}
+
 											if (nPC.direction > 0 && (nPC.rotation == 1.57f || nPC.rotation == 4.71f))
 											{
 												num219 = -1f;
 											}
 										}
+
 										Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale + num219, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame6), nPC.GetAlpha(color9), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 									}
 									else if (type == 266 && nPC.life < nPC.lifeMax && Main.expertMode)
@@ -23845,6 +_,7 @@
 											{
 												position9.X = Main.player[Main.myPlayer].Center.X - num222;
 											}
+
 											position9.X -= (float)(nPC.width / 2);
 											if (num221 == 0 || num221 == 1)
 											{
@@ -23854,9 +_,11 @@
 											{
 												position9.Y = Main.player[Main.myPlayer].Center.Y - num223;
 											}
+
 											position9.Y -= (float)(nPC.height / 2);
 											Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(position9.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, position9.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame6), alpha15, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 										}
+
 										Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame6), nPC.GetAlpha(color9), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 									}
 									else if (type == 421 && nPC.ai[0] == 5f)
@@ -23866,6 +_,7 @@
 										{
 											spriteEffects |= SpriteEffects.FlipVertically;
 										}
+
 										Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2((float)(player.direction * 4), player.gfxOffY) + ((player.gravDir == 1f) ? player.Top : player.Bottom) - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(frame6), nPC.GetAlpha(color9), nPC.rotation, frame6.Size() / 2f, nPC.scale, spriteEffects, 0f);
 										Main.spriteBatch.Draw(Main.glowMaskTexture[146], new Vector2((float)(player.direction * 4), player.gfxOffY) + ((player.gravDir == 1f) ? player.Top : player.Bottom) - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(frame6), nPC.GetAlpha(color9), nPC.rotation, frame6.Size() / 2f, nPC.scale, spriteEffects, 0f);
 									}
@@ -23886,10 +_,12 @@
 											Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame6), nPC.GetColor(color9), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 										}
 									}
+
 									if (nPC.confused)
 									{
 										Main.spriteBatch.Draw(Main.confuseTexture, new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 - (float)Main.confuseTexture.Height - 20f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.confuseTexture.Width, Main.confuseTexture.Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, 70), nPC.velocity.X * -0.05f, new Vector2((float)(Main.confuseTexture.Width / 2), (float)(Main.confuseTexture.Height / 2)), Main.essScale + 0.2f, SpriteEffects.None, 0f);
 									}
+
 									if (type >= 134 && type <= 136 && color9 != Microsoft.Xna.Framework.Color.Black)
 									{
 										Main.spriteBatch.Draw(Main.destTexture[type - 134], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * (1f - (float)nPC.alpha / 255f), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
@@ -24037,32 +_,33 @@
 										{
 											case 0:
 												vector56 += new Vector2(8f, 32f);
-												break;
+											break;
 											case 1:
 												vector56 += new Vector2(6f, 72f);
-												break;
+											break;
 											case 2:
 												vector56 += new Vector2(8f, 126f);
-												break;
+											break;
 											case 3:
 												vector56 += new Vector2(6f, 174f);
-												break;
+											break;
 											case 4:
 												vector56 += new Vector2(6f, 224f);
-												break;
+											break;
 											case 5:
 												vector56 += new Vector2(8f, 272f);
-												break;
+											break;
 											case 6:
 												vector56 += new Vector2(10f, 318f);
-												break;
+											break;
 											case 7:
 												vector56 += new Vector2(14f, 366f);
-												break;
+											break;
 											case 8:
 												vector56 += new Vector2(10f, 414f);
-												break;
+											break;
 										}
+
 										vector56.Y -= (float)(num231 * num232);
 										vector56 -= vector10;
 										int num233 = 2;
@@ -24070,34 +_,38 @@
 										{
 											num233 = (int)nPC.ai[2] - 1;
 										}
+
 										if (nPC.velocity.Y != 0f)
 										{
 											num233 = 3;
 										}
+
 										value40.Y += 44 * num233;
 										switch (num233)
 										{
 											case 0:
 												zero3 = new Vector2(10f, 18f);
-												break;
+											break;
 											case 1:
 												zero3 = new Vector2(8f, 20f);
-												break;
+											break;
 											case 2:
 												zero3 = new Vector2(8f, 20f);
-												break;
+											break;
 											case 3:
 												zero3 = new Vector2(8f, 20f);
-												break;
+											break;
 											case 4:
 												zero3 = new Vector2(6f, 18f);
-												break;
+											break;
 										}
+
 										if (spriteEffects.HasFlag(SpriteEffects.FlipHorizontally))
 										{
 											vector56.X *= -1f;
 											zero3.X = (float)value40.Width - zero3.X;
 										}
+
 										vector56 += nPC.Center;
 										vector56 -= Main.screenPosition;
 										vector56.Y += nPC.gfxOffY;
@@ -24115,32 +_,33 @@
 										{
 											case 0:
 												vector57 += new Vector2(8f, 30f);
-												break;
+											break;
 											case 1:
 												vector57 += new Vector2(6f, 68f);
-												break;
+											break;
 											case 2:
 												vector57 += new Vector2(8f, 120f);
-												break;
+											break;
 											case 3:
 												vector57 += new Vector2(6f, 166f);
-												break;
+											break;
 											case 4:
 												vector57 += new Vector2(6f, 214f);
-												break;
+											break;
 											case 5:
 												vector57 += new Vector2(8f, 260f);
-												break;
+											break;
 											case 6:
 												vector57 += new Vector2(14f, 304f);
-												break;
+											break;
 											case 7:
 												vector57 += new Vector2(14f, 350f);
-												break;
+											break;
 											case 8:
 												vector57 += new Vector2(10f, 396f);
-												break;
+											break;
 										}
+
 										vector57.Y -= (float)(num234 * num235);
 										vector57 -= vector10;
 										int num236 = 2;
@@ -24148,34 +_,38 @@
 										{
 											num236 = (int)nPC.ai[2] - 1;
 										}
+
 										if (nPC.velocity.Y != 0f)
 										{
 											num236 = 3;
 										}
+
 										value41.Y += 44 * num236;
 										switch (num236)
 										{
 											case 0:
 												zero4 = new Vector2(10f, 18f);
-												break;
+											break;
 											case 1:
 												zero4 = new Vector2(8f, 20f);
-												break;
+											break;
 											case 2:
 												zero4 = new Vector2(8f, 20f);
-												break;
+											break;
 											case 3:
 												zero4 = new Vector2(8f, 20f);
-												break;
+											break;
 											case 4:
 												zero4 = new Vector2(6f, 18f);
-												break;
+											break;
 										}
+
 										if (spriteEffects.HasFlag(SpriteEffects.FlipHorizontally))
 										{
 											vector57.X *= -1f;
 											zero4.X = (float)value41.Width - zero4.X;
 										}
+
 										vector57 += nPC.Center;
 										vector57 -= Main.screenPosition;
 										vector57.Y += nPC.gfxOffY;
@@ -24193,6 +_,7 @@
 											vector58.X *= -1f;
 											origin17.X = (float)Main.extraTexture[56].Width - origin17.X;
 										}
+
 										vector58 += nPC.Top + new Vector2(0f, 20f);
 										vector58 -= Main.screenPosition;
 										vector58.Y += nPC.gfxOffY;
@@ -24201,6 +_,7 @@
 										{
 											num238 += 3.14159274f;
 										}
+
 										Main.spriteBatch.Draw(Main.extraTexture[56], vector58, null, color9, num238, origin17, nPC.scale, spriteEffects, 0f);
 										Main.spriteBatch.Draw(Main.glowMaskTexture[165], vector58, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), num238, origin17, nPC.scale, spriteEffects, 0f);
 									}
@@ -24217,6 +_,7 @@
 											color59 = Microsoft.Xna.Framework.Color.Lerp(color59, Microsoft.Xna.Framework.Color.White, amount11);
 											color59.A = (byte)MathHelper.Lerp((float)color59.A, 0f, amount11);
 										}
+
 										color59 *= (255f - (float)nPC.alpha) / 255f;
 										Main.spriteBatch.Draw(Main.glowMaskTexture[32], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame6), color59, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 									}
@@ -24278,9 +_,11 @@
 											{
 												frame7.Y += num242 * Main.npcFrameCount[type];
 											}
+
 											Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.oldPos[num241].X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.oldPos[num241].Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69), new Microsoft.Xna.Framework.Rectangle?(frame7), color62, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 										}
 									}
+
 									if (type == 479 && (double)nPC.velocity.Length() > 6.5)
 									{
 										for (int num243 = 1; num243 < nPC.oldPos.Length; num243++)
@@ -24298,6 +_,7 @@
 											{
 												frame8.Y += num244 * Main.npcFrameCount[type];
 											}
+
 											Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.oldPos[num243].X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.oldPos[num243].Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69), new Microsoft.Xna.Framework.Rectangle?(frame8), color63, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 										}
 									}
@@ -24330,23 +_,24 @@
 										{
 											case 0:
 												num246 = 2f;
-												break;
+											break;
 											case 1:
 												num246 = -6f;
-												break;
+											break;
 											case 2:
 												num246 = 2f;
-												break;
+											break;
 											case 3:
 												num246 = 10f;
-												break;
+											break;
 											case 4:
 												num246 = 2f;
-												break;
+											break;
 											case 5:
 												num246 = 0f;
-												break;
+											break;
 										}
+
 										center3.Y += nPC.gfxOffY - (70f - num246) * nPC.scale;
 										Main.spriteBatch.Draw(texture2D33, center3 - Main.screenPosition, null, color9, 0f, texture2D33.Size() / 2f, 1f, spriteEffects, 0f);
 									}
@@ -24418,9 +_,11 @@
 											{
 												num249 = 128 + (int)nPC.localAI[2];
 											}
+
 											int num250 = 255 - num249;
 											color65 = new Microsoft.Xna.Framework.Color(num250, num249, num249, num250);
 										}
+
 										Main.spriteBatch.Draw(Main.glowMaskTexture[num248], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color65, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 									}
 									else if (type == 415)
@@ -24504,6 +_,7 @@
 									{
 										Main.spriteBatch.Draw(Main.glowMaskTexture[167], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(128 - nPC.alpha / 2, 128 - nPC.alpha / 2, 128 - nPC.alpha / 2, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
 									}
+
 									if (nPC.aiStyle == 7)
 									{
 										NPC n3 = nPC;
@@ -24515,6 +_,8 @@
 					}
 				}
 			}
+
+			NPCLoader.PostDraw(Main.npc[iNPCIndex], Main.spriteBatch, color9);
 		}
 
 		protected void DrawNPCExtras(NPC n, bool beforeDraw, float addHeight, float addY, Microsoft.Xna.Framework.Color npcColor, Vector2 halfSize, SpriteEffects npcSpriteEffect)
@@ -24527,23 +_,25 @@
 				{
 					num = 0;
 				}
+
 				Texture2D texture2D = Main.extraTexture[72];
 				int num2 = 0;
 				switch (n.GetPartyHatColor())
 				{
 					case PartyHatColor.Pink:
 						num2 = 16;
-						break;
+					break;
 					case PartyHatColor.Cyan:
 						num2 = 17;
-						break;
+					break;
 					case PartyHatColor.Purple:
 						num2 = 18;
-						break;
+					break;
 					case PartyHatColor.White:
 						num2 = 19;
-						break;
-				}
+					break;
+				}
+
 				Microsoft.Xna.Framework.Rectangle rectangle = texture2D.Frame(20, 1, num2 % 20, 0);
 				rectangle.Width -= 2;
 				rectangle.Height -= 2;
@@ -24558,28 +_,34 @@
 					{
 						num3 = -8;
 					}
+
 					if (n.type == 124)
 					{
 						num3 = -2;
 					}
+
 					if (n.type == 550)
 					{
 						num3 = -4;
 					}
+
 					if (n.type == 108 || n.type == 178)
 					{
 						num3 = -6;
 					}
 				}
+
 				vector.Y += (float)num3;
 				if (n.type == 229 && n.ai[0] == 12f)
 				{
 					vector.X -= (float)(n.spriteDirection * 4);
 				}
+
 				if (n.type == 550 && n.ai[0] == 5f)
 				{
 					vector.X += (float)(n.spriteDirection * 7);
 				}
+
 				Vector2 origin = rectangle.Size() - new Vector2((float)(rectangle.Width / 2), 12f);
 				int num4 = 0;
 				int type = n.type;
@@ -24598,19 +_,20 @@
 									break;
 								default:
 									switch (type)
-									{
-										case 227:
+								{
+									case 227:
 											num4 = -4;
+									goto IL_2FE;
+									case 228:
+											num4 = -2;
+									goto IL_2FE;
+									case 229:
+											goto IL_2F0;
+									default:
 											goto IL_2FE;
-										case 228:
-											num4 = -2;
-											goto IL_2FE;
-										case 229:
-											goto IL_2F0;
-										default:
-											goto IL_2FE;
-									}
-									break;
+								}
+
+								break;
 							}
 						}
 					}
@@ -24620,6 +_,7 @@
 						{
 							goto IL_2F0;
 						}
+
 						if (type != 369)
 						{
 							if (type == 550)
@@ -24627,12 +_,15 @@
 								num4 = -4;
 								goto IL_2FE;
 							}
+
 							goto IL_2FE;
 						}
 					}
+
 					num4 = 1;
 					goto IL_2FE;
 				}
+
 				if (type <= 54)
 				{
 					switch (type)
@@ -24647,18 +_,20 @@
 							goto IL_2FE;
 						default:
 							switch (type)
-							{
-								case 37:
+						{
+							case 37:
 								case 38:
 									goto IL_2F5;
-								default:
+							default:
 									if (type != 54)
-									{
-										goto IL_2FE;
-									}
-									goto IL_2F5;
-							}
-							break;
+							{
+								goto IL_2FE;
+							}
+
+							goto IL_2F5;
+						}
+
+						break;
 					}
 				}
 				else
@@ -24670,16 +_,19 @@
 							goto IL_2F5;
 						default:
 							if (type != 124)
-							{
-								if (type != 160)
-								{
-									goto IL_2FE;
-								}
-								goto IL_2F5;
-							}
-							break;
-					}
-				}
+						{
+							if (type != 160)
+							{
+								goto IL_2FE;
+							}
+
+							goto IL_2F5;
+						}
+
+						break;
+					}
+				}
+
 				IL_2F0:
 				num4 = -1;
 				goto IL_2FE;
@@ -24690,31 +_,37 @@
 				vector.X += (float)(4 * n.spriteDirection);
 				Main.spriteBatch.Draw(texture2D, new Vector2(vector.X - Main.screenPosition.X, vector.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(rectangle), npcColor, 0f, origin, n.scale, npcSpriteEffect, 0f);
 			}
+
 			if (NPCID.Sets.AttackType[n.type] == 1 && n.ai[0] == 12f && !beforeDraw)
 			{
 				if (n.type == 228 || n.type == 229 || n.type == 209)
 				{
 					return;
 				}
+
 				float num5 = n.ai[2];
 				Vector2 value = Main.OffsetsNPCOffhand[2];
 				if (n.spriteDirection == 1)
 				{
 					value.X *= -1f;
 				}
+
 				Vector2 vector2 = n.Bottom - value;
 				if (n.type == 22 && n.ai[2] > -0.1f)
 				{
 					vector2.Y += 4f;
 				}
+
 				if (n.type == 368 && Main.hardMode && n.ai[2] > -0.1f)
 				{
 					vector2.Y += 4f;
 				}
+
 				if (n.type == 368 && !Main.hardMode && n.ai[2] < -0.1f)
 				{
 					vector2.Y -= 8f;
 				}
+
 				float rotation = num5 * 1.57079637f * (float)n.spriteDirection;
 				float num6 = 1f;
 				int num7 = 0;
@@ -24756,9 +_,12 @@
 						{
 							num8 = 28;
 						}
+
 						num6 = 0.75f;
 					}
 				}
+
+				NPCLoader.DrawTownAttackGun(n, ref num6, ref num7, ref num8);
 				Texture2D texture2D2 = Main.itemTexture[num7];
 				int num9 = (int)this.DrawPlayerItemPos(1f, num7).X - num8;
 				Vector2 origin2 = new Vector2((float)(-(float)num9), (float)(texture2D2.Height / 2));
@@ -24766,6 +_,7 @@
 				{
 					origin2 = new Vector2((float)(texture2D2.Width + num9), (float)(texture2D2.Height / 2));
 				}
+
 				Main.spriteBatch.Draw(texture2D2, new Vector2((float)((int)(vector2.X - Main.screenPosition.X)), (float)((int)(vector2.Y - Main.screenPosition.Y))), null, npcColor, rotation, origin2, n.scale * num6, npcSpriteEffect ^ SpriteEffects.FlipHorizontally, 0f);
 				if (n.type == 22 && n.frame.Y / (Main.npcTexture[n.type].Height / Main.npcFrameCount[n.type]) >= 21)
 				{
@@ -24780,6 +_,7 @@
 					Main.spriteBatch.Draw(texture2D4, new Vector2(n.position.X - Main.screenPosition.X + (float)(n.width / 2) - (float)Main.npcTexture[n.type].Width * n.scale / 2f + halfSize.X * n.scale, n.position.Y - Main.screenPosition.Y + (float)n.height - (float)Main.npcTexture[n.type].Height * n.scale / (float)Main.npcFrameCount[n.type] + 4f + halfSize.Y * n.scale + addHeight + addY + n.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(value3), n.GetAlpha(npcColor), n.rotation, halfSize, n.scale, npcSpriteEffect, 0f);
 				}
 			}
+
 			if (NPCID.Sets.AttackType[n.type] == 2 && n.ai[0] == 14f && !beforeDraw)
 			{
 				Texture2D texture2D5 = Main.extraTexture[51];
@@ -24788,6 +_,7 @@
 				Vector2 origin3 = rectangle2.Size() * new Vector2(0.5f, 1f);
 				Main.spriteBatch.Draw(texture2D5, new Vector2((float)((int)(vector3.X - Main.screenPosition.X)), (float)((int)(vector3.Y - Main.screenPosition.Y))), new Microsoft.Xna.Framework.Rectangle?(rectangle2), NPCID.Sets.MagicAuraColor[n.type], 0f, origin3, n.scale, npcSpriteEffect ^ SpriteEffects.FlipHorizontally, 0f);
 			}
+
 			if (NPCID.Sets.AttackType[n.type] == 3 && n.ai[0] == 15f)
 			{
 				Texture2D texture2D6 = Main.itemTexture[4];
@@ -24802,6 +_,7 @@
 					{
 						return;
 					}
+
 					if (n.ai[1] > (float)NPCID.Sets.AttackTime[n.type] * 0.66f)
 					{
 						zero.Y = 12f;
@@ -24815,6 +_,7 @@
 					{
 						return;
 					}
+
 					if (n.ai[1] > (float)NPCID.Sets.AttackTime[n.type] * 0.66f)
 					{
 						zero.Y = 12f;
@@ -24829,16 +_,20 @@
 					{
 						return;
 					}
+
 					if (n.ai[1] > (float)NPCID.Sets.AttackTime[n.type] * 0.66f)
 					{
 						zero.Y = 12f;
 					}
 				}
+
+				NPCLoader.DrawTownAttackSwing(n, ref texture2D6, ref num10, ref scaleFactor, ref zero);
 				Tuple<Vector2, float> swingStats = n.GetSwingStats(NPCID.Sets.AttackTime[n.type] * 2, (int)n.ai[1], n.spriteDirection, num10, num10);
 				Vector2 vector4 = swingStats.Item1 + (swingStats.Item1 - n.Center) * scaleFactor + zero;
 				Vector2 origin4 = texture2D6.Size() * new Vector2((float)((n.spriteDirection == 1) ? 0 : 1), 1f);
 				Main.spriteBatch.Draw(texture2D6, new Vector2((float)((int)(vector4.X - Main.screenPosition.X)), (float)((int)(vector4.Y - Main.screenPosition.Y))), null, n.GetAlpha(npcColor), swingStats.Item2, origin4, n.scale, npcSpriteEffect ^ SpriteEffects.FlipHorizontally, 0f);
 			}
+
 			if (n.type == 550 && n.ai[0] == 18f)
 			{
 				Texture2D texture2D7 = Main.itemTexture[353];
@@ -24854,6 +_,7 @@
 						return;
 					}
 				}
+
 				int num12 = (int)n.ai[2];
 				if (num12 >= 0 && num12 < 255)
 				{
@@ -24883,6 +_,7 @@
 						n.localAI[3] = 2f;
 					}
 				}
+
 				Tuple<Vector2, float> swingStats2 = n.GetSwingStats(40, 12, n.spriteDirection, num11, num11);
 				Vector2 vector5 = swingStats2.Item1 + (swingStats2.Item1 - n.Center) * scaleFactor2 + zero2;
 				Vector2 origin5 = texture2D7.Size() * new Vector2((float)((n.spriteDirection == 1) ? 0 : 1), 1f);
@@ -24912,9 +_,11 @@
 					{
 						num5 = 1;
 					}
+
 					num5 *= -1;
 					Main.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num4 * (float)num5), (double)(num3 * (float)num5));
 				}
+
 				bool flag = true;
 				if (num3 == 0f && num4 == 0f)
 				{
@@ -24931,6 +_,7 @@
 					num3 = projectile.position.X + (float)projectile.width * 0.5f - vector.X;
 					num4 = projectile.position.Y + (float)projectile.height * 0.5f - vector.Y;
 				}
+
 				while (flag)
 				{
 					float num7 = 12f;
@@ -24947,6 +_,7 @@
 							num7 = num8 - 8f;
 							flag = false;
 						}
+
 						num8 = 12f / num8;
 						num3 *= num8;
 						num4 *= num8;
@@ -24962,6 +_,7 @@
 							{
 								num11 = 16f;
 							}
+
 							num11 = 1f - num11 / 16f;
 							num10 *= num11;
 							num11 = num9 / 80f;
@@ -24969,11 +_,13 @@
 							{
 								num11 = 1f;
 							}
+
 							num10 *= num11;
 							if (num10 < 0f)
 							{
 								num10 = 0f;
 							}
+
 							num10 *= num11;
 							num10 *= 0.5f;
 							if (num4 > 0f)
@@ -24988,16 +_,19 @@
 								{
 									num11 = 1f;
 								}
+
 								num11 -= 0.5f;
 								num10 *= num11;
 								if (num10 > 0f)
 								{
 									num10 *= 2f;
 								}
+
 								num4 *= 1f + num10;
 								num3 *= 1f - num10;
 							}
 						}
+
 						rotation = (float)Math.Atan2((double)num4, (double)num3) - 1.57f;
 						int stringColor = Main.player[projectile.owner].stringColor;
 						Microsoft.Xna.Framework.Color color = WorldGen.paintColor(stringColor);
@@ -25005,14 +_,17 @@
 						{
 							color.R = 75;
 						}
+
 						if (color.G < 75)
 						{
 							color.G = 75;
 						}
+
 						if (color.B < 75)
 						{
 							color.B = 75;
 						}
+
 						if (stringColor == 13)
 						{
 							color = new Microsoft.Xna.Framework.Color(20, 20, 20);
@@ -25029,6 +_,7 @@
 						{
 							color = new Microsoft.Xna.Framework.Color(Main.DiscoR, Main.DiscoG, Main.DiscoB);
 						}
+
 						color.A = (byte)((float)color.A * 0.4f);
 						float num12 = 0.5f;
 						color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f), color);
@@ -25037,7 +_,12 @@
 					}
 				}
 			}
-			if (projectile.bobber && Main.player[projectile.owner].inventory[Main.player[projectile.owner].selectedItem].holdStyle > 0)
+
+			if (!ProjectileLoader.PreDrawExtras(projectile, Main.spriteBatch))
+			{
+				//fluff
+			}
+			else if (projectile.bobber && Main.player[projectile.owner].inventory[Main.player[projectile.owner].selectedItem].holdStyle > 0)
 			{
 				num = mountedCenter.X;
 				num2 = mountedCenter.Y;
@@ -25051,6 +_,7 @@
 					{
 						num -= 13f;
 					}
+
 					num2 -= 36f * gravDir;
 				}
 				else if (type == 2291)
@@ -25060,6 +_,7 @@
 					{
 						num -= 13f;
 					}
+
 					num2 -= 34f * gravDir;
 				}
 				else if (type == 2292)
@@ -25069,6 +_,7 @@
 					{
 						num -= 13f;
 					}
+
 					num2 -= 34f * gravDir;
 				}
 				else if (type == 2293)
@@ -25078,6 +_,7 @@
 					{
 						num -= 13f;
 					}
+
 					num2 -= 34f * gravDir;
 				}
 				else if (type == 2294)
@@ -25087,6 +_,7 @@
 					{
 						num -= 13f;
 					}
+
 					num2 -= 30f * gravDir;
 				}
 				else if (type == 2295)
@@ -25096,6 +_,7 @@
 					{
 						num -= 13f;
 					}
+
 					num2 -= 30f * gravDir;
 				}
 				else if (type == 2296)
@@ -25105,6 +_,7 @@
 					{
 						num -= 13f;
 					}
+
 					num2 -= 30f * gravDir;
 				}
 				else if (type == 2421)
@@ -25114,6 +_,7 @@
 					{
 						num -= 13f;
 					}
+
 					num2 -= 36f * gravDir;
 				}
 				else if (type == 2422)
@@ -25123,12 +_,15 @@
 					{
 						num -= 13f;
 					}
+
 					num2 -= 32f * gravDir;
 				}
+
 				if (gravDir == -1f)
 				{
 					num2 -= 12f;
 				}
+
 				Vector2 value = new Vector2(num, num2);
 				value = Main.player[projectile.owner].RotatedRelativePoint(value + new Vector2(8f), true) - new Vector2(8f);
 				float num13 = projectile.position.X + (float)projectile.width * 0.5f - value.X;
@@ -25151,6 +_,7 @@
 					num13 = projectile.position.X + (float)projectile.width * 0.5f - value.X;
 					num14 = projectile.position.Y + (float)projectile.height * 0.5f - value.Y;
 				}
+
 				while (flag2)
 				{
 					float num16 = 12f;
@@ -25167,6 +_,7 @@
 							num16 = num17 - 8f;
 							flag2 = false;
 						}
+
 						num17 = 12f / num17;
 						num13 *= num17;
 						num14 *= num17;
@@ -25182,6 +_,7 @@
 							{
 								num20 = 16f;
 							}
+
 							num20 = 1f - num20 / 16f;
 							num19 *= num20;
 							num20 = num18 / 80f;
@@ -25189,11 +_,13 @@
 							{
 								num20 = 1f;
 							}
+
 							num19 *= num20;
 							if (num19 < 0f)
 							{
 								num19 = 0f;
 							}
+
 							num20 = 1f - projectile.localAI[0] / 100f;
 							num19 *= num20;
 							if (num14 > 0f)
@@ -25208,38 +_,46 @@
 								{
 									num20 = 1f;
 								}
+
 								num20 -= 0.5f;
 								num19 *= num20;
 								if (num19 > 0f)
 								{
 									num19 *= 2f;
 								}
+
 								num14 *= 1f + num19;
 								num13 *= 1f - num19;
 							}
 						}
+
 						rotation2 = (float)Math.Atan2((double)num14, (double)num13) - 1.57f;
 						Microsoft.Xna.Framework.Color color2 = Lighting.GetColor((int)value.X / 16, (int)(value.Y / 16f), new Microsoft.Xna.Framework.Color(200, 200, 200, 100));
 						if (type == 2294)
 						{
 							color2 = Lighting.GetColor((int)value.X / 16, (int)(value.Y / 16f), new Microsoft.Xna.Framework.Color(100, 180, 230, 100));
 						}
+
 						if (type == 2295)
 						{
 							color2 = Lighting.GetColor((int)value.X / 16, (int)(value.Y / 16f), new Microsoft.Xna.Framework.Color(250, 90, 70, 100));
 						}
+
 						if (type == 2293)
 						{
 							color2 = Lighting.GetColor((int)value.X / 16, (int)(value.Y / 16f), new Microsoft.Xna.Framework.Color(203, 190, 210, 100));
 						}
+
 						if (type == 2421)
 						{
 							color2 = Lighting.GetColor((int)value.X / 16, (int)(value.Y / 16f), new Microsoft.Xna.Framework.Color(183, 77, 112, 100));
 						}
+
 						if (type == 2422)
 						{
 							color2 = Lighting.GetColor((int)value.X / 16, (int)(value.Y / 16f), new Microsoft.Xna.Framework.Color(255, 226, 116, 100));
 						}
+
 						Main.spriteBatch.Draw(Main.fishingLineTexture, new Vector2(value.X - Main.screenPosition.X + (float)Main.fishingLineTexture.Width * 0.5f, value.Y - Main.screenPosition.Y + (float)Main.fishingLineTexture.Height * 0.5f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.fishingLineTexture.Width, (int)num16)), color2, rotation2, new Vector2((float)Main.fishingLineTexture.Width * 0.5f, 0f), 1f, SpriteEffects.None, 0f);
 					}
 				}
@@ -25266,6 +_,7 @@
 					num21 = mountedCenter.X - vector2.X;
 					num22 = mountedCenter.Y - vector2.Y;
 				}
+
 				while (flag3)
 				{
 					float num24 = (float)Math.Sqrt((double)(num21 * num21 + num22 * num22));
@@ -25376,12 +_,14 @@
 				{
 					num35 = projectile.ai[0] / 17f;
 				}
+
 				int num36 = (int)(30f * num35);
 				float num37 = 1f;
 				if (projectile.ai[0] <= 30f)
 				{
 					num37 = projectile.ai[0] / 30f;
 				}
+
 				float num38 = 0.4f * num37;
 				float num39 = num38;
 				num34 += num39;
@@ -25395,6 +_,7 @@
 					{
 						num41 *= Math.Abs(num33) + Math.Abs(num34) / 1f;
 					}
+
 					num40 = num41 / num40;
 					num33 *= num40;
 					num34 *= num40;
@@ -25409,6 +_,7 @@
 					num39 += num38;
 					num34 += num39;
 				}
+
 				for (int k = num36 - 1; k >= 0; k--)
 				{
 					vector6.X = array[k].X;
@@ -25428,12 +_,14 @@
 				{
 					num45 = projectile.ai[0] / 17f;
 				}
+
 				int num46 = (int)(30f * num45);
 				float num47 = 1f;
 				if (projectile.ai[0] <= 30f)
 				{
 					num47 = projectile.ai[0] / 30f;
 				}
+
 				float num48 = 0.4f * num47;
 				float num49 = num48;
 				num44 += num49;
@@ -25447,6 +_,7 @@
 					{
 						num51 *= Math.Abs(num43) + Math.Abs(num44) / 1f;
 					}
+
 					num50 = num51 / num50;
 					num43 *= num50;
 					num44 *= num50;
@@ -25461,6 +_,7 @@
 					num49 += num48;
 					num44 += num49;
 				}
+
 				int num53 = 0;
 				for (int m = num46 - 1; m >= 0; m--)
 				{
@@ -25476,6 +_,7 @@
 					{
 						Main.spriteBatch.Draw(Main.chain39Texture, new Vector2(vector7.X - Main.screenPosition.X, vector7.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain39Texture.Width, Main.chain39Texture.Height)), color8, rotation7, new Vector2((float)Main.chain39Texture.Width * 0.5f, (float)Main.chain39Texture.Height * 0.5f), 0.8f, SpriteEffects.None, 0f);
 					}
+
 					num53++;
 				}
 			}
@@ -25489,12 +_,14 @@
 				{
 					num56 = projectile.ai[0] / 17f;
 				}
+
 				int num57 = (int)(30f * num56);
 				float num58 = 1f;
 				if (projectile.ai[0] <= 30f)
 				{
 					num58 = projectile.ai[0] / 30f;
 				}
+
 				float num59 = 0.4f * num58;
 				float num60 = num59;
 				num55 += num60;
@@ -25508,6 +_,7 @@
 					{
 						num62 *= Math.Abs(num54) + Math.Abs(num55) / 1f;
 					}
+
 					num61 = num62 / num61;
 					num54 *= num61;
 					num55 *= num61;
@@ -25522,6 +_,7 @@
 					num60 += num59;
 					num55 += num60;
 				}
+
 				int num64 = 0;
 				for (int num65 = num57 - 1; num65 >= 0; num65--)
 				{
@@ -25534,6 +_,7 @@
 					{
 						num66 = 6;
 					}
+
 					num66 += num64 % 2;
 					Main.spriteBatch.Draw(Main.chainsTexture[num66], new Vector2(vector8.X - Main.screenPosition.X, vector8.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chainsTexture[num66].Width, Main.chainsTexture[num66].Height)), color9, rotation8, new Vector2((float)Main.chainsTexture[num66].Width * 0.5f, (float)Main.chainsTexture[num66].Height * 0.5f), 0.8f, SpriteEffects.None, 0f);
 					num64++;
@@ -25759,18 +_,22 @@
 						{
 							Lighting.AddLight(i2, j2, 0f, 0.2f, 0.2f);
 						}
+
 						if (num87 == 1)
 						{
 							Lighting.AddLight(i2, j2, 0.1f, 0.2f, 0f);
 						}
+
 						if (num87 == 2)
 						{
 							Lighting.AddLight(i2, j2, 0.2f, 0.1f, 0f);
 						}
+
 						if (num87 == 3)
 						{
 							Lighting.AddLight(i2, j2, 0.2f, 0f, 0.2f);
 						}
+
 						num90 = 16f / num90;
 						num88 *= num90;
 						num89 *= num90;
@@ -25798,36 +_,44 @@
 				{
 					texture2D2 = Main.chain34Texture;
 				}
+
 				if (projectile.type == 396)
 				{
 					texture2D2 = Main.chain35Texture;
 				}
+
 				if (projectile.type == 403)
 				{
 					texture2D2 = Main.chain36Texture;
 				}
+
 				if (projectile.type == 404)
 				{
 					texture2D2 = Main.chain37Texture;
 				}
+
 				if (projectile.type == 446)
 				{
 					texture2D2 = Main.extraTexture[3];
 				}
+
 				if (projectile.type >= 486 && projectile.type <= 489)
 				{
 					texture2D2 = Main.chainsTexture[projectile.type - 486];
 				}
+
 				if (projectile.type >= 646 && projectile.type <= 649)
 				{
 					texture2D2 = Main.chainsTexture[projectile.type - 646 + 8];
 					texture2D = Main.chainsTexture[projectile.type - 646 + 12];
 					transparent = new Microsoft.Xna.Framework.Color(255, 255, 255, 127);
 				}
+
 				if (projectile.type == 652)
 				{
 					texture2D2 = Main.chainsTexture[16];
 				}
+
 				Vector2 vector16 = projectile.Center;
 				Microsoft.Xna.Framework.Rectangle? sourceRectangle = null;
 				Vector2 origin = new Vector2((float)texture2D2.Width * 0.5f, (float)texture2D2.Height * 0.5f);
@@ -25841,6 +_,7 @@
 					origin.Y /= 4f;
 					num91 /= 4f;
 				}
+
 				int type2 = projectile.type;
 				if (type2 != 383)
 				{
@@ -25850,10 +_,10 @@
 						{
 							case 487:
 								num92 = 8f;
-								break;
+							break;
 							case 489:
 								num92 = 10f;
-								break;
+							break;
 						}
 					}
 					else
@@ -25865,6 +_,7 @@
 				{
 					num92 = 14f;
 				}
+
 				if (num92 != 0f)
 				{
 					float num95 = -1.57f;
@@ -25874,6 +_,7 @@
 					value2.Normalize();
 					vector16 -= value2 * num91 / 2f;
 				}
+
 				Vector2 vector17 = mountedCenter - vector16;
 				float rotation15 = (float)Math.Atan2((double)vector17.Y, (double)vector17.X) - 1.57f;
 				bool flag13 = true;
@@ -25881,10 +_,12 @@
 				{
 					flag13 = false;
 				}
+
 				if (float.IsNaN(vector17.X) && float.IsNaN(vector17.Y))
 				{
 					flag13 = false;
 				}
+
 				while (flag13)
 				{
 					float num96 = vector17.Length();
@@ -25903,19 +_,23 @@
 						{
 							color17 *= (float)(255 - projectile.alpha) / 255f;
 						}
+
 						if (projectile.type == 446)
 						{
 							color17 = projectile.GetAlpha(color17);
 						}
+
 						if (projectile.type == 488)
 						{
 							Lighting.AddLight(vector16, 0.2f, 0f, 0.175f);
 							color17 = new Microsoft.Xna.Framework.Color(255, 255, 255, 255);
 						}
+
 						if (projectile.type >= 646 && projectile.type <= 649)
 						{
 							color17 = projectile.GetAlpha(color17);
 						}
+
 						Main.spriteBatch.Draw(texture2D2, vector16 - Main.screenPosition, sourceRectangle, color17, rotation15, origin, 1f, SpriteEffects.None, 0f);
 						if (texture2D != null)
 						{
@@ -25974,6 +_,7 @@
 					num100 += projectile.velocity.X * num104;
 					num101 += projectile.velocity.Y * num104;
 				}
+
 				Vector2 vector19 = new Vector2(num100, num101);
 				num102 = mountedCenter.X - vector19.X;
 				num103 = mountedCenter.Y - vector19.Y;
@@ -25985,6 +_,7 @@
 					{
 						num105 = 1;
 					}
+
 					if (Main.player[projectile.owner].direction == 1)
 					{
 						Main.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num103 * (float)num105), (double)(num102 * (float)num105));
@@ -25994,6 +_,7 @@
 						Main.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num103 * (float)num105), (double)(num102 * (float)num105));
 					}
 				}
+
 				bool flag15 = true;
 				while (flag15)
 				{
@@ -26038,6 +_,7 @@
 					num107 += projectile.velocity.X * num111;
 					num108 += projectile.velocity.Y * num111;
 				}
+
 				Vector2 vector20 = new Vector2(num107, num108);
 				num109 = mountedCenter.X - vector20.X;
 				num110 = mountedCenter.Y - vector20.Y;
@@ -26049,6 +_,7 @@
 					{
 						num112 = 1;
 					}
+
 					if (Main.player[projectile.owner].direction == 1)
 					{
 						Main.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num110 * (float)num112), (double)(num109 * (float)num112));
@@ -26058,6 +_,7 @@
 						Main.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num110 * (float)num112), (double)(num109 * (float)num112));
 					}
 				}
+
 				bool flag16 = true;
 				while (flag16)
 				{
@@ -26102,6 +_,7 @@
 					num114 += projectile.velocity.X * num118;
 					num115 += projectile.velocity.Y * num118;
 				}
+
 				Vector2 vector21 = new Vector2(num114, num115);
 				num116 = mountedCenter.X - vector21.X;
 				num117 = mountedCenter.Y - vector21.Y;
@@ -26113,6 +_,7 @@
 					{
 						num119 = 1;
 					}
+
 					if (Main.player[projectile.owner].direction == 1)
 					{
 						Main.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num117 * (float)num119), (double)(num116 * (float)num119));
@@ -26122,6 +_,7 @@
 						Main.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num117 * (float)num119), (double)(num116 * (float)num119));
 					}
 				}
+
 				bool flag17 = true;
 				while (flag17)
 				{
@@ -26159,10 +_,12 @@
 								{
 									num125 = Math.Abs(Main.player[projectile.owner].velocity.Y);
 								}
+
 								if (num125 > 10f)
 								{
 									num125 = 10f;
 								}
+
 								num125 /= 10f;
 								num124 *= num125;
 								num125 = num122 / 80f;
@@ -26170,11 +_,13 @@
 								{
 									num125 = 1f;
 								}
+
 								num124 *= num125;
 								if (num124 < 0f)
 								{
 									num124 = 0f;
 								}
+
 								if (!float.IsNaN(num124))
 								{
 									if (num123 == 0)
@@ -26183,6 +_,7 @@
 										{
 											num117 *= 1f - num124;
 										}
+
 										if (Main.player[projectile.owner].velocity.X > 0f && projectile.Center.X > mountedCenter.X)
 										{
 											num117 *= 1f - num124;
@@ -26194,6 +_,7 @@
 										{
 											num116 *= 1f - num124;
 										}
+
 										if (Main.player[projectile.owner].velocity.Y > 0f && projectile.Center.Y > mountedCenter.Y)
 										{
 											num116 *= 1f - num124;
@@ -26202,6 +_,7 @@
 								}
 							}
 						}
+
 						Microsoft.Xna.Framework.Color color21 = Lighting.GetColor((int)vector21.X / 16, (int)(vector21.Y / 16f));
 						Main.spriteBatch.Draw(Main.chain40Texture, new Vector2(vector21.X - Main.screenPosition.X, vector21.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain40Texture.Width, Main.chain40Texture.Height)), color21, rotation19, new Vector2((float)Main.chain40Texture.Width * 0.5f, (float)Main.chain40Texture.Height * 0.5f), num120, SpriteEffects.None, 0f);
 					}
@@ -26225,6 +_,7 @@
 					num126 += projectile.velocity.X * num130;
 					num127 += projectile.velocity.Y * num130;
 				}
+
 				Vector2 vector22 = new Vector2(num126, num127);
 				num128 = mountedCenter.X - vector22.X;
 				num129 = mountedCenter.Y - vector22.Y;
@@ -26236,6 +_,7 @@
 					{
 						num131 = 1;
 					}
+
 					if (Main.player[projectile.owner].direction == 1)
 					{
 						Main.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num129 * (float)num131), (double)(num128 * (float)num131));
@@ -26245,6 +_,7 @@
 						Main.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num129 * (float)num131), (double)(num128 * (float)num131));
 					}
 				}
+
 				bool flag18 = true;
 				while (flag18)
 				{
@@ -26281,6 +_,7 @@
 				{
 					num136 = 0.0001f;
 				}
+
 				float num137 = (float)Math.Sqrt((double)(num135 * num135 + num136 * num136));
 				num137 = 20f / num137;
 				if (projectile.ai[0] == 0f)
@@ -26293,6 +_,7 @@
 					num133 += projectile.velocity.X * num137;
 					num134 += projectile.velocity.Y * num137;
 				}
+
 				Vector2 vector23 = new Vector2(num133, num134);
 				num135 = mountedCenter.X - vector23.X;
 				num136 = mountedCenter.Y - vector23.Y;
@@ -26304,6 +_,7 @@
 					{
 						num138 = 1;
 					}
+
 					if (Main.player[projectile.owner].direction == 1)
 					{
 						Main.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num136 * (float)num138), (double)(num135 * (float)num138));
@@ -26313,6 +_,7 @@
 						Main.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num136 * (float)num138), (double)(num135 * (float)num138));
 					}
 				}
+
 				bool flag19 = true;
 				while (flag19)
 				{
@@ -26357,6 +_,7 @@
 					{
 						num142 = 1;
 					}
+
 					if (Main.player[projectile.owner].direction == 1)
 					{
 						Main.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num141 * (float)num142), (double)(num140 * (float)num142));
@@ -26380,6 +_,7 @@
 					{
 						num145 = 1;
 					}
+
 					if (Main.player[projectile.owner].direction == 1)
 					{
 						Main.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num144 * (float)num145), (double)(num143 * (float)num145));
@@ -26389,6 +_,7 @@
 						Main.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num144 * (float)num145), (double)(num143 * (float)num145));
 					}
 				}
+
 				bool flag20 = true;
 				while (flag20)
 				{
@@ -26411,6 +_,7 @@
 						{
 							num146 = 12f / num146;
 						}
+
 						num143 *= num146;
 						num144 *= num146;
 						vector25.X += num143;
@@ -26445,266 +_,332 @@
 					}
 				}
 			}
+
 			Microsoft.Xna.Framework.Color color25 = Lighting.GetColor((int)((double)projectile.position.X + (double)projectile.width * 0.5) / 16, (int)(((double)projectile.position.Y + (double)projectile.height * 0.5) / 16.0));
 			if (projectile.hide && !ProjectileID.Sets.DontAttachHideToAlpha[projectile.type])
 			{
 				color25 = Lighting.GetColor((int)mountedCenter.X / 16, (int)(mountedCenter.Y / 16f));
 			}
+
 			if (projectile.type == 14)
 			{
 				color25 = Microsoft.Xna.Framework.Color.White;
 			}
+
+			if (!ProjectileLoader.PreDraw(projectile, Main.spriteBatch, color25))
+			{
+				ProjectileLoader.PostDraw(projectile, Main.spriteBatch, color25);
+				return;
+			}
+
 			int num147 = 0;
 			int num148 = 0;
 			if (projectile.type == 175)
 			{
 				num147 = 10;
 			}
+
 			if (projectile.type == 392)
 			{
 				num147 = -2;
 			}
+
 			if (projectile.type == 499)
 			{
 				num147 = 12;
 			}
+
 			if (projectile.bobber)
 			{
 				num147 = 8;
 			}
+
 			if (projectile.type == 519)
 			{
+				//patch file: num147, num148
 				num147 = 6;
 				num148 -= 6;
 			}
+
 			if (projectile.type == 520)
 			{
 				num147 = 12;
 			}
+
 			if (projectile.type == 492)
 			{
 				num148 -= 4;
 				num147 += 5;
 			}
+
 			if (projectile.type == 498)
 			{
 				num147 = 6;
 			}
+
 			if (projectile.type == 489)
 			{
 				num147 = -2;
 			}
+
 			if (projectile.type == 486)
 			{
 				num147 = -6;
 			}
+
 			if (projectile.type == 525)
 			{
 				num147 = 5;
 			}
+
 			if (projectile.type == 488)
 			{
 				num148 -= 8;
 			}
+
 			if (projectile.type == 373)
 			{
 				num148 = -10;
 				num147 = 6;
 			}
+
 			if (projectile.type == 375)
 			{
 				num148 = -11;
 				num147 = 12;
 			}
+
 			if (projectile.type == 423)
 			{
 				num148 = -5;
 			}
+
 			if (projectile.type == 346)
 			{
 				num147 = 4;
 			}
+
 			if (projectile.type == 331)
 			{
 				num148 = -4;
 			}
+
 			if (projectile.type == 254)
 			{
 				num147 = 3;
 			}
+
 			if (projectile.type == 273)
 			{
 				num148 = 2;
 			}
+
 			if (projectile.type == 335)
 			{
 				num147 = 6;
 			}
+
 			if (projectile.type == 162)
 			{
 				num147 = 1;
 				num148 = 1;
 			}
+
 			if (projectile.type == 377)
 			{
 				num147 = -6;
 			}
+
 			if (projectile.type == 353)
 			{
 				num147 = 36;
 				num148 = -12;
 			}
+
 			if (projectile.type == 324)
 			{
 				num147 = 22;
 				num148 = -6;
 			}
+
 			if (projectile.type == 266)
 			{
 				num147 = 10;
 				num148 = -10;
 			}
+
 			if (projectile.type == 319)
 			{
 				num147 = 10;
 				num148 = -12;
 			}
+
 			if (projectile.type == 315)
 			{
 				num147 = -13;
 				num148 = -6;
 			}
+
 			if (projectile.type == 313 && projectile.height != 54)
 			{
 				num148 = -12;
 				num147 = 20;
 			}
+
 			if (projectile.type == 314)
 			{
 				num148 = -8;
 				num147 = 0;
 			}
+
 			if (projectile.type == 269)
 			{
 				num147 = 18;
 				num148 = -14;
 			}
+
 			if (projectile.type == 268)
 			{
 				num147 = 22;
 				num148 = -2;
 			}
+
 			if (projectile.type == 18)
 			{
 				num147 = 3;
 				num148 = 3;
 			}
+
 			if (projectile.type == 16)
 			{
 				num147 = 6;
 			}
+
 			if (projectile.type == 17 || projectile.type == 31)
 			{
 				num147 = 2;
 			}
+
 			if (projectile.type == 25 || projectile.type == 26 || projectile.type == 35 || projectile.type == 63 || projectile.type == 154)
 			{
 				num147 = 6;
 				num148 -= 6;
 			}
+
 			if (projectile.type == 28 || projectile.type == 37 || projectile.type == 75)
 			{
 				num147 = 8;
 			}
+
 			if (projectile.type == 29 || projectile.type == 470 || projectile.type == 637)
 			{
 				num147 = 11;
 			}
+
 			if (projectile.type == 43)
 			{
 				num147 = 4;
 			}
+
 			if (projectile.type == 208)
 			{
 				num147 = 2;
 				num148 -= 12;
 			}
+
 			if (projectile.type == 209)
 			{
 				num147 = 4;
 				num148 -= 8;
 			}
+
 			if (projectile.type == 210)
 			{
 				num147 = 2;
 				num148 -= 22;
 			}
+
 			if (projectile.type == 251)
 			{
 				num147 = 18;
 				num148 -= 10;
 			}
+
 			if (projectile.type == 163 || projectile.type == 310)
 			{
 				num147 = 10;
 			}
+
 			if (projectile.type == 69 || projectile.type == 70)
 			{
 				num147 = 4;
 				num148 = 4;
 			}
+
+			//patch file: num149
 			float num149 = (float)(Main.projectileTexture[projectile.type].Width - projectile.width) * 0.5f + (float)projectile.width * 0.5f;
 			if (projectile.type == 50 || projectile.type == 53 || projectile.type == 515)
 			{
 				num148 = -8;
 			}
+
 			if (projectile.type == 473)
 			{
 				num148 = -6;
 				num147 = 2;
 			}
+
 			if (projectile.type == 72 || projectile.type == 86 || projectile.type == 87)
 			{
 				num148 = -16;
 				num147 = 8;
 			}
+
 			if (projectile.type == 74)
 			{
 				num148 = -6;
 			}
+
 			if (projectile.type == 99)
 			{
 				num147 = 1;
 			}
+
 			if (projectile.type == 655)
 			{
 				num147 = 1;
 			}
+
 			if (projectile.type == 111)
 			{
 				num147 = 18;
 				num148 = -16;
 			}
+
 			if (projectile.type == 334)
 			{
 				num148 = -18;
 				num147 = 8;
 			}
+
 			if (projectile.type == 200)
 			{
 				num147 = 12;
 				num148 = -12;
 			}
+
 			if (projectile.type == 211)
 			{
 				num147 = 14;
 				num148 = 0;
 			}
+
 			if (projectile.type == 236)
 			{
 				num147 = 30;
 				num148 = -14;
 			}
+
 			if (projectile.type >= 191 && projectile.type <= 194)
 			{
 				num147 = 26;
@@ -26717,51 +_,63 @@
 					num148 = -22;
 				}
 			}
+
 			if (projectile.type >= 390 && projectile.type <= 392)
 			{
 				num148 = 4 * projectile.direction;
 			}
+
 			if (projectile.type == 112)
 			{
 				num147 = 12;
 			}
+
 			int arg_536F_0 = projectile.type;
 			if (projectile.type == 517 || projectile.type == 681)
 			{
 				num147 = 6;
 			}
+
 			if (projectile.type == 516)
 			{
 				num147 = 6;
 			}
+
 			if (projectile.type == 127)
 			{
 				num147 = 8;
 			}
+
 			if (projectile.type == 155)
 			{
 				num147 = 3;
 				num148 = 3;
 			}
+
 			if (projectile.type == 397)
 			{
 				num149 -= 1f;
 				num147 = -2;
 				num148 = -2;
 			}
+
 			if (projectile.type == 398)
 			{
 				num147 = 8;
 			}
+
+			ProjectileLoader.DrawOffset(projectile, ref num147, ref num148, ref num149);
 			SpriteEffects spriteEffects = SpriteEffects.None;
 			if (projectile.spriteDirection == -1)
 			{
 				spriteEffects = SpriteEffects.FlipHorizontally;
 			}
+
 			if (projectile.type == 681 && projectile.velocity.X > 0f)
 			{
 				spriteEffects ^= SpriteEffects.FlipHorizontally;
 			}
+
 			if (projectile.type == 221)
 			{
 				for (int num150 = 1; num150 < 10; num150++)
@@ -26774,38 +_,47 @@
 					{
 						num153 = 0.9f;
 					}
+
 					if (num150 == 2)
 					{
 						num153 = 0.8f;
 					}
+
 					if (num150 == 3)
 					{
 						num153 = 0.7f;
 					}
+
 					if (num150 == 4)
 					{
 						num153 = 0.6f;
 					}
+
 					if (num150 == 5)
 					{
 						num153 = 0.5f;
 					}
+
 					if (num150 == 6)
 					{
 						num153 = 0.4f;
 					}
+
 					if (num150 == 7)
 					{
 						num153 = 0.3f;
 					}
+
 					if (num150 == 8)
 					{
 						num153 = 0.2f;
 					}
+
 					if (num150 == 9)
 					{
 						num153 = 0.1f;
 					}
+
 					alpha.R = (byte)((float)alpha.R * num153);
 					alpha.G = (byte)((float)alpha.G * num153);
 					alpha.B = (byte)((float)alpha.B * num153);
@@ -26815,6 +_,7 @@
 					Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], new Vector2(projectile.position.X - Main.screenPosition.X + num149 + (float)num148 - num151, projectile.position.Y - Main.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY - num152), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y2, Main.projectileTexture[projectile.type].Width, num154)), alpha, projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), projectile.scale, spriteEffects, 0f);
 				}
 			}
+
 			if (projectile.type == 408 || projectile.type == 435 || projectile.type == 436 || projectile.type == 438 || projectile.type == 452 || projectile.type == 454 || projectile.type == 459 || projectile.type == 462 || projectile.type == 503 || projectile.type == 532 || projectile.type == 533 || projectile.type == 573 || projectile.type == 582 || projectile.type == 585 || projectile.type == 592 || projectile.type == 601 || projectile.type == 636 || projectile.type == 638 || projectile.type == 640 || projectile.type == 639 || projectile.type == 424 || projectile.type == 425 || projectile.type == 426 || projectile.type == 660 || projectile.type == 661 || projectile.type == 671 || projectile.type == 664 || projectile.type == 666 || projectile.type == 668 || projectile.type == 675 || projectile.type == 680 || projectile.type == 682 || projectile.type == 684 || projectile.type == 686 || projectile.type == 700 || projectile.type == 706 || projectile.type == 709 || projectile.type == 710 || projectile.type == 711)
 			{
 				Texture2D texture2D3 = Main.projectileTexture[projectile.type];
@@ -26826,35 +_,44 @@
 				{
 					origin2.Y = 70f;
 				}
+
 				if (projectile.type == 686 || projectile.type == 711)
 				{
 					origin2.Y = (float)(rectangle.Height - 70);
 				}
+
 				if (projectile.type == 438)
 				{
 				}
+
 				if (projectile.type == 452)
 				{
 				}
+
 				if (projectile.type == 408)
 				{
 				}
+
 				if (projectile.type == 636)
 				{
 					origin2.Y = 10f;
 				}
+
 				if (projectile.type == 638)
 				{
 					origin2.Y = 2f;
 				}
+
 				if (projectile.type == 640 || projectile.type == 639 || projectile.type == 710)
 				{
 					origin2.Y = 5f;
 				}
+
 				if (projectile.type == 700)
 				{
 					origin2.X = (float)((projectile.spriteDirection == 1) ? (rectangle.Width - 20) : 20);
 				}
+
 				int num156 = 8;
 				int num157 = 2;
 				int num158 = 1;
@@ -27006,6 +_,7 @@
 					{
 						num157 = 1;
 					}
+
 					value4 = 0.3f;
 				}
 				else if (projectile.type == 709)
@@ -27016,6 +_,7 @@
 					{
 						num157 = 1;
 					}
+
 					value4 = 0.5f;
 				}
 				else if (projectile.type == 532)
@@ -27065,6 +_,7 @@
 						num157 = (num156 = 0);
 					}
 				}
+
 				int num160 = num158;
 				while ((num157 > 0 && num160 < num156) || (num157 < 0 && num160 > num156))
 				{
@@ -27089,6 +_,7 @@
 					{
 						color26 = Microsoft.Xna.Framework.Color.Lerp(color26, Microsoft.Xna.Framework.Color.Purple, (float)num160 / (float)num156);
 					}
+
 					color26 = projectile.GetAlpha(color26);
 					if (projectile.type == 438)
 					{
@@ -27096,11 +_,13 @@
 						color26.B /= (byte)num160;
 						goto IL_64BA;
 					}
+
 					if (projectile.type == 682)
 					{
 						color26.G /= (byte)num160;
 						goto IL_64BA;
 					}
+
 					if (projectile.type == 686)
 					{
 						if (!(projectile.oldPos[num160] == Vector2.Zero))
@@ -27111,6 +_,7 @@
 								color26 = Microsoft.Xna.Framework.Color.Lerp(color26, Microsoft.Xna.Framework.Color.Purple, Utils.InverseLerp(0f, 0.5f, num161, false));
 								goto IL_64BA;
 							}
+
 							color26 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Purple, Microsoft.Xna.Framework.Color.Black, Utils.InverseLerp(0.5f, 1f, num161, false));
 							goto IL_64BA;
 						}
@@ -27125,6 +_,7 @@
 								color26 = Microsoft.Xna.Framework.Color.Lerp(color26, new Microsoft.Xna.Framework.Color(128, 0, 255, 180), Utils.InverseLerp(0f, 0.5f, num162, false));
 								goto IL_64BA;
 							}
+
 							color26 = Microsoft.Xna.Framework.Color.Lerp(new Microsoft.Xna.Framework.Color(128, 0, 255, 180), Microsoft.Xna.Framework.Color.Black, Utils.InverseLerp(0.5f, 1f, num162, false));
 							goto IL_64BA;
 						}
@@ -27139,11 +_,13 @@
 								color26.G /= 2;
 								color26.A /= 2;
 							}
+
 							color26.B /= (byte)num160;
 							color26.G /= (byte)num160;
 							color26.A /= (byte)num160;
 							goto IL_64BA;
 						}
+
 						if (projectile.type == 706 || projectile.type == 710)
 						{
 							color26.B /= (byte)num160;
@@ -27151,18 +_,21 @@
 							color26.A /= (byte)num160;
 							goto IL_64BA;
 						}
+
 						if (projectile.type == 592)
 						{
 							color26.R /= (byte)num160;
 							color26.G /= (byte)num160;
 							goto IL_64BA;
 						}
+
 						if (projectile.type == 640)
 						{
 							color26.R /= (byte)num160;
 							color26.A /= (byte)num160;
 							goto IL_64BA;
 						}
+
 						if (projectile.type >= 424 && projectile.type <= 426)
 						{
 							color26.B /= (byte)num160;
@@ -27170,8 +_,10 @@
 							color26.A /= (byte)num160;
 							goto IL_64BA;
 						}
+
 						goto IL_64BA;
 					}
+
 					IL_660E:
 					num160 += num157;
 					continue;
@@ -27181,6 +_,7 @@
 					{
 						num163 = (float)(num158 - num160);
 					}
+
 					color26 *= num163 / ((float)ProjectileID.Sets.TrailCacheLength[projectile.type] * 1.5f);
 					Vector2 value5 = projectile.oldPos[num160];
 					float num164 = projectile.rotation;
@@ -27190,9 +_,11 @@
 						num164 = projectile.oldRot[num160];
 						effects = ((projectile.oldSpriteDirection[num160] == -1) ? SpriteEffects.FlipHorizontally : SpriteEffects.None);
 					}
+
 					Main.spriteBatch.Draw(texture2D3, value5 + projectile.Size / 2f - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(rectangle), color26, num164 + projectile.rotation * num159 * (float)(num160 - 1) * (float)(-(float)spriteEffects.HasFlag(SpriteEffects.FlipHorizontally).ToDirectionInt()), origin2, MathHelper.Lerp(projectile.scale, value4, (float)num160 / 15f), effects, 0f);
 					goto IL_660E;
 				}
+
 				if (projectile.type == 661)
 				{
 					Microsoft.Xna.Framework.Color color27 = new Microsoft.Xna.Framework.Color(120, 40, 222, 120);
@@ -27211,15 +_,18 @@
 						Main.spriteBatch.Draw(texture2D3, projectile.Center - Main.screenPosition + new Vector2(0f, projectile.gfxOffY) + projectile.rotation.ToRotationVector2().RotatedBy((double)(0.7853982f * (float)num166), default(Vector2)) * (4f + 1f * x2), new Microsoft.Xna.Framework.Rectangle?(rectangle), color28, projectile.rotation, origin2, projectile.scale, spriteEffects, 0f);
 					}
 				}
+
 				Microsoft.Xna.Framework.Color color29 = projectile.GetAlpha(color25);
 				if (projectile.type == 640)
 				{
 					color29 = Microsoft.Xna.Framework.Color.Transparent;
 				}
+
 				if (projectile.type == 684)
 				{
 					color29.A = 127;
 				}
+
 				Main.spriteBatch.Draw(texture2D3, projectile.Center - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(rectangle), color29, projectile.rotation, origin2, projectile.scale, spriteEffects, 0f);
 				if (projectile.type == 503)
 				{
@@ -27286,24 +_,28 @@
 					{
 						num173 = 1f + Utils.InverseLerp(30f, 40f, projectile.ai[0], true);
 					}
+
 					Vector2 value6 = new Vector2(1f, 1f);
 					Vector2 value7 = new Vector2(0.8f, 2f);
 					if (num173 < 1f)
 					{
 						value6.X *= num173;
 					}
+
 					vector26 *= num173;
 					if (num173 < 1f)
 					{
 						color30 *= num173;
 						color31 *= num173;
 					}
+
 					if (num173 > 1.5f)
 					{
 						float scale2 = Utils.InverseLerp(2f, 1.5f, num173, true);
 						color30 *= scale2;
 						color31 *= scale2;
 					}
+
 					float scale3 = 0.42f;
 					color30 *= scale3;
 					color31 *= scale3;
@@ -27324,10 +_,12 @@
 							num174 = 150f;
 							scaleFactor = 3f;
 						}
+
 						if (projectile.ai[1] == 1f)
 						{
 							num174 = (float)((int)projectile.localAI[0]);
 						}
+
 						for (int num175 = 1; num175 <= (int)projectile.localAI[0]; num175++)
 						{
 							Vector2 value10 = Vector2.Normalize(projectile.velocity) * (float)num175 * scaleFactor;
@@ -27385,6 +_,7 @@
 							{
 								color33 = Microsoft.Xna.Framework.Color.Transparent;
 							}
+
 							float num184 = 0.9f + num182 * 0.8f;
 							num184 *= num184;
 							num184 *= 0.8f;
@@ -27410,25 +_,30 @@
 						num186 += 1f;
 						color38 = Microsoft.Xna.Framework.Color.Lerp(color38, Microsoft.Xna.Framework.Color.Red, 1f / num186);
 					}
+
 					if (toolMode.HasFlag(WiresUI.Settings.MultiToolMode.Blue))
 					{
 						num186 += 1f;
 						color38 = Microsoft.Xna.Framework.Color.Lerp(color38, Microsoft.Xna.Framework.Color.Blue, 1f / num186);
 					}
+
 					if (toolMode.HasFlag(WiresUI.Settings.MultiToolMode.Green))
 					{
 						num186 += 1f;
 						color38 = Microsoft.Xna.Framework.Color.Lerp(color38, new Microsoft.Xna.Framework.Color(0, 255, 0), 1f / num186);
 					}
+
 					if (toolMode.HasFlag(WiresUI.Settings.MultiToolMode.Yellow))
 					{
 						num186 += 1f;
 						color38 = Microsoft.Xna.Framework.Color.Lerp(color38, new Microsoft.Xna.Framework.Color(255, 255, 0), 1f / num186);
 					}
+
 					if (toolMode.HasFlag(WiresUI.Settings.MultiToolMode.Cutter))
 					{
 						color37 = new Microsoft.Xna.Framework.Color(50, 50, 50, 255);
 					}
+
 					color38.A = 0;
 					if (point == point2)
 					{
@@ -27438,6 +_,7 @@
 						{
 							Main.spriteBatch.Draw(Main.wireUITexture[11], position4, null, color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 						}
+
 						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position4, new Microsoft.Xna.Framework.Rectangle?(value14), color38, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 						value14.Y = 18;
 						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position4, new Microsoft.Xna.Framework.Rectangle?(value14), color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
@@ -27452,6 +_,7 @@
 						{
 							Main.spriteBatch.Draw(Main.wireUITexture[11], position5, null, color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 						}
+
 						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position5, new Microsoft.Xna.Framework.Rectangle?(value15), color38, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 						value15.Y = 18;
 						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position5, new Microsoft.Xna.Framework.Rectangle?(value15), color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
@@ -27464,16 +_,19 @@
 							{
 								Main.spriteBatch.Draw(Main.wireUITexture[11], position5, null, color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 							}
+
 							Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position5, new Microsoft.Xna.Framework.Rectangle?(value15), color38, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 							value15.Y = 18;
 							Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position5, new Microsoft.Xna.Framework.Rectangle?(value15), color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 						}
+
 						position5 = point2.ToVector2() * 16f - Main.screenPosition;
 						value15 = new Microsoft.Xna.Framework.Rectangle((num187 * num185 > 0) ? 18 : 72, 0, 16, 16);
 						if (flag21)
 						{
 							Main.spriteBatch.Draw(Main.wireUITexture[11], position5, null, color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 						}
+
 						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position5, new Microsoft.Xna.Framework.Rectangle?(value15), color38, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 						value15.Y = 18;
 						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position5, new Microsoft.Xna.Framework.Rectangle?(value15), color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
@@ -27488,6 +_,7 @@
 						{
 							Main.spriteBatch.Draw(Main.wireUITexture[11], position6, null, color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 						}
+
 						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position6, new Microsoft.Xna.Framework.Rectangle?(value16), color38, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 						value16.Y = 18;
 						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position6, new Microsoft.Xna.Framework.Rectangle?(value16), color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
@@ -27500,16 +_,19 @@
 							{
 								Main.spriteBatch.Draw(Main.wireUITexture[11], position6, null, color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 							}
+
 							Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position6, new Microsoft.Xna.Framework.Rectangle?(value16), color38, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 							value16.Y = 18;
 							Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position6, new Microsoft.Xna.Framework.Rectangle?(value16), color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 						}
+
 						position6 = point2.ToVector2() * 16f - Main.screenPosition;
 						value16 = new Microsoft.Xna.Framework.Rectangle((num190 > 0) ? 144 : 36, 0, 16, 16);
 						if (flag21)
 						{
 							Main.spriteBatch.Draw(Main.wireUITexture[11], position6, null, color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 						}
+
 						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position6, new Microsoft.Xna.Framework.Rectangle?(value16), color38, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 						value16.Y = 18;
 						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position6, new Microsoft.Xna.Framework.Rectangle?(value16), color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
@@ -27540,6 +_,7 @@
 							num196 = point2.X;
 							num197 = num193;
 						}
+
 						Vector2 position7 = point.ToVector2() * 16f - Main.screenPosition;
 						Microsoft.Xna.Framework.Rectangle value17 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
 						if (!flag23)
@@ -27550,10 +_,12 @@
 						{
 							value17.X = ((num197 > 0) ? 72 : 18);
 						}
+
 						if (flag21)
 						{
 							Main.spriteBatch.Draw(Main.wireUITexture[11], position7, null, color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 						}
+
 						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position7, new Microsoft.Xna.Framework.Rectangle?(value17), color38, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 						value17.Y = 18;
 						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position7, new Microsoft.Xna.Framework.Rectangle?(value17), color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
@@ -27568,6 +_,7 @@
 							{
 								p.X = num198;
 							}
+
 							if (WorldGen.InWorld(p.X, p.Y, 1))
 							{
 								Tile tile = Main.tile[p.X, p.Y];
@@ -27583,17 +_,21 @@
 									{
 										value17.X = 90;
 									}
+
 									if (flag21)
 									{
 										Main.spriteBatch.Draw(Main.wireUITexture[11], position7, null, color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 									}
+
 									Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position7, new Microsoft.Xna.Framework.Rectangle?(value17), color38, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 									value17.Y = 18;
 									Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position7, new Microsoft.Xna.Framework.Rectangle?(value17), color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 								}
 							}
+
 							num198 += num197;
 						}
+
 						if (flag23)
 						{
 							p.Y = point2.Y;
@@ -27608,6 +_,7 @@
 							num196 = point2.Y;
 							num197 = num194;
 						}
+
 						position7 = p.ToVector2() * 16f - Main.screenPosition;
 						value17 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
 						if (!flag23)
@@ -27620,10 +_,12 @@
 							value17.X += ((num193 > 0) ? 36 : 144);
 							value17.X += ((num194 * num185 > 0) ? 18 : 72);
 						}
+
 						if (flag21)
 						{
 							Main.spriteBatch.Draw(Main.wireUITexture[11], position7, null, color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 						}
+
 						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position7, new Microsoft.Xna.Framework.Rectangle?(value17), color38, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 						value17.Y = 18;
 						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position7, new Microsoft.Xna.Framework.Rectangle?(value17), color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
@@ -27638,6 +_,7 @@
 							{
 								p.X = num199;
 							}
+
 							if (WorldGen.InWorld(p.X, p.Y, 1))
 							{
 								Tile tile = Main.tile[p.X, p.Y];
@@ -27653,17 +_,21 @@
 									{
 										value17.X = 180;
 									}
+
 									if (flag21)
 									{
 										Main.spriteBatch.Draw(Main.wireUITexture[11], position7, null, color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 									}
+
 									Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position7, new Microsoft.Xna.Framework.Rectangle?(value17), color38, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 									value17.Y = 18;
 									Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position7, new Microsoft.Xna.Framework.Rectangle?(value17), color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 								}
 							}
+
 							num199 += num197;
 						}
+
 						position7 = point2.ToVector2() * 16f - Main.screenPosition;
 						value17 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
 						if (!flag23)
@@ -27674,10 +_,12 @@
 						{
 							value17.X += ((num193 > 0) ? 144 : 36);
 						}
+
 						if (flag21)
 						{
 							Main.spriteBatch.Draw(Main.wireUITexture[11], position7, null, color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 						}
+
 						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position7, new Microsoft.Xna.Framework.Rectangle?(value17), color38, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 						value17.Y = 18;
 						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position7, new Microsoft.Xna.Framework.Rectangle?(value17), color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
@@ -27690,14 +_,17 @@
 					{
 						num200 = MathHelper.Lerp(300f, 600f, (projectile.ai[0] - 100f) / 200f);
 					}
+
 					if (num200 > 600f)
 					{
 						num200 = 600f;
 					}
+
 					if (projectile.ai[0] >= 500f)
 					{
 						num200 = MathHelper.Lerp(600f, 1200f, (projectile.ai[0] - 500f) / 100f);
 					}
+
 					float rotation23 = projectile.rotation;
 					Texture2D texture2D5 = Main.projectileTexture[projectile.type];
 					Microsoft.Xna.Framework.Color alpha2 = projectile.GetAlpha(color25);
@@ -27713,6 +_,7 @@
 						Main.spriteBatch.Draw(texture2D5, position8, new Microsoft.Xna.Framework.Rectangle?(rectangle3), alpha2, num203, rectangle3.Size() / 2f, projectile.scale, SpriteEffects.None, 0f);
 						num202++;
 					}
+
 					int num204 = 0;
 					while ((float)num204 < 20f)
 					{
@@ -27746,22 +_,24 @@
 					{
 						case 688:
 							texture2D8 = Main.glowMaskTexture[228];
-							texture2D9 = Main.extraTexture[86];
-							break;
+						texture2D9 = Main.extraTexture[86];
+						break;
 						case 689:
 							texture2D8 = Main.glowMaskTexture[229];
-							texture2D9 = Main.extraTexture[87];
-							break;
+						texture2D9 = Main.extraTexture[87];
+						break;
 						case 690:
 							texture2D8 = Main.glowMaskTexture[230];
-							texture2D9 = Main.extraTexture[88];
-							break;
-					}
+						texture2D9 = Main.extraTexture[88];
+						break;
+					}
+
 					Main.spriteBatch.Draw(texture2D7, position11, new Microsoft.Xna.Framework.Rectangle?(rectangle5), color39, projectile.rotation, origin4, projectile.scale, spriteEffects, 0f);
 					if (texture2D8 != null)
 					{
 						Main.spriteBatch.Draw(texture2D8, position11, new Microsoft.Xna.Framework.Rectangle?(rectangle5), color40, projectile.rotation, origin4, projectile.scale, spriteEffects, 0f);
 					}
+
 					if (texture2D9 != null)
 					{
 						Vector2 position12 = projectile.Center + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
@@ -27783,8 +_,9 @@
 						case 694:
 						case 695:
 							origin5.X += 3f;
-							break;
-					}
+						break;
+					}
+
 					Microsoft.Xna.Framework.Color color41 = Microsoft.Xna.Framework.Color.Lerp(projectile.GetAlpha(color25), Microsoft.Xna.Framework.Color.White, 0f);
 					Main.spriteBatch.Draw(texture2D10, position13, new Microsoft.Xna.Framework.Rectangle?(rectangle6), color41, projectile.rotation, origin5, projectile.scale, spriteEffects, 0f);
 					Main.spriteBatch.Draw(texture2D10, position13, new Microsoft.Xna.Framework.Rectangle?(rectangle6), color41 * 0.3f, projectile.rotation, origin5, projectile.scale * 1.1f, spriteEffects, 0f);
@@ -27806,6 +_,7 @@
 						Vector2 _ = projectile.oldPos[num209] - Main.screenPosition + new Vector2(num149 + (float)num148, (float)(projectile.height / 2) + projectile.gfxOffY);
 						Main.spriteBatch.Draw(texture2D11, projectile.oldPos[num209] + new Vector2((float)projectile.width, (float)projectile.height) / 2f - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y4, texture2D11.Width, num206)), color42, projectile.rotation, new Vector2((float)texture2D11.Width / 2f, (float)num206 / 2f), MathHelper.Lerp(projectile.scale, value18, (float)num209 / 15f), spriteEffects, 0f);
 					}
+
 					Main.spriteBatch.Draw(texture2D11, projectile.Center - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y4, texture2D11.Width, num206)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D11.Width / 2f, (float)num206 / 2f), projectile.scale, spriteEffects, 0f);
 				}
 				else if (projectile.type == 437)
@@ -27825,6 +_,7 @@
 						Vector2 _ = projectile.oldPos[num213] - Main.screenPosition + new Vector2(num149 + (float)num148, (float)(projectile.height / 2) + projectile.gfxOffY);
 						Main.spriteBatch.Draw(texture2D12, projectile.oldPos[num213] + new Vector2((float)projectile.width, (float)projectile.height) / 2f - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y5, texture2D12.Width, num210)), color43, projectile.rotation, new Vector2((float)texture2D12.Width / 2f, (float)num210 / 2f), MathHelper.Lerp(projectile.scale, value19, (float)num213 / 15f), spriteEffects, 0f);
 					}
+
 					Main.spriteBatch.Draw(texture2D12, projectile.Center - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y5, texture2D12.Width, num210)), Microsoft.Xna.Framework.Color.White, projectile.rotation, new Vector2((float)texture2D12.Width / 2f, (float)num210 / 2f), projectile.scale + 0.2f, spriteEffects, 0f);
 					Main.spriteBatch.Draw(texture2D12, projectile.Center - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y5, texture2D12.Width, num210)), projectile.GetAlpha(Microsoft.Xna.Framework.Color.White), projectile.rotation, new Vector2((float)texture2D12.Width / 2f, (float)num210 / 2f), projectile.scale + 0.2f, spriteEffects, 0f);
 				}
@@ -27849,10 +_,12 @@
 						{
 							num216 = 0.03f;
 						}
+
 						float arg_97B3_0 = (1f + num216 * 10f) / 11f;
 						color25 *= num216;
 						scale5 = num216;
 					}
+
 					if (Main.player[projectile.owner].setVortex && Main.player[projectile.owner].inventory[Main.player[projectile.owner].selectedItem].ranged)
 					{
 						float num217 = Main.player[projectile.owner].stealth;
@@ -27860,10 +_,12 @@
 						{
 							num217 = 0.03f;
 						}
+
 						float arg_9854_0 = (1f + num217 * 10f) / 11f;
 						color25 = color25.MultiplyRGBA(new Microsoft.Xna.Framework.Color(Vector4.Lerp(Vector4.One, new Vector4(0f, 0.12f, 0.16f, 0f), 1f - num217)));
 						scale5 = num217;
 					}
+
 					Main.spriteBatch.Draw(texture2D14, vector27, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y7, texture2D14.Width, num215)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D14.Width / 2f, (float)num215 / 2f), projectile.scale, spriteEffects, 0f);
 					if (projectile.type == 439)
 					{
@@ -27895,6 +_,7 @@
 						{
 							spriteEffects |= SpriteEffects.FlipVertically;
 						}
+
 						Main.spriteBatch.Draw(Main.glowMaskTexture[102], vector27, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y7, texture2D14.Width, num215)), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), projectile.rotation - 1.57079637f, new Vector2((float)texture2D14.Width / 2f, (float)num215 / 2f), projectile.scale, spriteEffects, 0f);
 						if (projectile.ai[0] > 180f && Main.projectile[(int)projectile.ai[1]].type == 461)
 						{
@@ -27908,6 +_,7 @@
 						{
 							scaleFactor2 = 4f;
 						}
+
 						for (float num218 = 0f; num218 < 4f; num218 += 1f)
 						{
 							Main.spriteBatch.Draw(texture2D14, vector27 + Vector2.UnitY.RotatedBy((double)(num218 * 6.28318548f / 4f), default(Vector2)) * scaleFactor2, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y7, texture2D14.Width, num215)), projectile.GetAlpha(color25).MultiplyRGBA(new Microsoft.Xna.Framework.Color(255, 255, 255, 0)) * 0.03f, projectile.rotation, new Vector2((float)texture2D14.Width / 2f, (float)num215 / 2f), projectile.scale, spriteEffects, 0f);
@@ -27939,14 +_,17 @@
 					{
 						num223 = 0;
 					}
+
 					if (num223 > 0)
 					{
 						if (num222 == num221 * 3)
 						{
 							num222 = num221 * 2;
 						}
+
 						Main.spriteBatch.Draw(Main.extraTexture[4], vector28 + Vector2.UnitY * (float)(num221 - 1), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num222 + num221 - 1, texture2D17.Width, 1)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)(texture2D17.Width / 2), 0f), new Vector2(1f, (float)num223), spriteEffects, 0f);
 					}
+
 					value20.Width = texture2D16.Width;
 					value20.Y = y9;
 					Main.spriteBatch.Draw(texture2D16, vector28 + Vector2.UnitY * (float)(num221 - 1 + num223), new Microsoft.Xna.Framework.Rectangle?(value20), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D16.Width / 2f, 0f), projectile.scale, spriteEffects, 0f);
@@ -27957,6 +_,7 @@
 					{
 						return;
 					}
+
 					Texture2D texture2D18 = Main.projectileTexture[projectile.type];
 					Texture2D texture2D19 = Main.extraTexture[21];
 					Texture2D texture2D20 = Main.extraTexture[22];
@@ -27976,6 +_,7 @@
 							{
 								value22.Height = (int)(num224 - num225);
 							}
+
 							Main.spriteBatch.Draw(texture2D19, value21 - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(value22), color44, projectile.rotation, new Vector2((float)(value22.Width / 2), 0f), projectile.scale, SpriteEffects.None, 0f);
 							num225 += (float)value22.Height * projectile.scale;
 							value21 += projectile.velocity * (float)value22.Height * projectile.scale;
@@ -27986,6 +_,7 @@
 							}
 						}
 					}
+
 					Main.spriteBatch.Draw(texture2D20, value21 - Main.screenPosition, null, color44, projectile.rotation, texture2D20.Frame(1, 1, 0, 0).Top(), projectile.scale, SpriteEffects.None, 0f);
 				}
 				else if (projectile.type == 461)
@@ -27994,6 +_,7 @@
 					{
 						return;
 					}
+
 					Texture2D texture2D21 = Main.projectileTexture[projectile.type];
 					float num226 = projectile.localAI[1];
 					Microsoft.Xna.Framework.Color color45 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * 0.9f;
@@ -28013,11 +_,13 @@
 							{
 								rectangle7.Height = (int)(num226 - num227);
 							}
+
 							Main.spriteBatch.Draw(texture2D21, value24 - Main.screenPosition + value23, new Microsoft.Xna.Framework.Rectangle?(rectangle7), color45, projectile.rotation, new Vector2((float)(rectangle7.Width / 2), 0f), projectile.scale, SpriteEffects.None, 0f);
 							num227 += (float)rectangle7.Height * projectile.scale;
 							value24 += projectile.velocity * (float)rectangle7.Height * projectile.scale;
 						}
 					}
+
 					rectangle7 = new Microsoft.Xna.Framework.Rectangle(0, 56, texture2D21.Width, 22);
 					Main.spriteBatch.Draw(texture2D21, value24 - Main.screenPosition + value23, new Microsoft.Xna.Framework.Rectangle?(rectangle7), color45, projectile.rotation, texture2D21.Frame(1, 1, 0, 0).Top(), projectile.scale, SpriteEffects.None, 0f);
 				}
@@ -28027,6 +_,7 @@
 					{
 						return;
 					}
+
 					Texture2D tex = Main.projectileTexture[projectile.type];
 					float num228 = projectile.localAI[1];
 					float prismHue = projectile.GetPrismHue(projectile.ai[0]);
@@ -28049,6 +_,7 @@
 					{
 						return;
 					}
+
 					Texture2D tex2 = Main.projectileTexture[projectile.type];
 					float num229 = projectile.localAI[1];
 					Microsoft.Xna.Framework.Color c_ = new Microsoft.Xna.Framework.Color(255, 255, 255, 127);
@@ -28072,6 +_,7 @@
 					{
 						return;
 					}
+
 					float num230 = projectile.velocity.Length() + 16f;
 					bool flag24 = num230 < 100f;
 					Vector2 value28 = Vector2.Normalize(projectile.velocity);
@@ -28092,11 +_,13 @@
 							{
 								rectangle8.Height = (int)(num230 - num231);
 							}
+
 							Main.spriteBatch.Draw(texture2D22, vector31 - Main.screenPosition + value29, new Microsoft.Xna.Framework.Rectangle?(rectangle8), alpha3, rotation24, new Vector2((float)(rectangle8.Width / 2), 0f), projectile.scale, SpriteEffects.None, 0f);
 							num231 += (float)rectangle8.Height * projectile.scale;
 							vector31 += value28 * (float)rectangle8.Height * projectile.scale;
 						}
 					}
+
 					Vector2 value30 = vector31;
 					vector31 = projectile.Center.Floor();
 					vector31 += value28 * projectile.scale * 24f;
@@ -28106,6 +_,7 @@
 					{
 						num232 = 9;
 					}
+
 					float num233 = num230;
 					if (num230 > 0f)
 					{
@@ -28120,11 +_,13 @@
 							{
 								num237 *= 0.75f;
 							}
+
 							Main.spriteBatch.Draw(texture2D22, vector31 - Main.screenPosition + value29, new Microsoft.Xna.Framework.Rectangle?(rectangle8), alpha3, rotation24, new Vector2((float)(rectangle8.Width / 2), 0f), projectile.scale, SpriteEffects.None, 0f);
 							num234 += num237;
 							vector31 += value28 * num237;
 						}
 					}
+
 					rectangle8 = new Microsoft.Xna.Framework.Rectangle(0, 90, texture2D22.Width, 48);
 					Main.spriteBatch.Draw(texture2D22, value30 - Main.screenPosition + value29, new Microsoft.Xna.Framework.Rectangle?(rectangle8), alpha3, rotation24, texture2D22.Frame(1, 1, 0, 0).Top(), projectile.scale, SpriteEffects.None, 0f);
 				}
@@ -28134,6 +_,7 @@
 					{
 						return;
 					}
+
 					Texture2D texture2D23 = Main.projectileTexture[projectile.type];
 					float num238 = projectile.localAI[1];
 					Microsoft.Xna.Framework.Color color46 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * 0.9f;
@@ -28153,11 +_,13 @@
 							{
 								rectangle9.Height = (int)(num238 - num239);
 							}
+
 							Main.spriteBatch.Draw(texture2D23, value32 - Main.screenPosition + value31, new Microsoft.Xna.Framework.Rectangle?(rectangle9), color46, projectile.rotation, new Vector2((float)(rectangle9.Width / 2), 0f), projectile.scale, SpriteEffects.None, 0f);
 							num239 += (float)rectangle9.Height * projectile.scale;
 							value32 += projectile.velocity * (float)rectangle9.Height * projectile.scale;
 						}
 					}
+
 					rectangle9 = new Microsoft.Xna.Framework.Rectangle(0, 56, texture2D23.Width, 22);
 					Main.spriteBatch.Draw(texture2D23, value32 - Main.screenPosition + value31, new Microsoft.Xna.Framework.Rectangle?(rectangle9), color46, projectile.rotation, texture2D23.Frame(1, 1, 0, 0).Top(), projectile.scale, SpriteEffects.None, 0f);
 				}
@@ -28188,6 +_,7 @@
 							{
 								rectangle11.Height = (int)(num240 - num241);
 							}
+
 							Microsoft.Xna.Framework.Point point3 = vector32.ToTileCoordinates();
 							Microsoft.Xna.Framework.Color color47 = Lighting.GetColor(point3.X, point3.Y);
 							color47 = Microsoft.Xna.Framework.Color.Lerp(color47, Microsoft.Xna.Framework.Color.White, 0.3f);
@@ -28196,6 +_,7 @@
 							vector32 += value35 * (float)rectangle11.Height * projectile.scale;
 						}
 					}
+
 					Microsoft.Xna.Framework.Point point4 = vector32.ToTileCoordinates();
 					Microsoft.Xna.Framework.Color color48 = Lighting.GetColor(point4.X, point4.Y);
 					color48 = Microsoft.Xna.Framework.Color.Lerp(color48, Microsoft.Xna.Framework.Color.White, 0.3f);
@@ -28204,6 +_,7 @@
 					{
 						value36.Height += (int)num240;
 					}
+
 					Main.spriteBatch.Draw(texture2D26, vector32 - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(value36), color48, projectile.rotation, new Vector2((float)value36.Width / 2f, (float)value36.Height), projectile.scale, SpriteEffects.None, 0f);
 				}
 				else if (projectile.type == 443)
@@ -28229,6 +_,7 @@
 					{
 						num247 = 300f;
 					}
+
 					float num248 = 15f;
 					float num249 = 15f;
 					float num250 = projectile.ai[0];
@@ -28237,6 +_,7 @@
 					{
 						scale8 = MathHelper.Lerp(1f, 0f, (num250 - (num247 - 60f)) / 60f);
 					}
+
 					Microsoft.Xna.Framework.Point point5 = projectile.Center.ToTileCoordinates();
 					int num251;
 					int num252;
@@ -28272,6 +_,7 @@
 						{
 							color49 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Transparent, value39, 2f - num258 * 2f);
 						}
+
 						color49.A = (byte)((float)color49.A * 0.5f);
 						color49 *= scale8;
 						vector35 *= value40 * 100f;
@@ -28290,6 +_,7 @@
 					{
 						scale9 = MathHelper.Lerp(1f, 0f, (num262 - (num261 - 60f)) / 60f);
 					}
+
 					float num263 = 0.2f;
 					Vector2 top = projectile.Top;
 					Vector2 bottom = projectile.Bottom;
@@ -28310,6 +_,7 @@
 					{
 						num266 = 4.11f;
 					}
+
 					Microsoft.Xna.Framework.Color value41 = new Microsoft.Xna.Framework.Color(160, 140, 100, 127);
 					Microsoft.Xna.Framework.Color color50 = new Microsoft.Xna.Framework.Color(140, 160, 255, 127);
 					float num267 = num262 % 60f;
@@ -28321,6 +_,7 @@
 					{
 						color50 *= Utils.InverseLerp(38f, 30f, num267, true);
 					}
+
 					bool flag26 = color50 != Microsoft.Xna.Framework.Color.Transparent;
 					for (float num268 = (float)((int)bottom.Y); num268 > (float)((int)top.Y); num268 -= num266)
 					{
@@ -28331,6 +_,7 @@
 						{
 							num270 *= -1f;
 						}
+
 						float num271 = num269 - 0.35f;
 						Vector2 vector37 = spinningpoint3.RotatedBy((double)num270, default(Vector2));
 						Vector2 value42 = new Vector2(0f, num269 + 1f);
@@ -28340,6 +_,7 @@
 						{
 							color51 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Transparent, value41, 2f - num269 * 2f);
 						}
+
 						color51.A = (byte)((float)color51.A * 0.5f);
 						color51 *= scale9;
 						vector37 *= value42 * 100f;
@@ -28353,10 +_,12 @@
 							{
 								color52 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Transparent, color50, 2f - num269 * 2f);
 							}
+
 							color52.A = (byte)((float)color52.A * 0.5f);
 							color52 *= scale9;
 							Main.spriteBatch.Draw(texture2D29, vector37, new Microsoft.Xna.Framework.Rectangle?(rectangle13), color52, num264 + num270, origin7, (1f + num271) * 0.8f, effects2, 0f);
 						}
+
 						Main.spriteBatch.Draw(texture2D29, vector37, new Microsoft.Xna.Framework.Rectangle?(rectangle13), color51, num264 + num270, origin7, 1f + num271, effects2, 0f);
 					}
 				}
@@ -28370,14 +_,17 @@
 					{
 						origin8.Y = 4f;
 					}
+
 					if (projectile.type == 662 || projectile.type == 685)
 					{
 						origin8 = new Vector2(6f, 6f);
 					}
+
 					if (projectile.type == 699 || projectile.type == 708)
 					{
 						origin8 = new Vector2((projectile.spriteDirection == 1) ? ((float)texture2D30.Width - -8f) : -8f, -8f);
 					}
+
 					if (projectile.type == 502)
 					{
 						this.LoadProjectile(250);
@@ -28406,18 +_,22 @@
 						{
 							num273 = (projectile.ai[0] - 10f) / 10f;
 						}
+
 						if (projectile.ai[0] >= 20f)
 						{
 							num273 = (20f - projectile.ai[0]) / 10f;
 						}
+
 						if (num273 > 1f)
 						{
 							num273 = 1f;
 						}
+
 						if (num273 < 0f)
 						{
 							num273 = 0f;
 						}
+
 						if (num273 != 0f)
 						{
 							Texture2D texture2D32 = Main.extraTexture[47];
@@ -28432,6 +_,7 @@
 							Main.spriteBatch.Draw(texture2D32, vector41, null, color54, rotation26, origin10, scale11, SpriteEffects.None, 0f);
 						}
 					}
+
 					if (projectile.type == 578 || projectile.type == 579 || projectile.type == 641)
 					{
 						Microsoft.Xna.Framework.Color color55 = alpha4 * 0.8f;
@@ -28447,6 +_,7 @@
 						Main.spriteBatch.Draw(Main.extraTexture[50], vector38, null, alpha4 * 0.8f, projectile.rotation * 0.5f, origin8, projectile.scale * 0.9f, spriteEffects, 0f);
 						alpha4.A = 0;
 					}
+
 					if (projectile.type == 617)
 					{
 						Microsoft.Xna.Framework.Color color57 = alpha4 * 0.8f;
@@ -28462,11 +_,13 @@
 						Main.spriteBatch.Draw(Main.extraTexture[50], vector38, null, alpha4 * 0.8f, projectile.rotation * 0.5f, origin8, projectile.scale * 0.9f, spriteEffects, 0f);
 						alpha4.A = 0;
 					}
+
 					bool flag27 = false;
 					if (!(flag27 | (projectile.type == 464 && projectile.ai[1] != 1f)))
 					{
 						Main.spriteBatch.Draw(texture2D30, vector38, null, alpha4, projectile.rotation, origin8, projectile.scale, spriteEffects, 0f);
 					}
+
 					if (projectile.type == 464 && projectile.ai[1] != 1f)
 					{
 						texture2D30 = Main.extraTexture[35];
@@ -28518,6 +_,7 @@
 							value47 = texture2D30.Frame(1, 3, 0, Main.player[projectile.owner].itemAnimation % 9 / 3);
 							scale14 = 0.75f;
 						}
+
 						Microsoft.Xna.Framework.Color color59 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * scale14;
 						float x3 = 2f;
 						Vector2 spinningpoint5 = new Vector2(x3, 0f).RotatedBy((double)projectile.rotation, default(Vector2));
@@ -28525,6 +_,7 @@
 						{
 							Main.spriteBatch.Draw(texture2D30, vector38 + spinningpoint5.RotatedBy((double)(num278 * 1.57079637f), default(Vector2)), new Microsoft.Xna.Framework.Rectangle?(value47), color59 * 0.5f, projectile.rotation, origin8, projectile.scale, spriteEffects, 0f);
 						}
+
 						Main.spriteBatch.Draw(texture2D30, vector38, new Microsoft.Xna.Framework.Rectangle?(value47), color59, projectile.rotation, origin8, projectile.scale, spriteEffects, 0f);
 					}
 				}
@@ -28545,6 +_,7 @@
 							{
 								num279 = 1f;
 							}
+
 							Main.spriteBatch.Draw(Main.extraTexture[46], vector42, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 128) * num279, projectile.rotation, new Vector2(17f, 22f), projectile.scale, spriteEffects, 0f);
 						}
 					}
@@ -28568,15 +_,18 @@
 						{
 							spriteEffects ^= (SpriteEffects.FlipHorizontally | SpriteEffects.FlipVertically);
 						}
+
 						Texture2D texture2D34 = Main.extraTexture[83];
 						if (projectile.type == 678)
 						{
 							texture2D34 = Main.extraTexture[84];
 						}
+
 						if (projectile.type == 679)
 						{
 							texture2D34 = Main.extraTexture[85];
 						}
+
 						Vector2 position16 = projectile.Bottom + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
 						Vector2 origin12 = texture2D34.Size() * new Vector2(0.5f, 1f);
 						origin12.Y -= 2f;
@@ -28588,6 +_,7 @@
 						{
 							vector42.Y += -4f;
 						}
+
 						if (projectile.type == 679)
 						{
 							vector42.Y -= 2f;
@@ -28599,6 +_,7 @@
 							{
 								origin11.Y -= 4f;
 							}
+
 							origin11.X += (float)(spriteEffects.HasFlag(SpriteEffects.FlipHorizontally).ToDirectionInt() * 4);
 						}
 					}
@@ -28654,6 +_,7 @@
 						Microsoft.Xna.Framework.Color color61 = Main.hslToRgb(0.136f, 1f, 0.5f).MultiplyRGBA(new Microsoft.Xna.Framework.Color(255, 255, 255, 0));
 						Main.spriteBatch.Draw(texture2D33, vector42, new Microsoft.Xna.Framework.Rectangle?(rectangle15), color61, 0f, origin11, new Vector2(1f, 5f) * projectile.scale * 2f, spriteEffects, 0f);
 					}
+
 					Main.spriteBatch.Draw(texture2D33, vector42, new Microsoft.Xna.Framework.Rectangle?(rectangle15), alpha5, projectile.rotation, origin11, projectile.scale, spriteEffects, 0f);
 					if (projectile.type == 535)
 					{
@@ -28686,11 +_,12 @@
 						{
 							case 665:
 								texture2 = Main.glowMaskTexture[222];
-								break;
+							break;
 							case 667:
 								texture2 = Main.glowMaskTexture[223];
-								break;
-						}
+							break;
+						}
+
 						float num284 = (projectile.localAI[0] / 100f * 6.28318548f).ToRotationVector2().X * 1f + 1f;
 						Microsoft.Xna.Framework.Color color63 = new Microsoft.Xna.Framework.Color(140, 100, 40, 0) * (num284 / 4f + 0.5f) * 1f;
 						for (float num285 = 0f; num285 < 4f; num285 += 1f)
@@ -28744,11 +_,12 @@
 						{
 							case 692:
 								texture3 = Main.glowMaskTexture[236];
-								break;
+							break;
 							case 693:
 								texture3 = Main.glowMaskTexture[237];
-								break;
-						}
+							break;
+						}
+
 						Main.spriteBatch.Draw(texture3, vector42, new Microsoft.Xna.Framework.Rectangle?(rectangle15), new Microsoft.Xna.Framework.Color(255, 255, 255, 127), projectile.rotation, origin11, projectile.scale, spriteEffects, 0f);
 					}
 					else if (projectile.type == 590)
@@ -28783,6 +_,7 @@
 						{
 							num289 += 1f;
 						}
+
 						int num290 = (int)Math.Floor((double)projectile.localAI[1]);
 						float scaleFactor6 = 5f;
 						float scale15 = 1f + (float)num290 * 0.02f;
@@ -28790,6 +_,7 @@
 						{
 							scaleFactor6 = 7f;
 						}
+
 						Vector2 value49 = f.ToRotationVector2() * num289 * scaleFactor6 * projectile.scale;
 						texture2D33 = Main.extraTexture[66];
 						Main.spriteBatch.Draw(texture2D33, vector42 + value49, null, alpha5, projectile.rotation, texture2D33.Size() / 2f, scale15, SpriteEffects.None, 0f);
@@ -28818,6 +_,7 @@
 							scale16 = new Vector2(projectile.scale) * 0.2f;
 							DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * 0.5f;
 						}
+
 						DelegateMethods.f_1 = 1f;
 						for (int num292 = projectile.oldPos.Length - 1; num292 > 0; num292--)
 						{
@@ -28828,6 +_,7 @@
 								Utils.DrawLaser(Main.spriteBatch, tex3, start, end2, scale16, new Utils.LaserLineFraming(DelegateMethods.LightningLaserDraw));
 							}
 						}
+
 						if (projectile.oldPos[0] != Vector2.Zero)
 						{
 							DelegateMethods.f_1 = 1f;
@@ -28855,6 +_,7 @@
 							scale17 = new Vector2(projectile.scale) * (0.3f + num294);
 							DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * 0.5f;
 						}
+
 						DelegateMethods.f_1 = 1f;
 						for (int num295 = projectile.oldPos.Length - 1; num295 > 0; num295--)
 						{
@@ -28865,6 +_,7 @@
 								Utils.DrawLaser(Main.spriteBatch, tex4, start3, end4, scale17, new Utils.LaserLineFraming(DelegateMethods.LightningLaserDraw));
 							}
 						}
+
 						if (projectile.oldPos[0] != Vector2.Zero)
 						{
 							DelegateMethods.f_1 = 1f;
@@ -28912,10 +_,12 @@
 								color65.A = 128;
 								color65 *= 0.5f;
 							}
+
 							Vector2 value52 = new Vector2(array7[num300].X, 0f).RotatedBy((double)num297, default(Vector2)) * 4f;
 							Main.spriteBatch.Draw(Main.magicPixel, value51 - Main.screenPosition + value52, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), color65, num297, Vector2.One / 2f, new Vector2(2f, num296 - num299), spriteEffects, 0f);
 						}
 					}
+
 					Texture2D texture2D37 = Main.itemTexture[Main.player[projectile.owner].inventory[Main.player[projectile.owner].selectedItem].type];
 					Microsoft.Xna.Framework.Color color66 = Lighting.GetColor((int)vector46.X / 16, (int)vector46.Y / 16);
 					Main.spriteBatch.Draw(texture2D37, vector46 - Main.screenPosition + value50 * num298, null, color66, projectile.rotation + 1.57079637f + ((spriteEffects == SpriteEffects.None) ? 3.14159274f : 0f), new Vector2((float)((spriteEffects == SpriteEffects.None) ? 0 : texture2D37.Width), (float)texture2D37.Height / 2f) + Vector2.UnitY * 1f, Main.player[projectile.owner].inventory[Main.player[projectile.owner].selectedItem].scale, spriteEffects, 0f);
@@ -28937,15 +_,18 @@
 								color67.A = 128;
 								color67 *= 0.5f;
 							}
+
 							Vector2 value53 = new Vector2(array7[num301].X, 0f).RotatedBy((double)num297, default(Vector2)) * 4f;
 							Main.spriteBatch.Draw(Main.magicPixel, value51 - Main.screenPosition + value53, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), color67, num297, Vector2.One / 2f, new Vector2(2f, num296 - num299), spriteEffects, 0f);
 						}
 					}
+
 					float num302 = projectile.localAI[0] / 60f;
 					if (num302 > 0.5f)
 					{
 						num302 = 1f - num302;
 					}
+
 					Main.spriteBatch.Draw(texture2D36, vector45, null, alpha6 * num302 * 2f, projectile.rotation, new Vector2((float)texture2D36.Width, (float)texture2D36.Height) / 2f, projectile.scale, spriteEffects, 0f);
 					Main.spriteBatch.Draw(Main.glowMaskTexture[40], vector45, null, alpha6 * (0.5f - num302) * 2f, projectile.rotation, new Vector2((float)texture2D36.Width, (float)texture2D36.Height) / 2f, projectile.scale, spriteEffects, 0f);
 				}
@@ -28960,6 +_,7 @@
 						texture2D38 = Main.miniMinotaurTexture;
 						Main.spriteBatch.Draw(texture2D38, projectile.Center - Main.screenPosition + new Vector2(0f, projectile.gfxOffY - 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y12, texture2D38.Width, num303)), new Microsoft.Xna.Framework.Color(250, 250, 250, projectile.alpha), projectile.rotation, new Vector2((float)texture2D38.Width / 2f, (float)num303 / 2f), projectile.scale, spriteEffects, 0f);
 					}
+
 					if (projectile.type == 423)
 					{
 						texture2D38 = Main.glowMaskTexture[0];
@@ -28984,6 +_,7 @@
 						Vector2 _ = projectile.oldPos[num307] - Main.screenPosition + new Vector2(num149 + (float)num148, (float)(projectile.height / 2) + projectile.gfxOffY);
 						Main.spriteBatch.Draw(texture2D39, projectile.oldPos[num307] + new Vector2((float)projectile.width, (float)projectile.height) / 2f - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y13, texture2D39.Width, num304)), Microsoft.Xna.Framework.Color.Lerp(alpha7, color68, 0.3f), projectile.rotation, new Vector2((float)texture2D39.Width / 2f, (float)num304 / 2f), MathHelper.Lerp(projectile.scale, value54, (float)num307 / 15f), spriteEffects, 0f);
 					}
+
 					Main.spriteBatch.Draw(texture2D39, projectile.Center - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y13, texture2D39.Width, num304)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D39.Width / 2f, (float)num304 / 2f), projectile.scale, spriteEffects, 0f);
 				}
 				else if (projectile.type == 388)
@@ -29003,6 +_,7 @@
 						num310 = 2;
 						num309 = 5;
 					}
+
 					for (int num311 = 1; num311 < num309; num311 += num310)
 					{
 						Vector2 arg_FE5C_0 = Main.npc[i].oldPos[num311];
@@ -29012,6 +_,7 @@
 						Vector2 position17 = projectile.oldPos[num311] - Main.screenPosition + new Vector2(num149 + (float)num148, (float)(projectile.height / 2) + projectile.gfxOffY);
 						Main.spriteBatch.Draw(texture2D40, position17, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y14, texture2D40.Width, num308)), color69, projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), projectile.scale, spriteEffects, 0f);
 					}
+
 					Main.spriteBatch.Draw(texture2D40, projectile.position - Main.screenPosition + new Vector2(num149 + (float)num148, (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y14, texture2D40.Width, num308)), projectile.GetAlpha(color25), projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), projectile.scale, spriteEffects, 0f);
 				}
 				else if (Main.projFrames[projectile.type] > 1)
@@ -29064,6 +_,7 @@
 					{
 						zero.X = (float)Main.projectileTexture[projectile.type].Width;
 					}
+
 					Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], new Vector2(projectile.position.X - Main.screenPosition.X + (float)(projectile.width / 2), projectile.position.Y - Main.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.projectileTexture[projectile.type].Width, Main.projectileTexture[projectile.type].Height)), projectile.GetAlpha(color25), projectile.rotation, zero, projectile.scale, spriteEffects, 0f);
 				}
 				else if (projectile.type == 451)
@@ -29104,6 +_,7 @@
 							Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], new Vector2(projectile.oldPos[num315].X - Main.screenPosition.X + num149 + (float)num148, projectile.oldPos[num315].Y - Main.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.projectileTexture[projectile.type].Width, Main.projectileTexture[projectile.type].Height)), alpha8, projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), num317 * projectile.scale, spriteEffects, 0f);
 						}
 					}
+
 					if (projectile.type == 301)
 					{
 						for (int num318 = 0; num318 < 10; num318++)
@@ -29118,6 +_,7 @@
 							Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], new Vector2(projectile.oldPos[num318].X - Main.screenPosition.X + num149 + (float)num148, projectile.oldPos[num318].Y - Main.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.projectileTexture[projectile.type].Width, Main.projectileTexture[projectile.type].Height)), alpha9, projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), num320 * projectile.scale, spriteEffects, 0f);
 						}
 					}
+
 					if (projectile.type == 323 && projectile.alpha == 0)
 					{
 						for (int num321 = 1; num321 < 8; num321++)
@@ -29130,30 +_,37 @@
 							{
 								num324 = 0.7f;
 							}
+
 							if (num321 == 2)
 							{
 								num324 = 0.6f;
 							}
+
 							if (num321 == 3)
 							{
 								num324 = 0.5f;
 							}
+
 							if (num321 == 4)
 							{
 								num324 = 0.4f;
 							}
+
 							if (num321 == 5)
 							{
 								num324 = 0.3f;
 							}
+
 							if (num321 == 6)
 							{
 								num324 = 0.2f;
 							}
+
 							if (num321 == 7)
 							{
 								num324 = 0.1f;
 							}
+
 							alpha10.R = (byte)((float)alpha10.R * num324);
 							alpha10.G = (byte)((float)alpha10.G * num324);
 							alpha10.B = (byte)((float)alpha10.B * num324);
@@ -29161,6 +_,7 @@
 							Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], new Vector2(projectile.position.X - Main.screenPosition.X + num149 + (float)num148 - num322, projectile.position.Y - Main.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY - num323), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.projectileTexture[projectile.type].Width, Main.projectileTexture[projectile.type].Height)), alpha10, projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), num324 + 0.2f, spriteEffects, 0f);
 						}
 					}
+
 					if (projectile.type == 117 && projectile.ai[0] > 3f)
 					{
 						for (int num325 = 1; num325 < 5; num325++)
@@ -29173,18 +_,22 @@
 							{
 								num328 = 0.4f;
 							}
+
 							if (num325 == 2)
 							{
 								num328 = 0.3f;
 							}
+
 							if (num325 == 3)
 							{
 								num328 = 0.2f;
 							}
+
 							if (num325 == 4)
 							{
 								num328 = 0.1f;
 							}
+
 							alpha11.R = (byte)((float)alpha11.R * num328);
 							alpha11.G = (byte)((float)alpha11.G * num328);
 							alpha11.B = (byte)((float)alpha11.B * num328);
@@ -29192,9 +_,10 @@
 							Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], new Vector2(projectile.position.X - Main.screenPosition.X + num149 + (float)num148 - num326, projectile.position.Y - Main.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY - num327), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.projectileTexture[projectile.type].Width, Main.projectileTexture[projectile.type].Height)), alpha11, projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), projectile.scale, spriteEffects, 0f);
 						}
 					}
+
 					if (projectile.bobber)
 					{
-						if (projectile.ai[1] > 0f && projectile.ai[1] < 3884f && projectile.ai[0] == 1f)
+						if (projectile.ai[1] > 0f && projectile.ai[0] == 1f)
 						{
 							int num329 = (int)projectile.ai[1];
 							Vector2 center = projectile.Center;
@@ -29223,6 +_,7 @@
 									num330 += 0.785f;
 								}
 							}
+
 							Main.spriteBatch.Draw(Main.itemTexture[num329], new Vector2(center.X - Main.screenPosition.X, center.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[num329].Width, Main.itemTexture[num329].Height)), color25, num330, new Vector2((float)(Main.itemTexture[num329].Width / 2), (float)(Main.itemTexture[num329].Height / 2)), projectile.scale, spriteEffects, 0f);
 						}
 						else if (projectile.ai[0] <= 1f)
@@ -29237,15 +_,18 @@
 						{
 							Main.spriteBatch.Draw(Main.glowMaskTexture[(int)projectile.glowMask], new Vector2(projectile.position.X - Main.screenPosition.X + num149 + (float)num148, projectile.position.Y - Main.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.projectileTexture[projectile.type].Width, Main.projectileTexture[projectile.type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, projectile.alpha), projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), projectile.scale, spriteEffects, 0f);
 						}
+
 						if (projectile.type == 473)
 						{
 							Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], new Vector2(projectile.position.X - Main.screenPosition.X + num149 + (float)num148, projectile.position.Y - Main.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.projectileTexture[projectile.type].Width, Main.projectileTexture[projectile.type].Height)), new Microsoft.Xna.Framework.Color(255, 255, 0, 0), projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), projectile.scale, spriteEffects, 0f);
 						}
 					}
+
 					if (projectile.type == 106)
 					{
 						Main.spriteBatch.Draw(Main.lightDiscTexture, new Vector2(projectile.position.X - Main.screenPosition.X + num149 + (float)num148, projectile.position.Y - Main.screenPosition.Y + (float)(projectile.height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.projectileTexture[projectile.type].Width, Main.projectileTexture[projectile.type].Height)), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), projectile.scale, spriteEffects, 0f);
 					}
+
 					if (projectile.type == 554 || projectile.type == 603)
 					{
 						for (int num333 = 1; num333 < 5; num333++)
@@ -29258,18 +_,22 @@
 							{
 								num336 = 0.4f;
 							}
+
 							if (num333 == 2)
 							{
 								num336 = 0.3f;
 							}
+
 							if (num333 == 3)
 							{
 								num336 = 0.2f;
 							}
+
 							if (num333 == 4)
 							{
 								num336 = 0.1f;
 							}
+
 							alpha12.R = (byte)((float)alpha12.R * num336);
 							alpha12.G = (byte)((float)alpha12.G * num336);
 							alpha12.B = (byte)((float)alpha12.B * num336);
@@ -29284,6 +_,7 @@
 						{
 							num337 = 7;
 						}
+
 						for (int num338 = 1; num338 < num337; num338++)
 						{
 							float num339 = projectile.velocity.X * (float)num338 * 1.5f;
@@ -29292,15 +_,19 @@
 							if (num338 == 1)
 							{
 							}
+
 							if (num338 == 2)
 							{
 							}
+
 							if (num338 == 3)
 							{
 							}
+
 							if (num338 == 4)
 							{
 							}
+
 							float num341 = 0.4f - (float)num338 * 0.06f;
 							num341 *= 1f - (float)projectile.alpha / 255f;
 							alpha13.R = (byte)((float)alpha13.R * num341);
@@ -29324,18 +_,22 @@
 							{
 								num346 = 0.4f;
 							}
+
 							if (num343 == 2)
 							{
 								num346 = 0.3f;
 							}
+
 							if (num343 == 3)
 							{
 								num346 = 0.2f;
 							}
+
 							if (num343 == 4)
 							{
 								num346 = 0.1f;
 							}
+
 							alpha14.R = (byte)((float)alpha14.R * num346);
 							alpha14.G = (byte)((float)alpha14.G * num346);
 							alpha14.B = (byte)((float)alpha14.B * num346);
@@ -29345,6 +_,7 @@
 					}
 				}
 			}
+
 			if (projectile.type == 525 && (!Main.gamePaused || Main.gameMenu))
 			{
 				Vector2 vector50 = projectile.position - Main.screenPosition;
@@ -29365,6 +_,7 @@
 						{
 							Main.player[Main.myPlayer].GamepadEnableGrappleCooldown();
 						}
+
 						if (Main.mouseRight && Main.mouseRightRelease && Player.StopMoneyTroughFromWorking == 0)
 						{
 							Main.mouseRightRelease = false;
@@ -29375,6 +_,7 @@
 								Recipe.FindRecipes();
 								return;
 							}
+
 							Main.player[Main.myPlayer].flyingPigChest = i;
 							Main.player[Main.myPlayer].chest = -2;
 							Main.player[Main.myPlayer].chestX = (int)(projectile.Center.X / 16f);
@@ -29388,6 +_,8 @@
 					}
 				}
 			}
+
+			ProjectileLoader.PostDraw(projectile, Main.spriteBatch, color25);
 		}
 
 		private static Microsoft.Xna.Framework.Color buffColor(Microsoft.Xna.Framework.Color newColor, float R, float G, float B, float A)
@@ -29423,20 +_,24 @@
 								{
 									num2 = j;
 								}
+
 								if (num3 == -1 && Main.npc[j].type == 397 && Main.npc[j].ai[2] == 1f)
 								{
 									num3 = j;
 								}
+
 								if (num4 == -1 && Main.npc[j].type == 396)
 								{
 									num4 = j;
 								}
+
 								if (num2 != -1 && num3 != -1 && num4 != -1)
 								{
 									break;
 								}
 							}
 						}
+
 						if (num2 != -1 && num3 != -1 && num4 != -1)
 						{
 							this.DrawCacheNPCsMoonMoon.Add(num);
@@ -29444,10 +_,12 @@
 							{
 								this.DrawCacheNPCsMoonMoon.Add(num2);
 							}
+
 							if (num3 != -1)
 							{
 								this.DrawCacheNPCsMoonMoon.Add(num3);
 							}
+
 							if (num4 != -1)
 							{
 								this.DrawCacheNPCsMoonMoon.Add(num4);
@@ -29484,18 +_,22 @@
 					{
 						this.DrawCacheProjsBehindNPCsAndTiles.Add(i);
 					}
+
 					if (Main.projectile[i].type == 625 || Main.projectile[i].type == 626 || Main.projectile[i].type == 627 || Main.projectile[i].type == 628)
 					{
 						this.DrawCacheProjsBehindProjectiles.Add(i);
 					}
+
 					if (Main.projectile[i].type == 651)
 					{
 						this.DrawCacheProjsOverWiresUI.Add(i);
 					}
+
 					if (Main.projectile[i].type == 673 || Main.projectile[i].type == 674 || Main.projectile[i].type == 691 || Main.projectile[i].type == 692 || Main.projectile[i].type == 693)
 					{
 						this.DrawCacheProjsBehindNPCs.Add(i);
 					}
+
 					if (Main.projectile[i].type == 636 || Main.projectile[i].type == 598)
 					{
 						bool flag = true;
@@ -29512,14 +_,18 @@
 								{
 									this.DrawCacheProjsBehindNPCs.Add(i);
 								}
+
 								flag = false;
 							}
 						}
+
 						if (flag)
 						{
 							this.DrawCacheProjsBehindProjectiles.Add(i);
 						}
 					}
+
+					ProjectileLoader.DrawBehind(Main.projectile[i], i, DrawCacheProjsBehindNPCsAndTiles, DrawCacheProjsBehindNPCs, DrawCacheProjsBehindProjectiles, DrawCacheProjsOverWiresUI);
 				}
 			}
 		}
@@ -29545,6 +_,7 @@
 			{
 				Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, Main.Transform);
 			}
+
 			for (int i = 0; i < projCache.Count; i++)
 			{
 				try
@@ -29557,6 +_,7 @@
 					Main.projectile[projCache[i]].active = false;
 				}
 			}
+
 			if (startSpriteBatch)
 			{
 				Main.spriteBatch.End();
@@ -29570,6 +_,7 @@
 			{
 				return;
 			}
+
 			List<List<int>> list = new List<List<int>>();
 			for (int i = 0; i < drawCacheProjsBehindProjectiles.Count; i++)
 			{
@@ -29586,10 +_,12 @@
 						drawCacheProjsBehindProjectiles.Remove(byUUID);
 						byUUID = Projectile.GetByUUID(Main.projectile[byUUID].owner, Main.projectile[byUUID].ai[0]);
 					}
+
 					list.Add(list2);
 					i = -1;
 				}
 			}
+
 			List<int> list3 = new List<int>(this.DrawCacheProjsBehindProjectiles);
 			list.Add(list3);
 			this.DrawCacheProjsBehindProjectiles.Clear();
@@ -29600,6 +_,7 @@
 					this.DrawCacheProjsBehindProjectiles.Add(list[j][k]);
 				}
 			}
+
 			for (int l = 0; l < this.DrawCacheProjsBehindProjectiles.Count; l++)
 			{
 				Projectile projectile = Main.projectile[this.DrawCacheProjsBehindProjectiles[l]];
@@ -29658,6 +_,7 @@
 						}
 					}
 				}
+
 				for (int j = 0; j < 200; j++)
 				{
 					if (Main.npc[j].active && Main.npc[j].aiStyle == 29)
@@ -29670,6 +_,7 @@
 						{
 							flag2 = true;
 						}
+
 						num7 = (float)Main.wofT + num8 * Main.npc[j].ai[0];
 						Vector2 vector2 = new Vector2(Main.npc[j].position.X + (float)(Main.npc[j].width / 2), Main.npc[j].position.Y + (float)(Main.npc[j].height / 2));
 						float num9 = num6 - vector2.X;
@@ -29688,6 +_,7 @@
 							{
 								flag2 = true;
 							}
+
 							int height = 28;
 							float num11 = (float)Math.Sqrt((double)(num9 * num9 + num10 * num10));
 							if (num11 < 40f)
@@ -29695,6 +_,7 @@
 								height = (int)num11 - 40 + 28;
 								flag3 = false;
 							}
+
 							num11 = 28f / num11;
 							num9 *= num11;
 							num10 *= num11;
@@ -29707,6 +_,7 @@
 						}
 					}
 				}
+
 				int num12 = 140;
 				float num13 = (float)Main.wofT;
 				float num14 = (float)Main.wofB;
@@ -29717,6 +_,7 @@
 				{
 					num13 -= num15;
 				}
+
 				float num16 = num13;
 				float num17 = Main.npc[Main.wof].position.X;
 				float num18 = num14 - num13;
@@ -29726,15 +_,18 @@
 				{
 					effects2 = SpriteEffects.FlipHorizontally;
 				}
+
 				if (Main.npc[Main.wof].direction > 0)
 				{
 					num17 -= 80f;
 				}
+
 				int num19 = 0;
 				if (!Main.gamePaused)
 				{
 					Main.wofF++;
 				}
+
 				if (Main.wofF > 12)
 				{
 					num19 = 280;
@@ -29747,6 +_,7 @@
 				{
 					num19 = 140;
 				}
+
 				while (flag4)
 				{
 					num18 = num14 - num16;
@@ -29754,6 +_,7 @@
 					{
 						num18 = (float)num12;
 					}
+
 					bool flag5 = true;
 					int num20 = 0;
 					while (flag5)
@@ -29767,6 +_,7 @@
 							flag5 = false;
 						}
 					}
+
 					num16 += (float)num12;
 					if (num16 >= num14)
 					{
@@ -29787,6 +_,7 @@
 			{
 				effects = SpriteEffects.FlipHorizontally;
 			}
+
 			Microsoft.Xna.Framework.Color immuneAlpha = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)drawPlayer.position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)drawPlayer.position.Y + (double)drawPlayer.height * 0.5) / 16, new Microsoft.Xna.Framework.Color((int)(Main.mouseTextColor / 2 + 100), (int)(Main.mouseTextColor / 2 + 100), (int)(Main.mouseTextColor / 2 + 100), (int)(Main.mouseTextColor / 2 + 100))), shadow);
 			Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle(0, Main.ghostTexture.Height / 4 * drawPlayer.ghostFrame, Main.ghostTexture.Width, Main.ghostTexture.Height / 4);
 			Vector2 origin = new Vector2((float)value.Width * 0.5f, (float)value.Height * 0.5f);
@@ -30150,7 +_,9 @@
 				num = 2f;
 				result.Y += 2f * gravdir;
 			}
+
 			result.X = num;
+			ItemLoader.HoldoutOffset(gravdir, itemtype, ref result);
 			return result;
 		}
 
@@ -30166,6 +_,12 @@
 
 		protected void DrawPlayerHead(Player drawPlayer, float X, float Y, float Alpha = 1f, float Scale = 1f)
 		{
+			//prepare for lots of ugly code
+			PlayerHeadDrawInfo drawInfo = new PlayerHeadDrawInfo();
+			drawInfo.spriteBatch = Main.spriteBatch;
+			drawInfo.drawPlayer = drawPlayer;
+			drawInfo.alpha = Alpha;
+			drawInfo.scale = Scale;
 			int shaderId = 0;
 			int skinVariant = drawPlayer.skinVariant;
 			short num = (short)drawPlayer.hairDye;
@@ -30173,34 +_,48 @@
 			{
 				num = 1;
 			}
+
+			drawInfo.hairShader = num;
 			for (int i = 0; i < 16 + drawPlayer.extraAccessorySlots * 2; i++)
 			{
 				int num2 = i % 10;
-				if (drawPlayer.dye[num2] != null && drawPlayer.armor[i].type > 0 && drawPlayer.armor[i].stack > 0 && drawPlayer.armor[i].faceSlot > 0 && drawPlayer.armor[i].faceSlot < 9)
+				if (drawPlayer.dye[num2] != null && drawPlayer.armor[i].type > 0 && drawPlayer.armor[i].stack > 0 && drawPlayer.armor[i].faceSlot > 0)
 				{
 					byte arg_81_0 = drawPlayer.dye[num2].dye;
 				}
 			}
+
 			if (drawPlayer.face > 0 && drawPlayer.face < 9)
 			{
 				this.LoadAccFace((int)drawPlayer.face);
 			}
+
 			if (drawPlayer.dye[0] != null)
 			{
 				shaderId = (int)drawPlayer.dye[0].dye;
 			}
+
+			drawInfo.armorShader = shaderId;
 			this.LoadHair(drawPlayer.hair);
 			Microsoft.Xna.Framework.Color color = this.quickAlpha(Microsoft.Xna.Framework.Color.White, Alpha);
+			drawInfo.eyeWhiteColor = color;
 			Microsoft.Xna.Framework.Color color2 = this.quickAlpha(drawPlayer.eyeColor, Alpha);
+			drawInfo.eyeColor = color2;
 			Microsoft.Xna.Framework.Color color3 = this.quickAlpha(drawPlayer.GetHairColor(false), Alpha);
+			drawInfo.hairColor = color3;
 			Microsoft.Xna.Framework.Color color4 = this.quickAlpha(drawPlayer.skinColor, Alpha);
+			drawInfo.skinColor = color4;
 			Microsoft.Xna.Framework.Color color5 = this.quickAlpha(Microsoft.Xna.Framework.Color.White, Alpha);
+			drawInfo.armorColor = color5;
 			SpriteEffects spriteEffects = SpriteEffects.None;
 			if (drawPlayer.direction < 0)
 			{
 				spriteEffects = SpriteEffects.FlipHorizontally;
 			}
+
+			drawInfo.spriteEffects = spriteEffects;
 			Vector2 vector = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.4f);
+			drawInfo.drawOrigin = vector;
 			Vector2 position = drawPlayer.position;
 			Microsoft.Xna.Framework.Rectangle bodyFrame = drawPlayer.bodyFrame;
 			drawPlayer.bodyFrame.Y = 0;
@@ -30215,26 +_,77 @@
 			{
 				this.LoadArmorHead(drawPlayer.head);
 			}
+
 			if (drawPlayer.face > 0 && drawPlayer.face < 9)
 			{
 				this.LoadAccFace((int)drawPlayer.face);
 			}
+
 			bool flag = false;
 			if (drawPlayer.head == 10 || drawPlayer.head == 12 || drawPlayer.head == 28 || drawPlayer.head == 62 || drawPlayer.head == 97 || drawPlayer.head == 106 || drawPlayer.head == 113 || drawPlayer.head == 116 || drawPlayer.head == 119 || drawPlayer.head == 133 || drawPlayer.head == 138 || drawPlayer.head == 139 || drawPlayer.head == 163 || drawPlayer.head == 178 || drawPlayer.head == 181 || drawPlayer.head == 191 || drawPlayer.head == 198)
 			{
 				flag = true;
 			}
+
 			bool flag2 = false;
 			if (drawPlayer.head == 161 || drawPlayer.head == 14 || drawPlayer.head == 15 || drawPlayer.head == 16 || drawPlayer.head == 18 || drawPlayer.head == 21 || drawPlayer.head == 24 || drawPlayer.head == 25 || drawPlayer.head == 26 || drawPlayer.head == 40 || drawPlayer.head == 44 || drawPlayer.head == 51 || drawPlayer.head == 56 || drawPlayer.head == 59 || drawPlayer.head == 60 || drawPlayer.head == 67 || drawPlayer.head == 68 || drawPlayer.head == 69 || drawPlayer.head == 114 || drawPlayer.head == 121 || drawPlayer.head == 126 || drawPlayer.head == 130 || drawPlayer.head == 136 || drawPlayer.head == 140 || drawPlayer.head == 145 || drawPlayer.head == 158 || drawPlayer.head == 159 || drawPlayer.head == 184 || drawPlayer.head == 190 || (double)drawPlayer.head == 92.0 || drawPlayer.head == 195)
 			{
 				flag2 = true;
 			}
-			if (drawPlayer.head != 38 && drawPlayer.head != 135)
+
+			ItemLoader.DrawHair(drawPlayer, ref flag, ref flag2);
+			drawInfo.drawHair = flag;
+			drawInfo.drawAltHair = flag2;
+			List<PlayerHeadLayer> drawLayers = PlayerHooks.GetDrawHeadLayers(drawPlayer);
+			int layerIndex = -1;
+			layerLoopContinue:
+			layerIndex++;
+			if (layerIndex >= drawLayers.Count)
+			{
+				goto postDraw;
+			}
+
+			if (!drawLayers[layerIndex].ShouldDraw(drawLayers))
+			{
+				goto layerLoopContinue;
+			}
+
+			if (drawLayers[layerIndex] == PlayerHeadLayer.Head)
+			{
+				goto headLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerHeadLayer.Hair)
+			{
+				goto hairLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerHeadLayer.AltHair)
+			{
+				goto altHairLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerHeadLayer.Armor)
+			{
+				goto armorLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerHeadLayer.FaceAcc)
+			{
+				goto faceLayer;
+			}
+			else
+			{
+				drawLayers[layerIndex].Draw(ref drawInfo);
+			}
+
+			goto layerLoopContinue;
+			headLayer:
+			if (drawPlayer.head != 38 && drawPlayer.head != 135 && ItemLoader.DrawHead(drawPlayer))
 			{
 				Main.spriteBatch.Draw(Main.playerTextures[skinVariant, 0], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color4, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
 				Main.spriteBatch.Draw(Main.playerTextures[skinVariant, 1], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
 				Main.spriteBatch.Draw(Main.playerTextures[skinVariant, 2], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color2, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
 			}
+
+			goto layerLoopContinue;
+			hairLayer:
 			if (flag)
 			{
 				DrawData value = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
@@ -30249,12 +_,16 @@
 					{
 						bodyFrame2.Y = 0;
 					}
+
 					value = new DrawData(Main.playerHairTexture[drawPlayer.hair], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(bodyFrame2), color3, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
 					GameShaders.Hair.Apply(num, drawPlayer, new DrawData?(value));
 					value.Draw(Main.spriteBatch);
 					Main.pixelShader.CurrentTechnique.Passes[0].Apply();
 				}
 			}
+
+			goto layerLoopContinue;
+			altHairLayer:
 			if (flag2)
 			{
 				Microsoft.Xna.Framework.Rectangle bodyFrame3 = drawPlayer.bodyFrame;
@@ -30263,6 +_,7 @@
 				{
 					bodyFrame3.Y = 0;
 				}
+
 				if (!drawPlayer.invis)
 				{
 					DrawData value2 = new DrawData(Main.playerHairAltTexture[drawPlayer.hair], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(bodyFrame3), color3, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
@@ -30271,6 +_,9 @@
 					Main.pixelShader.CurrentTechnique.Passes[0].Apply();
 				}
 			}
+
+			goto layerLoopContinue;
+			armorLayer:
 			if (drawPlayer.head == 23)
 			{
 				Microsoft.Xna.Framework.Rectangle bodyFrame4 = drawPlayer.bodyFrame;
@@ -30279,6 +_,7 @@
 				{
 					bodyFrame4.Y = 0;
 				}
+
 				DrawData value3;
 				if (!drawPlayer.invis)
 				{
@@ -30287,6 +_,7 @@
 					value3.Draw(Main.spriteBatch);
 					Main.pixelShader.CurrentTechnique.Passes[0].Apply();
 				}
+
 				value3 = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
 				GameShaders.Armor.Apply(shaderId, drawPlayer, new DrawData?(value3));
 				value3.Draw(Main.spriteBatch);
@@ -30299,6 +_,7 @@
 				{
 					bodyFrame5.Height -= 2;
 				}
+
 				int num4 = 0;
 				if (bodyFrame5.Y == bodyFrame5.Height * 6)
 				{
@@ -30336,13 +_,14 @@
 				{
 					num4 = -2;
 				}
+
 				bodyFrame5.Y += num4;
 				DrawData value4 = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f + (float)num4) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(bodyFrame5), color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
 				GameShaders.Armor.Apply(shaderId, drawPlayer, new DrawData?(value4));
 				value4.Draw(Main.spriteBatch);
 				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
 			}
-			else if (drawPlayer.head > 0 && drawPlayer.head < 214 && drawPlayer.head != 28)
+			else if (drawPlayer.head > 0 && drawPlayer.head != 28)
 			{
 				DrawData value5 = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
 				GameShaders.Armor.Apply(shaderId, drawPlayer, new DrawData?(value5));
@@ -30357,12 +_,16 @@
 				{
 					bodyFrame6.Y = 0;
 				}
+
 				DrawData value6 = new DrawData(Main.playerHairTexture[drawPlayer.hair], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(bodyFrame6), color3, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
 				GameShaders.Hair.Apply(num, drawPlayer, new DrawData?(value6));
 				value6.Draw(Main.spriteBatch);
 				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
 			}
-			if (drawPlayer.face > 0 && drawPlayer.face < 9)
+
+			goto layerLoopContinue;
+			faceLayer:
+			if (drawPlayer.face > 0)
 			{
 				DrawData value7;
 				if (drawPlayer.face == 7)
@@ -30373,10 +_,14 @@
 				{
 					value7 = new DrawData(Main.accFaceTexture[(int)drawPlayer.face], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
 				}
+
 				GameShaders.Armor.Apply(shaderId, drawPlayer, new DrawData?(value7));
 				value7.Draw(Main.spriteBatch);
 				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
 			}
+
+			goto layerLoopContinue;
+			postDraw:
 			drawPlayer.position = position;
 			drawPlayer.bodyFrame.Y = bodyFrame.Y;
 		}
@@ -30387,6 +_,7 @@
 			{
 				return;
 			}
+
 			SpriteEffects effects;
 			if (drawPlayer.direction == 1)
 			{
@@ -30396,17 +_,24 @@
 			{
 				effects = SpriteEffects.FlipHorizontally;
 			}
+
 			Main.spriteBatch.Draw(Main.extraTexture[37], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 8f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), null, Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.5) / 16, Microsoft.Xna.Framework.Color.White), 0f, new Vector2((float)(Main.extraTexture[37].Width / 2), (float)(Main.extraTexture[37].Height / 2)), 1f, effects, 0f);
 		}
 
 		public void DrawPlayer(Player drawPlayer, Vector2 Position, float rotation, Vector2 rotationOrigin, float shadow = 0f)
 		{
+			//prepare for code more ugly than DrawPlayerHead
+ 			PlayerDrawInfo drawInfo = new PlayerDrawInfo();
+			drawInfo.drawPlayer = drawPlayer;
+			drawInfo.position = Position;
+			drawInfo.shadow = shadow;
 			DrawData value = default(DrawData);
 			int projectileDrawPosition = -1;
 			Main.playerDrawData.Clear();
 			Main.playerDrawDust.Clear();
 			Main.playerDrawGore.Clear();
 			Vector2 value2 = Position + (drawPlayer.itemLocation - drawPlayer.position);
+			drawInfo.itemLocation = value2;
 			int num = 0;
 			bool flag = false;
 			bool flag2 = false;
@@ -30416,10 +_,15 @@
 			{
 				flag = true;
 			}
+
 			if (drawPlayer.body == 99 || drawPlayer.body == 98 || drawPlayer.body == 100 || drawPlayer.body == 167 || drawPlayer.body == 171 || drawPlayer.body == 183 || drawPlayer.body == 191 || drawPlayer.body == 192 || drawPlayer.body == 198 || drawPlayer.body == 199 || drawPlayer.body == 202 || drawPlayer.body == 201 || drawPlayer.body == 203)
 			{
 				flag2 = true;
 			}
+
+			ItemLoader.DrawHands(drawPlayer, ref flag, ref flag2);
+			drawInfo.drawHands = flag;
+			drawInfo.drawArms = flag2;
 			int num2;
 			if (drawPlayer.heldProj >= 0 && shadow == 0f)
 			{
@@ -30428,48 +_,68 @@
 				{
 					flag3 = true;
 				}
-			}
+
+				ProjectileLoader.DrawHeldProjInFrontOfHeldItemAndArms(Main.projectile[drawPlayer.heldProj], ref flag3);
+			}
+
+			drawInfo.drawHeldProjInFrontOfHeldItemAndBody = flag3;
 			bool flag4 = false;
 			if (drawPlayer.head == 10 || drawPlayer.head == 12 || drawPlayer.head == 28 || drawPlayer.head == 62 || drawPlayer.head == 97 || drawPlayer.head == 106 || drawPlayer.head == 113 || drawPlayer.head == 116 || drawPlayer.head == 119 || drawPlayer.head == 133 || drawPlayer.head == 138 || drawPlayer.head == 139 || drawPlayer.head == 163 || drawPlayer.head == 178 || drawPlayer.head == 181 || drawPlayer.head == 191 || drawPlayer.head == 198)
 			{
 				flag4 = true;
 			}
+
 			bool flag5 = false;
 			if (drawPlayer.head == 161 || drawPlayer.head == 14 || drawPlayer.head == 15 || drawPlayer.head == 16 || drawPlayer.head == 18 || drawPlayer.head == 21 || drawPlayer.head == 24 || drawPlayer.head == 25 || drawPlayer.head == 26 || drawPlayer.head == 40 || drawPlayer.head == 44 || drawPlayer.head == 51 || drawPlayer.head == 56 || drawPlayer.head == 59 || drawPlayer.head == 60 || drawPlayer.head == 67 || drawPlayer.head == 68 || drawPlayer.head == 69 || drawPlayer.head == 114 || drawPlayer.head == 121 || drawPlayer.head == 126 || drawPlayer.head == 130 || drawPlayer.head == 136 || drawPlayer.head == 140 || drawPlayer.head == 145 || drawPlayer.head == 158 || drawPlayer.head == 159 || drawPlayer.head == 184 || drawPlayer.head == 190 || drawPlayer.head == 92 || drawPlayer.head == 195)
 			{
 				flag5 = true;
 			}
+
+			ItemLoader.DrawHair(drawPlayer, ref flag4, ref flag5);
+			drawInfo.drawHair = flag4;
+			drawInfo.drawAltHair = flag5;
 			bool flag6 = false;
 			if (drawPlayer.face == 4 || drawPlayer.face == 3 || drawPlayer.face == 2)
 			{
 				flag6 = true;
 			}
+
 			int num3 = (int)drawPlayer.hairDye;
 			if (drawPlayer.head == 0 && num3 == 0)
 			{
 				num3 = 1;
 			}
+
+			drawInfo.hairShader = num3;
 			float num4 = (float)drawPlayer.mount.PlayerOffset;
 			Position.Y -= num4;
+			drawInfo.position = Position;
 			int num5 = 0;
 			if (drawPlayer.dye[0] != null)
 			{
 				num5 = (int)drawPlayer.dye[0].dye;
 			}
+
+			drawInfo.headArmorShader = num5;
 			int num6 = 0;
 			if (drawPlayer.dye[1] != null)
 			{
 				num6 = (int)drawPlayer.dye[1].dye;
 			}
+
+			drawInfo.bodyArmorShader = num6;
 			int shader = 0;
 			if (drawPlayer.dye[2] != null)
 			{
 				shader = (int)drawPlayer.dye[2].dye;
 			}
+
 			if (drawPlayer.wearsRobe)
 			{
 				shader = num6;
 			}
+
+			drawInfo.legArmorShader = shader;
 			int shader2 = 0;
 			int shader3 = 0;
 			int shader4 = 0;
@@ -30487,56 +_,80 @@
 				int num7 = i % 10;
 				if (drawPlayer.dye[num7] != null && drawPlayer.armor[i].type > 0 && drawPlayer.armor[i].stack > 0 && (i / 10 >= 1 || !drawPlayer.hideVisual[num7] || drawPlayer.armor[i].wingSlot > 0 || drawPlayer.armor[i].type == 934))
 				{
-					if (drawPlayer.armor[i].handOnSlot > 0 && drawPlayer.armor[i].handOnSlot < 20)
+					if (drawPlayer.armor[i].handOnSlot > 0)
 					{
 						shader2 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].handOffSlot > 0 && drawPlayer.armor[i].handOffSlot < 12)
+						drawInfo.handOnShader = shader2;
+					}
+
+					if (drawPlayer.armor[i].handOffSlot > 0)
 					{
 						shader3 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].backSlot > 0 && drawPlayer.armor[i].backSlot < 14)
+						drawInfo.handOffShader = shader3;
+					}
+
+					if (drawPlayer.armor[i].backSlot > 0)
 					{
 						shader4 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].frontSlot > 0 && drawPlayer.armor[i].frontSlot < 5)
+						drawInfo.backShader = shader4;
+					}
+
+					if (drawPlayer.armor[i].frontSlot > 0)
 					{
 						shader5 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].shoeSlot > 0 && drawPlayer.armor[i].shoeSlot < 18)
+						drawInfo.frontShader = shader5;
+					}
+
+					if (drawPlayer.armor[i].shoeSlot > 0)
 					{
 						shader6 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].waistSlot > 0 && drawPlayer.armor[i].waistSlot < 13)
+						drawInfo.shoeShader = shader6;
+					}
+
+					if (drawPlayer.armor[i].waistSlot > 0)
 					{
 						shader7 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].shieldSlot > 0 && drawPlayer.armor[i].shieldSlot < 7)
+						drawInfo.waistShader = shader7;
+					}
+
+					if (drawPlayer.armor[i].shieldSlot > 0)
 					{
 						shader8 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].neckSlot > 0 && drawPlayer.armor[i].neckSlot < 10)
+						drawInfo.shieldShader = shader8;
+					}
+
+					if (drawPlayer.armor[i].neckSlot > 0)
 					{
 						shader9 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].faceSlot > 0 && drawPlayer.armor[i].faceSlot < 9)
+						drawInfo.neckShader = shader9;
+					}
+
+					if (drawPlayer.armor[i].faceSlot > 0)
 					{
 						shader10 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].balloonSlot > 0 && drawPlayer.armor[i].balloonSlot < 18)
+						drawInfo.faceShader = shader10;
+					}
+
+					if (drawPlayer.armor[i].balloonSlot > 0)
 					{
 						shader11 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].wingSlot > 0 && drawPlayer.armor[i].wingSlot < 38)
+						drawInfo.balloonShader = shader11;
+					}
+
+					if (drawPlayer.armor[i].wingSlot > 0)
 					{
 						shader12 = (int)drawPlayer.dye[num7].dye;
-					}
+						drawInfo.wingShader = shader12;
+					}
+
 					if (drawPlayer.armor[i].type == 934)
 					{
 						shader13 = (int)drawPlayer.dye[num7].dye;
-					}
-				}
-			}
+						drawInfo.carpetShader = shader13;
+					}
+				}
+			}
+
 			if (drawPlayer.mount.Active)
 			{
 				Mount.currentShader = (drawPlayer.mount.Cart ? drawPlayer.cMinecart : drawPlayer.cMount);
@@ -30545,94 +_,124 @@
 			{
 				Mount.currentShader = 0;
 			}
+
 			SpriteEffects spriteEffects = SpriteEffects.None;
 			SpriteEffects effect = SpriteEffects.FlipHorizontally;
 			Microsoft.Xna.Framework.Color color = drawPlayer.GetImmuneAlpha(drawPlayer.GetHairColor(true), shadow);
+			drawInfo.hairColor = color;
 			Microsoft.Xna.Framework.Color color2 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), Microsoft.Xna.Framework.Color.White), shadow);
+			drawInfo.eyeWhiteColor = color2;
 			Microsoft.Xna.Framework.Color color3 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), drawPlayer.eyeColor), shadow);
+			drawInfo.eyeColor = color3;
 			Microsoft.Xna.Framework.Color color4 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), drawPlayer.skinColor), shadow);
+			drawInfo.faceColor = color4;
 			Microsoft.Xna.Framework.Color color5 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.skinColor), shadow);
+			drawInfo.bodyColor = color5;
 			Microsoft.Xna.Framework.Color color6 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.skinColor), shadow);
+			drawInfo.legColor = color6;
 			Microsoft.Xna.Framework.Color color7 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.shirtColor), shadow);
+			drawInfo.shirtColor = color7;
 			Microsoft.Xna.Framework.Color color8 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.underShirtColor), shadow);
+			drawInfo.underShirtColor = color8;
 			Microsoft.Xna.Framework.Color color9 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.pantsColor), shadow);
+			drawInfo.pantsColor = color9;
 			Microsoft.Xna.Framework.Color color10 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.shoeColor), shadow);
+			drawInfo.shoeColor = color10;
 			Microsoft.Xna.Framework.Color color11 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.25) / 16, Microsoft.Xna.Framework.Color.White), shadow);
+			drawInfo.upperArmorColor = color11;
 			Microsoft.Xna.Framework.Color color12 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.5) / 16, Microsoft.Xna.Framework.Color.White), shadow);
+			drawInfo.middleArmorColor = color12;
 			Microsoft.Xna.Framework.Color color13 = color12;
+			drawInfo.mountColor = color13;
 			Microsoft.Xna.Framework.Color color14 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.75) / 16, Microsoft.Xna.Framework.Color.White), shadow);
+			drawInfo.lowerArmorColor = color14;
 			Microsoft.Xna.Framework.Color color15 = new Microsoft.Xna.Framework.Color(255, 255, 255, 100);
 			int num8 = 0;
 			int num9 = 0;
 			int num10 = 0;
 			int num11 = 0;
 			int num12 = -1;
+			drawInfo.headGlowMask = num12;
 			int num13 = -1;
+			drawInfo.bodyGlowMask = num13;
 			int num14 = -1;
+			drawInfo.armGlowMask = num14;
 			int num15 = -1;
+			drawInfo.legGlowMask = num15;
 			Microsoft.Xna.Framework.Color color16 = Microsoft.Xna.Framework.Color.Transparent;
+			drawInfo.headGlowMaskColor = color16;
 			Microsoft.Xna.Framework.Color color17 = Microsoft.Xna.Framework.Color.Transparent;
+			drawInfo.bodyGlowMaskColor = color17;
 			Microsoft.Xna.Framework.Color color18 = Microsoft.Xna.Framework.Color.Transparent;
+			drawInfo.armGlowMaskColor = color18;
 			Microsoft.Xna.Framework.Color color19 = Microsoft.Xna.Framework.Color.Transparent;
+			drawInfo.legGlowMaskColor = color19;
 			num2 = drawPlayer.head;
 			switch (num2)
 			{
 				case 169:
 					num8++;
-					break;
+				break;
 				case 170:
 					num9++;
-					break;
+				break;
 				case 171:
 					num10++;
-					break;
+				break;
 				default:
 					if (num2 == 189)
-					{
-						num11++;
-					}
-					break;
-			}
+				{
+					num11++;
+				}
+
+				break;
+			}
+
 			num2 = drawPlayer.body;
 			switch (num2)
 			{
 				case 175:
 					num8++;
-					break;
+				break;
 				case 176:
 					num9++;
-					break;
+				break;
 				case 177:
 					num10++;
-					break;
+				break;
 				default:
 					if (num2 == 190)
-					{
-						num11++;
-					}
-					break;
-			}
+				{
+					num11++;
+				}
+
+				break;
+			}
+
 			num2 = drawPlayer.legs;
 			switch (num2)
 			{
 				case 110:
 					num8++;
-					break;
+				break;
 				case 111:
 					num9++;
-					break;
+				break;
 				case 112:
 					num10++;
-					break;
+				break;
 				default:
 					if (num2 == 130)
-					{
-						num11++;
-					}
-					break;
-			}
+				{
+					num11++;
+				}
+
+				break;
+			}
+
 			if (drawPlayer.head == 169)
 			{
+				//patch file: num12, color16
 				num12 = 15;
 				byte b = (byte)(62.5f * (float)(1 + num8));
 				color16 = new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, 0);
@@ -30681,16 +_,22 @@
 				num12 = 96;
 				color16 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
 			}
+
 			if (drawPlayer.body == 175)
 			{
+				//patch file: num13
 				if (drawPlayer.Male)
 				{
 					num13 = 13;
 				}
+
+				//patch file
 				else
 				{
 					num13 = 18;
 				}
+
+				//patch file: color17
 				byte b6 = (byte)(62.5f * (float)(1 + num8));
 				color17 = new Microsoft.Xna.Framework.Color((int)b6, (int)b6, (int)b6, 0);
 			}
@@ -30704,7 +_,9 @@
 				{
 					num13 = 186;
 				}
+
 				num14 = 188;
+				//patch file: num14, color18
 				byte b7 = (byte)(62.5f * (float)(1 + num11));
 				color17 = new Microsoft.Xna.Framework.Color((int)b7, (int)b7, (int)b7, 0);
 				color18 = new Microsoft.Xna.Framework.Color((int)b7, (int)b7, (int)b7, 0);
@@ -30720,6 +_,7 @@
 				{
 					num13 = 19;
 				}
+
 				num14 = 12;
 				byte b8 = (byte)(62.5f * (float)(1 + num9));
 				color17 = new Microsoft.Xna.Framework.Color((int)b8, (int)b8, (int)b8, 0);
@@ -30747,12 +_,15 @@
 				{
 					num13 = 43;
 				}
+
 				num14 = 44;
 				color17 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
 				color18 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
 			}
+
 			if (drawPlayer.legs == 111)
 			{
+				//patch file: num15, color19
 				num15 = 17;
 				byte b10 = (byte)(62.5f * (float)(1 + num9));
 				color19 = new Microsoft.Xna.Framework.Color((int)b10, (int)b10, (int)b10, 0);
@@ -30780,6 +_,11 @@
 				color19 = new Microsoft.Xna.Framework.Color((int)b13, (int)b13, (int)b13, 0);
 				color14 = drawPlayer.GetImmuneAlphaPure(new Microsoft.Xna.Framework.Color((int)b13, (int)b13, (int)b13, 255), shadow);
 			}
+
+			ItemLoader.DrawArmorColor(EquipType.Head, drawPlayer.head, drawPlayer, shadow, ref color11, ref num12, ref color16);
+			ItemLoader.DrawArmorColor(EquipType.Body, drawPlayer.body, drawPlayer, shadow, ref color12, ref num13, ref color17);
+			ItemLoader.ArmorArmGlowMask(drawPlayer.body, drawPlayer, shadow, ref num14, ref color18);
+			ItemLoader.DrawArmorColor(EquipType.Legs, drawPlayer.legs, drawPlayer, shadow, ref color14, ref num15, ref color19);
 			color16 = drawPlayer.GetImmuneAlphaPure(color16, shadow);
 			color17 = drawPlayer.GetImmuneAlphaPure(color17, shadow);
 			color18 = drawPlayer.GetImmuneAlphaPure(color18, shadow);
@@ -30788,54 +_,67 @@
 			{
 				this.LoadArmorHead(drawPlayer.head);
 			}
+
 			if (drawPlayer.body > 0 && drawPlayer.body < 208)
 			{
 				this.LoadArmorBody(drawPlayer.body);
 			}
+
 			if (drawPlayer.legs > 0 && drawPlayer.legs < 157)
 			{
 				this.LoadArmorLegs(drawPlayer.legs);
 			}
+
 			if (drawPlayer.handon > 0 && drawPlayer.handon < 20)
 			{
 				this.LoadAccHandsOn((int)drawPlayer.handon);
 			}
+
 			if (drawPlayer.handoff > 0 && drawPlayer.handoff < 12)
 			{
 				this.LoadAccHandsOff((int)drawPlayer.handoff);
 			}
+
 			if (drawPlayer.back > 0 && drawPlayer.back < 14)
 			{
 				this.LoadAccBack((int)drawPlayer.back);
 			}
+
 			if (drawPlayer.front > 0 && drawPlayer.front < 5)
 			{
 				this.LoadAccFront((int)drawPlayer.front);
 			}
+
 			if (drawPlayer.shoe > 0 && drawPlayer.shoe < 18)
 			{
 				this.LoadAccShoes((int)drawPlayer.shoe);
 			}
+
 			if (drawPlayer.waist > 0 && drawPlayer.waist < 13)
 			{
 				this.LoadAccWaist((int)drawPlayer.waist);
 			}
+
 			if (drawPlayer.shield > 0 && drawPlayer.shield < 7)
 			{
 				this.LoadAccShield((int)drawPlayer.shield);
 			}
+
 			if (drawPlayer.neck > 0 && drawPlayer.neck < 10)
 			{
 				this.LoadAccNeck((int)drawPlayer.neck);
 			}
+
 			if (drawPlayer.face > 0 && drawPlayer.face < 9)
 			{
 				this.LoadAccFace((int)drawPlayer.face);
 			}
+
 			if (drawPlayer.balloon > 0 && drawPlayer.balloon < 18)
 			{
 				this.LoadAccBalloon((int)drawPlayer.balloon);
 			}
+
 			this.LoadHair(drawPlayer.hair);
 			if ((drawPlayer.head == 78 || drawPlayer.head == 79 || drawPlayer.head == 80) && drawPlayer.body == 51 && drawPlayer.legs == 47)
 			{
@@ -30844,6 +_,7 @@
 				{
 					num16 = 0f;
 				}
+
 				color11.R = (byte)((float)color11.R * num16);
 				color11.G = (byte)((float)color11.G * num16);
 				color11.B = (byte)((float)color11.B * num16);
@@ -30854,6 +_,7 @@
 				color14.G = (byte)((float)color14.G * num16);
 				color14.B = (byte)((float)color14.B * num16);
 			}
+
 			if (drawPlayer.head == 193 && drawPlayer.body == 194 && drawPlayer.legs == 134)
 			{
 				float num17 = 0.6f - drawPlayer.ghostFade * 0.3f;
@@ -30861,6 +_,7 @@
 				{
 					num17 = 0f;
 				}
+
 				color11.R = (byte)((float)color11.R * num17);
 				color11.G = (byte)((float)color11.G * num17);
 				color11.B = (byte)((float)color11.B * num17);
@@ -30871,6 +_,7 @@
 				color14.G = (byte)((float)color14.G * num17);
 				color14.B = (byte)((float)color14.B * num17);
 			}
+
 			if (shadow > 0f)
 			{
 				color6 = Microsoft.Xna.Framework.Color.Transparent;
@@ -30880,6 +_,7 @@
 				color3 = Microsoft.Xna.Framework.Color.Transparent;
 				color2 = Microsoft.Xna.Framework.Color.Transparent;
 			}
+
 			float num18 = 1f;
 			float num19 = 1f;
 			float num20 = 1f;
@@ -30896,6 +_,7 @@
 				Main.dust[num22].velocity += drawPlayer.velocity * 0.1f;
 				Main.playerDrawDust.Add(num22);
 			}
+
 			if (drawPlayer.dryadWard && drawPlayer.velocity.X != 0f && Main.rand.Next(4) == 0)
 			{
 				int num23 = Dust.NewDust(new Vector2(drawPlayer.position.X - 2f, drawPlayer.position.Y + (float)drawPlayer.height - 2f), drawPlayer.width + 4, 4, 163, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1.5f);
@@ -30903,6 +_,7 @@
 				Main.dust[num23].noLight = true;
 				Main.dust[num23].velocity *= 0f;
 			}
+
 			if (drawPlayer.poisoned)
 			{
 				if (Main.rand.Next(50) == 0 && shadow == 0f)
@@ -30912,9 +_,11 @@
 					Main.dust[num24].fadeIn = 1.9f;
 					Main.playerDrawDust.Add(num24);
 				}
+
 				num18 *= 0.65f;
 				num20 *= 0.75f;
 			}
+
 			if (drawPlayer.venom)
 			{
 				if (Main.rand.Next(10) == 0 && shadow == 0f)
@@ -30924,9 +_,11 @@
 					Main.dust[num25].fadeIn = 1.5f;
 					Main.playerDrawDust.Add(num25);
 				}
+
 				num19 *= 0.45f;
 				num18 *= 0.75f;
 			}
+
 			if (drawPlayer.onFire)
 			{
 				if (Main.rand.Next(4) == 0 && shadow == 0f)
@@ -30938,9 +_,11 @@
 					expr_1C76_cp_0.velocity.Y = expr_1C76_cp_0.velocity.Y - 0.5f;
 					Main.playerDrawDust.Add(num26);
 				}
+
 				num20 *= 0.6f;
 				num19 *= 0.7f;
 			}
+
 			if (drawPlayer.dripping && shadow == 0f && Main.rand.Next(4) != 0)
 			{
 				Vector2 position = Position;
@@ -30953,10 +_,12 @@
 					{
 						Main.dust[num27].alpha += 25;
 					}
+
 					if (Main.rand.Next(2) == 0)
 					{
 						Main.dust[num27].alpha += 25;
 					}
+
 					Main.dust[num27].noLight = true;
 					Main.dust[num27].velocity *= 0.2f;
 					Dust expr_1DC2_cp_0 = Main.dust[num27];
@@ -30971,10 +_,12 @@
 					{
 						Main.dust[num28].alpha += 25;
 					}
+
 					if (Main.rand.Next(2) == 0)
 					{
 						Main.dust[num28].alpha += 25;
 					}
+
 					Main.dust[num28].noLight = true;
 					Main.dust[num28].noGravity = true;
 					Main.dust[num28].velocity *= 0.2f;
@@ -30984,6 +_,7 @@
 					Main.playerDrawDust.Add(num28);
 				}
 			}
+
 			if (drawPlayer.drippingSlime)
 			{
 				int alpha = 175;
@@ -31000,10 +_,12 @@
 						{
 							Main.dust[num29].alpha += 25;
 						}
+
 						if (Main.rand.Next(2) == 0)
 						{
 							Main.dust[num29].alpha += 25;
 						}
+
 						Main.dust[num29].noLight = true;
 						Main.dust[num29].velocity *= 0.2f;
 						Dust expr_2029_cp_0 = Main.dust[num29];
@@ -31012,13 +_,16 @@
 						Main.playerDrawDust.Add(num29);
 					}
 				}
+
 				num18 *= 0.8f;
 				num19 *= 0.8f;
 			}
+
 			if (drawPlayer.ichor)
 			{
 				num20 = 0f;
 			}
+
 			if (drawPlayer.electrified && shadow == 0f && Main.rand.Next(3) == 0)
 			{
 				int num30 = Dust.NewDust(new Vector2(Position.X - 2f, Position.Y - 2f), drawPlayer.width + 4, drawPlayer.height + 4, 226, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 0.5f);
@@ -31028,6 +_,7 @@
 				Main.dust[num30].position = Vector2.Lerp(Main.dust[num30].position, drawPlayer.Center, 0.5f);
 				Main.playerDrawDust.Add(num30);
 			}
+
 			if (drawPlayer.burned)
 			{
 				if (shadow == 0f)
@@ -31039,10 +_,12 @@
 					expr_2236_cp_0.velocity.Y = expr_2236_cp_0.velocity.Y - 0.75f;
 					Main.playerDrawDust.Add(num31);
 				}
+
 				num18 = 1f;
 				num20 *= 0.6f;
 				num19 *= 0.7f;
 			}
+
 			if (drawPlayer.onFrostBurn)
 			{
 				if (Main.rand.Next(4) == 0 && shadow == 0f)
@@ -31054,9 +_,11 @@
 					expr_233F_cp_0.velocity.Y = expr_233F_cp_0.velocity.Y - 0.5f;
 					Main.playerDrawDust.Add(num32);
 				}
+
 				num18 *= 0.5f;
 				num19 *= 0.7f;
 			}
+
 			if (drawPlayer.onFire2)
 			{
 				if (Main.rand.Next(4) == 0 && shadow == 0f)
@@ -31068,19 +_,23 @@
 					expr_243E_cp_0.velocity.Y = expr_243E_cp_0.velocity.Y - 0.5f;
 					Main.playerDrawDust.Add(num33);
 				}
+
 				num20 *= 0.6f;
 				num19 *= 0.7f;
 			}
+
 			if (drawPlayer.noItems)
 			{
 				num19 *= 0.8f;
 				num18 *= 0.65f;
 			}
+
 			if (drawPlayer.blind)
 			{
 				num19 *= 0.65f;
 				num18 *= 0.7f;
 			}
+
 			if (drawPlayer.bleed)
 			{
 				num19 *= 0.9f;
@@ -31094,6 +_,7 @@
 					Main.playerDrawDust.Add(num34);
 				}
 			}
+
 			if (shadow == 0f && drawPlayer.palladiumRegen && drawPlayer.statLife < drawPlayer.statLifeMax2 && base.IsActive && !Main.gamePaused && drawPlayer.miscCounter % 10 == 0 && shadow == 0f)
 			{
 				Vector2 position3;
@@ -31106,6 +_,7 @@
 				int num35 = Gore.NewGore(position3, new Vector2((float)Main.rand.Next(-10, 11) * 0.1f, (float)Main.rand.Next(-20, -10) * 0.1f), 331, (float)Main.rand.Next(80, 120) * 0.01f);
 				Main.playerDrawGore.Add(num35);
 			}
+
 			if (shadow == 0f && drawPlayer.loveStruck && base.IsActive && !Main.gamePaused && Main.rand.Next(5) == 0)
 			{
 				Vector2 value3 = new Vector2((float)Main.rand.Next(-10, 11), (float)Main.rand.Next(-10, 11));
@@ -31118,6 +_,7 @@
 				expr_27F3_cp_0.velocity.Y = expr_27F3_cp_0.velocity.Y - 0.6f;
 				Main.playerDrawGore.Add(num36);
 			}
+
 			if (drawPlayer.stinky && base.IsActive && !Main.gamePaused)
 			{
 				num18 *= 0.7f;
@@ -31136,6 +_,7 @@
 					Main.playerDrawDust.Add(num37);
 				}
 			}
+
 			if (drawPlayer.slowOgreSpit && base.IsActive && !Main.gamePaused)
 			{
 				num18 *= 0.6f;
@@ -31143,10 +_,10 @@
 				if (Main.rand.Next(5) == 0 && shadow == 0f)
 				{
 					int type = Utils.SelectRandom<int>(Main.rand, new int[]
-						{
-							4,
+					{
+						4,
 							256
-						});
+					});
 					Dust dust = Main.dust[Dust.NewDust(Position, drawPlayer.width, drawPlayer.height, type, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f)];
 					dust.scale = 0.8f + Main.rand.NextFloat() * 0.6f;
 					dust.fadeIn = 0.5f;
@@ -31156,20 +_,23 @@
 					{
 						dust.color = new Microsoft.Xna.Framework.Color(80, 170, 40, 120);
 					}
+
 					Main.playerDrawDust.Add(dust.dustIndex);
 				}
+
 				if (Main.rand.Next(5) == 0 && shadow == 0f)
 				{
 					int num38 = Gore.NewGore(Position + new Vector2(Main.rand.NextFloat(), Main.rand.NextFloat()) * drawPlayer.Size, Vector2.Zero, Utils.SelectRandom<int>(Main.rand, new int[]
-							{
-								1024,
+					{
+						1024,
 								1025,
 								1026
-							}), 0.65f);
+					}), 0.65f);
 					Main.gore[num38].velocity *= 0.05f;
 					Main.playerDrawGore.Add(num38);
 				}
 			}
+
 			if (base.IsActive && !Main.gamePaused && shadow == 0f)
 			{
 				float num39 = (float)drawPlayer.miscCounter / 180f;
@@ -31184,37 +_,41 @@
 					{
 						case 0:
 							if (drawPlayer.nebulaLevelLife >= 1)
-							{
-								num40 = 6.28318548f / (float)drawPlayer.nebulaLevelLife;
-								num41 = drawPlayer.nebulaLevelLife;
-								goto IL_2C54;
-							}
-							break;
+						{
+							num40 = 6.28318548f / (float)drawPlayer.nebulaLevelLife;
+							num41 = drawPlayer.nebulaLevelLife;
+							goto IL_2C54;
+						}
+
+						break;
 						case 1:
 							if (drawPlayer.nebulaLevelMana >= 1)
-							{
-								num40 = -6.28318548f / (float)drawPlayer.nebulaLevelMana;
-								num41 = drawPlayer.nebulaLevelMana;
-								num39 = (float)(-(float)drawPlayer.miscCounter) / 180f;
-								scaleFactor = 20f;
-								type2 = 88;
-								goto IL_2C54;
-							}
-							break;
+						{
+							num40 = -6.28318548f / (float)drawPlayer.nebulaLevelMana;
+							num41 = drawPlayer.nebulaLevelMana;
+							num39 = (float)(-(float)drawPlayer.miscCounter) / 180f;
+							scaleFactor = 20f;
+							type2 = 88;
+							goto IL_2C54;
+						}
+
+						break;
 						case 2:
 							if (drawPlayer.nebulaLevelDamage >= 1)
-							{
-								num40 = 6.28318548f / (float)drawPlayer.nebulaLevelDamage;
-								num41 = drawPlayer.nebulaLevelDamage;
-								num39 = (float)drawPlayer.miscCounter / 180f;
-								scaleFactor = 30f;
-								type2 = 86;
-								goto IL_2C54;
-							}
-							break;
+						{
+							num40 = 6.28318548f / (float)drawPlayer.nebulaLevelDamage;
+							num41 = drawPlayer.nebulaLevelDamage;
+							num39 = (float)drawPlayer.miscCounter / 180f;
+							scaleFactor = 30f;
+							type2 = 86;
+							goto IL_2C54;
+						}
+
+						break;
 						default:
 							goto IL_2C54;
 					}
+
 					IL_2D22:
 					j++;
 					continue;
@@ -31228,14 +_,17 @@
 						Main.dust[num42].customData = drawPlayer;
 						Main.playerDrawDust.Add(num42);
 					}
+
 					goto IL_2D22;
 				}
 			}
+
 			if (drawPlayer.witheredArmor && base.IsActive && !Main.gamePaused)
 			{
 				num19 *= 0.5f;
 				num18 *= 0.75f;
 			}
+
 			if (drawPlayer.witheredWeapon && drawPlayer.itemAnimation > 0 && drawPlayer.inventory[drawPlayer.selectedItem].damage > 0 && base.IsActive && !Main.gamePaused && Main.rand.Next(3) == 0)
 			{
 				int num43 = Dust.NewDust(new Vector2(Position.X - 2f, Position.Y - 2f), drawPlayer.width + 4, drawPlayer.height + 4, 272, 0f, 0f, 50, default(Microsoft.Xna.Framework.Color), 0.5f);
@@ -31245,9 +_,12 @@
 				Main.dust[num43].position = Vector2.Lerp(Main.dust[num43].position, drawPlayer.Center, 0.5f);
 				Main.playerDrawDust.Add(num43);
 			}
+
+			bool fullBright = false;
+			PlayerHooks.DrawEffects(drawInfo, ref num18, ref num19, ref num20, ref num21, ref fullBright);
 			if (num18 != 1f || num19 != 1f || num20 != 1f || num21 != 1f)
 			{
-				if (drawPlayer.onFire || drawPlayer.onFire2 || drawPlayer.onFrostBurn)
+				if (drawPlayer.onFire || drawPlayer.onFire2 || drawPlayer.onFrostBurn || fullBright)
 				{
 					color2 = drawPlayer.GetImmuneAlpha(Microsoft.Xna.Framework.Color.White, shadow);
 					color3 = drawPlayer.GetImmuneAlpha(drawPlayer.eyeColor, shadow);
@@ -31280,6 +_,7 @@
 					color14 = Main.buffColor(color14, num18, num19, num20, num21);
 				}
 			}
+
 			if (drawPlayer.socialGhost)
 			{
 				color2 = Microsoft.Xna.Framework.Color.Transparent;
@@ -31296,15 +_,18 @@
 				{
 					color11.A = Main.gFade;
 				}
+
 				if (color12.A > Main.gFade)
 				{
 					color12.A = Main.gFade;
 				}
+
 				if (color14.A > Main.gFade)
 				{
 					color14.A = Main.gFade;
 				}
 			}
+
 			if (drawPlayer.socialIgnoreLight)
 			{
 				float scale = 1.2f;
@@ -31319,6 +_,7 @@
 				color10 = drawPlayer.shoeColor * scale;
 				color6 = drawPlayer.skinColor * scale;
 			}
+
 			float num44 = 1f;
 			if (drawPlayer.inventory[drawPlayer.selectedItem].type == 3106)
 			{
@@ -31327,15 +_,18 @@
 				{
 					num45 = 0.03f;
 				}
+
 				float num46 = (1f + num45 * 10f) / 11f;
 				if (num45 < 0f)
 				{
 					num45 = 0f;
 				}
+
 				if (num45 >= 1f - shadow && shadow > 0f)
 				{
 					num45 = shadow * 0.5f;
 				}
+
 				num44 = num46;
 				color11 = new Microsoft.Xna.Framework.Color((int)((byte)((float)color11.R * num45)), (int)((byte)((float)color11.G * num45)), (int)((byte)((float)color11.B * num46)), (int)((byte)((float)color11.A * num45)));
 				color12 = new Microsoft.Xna.Framework.Color((int)((byte)((float)color12.R * num45)), (int)((byte)((float)color12.G * num45)), (int)((byte)((float)color12.B * num46)), (int)((byte)((float)color12.A * num45)));
@@ -31364,15 +_,18 @@
 				{
 					num47 = 0.03f;
 				}
+
 				float num48 = (1f + num47 * 10f) / 11f;
 				if (num47 < 0f)
 				{
 					num47 = 0f;
 				}
+
 				if (num47 >= 1f - shadow && shadow > 0f)
 				{
 					num47 = shadow * 0.5f;
 				}
+
 				num44 = num48;
 				color11 = new Microsoft.Xna.Framework.Color((int)((byte)((float)color11.R * num47)), (int)((byte)((float)color11.G * num47)), (int)((byte)((float)color11.B * num48)), (int)((byte)((float)color11.A * num47)));
 				color12 = new Microsoft.Xna.Framework.Color((int)((byte)((float)color12.R * num47)), (int)((byte)((float)color12.G * num47)), (int)((byte)((float)color12.B * num48)), (int)((byte)((float)color12.A * num47)));
@@ -31401,14 +_,17 @@
 				{
 					num49 = 0.03f;
 				}
+
 				if (num49 < 0f)
 				{
 					num49 = 0f;
 				}
+
 				if (num49 >= 1f - shadow && shadow > 0f)
 				{
 					num49 = shadow * 0.5f;
 				}
+
 				num44 = num49;
 				Microsoft.Xna.Framework.Color secondColor = new Microsoft.Xna.Framework.Color(Vector4.Lerp(Vector4.One, new Vector4(0f, 0.12f, 0.16f, 0f), 1f - num49));
 				color11 = color11.MultiplyRGBA(secondColor);
@@ -31431,6 +_,28 @@
 				color18 = Microsoft.Xna.Framework.Color.Multiply(color18, num49);
 				color19 = Microsoft.Xna.Framework.Color.Multiply(color19, num49);
 			}
+
+			drawInfo.hairColor = color;
+			drawInfo.eyeWhiteColor = color2;
+			drawInfo.eyeColor = color3;
+			drawInfo.faceColor = color4;
+			drawInfo.bodyColor = color5;
+			drawInfo.legColor = color6;
+			drawInfo.shirtColor = color7;
+			drawInfo.underShirtColor = color8;
+			drawInfo.pantsColor = color9;
+			drawInfo.shoeColor = color10;
+			drawInfo.upperArmorColor = color11;
+			drawInfo.middleArmorColor = color12;
+			drawInfo.lowerArmorColor = color14;
+			drawInfo.headGlowMask = num12;
+			drawInfo.bodyGlowMask = num13;
+			drawInfo.armGlowMask = num14;
+			drawInfo.legGlowMask = num15;
+			drawInfo.headGlowMaskColor = color16;
+			drawInfo.bodyGlowMaskColor = color17;
+			drawInfo.armGlowMaskColor = color18;
+			drawInfo.legGlowMaskColor = color19;
 			if (drawPlayer.gravDir == 1f)
 			{
 				if (drawPlayer.direction == 1)
@@ -31443,6 +_,7 @@
 					spriteEffects = SpriteEffects.FlipHorizontally;
 					effect = SpriteEffects.FlipHorizontally;
 				}
+
 				if (!drawPlayer.dead)
 				{
 					drawPlayer.legPosition.Y = 0f;
@@ -31462,6 +_,7 @@
 					spriteEffects = (SpriteEffects.FlipHorizontally | SpriteEffects.FlipVertically);
 					effect = (SpriteEffects.FlipHorizontally | SpriteEffects.FlipVertically);
 				}
+
 				if (!drawPlayer.dead)
 				{
 					drawPlayer.legPosition.Y = 6f;
@@ -31469,9 +_,14 @@
 					drawPlayer.bodyPosition.Y = 6f;
 				}
 			}
+
+			drawInfo.spriteEffects = spriteEffects;
 			Vector2 vector2 = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.75f);
+			drawInfo.legOrigin = vector2;
 			Vector2 origin = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.5f);
+			drawInfo.bodyOrigin = origin;
 			Vector2 vector3 = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.4f);
+			drawInfo.headOrigin = vector3;
 			if ((drawPlayer.merman || drawPlayer.forceMerman) && !drawPlayer.hideMerman)
 			{
 				drawPlayer.headRotation = drawPlayer.velocity.Y * (float)drawPlayer.direction * 0.1f;
@@ -31479,6 +_,7 @@
 				{
 					drawPlayer.headRotation = -0.3f;
 				}
+
 				if ((double)drawPlayer.headRotation > 0.3)
 				{
 					drawPlayer.headRotation = 0.3f;
@@ -31488,12 +_,14 @@
 			{
 				drawPlayer.headRotation = 0f;
 			}
+
 			Microsoft.Xna.Framework.Rectangle bodyFrame = drawPlayer.bodyFrame;
 			bodyFrame.Y -= 336;
 			if (bodyFrame.Y < 0)
 			{
 				bodyFrame.Y = 0;
 			}
+
 			int height = 26;
 			int hair = drawPlayer.hair;
 			bool flag7 = hair > 50 && (hair < 56 || hair > 63) && (hair < 74 || hair > 77) && (hair < 88 || hair > 89) && hair != 94 && hair != 100 && hair != 104 && hair != 112 && hair < 116;
@@ -31501,6 +_,189 @@
 			{
 				flag7 = true;
 			}
+
+			goto heldItemColor;
+			postSetupVars:
+			PlayerHooks.ModifyDrawInfo(ref drawInfo);
+			List<PlayerLayer> drawLayers = PlayerHooks.GetDrawLayers(drawPlayer);
+			int layerIndex = -1;
+			layerLoopContinue:
+			layerIndex++;
+			Position = drawInfo.position;
+			shadow = drawInfo.shadow;
+			value2 = drawInfo.itemLocation;
+			flag = drawInfo.drawHands;
+			flag2 = drawInfo.drawArms;
+			flag3 = drawInfo.drawHeldProjInFrontOfHeldItemAndBody;
+			flag4 = drawInfo.drawHair;
+			flag5 = drawInfo.drawAltHair;
+			num3 = drawInfo.hairShader;
+			num5 = drawInfo.headArmorShader;
+			num6 = drawInfo.bodyArmorShader;
+			shader = drawInfo.legArmorShader;
+			shader2 = drawInfo.handOnShader;
+			shader3 = drawInfo.handOffShader;
+			shader4 = drawInfo.backShader;
+			shader5 = drawInfo.frontShader;
+			shader6 = drawInfo.shoeShader;
+			shader7 = drawInfo.waistShader;
+			shader8 = drawInfo.shieldShader;
+			shader9 = drawInfo.neckShader;
+			shader10 = drawInfo.faceShader;
+			shader11 = drawInfo.balloonShader;
+			shader12 = drawInfo.wingShader;
+			shader13 = drawInfo.carpetShader;
+			color = drawInfo.hairColor;
+			color2 = drawInfo.eyeWhiteColor;
+			color3 = drawInfo.eyeColor;
+			color4 = drawInfo.faceColor;
+			color5 = drawInfo.bodyColor;
+			color6 = drawInfo.legColor;
+			color7 = drawInfo.shirtColor;
+			color8 = drawInfo.underShirtColor;
+			color9 = drawInfo.pantsColor;
+			color10 = drawInfo.shoeColor;
+			color11 = drawInfo.upperArmorColor;
+			color12 = drawInfo.middleArmorColor;
+			color13 = drawInfo.mountColor;
+			color14 = drawInfo.lowerArmorColor;
+			num12 = drawInfo.headGlowMask;
+			num13 = drawInfo.bodyGlowMask;
+			num14 = drawInfo.armGlowMask;
+			num15 = drawInfo.legGlowMask;
+			color16 = drawInfo.headGlowMaskColor;
+			color17 = drawInfo.bodyGlowMaskColor;
+			color18 = drawInfo.armGlowMaskColor;
+			color19 = drawInfo.legGlowMaskColor;
+			spriteEffects = drawInfo.spriteEffects;
+			vector2 = drawInfo.legOrigin;
+			origin = drawInfo.bodyOrigin;
+			vector3 = drawInfo.headOrigin;
+			if (layerIndex >= drawLayers.Count)
+			{
+				goto postDraw;
+			}
+
+			if (!drawLayers[layerIndex].ShouldDraw(drawLayers))
+			{
+				goto layerLoopContinue;
+			}
+
+			if (drawLayers[layerIndex] == PlayerLayer.HairBack)
+			{
+				goto hairBackLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.MountBack)
+			{
+				goto mountBackLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.MiscEffectsBack)
+			{
+				goto miscEffectsBackLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.BackAcc)
+			{
+				goto backAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Wings)
+			{
+				goto wingsLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.BalloonAcc)
+			{
+				goto balloonAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Skin)
+			{
+				goto skinLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Legs)
+			{
+				goto legsLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.ShoeAcc)
+			{
+				goto shoeAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Body)
+			{
+				goto bodyLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.HandOffAcc)
+			{
+				goto handOffAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.WaistAcc)
+			{
+				goto waistAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.NeckAcc)
+			{
+				goto neckAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Face)
+			{
+				goto faceLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Hair)
+			{
+				goto hairLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Head)
+			{
+				goto headLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.FaceAcc)
+			{
+				goto faceAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.MountFront)
+			{
+				goto mountFrontLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.ShieldAcc)
+			{
+				goto shieldAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.SolarShield)
+			{
+				goto solarShieldLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.HeldProjBack)
+			{
+				goto heldProjBackLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.HeldItem)
+			{
+				goto heldItemLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Arms)
+			{
+				goto armsLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.HandOnAcc)
+			{
+				goto handOnAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.HeldProjFront)
+			{
+				goto heldProjFrontLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.FrontAcc)
+			{
+				goto frontAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.MiscEffectsFront)
+			{
+				goto miscEffectsFrontLayer;
+			}
+			else
+			{
+				drawLayers[layerIndex].Draw(ref drawInfo);
+			}
+
+			goto layerLoopContinue;
+			hairBackLayer:
 			if (flag6)
 			{
 				bodyFrame.Height = 0;
@@ -31519,16 +_,21 @@
 					value.shader = -num3;
 					Main.playerDrawData.Add(value);
 				}
+
 				if (drawPlayer.gravDir == 1f)
 				{
 					bodyFrame.Height = height;
 				}
 			}
+
+			goto layerLoopContinue;
+			mountBackLayer:
 			if (drawPlayer.mount.Active)
 			{
 				drawPlayer.mount.Draw(Main.playerDrawData, 0, drawPlayer, Position, color13, spriteEffects, shadow);
 				drawPlayer.mount.Draw(Main.playerDrawData, 1, drawPlayer, Position, color13, spriteEffects, shadow);
 			}
+
 			if (drawPlayer.carpetFrame >= 0)
 			{
 				Microsoft.Xna.Framework.Color color20 = color14;
@@ -31537,10 +_,14 @@
 				{
 					num50 = 10f;
 				}
+
 				value = new DrawData(Main.flyingCarpetTexture, new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + 28f * drawPlayer.gravDir + num50))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.flyingCarpetTexture.Height / 6 * drawPlayer.carpetFrame, Main.flyingCarpetTexture.Width, Main.flyingCarpetTexture.Height / 6)), color20, drawPlayer.bodyRotation, new Vector2((float)(Main.flyingCarpetTexture.Width / 2), (float)(Main.flyingCarpetTexture.Height / 8)), 1f, spriteEffects, 0);
 				value.shader = shader13;
 				Main.playerDrawData.Add(value);
 			}
+
+			goto layerLoopContinue;
+			miscEffectsBackLayer:
 			if (drawPlayer.electrified && shadow == 0f)
 			{
 				Texture2D texture2D = Main.glowMaskTexture[25];
@@ -31553,14 +_,17 @@
 						value = new DrawData(texture2D, new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num51 * texture2D.Height / 7, texture2D.Width, texture2D.Height / 7)), color15, drawPlayer.bodyRotation, new Vector2((float)(texture2D.Width / 2), (float)(texture2D.Height / 14)), 1f, spriteEffects, 0);
 						Main.playerDrawData.Add(value);
 					}
+
 					num51 += 3;
 				}
 			}
+
 			if (drawPlayer.setForbidden && shadow == 0f)
 			{
 				Microsoft.Xna.Framework.Color color21 = Microsoft.Xna.Framework.Color.Lerp(color12, Microsoft.Xna.Framework.Color.White, 0.7f);
 				Texture2D texture2D2 = Main.extraTexture[74];
 				Texture2D texture = Main.glowMaskTexture[217];
+				// TODO do we need flag8
 				bool flag8 = !drawPlayer.setForbiddenCooldownLocked;
 				int num52 = (int)(((float)drawPlayer.miscCounter / 300f * 6.28318548f).ToRotationVector2().Y * 6f);
 				float num53 = ((float)drawPlayer.miscCounter / 75f * 6.28318548f).ToRotationVector2().X * 4f;
@@ -31572,6 +_,7 @@
 					color22 = new Microsoft.Xna.Framework.Color(80, 70, 40, 0) * 0.3f;
 					color21 = color21.MultiplyRGB(new Microsoft.Xna.Framework.Color(0.5f, 0.5f, 1f));
 				}
+
 				Vector2 vector4 = new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2));
 				vector4 += new Vector2((float)(-(float)drawPlayer.direction * 10), (float)(-20 + num52));
 				value = new DrawData(texture2D2, vector4, null, color21, drawPlayer.bodyRotation, texture2D2.Size() / 2f, 1f, spriteEffects, 0);
@@ -31590,6 +_,9 @@
 				value = new DrawData(texture2D3, new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), null, color23, drawPlayer.bodyRotation, texture2D3.Size() / 2f, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
 			}
+
+			goto layerLoopContinue;
+			backAccLayer:
 			bool flag9 = false;
 			if ((drawPlayer.wings == 0 || drawPlayer.velocity.Y == 0f) && (drawPlayer.inventory[drawPlayer.selectedItem].type == 1178 || drawPlayer.inventory[drawPlayer.selectedItem].type == 779 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1295 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1910 || drawPlayer.turtleArmor || drawPlayer.body == 106 || drawPlayer.body == 170))
 			{
@@ -31630,6 +_,7 @@
 				{
 					num55 = 5;
 				}
+
 				if (num55 == 7)
 				{
 					value = new DrawData(Main.BackPackTexture[num55], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, drawPlayer.bodyFrame.Y, Main.BackPackTexture[num55].Width, drawPlayer.bodyFrame.Height)), color12, drawPlayer.bodyRotation, new Vector2((float)Main.BackPackTexture[num55].Width * 0.5f, origin.Y), 1f, spriteEffects, 0);
@@ -31649,9 +_,10 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
-			if (!flag9 && drawPlayer.back > 0 && drawPlayer.back < 14 && !drawPlayer.mount.Active)
-			{
-				if (drawPlayer.front >= 1 && drawPlayer.front <= 4)
+
+			if (!flag9 && drawPlayer.back > 0 && !drawPlayer.mount.Active)
+			{
+				if (drawPlayer.front >= 1)
 				{
 					int num58 = drawPlayer.bodyFrame.Y / 56;
 					if (num58 < 1 || num58 > 5)
@@ -31664,24 +_,32 @@
 						{
 							num = 0;
 						}
+
 						if (drawPlayer.front == 2)
 						{
 							num = 8;
 						}
+
 						if (drawPlayer.front == 3)
 						{
 							num = 0;
 						}
+
 						if (drawPlayer.front == 4)
 						{
 							num = 8;
 						}
 					}
 				}
+
 				value = new DrawData(Main.accBackTexture[(int)drawPlayer.back], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader4;
 				Main.playerDrawData.Add(value);
 			}
+
+			goto layerLoopContinue;
+			wingsLayer:
+			flag9 = (drawPlayer.wings == 0 || drawPlayer.velocity.Y == 0f) && (drawPlayer.inventory[drawPlayer.selectedItem].type == 1178 || drawPlayer.inventory[drawPlayer.selectedItem].type == 779 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1295 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1910 || drawPlayer.turtleArmor || drawPlayer.body == 106 || drawPlayer.body == 170);
 			Position.Y += (float)((int)num4 / 2);
 			if (!flag9 && drawPlayer.wings > 0)
 			{
@@ -31711,6 +_,7 @@
 								Main.playerDrawData.Add(value);
 							}
 						}
+
 						value = new DrawData(Main.wingsTexture[drawPlayer.wings], new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num60 * drawPlayer.direction), (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num59 * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.wingsTexture[drawPlayer.wings].Height / 7 * drawPlayer.wingFrame, Main.wingsTexture[drawPlayer.wings].Width, Main.wingsTexture[drawPlayer.wings].Height / 7)), color24, drawPlayer.bodyRotation, new Vector2((float)(Main.wingsTexture[drawPlayer.wings].Width / 2), (float)(Main.wingsTexture[drawPlayer.wings].Height / 14)), 1f, spriteEffects, 0);
 						value.shader = shader12;
 						Main.playerDrawData.Add(value);
@@ -31767,6 +_,7 @@
 					{
 						num62 = 4;
 					}
+
 					Microsoft.Xna.Framework.Color color27 = color12;
 					if (drawPlayer.wings == 9 || drawPlayer.wings == 29)
 					{
@@ -31774,24 +_,29 @@
 						num44 *= 1f - shadow;
 						color27 = new Microsoft.Xna.Framework.Color((int)(250f * num44), (int)(250f * num44), (int)(250f * num44), (int)(100f * num44));
 					}
+
 					if (drawPlayer.wings == 10)
 					{
 						num44 *= num44;
 						num44 *= 1f - shadow;
 						color27 = new Microsoft.Xna.Framework.Color((int)(250f * num44), (int)(250f * num44), (int)(250f * num44), (int)(175f * num44));
 					}
+
 					if (drawPlayer.wings == 11 && color27.A > Main.gFade)
 					{
 						color27.A = Main.gFade;
 					}
+
 					if (drawPlayer.wings == 31)
 					{
 						color27.A = (byte)(220f * num44);
 					}
+
 					if (drawPlayer.wings == 32)
 					{
 						color27.A = (byte)(127f * num44);
 					}
+
 					value = new DrawData(Main.wingsTexture[drawPlayer.wings], new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num62 * drawPlayer.direction), (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num61 * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, Main.wingsTexture[drawPlayer.wings].Width, Main.wingsTexture[drawPlayer.wings].Height / 4)), color27, drawPlayer.bodyRotation, new Vector2((float)(Main.wingsTexture[drawPlayer.wings].Width / 2), (float)(Main.wingsTexture[drawPlayer.wings].Height / 8)), 1f, spriteEffects, 0);
 					value.shader = shader12;
 					Main.playerDrawData.Add(value);
@@ -31847,6 +_,7 @@
 							value.shader = shader12;
 							Main.playerDrawData.Add(value);
 						}
+
 						value = new DrawData(Main.wingsTexture[drawPlayer.wings], new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num62 * drawPlayer.direction), (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num61 * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, Main.wingsTexture[drawPlayer.wings].Width, Main.wingsTexture[drawPlayer.wings].Height / 4)), value8 * num44 * (1f - shadow) * 1f, drawPlayer.bodyRotation, new Vector2((float)(Main.wingsTexture[drawPlayer.wings].Width / 2), (float)(Main.wingsTexture[drawPlayer.wings].Height / 8)), 1f, spriteEffects, 0);
 						value.shader = shader12;
 						Main.playerDrawData.Add(value);
@@ -31859,6 +_,11 @@
 					}
 				}
 			}
+
+			Position.Y -= (float)((int)num4 / 2);
+			goto layerLoopContinue;
+			balloonAccLayer:
+			Position.Y += (float)((int)num4 / 2);
 			if (drawPlayer.balloon > 0)
 			{
 				int num64 = DateTime.Now.Millisecond % 800 / 200;
@@ -31867,30 +_,39 @@
 				{
 					vector6.X = (float)drawPlayer.width - vector6.X;
 				}
+
 				if (drawPlayer.gravDir != 1f)
 				{
 					vector6.Y -= (float)drawPlayer.height;
 				}
+
 				value = new DrawData(Main.accBalloonTexture[(int)drawPlayer.balloon], new Vector2((float)((int)(Position.X - Main.screenPosition.X + vector6.X)), (float)((int)(Position.Y - Main.screenPosition.Y + vector6.Y * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.accBalloonTexture[(int)drawPlayer.balloon].Height / 4 * num64, Main.accBalloonTexture[(int)drawPlayer.balloon].Width, Main.accBalloonTexture[(int)drawPlayer.balloon].Height / 4)), color12, drawPlayer.bodyRotation, new Vector2((float)(26 + drawPlayer.direction * 4), 28f + drawPlayer.gravDir * 6f), 1f, spriteEffects, 0);
 				value.shader = shader11;
 				Main.playerDrawData.Add(value);
 			}
+
 			Position.Y -= (float)((int)num4 / 2);
-			if (drawPlayer.body != 83 && drawPlayer.body != 82 && drawPlayer.body != 93)
+			goto layerLoopContinue;
+			skinLayer:
+			if (drawPlayer.body != 83 && drawPlayer.body != 82 && drawPlayer.body != 93 && ItemLoader.DrawBody(drawPlayer))
 			{
 				value = new DrawData(Main.playerTextures[skinVariant, 3], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
-				if (drawPlayer.legs != 67 && drawPlayer.legs != 106 && drawPlayer.legs != 140 && drawPlayer.legs != 138 && drawPlayer.shoe != 15 && drawPlayer.legs != 143)
+				if (drawPlayer.legs != 67 && drawPlayer.legs != 106 && drawPlayer.legs != 140 && drawPlayer.legs != 138 && drawPlayer.shoe != 15 && drawPlayer.legs != 143 && ItemLoader.DrawLegs(drawPlayer))
 				{
 					value = new DrawData(Main.playerTextures[skinVariant, 10], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color6, drawPlayer.legRotation, origin, 1f, spriteEffects, 0);
 					Main.playerDrawData.Add(value);
 				}
 			}
+
+			goto layerLoopContinue;
 			if (drawPlayer.wearsRobe)
 			{
 				goto IL_6502;
 			}
+
 			IL_6048:
+			legsLayer:
 			if (drawPlayer.legs == 140)
 			{
 				if (!drawPlayer.invis && !drawPlayer.mount.Active)
@@ -31902,6 +_,7 @@
 					{
 						num65 = drawPlayer.miscCounter / 4 % 8;
 					}
+
 					Microsoft.Xna.Framework.Rectangle rectangle3 = new Microsoft.Xna.Framework.Rectangle(18 * flag10.ToInt(), num65 * 26, 16, 24);
 					float num66 = 12f - Main.OffsetsPlayerHeadgear[drawPlayer.bodyFrame.Y / drawPlayer.bodyFrame.Height].Y;
 					Vector2 scale2 = new Vector2(1f, 1f);
@@ -31914,7 +_,7 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
-			else if (drawPlayer.legs > 0 && drawPlayer.legs < 157 && (drawPlayer.shoe != 15 || drawPlayer.wearsRobe))
+			else if (drawPlayer.legs > 0 && (drawPlayer.shoe != 15 || drawPlayer.wearsRobe))
 			{
 				if (!drawPlayer.invis)
 				{
@@ -31936,41 +_,51 @@
 				value = new DrawData(Main.playerTextures[skinVariant, 12], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color10, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
 			}
+
+			goto layerLoopContinue;
 			if (drawPlayer.wearsRobe)
 			{
 				goto IL_65DD;
 			}
+
 			IL_6502:
-			if (drawPlayer.shoe > 0 && drawPlayer.shoe < 18)
+			shoeAccLayer:
+			if (drawPlayer.shoe > 0)
 			{
 				value = new DrawData(Main.accShoesTexture[(int)drawPlayer.shoe], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color14, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
 				value.shader = shader6;
 				Main.playerDrawData.Add(value);
 			}
+
+			goto layerLoopContinue;
 			if (drawPlayer.wearsRobe)
 			{
 				goto IL_6048;
 			}
+
 			IL_65DD:
+			bodyLayer:
 			bool flag11 = skinVariant == 3 || skinVariant == 8 || skinVariant == 7;
-			if (flag11 && (drawPlayer.body <= 0 || drawPlayer.body >= 208) && !drawPlayer.invis)
+			if (flag11 && drawPlayer.body <= 0 && !drawPlayer.invis)
 			{
 				value = new DrawData(Main.playerTextures[skinVariant, 14], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color7, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
 			}
+
 			int num67 = -1;
 			switch (drawPlayer.body)
 			{
 				case 200:
 					num67 = 149;
-					break;
+				break;
 				case 201:
 					num67 = 150;
-					break;
+				break;
 				case 202:
 					num67 = 151;
-					break;
-			}
+				break;
+			}
+
 			if (num67 != -1)
 			{
 				this.LoadArmorLegs(num67);
@@ -31978,7 +_,8 @@
 				value.shader = num6;
 				Main.playerDrawData.Add(value);
 			}
-			if (drawPlayer.body > 0 && drawPlayer.body < 208)
+
+			if (drawPlayer.body > 0)
 			{
 				Microsoft.Xna.Framework.Rectangle bodyFrame2 = drawPlayer.bodyFrame;
 				int num68 = num;
@@ -31988,6 +_,7 @@
 				{
 					num68 = 0;
 				}
+
 				if (!drawPlayer.invis || (drawPlayer.body != 21 && drawPlayer.body != 22))
 				{
 					Texture2D texture3;
@@ -31999,6 +_,7 @@
 					{
 						texture3 = Main.armorBodyTexture[drawPlayer.body];
 					}
+
 					value = new DrawData(texture3, new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)) + num68), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(bodyFrame2), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 					value.shader = num6;
 					Main.playerDrawData.Add(value);
@@ -32009,6 +_,7 @@
 						Main.playerDrawData.Add(value);
 					}
 				}
+
 				if (flag && !drawPlayer.invis)
 				{
 					value = new DrawData(Main.playerTextures[skinVariant, 5], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
@@ -32031,33 +_,47 @@
 					value = new DrawData(Main.playerTextures[skinVariant, 6], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color7, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 					Main.playerDrawData.Add(value);
 				}
+
 				value = new DrawData(Main.playerTextures[skinVariant, 5], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
 			}
-			if (drawPlayer.handoff > 0 && drawPlayer.handoff < 12)
+
+			goto layerLoopContinue;
+			handOffAccLayer:
+			if (drawPlayer.handoff > 0)
 			{
 				value = new DrawData(Main.accHandsOffTexture[(int)drawPlayer.handoff], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader3;
 				Main.playerDrawData.Add(value);
 			}
-			if (drawPlayer.waist > 0 && drawPlayer.waist < 13)
+
+			goto layerLoopContinue;
+			waistAccLayer:
+			if (drawPlayer.waist > 0)
 			{
 				Microsoft.Xna.Framework.Rectangle legFrame = drawPlayer.legFrame;
 				if (legFrame.Y >= 1064)
 				{
 					legFrame.Y = 0;
 				}
+
 				value = new DrawData(Main.accWaistTexture[(int)drawPlayer.waist], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(legFrame), color14, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
 				value.shader = shader7;
 				Main.playerDrawData.Add(value);
 			}
-			if (drawPlayer.neck > 0 && drawPlayer.neck < 10)
+
+			goto layerLoopContinue;
+			neckAccLayer:
+			if (drawPlayer.neck > 0)
 			{
 				value = new DrawData(Main.accNeckTexture[(int)drawPlayer.neck], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader9;
 				Main.playerDrawData.Add(value);
 			}
-			if (!drawPlayer.invis && drawPlayer.head != 38 && drawPlayer.head != 135)
+
+			goto layerLoopContinue;
+			faceLayer:
+			if (!drawPlayer.invis && drawPlayer.head != 38 && drawPlayer.head != 135 && ItemLoader.DrawHead(drawPlayer))
 			{
 				value = new DrawData(Main.playerTextures[skinVariant, 0], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color4, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
@@ -32071,6 +_,9 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
+
+			goto layerLoopContinue;
+			hairLayer:
 			if (flag4)
 			{
 				value = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color11, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
@@ -32083,12 +_,16 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
+
 			if (flag5 && !drawPlayer.invis)
 			{
 				value = new DrawData(Main.playerHairAltTexture[drawPlayer.hair], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(bodyFrame), color, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
 				value.shader = -num3;
 				Main.playerDrawData.Add(value);
 			}
+
+			goto layerLoopContinue;
+			headLayer:
 			if (drawPlayer.head == 23)
 			{
 				if (!drawPlayer.invis)
@@ -32097,6 +_,7 @@
 					value.shader = -num3;
 					Main.playerDrawData.Add(value);
 				}
+
 				value = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color11, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
 				value.shader = num5;
 				Main.playerDrawData.Add(value);
@@ -32120,11 +_,12 @@
 					origin2.Y -= 10f;
 					bodyFrame3.Height -= 8;
 				}
+
 				value = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(bodyFrame3), color11, drawPlayer.headRotation, origin2, 1f, spriteEffects, 0);
 				value.shader = num5;
 				Main.playerDrawData.Add(value);
 			}
-			else if (drawPlayer.head > 0 && drawPlayer.head < 214 && drawPlayer.head != 28)
+			else if (drawPlayer.head > 0 && drawPlayer.head != 28)
 			{
 				if (!drawPlayer.invis || (drawPlayer.head != 39 && drawPlayer.head != 38))
 				{
@@ -32136,11 +_,13 @@
 						{
 							num69 += drawPlayer.armor[num70].stack;
 						}
+
 						num70 = 10;
 						if (drawPlayer.armor[num70] != null && drawPlayer.armor[num70].type == 205 && drawPlayer.armor[num70].stack > 0)
 						{
 							num69 += drawPlayer.armor[num70].stack;
 						}
+
 						float num71 = 0.05235988f;
 						float num72 = num71 * drawPlayer.position.X % 6.28318548f;
 						for (int num73 = 0; num73 < num69; num73++)
@@ -32162,6 +_,7 @@
 							value.shader = num5;
 							Main.playerDrawData.Add(value);
 						}
+
 						if (drawPlayer.head == 211)
 						{
 							Microsoft.Xna.Framework.Color color28 = new Microsoft.Xna.Framework.Color(100, 100, 100, 0);
@@ -32185,11 +_,13 @@
 				value.shader = -num3;
 				Main.playerDrawData.Add(value);
 			}
+
 			if (drawPlayer.head == 205)
 			{
 				value = new DrawData(Main.extraTexture[77], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color4, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
 			}
+
 			if (drawPlayer.head == 137)
 			{
 				value = new DrawData(Main.jackHatTexture, new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), new Microsoft.Xna.Framework.Color(255, 255, 255, 255), drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
@@ -32205,7 +_,10 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
-			if (drawPlayer.face > 0 && drawPlayer.face < 9)
+
+			goto layerLoopContinue;
+			faceAccLayer:
+			if (drawPlayer.face > 0)
 			{
 				if (drawPlayer.face == 7)
 				{
@@ -32220,11 +_,15 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
+
+			goto layerLoopContinue;
+			mountFrontLayer:
 			if (drawPlayer.mount.Active)
 			{
 				drawPlayer.mount.Draw(Main.playerDrawData, 2, drawPlayer, Position, color13, spriteEffects, shadow);
 				drawPlayer.mount.Draw(Main.playerDrawData, 3, drawPlayer, Position, color13, spriteEffects, shadow);
 			}
+
 			if (drawPlayer.pulley && drawPlayer.itemAnimation == 0)
 			{
 				if (drawPlayer.pulleyDir == 2)
@@ -32244,13 +_,17 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
-			if (drawPlayer.shield > 0 && drawPlayer.shield < 7)
+
+			goto layerLoopContinue;
+			shieldAccLayer:
+			if (drawPlayer.shield > 0)
 			{
 				Vector2 zero = Vector2.Zero;
 				if (drawPlayer.shieldRaised)
 				{
 					zero.Y -= 4f;
 				}
+
 				if (drawPlayer.shieldRaised)
 				{
 					float num83 = (float)Math.Sin((double)(Main.GlobalTime * 6.28318548f));
@@ -32265,6 +_,7 @@
 						Main.playerDrawData.Add(value);
 					}
 				}
+
 				value = new DrawData(Main.accShieldTexture[(int)drawPlayer.shield], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)) + zero, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader8;
 				Main.playerDrawData.Add(value);
@@ -32277,6 +_,7 @@
 					value = new DrawData(Main.accShieldTexture[(int)drawPlayer.shield], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)) + zero, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color31, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 					value.shader = shader8;
 				}
+
 				if (drawPlayer.shieldRaised && drawPlayer.shieldParryTimeLeft > 0)
 				{
 					float num86 = (float)drawPlayer.shieldParryTimeLeft / 20f;
@@ -32294,11 +_,15 @@
 					value.shader = shader8;
 					Main.playerDrawData.Add(value);
 				}
+
+				goto layerLoopContinue;
 				if (drawPlayer.mount.Cart)
 				{
 					Main.playerDrawData.Reverse(Main.playerDrawData.Count - 2, 2);
 				}
 			}
+
+			solarShieldLayer:
 			Position.Y += (float)((int)num4 / 2);
 			if (drawPlayer.solarShields > 0 && shadow == 0f && !drawPlayer.dead)
 			{
@@ -32309,21 +_,29 @@
 				{
 					num89 += 3.14159274f;
 				}
+
 				num89 += 0.06283186f * (float)drawPlayer.direction;
 				value = new DrawData(texture2D6, new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2)))) + drawPlayer.solarShieldPos[0], null, color33, num89, texture2D6.Size() / 2f, 1f, spriteEffects, 0);
 				value.shader = num6;
 				Main.playerDrawData.Add(value);
 			}
+
 			Position.Y -= (float)((int)num4 / 2);
+			goto layerLoopContinue;
+			heldProjBackLayer:
 			if (drawPlayer.heldProj >= 0 && shadow == 0f && !flag3)
 			{
 				projectileDrawPosition = Main.playerDrawData.Count;
 			}
+
+			goto layerLoopContinue;
+			heldItemColor:
 			Microsoft.Xna.Framework.Color color34 = Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0));
 			if (drawPlayer.inventory[drawPlayer.selectedItem].type == 678)
 			{
 				color34 = Microsoft.Xna.Framework.Color.White;
 			}
+
 			if (drawPlayer.shroomiteStealth && drawPlayer.inventory[drawPlayer.selectedItem].ranged)
 			{
 				float num90 = drawPlayer.stealth;
@@ -32331,9 +_,11 @@
 				{
 					num90 = 0.03f;
 				}
+
 				float num91 = (1f + num90 * 10f) / 11f;
 				color34 = new Microsoft.Xna.Framework.Color((int)((byte)((float)color34.R * num90)), (int)((byte)((float)color34.G * num90)), (int)((byte)((float)color34.B * num91)), (int)((byte)((float)color34.A * num90)));
 			}
+
 			if (drawPlayer.setVortex && drawPlayer.inventory[drawPlayer.selectedItem].ranged)
 			{
 				float num92 = drawPlayer.stealth;
@@ -32341,9 +_,13 @@
 				{
 					num92 = 0.03f;
 				}
+
 				float arg_8EED_0 = (1f + num92 * 10f) / 11f;
 				color34 = color34.MultiplyRGBA(new Microsoft.Xna.Framework.Color(Vector4.Lerp(Vector4.One, new Vector4(0f, 0.12f, 0.16f, 0f), 1f - num92)));
 			}
+
+			goto postSetupVars;
+			heldItemLayer:
 			if (shadow == 0f && !drawPlayer.frozen && ((drawPlayer.itemAnimation > 0 && drawPlayer.inventory[drawPlayer.selectedItem].useStyle != 0) || (drawPlayer.inventory[drawPlayer.selectedItem].holdStyle > 0 && !drawPlayer.pulley)) && drawPlayer.inventory[drawPlayer.selectedItem].type > 0 && !drawPlayer.dead && !drawPlayer.inventory[drawPlayer.selectedItem].noUseGraphic && (!drawPlayer.wet || !drawPlayer.inventory[drawPlayer.selectedItem].noWet))
 			{
 				string arg_8FDD_0 = drawPlayer.name;
@@ -32353,6 +_,7 @@
 				{
 					zero2 = new Vector2((float)(7 * drawPlayer.direction), -7f * drawPlayer.gravDir);
 				}
+
 				if (drawPlayer.inventory[drawPlayer.selectedItem].type == 3827)
 				{
 					zero2 = new Vector2((float)(13 * drawPlayer.direction), -13f * drawPlayer.gravDir);
@@ -32360,6 +_,7 @@
 					color35 = Microsoft.Xna.Framework.Color.Lerp(color35, Microsoft.Xna.Framework.Color.White, 0.6f);
 					color35.A = 66;
 				}
+
 				ItemSlot.GetItemLight(ref color34, drawPlayer.inventory[drawPlayer.selectedItem], false);
 				if (drawPlayer.inventory[drawPlayer.selectedItem].type == 3476)
 				{
@@ -32387,6 +_,7 @@
 						value = new DrawData(Main.glowMaskTexture[218], (value2 - Main.screenPosition + value13).Floor() + (num94 * 1.57079637f).ToRotationVector2() * num93, new Microsoft.Xna.Framework.Rectangle?(rectangle5), color36, drawPlayer.itemRotation, origin4, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
 						Main.playerDrawData.Add(value);
 					}
+
 					value = new DrawData(texture2D8, (value2 - Main.screenPosition + value13).Floor(), new Microsoft.Xna.Framework.Rectangle?(rectangle5), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(color34).MultiplyRGBA(new Microsoft.Xna.Framework.Color(new Vector4(0.5f, 0.5f, 0.5f, 0.8f))), drawPlayer.itemRotation, origin4, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
 					Main.playerDrawData.Add(value);
 				}
@@ -32404,15 +_,18 @@
 							num96 = 8 * -drawPlayer.direction;
 							num97 = 2 * (int)drawPlayer.gravDir;
 						}
+
 						if (drawPlayer.inventory[drawPlayer.selectedItem].type == 3870)
 						{
 							num96 = 12 * -drawPlayer.direction;
 							num97 = 12 * (int)drawPlayer.gravDir;
 						}
+
 						if (drawPlayer.inventory[drawPlayer.selectedItem].type == 3787)
 						{
 							num97 = (int)((float)(8 * (int)drawPlayer.gravDir) * (float)Math.Cos((double)num95));
 						}
+
 						if (drawPlayer.gravDir == -1f)
 						{
 							if (drawPlayer.direction == -1)
@@ -32432,6 +_,8 @@
 							zero3 = new Vector2((float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, (float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height);
 							num96 -= Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width;
 						}
+
+						ItemLoader.HoldoutOrigin(drawPlayer, ref zero3);
 						value = new DrawData(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((float)((int)(value2.X - Main.screenPosition.X + zero3.X + (float)num96)), (float)((int)(value2.Y - Main.screenPosition.Y + (float)num97))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(color34), num95, zero3, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
 						Main.playerDrawData.Add(value);
 						if (drawPlayer.inventory[drawPlayer.selectedItem].type == 3870)
@@ -32451,6 +_,7 @@
 						{
 							origin5 = new Vector2((float)(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width + num98), (float)(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height / 2));
 						}
+
 						value = new DrawData(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((float)((int)(value2.X - Main.screenPosition.X + vector10.X)), (float)((int)(value2.Y - Main.screenPosition.Y + vector10.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(color34), drawPlayer.itemRotation, origin5, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
 						Main.playerDrawData.Add(value);
 						if (drawPlayer.inventory[drawPlayer.selectedItem].color != default(Microsoft.Xna.Framework.Color))
@@ -32458,11 +_,13 @@
 							value = new DrawData(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((float)((int)(value2.X - Main.screenPosition.X + vector10.X)), (float)((int)(value2.Y - Main.screenPosition.Y + vector10.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetColor(color34), drawPlayer.itemRotation, origin5, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
 							Main.playerDrawData.Add(value);
 						}
+
 						if (drawPlayer.inventory[drawPlayer.selectedItem].glowMask != -1)
 						{
 							value = new DrawData(Main.glowMaskTexture[(int)drawPlayer.inventory[drawPlayer.selectedItem].glowMask], new Vector2((float)((int)(value2.X - Main.screenPosition.X + vector10.X)), (float)((int)(value2.Y - Main.screenPosition.Y + vector10.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, drawPlayer.inventory[drawPlayer.selectedItem].alpha), drawPlayer.itemRotation, origin5, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
 							Main.playerDrawData.Add(value);
 						}
+
 						if (drawPlayer.inventory[drawPlayer.selectedItem].type == 3788)
 						{
 							float num99 = ((float)drawPlayer.miscCounter / 75f * 6.28318548f).ToRotationVector2().X * 1f + 0f;
@@ -32484,6 +_,7 @@
 						value = new DrawData(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((float)((int)(value2.X - Main.screenPosition.X)), (float)((int)(value2.Y - Main.screenPosition.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetColor(color34), drawPlayer.itemRotation, new Vector2((float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f - (float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f * (float)drawPlayer.direction, 0f) + zero2, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
 						Main.playerDrawData.Add(value);
 					}
+
 					if (drawPlayer.inventory[drawPlayer.selectedItem].glowMask != -1)
 					{
 						value = new DrawData(Main.glowMaskTexture[(int)drawPlayer.inventory[drawPlayer.selectedItem].glowMask], new Vector2((float)((int)(value2.X - Main.screenPosition.X)), (float)((int)(value2.Y - Main.screenPosition.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, drawPlayer.inventory[drawPlayer.selectedItem].alpha), drawPlayer.itemRotation, new Vector2((float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f - (float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f * (float)drawPlayer.direction, 0f) + zero2, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
@@ -32514,6 +_,7 @@
 							effect = SpriteEffects.FlipHorizontally;
 						}
 					}
+
 					int type4 = drawPlayer.inventory[drawPlayer.selectedItem].type;
 					value = new DrawData(Main.itemTexture[type4], new Vector2((float)((int)(value2.X - Main.screenPosition.X)), (float)((int)(value2.Y - Main.screenPosition.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[type4].Width, Main.itemTexture[type4].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(color34), drawPlayer.itemRotation, new Vector2((float)Main.itemTexture[type4].Width * 0.5f - (float)Main.itemTexture[type4].Width * 0.5f * (float)drawPlayer.direction, (float)Main.itemTexture[type4].Height) + zero2, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
 					Main.playerDrawData.Add(value);
@@ -32522,11 +_,13 @@
 						value = new DrawData(Main.itemTexture[type4], new Vector2((float)((int)(value2.X - Main.screenPosition.X)), (float)((int)(value2.Y - Main.screenPosition.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[type4].Width, Main.itemTexture[type4].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetColor(color34), drawPlayer.itemRotation, new Vector2((float)Main.itemTexture[type4].Width * 0.5f - (float)Main.itemTexture[type4].Width * 0.5f * (float)drawPlayer.direction, (float)Main.itemTexture[type4].Height) + zero2, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
 						Main.playerDrawData.Add(value);
 					}
+
 					if (drawPlayer.inventory[drawPlayer.selectedItem].glowMask != -1)
 					{
 						value = new DrawData(Main.glowMaskTexture[(int)drawPlayer.inventory[drawPlayer.selectedItem].glowMask], new Vector2((float)((int)(value2.X - Main.screenPosition.X)), (float)((int)(value2.Y - Main.screenPosition.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[type4].Width, Main.itemTexture[type4].Height)), color35, drawPlayer.itemRotation, new Vector2((float)Main.itemTexture[type4].Width * 0.5f - (float)Main.itemTexture[type4].Width * 0.5f * (float)drawPlayer.direction, (float)Main.itemTexture[type4].Height) + zero2, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
 						Main.playerDrawData.Add(value);
 					}
+
 					if (drawPlayer.inventory[drawPlayer.selectedItem].flame && shadow == 0f)
 					{
 						try
@@ -32541,6 +_,7 @@
 									{
 										color38 = new Microsoft.Xna.Framework.Color(Main.DiscoR, Main.DiscoG, Main.DiscoB, 0);
 									}
+
 									float x3 = drawPlayer.itemFlamePos[num101].X;
 									float y2 = drawPlayer.itemFlamePos[num101].Y;
 									value = new DrawData(Main.itemFlameTexture[type4], new Vector2((float)((int)(value2.X - Main.screenPosition.X)) + x3, (float)((int)(value2.Y - Main.screenPosition.Y)) + y2), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[type4].Width, Main.itemTexture[type4].Height)), color38, drawPlayer.itemRotation, new Vector2((float)Main.itemTexture[type4].Width * 0.5f - (float)Main.itemTexture[type4].Width * 0.5f * (float)drawPlayer.direction, (float)Main.itemTexture[type4].Height) + zero2, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
@@ -32554,7 +_,10 @@
 					}
 				}
 			}
-			if (drawPlayer.body > 0 && drawPlayer.body < 208)
+
+			goto layerLoopContinue;
+			armsLayer:
+			if (drawPlayer.body > 0)
 			{
 				Microsoft.Xna.Framework.Rectangle bodyFrame4 = drawPlayer.bodyFrame;
 				int num102 = num;
@@ -32564,19 +_,23 @@
 				{
 					num102 = 0;
 				}
+
 				if (!drawPlayer.invis || (drawPlayer.body != 21 && drawPlayer.body != 22))
 				{
 					if (flag && !drawPlayer.invis)
 					{
 						int arg_A72E_0 = drawPlayer.body;
+						//patch file: flag, flag2
 						if (flag2)
 						{
 							value = new DrawData(Main.playerTextures[skinVariant, 7], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 							Main.playerDrawData.Add(value);
 						}
+
 						value = new DrawData(Main.playerTextures[skinVariant, 9], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 						Main.playerDrawData.Add(value);
 					}
+
 					value = new DrawData(Main.armorArmTexture[drawPlayer.body], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)) + num102), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(bodyFrame4), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 					value.shader = num6;
 					Main.playerDrawData.Add(value);
@@ -32586,6 +_,7 @@
 						value.shader = num6;
 						Main.playerDrawData.Add(value);
 					}
+
 					if (drawPlayer.body == 205)
 					{
 						Microsoft.Xna.Framework.Color color39 = new Microsoft.Xna.Framework.Color(100, 100, 100, 0);
@@ -32611,12 +_,16 @@
 				value = new DrawData(Main.playerTextures[skinVariant, 13], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color7, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
 			}
-			if (drawPlayer.handon > 0 && drawPlayer.handon < 20)
+
+			goto layerLoopContinue;
+			handOnAccLayer:
+			if (drawPlayer.handon > 0)
 			{
 				value = new DrawData(Main.accHandsOnTexture[(int)drawPlayer.handon], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader2;
 				Main.playerDrawData.Add(value);
 			}
+
 			if (drawPlayer.inventory[drawPlayer.selectedItem].type > -1 && Item.claw[drawPlayer.inventory[drawPlayer.selectedItem].type] && shadow == 0f && !drawPlayer.frozen && (drawPlayer.itemAnimation > 0 || (drawPlayer.inventory[drawPlayer.selectedItem].holdStyle > 0 && !drawPlayer.pulley)) && drawPlayer.inventory[drawPlayer.selectedItem].type > 0 && !drawPlayer.dead && !drawPlayer.inventory[drawPlayer.selectedItem].noUseGraphic && (!drawPlayer.wet || !drawPlayer.inventory[drawPlayer.selectedItem].noWet))
 			{
 				if (drawPlayer.gravDir == -1f)
@@ -32631,16 +_,26 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
+
+			goto layerLoopContinue;
+			heldProjFrontLayer:
 			if (drawPlayer.heldProj >= 0 && shadow == 0f && flag3)
 			{
 				projectileDrawPosition = Main.playerDrawData.Count;
 			}
-			if (!flag9 && drawPlayer.front > 0 && drawPlayer.front < 5 && !drawPlayer.mount.Active)
+
+			goto layerLoopContinue;
+			frontAccLayer:
+			flag9 = (drawPlayer.wings == 0 || drawPlayer.velocity.Y == 0f) && (drawPlayer.inventory[drawPlayer.selectedItem].type == 1178 || drawPlayer.inventory[drawPlayer.selectedItem].type == 779 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1295 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1910 || drawPlayer.turtleArmor || drawPlayer.body == 106 || drawPlayer.body == 170);
+			if (!flag9 && drawPlayer.front > 0 && !drawPlayer.mount.Active)
 			{
 				value = new DrawData(Main.accFrontTexture[(int)drawPlayer.front], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader5;
 				Main.playerDrawData.Add(value);
 			}
+
+			goto layerLoopContinue;
+			miscEffectsFrontLayer:
 			if (drawPlayer.frozen && shadow == 0f)
 			{
 				Microsoft.Xna.Framework.Color color40 = color12;
@@ -32659,6 +_,7 @@
 				value = new DrawData(texture2D9, new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f + (float)num108))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), null, color41, drawPlayer.bodyRotation, texture2D9.Size() / 2f, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
 			}
+
 			if (drawPlayer.electrified && shadow == 0f)
 			{
 				Texture2D texture2D10 = Main.glowMaskTexture[25];
@@ -32671,9 +_,11 @@
 						value = new DrawData(texture2D10, new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num109 * texture2D10.Height / 7, texture2D10.Width, texture2D10.Height / 7)), color15, drawPlayer.bodyRotation, new Vector2((float)(texture2D10.Width / 2), (float)(texture2D10.Height / 14)), 1f, spriteEffects, 0);
 						Main.playerDrawData.Add(value);
 					}
+
 					num109 += 3;
 				}
 			}
+
 			if (drawPlayer.iceBarrier && shadow == 0f)
 			{
 				int num111 = this.iceBarrierTexture.Height / 12;
@@ -32681,6 +_,7 @@
 				value = new DrawData(this.iceBarrierTexture, new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num111 * (int)drawPlayer.iceBarrierFrame, this.iceBarrierTexture.Width, num111)), white, 0f, new Vector2((float)(Main.frozenTexture.Width / 2), (float)(Main.frozenTexture.Height / 2)), 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
 			}
+
 			if (shadow == 0f && drawPlayer.ownedLargeGems > 0)
 			{
 				bool flag13 = false;
@@ -32693,29 +_,31 @@
 						num112 += 1f;
 					}
 				}
+
 				float num114 = 1f - num112 * 0.06f;
 				float num115 = (num112 - 1f) * 4f;
 				switch ((int)num112)
 				{
 					case 2:
 						num115 += 10f;
-						break;
+					break;
 					case 3:
 						num115 += 8f;
-						break;
+					break;
 					case 4:
 						num115 += 6f;
-						break;
+					break;
 					case 5:
 						num115 += 6f;
-						break;
+					break;
 					case 6:
 						num115 += 2f;
-						break;
+					break;
 					case 7:
 						num115 += 0f;
-						break;
-				}
+					break;
+				}
+
 				float num116 = (float)drawPlayer.miscCounter / 300f * 6.28318548f;
 				if (num112 > 0f)
 				{
@@ -32726,6 +_,7 @@
 					{
 						one = Vector2.One;
 					}
+
 					List<DrawData> list = new List<DrawData>();
 					for (int num119 = 0; num119 < 7; num119++)
 					{
@@ -32742,18 +_,22 @@
 							{
 								num120 = MathHelper.Lerp(num114 * 0.7f, 1f, value14.Y / 2f + 0.5f);
 							}
+
 							Texture2D texture2D11 = Main.gemTexture[num119];
 							value = new DrawData(texture2D11, new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - 80f))) + value14 * one * num115, null, new Microsoft.Xna.Framework.Color(250, 250, 250, (int)(Main.mouseTextColor / 2)), 0f, texture2D11.Size() / 2f, ((float)Main.mouseTextColor / 1000f + 0.8f) * num120, SpriteEffects.None, 0);
 							list.Add(value);
 						}
 					}
+
 					if (flag13)
 					{
 						list.Sort(new Comparison<DrawData>(DelegateMethods.CompareDrawSorterByYScale));
 					}
+
 					Main.playerDrawData.AddRange(list);
 				}
 			}
+
 			if ((drawPlayer.beetleOffense || drawPlayer.beetleDefense) && shadow == 0f)
 			{
 				for (int num121 = 0; num121 < drawPlayer.beetleOrbs; num121++)
@@ -32771,10 +_,14 @@
 						value = new DrawData(Main.beetleTexture, new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2)))) + drawPlayer.beetlePos[num121] + value15, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.beetleTexture.Height / 3 * drawPlayer.beetleFrame + 1, Main.beetleTexture.Width, Main.beetleTexture.Height / 3 - 2)), color42, 0f, new Vector2((float)(Main.beetleTexture.Width / 2), (float)(Main.beetleTexture.Height / 6)), 1f, spriteEffects, 0);
 						Main.playerDrawData.Add(value);
 					}
+
 					value = new DrawData(Main.beetleTexture, new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2)))) + drawPlayer.beetlePos[num121], new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.beetleTexture.Height / 3 * drawPlayer.beetleFrame + 1, Main.beetleTexture.Width, Main.beetleTexture.Height / 3 - 2)), color12, 0f, new Vector2((float)(Main.beetleTexture.Width / 2), (float)(Main.beetleTexture.Height / 6)), 1f, spriteEffects, 0);
 					Main.playerDrawData.Add(value);
 				}
 			}
+
+			goto layerLoopContinue;
+			postDraw:
 			if (rotation != 0f)
 			{
 				Vector2 value16 = Position - Main.screenPosition + rotationOrigin;
@@ -32786,12 +_,14 @@
 					vector12 = Vector2.Transform(vector12, matrix);
 					Main.dust[Main.playerDrawDust[num124]].position = vector12 + value17;
 				}
+
 				for (int num125 = 0; num125 < Main.playerDrawGore.Count; num125++)
 				{
 					Vector2 vector13 = Main.gore[Main.playerDrawGore[num125]].position - value17;
 					vector13 = Vector2.Transform(vector13, matrix);
 					Main.gore[Main.playerDrawGore[num125]].position = vector13 + value17;
 				}
+
 				for (int num126 = 0; num126 < Main.playerDrawData.Count; num126++)
 				{
 					value = Main.playerDrawData[num126];
@@ -32805,6 +_,7 @@
 					}
 				}
 			}
+
 			this.DrawPlayer_DrawAllLayers(drawPlayer, projectileDrawPosition, num5);
 			Main.pixelShader.CurrentTechnique.Passes[0].Apply();
 			if (drawPlayer.mount.Active && drawPlayer.mount.Type == 11)
@@ -32831,6 +_,7 @@
 						Main.pixelShader.CurrentTechnique.Passes[0].Apply();
 						num = 0;
 					}
+
 					Main.projectile[drawPlayer.heldProj].gfxOffY = drawPlayer.gfxOffY;
 					try
 					{
@@ -32841,6 +_,7 @@
 						Main.projectile[drawPlayer.heldProj].active = false;
 					}
 				}
+
 				if (i != Main.playerDrawData.Count)
 				{
 					DrawData value = Main.playerDrawData[i];
@@ -32848,6 +_,7 @@
 					{
 						value.sourceRect = new Microsoft.Xna.Framework.Rectangle?(value.texture.Frame(1, 1, 0, 0));
 					}
+
 					if (value.shader >= 0)
 					{
 						GameShaders.Hair.Apply(0, drawPlayer, new DrawData?(value));
@@ -32863,6 +_,7 @@
 						GameShaders.Armor.Apply(0, drawPlayer, new DrawData?(value));
 						GameShaders.Hair.Apply((short)(-(short)value.shader), drawPlayer, new DrawData?(value));
 					}
+
 					num = value.shader;
 					if (value.texture != null)
 					{
@@ -32872,7 +_,7 @@
 			}
 		}
 
-		protected void DrawItem(Item item, int whoami)
+		public void DrawItem(Item item, int whoami)
 		{
 			int arg_22_0 = (int)((double)item.position.X + (double)item.width * 0.5) / 16;
 			int arg_28_0 = Lighting.offScreenTiles;
@@ -32889,16 +_,24 @@
 				{
 					num /= 100f;
 				}
+
 				if (num < (float)(color.R / 70 + 1))
 				{
 					int num3 = Dust.NewDust(item.position - new Vector2(1f, 2f), item.width, item.height, type, 0f, 0f, 254, default(Microsoft.Xna.Framework.Color), 0.25f);
 					Main.dust[num3].velocity *= 0f;
 				}
 			}
+
 			float num4 = item.velocity.X * 0.2f;
 			float scale = 1f;
 			Microsoft.Xna.Framework.Color alpha = item.GetAlpha(color);
 			ItemSlot.GetItemLight(ref alpha, ref scale, item, false);
+			if (!ItemLoader.PreDrawInWorld(item, Main.spriteBatch, color, alpha, ref num4, ref scale, whoami))
+			{
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
+				return;
+			}
+
 			float num5 = (float)(item.height - Main.itemTexture[item.type].Height);
 			float num6 = (float)(item.width / 2 - Main.itemTexture[item.type].Width / 2);
 			if (item.type >= 71 && item.type <= 74)
@@ -32910,16 +_,20 @@
 					Main.itemFrameCounter[whoami] = 0;
 					Main.itemFrame[whoami]++;
 				}
+
 				if (Main.itemFrame[whoami] > 7)
 				{
 					Main.itemFrame[whoami] = 0;
 				}
+
 				int width = Main.coinTexture[num7].Width;
 				int num8 = Main.coinTexture[num7].Height / 8;
 				num6 = (float)(item.width / 2 - Main.coinTexture[num7].Width / 2);
 				Main.spriteBatch.Draw(Main.coinTexture[num7], new Vector2(item.position.X - Main.screenPosition.X + (float)(width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(num8 / 2) + num5), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.itemFrame[whoami] * num8 + 1, Main.itemTexture[item.type].Width, num8)), alpha, num4, new Vector2((float)(width / 2), (float)(num8 / 2)), scale, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
+
 			if (ItemID.Sets.NebulaPickup[item.type])
 			{
 				Main.itemFrameCounter[whoami]++;
@@ -32928,16 +_,20 @@
 					Main.itemFrameCounter[whoami] = 0;
 					Main.itemFrame[whoami]++;
 				}
+
 				if (Main.itemFrame[whoami] >= 4)
 				{
 					Main.itemFrame[whoami] = 0;
 				}
+
 				Microsoft.Xna.Framework.Rectangle rectangle = Main.itemTexture[item.type].Frame(1, 4, 0, Main.itemFrame[whoami]);
 				num6 = (float)(item.width / 2 - rectangle.Width / 2);
 				num5 = (float)(item.height - rectangle.Height);
 				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(rectangle.Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(rectangle.Height / 2) + num5), new Microsoft.Xna.Framework.Rectangle?(rectangle), alpha, num4, rectangle.Size() / 2f, scale, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
+
 			if (ItemID.Sets.AnimatesAsSoul[item.type])
 			{
 				Main.itemFrameCounter[whoami]++;
@@ -32946,16 +_,20 @@
 					Main.itemFrameCounter[whoami] = 0;
 					Main.itemFrame[whoami]++;
 				}
+
 				if (Main.itemFrame[whoami] >= 4)
 				{
 					Main.itemFrame[whoami] = 0;
 				}
+
 				Microsoft.Xna.Framework.Rectangle rectangle2 = Main.itemTexture[item.type].Frame(1, 4, 0, Main.itemFrame[whoami]);
 				num6 = (float)(item.width / 2 - rectangle2.Width / 2);
 				num5 = (float)(item.height - rectangle2.Height);
 				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(rectangle2.Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(rectangle2.Height / 2) + num5), new Microsoft.Xna.Framework.Rectangle?(rectangle2), alpha, num4, rectangle2.Size() / 2f, scale, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
+
 			if (item.type == 3858)
 			{
 				Main.itemFrameCounter[whoami]++;
@@ -32964,10 +_,12 @@
 					Main.itemFrameCounter[whoami] = 0;
 					Main.itemFrame[whoami]++;
 				}
+
 				if (Main.itemFrame[whoami] >= 3)
 				{
 					Main.itemFrame[whoami] = 0;
 				}
+
 				Texture2D texture2D = Main.glowMaskTexture[233];
 				Microsoft.Xna.Framework.Rectangle rectangle3 = texture2D.Frame(1, 3, 0, Main.itemFrame[whoami]);
 				num6 = (float)(item.width / 2 - rectangle3.Width / 2);
@@ -32978,6 +_,7 @@
 				Main.spriteBatch.Draw(texture2D, new Vector2(item.position.X - Main.screenPosition.X + (float)(rectangle3.Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(rectangle3.Height / 2) + num5), new Microsoft.Xna.Framework.Rectangle?(rectangle3), new Microsoft.Xna.Framework.Color(255, 255, 255, 63) * 0.75f, num4, rectangle3.Size() / 2f, scale, SpriteEffects.None, 0f);
 				return;
 			}
+
 			if (ItemID.Sets.TrapSigned[item.type])
 			{
 				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), alpha, num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
@@ -32985,32 +_,50 @@
 				{
 					Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), item.GetColor(color), num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
 				}
+
 				if (item.glowMask != -1)
 				{
 					Main.spriteBatch.Draw(Main.glowMaskTexture[(int)item.glowMask], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, item.alpha), num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
 				}
+
 				Main.spriteBatch.Draw(Main.wireTexture, new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f) + Main.itemTexture[item.type].Size().RotatedBy((double)num4, default(Vector2)) * 0.45f * item.scale, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(4, 58, 8, 8)), alpha, 0f, new Vector2(4f), 1f, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
+
 			if ((item.type >= 1522 && item.type <= 1527) || item.type == 3643)
 			{
 				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, (int)(Main.mouseTextColor / 2)), num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), (float)Main.mouseTextColor / 1000f + 0.8f, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
+
 			if (item.type == 3779)
 			{
 				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), alpha, num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
+
+			if (ItemLoader.animations.Contains(item.type))
+			{
+				ItemLoader.DrawAnimatedItem(item, whoami, color, alpha, num4, scale);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
+				return;
+			}
+
 			Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), alpha, num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
 			if (item.color != default(Microsoft.Xna.Framework.Color))
 			{
 				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), item.GetColor(color), num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
 			}
+
 			if (item.glowMask != -1)
 			{
 				Main.spriteBatch.Draw(Main.glowMaskTexture[(int)item.glowMask], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, item.alpha), num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
 			}
+
+			ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
 		}
 
 		protected void DrawRain()
@@ -33021,6 +_,7 @@
 			{
 				array[i] = new Microsoft.Xna.Framework.Rectangle(i * 4, 0, 2, 40);
 			}
+
 			for (int j = 0; j < Main.maxRain; j++)
 			{
 				if (Main.rain[j].active)
@@ -33033,6 +_,7 @@
 					}
 				}
 			}
+
 			TimeLogger.DetailedDrawTime(23);
 		}
 
@@ -33053,6 +_,7 @@
 					{
 						rectangle = rectangle2;
 					}
+
 					if (new Microsoft.Xna.Framework.Rectangle((int)dust.position.X, (int)dust.position.Y, 4, 4).Intersects(rectangle))
 					{
 						float scale = dust.scale;
@@ -33070,6 +_,7 @@
 								dust.shader.Apply(null, null);
 							}
 						}
+
 						if (dust.type >= 130 && dust.type <= 134)
 						{
 							float num = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
@@ -33079,6 +_,7 @@
 							{
 								num = 10f;
 							}
+
 							int num2 = 0;
 							while ((float)num2 < num)
 							{
@@ -33100,6 +_,7 @@
 							{
 								num3 = 10f;
 							}
+
 							int num4 = 0;
 							while ((float)num4 < num3)
 							{
@@ -33120,6 +_,7 @@
 							{
 								num5 = 10f;
 							}
+
 							int num6 = 0;
 							while ((float)num6 < num5)
 							{
@@ -33143,6 +_,7 @@
 							{
 								num7 = 10f;
 							}
+
 							int num8 = 0;
 							while ((float)num8 < num7)
 							{
@@ -33155,21 +_,32 @@
 								num8++;
 							}
 						}
+
 						Microsoft.Xna.Framework.Color color5 = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
-						if (dust.type == 6 || dust.type == 15 || (dust.noLight && dust.type < 86 && dust.type > 91) || (dust.type >= 59 && dust.type <= 64))
+						if (dust.type == 6 || dust.type == 15 || (dust.noLight && (dust.type < 86 || dust.type > 91)) || (dust.type >= 59 && dust.type <= 64))
 						{
 							color5 = Microsoft.Xna.Framework.Color.White;
 						}
+
 						color5 = dust.GetAlpha(color5);
 						if (dust.type == 213)
 						{
 							scale = 1f;
 						}
+
+						ModDust modDust = ModDust.GetDust(dust.type);
+						if (modDust != null)
+						{
+							modDust.Draw(dust, color5, scale);
+							continue;
+						}
+
 						Main.spriteBatch.Draw(Main.dustTexture, dust.position - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), color5, dust.rotation, new Vector2(4f, 4f), scale, SpriteEffects.None, 0f);
 						if (dust.color != default(Microsoft.Xna.Framework.Color))
 						{
 							Main.spriteBatch.Draw(Main.dustTexture, dust.position - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), dust.GetColor(color5), dust.rotation, new Vector2(4f, 4f), scale, SpriteEffects.None, 0f);
 						}
+
 						if (color5 == Microsoft.Xna.Framework.Color.Black)
 						{
 							dust.active = false;
@@ -33181,6 +_,7 @@
 					}
 				}
 			}
+
 			Main.spriteBatch.End();
 			Main.pixelShader.CurrentTechnique.Passes[0].Apply();
 			TimeLogger.DetailedDrawTime(25);
@@ -33193,11 +_,13 @@
 			{
 				flag = true;
 			}
+
 			bool flag2 = false;
 			if (Main.player[Main.myPlayer].statManaMax > 0)
 			{
 				flag2 = true;
 			}
+
 			bool flag3 = true;
 			bool flag4 = false;
 			bool flag5 = false;
@@ -33211,39 +_,48 @@
 				{
 					flag3 = false;
 				}
+
 				if (Main.player[Main.myPlayer].inventory[i].axe > 0 && Main.player[Main.myPlayer].inventory[i].name != "Copper Axe")
 				{
 					flag3 = false;
 				}
+
 				if (Main.player[Main.myPlayer].inventory[i].hammer > 0)
 				{
 					flag3 = false;
 				}
+
 				if (Main.player[Main.myPlayer].inventory[i].type == 11 || Main.player[Main.myPlayer].inventory[i].type == 12 || Main.player[Main.myPlayer].inventory[i].type == 13 || Main.player[Main.myPlayer].inventory[i].type == 14)
 				{
 					flag4 = true;
 				}
+
 				if (Main.player[Main.myPlayer].inventory[i].type == 19 || Main.player[Main.myPlayer].inventory[i].type == 20 || Main.player[Main.myPlayer].inventory[i].type == 21 || Main.player[Main.myPlayer].inventory[i].type == 22)
 				{
 					flag5 = true;
 				}
+
 				if (Main.player[Main.myPlayer].inventory[i].type == 75)
 				{
 					flag6 = true;
 				}
+
 				if (Main.player[Main.myPlayer].inventory[i].type == 38)
 				{
 					flag7 = true;
 				}
+
 				if (Main.player[Main.myPlayer].inventory[i].type == 68 || Main.player[Main.myPlayer].inventory[i].type == 70 || Main.player[Main.myPlayer].inventory[i].type == 1330)
 				{
 					flag8 = true;
 				}
+
 				if (Main.player[Main.myPlayer].inventory[i].type == 84)
 				{
 					flag9 = true;
 				}
 			}
+
 			bool flag10 = false;
 			bool flag11 = false;
 			bool flag12 = false;
@@ -33261,40 +_,49 @@
 					{
 						flag10 = true;
 					}
+
 					if (Main.npc[j].type == 18)
 					{
 						flag11 = true;
 					}
+
 					if (Main.npc[j].type == 19)
 					{
 						flag13 = true;
 					}
+
 					if (Main.npc[j].type == 20)
 					{
 						flag12 = true;
 					}
+
 					if (Main.npc[j].type == 54)
 					{
 						flag18 = true;
 					}
+
 					if (Main.npc[j].type == 124)
 					{
 						flag15 = true;
 					}
+
 					if (Main.npc[j].type == 38)
 					{
 						flag14 = true;
 					}
+
 					if (Main.npc[j].type == 108)
 					{
 						flag16 = true;
 					}
+
 					if (Main.npc[j].type == 107)
 					{
 						flag17 = true;
 					}
 				}
 			}
+
 			object obj = Lang.CreateDialogSubstitutionObject(null);
 			LocalizedText text;
 			while (true)
@@ -33308,211 +_,260 @@
 						break;
 					}
 				}
+
 				if (flag3)
 				{
 					if (Main.helpText == 1)
 					{
 						goto Block_34;
 					}
+
 					if (Main.helpText == 2)
 					{
 						goto Block_35;
 					}
+
 					if (Main.helpText == 3)
 					{
 						goto Block_36;
 					}
+
 					if (Main.helpText == 4)
 					{
 						goto Block_37;
 					}
+
 					if (Main.helpText == 5)
 					{
 						goto Block_38;
 					}
+
 					if (Main.helpText == 6)
 					{
 						goto Block_39;
 					}
 				}
+
 				if (flag3 && !flag4 && !flag5 && Main.helpText == 11)
 				{
 					goto Block_43;
 				}
+
 				if (flag3 && flag4 && !flag5)
 				{
 					if (Main.helpText == 21)
 					{
 						goto Block_47;
 					}
+
 					if (Main.helpText == 22)
 					{
 						goto Block_48;
 					}
 				}
+
 				if (flag3 && flag5)
 				{
 					if (Main.helpText == 31)
 					{
 						goto Block_51;
 					}
+
 					if (Main.helpText == 32)
 					{
 						goto Block_52;
 					}
 				}
+
 				if (!flag && Main.helpText == 41)
 				{
 					goto Block_54;
 				}
+
 				if (!flag2 && Main.helpText == 42)
 				{
 					goto Block_56;
 				}
+
 				if (!flag2 && !flag6 && Main.helpText == 43)
 				{
 					goto Block_59;
 				}
+
 				if (!flag10 && !flag11)
 				{
 					if (Main.helpText == 51)
 					{
 						goto Block_62;
 					}
+
 					if (Main.helpText == 52)
 					{
 						goto Block_63;
 					}
+
 					if (Main.helpText == 53)
 					{
 						goto Block_64;
 					}
+
 					if (Main.helpText == 54)
 					{
 						goto Block_65;
 					}
 				}
+
 				if (!flag10 && Main.helpText == 61)
 				{
 					goto Block_67;
 				}
+
 				if (!flag11 && Main.helpText == 62)
 				{
 					goto Block_69;
 				}
+
 				if (!flag13 && Main.helpText == 63)
 				{
 					goto Block_71;
 				}
+
 				if (!flag12 && Main.helpText == 64)
 				{
 					goto Block_73;
 				}
+
 				if (!flag15 && Main.helpText == 65 && NPC.downedBoss3)
 				{
 					goto Block_76;
 				}
+
 				if (!flag18 && Main.helpText == 66 && NPC.downedBoss3)
 				{
 					goto Block_79;
 				}
+
 				if (!flag14 && Main.helpText == 67)
 				{
 					goto Block_81;
 				}
+
 				if (!flag17 && NPC.downedBoss2 && Main.helpText == 68)
 				{
 					goto Block_84;
 				}
+
 				if (!flag16 && Main.hardMode && Main.helpText == 69)
 				{
 					goto Block_87;
 				}
+
 				if (flag7 && Main.helpText == 71)
 				{
 					goto Block_89;
 				}
+
 				if (flag8 && Main.helpText == 72)
 				{
 					goto Block_91;
 				}
+
 				if ((flag7 || flag8) && Main.helpText == 80)
 				{
 					goto Block_94;
 				}
+
 				if (!flag9 && Main.helpText == 201 && !Main.hardMode && !NPC.downedBoss3 && !NPC.downedBoss2)
 				{
 					goto Block_100;
 				}
+
 				if (Main.helpText == 1000 && !NPC.downedBoss1 && !NPC.downedBoss2)
 				{
 					goto Block_103;
 				}
+
 				if (Main.helpText == 1001 && !NPC.downedBoss1 && !NPC.downedBoss2)
 				{
 					goto Block_106;
 				}
+
 				if (Main.helpText == 1002 && !NPC.downedBoss2)
 				{
 					goto Block_108;
 				}
+
 				if (Main.helpText == 1050 && !NPC.downedBoss1 && Main.player[Main.myPlayer].statLifeMax < 200)
 				{
 					goto Block_112;
 				}
+
 				if (Main.helpText == 1051 && !NPC.downedBoss1 && Main.player[Main.myPlayer].statDefense <= 10)
 				{
 					goto Block_115;
 				}
+
 				if (Main.helpText == 1052 && !NPC.downedBoss1 && Main.player[Main.myPlayer].statLifeMax >= 200 && Main.player[Main.myPlayer].statDefense > 10)
 				{
 					goto Block_119;
 				}
+
 				if (Main.helpText == 1053 && NPC.downedBoss1 && !NPC.downedBoss2 && Main.player[Main.myPlayer].statLifeMax < 300)
 				{
 					goto Block_123;
 				}
+
 				if (Main.helpText == 1054 && NPC.downedBoss1 && !NPC.downedBoss2 && Main.player[Main.myPlayer].statLifeMax >= 300)
 				{
 					goto Block_127;
 				}
+
 				if (Main.helpText == 1055 && NPC.downedBoss1 && !NPC.downedBoss2 && Main.player[Main.myPlayer].statLifeMax >= 300)
 				{
 					goto Block_131;
 				}
+
 				if (Main.helpText == 1056 && NPC.downedBoss1 && NPC.downedBoss2 && !NPC.downedBoss3)
 				{
 					goto Block_135;
 				}
+
 				if (Main.helpText == 1057 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !Main.hardMode && Main.player[Main.myPlayer].statLifeMax < 400)
 				{
 					goto Block_141;
 				}
+
 				if (Main.helpText == 1058 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !Main.hardMode && Main.player[Main.myPlayer].statLifeMax >= 400)
 				{
 					goto Block_147;
 				}
+
 				if (Main.helpText == 1059 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !Main.hardMode && Main.player[Main.myPlayer].statLifeMax >= 400)
 				{
 					goto Block_153;
 				}
+
 				if (Main.helpText == 1060 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !Main.hardMode && Main.player[Main.myPlayer].statLifeMax >= 400)
 				{
 					goto Block_159;
 				}
+
 				if (Main.helpText == 1061 && Main.hardMode)
 				{
 					goto Block_161;
 				}
+
 				if (Main.helpText == 1062 && Main.hardMode)
 				{
 					goto Block_164;
 				}
+
 				if (Main.helpText > 1100)
 				{
 					Main.helpText = 0;
 				}
 			}
+
 			Main.npcChatText = text.FormatWith(obj);
 			return;
 			Block_34:
@@ -33620,6 +_,7 @@
 				Main.npcChatText = Lang.dialog(331, false);
 				return;
 			}
+
 			Main.npcChatText = Lang.dialog(210, false);
 			return;
 			Block_112:
@@ -33669,33 +_,40 @@
 				Main.npcChatText = "";
 				return;
 			}
+
 			if (Main.netMode == 0 && Main.autoPause && Main.player[Main.myPlayer].talkNPC >= 0)
 			{
 				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 105)
 				{
 					Main.npc[Main.player[Main.myPlayer].talkNPC].Transform(107);
 				}
+
 				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 106)
 				{
 					Main.npc[Main.player[Main.myPlayer].talkNPC].Transform(108);
 				}
+
 				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 123)
 				{
 					Main.npc[Main.player[Main.myPlayer].talkNPC].Transform(124);
 				}
+
 				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 354)
 				{
 					Main.npc[Main.player[Main.myPlayer].talkNPC].Transform(353);
 				}
+
 				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 376)
 				{
 					Main.npc[Main.player[Main.myPlayer].talkNPC].Transform(369);
 				}
+
 				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 579)
 				{
 					Main.npc[Main.player[Main.myPlayer].talkNPC].Transform(550);
 				}
 			}
+
 			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(200, 200, 200, 200);
 			int num = (int)((Main.mouseTextColor * 2 + 255) / 3);
 			Microsoft.Xna.Framework.Color textColor = new Microsoft.Xna.Framework.Color(num, num, num, num);
@@ -33715,8 +_,10 @@
 					{
 						this.textBlinkerState = 0;
 					}
+
 					this.textBlinkerCount = 0;
 				}
+
 				if (this.textBlinkerState == 1)
 				{
 					string[] array2;
@@ -33724,6 +_,7 @@
 					(array2 = array)[(int)(intPtr = (IntPtr)num2)] = array2[(int)intPtr] + "|";
 				}
 			}
+
 			num2++;
 			Main.spriteBatch.Draw(Main.chatBackTexture, new Vector2((float)(Main.screenWidth / 2 - Main.chatBackTexture.Width / 2), 100f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chatBackTexture.Width, (num2 + 1) * 30)), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 			Main.spriteBatch.Draw(Main.chatBackTexture, new Vector2((float)(Main.screenWidth / 2 - Main.chatBackTexture.Width / 2), (float)(100 + (num2 + 1) * 30)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.chatBackTexture.Height - 30, Main.chatBackTexture.Width, 30)), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
@@ -33734,6 +_,7 @@
 					Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontMouseText, array[i], (float)(170 + (Main.screenWidth - 800) / 2), (float)(120 + i * 30), textColor, Microsoft.Xna.Framework.Color.Black, Vector2.Zero, 1f);
 				}
 			}
+
 			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(Main.screenWidth / 2 - Main.chatBackTexture.Width / 2, 100, Main.chatBackTexture.Width, (num2 + 2) * 30);
 			int num3 = 120 + num2 * 30 + 30;
 			num3 -= 235;
@@ -33741,6 +_,7 @@
 			{
 				num3 = 9999;
 			}
+
 			UIVirtualKeyboard.OffsetDown = num3;
 			if (Main.npcChatCornerItem != 0)
 			{
@@ -33761,16 +_,19 @@
 						num4 = 32f / (float)texture2D.Height;
 					}
 				}
+
 				Main.spriteBatch.Draw(texture2D, vector, null, item.GetAlpha(Microsoft.Xna.Framework.Color.White), 0f, new Vector2((float)texture2D.Width, (float)texture2D.Height), num4, SpriteEffects.None, 0f);
 				if (item.color != default(Microsoft.Xna.Framework.Color))
 				{
 					Main.spriteBatch.Draw(texture2D, vector, null, item.GetColor(item.color), 0f, new Vector2((float)texture2D.Width, (float)texture2D.Height), num4, SpriteEffects.None, 0f);
 				}
+
 				if (new Microsoft.Xna.Framework.Rectangle((int)vector.X - (int)((float)texture2D.Width * num4), (int)vector.Y - (int)((float)texture2D.Height * num4), (int)((float)texture2D.Width * num4), (int)((float)texture2D.Height * num4)).Contains(new Microsoft.Xna.Framework.Point(Main.mouseX, Main.mouseY)))
 				{
 					this.MouseText(item.name, -11, 0);
 				}
 			}
+
 			num = (int)Main.mouseTextColor;
 			textColor = new Microsoft.Xna.Framework.Color(num, (int)((double)num / 1.1), num / 2, num);
 			string text = "";
@@ -33779,11 +_,12 @@
 			for (int j = 0; j < 22; j++)
 			{
 				int num6 = Main.player[Main.myPlayer].buffType[j];
-				if (Main.debuff[num6] && Main.player[Main.myPlayer].buffTime[j] > 5 && num6 != 28 && num6 != 34 && num6 != 87 && num6 != 89 && num6 != 21 && num6 != 86 && num6 != 199)
+				if (Main.debuff[num6] && Main.player[Main.myPlayer].buffTime[j] > 5 && BuffLoader.CanBeCleared(num6))
 				{
 					num5 += 1000;
 				}
 			}
+
 			if (Main.player[Main.myPlayer].sign > -1)
 			{
 				if (Main.editSign)
@@ -33865,74 +_,83 @@
 					{
 						num11 = 0;
 					}
+
 					num5 = num11;
 					if (num11 >= 1000000)
 					{
 						num7 = num11 / 1000000;
 						num11 -= num7 * 1000000;
 					}
+
 					if (num11 >= 10000)
 					{
 						num8 = num11 / 10000;
 						num11 -= num8 * 10000;
 					}
+
 					if (num11 >= 100)
 					{
 						num9 = num11 / 100;
 						num11 -= num9 * 100;
 					}
+
 					if (num11 >= 1)
 					{
 						num10 = num11;
 					}
+
 					if (num7 > 0)
 					{
 						object obj = text3;
 						text3 = string.Concat(new object[]
-							{
-								obj,
+						{
+							obj,
 								num7,
 								" ",
 								Lang.inter[15],
 								" "
-							});
-					}
+						});
+					}
+
 					if (num8 > 0)
 					{
 						object obj = text3;
 						text3 = string.Concat(new object[]
-							{
-								obj,
+						{
+							obj,
 								num8,
 								" ",
 								Lang.inter[16],
 								" "
-							});
-					}
+						});
+					}
+
 					if (num9 > 0)
 					{
 						object obj = text3;
 						text3 = string.Concat(new object[]
-							{
-								obj,
+						{
+							obj,
 								num9,
 								" ",
 								Lang.inter[17],
 								" "
-							});
-					}
+						});
+					}
+
 					if (num10 > 0)
 					{
 						object obj = text3;
 						text3 = string.Concat(new object[]
-							{
-								obj,
+						{
+							obj,
 								num10,
 								" ",
 								Lang.inter[18],
 								" "
-							});
-					}
+						});
+					}
+
 					float num12 = (float)Main.mouseTextColor / 255f;
 					if (num7 > 0)
 					{
@@ -33950,6 +_,7 @@
 					{
 						textColor = new Microsoft.Xna.Framework.Color((int)((byte)(246f * num12)), (int)((byte)(138f * num12)), (int)((byte)(96f * num12)), (int)Main.mouseTextColor);
 					}
+
 					if (text3 == "")
 					{
 						text = Lang.inter[89];
@@ -33977,78 +_,88 @@
 						num17 = 1;
 					}
 				}
+
 				if (num17 < 0)
 				{
 					num17 = 0;
 				}
+
 				num5 = num17;
 				if (num17 >= 1000000)
 				{
 					num13 = num17 / 1000000;
 					num17 -= num13 * 1000000;
 				}
+
 				if (num17 >= 10000)
 				{
 					num14 = num17 / 10000;
 					num17 -= num14 * 10000;
 				}
+
 				if (num17 >= 100)
 				{
 					num15 = num17 / 100;
 					num17 -= num15 * 100;
 				}
+
 				if (num17 >= 1)
 				{
 					num16 = num17;
 				}
+
 				if (num13 > 0)
 				{
 					object obj = text4;
 					text4 = string.Concat(new object[]
-						{
-							obj,
+					{
+						obj,
 							num13,
 							" ",
 							Lang.inter[15],
 							" "
-						});
-				}
+					});
+				}
+
 				if (num14 > 0)
 				{
 					object obj = text4;
 					text4 = string.Concat(new object[]
-						{
-							obj,
+					{
+						obj,
 							num14,
 							" ",
 							Lang.inter[16],
 							" "
-						});
-				}
+					});
+				}
+
 				if (num15 > 0)
 				{
 					object obj = text4;
 					text4 = string.Concat(new object[]
-						{
-							obj,
+					{
+						obj,
 							num15,
 							" ",
 							Lang.inter[17],
 							" "
-						});
-				}
+					});
+				}
+
 				if (num16 > 0)
 				{
 					object obj = text4;
 					text4 = string.Concat(new object[]
-						{
-							obj,
+					{
+						obj,
 							num16,
 							" ",
 							Lang.inter[18],
 							" "
-						});
-				}
+					});
+				}
+
 				float num18 = (float)Main.mouseTextColor / 255f;
 				if (num13 > 0)
 				{
@@ -34066,6 +_,7 @@
 				{
 					textColor = new Microsoft.Xna.Framework.Color((int)((byte)(246f * num18)), (int)((byte)(138f * num18)), (int)((byte)(96f * num18)), (int)Main.mouseTextColor);
 				}
+
 				if (text4 == "")
 				{
 					text = Lang.inter[54];
@@ -34076,6 +_,8 @@
 					text = Lang.inter[54] + " (" + text4 + ")";
 				}
 			}
+
+			NPCLoader.SetChatButtons(ref text, ref text2);
 			if (!flag)
 			{
 				int num19 = 180 + (Main.screenWidth - 800) / 2;
@@ -34091,6 +_,7 @@
 					{
 						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 					}
+
 					Main.npcChatFocus2 = true;
 					Main.player[Main.myPlayer].releaseUseItem = false;
 				}
@@ -34100,8 +_,10 @@
 					{
 						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 					}
+
 					Main.npcChatFocus2 = false;
 				}
+
 				Vector2 vector2 = value2 * 0.5f;
 				Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontMouseText, text, (float)num19 + vector2.X, (float)num20 + vector2.Y, textColor, Microsoft.Xna.Framework.Color.Black, vector2, scale);
 				if (text.Length > 0)
@@ -34109,6 +_,7 @@
 					UILinkPointNavigator.SetPosition(2500, value + vector2);
 					UILinkPointNavigator.Shortcuts.NPCCHAT_ButtonsLeft = true;
 				}
+
 				string text5 = Lang.inter[52];
 				textColor = new Microsoft.Xna.Framework.Color(num, (int)((double)num / 1.1), num / 2, num);
 				num19 = num19 + (int)Main.fontMouseText.MeasureString(text).X + 20;
@@ -34124,6 +_,7 @@
 					{
 						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 					}
+
 					Main.npcChatFocus1 = true;
 					Main.player[Main.myPlayer].releaseUseItem = false;
 					Main.player[Main.myPlayer].controlUseItem = false;
@@ -34134,8 +_,10 @@
 					{
 						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 					}
+
 					Main.npcChatFocus1 = false;
 				}
+
 				vector2 = value2 * 0.5f;
 				Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontMouseText, text5, (float)num19 + vector2.X, (float)num20 + vector2.Y, textColor, Microsoft.Xna.Framework.Color.Black, vector2, scale);
 				if (text5.Length > 0)
@@ -34143,6 +_,7 @@
 					UILinkPointNavigator.SetPosition(2501, value + vector2);
 					UILinkPointNavigator.Shortcuts.NPCCHAT_ButtonsMiddle = true;
 				}
+
 				if (text2 != "")
 				{
 					num19 = num21 + (int)Main.fontMouseText.MeasureString(text2).X / 3;
@@ -34158,6 +_,7 @@
 						{
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 						}
+
 						Main.npcChatFocus3 = true;
 						Main.player[Main.myPlayer].releaseUseItem = false;
 					}
@@ -34167,20 +_,24 @@
 						{
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 						}
+
 						Main.npcChatFocus3 = false;
 					}
+
 					vector2 = value2 * 0.5f;
 					Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontMouseText, text2, (float)num19 + vector2.X, (float)num20 + vector2.Y, textColor, Microsoft.Xna.Framework.Color.Black, vector2, scale);
 					UILinkPointNavigator.SetPosition(2502, value + vector2);
 					UILinkPointNavigator.Shortcuts.NPCCHAT_ButtonsRight = true;
 				}
 			}
+
 			if (!PlayerInput.IgnoreMouseInterface)
 			{
 				if (rectangle.Contains(new Microsoft.Xna.Framework.Point(Main.mouseX, Main.mouseY)))
 				{
 					Main.player[Main.myPlayer].mouseInterface = true;
 				}
+
 				if (Main.mouseLeft && Main.mouseLeftRelease && rectangle.Contains(new Microsoft.Xna.Framework.Point(Main.mouseX, Main.mouseY)))
 				{
 					Main.mouseLeftRelease = false;
@@ -34191,6 +_,7 @@
 						Main.CloseNPCChatOrSign();
 						return;
 					}
+
 					if (Main.npcChatFocus2)
 					{
 						if (Main.player[Main.myPlayer].sign != -1)
@@ -34200,6 +_,7 @@
 								Main.SubmitSignText();
 								return;
 							}
+
 							IngameFancyUI.OpenVirtualKeyboard(1);
 							return;
 						}
@@ -34218,12 +_,14 @@
 									{
 										Main.player[Main.myPlayer].inventory[num22] = new Item();
 									}
+
 									flag2 = true;
 									Main.PlaySound(24, -1, -1, 1, 1f, 0f);
 									Main.player[Main.myPlayer].anglerQuestsFinished++;
 									Main.player[Main.myPlayer].GetAnglerReward();
 								}
 							}
+
 							Main.npcChatText = Lang.AnglerQuestChat(flag2);
 							if (flag2)
 							{
@@ -34236,6 +_,7 @@
 								{
 									Main.anglerWhoFinishedToday.Add(Main.player[Main.myPlayer].name);
 								}
+
 								AchievementsHelper.HandleAnglerService();
 								return;
 							}
@@ -34251,6 +_,7 @@
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 								return;
 							}
+
 							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 19)
 							{
 								Main.playerInventory = true;
@@ -34260,6 +_,7 @@
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 								return;
 							}
+
 							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 124)
 							{
 								Main.playerInventory = true;
@@ -34269,6 +_,7 @@
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 								return;
 							}
+
 							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 142)
 							{
 								Main.playerInventory = true;
@@ -34278,6 +_,7 @@
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 								return;
 							}
+
 							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 353)
 							{
 								Main.playerInventory = true;
@@ -34287,6 +_,7 @@
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 								return;
 							}
+
 							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 368)
 							{
 								Main.playerInventory = true;
@@ -34296,6 +_,7 @@
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 								return;
 							}
+
 							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 453)
 							{
 								Main.playerInventory = true;
@@ -34305,6 +_,7 @@
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 								return;
 							}
+
 							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 37)
 							{
 								if (Main.netMode == 0)
@@ -34315,9 +_,11 @@
 								{
 									NetMessage.SendData(51, -1, -1, "", Main.myPlayer, 1f, 0f, 0f, 0, 0, 0);
 								}
+
 								Main.npcChatText = "";
 								return;
 							}
+
 							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 20)
 							{
 								Main.playerInventory = true;
@@ -34327,6 +_,7 @@
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 								return;
 							}
+
 							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 38)
 							{
 								Main.playerInventory = true;
@@ -34336,6 +_,7 @@
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 								return;
 							}
+
 							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 54)
 							{
 								Main.playerInventory = true;
@@ -34345,6 +_,7 @@
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 								return;
 							}
+
 							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 107)
 							{
 								Main.playerInventory = true;
@@ -34354,6 +_,7 @@
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 								return;
 							}
+
 							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 108)
 							{
 								Main.playerInventory = true;
@@ -34363,6 +_,7 @@
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 								return;
 							}
+
 							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 160)
 							{
 								Main.playerInventory = true;
@@ -34372,6 +_,7 @@
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 								return;
 							}
+
 							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 178)
 							{
 								Main.playerInventory = true;
@@ -34381,6 +_,7 @@
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 								return;
 							}
+
 							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 207)
 							{
 								Main.playerInventory = true;
@@ -34390,6 +_,7 @@
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 								return;
 							}
+
 							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 208)
 							{
 								Main.playerInventory = true;
@@ -34399,6 +_,7 @@
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 								return;
 							}
+
 							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 209)
 							{
 								Main.playerInventory = true;
@@ -34408,6 +_,7 @@
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 								return;
 							}
+
 							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 227)
 							{
 								Main.playerInventory = true;
@@ -34417,6 +_,7 @@
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 								return;
 							}
+
 							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 228)
 							{
 								Main.playerInventory = true;
@@ -34426,6 +_,7 @@
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 								return;
 							}
+
 							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 229)
 							{
 								Main.playerInventory = true;
@@ -34435,12 +_,14 @@
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 								return;
 							}
+
 							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 22)
 							{
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 								Main.HelpText();
 								return;
 							}
+
 							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 441)
 							{
 								if (Main.player[Main.myPlayer].taxMoney > 0)
@@ -34485,6 +_,7 @@
 											{
 												num26 = 1;
 											}
+
 											k -= num26;
 											int number4 = Item.NewItem((int)Main.player[Main.myPlayer].position.X, (int)Main.player[Main.myPlayer].position.Y, Main.player[Main.myPlayer].width, Main.player[Main.myPlayer].height, 71, num26, false, 0, false, false);
 											if (Main.netMode == 1)
@@ -34493,10 +_,12 @@
 											}
 										}
 									}
+
 									Main.npcChatText = Lang.dialog(Main.rand.Next(380, 382), false);
 									Main.player[Main.myPlayer].taxMoney = 0;
 									return;
 								}
+
 								Main.npcChatText = Lang.dialog(Main.rand.Next(390, 401), false);
 								return;
 							}
@@ -34526,27 +_,32 @@
 										{
 											Main.npcChatText = Lang.dialog(230, false);
 										}
+
 										Main.player[Main.myPlayer].statLife = Main.player[Main.myPlayer].statLifeMax2;
 										for (int l = 0; l < 22; l++)
 										{
 											int num27 = Main.player[Main.myPlayer].buffType[l];
-											if (Main.debuff[num27] && Main.player[Main.myPlayer].buffTime[l] > 0 && num27 != 28 && num27 != 34 && num27 != 87 && num27 != 89 && num27 != 21 && num27 != 86 && num27 != 199)
+											if (Main.debuff[num27] && Main.player[Main.myPlayer].buffTime[l] > 0 && BuffLoader.CanBeCleared(num27))
 											{
 												Main.player[Main.myPlayer].DelBuff(l);
 												l = -1;
 											}
 										}
+
 										return;
 									}
+
 									int num28 = Main.rand.Next(3);
 									if (num28 == 0)
 									{
 										Main.npcChatText = Lang.dialog(52, false);
 									}
+
 									if (num28 == 1)
 									{
 										Main.npcChatText = Lang.dialog(53, false);
 									}
+
 									if (num28 == 2)
 									{
 										Main.npcChatText = Lang.dialog(54, false);
@@ -34560,16 +_,19 @@
 									{
 										num29 = Main.rand.Next(1, 3);
 									}
+
 									if (num29 == 0)
 									{
 										Main.npcChatText = Lang.dialog(55, false);
 										return;
 									}
+
 									if (num29 == 1)
 									{
 										Main.npcChatText = Lang.dialog(56, false);
 										return;
 									}
+
 									if (num29 == 2)
 									{
 										Main.npcChatText = Lang.dialog(57, false);
@@ -34586,6 +_,8 @@
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 								return;
 							}
+
+							NPCLoader.OnChatButtonClicked(true);
 						}
 					}
 					else if (Main.npcChatFocus3 && Main.player[Main.myPlayer].talkNPC >= 0)
@@ -34596,6 +_,7 @@
 							Main.npcChatText = Lang.evilGood();
 							return;
 						}
+
 						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 22)
 						{
 							Main.playerInventory = true;
@@ -34605,6 +_,7 @@
 							UILinkPointNavigator.GoToDefaultPage(0);
 							return;
 						}
+
 						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 107)
 						{
 							Main.playerInventory = true;
@@ -34614,11 +_,13 @@
 							UILinkPointNavigator.GoToDefaultPage(0);
 							return;
 						}
+
 						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 353)
 						{
 							Main.OpenHairWindow();
 							return;
 						}
+
 						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 207)
 						{
 							Main.npcChatCornerItem = 0;
@@ -34632,19 +_,24 @@
 								{
 									Main.player[Main.myPlayer].inventory[num30] = new Item();
 								}
+
 								gotDye = true;
 								Main.PlaySound(24, -1, -1, 1, 1f, 0f);
 								Main.player[Main.myPlayer].GetDyeTraderReward();
 							}
+
 							Main.npcChatText = Lang.DyeTraderQuestChat(gotDye);
 							return;
 						}
+
 						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 550)
 						{
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 							Main.HelpText();
 							Main.npcChatText = Lang.BartenderHelpText(Main.npc[Main.player[Main.myPlayer].talkNPC]);
 						}
+
+						NPCLoader.OnChatButtonClicked(false);
 					}
 				}
 			}
@@ -34688,6 +_,7 @@
 					list2.Add(i);
 					cInv[i] = new Item();
 				}
+
 				if (cInv[i] != null && cInv[i].stack > 0)
 				{
 					int num = 0;
@@ -34695,18 +_,22 @@
 					{
 						num = 1;
 					}
+
 					if (cInv[i].type == 72)
 					{
 						num = 2;
 					}
+
 					if (cInv[i].type == 73)
 					{
 						num = 3;
 					}
+
 					if (cInv[i].type == 74)
 					{
 						num = 4;
 					}
+
 					array2[i] = num - 1;
 					if (num > 0)
 					{
@@ -34717,10 +_,12 @@
 					}
 				}
 			}
+
 			if (!flag)
 			{
 				return;
 			}
+
 			Main.PlaySound(7, -1, -1, 1, 1f, 0f);
 			for (int j = 0; j < pInv.Length; j++)
 			{
@@ -34731,18 +_,22 @@
 					{
 						num2 = 1;
 					}
+
 					if (pInv[j].type == 72)
 					{
 						num2 = 2;
 					}
+
 					if (pInv[j].type == 73)
 					{
 						num2 = 3;
 					}
+
 					if (pInv[j].type == 74)
 					{
 						num2 = 4;
 					}
+
 					if (num2 > 0)
 					{
 						array[num2 - 1] += pInv[j].stack;
@@ -34751,6 +_,7 @@
 					}
 				}
 			}
+
 			for (int k = 0; k < 3; k++)
 			{
 				while (array[k] >= 100)
@@ -34759,6 +_,7 @@
 					array[k + 1]++;
 				}
 			}
+
 			for (int l = 0; l < 40; l++)
 			{
 				if (array2[l] >= 0 && cInv[l].type == 0)
@@ -34773,16 +_,20 @@
 						{
 							cInv[num3].stack = cInv[num3].maxStack;
 						}
+
 						array[num4] -= cInv[num3].stack;
 						array2[l] = -1;
 					}
+
 					if (Main.netMode == 1 && Main.player[Main.myPlayer].chest > -1)
 					{
 						NetMessage.SendData(32, -1, -1, "", Main.player[Main.myPlayer].chest, (float)num3, 0f, 0f, 0, 0, 0);
 					}
+
 					list2.Remove(num3);
 				}
 			}
+
 			for (int m = 0; m < 40; m++)
 			{
 				if (array2[m] >= 0 && cInv[m].type == 0)
@@ -34798,18 +_,22 @@
 							{
 								cInv[num5].stack = cInv[num5].maxStack;
 							}
+
 							array[n] -= cInv[num5].stack;
 							array2[m] = -1;
 							break;
 						}
 					}
+
 					if (Main.netMode == 1 && Main.player[Main.myPlayer].chest > -1)
 					{
 						NetMessage.SendData(32, -1, -1, "", Main.player[Main.myPlayer].chest, (float)num5, 0f, 0f, 0, 0, 0);
 					}
+
 					list2.Remove(num5);
 				}
 			}
+
 			while (list2.Count > 0)
 			{
 				int num6 = list2[0];
@@ -34823,16 +_,20 @@
 						{
 							cInv[num6].stack = cInv[num6].maxStack;
 						}
+
 						array[num7] -= cInv[num6].stack;
 						break;
 					}
 				}
+
 				if (Main.netMode == 1 && Main.player[Main.myPlayer].chest > -1)
 				{
 					NetMessage.SendData(32, -1, -1, "", Main.player[Main.myPlayer].chest, (float)list2[0], 0f, 0f, 0, 0, 0);
 				}
+
 				list2.RemoveAt(0);
 			}
+
 			while (list.Count > 0)
 			{
 				int num8 = list[0];
@@ -34846,9 +_,11 @@
 						{
 							pInv[num8].stack = pInv[num8].maxStack;
 						}
+
 						array[num9] -= pInv[num8].stack;
 					}
 				}
+
 				list.RemoveAt(0);
 			}
 		}
@@ -34872,12 +_,14 @@
 							{
 								break;
 							}
+
 							if (Main.tile[num2, num3] == null)
 							{
 								flag = true;
 								break;
 							}
 						}
+
 						if (!flag)
 						{
 							int num4 = 8;
@@ -34886,6 +_,7 @@
 							{
 								num5 -= 8;
 							}
+
 							num3++;
 							int num6 = 0;
 							float num7 = (float)(num3 * 16);
@@ -34898,6 +_,7 @@
 								effects = SpriteEffects.FlipVertically;
 								num6 = 4;
 							}
+
 							Main.spriteBatch.Draw(Main.bannerTexture[num], new Vector2((float)(num2 * 16 - (int)Main.screenPosition.X + num4), num7 - (float)((int)Main.screenPosition.Y) + (float)num5 + (float)num6), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.bannerTexture[num].Width, Main.bannerTexture[num].Height)), Lighting.GetColor(num2, num3), 0f, new Vector2((float)(Main.bannerTexture[num].Width / 2), (float)(Main.bannerTexture[num].Height / 2)), 1f, effects, 0f);
 							int num8 = NPC.TypeToHeadIndex(Main.npc[i].type);
 							float scale = 1f;
@@ -34910,10 +_,12 @@
 							{
 								num9 = (float)Main.npcHeadTexture[num8].Height;
 							}
+
 							if (num9 > 24f)
 							{
 								scale = 24f / num9;
 							}
+
 							Main.spriteBatch.Draw(Main.npcHeadTexture[num8], new Vector2((float)(num2 * 16 - (int)Main.screenPosition.X + num4), num7 - (float)((int)Main.screenPosition.Y) + (float)num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.npcHeadTexture[num8].Width, Main.npcHeadTexture[num8].Height)), Lighting.GetColor(num2, num3), 0f, new Vector2((float)(Main.npcHeadTexture[num8].Width / 2), (float)(Main.npcHeadTexture[num8].Height / 2)), scale, effects, 0f);
 							num2 = num2 * 16 - (int)Main.screenPosition.X + num4 - Main.bannerTexture[num].Width / 2;
 							num3 = num3 * 16 - (int)Main.screenPosition.Y + num5 - Main.bannerTexture[num].Height / 2;
@@ -34948,14 +_,17 @@
 					{
 						this.textBlinkerState = 0;
 					}
+
 					this.textBlinkerCount = 0;
 				}
+
 				PlayerInput.WritingText = true;
 				string text = Main.chatText;
 				if (this.textBlinkerState == 1)
 				{
 					text += "|";
 				}
+
 				if (Main.screenWidth > 800)
 				{
 					int i = Main.screenWidth - 300;
@@ -34982,6 +_,7 @@
 				{
 					Main.spriteBatch.Draw(Main.textBackTexture, new Vector2(78f, (float)(Main.screenHeight - 36)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.textBackTexture.Width, Main.textBackTexture.Height)), new Microsoft.Xna.Framework.Color(100, 100, 100, 100), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 				}
+
 				int num2 = -1;
 				TextSnippet[] array = ChatManager.ParseMessage(text, Microsoft.Xna.Framework.Color.White);
 				ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, Main.fontMouseText, array, new Vector2(88f, (float)(Main.screenHeight - 30)), 0f, Vector2.Zero, Vector2.One, out num2, -1f, 2f);
@@ -34994,6 +_,7 @@
 					}
 				}
 			}
+
 			int num3 = Main.startChatLine;
 			int num4 = Main.startChatLine + Main.showCount;
 			if (num4 >= Main.numChatLines)
@@ -35001,6 +_,7 @@
 				num4 = --Main.numChatLines;
 				num3 = num4 - Main.showCount;
 			}
+
 			int num5 = 0;
 			int num6 = -1;
 			int num7 = -1;
@@ -35016,8 +_,10 @@
 						num7 = num8;
 					}
 				}
+
 				num5++;
 			}
+
 			if (num6 > -1)
 			{
 				Main.chatLine[num6].parsedText[num7].OnHover();
@@ -35026,6 +_,7 @@
 					Main.chatLine[num6].parsedText[num7].OnClick();
 				}
 			}
+
 			TimeLogger.DetailedDrawTime(10);
 		}
 
@@ -35035,6 +_,7 @@
 			{
 				Main.DrawPVPIcons();
 			}
+
 			Main.inventoryScale = 0.85f;
 			int num = 448;
 			int num2 = 258;
@@ -35044,6 +_,7 @@
 				Main.inventoryScale = 0.755f;
 				num += 5;
 			}
+
 			new Microsoft.Xna.Framework.Color(150, 150, 150, 150);
 			if (Main.mouseX >= num && (float)Main.mouseX <= (float)num + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num2 && (float)Main.mouseY <= (float)num2 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
 			{
@@ -35053,8 +_,10 @@
 					ItemSlot.LeftClick(ref Main.player[Main.myPlayer].trashItem, 6);
 					Recipe.FindRecipes();
 				}
+
 				ItemSlot.MouseHover(ref Main.player[Main.myPlayer].trashItem, 6);
 			}
+
 			ItemSlot.Draw(Main.spriteBatch, ref Main.player[Main.myPlayer].trashItem, 6, new Vector2((float)num, (float)num2), default(Microsoft.Xna.Framework.Color));
 			Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[4], new Vector2(40f, 0f), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 			Main.inventoryScale = 0.85f;
@@ -35062,6 +_,7 @@
 			{
 				Main.player[Main.myPlayer].mouseInterface = true;
 			}
+
 			for (int i = 0; i < 10; i++)
 			{
 				for (int j = 0; j < 5; j++)
@@ -35078,6 +_,7 @@
 						{
 							Main.player[Main.myPlayer].inventoryChestStack[num5] = false;
 						}
+
 						if (!Main.player[Main.myPlayer].inventoryChestStack[num5])
 						{
 							if (Main.mouseLeftRelease && Main.mouseLeft)
@@ -35090,11 +_,14 @@
 								ItemSlot.RightClick(Main.player[Main.myPlayer].inventory, 0, num5);
 							}
 						}
+
 						ItemSlot.MouseHover(Main.player[Main.myPlayer].inventory, 0, num5);
 					}
+
 					ItemSlot.Draw(Main.spriteBatch, Main.player[Main.myPlayer].inventory, 0, num5, new Vector2((float)num3, (float)num4), default(Microsoft.Xna.Framework.Color));
 				}
 			}
+
 			if (!PlayerInput.UsingGamepad)
 			{
 				int num6 = 0;
@@ -35106,10 +_,12 @@
 				{
 					num8 = 2;
 				}
+
 				if (!Main.player[Main.myPlayer].hbLocked)
 				{
 					num6 = 1;
 				}
+
 				Main.spriteBatch.Draw(Main.HBLockTexture[num6], new Vector2((float)num7, (float)num8), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.HBLockTexture[num6].Width, Main.HBLockTexture[num6].Height)), Main.inventoryBack, 0f, default(Vector2), 0.9f, SpriteEffects.None, 0f);
 				if (Main.mouseX > num7 && (float)Main.mouseX < (float)num7 + (float)Main.HBLockTexture[num6].Width * 0.9f && Main.mouseY > num8 && (float)Main.mouseY < (float)num8 + (float)Main.HBLockTexture[num6].Height * 0.9f)
 				{
@@ -35124,6 +_,7 @@
 						this.MouseText(Lang.inter[6], 0, 0);
 						Main.mouseText = true;
 					}
+
 					if (Main.mouseLeft && Main.mouseLeftRelease)
 					{
 						Main.PlaySound(22, -1, -1, 1, 1f, 0f);
@@ -35138,6 +_,7 @@
 					}
 				}
 			}
+
 			ItemSlot.DrawRadialDpad(Main.spriteBatch, new Vector2(20f) + new Vector2(56f * Main.inventoryScale * 10f, 56f * Main.inventoryScale * 5f) + new Vector2(26f, 70f));
 			if (Main.mapEnabled)
 			{
@@ -35148,11 +_,13 @@
 				{
 					flag = true;
 				}
+
 				if (flag)
 				{
 					num10 = Main.screenWidth - 40;
 					num11 = Main.screenHeight - 200;
 				}
+
 				for (int k = 0; k < 4; k++)
 				{
 					int num12 = num10 + k * 32;
@@ -35162,12 +_,14 @@
 						num12 = num10;
 						num13 = num11 + k * 32;
 					}
+
 					int num14 = k;
 					int num15 = 120;
 					if (k > 0 && Main.mapStyle == k - 1)
 					{
 						num15 = 200;
 					}
+
 					if (Main.mouseX >= num12 && Main.mouseX <= num12 + 32 && Main.mouseY >= num13 && Main.mouseY <= num13 + 30 && !PlayerInput.IgnoreMouseInterface)
 					{
 						num15 = 255;
@@ -35186,16 +_,19 @@
 								Main.mapFullscreen = true;
 								Main.resetMapFull = true;
 							}
+
 							if (k == 1)
 							{
 								Main.mapStyle = 0;
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 							}
+
 							if (k == 2)
 							{
 								Main.mapStyle = 1;
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 							}
+
 							if (k == 3)
 							{
 								Main.mapStyle = 2;
@@ -35203,9 +_,11 @@
 							}
 						}
 					}
+
 					Main.spriteBatch.Draw(Main.mapIconTexture[num14], new Vector2((float)num12, (float)num13), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.mapIconTexture[num14].Width, Main.mapIconTexture[num14].Height)), new Microsoft.Xna.Framework.Color(num15, num15, num15, num15), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 				}
 			}
+
 			if (Main.armorHide)
 			{
 				Main.armorAlpha -= 0.1f;
@@ -35222,6 +_,7 @@
 					Main.armorAlpha = 1f;
 				}
 			}
+
 			new Microsoft.Xna.Framework.Color((int)((byte)((float)Main.mouseTextColor * Main.armorAlpha)), (int)((byte)((float)Main.mouseTextColor * Main.armorAlpha)), (int)((byte)((float)Main.mouseTextColor * Main.armorAlpha)), (int)((byte)((float)Main.mouseTextColor * Main.armorAlpha)));
 			Main.armorHide = false;
 			int num17 = Main.DrawPageIcons();
@@ -35232,15 +_,16 @@
 				{
 					case 1:
 						Main.hoverItemName = Lang.inter[80];
-						break;
+					break;
 					case 2:
 						Main.hoverItemName = Lang.inter[79];
-						break;
+					break;
 					case 3:
 						Main.hoverItemName = (Main.CaptureModeDisabled ? Lang.inter[115] : Lang.inter[81]);
-						break;
-				}
-			}
+					break;
+				}
+			}
+
 			if (Main.EquipPage == 2)
 			{
 				Microsoft.Xna.Framework.Point value = new Microsoft.Xna.Framework.Point(Main.mouseX, Main.mouseY);
@@ -35258,6 +_,7 @@
 					{
 						inv = Main.player[Main.myPlayer].miscDyes;
 					}
+
 					r.X = num18 + l * -47;
 					for (int m = 0; m < 5; m++)
 					{
@@ -35267,33 +_,36 @@
 						{
 							case 0:
 								context = 19;
-								num20 = 0;
-								break;
+							num20 = 0;
+							break;
 							case 1:
 								context = 20;
-								num20 = 1;
-								break;
+							num20 = 1;
+							break;
 							case 2:
 								context = 18;
-								break;
+							break;
 							case 3:
 								context = 17;
-								break;
+							break;
 							case 4:
 								context = 16;
-								break;
-						}
+							break;
+						}
+
 						if (l == 1)
 						{
 							context = 12;
 							num20 = -1;
 						}
+
 						r.Y = num19 + m * 47;
 						Texture2D texture2D = Main.inventoryTickOnTexture;
 						if (Main.player[Main.myPlayer].hideMisc[num20])
 						{
 							texture2D = Main.inventoryTickOffTexture;
 						}
+
 						Microsoft.Xna.Framework.Rectangle r2 = new Microsoft.Xna.Framework.Rectangle(r.Left + 34, r.Top - 2, texture2D.Width, texture2D.Height);
 						int num21 = 0;
 						bool flag2 = false;
@@ -35307,10 +_,12 @@
 								{
 									Main.player[Main.myPlayer].TogglePet();
 								}
+
 								if (num20 == 1)
 								{
 									Main.player[Main.myPlayer].ToggleLight();
 								}
+
 								Main.mouseLeftRelease = false;
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 								if (Main.netMode == 1)
@@ -35318,6 +_,7 @@
 									NetMessage.SendData(4, -1, -1, Main.player[Main.myPlayer].name, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
 								}
 							}
+
 							if (Main.player[Main.myPlayer].hideMisc[num20])
 							{
 								num21 = 2;
@@ -35327,12 +_,14 @@
 								num21 = 1;
 							}
 						}
+
 						if (r.Contains(value) && !flag2 && !PlayerInput.IgnoreMouseInterface)
 						{
 							Main.player[Main.myPlayer].mouseInterface = true;
 							Main.armorHide = true;
 							ItemSlot.Handle(inv, context, m);
 						}
+
 						ItemSlot.Draw(Main.spriteBatch, inv, context, m, r.TopLeft(), default(Microsoft.Xna.Framework.Color));
 						if (num20 != -1)
 						{
@@ -35345,6 +_,7 @@
 						}
 					}
 				}
+
 				num19 += 247;
 				num18 += 8;
 				int num22 = -1;
@@ -35355,14 +_,17 @@
 				{
 					num24++;
 				}
+
 				if (Main.screenHeight > 680 + num25 * (Main.mapStyle == 1).ToInt())
 				{
 					num24++;
 				}
+
 				if (Main.screenHeight > 730 + num25 * (Main.mapStyle == 1).ToInt())
 				{
 					num24++;
 				}
+
 				int num26 = 46;
 				for (int n = 0; n < 22; n++)
 				{
@@ -35381,6 +_,7 @@
 						}
 					}
 				}
+
 				UILinkPointNavigator.Shortcuts.BUFFS_DRAWN = num23;
 				UILinkPointNavigator.Shortcuts.BUFFS_PER_COLUMN = num24;
 				if (num22 >= 0)
@@ -35393,23 +_,26 @@
 						{
 							Main.buffString += Lang.misc[39];
 						}
+
 						if (num30 == 147)
 						{
 							Main.bannerMouseOver = true;
 						}
+
 						if (num30 == 94)
 						{
 							int num31 = (int)(Main.player[Main.myPlayer].manaSickReduction * 100f) + 1;
 							Main.buffString = Main.buffString + num31 + "%";
 						}
+
+						int rare = 0;
 						if (Main.meleeBuff[num30])
 						{
-							this.MouseText(Main.buffName[num30], -10, 0);
-						}
-						else
-						{
-							this.MouseText(Main.buffName[num30], 0, 0);
-						}
+							rare = -10;
+						}
+
+						BuffLoader.ModifyBuffTip(num30, ref Main.buffString, ref rare);
+						this.MouseText(Main.buffName[num30], rare, 0);
 					}
 				}
 			}
@@ -35420,6 +_,7 @@
 				{
 					Main.player[Main.myPlayer].mouseInterface = true;
 				}
+
 				int num32 = 0;
 				string text = "";
 				int num33 = 0;
@@ -35448,6 +_,7 @@
 							}
 						}
 					}
+
 					if (flag3)
 					{
 						int num38 = Main.screenWidth - 64 - 28 + num34;
@@ -35464,6 +_,7 @@
 								UILinkPointNavigator.Shortcuts.NPCS_IconsPerColumn = num32;
 							}
 						}
+
 						if (Main.mouseX >= num38 && (float)Main.mouseX <= (float)num38 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num39 && (float)Main.mouseY <= (float)num39 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
 						{
 							UILinkPointNavigator.Shortcuts.NPCS_LastHovered = num36;
@@ -35480,6 +_,7 @@
 							{
 								text = Language.GetTextValue("Game.NPCTitle", Main.npc[num36].displayName, Main.npcName[Main.npc[num36].type]);
 							}
+
 							if (!PlayerInput.IgnoreMouseInterface)
 							{
 								Main.player[Main.myPlayer].mouseInterface = true;
@@ -35491,6 +_,7 @@
 								}
 							}
 						}
+
 						UILinkPointNavigator.SetPosition(600 + num32, new Vector2((float)num38, (float)num39) + Main.inventoryBackTexture.Size() * 0.75f);
 						Texture2D texture = Main.inventoryBack11Texture;
 						Microsoft.Xna.Framework.Color white2 = Main.inventoryBack;
@@ -35499,6 +_,7 @@
 							texture = Main.inventoryBack14Texture;
 							white2 = Microsoft.Xna.Framework.Color.White;
 						}
+
 						Main.spriteBatch.Draw(texture, new Vector2((float)num38, (float)num39), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), white2, 0f, default(Vector2), Main.inventoryScale, SpriteEffects.None, 0f);
 						white = Microsoft.Xna.Framework.Color.White;
 						int num40 = num35;
@@ -35512,15 +_,19 @@
 						{
 							num41 = (float)Main.npcHeadTexture[num40].Height;
 						}
+
 						if (num41 > 36f)
 						{
 							scale = 36f / num41;
 						}
+
 						Main.spriteBatch.Draw(Main.npcHeadTexture[num40], new Vector2((float)num38 + 26f * Main.inventoryScale, (float)num39 + 26f * Main.inventoryScale), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.npcHeadTexture[num40].Width, Main.npcHeadTexture[num40].Height)), white, 0f, new Vector2((float)(Main.npcHeadTexture[num40].Width / 2), (float)(Main.npcHeadTexture[num40].Height / 2)), scale, SpriteEffects.None, 0f);
 						num32++;
 					}
+
 					UILinkPointNavigator.Shortcuts.NPCS_IconsTotal = num32;
 				}
+
 				if (text != "" && Main.mouseItem.type == 0)
 				{
 					this.MouseText(text, 0, 0);
@@ -35533,6 +_,7 @@
 				{
 					Main.player[Main.myPlayer].mouseInterface = true;
 				}
+
 				float num43 = Main.inventoryScale;
 				int num44 = 8 + Main.player[Main.myPlayer].extraAccessorySlots;
 				bool flag4 = false;
@@ -35543,6 +_,7 @@
 					flag4 = true;
 					num45 = 7;
 				}
+
 				Microsoft.Xna.Framework.Color color = Main.inventoryBack;
 				Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color(80, 80, 80, 80);
 				for (int num46 = 0; num46 < num44; num46++)
@@ -35552,6 +_,7 @@
 					{
 						flag5 = true;
 					}
+
 					int num47 = Main.screenWidth - 64 - 28;
 					int num48 = (int)((float)(174 + Main.mH) + (float)(num46 * 56) * Main.inventoryScale);
 					new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
@@ -35559,6 +_,7 @@
 					{
 						num48 += num42;
 					}
+
 					if (num46 == num45)
 					{
 						Vector2 vector = new Vector2((float)(num47 - 10 - 47 - 47 - 14), (float)num48 + (float)Main.inventoryBackTexture.Height * 0.5f);
@@ -35574,24 +_,29 @@
 								Main.hoverItemName = value3;
 							}
 						}
+
 						UILinkPointNavigator.SetPosition(1557, vector + Main.extraTexture[58].Size() * Main.inventoryScale / 4f);
 					}
+
 					int context2 = 8;
 					if (num46 > 2)
 					{
 						context2 = 10;
 					}
+
 					Texture2D texture2D2 = Main.inventoryTickOnTexture;
 					if (Main.player[Main.myPlayer].hideVisual[num46])
 					{
 						texture2D2 = Main.inventoryTickOffTexture;
 					}
+
 					int num49 = Main.screenWidth - 58;
 					int num50 = (int)((float)(172 + Main.mH) + (float)(num46 * 56) * Main.inventoryScale);
 					if (num46 > 2)
 					{
 						num50 += num42;
 					}
+
 					Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(num49, num50, texture2D2.Width, texture2D2.Height);
 					int num51 = 0;
 					if (num46 >= 3 && num46 < num44 && rectangle.Contains(new Microsoft.Xna.Framework.Point(Main.mouseX, Main.mouseY)) && !PlayerInput.IgnoreMouseInterface)
@@ -35606,6 +_,7 @@
 								NetMessage.SendData(4, -1, -1, Main.player[Main.myPlayer].name, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
 							}
 						}
+
 						if (Main.player[Main.myPlayer].hideVisual[num46])
 						{
 							num51 = 2;
@@ -35624,12 +_,15 @@
 						{
 							ItemSlot.LeftClick(Main.player[Main.myPlayer].armor, context2, num46);
 						}
+
 						ItemSlot.MouseHover(Main.player[Main.myPlayer].armor, context2, num46);
 					}
+
 					if (flag4 && num46 == num44 - 1)
 					{
 						Main.inventoryBack = color2;
 					}
+
 					ItemSlot.Draw(Main.spriteBatch, Main.player[Main.myPlayer].armor, context2, num46, new Vector2((float)num47, (float)num48), default(Microsoft.Xna.Framework.Color));
 					if (num46 > 2 && num46 < num44)
 					{
@@ -35641,11 +_,13 @@
 						}
 					}
 				}
+
 				Main.inventoryBack = color;
 				if (Main.mouseX > Main.screenWidth - 64 - 28 - 47 && Main.mouseX < (int)((float)(Main.screenWidth - 64 - 20 - 47) + 56f * Main.inventoryScale) && Main.mouseY > 174 + Main.mH && Main.mouseY < (int)((float)(174 + Main.mH) + 168f * Main.inventoryScale) && !PlayerInput.IgnoreMouseInterface)
 				{
 					Main.player[Main.myPlayer].mouseInterface = true;
 				}
+
 				for (int num52 = 10; num52 < 10 + num44; num52++)
 				{
 					bool flag6 = false;
@@ -35653,6 +_,7 @@
 					{
 						flag6 = true;
 					}
+
 					int num53 = Main.screenWidth - 64 - 28 - 47;
 					int num54 = (int)((float)(174 + Main.mH) + (float)((num52 - 10) * 56) * Main.inventoryScale);
 					new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
@@ -35660,11 +_,13 @@
 					{
 						num54 += num42;
 					}
+
 					int context3 = 9;
 					if (num52 > 12)
 					{
 						context3 = 11;
 					}
+
 					if (Main.mouseX >= num53 && (float)Main.mouseX <= (float)num53 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num54 && (float)Main.mouseY <= (float)num54 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
 					{
 						Main.player[Main.myPlayer].mouseInterface = true;
@@ -35681,19 +_,24 @@
 								ItemSlot.RightClick(Main.player[Main.myPlayer].armor, context3, num52);
 							}
 						}
+
 						ItemSlot.MouseHover(Main.player[Main.myPlayer].armor, context3, num52);
 					}
+
 					if (flag4 && num52 == num44 + 10 - 1)
 					{
 						Main.inventoryBack = color2;
 					}
+
 					ItemSlot.Draw(Main.spriteBatch, Main.player[Main.myPlayer].armor, context3, num52, new Vector2((float)num53, (float)num54), default(Microsoft.Xna.Framework.Color));
 				}
+
 				Main.inventoryBack = color;
 				if (Main.mouseX > Main.screenWidth - 64 - 28 - 47 && Main.mouseX < (int)((float)(Main.screenWidth - 64 - 20 - 47) + 56f * Main.inventoryScale) && Main.mouseY > 174 + Main.mH && Main.mouseY < (int)((float)(174 + Main.mH) + 168f * Main.inventoryScale) && !PlayerInput.IgnoreMouseInterface)
 				{
 					Main.player[Main.myPlayer].mouseInterface = true;
 				}
+
 				for (int num55 = 0; num55 < num44; num55++)
 				{
 					bool flag7 = false;
@@ -35701,6 +_,7 @@
 					{
 						flag7 = true;
 					}
+
 					int num56 = Main.screenWidth - 64 - 28 - 47 - 47;
 					int num57 = (int)((float)(174 + Main.mH) + (float)(num55 * 56) * Main.inventoryScale);
 					new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
@@ -35708,6 +_,7 @@
 					{
 						num57 += num42;
 					}
+
 					if (Main.mouseX >= num56 && (float)Main.mouseX <= (float)num56 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num57 && (float)Main.mouseY <= (float)num57 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
 					{
 						Main.player[Main.myPlayer].mouseInterface = true;
@@ -35724,17 +_,22 @@
 								ItemSlot.LeftClick(Main.player[Main.myPlayer].dye, 12, num55);
 							}
 						}
+
 						ItemSlot.MouseHover(Main.player[Main.myPlayer].dye, 12, num55);
 					}
+
 					if (flag4 && num55 == num44 - 1)
 					{
 						Main.inventoryBack = color2;
 					}
+
 					ItemSlot.Draw(Main.spriteBatch, Main.player[Main.myPlayer].dye, 12, num55, new Vector2((float)num56, (float)num57), default(Microsoft.Xna.Framework.Color));
 				}
+
 				Main.inventoryBack = color;
 				Main.inventoryScale = num43;
 			}
+
 			int num58 = (Main.screenHeight - 600) / 2;
 			int num59 = (int)((float)Main.screenHeight / 600f * 250f);
 			if (Main.screenHeight < 700)
@@ -35746,6 +_,7 @@
 			{
 				num59 = (int)((float)Main.screenHeight / 600f * 225f);
 			}
+
 			if (Main.craftingHide)
 			{
 				Main.craftingAlpha -= 0.1f;
@@ -35762,6 +_,7 @@
 					Main.craftingAlpha = 1f;
 				}
 			}
+
 			Microsoft.Xna.Framework.Color color3 = new Microsoft.Xna.Framework.Color((int)((byte)((float)Main.mouseTextColor * Main.craftingAlpha)), (int)((byte)((float)Main.mouseTextColor * Main.craftingAlpha)), (int)((byte)((float)Main.mouseTextColor * Main.craftingAlpha)), (int)((byte)((float)Main.mouseTextColor * Main.craftingAlpha)));
 			Main.craftingHide = false;
 			if (Main.InReforgeMenu)
@@ -35777,6 +_,7 @@
 				{
 					Main.reforgeScale -= 0.02f;
 				}
+
 				if (Main.player[Main.myPlayer].chest != -1 || Main.npcShop != 0 || Main.player[Main.myPlayer].talkNPC == -1 || Main.InGuideCraftMenu)
 				{
 					Main.InReforgeMenu = false;
@@ -35795,6 +_,7 @@
 						{
 							num62 = (int)((double)num62 * 0.8);
 						}
+
 						num62 /= 3;
 						string text3 = "";
 						int num63 = 0;
@@ -35806,31 +_,36 @@
 						{
 							num67 = 1;
 						}
+
 						if (num67 >= 1000000)
 						{
 							num63 = num67 / 1000000;
 							num67 -= num63 * 1000000;
 						}
+
 						if (num67 >= 10000)
 						{
 							num64 = num67 / 10000;
 							num67 -= num64 * 10000;
 						}
+
 						if (num67 >= 100)
 						{
 							num65 = num67 / 100;
 							num67 -= num65 * 100;
 						}
+
 						if (num67 >= 1)
 						{
 							num66 = num67;
 						}
+
 						if (num63 > 0)
 						{
 							object obj = text3;
 							text3 = string.Concat(new object[]
-								{
-									obj,
+							{
+								obj,
 									"[c/",
 									Colors.AlphaDarken(Colors.CoinPlatinum).Hex3(),
 									":",
@@ -35838,14 +_,15 @@
 									" ",
 									Lang.inter[15],
 									"] "
-								});
-						}
+							});
+						}
+
 						if (num64 > 0)
 						{
 							object obj = text3;
 							text3 = string.Concat(new object[]
-								{
-									obj,
+							{
+								obj,
 									"[c/",
 									Colors.AlphaDarken(Colors.CoinGold).Hex3(),
 									":",
@@ -35853,14 +_,15 @@
 									" ",
 									Lang.inter[16],
 									"] "
-								});
-						}
+							});
+						}
+
 						if (num65 > 0)
 						{
 							object obj = text3;
 							text3 = string.Concat(new object[]
-								{
-									obj,
+							{
+								obj,
 									"[c/",
 									Colors.AlphaDarken(Colors.CoinSilver).Hex3(),
 									":",
@@ -35868,14 +_,15 @@
 									" ",
 									Lang.inter[17],
 									"] "
-								});
-						}
+							});
+						}
+
 						if (num66 > 0)
 						{
 							object obj = text3;
 							text3 = string.Concat(new object[]
-								{
-									obj,
+							{
+								obj,
 									"[c/",
 									Colors.AlphaDarken(Colors.CoinCopper).Hex3(),
 									":",
@@ -35883,8 +_,9 @@
 									" ",
 									Lang.inter[18],
 									"] "
-								});
-						}
+							});
+						}
+
 						ItemSlot.DrawSavings(Main.spriteBatch, (float)(num60 + 130), (float)this.invBottom, true);
 						ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, Main.fontMouseText, text3, new Vector2((float)(num60 + 50) + Main.fontMouseText.MeasureString(text2).X, (float)num61), Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, Vector2.One, -1f, 2f);
 						int num68 = num60 + 70;
@@ -35895,6 +_,7 @@
 						{
 							texture2D3 = Main.reforgeTexture[1];
 						}
+
 						Main.spriteBatch.Draw(texture2D3, new Vector2((float)num68, (float)num69), null, Microsoft.Xna.Framework.Color.White, 0f, texture2D3.Size() / 2f, Main.reforgeScale, SpriteEffects.None, 0f);
 						UILinkPointNavigator.SetPosition(304, new Vector2((float)num68, (float)num69) + texture2D3.Size() / 4f);
 						if (flag8)
@@ -35904,16 +_,19 @@
 							{
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 							}
+
 							Main.mouseReforge = true;
 							Main.player[Main.myPlayer].mouseInterface = true;
 							if (Main.mouseLeftRelease && Main.mouseLeft && Main.player[Main.myPlayer].BuyItem(num62, -1))
 							{
 								bool favorited = Main.reforgeItem.favorited;
+								ItemLoader.PreReforge(Main.reforgeItem);
 								Main.reforgeItem.netDefaults(Main.reforgeItem.netID);
 								Main.reforgeItem.Prefix(-2);
 								Main.reforgeItem.position.X = Main.player[Main.myPlayer].position.X + (float)(Main.player[Main.myPlayer].width / 2) - (float)(Main.reforgeItem.width / 2);
 								Main.reforgeItem.position.Y = Main.player[Main.myPlayer].position.Y + (float)(Main.player[Main.myPlayer].height / 2) - (float)(Main.reforgeItem.height / 2);
 								Main.reforgeItem.favorited = favorited;
+								ItemLoader.PostReforge(Main.reforgeItem);
 								ItemText.NewText(Main.reforgeItem, Main.reforgeItem.stack, true, false);
 								Main.PlaySound(SoundID.Item37, -1, -1);
 							}
@@ -35927,6 +_,7 @@
 					{
 						text2 = Lang.inter[20];
 					}
+
 					ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, Main.fontMouseText, text2, new Vector2((float)(num60 + 50), (float)num61), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, Vector2.Zero, Vector2.One, -1f, 2f);
 					if (Main.mouseX >= num60 && (float)Main.mouseX <= (float)num60 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num61 && (float)Main.mouseY <= (float)num61 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
 					{
@@ -35941,8 +_,10 @@
 						{
 							ItemSlot.RightClick(ref Main.reforgeItem, 5);
 						}
+
 						ItemSlot.MouseHover(ref Main.reforgeItem, 5);
 					}
+
 					ItemSlot.Draw(Main.spriteBatch, ref Main.reforgeItem, 5, new Vector2((float)num60, (float)num61), default(Microsoft.Xna.Framework.Color));
 				}
 			}
@@ -35977,30 +_,35 @@
 									Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[23], new Vector2((float)num70, (float)(num71 + 118 + num75)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 									break;
 								}
+
 								break;
 							}
 							else
 							{
 								num73++;
-								Main.spriteBatch.DrawString(Main.fontMouseText, Lang.mapLegend[MapHelper.TileToLookup(Main.recipe[Main.availableRecipe[num72]].requiredTile[num74], 0)], new Vector2((float)num70, (float)(num71 + 118 + num75)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+								Main.spriteBatch.DrawString(Main.fontMouseText, Lang.mapLegend.FromType(Main.recipe[Main.availableRecipe[num72]].requiredTile[num74]), new Vector2((float)num70, (float)(num71 + 118 + num75)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 								num74++;
 							}
 						}
+
 						if (Main.recipe[Main.availableRecipe[num72]].needWater)
 						{
 							int num76 = (num73 + 1) * 26;
 							Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[53], new Vector2((float)num70, (float)(num71 + 118 + num76)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 						}
+
 						if (Main.recipe[Main.availableRecipe[num72]].needHoney)
 						{
 							int num77 = (num73 + 1) * 26;
 							Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[58], new Vector2((float)num70, (float)(num71 + 118 + num77)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 						}
+
 						if (Main.recipe[Main.availableRecipe[num72]].needLava)
 						{
 							int num78 = (num73 + 1) * 26;
 							Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[56], new Vector2((float)num70, (float)(num71 + 118 + num78)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 						}
+
 						if (Main.recipe[Main.availableRecipe[num72]].needSnowBiome)
 						{
 							int num79 = (num73 + 1) * 26;
@@ -36011,6 +_,7 @@
 					{
 						text4 = Lang.inter[24];
 					}
+
 					Main.spriteBatch.DrawString(Main.fontMouseText, text4, new Vector2((float)(num70 + 50), (float)(num71 + 12)), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 					new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
 					if (Main.mouseX >= num70 && (float)Main.mouseX <= (float)num70 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num71 && (float)Main.mouseY <= (float)num71 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
@@ -36026,11 +_,14 @@
 						{
 							ItemSlot.RightClick(ref Main.guideItem, 7);
 						}
+
 						ItemSlot.MouseHover(ref Main.guideItem, 7);
 					}
+
 					ItemSlot.Draw(Main.spriteBatch, ref Main.guideItem, 7, new Vector2((float)num70, (float)num71), default(Microsoft.Xna.Framework.Color));
 				}
 			}
+
 			if (!Main.InReforgeMenu)
 			{
 				UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeBig = -1;
@@ -36039,6 +_,7 @@
 				{
 					Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[25], new Vector2(76f, (float)(414 + num58)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 				}
+
 				for (int num80 = 0; num80 < Recipe.maxRecipes; num80++)
 				{
 					Main.inventoryScale = 100f / (Math.Abs(Main.availableRecipeY[num80]) + 100f);
@@ -36046,21 +_,25 @@
 					{
 						Main.inventoryScale = 0.75f;
 					}
+
 					if (Main.recFastScroll)
 					{
 						Main.inventoryScale = 0.75f;
 					}
+
 					if (Main.availableRecipeY[num80] < (float)((num80 - Main.focusRecipe) * 65))
 					{
 						if (Main.availableRecipeY[num80] == 0f && !Main.recFastScroll)
 						{
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 						}
+
 						Main.availableRecipeY[num80] += 6.5f;
 						if (Main.recFastScroll)
 						{
 							Main.availableRecipeY[num80] += 130000f;
 						}
+
 						if (Main.availableRecipeY[num80] > (float)((num80 - Main.focusRecipe) * 65))
 						{
 							Main.availableRecipeY[num80] = (float)((num80 - Main.focusRecipe) * 65);
@@ -36072,11 +_,13 @@
 						{
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 						}
+
 						Main.availableRecipeY[num80] -= 6.5f;
 						if (Main.recFastScroll)
 						{
 							Main.availableRecipeY[num80] -= 130000f;
 						}
+
 						if (Main.availableRecipeY[num80] < (float)((num80 - Main.focusRecipe) * 65))
 						{
 							Main.availableRecipeY[num80] = (float)((num80 - Main.focusRecipe) * 65);
@@ -36086,6 +_,7 @@
 					{
 						Main.recFastScroll = false;
 					}
+
 					if (num80 < Main.numAvailableRecipes && Math.Abs(Main.availableRecipeY[num80]) <= (float)num59)
 					{
 						int num81 = (int)(46f - 26f * Main.inventoryScale);
@@ -36097,6 +_,7 @@
 							num83 = (double)(150f * (100f - (Math.Abs(Main.availableRecipeY[num80]) - ((float)num59 - 100f)))) * 0.01;
 							num84 = (double)(255f * (100f - (Math.Abs(Main.availableRecipeY[num80]) - ((float)num59 - 100f)))) * 0.01;
 						}
+
 						new Microsoft.Xna.Framework.Color((int)((byte)num83), (int)((byte)num83), (int)((byte)num83), (int)((byte)num83));
 						Microsoft.Xna.Framework.Color lightColor = new Microsoft.Xna.Framework.Color((int)((byte)num84), (int)((byte)num84), (int)((byte)num84), (int)((byte)num84));
 						if (Main.mouseX >= num81 && (float)Main.mouseX <= (float)num81 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num82 && (float)Main.mouseY <= (float)num82 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
@@ -36120,6 +_,7 @@
 										{
 											Main.stackSplit = Main.stackDelay;
 										}
+
 										Main.CraftItem(Main.recipe[Main.availableRecipe[num80]]);
 									}
 								}
@@ -36128,6 +_,7 @@
 							{
 								Main.focusRecipe = num80;
 							}
+
 							Main.craftingHide = true;
 							Main.hoverItemName = Main.recipe[Main.availableRecipe[num80]].createItem.name;
 							Main.toolTip = Main.recipe[Main.availableRecipe[num80]].createItem.Clone();
@@ -36135,14 +_,15 @@
 							{
 								object obj = Main.hoverItemName;
 								Main.hoverItemName = string.Concat(new object[]
-									{
-										obj,
+								{
+									obj,
 										" (",
 										Main.recipe[Main.availableRecipe[num80]].createItem.stack,
 										")"
-									});
-							}
-						}
+								});
+							}
+						}
+
 						if (Main.numAvailableRecipes > 0)
 						{
 							num83 -= 50.0;
@@ -36150,6 +_,7 @@
 							{
 								num83 = 0.0;
 							}
+
 							if (num80 == Main.focusRecipe)
 							{
 								UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = 0;
@@ -36158,6 +_,7 @@
 							{
 								UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = -1;
 							}
+
 							Microsoft.Xna.Framework.Color color4 = Main.inventoryBack;
 							Main.inventoryBack = new Microsoft.Xna.Framework.Color((int)((byte)num83), (int)((byte)num83), (int)((byte)num83), (int)((byte)num83));
 							ItemSlot.Draw(Main.spriteBatch, ref Main.recipe[Main.availableRecipe[num80]].createItem, 22, new Vector2((float)num81, (float)num82), lightColor);
@@ -36165,6 +_,7 @@
 						}
 					}
 				}
+
 				if (Main.numAvailableRecipes > 0)
 				{
 					UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeBig = -1;
@@ -36176,6 +_,7 @@
 							UILinkPointNavigator.Shortcuts.CRAFT_CurrentIngridientsCount = num85 + 1;
 							break;
 						}
+
 						int num86 = 80 + num85 * 40;
 						int num87 = 380 + num58;
 						double num88 = (double)(Main.inventoryBack.A + 50);
@@ -36187,10 +_,12 @@
 						{
 							num88 = 0.0;
 						}
+
 						if (num89 < 0.0)
 						{
 							num89 = 0.0;
 						}
+
 						white3.R = (byte)num88;
 						white3.G = (byte)num88;
 						white3.B = (byte)num88;
@@ -36204,6 +_,7 @@
 						{
 							break;
 						}
+
 						if (Main.mouseX >= num86 && (float)Main.mouseX <= (float)num86 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num87 && (float)Main.mouseY <= (float)num87 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
 						{
 							Main.craftingHide = true;
@@ -36215,6 +_,7 @@
 							{
 								Main.toolTip.name = name;
 							}
+
 							if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].anyIronBar && Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num85].type == 22)
 							{
 								Main.toolTip.name = Lang.misc[37] + " " + Main.itemName[22];
@@ -36235,23 +_,26 @@
 							{
 								Main.toolTip.name = Lang.misc[37] + " " + Lang.misc[38];
 							}
+
 							if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num85].stack > 1)
 							{
 								object obj = Main.hoverItemName;
 								Main.hoverItemName = string.Concat(new object[]
-									{
-										obj,
+								{
+									obj,
 										" (",
 										Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num85].stack,
 										")"
-									});
-							}
-						}
+								});
+							}
+						}
+
 						num88 -= 50.0;
 						if (num88 < 0.0)
 						{
 							num88 = 0.0;
 						}
+
 						UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = 1 + num85;
 						Microsoft.Xna.Framework.Color color5 = Main.inventoryBack;
 						Main.inventoryBack = new Microsoft.Xna.Framework.Color((int)((byte)num88), (int)((byte)num88), (int)((byte)num88), (int)((byte)num88));
@@ -36259,6 +_,7 @@
 						Main.inventoryBack = color5;
 					}
 				}
+
 				if (Main.numAvailableRecipes == 0)
 				{
 					Main.recBigList = false;
@@ -36271,6 +_,7 @@
 					{
 						num91 -= 150;
 					}
+
 					bool flag9 = Main.mouseX > num90 - 15 && Main.mouseX < num90 + 15 && Main.mouseY > num91 - 15 && Main.mouseY < num91 + 15 && !PlayerInput.IgnoreMouseInterface;
 					int num92 = Main.recBigList.ToInt() * 2 + flag9.ToInt();
 					Main.spriteBatch.Draw(Main.craftToggleTexture[num92], new Vector2((float)num90, (float)num91), null, Microsoft.Xna.Framework.Color.White, 0f, Main.craftToggleTexture[num92].Size() / 2f, 1f, SpriteEffects.None, 0f);
@@ -36294,6 +_,7 @@
 					}
 				}
 			}
+
 			if (Main.recBigList)
 			{
 				UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeBig = -1;
@@ -36303,6 +_,7 @@
 				{
 					Main.inventoryScale = 0.75f;
 				}
+
 				int num94 = 340;
 				int num95 = 310;
 				int num96 = (Main.screenWidth - num95 - 280) / num93;
@@ -36323,6 +_,7 @@
 						Main.recStart = 0;
 					}
 				}
+
 				if (Main.recStart > 0)
 				{
 					if (Main.mouseX >= num102 && Main.mouseX <= num102 + Main.craftUpButtonTexture.Width && Main.mouseY >= num103 && Main.mouseY <= num103 + Main.craftUpButtonTexture.Height && !PlayerInput.IgnoreMouseInterface)
@@ -36335,12 +_,15 @@
 							{
 								Main.recStart = 0;
 							}
+
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 							Main.mouseLeftRelease = false;
 						}
 					}
+
 					Main.spriteBatch.Draw(Main.craftUpButtonTexture, new Vector2((float)num102, (float)num103), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.craftUpButtonTexture.Width, Main.craftUpButtonTexture.Height)), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 				}
+
 				if (Main.recStart < Main.numAvailableRecipes - num96 * num97)
 				{
 					num103 += 20;
@@ -36355,11 +_,14 @@
 							{
 								Main.recStart = Main.numAvailableRecipes - num96;
 							}
+
 							Main.mouseLeftRelease = false;
 						}
 					}
+
 					Main.spriteBatch.Draw(Main.craftDownButtonTexture, new Vector2((float)num102, (float)num103), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.craftUpButtonTexture.Width, Main.craftUpButtonTexture.Height)), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 				}
+
 				int num104 = Main.recStart;
 				while (num104 < Recipe.maxRecipes && num104 < Main.numAvailableRecipes)
 				{
@@ -36384,6 +_,7 @@
 								UILinkPointNavigator.ChangePage(9);
 							}
 						}
+
 						Main.craftingHide = true;
 						Main.hoverItemName = Main.recipe[Main.availableRecipe[num104]].createItem.name;
 						Main.toolTip = Main.recipe[Main.availableRecipe[num104]].createItem.Clone();
@@ -36391,14 +_,15 @@
 						{
 							object obj = Main.hoverItemName;
 							Main.hoverItemName = string.Concat(new object[]
-								{
-									obj,
+							{
+								obj,
 									" (",
 									Main.recipe[Main.availableRecipe[num104]].createItem.stack,
 									")"
-								});
-						}
-					}
+							});
+						}
+					}
+
 					if (Main.numAvailableRecipes > 0)
 					{
 						num107 -= 50.0;
@@ -36406,12 +_,14 @@
 						{
 							num107 = 0.0;
 						}
+
 						UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeBig = num104 - Main.recStart;
 						Microsoft.Xna.Framework.Color color6 = Main.inventoryBack;
 						Main.inventoryBack = new Microsoft.Xna.Framework.Color((int)((byte)num107), (int)((byte)num107), (int)((byte)num107), (int)((byte)num107));
 						ItemSlot.Draw(Main.spriteBatch, ref Main.recipe[Main.availableRecipe[num104]].createItem, 22, new Vector2((float)num105, (float)num106), default(Microsoft.Xna.Framework.Color));
 						Main.inventoryBack = color6;
 					}
+
 					num100 += num93;
 					num98++;
 					if (num98 >= num96)
@@ -36425,9 +_,11 @@
 							break;
 						}
 					}
+
 					num104++;
 				}
 			}
+
 			Vector2 vector2 = Main.fontMouseText.MeasureString("Coins");
 			Vector2 vector3 = Main.fontMouseText.MeasureString(Lang.inter[26]);
 			float num109 = vector2.X / vector3.X;
@@ -36452,10 +_,13 @@
 					{
 						ItemSlot.RightClick(Main.player[Main.myPlayer].inventory, 1, slot);
 					}
+
 					ItemSlot.MouseHover(Main.player[Main.myPlayer].inventory, 1, slot);
 				}
+
 				ItemSlot.Draw(Main.spriteBatch, Main.player[Main.myPlayer].inventory, 1, slot, new Vector2((float)num111, (float)num112), default(Microsoft.Xna.Framework.Color));
 			}
+
 			Vector2 vector4 = Main.fontMouseText.MeasureString("Ammo");
 			Vector2 vector5 = Main.fontMouseText.MeasureString(Lang.inter[27]);
 			float num113 = vector4.X / vector5.X;
@@ -36480,14 +_,18 @@
 					{
 						ItemSlot.RightClick(Main.player[Main.myPlayer].inventory, 2, slot2);
 					}
+
 					ItemSlot.MouseHover(Main.player[Main.myPlayer].inventory, 2, slot2);
 				}
+
 				ItemSlot.Draw(Main.spriteBatch, Main.player[Main.myPlayer].inventory, 2, slot2, new Vector2((float)num115, (float)num116), default(Microsoft.Xna.Framework.Color));
 			}
+
 			if (Main.npcShop > 0 && (!Main.playerInventory || Main.player[Main.myPlayer].talkNPC == -1))
 			{
 				Main.npcShop = 0;
 			}
+
 			if (Main.npcShop > 0 && !Main.recBigList)
 			{
 				Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontMouseText, Lang.inter[28], 504f, (float)this.invBottom, Microsoft.Xna.Framework.Color.White * ((float)Main.mouseTextColor / 255f), Microsoft.Xna.Framework.Color.Black, Vector2.Zero, 1f);
@@ -36497,6 +_,7 @@
 				{
 					Main.player[Main.myPlayer].mouseInterface = true;
 				}
+
 				for (int num117 = 0; num117 < 10; num117++)
 				{
 					for (int num118 = 0; num118 < 4; num118++)
@@ -36516,22 +_,27 @@
 							{
 								ItemSlot.RightClick(this.shop[Main.npcShop].item, 15, slot3);
 							}
+
 							ItemSlot.MouseHover(this.shop[Main.npcShop].item, 15, slot3);
 						}
+
 						ItemSlot.Draw(Main.spriteBatch, this.shop[Main.npcShop].item, 15, slot3, new Vector2((float)num119, (float)num120), default(Microsoft.Xna.Framework.Color));
 					}
 				}
 			}
+
 			if (Main.player[Main.myPlayer].chest > -1 && !Main.tileContainer[(int)Main.tile[Main.player[Main.myPlayer].chestX, Main.player[Main.myPlayer].chestY].type])
 			{
 				Main.player[Main.myPlayer].chest = -1;
 				Recipe.FindRecipes();
 			}
+
 			int offsetDown = 0;
 			if (!PlayerInput.UsingGamepad)
 			{
 				offsetDown = 9999;
 			}
+
 			UIVirtualKeyboard.OffsetDown = offsetDown;
 			ChestUI.Draw(Main.spriteBatch);
 			if (Main.player[Main.myPlayer].chest == -1 && Main.npcShop == 0)
@@ -36550,12 +_,14 @@
 						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 						Main.allChestStackHover = true;
 					}
+
 					if (Main.mouseLeft && Main.mouseLeftRelease)
 					{
 						Main.mouseLeftRelease = false;
 						Main.player[Main.myPlayer].QuickStackAllChests();
 						Recipe.FindRecipes();
 					}
+
 					Main.player[Main.myPlayer].mouseInterface = true;
 				}
 				else if (Main.allChestStackHover)
@@ -36563,12 +_,14 @@
 					Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 					Main.allChestStackHover = false;
 				}
+
 				Main.spriteBatch.Draw(Main.chestStackTexture[num121], new Vector2((float)num122, (float)num123), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chestStackTexture[num121].Width, Main.chestStackTexture[num121].Height)), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 				if (!Main.mouseText && num121 == 1)
 				{
 					this.MouseText(Language.GetTextValue("GameUI.QuickStackToNearby"), 0, 0);
 				}
 			}
+
 			if (Main.player[Main.myPlayer].chest == -1 && Main.npcShop == 0)
 			{
 				int num124 = 0;
@@ -36590,11 +_,13 @@
 						Recipe.FindRecipes();
 					}
 				}
+
 				if (flag10 != Main.inventorySortMouseOver)
 				{
 					Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 					Main.inventorySortMouseOver = flag10;
 				}
+
 				Texture2D texture2 = Main.inventorySortTexture[Main.inventorySortMouseOver ? 1 : 0];
 				Main.spriteBatch.Draw(texture2, new Vector2((float)num125, (float)num126), null, Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 				if (!Main.mouseText && num124 == 1)
@@ -36613,12 +_,15 @@
 			{
 				Main.mouseItem.Prefix(-1);
 			}
+
 			Main.mouseItem.position.X = Main.player[Main.myPlayer].position.X + (float)(Main.player[Main.myPlayer].width / 2) - (float)(Main.mouseItem.width / 2);
 			Main.mouseItem.position.Y = Main.player[Main.myPlayer].position.Y + (float)(Main.player[Main.myPlayer].height / 2) - (float)(Main.mouseItem.height / 2);
 			ItemText.NewText(Main.mouseItem, r.createItem.stack, false, false);
 			r.Create();
 			if (Main.mouseItem.type > 0 || r.createItem.type > 0)
 			{
+				RecipeHooks.OnCraft(Main.mouseItem, r);
+				ItemLoader.OnCraft(Main.mouseItem, r);
 				Main.PlaySound(7, -1, -1, 1, 1f, 0f);
 			}
 		}
@@ -36633,6 +_,7 @@
 			{
 				num2 += num + num / 2;
 			}
+
 			int num4 = Main.player[Main.myPlayer].hostile ? 2 : 0;
 			if (Main.mouseX > num2 && Main.mouseX < num2 + 34 && Main.mouseY > num3 - 2 && Main.mouseY < num3 + 34 && !PlayerInput.IgnoreMouseInterface)
 			{
@@ -36641,6 +_,7 @@
 				{
 					num4++;
 				}
+
 				if (Main.mouseLeft && Main.mouseLeftRelease && Main.teamCooldown == 0)
 				{
 					Main.teamCooldown = Main.teamCooldownLen;
@@ -36649,6 +_,7 @@
 					NetMessage.SendData(30, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
 				}
 			}
+
 			Microsoft.Xna.Framework.Rectangle rectangle = Main.PVPTexture[0].Frame(4, 6, 0, 0);
 			rectangle.Location = new Microsoft.Xna.Framework.Point(rectangle.Width * num4, rectangle.Height * Main.player[Main.myPlayer].team);
 			Main.spriteBatch.Draw(Main.PVPTexture[0], new Vector2((float)(num2 - 10), (float)num3), new Microsoft.Xna.Framework.Rectangle?(rectangle), Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, Vector2.One, SpriteEffects.None, 0f);
@@ -36669,6 +_,7 @@
 					{
 						flag = true;
 					}
+
 					if (Main.mouseLeft && Main.mouseLeftRelease && Main.player[Main.myPlayer].team != i && Main.teamCooldown == 0)
 					{
 						if (!Main.player[Main.myPlayer].TeamChangeAllowed())
@@ -36684,10 +_,12 @@
 						}
 					}
 				}
+
 				if (flag)
 				{
 					Main.spriteBatch.Draw(Main.PVPTexture[2], r.Location.ToVector2() + new Vector2(-2f), Microsoft.Xna.Framework.Color.White);
 				}
+
 				Main.spriteBatch.Draw(Main.PVPTexture[1], r.Location.ToVector2(), new Microsoft.Xna.Framework.Rectangle?(rectangle), Microsoft.Xna.Framework.Color.White);
 				UILinkPointNavigator.SetPosition(1550 + i + 1, r.Location.ToVector2() + r.Size() * 0.75f);
 			}
@@ -36703,10 +_,12 @@
 			{
 				num = 2;
 			}
+
 			if (num == 2)
 			{
 				Main.spriteBatch.Draw(Main.EquipPageTexture[6], vector, null, Main.OurFavoriteColor, 0f, new Vector2(2f), 0.9f, SpriteEffects.None, 0f);
 			}
+
 			Main.spriteBatch.Draw(texture2D, vector, null, Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, 0.9f, SpriteEffects.None, 0f);
 			UILinkPointNavigator.SetPosition(305, vector + texture2D.Size() * 0.75f);
 			vector.X -= 48f;
@@ -36715,10 +_,12 @@
 			{
 				num = 1;
 			}
+
 			if (num == 1)
 			{
 				Main.spriteBatch.Draw(Main.EquipPageTexture[7], vector, null, Main.OurFavoriteColor, 0f, new Vector2(2f), 0.9f, SpriteEffects.None, 0f);
 			}
+
 			Main.spriteBatch.Draw(texture2D, vector, null, Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, 0.9f, SpriteEffects.None, 0f);
 			UILinkPointNavigator.SetPosition(306, vector + texture2D.Size() * 0.75f);
 			vector.X -= 48f;
@@ -36727,10 +_,12 @@
 			{
 				num = 3;
 			}
+
 			if (num == 3 && !Main.CaptureModeDisabled)
 			{
 				Main.spriteBatch.Draw(Main.EquipPageTexture[9], vector, null, Main.OurFavoriteColor, 0f, Vector2.Zero, 0.9f, SpriteEffects.None, 0f);
 			}
+
 			Main.spriteBatch.Draw(texture2D, vector, null, Main.CaptureModeDisabled ? Microsoft.Xna.Framework.Color.Red : Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, 0.9f, SpriteEffects.None, 0f);
 			UILinkPointNavigator.SetPosition(307, vector + texture2D.Size() * 0.75f);
 			if (num != -1)
@@ -36763,17 +_,20 @@
 					{
 						Main.EquipPageSelected = 0;
 					}
+
 					if (flag)
 					{
 						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 					}
 				}
 			}
+
 			ItemSlot.EquipPage(Main.mouseItem);
 			if (Main.EquipPage == -1)
 			{
 				Main.EquipPage = Main.EquipPageSelected;
 			}
+
 			return num;
 		}
 
@@ -36784,6 +_,7 @@
 			{
 				rectangle.Y = (int)Main.screenPosition.Y + Main.screenHeight - Main.mouseY;
 			}
+
 			this.GUIBarsMouseOverLife();
 			this.GUIBarsMouseOverMana();
 			IngameOptions.MouseOver();
@@ -36803,22 +_,25 @@
 							{
 								object obj = text;
 								text = string.Concat(new object[]
-									{
-										obj,
+								{
+									obj,
 										" (",
 										Main.item[i].stack,
 										")"
-									});
-							}
+								});
+							}
+
 							if (Main.item[i].owner < 255 && Main.showItemOwner)
 							{
 								text = text + " <" + Main.player[Main.item[i].owner].name + ">";
 							}
+
 							Main.rare = Main.item[i].rare;
 							if (Main.item[i].expert)
 							{
 								Main.rare = -12;
 							}
+
 							this.MouseText(text, Main.rare, 0);
 							Main.mouseText = true;
 							break;
@@ -36826,6 +_,7 @@
 					}
 				}
 			}
+
 			for (int j = 0; j < 255; j++)
 			{
 				if (Main.player[j].active && Main.myPlayer != j && !Main.player[j].dead)
@@ -36839,23 +_,26 @@
 						{
 							num = 0;
 						}
+
 						string text2 = string.Concat(new object[]
-							{
-								Main.player[j].name,
+						{
+							Main.player[j].name,
 								": ",
 								num,
 								"/",
 								Main.player[j].statLifeMax2
-							});
+						});
 						if (Main.player[j].hostile)
 						{
 							text2 = text2 + " " + Language.GetTextValue("Game.PvPFlag");
 						}
+
 						this.MouseText(text2, 0, Main.player[j].difficulty);
 						Main.mouseText = true;
 					}
 				}
 			}
+
 			Main.HoveringOverAnNPC = false;
 			if (!Main.mouseText)
 			{
@@ -36870,6 +_,7 @@
 						{
 							value3 = new Microsoft.Xna.Framework.Rectangle((int)((double)Main.npc[k].position.X + (double)Main.npc[k].width * 0.5 - 32.0), (int)((double)Main.npc[k].position.Y + (double)Main.npc[k].height * 0.5 - 32.0), 64, 64);
 						}
+
 						bool flag = rectangle.Intersects(value3);
 						bool flag2 = flag || (Main.SmartInteractShowingGenuine && Main.SmartInteractNPC == k);
 						if (flag2 && ((Main.npc[k].type != 85 && Main.npc[k].type != 341 && Main.npc[k].aiStyle != 87) || Main.npc[k].ai[0] != 0f) && Main.npc[k].type != 488)
@@ -36884,10 +_,12 @@
 									flag3 = true;
 								}
 							}
+
 							if (Main.player[Main.myPlayer].ownedProjectileCounts[651] > 0)
 							{
 								flag3 = false;
 							}
+
 							if (flag3 && !Main.player[Main.myPlayer].dead)
 							{
 								Main.HoveringOverAnNPC = true;
@@ -36899,11 +_,13 @@
 									spriteEffects = SpriteEffects.FlipHorizontally;
 									num2 = Main.npc[k].width / 2 + 8;
 								}
+
 								if (Main.player[Main.myPlayer].gravDir != 1f)
 								{
 									spriteEffects |= SpriteEffects.FlipVertically;
 									num3 = (float)Main.screenHeight - num3 - (float)Main.chatTexture.Height;
 								}
+
 								Main.spriteBatch.Draw(Main.chatTexture, new Vector2(Main.npc[k].position.X + (float)(Main.npc[k].width / 2) - Main.screenPosition.X - (float)(Main.chatTexture.Width / 2) - (float)num2, num3), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chatTexture.Width, Main.chatTexture.Height)), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, spriteEffects, 0f);
 								if (Main.mouseRight && Main.npcChatRelease)
 								{
@@ -36912,6 +_,7 @@
 									{
 										Main.player[Main.myPlayer].releaseInventory = false;
 									}
+
 									if (Main.player[Main.myPlayer].talkNPC != k)
 									{
 										Main.CancelHairWindow();
@@ -36930,6 +_,7 @@
 									}
 								}
 							}
+
 							if (flag)
 							{
 								Main.player[Main.myPlayer].showItemIcon = false;
@@ -36939,22 +_,25 @@
 								{
 									num4 = Main.npc[k].realLife;
 								}
+
 								if (Main.npc[num4].lifeMax > 1 && !Main.npc[num4].dontTakeDamage)
 								{
 									object obj2 = text3;
 									text3 = string.Concat(new object[]
-										{
-											obj2,
+									{
+										obj2,
 											": ",
 											Main.npc[num4].life,
 											"/",
 											Main.npc[num4].lifeMax
-										});
-								}
+									});
+								}
+
 								this.MouseText(text3, 0, 0);
 								Main.mouseText = true;
 								break;
 							}
+
 							if (flag2)
 							{
 								break;
@@ -36963,6 +_,7 @@
 					}
 				}
 			}
+
 			if (!Main.mouseText && Main.signHover != -1 && Main.sign[Main.signHover] != null && !Main.player[Main.myPlayer].mouseInterface)
 			{
 				int num5;
@@ -36977,23 +_,28 @@
 						num6 = x;
 					}
 				}
+
 				if (num6 > 460f)
 				{
 					num6 = 460f;
 				}
+
 				Vector2 vector = new Vector2((float)Main.mouseX, (float)Main.mouseY) + new Vector2(16f);
 				if (vector.Y > (float)(Main.screenHeight - 30 * num5))
 				{
 					vector.Y = (float)(Main.screenHeight - 30 * num5);
 				}
+
 				if (vector.X > (float)Main.screenWidth - num6)
 				{
 					vector.X = (float)(Main.screenWidth - 460);
 				}
+
 				for (int m = 0; m < num5; m++)
 				{
 					Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontMouseText, array[m], vector.X, vector.Y + (float)(m * 30), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), Microsoft.Xna.Framework.Color.Black, Vector2.Zero, 1f);
 				}
+
 				Main.mouseText = true;
 			}
 		}
@@ -37009,6 +_,7 @@
 					num = 260;
 					num2 += 26;
 				}
+
 				if (Main.mouseX > 500 + Main.UI_ScreenAnchorX && Main.mouseX < 500 + num + Main.UI_ScreenAnchorX && Main.mouseY > 32 && Main.mouseY < 32 + Main.heartTexture.Height + num2)
 				{
 					Main.player[Main.myPlayer].showItemIcon = false;
@@ -37050,6 +_,7 @@
 					return;
 				}
 			}
+
 			this.GUIBarsDrawInner();
 		}
 
@@ -37085,11 +_,13 @@
 			{
 				num2 = 0;
 			}
+
 			if (num2 > 0)
 			{
 				num = Main.player[Main.myPlayer].statLifeMax / (20 + num2 / 4);
 				Main.UIDisplay_LifePerHeart = (float)Main.player[Main.myPlayer].statLifeMax / 20f;
 			}
+
 			int num3 = Main.player[Main.myPlayer].statLifeMax2 - Main.player[Main.myPlayer].statLifeMax;
 			Main.UIDisplay_LifePerHeart += (float)(num3 / num);
 			int num4 = (int)((float)Main.player[Main.myPlayer].statLifeMax2 / Main.UIDisplay_LifePerHeart);
@@ -37097,20 +_,22 @@
 			{
 				num4 = 10;
 			}
+
 			string text = string.Concat(new object[]
-				{
-					Lang.inter[0],
+			{
+				Lang.inter[0],
 					" ",
 					Main.player[Main.myPlayer].statLifeMax2,
 					"/",
 					Main.player[Main.myPlayer].statLifeMax2
-				});
+			});
 			Vector2 vector = Main.fontMouseText.MeasureString(text);
 			if (!Main.player[Main.myPlayer].ghost)
 			{
 				Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[0], new Vector2((float)(500 + 13 * num4) - vector.X * 0.5f + (float)Main.UI_ScreenAnchorX, 6f), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 				Main.spriteBatch.DrawString(Main.fontMouseText, Main.player[Main.myPlayer].statLife + "/" + Main.player[Main.myPlayer].statLifeMax2, new Vector2((float)(500 + 13 * num4) + vector.X * 0.5f + (float)Main.UI_ScreenAnchorX, 6f), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, new Vector2(Main.fontMouseText.MeasureString(Main.player[Main.myPlayer].statLife + "/" + Main.player[Main.myPlayer].statLifeMax2).X, 0f), 1f, SpriteEffects.None, 0f);
 			}
+
 			for (int i = 1; i < (int)((float)Main.player[Main.myPlayer].statLifeMax2 / Main.UIDisplay_LifePerHeart) + 1; i++)
 			{
 				float num5 = 1f;
@@ -37132,20 +_,24 @@
 					{
 						num6 = 30;
 					}
+
 					num5 = num7 / 4f + 0.75f;
 					if ((double)num5 < 0.75)
 					{
 						num5 = 0.75f;
 					}
+
 					if (num7 > 0f)
 					{
 						flag = true;
 					}
 				}
+
 				if (flag)
 				{
 					num5 += Main.cursorScale - 1f;
 				}
+
 				int num8 = 0;
 				int num9 = 0;
 				if (i > 10)
@@ -37153,6 +_,7 @@
 					num8 -= 260;
 					num9 += 26;
 				}
+
 				int a = (int)((double)((float)num6) * 0.9);
 				if (!Main.player[Main.myPlayer].ghost)
 				{
@@ -37197,20 +_,24 @@
 						{
 							num2 = 30;
 						}
+
 						num = num3 / 4f + 0.75f;
 						if ((double)num < 0.75)
 						{
 							num = 0.75f;
 						}
+
 						if (num3 > 0f)
 						{
 							flag = true;
 						}
 					}
+
 					if (flag)
 					{
 						num += Main.cursorScale - 1f;
 					}
+
 					int a = (int)((double)((float)num2) * 0.9);
 					Main.spriteBatch.Draw(Main.manaTexture, new Vector2((float)(775 + Main.UI_ScreenAnchorX), (float)(30 + Main.manaTexture.Height / 2) + ((float)Main.manaTexture.Height - (float)Main.manaTexture.Height * num) / 2f + (float)(28 * (i - 1))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.manaTexture.Width, Main.manaTexture.Height)), new Microsoft.Xna.Framework.Color(num2, num2, num2, a), 0f, new Vector2((float)(Main.manaTexture.Width / 2), (float)(Main.manaTexture.Height / 2)), num, SpriteEffects.None, 0f);
 				}
@@ -37234,6 +_,7 @@
 						x = 32 + (i - num2) * 38;
 						num3 += 50;
 					}
+
 					num = Main.DrawBuffIcon(num, i, b, x, num3);
 				}
 				else
@@ -37241,31 +_,37 @@
 					Main.buffAlpha[i] = 0.4f;
 				}
 			}
+
 			if (num >= 0)
 			{
 				int num4 = Main.player[Main.myPlayer].buffType[num];
 				if (num4 > 0)
 				{
 					Main.buffString = Main.buffTip[num4];
+					int rare = 0;
 					if (num4 == 26 && Main.expertMode)
 					{
 						Main.buffString += Lang.misc[39];
 					}
+
 					if (num4 == 147)
 					{
 						Main.bannerMouseOver = true;
 					}
+
 					if (num4 == 94)
 					{
 						int num5 = (int)(Main.player[Main.myPlayer].manaSickReduction * 100f) + 1;
 						Main.buffString = Main.buffString + num5 + "%";
 					}
+
 					if (Main.meleeBuff[num4])
 					{
-						this.MouseText(Main.buffName[num4], -10, 0);
-						return;
-					}
-					this.MouseText(Main.buffName[num4], 0, 0);
+						rare = -10;
+					}
+
+					BuffLoader.ModifyBuffTip(num4, ref Main.buffString, ref rare);
+					this.MouseText(Main.buffName[num4], rare, 0);
 				}
 			}
 		}
@@ -37276,6 +_,7 @@
 			{
 				return drawBuffText;
 			}
+
 			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(Main.buffAlpha[i], Main.buffAlpha[i], Main.buffAlpha[i], Main.buffAlpha[i]);
 			Main.spriteBatch.Draw(Main.buffTexture[b], new Vector2((float)x, (float)y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.buffTexture[b].Width, Main.buffTexture[b].Height)), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 			if (!Main.vanityPet[b] && !Main.lightPet[b] && !Main.buffNoTimeDisplay[b] && (!Main.player[Main.myPlayer].honeyWet || b != 48) && (!Main.player[Main.myPlayer].wet || !Main.expertMode || b != 46) && Main.player[Main.myPlayer].buffTime[i] > 2)
@@ -37283,6 +_,7 @@
 				string text = Lang.LocalizedDuration(new TimeSpan(0, 0, Main.player[Main.myPlayer].buffTime[i] / 60), true, false);
 				Main.spriteBatch.DrawString(Main.fontItemStack, text, new Vector2((float)x, (float)(y + Main.buffTexture[b].Height)), color, 0f, default(Vector2), 0.8f, SpriteEffects.None, 0f);
 			}
+
 			if (Main.mouseX < x + Main.buffTexture[b].Width && Main.mouseY < y + Main.buffTexture[b].Height && Main.mouseX > x && Main.mouseY > y)
 			{
 				drawBuffText = i;
@@ -37300,6 +_,7 @@
 				{
 					Main.player[Main.myPlayer].mouseInterface = true;
 				}
+
 				if (flag)
 				{
 					Main.TryRemovingBuff(i, b);
@@ -37309,6 +_,7 @@
 			{
 				Main.buffAlpha[i] -= 0.05f;
 			}
+
 			if (Main.buffAlpha[i] > 1f)
 			{
 				Main.buffAlpha[i] = 1f;
@@ -37317,10 +_,12 @@
 			{
 				Main.buffAlpha[i] = 0.4f;
 			}
+
 			if (PlayerInput.UsingGamepad && !Main.playerInventory)
 			{
 				drawBuffText = -1;
 			}
+
 			return drawBuffText;
 		}
 
@@ -37334,14 +_,17 @@
 					Main.player[Main.myPlayer].mount.Dismount(Main.player[Main.myPlayer]);
 					flag = true;
 				}
+
 				if (Main.player[Main.myPlayer].miscEquips[0].buffType == b && !Main.player[Main.myPlayer].hideMisc[0])
 				{
 					Main.player[Main.myPlayer].hideMisc[0] = true;
 				}
+
 				if (Main.player[Main.myPlayer].miscEquips[1].buffType == b && !Main.player[Main.myPlayer].hideMisc[1])
 				{
 					Main.player[Main.myPlayer].hideMisc[1] = true;
 				}
+
 				Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 				if (!flag)
 				{
@@ -37357,6 +_,7 @@
 			{
 				return;
 			}
+
 			if (Main.player[Main.myPlayer].lavaTime < Main.player[Main.myPlayer].lavaMax && Main.player[Main.myPlayer].lavaWet)
 			{
 				flag = true;
@@ -37365,6 +_,7 @@
 			{
 				flag = true;
 			}
+
 			Vector2 value = Main.player[Main.myPlayer].Top + new Vector2(0f, Main.player[Main.myPlayer].gfxOffY) - Main.screenPosition;
 			Vector2 zero = new Vector2(-125f, -100f);
 			if (Main.ingameOptionsWindow || Main.InGameUI.IsVisible)
@@ -37374,12 +_,15 @@
 				{
 					value.Y = (float)(Main.screenHeight - 64);
 				}
+
 				zero = Vector2.Zero;
 			}
+
 			if (Main.playerInventory && Main.screenHeight < 1000)
 			{
 				zero.Y = (float)(Main.player[Main.myPlayer].height - 20);
 			}
+
 			if (Main.player[Main.myPlayer].breath < Main.player[Main.myPlayer].breathMax && !Main.player[Main.myPlayer].ghost && !flag)
 			{
 				int arg_1B4_0 = Main.player[Main.myPlayer].breathMax / 20;
@@ -37400,12 +_,14 @@
 						{
 							num3 = 30;
 						}
+
 						num2 = num4 / 4f + 0.75f;
 						if ((double)num2 < 0.75)
 						{
 							num2 = 0.75f;
 						}
 					}
+
 					int num5 = 0;
 					int num6 = 0;
 					if (i > 10)
@@ -37413,9 +_,11 @@
 						num5 -= 260;
 						num6 += 26;
 					}
+
 					Main.spriteBatch.Draw(Main.bubbleTexture, value + zero + new Vector2((float)(26 * (i - 1) + num5), 32f + ((float)Main.bubbleTexture.Height - (float)Main.bubbleTexture.Height * num2) / 2f + (float)num6), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.bubbleTexture.Width, Main.bubbleTexture.Height)), new Microsoft.Xna.Framework.Color(num3, num3, num3, num3), 0f, default(Vector2), num2, SpriteEffects.None, 0f);
 				}
 			}
+
 			if (Main.player[Main.myPlayer].lavaTime < Main.player[Main.myPlayer].lavaMax && !Main.player[Main.myPlayer].ghost && flag)
 			{
 				int num7 = Main.player[Main.myPlayer].lavaMax / 10;
@@ -37436,12 +_,14 @@
 						{
 							num9 = 30;
 						}
+
 						num8 = num10 / 4f + 0.75f;
 						if ((double)num8 < 0.75)
 						{
 							num8 = 0.75f;
 						}
 					}
+
 					int num11 = 0;
 					int num12 = 0;
 					if (j > 10)
@@ -37449,6 +_,7 @@
 						num11 -= 260;
 						num12 += 26;
 					}
+
 					Main.spriteBatch.Draw(Main.flameTexture, value + zero + new Vector2((float)(26 * (j - 1) + num11), 32f + ((float)Main.flameTexture.Height - (float)Main.flameTexture.Height * num8) / 2f + (float)num12), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.bubbleTexture.Width, Main.bubbleTexture.Height)), new Microsoft.Xna.Framework.Color(num9, num9, num9, num9), 0f, default(Vector2), num8, SpriteEffects.None, 0f);
 				}
 			}
@@ -37463,6 +_,7 @@
 				{
 					text = Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].AffixName();
 				}
+
 				Vector2 vector = Main.fontMouseText.MeasureString(text) / 2f;
 				Main.spriteBatch.DrawString(Main.fontMouseText, text, new Vector2(236f - vector.X, 0f), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 				int num = 20;
@@ -37479,6 +_,7 @@
 					{
 						Main.hotbarScale[i] -= 0.05f;
 					}
+
 					float num2 = Main.hotbarScale[i];
 					int num3 = (int)(20f + 22f * (1f - num2));
 					int a = (int)(75f + 150f * num2);
@@ -37491,26 +_,30 @@
 						{
 							Main.player[Main.myPlayer].changeItem = i;
 						}
+
 						Main.hoverItemName = Main.player[Main.myPlayer].inventory[i].AffixName();
 						if (Main.player[Main.myPlayer].inventory[i].stack > 1)
 						{
 							object obj = Main.hoverItemName;
 							Main.hoverItemName = string.Concat(new object[]
-								{
-									obj,
+							{
+								obj,
 									" (",
 									Main.player[Main.myPlayer].inventory[i].stack,
 									")"
-								});
-						}
+							});
+						}
+
 						Main.rare = Main.player[Main.myPlayer].inventory[i].rare;
 					}
+
 					float num4 = Main.inventoryScale;
 					Main.inventoryScale = num2;
 					ItemSlot.Draw(Main.spriteBatch, Main.player[Main.myPlayer].inventory, 13, i, new Vector2((float)num, (float)num3), lightColor);
 					Main.inventoryScale = num4;
 					num += (int)((float)Main.inventoryBackTexture.Width * Main.hotbarScale[i]) + 4;
 				}
+
 				int selectedItem = Main.player[Main.myPlayer].selectedItem;
 				if (selectedItem >= 10 && (selectedItem != 58 || Main.mouseItem.type > 0))
 				{
@@ -37545,6 +_,7 @@
 			{
 				return;
 			}
+
 			Main.player[Main.myPlayer].hair = Main.oldHairStyle;
 			Main.player[Main.myPlayer].hairColor = Main.oldHairColor;
 			Main.hairWindow = false;
@@ -37552,6 +_,7 @@
 			{
 				Main.player[Main.myPlayer].talkNPC = -1;
 			}
+
 			Main.PlaySound(11, -1, -1, 1, 1f, 0f);
 		}
 
@@ -37571,10 +_,12 @@
 			{
 				num += 10;
 			}
+
 			if (NPC.downedMartians && NPC.downedMoonlord)
 			{
 				num++;
 			}
+
 			return num;
 		}
 
@@ -37585,6 +_,7 @@
 				Main.CancelHairWindow();
 				return;
 			}
+
 			int num = Main.UnlockedMaxHair();
 			int num2 = Main.screenHeight / 2 + 60;
 			int num3 = Main.screenWidth / 2 - Main.hairStyleBackTexture.Width / 2;
@@ -37612,13 +_,16 @@
 						Main.hairStart += 5;
 						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 					}
+
 					num8 -= num9;
 				}
 			}
+
 			if (Main.mouseX > num3 && Main.mouseX < num3 + Main.hairStyleBackTexture.Width && Main.mouseY > num2 && Main.mouseY < num2 + Main.hairStyleBackTexture.Height)
 			{
 				Main.player[Main.myPlayer].mouseInterface = true;
 			}
+
 			int num10 = num6 - 18;
 			int num11 = num7 + 74;
 			if (Main.hairStart > 1)
@@ -37632,8 +_,10 @@
 						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 					}
 				}
+
 				Main.spriteBatch.Draw(Main.scrollLeftButtonTexture, new Vector2((float)num10, (float)num11), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.craftUpButtonTexture.Width, Main.craftUpButtonTexture.Height)), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 			}
+
 			if (Main.hairStart + 15 < num)
 			{
 				num10 += 296;
@@ -37646,16 +_,20 @@
 						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 					}
 				}
+
 				Main.spriteBatch.Draw(Main.scrollRightButtonTexture, new Vector2((float)num10, (float)num11), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.craftUpButtonTexture.Width, Main.craftUpButtonTexture.Height)), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 			}
+
 			if (Main.hairStart + 15 >= num)
 			{
 				Main.hairStart = num - 15;
 			}
+
 			if (Main.hairStart < 0)
 			{
 				Main.hairStart = 0;
 			}
+
 			int num12 = 0;
 			if (Main.oldHairStyle != Main.player[Main.myPlayer].hair)
 			{
@@ -37668,10 +_,12 @@
 					num12 += 10000;
 				}
 			}
+
 			if (Main.oldHairColor != Main.player[Main.myPlayer].hairColor)
 			{
 				num12 += 10000;
 			}
+
 			string text = "";
 			int num13 = 0;
 			int num14 = 0;
@@ -37682,79 +_,89 @@
 			{
 				num17 = 0;
 			}
+
 			num12 = num17;
 			if (num17 >= 1000000)
 			{
 				num13 = num17 / 1000000;
 				num17 -= num13 * 1000000;
 			}
+
 			if (num17 >= 10000)
 			{
 				num14 = num17 / 10000;
 				num17 -= num14 * 10000;
 			}
+
 			if (num17 >= 100)
 			{
 				num15 = num17 / 100;
 				num17 -= num15 * 100;
 			}
+
 			if (num17 >= 1)
 			{
 				num16 = num17;
 			}
+
 			if (num13 > 0)
 			{
 				object obj = text;
 				text = string.Concat(new object[]
-					{
-						obj,
+				{
+					obj,
 						num13,
 						" ",
 						Lang.inter[15],
 						" "
-					});
-			}
+				});
+			}
+
 			if (num14 > 0)
 			{
 				object obj = text;
 				text = string.Concat(new object[]
-					{
-						obj,
+				{
+					obj,
 						num14,
 						" ",
 						Lang.inter[16],
 						" "
-					});
-			}
+				});
+			}
+
 			if (num15 > 0)
 			{
 				object obj = text;
 				text = string.Concat(new object[]
-					{
-						obj,
+				{
+					obj,
 						num15,
 						" ",
 						Lang.inter[17],
 						" "
-					});
-			}
+				});
+			}
+
 			if (num16 > 0)
 			{
 				object obj = text;
 				text = string.Concat(new object[]
-					{
-						obj,
+				{
+					obj,
 						num16,
 						" ",
 						Lang.inter[18],
 						" "
-					});
-			}
+				});
+			}
+
 			string textValue = Language.GetTextValue("GameUI.BuyWithValue", text);
 			if (num12 == 0)
 			{
 				textValue = Language.GetTextValue("GameUI.Buy");
 			}
+
 			int num18 = (int)((Main.mouseTextColor * 2 + 255) / 3);
 			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(num18, (int)((double)num18 / 1.1), num18 / 2, num18);
 			float scale = 0.9f;
@@ -37765,6 +_,7 @@
 			{
 				ItemSlot.DrawSavings(Main.spriteBatch, (float)num19, (float)(num20 - 70), true);
 			}
+
 			if (num12 > 0 && Main.mouseX > num19 && (float)Main.mouseX < (float)num19 + Main.fontMouseText.MeasureString(text2).X && Main.mouseY > num20 && (float)Main.mouseY < (float)num20 + Main.fontMouseText.MeasureString(text2).Y)
 			{
 				scale = 1.1f;
@@ -37772,6 +_,7 @@
 				{
 					Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 				}
+
 				Main.npcChatFocus1 = true;
 				Main.player[Main.myPlayer].releaseUseItem = false;
 			}
@@ -37781,8 +_,10 @@
 				{
 					Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 				}
+
 				Main.npcChatFocus1 = false;
 			}
+
 			Vector2 vector = Main.fontMouseText.MeasureString(text2);
 			vector *= 0.5f;
 			UILinkPointNavigator.SetPosition(2603, new Vector2((float)num19, (float)num20) + vector);
@@ -37795,18 +_,22 @@
 				{
 					num21 -= 2;
 				}
+
 				if (i == 1)
 				{
 					num21 += 2;
 				}
+
 				if (i == 2)
 				{
 					num22 -= 2;
 				}
+
 				if (i == 3)
 				{
 					num22 += 2;
 				}
+
 				if (i == 4)
 				{
 					if (num12 == 0)
@@ -37818,8 +_,10 @@
 						color2 = color;
 					}
 				}
+
 				Main.spriteBatch.DrawString(Main.fontMouseText, text2, new Vector2((float)num21 + vector.X, (float)num22 + vector.Y), color2, 0f, vector, scale, SpriteEffects.None, 0f);
 			}
+
 			scale = 0.9f;
 			string textValue2 = Language.GetTextValue("GameUI.Cancel");
 			num19 += 130;
@@ -37830,6 +_,7 @@
 				{
 					Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 				}
+
 				Main.npcChatFocus2 = true;
 				Main.player[Main.myPlayer].releaseUseItem = false;
 			}
@@ -37839,8 +_,10 @@
 				{
 					Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 				}
+
 				Main.npcChatFocus2 = false;
 			}
+
 			vector = Main.fontMouseText.MeasureString(textValue2);
 			vector *= 0.5f;
 			UILinkPointNavigator.SetPosition(2604, new Vector2((float)num19, (float)num20) + vector);
@@ -37853,24 +_,30 @@
 				{
 					num23 -= 2;
 				}
+
 				if (j == 1)
 				{
 					num23 += 2;
 				}
+
 				if (j == 2)
 				{
 					num24 -= 2;
 				}
+
 				if (j == 3)
 				{
 					num24 += 2;
 				}
+
 				if (j == 4)
 				{
 					color3 = color;
 				}
+
 				Main.spriteBatch.DrawString(Main.fontMouseText, textValue2, new Vector2((float)num23 + vector.X, (float)num24 + vector.Y), color3, 0f, vector, scale, SpriteEffects.None, 0f);
 			}
+
 			if (Main.mouseLeft && Main.mouseLeftRelease)
 			{
 				if (Main.npcChatFocus1)
@@ -37887,11 +_,13 @@
 					return;
 				}
 			}
+
 			if (!Main.mouseLeft)
 			{
 				this.grabColorSlider = 0;
 				Main.blockMouse = false;
 			}
+
 			int num25 = 167;
 			Vector3 vector2 = Main.rgbToHsl(Main.selColor);
 			float num26 = vector2.X;
@@ -37912,12 +_,14 @@
 				num28 = Main.lBar;
 				Main.aBar = num29;
 			}
+
 			UILinkPointNavigator.SetPosition(2600, new Vector2((float)num5, (float)num4) + this.hueTexture.Size() / 2f);
 			Main.spriteBatch.Draw(this.hueTexture, new Vector2((float)num5, (float)num4), Microsoft.Xna.Framework.Color.White);
 			if ((Main.mouseX > num5 - 4 && Main.mouseX < num5 + this.hueTexture.Width + 4 && Main.mouseY > num4 - 4 && Main.mouseY < num4 + this.hueTexture.Height + 4) || this.grabColorSlider == 1)
 			{
 				Main.spriteBatch.Draw(Main.colorHighlightTexture, new Vector2((float)num5, (float)num4), Main.OurFavoriteColor);
 			}
+
 			Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num5 + (float)(this.hueTexture.Width - 2) * Main.hBar - (float)(Main.colorSliderTexture.Width / 2), (float)(num4 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
 			if (((Main.mouseX > num5 - 4 && Main.mouseX < num5 + this.hueTexture.Width + 4 && Main.mouseY > num4 - 4 && Main.mouseY < num4 + this.hueTexture.Height + 4) || this.grabColorSlider == 1) && Main.mouseLeft && !Main.blockMouse)
 			{
@@ -37928,12 +_,15 @@
 				{
 					num26 = 0f;
 				}
+
 				if (num26 > 1f)
 				{
 					num26 = 1f;
 				}
+
 				Main.hBar = num26;
 			}
+
 			num4 += 26;
 			UILinkPointNavigator.SetPosition(2601, new Vector2((float)num5, (float)num4) + Main.colorBarTexture.Size() / 2f);
 			Main.spriteBatch.Draw(Main.colorBarTexture, new Vector2((float)num5, (float)num4), Microsoft.Xna.Framework.Color.White);
@@ -37943,10 +_,12 @@
 				Microsoft.Xna.Framework.Color color4 = Main.hslToRgb(num26, saturation, num28);
 				Main.spriteBatch.Draw(Main.colorBlipTexture, new Vector2((float)(num5 + k + 5), (float)(num4 + 4)), color4);
 			}
+
 			if ((Main.mouseX > num5 - 4 && Main.mouseX < num5 + this.hueTexture.Width + 4 && Main.mouseY > num4 - 4 && Main.mouseY < num4 + this.hueTexture.Height + 4) || this.grabColorSlider == 2)
 			{
 				Main.spriteBatch.Draw(Main.colorHighlightTexture, new Vector2((float)num5, (float)num4), Main.OurFavoriteColor);
 			}
+
 			Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num5 + (float)(this.hueTexture.Width - 2) * Main.sBar - (float)(Main.colorSliderTexture.Width / 2), (float)(num4 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
 			if (((Main.mouseX > num5 - 4 && Main.mouseX < num5 + this.hueTexture.Width + 4 && Main.mouseY > num4 - 4 && Main.mouseY < num4 + this.hueTexture.Height + 4) || this.grabColorSlider == 2) && Main.mouseLeft && !Main.blockMouse)
 			{
@@ -37957,12 +_,15 @@
 				{
 					num27 = 0f;
 				}
+
 				if (num27 > 1f)
 				{
 					num27 = 1f;
 				}
+
 				Main.sBar = num27;
 			}
+
 			num4 += 26;
 			UILinkPointNavigator.SetPosition(2602, new Vector2((float)num5, (float)num4) + Main.colorBarTexture.Size() / 2f);
 			Main.spriteBatch.Draw(Main.colorBarTexture, new Vector2((float)num5, (float)num4), Microsoft.Xna.Framework.Color.White);
@@ -37973,10 +_,12 @@
 				Microsoft.Xna.Framework.Color color5 = Main.hslToRgb(num26, num27, luminosity);
 				Main.spriteBatch.Draw(Main.colorBlipTexture, new Vector2((float)(num5 + l + 5), (float)(num4 + 4)), color5);
 			}
+
 			if ((Main.mouseX > num5 - 4 && Main.mouseX < num5 + this.hueTexture.Width + 4 && Main.mouseY > num4 - 4 && Main.mouseY < num4 + this.hueTexture.Height + 4) || this.grabColorSlider == 3)
 			{
 				Main.spriteBatch.Draw(Main.colorHighlightTexture, new Vector2((float)num5, (float)num4), Main.OurFavoriteColor);
 			}
+
 			Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num5 + (float)(this.hueTexture.Width - 2) * ((Main.lBar - num30) / (1f - num30)) - (float)(Main.colorSliderTexture.Width / 2), (float)(num4 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
 			if (((Main.mouseX > num5 - 4 && Main.mouseX < num5 + this.hueTexture.Width + 4 && Main.mouseY > num4 - 4 && Main.mouseY < num4 + this.hueTexture.Height + 4) || this.grabColorSlider == 3) && Main.mouseLeft && !Main.blockMouse)
 			{
@@ -37987,13 +_,16 @@
 				{
 					num28 = 0f;
 				}
+
 				if (num28 > 1f)
 				{
 					num28 = 1f;
 				}
+
 				num28 = num28 * (1f - num30) + num30;
 				Main.lBar = num28;
 			}
+
 			Main.selColor = Main.hslToRgb(Main.hBar, Main.sBar, Main.lBar);
 			Main.player[Main.myPlayer].hairColor = Main.selColor;
 			int num31 = num6;
@@ -38013,12 +_,14 @@
 				{
 					Main.spriteBatch.Draw(Main.inventoryBack8Texture, new Vector2((float)num31, (float)num32), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 				}
+
 				if (Main.mouseX > num31 && Main.mouseX < num31 + Main.inventoryBackTexture.Width && Main.mouseY > num32 && Main.mouseY < num32 + Main.inventoryBackTexture.Height && Main.mouseLeft && Main.mouseLeftRelease)
 				{
 					Main.mouseLeftRelease = false;
 					Main.player[Main.myPlayer].hair = num35;
 					Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 				}
+
 				this.LoadHair(num35);
 				float x = (float)(num31 + Main.inventoryBackTexture.Width / 2 - Main.playerHairTexture[num35].Width / 2);
 				float y = (float)(num32 + 4);
@@ -38055,6 +_,7 @@
 			{
 				Main.dresserDummy = new Player();
 			}
+
 			Main.oldClothesStyle = Main.player[Main.myPlayer].skinVariant;
 		}
 
@@ -38064,11 +_,13 @@
 			{
 				return;
 			}
+
 			Main.clothesWindow = false;
 			if (!quiet)
 			{
 				Main.PlaySound(11, -1, -1, 1, 1f, 0f);
 			}
+
 			Main.player[Main.myPlayer].shirtColor = Main.oldClothesColor[0];
 			Main.player[Main.myPlayer].underShirtColor = Main.oldClothesColor[1];
 			Main.player[Main.myPlayer].pantsColor = Main.oldClothesColor[2];
@@ -38092,6 +_,7 @@
 				Main.CancelClothesWindow(false);
 				return;
 			}
+
 			int num = (int)(((double)Main.player[Main.myPlayer].position.X + (double)Main.player[Main.myPlayer].width * 0.5) / 16.0);
 			int num2 = (int)(((double)Main.player[Main.myPlayer].position.Y + (double)Main.player[Main.myPlayer].height * 0.5) / 16.0);
 			if (num < Main.dresserX - 5 || num > Main.dresserX + 6 || num2 < Main.dresserY - 4 || num2 > Main.dresserY + 5 || !Main.tile[Main.dresserX, Main.dresserY].active())
@@ -38099,6 +_,7 @@
 				Main.CancelClothesWindow(false);
 				return;
 			}
+
 			int num3 = 477;
 			int num4 = num3 / 2;
 			num4 = 124;
@@ -38115,23 +_,28 @@
 			{
 				Main.selColor = Main.player[Main.myPlayer].shirtColor;
 			}
+
 			if (Main.selClothes == 1)
 			{
 				Main.selColor = Main.player[Main.myPlayer].underShirtColor;
 			}
+
 			if (Main.selClothes == 2)
 			{
 				Main.selColor = Main.player[Main.myPlayer].pantsColor;
 			}
+
 			if (Main.selClothes == 3)
 			{
 				Main.selColor = Main.player[Main.myPlayer].shoeColor;
 			}
+
 			Utils.DrawInvBG(Main.spriteBatch, new Microsoft.Xna.Framework.Rectangle(num6, num5, num3, 133), default(Microsoft.Xna.Framework.Color));
 			if (!PlayerInput.IgnoreMouseInterface && Main.mouseX > num6 && Main.mouseX < num6 + Main.clothesStyleBackTexture.Width && Main.mouseY > num5 && Main.mouseY < num5 + Main.clothesStyleBackTexture.Height)
 			{
 				Main.player[Main.myPlayer].mouseInterface = true;
 			}
+
 			Vector2 value = new Vector2((float)(num6 + num3 / 2 - 16), (float)(num5 + 66 + Main.dresserDummy.height / 2 - 20));
 			value.Y += 18f;
 			value.X += 58f;
@@ -38150,6 +_,7 @@
 			{
 				flag2 = true;
 			}
+
 			Vector2 value2 = Main.fontMouseText.MeasureString(textValue);
 			UILinkPointNavigator.SetPosition(2803, new Vector2((float)num14, (float)num15) + value2 * num13 * 0.5f);
 			if (flag2 && Main.mouseX > num14 && (float)Main.mouseX < (float)num14 + value2.X && Main.mouseY > num15 && (float)Main.mouseY < (float)num15 + value2.Y)
@@ -38159,6 +_,7 @@
 				{
 					Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 				}
+
 				Main.npcChatFocus1 = true;
 				Main.player[Main.myPlayer].releaseUseItem = false;
 			}
@@ -38168,8 +_,10 @@
 				{
 					Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 				}
+
 				Main.npcChatFocus1 = false;
 			}
+
 			for (int i = 0; i < 5; i++)
 			{
 				int num16 = num14;
@@ -38179,18 +_,22 @@
 				{
 					num16 -= 2;
 				}
+
 				if (i == 1)
 				{
 					num16 += 2;
 				}
+
 				if (i == 2)
 				{
 					num17 -= 2;
 				}
+
 				if (i == 3)
 				{
 					num17 += 2;
 				}
+
 				if (i == 4)
 				{
 					if (!flag2)
@@ -38202,10 +_,12 @@
 						color2 = color;
 					}
 				}
+
 				Vector2 vector = Main.fontMouseText.MeasureString(textValue);
 				vector *= 0.5f;
 				Main.spriteBatch.DrawString(Main.fontMouseText, textValue, new Vector2((float)num16 + vector.X, (float)num17 + vector.Y), color2, 0f, vector, num13, SpriteEffects.None, 0f);
 			}
+
 			num13 = 0.9f;
 			string textValue2 = Language.GetTextValue("GameUI.Cancel");
 			num14 += 130;
@@ -38218,6 +_,7 @@
 				{
 					Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 				}
+
 				Main.npcChatFocus2 = true;
 				Main.player[Main.myPlayer].releaseUseItem = false;
 			}
@@ -38227,8 +_,10 @@
 				{
 					Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 				}
+
 				Main.npcChatFocus2 = false;
 			}
+
 			for (int j = 0; j < 5; j++)
 			{
 				int num18 = num14;
@@ -38238,26 +_,32 @@
 				{
 					num18 -= 2;
 				}
+
 				if (j == 1)
 				{
 					num18 += 2;
 				}
+
 				if (j == 2)
 				{
 					num19 -= 2;
 				}
+
 				if (j == 3)
 				{
 					num19 += 2;
 				}
+
 				if (j == 4)
 				{
 					color3 = color;
 				}
+
 				Vector2 vector2 = Main.fontMouseText.MeasureString(textValue2);
 				vector2 *= 0.5f;
 				Main.spriteBatch.DrawString(Main.fontMouseText, textValue2, new Vector2((float)num18 + vector2.X, (float)num19 + vector2.Y), color3, 0f, vector2, num13, SpriteEffects.None, 0f);
 			}
+
 			if (Main.mouseLeft && Main.mouseLeftRelease)
 			{
 				if (Main.npcChatFocus1)
@@ -38265,17 +_,20 @@
 					Main.SaveClothesWindow();
 					return;
 				}
+
 				if (Main.npcChatFocus2)
 				{
 					Main.CancelClothesWindow(false);
 					return;
 				}
 			}
+
 			if (!Main.mouseLeft)
 			{
 				this.grabColorSlider = 0;
 				Main.blockMouse = false;
 			}
+
 			int num20 = 167;
 			Vector3 vector3 = Main.rgbToHsl(Main.selColor);
 			float num21 = vector3.X;
@@ -38293,11 +_,13 @@
 				num22 = Main.sBar;
 				num23 = Main.lBar;
 			}
+
 			Main.spriteBatch.Draw(this.hueTexture, new Vector2((float)num8, (float)num7), Microsoft.Xna.Framework.Color.White);
 			if ((Main.mouseX > num8 - 4 && Main.mouseX < num8 + this.hueTexture.Width + 4 && Main.mouseY > num7 - 4 && Main.mouseY < num7 + this.hueTexture.Height + 4) || this.grabColorSlider == 1)
 			{
 				Main.spriteBatch.Draw(Main.colorHighlightTexture, new Vector2((float)num8, (float)num7), Main.OurFavoriteColor);
 			}
+
 			Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num8 + (float)(this.hueTexture.Width - 2) * Main.hBar - (float)(Main.colorSliderTexture.Width / 2), (float)(num7 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
 			if (((Main.mouseX > num8 - 4 && Main.mouseX < num8 + this.hueTexture.Width + 4 && Main.mouseY > num7 - 4 && Main.mouseY < num7 + this.hueTexture.Height + 4) || this.grabColorSlider == 1) && Main.mouseLeft && !Main.blockMouse)
 			{
@@ -38308,12 +_,15 @@
 				{
 					num21 = 0f;
 				}
+
 				if (num21 > 1f)
 				{
 					num21 = 1f;
 				}
+
 				Main.hBar = num21;
 			}
+
 			UILinkPointNavigator.SetPosition(2800, new Vector2((float)num8, (float)num7) + this.hueTexture.Size() / 2f);
 			num7 += 26;
 			Main.spriteBatch.Draw(Main.colorBarTexture, new Vector2((float)num8, (float)num7), Microsoft.Xna.Framework.Color.White);
@@ -38323,10 +_,12 @@
 				Microsoft.Xna.Framework.Color color4 = Main.hslToRgb(num21, saturation, num23);
 				Main.spriteBatch.Draw(Main.colorBlipTexture, new Vector2((float)(num8 + k + 5), (float)(num7 + 4)), color4);
 			}
+
 			if ((Main.mouseX > num8 - 4 && Main.mouseX < num8 + this.hueTexture.Width + 4 && Main.mouseY > num7 - 4 && Main.mouseY < num7 + this.hueTexture.Height + 4) || this.grabColorSlider == 2)
 			{
 				Main.spriteBatch.Draw(Main.colorHighlightTexture, new Vector2((float)num8, (float)num7), Main.OurFavoriteColor);
 			}
+
 			Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num8 + (float)(this.hueTexture.Width - 2) * Main.sBar - (float)(Main.colorSliderTexture.Width / 2), (float)(num7 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
 			if (((Main.mouseX > num8 - 4 && Main.mouseX < num8 + this.hueTexture.Width + 4 && Main.mouseY > num7 - 4 && Main.mouseY < num7 + this.hueTexture.Height + 4) || this.grabColorSlider == 2) && Main.mouseLeft && !Main.blockMouse)
 			{
@@ -38337,12 +_,15 @@
 				{
 					num22 = 0f;
 				}
+
 				if (num22 > 1f)
 				{
 					num22 = 1f;
 				}
+
 				Main.sBar = num22;
 			}
+
 			UILinkPointNavigator.SetPosition(2801, new Vector2((float)num8, (float)num7) + this.hueTexture.Size() / 2f);
 			num7 += 26;
 			Main.spriteBatch.Draw(Main.colorBarTexture, new Vector2((float)num8, (float)num7), Microsoft.Xna.Framework.Color.White);
@@ -38353,10 +_,12 @@
 				Microsoft.Xna.Framework.Color color5 = Main.hslToRgb(num21, num22, luminosity);
 				Main.spriteBatch.Draw(Main.colorBlipTexture, new Vector2((float)(num8 + l + 5), (float)(num7 + 4)), color5);
 			}
+
 			if ((Main.mouseX > num8 - 4 && Main.mouseX < num8 + this.hueTexture.Width + 4 && Main.mouseY > num7 - 4 && Main.mouseY < num7 + this.hueTexture.Height + 4) || this.grabColorSlider == 3)
 			{
 				Main.spriteBatch.Draw(Main.colorHighlightTexture, new Vector2((float)num8, (float)num7), Main.OurFavoriteColor);
 			}
+
 			Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num8 + (float)(this.hueTexture.Width - 2) * ((Main.lBar - num24) / (1f - num24)) - (float)(Main.colorSliderTexture.Width / 2), (float)(num7 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
 			if (((Main.mouseX > num8 - 4 && Main.mouseX < num8 + this.hueTexture.Width + 4 && Main.mouseY > num7 - 4 && Main.mouseY < num7 + this.hueTexture.Height + 4) || this.grabColorSlider == 3) && Main.mouseLeft && !Main.blockMouse)
 			{
@@ -38367,31 +_,38 @@
 				{
 					num23 = 0f;
 				}
+
 				if (num23 > 1f)
 				{
 					num23 = 1f;
 				}
+
 				num23 = num23 * (1f - num24) + num24;
 				Main.lBar = num23;
 			}
+
 			UILinkPointNavigator.SetPosition(2802, new Vector2((float)num8, (float)num7) + this.hueTexture.Size() / 2f);
 			Main.selColor = Main.hslToRgb(Main.hBar, Main.sBar, Main.lBar);
 			if (Main.selClothes == 0)
 			{
 				Main.player[Main.myPlayer].shirtColor = Main.selColor;
 			}
+
 			if (Main.selClothes == 1)
 			{
 				Main.player[Main.myPlayer].underShirtColor = Main.selColor;
 			}
+
 			if (Main.selClothes == 2)
 			{
 				Main.player[Main.myPlayer].pantsColor = Main.selColor;
 			}
+
 			if (Main.selClothes == 3)
 			{
 				Main.player[Main.myPlayer].shoeColor = Main.selColor;
 			}
+
 			int num25 = num9;
 			int num26 = num10;
 			num26 -= 8;
@@ -38405,6 +_,7 @@
 				{
 					Main.spriteBatch.Draw(Main.inventoryBack8Texture, new Vector2((float)num25, (float)num26), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 				}
+
 				if (Main.mouseX > num25 && Main.mouseX < num25 + Main.inventoryBackTexture.Width && Main.mouseY > num26 && Main.mouseY < num26 + Main.inventoryBackTexture.Height && Main.mouseLeft && Main.mouseLeftRelease)
 				{
 					Main.mouseLeftRelease = false;
@@ -38414,6 +_,7 @@
 					Main.lBar = -1f;
 					Main.sBar = -1f;
 				}
+
 				float x = (float)(num25 + Main.inventoryBackTexture.Width / 2 - Main.clothesTexture[m].Width / 2);
 				float y = (float)(num26 + Main.inventoryBackTexture.Height / 2 - Main.clothesTexture[m].Height / 2);
 				Microsoft.Xna.Framework.Color color6 = Microsoft.Xna.Framework.Color.White;
@@ -38421,18 +_,22 @@
 				{
 					color6 = Main.player[Main.myPlayer].shirtColor;
 				}
+
 				if (m == 1)
 				{
 					color6 = Main.player[Main.myPlayer].underShirtColor;
 				}
+
 				if (m == 2)
 				{
 					color6 = Main.player[Main.myPlayer].pantsColor;
 				}
+
 				if (m == 3)
 				{
 					color6 = Main.player[Main.myPlayer].shoeColor;
 				}
+
 				Main.spriteBatch.Draw(Main.clothesTexture[m], new Vector2(x, y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.clothesTexture[m].Width, Main.clothesTexture[m].Height)), color6, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 				UILinkPointNavigator.SetPosition(2806 + m, new Vector2(x, y) + Main.clothesTexture[m].Size() * 0.75f);
 				num25 += 56;
@@ -38442,6 +_,7 @@
 					num26 += 56;
 				}
 			}
+
 			Main.dresserDummy.skinVariant = Main.player[Main.myPlayer].skinVariant;
 			Main.dresserDummy.eyeColor = Main.player[Main.myPlayer].eyeColor;
 			Main.dresserDummy.hairColor = Main.player[Main.myPlayer].hairColor;
@@ -38466,6 +_,7 @@
 					Main.CycleClothingStyle(Main.player[Main.myPlayer]);
 				}
 			}
+
 			UILinkPointNavigator.SetPosition(2805, r.Center.ToVector2());
 			Utils.DrawInvBG(Main.spriteBatch, r, c);
 			this.DrawPlayer(Main.dresserDummy, Main.dresserDummy.position, Main.dresserDummy.fullRotation, Main.dresserDummy.fullRotationOrigin, 0f);
@@ -38481,204 +_,205 @@
 			{
 				return;
 			}
+
 			this._needToSetupDrawInterfaceLayers = false;
 			this._drawInterfaceLayers = new List<MethodSequenceListItem>();
 			List<MethodSequenceListItem> arg_605_0 = this._drawInterfaceLayers;
 			MethodSequenceListItem[] array = new MethodSequenceListItem[42];
 			array[0] = new MethodSequenceListItem("Vanilla: Interface Logic 1", delegate
-				{
-					Main.DrawInterface_0_InterfaceLogic1();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_0_InterfaceLogic1();
+				return true;
+			}, null);
 			array[1] = new MethodSequenceListItem("Vanilla: Emote Bubbles", delegate
-				{
-					Main.DrawInterface_1_EmoteBubbles();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_1_EmoteBubbles();
+				return true;
+			}, null);
 			array[2] = new MethodSequenceListItem("Vanilla: Smart Cursor Targets", delegate
-				{
-					Main.DrawInterface_2_SmartCursorTargets();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_2_SmartCursorTargets();
+				return true;
+			}, null);
 			array[3] = new MethodSequenceListItem("Vanilla: Laser Ruler", delegate
-				{
-					Main.DrawInterface_3_LaserRuler();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_3_LaserRuler();
+				return true;
+			}, null);
 			array[4] = new MethodSequenceListItem("Vanilla: Ruler", delegate
-				{
-					Main.DrawInterface_4_Ruler();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_4_Ruler();
+				return true;
+			}, null);
 			array[5] = new MethodSequenceListItem("Vanilla: Gamepad Lock On", delegate
-				{
-					Main.DrawInterface_5_GamepadLockOn();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_5_GamepadLockOn();
+				return true;
+			}, null);
 			array[6] = new MethodSequenceListItem("Vanilla: Tile Grid Option", delegate
-				{
-					Main.DrawInterface_6_TileGridOption();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_6_TileGridOption();
+				return true;
+			}, null);
 			array[7] = new MethodSequenceListItem("Vanilla: Town NPC House Banners", delegate
-				{
-					this.DrawInterface_7_TownNPCHouseBanners();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_7_TownNPCHouseBanners();
+				return true;
+			}, null);
 			array[8] = new MethodSequenceListItem("Vanilla: Hide UI Toggle", new Func<bool>(Main.DrawInterface_8_CheckF11UIHideToggle), null);
 			array[9] = new MethodSequenceListItem("Vanilla: Wire Selection", delegate
-				{
-					Main.DrawInterface_9_WireSelection();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_9_WireSelection();
+				return true;
+			}, null);
 			array[10] = new MethodSequenceListItem("Vanilla: Capture Manager Check", new Func<bool>(Main.DrawInterface_10_CheckCaptureManager), null);
 			array[11] = new MethodSequenceListItem("Vanilla: Ingame Options", new Func<bool>(this.DrawInterface_11_IngameOptionsMenu), null);
 			array[12] = new MethodSequenceListItem("Vanilla: Fancy UI", new Func<bool>(Main.DrawInterface_12_IngameFancyUI), null);
 			array[13] = new MethodSequenceListItem("Vanilla: Achievement Complete Popups", delegate
-				{
-					Main.DrawInterface_13_AchievementCompletePopups();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_13_AchievementCompletePopups();
+				return true;
+			}, null);
 			array[14] = new MethodSequenceListItem("Vanilla: Entity Health Bars", delegate
-				{
-					this.DrawInterface_14_EntityHealthBars();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_14_EntityHealthBars();
+				return true;
+			}, null);
 			array[15] = new MethodSequenceListItem("Vanilla: Invasion Progress Bars", delegate
-				{
-					Main.DrawInterface_15_InvasionProgressBars();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_15_InvasionProgressBars();
+				return true;
+			}, null);
 			array[16] = new MethodSequenceListItem("Vanilla: Map / Minimap", delegate
-				{
-					this.DrawInterface_16_MapOrMinimap();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_16_MapOrMinimap();
+				return true;
+			}, null);
 			array[17] = new MethodSequenceListItem("Vanilla: Diagnose Net", delegate
-				{
-					Main.DrawInterface_17_DiagnoseNet();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_17_DiagnoseNet();
+				return true;
+			}, null);
 			array[18] = new MethodSequenceListItem("Vanilla: Diagnose Video", delegate
-				{
-					Main.DrawInterface_18_DiagnoseVideo();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_18_DiagnoseVideo();
+				return true;
+			}, null);
 			array[19] = new MethodSequenceListItem("Vanilla: Sign Tile Bubble", delegate
-				{
-					Main.DrawInterface_19_SignTileBubble();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_19_SignTileBubble();
+				return true;
+			}, null);
 			array[20] = new MethodSequenceListItem("Vanilla: MP Player Names", delegate
-				{
-					Main.DrawInterface_20_MultiplayerPlayerNames();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_20_MultiplayerPlayerNames();
+				return true;
+			}, null);
 			array[21] = new MethodSequenceListItem("Vanilla: Hair Window", delegate
-				{
-					this.DrawInterface_21_HairWindow();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_21_HairWindow();
+				return true;
+			}, null);
 			array[22] = new MethodSequenceListItem("Vanilla: Dresser Window", delegate
-				{
-					this.DrawInterface_22_DresserWindow();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_22_DresserWindow();
+				return true;
+			}, null);
 			array[23] = new MethodSequenceListItem("Vanilla: NPC / Sign Dialog", delegate
-				{
-					this.DrawInterface_23_NPCSignsDialog();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_23_NPCSignsDialog();
+				return true;
+			}, null);
 			array[24] = new MethodSequenceListItem("Vanilla: Interface Logic 2", delegate
-				{
-					Main.DrawInterface_24_InterfaceLogic2();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_24_InterfaceLogic2();
+				return true;
+			}, null);
 			array[25] = new MethodSequenceListItem("Vanilla: Resource Bars", delegate
-				{
-					this.DrawInterface_25_ResourceBars();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_25_ResourceBars();
+				return true;
+			}, null);
 			array[26] = new MethodSequenceListItem("Vanilla: Interface Logic 3", delegate
-				{
-					Main.DrawInterface_26_InterfaceLogic3();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_26_InterfaceLogic3();
+				return true;
+			}, null);
 			array[27] = new MethodSequenceListItem("Vanilla: Inventory", delegate
-				{
-					this.DrawInterface_27_Inventory();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_27_Inventory();
+				return true;
+			}, null);
 			array[28] = new MethodSequenceListItem("Vanilla: Info Accessories Bar", delegate
-				{
-					this.DrawInterface_28_InfoAccs();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_28_InfoAccs();
+				return true;
+			}, null);
 			array[29] = new MethodSequenceListItem("Vanilla: Settings Button", delegate
-				{
-					Main.DrawInterface_29_SettingsButton();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_29_SettingsButton();
+				return true;
+			}, null);
 			array[30] = new MethodSequenceListItem("Vanilla: Hotbar", delegate
-				{
-					this.DrawInterface_30_Hotbar();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_30_Hotbar();
+				return true;
+			}, null);
 			array[31] = new MethodSequenceListItem("Vanilla: Builder Accessories Bar", delegate
-				{
-					this.DrawInterface_31_BuilderAccToggles();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_31_BuilderAccToggles();
+				return true;
+			}, null);
 			array[32] = new MethodSequenceListItem("Vanilla: Radial Hotbars", delegate
-				{
-					Main.DrawInterface_32_GamepadRadialHotbars();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_32_GamepadRadialHotbars();
+				return true;
+			}, null);
 			array[33] = new MethodSequenceListItem("Vanilla: Mouse Text", delegate
-				{
-					this.DrawInterface_33_MouseText();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_33_MouseText();
+				return true;
+			}, null);
 			array[34] = new MethodSequenceListItem("Vanilla: Player Chat", delegate
-				{
-					this.DrawInterface_34_PlayerChat();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_34_PlayerChat();
+				return true;
+			}, null);
 			array[35] = new MethodSequenceListItem("Vanilla: Death Text", delegate
-				{
-					Main.DrawInterface_35_YouDied();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_35_YouDied();
+				return true;
+			}, null);
 			array[36] = new MethodSequenceListItem("Vanilla: Cursor", delegate
-				{
-					Main.DrawInterface_36_Cursor();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_36_Cursor();
+				return true;
+			}, null);
 			array[37] = new MethodSequenceListItem("Vanilla: Debug Stuff", delegate
-				{
-					Main.DrawInterface_37_DebugStuff();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_37_DebugStuff();
+				return true;
+			}, null);
 			array[38] = new MethodSequenceListItem("Vanilla: Mouse Item / NPC Head", delegate
-				{
-					this.DrawInterface_38_MouseCarriedObject();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_38_MouseCarriedObject();
+				return true;
+			}, null);
 			array[39] = new MethodSequenceListItem("Vanilla: Mouse Over", delegate
-				{
-					this.DrawInterface_39_MouseOver();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_39_MouseOver();
+				return true;
+			}, null);
 			array[40] = new MethodSequenceListItem("Vanilla: Interact Item Icon", delegate
-				{
-					this.DrawInterface_40_InteractItemIcon();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_40_InteractItemIcon();
+				return true;
+			}, null);
 			array[41] = new MethodSequenceListItem("Vanilla: Interface Logic 4", delegate
-				{
-					Main.DrawInterface_41_InterfaceLogic4();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_41_InterfaceLogic4();
+				return true;
+			}, null);
 			arg_605_0.AddRange(array);
 		}
 
@@ -38689,11 +_,14 @@
 			{
 				this.SetupDrawInterfaceLayers();
 			}
+
 			List<MethodSequenceListItem> list = new List<MethodSequenceListItem>(this._drawInterfaceLayers);
 			foreach (MethodSequenceListItem current in list)
 			{
 				current.Skip = false;
 			}
+
+			ModHooks.ModifyInterfaceLayers(list);
 			MethodSequenceListItem.ExecuteSequence(list);
 		}
 
@@ -38707,6 +_,7 @@
 			{
 				Main.npcChatRelease = true;
 			}
+
 			Main.cursorOverride = -1;
 			Main._MouseOversCanClear = true;
 		}
@@ -38718,6 +_,7 @@
 			{
 				num = Main.player[Main.myPlayer].showItemIcon2;
 			}
+
 			bool flag = Main.player[Main.myPlayer].showItemIcon && (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type > 0 || Main.player[Main.myPlayer].showItemIcon2 != 0);
 			Main.ItemIconCacheVerification();
 			bool flag2 = Main._itemIconCacheTime > 0 && Main.mouseItem.type < 1;
@@ -38729,6 +_,7 @@
 				{
 					Utils.Swap<int>(ref itemIconCacheSelectedItemID, ref Main.player[Main.myPlayer].showItemIcon2);
 				}
+
 				Microsoft.Xna.Framework.Color color = Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].GetAlpha(Microsoft.Xna.Framework.Color.White);
 				Microsoft.Xna.Framework.Color color2 = Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].GetColor(Microsoft.Xna.Framework.Color.White);
 				if (Main.player[Main.myPlayer].showItemIcon2 != 0)
@@ -38736,10 +_,12 @@
 					color = Microsoft.Xna.Framework.Color.White;
 					color2 = default(Microsoft.Xna.Framework.Color);
 				}
+
 				if (Main.player[Main.myPlayer].showItemIcon2 == 269)
 				{
 					color = Main.player[Main.myPlayer].shirtColor;
 				}
+
 				float scale = Main.cursorScale;
 				ItemSlot.GetItemLight(ref color, num, false);
 				SpriteEffects effects = SpriteEffects.None;
@@ -38747,18 +_,22 @@
 				{
 					effects = SpriteEffects.FlipHorizontally;
 				}
+
 				if (num > 0)
 				{
 					Main.spriteBatch.Draw(Main.itemTexture[num], new Vector2((float)(Main.mouseX + 10), (float)(Main.mouseY + 10)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[num].Width, Main.itemTexture[num].Height)), color, 0f, default(Vector2), scale, effects, 0f);
 				}
+
 				if (Main.player[Main.myPlayer].showItemIconText != "")
 				{
 					this.MouseText(Main.player[Main.myPlayer].showItemIconText, 0, 0);
 				}
+
 				if (Main.player[Main.myPlayer].showItemIcon2 == 0 && Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].color != default(Microsoft.Xna.Framework.Color))
 				{
 					Main.spriteBatch.Draw(Main.itemTexture[Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type], new Vector2((float)(Main.mouseX + 10), (float)(Main.mouseY + 10)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type].Width, Main.itemTexture[Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type].Height)), color2, 0f, default(Vector2), scale, SpriteEffects.None, 0f);
 				}
+
 				if (!flag)
 				{
 					Utils.Swap<int>(ref itemIconCacheSelectedItemID, ref Main.player[Main.myPlayer].showItemIcon2);
@@ -38781,6 +_,7 @@
 					return;
 				}
 			}
+
 			this.DrawMouseOver();
 		}
 
@@ -38798,6 +_,7 @@
 				Main.inventoryScale = num;
 				return;
 			}
+
 			if (this.mouseNPC > -1)
 			{
 				float num2 = 1f;
@@ -38812,6 +_,7 @@
 						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 						this.mouseNPC = -1;
 					}
+
 					if (Main.mouseLeft && Main.mouseLeftRelease)
 					{
 						if (this.mouseNPC == 0)
@@ -38822,6 +_,7 @@
 							{
 								y = (int)((Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY) / 16f);
 							}
+
 							int n = -1;
 							if (WorldGen.MoveNPC(x, y, n))
 							{
@@ -38840,6 +_,7 @@
 									break;
 								}
 							}
+
 							if (num3 >= 0)
 							{
 								int x2 = (int)(((float)Main.mouseX + Main.screenPosition.X) / 16f);
@@ -38884,14 +_,15 @@
 					num = 0.7f;
 					value = new Vector2(0.1f);
 				}
+
 				switch (Main.cursorOverride)
 				{
 					case 2:
 						flag = false;
-						white = Microsoft.Xna.Framework.Color.White;
-						num = 0.7f;
-						value = new Vector2(0.1f);
-						break;
+					white = Microsoft.Xna.Framework.Color.White;
+					num = 0.7f;
+					value = new Vector2(0.1f);
+					break;
 					case 3:
 					case 6:
 					case 7:
@@ -38899,13 +_,15 @@
 					case 9:
 					case 10:
 						flag = false;
-						white = Microsoft.Xna.Framework.Color.White;
-						break;
-				}
+					white = Microsoft.Xna.Framework.Color.White;
+					break;
+				}
+
 				if (flag)
 				{
 					Main.spriteBatch.Draw(Main.cursorTextures[Main.cursorOverride], new Vector2((float)(Main.mouseX + 1), (float)(Main.mouseY + 1)), null, color, rotation, value * Main.cursorTextures[Main.cursorOverride].Size(), Main.cursorScale * 1.1f * num, SpriteEffects.None, 0f);
 				}
+
 				if (flag2)
 				{
 					Main.spriteBatch.Draw(Main.cursorTextures[Main.cursorOverride], new Vector2((float)Main.mouseX, (float)Main.mouseY), null, white, rotation, value * Main.cursorTextures[Main.cursorOverride].Size(), Main.cursorScale * num, SpriteEffects.None, 0f);
@@ -38920,6 +_,7 @@
 					Main.DrawCursor(bonus, true);
 					return;
 				}
+
 				Vector2 bonus2 = Main.DrawThickCursor(false);
 				Main.DrawCursor(bonus2, false);
 			}
@@ -38954,15 +_,19 @@
 					return;
 				}
 			}
+
 			this.DrawPlayerChat();
 		}
 
 		private void DrawInterface_33_MouseText()
 		{
+			// TODO - UI Sorting and selective disable support -  move this to new one between 32 and 33
+			ModLoader.ModHooks.PostDrawInterface(Main.spriteBatch);
 			if (Main.mouseItem.stack <= 0)
 			{
 				Main.mouseItem.type = 0;
 			}
+
 			if (Main.hoverItemName != null && Main.hoverItemName != "" && Main.mouseItem.type == 0)
 			{
 				Main.player[Main.myPlayer].showItemIcon = false;
@@ -38996,6 +_,7 @@
 				{
 					num -= 140;
 				}
+
 				float num3 = vector.X / vector2.X;
 				if (Main.mouseExit)
 				{
@@ -39008,6 +_,7 @@
 				{
 					Main.exitScale -= 0.02f;
 				}
+
 				UILinkPointNavigator.SetPosition(308, new Vector2((float)num, (float)num2));
 				for (int i = 0; i < 5; i++)
 				{
@@ -39018,24 +_,30 @@
 					{
 						num4 = -2;
 					}
+
 					if (i == 1)
 					{
 						num4 = 2;
 					}
+
 					if (i == 2)
 					{
 						num5 = -2;
 					}
+
 					if (i == 3)
 					{
 						num5 = 2;
 					}
+
 					if (i == 4)
 					{
 						color = Microsoft.Xna.Framework.Color.White;
 					}
+
 					Main.spriteBatch.DrawString(Main.fontDeathText, text, new Vector2((float)(num + num4), (float)(num2 + num5)), color, 0f, new Vector2(vector3.X / 2f, vector3.Y / 2f), (Main.exitScale - 0.2f) * num3, SpriteEffects.None, 0f);
 				}
+
 				if ((float)Main.mouseX > (float)num - vector3.X / 2f && (float)Main.mouseX < (float)num + vector3.X / 2f && (float)Main.mouseY > (float)num2 - vector3.Y / 2f && (float)Main.mouseY < (float)num2 + vector3.Y / 2f - 10f)
 				{
 					if (!PlayerInput.IgnoreMouseInterface)
@@ -39044,6 +_,7 @@
 						{
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 						}
+
 						Main.mouseExit = true;
 						Main.player[Main.myPlayer].mouseInterface = true;
 						if (Main.mouseLeftRelease && Main.mouseLeft)
@@ -39084,9 +_,11 @@
 						return;
 					}
 				}
+
 				this.DrawInventory();
 				return;
 			}
+
 			Main.recFastScroll = true;
 			this.mouseNPC = -1;
 			Main.EquipPage = 0;
@@ -39098,6 +_,7 @@
 			{
 				Main.playerInventory = false;
 			}
+
 			if (!Main.playerInventory)
 			{
 				Main.player[Main.myPlayer].chest = -1;
@@ -39105,9 +_,11 @@
 				{
 					Main.InGuideCraftMenu = false;
 				}
+
 				Recipe.FindRecipes();
 				Main.InReforgeMenu = false;
 			}
+
 			Main.hoverItemName = "";
 		}
 
@@ -39124,11 +_,13 @@
 				Main.invAlpha = 240f;
 				Main.invDir = -1f;
 			}
+
 			if (Main.invAlpha < 180f)
 			{
 				Main.invAlpha = 180f;
 				Main.invDir = 1f;
 			}
+
 			Main.inventoryBack = new Microsoft.Xna.Framework.Color((int)((byte)Main.invAlpha), (int)((byte)Main.invAlpha), (int)((byte)Main.invAlpha), (int)((byte)Main.invAlpha));
 			Main.mouseText = false;
 			Main.rare = 0;
@@ -39170,20 +_,22 @@
 						{
 							object obj = text;
 							text = string.Concat(new object[]
-								{
-									obj,
+							{
+								obj,
 									": ",
 									Main.player[i].statLife,
 									"/",
 									Main.player[i].statLifeMax2
-								});
-						}
+							});
+						}
+
 						Vector2 position = Main.fontMouseText.MeasureString(text);
 						float num = 0f;
 						if (Main.player[i].chatOverhead.timeLeft > 0)
 						{
 							num = -position.Y;
 						}
+
 						float num2 = 0f;
 						float num3 = (float)Main.mouseTextColor / 255f;
 						Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color((int)((byte)((float)Main.teamColor[Main.player[i].team].R * num3)), (int)((byte)((float)Main.teamColor[Main.player[i].team].G * num3)), (int)((byte)((float)Main.teamColor[Main.player[i].team].B * num3)), (int)Main.mouseTextColor);
@@ -39196,11 +_,13 @@
 						{
 							num7 = Main.screenWidth;
 						}
+
 						num7 = num7 / 2 - 30;
 						if (num7 < 100)
 						{
 							num7 = 100;
 						}
+
 						if (num6 < (float)num7)
 						{
 							position.X = Main.player[i].position.X + (float)(Main.player[i].width / 2) - position.X / 2f - Main.screenPosition.X;
@@ -39213,10 +_,12 @@
 							position.X = (float)(Main.screenWidth / 2) + num4 * num6 - position.X / 2f;
 							position.Y = (float)(Main.screenHeight / 2) + num5 * num6;
 						}
+
 						if (Main.player[Main.myPlayer].gravDir == -1f)
 						{
 							position.Y = (float)Main.screenHeight - position.Y;
 						}
+
 						if (num2 > 0f)
 						{
 							string textValue = Language.GetTextValue("GameUI.PlayerDistance", (int)(num2 / 16f * 2f));
@@ -39229,6 +_,7 @@
 							Main.spriteBatch.DrawString(Main.fontMouseText, textValue, new Vector2(position2.X, position2.Y + 2f), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 							Main.spriteBatch.DrawString(Main.fontMouseText, textValue, position2, color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 						}
+
 						Main.spriteBatch.DrawString(Main.fontMouseText, text, new Vector2(position.X - 2f, position.Y), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 						Main.spriteBatch.DrawString(Main.fontMouseText, text, new Vector2(position.X + 2f, position.Y), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 						Main.spriteBatch.DrawString(Main.fontMouseText, text, new Vector2(position.X, position.Y - 2f), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
@@ -39249,6 +_,7 @@
 				{
 					num2 = Main.screenHeight - (int)((float)Main.signY - Main.screenPosition.Y) - 32;
 				}
+
 				SpriteEffects effects = SpriteEffects.None;
 				if ((float)Main.signX > Main.player[Main.myPlayer].position.X + (float)Main.player[Main.myPlayer].width)
 				{
@@ -39259,6 +_,7 @@
 				{
 					num += 8;
 				}
+
 				num2 -= 22;
 				Main.spriteBatch.Draw(Main.chat2Texture, new Vector2((float)num, (float)num2), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chat2Texture.Width, Main.chat2Texture.Height)), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, effects, 0f);
 				Main.signBubble = false;
@@ -39281,13 +_,16 @@
 						{
 							text = "Gamepad Left Thumbstick  : " + string.Format("{0,-10} ,   {1,-10}", PlayerInput.GamepadThumbstickLeft.X.ToString("P2"), PlayerInput.GamepadThumbstickLeft.Y.ToString("P2"));
 						}
+
 						if (i == 1)
 						{
 							text = "Gamepad Right Thumbstick: " + string.Format("{0,-10} ,   {1,-10}", PlayerInput.GamepadThumbstickRight.X.ToString("P2"), PlayerInput.GamepadThumbstickRight.Y.ToString("P2"));
 						}
+
 						Main.spriteBatch.DrawString(Main.fontMouseText, text, new Vector2((float)num, (float)num2), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 					}
 				}
+
 				for (int j = 0; j < 7; j++)
 				{
 					string text2 = "";
@@ -39298,32 +_,40 @@
 					{
 						text2 = "Solid Tiles:";
 					}
+
 					if (j == 1)
 					{
 						text2 = "Misc. Tiles:";
 					}
+
 					if (j == 2)
 					{
 						text2 = "Walls Tiles:";
 					}
+
 					if (j == 3)
 					{
 						text2 = "Background Tiles:";
 					}
+
 					if (j == 4)
 					{
 						text2 = "Water Tiles:";
 					}
+
 					if (j == 5)
 					{
 						text2 = "Black Tiles:";
 					}
+
 					if (j == 6)
 					{
 						text2 = "Total Render:";
 					}
+
 					Main.spriteBatch.DrawString(Main.fontMouseText, text2, new Vector2((float)num3, (float)num4), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 				}
+
 				for (int k = 0; k < 7; k++)
 				{
 					int num5 = 180;
@@ -39338,9 +_,11 @@
 					{
 						drawTotal = TimeLogger.GetDrawTime(k);
 					}
+
 					string text3 = string.Format("{0:F2}ms", drawTotal);
 					Main.spriteBatch.DrawString(Main.fontMouseText, text3, new Vector2((float)num5, (float)num6), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 				}
+
 				for (int l = 0; l < 6; l++)
 				{
 					string text4 = "";
@@ -39351,28 +_,35 @@
 					{
 						text4 = "Lighting Init:";
 					}
+
 					if (l == 1)
 					{
 						text4 = "Lighting Phase #1:";
 					}
+
 					if (l == 2)
 					{
 						text4 = "Lighting Phase #2:";
 					}
+
 					if (l == 3)
 					{
 						text4 = "Lighting Phase #3";
 					}
+
 					if (l == 4)
 					{
 						text4 = "Lighting Phase #4";
 					}
+
 					if (l == 5)
 					{
 						text4 = "Total Lighting:";
 					}
+
 					Main.spriteBatch.DrawString(Main.fontMouseText, text4, new Vector2((float)num7, (float)num8), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 				}
+
 				for (int m = 0; m < 6; m++)
 				{
 					int num9 = 180;
@@ -39387,9 +_,11 @@
 					{
 						num11 = TimeLogger.GetLightingTime(m);
 					}
+
 					string text5 = string.Format("{0:F2}ms", num11);
 					Main.spriteBatch.DrawString(Main.fontMouseText, text5, new Vector2((float)num9, (float)num10), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 				}
+
 				int num12 = 5;
 				for (int n = 0; n < num12; n++)
 				{
@@ -39399,6 +_,7 @@
 					string text6 = "Render #" + n + ":";
 					Main.spriteBatch.DrawString(Main.fontMouseText, text6, new Vector2((float)num13, (float)num14), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 				}
+
 				for (int num15 = 0; num15 < num12; num15++)
 				{
 					int num16 = 180;
@@ -39407,6 +_,7 @@
 					string text7 = string.Format("{0:F2}ms", TimeLogger.GetRenderTime(num15));
 					Main.spriteBatch.DrawString(Main.fontMouseText, text7, new Vector2((float)num16, (float)num17), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 				}
+
 				for (int num18 = 0; num18 < num12; num18++)
 				{
 					int num19 = 230;
@@ -39416,6 +_,7 @@
 					string text8 = string.Format("{0:F2}ms", TimeLogger.GetRenderMax(num18));
 					Main.spriteBatch.DrawString(Main.fontMouseText, text8, new Vector2((float)num19, (float)num20), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 				}
+
 				int num21 = 20;
 				int num22 = 456 + 16 * num12 + 16;
 				string text9 = "Update:";
@@ -39458,8 +_,10 @@
 						text = "TX Bytes: " + string.Format("{0:0,0}", Main.txData);
 						num2 += i * 20;
 					}
+
 					Main.spriteBatch.DrawString(Main.fontMouseText, text, new Vector2((float)num, (float)num2), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 				}
+
 				for (int j = 0; j < Main.maxMsg; j++)
 				{
 					float scale = 0.7f;
@@ -39510,8 +_,10 @@
 							goto IL_44;
 						}
 					}
+
 					this.DrawMap();
 				}
+
 				IL_44:
 				if (Main.mH + 600 > Main.screenHeight)
 				{
@@ -39543,86 +_,113 @@
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 35)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 36)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 50)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 113)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 114)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 125)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 126)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 127)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 128)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 129)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 130)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 131)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 222)
 							{
 								scale = 1.5f;
 							}
+
 							if (type >= 245 && type <= 249)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 262)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 266)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 564 || type == 565 || type == 551 || type == 576 || type == 577)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 87)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 510 || type == 454)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 439 || type == 370)
 							{
 								scale = 1.5f;
 							}
+
+							if (!NPCLoader.DrawHealthBar(Main.npc[i], ref scale))
+							{
+								Main.npc[i].position -= Main.npc[i].visualOffset;
+								continue;
+							}
+
 							if ((!Main.expertMode || type != 266) && ((type != 439 && type != 440) || Main.npc[i].ai[0] != 5f))
 							{
 								if (type >= 134 && type <= 136)
@@ -39645,6 +_,7 @@
 												}
 											}
 										}
+
 										if (num < (float)Main.screenWidth)
 										{
 											if (Main.destroyerHB.X < 100f && Main.destroyerHB.Y < 100f)
@@ -39655,12 +_,14 @@
 											{
 												Main.destroyerHB = (Main.destroyerHB * 49f + value) / 50f;
 											}
+
 											value = Main.destroyerHB;
 											int num2 = i;
 											if (type != 134 && Main.npc[i].realLife != -1)
 											{
 												num2 = Main.npc[i].realLife;
 											}
+
 											float num3 = Lighting.Brightness((int)((Main.npc[i].position.X + (float)(Main.npc[i].width / 2)) / 16f), (int)((Main.npc[i].position.Y + (float)(Main.npc[i].height / 2) + Main.npc[i].gfxOffY) / 16f));
 											num3 = (num3 + 1f) / 2f;
 											this.DrawHealthBar(value.X + (float)(Main.npc[i].width / 2), value.Y + (float)(Main.npc[i].height / 2), Main.npc[num2].life, Main.npc[num2].lifeMax, num3, scale);
@@ -39682,6 +_,7 @@
 											num4 = k;
 										}
 									}
+
 									if (num4 >= 0)
 									{
 										value2 += Main.npc[num4].position;
@@ -39702,6 +_,7 @@
 												num5 = l;
 											}
 										}
+
 										if (num5 >= 0)
 										{
 											value3 += Main.npc[num5].position;
@@ -39722,6 +_,7 @@
 													num6 = m;
 												}
 											}
+
 											if (num6 >= 0)
 											{
 												value4 += Main.npc[num6].position;
@@ -39742,6 +_,7 @@
 														num7 = n;
 													}
 												}
+
 												if (num7 >= 0)
 												{
 													value5 += Main.npc[num7].position;
@@ -39757,6 +_,7 @@
 												{
 													num8 = (int)Main.npc[num8].ai[0];
 												}
+
 												if (num8 >= 0)
 												{
 													value6 += Main.npc[num8].position;
@@ -39777,6 +_,7 @@
 															num9 = num10;
 														}
 													}
+
 													if (num9 >= 0)
 													{
 														value7 += Main.npc[num9].position;
@@ -39797,6 +_,7 @@
 																num11 = num12;
 															}
 														}
+
 														if (num11 >= 0)
 														{
 															value8 += Main.npc[num11].position;
@@ -39817,6 +_,7 @@
 																	num13 = num14;
 																}
 															}
+
 															if (num13 >= 0)
 															{
 																value9 += Main.npc[num13].position;
@@ -39837,6 +_,7 @@
 																		num15 = num16;
 																	}
 																}
+
 																if (num15 >= 0)
 																{
 																	value10 += Main.npc[num15].position;
@@ -39857,6 +_,7 @@
 																			num17 = num18;
 																		}
 																	}
+
 																	if (num17 >= 0)
 																	{
 																		value11 += Main.npc[num17].position;
@@ -39877,6 +_,7 @@
 																				num19 = num20;
 																			}
 																		}
+
 																		if (num19 >= 0)
 																		{
 																			value12 += Main.npc[num19].position;
@@ -39923,11 +_,13 @@
 								{
 									vector2 = Main.ReverseGravitySupport(vector2, (float)(-(float)Main.npc[i].height - 20));
 								}
+
 								Vector2 origin = stringSize * new Vector2(0.5f, 0f);
 								ChatManager.DrawColorCodedStringShadow(Main.spriteBatch, Main.fontMouseText, Main.npc[i].displayName, vector2, Microsoft.Xna.Framework.Color.Black * Main.npc[i].nameOver * 0.5f, 0f, origin, Vector2.One, -1f, 2f);
 								ChatManager.DrawColorCodedString(Main.spriteBatch, Main.fontMouseText, Main.npc[i].displayName, vector2, Microsoft.Xna.Framework.Color.White * Main.npc[i].nameOver, 0f, origin, Vector2.One, -1f, false);
 							}
 						}
+
 						if (Main.npc[i].type == 548 && !Main.npc[i].dontTakeDamageFromHostiles && DD2Event.TimeLeftBetweenWaves > 0 && !Main.hideUI)
 						{
 							Vector2 position = Main.npc[i].Bottom - Main.screenPosition + new Vector2(0f, -100f);
@@ -39939,9 +_,11 @@
 							Vector2 origin2 = spriteFont.MeasureString(text) * scaleFactor * new Vector2(0.5f, 0.5f);
 							ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, spriteFont, text, position, Microsoft.Xna.Framework.Color.White, 0f, origin2, Vector2.One * scaleFactor, -1f, 2f);
 						}
+
 						Main.npc[i].position -= Main.npc[i].visualOffset;
 					}
 				}
+
 				for (int num25 = 0; num25 < 255; num25++)
 				{
 					if (num25 != Main.myPlayer && Main.player[num25].active && !Main.player[num25].ghost && !Main.player[num25].dead && Main.player[num25].statLife != Main.player[num25].statLifeMax2)
@@ -39974,6 +_,7 @@
 			{
 				result = false;
 			}
+
 			return result;
 		}
 
@@ -39985,6 +_,7 @@
 				IngameOptions.Draw(this, Main.spriteBatch);
 				result = false;
 			}
+
 			return result;
 		}
 
@@ -39996,6 +_,7 @@
 				Main.maxQ = true;
 				result = false;
 			}
+
 			return result;
 		}
 
@@ -40008,6 +_,7 @@
 				CaptureManager.Instance.Draw(Main.spriteBatch);
 				result = false;
 			}
+
 			return result;
 		}
 
@@ -40041,6 +_,7 @@
 						return;
 					}
 				}
+
 				this.DrawNPCHouse();
 			}
 		}
@@ -40066,6 +_,7 @@
 					{
 						vector.Y = (float)Main.screenHeight - vector.Y;
 					}
+
 					Texture2D texture2D = Main.cursorRadialTexture;
 					Main.spriteBatch.Draw(texture2D, vector, null, Microsoft.Xna.Framework.Color.White * 0.5f * num3, 0f, texture2D.Size() / 2f, 1f, SpriteEffects.None, 0f);
 					return;
@@ -40096,23 +_,27 @@
 					{
 						scale = 1f - (num - num3) / num2;
 					}
+
 					int num4 = 1;
 					if ((float)Main.mouseX + Main.screenPosition.X < Main.player[Main.myPlayer].Center.X)
 					{
 						num4 = -1;
 					}
+
 					int num5 = (int)(Main.player[Main.myPlayer].position.X + (float)(Main.player[Main.myPlayer].width / 2) + (float)(num4 * 4)) / 16;
 					int num6 = (int)(Main.player[Main.myPlayer].position.Y + (float)Main.player[Main.myPlayer].height - 2f) / 16;
 					if (Main.player[Main.myPlayer].gravDir == -1f)
 					{
 						num6--;
 					}
+
 					num5 += num4;
 					Vector2 value = Main.MouseWorld;
 					if (Main.player[Main.myPlayer].gravDir == -1f)
 					{
 						value.Y += 16f;
 					}
+
 					value /= 16f;
 					new Vector2((float)num5, (float)num6);
 					int num7 = (int)value.X - num5;
@@ -40129,6 +_,7 @@
 						{
 							num12--;
 						}
+
 						float r = 0.24f;
 						float g = 0.8f;
 						float b = 0.9f;
@@ -40148,10 +_,12 @@
 								{
 									value2.Y = 0;
 								}
+
 								color = new Microsoft.Xna.Framework.Color(r, g, b, a) * scale2 * scale;
 								Main.spriteBatch.Draw(texture, Main.ReverseGravitySupport(new Vector2((float)num11, (float)num12) * 16f - Main.screenPosition, 16f), new Microsoft.Xna.Framework.Rectangle?(value2), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 							}
 						}
+
 						if (num8 != 0)
 						{
 							int num14 = Math.Sign(num8);
@@ -40164,10 +_,12 @@
 								{
 									value2.Y = 0;
 								}
+
 								color = new Microsoft.Xna.Framework.Color(r, g, b, a) * scale2 * scale;
 								Main.spriteBatch.Draw(texture, Main.ReverseGravitySupport(new Vector2((float)num11, (float)num12) * 16f - Main.screenPosition, 16f), new Microsoft.Xna.Framework.Rectangle?(value2), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 							}
 						}
+
 						Utils.DrawBorderString(Main.spriteBatch, num9.ToString() + "x" + num10.ToString(), new Vector2((float)(Main.mouseX + 16), (float)Main.mouseY), new Microsoft.Xna.Framework.Color(r, g, b, a), 1f, 0f, 0.8f, -1);
 					}
 				}
@@ -40214,6 +_,7 @@
 								value.Width = 14;
 								zero.X = 2f;
 							}
+
 							if (j != point.Y + 1)
 							{
 								value.Y = 18;
@@ -40225,10 +_,12 @@
 								value.Height = 14;
 								zero.Y = 2f;
 							}
+
 							Main.spriteBatch.Draw(texture, Main.ReverseGravitySupport(new Vector2((float)i, (float)j) * 16f - Main.screenPosition + vector + zero, 16f), new Microsoft.Xna.Framework.Rectangle?(value), color3, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 						}
 					}
 				}
+
 				value = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 18);
 				for (int k = 0; k < num3; k++)
 				{
@@ -40241,6 +_,7 @@
 						Main.spriteBatch.Draw(texture, Main.ReverseGravitySupport(new Vector2((float)k, (float)point.Y) * 16f - Main.screenPosition + vector, 16f), new Microsoft.Xna.Framework.Rectangle?(value), color2, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 					}
 				}
+
 				value = new Microsoft.Xna.Framework.Rectangle(0, 0, 18, 16);
 				for (int l = 0; l < num4; l++)
 				{
@@ -40268,6 +_,7 @@
 			{
 				return;
 			}
+
 			Main._MouseOversCanClear = false;
 			Main.MouseOversClear();
 		}
@@ -40296,10 +_,12 @@
 				{
 					Main._itemIconCacheTime--;
 				}
+
 				if (num > 4f)
 				{
 					Main._itemIconCacheTime = 0;
 				}
+
 				if (Main._itemIconCacheSelectedItemID != Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type)
 				{
 					Main._itemIconCacheTime = 0;
@@ -40314,10 +_,12 @@
 			{
 				list.Add(i);
 			}
+
 			for (int j = 2450; j <= 2488; j++)
 			{
 				list.Add(j);
 			}
+
 			for (int k = 0; k < 5; k++)
 			{
 				float num = 10f;
@@ -40331,6 +_,7 @@
 					{
 						num2 = 0;
 					}
+
 					vector.Y += 26f;
 					Texture2D texture2D = Main.itemTexture[list[num2]];
 					Microsoft.Xna.Framework.Point point = (vector + Main.screenPosition).ToTileCoordinates();
@@ -40351,6 +_,7 @@
 				{
 					vector.Y = (float)Main.screenHeight - vector.Y - 16f;
 				}
+
 				Microsoft.Xna.Framework.Color newColor = Lighting.GetColor(Main.SmartCursorX, Main.SmartCursorY) * 1f;
 				Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1);
 				float r = 1f;
@@ -40384,6 +_,7 @@
 				{
 					vector.Y = (float)Main.screenHeight - vector.Y - 16f;
 				}
+
 				Microsoft.Xna.Framework.Color newColor = Lighting.GetColor(Main.SmartInteractX, Main.SmartInteractY) * 1f;
 				Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1);
 				float r = 0.1f;
@@ -40420,6 +_,7 @@
 					return;
 				}
 			}
+
 			this.GUIHotbarDrawInner();
 		}
 
@@ -40433,6 +_,7 @@
 					{
 						this.GUIChatDrawInner();
 					}
+
 					return;
 				}
 				catch (Exception e)
@@ -40441,6 +_,7 @@
 					return;
 				}
 			}
+
 			if ((Main.npcChatText != "" || Main.player[Main.myPlayer].sign != -1) && !Main.editChest)
 			{
 				this.GUIChatDrawInner();
@@ -40481,6 +_,7 @@
 						{
 							num4 += 54000.0;
 						}
+
 						num4 = num4 / 86400.0 * 24.0;
 						double num5 = 7.5;
 						num4 = num4 - num5 - 12.0;
@@ -40488,10 +_,12 @@
 						{
 							num4 += 24.0;
 						}
+
 						if (num4 >= 12.0)
 						{
 							text4 = "PM";
 						}
+
 						int num6 = (int)num4;
 						double num7 = num4 - (double)num6;
 						num7 = (double)((int)(num7 * 60.0));
@@ -40500,14 +_,17 @@
 						{
 							text5 = "0" + text5;
 						}
+
 						if (num6 > 12)
 						{
 							num6 -= 12;
 						}
+
 						if (num6 == 0)
 						{
 							num6 = 12;
 						}
+
 						if (Main.player[Main.myPlayer].accWatch == 1)
 						{
 							text5 = "00";
@@ -40523,14 +_,15 @@
 								text5 = "30";
 							}
 						}
+
 						text2 = string.Concat(new object[]
-							{
-								num6,
+						{
+							num6,
 								":",
 								text5,
 								" ",
 								text4
-							});
+						});
 						flag = true;
 					}
 					else if (Main.player[Main.myPlayer].accWeatherRadio && !flag5 && (!Main.player[Main.myPlayer].hideInfo[1] || Main.playerInventory))
@@ -40570,6 +_,7 @@
 						{
 							textValue = Language.GetTextValue("GameUI.Clear");
 						}
+
 						text2 = textValue;
 						int num8 = (int)(Main.windSpeed * 100f);
 						if (num8 < 0)
@@ -40580,6 +_,7 @@
 						{
 							text2 += Language.GetTextValue("GameUI.EastWind", num8);
 						}
+
 						flag5 = true;
 					}
 					else if (Main.player[Main.myPlayer].accCalendar && !flag8 && (!Main.player[Main.myPlayer].hideInfo[7] || Main.playerInventory))
@@ -40596,6 +_,7 @@
 						{
 							num = 7;
 						}
+
 						text3 = Lang.inter[102];
 						if (Main.moonPhase == 0)
 						{
@@ -40629,6 +_,7 @@
 						{
 							text2 = Language.GetTextValue("GameUI.WaxingGibbous");
 						}
+
 						flag8 = true;
 					}
 					else if (Main.player[Main.myPlayer].accFishFinder && !flag4 && (!Main.player[Main.myPlayer].hideInfo[2] || Main.playerInventory))
@@ -40644,6 +_,7 @@
 								break;
 							}
 						}
+
 						if (flag13)
 						{
 							text2 = Main.player[Main.myPlayer].displayedFishingInfo;
@@ -40660,6 +_,7 @@
 								text2 = (Main.player[Main.myPlayer].displayedFishingInfo = Language.GetTextValue("GameUI.FishingPower", num9));
 							}
 						}
+
 						flag4 = true;
 					}
 					else if (Main.player[Main.myPlayer].accOreFinder && !flag10 && (!Main.player[Main.myPlayer].hideInfo[10] || Main.playerInventory))
@@ -40672,8 +_,9 @@
 						}
 						else
 						{
-							text2 = Language.GetTextValue("GameUI.OreDetected", Lang.mapLegend[MapHelper.TileToLookup(Main.player[Main.myPlayer].bestOre, 0)]);
-						}
+							text2 = Language.GetTextValue("GameUI.OreDetected", Lang.mapLegend.FromType(Main.player[Main.myPlayer].bestOre));
+						}
+
 						flag10 = true;
 					}
 					else if (Main.player[Main.myPlayer].accCritterGuide && !flag11 && (!Main.player[Main.myPlayer].hideInfo[11] || Main.playerInventory))
@@ -40698,6 +_,7 @@
 									}
 								}
 							}
+
 							Main.player[Main.myPlayer].accCritterGuideNumber = (byte)num12;
 						}
 						else
@@ -40706,6 +_,7 @@
 							expr_774.accCritterGuideCounter -= 1;
 							num12 = (int)Main.player[Main.myPlayer].accCritterGuideNumber;
 						}
+
 						if (num12 >= 0 && num12 < 200 && Main.npc[num12].active && Main.npc[num12].rarity > 0)
 						{
 							text2 = Main.npc[num12].displayName;
@@ -40743,6 +_,7 @@
 							Player expr_940 = Main.player[Main.myPlayer];
 							expr_940.accThirdEyeCounter -= 1;
 						}
+
 						if (Main.player[Main.myPlayer].accThirdEyeNumber == 0)
 						{
 							text2 = Language.GetTextValue("GameUI.NoEnemiesNearby");
@@ -40796,11 +_,13 @@
 						{
 							num14 = Main.player[Main.myPlayer].speedSlice.Length;
 						}
+
 						float num15 = 0f;
 						for (int m = num14 - 1; m > 0; m--)
 						{
 							Main.player[Main.myPlayer].speedSlice[m] = Main.player[Main.myPlayer].speedSlice[m - 1];
 						}
+
 						Main.player[Main.myPlayer].speedSlice[0] = Main.player[Main.myPlayer].velocity.Length();
 						for (int n = 0; n < Main.player[Main.myPlayer].speedSlice.Length; n++)
 						{
@@ -40813,6 +_,7 @@
 								Main.player[Main.myPlayer].speedSlice[n] = num15 / (float)num14;
 							}
 						}
+
 						num15 /= (float)num14;
 						int num16 = 42240;
 						int num17 = 216000;
@@ -40828,6 +_,7 @@
 								num18 /= 2f;
 							}
 						}
+
 						text2 = Language.GetTextValue("GameUI.Speed", Math.Round((double)num18));
 						flag9 = true;
 					}
@@ -40848,6 +_,7 @@
 						{
 							text2 = Language.GetTextValue("GameUI.CompassCenter");
 						}
+
 						flag3 = true;
 					}
 					else if (Main.player[Main.myPlayer].accDepthMeter > 0 && !flag2 && (!Main.player[Main.myPlayer].hideInfo[4] || Main.playerInventory))
@@ -40880,6 +_,7 @@
 						{
 							textValue2 = Language.GetTextValue("GameUI.LayerSpace");
 						}
+
 						num20 = Math.Abs(num20);
 						string textValue3;
 						if (num20 == 0)
@@ -40890,9 +_,11 @@
 						{
 							textValue3 = Language.GetTextValue("GameUI.Depth", num20);
 						}
+
 						text2 = textValue3 + " " + textValue2;
 						flag2 = true;
 					}
+
 					if (text2 != "")
 					{
 						int num24;
@@ -40930,6 +_,7 @@
 								}
 							}
 						}
+
 						if (num >= 0)
 						{
 							num3++;
@@ -40938,12 +_,14 @@
 							{
 								num27 = 20;
 							}
+
 							Vector2 vector = new Vector2((float)num24, (float)(num25 + 74 + num27 * i + 52));
 							int num28 = num;
 							if (num28 == 8)
 							{
 								num28 = 7;
 							}
+
 							Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
 							bool flag14 = false;
 							if (Main.playerInventory)
@@ -40959,12 +_,14 @@
 										Main.mouseLeftRelease = false;
 										Main.player[Main.myPlayer].hideInfo[num28] = !Main.player[Main.myPlayer].hideInfo[num28];
 									}
+
 									if (!Main.mouseText)
 									{
 										text = text3;
 										Main.mouseText = true;
 									}
 								}
+
 								if (Main.player[Main.myPlayer].hideInfo[num28])
 								{
 									white = new Microsoft.Xna.Framework.Color(80, 80, 80, 70);
@@ -40976,14 +_,17 @@
 								text = text3;
 								Main.mouseText = true;
 							}
+
 							UILinkPointNavigator.SetPosition(1558 + num3 - 1, vector + this.infoIconTexture[num].Size() * 0.75f);
 							Main.spriteBatch.Draw(this.infoIconTexture[num], vector, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, this.infoIconTexture[num].Width, this.infoIconTexture[num].Height)), white, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 							if (flag14)
 							{
 								Main.spriteBatch.Draw(this.infoIconTexture[13], vector - Vector2.One * 2f, null, Main.OurFavoriteColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 							}
+
 							num24 += 20;
 						}
+
 						UILinkPointNavigator.Shortcuts.INFOACCCOUNT = num3;
 						if (!Main.playerInventory)
 						{
@@ -40996,42 +_,51 @@
 								{
 									num30 = -2;
 								}
+
 								if (num29 == 1)
 								{
 									num30 = 2;
 								}
+
 								if (num29 == 2)
 								{
 									num31 = -2;
 								}
+
 								if (num29 == 3)
 								{
 									num31 = 2;
 								}
+
 								if (num29 == 4)
 								{
 									black = new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
 								}
+
 								if (i > num2 && i < num2 + 2)
 								{
 									black = new Microsoft.Xna.Framework.Color((int)(black.R / 3), (int)(black.G / 3), (int)(black.B / 3), (int)(black.A / 3));
 								}
+
 								int num32 = 22;
 								if (Main.screenHeight < 650)
 								{
 									num32 = 20;
 								}
+
 								Main.spriteBatch.DrawString(Main.fontMouseText, text2, new Vector2((float)(num24 + num30), (float)(num25 + 74 + num32 * i + num31 + 48)), black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 							}
 						}
 					}
 				}
+
 				if (!string.IsNullOrEmpty(text))
 				{
 					if (Main.playerInventory)
 					{
 						Main.player[Main.myPlayer].mouseInterface = true;
 					}
+
 					this.MouseText(text, 0, 0);
 				}
 			}
@@ -41043,6 +_,7 @@
 			{
 				return;
 			}
+
 			int num = 0;
 			Player player = Main.player[Main.myPlayer];
 			int[] builderAccStatus = Main.player[Main.myPlayer].builderAccStatus;
@@ -41059,6 +_,7 @@
 				{
 					num3 = 9;
 				}
+
 				Texture2D texture = Main.builderAccTexture;
 				Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(0, 16, 14, 14);
 				Microsoft.Xna.Framework.Color color = Microsoft.Xna.Framework.Color.White;
@@ -41068,179 +_,201 @@
 				{
 					vector.Y -= 44f;
 				}
+
 				bool flag = Utils.CenteredRectangle(vector, new Vector2(14f)).Contains(Main.MouseScreen.ToPoint()) && !PlayerInput.IgnoreMouseInterface;
 				bool flag2 = flag && Main.mouseLeft && Main.mouseLeftRelease;
 				switch (num3)
 				{
 					case 0:
 						if (player.rulerLine)
-						{
-							rectangle.X = num3 * 16;
-							color = ((builderAccStatus[num3] == 0) ? color : color2);
-							if (flag)
-							{
-								player.mouseInterface = true;
-								this.MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.RulerOn") : Language.GetTextValue("GameUI.RulerOff"), 0, 0);
-								Main.mouseText = true;
-							}
-							if (flag2)
-							{
-								builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
-								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
-								Main.mouseLeftRelease = false;
-								goto IL_5F2;
-							}
+					{
+						rectangle.X = num3 * 16;
+						color = ((builderAccStatus[num3] == 0) ? color : color2);
+						if (flag)
+						{
+							player.mouseInterface = true;
+							this.MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.RulerOn") : Language.GetTextValue("GameUI.RulerOff"), 0, 0);
+							Main.mouseText = true;
+						}
+
+						if (flag2)
+						{
+							builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
+							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
+							Main.mouseLeftRelease = false;
 							goto IL_5F2;
 						}
-						break;
+
+						goto IL_5F2;
+					}
+
+					break;
 					case 1:
 						if (player.rulerGrid)
-						{
-							rectangle.X = num3 * 16;
-							color = ((builderAccStatus[num3] == 0) ? color : color2);
-							if (flag)
-							{
-								player.mouseInterface = true;
-								this.MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.MechanicalRulerOn") : Language.GetTextValue("GameUI.MechanicalRulerOff"), 0, 0);
-								Main.mouseText = true;
-							}
-							if (flag2)
-							{
-								builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
-								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
-								Main.mouseLeftRelease = false;
-								goto IL_5F2;
-							}
+					{
+						rectangle.X = num3 * 16;
+						color = ((builderAccStatus[num3] == 0) ? color : color2);
+						if (flag)
+						{
+							player.mouseInterface = true;
+							this.MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.MechanicalRulerOn") : Language.GetTextValue("GameUI.MechanicalRulerOff"), 0, 0);
+							Main.mouseText = true;
+						}
+
+						if (flag2)
+						{
+							builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
+							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
+							Main.mouseLeftRelease = false;
 							goto IL_5F2;
 						}
-						break;
+
+						goto IL_5F2;
+					}
+
+					break;
 					case 2:
 						if (player.autoActuator)
-						{
-							rectangle.X = num3 * 16;
-							color = ((builderAccStatus[num3] == 0) ? color : color2);
-							if (flag)
-							{
-								player.mouseInterface = true;
-								this.MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.ActuationDeviceOn") : Language.GetTextValue("GameUI.ActuationDeviceOff"), 0, 0);
-								Main.mouseText = true;
-							}
-							if (flag2)
-							{
-								builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
-								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
-								Main.mouseLeftRelease = false;
-								goto IL_5F2;
-							}
+					{
+						rectangle.X = num3 * 16;
+						color = ((builderAccStatus[num3] == 0) ? color : color2);
+						if (flag)
+						{
+							player.mouseInterface = true;
+							this.MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.ActuationDeviceOn") : Language.GetTextValue("GameUI.ActuationDeviceOff"), 0, 0);
+							Main.mouseText = true;
+						}
+
+						if (flag2)
+						{
+							builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
+							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
+							Main.mouseLeftRelease = false;
 							goto IL_5F2;
 						}
-						break;
+
+						goto IL_5F2;
+					}
+
+					break;
 					case 3:
 						if (player.autoPaint)
-						{
-							rectangle.X = num3 * 16;
-							color = ((builderAccStatus[num3] == 0) ? color : color2);
-							if (flag)
-							{
-								player.mouseInterface = true;
-								this.MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.PaintSprayerOn") : Language.GetTextValue("GameUI.PaintSprayerOff"), 0, 0);
-								Main.mouseText = true;
-							}
-							if (flag2)
-							{
-								builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
-								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
-								Main.mouseLeftRelease = false;
-								goto IL_5F2;
-							}
+					{
+						rectangle.X = num3 * 16;
+						color = ((builderAccStatus[num3] == 0) ? color : color2);
+						if (flag)
+						{
+							player.mouseInterface = true;
+							this.MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.PaintSprayerOn") : Language.GetTextValue("GameUI.PaintSprayerOff"), 0, 0);
+							Main.mouseText = true;
+						}
+
+						if (flag2)
+						{
+							builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
+							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
+							Main.mouseLeftRelease = false;
 							goto IL_5F2;
 						}
-						break;
+
+						goto IL_5F2;
+					}
+
+					break;
 					case 4:
 					case 5:
 					case 6:
 					case 7:
 					case 9:
 						if (player.InfoAccMechShowWires)
-						{
-							rectangle.X = num3 * 16;
-							color = ((builderAccStatus[num3] == 0) ? color : ((builderAccStatus[num3] == 1) ? color2 : ((builderAccStatus[num3] == 2) ? color2.MultiplyRGBA(new Microsoft.Xna.Framework.Color(0.66f, 0.66f, 0.66f, 0.66f)) : color2.MultiplyRGBA(new Microsoft.Xna.Framework.Color(0.33f, 0.33f, 0.33f, 0.33f)))));
-							if (flag)
-							{
-								player.mouseInterface = true;
-								string arg = "";
-								switch (num3)
-								{
-									case 4:
+					{
+						rectangle.X = num3 * 16;
+						color = ((builderAccStatus[num3] == 0) ? color : ((builderAccStatus[num3] == 1) ? color2 : ((builderAccStatus[num3] == 2) ? color2.MultiplyRGBA(new Microsoft.Xna.Framework.Color(0.66f, 0.66f, 0.66f, 0.66f)) : color2.MultiplyRGBA(new Microsoft.Xna.Framework.Color(0.33f, 0.33f, 0.33f, 0.33f)))));
+						if (flag)
+						{
+							player.mouseInterface = true;
+							string arg = "";
+							switch (num3)
+							{
+								case 4:
 										arg = Language.GetTextValue("Game.RedWires");
-										break;
-									case 5:
+								break;
+								case 5:
 										arg = Language.GetTextValue("Game.BlueWires");
-										break;
-									case 6:
+								break;
+								case 6:
 										arg = Language.GetTextValue("Game.GreenWires");
-										break;
-									case 7:
+								break;
+								case 7:
 										arg = Language.GetTextValue("Game.YellowWires");
-										break;
-									case 9:
+								break;
+								case 9:
 										arg = Language.GetTextValue("Game.Actuators");
-										break;
-								}
-								string arg2 = "";
-								switch (builderAccStatus[num3])
-								{
-									case 0:
+								break;
+							}
+
+							string arg2 = "";
+							switch (builderAccStatus[num3])
+							{
+								case 0:
 										arg2 = Language.GetTextValue("GameUI.Bright");
-										break;
-									case 1:
+								break;
+								case 1:
 										arg2 = Language.GetTextValue("GameUI.Normal");
-										break;
-									case 2:
+								break;
+								case 2:
 										arg2 = Language.GetTextValue("GameUI.Faded");
-										break;
-									case 3:
+								break;
+								case 3:
 										arg2 = Language.GetTextValue("GameUI.Hidden");
-										break;
-								}
-								this.MouseText(string.Format("{0}: {1}", arg, arg2), 0, 0);
-								Main.mouseText = true;
-							}
-							if (flag2)
-							{
-								builderAccStatus[num3]++;
-								if (builderAccStatus[num3] >= 3)
-								{
-									builderAccStatus[num3] = 0;
-								}
-								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
-								Main.mouseLeftRelease = false;
-								goto IL_5F2;
-							}
+								break;
+							}
+
+							this.MouseText(string.Format("{0}: {1}", arg, arg2), 0, 0);
+							Main.mouseText = true;
+						}
+
+						if (flag2)
+						{
+							builderAccStatus[num3]++;
+							if (builderAccStatus[num3] >= 3)
+							{
+								builderAccStatus[num3] = 0;
+							}
+
+							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
+							Main.mouseLeftRelease = false;
 							goto IL_5F2;
 						}
-						break;
+
+						goto IL_5F2;
+					}
+
+					break;
 					case 8:
 						if (player.InfoAccMechShowWires)
-						{
-							rectangle.X = num3 * 16;
-							color = ((builderAccStatus[num3] == 0) ? color : color2);
-							if (flag)
-							{
-								player.mouseInterface = true;
-								this.MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.WireModeForced") : Language.GetTextValue("GameUI.WireModeNormal"), 0, 0);
-								Main.mouseText = true;
-							}
-							if (flag2)
-							{
-								builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
-								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
-								Main.mouseLeftRelease = false;
-								goto IL_5F2;
-							}
+					{
+						rectangle.X = num3 * 16;
+						color = ((builderAccStatus[num3] == 0) ? color : color2);
+						if (flag)
+						{
+							player.mouseInterface = true;
+							this.MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.WireModeForced") : Language.GetTextValue("GameUI.WireModeNormal"), 0, 0);
+							Main.mouseText = true;
+						}
+
+						if (flag2)
+						{
+							builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
+							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
+							Main.mouseLeftRelease = false;
 							goto IL_5F2;
 						}
-						break;
+
+						goto IL_5F2;
+					}
+
+					break;
 					case 10:
 						goto IL_5F2;
 					case 11:
@@ -41248,6 +_,7 @@
 					default:
 						goto IL_5F2;
 				}
+
 				IL_6A2:
 				i++;
 				continue;
@@ -41257,10 +_,12 @@
 				{
 					Main.spriteBatch.Draw(this.infoIconTexture[13], vector, null, Main.OurFavoriteColor, 0f, this.infoIconTexture[13].Size() / 2f, 1f, SpriteEffects.None, 0f);
 				}
+
 				UILinkPointNavigator.SetPosition(4000 + num, vector + rectangle.Size() * 0.3f);
 				num++;
 				goto IL_6A2;
 			}
+
 			UILinkPointNavigator.Shortcuts.BUILDERACCCOUNT = num;
 		}
 
@@ -41271,6 +_,7 @@
 				Main.invasionProgressNearInvasion = false;
 				return;
 			}
+
 			bool flag = false;
 			Player player = Main.player[Main.myPlayer];
 			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)Main.screenPosition.X, (int)Main.screenPosition.Y, Main.screenWidth, Main.screenHeight);
@@ -41295,11 +_,13 @@
 									break;
 								default:
 									if (type != 111)
-									{
-										goto IL_2C6;
-									}
-									break;
-							}
+								{
+									goto IL_2C6;
+								}
+
+								break;
+							}
+
 							num2 = 4;
 						}
 						else
@@ -41310,18 +_,19 @@
 								case 144:
 								case 145:
 									num2 = 5;
-									break;
+								break;
 								default:
 									switch (type)
-									{
-										case 212:
+								{
+									case 212:
 										case 213:
 										case 214:
 										case 215:
 										case 216:
 											goto IL_2B9;
-									}
-									break;
+								}
+
+								break;
 							}
 						}
 					}
@@ -41346,7 +_,7 @@
 							case 329:
 							case 330:
 								num2 = 2;
-								break;
+							break;
 							case 316:
 							case 317:
 							case 318:
@@ -41379,11 +_,11 @@
 							case 349:
 							case 350:
 								num2 = 1;
-								break;
+							break;
 							default:
 								switch (type)
-								{
-									case 381:
+							{
+								case 381:
 									case 382:
 									case 383:
 									case 385:
@@ -41394,9 +_,10 @@
 									case 391:
 									case 395:
 										num2 = 7;
-										break;
-								}
 								break;
+							}
+
+							break;
 						}
 					}
 					else
@@ -41405,6 +_,7 @@
 						{
 							goto IL_2B9;
 						}
+
 						switch (type)
 						{
 							case 548:
@@ -41436,28 +_,33 @@
 							case 577:
 							case 578:
 								num2 = 3;
-								break;
-						}
-					}
+							break;
+						}
+					}
+
 					IL_2C6:
 					if (num2 == 0 || (num2 == 1 && ((double)player.position.Y > Main.worldSurface * 16.0 || Main.dayTime || !Main.snowMoon)) || (num2 == 2 && ((double)player.position.Y > Main.worldSurface * 16.0 || Main.dayTime || !Main.pumpkinMoon)) || (num2 == 3 && !DD2Event.Ongoing) || (num2 > 3 && ((double)player.position.Y > Main.worldSurface * 16.0 || Main.invasionType != num2 - 3)))
 					{
 						goto IL_3E3;
 					}
+
 					Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)(Main.npc[i].position.X + (float)(Main.npc[i].width / 2)) - num, (int)(Main.npc[i].position.Y + (float)(Main.npc[i].height / 2)) - num, num * 2, num * 2);
 					if (rectangle.Intersects(value))
 					{
 						flag = true;
 						break;
 					}
+
 					goto IL_3E3;
 					IL_2B9:
 					num2 = 6;
 					goto IL_2C6;
 				}
+
 				IL_3E3:
 				;
 			}
+
 			Main.invasionProgressNearInvasion = flag;
 			if (flag && Main.invasionProgressIcon == 0)
 			{
@@ -41492,6 +_,7 @@
 					Main.ReportInvasionProgress((int)NPC.waveKills, progressMax, 1, waveNumber);
 					return;
 				}
+
 				if (Main.pumpkinMoon)
 				{
 					int[] array2 = new int[]
@@ -41517,16 +_,19 @@
 					Main.ReportInvasionProgress((int)NPC.waveKills, progressMax2, 2, waveNumber);
 					return;
 				}
+
 				if (DD2Event.Ongoing)
 				{
 					DD2Event.ReportEventProgress();
 					return;
 				}
+
 				int progressMax3 = 1;
 				if (Main.invasionType != 0 && Main.invasionSizeStart != 0)
 				{
 					progressMax3 = Main.invasionSizeStart;
 				}
+
 				Main.ReportInvasionProgress(Main.invasionSizeStart - Main.invasionSize, progressMax3, num2, 0);
 			}
 		}
@@ -41564,6 +_,7 @@
 				NetMessage.SendData(78, toWho, -1, "", (int)NPC.waveKills, (float)num, 1f, (float)waveNumber, 0, 0, 0);
 				return;
 			}
+
 			if (Main.pumpkinMoon)
 			{
 				int[] array2 = new int[]
@@ -41589,11 +_,13 @@
 				NetMessage.SendData(78, toWho, -1, "", (int)NPC.waveKills, (float)num2, 2f, (float)waveNumber, 0, 0, 0);
 				return;
 			}
+
 			if (DD2Event.Ongoing)
 			{
 				DD2Event.SyncInvasionProgress(toWho);
 				return;
 			}
+
 			if (Main.invasionType > 0)
 			{
 				int num3 = 1;
@@ -41601,6 +_,7 @@
 				{
 					num3 = Main.invasionSizeStart;
 				}
+
 				NetMessage.SendData(78, toWho, -1, "", Main.invasionSizeStart - Main.invasionSize, (float)num3, (float)(Main.invasionType + 3), 0f, 0, 0, 0);
 			}
 		}
@@ -41620,14 +_,17 @@
 			{
 				return;
 			}
+
 			if (Main.invasionProgressMode == 2 && Main.invasionProgressNearInvasion && Main.invasionProgressDisplayLeft < 160)
 			{
 				Main.invasionProgressDisplayLeft = 160;
 			}
+
 			if (!Main.gamePaused && Main.invasionProgressDisplayLeft > 0)
 			{
 				Main.invasionProgressDisplayLeft--;
 			}
+
 			if (Main.invasionProgressDisplayLeft > 0)
 			{
 				Main.invasionProgressAlpha += 0.05f;
@@ -41636,18 +_,22 @@
 			{
 				Main.invasionProgressAlpha -= 0.05f;
 			}
+
 			if (Main.invasionProgressAlpha < 0f)
 			{
 				Main.invasionProgressAlpha = 0f;
 			}
+
 			if (Main.invasionProgressAlpha > 1f)
 			{
 				Main.invasionProgressAlpha = 1f;
 			}
+
 			if (Main.invasionProgressAlpha <= 0f)
 			{
 				return;
 			}
+
 			float num = 0.5f + Main.invasionProgressAlpha * 0.5f;
 			Texture2D texture2D = Main.extraTexture[9];
 			string text = "";
@@ -41694,6 +_,7 @@
 				text = Lang.inter[88];
 				c = new Microsoft.Xna.Framework.Color(94, 72, 131) * 0.5f;
 			}
+
 			if (Main.invasionProgressWave > 0)
 			{
 				int num2 = (int)(200f * num);
@@ -41710,6 +_,7 @@
 				{
 					text2 = (int)((float)Main.invasionProgress * 100f / (float)Main.invasionProgressMax) + "%";
 				}
+
 				text2 = Language.GetTextValue("Game.WaveMessage", Main.invasionProgressWave, text2);
 				Texture2D texture2D2 = Main.colorBarTexture;
 				Texture2D arg_34D_0 = Main.colorBlipTexture;
@@ -41718,6 +_,7 @@
 				{
 					num4 = 1f;
 				}
+
 				float num5 = 169f * num;
 				float num6 = 8f * num;
 				Vector2 vector2 = vector + Vector2.UnitY * num6 + Vector2.UnitX * 1f;
@@ -41744,6 +_,7 @@
 				{
 					text3 = ((int)((float)Main.invasionProgress * 100f / (float)Main.invasionProgressMax)).ToString() + "%";
 				}
+
 				text3 = Language.GetTextValue("Game.WaveCleared", text3);
 				Texture2D texture2D3 = Main.colorBarTexture;
 				Texture2D arg_642_0 = Main.colorBlipTexture;
@@ -41761,6 +_,7 @@
 					Main.spriteBatch.Draw(Main.magicPixel, vector4, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), Microsoft.Xna.Framework.Color.Black * Main.invasionProgressAlpha, 0f, new Vector2(0f, 0.5f), new Vector2(num10 * (1f - num9), num11), SpriteEffects.None, 0f);
 				}
 			}
+
 			Vector2 center = new Vector2((float)(Main.screenWidth - 120), (float)(Main.screenHeight - 80));
 			Vector2 value = Main.fontItemStack.MeasureString(text);
 			Microsoft.Xna.Framework.Rectangle r3 = Utils.CenteredRectangle(center, (value + new Vector2((float)(texture2D.Width + 20), 10f)) * num);
@@ -41772,13 +_,13 @@
 		protected void QuitGame()
 		{
 			Main.SaveSettings();
-#if CLIENT
+			#if CLIENT
 			SocialAPI.Shutdown();
-#endif
+			#endif
 			base.Exit();
-#if MAC
+			#if MAC
             SDL.SDL_DestroyWindow(base.Window.Handle);
-#endif
+			#endif
 		}
 
 		protected Microsoft.Xna.Framework.Color randColor()
@@ -41792,6 +_,7 @@
 				num2 = Main.rand.Next(256);
 				num3 = Main.rand.Next(256);
 			}
+
 			return new Microsoft.Xna.Framework.Color(num, num2, num3, 255);
 		}
 
@@ -41818,6 +_,7 @@
 				{
 					num2 = (double)(Luminosity + Saturation - Luminosity * Saturation);
 				}
+
 				double t = 2.0 * (double)Luminosity - num2;
 				double num3 = num + 0.33333333333333331;
 				double num4 = num;
@@ -41829,6 +_,7 @@
 				g = (byte)Math.Round(num4 * 255.0);
 				b = (byte)Math.Round(num5 * 255.0);
 			}
+
 			return new Microsoft.Xna.Framework.Color((int)r, (int)g, (int)b);
 		}
 
@@ -41838,22 +_,27 @@
 			{
 				c += 1.0;
 			}
+
 			if (c > 1.0)
 			{
 				c -= 1.0;
 			}
+
 			if (6.0 * c < 1.0)
 			{
 				return t1 + (t2 - t1) * 6.0 * c;
 			}
+
 			if (2.0 * c < 1.0)
 			{
 				return t2;
 			}
+
 			if (3.0 * c < 2.0)
 			{
 				return t1 + (t2 - t1) * (0.66666666666666663 - c) * 6.0;
 			}
+
 			return t1;
 		}
 
@@ -41884,16 +_,20 @@
 				{
 					num6 = (num2 - num3) / num8 + (float)((num2 < num3) ? 6 : 0);
 				}
+
 				if (num4 == num2)
 				{
 					num6 = (num3 - num) / num8 + 2f;
 				}
+
 				if (num4 == num3)
 				{
 					num6 = (num - num2) / num8 + 4f;
 				}
+
 				num6 /= 6f;
 			}
+
 			return new Vector3(num6, y, num7);
 		}
 
@@ -41909,6 +_,7 @@
 				Main.SmartInteractTileCoordsSelected.Clear();
 				Main.TileInteractionLX = (Main.TileInteractionHX = (Main.TileInteractionLY = (Main.TileInteractionHY = -1)));
 			}
+
 			bool flag = UILinkPointNavigator.Available && !PlayerInput.InBuildingMode;
 			Microsoft.Xna.Framework.Color color = Main.cursorColor;
 			if (!PlayerInput.UsingGamepad)
@@ -41918,14 +_,17 @@
 				Main.spriteBatch.Draw(Main.cursorTextures[num], new Vector2((float)Main.mouseX, (float)Main.mouseY) + bonus, null, color, 0f, default(Vector2), Main.cursorScale, SpriteEffects.None, 0f);
 				return;
 			}
+
 			if (Main.player[Main.myPlayer].dead && !Main.player[Main.myPlayer].ghost && !Main.gameMenu)
 			{
 				return;
 			}
+
 			if (PlayerInput.InvisibleGamepadInMenus)
 			{
 				return;
 			}
+
 			if (smart && !flag)
 			{
 				color = Microsoft.Xna.Framework.Color.White * Main.GamepadCursorAlpha;
@@ -41934,6 +_,7 @@
 				Main.spriteBatch.Draw(Main.cursorTextures[num2], new Vector2((float)Main.mouseX, (float)Main.mouseY) + bonus, new Microsoft.Xna.Framework.Rectangle?(Main.cursorTextures[num2].Frame(2, 1, frameX, 0)), color, 0f, Main.cursorTextures[num2].Frame(2, 1, frameX, 0).Size() / 2f, Main.cursorScale, SpriteEffects.None, 0f);
 				return;
 			}
+
 			color = Microsoft.Xna.Framework.Color.White;
 			int num3 = 15;
 			Main.spriteBatch.Draw(Main.cursorTextures[num3], new Vector2((float)Main.mouseX, (float)Main.mouseY) + bonus, null, color, 0f, Main.cursorTextures[num3].Size() / 2f, Main.cursorScale, SpriteEffects.None, 0f);
@@ -41945,14 +_,17 @@
 			{
 				return Vector2.Zero;
 			}
+
 			if (PlayerInput.UsingGamepad && PlayerInput.InvisibleGamepadInMenus)
 			{
 				return Vector2.Zero;
 			}
+
 			if (PlayerInput.UsingGamepad && Main.player[Main.myPlayer].dead && !Main.player[Main.myPlayer].ghost && !Main.gameMenu)
 			{
 				return Vector2.Zero;
 			}
+
 			bool flag = UILinkPointNavigator.Available && !PlayerInput.InBuildingMode;
 			Microsoft.Xna.Framework.Color color = Main.MouseBorderColor;
 			int num = 11;
@@ -41964,17 +_,18 @@
 				{
 					case 0:
 						vector = new Vector2(0f, 1f);
-						break;
+					break;
 					case 1:
 						vector = new Vector2(1f, 0f);
-						break;
+					break;
 					case 2:
 						vector = new Vector2(0f, -1f);
-						break;
+					break;
 					case 3:
 						vector = new Vector2(-1f, 0f);
-						break;
-				}
+					break;
+				}
+
 				vector *= 1f;
 				vector += Vector2.One * 2f;
 				Vector2 origin = new Vector2(2f);
@@ -41998,8 +_,10 @@
 						origin = Main.cursorTextures[num].Size() / 2f;
 					}
 				}
+
 				Main.spriteBatch.Draw(Main.cursorTextures[num], new Vector2((float)Main.mouseX, (float)Main.mouseY) + vector, sourceRectangle, color, 0f, origin, scale, SpriteEffects.None, 0f);
 			}
+
 			return new Vector2(2f);
 		}
 
@@ -42022,6 +_,7 @@
 			{
 				Main.ActiveWorldFileData.SetSeed(text);
 			}
+
 			Main.menuMode = 10;
 			WorldGen.CreateNewWorld(null);
 		}
@@ -42036,6 +_,7 @@
 				Main.menuMode = 5000;
 				return;
 			}
+
 			WorldGen.CreateNewWorld(null);
 		}
 
@@ -42058,6 +_,7 @@
 					Main.OnEngineLoad();
 				}
 			}
+
 			GamepadMainMenuHandler.Update();
 			GamepadMainMenuHandler.MenuItemPositions.Clear();
 			int num = Main.menuMode;
@@ -42065,6 +_,7 @@
 			{
 				Main.StopSlimeRain(true);
 			}
+
 			Main.render = false;
 			Star.UpdateStars();
 			Cloud.UpdateClouds();
@@ -42079,6 +_,7 @@
 			{
 				Main.chatLine[i] = new ChatLine();
 			}
+
 			this.DrawFPS();
 			Main.screenLastPosition = Main.screenPosition;
 			Main.screenPosition.Y = (float)(Main.worldSurface * 16.0 - (double)Main.screenHeight);
@@ -42090,14 +_,17 @@
 			{
 				Main.screenPosition.X = Main.screenPosition.X + 2f;
 			}
+
 			if (Main.screenPosition.X > 2.14748352E+09f)
 			{
 				Main.screenPosition.X = 0f;
 			}
+
 			if (Main.screenPosition.X < -2.14748352E+09f)
 			{
 				Main.screenPosition.X = 0f;
 			}
+
 			Main.background = 0;
 			byte b = (byte)((255 + Main.tileColor.R * 2) / 3);
 			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, 255);
@@ -42110,6 +_,7 @@
 			{
 				this.logoRotationDirection = 1f;
 			}
+
 			if (this.logoRotationSpeed < 20f & this.logoRotationDirection == 1f)
 			{
 				this.logoRotationSpeed += 1f;
@@ -42118,6 +_,7 @@
 			{
 				this.logoRotationSpeed -= 1f;
 			}
+
 			this.logoScale += this.logoScaleSpeed * 1E-05f;
 			if ((double)this.logoScale > 1.1)
 			{
@@ -42127,6 +_,7 @@
 			{
 				this.logoScaleDirection = 1f;
 			}
+
 			if (this.logoScaleSpeed < 50f & this.logoScaleDirection == 1f)
 			{
 				this.logoScaleSpeed += 1f;
@@ -42135,6 +_,7 @@
 			{
 				this.logoScaleSpeed -= 1f;
 			}
+
 			Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color((int)((byte)((float)color.R * ((float)Main.LogoA / 255f))), (int)((byte)((float)color.G * ((float)Main.LogoA / 255f))), (int)((byte)((float)color.B * ((float)Main.LogoA / 255f))), (int)((byte)((float)color.A * ((float)Main.LogoA / 255f))));
 			Microsoft.Xna.Framework.Color color3 = new Microsoft.Xna.Framework.Color((int)((byte)((float)color.R * ((float)Main.LogoB / 255f))), (int)((byte)((float)color.G * ((float)Main.LogoB / 255f))), (int)((byte)((float)color.B * ((float)Main.LogoB / 255f))), (int)((byte)((float)color.A * ((float)Main.LogoB / 255f))));
 			Main.spriteBatch.Draw(Main.logoTexture, new Vector2((float)(Main.screenWidth / 2), 100f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.logoTexture.Width, Main.logoTexture.Height)), color2, this.logoRotation, new Vector2((float)(Main.logoTexture.Width / 2), (float)(Main.logoTexture.Height / 2)), this.logoScale, SpriteEffects.None, 0f);
@@ -42146,6 +_,7 @@
 				{
 					Main.LogoA = 255;
 				}
+
 				Main.LogoB--;
 				if (Main.LogoB < 0)
 				{
@@ -42159,6 +_,7 @@
 				{
 					Main.LogoB = 255;
 				}
+
 				Main.LogoA--;
 				if (Main.LogoA < 0)
 				{
@@ -42166,6 +_,7 @@
 					Main.LogoT = true;
 				}
 			}
+
 			int num2 = 250;
 			int num3 = Main.screenWidth / 2;
 			int num4 = 80;
@@ -42195,16 +_,19 @@
 				array5[j] = 0;
 				array7[j] = 1f;
 			}
+
 			string[] array9 = new string[Main.maxMenuItems];
 			if (Main.menuMode == -1)
 			{
 				Main.menuMode = 0;
 			}
+
 			bool loadedEverything = Program.LoadedEverything;
 			if (loadedEverything)
 			{
 				GamepadMainMenuHandler.CanRun = true;
 			}
+
 			if (!loadedEverything)
 			{
 				array[0] = true;
@@ -42233,6 +_,7 @@
 				{
 					array9[0] = "Select language";
 				}
+
 				num4 = 50;
 				num2 = 200;
 				array4[1] = 25;
@@ -42251,7 +_,7 @@
 				{
 					Lang.lang = this.selectedMenu;
 					Lang.setLang(false);
-					Main.menuMode = 0;
+					Main.menuMode = ModLoader.Interface.loadModsID;
 					Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 					Main.SaveSettings();
 				}
@@ -42282,6 +_,7 @@
 				{
 					array9[0] = Lang.menu[102];
 				}
+
 				num4 = 48;
 				num2 = 180;
 				array4[1] = 25;
@@ -42330,18 +_,19 @@
 								int expr_90F = (int)(intPtr = (IntPtr)k);
 								object obj = array10[(int)intPtr];
 								expr_90A[expr_90F] = string.Concat(new object[]
-									{
-										obj,
+								{
+									obj,
 										" (",
 										NetMessage.buffer[k].spamCount,
 										")"
-									});
+								});
 							}
 						}
 						catch
 						{
 							array9[k] = "";
 						}
+
 						array[k] = true;
 						if (array9[k] != "" && array9[k] != null)
 						{
@@ -42349,11 +_,13 @@
 						}
 					}
 				}
+
 				if (flag6)
 				{
 					array9[0] = Lang.menu[0];
 					array9[1] = Lang.menu[1] + Netplay.ListenPort + ".";
 				}
+
 				num5 = 11;
 				array9[9] = Main.statusText;
 				array[9] = true;
@@ -42379,6 +_,7 @@
 				{
 					Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 				}
+
 				array9[0] = Lang.menu[3];
 				this.textBlinkerCount++;
 				if (this.textBlinkerCount >= 20)
@@ -42391,8 +_,10 @@
 					{
 						this.textBlinkerState = 0;
 					}
+
 					this.textBlinkerCount = 0;
 				}
+
 				array9[1] = Netplay.ServerPassword;
 				if (Main.HidePassword)
 				{
@@ -42403,6 +_,7 @@
 						(array10 = array9)[1] = array10[1] + "*";
 					}
 				}
+
 				if (this.textBlinkerState == 1)
 				{
 					string[] array10;
@@ -42414,6 +_,7 @@
 					string[] array10;
 					(array10 = array9)[1] = array10[1] + " ";
 				}
+
 				array[0] = true;
 				array[1] = true;
 				array4[1] = -20;
@@ -42437,7 +_,7 @@
 			}
 			else
 			{
-				if (Main.netMode == 1 || Main.menuMode == 14)
+				if (Main.netMode == 1 && menuMode < 10000 && menuMode != 888 || Main.menuMode == 14)
 				{
 					num5 = 2;
 					array9[0] = Main.statusText;
@@ -42448,6 +_,7 @@
 					{
 						goto IL_5075;
 					}
+
 					flag5 = false;
 					Netplay.disconnect = true;
 					Netplay.Connection.Socket.Close();
@@ -42464,6 +_,7 @@
 						goto IL_5075;
 					}
 				}
+
 				if (Main.menuMode == 882)
 				{
 					num5 = 2;
@@ -42493,6 +_,7 @@
 					{
 						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 					}
+
 					array9[0] = Lang.menu[7];
 					this.textBlinkerCount++;
 					if (this.textBlinkerCount >= 20)
@@ -42505,8 +_,10 @@
 						{
 							this.textBlinkerState = 0;
 						}
+
 						this.textBlinkerCount = 0;
 					}
+
 					array9[1] = Netplay.ServerPassword;
 					if (Main.HidePassword)
 					{
@@ -42517,6 +_,7 @@
 							(array10 = array9)[1] = array10[1] + "*";
 						}
 					}
+
 					if (this.textBlinkerState == 1)
 					{
 						string[] array10;
@@ -42528,6 +_,7 @@
 						string[] array10;
 						(array10 = array9)[1] = array10[1] + " ";
 					}
+
 					array[0] = true;
 					array[1] = true;
 					array4[1] = -20;
@@ -42546,18 +_,20 @@
 						{
 							Main.menuMode = 6;
 						}
+
 						Netplay.ServerPassword = "";
 					}
 					else if (this.selectedMenu == 2 || Main.inputTextEnter || Main.autoPass)
 					{
 						string text = string.Concat(new object[]
-							{
+						{
+
 								"-autoshutdown -password \"",
 								Netplay.ServerPassword,
 								"\" -lang ",
 								Lang.lang
-							});
-#if LINUX
+						});
+						#if LINUX
 						if (IntPtr.Size == 8)
 						{
 							text += " -x64";
@@ -42566,7 +_,8 @@
 						{
 							text += " -x86";
 						}
-#endif
+
+						#endif
 						if (Main.ActiveWorldFileData.IsCloudSave)
 						{
 							text = text + " -cloudworld \"" + Main.worldPathName + "\"";
@@ -42576,9 +_,9 @@
 							text = text + " -world \"" + Main.worldPathName + "\"";
 						}
 #if WINDOWS
-						this.tServer.StartInfo.FileName = "TerrariaServer.exe";
+						this.tServer.StartInfo.FileName = "tModLoaderServer.exe";
 #else
-						this.tServer.StartInfo.FileName = "TerrariaServer";
+						this.tServer.StartInfo.FileName = "tModLoaderServer";
 #endif
 						this.tServer.StartInfo.Arguments = text;
 						if (Main.libPath != "")
@@ -42586,6 +_,7 @@
 							ProcessStartInfo expr_F4F = this.tServer.StartInfo;
 							expr_F4F.Arguments = expr_F4F.Arguments + " -loadlib " + Main.libPath;
 						}
+
 						this.tServer.StartInfo.UseShellExecute = false;
 						this.tServer.StartInfo.CreateNoWindow = true;
 						if (SocialAPI.Network != null)
@@ -42596,6 +_,7 @@
 						{
 							this.tServer.Start();
 						}
+
 						Netplay.SetRemoteIP("127.0.0.1");
 						Main.autoPass = true;
 						Main.statusText = Lang.menu[8];
@@ -42654,37 +_,39 @@
 							}
 						}
 					}
+
 					if (flag5)
 					{
 						flag5 = false;
 						this.selectedMenu = 5;
 					}
+
 					switch (this.selectedMenu)
 					{
 						case 1:
 							Main.MenuServerMode ^= ServerMode.Lobby;
-							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
-							break;
+						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
+						break;
 						case 2:
 							Main.MenuServerMode ^= ServerMode.FriendsCanJoin;
-							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
-							break;
+						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
+						break;
 						case 3:
 							Main.MenuServerMode ^= ServerMode.FriendsOfFriends;
-							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
-							break;
+						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
+						break;
 						case 4:
 							Main.clrInput();
-							Netplay.ServerPassword = "";
-							Main.GetInputText("");
-							Main.autoPass = false;
-							Main.menuMode = 30;
-							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
-							break;
+						Netplay.ServerPassword = "";
+						Main.GetInputText("");
+						Main.autoPass = false;
+						Main.menuMode = 30;
+						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
+						break;
 						case 5:
 							Main.menuMode = 6;
-							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
-							break;
+						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
+						break;
 					}
 				}
 				else if (Main.menuMode == 15)
@@ -42708,17 +_,28 @@
 				{
 					num5 = 3;
 					array9[0] = Lang.menu[9];
+					if (WorldIO.customDataFail != null)
+					{
+						array9[0] = WorldIO.customDataFail.modName + " " + array9[0];
+					}
+
 					array[0] = true;
 					num2 -= 30;
 					array4[1] = 70;
 					array4[2] = 50;
 					array9[1] = Lang.menu[10];
 					array9[2] = Lang.menu[6];
+					if (WorldIO.customDataFail != null)
+					{
+						array9[2] = "View Error";
+					}
+
 					if (this.selectedMenu == 1)
 					{
 						if (FileUtilities.Exists(Main.worldPathName + ".bak", Main.ActiveWorldFileData.IsCloudSave))
 						{
 							FileUtilities.Move(Main.worldPathName + ".bak", Main.worldPathName, Main.ActiveWorldFileData.IsCloudSave, true);
+							WorldIO.LoadBackup(Main.worldPathName, Main.ActiveWorldFileData.IsCloudSave);
 							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 							WorldGen.playWorld();
 							Main.menuMode = 10;
@@ -42730,11 +_,20 @@
 							Main.netMode = 0;
 						}
 					}
+
 					if (this.selectedMenu == 2 || flag5)
 					{
 						flag5 = false;
 						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
-						Main.menuMode = 0;
+						if (WorldIO.customDataFail == null)
+						{
+							Main.menuMode = 0;
+						}
+						else
+						{
+							ErrorLogger.LogException(WorldIO.customDataFail.InnerException);
+						}
+
 						Main.netMode = 0;
 					}
 				}
@@ -42742,6 +_,11 @@
 				{
 					num5 = 3;
 					array9[0] = Lang.menu[9];
+					if (WorldIO.customDataFail != null)
+					{
+						array9[0] = WorldIO.customDataFail.modName + " " + array9[0];
+					}
+
 					array[0] = true;
 					array[1] = true;
 					num2 -= 30;
@@ -42749,11 +_,24 @@
 					array4[2] = 50;
 					array9[1] = Lang.menu[11];
 					array9[2] = Lang.menu[5];
+					if (WorldIO.customDataFail != null)
+					{
+						array9[2] = "View Error";
+					}
+
 					if (this.selectedMenu == 2 || flag5)
 					{
 						flag5 = false;
 						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
-						Main.menuMode = 0;
+						if (WorldIO.customDataFail == null)
+						{
+							Main.menuMode = 0;
+						}
+						else
+						{
+							ErrorLogger.LogException(WorldIO.customDataFail.InnerException);
+						}
+
 						Main.netMode = 0;
 					}
 				}
@@ -42790,62 +_,70 @@
 						{
 							case 0:
 								text2 = "Solar";
-								break;
+							break;
 							case 1:
 								text2 = "Vortex";
-								break;
+							break;
 							case 2:
 								text2 = "Nebula";
-								break;
+							break;
 							case 3:
 								text2 = "Stardust";
-								break;
+							break;
 							case 4:
 								text2 = "MoonLord";
-								break;
+							break;
 							case 5:
 								text2 = "MonolithSolar";
-								break;
+							break;
 							case 6:
 								text2 = "MonolithVortex";
-								break;
+							break;
 							case 7:
 								text2 = "MonolithNebula";
-								break;
+							break;
 							case 8:
 								text2 = "MonolithStardust";
-								break;
+							break;
 							case 9:
 								text2 = "Blizzard";
-								break;
+							break;
 							case 10:
 								text2 = "HeatDistortion";
-								break;
+							break;
 							case 11:
 								text2 = "Sandstorm";
-								break;
-						}
+							break;
+						}
+
 						if (SkyManager.Instance[text2] != null && SkyManager.Instance[text2].IsActive())
 						{
 							SkyManager.Instance.Deactivate(text2, new object[0]);
 						}
+
 						if (Filters.Scene[text2].IsActive())
 						{
 							Filters.Scene[text2].Deactivate(new object[0]);
 						}
 					}
+
 					if (Filters.Scene["BloodMoon"].IsActive())
 					{
 						Filters.Scene["BloodMoon"].Deactivate(new object[0]);
 					}
+
 					if (SkyManager.Instance["Martian"].IsActive())
 					{
 						SkyManager.Instance["Martian"].Deactivate(new object[0]);
 					}
+
 					if (SkyManager.Instance["Slime"].IsActive())
 					{
 						SkyManager.Instance["Slime"].Deactivate(new object[0]);
 					}
+
+					Filters.Scene.DeactivateAll();
+					SkyManager.Instance.DeactivateAll();
 					int num10 = 0;
 					num5 = 5;
 					num4 = 60;
@@ -42855,6 +_,7 @@
 						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 						Main.menuMode = 1;
 					}
+
 					num10++;
 					array9[num10] = Lang.menu[13];
 					if (this.selectedMenu == num10)
@@ -42862,6 +_,7 @@
 						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 						Main.menuMode = 12;
 					}
+
 					num10++;
 					array9[num10] = Lang.menu[131];
 					if (this.selectedMenu == num10)
@@ -42870,19 +_,23 @@
 						Main.MenuUI.SetState(Main.AchievementsMenu);
 						Main.menuMode = 888;
 					}
+
 					num10++;
+					Interface.AddMenuButtons(this, this.selectedMenu, array9, array7, ref num2, ref num4, ref num10, ref num5);
 					array9[num10] = Lang.menu[14];
 					if (this.selectedMenu == num10)
 					{
 						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 						Main.menuMode = 11;
 					}
+
 					num10++;
 					array9[num10] = Lang.menu[15];
 					if (this.selectedMenu == num10)
 					{
 						this.QuitGame();
 					}
+
 					num10++;
 				}
 				else if (Main.menuMode == 1)
@@ -42899,23 +_,27 @@
 						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 						Main.selColor = Main.PendingPlayer.hairColor;
 					}
+
 					if (this.selectedMenu == 1)
 					{
 						Main.menuMode = 18;
 						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 						Main.selColor = Main.PendingPlayer.eyeColor;
 					}
+
 					if (this.selectedMenu == 2)
 					{
 						Main.menuMode = 19;
 						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 						Main.selColor = Main.PendingPlayer.skinColor;
 					}
+
 					if (this.selectedMenu == 3)
 					{
 						Main.menuMode = 20;
 						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 					}
+
 					array9[0] = Lang.menu[18];
 					array9[1] = Lang.menu[19];
 					array9[2] = Lang.menu[20];
@@ -42932,6 +_,7 @@
 							array7[num11] = 0.9f;
 						}
 					}
+
 					num4 = 38;
 					array4[6] = 6;
 					array4[7] = 12;
@@ -42946,6 +_,7 @@
 					{
 						array9[4] = Lang.menu[23];
 					}
+
 					if (this.selectedMenu == 4)
 					{
 						if (Main.PendingPlayer.Male)
@@ -42959,6 +_,7 @@
 							Main.PendingPlayer.Male = true;
 						}
 					}
+
 					if (Main.PendingPlayer.difficulty == 2)
 					{
 						array9[5] = Lang.menu[24];
@@ -42973,11 +_,13 @@
 					{
 						array9[5] = Lang.menu[26];
 					}
+
 					if (this.selectedMenu == 5)
 					{
 						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 						Main.menuMode = 222;
 					}
+
 					if (this.selectedMenu == 7)
 					{
 						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
@@ -42987,6 +_,7 @@
 						{
 							Main.PendingPlayer.eyeColor = this.randColor();
 						}
+
 						Main.PendingPlayer.hairColor = this.randColor();
 						Main.PendingPlayer.pantsColor = this.randColor();
 						Main.PendingPlayer.shirtColor = this.randColor();
@@ -42997,6 +_,7 @@
 						{
 							num12 = 1f;
 						}
+
 						Main.PendingPlayer.skinColor.R = (byte)((float)Main.rand.Next(240, 255) * num12);
 						Main.PendingPlayer.skinColor.G = (byte)((float)Main.rand.Next(110, 140) * num12);
 						Main.PendingPlayer.skinColor.B = (byte)((float)Main.rand.Next(75, 110) * num12);
@@ -43010,8 +_,10 @@
 						{
 							Main.PendingPlayer.Male = true;
 						}
+
 						Main.PendingPlayer.skinVariant = Main.rand.Next(10);
 					}
+
 					array9[7] = Lang.menu[27];
 					array9[6] = Lang.menu[28];
 					array9[8] = Lang.menu[5];
@@ -43048,6 +_,7 @@
 					{
 						array9[0] = Lang.menu[32];
 					}
+
 					num4 = 50;
 					array4[1] = 25;
 					array4[2] = 25;
@@ -43084,35 +_,41 @@
 						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 						Main.selColor = Main.PendingPlayer.shirtColor;
 					}
+
 					if (this.selectedMenu == 1)
 					{
 						Main.menuMode = 22;
 						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 						Main.selColor = Main.PendingPlayer.underShirtColor;
 					}
+
 					if (this.selectedMenu == 2)
 					{
 						Main.menuMode = 23;
 						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 						Main.selColor = Main.PendingPlayer.pantsColor;
 					}
+
 					if (this.selectedMenu == 3)
 					{
 						Main.selColor = Main.PendingPlayer.shoeColor;
 						Main.menuMode = 24;
 						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 					}
+
 					if (this.selectedMenu == 5 || flag5)
 					{
 						flag5 = false;
 						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
 						Main.menuMode = 2;
 					}
+
 					if (this.selectedMenu == 4)
 					{
 						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 						Main.CycleClothingStyle(Main.PendingPlayer);
 					}
+
 					num7 = Main.screenWidth / 2 - 16;
 					num8 = 210;
 					num2 = 260;
@@ -43148,6 +_,7 @@
 					{
 						UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 9;
 					}
+
 					if (this.selectedMenu == 0)
 					{
 						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
@@ -43166,6 +_,7 @@
 							Main.PendingPlayer.hair = num14 - 1;
 						}
 					}
+
 					if (this.selectedMenu == 2 || flag5)
 					{
 						flag5 = false;
@@ -43371,6 +_,7 @@
 						{
 							array9[0] = Lang.menu[32];
 						}
+
 						array[0] = true;
 						array[1] = true;
 						array9[2] = Language.GetTextValue("UI.Normal");
@@ -43403,6 +_,7 @@
 							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
 							Main.menuMode = 16;
 						}
+
 						Main.clrInput();
 					}
 					else if (Main.menuMode == -71)
@@ -43425,6 +_,7 @@
 							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 							Main.menuMode = 7;
 						}
+
 						num15++;
 						array9[num15] = Lang.misc[102];
 						if (this.selectedMenu == num15)
@@ -43433,6 +_,7 @@
 							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 							Main.menuMode = 7;
 						}
+
 						num15++;
 						array9[num15] = Lang.misc[103];
 						if (this.selectedMenu == num15)
@@ -43441,6 +_,7 @@
 							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 							Main.menuMode = 7;
 						}
+
 						num15++;
 						array9[num15] = Language.GetTextValue("UI.Back");
 						if (this.selectedMenu == num15 || flag5)
@@ -43449,6 +_,7 @@
 							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
 							Main.menuMode = -7;
 						}
+
 						num15++;
 						Main.clrInput();
 					}
@@ -43472,6 +_,7 @@
 						{
 							array7[num16] = 0.8f;
 						}
+
 						array9[7] = Lang.menu[5];
 						for (int num17 = 0; num17 < 7; num17++)
 						{
@@ -43488,6 +_,7 @@
 								array9[num17] = null;
 							}
 						}
+
 						if (Main.WorldList.Count > 7 + Main.menuSkip)
 						{
 							array9[6] = Language.GetTextValue("UI.More");
@@ -43496,6 +_,7 @@
 							array4[6] += 8;
 							this.menuWide[6] = true;
 						}
+
 						if (Main.menuSkip > 0)
 						{
 							array9[0] = "▲";
@@ -43503,6 +_,7 @@
 							array4[0] += 8;
 							this.menuWide[0] = true;
 						}
+
 						if (this.selectedMenu == 0 && Main.menuSkip > 0)
 						{
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
@@ -43558,11 +_,13 @@
 						num2 = 210;
 						num4 = 37;
 						num5 = 8;
+						num5++; // Room for tModLoader settings option.
 						array4[num5 - 1] = 8;
 						for (int num18 = 0; num18 < num5; num18++)
 						{
 							array7[num18] = 0.75f;
 						}
+
 						int num19 = 0;
 						array9[num19] = Lang.menu[114];
 						if (this.selectedMenu == num19)
@@ -43570,6 +_,7 @@
 							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 							Main.menuMode = 112;
 						}
+
 						num19++;
 						array9[num19] = Lang.menu[210];
 						if (this.selectedMenu == num19)
@@ -43577,6 +_,7 @@
 							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 							Main.menuMode = 1112;
 						}
+
 						num19++;
 						array9[num19] = Lang.menu[63];
 						if (this.selectedMenu == num19)
@@ -43584,6 +_,7 @@
 							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 							Main.menuMode = 1111;
 						}
+
 						num19++;
 						array9[num19] = Lang.menu[65];
 						if (this.selectedMenu == num19)
@@ -43591,6 +_,7 @@
 							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
 							Main.menuMode = 26;
 						}
+
 						num19++;
 						array9[num19] = Lang.menu[218];
 						if (this.selectedMenu == num19)
@@ -43598,6 +_,7 @@
 							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 							Main.menuMode = 1125;
 						}
+
 						num19++;
 						array9[num19] = Lang.menu[219];
 						if (this.selectedMenu == num19)
@@ -43605,6 +_,7 @@
 							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 							Main.menuMode = 1127;
 						}
+
 						num19++;
 						array9[num19] = Lang.menu[103];
 						if (this.selectedMenu == num19)
@@ -43612,6 +_,15 @@
 							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 							Main.menuMode = 1213;
 						}
+
+						num19++;
+						array9[num19] = "tModLoader " + Lang.menu[14]; //"tModLoader Settings"
+						if (this.selectedMenu == num19)
+						{
+							Main.PlaySound(10, -1, -1, 1);
+							Main.menuMode = Interface.tModLoaderSettingsID;
+						}
+
 						num19++;
 						array9[num19] = Lang.menu[5];
 						if (this.selectedMenu == num19 || flag5)
@@ -43632,6 +_,7 @@
 						{
 							array7[num20] = 0.78f;
 						}
+
 						int num21 = 0;
 						if (Main.autoSave)
 						{
@@ -43641,6 +_,7 @@
 						{
 							array9[num21] = Lang.menu[68];
 						}
+
 						if (this.selectedMenu == num21)
 						{
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
@@ -43653,6 +_,7 @@
 								Main.autoSave = true;
 							}
 						}
+
 						num21++;
 						if (Main.autoPause)
 						{
@@ -43662,6 +_,7 @@
 						{
 							array9[num21] = Lang.menu[70];
 						}
+
 						if (this.selectedMenu == num21)
 						{
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
@@ -43674,6 +_,7 @@
 								Main.autoPause = true;
 							}
 						}
+
 						num21++;
 						if (Main.mapEnabled)
 						{
@@ -43683,6 +_,7 @@
 						{
 							array9[num21] = Lang.menu[113];
 						}
+
 						if (this.selectedMenu == num21)
 						{
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
@@ -43695,6 +_,7 @@
 								Main.mapEnabled = true;
 							}
 						}
+
 						num21++;
 						array9[num21] = (Main.HidePassword ? Lang.menu[212] : Lang.menu[211]);
 						if (this.selectedMenu == num21)
@@ -43702,6 +_,7 @@
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 							Main.HidePassword = !Main.HidePassword;
 						}
+
 						num21++;
 						array9[num21] = Lang.menu[5];
 						if (this.selectedMenu == num21 || flag5)
@@ -43721,6 +_,7 @@
 						{
 							array7[num22] = 0.75f;
 						}
+
 						int num23 = 0;
 						if (Main.showItemText)
 						{
@@ -43730,6 +_,7 @@
 						{
 							array9[num23] = Lang.menu[72];
 						}
+
 						if (this.selectedMenu == num23)
 						{
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
@@ -43742,6 +_,7 @@
 								Main.showItemText = true;
 							}
 						}
+
 						num23++;
 						array9[num23] = Lang.menu[123] + " " + Lang.menu[124 + Main.invasionProgressMode];
 						if (this.selectedMenu == num23)
@@ -43753,6 +_,7 @@
 								Main.invasionProgressMode = 0;
 							}
 						}
+
 						num23++;
 						array9[num23] = (Main.placementPreview ? Lang.menu[128] : Lang.menu[129]);
 						if (this.selectedMenu == num23)
@@ -43760,6 +_,7 @@
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 							Main.placementPreview = !Main.placementPreview;
 						}
+
 						num23++;
 						array9[num23] = (ItemSlot.Options.HighlightNewItems ? Lang.inter[117] : Lang.inter[116]);
 						if (this.selectedMenu == num23)
@@ -43767,6 +_,7 @@
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 							ItemSlot.Options.HighlightNewItems = !ItemSlot.Options.HighlightNewItems;
 						}
+
 						num23++;
 						array9[num23] = (Main.MouseShowBuildingGrid ? Lang.menu[229] : Lang.menu[230]);
 						if (this.selectedMenu == num23)
@@ -43774,6 +_,7 @@
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 							Main.MouseShowBuildingGrid = !Main.MouseShowBuildingGrid;
 						}
+
 						num23++;
 						array9[num23] = (Main.GamepadDisableInstructionsDisplay ? Lang.menu[241] : Lang.menu[242]);
 						if (this.selectedMenu == num23)
@@ -43781,6 +_,7 @@
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 							Main.GamepadDisableInstructionsDisplay = !Main.GamepadDisableInstructionsDisplay;
 						}
+
 						num23++;
 						array9[num23] = Lang.menu[5];
 						if (this.selectedMenu == num23 || flag5)
@@ -43798,6 +_,7 @@
 						{
 							array7[num24] = 0.6f;
 						}
+
 						array4[11] = 8;
 						num5 = 12;
 						if (Main.graphics.IsFullScreen)
@@ -43808,6 +_,7 @@
 						{
 							array9[0] = Lang.menu[50];
 						}
+
 						Main.bgScroll = (int)Math.Round((double)((1f - Main.caveParallax) * 500f));
 						array9[1] = Lang.menu[51];
 						array9[2] = Lang.menu[52];
@@ -43828,6 +_,7 @@
 						{
 							array9[4] = Lang.menu[58];
 						}
+
 						if (Lighting.LightingThreads == 0)
 						{
 							array9[5] = Lang.menu[116] + " " + Lang.menu[117];
@@ -43836,6 +_,7 @@
 						{
 							array9[5] = Lang.menu[116] + " " + (Lighting.LightingThreads + 1);
 						}
+
 						if (Main.qaStyle == 0)
 						{
 							array9[6] = Lang.menu[59];
@@ -43852,6 +_,7 @@
 						{
 							array9[6] = Lang.menu[62];
 						}
+
 						if (Main.BackgroundEnabled)
 						{
 							array9[7] = Lang.menu[100];
@@ -43860,6 +_,7 @@
 						{
 							array9[7] = Lang.menu[101];
 						}
+
 						array9[10] = Language.GetTextValue("UI.Effects");
 						array9[11] = Lang.menu[5];
 						if (this.selectedMenu == 7)
@@ -43874,6 +_,7 @@
 								Main.BackgroundEnabled = true;
 							}
 						}
+
 						if (this.selectedMenu == 11 || flag5)
 						{
 							flag5 = false;
@@ -43881,18 +_,21 @@
 							Main.SaveSettings();
 							Main.menuMode = 11;
 						}
+
 						array9[9] = (Main.SettingsEnabled_MinersWobble ? Lang.menu[250] : Lang.menu[251]);
 						if (this.selectedMenu == 9)
 						{
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 							Main.SettingsEnabled_MinersWobble = !Main.SettingsEnabled_MinersWobble;
 						}
+
 						array9[8] = (ChildSafety.Disabled ? Lang.menu[132] : Lang.menu[133]);
 						if (this.selectedMenu == 8)
 						{
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 							ChildSafety.Disabled = !ChildSafety.Disabled;
 						}
+
 						if (this.selectedMenu == 6)
 						{
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
@@ -43902,6 +_,7 @@
 								Main.qaStyle = 0;
 							}
 						}
+
 						if (this.selectedMenu == 5)
 						{
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
@@ -43911,6 +_,7 @@
 								Lighting.LightingThreads = 0;
 							}
 						}
+
 						if (this.selectedMenu == 4)
 						{
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
@@ -43920,6 +_,7 @@
 								Lighting.lightMode = 0;
 							}
 						}
+
 						if (this.selectedMenu == 3)
 						{
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
@@ -43929,21 +_,25 @@
 								Main.FrameSkipMode = 0;
 							}
 						}
+
 						if (this.selectedMenu == 2)
 						{
 							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
 							Main.menuMode = 28;
 						}
+
 						if (this.selectedMenu == 10)
 						{
 							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
 							Main.menuMode = 2008;
 						}
+
 						if (this.selectedMenu == 1)
 						{
 							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 							Main.menuMode = 111;
 						}
+
 						if (this.selectedMenu == 0)
 						{
 							Main.ToggleFullScreen();
@@ -43967,17 +_,18 @@
 						{
 							case 1:
 								textValue = Language.GetTextValue("GameUI.QualityLow");
-								break;
+							break;
 							case 2:
 								textValue = Language.GetTextValue("GameUI.QualityMedium");
-								break;
+							break;
 							case 3:
 								textValue = Language.GetTextValue("GameUI.QualityHigh");
-								break;
+							break;
 							default:
 								textValue = Language.GetTextValue("GameUI.QualityOff");
-								break;
-						}
+							break;
+						}
+
 						array9[4] = Language.GetTextValue("GameUI.WaveQuality", textValue);
 						array7[4] = 0.8f;
 						array9[5] = Lang.menu[5];
@@ -43985,14 +_,17 @@
 						{
 							Main.UseStormEffects = !Main.UseStormEffects;
 						}
+
 						if (this.selectedMenu == 3)
 						{
 							Main.UseHeatDistortion = !Main.UseHeatDistortion;
 						}
+
 						if (this.selectedMenu == 4)
 						{
 							Main.WaveQuality = (Main.WaveQuality + 1) % 4;
 						}
+
 						if (this.selectedMenu == 5 || flag5)
 						{
 							flag5 = false;
@@ -44006,6 +_,7 @@
 						{
 							array7[num25] = 0.85f;
 						}
+
 #if WINDOWS
 						bool flag7 = true;
 						Form form = (Form)Control.FromHandle(Main.instance.Window.Handle);
@@ -44014,6 +_,7 @@
 						{
 							flag7 = false;
 						}
+
 #else
 						bool flag7 = false;
 #endif
@@ -44021,13 +_,13 @@
 						num4 = 55;
 						int num26 = 0;
 						array9[num26] = string.Concat(new object[]
-							{
-								Lang.menu[73],
+						{
+							Lang.menu[73],
 								": ",
 								Main.PendingResolutionWidth,
 								"x",
 								Main.PendingResolutionHeight
-							});
+						});
 						if (this.selectedMenu == num26)
 						{
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
@@ -44040,10 +_,12 @@
 									break;
 								}
 							}
+
 							num27 = (num27 + 1) % Main.numDisplayModes;
 							Main.PendingResolutionWidth = Main.displayWidth[num27];
 							Main.PendingResolutionHeight = Main.displayHeight[num27];
 						}
+
 						num26++;
 						if (flag7)
 						{
@@ -44053,8 +_,10 @@
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 								Main.PendingBorderlessState = !Main.PendingBorderlessState;
 							}
+
 							num26++;
 						}
+
 						array4[num26] = 100;
 						array9[num26] = Lang.menu[134];
 						if (this.selectedMenu == num26)
@@ -44064,9 +_,11 @@
 								Main.screenBorderless = Main.PendingBorderlessState;
 								Main.SetResolution(Main.PendingResolutionWidth, Main.PendingResolutionHeight);
 							}
+
 							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
 							Main.menuMode = 1111;
 						}
+
 						num26++;
 						array9[num26] = Lang.menu[5];
 						array4[num26] = 100;
@@ -44079,6 +_,7 @@
 							Main.menuMode = 1111;
 							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
 						}
+
 						num26++;
 						num5 = num26;
 					}
@@ -44092,6 +_,7 @@
 						{
 							array7[num29] = 0.73f;
 						}
+
 						int num30 = 0;
 						array9[num30] = Lang.menu[64];
 						if (this.selectedMenu == num30)
@@ -44100,6 +_,7 @@
 							Main.selColor = Main.mouseColor;
 							Main.menuMode = 25;
 						}
+
 						num30++;
 						array9[num30] = Lang.menu[217];
 						if (this.selectedMenu == num30)
@@ -44108,6 +_,7 @@
 							Main.selColor = Main.MouseBorderColor;
 							Main.menuMode = 252;
 						}
+
 						num30++;
 						array9[num30] = (Main.cSmartCursorToggle ? Lang.menu[121] : Lang.menu[122]);
 						if (this.selectedMenu == num30)
@@ -44115,6 +_,7 @@
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 							Main.cSmartCursorToggle = !Main.cSmartCursorToggle;
 						}
+
 						num30++;
 						array9[num30] = (Player.SmartCursorSettings.SmartAxeAfterPickaxe ? Lang.menu[214] : Lang.menu[213]);
 						if (this.selectedMenu == num30)
@@ -44122,6 +_,7 @@
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 							Player.SmartCursorSettings.SmartAxeAfterPickaxe = !Player.SmartCursorSettings.SmartAxeAfterPickaxe;
 						}
+
 						num30++;
 						array9[num30] = (Player.SmartCursorSettings.SmartBlocksEnabled ? Lang.menu[215] : Lang.menu[216]);
 						if (this.selectedMenu == num30)
@@ -44129,24 +_,27 @@
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 							Player.SmartCursorSettings.SmartBlocksEnabled = !Player.SmartCursorSettings.SmartBlocksEnabled;
 						}
+
 						num30++;
 						switch (LockOnHelper.UseMode)
 						{
 							case LockOnHelper.LockOnMode.FocusTarget:
 								array9[num30] = Lang.menu[232];
-								break;
+							break;
 							case LockOnHelper.LockOnMode.TargetClosest:
 								array9[num30] = Lang.menu[233];
-								break;
+							break;
 							case LockOnHelper.LockOnMode.ThreeDS:
 								array9[num30] = Lang.menu[234];
-								break;
-						}
+							break;
+						}
+
 						if (this.selectedMenu == num30)
 						{
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 							LockOnHelper.CycleUseModes();
 						}
+
 						num30++;
 						array9[num30] = Lang.menu[5];
 						if (this.selectedMenu == num30 || flag5)
@@ -44253,6 +_,7 @@
 						{
 							array11[Main.setKey] = "_";
 						}
+
 						array9[0] = Lang.menu[106] + array11[0];
 						array9[1] = Lang.menu[107] + array11[1];
 						array9[2] = Lang.menu[108] + array11[2];
@@ -44265,6 +_,7 @@
 							array7[num31] = 0.55f;
 							array5[num31] = -140;
 						}
+
 						array7[6] = 0.8f;
 						array7[6] = 0.8f;
 						array4[6] = 6;
@@ -44292,6 +_,7 @@
 						{
 							Main.setKey = this.selectedMenu;
 						}
+
 						if (Main.setKey >= 0)
 						{
 							Microsoft.Xna.Framework.Input.Keys[] pressedKeys = Main.keyState.GetPressedKeys();
@@ -44304,26 +_,32 @@
 									{
 										Main.cMapStyle = a;
 									}
+
 									if (Main.setKey == 1)
 									{
 										Main.cMapFull = a;
 									}
+
 									if (Main.setKey == 2)
 									{
 										Main.cMapZoomIn = a;
 									}
+
 									if (Main.setKey == 3)
 									{
 										Main.cMapZoomOut = a;
 									}
+
 									if (Main.setKey == 4)
 									{
 										Main.cMapAlphaUp = a;
 									}
+
 									if (Main.setKey == 5)
 									{
 										Main.cMapAlphaDown = a;
 									}
+
 									Main.setKey = -1;
 								}
 							}
@@ -44355,6 +_,7 @@
 						{
 							array12[Main.setKey] = "_";
 						}
+
 						array9[0] = Lang.menu[74] + array12[0];
 						array9[1] = Lang.menu[75] + array12[1];
 						array9[2] = Lang.menu[76] + array12[2];
@@ -44375,6 +_,7 @@
 							array7[num32] = 0.45f;
 							array5[num32] = -80;
 						}
+
 						array7[14] = 0.8f;
 						array4[14] = 6;
 						array9[14] = Lang.menu[86];
@@ -44397,6 +_,7 @@
 						{
 							Main.setKey = this.selectedMenu;
 						}
+
 						if (Main.setKey >= 0)
 						{
 							Microsoft.Xna.Framework.Input.Keys[] pressedKeys2 = Main.keyState.GetPressedKeys();
@@ -44409,58 +_,72 @@
 									{
 										Main.cUp = a2;
 									}
+
 									if (Main.setKey == 1)
 									{
 										Main.cDown = a2;
 									}
+
 									if (Main.setKey == 2)
 									{
 										Main.cLeft = a2;
 									}
+
 									if (Main.setKey == 3)
 									{
 										Main.cRight = a2;
 									}
+
 									if (Main.setKey == 4)
 									{
 										Main.cJump = a2;
 									}
+
 									if (Main.setKey == 5)
 									{
 										Main.cThrowItem = a2;
 									}
+
 									if (Main.setKey == 6)
 									{
 										Main.cInv = a2;
 									}
+
 									if (Main.setKey == 7)
 									{
 										Main.cHeal = a2;
 									}
+
 									if (Main.setKey == 8)
 									{
 										Main.cMana = a2;
 									}
+
 									if (Main.setKey == 9)
 									{
 										Main.cBuff = a2;
 									}
+
 									if (Main.setKey == 10)
 									{
 										Main.cHook = a2;
 									}
+
 									if (Main.setKey == 11)
 									{
 										Main.cTorch = a2;
 									}
+
 									if (Main.setKey == 12)
 									{
 										Main.cSmart = a2;
 									}
+
 									if (Main.setKey == 13)
 									{
 										Main.cMount = a2;
 									}
+
 									Main.setKey = -1;
 								}
 							}
@@ -44476,6 +_,7 @@
 						{
 							array7[num33] = 0.78f;
 						}
+
 						int num34 = 0;
 						array9[num34] = (Main.ReversedUpDownArmorSetBonuses ? Lang.menu[220] : Lang.menu[221]);
 						if (this.selectedMenu == num34)
@@ -44483,6 +_,7 @@
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 							Main.ReversedUpDownArmorSetBonuses = !Main.ReversedUpDownArmorSetBonuses;
 						}
+
 						num34++;
 						array9[num34] = (Player.SmartCursorSettings.SmartWallReplacement ? Lang.menu[226] : Lang.menu[225]);
 						if (this.selectedMenu == num34)
@@ -44490,6 +_,7 @@
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 							Player.SmartCursorSettings.SmartWallReplacement = !Player.SmartCursorSettings.SmartWallReplacement;
 						}
+
 						num34++;
 						array9[num34] = (ItemSlot.Options.DisableLeftShiftTrashCan ? Lang.menu[224] : Lang.menu[223]);
 						if (this.selectedMenu == num34)
@@ -44497,6 +_,7 @@
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 							ItemSlot.Options.DisableLeftShiftTrashCan = !ItemSlot.Options.DisableLeftShiftTrashCan;
 						}
+
 						num34++;
 						array9[num34] = Lang.menu[222];
 						if (this.selectedMenu == num34)
@@ -44505,6 +_,7 @@
 							Main.MenuUI.SetState(Main.ManageControlsMenu);
 							Main.menuMode = 888;
 						}
+
 						num34++;
 						array9[num34] = Lang.menu[5];
 						if (this.selectedMenu == num34 || flag5)
@@ -44548,6 +_,7 @@
 							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
 							Main.menuMode = 0;
 						}
+
 						num5 = 3 + num35;
 					}
 					else if (Main.menuMode == 13)
@@ -44560,6 +_,7 @@
 						{
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 						}
+
 						array9[0] = Lang.menu[89];
 						array2[9] = true;
 						if (Main.getIP != "")
@@ -44568,6 +_,7 @@
 							{
 								Main.getIP = "";
 							}
+
 							for (int num36 = 0; num36 < Main.getIP.Length; num36++)
 							{
 								if (Main.getIP != " ")
@@ -44576,6 +_,7 @@
 								}
 							}
 						}
+
 						this.textBlinkerCount++;
 						if (this.textBlinkerCount >= 20)
 						{
@@ -44587,8 +_,10 @@
 							{
 								this.textBlinkerState = 0;
 							}
+
 							this.textBlinkerCount = 0;
 						}
+
 						array9[1] = Main.getIP;
 						if (this.textBlinkerState == 1)
 						{
@@ -44601,6 +_,7 @@
 							string[] array10;
 							(array10 = array9)[1] = array10[1] + " ";
 						}
+
 						array[0] = true;
 						array[1] = true;
 						array4[9] = 44;
@@ -44617,23 +_,25 @@
 							if (Main.recentWorld[num38] != null && Main.recentWorld[num38] != "")
 							{
 								array9[num37] = string.Concat(new object[]
-									{
-										Main.recentWorld[num38],
+								{
+									Main.recentWorld[num38],
 										" (",
 										Main.recentIP[num38],
 										":",
 										Main.recentPort[num38],
 										")"
-									});
+								});
 							}
 							else
 							{
 								array9[num37] = "";
 								array[num37] = true;
 							}
+
 							array7[num37] = 0.6f;
 							array4[num37] = 40;
 						}
+
 						if (this.selectedMenu >= 2 && this.selectedMenu < 9)
 						{
 							Main.autoPass = false;
@@ -44646,12 +_,14 @@
 								Netplay.StartTcpClient();
 							}
 						}
+
 						if (this.selectedMenu == 10 || flag5)
 						{
 							flag5 = false;
 							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
 							Main.menuMode = 1;
 						}
+
 						if (this.selectedMenu == 9 || (!array2[2] && Main.inputTextEnter))
 						{
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
@@ -44670,6 +_,7 @@
 						{
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 						}
+
 						array9[0] = Lang.menu[90];
 						array2[2] = true;
 						if (Main.getPort != "")
@@ -44686,11 +_,13 @@
 							catch
 							{
 							}
+
 							if (flag8)
 							{
 								array2[2] = false;
 							}
 						}
+
 						this.textBlinkerCount++;
 						if (this.textBlinkerCount >= 20)
 						{
@@ -44702,8 +_,10 @@
 							{
 								this.textBlinkerState = 0;
 							}
+
 							this.textBlinkerCount = 0;
 						}
+
 						array9[1] = Main.getPort;
 						if (this.textBlinkerState == 1)
 						{
@@ -44716,6 +_,7 @@
 							string[] array10;
 							(array10 = array9)[1] = array10[1] + " ";
 						}
+
 						array[0] = true;
 						array[1] = true;
 						array4[1] = -20;
@@ -44729,6 +_,7 @@
 							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
 							Main.menuMode = 1;
 						}
+
 						if (this.selectedMenu == 2 || (!array2[2] && Main.inputTextEnter))
 						{
 							Netplay.ListenPort = num40;
@@ -44778,14 +_,20 @@
 								Main.maxTilesX = 8400;
 								Main.maxTilesY = 2400;
 							}
+
 							Main.clrInput();
 							Main.menuMode = -7;
 							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 							WorldGen.setWorldSize();
 						}
 					}
-				}
-			}
+					else
+					{
+						Interface.ModLoaderMenus(this, this.selectedMenu, array9, array7, array4, ref num2, ref num4, ref num5, ref flag5);
+					}
+				}
+			}
+
 			IL_5075:
 			if (Main.menuMode == 888)
 			{
@@ -44798,10 +_,12 @@
 			{
 				Main.MenuUI.SetState(null);
 			}
+
 			if (UILinkPointNavigator.Shortcuts.BackButtonInUse && !flag5)
 			{
 				UILinkPointNavigator.Shortcuts.BackButtonLock = true;
 			}
+
 			int num41 = this.focusMenu;
 			if (Main.menuMode != num6)
 			{
@@ -44813,15 +_,18 @@
 					num41 = (this.focusMenu = -1);
 					Main.mouseX = (Main.mouseY = (PlayerInput.MouseX = (PlayerInput.MouseY = 0)));
 				}
+
 				for (int num42 = 0; num42 < Main.maxMenuItems; num42++)
 				{
 					this.menuItemScale[num42] = 0.8f;
 				}
 			}
+
 			if (!Main.mouseLeft)
 			{
 				Main.blockMouse = true;
 			}
+
 			this.selectedMenu = -1;
 			this.selectedMenu2 = -1;
 			this.focusMenu = -1;
@@ -44833,6 +_,7 @@
 				Main.lBar = -1f;
 				Main.aBar = -1f;
 			}
+
 			if (flag)
 			{
 				if (!Main.mouseLeft)
@@ -44840,6 +_,7 @@
 					this.grabColorSlider = 0;
 					Main.blockMouse = false;
 				}
+
 				int num43 = num9;
 				int num44 = Main.screenWidth / 2 - this.hueTexture.Width / 2;
 				int num45 = 167;
@@ -44862,11 +_,13 @@
 					num48 = Main.lBar;
 					num49 = Main.aBar;
 				}
+
 				Main.spriteBatch.Draw(this.hueTexture, new Vector2((float)num44, (float)num43), Microsoft.Xna.Framework.Color.White);
 				if ((Main.mouseX > num44 - 4 && Main.mouseX < num44 + this.hueTexture.Width + 4 && Main.mouseY > num43 - 4 && Main.mouseY < num43 + this.hueTexture.Height + 4 && this.grabColorSlider == 0) || this.grabColorSlider == 1)
 				{
 					Main.spriteBatch.Draw(Main.colorHighlightTexture, new Vector2((float)num44, (float)num43), Main.OurFavoriteColor);
 				}
+
 				Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num44 + (float)(this.hueTexture.Width - 2) * Main.hBar - (float)(Main.colorSliderTexture.Width / 2), (float)(num43 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
 				if ((Main.mouseX > num44 - 4 && Main.mouseX < num44 + this.hueTexture.Width + 4 && Main.mouseY > num43 - 4 && Main.mouseY < num43 + this.hueTexture.Height + 4 && this.grabColorSlider == 0) || this.grabColorSlider == 1)
 				{
@@ -44880,13 +_,16 @@
 						{
 							num46 = 0f;
 						}
+
 						if (num46 > 1f)
 						{
 							num46 = 1f;
 						}
+
 						Main.hBar = num46;
 					}
 				}
+
 				GamepadMainMenuHandler.MenuItemPositions.Add(new Vector2((float)num44, (float)num43) + Main.colorBarTexture.Size() / 2f);
 				num43 += 26;
 				Main.spriteBatch.Draw(Main.colorBarTexture, new Vector2((float)num44, (float)num43), Microsoft.Xna.Framework.Color.White);
@@ -44896,10 +_,12 @@
 					Microsoft.Xna.Framework.Color color4 = Main.hslToRgb(num46, saturation, num48);
 					Main.spriteBatch.Draw(Main.colorBlipTexture, new Vector2((float)(num44 + num50 + 5), (float)(num43 + 4)), color4);
 				}
+
 				if ((Main.mouseX > num44 - 4 && Main.mouseX < num44 + this.hueTexture.Width + 4 && Main.mouseY > num43 - 4 && Main.mouseY < num43 + this.hueTexture.Height + 4 && this.grabColorSlider == 0) || this.grabColorSlider == 2)
 				{
 					Main.spriteBatch.Draw(Main.colorHighlightTexture, new Vector2((float)num44, (float)num43), Main.OurFavoriteColor);
 				}
+
 				Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num44 + (float)(this.hueTexture.Width - 2) * Main.sBar - (float)(Main.colorSliderTexture.Width / 2), (float)(num43 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
 				if ((Main.mouseX > num44 - 4 && Main.mouseX < num44 + this.hueTexture.Width + 4 && Main.mouseY > num43 - 4 && Main.mouseY < num43 + this.hueTexture.Height + 4 && this.grabColorSlider == 0) || this.grabColorSlider == 2)
 				{
@@ -44913,13 +_,16 @@
 						{
 							num47 = 0f;
 						}
+
 						if (num47 > 1f)
 						{
 							num47 = 1f;
 						}
+
 						Main.sBar = num47;
 					}
 				}
+
 				GamepadMainMenuHandler.MenuItemPositions.Add(new Vector2((float)num44, (float)num43) + Main.colorBarTexture.Size() / 2f);
 				num43 += 26;
 				Main.spriteBatch.Draw(Main.colorBarTexture, new Vector2((float)num44, (float)num43), Microsoft.Xna.Framework.Color.White);
@@ -44928,16 +_,19 @@
 				{
 					num51 = 0f;
 				}
+
 				for (int num52 = 0; num52 <= num45; num52++)
 				{
 					float luminosity = (float)num52 / (float)num45;
 					Microsoft.Xna.Framework.Color color5 = Main.hslToRgb(num46, num47, luminosity);
 					Main.spriteBatch.Draw(Main.colorBlipTexture, new Vector2((float)(num44 + num52 + 5), (float)(num43 + 4)), color5);
 				}
+
 				if ((Main.mouseX > num44 - 4 && Main.mouseX < num44 + this.hueTexture.Width + 4 && Main.mouseY > num43 - 4 && Main.mouseY < num43 + this.hueTexture.Height + 4 && this.grabColorSlider == 0) || this.grabColorSlider == 3)
 				{
 					Main.spriteBatch.Draw(Main.colorHighlightTexture, new Vector2((float)num44, (float)num43), Main.OurFavoriteColor);
 				}
+
 				Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num44 + (float)(this.hueTexture.Width - 2) * ((Main.lBar - num51) / (1f - num51)) - (float)(Main.colorSliderTexture.Width / 2), (float)(num43 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
 				if ((Main.mouseX > num44 - 4 && Main.mouseX < num44 + this.hueTexture.Width + 4 && Main.mouseY > num43 - 4 && Main.mouseY < num43 + this.hueTexture.Height + 4 && this.grabColorSlider == 0) || this.grabColorSlider == 3)
 				{
@@ -44951,14 +_,17 @@
 						{
 							num48 = 0f;
 						}
+
 						if (num48 > 1f)
 						{
 							num48 = 1f;
 						}
+
 						num48 = num48 * (1f - num51) + num51;
 						Main.lBar = num48;
 					}
 				}
+
 				GamepadMainMenuHandler.MenuItemPositions.Add(new Vector2((float)num44, (float)num43) + Main.colorBarTexture.Size() / 2f);
 				bool flag9 = false;
 				if (Main.menuMode == 252)
@@ -44973,10 +_,12 @@
 						Microsoft.Xna.Framework.Color color6 = value * scale;
 						Main.spriteBatch.Draw(Main.colorBlipTexture, new Vector2((float)(num44 + num53 + 5), (float)(num43 + 4)), color6);
 					}
+
 					if ((Main.mouseX > num44 - 4 && Main.mouseX < num44 + this.hueTexture.Width + 4 && Main.mouseY > num43 - 4 && Main.mouseY < num43 + this.hueTexture.Height + 4 && this.grabColorSlider == 0) || this.grabColorSlider == 4)
 					{
 						Main.spriteBatch.Draw(Main.colorHighlightTexture, new Vector2((float)num44, (float)num43), Main.OurFavoriteColor);
 					}
+
 					Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num44 + (float)(this.hueTexture.Width - 2) * Main.aBar - (float)(Main.colorSliderTexture.Width / 2), (float)(num43 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
 					if ((Main.mouseX > num44 - 4 && Main.mouseX < num44 + this.hueTexture.Width + 4 && Main.mouseY > num43 - 4 && Main.mouseY < num43 + this.hueTexture.Height + 4 && this.grabColorSlider == 0) || this.grabColorSlider == 4)
 					{
@@ -44990,15 +_,19 @@
 							{
 								num49 = 0f;
 							}
+
 							if (num49 > 1f)
 							{
 								num49 = 1f;
 							}
+
 							Main.aBar = num49;
 						}
 					}
+
 					GamepadMainMenuHandler.MenuItemPositions.Add(new Vector2((float)num44, (float)num43) + Main.colorBarTexture.Size() / 2f);
 				}
+
 				Main.selColor = Main.hslToRgb(Main.hBar, Main.sBar, Main.lBar);
 				if (flag9)
 				{
@@ -45016,33 +_,39 @@
 					{
 						text3 = Lang.menu[95];
 					}
+
 					if (num54 == 1)
 					{
 						text3 = Lang.menu[96];
 						num55 += 30;
 					}
+
 					if (num54 == 2)
 					{
 						text3 = Lang.menu[97];
 						num55 += 60;
 					}
+
 					if (num54 == 3)
 					{
 						text3 = string.Concat(Main.selColor.R);
 						num56 += 90;
 					}
+
 					if (num54 == 4)
 					{
 						text3 = string.Concat(Main.selColor.G);
 						num56 += 90;
 						num55 += 30;
 					}
+
 					if (num54 == 5)
 					{
 						text3 = string.Concat(Main.selColor.B);
 						num56 += 90;
 						num55 += 60;
 					}
+
 					for (int num57 = 0; num57 < 5; num57++)
 					{
 						Microsoft.Xna.Framework.Color color7 = Microsoft.Xna.Framework.Color.Black;
@@ -45053,12 +_,14 @@
 							color7.G = (byte)((255 + color7.R) / 2);
 							color7.B = (byte)((255 + color7.R) / 2);
 						}
+
 						int num58 = 255;
 						int num59 = (int)color7.R - (255 - num58);
 						if (num59 < 0)
 						{
 							num59 = 0;
 						}
+
 						color7 = new Microsoft.Xna.Framework.Color((int)((byte)num59), (int)((byte)num59), (int)((byte)num59), (int)((byte)num58));
 						int num60 = 0;
 						int num61 = 0;
@@ -45066,21 +_,26 @@
 						{
 							num60 = -2;
 						}
+
 						if (num57 == 1)
 						{
 							num60 = 2;
 						}
+
 						if (num57 == 2)
 						{
 							num61 = -2;
 						}
+
 						if (num57 == 3)
 						{
 							num61 = 2;
 						}
+
 						Main.spriteBatch.DrawString(Main.fontDeathText, text3, new Vector2((float)(num56 + num60), (float)(num55 + num61)), color7, 0f, default(Vector2), 0.5f, SpriteEffects.None, 0f);
 					}
 				}
+
 				bool flag10 = false;
 				for (int num62 = 0; num62 < 2; num62++)
 				{
@@ -45098,11 +_,13 @@
 						{
 							num65 -= 40;
 						}
+
 						text3 = "-";
 						if (num62 == 1)
 						{
 							text3 = "+";
 						}
+
 						Vector2 vector2 = new Vector2(24f, 24f);
 						int num66 = 142;
 						if (Main.mouseX > num65 && (float)Main.mouseX < (float)num65 + vector2.X && Main.mouseY > num64 + 13 && (float)Main.mouseY < (float)(num64 + 13) + vector2.Y)
@@ -45111,6 +_,7 @@
 							{
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 							}
+
 							Main.focusColor = (num62 + 1) * (num63 + 10);
 							flag10 = true;
 							num66 = 255;
@@ -45126,6 +_,7 @@
 									{
 										Main.colorDelay = 3;
 									}
+
 									int num67 = num62;
 									if (num62 == 0)
 									{
@@ -45135,19 +_,23 @@
 											num67 = 0;
 										}
 									}
+
 									if (num63 == 0 && (int)Main.selColor.R + num67 >= 0 && (int)Main.selColor.R + num67 <= 255)
 									{
 										Main.selColor.R = (byte)((int)Main.selColor.R + num67);
 									}
+
 									if (num63 == 1 && (int)Main.selColor.G + num67 >= 0 && (int)Main.selColor.G + num67 <= 255)
 									{
 										Main.selColor.G = (byte)((int)Main.selColor.G + num67);
 									}
+
 									if (num63 == 2 && (int)Main.selColor.B + num67 >= 0 && (int)Main.selColor.B + num67 <= 255)
 									{
 										Main.selColor.B = (byte)((int)Main.selColor.B + num67);
 									}
 								}
+
 								Main.colorDelay--;
 							}
 							else
@@ -45155,6 +_,7 @@
 								Main.colorDelay = 0;
 							}
 						}
+
 						for (int num68 = 0; num68 < 5; num68++)
 						{
 							Microsoft.Xna.Framework.Color color8 = Microsoft.Xna.Framework.Color.Black;
@@ -45165,11 +_,13 @@
 								color8.G = (byte)((255 + color8.R) / 2);
 								color8.B = (byte)((255 + color8.R) / 2);
 							}
+
 							int num69 = (int)color8.R - (255 - num66);
 							if (num69 < 0)
 							{
 								num69 = 0;
 							}
+
 							color8 = new Microsoft.Xna.Framework.Color((int)((byte)num69), (int)((byte)num69), (int)((byte)num69), (int)((byte)num66));
 							int num70 = 0;
 							int num71 = 0;
@@ -45177,28 +_,34 @@
 							{
 								num70 = -2;
 							}
+
 							if (num68 == 1)
 							{
 								num70 = 2;
 							}
+
 							if (num68 == 2)
 							{
 								num71 = -2;
 							}
+
 							if (num68 == 3)
 							{
 								num71 = 2;
 							}
+
 							Main.spriteBatch.DrawString(Main.fontDeathText, text3, new Vector2((float)(num65 + num70), (float)(num64 + num71)), color8, 0f, default(Vector2), scale2, SpriteEffects.None, 0f);
 						}
 					}
 				}
+
 				if (!flag10)
 				{
 					Main.focusColor = 0;
 					Main.colorDelay = 0;
 				}
 			}
+
 			if (flag2)
 			{
 				int num72 = 320;
@@ -45211,30 +_,31 @@
 					{
 						case 0:
 							text4 = Lang.menu[98];
-							break;
+						break;
 						case 1:
 							text4 = Lang.menu[99];
-							num74 += 30;
-							break;
+						num74 += 30;
+						break;
 						case 2:
 							text4 = Lang.menu[119];
-							num74 += 60;
-							break;
+						num74 += 60;
+						break;
 						case 3:
 							text4 = Math.Round((double)(Main.soundVolume * 100f)) + "%";
-							num75 += 90;
-							break;
+						num75 += 90;
+						break;
 						case 4:
 							text4 = Math.Round((double)(Main.musicVolume * 100f)) + "%";
-							num75 += 90;
-							num74 += 30;
-							break;
+						num75 += 90;
+						num74 += 30;
+						break;
 						case 5:
 							text4 = Math.Round((double)(Main.ambientVolume * 100f)) + "%";
-							num75 += 90;
-							num74 += 60;
-							break;
-					}
+						num75 += 90;
+						num74 += 60;
+						break;
+					}
+
 					Microsoft.Xna.Framework.Color textColor = color;
 					textColor.R = (byte)((255 + textColor.R) / 2);
 					textColor.G = (byte)((255 + textColor.R) / 2);
@@ -45245,14 +_,17 @@
 					{
 						num77 = 0;
 					}
+
 					textColor = new Microsoft.Xna.Framework.Color((int)((byte)num77), (int)((byte)num77), (int)((byte)num77), (int)((byte)num76));
 					Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontDeathText, text4, (float)num75, (float)num74, textColor, Microsoft.Xna.Framework.Color.Black, Vector2.Zero, 0.5f);
 				}
+
 				IngameOptions.rightHover = -1;
 				if (!Main.mouseLeft)
 				{
 					IngameOptions.rightLock = -1;
 				}
+
 				IngameOptions.valuePosition = new Vector2((float)(Main.screenWidth / 2 - 40), (float)(num72 - 18 + 30));
 				GamepadMainMenuHandler.MenuItemPositions.Add(IngameOptions.valuePosition - Main.colorBarTexture.Size() * new Vector2(0.5f, 0f));
 				float num78 = IngameOptions.DrawValueBar(Main.spriteBatch, 1f, Main.soundVolume, 0);
@@ -45265,6 +_,7 @@
 						Main.soundVolume = num78;
 					}
 				}
+
 				IngameOptions.valuePosition = new Vector2((float)(Main.screenWidth / 2 - 40), (float)(num72 - 18 + 60));
 				GamepadMainMenuHandler.MenuItemPositions.Add(IngameOptions.valuePosition - Main.colorBarTexture.Size() * new Vector2(0.5f, 0f));
 				float num79 = IngameOptions.DrawValueBar(Main.spriteBatch, 1f, Main.musicVolume, 0);
@@ -45277,6 +_,7 @@
 						Main.musicVolume = num79;
 					}
 				}
+
 				IngameOptions.valuePosition = new Vector2((float)(Main.screenWidth / 2 - 40), (float)(num72 - 18 + 90));
 				GamepadMainMenuHandler.MenuItemPositions.Add(IngameOptions.valuePosition - Main.colorBarTexture.Size() * new Vector2(0.5f, 0f));
 				float num80 = IngameOptions.DrawValueBar(Main.spriteBatch, 1f, Main.ambientVolume, 0);
@@ -45289,11 +_,13 @@
 						Main.ambientVolume = num80;
 					}
 				}
+
 				if (IngameOptions.rightHover != -1)
 				{
 					IngameOptions.rightLock = IngameOptions.rightHover;
 				}
 			}
+
 			if (flag3)
 			{
 				int num81 = 400;
@@ -45306,6 +_,7 @@
 					{
 						text5 = Lang.menu[52] + ": " + Main.bgScroll;
 					}
+
 					for (int num85 = 0; num85 < 5; num85++)
 					{
 						Microsoft.Xna.Framework.Color color9 = Microsoft.Xna.Framework.Color.Black;
@@ -45316,12 +_,14 @@
 							color9.G = (byte)((255 + color9.R) / 2);
 							color9.B = (byte)((255 + color9.R) / 2);
 						}
+
 						int num86 = 255;
 						int num87 = (int)color9.R - (255 - num86);
 						if (num87 < 0)
 						{
 							num87 = 0;
 						}
+
 						color9 = new Microsoft.Xna.Framework.Color((int)((byte)num87), (int)((byte)num87), (int)((byte)num87), (int)((byte)num86));
 						int num88 = 0;
 						int num89 = 0;
@@ -45329,26 +_,32 @@
 						{
 							num88 = -2;
 						}
+
 						if (num85 == 1)
 						{
 							num88 = 2;
 						}
+
 						if (num85 == 2)
 						{
 							num89 = -2;
 						}
+
 						if (num85 == 3)
 						{
 							num89 = 2;
 						}
+
 						Main.spriteBatch.DrawString(Main.fontDeathText, text5, new Vector2((float)(num84 + num88), (float)(num83 + num89)), color9, 0f, default(Vector2), 0.5f, SpriteEffects.None, 0f);
 					}
 				}
+
 				IngameOptions.rightHover = -1;
 				if (!Main.mouseLeft)
 				{
 					IngameOptions.rightLock = -1;
 				}
+
 				IngameOptions.valuePosition = new Vector2((float)(Main.screenWidth / 2 - 40), (float)(num81 + 12));
 				GamepadMainMenuHandler.MenuItemPositions.Add(IngameOptions.valuePosition - Main.colorBarTexture.Size() * new Vector2(0.5f, 0f));
 				float num90 = IngameOptions.DrawValueBar(Main.spriteBatch, 1f, (float)Main.bgScroll / 100f, 0);
@@ -45362,13 +_,16 @@
 						Main.caveParallax = 1f - (float)Main.bgScroll / 500f;
 					}
 				}
+
 				if (IngameOptions.rightHover != -1)
 				{
 					IngameOptions.rightLock = IngameOptions.rightHover;
 				}
 			}
+
 			for (int num91 = 0; num91 < num5; num91++)
 			{
+				//patch file: num5, array9, num91
 				if (array9[num91] != null)
 				{
 					Vector2 origin = Main.fontDeathText.MeasureString(array9[num91]);
@@ -45383,49 +_,55 @@
 							{
 								case 0:
 									color10 = color;
-									break;
+								break;
 								case 1:
 									color10 = Main.mcColor;
-									break;
+								break;
 								case 2:
 									color10 = Main.hcColor;
-									break;
+								break;
 								case 3:
 									color10 = Main.highVersionColor;
-									break;
+								break;
 								case 4:
 								case 5:
 								case 6:
 									color10 = Main.errorColor;
-									break;
+								break;
 								default:
 									color10 = color;
-									break;
-							}
+								break;
+							}
+
 							color10.R = (byte)((255 + color10.R) / 2);
 							color10.G = (byte)((255 + color10.G) / 2);
 							color10.B = (byte)((255 + color10.B) / 2);
 						}
+
 						int num93 = (int)(255f * (this.menuItemScale[num91] * 2f - 1f));
 						if (array[num91])
 						{
 							num93 = 255;
 						}
+
 						int num94 = (int)color10.R - (255 - num93);
 						if (num94 < 0)
 						{
 							num94 = 0;
 						}
+
 						int num95 = (int)color10.G - (255 - num93);
 						if (num95 < 0)
 						{
 							num95 = 0;
 						}
+
 						int num96 = (int)color10.B - (255 - num93);
 						if (num96 < 0)
 						{
 							num96 = 0;
 						}
+
 						if (num41 == num91 && num92 == 4)
 						{
 							float num97 = (float)num93 / 255f;
@@ -45433,6 +_,7 @@
 							num95 = (int)((float)num95 * (1f - num97) + 215f * num97);
 							num96 = (int)((float)num96 * (1f - num97) + 0f * num97);
 						}
+
 						color10 = new Microsoft.Xna.Framework.Color((int)((byte)num94), (int)((byte)num95), (int)((byte)num96), (int)((byte)num93));
 						if (array3[num91])
 						{
@@ -45448,24 +_,29 @@
 								color10.A -= (byte)(Main.mouseTextColor / 5);
 							}
 						}
+
 						int num98 = 0;
 						int num99 = 0;
 						if (num92 == 0)
 						{
 							num98 = -2;
 						}
+
 						if (num92 == 1)
 						{
 							num98 = 2;
 						}
+
 						if (num92 == 2)
 						{
 							num99 = -2;
 						}
+
 						if (num92 == 3)
 						{
 							num99 = 2;
 						}
+
 						float num100 = this.menuItemScale[num91];
 						if (Main.menuMode == 15 && num91 == 0)
 						{
@@ -45475,9 +_,11 @@
 						{
 							num100 *= 0.5f;
 						}
+
 						num100 *= array7[num91];
 						if (!array8[num91])
 						{
+							//patch file: array9, array7, array4, num2, num4
 							Main.spriteBatch.DrawString(Main.fontDeathText, array9[num91], new Vector2((float)(num3 + num98 + array5[num91]), (float)(num2 + num4 * num91 + num99) + origin.Y * array7[num91] + (float)array4[num91]), color10, 0f, origin, num100, SpriteEffects.None, 0f);
 						}
 						else
@@ -45485,10 +_,12 @@
 							Main.spriteBatch.DrawString(Main.fontDeathText, array9[num91], new Vector2((float)(num3 + num98 + array5[num91]), (float)(num2 + num4 * num91 + num99) + origin.Y * array7[num91] + (float)array4[num91]), color10, 0f, new Vector2(0f, origin.Y), num100, SpriteEffects.None, 0f);
 						}
 					}
+
 					if (!array[num91] && !array2[num91])
 					{
 						GamepadMainMenuHandler.MenuItemPositions.Add(new Vector2((float)(num3 + array5[num91]), (float)(num2 + num4 * num91) + origin.Y * array7[num91] + (float)array4[num91]));
 					}
+
 					if (!array8[num91])
 					{
 						int num101 = 0;
@@ -45496,6 +_,7 @@
 						{
 							num101 = 14;
 						}
+
 						this.menuWide[num91] = false;
 						if ((float)Main.mouseX > (float)num3 - (float)(array9[num91].Length * 10) * array7[num91] + (float)array5[num91] - (float)num101 && (float)Main.mouseX < (float)num3 + (float)(array9[num91].Length * 10) * array7[num91] + (float)array5[num91] + (float)num101 && Main.mouseY > num2 + num4 * num91 + array4[num91] && (float)Main.mouseY < (float)(num2 + num4 * num91 + array4[num91]) + 50f * array7[num91] && Main.hasFocus)
 						{
@@ -45510,10 +_,12 @@
 								{
 									Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 								}
+
 								if (Main.mouseLeftRelease && Main.mouseLeft)
 								{
 									this.selectedMenu = num91;
 								}
+
 								if (Main.mouseRightRelease && Main.mouseRight)
 								{
 									this.selectedMenu2 = num91;
@@ -45534,10 +_,12 @@
 							{
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 							}
+
 							if (Main.mouseLeftRelease && Main.mouseLeft)
 							{
 								this.selectedMenu = num91;
 							}
+
 							if (Main.mouseRightRelease && Main.mouseRight)
 							{
 								this.selectedMenu2 = num91;
@@ -45546,11 +_,13 @@
 					}
 				}
 			}
+
 			if (GamepadMainMenuHandler.MenuItemPositions.Count == 0)
 			{
 				Vector2 value2 = new Vector2((float)Math.Cos((double)(Main.GlobalTime * 6.28318548f)), (float)Math.Sin((double)(Main.GlobalTime * 6.28318548f * 2f))) * new Vector2(30f, 15f) + Vector2.UnitY * 20f;
 				UILinkPointNavigator.SetPosition(2000, new Vector2((float)Main.screenWidth, (float)Main.screenHeight) / 2f + value2);
 			}
+
 			for (int num102 = 0; num102 < Main.maxMenuItems; num102++)
 			{
 				if (num102 == this.focusMenu)
@@ -45559,6 +_,7 @@
 					{
 						this.menuItemScale[num102] += 0.02f;
 					}
+
 					if (this.menuItemScale[num102] > 1f)
 					{
 						this.menuItemScale[num102] = 1f;
@@ -45569,6 +_,7 @@
 					this.menuItemScale[num102] -= 0.02f;
 				}
 			}
+
 			if (flag4)
 			{
 				Main.spriteBatch.End();
@@ -45581,6 +_,7 @@
 				Main.spriteBatch.End();
 				Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
 			}
+
 			for (int num103 = 0; num103 < 5; num103++)
 			{
 				Microsoft.Xna.Framework.Color color11 = Microsoft.Xna.Framework.Color.Black;
@@ -45591,6 +_,7 @@
 					color11.G = (byte)((255 + color11.R) / 2);
 					color11.B = (byte)((255 + color11.R) / 2);
 				}
+
 				color11.A = (byte)((float)color11.A * 0.3f);
 				int num104 = 0;
 				int num105 = 0;
@@ -45598,24 +_,29 @@
 				{
 					num104 = -2;
 				}
+
 				if (num103 == 1)
 				{
 					num104 = 2;
 				}
+
 				if (num103 == 2)
 				{
 					num105 = -2;
 				}
+
 				if (num103 == 3)
 				{
 					num105 = 2;
 				}
+
 				string text6 = "Copyright © 2016 Re-Logic";
 				Vector2 origin2 = Main.fontMouseText.MeasureString(text6);
 				origin2.X *= 0.5f;
 				origin2.Y *= 0.5f;
 				Main.spriteBatch.DrawString(Main.fontMouseText, text6, new Vector2((float)Main.screenWidth - origin2.X + (float)num104 - 10f, (float)Main.screenHeight - origin2.Y + (float)num105 - 2f), color11, 0f, origin2, 1f, SpriteEffects.None, 0f);
 			}
+
 			for (int num106 = 0; num106 < 5; num106++)
 			{
 				Microsoft.Xna.Framework.Color color12 = Microsoft.Xna.Framework.Color.Black;
@@ -45626,6 +_,7 @@
 					color12.G = (byte)((255 + color12.R) / 2);
 					color12.B = (byte)((255 + color12.R) / 2);
 				}
+
 				color12.A = (byte)((float)color12.A * 0.3f);
 				int num107 = 0;
 				int num108 = 0;
@@ -45633,23 +_,29 @@
 				{
 					num107 = -2;
 				}
+
 				if (num106 == 1)
 				{
 					num107 = 2;
 				}
+
 				if (num106 == 2)
 				{
 					num108 = -2;
 				}
+
 				if (num106 == 3)
 				{
 					num108 = 2;
 				}
-				Vector2 origin3 = Main.fontMouseText.MeasureString(Main.versionNumber);
+
+				string drawVersion = Main.versionNumber + Environment.NewLine + ModLoader.ModLoader.versionedName;
+				Vector2 origin3 = Main.fontMouseText.MeasureString(drawVersion);
 				origin3.X *= 0.5f;
 				origin3.Y *= 0.5f;
-				Main.spriteBatch.DrawString(Main.fontMouseText, Main.versionNumber, new Vector2(origin3.X + (float)num107 + 10f, (float)Main.screenHeight - origin3.Y + (float)num108 - 2f), color12, 0f, origin3, 1f, SpriteEffects.None, 0f);
-			}
+				Main.spriteBatch.DrawString(Main.fontMouseText, drawVersion, new Vector2(origin3.X + (float)num107 + 10f, (float)Main.screenHeight - origin3.Y + (float)num108 - 2f), color12, 0f, origin3, 1f, SpriteEffects.None, 0f);
+			}
+
 			Vector2 bonus = Main.DrawThickCursor(false);
 			Main.DrawCursor(bonus, false);
 			if (Main.fadeCounter > 0)
@@ -45661,6 +_,7 @@
 				white = new Microsoft.Xna.Framework.Color((int)b2, (int)b2, (int)b2, (int)b2);
 				Main.spriteBatch.Draw(Main.fadeTexture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), white);
 			}
+
 			Main.spriteBatch.End();
 			if (Main.mouseLeft)
 			{
@@ -45670,6 +_,7 @@
 			{
 				Main.mouseLeftRelease = true;
 			}
+
 			if (Main.mouseRight)
 			{
 				Main.mouseRightRelease = false;
@@ -45678,6 +_,7 @@
 			{
 				Main.mouseRightRelease = true;
 			}
+
 			if (Main.menuMode == num)
 			{
 				GamepadMainMenuHandler.LastDrew = num;
@@ -45698,11 +_,13 @@
 						break;
 					}
 				}
+
 				if (num == variantOrderMale.Length - 1)
 				{
 					plr.skinVariant = variantOrderMale[0];
 					return;
 				}
+
 				plr.skinVariant = variantOrderMale[num + 1];
 				return;
 			}
@@ -45718,11 +_,13 @@
 						break;
 					}
 				}
+
 				if (num2 == variantOrderFemale.Length - 1)
 				{
 					plr.skinVariant = variantOrderFemale[0];
 					return;
 				}
+
 				plr.skinVariant = variantOrderFemale[num2 + 1];
 				return;
 			}
@@ -45754,11 +_,13 @@
 				Main.cursorAlpha = 1f;
 				Main.cursorColorDirection = -1;
 			}
+
 			if ((double)Main.cursorAlpha <= 0.6)
 			{
 				Main.cursorAlpha = 0.6f;
 				Main.cursorColorDirection = 1;
 			}
+
 			float num = Main.cursorAlpha * 0.3f + 0.7f;
 			byte r = (byte)((float)Main.mouseColor.R * Main.cursorAlpha);
 			byte g = (byte)((float)Main.mouseColor.G * Main.cursorAlpha);
@@ -45796,6 +_,7 @@
 				Main.showSplash = false;
 				Main.fadeCounter = 75;
 			}
+
 			white = new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, (int)b);
 			Main.spriteBatch.Draw(Main.loTexture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), white);
 			Main.spriteBatch.End();
@@ -45807,6 +_,7 @@
 			{
 				return;
 			}
+
 			Vector2 value = Main.screenPosition + new Vector2((float)(Main.screenWidth >> 1), (float)(Main.screenHeight >> 1));
 			for (int i = 4; i >= 0; i--)
 			{
@@ -45820,33 +_,37 @@
 				switch (i)
 				{
 					case 1:
-						{
-							int num3 = (int)(Main.GlobalTime * 8f) % 4;
-							value3 = new Microsoft.Xna.Framework.Rectangle((num3 >> 1) * (texture2D.Width >> 1), num3 % 2 * (texture2D.Height >> 1), texture2D.Width >> 1, texture2D.Height >> 1);
-							vector *= 0.5f;
-							zero.Y += 75f;
-							break;
-						}
+					{
+						int num3 = (int)(Main.GlobalTime * 8f) % 4;
+						value3 = new Microsoft.Xna.Framework.Rectangle((num3 >> 1) * (texture2D.Width >> 1), num3 % 2 * (texture2D.Height >> 1), texture2D.Width >> 1, texture2D.Height >> 1);
+						vector *= 0.5f;
+						zero.Y += 75f;
+						break;
+					}
+
 					case 2:
 						zero.Y += 75f;
-						break;
+					break;
 					case 3:
 						zero.Y += 75f;
-						break;
+					break;
 					case 4:
 						num2 = 0.5f;
-						zero.Y -= 25f;
-						break;
-				}
+					zero.Y -= 25f;
+					break;
+				}
+
 				if (flat)
 				{
 					num2 *= 1.5f;
 				}
+
 				vector *= num2;
 				if (flat)
 				{
 					zero.Y += (float)(Main.underworldTexture[0].Height >> 1) * 1.3f - vector.Y;
 				}
+
 				float num4 = num2 * (float)value3.Width;
 				float num5 = value.X * value2.X - vector.X + zero.X - (float)(Main.screenWidth >> 1);
 				int num6 = (int)(num5 / num4);
@@ -45871,6 +_,7 @@
 				this.OldDrawBackground();
 				return;
 			}
+
 			Microsoft.Xna.Framework.Color[] array = new Microsoft.Xna.Framework.Color[9];
 			Stopwatch stopwatch = new Stopwatch();
 			stopwatch.Start();
@@ -45904,11 +_,13 @@
 			{
 				num9 = Main.caveBackStyle[3];
 			}
+
 			num9 += 3;
 			if (Main.snowTiles > 300 && (Main.screenPosition.Y + (float)Main.screenHeight) / 16f < (float)(Main.maxTilesY - 250))
 			{
 				num9 = 1;
 			}
+
 			if (Main.jungleTiles > 80)
 			{
 				if (num9 == 1)
@@ -45923,6 +_,7 @@
 					num9 = 11;
 				}
 			}
+
 			if ((double)(Main.screenPosition.Y / 16f) > Main.rockLayer + 60.0 && (double)(Main.screenPosition.Y / 16f) < num - 60.0)
 			{
 				if (Main.player[Main.myPlayer].ZoneSnow)
@@ -45953,24 +_,30 @@
 					num9 = 14;
 				}
 			}
+
 			if (Main.shroomTiles > 200)
 			{
 				num9 = 2;
 			}
+
+			UgBgStyleLoader.ChooseStyle(ref num9);
 			if (num9 != Main.ugBack)
 			{
 				Main.oldUgBack = Main.ugBack;
 				Main.ugBack = num9;
 				Main.ugBackTransition = 1f;
 			}
+
 			if (Main.ugBackTransition > 0f)
 			{
 				Main.ugBackTransition -= 0.25f;
 			}
+
 			if (Main.ugBackTransition < 0f)
 			{
 				Main.ugBackTransition = 0f;
 			}
+
 			int[] array2 = new int[7];
 			int[] array3 = new int[7];
 			for (int i = 0; i < 2; i++)
@@ -45980,6 +_,7 @@
 				{
 					num10 = Main.oldUgBack;
 				}
+
 				int[] array4 = new int[7];
 				if (num10 == 0)
 				{
@@ -46020,6 +_,7 @@
 						array4[0] = 162;
 						array4[2] = 163;
 					}
+
 					array4[4] = array4[3];
 				}
 				else if (num10 == 2)
@@ -46151,19 +_,24 @@
 						array4[3] = 203 + Main.worldID % 4;
 					}
 				}
+
 				if (Main.hellBackStyle == 0)
 				{
 					array4[5] = 125;
 				}
+
 				if (Main.hellBackStyle == 1)
 				{
 					array4[5] = 126;
 				}
+
 				if (Main.hellBackStyle == 2)
 				{
 					array4[5] = 127;
 				}
+
 				array4[6] = 185 + Main.hellBackStyle;
+				UgBgStyleLoader.FillTextureArray(num10, array4);
 				this.LoadBackground(array4[0]);
 				this.LoadBackground(array4[1]);
 				this.LoadBackground(array4[2]);
@@ -46186,6 +_,7 @@
 					}
 				}
 			}
+
 			Lighting.defBrightness = 1.2f - 0.2f * num7;
 			float x = vector.X;
 			float y = vector.Y;
@@ -46206,6 +_,7 @@
 					{
 						num12 = 8;
 					}
+
 					float num13 = (float)(this.bgStart + num5 * l + m * 16 + 8);
 					float num14 = (float)this.bgTop;
 					Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)((num13 + Main.screenPosition.X) / 16f), (int)((Main.screenPosition.Y + num14) / 16f));
@@ -46224,6 +_,7 @@
 					}
 				}
 			}
+
 			bool flag = false;
 			bool flag2 = false;
 			this.bgTop = (int)((float)((int)Main.worldSurface * 16) - Main.screenPosition.Y + 16f);
@@ -46242,11 +_,13 @@
 					this.bgStartY = this.bgTop;
 					this.bgLoopsY = (Main.screenHeight - this.bgTop + (int)value.Y * 2) / Main.backgroundHeight[2] + 1;
 				}
+
 				if (Main.rockLayer * 16.0 < (double)(Main.screenPosition.Y + 600f))
 				{
 					this.bgLoopsY = (int)(Main.rockLayer * 16.0 - (double)Main.screenPosition.Y + 600.0 - (double)this.bgStartY) / Main.backgroundHeight[2];
 					flag2 = true;
 				}
+
 				float num15 = (float)this.bgStart + Main.screenPosition.X;
 				num15 = -(float)Math.IEEERemainder((double)num15, 16.0);
 				num15 = (float)Math.Round((double)num15);
@@ -46255,6 +_,7 @@
 				{
 					num16 = 8;
 				}
+
 				for (int n = 0; n < this.bgLoops; n++)
 				{
 					for (int num17 = 0; num17 < this.bgLoopsY; num17++)
@@ -46272,6 +_,7 @@
 								{
 									Main.tile[num22, num23] = new Tile();
 								}
+
 								if (color3.R > 0 || color3.G > 0 || color3.B > 0)
 								{
 									if (!Main.drawToScreen)
@@ -46299,74 +_,83 @@
 													{
 														case 0:
 															if (!Main.tile[num22 - 1, num23 - 1].active())
-															{
-																color5 = array[num24];
-															}
-															break;
+														{
+															color5 = array[num24];
+														}
+
+														break;
 														case 1:
 															width = 8;
-															num25 = 4;
-															if (!Main.tile[num22, num23 - 1].active())
-															{
-																color5 = array[num24];
-															}
-															break;
+														num25 = 4;
+														if (!Main.tile[num22, num23 - 1].active())
+														{
+															color5 = array[num24];
+														}
+
+														break;
 														case 2:
 															num25 = 12;
-															if (!Main.tile[num22 + 1, num23 - 1].active())
-															{
-																color5 = array[num24];
-															}
-															break;
+														if (!Main.tile[num22 + 1, num23 - 1].active())
+														{
+															color5 = array[num24];
+														}
+
+														break;
 														case 3:
 															height = 8;
-															num26 = 4;
-															if (!Main.tile[num22 - 1, num23].active())
-															{
-																color5 = array[num24];
-															}
-															break;
+														num26 = 4;
+														if (!Main.tile[num22 - 1, num23].active())
+														{
+															color5 = array[num24];
+														}
+
+														break;
 														case 4:
 															width = 8;
-															height = 8;
-															num25 = 4;
-															num26 = 4;
-															break;
+														height = 8;
+														num25 = 4;
+														num26 = 4;
+														break;
 														case 5:
 															num25 = 12;
-															num26 = 4;
-															height = 8;
-															if (!Main.tile[num22 + 1, num23].active())
-															{
-																color5 = array[num24];
-															}
-															break;
+														num26 = 4;
+														height = 8;
+														if (!Main.tile[num22 + 1, num23].active())
+														{
+															color5 = array[num24];
+														}
+
+														break;
 														case 6:
 															num26 = 12;
-															if (!Main.tile[num22 - 1, num23 + 1].active())
-															{
-																color5 = array[num24];
-															}
-															break;
+														if (!Main.tile[num22 - 1, num23 + 1].active())
+														{
+															color5 = array[num24];
+														}
+
+														break;
 														case 7:
 															width = 8;
-															height = 4;
-															num25 = 4;
-															num26 = 12;
-															if (!Main.tile[num22, num23 + 1].active())
-															{
-																color5 = array[num24];
-															}
-															break;
+														height = 4;
+														num25 = 4;
+														num26 = 12;
+														if (!Main.tile[num22, num23 + 1].active())
+														{
+															color5 = array[num24];
+														}
+
+														break;
 														case 8:
 															num25 = 12;
-															num26 = 12;
-															if (!Main.tile[num22 + 1, num23 + 1].active())
-															{
-																color5 = array[num24];
-															}
-															break;
+														num26 = 12;
+														if (!Main.tile[num22 + 1, num23 + 1].active())
+														{
+															color5 = array[num24];
+														}
+
+														break;
 													}
+
 													color4.R = (byte)((color3.R + color5.R) / 2);
 													color4.G = (byte)((color3.G + color5.G) / 2);
 													color4.B = (byte)((color3.B + color5.B) / 2);
@@ -46384,6 +_,7 @@
 														Main.spriteBatch.Draw(Main.backgroundTexture[array3[1]], new Vector2((float)(this.bgStart + num5 * n + 16 * num18 + num25 + num16), (float)(this.bgStartY + Main.backgroundHeight[array3[1]] * num17 + 16 * num19 + num26)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num18 + num25 + num16 + 16, 16 * num19 + num26, width, height)), color6);
 													}
 												}
+
 												goto IL_1879;
 											}
 											catch
@@ -46395,6 +_,7 @@
 												goto IL_1879;
 											}
 										}
+
 										if (((int)color3.R > num4 || (double)color3.G > (double)num4 * 1.1 || (double)color3.B > (double)num4 * 1.2) && Main.ugBackTransition == 0f)
 										{
 											Lighting.GetColor4Slice(num22, num23, ref array);
@@ -46408,15 +_,16 @@
 												{
 													case 1:
 														num28 = 8;
-														break;
+													break;
 													case 2:
 														num29 = 8;
-														break;
+													break;
 													case 3:
 														num28 = 8;
-														num29 = 8;
-														break;
+													num29 = 8;
+													break;
 												}
+
 												color7.R = (byte)((color3.R + color8.R) / 2);
 												color7.G = (byte)((color3.G + color8.G) / 2);
 												color7.B = (byte)((color3.B + color8.B) / 2);
@@ -46460,12 +_,14 @@
 									color3.B = (byte)((float)color3.B * z);
 									Main.spriteBatch.Draw(Main.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num5 * n + 16 * num18 + num16), (float)(this.bgStartY + Main.backgroundHeight[array2[1]] * num17 + 16 * num19)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num18 + num16 + 16, 16 * num19, 16, 16)), color3);
 								}
+
 								IL_1879:
 								;
 							}
 						}
 					}
 				}
+
 				if (Main.ugBackTransition > 0f)
 				{
 					for (int num30 = 0; num30 < this.bgLoops; num30++)
@@ -46485,6 +_,7 @@
 									{
 										Main.tile[num36, num37] = new Tile();
 									}
+
 									if (color11.R > 0 || color11.G > 0 || color11.B > 0)
 									{
 										VertexColors colors2;
@@ -46501,6 +_,7 @@
 						}
 					}
 				}
+
 				if (flag2)
 				{
 					this.bgParallax = (double)Main.caveParallax;
@@ -46534,6 +_,7 @@
 					}
 				}
 			}
+
 			this.bgTop = (int)((float)((int)Main.rockLayer * 16) - Main.screenPosition.Y + 16f + 600f - 8f);
 			if (Main.rockLayer * 16.0 <= (double)(Main.screenPosition.Y + 600f))
 			{
@@ -46550,11 +_,13 @@
 					this.bgStartY = this.bgTop;
 					this.bgLoopsY = (Main.screenHeight - this.bgTop + (int)value.Y * 2) / Main.backgroundHeight[2] + 1;
 				}
+
 				if (num * 16.0 < (double)(Main.screenPosition.Y + 600f))
 				{
 					this.bgLoopsY = (int)(num * 16.0 - (double)Main.screenPosition.Y + 600.0 - (double)this.bgStartY) / Main.backgroundHeight[2];
 					flag = true;
 				}
+
 				float num42 = (float)this.bgStart + Main.screenPosition.X;
 				num42 = -(float)Math.IEEERemainder((double)num42, 16.0);
 				num42 = (float)Math.Round((double)num42);
@@ -46563,6 +_,7 @@
 				{
 					num43 = 8;
 				}
+
 				for (int num44 = 0; num44 < this.bgLoops; num44++)
 				{
 					for (int num45 = 0; num45 < this.bgLoopsY; num45++)
@@ -46580,6 +_,7 @@
 								{
 									Main.tile[num50, num51] = new Tile();
 								}
+
 								bool flag3 = false;
 								if (Main.caveParallax != 0f)
 								{
@@ -46587,10 +_,12 @@
 									{
 										Main.tile[num50 - 1, num51] = new Tile();
 									}
+
 									if (Main.tile[num50 + 1, num51] == null)
 									{
 										Main.tile[num50 + 1, num51] = new Tile();
 									}
+
 									if (Main.wallLight[(int)Main.tile[num50, num51].wall] || Main.wallLight[(int)Main.tile[num50 - 1, num51].wall] || Main.wallLight[(int)Main.tile[num50 + 1, num51].wall])
 									{
 										flag3 = true;
@@ -46600,6 +_,7 @@
 								{
 									flag3 = true;
 								}
+
 								if ((flag3 || color14.R == 0 || color14.G == 0 || color14.B == 0) && (color14.R > 0 || color14.G > 0 || color14.B > 0) && (Main.wallLight[(int)Main.tile[num50, num51].wall] || Main.caveParallax != 0f))
 								{
 									if (Lighting.lightMode < 2 && color14.R < 230 && color14.G < 230 && color14.B < 230 && Main.ugBackTransition == 0f)
@@ -46619,74 +_,83 @@
 												{
 													case 0:
 														if (!Main.tile[num50 - 1, num51 - 1].active())
-														{
-															color16 = array[num52];
-														}
-														break;
+													{
+														color16 = array[num52];
+													}
+
+													break;
 													case 1:
 														width2 = 8;
-														num53 = 4;
-														if (!Main.tile[num50, num51 - 1].active())
-														{
-															color16 = array[num52];
-														}
-														break;
+													num53 = 4;
+													if (!Main.tile[num50, num51 - 1].active())
+													{
+														color16 = array[num52];
+													}
+
+													break;
 													case 2:
 														num53 = 12;
-														if (!Main.tile[num50 + 1, num51 - 1].active())
-														{
-															color16 = array[num52];
-														}
-														break;
+													if (!Main.tile[num50 + 1, num51 - 1].active())
+													{
+														color16 = array[num52];
+													}
+
+													break;
 													case 3:
 														height2 = 8;
-														num54 = 4;
-														if (!Main.tile[num50 - 1, num51].active())
-														{
-															color16 = array[num52];
-														}
-														break;
+													num54 = 4;
+													if (!Main.tile[num50 - 1, num51].active())
+													{
+														color16 = array[num52];
+													}
+
+													break;
 													case 4:
 														width2 = 8;
-														height2 = 8;
-														num53 = 4;
-														num54 = 4;
-														break;
+													height2 = 8;
+													num53 = 4;
+													num54 = 4;
+													break;
 													case 5:
 														num53 = 12;
-														num54 = 4;
-														height2 = 8;
-														if (!Main.tile[num50 + 1, num51].active())
-														{
-															color16 = array[num52];
-														}
-														break;
+													num54 = 4;
+													height2 = 8;
+													if (!Main.tile[num50 + 1, num51].active())
+													{
+														color16 = array[num52];
+													}
+
+													break;
 													case 6:
 														num54 = 12;
-														if (!Main.tile[num50 - 1, num51 + 1].active())
-														{
-															color16 = array[num52];
-														}
-														break;
+													if (!Main.tile[num50 - 1, num51 + 1].active())
+													{
+														color16 = array[num52];
+													}
+
+													break;
 													case 7:
 														width2 = 8;
-														height2 = 4;
-														num53 = 4;
-														num54 = 12;
-														if (!Main.tile[num50, num51 + 1].active())
-														{
-															color16 = array[num52];
-														}
-														break;
+													height2 = 4;
+													num53 = 4;
+													num54 = 12;
+													if (!Main.tile[num50, num51 + 1].active())
+													{
+														color16 = array[num52];
+													}
+
+													break;
 													case 8:
 														num53 = 12;
-														num54 = 12;
-														if (!Main.tile[num50 + 1, num51 + 1].active())
-														{
-															color16 = array[num52];
-														}
-														break;
+													num54 = 12;
+													if (!Main.tile[num50 + 1, num51 + 1].active())
+													{
+														color16 = array[num52];
+													}
+
+													break;
 												}
+
 												color15.R = (byte)((color14.R + color16.R) / 2);
 												color15.G = (byte)((color14.G + color16.G) / 2);
 												color15.B = (byte)((color14.B + color16.B) / 2);
@@ -46718,15 +_,16 @@
 												{
 													case 1:
 														num56 = 8;
-														break;
+													break;
 													case 2:
 														num57 = 8;
-														break;
+													break;
 													case 3:
 														num56 = 8;
-														num57 = 8;
-														break;
+													num57 = 8;
+													break;
 												}
+
 												color18.R = (byte)((color14.R + color19.R) / 2);
 												color18.G = (byte)((color14.G + color19.G) / 2);
 												color18.B = (byte)((color14.B + color19.B) / 2);
@@ -46783,6 +_,7 @@
 						}
 					}
 				}
+
 				num5 = 128;
 				if (flag)
 				{
@@ -46814,6 +_,7 @@
 					}
 				}
 			}
+
 			this.bgTop = (int)((float)((int)num * 16) - Main.screenPosition.Y + 16f + 600f) - 8;
 			bool flag4 = false;
 			if (num * 16.0 <= (double)(Main.screenPosition.Y + 600f))
@@ -46830,11 +_,13 @@
 					this.bgStartY = this.bgTop;
 					this.bgLoopsY = (Main.screenHeight - this.bgTop + (int)value.Y * 2) / Main.backgroundHeight[2] + 1;
 				}
+
 				if ((float)(Main.maxTilesY - 200) * 16f < Main.screenPosition.Y + (float)Main.screenHeight)
 				{
 					this.bgLoopsY = (int)Math.Ceiling((double)(((float)(Main.maxTilesY - 200) * 16f - Main.screenPosition.Y - (float)this.bgStartY) / (float)Main.backgroundHeight[2]));
 					flag4 = true;
 				}
+
 				num3 = (int)((double)num3 * 1.5);
 				num4 = (int)((double)num4 * 1.5);
 				float num62 = (float)this.bgStart + Main.screenPosition.X;
@@ -46845,6 +_,7 @@
 				{
 					num63 = 8;
 				}
+
 				for (int num64 = 0; num64 < this.bgLoops; num64++)
 				{
 					for (int num65 = 0; num65 < this.bgLoopsY; num65++)
@@ -46862,6 +_,7 @@
 								{
 									Main.tile[num70, num71] = new Tile();
 								}
+
 								bool flag5 = false;
 								if (Main.caveParallax != 0f)
 								{
@@ -46869,10 +_,12 @@
 									{
 										Main.tile[num70 - 1, num71] = new Tile();
 									}
+
 									if (Main.tile[num70 + 1, num71] == null)
 									{
 										Main.tile[num70 + 1, num71] = new Tile();
 									}
+
 									if (Main.wallLight[(int)Main.tile[num70, num71].wall] || Main.wallLight[(int)Main.tile[num70 - 1, num71].wall] || Main.wallLight[(int)Main.tile[num70 + 1, num71].wall])
 									{
 										flag5 = true;
@@ -46882,6 +_,7 @@
 								{
 									flag5 = true;
 								}
+
 								if ((flag5 || color25.R == 0 || color25.G == 0 || color25.B == 0) && (color25.R > 0 || color25.G > 0 || color25.B > 0 || num71 > Main.maxTilesY - 300) && (Main.wallLight[(int)Main.tile[num70, num71].wall] || Main.caveParallax != 0f))
 								{
 									if (Lighting.lightMode < 2 && color25.R < 230 && color25.G < 230 && color25.B < 230)
@@ -46901,74 +_,83 @@
 												{
 													case 0:
 														if (!Main.tile[num70 - 1, num71 - 1].active())
-														{
-															color27 = array[num72];
-														}
-														break;
+													{
+														color27 = array[num72];
+													}
+
+													break;
 													case 1:
 														width3 = 8;
-														num73 = 4;
-														if (!Main.tile[num70, num71 - 1].active())
-														{
-															color27 = array[num72];
-														}
-														break;
+													num73 = 4;
+													if (!Main.tile[num70, num71 - 1].active())
+													{
+														color27 = array[num72];
+													}
+
+													break;
 													case 2:
 														num73 = 12;
-														if (!Main.tile[num70 + 1, num71 - 1].active())
-														{
-															color27 = array[num72];
-														}
-														break;
+													if (!Main.tile[num70 + 1, num71 - 1].active())
+													{
+														color27 = array[num72];
+													}
+
+													break;
 													case 3:
 														height3 = 8;
-														num74 = 4;
-														if (!Main.tile[num70 - 1, num71].active())
-														{
-															color27 = array[num72];
-														}
-														break;
+													num74 = 4;
+													if (!Main.tile[num70 - 1, num71].active())
+													{
+														color27 = array[num72];
+													}
+
+													break;
 													case 4:
 														width3 = 8;
-														height3 = 8;
-														num73 = 4;
-														num74 = 4;
-														break;
+													height3 = 8;
+													num73 = 4;
+													num74 = 4;
+													break;
 													case 5:
 														num73 = 12;
-														num74 = 4;
-														height3 = 8;
-														if (!Main.tile[num70 + 1, num71].active())
-														{
-															color27 = array[num72];
-														}
-														break;
+													num74 = 4;
+													height3 = 8;
+													if (!Main.tile[num70 + 1, num71].active())
+													{
+														color27 = array[num72];
+													}
+
+													break;
 													case 6:
 														num74 = 12;
-														if (!Main.tile[num70 - 1, num71 + 1].active())
-														{
-															color27 = array[num72];
-														}
-														break;
+													if (!Main.tile[num70 - 1, num71 + 1].active())
+													{
+														color27 = array[num72];
+													}
+
+													break;
 													case 7:
 														width3 = 8;
-														height3 = 4;
-														num73 = 4;
-														num74 = 12;
-														if (!Main.tile[num70, num71 + 1].active())
-														{
-															color27 = array[num72];
-														}
-														break;
+													height3 = 4;
+													num73 = 4;
+													num74 = 12;
+													if (!Main.tile[num70, num71 + 1].active())
+													{
+														color27 = array[num72];
+													}
+
+													break;
 													case 8:
 														num73 = 12;
-														num74 = 12;
-														if (!Main.tile[num70 + 1, num71 + 1].active())
-														{
-															color27 = array[num72];
-														}
-														break;
+													num74 = 12;
+													if (!Main.tile[num70 + 1, num71 + 1].active())
+													{
+														color27 = array[num72];
+													}
+
+													break;
 												}
+
 												color26.R = (byte)((color25.R + color27.R) / 2);
 												color26.G = (byte)((color25.G + color27.G) / 2);
 												color26.B = (byte)((color25.B + color27.B) / 2);
@@ -46991,15 +_,16 @@
 												{
 													case 1:
 														num76 = 8;
-														break;
+													break;
 													case 2:
 														num77 = 8;
-														break;
+													break;
 													case 3:
 														num76 = 8;
-														num77 = 8;
-														break;
+													num77 = 8;
+													break;
 												}
+
 												color28.R = (byte)((color25.R + color29.R) / 2);
 												color28.G = (byte)((color25.G + color29.G) / 2);
 												color28.B = (byte)((color25.B + color29.B) / 2);
@@ -47029,6 +_,7 @@
 						}
 					}
 				}
+
 				if (flag4)
 				{
 					this.bgParallax = (double)Main.caveParallax;
@@ -47059,6 +_,7 @@
 					}
 				}
 			}
+
 			Lighting.brightness = Lighting.defBrightness;
 			TimeLogger.DrawTime(3, stopwatch.Elapsed.TotalMilliseconds);
 		}
@@ -47076,6 +_,7 @@
 			{
 				zero = Vector2.Zero;
 			}
+
 			float num4 = 0.9f;
 			float num5 = num4;
 			float num6 = num4;
@@ -47093,6 +_,7 @@
 			{
 				num8 = (float)Main.evilTiles;
 			}
+
 			num8 = MathHelper.Clamp(num8 / 800f, 0f, 1f);
 			float num9 = (float)((double)Main.screenPosition.Y - Main.worldSurface * 16.0) / 300f;
 			if (num9 < 0f)
@@ -47103,6 +_,7 @@
 			{
 				num9 = 1f;
 			}
+
 			float num10 = 1f * (1f - num9) + num5 * num9;
 			Lighting.brightness = Lighting.defBrightness * (1f - num9) + 1f * num9;
 			float num11 = (float)((double)(Main.screenPosition.Y - (float)(Main.screenHeight / 2) + 200f) - Main.rockLayer * 16.0) / 300f;
@@ -47125,6 +_,7 @@
 				num6 = 0.7f * num8 + num6 * (1f - num8);
 				num7 = 0.9f * num8 + num7 * (1f - num8);
 			}
+
 			num5 = 1f * (num10 - num11) + num5 * num11;
 			num6 = 1f * (num10 - num11) + num6 * num11;
 			num7 = 1f * (num10 - num11) + num7 * num11;
@@ -47146,11 +_,13 @@
 			{
 				num13 = Main.caveBackStyle[3];
 			}
+
 			num13 += 3;
 			if (Main.snowTiles > 300 && (Main.screenPosition.Y + (float)Main.screenHeight) / 16f < (float)(Main.maxTilesY - 250))
 			{
 				num13 = 1;
 			}
+
 			if (Main.jungleTiles > 80)
 			{
 				if (num13 == 1)
@@ -47165,24 +_,29 @@
 					num13 = 11;
 				}
 			}
+
 			if (Main.shroomTiles > 200)
 			{
 				num13 = 2;
 			}
+
 			if (num13 != Main.ugBack)
 			{
 				Main.oldUgBack = Main.ugBack;
 				Main.ugBack = num13;
 				Main.ugBackTransition = 1f;
 			}
+
 			if (Main.ugBackTransition > 0f)
 			{
 				Main.ugBackTransition -= 0.25f;
 			}
+
 			if (Main.ugBackTransition < 0f)
 			{
 				Main.ugBackTransition = 0f;
 			}
+
 			int[] array2 = new int[6];
 			int[] array3 = new int[6];
 			for (int i = 0; i < 2; i++)
@@ -47192,6 +_,7 @@
 				{
 					num14 = Main.oldUgBack;
 				}
+
 				int[] array4 = new int[6];
 				if (num14 == 0)
 				{
@@ -47232,6 +_,7 @@
 						array4[0] = 162;
 						array4[2] = 163;
 					}
+
 					array4[4] = array4[3];
 				}
 				else if (num14 == 2)
@@ -47325,18 +_,22 @@
 						array4[4] = 157 + Main.hellBackStyle;
 					}
 				}
+
 				if (Main.hellBackStyle == 0)
 				{
 					array4[5] = 125;
 				}
+
 				if (Main.hellBackStyle == 1)
 				{
 					array4[5] = 126;
 				}
+
 				if (Main.hellBackStyle == 2)
 				{
 					array4[5] = 127;
 				}
+
 				this.LoadBackground(array4[0]);
 				this.LoadBackground(array4[1]);
 				this.LoadBackground(array4[2]);
@@ -47358,6 +_,7 @@
 					}
 				}
 			}
+
 			Lighting.defBrightness = 1.2f * (1f - num11) + 1f * num11;
 			this.bgParallax = (double)Main.caveParallax;
 			this.bgStart = (int)(-Math.IEEERemainder((double)num3 + (double)Main.screenPosition.X * this.bgParallax, (double)num3) - (double)(num3 / 2)) - (int)zero.X;
@@ -47375,6 +_,7 @@
 					{
 						num16 = 8;
 					}
+
 					float num17 = (float)(this.bgStart + num3 * l + m * 16 + 8);
 					float num18 = (float)this.bgTop;
 					Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)((num17 + Main.screenPosition.X) / 16f), (int)((Main.screenPosition.Y + num18) / 16f));
@@ -47393,6 +_,7 @@
 					}
 				}
 			}
+
 			double num19 = (double)(Main.maxTilesY - 230);
 			double num20 = (double)((int)((num19 - Main.worldSurface) / 6.0) * 6);
 			num19 = Main.worldSurface + num20 - 5.0;
@@ -47414,11 +_,13 @@
 					this.bgStartY = this.bgTop;
 					this.bgLoopsY = (Main.screenHeight - this.bgTop + (int)zero.Y * 2) / Main.backgroundHeight[2] + 1;
 				}
+
 				if (Main.rockLayer * 16.0 < (double)(Main.screenPosition.Y + 600f))
 				{
 					this.bgLoopsY = (int)(Main.rockLayer * 16.0 - (double)Main.screenPosition.Y + 600.0 - (double)this.bgStartY) / Main.backgroundHeight[2];
 					flag2 = true;
 				}
+
 				float num21 = (float)this.bgStart + Main.screenPosition.X;
 				num21 = -(float)Math.IEEERemainder((double)num21, 16.0);
 				num21 = (float)Math.Round((double)num21);
@@ -47427,6 +_,7 @@
 				{
 					num22 = 8;
 				}
+
 				for (int n = 0; n < this.bgLoops; n++)
 				{
 					for (int num23 = 0; num23 < this.bgLoopsY; num23++)
@@ -47444,6 +_,7 @@
 								{
 									Main.tile[num28, num29] = new Tile();
 								}
+
 								if (color3.R > 0 || color3.G > 0 || color3.B > 0)
 								{
 									if (!Main.drawToScreen)
@@ -47471,74 +_,83 @@
 													{
 														case 0:
 															if (!Main.tile[num28 - 1, num29 - 1].active())
-															{
-																color5 = array[num30];
-															}
-															break;
+														{
+															color5 = array[num30];
+														}
+
+														break;
 														case 1:
 															width = 8;
-															num31 = 4;
-															if (!Main.tile[num28, num29 - 1].active())
-															{
-																color5 = array[num30];
-															}
-															break;
+														num31 = 4;
+														if (!Main.tile[num28, num29 - 1].active())
+														{
+															color5 = array[num30];
+														}
+
+														break;
 														case 2:
 															num31 = 12;
-															if (!Main.tile[num28 + 1, num29 - 1].active())
-															{
-																color5 = array[num30];
-															}
-															break;
+														if (!Main.tile[num28 + 1, num29 - 1].active())
+														{
+															color5 = array[num30];
+														}
+
+														break;
 														case 3:
 															height = 8;
-															num32 = 4;
-															if (!Main.tile[num28 - 1, num29].active())
-															{
-																color5 = array[num30];
-															}
-															break;
+														num32 = 4;
+														if (!Main.tile[num28 - 1, num29].active())
+														{
+															color5 = array[num30];
+														}
+
+														break;
 														case 4:
 															width = 8;
-															height = 8;
-															num31 = 4;
-															num32 = 4;
-															break;
+														height = 8;
+														num31 = 4;
+														num32 = 4;
+														break;
 														case 5:
 															num31 = 12;
-															num32 = 4;
-															height = 8;
-															if (!Main.tile[num28 + 1, num29].active())
-															{
-																color5 = array[num30];
-															}
-															break;
+														num32 = 4;
+														height = 8;
+														if (!Main.tile[num28 + 1, num29].active())
+														{
+															color5 = array[num30];
+														}
+
+														break;
 														case 6:
 															num32 = 12;
-															if (!Main.tile[num28 - 1, num29 + 1].active())
-															{
-																color5 = array[num30];
-															}
-															break;
+														if (!Main.tile[num28 - 1, num29 + 1].active())
+														{
+															color5 = array[num30];
+														}
+
+														break;
 														case 7:
 															width = 8;
-															height = 4;
-															num31 = 4;
-															num32 = 12;
-															if (!Main.tile[num28, num29 + 1].active())
-															{
-																color5 = array[num30];
-															}
-															break;
+														height = 4;
+														num31 = 4;
+														num32 = 12;
+														if (!Main.tile[num28, num29 + 1].active())
+														{
+															color5 = array[num30];
+														}
+
+														break;
 														case 8:
 															num31 = 12;
-															num32 = 12;
-															if (!Main.tile[num28 + 1, num29 + 1].active())
-															{
-																color5 = array[num30];
-															}
-															break;
+														num32 = 12;
+														if (!Main.tile[num28 + 1, num29 + 1].active())
+														{
+															color5 = array[num30];
+														}
+
+														break;
 													}
+
 													color4.R = (byte)((color3.R + color5.R) / 2);
 													color4.G = (byte)((color3.G + color5.G) / 2);
 													color4.B = (byte)((color3.B + color5.B) / 2);
@@ -47556,6 +_,7 @@
 														Main.spriteBatch.Draw(Main.backgroundTexture[array3[1]], new Vector2((float)(this.bgStart + num3 * n + 16 * num24 + num31 + num22), (float)(this.bgStartY + Main.backgroundHeight[array3[1]] * num23 + 16 * num25 + num32)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num24 + num31 + num22 + 16, 16 * num25 + num32, width, height)), color6);
 													}
 												}
+
 												goto IL_182C;
 											}
 											catch
@@ -47567,6 +_,7 @@
 												goto IL_182C;
 											}
 										}
+
 										if (((int)color3.R > num2 || (double)color3.G > (double)num2 * 1.1 || (double)color3.B > (double)num2 * 1.2) && Main.ugBackTransition == 0f)
 										{
 											Lighting.GetColor4Slice(num28, num29, ref array);
@@ -47580,15 +_,16 @@
 												{
 													case 1:
 														num34 = 8;
-														break;
+													break;
 													case 2:
 														num35 = 8;
-														break;
+													break;
 													case 3:
 														num34 = 8;
-														num35 = 8;
-														break;
+													num35 = 8;
+													break;
 												}
+
 												color7.R = (byte)((color3.R + color8.R) / 2);
 												color7.G = (byte)((color3.G + color8.G) / 2);
 												color7.B = (byte)((color3.B + color8.B) / 2);
@@ -47632,12 +_,14 @@
 									color3.B = (byte)((float)color3.B * num7);
 									Main.spriteBatch.Draw(Main.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num3 * n + 16 * num24 + num22), (float)(this.bgStartY + Main.backgroundHeight[array2[1]] * num23 + 16 * num25)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num24 + num22 + 16, 16 * num25, 16, 16)), color3);
 								}
+
 								IL_182C:
 								;
 							}
 						}
 					}
 				}
+
 				if (Main.ugBackTransition > 0f)
 				{
 					for (int num36 = 0; num36 < this.bgLoops; num36++)
@@ -47657,6 +_,7 @@
 									{
 										Main.tile[num42, num43] = new Tile();
 									}
+
 									if (color11.R > 0 || color11.G > 0 || color11.B > 0)
 									{
 										VertexColors colors2;
@@ -47673,6 +_,7 @@
 						}
 					}
 				}
+
 				if (flag2)
 				{
 					this.bgParallax = (double)Main.caveParallax;
@@ -47706,6 +_,7 @@
 					}
 				}
 			}
+
 			this.bgTop = (int)((float)((int)Main.rockLayer * 16) - Main.screenPosition.Y + 16f + 600f - 8f);
 			if (Main.rockLayer * 16.0 <= (double)(Main.screenPosition.Y + 600f))
 			{
@@ -47722,11 +_,13 @@
 					this.bgStartY = this.bgTop;
 					this.bgLoopsY = (Main.screenHeight - this.bgTop + (int)zero.Y * 2) / Main.backgroundHeight[2] + 1;
 				}
+
 				if (num19 * 16.0 < (double)(Main.screenPosition.Y + 600f))
 				{
 					this.bgLoopsY = (int)(num19 * 16.0 - (double)Main.screenPosition.Y + 600.0 - (double)this.bgStartY) / Main.backgroundHeight[2];
 					flag = true;
 				}
+
 				float num48 = (float)this.bgStart + Main.screenPosition.X;
 				num48 = -(float)Math.IEEERemainder((double)num48, 16.0);
 				num48 = (float)Math.Round((double)num48);
@@ -47735,6 +_,7 @@
 				{
 					num49 = 8;
 				}
+
 				for (int num50 = 0; num50 < this.bgLoops; num50++)
 				{
 					for (int num51 = 0; num51 < this.bgLoopsY; num51++)
@@ -47752,6 +_,7 @@
 								{
 									Main.tile[num56, num57] = new Tile();
 								}
+
 								bool flag3 = false;
 								if (Main.caveParallax != 0f)
 								{
@@ -47759,10 +_,12 @@
 									{
 										Main.tile[num56 - 1, num57] = new Tile();
 									}
+
 									if (Main.tile[num56 + 1, num57] == null)
 									{
 										Main.tile[num56 + 1, num57] = new Tile();
 									}
+
 									if (Main.wallLight[(int)Main.tile[num56, num57].wall] || Main.wallLight[(int)Main.tile[num56 - 1, num57].wall] || Main.wallLight[(int)Main.tile[num56 + 1, num57].wall])
 									{
 										flag3 = true;
@@ -47772,6 +_,7 @@
 								{
 									flag3 = true;
 								}
+
 								if ((flag3 || color14.R == 0 || color14.G == 0 || color14.B == 0) && (color14.R > 0 || color14.G > 0 || color14.B > 0) && (Main.wallLight[(int)Main.tile[num56, num57].wall] || Main.caveParallax != 0f))
 								{
 									if (Lighting.lightMode < 2 && color14.R < 230 && color14.G < 230 && color14.B < 230 && Main.ugBackTransition == 0f)
@@ -47791,74 +_,83 @@
 												{
 													case 0:
 														if (!Main.tile[num56 - 1, num57 - 1].active())
-														{
-															color16 = array[num58];
-														}
-														break;
+													{
+														color16 = array[num58];
+													}
+
+													break;
 													case 1:
 														width2 = 8;
-														num59 = 4;
-														if (!Main.tile[num56, num57 - 1].active())
-														{
-															color16 = array[num58];
-														}
-														break;
+													num59 = 4;
+													if (!Main.tile[num56, num57 - 1].active())
+													{
+														color16 = array[num58];
+													}
+
+													break;
 													case 2:
 														num59 = 12;
-														if (!Main.tile[num56 + 1, num57 - 1].active())
-														{
-															color16 = array[num58];
-														}
-														break;
+													if (!Main.tile[num56 + 1, num57 - 1].active())
+													{
+														color16 = array[num58];
+													}
+
+													break;
 													case 3:
 														height2 = 8;
-														num60 = 4;
-														if (!Main.tile[num56 - 1, num57].active())
-														{
-															color16 = array[num58];
-														}
-														break;
+													num60 = 4;
+													if (!Main.tile[num56 - 1, num57].active())
+													{
+														color16 = array[num58];
+													}
+
+													break;
 													case 4:
 														width2 = 8;
-														height2 = 8;
-														num59 = 4;
-														num60 = 4;
-														break;
+													height2 = 8;
+													num59 = 4;
+													num60 = 4;
+													break;
 													case 5:
 														num59 = 12;
-														num60 = 4;
-														height2 = 8;
-														if (!Main.tile[num56 + 1, num57].active())
-														{
-															color16 = array[num58];
-														}
-														break;
+													num60 = 4;
+													height2 = 8;
+													if (!Main.tile[num56 + 1, num57].active())
+													{
+														color16 = array[num58];
+													}
+
+													break;
 													case 6:
 														num60 = 12;
-														if (!Main.tile[num56 - 1, num57 + 1].active())
-														{
-															color16 = array[num58];
-														}
-														break;
+													if (!Main.tile[num56 - 1, num57 + 1].active())
+													{
+														color16 = array[num58];
+													}
+
+													break;
 													case 7:
 														width2 = 8;
-														height2 = 4;
-														num59 = 4;
-														num60 = 12;
-														if (!Main.tile[num56, num57 + 1].active())
-														{
-															color16 = array[num58];
-														}
-														break;
+													height2 = 4;
+													num59 = 4;
+													num60 = 12;
+													if (!Main.tile[num56, num57 + 1].active())
+													{
+														color16 = array[num58];
+													}
+
+													break;
 													case 8:
 														num59 = 12;
-														num60 = 12;
-														if (!Main.tile[num56 + 1, num57 + 1].active())
-														{
-															color16 = array[num58];
-														}
-														break;
+													num60 = 12;
+													if (!Main.tile[num56 + 1, num57 + 1].active())
+													{
+														color16 = array[num58];
+													}
+
+													break;
 												}
+
 												color15.R = (byte)((color14.R + color16.R) / 2);
 												color15.G = (byte)((color14.G + color16.G) / 2);
 												color15.B = (byte)((color14.B + color16.B) / 2);
@@ -47890,15 +_,16 @@
 												{
 													case 1:
 														num62 = 8;
-														break;
+													break;
 													case 2:
 														num63 = 8;
-														break;
+													break;
 													case 3:
 														num62 = 8;
-														num63 = 8;
-														break;
+													num63 = 8;
+													break;
 												}
+
 												color18.R = (byte)((color14.R + color19.R) / 2);
 												color18.G = (byte)((color14.G + color19.G) / 2);
 												color18.B = (byte)((color14.B + color19.B) / 2);
@@ -47955,6 +_,7 @@
 						}
 					}
 				}
+
 				num3 = 128;
 				if (flag)
 				{
@@ -47986,6 +_,7 @@
 					}
 				}
 			}
+
 			this.bgTop = (int)((float)((int)num19 * 16) - Main.screenPosition.Y + 16f + 600f) - 8;
 			if (num19 * 16.0 <= (double)(Main.screenPosition.Y + 600f))
 			{
@@ -48001,6 +_,7 @@
 					this.bgStartY = this.bgTop;
 					this.bgLoopsY = (Main.screenHeight - this.bgTop + (int)zero.Y * 2) / Main.backgroundHeight[2] + 1;
 				}
+
 				num = (int)((double)num * 1.5);
 				num2 = (int)((double)num2 * 1.5);
 				float num68 = (float)this.bgStart + Main.screenPosition.X;
@@ -48011,6 +_,7 @@
 				{
 					num69 = 8;
 				}
+
 				for (int num70 = 0; num70 < this.bgLoops; num70++)
 				{
 					for (int num71 = 0; num71 < this.bgLoopsY; num71++)
@@ -48028,6 +_,7 @@
 								{
 									Main.tile[num76, num77] = new Tile();
 								}
+
 								bool flag4 = false;
 								if (Main.caveParallax != 0f)
 								{
@@ -48035,10 +_,12 @@
 									{
 										Main.tile[num76 - 1, num77] = new Tile();
 									}
+
 									if (Main.tile[num76 + 1, num77] == null)
 									{
 										Main.tile[num76 + 1, num77] = new Tile();
 									}
+
 									if (Main.wallLight[(int)Main.tile[num76, num77].wall] || Main.wallLight[(int)Main.tile[num76 - 1, num77].wall] || Main.wallLight[(int)Main.tile[num76 + 1, num77].wall])
 									{
 										flag4 = true;
@@ -48048,6 +_,7 @@
 								{
 									flag4 = true;
 								}
+
 								if ((flag4 || color25.R == 0 || color25.G == 0 || color25.B == 0) && (color25.R > 0 || color25.G > 0 || color25.B > 0) && (Main.wallLight[(int)Main.tile[num76, num77].wall] || Main.caveParallax != 0f))
 								{
 									if (Lighting.lightMode < 2 && color25.R < 230 && color25.G < 230 && color25.B < 230)
@@ -48067,74 +_,83 @@
 												{
 													case 0:
 														if (!Main.tile[num76 - 1, num77 - 1].active())
-														{
-															color27 = array[num78];
-														}
-														break;
+													{
+														color27 = array[num78];
+													}
+
+													break;
 													case 1:
 														width3 = 8;
-														num79 = 4;
-														if (!Main.tile[num76, num77 - 1].active())
-														{
-															color27 = array[num78];
-														}
-														break;
+													num79 = 4;
+													if (!Main.tile[num76, num77 - 1].active())
+													{
+														color27 = array[num78];
+													}
+
+													break;
 													case 2:
 														num79 = 12;
-														if (!Main.tile[num76 + 1, num77 - 1].active())
-														{
-															color27 = array[num78];
-														}
-														break;
+													if (!Main.tile[num76 + 1, num77 - 1].active())
+													{
+														color27 = array[num78];
+													}
+
+													break;
 													case 3:
 														height3 = 8;
-														num80 = 4;
-														if (!Main.tile[num76 - 1, num77].active())
-														{
-															color27 = array[num78];
-														}
-														break;
+													num80 = 4;
+													if (!Main.tile[num76 - 1, num77].active())
+													{
+														color27 = array[num78];
+													}
+
+													break;
 													case 4:
 														width3 = 8;
-														height3 = 8;
-														num79 = 4;
-														num80 = 4;
-														break;
+													height3 = 8;
+													num79 = 4;
+													num80 = 4;
+													break;
 													case 5:
 														num79 = 12;
-														num80 = 4;
-														height3 = 8;
-														if (!Main.tile[num76 + 1, num77].active())
-														{
-															color27 = array[num78];
-														}
-														break;
+													num80 = 4;
+													height3 = 8;
+													if (!Main.tile[num76 + 1, num77].active())
+													{
+														color27 = array[num78];
+													}
+
+													break;
 													case 6:
 														num80 = 12;
-														if (!Main.tile[num76 - 1, num77 + 1].active())
-														{
-															color27 = array[num78];
-														}
-														break;
+													if (!Main.tile[num76 - 1, num77 + 1].active())
+													{
+														color27 = array[num78];
+													}
+
+													break;
 													case 7:
 														width3 = 8;
-														height3 = 4;
-														num79 = 4;
-														num80 = 12;
-														if (!Main.tile[num76, num77 + 1].active())
-														{
-															color27 = array[num78];
-														}
-														break;
+													height3 = 4;
+													num79 = 4;
+													num80 = 12;
+													if (!Main.tile[num76, num77 + 1].active())
+													{
+														color27 = array[num78];
+													}
+
+													break;
 													case 8:
 														num79 = 12;
-														num80 = 12;
-														if (!Main.tile[num76 + 1, num77 + 1].active())
-														{
-															color27 = array[num78];
-														}
-														break;
+													num80 = 12;
+													if (!Main.tile[num76 + 1, num77 + 1].active())
+													{
+														color27 = array[num78];
+													}
+
+													break;
 												}
+
 												color26.R = (byte)((color25.R + color27.R) / 2);
 												color26.G = (byte)((color25.G + color27.G) / 2);
 												color26.B = (byte)((color25.B + color27.B) / 2);
@@ -48157,15 +_,16 @@
 												{
 													case 1:
 														num82 = 8;
-														break;
+													break;
 													case 2:
 														num83 = 8;
-														break;
+													break;
 													case 3:
 														num82 = 8;
-														num83 = 8;
-														break;
+													num83 = 8;
+													break;
 												}
+
 												color28.R = (byte)((color25.R + color29.R) / 2);
 												color28.G = (byte)((color25.G + color29.G) / 2);
 												color28.B = (byte)((color25.B + color29.B) / 2);
@@ -48196,6 +_,7 @@
 					}
 				}
 			}
+
 			Lighting.brightness = Lighting.defBrightness;
 			TimeLogger.DrawTime(3, stopwatch.Elapsed.TotalMilliseconds);
 		}
@@ -48206,6 +_,7 @@
 			{
 				return;
 			}
+
 			base.GraphicsDevice.SetRenderTarget(this.backWaterTarget);
 			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
 			Main.spriteBatch.Begin();
@@ -48217,6 +_,7 @@
 			catch
 			{
 			}
+
 			Main.tileBatch.End();
 			Main.spriteBatch.End();
 			base.GraphicsDevice.SetRenderTarget(null);
@@ -48237,6 +_,7 @@
 					goto IL_BE;
 				}
 			}
+
 			this.DrawBackground();
 			IL_BE:
 			TimeLogger.DetailedDrawReset();
@@ -48252,6 +_,7 @@
 			{
 				return;
 			}
+
 			int num = Main.maxTilesX / Main.textureMaxWidth;
 			int num2 = Main.maxTilesY / Main.textureMaxHeight;
 			for (int i = 0; i <= num; i++)
@@ -48264,6 +_,7 @@
 					}
 				}
 			}
+
 			if (Main.clearMap)
 			{
 				for (int k = 0; k <= num; k++)
@@ -48275,8 +_,10 @@
 						base.GraphicsDevice.SetRenderTarget(null);
 					}
 				}
+
 				Main.clearMap = false;
 			}
+
 			int num3 = -1;
 			int num4 = -1;
 			bool flag = false;
@@ -48292,6 +_,7 @@
 				num7 = Main.textureMaxHeight;
 				num10 = 2;
 			}
+
 			for (int m = 0; m < num10; m++)
 			{
 				if (m == 0)
@@ -48304,6 +_,7 @@
 					Main.mapMinY = num7;
 					Main.mapMaxY = num9;
 				}
+
 				for (int n = Main.mapMinX; n < Main.mapMaxX; n++)
 				{
 					for (int num11 = Main.mapMinY; num11 < Main.mapMaxY; num11++)
@@ -48318,6 +_,7 @@
 								{
 									Main.loadMapLastX = n;
 								}
+
 								Main.Map.ConsumeUpdate(n, num11);
 								int num12 = n / Main.textureMaxWidth;
 								int num13 = num11 / Main.textureMaxHeight;
@@ -48330,10 +_,12 @@
 										Main.spriteBatch.End();
 										base.GraphicsDevice.SetRenderTarget(null);
 									}
+
 									flag = true;
 									base.GraphicsDevice.SetRenderTarget(this.mapTarget[num12, num13]);
 									Main.spriteBatch.Begin();
 								}
+
 								int num14 = n - num12 * Main.textureMaxWidth;
 								int num15 = num11 - num13 * Main.textureMaxHeight;
 								Microsoft.Xna.Framework.Color mapTileXnaColor = MapHelper.GetMapTileXnaColor(ref mapTile);
@@ -48348,11 +_,13 @@
 									{
 										break;
 									}
+
 									Main.Map.ConsumeUpdate(n, num18);
 									num16++;
 									num18++;
 									num11++;
 								}
+
 								if (num16 == 1)
 								{
 									for (num18 = n + 1; num18 < Main.mapMaxX; num18++)
@@ -48363,16 +_,19 @@
 										{
 											break;
 										}
+
 										Main.Map.ConsumeUpdate(num18, num11);
 										num17++;
 									}
 								}
+
 								Main.spriteBatch.Draw(Main.magicPixel, new Vector2((float)num14, (float)num15), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, num17, num16)), mapTileXnaColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 							}
 						}
 					}
 				}
 			}
+
 			for (int num19 = 0; num19 < MapHelper.numUpdateTile; num19++)
 			{
 				int num20 = (int)MapHelper.updateTileX[num19];
@@ -48392,22 +_,26 @@
 							Main.spriteBatch.End();
 							base.GraphicsDevice.SetRenderTarget(null);
 						}
+
 						flag = true;
 						base.GraphicsDevice.SetRenderTarget(this.mapTarget[num22, num23]);
 						Main.spriteBatch.Begin();
 					}
+
 					int num24 = num20 - num22 * Main.textureMaxWidth;
 					int num25 = num21 - num23 * Main.textureMaxHeight;
 					Microsoft.Xna.Framework.Color mapTileXnaColor2 = MapHelper.GetMapTileXnaColor(ref mapTile5);
 					Main.spriteBatch.Draw(Main.magicPixel, new Vector2((float)num24, (float)num25), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), mapTileXnaColor2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 				}
 			}
+
 			MapHelper.numUpdateTile = 0;
 			if (flag)
 			{
 				Main.spriteBatch.End();
 				base.GraphicsDevice.SetRenderTarget(null);
 			}
+
 			Main.mapReady = true;
 			Main.loadMapLastX = 0;
 			Main.loadMap = false;
@@ -48430,6 +_,7 @@
 			{
 				return;
 			}
+
 			int num9 = 0;
 			Microsoft.Xna.Framework.Color arg_6A_0 = Microsoft.Xna.Framework.Color.Transparent;
 			for (int i = num3; i < num4; i++)
@@ -48441,6 +_,7 @@
 					num9++;
 				}
 			}
+
 			try
 			{
 				base.GraphicsDevice.SetRenderTarget(this.mapTarget[num5, num6]);
@@ -48450,6 +_,7 @@
 				Main.initMap[num5, num6] = false;
 				return;
 			}
+
 			Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
 			double totalMilliseconds = stopwatch.Elapsed.TotalMilliseconds;
 			this.mapSectionTexture.SetData<Microsoft.Xna.Framework.Color>(mapColorCacheArray, 0, mapColorCacheArray.Length);
@@ -48473,38 +_,46 @@
 				i -= 1000000;
 				num++;
 			}
+
 			while (i >= 10000)
 			{
 				i -= 10000;
 				num2++;
 			}
+
 			while (i >= 100)
 			{
 				i -= 100;
 				num3++;
 			}
+
 			int num4 = i;
 			string text = "";
 			if (num > 0)
 			{
 				text += string.Format("{0} {1} ", num, Language.GetTextValue("Currency.Platinum").ToLower());
 			}
+
 			if (num2 > 0)
 			{
 				text += string.Format("{0} {1} ", num2, Language.GetTextValue("Currency.Gold").ToLower());
 			}
+
 			if (num3 > 0)
 			{
 				text += string.Format("{0} {1} ", num3, Language.GetTextValue("Currency.Silver").ToLower());
 			}
+
 			if (num4 > 0)
 			{
 				text += string.Format("{0} {1} ", num4, Language.GetTextValue("Currency.Copper").ToLower());
 			}
+
 			if (text.Length > 0)
 			{
 				text = text.Substring(0, text.Length - 1);
 			}
+
 			return text;
 		}
 
@@ -48515,10 +_,12 @@
 			{
 				return;
 			}
+
 			if (!Main.mapReady)
 			{
 				return;
 			}
+
 			float num = 0f;
 			float num2 = 0f;
 			float num3 = num;
@@ -48555,6 +_,7 @@
 					}
 				}
 			}
+
 			num = 200f;
 			num2 = 300f;
 			float num12 = 0f;
@@ -48574,6 +_,7 @@
 			{
 				num16 = Main.mapOverlayScale;
 			}
+
 			bool flag = false;
 			if (!Main.mapFullscreen && num16 > 1f)
 			{
@@ -48581,6 +_,7 @@
 				Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
 				flag = true;
 			}
+
 			if (Main.mapFullscreen)
 			{
 				if (Main.mouseLeft && base.IsActive && !CaptureManager.Instance.UsingMap)
@@ -48602,34 +_,41 @@
 						Main.mapFullscreenPos.Y = Main.mapFullscreenPos.Y - num18 * (16f / Main.mapFullscreenScale);
 					}
 				}
+
 				Main.player[Main.myPlayer].mouseInterface = true;
 				float num19 = (float)Main.screenWidth / (float)Main.maxTilesX * 0.8f;
 				if (Main.mapFullscreenScale < num19)
 				{
 					Main.mapFullscreenScale = num19;
 				}
+
 				if (Main.mapFullscreenScale > 16f)
 				{
 					Main.mapFullscreenScale = 16f;
 				}
+
 				num16 = Main.mapFullscreenScale;
 				b = 255;
 				if (Main.mapFullscreenPos.X < num6)
 				{
 					Main.mapFullscreenPos.X = num6;
 				}
+
 				if (Main.mapFullscreenPos.X > num8)
 				{
 					Main.mapFullscreenPos.X = num8;
 				}
+
 				if (Main.mapFullscreenPos.Y < num7)
 				{
 					Main.mapFullscreenPos.Y = num7;
 				}
+
 				if (Main.mapFullscreenPos.Y > num9)
 				{
 					Main.mapFullscreenPos.Y = num9;
 				}
+
 				float num20 = Main.mapFullscreenPos.X;
 				float num21 = Main.mapFullscreenPos.Y;
 				if (Main.resetMapFull)
@@ -48640,6 +_,7 @@
 					Main.mapFullscreenPos.X = num20;
 					Main.mapFullscreenPos.Y = num21;
 				}
+
 				num20 *= num16;
 				num21 *= num16;
 				num = -num20 + (float)(Main.screenWidth / 2);
@@ -48704,10 +_,16 @@
 					num26 -= 8.31f;
 					num26 *= num22;
 				}
+
 				Main.spriteBatch.End();
 				Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
 				flag = true;
-				if (Main.screenPosition.Y > (float)((Main.maxTilesY - 232) * 16))
+				Texture2D modTexture = PlayerHooks.GetMapBackgroundImage(Main.player[Main.myPlayer]);
+				if (modTexture != null)
+				{
+					Main.spriteBatch.Draw(modTexture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Microsoft.Xna.Framework.Color.White);
+				}
+				else if (Main.screenPosition.Y > (float)((Main.maxTilesY - 232) * 16))
 				{
 					Main.spriteBatch.Draw(this.mapBG3Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Microsoft.Xna.Framework.Color.White);
 				}
@@ -48774,6 +_,7 @@
 						Main.spriteBatch.Draw(this.mapBG1Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Main.bgColor);
 					}
 				}
+
 				Microsoft.Xna.Framework.Rectangle destinationRectangle = new Microsoft.Xna.Framework.Rectangle((int)num23, (int)num24, (int)num25, (int)num26);
 				Main.spriteBatch.Draw(Main.mapTexture, destinationRectangle, Microsoft.Xna.Framework.Color.White);
 				if (num16 < 1f)
@@ -48794,18 +_,22 @@
 				{
 					Main.mapMinimapScale = 0.2f;
 				}
+
 				if (Main.mapMinimapScale > 3f)
 				{
 					Main.mapMinimapScale = 3f;
 				}
+
 				if ((double)Main.mapMinimapAlpha < 0.01)
 				{
 					Main.mapMinimapAlpha = 0.01f;
 				}
+
 				if (Main.mapMinimapAlpha > 1f)
 				{
 					Main.mapMinimapAlpha = 1f;
 				}
+
 				num16 = Main.mapMinimapScale;
 				b = (byte)(255f * Main.mapMinimapAlpha);
 				num = (float)Main.miniMapX;
@@ -48833,18 +_,22 @@
 				{
 					Main.mapOverlayScale = num31;
 				}
+
 				if (Main.mapOverlayScale > 16f)
 				{
 					Main.mapOverlayScale = 16f;
 				}
+
 				if ((double)Main.mapOverlayAlpha < 0.01)
 				{
 					Main.mapOverlayAlpha = 0.01f;
 				}
+
 				if (Main.mapOverlayAlpha > 1f)
 				{
 					Main.mapOverlayAlpha = 1f;
 				}
+
 				num16 = Main.mapOverlayScale;
 				b = (byte)(255f * Main.mapOverlayAlpha);
 				int arg_D3A_0 = Main.maxTilesX;
@@ -48858,40 +_,47 @@
 				num += num6 * num16;
 				num2 += num7 * num16;
 			}
+
 			if (Main.mapStyle == 1 && !Main.mapFullscreen)
 			{
 				if (num12 < num6)
 				{
 					num -= (num12 - num6) * num16;
 				}
+
 				if (num13 < num7)
 				{
 					num2 -= (num13 - num7) * num16;
 				}
 			}
+
 			num14 = num12 + num14;
 			num15 = num13 + num15;
 			if (num12 > num6)
 			{
 				num6 = num12;
 			}
+
 			if (num13 > num7)
 			{
 				num7 = num13;
 			}
+
 			if (num14 < num8)
 			{
 				num8 = num14;
 			}
+
 			if (num15 < num9)
 			{
 				num9 = num15;
 			}
+
 			float num34 = (float)Main.textureMaxWidth * num16;
 			float num35 = (float)Main.textureMaxHeight * num16;
 			float num36 = num;
 			float num37 = 0f;
-			for (int k = 0; k <= 4; k++)
+			for (int k = 0; k <= Main.mapTargetX - 1; k++)
 			{
 				if ((float)((k + 1) * Main.textureMaxWidth) > num6 && (float)(k * Main.textureMaxWidth) < num6 + num8)
 				{
@@ -48913,6 +_,7 @@
 							{
 								num38 -= num6 * num16;
 							}
+
 							if (num41 < num7)
 							{
 								num43 = num7 - num41;
@@ -48922,6 +_,7 @@
 							{
 								num39 -= num7 * num16;
 							}
+
 							num38 = num36;
 							float num44 = (float)Main.textureMaxWidth;
 							float num45 = (float)Main.textureMaxHeight;
@@ -48931,18 +_,22 @@
 							{
 								num44 -= num46 - num8;
 							}
+
 							if (num47 >= num9)
 							{
 								num45 -= num47 - num9;
 							}
+
 							num38 += num10;
 							num39 += num11;
 							if (num44 > num42)
 							{
 								Main.spriteBatch.Draw(this.mapTarget[k, l], new Vector2(num38, num39), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num42, (int)num43, (int)num44 - (int)num42, (int)num45 - (int)num43)), new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, (int)b), 0f, default(Vector2), num16, SpriteEffects.None, 0f);
 							}
+
 							num37 = (float)((int)num44 - (int)num42) * num16;
 						}
+
 						if (l == num5)
 						{
 							num36 += num37;
@@ -48950,11 +_,13 @@
 					}
 				}
 			}
+
 			if (flag)
 			{
 				Main.spriteBatch.End();
 				Main.spriteBatch.Begin();
 			}
+
 			if (!Main.mapFullscreen)
 			{
 				if (Main.mapStyle == 2)
@@ -48964,6 +_,7 @@
 					{
 						num48 = 1f;
 					}
+
 					if (num16 < 10f)
 					{
 						for (int m = 0; m < 200; m++)
@@ -48978,6 +_,7 @@
 									{
 										effects = SpriteEffects.FlipHorizontally;
 									}
+
 									float num50 = (Main.npc[m].position.X + (float)(Main.npc[m].width / 2)) / 16f * num16;
 									float num51 = (Main.npc[m].position.Y + (float)(Main.npc[m].height / 2)) / 16f * num16;
 									num50 += num;
@@ -48987,6 +_,7 @@
 									Main.spriteBatch.Draw(Main.npcHeadTexture[num49], new Vector2(num50, num51), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.npcHeadTexture[num49].Width, Main.npcHeadTexture[num49].Height)), new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, (int)b), 0f, new Vector2((float)(Main.npcHeadTexture[num49].Width / 2), (float)(Main.npcHeadTexture[num49].Height / 2)), num48, effects, 0f);
 								}
 							}
+
 							if (Main.npc[m].active && Main.npc[m].GetBossHeadTextureIndex() != -1)
 							{
 								float bossHeadRotation = Main.npc[m].GetBossHeadRotation();
@@ -49003,9 +_,11 @@
 										vector2 += Main.npc[num53].Center;
 										num53 = (int)Main.npc[num53].ai[0];
 									}
+
 									vector2 /= (float)num52;
 									vector = vector2;
 								}
+
 								int bossHeadTextureIndex = Main.npc[m].GetBossHeadTextureIndex();
 								float num54 = vector.X / 16f * num16;
 								float num55 = vector.Y / 16f * num16;
@@ -49016,6 +_,7 @@
 								Main.spriteBatch.Draw(Main.npcHeadBossTexture[bossHeadTextureIndex], new Vector2(num54, num55), null, new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, (int)b), bossHeadRotation, Main.npcHeadBossTexture[bossHeadTextureIndex].Size() / 2f, num48, bossHeadSpriteEffects, 0f);
 							}
 						}
+
 						Main.spriteBatch.End();
 						Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
 						for (int n = 0; n < 255; n++)
@@ -49034,10 +_,12 @@
 								this.DrawPlayerHead(Main.player[n], num56, num57, (float)b / 255f, num48);
 							}
 						}
+
 						Main.spriteBatch.End();
 						Main.spriteBatch.Begin();
 					}
 				}
+
 				if (Main.mapStyle == 1)
 				{
 					float num58 = num3 - 6f;
@@ -49047,6 +_,7 @@
 					{
 						num60 = 1f;
 					}
+
 					for (int num61 = 0; num61 < 200; num61++)
 					{
 						if (Main.npc[num61].active && Main.npc[num61].townNPC)
@@ -49059,6 +_,7 @@
 								{
 									effects2 = SpriteEffects.FlipHorizontally;
 								}
+
 								float num63 = ((Main.npc[num61].position.X + (float)(Main.npc[num61].width / 2)) / 16f - num12) * num16;
 								float num64 = ((Main.npc[num61].position.Y + Main.npc[num61].gfxOffY + (float)(Main.npc[num61].height / 2)) / 16f - num13) * num16;
 								num63 += num3;
@@ -49082,11 +_,13 @@
 										{
 											text2 = Language.GetTextValue("Game.NPCTitle", Main.npc[num61].displayName, Main.npcName[Main.npc[num61].type]);
 										}
+
 										text = text2;
 									}
 								}
 							}
 						}
+
 						if (Main.npc[num61].active && Main.npc[num61].GetBossHeadTextureIndex() != -1)
 						{
 							float bossHeadRotation2 = Main.npc[num61].GetBossHeadRotation();
@@ -49103,9 +_,11 @@
 									vector4 += Main.npc[num70].Center;
 									num70 = (int)Main.npc[num70].ai[0];
 								}
+
 								vector4 /= (float)num69;
 								vector3 = vector4;
 							}
+
 							int bossHeadTextureIndex2 = Main.npc[num61].GetBossHeadTextureIndex();
 							float num71 = (vector3.X / 16f - num12) * num16;
 							float num72 = (vector3.Y / 16f - num13) * num16;
@@ -49126,6 +_,7 @@
 							}
 						}
 					}
+
 					Main.spriteBatch.End();
 					Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
 					for (int num77 = 0; num77 < 255; num77++)
@@ -49148,6 +_,7 @@
 								num79 -= 3f;
 								num78 -= 4f;
 							}
+
 							if (!Main.player[num77].dead && num78 > (float)(Main.miniMapX + 6) && num78 < (float)(Main.miniMapX + Main.miniMapWidth - 16) && num79 > (float)(Main.miniMapY + 6) && num79 < (float)(Main.miniMapY + Main.miniMapHeight - 14))
 							{
 								this.DrawPlayerHead(Main.player[num77], num78, num79, (float)b / 255f, num60);
@@ -49163,6 +_,7 @@
 									}
 								}
 							}
+
 							if (Main.player[num77].showLastDeath)
 							{
 								num78 = (Main.player[num77].lastDeathPostion.X / 16f - num12) * num16;
@@ -49190,6 +_,7 @@
 							}
 						}
 					}
+
 					Main.spriteBatch.End();
 					Main.spriteBatch.Begin();
 					Main.spriteBatch.Draw(Main.miniMapFrameTexture, new Vector2(num58, num59), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.miniMapFrameTexture.Width, Main.miniMapFrameTexture.Height)), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
@@ -49209,6 +_,7 @@
 									{
 										Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 									}
+
 									if (num88 == 0)
 									{
 										Main.mapMinimapScale = 1.25f;
@@ -49227,6 +_,7 @@
 					}
 				}
 			}
+
 			if (Main.mapFullscreen)
 			{
 				int num91 = (int)((-num + (float)Main.mouseX) / num16 + num6);
@@ -49236,18 +_,22 @@
 				{
 					flag2 = true;
 				}
+
 				if ((float)num91 >= num8)
 				{
 					flag2 = true;
 				}
+
 				if ((float)num92 < num7)
 				{
 					flag2 = true;
 				}
+
 				if ((float)num92 >= num9)
 				{
 					flag2 = true;
 				}
+
 				if (!flag2 && Main.Map[num91, num92].Light > 40)
 				{
 					int type = (int)Main.Map[num91, num92].Type;
@@ -49264,16 +_,19 @@
 							tile = new Tile();
 							Main.tile[num91, num92] = tile;
 						}
+
 						int num98 = num91;
 						int num99 = num92;
 						if (tile.frameX % 36 != 0)
 						{
 							num98--;
 						}
+
 						if (tile.frameY % 36 != 0)
 						{
 							num99--;
 						}
+
 						int num100 = Chest.FindChest(num98, num99);
 						if (num100 < 0)
 						{
@@ -49296,26 +_,31 @@
 							tile2 = new Tile();
 							Main.tile[num91, num92] = tile2;
 						}
+
 						int num101 = num91;
 						int num102 = num92;
 						if (tile2.frameX % 36 != 0)
 						{
 							num101--;
 						}
+
 						if (tile2.frameY % 36 != 0)
 						{
 							num102--;
 						}
+
 						text = Lang.chestType[(int)(tile2.frameX / 36)];
 					}
 					else if (type >= num96 && type < num96 + num97)
 					{
+						//patch file: num91, num92
 						Tile tile3 = Main.tile[num91, num92];
 						if (tile3 == null)
 						{
 							tile3 = new Tile();
 							Main.tile[num91, num92] = tile3;
 						}
+
 						int num103 = num91;
 						int num104 = num92;
 						num103 -= (int)(tile3.frameX % 54 / 18);
@@ -49323,6 +_,7 @@
 						{
 							num104--;
 						}
+
 						int num105 = Chest.FindChest(num103, num104);
 						if (num105 < 0)
 						{
@@ -49339,13 +_,15 @@
 					}
 					else
 					{
-						text = Lang.mapLegend[type];
-					}
-				}
+						text = Lang.mapLegend.FromTile(Main.Map[num91, num92], num91, num92);
+					}
+				}
+
 				float num106 = (num16 * 0.25f * 2f + 1f) / 3f;
 				if (num106 > 1f)
 				{
 				}
+
 				num106 = 1f;
 				for (int num107 = 0; num107 < 200; num107++)
 				{
@@ -49359,6 +_,7 @@
 							{
 								effects3 = SpriteEffects.FlipHorizontally;
 							}
+
 							float num109 = (Main.npc[num107].position.X + (float)(Main.npc[num107].width / 2)) / 16f * num16;
 							float num110 = (Main.npc[num107].position.Y + Main.npc[num107].gfxOffY + (float)(Main.npc[num107].height / 2)) / 16f * num16;
 							num109 += num;
@@ -49381,10 +_,12 @@
 								{
 									text3 = Language.GetTextValue("Game.NPCTitle", Main.npc[num107].displayName, Main.npcName[Main.npc[num107].type]);
 								}
+
 								text = text3;
 							}
 						}
 					}
+
 					if (Main.npc[num107].active && Main.npc[num107].GetBossHeadTextureIndex() != -1)
 					{
 						float bossHeadRotation3 = Main.npc[num107].GetBossHeadRotation();
@@ -49401,9 +_,11 @@
 								vector6 += Main.npc[num116].Center;
 								num116 = (int)Main.npc[num116].ai[0];
 							}
+
 							vector6 /= (float)num115;
 							vector5 = vector6;
 						}
+
 						int bossHeadTextureIndex3 = Main.npc[num107].GetBossHeadTextureIndex();
 						float num117 = vector5.X / 16f * num16;
 						float num118 = vector5.Y / 16f * num16;
@@ -49422,6 +_,7 @@
 						}
 					}
 				}
+
 				bool flag3 = false;
 				Main.spriteBatch.End();
 				Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
@@ -49448,6 +_,7 @@
 						}
 					}
 				}
+
 				for (int num130 = 0; num130 < 255; num130++)
 				{
 					if (Main.player[num130].active && ((!Main.player[Main.myPlayer].hostile && !Main.player[num130].hostile) || (Main.player[Main.myPlayer].team == Main.player[num130].team && Main.player[num130].team != 0) || num130 == Main.myPlayer))
@@ -49478,6 +_,7 @@
 									{
 										Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 									}
+
 									this.unityMouseOver = true;
 									this.DrawPlayerHead(Main.player[num130], num131, num132, 2f, num106 + 0.5f);
 									text = Language.GetTextValue("Game.TeleportTo", Main.player[num130].name);
@@ -49493,10 +_,12 @@
 						}
 					}
 				}
+
 				if (!flag3 && this.unityMouseOver)
 				{
 					this.unityMouseOver = false;
 				}
+
 				Main.spriteBatch.End();
 				Main.spriteBatch.Begin();
 				int num137 = 10;
@@ -49514,14 +_,18 @@
 						Main.mapFullscreen = false;
 					}
 				}
+
 				Main.spriteBatch.Draw(Main.mapIconTexture[num139], new Vector2((float)num137, (float)num138), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.mapIconTexture[num139].Width, Main.mapIconTexture[num139].Height)), new Microsoft.Xna.Framework.Color(num140, num140, num140, num140), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+				ModLoader.ModHooks.PostDrawFullscreenMap(ref text);
 				Vector2 bonus = Main.DrawThickCursor(false);
 				Main.DrawCursor(bonus, false);
 			}
+
 			if (text != "")
 			{
 				this.MouseText(text, 0, 0);
 			}
+
 			TimeLogger.DetailedDrawTime(9);
 		}
 
@@ -49572,6 +_,7 @@
 			{
 				Main.bgAlpha[i] = 0f;
 			}
+
 			Main.bgAlpha[settings.Biome.BackgroundIndex] = 1f;
 			float[] array2 = Main.bgAlpha2;
 			Main.bgAlpha2 = new float[array2.Length];
@@ -49579,11 +_,13 @@
 			{
 				Main.bgAlpha2[j] = 0f;
 			}
+
 			Main.bgAlpha2[settings.Biome.BackgroundIndex2] = 1f;
 			if (settings.Biome.BackgroundIndex2 == 6)
 			{
 				Main.bgAlpha2[0] = 1f;
 			}
+
 			int num = Main.holyTiles;
 			Main.holyTiles = ((settings.Biome.BackgroundIndex == 6) ? 400 : 0);
 			int num2 = Main.offScreenRange;
@@ -49638,6 +_,7 @@
 			{
 				double num9 = Math.Pow((Main.time / 32400.0 - 0.5) * 2.0, 2.0);
 			}
+
 			if (Main.dayTime)
 			{
 				if (Main.time < 13500.0)
@@ -49650,6 +_,7 @@
 					Main.bgColor.G = (byte)(num10 * 220f + 35f);
 					Main.bgColor.B = (byte)(num10 * 220f + 35f);
 				}
+
 				if (Main.time > 45900.0)
 				{
 					float num10 = (float)(1.0 - (Main.time / 54000.0 - 0.85) * 6.666666666666667);
@@ -49671,6 +_,7 @@
 					Main.bgColor.B = (byte)(num10 * 85f + 170f);
 				}
 			}
+
 			if (!Main.dayTime)
 			{
 				if (Main.bloodMoon)
@@ -49720,10 +_,12 @@
 					Main.bgColor.B = (byte)(num10 * 30f + 5f);
 				}
 			}
+
 			if (Main.gameMenu)
 			{
 				Main.bgDelay = 1000;
 			}
+
 			if (biome.TileColor == CaptureBiome.TileColorStyle.Corrupt)
 			{
 				float num11 = 1f;
@@ -49737,14 +_,17 @@
 				{
 					num12 = 15;
 				}
+
 				if (num13 < 15)
 				{
 					num13 = 15;
 				}
+
 				if (num14 < 15)
 				{
 					num14 = 15;
 				}
+
 				Main.bgColor.R = (byte)num12;
 				Main.bgColor.G = (byte)num13;
 				Main.bgColor.B = (byte)num14;
@@ -49758,14 +_,17 @@
 				{
 					num12 = 15;
 				}
+
 				if (num13 < 15)
 				{
 					num13 = 15;
 				}
+
 				if (num14 < 15)
 				{
 					num14 = 15;
 				}
+
 				white.R = (byte)num12;
 				white.G = (byte)num13;
 				white.B = (byte)num14;
@@ -49779,18 +_,22 @@
 				{
 					num12 = 15;
 				}
+
 				if (num13 < 15)
 				{
 					num13 = 15;
 				}
+
 				if (num14 < 15)
 				{
 					num14 = 15;
 				}
+
 				white2.R = (byte)num12;
 				white2.G = (byte)num13;
 				white2.B = (byte)num14;
 			}
+
 			if (biome.TileColor == CaptureBiome.TileColorStyle.Crimson)
 			{
 				float num15 = 1f;
@@ -49804,14 +_,17 @@
 				{
 					num16 = 15;
 				}
+
 				if (num17 < 15)
 				{
 					num17 = 15;
 				}
+
 				if (num18 < 15)
 				{
 					num18 = 15;
 				}
+
 				Main.bgColor.R = (byte)num16;
 				Main.bgColor.G = (byte)num17;
 				Main.bgColor.B = (byte)num18;
@@ -49824,14 +_,17 @@
 				{
 					num16 = 15;
 				}
+
 				if (num17 < 15)
 				{
 					num17 = 15;
 				}
+
 				if (num18 < 15)
 				{
 					num18 = 15;
 				}
+
 				white.R = (byte)num16;
 				white.G = (byte)num17;
 				white.B = (byte)num18;
@@ -49845,18 +_,22 @@
 				{
 					num16 = 15;
 				}
+
 				if (num17 < 15)
 				{
 					num17 = 15;
 				}
+
 				if (num18 < 15)
 				{
 					num18 = 15;
 				}
+
 				white2.R = (byte)num16;
 				white2.G = (byte)num17;
 				white2.B = (byte)num18;
 			}
+
 			if (biome.TileColor == CaptureBiome.TileColorStyle.Jungle)
 			{
 				float num19 = 1f;
@@ -49869,22 +_,27 @@
 				{
 					num21 = 255;
 				}
+
 				if (num21 < 15)
 				{
 					num21 = 15;
 				}
+
 				if (num20 > 255)
 				{
 					num20 = 255;
 				}
+
 				if (num20 < 15)
 				{
 					num20 = 15;
 				}
+
 				if (num22 < 15)
 				{
 					num22 = 15;
 				}
+
 				Main.bgColor.R = (byte)num20;
 				Main.bgColor.G = (byte)num21;
 				Main.bgColor.B = (byte)num22;
@@ -49897,14 +_,17 @@
 				{
 					num20 = 15;
 				}
+
 				if (num21 < 15)
 				{
 					num21 = 15;
 				}
+
 				if (num22 < 15)
 				{
 					num22 = 15;
 				}
+
 				white.R = (byte)num20;
 				white.G = (byte)num21;
 				white.B = (byte)num22;
@@ -49918,18 +_,22 @@
 				{
 					num20 = 15;
 				}
+
 				if (num21 < 15)
 				{
 					num21 = 15;
 				}
+
 				if (num22 < 15)
 				{
 					num22 = 15;
 				}
+
 				white2.R = (byte)num20;
 				white2.G = (byte)num21;
 				white2.B = (byte)num22;
 			}
+
 			if (biome.TileColor == CaptureBiome.TileColorStyle.Mushroom)
 			{
 				float num23 = 1f;
@@ -49943,14 +_,17 @@
 				{
 					num25 = 15;
 				}
+
 				if (num24 < 15)
 				{
 					num24 = 15;
 				}
+
 				if (num26 < 15)
 				{
 					num26 = 15;
 				}
+
 				Main.bgColor.R = (byte)num24;
 				Main.bgColor.G = (byte)num25;
 				Main.bgColor.B = (byte)num26;
@@ -49964,14 +_,17 @@
 				{
 					num24 = 15;
 				}
+
 				if (num25 < 15)
 				{
 					num25 = 15;
 				}
+
 				if (num26 < 15)
 				{
 					num26 = 15;
 				}
+
 				white.R = (byte)num24;
 				white.G = (byte)num25;
 				white.B = (byte)num26;
@@ -49985,28 +_,34 @@
 				{
 					num24 = 15;
 				}
+
 				if (num25 < 15)
 				{
 					num25 = 15;
 				}
+
 				if (num26 < 15)
 				{
 					num26 = 15;
 				}
+
 				white2.R = (byte)num24;
 				white2.G = (byte)num25;
 				white2.B = (byte)num26;
 			}
+
 			if (Lighting.lightMode < 2)
 			{
 				if (Main.bgColor.R < 10)
 				{
 					Main.bgColor.R = 10;
 				}
+
 				if (Main.bgColor.G < 10)
 				{
 					Main.bgColor.G = 10;
 				}
+
 				if (Main.bgColor.B < 10)
 				{
 					Main.bgColor.B = 10;
@@ -50018,15 +_,18 @@
 				{
 					Main.bgColor.R = 15;
 				}
+
 				if (Main.bgColor.G < 15)
 				{
 					Main.bgColor.G = 15;
 				}
+
 				if (Main.bgColor.B < 15)
 				{
 					Main.bgColor.B = 15;
 				}
 			}
+
 			Main.tileColor.A = 255;
 			Main.tileColor.R = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.R * 7) / 10);
 			Main.tileColor.G = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.G * 7) / 10);
@@ -50039,6 +_,7 @@
 			{
 				Lighting.LightTiles(x, num6, y, num7);
 			}
+
 			if ((float)(settings.Area.X * 16) <= vector.X - 16f || (float)(settings.Area.Y * 16) <= vector.Y - 16f || (float)((settings.Area.X + settings.Area.Width) * 16) >= vector.X + (float)num3 + 16f || (float)((settings.Area.Y + settings.Area.Height) * 16) >= vector.Y + (float)num4 + 16f)
 			{
 				for (int l = 0; l < Main.dust.Length; l++)
@@ -50049,6 +_,7 @@
 					}
 				}
 			}
+
 			Vector2 value = Main.drawToScreen ? Vector2.Zero : new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
 			int num27 = (int)((Main.screenPosition.X - value.X) / 16f - 1f);
 			int num28 = (int)((Main.screenPosition.X + (float)Main.screenWidth + value.X) / 16f) + 2;
@@ -50082,6 +_,7 @@
 					array3[m] = Main.cloud[m].position;
 					Main.cloud[m].position *= value4;
 				}
+
 				if ((float)(settings.Area.Height * 16) >= 2000f || (float)(settings.Area.Width * 16) >= 2000f)
 				{
 					this.scAdj = 0f;
@@ -50103,6 +_,7 @@
 					Main.screenHeight = num4;
 					matrix.Translation += new Vector3(vector.X - (float)area.X * 16f, vector.Y - (float)area.Y * 16f, 0f);
 				}
+
 				Main.tileBatch.Begin();
 				this.DrawSimpleSurfaceBackground();
 				Main.tileBatch.End();
@@ -50113,18 +_,21 @@
 				{
 					Main.cloud[n].position = array3[n];
 				}
+
 				this.scAdj = num33;
 				Main.mapFullscreen = flag;
 				Main.screenWidth = num32;
 				Main.screenHeight = num31;
 				Main.screenPosition = vector2;
 			}
+
 			if (captureBackground)
 			{
 				Main.spriteBatch.Begin();
 				this.DrawUnderworldBackground(true);
 				Main.spriteBatch.End();
 			}
+
 			if (captureEntities)
 			{
 				Main.spriteBatch.Begin();
@@ -50133,6 +_,7 @@
 				this.DrawCachedNPCs(this.DrawCacheNPCsMoonMoon, true);
 				Main.spriteBatch.End();
 			}
+
 			Main.tileBatch.Begin();
 			Main.spriteBatch.Begin();
 			this.DrawBlack(true);
@@ -50148,6 +_,7 @@
 			{
 				this.drawWaters(true, Main.bloodMoon ? 9 : biome.WaterStyle, false);
 			}
+
 			Main.tileBatch.End();
 			Main.spriteBatch.End();
 			if (captureBackground)
@@ -50158,6 +_,7 @@
 				Main.tileBatch.End();
 				Main.spriteBatch.End();
 			}
+
 			Main.tileBatch.Begin();
 			Main.spriteBatch.Begin();
 			this.DrawWalls();
@@ -50169,12 +_,14 @@
 				this.DrawWoF();
 				Main.spriteBatch.End();
 			}
+
 			if (captureEntities)
 			{
 				Main.spriteBatch.Begin();
 				this.DrawRain();
 				Main.spriteBatch.End();
 			}
+
 			if (Main.drawBackGore && captureEntities)
 			{
 				Main.spriteBatch.Begin();
@@ -50182,6 +_,7 @@
 				Main.spriteBatch.End();
 				Main.drawBackGore = true;
 			}
+
 			if (captureEntities)
 			{
 				Main.spriteBatch.Begin();
@@ -50189,6 +_,7 @@
 				MoonlordDeathDrama.DrawExplosions(Main.spriteBatch);
 				Main.spriteBatch.End();
 			}
+
 			Main.tileBatch.Begin();
 			Main.spriteBatch.Begin();
 			if (biome == null)
@@ -50199,6 +_,7 @@
 			{
 				this.DrawTiles(true, biome.WaterStyle);
 			}
+
 			Main.tileBatch.End();
 			Main.spriteBatch.End();
 			Main.tileBatch.Begin();
@@ -50212,6 +_,7 @@
 			{
 				this.DrawTiles(false, Main.bloodMoon ? 9 : biome.WaterStyle);
 			}
+
 			Main.tileBatch.End();
 			Main.spriteBatch.End();
 			if (captureEntities)
@@ -50241,6 +_,7 @@
 				this.DrawGore();
 				Main.spriteBatch.End();
 			}
+
 			Main.tileBatch.Begin();
 			Main.spriteBatch.Begin();
 			if (biome == null)
@@ -50251,10 +_,12 @@
 			{
 				this.drawWaters(false, biome.WaterStyle, false);
 			}
+
 			if (captureMech)
 			{
 				this.DrawWires();
 			}
+
 			Main.tileBatch.End();
 			Main.spriteBatch.End();
 			this.DrawCachedProjs(this.DrawCacheProjsOverWiresUI, true);
@@ -50271,8 +_,10 @@
 						}
 					}
 				}
+
 				Main.spriteBatch.End();
 			}
+
 			Main.renderCount = 99;
 			Main.screenWidth = num3;
 			Main.screenHeight = num4;
@@ -50303,6 +_,7 @@
 			{
 				return;
 			}
+
 			this.RenderBlack();
 			base.GraphicsDevice.SetRenderTarget(this.tileTarget);
 			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
@@ -50320,6 +_,7 @@
 					goto IL_5B;
 				}
 			}
+
 			this.DrawTiles(true, -1);
 			IL_5B:
 			TimeLogger.DetailedDrawReset();
@@ -50334,6 +_,7 @@
 			{
 				return;
 			}
+
 			base.GraphicsDevice.SetRenderTarget(this.tile2Target);
 			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
 			Main.spriteBatch.Begin();
@@ -50350,6 +_,7 @@
 					goto IL_55;
 				}
 			}
+
 			this.DrawTiles(false, -1);
 			IL_55:
 			TimeLogger.DetailedDrawReset();
@@ -50364,6 +_,7 @@
 			{
 				return;
 			}
+
 			base.GraphicsDevice.SetRenderTarget(Main.waterTarget);
 			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
 			Main.spriteBatch.Begin();
@@ -50374,6 +_,7 @@
 			catch
 			{
 			}
+
 			TimeLogger.DetailedDrawReset();
 			Main.spriteBatch.End();
 			TimeLogger.DetailedDrawTime(31);
@@ -50453,14 +_,18 @@
 				{
 					Main.waterStyle = 0;
 				}
+
+				WaterStyleLoader.ChooseWaterStyle(ref Main.waterStyle);
 				if (Main.bgStyle != 4 && Main.bloodMoon && !Main.dayTime)
 				{
 					Main.waterStyle = 9;
 				}
+
 				if (Main.fountainColor >= 0)
 				{
 					Main.waterStyle = Main.fountainColor;
 				}
+
 				if (Main.waterStyle == 0)
 				{
 					Main.liquidAlpha[2] -= 0.2f;
@@ -50468,52 +_,62 @@
 					{
 						Main.liquidAlpha[2] = 0f;
 					}
+
 					Main.liquidAlpha[3] -= 0.2f;
 					if (Main.liquidAlpha[3] < 0f)
 					{
 						Main.liquidAlpha[3] = 0f;
 					}
+
 					Main.liquidAlpha[4] -= 0.2f;
 					if (Main.liquidAlpha[4] < 0f)
 					{
 						Main.liquidAlpha[4] = 0f;
 					}
+
 					Main.liquidAlpha[5] -= 0.2f;
 					if (Main.liquidAlpha[5] < 0f)
 					{
 						Main.liquidAlpha[5] = 0f;
 					}
+
 					Main.liquidAlpha[6] -= 0.2f;
 					if (Main.liquidAlpha[6] < 0f)
 					{
 						Main.liquidAlpha[6] = 0f;
 					}
+
 					Main.liquidAlpha[7] -= 0.2f;
 					if (Main.liquidAlpha[7] < 0f)
 					{
 						Main.liquidAlpha[7] = 0f;
 					}
+
 					Main.liquidAlpha[8] -= 0.2f;
 					if (Main.liquidAlpha[8] < 0f)
 					{
 						Main.liquidAlpha[8] = 0f;
 					}
+
 					Main.liquidAlpha[9] -= 0.2f;
 					if (Main.liquidAlpha[9] < 0f)
 					{
 						Main.liquidAlpha[9] = 0f;
 					}
+
 					Main.liquidAlpha[10] -= 0.2f;
 					if (Main.liquidAlpha[10] < 0f)
 					{
 						Main.liquidAlpha[10] = 0f;
 					}
+
 					Main.liquidAlpha[0] += 0.2f;
 					if (Main.liquidAlpha[0] > 1f)
 					{
 						Main.liquidAlpha[0] = 1f;
 					}
 				}
+
 				if (Main.waterStyle == 2)
 				{
 					Main.liquidAlpha[0] -= 0.2f;
@@ -50521,52 +_,62 @@
 					{
 						Main.liquidAlpha[0] = 0f;
 					}
+
 					Main.liquidAlpha[3] -= 0.2f;
 					if (Main.liquidAlpha[3] < 0f)
 					{
 						Main.liquidAlpha[3] = 0f;
 					}
+
 					Main.liquidAlpha[4] -= 0.2f;
 					if (Main.liquidAlpha[4] < 0f)
 					{
 						Main.liquidAlpha[4] = 0f;
 					}
+
 					Main.liquidAlpha[5] -= 0.2f;
 					if (Main.liquidAlpha[5] < 0f)
 					{
 						Main.liquidAlpha[5] = 0f;
 					}
+
 					Main.liquidAlpha[6] -= 0.2f;
 					if (Main.liquidAlpha[6] < 0f)
 					{
 						Main.liquidAlpha[6] = 0f;
 					}
+
 					Main.liquidAlpha[7] -= 0.2f;
 					if (Main.liquidAlpha[7] < 0f)
 					{
 						Main.liquidAlpha[7] = 0f;
 					}
+
 					Main.liquidAlpha[8] -= 0.2f;
 					if (Main.liquidAlpha[8] < 0f)
 					{
 						Main.liquidAlpha[8] = 0f;
 					}
+
 					Main.liquidAlpha[9] -= 0.2f;
 					if (Main.liquidAlpha[9] < 0f)
 					{
 						Main.liquidAlpha[9] = 0f;
 					}
+
 					Main.liquidAlpha[10] -= 0.2f;
 					if (Main.liquidAlpha[10] < 0f)
 					{
 						Main.liquidAlpha[10] = 0f;
 					}
+
 					Main.liquidAlpha[2] += 0.2f;
 					if (Main.liquidAlpha[2] > 1f)
 					{
 						Main.liquidAlpha[2] = 1f;
 					}
 				}
+
 				if (Main.waterStyle == 3)
 				{
 					Main.liquidAlpha[0] -= 0.2f;
@@ -50574,52 +_,62 @@
 					{
 						Main.liquidAlpha[0] = 0f;
 					}
+
 					Main.liquidAlpha[2] -= 0.2f;
 					if (Main.liquidAlpha[2] < 0f)
 					{
 						Main.liquidAlpha[2] = 0f;
 					}
+
 					Main.liquidAlpha[4] -= 0.2f;
 					if (Main.liquidAlpha[4] < 0f)
 					{
 						Main.liquidAlpha[4] = 0f;
 					}
+
 					Main.liquidAlpha[5] -= 0.2f;
 					if (Main.liquidAlpha[5] < 0f)
 					{
 						Main.liquidAlpha[5] = 0f;
 					}
+
 					Main.liquidAlpha[6] -= 0.2f;
 					if (Main.liquidAlpha[6] < 0f)
 					{
 						Main.liquidAlpha[6] = 0f;
 					}
+
 					Main.liquidAlpha[7] -= 0.2f;
 					if (Main.liquidAlpha[7] < 0f)
 					{
 						Main.liquidAlpha[7] = 0f;
 					}
+
 					Main.liquidAlpha[8] -= 0.2f;
 					if (Main.liquidAlpha[8] < 0f)
 					{
 						Main.liquidAlpha[8] = 0f;
 					}
+
 					Main.liquidAlpha[9] -= 0.2f;
 					if (Main.liquidAlpha[9] < 0f)
 					{
 						Main.liquidAlpha[9] = 0f;
 					}
+
 					Main.liquidAlpha[10] -= 0.2f;
 					if (Main.liquidAlpha[10] < 0f)
 					{
 						Main.liquidAlpha[10] = 0f;
 					}
+
 					Main.liquidAlpha[3] += 0.2f;
 					if (Main.liquidAlpha[3] > 1f)
 					{
 						Main.liquidAlpha[3] = 1f;
 					}
 				}
+
 				if (Main.waterStyle == 4)
 				{
 					Main.liquidAlpha[0] -= 0.2f;
@@ -50627,52 +_,62 @@
 					{
 						Main.liquidAlpha[0] = 0f;
 					}
+
 					Main.liquidAlpha[2] -= 0.2f;
 					if (Main.liquidAlpha[2] < 0f)
 					{
 						Main.liquidAlpha[2] = 0f;
 					}
+
 					Main.liquidAlpha[3] -= 0.2f;
 					if (Main.liquidAlpha[3] < 0f)
 					{
 						Main.liquidAlpha[3] = 0f;
 					}
+
 					Main.liquidAlpha[5] -= 0.2f;
 					if (Main.liquidAlpha[5] < 0f)
 					{
 						Main.liquidAlpha[5] = 0f;
 					}
+
 					Main.liquidAlpha[6] -= 0.2f;
 					if (Main.liquidAlpha[6] < 0f)
 					{
 						Main.liquidAlpha[6] = 0f;
 					}
+
 					Main.liquidAlpha[7] -= 0.2f;
 					if (Main.liquidAlpha[7] < 0f)
 					{
 						Main.liquidAlpha[7] = 0f;
 					}
+
 					Main.liquidAlpha[8] -= 0.2f;
 					if (Main.liquidAlpha[8] < 0f)
 					{
 						Main.liquidAlpha[8] = 0f;
 					}
+
 					Main.liquidAlpha[9] -= 0.2f;
 					if (Main.liquidAlpha[9] < 0f)
 					{
 						Main.liquidAlpha[9] = 0f;
 					}
+
 					Main.liquidAlpha[10] -= 0.2f;
 					if (Main.liquidAlpha[10] < 0f)
 					{
 						Main.liquidAlpha[10] = 0f;
 					}
+
 					Main.liquidAlpha[4] += 0.2f;
 					if (Main.liquidAlpha[4] > 1f)
 					{
 						Main.liquidAlpha[4] = 1f;
 					}
 				}
+
 				if (Main.waterStyle == 5)
 				{
 					Main.liquidAlpha[0] -= 0.2f;
@@ -50680,52 +_,62 @@
 					{
 						Main.liquidAlpha[0] = 0f;
 					}
+
 					Main.liquidAlpha[2] -= 0.2f;
 					if (Main.liquidAlpha[2] < 0f)
 					{
 						Main.liquidAlpha[2] = 0f;
 					}
+
 					Main.liquidAlpha[3] -= 0.2f;
 					if (Main.liquidAlpha[3] < 0f)
 					{
 						Main.liquidAlpha[3] = 0f;
 					}
+
 					Main.liquidAlpha[4] -= 0.2f;
 					if (Main.liquidAlpha[4] < 0f)
 					{
 						Main.liquidAlpha[4] = 0f;
 					}
+
 					Main.liquidAlpha[6] -= 0.2f;
 					if (Main.liquidAlpha[6] < 0f)
 					{
 						Main.liquidAlpha[6] = 0f;
 					}
+
 					Main.liquidAlpha[7] -= 0.2f;
 					if (Main.liquidAlpha[7] < 0f)
 					{
 						Main.liquidAlpha[7] = 0f;
 					}
+
 					Main.liquidAlpha[8] -= 0.2f;
 					if (Main.liquidAlpha[8] < 0f)
 					{
 						Main.liquidAlpha[8] = 0f;
 					}
+
 					Main.liquidAlpha[9] -= 0.2f;
 					if (Main.liquidAlpha[9] < 0f)
 					{
 						Main.liquidAlpha[9] = 0f;
 					}
+
 					Main.liquidAlpha[10] -= 0.2f;
 					if (Main.liquidAlpha[10] < 0f)
 					{
 						Main.liquidAlpha[10] = 0f;
 					}
+
 					Main.liquidAlpha[5] += 0.2f;
 					if (Main.liquidAlpha[5] > 1f)
 					{
 						Main.liquidAlpha[5] = 1f;
 					}
 				}
+
 				if (Main.waterStyle == 6)
 				{
 					Main.liquidAlpha[0] -= 0.2f;
@@ -50733,52 +_,62 @@
 					{
 						Main.liquidAlpha[0] = 0f;
 					}
+
 					Main.liquidAlpha[2] -= 0.2f;
 					if (Main.liquidAlpha[2] < 0f)
 					{
 						Main.liquidAlpha[2] = 0f;
 					}
+
 					Main.liquidAlpha[3] -= 0.2f;
 					if (Main.liquidAlpha[3] < 0f)
 					{
 						Main.liquidAlpha[3] = 0f;
 					}
+
 					Main.liquidAlpha[4] -= 0.2f;
 					if (Main.liquidAlpha[4] < 0f)
 					{
 						Main.liquidAlpha[4] = 0f;
 					}
+
 					Main.liquidAlpha[5] -= 0.2f;
 					if (Main.liquidAlpha[5] < 0f)
 					{
 						Main.liquidAlpha[5] = 0f;
 					}
+
 					Main.liquidAlpha[7] -= 0.2f;
 					if (Main.liquidAlpha[7] < 0f)
 					{
 						Main.liquidAlpha[7] = 0f;
 					}
+
 					Main.liquidAlpha[8] -= 0.2f;
 					if (Main.liquidAlpha[8] < 0f)
 					{
 						Main.liquidAlpha[8] = 0f;
 					}
+
 					Main.liquidAlpha[9] -= 0.2f;
 					if (Main.liquidAlpha[9] < 0f)
 					{
 						Main.liquidAlpha[9] = 0f;
 					}
+
 					Main.liquidAlpha[10] -= 0.2f;
 					if (Main.liquidAlpha[10] < 0f)
 					{
 						Main.liquidAlpha[10] = 0f;
 					}
+
 					Main.liquidAlpha[6] += 0.2f;
 					if (Main.liquidAlpha[6] > 1f)
 					{
 						Main.liquidAlpha[6] = 1f;
 					}
 				}
+
 				if (Main.waterStyle == 7)
 				{
 					Main.liquidAlpha[0] -= 0.2f;
@@ -50786,52 +_,62 @@
 					{
 						Main.liquidAlpha[0] = 0f;
 					}
+
 					Main.liquidAlpha[2] -= 0.2f;
 					if (Main.liquidAlpha[2] < 0f)
 					{
 						Main.liquidAlpha[2] = 0f;
 					}
+
 					Main.liquidAlpha[3] -= 0.2f;
 					if (Main.liquidAlpha[3] < 0f)
 					{
 						Main.liquidAlpha[3] = 0f;
 					}
+
 					Main.liquidAlpha[4] -= 0.2f;
 					if (Main.liquidAlpha[4] < 0f)
 					{
 						Main.liquidAlpha[4] = 0f;
 					}
+
 					Main.liquidAlpha[5] -= 0.2f;
 					if (Main.liquidAlpha[5] < 0f)
 					{
 						Main.liquidAlpha[5] = 0f;
 					}
+
 					Main.liquidAlpha[6] -= 0.2f;
 					if (Main.liquidAlpha[6] < 0f)
 					{
 						Main.liquidAlpha[6] = 0f;
 					}
+
 					Main.liquidAlpha[8] -= 0.2f;
 					if (Main.liquidAlpha[8] < 0f)
 					{
 						Main.liquidAlpha[8] = 0f;
 					}
+
 					Main.liquidAlpha[9] -= 0.2f;
 					if (Main.liquidAlpha[9] < 0f)
 					{
 						Main.liquidAlpha[9] = 0f;
 					}
+
 					Main.liquidAlpha[10] -= 0.2f;
 					if (Main.liquidAlpha[10] < 0f)
 					{
 						Main.liquidAlpha[10] = 0f;
 					}
+
 					Main.liquidAlpha[7] += 0.2f;
 					if (Main.liquidAlpha[7] > 1f)
 					{
 						Main.liquidAlpha[7] = 1f;
 					}
 				}
+
 				if (Main.waterStyle == 8)
 				{
 					Main.liquidAlpha[0] -= 0.2f;
@@ -50839,52 +_,62 @@
 					{
 						Main.liquidAlpha[0] = 0f;
 					}
+
 					Main.liquidAlpha[2] -= 0.2f;
 					if (Main.liquidAlpha[2] < 0f)
 					{
 						Main.liquidAlpha[2] = 0f;
 					}
+
 					Main.liquidAlpha[3] -= 0.2f;
 					if (Main.liquidAlpha[3] < 0f)
 					{
 						Main.liquidAlpha[3] = 0f;
 					}
+
 					Main.liquidAlpha[4] -= 0.2f;
 					if (Main.liquidAlpha[4] < 0f)
 					{
 						Main.liquidAlpha[4] = 0f;
 					}
+
 					Main.liquidAlpha[5] -= 0.2f;
 					if (Main.liquidAlpha[5] < 0f)
 					{
 						Main.liquidAlpha[5] = 0f;
 					}
+
 					Main.liquidAlpha[6] -= 0.2f;
 					if (Main.liquidAlpha[6] < 0f)
 					{
 						Main.liquidAlpha[6] = 0f;
 					}
+
 					Main.liquidAlpha[7] -= 0.2f;
 					if (Main.liquidAlpha[7] < 0f)
 					{
 						Main.liquidAlpha[7] = 0f;
 					}
+
 					Main.liquidAlpha[9] -= 0.2f;
 					if (Main.liquidAlpha[9] < 0f)
 					{
 						Main.liquidAlpha[9] = 0f;
 					}
+
 					Main.liquidAlpha[10] -= 0.2f;
 					if (Main.liquidAlpha[10] < 0f)
 					{
 						Main.liquidAlpha[10] = 0f;
 					}
+
 					Main.liquidAlpha[8] += 0.2f;
 					if (Main.liquidAlpha[8] > 1f)
 					{
 						Main.liquidAlpha[8] = 1f;
 					}
 				}
+
 				if (Main.waterStyle == 9)
 				{
 					Main.liquidAlpha[0] -= 0.2f;
@@ -50892,52 +_,62 @@
 					{
 						Main.liquidAlpha[0] = 0f;
 					}
+
 					Main.liquidAlpha[2] -= 0.2f;
 					if (Main.liquidAlpha[2] < 0f)
 					{
 						Main.liquidAlpha[2] = 0f;
 					}
+
 					Main.liquidAlpha[3] -= 0.2f;
 					if (Main.liquidAlpha[3] < 0f)
 					{
 						Main.liquidAlpha[3] = 0f;
 					}
+
 					Main.liquidAlpha[4] -= 0.2f;
 					if (Main.liquidAlpha[4] < 0f)
 					{
 						Main.liquidAlpha[4] = 0f;
 					}
+
 					Main.liquidAlpha[5] -= 0.2f;
 					if (Main.liquidAlpha[5] < 0f)
 					{
 						Main.liquidAlpha[5] = 0f;
 					}
+
 					Main.liquidAlpha[6] -= 0.2f;
 					if (Main.liquidAlpha[6] < 0f)
 					{
 						Main.liquidAlpha[6] = 0f;
 					}
+
 					Main.liquidAlpha[7] -= 0.2f;
 					if (Main.liquidAlpha[7] < 0f)
 					{
 						Main.liquidAlpha[7] = 0f;
 					}
+
 					Main.liquidAlpha[8] -= 0.2f;
 					if (Main.liquidAlpha[8] < 0f)
 					{
 						Main.liquidAlpha[8] = 0f;
 					}
+
 					Main.liquidAlpha[10] -= 0.2f;
 					if (Main.liquidAlpha[10] < 0f)
 					{
 						Main.liquidAlpha[10] = 0f;
 					}
+
 					Main.liquidAlpha[9] += 0.2f;
 					if (Main.liquidAlpha[9] > 1f)
 					{
 						Main.liquidAlpha[9] = 1f;
 					}
 				}
+
 				if (Main.waterStyle == 10)
 				{
 					Main.liquidAlpha[0] -= 0.2f;
@@ -50945,53 +_,65 @@
 					{
 						Main.liquidAlpha[0] = 0f;
 					}
+
 					Main.liquidAlpha[2] -= 0.2f;
 					if (Main.liquidAlpha[2] < 0f)
 					{
 						Main.liquidAlpha[2] = 0f;
 					}
+
 					Main.liquidAlpha[3] -= 0.2f;
 					if (Main.liquidAlpha[3] < 0f)
 					{
 						Main.liquidAlpha[3] = 0f;
 					}
+
 					Main.liquidAlpha[4] -= 0.2f;
 					if (Main.liquidAlpha[4] < 0f)
 					{
 						Main.liquidAlpha[4] = 0f;
 					}
+
 					Main.liquidAlpha[5] -= 0.2f;
 					if (Main.liquidAlpha[5] < 0f)
 					{
 						Main.liquidAlpha[5] = 0f;
 					}
+
 					Main.liquidAlpha[6] -= 0.2f;
 					if (Main.liquidAlpha[6] < 0f)
 					{
 						Main.liquidAlpha[6] = 0f;
 					}
+
 					Main.liquidAlpha[7] -= 0.2f;
 					if (Main.liquidAlpha[7] < 0f)
 					{
 						Main.liquidAlpha[7] = 0f;
 					}
+
 					Main.liquidAlpha[8] -= 0.2f;
 					if (Main.liquidAlpha[8] < 0f)
 					{
 						Main.liquidAlpha[8] = 0f;
 					}
+
 					Main.liquidAlpha[9] -= 0.2f;
 					if (Main.liquidAlpha[9] < 0f)
 					{
 						Main.liquidAlpha[9] = 0f;
 					}
+
 					Main.liquidAlpha[10] += 0.2f;
 					if (Main.liquidAlpha[10] > 1f)
 					{
 						Main.liquidAlpha[10] = 1f;
 					}
 				}
-			}
+
+				WaterStyleLoader.UpdateLiquidAlphas();
+			}
+
 			Main.drewLava = false;
 			if (!Main.drawToScreen)
 			{
@@ -51010,18 +_,21 @@
 					Microsoft.Xna.Framework.Rectangle drawArea = new Microsoft.Xna.Framework.Rectangle(num, num3, num2 - num, num4 - num3);
 					LiquidRenderer.Instance.PrepareDraw(drawArea);
 				}
+
 				if (styleOverride != -1)
 				{
 					this.DrawWater(bg, styleOverride, 1f);
 					return;
 				}
-				for (int i = 0; i < 11; i++)
-				{
-					if (i != 1 && Main.liquidAlpha[i] > 0f)
+
+				for (int i = 0; i < WaterStyleLoader.WaterStyleCount; i++)
+				{
+					if (i != 1 && i != 11 && Main.liquidAlpha[i] > 0f)
 					{
 						this.DrawWater(bg, i, Main.liquidAlpha[i]);
 					}
 				}
+
 				return;
 			}
 			else
@@ -51031,6 +_,7 @@
 					this.DrawWater(bg, styleOverride, 1f);
 					return;
 				}
+
 				if (Main.liquidAlpha[0] > 0f)
 				{
 					if (bg)
@@ -51042,6 +_,7 @@
 						this.DrawWater(bg, 0, Main.liquidAlpha[0]);
 					}
 				}
+
 				if (Main.liquidAlpha[2] > 0f)
 				{
 					if (bg)
@@ -51060,6 +_,7 @@
 						this.DrawWater(bg, 2, Main.liquidAlpha[2]);
 					}
 				}
+
 				if (Main.liquidAlpha[3] > 0f)
 				{
 					if (bg)
@@ -51078,6 +_,7 @@
 						this.DrawWater(bg, 3, Main.liquidAlpha[3]);
 					}
 				}
+
 				if (Main.liquidAlpha[4] > 0f)
 				{
 					if (bg)
@@ -51096,6 +_,7 @@
 						this.DrawWater(bg, 4, Main.liquidAlpha[4]);
 					}
 				}
+
 				if (Main.liquidAlpha[5] > 0f)
 				{
 					if (bg)
@@ -51114,6 +_,7 @@
 						this.DrawWater(bg, 5, Main.liquidAlpha[5]);
 					}
 				}
+
 				if (Main.liquidAlpha[6] > 0f)
 				{
 					if (bg)
@@ -51132,6 +_,7 @@
 						this.DrawWater(bg, 6, Main.liquidAlpha[6]);
 					}
 				}
+
 				if (Main.liquidAlpha[7] > 0f)
 				{
 					if (bg)
@@ -51150,6 +_,7 @@
 						this.DrawWater(bg, 7, Main.liquidAlpha[7]);
 					}
 				}
+
 				if (Main.liquidAlpha[8] > 0f)
 				{
 					if (bg)
@@ -51168,6 +_,7 @@
 						this.DrawWater(bg, 8, Main.liquidAlpha[8]);
 					}
 				}
+
 				if (Main.liquidAlpha[9] > 0f)
 				{
 					if (bg)
@@ -51186,6 +_,7 @@
 						this.DrawWater(bg, 9, Main.liquidAlpha[9]);
 					}
 				}
+
 				if (Main.liquidAlpha[10] > 0f)
 				{
 					if (bg)
@@ -51193,27 +_,31 @@
 						if (Main.waterStyle < 10)
 						{
 							this.DrawWater(bg, 10, Main.liquidAlpha[10]);
-							return;
-						}
-						this.DrawWater(bg, 10, 1f);
-						return;
+						}
+						else
+						{
+							this.DrawWater(bg, 10, 1f);
+						}
 					}
 					else
 					{
 						this.DrawWater(bg, 10, Main.liquidAlpha[10]);
 					}
 				}
+
+				WaterStyleLoader.DrawWatersToScreen(bg);
 				return;
 			}
 		}
 
-		protected void DrawWater(bool bg = false, int Style = 0, float Alpha = 1f)
+		protected internal void DrawWater(bool bg = false, int Style = 0, float Alpha = 1f)
 		{
 			if (Main.drawToScreen)
 			{
 				this.oldDrawWater(bg, Style, Alpha);
 				return;
 			}
+
 			Stopwatch stopwatch = new Stopwatch();
 			stopwatch.Start();
 			Vector2 drawOffset = (Main.drawToScreen ? Vector2.Zero : new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange)) - Main.screenPosition;
@@ -51236,6 +_,7 @@
 			{
 				zero = Vector2.Zero;
 			}
+
 			int num6 = (int)(255f * (1f - Main.gfxQuality) + 40f * Main.gfxQuality);
 			float arg_5D_0 = Main.gfxQuality;
 			float arg_63_0 = Main.gfxQuality;
@@ -51247,18 +_,22 @@
 			{
 				num7 = 5;
 			}
+
 			if (num8 > Main.maxTilesX - 5)
 			{
 				num8 = Main.maxTilesX - 5;
 			}
+
 			if (num9 < 5)
 			{
 				num9 = 5;
 			}
+
 			if (num10 > Main.maxTilesY - 5)
 			{
 				num10 = Main.maxTilesY - 5;
 			}
+
 			for (int i = num9; i < num10 + 4; i++)
 			{
 				for (int j = num7 - 2; j < num8 + 2; j++)
@@ -51267,6 +_,7 @@
 					{
 						Main.tile[j, i] = new Tile();
 					}
+
 					if (Main.tile[j, i].liquid > 0 && (!Main.tile[j, i].nactive() || !Main.tileSolid[(int)Main.tile[j, i].type] || Main.tileSolidTop[(int)Main.tile[j, i].type]) && (Lighting.Brightness(j, i) > 0f || bg))
 					{
 						Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
@@ -51279,6 +_,7 @@
 							{
 								goto IL_E80;
 							}
+
 							float num13 = Math.Abs((float)(j * 16 + 8) - (Main.screenPosition.X + (float)(Main.screenWidth / 2)));
 							float num14 = Math.Abs((float)(i * 16 + 8) - (Main.screenPosition.Y + (float)(Main.screenHeight / 2)));
 							if (num13 < (float)(Main.screenWidth * 2) && num14 < (float)(Main.screenHeight * 2))
@@ -51290,26 +_,31 @@
 									num += num16;
 								}
 							}
+
 							if (num13 < num2)
 							{
 								num2 = num13;
 								num4 = j * 16 + 8;
 							}
+
 							if (num14 < num3)
 							{
 								num3 = num13;
 								num5 = i * 16 + 8;
 							}
+
 							num12 = 1;
 						}
 						else if (Main.tile[j, i].honey())
 						{
 							num12 = 11;
 						}
+
 						if (num12 == 0)
 						{
 							num12 = Style;
 						}
+
 						if ((num12 != 1 && num12 != 11) || !Main.drewLava)
 						{
 							float num17 = 0.5f;
@@ -51317,10 +_,12 @@
 							{
 								num17 = 1f;
 							}
+
 							if (num12 != 1 && num12 != 11)
 							{
 								num17 *= Alpha;
 							}
+
 							Vector2 value = new Vector2((float)(j * 16), (float)(i * 16 + (int)num11 * 2));
 							Microsoft.Xna.Framework.Rectangle value2 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16 - (int)num11 * 2);
 							if (Main.tile[j, i + 1].liquid < 245 && (!Main.tile[j, i + 1].nactive() || !Main.tileSolid[(int)Main.tile[j, i + 1].type] || Main.tileSolidTop[(int)Main.tile[j, i + 1].type]))
@@ -51332,10 +_,12 @@
 								{
 									num17 = 0.55f;
 								}
+
 								if ((double)num17 < 0.35)
 								{
 									num17 = 0.35f;
 								}
+
 								float num19 = num11 / 2f;
 								if (Main.tile[j, i + 1].liquid < 200)
 								{
@@ -51343,6 +_,7 @@
 									{
 										goto IL_E80;
 									}
+
 									if (Main.tile[j, i - 1].liquid > 0 && Main.tile[j, i - 1].liquid > 0)
 									{
 										value2 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 16);
@@ -51391,8 +_,10 @@
 										flag = false;
 										break;
 									}
+
 									num20++;
 								}
+
 								if (!flag)
 								{
 									num17 = 0.5f;
@@ -51403,6 +_,7 @@
 									value2 = new Microsoft.Xna.Framework.Rectangle(0, 2, value2.Width, value2.Height);
 								}
 							}
+
 							if ((color.R > 20 || color.B > 20 || color.G > 20) && value2.Y < 4)
 							{
 								int num21 = (int)color.R;
@@ -51410,10 +_,12 @@
 								{
 									num21 = (int)color.G;
 								}
+
 								if ((int)color.B > num21)
 								{
 									num21 = (int)color.B;
 								}
+
 								num21 /= 30;
 								if (Main.rand.Next(20000) < num21)
 								{
@@ -51422,10 +_,12 @@
 									{
 										newColor = new Microsoft.Xna.Framework.Color(255, 255, 50);
 									}
+
 									int num22 = Dust.NewDust(new Vector2((float)(j * 16), value.Y - 2f), 16, 8, 43, 0f, 0f, 254, newColor, 0.75f);
 									Main.dust[num22].velocity *= 0f;
 								}
 							}
+
 							if (Main.tile[j, i].honey())
 							{
 								num17 *= 1.6f;
@@ -51434,6 +_,7 @@
 									num17 = 1f;
 								}
 							}
+
 							if (Main.tile[j, i].lava())
 							{
 								num17 *= 1.8f;
@@ -51441,12 +_,14 @@
 								{
 									num17 = 1f;
 								}
+
 								if (base.IsActive && !Main.gamePaused && Dust.lavaBubbles < 200)
 								{
 									if (Main.tile[j, i].liquid > 200 && Main.rand.Next(700) == 0)
 									{
 										Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 35, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
 									}
+
 									if (value2.Y == 0 && Main.rand.Next(350) == 0)
 									{
 										int num23 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16) + num11 * 2f - 8f), 16, 8, 35, 0f, 0f, 50, default(Microsoft.Xna.Framework.Color), 1.5f);
@@ -51460,10 +_,12 @@
 											Dust expr_A22_cp_0 = Main.dust[num23];
 											expr_A22_cp_0.velocity.Y = expr_A22_cp_0.velocity.Y * (float)Main.rand.Next(2, 5);
 										}
+
 										Main.dust[num23].noGravity = true;
 									}
 								}
 							}
+
 							float num24 = (float)color.R * num17;
 							float num25 = (float)color.G * num17;
 							float num26 = (float)color.B * num17;
@@ -51490,6 +_,7 @@
 												height = value2.Height;
 											}
 										}
+
 										if (k == 1)
 										{
 											color4 = Lighting.GetColor(j + 1, i - 1);
@@ -51499,12 +_,14 @@
 												height = value2.Height;
 											}
 										}
+
 										if (k == 2)
 										{
 											color4 = Lighting.GetColor(j - 1, i + 1);
 											num29 = 8;
 											height = 8 - (16 - value2.Height);
 										}
+
 										if (k == 3)
 										{
 											color4 = Lighting.GetColor(j + 1, i + 1);
@@ -51512,6 +_,7 @@
 											num29 = 8;
 											height = 8 - (16 - value2.Height);
 										}
+
 										num24 = (float)color4.R * num17;
 										num25 = (float)color4.G * num17;
 										num26 = (float)color4.B * num17;
@@ -51535,8 +_,10 @@
 								{
 									value2.X += (int)(Main.wFrame * 18f);
 								}
+
 								Main.spriteBatch.Draw(Main.liquidTexture[num12], value - Main.screenPosition + zero, new Microsoft.Xna.Framework.Rectangle?(value2), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 							}
+
 							if (Main.tile[j, i + 1].halfBrick())
 							{
 								color = Lighting.GetColor(j, i + 1);
@@ -51550,16 +_,19 @@
 							}
 						}
 					}
+
 					IL_E80:
 					;
 				}
 			}
+
 			if (!Main.drewLava)
 			{
 				Main.ambientLavaX = (float)num4;
 				Main.ambientLavaY = (float)num5;
 				Main.ambientLavaStrength = num;
 			}
+
 			Main.drewLava = true;
 		}
 
@@ -51569,17 +_,20 @@
 			{
 				return false;
 			}
+
 			Tile tile = Main.tile[x, y];
 			if (tile == null)
 			{
 				return false;
 			}
+
 			if (tile.active())
 			{
 				if ((int)tile.type < TileID.Sets.DrawsWalls.Length && TileID.Sets.DrawsWalls[(int)tile.type])
 				{
 					return false;
 				}
+
 				if (Main.tileSolid[(int)tile.type] && !Main.tileSolidTop[(int)tile.type])
 				{
 					int frameX = (int)tile.frameX;
@@ -51592,6 +_,7 @@
 							{
 								return true;
 							}
+
 							if (frameX >= 108 && frameX <= 144)
 							{
 								return true;
@@ -51604,6 +_,7 @@
 						{
 							return true;
 						}
+
 						if (frameX >= 108 && frameX <= 144)
 						{
 							return true;
@@ -51615,6 +_,7 @@
 						{
 							return true;
 						}
+
 						if (frameX >= 144 && frameX <= 232)
 						{
 							return true;
@@ -51622,6 +_,7 @@
 					}
 				}
 			}
+
 			return false;
 		}
 
@@ -51648,6 +_,7 @@
 					num2 = 0f;
 				}
 			}
+
 			int num3 = Main.offScreenRange / 16;
 			int num4 = (int)((Main.screenPosition.X - value.X) / 16f - 1f) - num3;
 			int num5 = (int)((Main.screenPosition.X + (float)Main.screenWidth + value.X) / 16f) + 2 + num3;
@@ -51657,18 +_,22 @@
 			{
 				num4 = num3;
 			}
+
 			if (num5 > Main.maxTilesX)
 			{
 				num5 = Main.maxTilesX - num3;
 			}
+
 			if (num6 < 0)
 			{
 				num6 = num3;
 			}
+
 			if (num7 > Main.maxTilesY)
 			{
 				num7 = Main.maxTilesY - num3;
 			}
+
 			if (!force)
 			{
 				if (num6 < Main.maxTilesY / 2)
@@ -51682,6 +_,7 @@
 					num6 = Math.Max(num6, Main.maxTilesY - 200);
 				}
 			}
+
 			for (int i = num6; i < num7; i++)
 			{
 				bool flag = i >= Main.maxTilesY - 200;
@@ -51689,6 +_,7 @@
 				{
 					num2 = 0.2f;
 				}
+
 				for (int j = num4; j < num5; j++)
 				{
 					int num8 = j;
@@ -51698,6 +_,7 @@
 						{
 							Main.tile[j, i] = new Tile();
 						}
+
 						Tile tile = Main.tile[j, i];
 						float num9 = Lighting.Brightness(j, i);
 						num9 = (float)Math.Floor((double)(num9 * 255f)) / 255f;
@@ -51705,6 +_,7 @@
 						if (j == 3169)
 						{
 						}
+
 						bool flag2 = num9 <= num2 && ((!flag && b < 250) || WorldGen.SolidTile(tile) || (b >= 200 && num9 == 0f));
 						flag2 = (flag2 && (!WallID.Sets.Transparent[(int)tile.wall] || (Main.tile[j, i].active() && Main.tileBlockLight[(int)tile.type])));
 						flag2 = (flag2 && (Main.drawToScreen || !LiquidRenderer.Instance.HasFullWater(j, i) || tile.wall != 0 || tile.halfBrick() || (double)i <= Main.worldSurface));
@@ -51712,14 +_,17 @@
 						{
 							break;
 						}
+
 						j++;
 					}
+
 					if (j - num8 > 0)
 					{
 						Main.spriteBatch.Draw(Main.blackTileTexture, new Vector2((float)(num8 << 4), (float)(i << 4)) - Main.screenPosition + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, j - num8 << 4, 16)), Microsoft.Xna.Framework.Color.Black);
 					}
 				}
 			}
+
 			TimeLogger.DrawTime(5, stopwatch.Elapsed.TotalMilliseconds);
 		}
 
@@ -51729,6 +_,7 @@
 			{
 				return;
 			}
+
 			base.GraphicsDevice.SetRenderTarget(this.blackTarget);
 			base.GraphicsDevice.DepthStencilState = new DepthStencilState
 			{
@@ -51753,6 +_,7 @@
 			{
 				zero = Vector2.Zero;
 			}
+
 			int num2 = (int)((Main.screenPosition.X - zero.X) / 16f - 1f);
 			int num3 = (int)((Main.screenPosition.X + (float)Main.screenWidth + zero.X) / 16f) + 2;
 			int num4 = (int)((Main.screenPosition.Y - zero.Y) / 16f - 1f);
@@ -51763,18 +_,22 @@
 			{
 				num2 = num6;
 			}
+
 			if (num3 + num6 > Main.maxTilesX)
 			{
 				num3 = Main.maxTilesX - num6;
 			}
+
 			if (num4 - num7 < 0)
 			{
 				num4 = num7;
 			}
+
 			if (num5 + num7 > Main.maxTilesY)
 			{
 				num5 = Main.maxTilesY - num7;
 			}
+
 			int num8 = Main.maxTilesY - 200;
 			for (int i = num4 - num7; i < num5 + num7; i++)
 			{
@@ -51786,7 +_,8 @@
 						tile = new Tile();
 						Main.tile[j, i] = tile;
 					}
-					byte wall = tile.wall;
+
+					ushort wall = tile.wall;
 					if (wall > 0 && !this.FullTile(j, i))
 					{
 						Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
@@ -51794,6 +_,12 @@
 						{
 							this.LoadWall((int)wall);
 							int num9 = (int)(Main.wallFrame[(int)wall] * 180);
+							if (!WallLoader.PreDraw(j, i, wall, Main.spriteBatch))
+							{
+								WallLoader.PostDraw(j, i, wall, Main.spriteBatch);
+								continue;
+							}
+
 							if (Lighting.lightMode < 2 && !Main.wallLight[(int)wall] && (tile.wall < 88 || tile.wall > 93) && !WorldGen.SolidTile(tile))
 							{
 								Texture2D texture;
@@ -51805,6 +_,7 @@
 								{
 									texture = Main.wallTexture[(int)tile.wall];
 								}
+
 								VertexColors colors;
 								if (tile.wall == 44)
 								{
@@ -51818,6 +_,7 @@
 								{
 									Lighting.GetColor4Slice_New(j, i, out colors, 1f);
 								}
+
 								Main.tileBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X - 8), (float)(i * 16 - (int)Main.screenPosition.Y - 8)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(tile.wallFrameX(), tile.wallFrameY() + num9, 32, 32)), colors, Vector2.Zero, 1f, SpriteEffects.None);
 							}
 							else if (tile.wall == 44)
@@ -51842,6 +_,7 @@
 									Main.spriteBatch.Draw(Main.wallTexture[(int)tile.wall], new Vector2((float)(j * 16 - (int)Main.screenPosition.X - 8), (float)(i * 16 - (int)Main.screenPosition.Y - 8)) + zero, new Microsoft.Xna.Framework.Rectangle?(value), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 								}
 							}
+
 							if ((double)color.R > (double)num * 0.4 || (double)color.G > (double)num * 0.35 || (double)color.B > (double)num * 0.3)
 							{
 								bool flag = Main.tile[j - 1, i].wall > 0 && Main.wallBlend[(int)Main.tile[j - 1, i].wall] != Main.wallBlend[(int)tile.wall];
@@ -51852,23 +_,29 @@
 								{
 									Main.spriteBatch.Draw(Main.wallOutlineTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 2, 16)), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 								}
+
 								if (flag2)
 								{
 									Main.spriteBatch.Draw(Main.wallOutlineTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X + 14), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(14, 0, 2, 16)), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 								}
+
 								if (flag3)
 								{
 									Main.spriteBatch.Draw(Main.wallOutlineTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 2)), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 								}
+
 								if (flag4)
 								{
 									Main.spriteBatch.Draw(Main.wallOutlineTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y + 14)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 14, 16, 2)), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 								}
 							}
-						}
-					}
-				}
-			}
+
+							WallLoader.PostDraw(j, i, wall, Main.spriteBatch);
+						}
+					}
+				}
+			}
+
 			this.DrawTileCracks(2);
 			TimeLogger.DrawTime(2, stopwatch.Elapsed.TotalMilliseconds);
 		}
@@ -51879,6 +_,7 @@
 			{
 				return;
 			}
+
 			base.GraphicsDevice.SetRenderTarget(this.wallTarget);
 			base.GraphicsDevice.DepthStencilState = new DepthStencilState
 			{
@@ -51904,6 +_,7 @@
 					goto IL_7A;
 				}
 			}
+
 			this.DrawWalls();
 			IL_7A:
 			TimeLogger.DetailedDrawReset();
@@ -51925,38 +_,47 @@
 					{
 						Main.waterTarget.Dispose();
 					}
+
 					if (this.backWaterTarget != null)
 					{
 						this.backWaterTarget.Dispose();
 					}
+
 					if (this.blackTarget != null)
 					{
 						this.blackTarget.Dispose();
 					}
+
 					if (this.tileTarget != null)
 					{
 						this.tileTarget.Dispose();
 					}
+
 					if (this.tile2Target != null)
 					{
 						this.tile2Target.Dispose();
 					}
+
 					if (this.wallTarget != null)
 					{
 						this.wallTarget.Dispose();
 					}
+
 					if (Main.screenTarget != null)
 					{
 						Main.screenTarget.Dispose();
 					}
+
 					if (Main.screenTargetSwap != null)
 					{
 						Main.screenTargetSwap.Dispose();
 					}
+
 					if (this.backgroundTarget != null)
 					{
 						this.backgroundTarget.Dispose();
 					}
+
 					if (Main.OnRenderTargetsReleased != null)
 					{
 						Main.OnRenderTargetsReleased();
@@ -51974,6 +_,7 @@
 			{
 				Main.initMap[i, j] = false;
 			}
+
 			if (!Main.initMap[i, j])
 			{
 				try
@@ -51984,10 +_,12 @@
 					{
 						width = 400;
 					}
+
 					if (j == Main.mapTargetY - 1)
 					{
 						height = 600;
 					}
+
 					this.mapTarget[i, j] = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth16, 0, RenderTargetUsage.PreserveContents);
 				}
 				catch
@@ -52007,11 +_,14 @@
 							}
 						}
 					}
+
 					return false;
 				}
+
 				Main.initMap[i, j] = true;
 				return true;
 			}
+
 			return true;
 		}
 
@@ -52030,6 +_,7 @@
 							this.mapTarget[i, j] = new RenderTarget2D(base.GraphicsDevice, Main.textureMaxWidth, Main.textureMaxHeight, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
 						}
 					}
+
 					Main.mapInit = true;
 				}
 				catch
@@ -52077,6 +_,7 @@
 			{
 				Main.offScreenRange = (Main._renderTargetMaxSize - width) / 2;
 			}
+
 			width += Main.offScreenRange * 2;
 			height += Main.offScreenRange * 2;
 			try
@@ -52125,6 +_,7 @@
 			{
 				scale = 0.5f;
 			}
+
 			int num = 1;
 			int num2 = 1;
 			int num3 = 1;
@@ -52139,6 +_,7 @@
 				num4 = builderAccStatus[7];
 				num5 = builderAccStatus[9];
 			}
+
 			float arg_91_0 = Main.gfxQuality;
 			float arg_97_0 = Main.gfxQuality;
 			Vector2 zero2 = Vector2.Zero;
@@ -52146,6 +_,7 @@
 			{
 				zero2 = Vector2.Zero;
 			}
+
 			int num6 = (int)((Main.screenPosition.X - zero2.X) / 16f - 1f);
 			int num7 = (int)((Main.screenPosition.X + (float)Main.screenWidth + zero2.X) / 16f) + 2;
 			int num8 = (int)((Main.screenPosition.Y - zero2.Y) / 16f - 1f);
@@ -52154,18 +_,22 @@
 			{
 				num6 = 0;
 			}
+
 			if (num7 > Main.maxTilesX)
 			{
 				num7 = Main.maxTilesX;
 			}
+
 			if (num8 < 0)
 			{
 				num8 = 0;
 			}
+
 			if (num9 > Main.maxTilesY)
 			{
 				num9 = Main.maxTilesY;
 			}
+
 			for (int i = num8; i < num9; i++)
 			{
 				for (int j = num6; j < num7; j++)
@@ -52187,13 +_,13 @@
 								{
 									case 0:
 										num11 += 72;
-										break;
+									break;
 									case 1:
 										num11 += 144;
-										break;
+									break;
 									case 2:
 										num11 += 216;
-										break;
+									break;
 								}
 							}
 							else if (tile.type == 445)
@@ -52201,6 +_,7 @@
 								num11 += 72;
 							}
 						}
+
 						if (tile.wire())
 						{
 							num10 += 1f;
@@ -52210,21 +_,25 @@
 								num12 += 18;
 								flag4 = true;
 							}
+
 							if (Main.tile[j + 1, i].wire())
 							{
 								num12 += 36;
 								flag3 = true;
 							}
+
 							if (Main.tile[j, i + 1].wire())
 							{
 								num12 += 72;
 								flag5 = true;
 							}
+
 							if (Main.tile[j - 1, i].wire())
 							{
 								num12 += 144;
 								flag2 = true;
 							}
+
 							value.Y = num11;
 							value.X = num12;
 							Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
@@ -52232,14 +_,15 @@
 							{
 								case 0:
 									color = Microsoft.Xna.Framework.Color.White;
-									break;
+								break;
 								case 2:
 									color *= 0.5f;
-									break;
+								break;
 								case 3:
 									color = Microsoft.Xna.Framework.Color.Transparent;
-									break;
-							}
+								break;
+							}
+
 							if (color == Microsoft.Xna.Framework.Color.Transparent)
 							{
 								num10 -= 1f;
@@ -52249,6 +_,7 @@
 								Main.spriteBatch.Draw(Main.wireTextureNew, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Microsoft.Xna.Framework.Rectangle?(value), color, 0f, zero, 1f, SpriteEffects.None, 0f);
 							}
 						}
+
 						if (tile.wire2())
 						{
 							bool flag10;
@@ -52267,6 +_,7 @@
 									flag10 = true;
 								}
 							}
+
 							if (Main.tile[j + 1, i].wire2())
 							{
 								num13 += 36;
@@ -52276,6 +_,7 @@
 									flag10 = true;
 								}
 							}
+
 							if (Main.tile[j, i + 1].wire2())
 							{
 								num13 += 72;
@@ -52285,6 +_,7 @@
 									flag10 = true;
 								}
 							}
+
 							if (Main.tile[j - 1, i].wire2())
 							{
 								num13 += 144;
@@ -52294,10 +_,12 @@
 									flag10 = true;
 								}
 							}
+
 							if (num10 > 1f)
 							{
 								flag10 = true;
 							}
+
 							value.Y = num11 + 18;
 							value.X = num13;
 							Microsoft.Xna.Framework.Color color2 = Lighting.GetColor(j, i);
@@ -52305,14 +_,15 @@
 							{
 								case 0:
 									color2 = Microsoft.Xna.Framework.Color.White;
-									break;
+								break;
 								case 2:
 									color2 *= 0.5f;
-									break;
+								break;
 								case 3:
 									color2 = Microsoft.Xna.Framework.Color.Transparent;
-									break;
-							}
+								break;
+							}
+
 							if (color2 == Microsoft.Xna.Framework.Color.Transparent)
 							{
 								num10 -= 1f;
@@ -52326,34 +_,42 @@
 									{
 										Main.spriteBatch.Draw(Main.wireTextureNew, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(18, value.Y, 16, 6)), color2, 0f, zero, 1f, SpriteEffects.None, 0f);
 									}
+
 									flag4 = true;
 								}
+
 								if (flag9)
 								{
 									if (flag10 && !flag5)
 									{
 										Main.spriteBatch.Draw(Main.wireTextureNew, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2 + new Vector2(0f, 10f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(72, value.Y + 10, 16, 6)), color2, 0f, zero, 1f, SpriteEffects.None, 0f);
 									}
+
 									flag5 = true;
 								}
+
 								if (flag6)
 								{
 									if (flag10 && !flag3)
 									{
 										Main.spriteBatch.Draw(Main.wireTextureNew, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2 + new Vector2(10f, 0f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(46, value.Y, 6, 16)), color2, 0f, zero, 1f, SpriteEffects.None, 0f);
 									}
+
 									flag3 = true;
 								}
+
 								if (flag7)
 								{
 									if (flag10 && !flag2)
 									{
 										Main.spriteBatch.Draw(Main.wireTextureNew, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(144, value.Y, 6, 16)), color2, 0f, zero, 1f, SpriteEffects.None, 0f);
 									}
+
 									flag2 = true;
 								}
 							}
 						}
+
 						if (tile.wire3())
 						{
 							bool flag10;
@@ -52372,6 +_,7 @@
 									flag10 = true;
 								}
 							}
+
 							if (Main.tile[j + 1, i].wire3())
 							{
 								num14 += 36;
@@ -52381,6 +_,7 @@
 									flag10 = true;
 								}
 							}
+
 							if (Main.tile[j, i + 1].wire3())
 							{
 								num14 += 72;
@@ -52390,6 +_,7 @@
 									flag10 = true;
 								}
 							}
+
 							if (Main.tile[j - 1, i].wire3())
 							{
 								num14 += 144;
@@ -52399,10 +_,12 @@
 									flag10 = true;
 								}
 							}
+
 							if (num10 > 1f)
 							{
 								flag10 = true;
 							}
+
 							value.Y = num11 + 36;
 							value.X = num14;
 							Microsoft.Xna.Framework.Color color3 = Lighting.GetColor(j, i);
@@ -52410,14 +_,15 @@
 							{
 								case 0:
 									color3 = Microsoft.Xna.Framework.Color.White;
-									break;
+								break;
 								case 2:
 									color3 *= 0.5f;
-									break;
+								break;
 								case 3:
 									color3 = Microsoft.Xna.Framework.Color.Transparent;
-									break;
-							}
+								break;
+							}
+
 							if (color3 == Microsoft.Xna.Framework.Color.Transparent)
 							{
 								num10 -= 1f;
@@ -52431,34 +_,42 @@
 									{
 										Main.spriteBatch.Draw(Main.wireTextureNew, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(18, value.Y, 16, 6)), color3, 0f, zero, 1f, SpriteEffects.None, 0f);
 									}
+
 									flag4 = true;
 								}
+
 								if (flag9)
 								{
 									if (flag10 && !flag5)
 									{
 										Main.spriteBatch.Draw(Main.wireTextureNew, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2 + new Vector2(0f, 10f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(72, value.Y + 10, 16, 6)), color3, 0f, zero, 1f, SpriteEffects.None, 0f);
 									}
+
 									flag5 = true;
 								}
+
 								if (flag6)
 								{
 									if (flag10 && !flag3)
 									{
 										Main.spriteBatch.Draw(Main.wireTextureNew, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2 + new Vector2(10f, 0f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(46, value.Y, 6, 16)), color3, 0f, zero, 1f, SpriteEffects.None, 0f);
 									}
+
 									flag3 = true;
 								}
+
 								if (flag7)
 								{
 									if (flag10 && !flag2)
 									{
 										Main.spriteBatch.Draw(Main.wireTextureNew, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(144, value.Y, 6, 16)), color3, 0f, zero, 1f, SpriteEffects.None, 0f);
 									}
+
 									flag2 = true;
 								}
 							}
 						}
+
 						if (tile.wire4())
 						{
 							bool flag10;
@@ -52477,6 +_,7 @@
 									flag10 = true;
 								}
 							}
+
 							if (Main.tile[j + 1, i].wire4())
 							{
 								num15 += 36;
@@ -52486,6 +_,7 @@
 									flag10 = true;
 								}
 							}
+
 							if (Main.tile[j, i + 1].wire4())
 							{
 								num15 += 72;
@@ -52495,6 +_,7 @@
 									flag10 = true;
 								}
 							}
+
 							if (Main.tile[j - 1, i].wire4())
 							{
 								num15 += 144;
@@ -52504,10 +_,12 @@
 									flag10 = true;
 								}
 							}
+
 							if (num10 > 1f)
 							{
 								flag10 = true;
 							}
+
 							value.Y = num11 + 54;
 							value.X = num15;
 							Microsoft.Xna.Framework.Color color4 = Lighting.GetColor(j, i);
@@ -52515,14 +_,15 @@
 							{
 								case 0:
 									color4 = Microsoft.Xna.Framework.Color.White;
-									break;
+								break;
 								case 2:
 									color4 *= 0.5f;
-									break;
+								break;
 								case 3:
 									color4 = Microsoft.Xna.Framework.Color.Transparent;
-									break;
-							}
+								break;
+							}
+
 							if (color4 == Microsoft.Xna.Framework.Color.Transparent)
 							{
 								num10 -= 1f;
@@ -52537,6 +_,7 @@
 										Main.spriteBatch.Draw(Main.wireTextureNew, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(18, value.Y, 16, 6)), color4, 0f, zero, 1f, SpriteEffects.None, 0f);
 									}
 								}
+
 								if (flag9)
 								{
 									if (flag10 && !flag5)
@@ -52544,6 +_,7 @@
 										Main.spriteBatch.Draw(Main.wireTextureNew, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2 + new Vector2(0f, 10f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(72, value.Y + 10, 16, 6)), color4, 0f, zero, 1f, SpriteEffects.None, 0f);
 									}
 								}
+
 								if (flag6)
 								{
 									if (flag10 && !flag3)
@@ -52551,6 +_,7 @@
 										Main.spriteBatch.Draw(Main.wireTextureNew, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2 + new Vector2(10f, 0f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(46, value.Y, 6, 16)), color4, 0f, zero, 1f, SpriteEffects.None, 0f);
 									}
 								}
+
 								if (flag7)
 								{
 									if (flag10 && !flag2)
@@ -52561,6 +_,7 @@
 							}
 						}
 					}
+
 					if (Main.tile[j, i].actuator() && (Lighting.Brightness(j, i) > 0f || num5 == 0))
 					{
 						Microsoft.Xna.Framework.Color value2 = Lighting.GetColor(j, i);
@@ -52568,16 +_,18 @@
 						{
 							case 0:
 								value2 = Microsoft.Xna.Framework.Color.White;
-								break;
+							break;
 							case 2:
 								value2 *= 0.5f;
-								break;
+							break;
 							case 3:
 								value2 = Microsoft.Xna.Framework.Color.Transparent;
-								break;
-						}
+							break;
+						}
+
 						Main.spriteBatch.Draw(Main.actuatorTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.actuatorTexture.Width, Main.actuatorTexture.Height)), value2 * scale, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 					}
+
 					if (tile.active())
 					{
 						ushort type = tile.type;
@@ -52588,6 +_,7 @@
 					}
 				}
 			}
+
 			for (int k = 0; k < this.DrawWiresSpecialTiles.Count; k++)
 			{
 				Tuple<int, int, ushort> tuple = this.DrawWiresSpecialTiles[k];
@@ -52599,6 +_,7 @@
 					Utils.DrawRectangle(Main.spriteBatch, start, end, Microsoft.Xna.Framework.Color.LightSeaGreen, Microsoft.Xna.Framework.Color.LightSeaGreen, 2f);
 				}
 			}
+
 			TimeLogger.DetailedDrawTime(34);
 		}
 
@@ -52611,6 +_,7 @@
 			{
 				zero = Vector2.Zero;
 			}
+
 			int num = (int)((Main.screenPosition.X - zero.X) / 16f - 1f);
 			int num2 = (int)((Main.screenPosition.X + (float)Main.screenWidth + zero.X) / 16f) + 2;
 			int num3 = (int)((Main.screenPosition.Y - zero.Y) / 16f - 1f);
@@ -52619,18 +_,22 @@
 			{
 				num = 0;
 			}
+
 			if (num2 > Main.maxTilesX)
 			{
 				num2 = Main.maxTilesX;
 			}
+
 			if (num3 < 0)
 			{
 				num3 = 0;
 			}
+
 			if (num4 > Main.maxTilesY)
 			{
 				num4 = Main.maxTilesY;
 			}
+
 			for (int i = num3; i < num4; i++)
 			{
 				for (int j = num; j < num2; j++)
@@ -52727,9 +_,11 @@
 						{
 							value = new Microsoft.Xna.Framework.Rectangle(0, 54, 16, 16);
 						}
+
 						Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
 						Main.spriteBatch.Draw(Main.wireTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(value), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 					}
+
 					if (Main.tile[j, i].wire2() && Lighting.Brightness(j, i) > 0f)
 					{
 						Microsoft.Xna.Framework.Rectangle value2 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
@@ -52822,12 +_,14 @@
 						{
 							value2 = new Microsoft.Xna.Framework.Rectangle(0, 54, 16, 16);
 						}
+
 						Microsoft.Xna.Framework.Color color2 = Lighting.GetColor(j, i);
 						int num5 = 1;
 						if (Main.tile[j, i].wire())
 						{
 							num5++;
 						}
+
 						float num6 = 1f / (float)num5;
 						byte r = (byte)((float)color2.R * num6);
 						byte g = (byte)((float)color2.G * num6);
@@ -52836,6 +_,7 @@
 						color2 = new Microsoft.Xna.Framework.Color((int)r, (int)g, (int)b, (int)a);
 						Main.spriteBatch.Draw(Main.wire2Texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(value2), color2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 					}
+
 					if (Main.tile[j, i].wire3() && Lighting.Brightness(j, i) > 0f)
 					{
 						Microsoft.Xna.Framework.Rectangle value3 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
@@ -52928,16 +_,19 @@
 						{
 							value3 = new Microsoft.Xna.Framework.Rectangle(0, 54, 16, 16);
 						}
+
 						Microsoft.Xna.Framework.Color color3 = Lighting.GetColor(j, i);
 						int num7 = 1;
 						if (Main.tile[j, i].wire())
 						{
 							num7++;
 						}
+
 						if (Main.tile[j, i].wire2())
 						{
 							num7++;
 						}
+
 						float num8 = 1f / (float)num7;
 						byte r2 = (byte)((float)color3.R * num8);
 						byte g2 = (byte)((float)color3.G * num8);
@@ -52946,6 +_,7 @@
 						color3 = new Microsoft.Xna.Framework.Color((int)r2, (int)g2, (int)b2, (int)a2);
 						Main.spriteBatch.Draw(Main.wire3Texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(value3), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 					}
+
 					if (Main.tile[j, i].wire4() && Lighting.Brightness(j, i) > 0f)
 					{
 						Microsoft.Xna.Framework.Rectangle value4 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
@@ -53038,20 +_,24 @@
 						{
 							value4 = new Microsoft.Xna.Framework.Rectangle(0, 54, 16, 16);
 						}
+
 						Microsoft.Xna.Framework.Color color4 = Lighting.GetColor(j, i);
 						int num9 = 1;
 						if (Main.tile[j, i].wire())
 						{
 							num9++;
 						}
+
 						if (Main.tile[j, i].wire2())
 						{
 							num9++;
 						}
+
 						if (Main.tile[j, i].wire3())
 						{
 							num9++;
 						}
+
 						float num10 = 1f / (float)num9;
 						byte r3 = (byte)((float)color4.R * num10);
 						byte g3 = (byte)((float)color4.G * num10);
@@ -53060,6 +_,7 @@
 						color4 = new Microsoft.Xna.Framework.Color((int)r3, (int)g3, (int)b3, (int)a3);
 						Main.spriteBatch.Draw(Main.wire4Texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(value4), color4, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 					}
+
 					if (Main.tile[j, i].actuator() && Lighting.Brightness(j, i) > 0f)
 					{
 						Microsoft.Xna.Framework.Color color5 = Lighting.GetColor(j, i);
@@ -53067,6 +_,7 @@
 					}
 				}
 			}
+
 			TimeLogger.DetailedDrawTime(34);
 		}
 
@@ -53089,14 +_,17 @@
 			{
 				num = Main.treeStyle[3];
 			}
+
 			if (num == 0)
 			{
 				return 0;
 			}
+
 			if (num == 5)
 			{
 				return 10;
 			}
+
 			return 5 + num;
 		}
 
@@ -53110,18 +_,22 @@
 			{
 				num = 1;
 			}
+
 			if (num2 > Main.maxTilesX - 2)
 			{
 				num2 = Main.maxTilesX - 2;
 			}
+
 			if (num3 < 1)
 			{
 				num3 = 1;
 			}
+
 			if (num4 > Main.maxTilesY - 2)
 			{
 				num4 = Main.maxTilesY - 2;
 			}
+
 			for (int i = num; i < num2; i++)
 			{
 				if (i > 0)
@@ -53135,10 +_,12 @@
 							{
 								this.woodColorCheck(treeVariant, (int)Main.tile[i, j].color());
 							}
+
 							if (Main.tile[i, j].active() && Main.tile[i, j].color() > 0)
 							{
 								this.tileColorCheck((int)Main.tile[i, j].type, (int)Main.tile[i, j].color());
 							}
+
 							if (Main.tile[i, j].wall > 0 && Main.tile[i, j].wallColor() > 0)
 							{
 								this.wallColorCheck((int)Main.tile[i, j].wall, (int)Main.tile[i, j].wallColor());
@@ -53147,6 +_,7 @@
 					}
 				}
 			}
+
 			for (int k = 0; k < Main.numTreeStyles; k++)
 			{
 				for (int l = 0; l < Main.numTileColors; l++)
@@ -53166,6 +_,7 @@
 			{
 				return -1;
 			}
+
 			int type = (int)Main.tile[x, y].type;
 			int num = type;
 			if (num <= 70)
@@ -53174,6 +_,7 @@
 				{
 					return 0;
 				}
+
 				if (num != 60)
 				{
 					if (num == 70)
@@ -53187,6 +_,7 @@
 					{
 						return 1;
 					}
+
 					return 5;
 				}
 			}
@@ -53196,15 +_,18 @@
 				{
 					return 2;
 				}
+
 				if (num == 147)
 				{
 					return 3;
 				}
+
 				if (num == 199)
 				{
 					return 4;
 				}
 			}
+
 			return -1;
 		}
 
@@ -53215,16 +_,19 @@
 			{
 				return;
 			}
+
 			bool flag = false;
 			if (Main.woodAltTexture[t, c] == null)
 			{
 				Main.woodAltTexture[t, c] = new RenderTarget2D(base.GraphicsDevice, Main.woodTexture[t].Width, Main.woodTexture[t].Height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
 				flag = true;
 			}
+
 			if (Main.woodAltTexture[t, c].IsContentLost)
 			{
 				flag = true;
 			}
+
 			if (flag)
 			{
 				base.GraphicsDevice.SetRenderTarget(Main.woodAltTexture[t, c]);
@@ -53244,6 +_,7 @@
 				{
 					Main.tileShader.CurrentTechnique.Passes[c].Apply();
 				}
+
 				Main.spriteBatch.Draw(Main.woodTexture[t], new Microsoft.Xna.Framework.Rectangle(0, 0, Main.woodTexture[t].Width, Main.woodTexture[t].Height), Microsoft.Xna.Framework.Color.White);
 				Main.spriteBatch.End();
 				base.GraphicsDevice.SetRenderTarget(null);
@@ -53257,15 +_,18 @@
 			{
 				return;
 			}
+
 			if (!Main.tileAltTextureInit[t, c])
 			{
 				Main.tileAltTexture[t, c] = new RenderTarget2D(base.GraphicsDevice, Main.tileTexture[t].Width, Main.tileTexture[t].Height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
 				Main.tileAltTextureInit[t, c] = true;
 			}
+
 			if (Main.tileAltTexture[t, c].IsContentLost)
 			{
 				Main.tileAltTextureDrawn[t, c] = false;
 			}
+
 			if (!Main.tileAltTextureDrawn[t, c])
 			{
 				base.GraphicsDevice.SetRenderTarget(Main.tileAltTexture[t, c]);
@@ -53285,6 +_,7 @@
 				{
 					Main.tileShader.CurrentTechnique.Passes[c].Apply();
 				}
+
 				Main.spriteBatch.Draw(Main.tileTexture[t], new Microsoft.Xna.Framework.Rectangle(0, 0, Main.tileTexture[t].Width, Main.tileTexture[t].Height), Microsoft.Xna.Framework.Color.White);
 				Main.spriteBatch.End();
 				base.GraphicsDevice.SetRenderTarget(null);
@@ -53300,10 +_,12 @@
 				Main.treeBranchAltTexture[t, c] = new RenderTarget2D(base.GraphicsDevice, Main.treeBranchTexture[t].Width, Main.treeBranchTexture[t].Height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
 				Main.treeAltTextureInit[t, c] = true;
 			}
+
 			if (Main.treeTopAltTexture[t, c].IsContentLost || Main.treeBranchAltTexture[t, c].IsContentLost)
 			{
 				Main.treeAltTextureDrawn[t, c] = false;
 			}
+
 			if (!Main.treeAltTextureDrawn[t, c])
 			{
 				base.GraphicsDevice.SetRenderTarget(Main.treeTopAltTexture[t, c]);
@@ -53323,6 +_,7 @@
 				{
 					Main.tileShader.CurrentTechnique.Passes[c].Apply();
 				}
+
 				Main.spriteBatch.Draw(Main.treeTopTexture[t], new Microsoft.Xna.Framework.Rectangle(0, 0, Main.treeTopTexture[t].Width, Main.treeTopTexture[t].Height), Microsoft.Xna.Framework.Color.White);
 				Main.spriteBatch.End();
 				base.GraphicsDevice.SetRenderTarget(null);
@@ -53343,6 +_,7 @@
 				{
 					Main.tileShader.CurrentTechnique.Passes[c].Apply();
 				}
+
 				Main.spriteBatch.Draw(Main.treeBranchTexture[t], new Microsoft.Xna.Framework.Rectangle(0, 0, Main.treeBranchTexture[t].Width, Main.treeBranchTexture[t].Height), Microsoft.Xna.Framework.Color.White);
 				Main.spriteBatch.End();
 				base.GraphicsDevice.SetRenderTarget(null);
@@ -53358,10 +_,12 @@
 				Main.wallAltTexture[t, c] = new RenderTarget2D(base.GraphicsDevice, Main.wallTexture[t].Width, Main.wallTexture[t].Height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
 				Main.wallAltTextureInit[t, c] = true;
 			}
+
 			if (Main.wallAltTexture[t, c].IsContentLost)
 			{
 				Main.wallAltTextureDrawn[t, c] = false;
 			}
+
 			if (!Main.wallAltTextureDrawn[t, c])
 			{
 				base.GraphicsDevice.SetRenderTarget(Main.wallAltTexture[t, c]);
@@ -53380,6 +_,7 @@
 				{
 					Main.tileShader.CurrentTechnique.Passes[c].Apply();
 				}
+
 				Main.spriteBatch.Draw(Main.wallTexture[t], new Microsoft.Xna.Framework.Rectangle(0, 0, Main.wallTexture[t].Width, Main.wallTexture[t].Height), Microsoft.Xna.Framework.Color.White);
 				Main.spriteBatch.End();
 				base.GraphicsDevice.SetRenderTarget(null);
@@ -53406,81 +_,100 @@
 					Main.windSpeed = Main.windSpeedSet;
 				}
 			}
+
 			if (Main.netMode == 1)
 			{
 				return;
 			}
+
 			if (Main.netMode != 2 && Main.gameMenu)
 			{
 				return;
 			}
+
 			Main.windSpeedSpeed += (float)Main.rand.Next(-10, 11) * 0.0001f;
 			if (!Main.dayTime)
 			{
 				Main.windSpeedSpeed += (float)Main.rand.Next(-10, 11) * 0.0002f;
 			}
+
 			if ((double)Main.windSpeedSpeed < -0.002)
 			{
 				Main.windSpeedSpeed = -0.002f;
 			}
+
 			if ((double)Main.windSpeedSpeed > 0.002)
 			{
 				Main.windSpeedSpeed = 0.002f;
 			}
+
 			Main.windSpeedTemp += Main.windSpeedSpeed;
 			if (Main.raining)
 			{
 				Main.windSpeedTemp += Main.windSpeedSpeed * 2f;
 			}
+
 			float num = 0.3f + 0.5f * Main.cloudAlpha;
 			if (Main.windSpeedTemp < -num)
 			{
 				Main.windSpeedTemp = -num;
 			}
+
 			if (Main.windSpeedTemp > num)
 			{
 				Main.windSpeedTemp = num;
 			}
+
 			if (Main.rand.Next(60) == 0)
 			{
 				Main.numCloudsTemp += Main.rand.Next(-1, 2);
 			}
+
 			if ((float)Main.rand.Next(1000) < 50f * Main.cloudBGAlpha)
 			{
 				Main.numCloudsTemp++;
 			}
+
 			if ((float)Main.rand.Next(1000) < 25f * (1f - Main.cloudBGAlpha))
 			{
 				Main.numCloudsTemp--;
 			}
+
 			if ((float)Main.rand.Next(1000) < 200f * Main.cloudAlpha && Main.numCloudsTemp < Main.cloudLimit / 2)
 			{
 				Main.numCloudsTemp++;
 			}
+
 			if ((float)Main.rand.Next(1000) < 50f * Main.cloudAlpha)
 			{
 				Main.numCloudsTemp++;
 			}
+
 			if (Main.numCloudsTemp > Main.cloudLimit / 4 && Main.rand.Next(100) == 0)
 			{
 				Main.numCloudsTemp -= Main.rand.Next(1, 3);
 			}
+
 			if (Main.numCloudsTemp < Main.cloudLimit / 4 && Main.rand.Next(100) == 0)
 			{
 				Main.numCloudsTemp += Main.rand.Next(1, 3);
 			}
+
 			if (Main.cloudBGActive <= 0f && Main.numCloudsTemp > Main.cloudLimit / 2 && Main.cloudAlpha == 0f)
 			{
 				Main.numCloudsTemp = Main.cloudLimit / 2;
 			}
+
 			if (Main.numCloudsTemp < 0)
 			{
 				Main.numCloudsTemp = 0;
 			}
+
 			if (Main.numCloudsTemp > Main.cloudLimit)
 			{
 				Main.numCloudsTemp = Main.cloudLimit;
 			}
+
 			Main.weatherCounter -= Main.dayRate;
 			if (Main.weatherCounter <= 0)
 			{
@@ -53499,89 +_,95 @@
 			if (i >= 0 && !Main.backgroundLoaded[i])
 			{
 				Main.backgroundTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Background_",
 							i
-						}));
+				}));
 				Main.backgroundWidth[i] = Main.backgroundTexture[i].Width;
 				Main.backgroundHeight[i] = Main.backgroundTexture[i].Height;
 				Main.backgroundLoaded[i] = true;
 			}
 		}
 
-		protected void LoadNPC(int i)
+		public void LoadNPC(int i)
 		{
 			if (!Main.NPCLoaded[i] || Main.npcTexture[i] == null)
 			{
 				Main.npcTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"NPC_",
 							i
-						}));
+				}));
 				Main.NPCLoaded[i] = true;
 			}
 		}
 
-		protected void LoadProjectile(int i)
+		public void LoadProjectile(int i)
 		{
 			if (!Main.projectileLoaded[i])
 			{
 				Main.projectileTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Projectile_",
 							i
-						}));
+				}));
 				Main.projectileLoaded[i] = true;
 			}
 		}
 
-		protected void LoadGore(int i)
+		public void LoadGore(int i)
 		{
 			if (!Main.goreLoaded[i])
 			{
 				Main.goreTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Gore_",
 							i
-						}));
+				}));
 				Main.goreLoaded[i] = true;
 			}
 		}
 
-		protected void LoadWall(int i)
+		public void LoadWall(int i)
 		{
 			if (!Main.wallLoaded[i])
 			{
 				Main.wallTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Wall_",
 							i
-						}));
+				}));
 				Main.wallLoaded[i] = true;
 			}
 		}
 
-		protected void LoadTiles(int i)
+		public void LoadTiles(int i)
 		{
 			if (!Main.tileSetsLoaded[i])
 			{
 				Main.tileTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Tiles_",
 							i
-						}));
+				}));
 				Main.tileSetsLoaded[i] = true;
 			}
 		}
@@ -53593,16 +_,18 @@
 				try
 				{
 					Main.itemFlameTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-							{
+					{
+
 								"Images",
 								Path.DirectorySeparatorChar,
 								"ItemFlame_",
 								i
-							}));
+					}));
 				}
 				catch
 				{
 				}
+
 				Main.itemFlameLoaded[i] = true;
 			}
 		}
@@ -53612,12 +_,13 @@
 			if (!Main.wingsLoaded[i])
 			{
 				Main.wingsTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Wings_",
 							i
-						}));
+				}));
 				Main.wingsLoaded[i] = true;
 			}
 		}
@@ -53627,19 +_,21 @@
 			if (!Main.hairLoaded[i])
 			{
 				Main.playerHairTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Player_Hair_",
 							i + 1
-						}));
+				}));
 				Main.playerHairAltTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Player_HairAlt_",
 							i + 1
-						}));
+				}));
 				Main.hairLoaded[i] = true;
 			}
 		}
@@ -53649,12 +_,13 @@
 			if (!Main.armorHeadLoaded[i])
 			{
 				Main.armorHeadTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Armor_Head_",
 							i
-						}));
+				}));
 				Main.armorHeadLoaded[i] = true;
 			}
 		}
@@ -53664,26 +_,29 @@
 			if (!Main.armorBodyLoaded[i])
 			{
 				Main.femaleBodyTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Female_Body_",
 							i
-						}));
+				}));
 				Main.armorBodyTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Armor_Body_",
 							i
-						}));
+				}));
 				Main.armorArmTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Armor_Arm_",
 							i
-						}));
+				}));
 				Main.armorBodyLoaded[i] = true;
 			}
 		}
@@ -53693,12 +_,13 @@
 			if (!Main.armorLegsLoaded[i])
 			{
 				Main.armorLegTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Armor_Legs_",
 							i
-						}));
+				}));
 				Main.armorLegsLoaded[i] = true;
 			}
 		}
@@ -53823,6 +_,7 @@
 					}
 				}
 			}
+
 			if (Main.invasionType == 4 && !SkyManager.Instance["Martian"].IsActive())
 			{
 				SkyManager.Instance.Activate("Martian", default(Vector2), new object[0]);
@@ -53831,6 +_,7 @@
 			{
 				SkyManager.Instance.Deactivate("Martian", new object[0]);
 			}
+
 			SkyManager.Instance.ResetDepthTracker();
 			Main.atmo = 1f;
 			Main.bgScale *= 2f;
@@ -53842,6 +_,7 @@
 				Main.backColor.B = (byte)((float)Main.backColor.B * Main.atmo);
 				Main.backColor.A = (byte)((float)Main.backColor.A * Main.atmo);
 			}
+
 			if (!Main.mapFullscreen && (double)(Main.screenPosition.Y / 16f) <= Main.worldSurface + 10.0)
 			{
 				if (Main.BackgroundEnabled)
@@ -53862,6 +_,7 @@
 							Main.cloudBGAlpha = 0f;
 						}
 					}
+
 					if (Main.cloudBGAlpha > 0f)
 					{
 						this.LoadBackground(Main.cloudBG[0]);
@@ -53873,26 +_,31 @@
 						{
 							num4 = 1f;
 						}
+
 						Main.bgScale = 1.65f;
 						this.bgParallax = 0.090000003576278687;
 						if (base.IsActive)
 						{
 							Main.cloudBGX[0] += Main.windSpeed * (float)this.bgParallax * 5f * (float)Main.dayRate;
 						}
+
 						if (Main.cloudBGX[0] > (float)Main.backgroundWidth[Main.cloudBG[0]] * Main.bgScale)
 						{
 							Main.cloudBGX[0] -= (float)Main.backgroundWidth[Main.cloudBG[0]] * Main.bgScale;
 						}
+
 						if (Main.cloudBGX[0] < (float)(-(float)Main.backgroundWidth[Main.cloudBG[0]]) * Main.bgScale)
 						{
 							Main.cloudBGX[0] += (float)Main.backgroundWidth[Main.cloudBG[0]] * Main.bgScale;
 						}
+
 						Main.bgW = (int)((float)Main.backgroundWidth[Main.cloudBG[0]] * Main.bgScale);
 						this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 900.0 + 600.0) + (int)this.scAdj;
 						if (Main.gameMenu)
 						{
 							this.bgTop = -150;
 						}
+
 						this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2) - (double)Main.bgW);
 						this.bgStart += (int)Main.cloudBGX[0];
 						this.bgLoops = Main.screenWidth / Main.bgW + 2 + 2;
@@ -53906,11 +_,13 @@
 						{
 							Main.spriteBatch.Draw(Main.backgroundTexture[Main.cloudBG[0]], new Vector2((float)(this.bgStart + Main.bgW * j), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.cloudBG[0]], Main.backgroundHeight[Main.cloudBG[0]])), Main.backColor * scale, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 						}
+
 						num4 = Main.cloudBGAlpha * 1.5f;
 						if (num4 > 1f)
 						{
 							num4 = 1f;
 						}
+
 						Main.backColor = Main.trueBackColor;
 						Main.backColor.R = (byte)((float)Main.backColor.R * num4);
 						Main.backColor.G = (byte)((float)Main.backColor.G * num4);
@@ -53922,20 +_,24 @@
 						{
 							Main.cloudBGX[1] += Main.windSpeed * (float)this.bgParallax * 5f * (float)Main.dayRate;
 						}
+
 						if (Main.cloudBGX[1] > (float)Main.backgroundWidth[Main.cloudBG[1]] * Main.bgScale)
 						{
 							Main.cloudBGX[1] -= (float)Main.backgroundWidth[Main.cloudBG[1]] * Main.bgScale;
 						}
+
 						if (Main.cloudBGX[1] < (float)(-(float)Main.backgroundWidth[Main.cloudBG[1]]) * Main.bgScale)
 						{
 							Main.cloudBGX[1] += (float)Main.backgroundWidth[Main.cloudBG[1]] * Main.bgScale;
 						}
+
 						Main.bgW = (int)((float)Main.backgroundWidth[Main.cloudBG[1]] * Main.bgScale);
 						this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1100.0 + 750.0) + (int)this.scAdj;
 						if (Main.gameMenu)
 						{
 							this.bgTop = -50;
 						}
+
 						this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2) - (double)Main.bgW);
 						this.bgStart += (int)Main.cloudBGX[1];
 						this.bgLoops = Main.screenWidth / Main.bgW + 2 + 2;
@@ -53945,6 +_,7 @@
 							Main.spriteBatch.Draw(Main.backgroundTexture[Main.cloudBG[1]], new Vector2((float)(this.bgStart + Main.bgW * k), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.cloudBG[1]], Main.backgroundHeight[Main.cloudBG[1]])), Main.backColor * scale, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 						}
 					}
+
 					this.LoadBackground(Main.treeMntBG[0]);
 					this.LoadBackground(Main.treeMntBG[1]);
 					Main.bgScale = 1f;
@@ -53958,11 +_,13 @@
 					{
 						Main.bgW = 1024;
 					}
+
 					this.bgLoops = Main.screenWidth / Main.bgW + 2;
 					if (Main.gameMenu)
 					{
 						this.bgTop = 100;
 					}
+
 					if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 					{
 						Main.backColor = Main.trueBackColor;
@@ -53976,39 +_,48 @@
 							{
 								this.bgTop -= 50;
 							}
+
 							if (Main.treeMntBG[0] == 171)
 							{
 								this.bgTop -= 100;
 							}
+
 							if (Main.treeMntBG[0] == 176)
 							{
 								this.bgTop += 250;
 							}
+
 							if (Main.treeMntBG[0] == 179)
 							{
 								this.bgTop -= 100;
 							}
+
 							for (int l = 0; l < this.bgLoops; l++)
 							{
 								Main.spriteBatch.Draw(Main.backgroundTexture[Main.treeMntBG[0]], new Vector2((float)(this.bgStart + Main.bgW * l), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.treeMntBG[0]], Main.backgroundHeight[Main.treeMntBG[0]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 							}
+
 							if (Main.treeMntBG[0] == 93 || (Main.treeMntBG[0] >= 168 && Main.treeMntBG[0] <= 170))
 							{
 								this.bgTop += 50;
 							}
+
 							if (Main.treeMntBG[0] == 171)
 							{
 								this.bgTop += 100;
 							}
+
 							if (Main.treeMntBG[0] == 176)
 							{
 								this.bgTop -= 250;
 							}
+
 							if (Main.treeMntBG[0] == 179)
 							{
 								this.bgTop += 100;
 							}
 						}
+
 						Main.backColor = Main.trueBackColor;
 						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[1]);
 						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[1]);
@@ -54022,6 +_,7 @@
 								Main.spriteBatch.Draw(Main.backgroundTexture[23], new Vector2((float)(this.bgStart + Main.bgW * m), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[23], Main.backgroundHeight[23])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 							}
 						}
+
 						Main.backColor = Main.trueBackColor;
 						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[2]);
 						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[2]);
@@ -54035,6 +_,7 @@
 								Main.spriteBatch.Draw(Main.backgroundTexture[24], new Vector2((float)(this.bgStart + Main.bgW * n), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[24], Main.backgroundHeight[24])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 							}
 						}
+
 						Main.backColor = Main.trueBackColor;
 						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[4]);
 						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[4]);
@@ -54048,6 +_,7 @@
 								Main.spriteBatch.Draw(Main.backgroundTexture[Main.snowMntBG[0]], new Vector2((float)(this.bgStart + Main.bgW * num5), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.snowMntBG[0]], Main.backgroundHeight[Main.snowMntBG[0]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 							}
 						}
+
 						Main.backColor = Main.trueBackColor;
 						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[5]);
 						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[5]);
@@ -54061,9 +_,12 @@
 								Main.spriteBatch.Draw(Main.backgroundTexture[24], new Vector2((float)(this.bgStart + Main.bgW * num6), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[24], Main.backgroundHeight[24])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 							}
 						}
+
+						SurfaceBgStyleLoader.DrawFarTexture();
 						SkyManager.Instance.DrawToDepth(Main.spriteBatch, 5f);
 					}
 				}
+
 				this.cTop = (float)(this.bgTop - 50);
 				if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 				{
@@ -54079,22 +_,27 @@
 								value2.B = (byte)((float)value2.B * Main.atmo);
 								value2.A = (byte)((float)value2.A * Main.atmo);
 							}
+
 							float num8 = Main.cloud[num7].position.Y * ((float)Main.screenHeight / 600f);
 							float num9 = (float)((double)(Main.screenPosition.Y / 16f - 24f) / Main.worldSurface);
 							if (num9 < 0f)
 							{
 								num9 = 0f;
 							}
+
 							if (num9 > 1f)
 							{
 							}
+
 							if (Main.gameMenu)
 							{
 							}
+
 							Main.spriteBatch.Draw(Main.cloudTexture[Main.cloud[num7].type], new Vector2(Main.cloud[num7].position.X + (float)Main.cloudTexture[Main.cloud[num7].type].Width * 0.5f, num8 + (float)Main.cloudTexture[Main.cloud[num7].type].Height * 0.5f + this.cTop + 200f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.cloudTexture[Main.cloud[num7].type].Width, Main.cloudTexture[Main.cloud[num7].type].Height)), value2 * scale, Main.cloud[num7].rotation, new Vector2((float)Main.cloudTexture[Main.cloud[num7].type].Width * 0.5f, (float)Main.cloudTexture[Main.cloud[num7].type].Height * 0.5f), Main.cloud[num7].scale, Main.cloud[num7].spriteDir, 0f);
 						}
 					}
 				}
+
 				if (Main.holyTiles > 0 && Main.BackgroundEnabled)
 				{
 					this.bgParallax = 0.17;
@@ -54109,6 +_,7 @@
 						this.bgTop = 230;
 						this.bgStart -= 500;
 					}
+
 					SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
 					Microsoft.Xna.Framework.Color color = Main.trueBackColor;
 					float num10 = (float)Main.holyTiles / 400f;
@@ -54116,6 +_,7 @@
 					{
 						num10 = 0.5f;
 					}
+
 					color.R = (byte)((float)color.R * num10);
 					color.G = (byte)((float)color.G * num10);
 					color.B = (byte)((float)color.B * num10);
@@ -54131,6 +_,7 @@
 						}
 					}
 				}
+
 				if (Main.treeMntBG[1] > -1)
 				{
 					this.LoadBackground(Main.treeMntBG[1]);
@@ -54142,6 +_,7 @@
 					this.bgLoops = Main.screenWidth / Main.bgW + 2;
 					this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1400.0 + 1260.0) + (int)this.scAdj;
 				}
+
 				if (Main.BackgroundEnabled)
 				{
 					if (Main.gameMenu)
@@ -54149,6 +_,7 @@
 						this.bgTop = 230;
 						this.bgStart -= 500;
 					}
+
 					SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
 					if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 					{
@@ -54163,31 +_,38 @@
 							{
 								this.bgTop += 130;
 							}
+
 							if (Main.treeMntBG[1] == 177)
 							{
 								this.bgTop += 200;
 							}
+
 							if (Main.treeMntBG[1] >= 180 && Main.treeMntBG[1] <= 183)
 							{
 								this.bgTop -= 350;
 							}
+
 							for (int num12 = 0; num12 < this.bgLoops; num12++)
 							{
 								Main.spriteBatch.Draw(Main.backgroundTexture[Main.treeMntBG[1]], new Vector2((float)(this.bgStart + Main.bgW * num12), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.treeMntBG[1]], Main.backgroundHeight[Main.treeMntBG[1]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 							}
+
 							if (Main.treeMntBG[1] == 172)
 							{
 								this.bgTop -= 130;
 							}
+
 							if (Main.treeMntBG[1] == 177)
 							{
 								this.bgTop -= 200;
 							}
+
 							if (Main.treeMntBG[1] >= 180 && Main.treeMntBG[1] <= 183)
 							{
 								this.bgTop += 350;
 							}
 						}
+
 						Main.backColor = Main.trueBackColor;
 						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[1]);
 						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[1]);
@@ -54201,6 +_,7 @@
 								Main.spriteBatch.Draw(Main.backgroundTexture[22], new Vector2((float)(this.bgStart + Main.bgW * num13), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[22], Main.backgroundHeight[22])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 							}
 						}
+
 						Main.backColor = Main.trueBackColor;
 						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[2]);
 						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[2]);
@@ -54214,6 +_,7 @@
 								Main.spriteBatch.Draw(Main.backgroundTexture[25], new Vector2((float)(this.bgStart + Main.bgW * num14), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[25], Main.backgroundHeight[25])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 							}
 						}
+
 						Main.backColor = Main.trueBackColor;
 						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[3]);
 						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[3]);
@@ -54227,6 +_,7 @@
 								Main.spriteBatch.Draw(Main.backgroundTexture[Main.oceanBG], new Vector2((float)(this.bgStart + Main.bgW * num15), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.oceanBG], Main.backgroundHeight[Main.oceanBG])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 							}
 						}
+
 						Main.backColor = Main.trueBackColor;
 						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[4]);
 						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[4]);
@@ -54240,6 +_,7 @@
 								Main.spriteBatch.Draw(Main.backgroundTexture[Main.snowMntBG[1]], new Vector2((float)(this.bgStart + Main.bgW * num16), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.snowMntBG[1]], Main.backgroundHeight[Main.snowMntBG[1]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 							}
 						}
+
 						Main.backColor = Main.trueBackColor;
 						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[5]);
 						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[5]);
@@ -54253,8 +_,11 @@
 								Main.spriteBatch.Draw(Main.backgroundTexture[42], new Vector2((float)(this.bgStart + Main.bgW * num17), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[42], Main.backgroundHeight[42])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 							}
 						}
-					}
-				}
+
+						SurfaceBgStyleLoader.DrawMiddleTexture();
+					}
+				}
+
 				this.cTop = (float)this.bgTop * 1.01f - 150f;
 				if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 				{
@@ -54270,26 +_,31 @@
 								value3.B = (byte)((float)value3.B * Main.atmo);
 								value3.A = (byte)((float)value3.A * Main.atmo);
 							}
+
 							float num19 = Main.cloud[num18].position.Y * ((float)Main.screenHeight / 600f) - 100f;
 							float num20 = (float)((double)(Main.screenPosition.Y / 16f - 24f) / Main.worldSurface);
 							if (num20 < 0f)
 							{
 								num20 = 0f;
 							}
+
 							if (num20 > 1f)
 							{
 							}
+
 							if (Main.gameMenu)
 							{
 							}
+
 							Main.spriteBatch.Draw(Main.cloudTexture[Main.cloud[num18].type], new Vector2(Main.cloud[num18].position.X + (float)Main.cloudTexture[Main.cloud[num18].type].Width * 0.5f, num19 + (float)Main.cloudTexture[Main.cloud[num18].type].Height * 0.5f + this.cTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.cloudTexture[Main.cloud[num18].type].Width, Main.cloudTexture[Main.cloud[num18].type].Height)), value3 * scale, Main.cloud[num18].rotation, new Vector2((float)Main.cloudTexture[Main.cloud[num18].type].Width * 0.5f, (float)Main.cloudTexture[Main.cloud[num18].type].Height * 0.5f), Main.cloud[num18].scale, Main.cloud[num18].spriteDir, 0f);
 						}
 					}
 				}
 			}
+
 			if (!Main.mapFullscreen)
 			{
-				for (int num21 = 0; num21 < 10; num21++)
+				for (int num21 = 0; num21 < Main.bgAlpha2.Length; num21++)
 				{
 					if (Main.bgStyle == num21)
 					{
@@ -54307,6 +_,7 @@
 							Main.bgAlpha[num21] = 0f;
 						}
 					}
+
 					if (Main.BackgroundEnabled)
 					{
 						Main.backColor = Main.trueBackColor;
@@ -54328,10 +_,12 @@
 							{
 								this.bgTop = 320;
 							}
+
 							if (Main.jungleBG[0] == 59)
 							{
 								this.bgTop -= 200;
 							}
+
 							this.bgLoops = Main.screenWidth / Main.bgW + 2;
 							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 							{
@@ -54340,6 +_,7 @@
 									Main.spriteBatch.Draw(Main.backgroundTexture[Main.jungleBG[0]], new Vector2((float)(this.bgStart + Main.bgW * num22), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.jungleBG[0]], Main.backgroundHeight[Main.jungleBG[0]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 								}
 							}
+
 							this.LoadBackground(Main.jungleBG[1]);
 							Main.bgScale = 1.31f;
 							Main.bgScale *= 2f;
@@ -54353,10 +_,12 @@
 								this.bgTop = 400;
 								this.bgStart -= 80;
 							}
+
 							if (Main.jungleBG[1] == 60)
 							{
 								this.bgTop -= 175;
 							}
+
 							this.bgLoops = Main.screenWidth / Main.bgW + 2;
 							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 							{
@@ -54365,6 +_,7 @@
 									Main.spriteBatch.Draw(Main.backgroundTexture[Main.jungleBG[1]], new Vector2((float)(this.bgStart + Main.bgW * num23), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.jungleBG[1]], Main.backgroundHeight[Main.jungleBG[1]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.FlipHorizontally, 0f);
 								}
 							}
+
 							Main.bgScale = 1.34f;
 							Main.bgScale *= 2f;
 							this.LoadBackground(Main.jungleBG[2]);
@@ -54378,10 +_,12 @@
 								this.bgTop = 480;
 								this.bgStart -= 120;
 							}
+
 							if (Main.jungleBG[2] == 61)
 							{
 								this.bgTop -= 150;
 							}
+
 							this.bgLoops = Main.screenWidth / Main.bgW + 2;
 							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 							{
@@ -54391,6 +_,7 @@
 								}
 							}
 						}
+
 						if (Main.bgAlpha[num21] > 0f && num21 == 2)
 						{
 							this.LoadBackground(Main.desertBG[0]);
@@ -54405,6 +_,7 @@
 							{
 								this.bgTop = 320;
 							}
+
 							this.bgLoops = Main.screenWidth / Main.bgW + 2;
 							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 							{
@@ -54413,6 +_,7 @@
 									Main.spriteBatch.Draw(Main.backgroundTexture[Main.desertBG[0]], new Vector2((float)(this.bgStart + Main.bgW * num25), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.desertBG[0]], Main.backgroundHeight[Main.desertBG[0]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 								}
 							}
+
 							Main.bgScale = 1.34f;
 							Main.bgScale *= 2f;
 							this.LoadBackground(Main.desertBG[1]);
@@ -54426,6 +_,7 @@
 								this.bgTop = 480;
 								this.bgStart -= 120;
 							}
+
 							this.bgLoops = Main.screenWidth / Main.bgW + 2;
 							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 							{
@@ -54435,6 +_,7 @@
 								}
 							}
 						}
+
 						if (Main.bgAlpha[num21] > 0f && num21 == 5)
 						{
 							this.LoadBackground(26);
@@ -54449,6 +_,7 @@
 							{
 								this.bgTop = 320;
 							}
+
 							this.bgLoops = Main.screenWidth / Main.bgW + 2;
 							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 							{
@@ -54457,6 +_,7 @@
 									Main.spriteBatch.Draw(Main.backgroundTexture[26], new Vector2((float)(this.bgStart + Main.bgW * num27), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[26], Main.backgroundHeight[26])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 								}
 							}
+
 							Main.bgScale = 1.34f;
 							Main.bgScale *= 2f;
 							this.LoadBackground(27);
@@ -54470,6 +_,7 @@
 								this.bgTop = 480;
 								this.bgStart -= 120;
 							}
+
 							this.bgLoops = Main.screenWidth / Main.bgW + 2;
 							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 							{
@@ -54479,6 +_,7 @@
 								}
 							}
 						}
+
 						if (Main.bgAlpha[num21] > 0f && num21 == 1)
 						{
 							Main.bgScale = 1.25f;
@@ -54493,10 +_,12 @@
 							{
 								this.bgTop = 320;
 							}
+
 							if (Main.corruptBG[0] == 56)
 							{
 								this.bgTop -= 100;
 							}
+
 							this.bgLoops = Main.screenWidth / Main.bgW + 2;
 							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 							{
@@ -54505,6 +_,7 @@
 									Main.spriteBatch.Draw(Main.backgroundTexture[Main.corruptBG[0]], new Vector2((float)(this.bgStart + Main.bgW * num29), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.corruptBG[0]], Main.backgroundHeight[Main.corruptBG[0]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 								}
 							}
+
 							Main.bgScale = 1.31f;
 							Main.bgScale *= 2f;
 							this.LoadBackground(Main.corruptBG[1]);
@@ -54518,14 +_,17 @@
 								this.bgTop = 400;
 								this.bgStart -= 80;
 							}
+
 							if (Main.corruptBG[0] == 56)
 							{
 								this.bgTop -= 100;
 							}
+
 							if (Main.bgW == 0)
 							{
 								Main.bgW = 1;
 							}
+
 							this.bgLoops = Main.screenWidth / Main.bgW + 2;
 							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 							{
@@ -54541,6 +_,7 @@
 									this.LoadBackground(Main.corruptBG[1]);
 								}
 							}
+
 							Main.bgScale = 1.34f;
 							Main.bgScale *= 2f;
 							this.LoadBackground(Main.corruptBG[2]);
@@ -54549,6 +_,7 @@
 							{
 								Main.bgW = 150;
 							}
+
 							this.bgParallax = 0.49;
 							SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
 							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
@@ -54558,10 +_,12 @@
 								this.bgTop = 480;
 								this.bgStart -= 120;
 							}
+
 							if (Main.corruptBG[0] == 56)
 							{
 								this.bgTop -= 100;
 							}
+
 							this.bgLoops = Main.screenWidth / Main.bgW + 2;
 							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 							{
@@ -54571,6 +_,7 @@
 								}
 							}
 						}
+
 						if (Main.bgAlpha[num21] > 0f && num21 == 6)
 						{
 							Main.bgScale = 1.25f;
@@ -54585,6 +_,7 @@
 							{
 								this.bgTop = 320;
 							}
+
 							this.bgLoops = Main.screenWidth / Main.bgW + 2;
 							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 							{
@@ -54593,6 +_,7 @@
 									Main.spriteBatch.Draw(Main.backgroundTexture[Main.hallowBG[0]], new Vector2((float)(this.bgStart + Main.bgW * num32), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.hallowBG[0]], Main.backgroundHeight[Main.hallowBG[0]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 								}
 							}
+
 							Main.bgScale = 1.31f;
 							Main.bgScale *= 2f;
 							this.LoadBackground(Main.hallowBG[1]);
@@ -54606,6 +_,7 @@
 								this.bgTop = 400;
 								this.bgStart -= 80;
 							}
+
 							this.bgLoops = Main.screenWidth / Main.bgW + 2;
 							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 							{
@@ -54614,6 +_,7 @@
 									Main.spriteBatch.Draw(Main.backgroundTexture[Main.hallowBG[1]], new Vector2((float)(this.bgStart + Main.bgW * num33), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.hallowBG[1]], Main.backgroundHeight[Main.hallowBG[1]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 								}
 							}
+
 							Main.bgScale = 1.34f;
 							Main.bgScale *= 2f;
 							this.LoadBackground(Main.hallowBG[2]);
@@ -54627,6 +_,7 @@
 								this.bgTop = 480;
 								this.bgStart -= 120;
 							}
+
 							this.bgLoops = Main.screenWidth / Main.bgW + 2;
 							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 							{
@@ -54636,6 +_,7 @@
 								}
 							}
 						}
+
 						if (Main.bgAlpha[num21] > 0f && num21 == 0)
 						{
 							Main.bgScale = 1.25f;
@@ -54647,24 +_,28 @@
 								Main.bgScale = 1.2f;
 								Main.bgScale *= 2f;
 							}
+
 							if (Main.treeBG[0] == 173)
 							{
 								this.bgParallax = 0.25;
 								Main.bgScale = 1.3f;
 								Main.bgScale *= 2f;
 							}
+
 							if (Main.treeBG[0] == 178)
 							{
 								this.bgParallax = 0.30000001192092896;
 								Main.bgScale = 1.2f;
 								Main.bgScale *= 2f;
 							}
+
 							if (Main.treeBG[0] == 184)
 							{
 								this.bgParallax = 0.25;
 								Main.bgScale = 1.2f;
 								Main.bgScale *= 2f;
 							}
+
 							SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
 							if (Main.treeBG[0] >= 0)
 							{
@@ -54676,38 +_,47 @@
 								{
 									this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1600.0 + 1400.0) + (int)this.scAdj;
 								}
+
 								if (Main.treeBG[0] == 173)
 								{
 									this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1600.0 + 1400.0) + (int)this.scAdj;
 								}
+
 								if (Main.treeBG[0] == 184)
 								{
 									this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1600.0 + 1400.0) + (int)this.scAdj;
 								}
+
 								if (Main.gameMenu)
 								{
 									this.bgTop = 320;
 								}
+
 								if (Main.treeBG[0] == 50)
 								{
 									this.bgTop -= 50;
 								}
+
 								if (Main.treeBG[0] == 53)
 								{
 									this.bgTop -= 100;
 								}
+
 								if (Main.treeBG[0] == 91)
 								{
 									this.bgTop += 200;
 								}
+
 								if (Main.treeBG[0] == 173)
 								{
 									this.bgTop += 200;
 								}
+
 								if (Main.treeBG[0] == 178)
 								{
 									this.bgTop += 75;
 								}
+
 								this.bgLoops = Main.screenWidth / Main.bgW + 2;
 								if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 								{
@@ -54720,6 +_,7 @@
 									}
 								}
 							}
+
 							if (Main.treeBG[1] >= 0)
 							{
 								this.LoadBackground(Main.treeBG[1]);
@@ -54735,14 +_,17 @@
 									this.bgTop = 400;
 									this.bgStart -= 80;
 								}
+
 								if (Main.treeBG[1] == 51)
 								{
 									this.bgTop -= 50;
 								}
+
 								if (Main.treeBG[1] == 54)
 								{
 									this.bgTop -= 100;
 								}
+
 								this.bgLoops = Main.screenWidth / Main.bgW + 2;
 								if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 								{
@@ -54752,6 +_,7 @@
 									}
 								}
 							}
+
 							if (Main.treeBG[2] >= 0)
 							{
 								this.LoadBackground(Main.treeBG[2]);
@@ -54765,6 +_,7 @@
 									Main.bgScale *= 2f;
 									this.bgParallax = 0.42;
 								}
+
 								Main.bgW = (int)((float)Main.backgroundWidth[Main.treeBG[2]] * Main.bgScale);
 								this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
 								this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 2100.0 + 2000.0) + (int)this.scAdj;
@@ -54773,18 +_,22 @@
 									this.bgTop = 480;
 									this.bgStart -= 120;
 								}
+
 								if (Main.treeBG[2] == 52)
 								{
 									this.bgTop -= 50;
 								}
+
 								if (Main.treeBG[2] == 55)
 								{
 									this.bgTop -= 100;
 								}
+
 								if (Main.treeBG[2] == 92)
 								{
 									this.bgTop += 150;
 								}
+
 								this.bgLoops = Main.screenWidth / Main.bgW + 2;
 								if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 								{
@@ -54795,6 +_,7 @@
 								}
 							}
 						}
+
 						if (Main.bgAlpha[num21] > 0f && num21 == 7)
 						{
 							if (Main.snowBG[0] >= 0)
@@ -54811,6 +_,7 @@
 								{
 									this.bgTop = 320;
 								}
+
 								this.bgLoops = Main.screenWidth / Main.bgW + 2;
 								if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 								{
@@ -54820,6 +_,7 @@
 									}
 								}
 							}
+
 							if (Main.snowBG[1] >= 0)
 							{
 								Main.bgScale = 1.31f;
@@ -54835,6 +_,7 @@
 									this.bgTop = 400;
 									this.bgStart -= 80;
 								}
+
 								this.bgLoops = Main.screenWidth / Main.bgW + 2;
 								if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 								{
@@ -54844,6 +_,7 @@
 									}
 								}
 							}
+
 							if (Main.snowBG[2] >= 0)
 							{
 								Main.bgScale = 1.34f;
@@ -54859,6 +_,7 @@
 									this.bgTop = 480;
 									this.bgStart -= 120;
 								}
+
 								this.bgLoops = Main.screenWidth / Main.bgW + 2;
 								if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 								{
@@ -54869,6 +_,7 @@
 								}
 							}
 						}
+
 						if (Main.bgAlpha[num21] > 0f && num21 == 8)
 						{
 							Main.bgScale = 1.25f;
@@ -54883,14 +_,17 @@
 							{
 								this.bgTop += 50;
 							}
+
 							if (Main.crimsonBG[0] == 174)
 							{
 								this.bgTop -= 350;
 							}
+
 							if (Main.gameMenu)
 							{
 								this.bgTop = 320;
 							}
+
 							this.bgLoops = Main.screenWidth / Main.bgW + 2;
 							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 							{
@@ -54899,6 +_,7 @@
 									Main.spriteBatch.Draw(Main.backgroundTexture[Main.crimsonBG[0]], new Vector2((float)(this.bgStart + Main.bgW * num41), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.crimsonBG[0]], Main.backgroundHeight[Main.crimsonBG[0]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 								}
 							}
+
 							Main.bgScale = 1.31f;
 							Main.bgScale *= 2f;
 							if (Main.crimsonBG[1] > -1)
@@ -54914,6 +_,7 @@
 									this.bgTop = 400;
 									this.bgStart -= 80;
 								}
+
 								this.bgLoops = Main.screenWidth / Main.bgW + 2;
 								if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 								{
@@ -54923,6 +_,7 @@
 									}
 								}
 							}
+
 							Main.bgScale = 1.34f;
 							Main.bgScale *= 2f;
 							this.LoadBackground(Main.crimsonBG[2]);
@@ -54936,11 +_,13 @@
 								this.bgTop = 480;
 								this.bgStart -= 120;
 							}
+
 							if (Main.crimsonBG[2] == 175)
 							{
 								this.bgStart -= 1000;
 								this.bgTop -= 400;
 							}
+
 							this.bgLoops = Main.screenWidth / Main.bgW + 2;
 							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 							{
@@ -54950,6 +_,8 @@
 								}
 							}
 						}
+
+						//patch file: num21
 						if (Main.bgAlpha[num21] > 0f && num21 == 9)
 						{
 							float num44 = (float)Main.backColor.A / 255f;
@@ -54969,26 +_,32 @@
 							{
 								num46 = 255f;
 							}
+
 							if (num47 > 255f)
 							{
 								num47 = 255f;
 							}
+
 							if (num48 > 255f)
 							{
 								num48 = 255f;
 							}
+
 							if (num46 > (float)color2.R)
 							{
 								color2.R = (byte)num46;
 							}
+
 							if (num47 > (float)color2.G)
 							{
 								color2.G = (byte)num47;
 							}
+
 							if (num48 > (float)color2.B)
 							{
 								color2.B = (byte)num48;
 							}
+
 							Main.bgScale = 1.25f;
 							Main.bgScale *= 2f;
 							this.LoadBackground(46);
@@ -55001,6 +_,7 @@
 							{
 								this.bgTop = 320;
 							}
+
 							this.bgLoops = Main.screenWidth / Main.bgW + 2;
 							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 							{
@@ -55009,6 +_,7 @@
 									Main.spriteBatch.Draw(Main.backgroundTexture[46], new Vector2((float)(this.bgStart + Main.bgW * num49), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[46], Main.backgroundHeight[46])), color2, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 								}
 							}
+
 							color2 = Main.backColor;
 							num45 = (float)Main.rand.Next(28, 42) * 0.001f;
 							num45 += (float)(270 - (int)Main.mouseTextColor) / 5000f;
@@ -55025,26 +_,32 @@
 							{
 								num46 = 255f;
 							}
+
 							if (num47 > 255f)
 							{
 								num47 = 255f;
 							}
+
 							if (num48 > 255f)
 							{
 								num48 = 255f;
 							}
+
 							if (num46 > (float)color2.R)
 							{
 								color2.R = (byte)num46;
 							}
+
 							if (num47 > (float)color2.G)
 							{
 								color2.G = (byte)num47;
 							}
+
 							if (num48 > (float)color2.B)
 							{
 								color2.B = (byte)num48;
 							}
+
 							Main.bgScale = 1.32f;
 							Main.bgScale *= 2f;
 							this.LoadBackground(47);
@@ -55058,6 +_,7 @@
 								this.bgTop = 400;
 								this.bgStart -= 80;
 							}
+
 							this.bgLoops = Main.screenWidth / Main.bgW + 2;
 							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 							{
@@ -55066,6 +_,7 @@
 									Main.spriteBatch.Draw(Main.backgroundTexture[47], new Vector2((float)(this.bgStart + Main.bgW * num50), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[47], Main.backgroundHeight[47])), color2, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 								}
 							}
+
 							color2 = Main.backColor;
 							num45 = (float)Main.rand.Next(28, 42) * 0.001f;
 							num45 += (float)(270 - (int)Main.mouseTextColor) / 3000f;
@@ -55079,26 +_,32 @@
 							{
 								num46 = 255f;
 							}
+
 							if (num47 > 255f)
 							{
 								num47 = 255f;
 							}
+
 							if (num48 > 255f)
 							{
 								num48 = 255f;
 							}
+
 							if (num46 > (float)color2.R)
 							{
 								color2.R = (byte)num46;
 							}
+
 							if (num47 > (float)color2.G)
 							{
 								color2.G = (byte)num47;
 							}
+
 							if (num48 > (float)color2.B)
 							{
 								color2.B = (byte)num48;
 							}
+
 							Main.bgScale = 1.36f;
 							Main.bgScale *= 2f;
 							this.LoadBackground(48);
@@ -55112,6 +_,7 @@
 								this.bgTop = 480;
 								this.bgStart -= 120;
 							}
+
 							this.bgLoops = Main.screenWidth / Main.bgW + 2;
 							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 							{
@@ -55120,11 +_,15 @@
 									Main.spriteBatch.Draw(Main.backgroundTexture[48], new Vector2((float)(this.bgStart + Main.bgW * num51), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[48], Main.backgroundHeight[48])), color2, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 								}
 							}
+
 							SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f);
 						}
-					}
-				}
-			}
+
+						SurfaceBgStyleLoader.DrawCloseBackground(num21);
+					}
+				}
+			}
+
 			if (!Main.mapFullscreen && Main.cloudAlpha > 0f && (double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 			{
 				this.bgParallax = 0.1;
@@ -55145,10 +_,12 @@
 					Main.spriteBatch.Draw(Main.backgroundTexture[49], new Microsoft.Xna.Framework.Rectangle(this.bgStart + Main.backgroundWidth[49] * num52, this.bgTop, Main.backgroundWidth[49], Main.backgroundHeight[49]), color3);
 				}
 			}
+
 			if (!Main.mapFullscreen)
 			{
 				SkyManager.Instance.DrawRemainingDepth(Main.spriteBatch);
 			}
+
 			float num54 = (float)(Main.worldSurface + 2.0) * 16f - Main.screenPosition.Y;
 			float num55 = (float)Main.maxTilesY * 16f - (Main.screenPosition.Y + (float)Main.screenHeight);
 			num54 = MathHelper.Clamp(num54, 0f, (float)Main.screenHeight);
@@ -55166,6 +_,7 @@
 			{
 				zero = Vector2.Zero;
 			}
+
 			for (int i = 0; i < Main.player[Main.myPlayer].hitTile.data.Length; i++)
 			{
 				if (Main.player[Main.myPlayer].hitTile.data[i].type == crackType)
@@ -55182,10 +_,12 @@
 							{
 								flag = (flag && Main.tile[x, y].active());
 							}
+
 							if (flag && crackType == 2)
 							{
 								flag = (flag && Main.tile[x, y].wall != 0);
 							}
+
 							if (flag)
 							{
 								bool flag2 = false;
@@ -55216,6 +_,7 @@
 										flag2 = true;
 									}
 								}
+
 								if (flag2 && Main.tile[x, y].slope() == 0 && !Main.tile[x, y].halfBrick())
 								{
 									int num3 = 0;
@@ -55235,11 +_,13 @@
 									{
 										num3 = 0;
 									}
+
 									Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle(Main.player[Main.myPlayer].hitTile.data[i].crackStyle * 18, num3 * 18, 16, 16);
 									if (flag3)
 									{
 										value.X = (4 + Main.player[Main.myPlayer].hitTile.data[i].crackStyle / 2) * 18;
 									}
+
 									Main.spriteBatch.Draw(Main.tileCrackTexture, new Vector2((float)(x * 16 - (int)Main.screenPosition.X), (float)(y * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(value), Lighting.GetColor(x, y), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 								}
 							}
@@ -55261,6 +_,7 @@
 					{
 						Filters.Scene.Activate(Main.MonolithFilterNames[Main.monolithType], default(Vector2), new object[0]);
 					}
+
 					if (!SkyManager.Instance[Main.MonolithSkyNames[i]].IsActive())
 					{
 						SkyManager.Instance.Activate(Main.MonolithSkyNames[i], default(Vector2), new object[0]);
@@ -55272,12 +_,14 @@
 					{
 						Filters.Scene.Deactivate(Main.MonolithFilterNames[i], new object[0]);
 					}
+
 					if (SkyManager.Instance[Main.MonolithSkyNames[i]].IsActive())
 					{
 						SkyManager.Instance.Deactivate(Main.MonolithSkyNames[i], new object[0]);
 					}
 				}
 			}
+
 #endif
 		}
 
@@ -55300,10 +_,24 @@
 
 		private void DoDraw(GameTime gameTime)
 		{
+			try
+			{
+				do_Draw(gameTime);
+			}
+			catch (Exception e)
+			{
+				ErrorLogger.LogException(e);
+				throw;
+			}
+		}
+
+		protected void do_Draw(GameTime gameTime)
+		{
 			if (Main._drawCycleCounter == 0uL)
 			{
 				Main._tileFrameSeed = Utils.RandomNextSeed(Main._tileFrameSeed);
 			}
+
 			Main._drawCycleCounter = (Main._drawCycleCounter + 1uL) % 5uL;
 			Main.MenuUI.IsVisible = (Main.gameMenu && Main.menuMode == 888);
 			Main.InGameUI.IsVisible = (!Main.gameMenu && Main.InGameUI.CurrentState != null);
@@ -55314,6 +_,7 @@
 			{
 				this.lookForColorTiles();
 			}
+
 			TimeLogger.DetailedDrawTime(0);
 			if (Main.loadMap)
 			{
@@ -55321,6 +_,7 @@
 				this.DrawToMap();
 				TimeLogger.DetailedDrawTime(1);
 			}
+
 			if (Lighting.lightMode >= 2)
 			{
 				Main.drawToScreen = true;
@@ -55329,14 +_,17 @@
 			{
 				Main.drawToScreen = false;
 			}
+
 			if (Main.drawToScreen && Main.targetSet)
 			{
 				this.ReleaseTargets();
 			}
+
 			if (!Main.drawToScreen && !Main.targetSet)
 			{
 				this.InitTargets();
 			}
+
 			Stopwatch stopwatch = new Stopwatch();
 			stopwatch.Start();
 			Main.fpsCount++;
@@ -55344,6 +_,7 @@
 			{
 				Main.maxQ = true;
 			}
+
 #if CLIENT
 			this.UpdateDisplaySettings();
 #endif
@@ -55351,6 +_,7 @@
 			{
 				Main.OnPreDraw(gameTime);
 			}
+
 			Main.drawTime++;
 			Main.screenLastPosition = Main.screenPosition;
 			if (Main.stackSplit == 0)
@@ -55387,6 +_,7 @@
 				{
 					num = 5;
 				}
+
 				if (Main.stackCounter >= num)
 				{
 					Main.stackDelay--;
@@ -55395,22 +_,27 @@
 						Main.stackDelay = 2;
 						Main.superFastStack++;
 					}
+
 					Main.stackCounter = 0;
 				}
 			}
+
 			if (Main.myPlayer >= 0)
 			{
 				Main.player[Main.myPlayer].lastMouseInterface = Main.player[Main.myPlayer].mouseInterface;
 				Main.player[Main.myPlayer].mouseInterface = false;
 			}
+
 			if (Main.mapTime > 0)
 			{
 				Main.mapTime--;
 			}
+
 			if (Main.gameMenu)
 			{
 				Main.mapTime = Main.mapTimeMax;
 			}
+
 			Main.toolTip = new Item();
 			Vector3 value = new Vector3(1f, 1f, 1f);
 			Vector3 vector = Vector3.One / value;
@@ -55421,6 +_,7 @@
 				{
 					Main.cameraX = 0f;
 				}
+
 				if (Main.cameraX > 0f)
 				{
 					Main.cameraX -= 1f;
@@ -55429,6 +_,7 @@
 						Main.cameraX = 0f;
 					}
 				}
+
 				if (Main.cameraX < 0f)
 				{
 					Main.cameraX += 1f;
@@ -55437,6 +_,7 @@
 						Main.cameraX = 0f;
 					}
 				}
+
 				Vector2 value2 = Main.screenPosition;
 				Main.screenPosition.X = Main.player[Main.myPlayer].position.X + (float)Main.player[Main.myPlayer].width * 0.5f - (float)Main.screenWidth * 0.5f * vector.X + Main.cameraX;
 				Main.screenPosition.Y = Main.player[Main.myPlayer].position.Y + (float)Main.player[Main.myPlayer].height - (float)num2 - (float)Main.screenHeight * 0.5f * vector.Y + Main.player[Main.myPlayer].gfxOffY;
@@ -55467,6 +_,8 @@
 							{
 								num6 = 0.5f;
 							}
+
+							PlayerHooks.ModifyZoom(Main.player[Main.myPlayer], ref num6);
 							Vector2 vector2 = (Main.MouseScreen - new Vector2((float)Main.screenWidth, (float)Main.screenHeight) / 2f) / (new Vector2((float)Main.screenWidth, (float)Main.screenHeight) / 2f);
 							Vector2 vector3 = vector2;
 							num5 = 48f;
@@ -55487,20 +_,26 @@
 						{
 							num7 = Main.screenWidth;
 						}
+
 						if (num7 < 0)
 						{
 							num7 = 0;
 						}
+
 						if (num8 > Main.screenHeight)
 						{
 							num8 = Main.screenHeight;
 						}
+
 						if (num8 < 0)
 						{
 							num8 = 0;
 						}
-						num3 = (float)(num7 - Main.screenWidth / 2) / 1.25f;
-						num4 = (float)(num8 - Main.screenHeight / 2) / 1.25f;
+
+						float zoom = .8f;
+						PlayerHooks.ModifyZoom(Main.player[Main.myPlayer], ref zoom);
+						num3 = (float)(num7 - Main.screenWidth / 2) * zoom;
+						num4 = (float)(num8 - Main.screenHeight / 2) * zoom;
 					}
 					else if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type == 1254 && Main.mouseRight)
 					{
@@ -55510,20 +_,26 @@
 						{
 							num9 = Main.screenWidth;
 						}
+
 						if (num9 < 0)
 						{
 							num9 = 0;
 						}
+
 						if (num10 > Main.screenHeight)
 						{
 							num10 = Main.screenHeight;
 						}
+
 						if (num10 < 0)
 						{
 							num10 = 0;
 						}
-						num3 = (float)(num9 - Main.screenWidth / 2) / 1.5f;
-						num4 = (float)(num10 - Main.screenHeight / 2) / 1.5f;
+
+						float zoom = 0.6666667f;
+						PlayerHooks.ModifyZoom(Main.player[Main.myPlayer], ref zoom);
+						num3 = (float)(num9 - Main.screenWidth / 2) * zoom;
+						num4 = (float)(num10 - Main.screenHeight / 2) * zoom;
 					}
 					else if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type == 1299 && Main.player[Main.myPlayer].selectedItem != 58)
 					{
@@ -55533,20 +_,26 @@
 						{
 							num11 = Main.screenWidth;
 						}
+
 						if (num11 < 0)
 						{
 							num11 = 0;
 						}
+
 						if (num12 > Main.screenHeight)
 						{
 							num12 = Main.screenHeight;
 						}
+
 						if (num12 < 0)
 						{
 							num12 = 0;
 						}
-						num3 = (float)(num11 - Main.screenWidth / 2) / 1.5f;
-						num4 = (float)(num12 - Main.screenHeight / 2) / 1.5f;
+
+						float zoom = 0.6666667f;
+						PlayerHooks.ModifyZoom(Main.player[Main.myPlayer], ref zoom);
+						num3 = (float)(num11 - Main.screenWidth / 2) * zoom;
+						num4 = (float)(num12 - Main.screenHeight / 2) * zoom;
 					}
 					else if (Main.player[Main.myPlayer].scope && Main.mouseRight)
 					{
@@ -55556,30 +_,71 @@
 						{
 							num13 = Main.screenWidth;
 						}
+
 						if (num13 < 0)
 						{
 							num13 = 0;
 						}
+
 						if (num14 > Main.screenHeight)
 						{
 							num14 = Main.screenHeight;
 						}
+
 						if (num14 < 0)
 						{
 							num14 = 0;
 						}
-						num3 = (float)(num13 - Main.screenWidth / 2) / 2f;
-						num4 = (float)(num14 - Main.screenHeight / 2) / 2f;
-					}
-				}
+
+						float zoom = 0.5f;
+						PlayerHooks.ModifyZoom(Main.player[Main.myPlayer], ref zoom);
+						num3 = (float)(num13 - Main.screenWidth / 2) * zoom;
+						num4 = (float)(num14 - Main.screenHeight / 2) * zoom;
+					}
+					else
+					{
+						int mouseXClamped = Main.mouseX;
+						int mouseYClamped = Main.mouseY;
+						if (mouseXClamped > Main.screenWidth)
+						{
+							mouseXClamped = Main.screenWidth;
+						}
+
+						if (mouseXClamped < 0)
+						{
+							mouseXClamped = 0;
+						}
+
+						if (mouseYClamped > Main.screenHeight)
+						{
+							mouseYClamped = Main.screenHeight;
+						}
+
+						if (mouseYClamped < 0)
+						{
+							mouseYClamped = 0;
+						}
+
+						float zoom = -1f;
+						PlayerHooks.ModifyZoom(Main.player[Main.myPlayer], ref zoom);
+						if (zoom != -1f)
+						{
+							num3 = (float)(mouseXClamped - Main.screenWidth / 2) * zoom;
+							num4 = (float)(mouseYClamped - Main.screenHeight / 2) * zoom;
+						}
+					}
+				}
+
 				if (float.IsNaN(Main.zoomX))
 				{
 					Main.zoomX = 0f;
 				}
+
 				if (float.IsNaN(Main.zoomY))
 				{
 					Main.zoomY = 0f;
 				}
+
 				float num15 = num3 - Main.zoomX;
 				float num16 = num4 - Main.zoomY;
 				float num17 = (float)Math.Sqrt((double)(num15 * num15 + num16 * num16));
@@ -55597,6 +_,7 @@
 					Main.zoomX += num15;
 					Main.zoomY += num16;
 				}
+
 				Main.screenPosition.X = Main.screenPosition.X + Main.zoomX;
 				Main.screenPosition.Y = Main.screenPosition.Y + Main.zoomY * Main.player[Main.myPlayer].gravDir;
 				if (Main.cameraLerp > 0f)
@@ -55612,9 +_,12 @@
 						Main.screenPosition = Vector2.Lerp(value2, Main.screenPosition, Main.cameraLerp);
 					}
 				}
+
 				Main.screenPosition.X = (float)((int)Main.screenPosition.X);
 				Main.screenPosition.Y = (float)((int)Main.screenPosition.Y);
-			}
+				PlayerHooks.ModifyScreenPosition(Main.player[Main.myPlayer]);
+			}
+
 			if (!Main.gameMenu && Main.netMode != 2)
 			{
 				if (Main.screenPosition.X < Main.leftWorld + 640f + 16f)
@@ -55625,6 +_,7 @@
 				{
 					Main.screenPosition.X = Main.rightWorld - (float)Main.screenWidth - 640f - 32f;
 				}
+
 				if (Main.screenPosition.Y < Main.topWorld + 640f + 16f)
 				{
 					Main.screenPosition.Y = Main.topWorld + 640f + 16f;
@@ -55634,6 +_,7 @@
 					Main.screenPosition.Y = Main.bottomWorld - (float)Main.screenHeight - 640f - 32f;
 				}
 			}
+
 			Main.CheckMonoliths();
 			if (Main.showSplash)
 			{
@@ -55642,11 +_,13 @@
 				TimeLogger.EndDrawFrame();
 				return;
 			}
+
 			Main.sunCircle += 0.01f;
 			if ((double)Main.sunCircle > 6.285)
 			{
 				Main.sunCircle -= 6.285f;
 			}
+
 			TimeLogger.DetailedDrawReset();
 			if (!Main.gameMenu)
 			{
@@ -55685,24 +_,28 @@
 						Main.sceneTilePos.X = Main.screenPosition.X - (float)Main.offScreenRange;
 						Main.sceneTilePos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
 					}
+
 					if (Main.renderCount == 3)
 					{
 						this.RenderTiles2();
 						Main.sceneTile2Pos.X = Main.screenPosition.X - (float)Main.offScreenRange;
 						Main.sceneTile2Pos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
 					}
+
 					if (Main.renderCount == 3)
 					{
 						this.RenderWalls();
 						Main.sceneWallPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
 						Main.sceneWallPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
 					}
+
 					if (Main.renderCount == 2)
 					{
 						this.RenderBackground();
 						Main.sceneBackgroundPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
 						Main.sceneBackgroundPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
 					}
+
 					if (Main.renderCount == 1)
 					{
 						this.RenderWater();
@@ -55710,6 +_,7 @@
 						Main.sceneWaterPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
 					}
 				}
+
 				if (Main.render && !Main.gameMenu)
 				{
 					if (Math.Abs(Main.sceneTilePos.X - (Main.screenPosition.X - (float)Main.offScreenRange)) > (float)Main.offScreenRange || Math.Abs(Main.sceneTilePos.Y - (Main.screenPosition.Y - (float)Main.offScreenRange)) > (float)Main.offScreenRange)
@@ -55718,24 +_,28 @@
 						Main.sceneTilePos.X = Main.screenPosition.X - (float)Main.offScreenRange;
 						Main.sceneTilePos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
 					}
+
 					if (Math.Abs(Main.sceneTile2Pos.X - (Main.screenPosition.X - (float)Main.offScreenRange)) > (float)Main.offScreenRange || Math.Abs(Main.sceneTile2Pos.Y - (Main.screenPosition.Y - (float)Main.offScreenRange)) > (float)Main.offScreenRange)
 					{
 						this.RenderTiles2();
 						Main.sceneTile2Pos.X = Main.screenPosition.X - (float)Main.offScreenRange;
 						Main.sceneTile2Pos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
 					}
+
 					if (Math.Abs(Main.sceneBackgroundPos.X - (Main.screenPosition.X - (float)Main.offScreenRange)) > (float)Main.offScreenRange || Math.Abs(Main.sceneBackgroundPos.Y - (Main.screenPosition.Y - (float)Main.offScreenRange)) > (float)Main.offScreenRange)
 					{
 						this.RenderBackground();
 						Main.sceneBackgroundPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
 						Main.sceneBackgroundPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
 					}
+
 					if (Math.Abs(Main.sceneWallPos.X - (Main.screenPosition.X - (float)Main.offScreenRange)) > (float)Main.offScreenRange || Math.Abs(Main.sceneWallPos.Y - (Main.screenPosition.Y - (float)Main.offScreenRange)) > (float)Main.offScreenRange)
 					{
 						this.RenderWalls();
 						Main.sceneWallPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
 						Main.sceneWallPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
 					}
+
 					if (Math.Abs(Main.sceneWaterPos.X - (Main.screenPosition.X - (float)Main.offScreenRange)) > (float)Main.offScreenRange || Math.Abs(Main.sceneWaterPos.Y - (Main.screenPosition.Y - (float)Main.offScreenRange)) > (float)Main.offScreenRange)
 					{
 						this.RenderWater();
@@ -55744,6 +_,7 @@
 					}
 				}
 			}
+
 			if (!Main.loadMap)
 			{
 				if (!Main.gameMenu)
@@ -55759,8 +_,10 @@
 						this.DrawToMap_Section(secX, secY);
 						num19++;
 					}
+
 					TimeLogger.DetailedDrawTime(3);
 				}
+
 				if (Main.updateMap)
 				{
 					if (base.IsActive || Main.netMode == 1)
@@ -55770,6 +_,7 @@
 							Main.refreshMap = false;
 							Main.sectionManager.ClearMapDraw();
 						}
+
 						this.DrawToMap();
 						Main.updateMap = false;
 					}
@@ -55777,9 +_,11 @@
 					{
 						this.DrawToMap();
 					}
+
 					TimeLogger.DetailedDrawTime(4);
 				}
 			}
+
 			this.bgParallax = 0.1;
 			this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.backgroundWidth[Main.background]) - (double)(Main.backgroundWidth[Main.background] / 2));
 			this.bgLoops = Main.screenWidth / Main.backgroundWidth[Main.background] + 2;
@@ -55791,6 +_,7 @@
 			{
 				this.bgTop = -200;
 			}
+
 			int num20 = (int)(Main.time / 54000.0 * (double)(Main.screenWidth + Main.sunTexture.Width * 2)) - Main.sunTexture.Width;
 			int num21 = 0;
 			Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
@@ -55814,6 +_,7 @@
 					num26 = Math.Pow((Main.time / 54000.0 - 0.5) * 2.0, 2.0);
 					num21 = (int)((double)this.bgTop + num26 * 250.0 + 180.0);
 				}
+
 				num22 = (float)(1.2 - num26 * 0.4);
 			}
 			else
@@ -55829,8 +_,10 @@
 					num27 = Math.Pow((Main.time / 32400.0 - 0.5) * 2.0, 2.0);
 					num24 = (int)((double)this.bgTop + num27 * 250.0 + 180.0);
 				}
+
 				num25 = (float)(1.2 - num27 * 0.4);
 			}
+
 			if (Main.dayTime)
 			{
 				if (Main.time < 13500.0)
@@ -55843,6 +_,7 @@
 					Main.bgColor.G = (byte)(num28 * 220f + 35f);
 					Main.bgColor.B = (byte)(num28 * 220f + 35f);
 				}
+
 				if (Main.time > 45900.0)
 				{
 					float num28 = (float)(1.0 - (Main.time / 54000.0 - 0.85) * 6.666666666666667);
@@ -55864,6 +_,7 @@
 					Main.bgColor.B = (byte)(num28 * 85f + 170f);
 				}
 			}
+
 			if (!Main.dayTime)
 			{
 				if (Main.bloodMoon)
@@ -55913,11 +_,13 @@
 					Main.bgColor.B = (byte)(num28 * 30f + 5f);
 				}
 			}
+
 			float num29 = 0.0005f * (float)Main.dayRate;
 			if (Main.gameMenu)
 			{
 				num29 *= 20f;
 			}
+
 			if (Main.raining)
 			{
 				if (Main.cloudAlpha > Main.maxRaining)
@@ -55945,6 +_,7 @@
 					Main.cloudAlpha = 0f;
 				}
 			}
+
 			if (Main.cloudAlpha > 0f)
 			{
 				float num30 = 1f - Main.cloudAlpha * 0.9f;
@@ -55952,6 +_,7 @@
 				Main.bgColor.G = (byte)((float)Main.bgColor.G * num30);
 				Main.bgColor.B = (byte)((float)Main.bgColor.B * num30);
 			}
+
 			if (Main.gameMenu || Main.netMode == 2)
 			{
 				this.bgTop = 0;
@@ -55962,11 +_,13 @@
 					Main.bgColor.B = 35;
 				}
 			}
+
 			if (Main.gameMenu)
 			{
 				Main.bgDelay = 1000;
 				Main.evilTiles = (int)(Main.bgAlpha[1] * 500f);
 			}
+
 			if (Main.evilTiles > 0)
 			{
 				float num31 = (float)Main.evilTiles / 500f;
@@ -55974,6 +_,7 @@
 				{
 					num31 = 1f;
 				}
+
 				int num32 = (int)Main.bgColor.R;
 				int num33 = (int)Main.bgColor.G;
 				int num34 = (int)Main.bgColor.B;
@@ -55984,14 +_,17 @@
 				{
 					num32 = 15;
 				}
+
 				if (num33 < 15)
 				{
 					num33 = 15;
 				}
+
 				if (num34 < 15)
 				{
 					num34 = 15;
 				}
+
 				Main.bgColor.R = (byte)num32;
 				Main.bgColor.G = (byte)num33;
 				Main.bgColor.B = (byte)num34;
@@ -56005,14 +_,17 @@
 				{
 					num32 = 15;
 				}
+
 				if (num33 < 15)
 				{
 					num33 = 15;
 				}
+
 				if (num34 < 15)
 				{
 					num34 = 15;
 				}
+
 				white.R = (byte)num32;
 				white.G = (byte)num33;
 				white.B = (byte)num34;
@@ -56026,18 +_,22 @@
 				{
 					num32 = 15;
 				}
+
 				if (num33 < 15)
 				{
 					num33 = 15;
 				}
+
 				if (num34 < 15)
 				{
 					num34 = 15;
 				}
+
 				white2.R = (byte)num32;
 				white2.G = (byte)num33;
 				white2.B = (byte)num34;
 			}
+
 			if (Main.bloodTiles > 0)
 			{
 				float num35 = (float)Main.bloodTiles / 400f;
@@ -56045,6 +_,7 @@
 				{
 					num35 = 1f;
 				}
+
 				int num36 = (int)Main.bgColor.R;
 				int num37 = (int)Main.bgColor.G;
 				int num38 = (int)Main.bgColor.B;
@@ -56055,14 +_,17 @@
 				{
 					num36 = 15;
 				}
+
 				if (num37 < 15)
 				{
 					num37 = 15;
 				}
+
 				if (num38 < 15)
 				{
 					num38 = 15;
 				}
+
 				Main.bgColor.R = (byte)num36;
 				Main.bgColor.G = (byte)num37;
 				Main.bgColor.B = (byte)num38;
@@ -56075,14 +_,17 @@
 				{
 					num36 = 15;
 				}
+
 				if (num37 < 15)
 				{
 					num37 = 15;
 				}
+
 				if (num38 < 15)
 				{
 					num38 = 15;
 				}
+
 				white.R = (byte)num36;
 				white.G = (byte)num37;
 				white.B = (byte)num38;
@@ -56096,18 +_,22 @@
 				{
 					num36 = 15;
 				}
+
 				if (num37 < 15)
 				{
 					num37 = 15;
 				}
+
 				if (num38 < 15)
 				{
 					num38 = 15;
 				}
+
 				white2.R = (byte)num36;
 				white2.G = (byte)num37;
 				white2.B = (byte)num38;
 			}
+
 			if (Main.jungleTiles > 0)
 			{
 				float num39 = (float)Main.jungleTiles / 200f;
@@ -56115,6 +_,7 @@
 				{
 					num39 = 1f;
 				}
+
 				int num40 = (int)Main.bgColor.R;
 				int num41 = (int)Main.bgColor.G;
 				int num42 = (int)Main.bgColor.B;
@@ -56124,22 +_,27 @@
 				{
 					num41 = 255;
 				}
+
 				if (num41 < 15)
 				{
 					num41 = 15;
 				}
+
 				if (num40 > 255)
 				{
 					num40 = 255;
 				}
+
 				if (num40 < 15)
 				{
 					num40 = 15;
 				}
+
 				if (num42 < 15)
 				{
 					num42 = 15;
 				}
+
 				Main.bgColor.R = (byte)num40;
 				Main.bgColor.G = (byte)num41;
 				Main.bgColor.B = (byte)num42;
@@ -56152,14 +_,17 @@
 				{
 					num40 = 15;
 				}
+
 				if (num41 < 15)
 				{
 					num41 = 15;
 				}
+
 				if (num42 < 15)
 				{
 					num42 = 15;
 				}
+
 				white.R = (byte)num40;
 				white.G = (byte)num41;
 				white.B = (byte)num42;
@@ -56173,18 +_,22 @@
 				{
 					num40 = 15;
 				}
+
 				if (num41 < 15)
 				{
 					num41 = 15;
 				}
+
 				if (num42 < 15)
 				{
 					num42 = 15;
 				}
+
 				white2.R = (byte)num40;
 				white2.G = (byte)num41;
 				white2.B = (byte)num42;
 			}
+
 			if (Main.shroomTiles > 0)
 			{
 				float num43 = (float)Main.shroomTiles / 160f;
@@ -56192,6 +_,7 @@
 				{
 					Main.shroomLight += 0.01f;
 				}
+
 				if (num43 < Main.shroomLight)
 				{
 					Main.shroomLight -= 0.01f;
@@ -56201,14 +_,17 @@
 			{
 				Main.shroomLight -= 0.02f;
 			}
+
 			if (Main.shroomLight < 0f)
 			{
 				Main.shroomLight = 0f;
 			}
+
 			if (Main.shroomLight > 1f)
 			{
 				Main.shroomLight = 1f;
 			}
+
 			if (Main.shroomLight > 0f)
 			{
 				float num44 = Main.shroomLight;
@@ -56222,14 +_,17 @@
 				{
 					num46 = 15;
 				}
+
 				if (num45 < 15)
 				{
 					num45 = 15;
 				}
+
 				if (num47 < 15)
 				{
 					num47 = 15;
 				}
+
 				Main.bgColor.R = (byte)num45;
 				Main.bgColor.G = (byte)num46;
 				Main.bgColor.B = (byte)num47;
@@ -56243,14 +_,17 @@
 				{
 					num45 = 15;
 				}
+
 				if (num46 < 15)
 				{
 					num46 = 15;
 				}
+
 				if (num47 < 15)
 				{
 					num47 = 15;
 				}
+
 				white.R = (byte)num45;
 				white.G = (byte)num46;
 				white.B = (byte)num47;
@@ -56264,28 +_,34 @@
 				{
 					num45 = 15;
 				}
+
 				if (num46 < 15)
 				{
 					num46 = 15;
 				}
+
 				if (num47 < 15)
 				{
 					num47 = 15;
 				}
+
 				white2.R = (byte)num45;
 				white2.G = (byte)num46;
 				white2.B = (byte)num47;
 			}
+
 			if (Lighting.lightMode < 2)
 			{
 				if (Main.bgColor.R < 10)
 				{
 					Main.bgColor.R = 10;
 				}
+
 				if (Main.bgColor.G < 10)
 				{
 					Main.bgColor.G = 10;
 				}
+
 				if (Main.bgColor.B < 10)
 				{
 					Main.bgColor.B = 10;
@@ -56297,30 +_,36 @@
 				{
 					Main.bgColor.R = 15;
 				}
+
 				if (Main.bgColor.G < 15)
 				{
 					Main.bgColor.G = 15;
 				}
+
 				if (Main.bgColor.B < 15)
 				{
 					Main.bgColor.B = 15;
 				}
 			}
+
 			if (Main.bloodMoon)
 			{
 				if (Main.bgColor.R < 25)
 				{
 					Main.bgColor.R = 25;
 				}
+
 				if (Main.bgColor.G < 25)
 				{
 					Main.bgColor.G = 25;
 				}
+
 				if (Main.bgColor.B < 25)
 				{
 					Main.bgColor.B = 25;
 				}
 			}
+
 			if (Main.eclipse && Main.dayTime)
 			{
 				float num48 = 1242f;
@@ -56338,6 +_,7 @@
 					Main.eclipseLight = 0f;
 				}
 			}
+
 			if (Main.eclipseLight > 0f)
 			{
 				float num49 = 1f - 0.925f * Main.eclipseLight;
@@ -56356,26 +_,31 @@
 				{
 					Main.bgColor.R = 20;
 				}
+
 				if (Main.bgColor.G < 10)
 				{
 					Main.bgColor.G = 10;
 				}
+
 				if (Lighting.lightMode >= 2)
 				{
 					if (Main.bgColor.R < 20)
 					{
 						Main.bgColor.R = 20;
 					}
+
 					if (Main.bgColor.G < 14)
 					{
 						Main.bgColor.G = 14;
 					}
+
 					if (Main.bgColor.B < 6)
 					{
 						Main.bgColor.B = 6;
 					}
 				}
 			}
+
 			Main.tileColor.A = 255;
 			Main.tileColor.R = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.R * 7) / 10);
 			Main.tileColor.G = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.G * 7) / 10);
@@ -56388,14 +_,17 @@
 			{
 				Main.atmo = 0f;
 			}
+
 			if (Main.atmo > 1f)
 			{
 				Main.atmo = 1f;
 			}
+
 			if (Main.gameMenu)
 			{
 				Main.atmo = 1f;
 			}
+
 			Main.bgColor.R = (byte)((float)Main.bgColor.R * Main.atmo);
 			Main.bgColor.G = (byte)((float)Main.bgColor.G * Main.atmo);
 			Main.bgColor.B = (byte)((float)Main.bgColor.B * Main.atmo);
@@ -56406,6 +_,7 @@
 				Main.bgColor.B = 0;
 				Main.bgColor.A = 0;
 			}
+
 			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Black);
 			base.Draw(gameTime);
 			if (Main.gameMenu || Main.player[Main.myPlayer].gravDir == 1f)
@@ -56418,11 +_,14 @@
 				Main.Transform = Matrix.CreateScale(value.X, -value.Y, value.Z) * Matrix.CreateRotationZ(0f) * Matrix.CreateTranslation(new Vector3(0f, (float)Main.screenHeight, 0f));
 				this.Rasterizer = RasterizerState.CullClockwise;
 			}
+
+			Transform = ModHooks.ModifyTransformMatrix(Transform);
 			bool flag = !Main.drawToScreen && Main.netMode != 2 && !Main.gameMenu && !Main.mapFullscreen && Filters.Scene.CanCapture();
 			if (flag)
 			{
 				Filters.Scene.BeginCapture();
 			}
+
 			Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, Main.Transform);
 			TimeLogger.DetailedDrawReset();
 			if (!Main.mapFullscreen)
@@ -56434,8 +_,10 @@
 					{
 						Main.spriteBatch.Draw(Main.backgroundTexture[Main.background], new Microsoft.Xna.Framework.Rectangle(this.bgStart + Main.backgroundWidth[Main.background] * i, this.bgTop, Main.backgroundWidth[Main.background], Main.backgroundHeight[Main.background]), Main.bgColor);
 					}
+
 					TimeLogger.DetailedDrawTime(6);
 				}
+
 				if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0 && 255f * (1f - Main.cloudAlpha) - (float)Main.bgColor.R - 25f > 0f && Main.netMode != 2)
 				{
 					for (int j = 0; j < Main.numStars; j++)
@@ -56446,11 +_,13 @@
 						{
 							num56 = 1f;
 						}
+
 						num56 = 1f - num56 * 0.5f;
 						if (Main.evilTiles <= 0)
 						{
 							num56 = 1f;
 						}
+
 						int num57 = (int)((float)(255 - Main.bgColor.R - 100) * Main.star[j].twinkle * num56);
 						int num58 = (int)((float)(255 - Main.bgColor.G - 100) * Main.star[j].twinkle * num56);
 						int num59 = (int)((float)(255 - Main.bgColor.B - 100) * Main.star[j].twinkle * num56);
@@ -56458,14 +_,17 @@
 						{
 							num57 = 0;
 						}
+
 						if (num58 < 0)
 						{
 							num58 = 0;
 						}
+
 						if (num59 < 0)
 						{
 							num59 = 0;
 						}
+
 						color.R = (byte)num57;
 						color.G = (byte)((float)num58 * num56);
 						color.B = (byte)((float)num59 * num56);
@@ -56474,6 +_,7 @@
 						Main.spriteBatch.Draw(Main.starTexture[Main.star[j].type], new Vector2(num60 + (float)Main.starTexture[Main.star[j].type].Width * 0.5f, num61 + (float)Main.starTexture[Main.star[j].type].Height * 0.5f + (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.starTexture[Main.star[j].type].Width, Main.starTexture[Main.star[j].type].Height)), color, Main.star[j].rotation, new Vector2((float)Main.starTexture[Main.star[j].type].Width * 0.5f, (float)Main.starTexture[Main.star[j].type].Height * 0.5f), Main.star[j].scale * Main.star[j].twinkle, SpriteEffects.None, 0f);
 					}
 				}
+
 				if ((double)(Main.screenPosition.Y / 16f) < Main.worldSurface + 2.0)
 				{
 					if (Main.dayTime)
@@ -56487,6 +_,7 @@
 							{
 								num62 = 0f;
 							}
+
 							Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num62)), (int)((byte)((float)white.G * num62)), (int)((byte)((float)white.B * num62)), (int)((byte)(255f * num62)));
 							Microsoft.Xna.Framework.Color color3 = new Microsoft.Xna.Framework.Color((int)((byte)((float)white.R * num62)), (int)((byte)((float)white.G * num62)), (int)((byte)((float)white.B * num62)), (int)((byte)((float)(white.B - 60) * num62)));
 							Main.spriteBatch.Draw(Main.sun3Texture, new Vector2((float)num20, (float)(num21 + (int)Main.sunModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.sun3Texture.Width, Main.sun3Texture.Height)), color2, rotation, new Vector2((float)(Main.sun3Texture.Width / 2), (float)(Main.sun3Texture.Height / 2)), num22, SpriteEffects.None, 0f);
@@ -56500,6 +_,7 @@
 							{
 								num63 = 0f;
 							}
+
 							Microsoft.Xna.Framework.Color color4 = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num63)), (int)((byte)((float)white.G * num63)), (int)((byte)((float)white.B * num63)), (int)((byte)(255f * num63)));
 							Microsoft.Xna.Framework.Color color5 = new Microsoft.Xna.Framework.Color((int)((byte)((float)white.R * num63)), (int)((byte)((float)white.G * num63)), (int)((byte)((float)white.B * num63)), (int)((byte)((float)(white.B - 60) * num63)));
 							Main.spriteBatch.Draw(Main.sun2Texture, new Vector2((float)num20, (float)(num21 + (int)Main.sunModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.sun2Texture.Width, Main.sun2Texture.Height)), color4, rotation, new Vector2((float)(Main.sun2Texture.Width / 2), (float)(Main.sun2Texture.Height / 2)), num22, SpriteEffects.None, 0f);
@@ -56513,12 +_,14 @@
 							{
 								num64 = 0f;
 							}
+
 							Microsoft.Xna.Framework.Color color6 = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num64)), (int)((byte)((float)white.G * num64)), (int)((byte)((float)white.B * num64)), (int)((byte)(255f * num64)));
 							Microsoft.Xna.Framework.Color color7 = new Microsoft.Xna.Framework.Color((int)((byte)((float)white.R * num64)), (int)((byte)((float)white.G * num64)), (int)((byte)((float)white.B * num64)), (int)((byte)((float)white.B * num64)));
 							Main.spriteBatch.Draw(Main.sunTexture, new Vector2((float)num20, (float)(num21 + (int)Main.sunModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.sunTexture.Width, Main.sunTexture.Height)), color6, rotation, new Vector2((float)(Main.sunTexture.Width / 2), (float)(Main.sunTexture.Height / 2)), num22, SpriteEffects.None, 0f);
 							Main.spriteBatch.Draw(Main.sunTexture, new Vector2((float)num20, (float)(num21 + (int)Main.sunModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.sunTexture.Width, Main.sunTexture.Height)), color7, rotation, new Vector2((float)(Main.sunTexture.Width / 2), (float)(Main.sunTexture.Height / 2)), num22, SpriteEffects.None, 0f);
 						}
 					}
+
 					if (!Main.dayTime)
 					{
 						float num65 = 1f - Main.cloudAlpha * 1.5f;
@@ -56526,6 +_,7 @@
 						{
 							num65 = 0f;
 						}
+
 						white2.R = (byte)((float)white2.R * num65);
 						white2.G = (byte)((float)white2.G * num65);
 						white2.B = (byte)((float)white2.B * num65);
@@ -56544,6 +_,7 @@
 						}
 					}
 				}
+
 				Microsoft.Xna.Framework.Rectangle value4;
 				if (Main.dayTime)
 				{
@@ -56553,6 +_,7 @@
 				{
 					value4 = new Microsoft.Xna.Framework.Rectangle((int)((double)num23 - (double)Main.moonTexture[Main.moonType].Width * 0.5 * (double)num25), (int)((double)num24 - (double)Main.moonTexture[Main.moonType].Width * 0.5 * (double)num25 + (double)Main.moonModY), (int)((float)Main.moonTexture[Main.moonType].Width * num25), (int)((float)Main.moonTexture[Main.moonType].Width * num25));
 				}
+
 				Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(Main.mouseX, Main.mouseY, 1, 1);
 				Main.sunModY = (short)((double)Main.sunModY * 0.999);
 				Main.moonModY = (short)((double)Main.moonModY * 0.999);
@@ -56580,14 +_,17 @@
 									Main.time = 32390.0;
 								}
 							}
+
 							if (Main.time < 10.0)
 							{
 								Main.time = 10.0;
 							}
+
 							if (Main.netMode != 0)
 							{
 								NetMessage.SendData(18, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
 							}
+
 							Main.grabSky = true;
 						}
 					}
@@ -56596,8 +_,10 @@
 						Main.grabSky = false;
 					}
 				}
+
 				TimeLogger.DetailedDrawTime(7);
 			}
+
 			Overlays.Scene.Draw(Main.spriteBatch, RenderLayers.Sky);
 			this.DrawBG();
 			Main.spriteBatch.End();
@@ -56611,6 +_,7 @@
 				{
 					array[k] = new Microsoft.Xna.Framework.Rectangle(k * 4, 0, 2, 40);
 				}
+
 				Microsoft.Xna.Framework.Color color8 = Main.bgColor * 0.85f;
 				for (int l = 0; l < Main.maxRain; l++)
 				{
@@ -56624,11 +_,13 @@
 						}
 					}
 				}
+
 				this.DrawMenu(gameTime);
 				TimeLogger.MenuDrawTime(stopwatch.Elapsed.TotalMilliseconds);
 				TimeLogger.EndDrawFrame();
 				return;
 			}
+
 			this.firstTileX = (int)(Main.screenPosition.X / 16f - 1f);
 			this.lastTileX = (int)((Main.screenPosition.X + (float)Main.screenWidth) / 16f) + 2;
 			this.firstTileY = (int)(Main.screenPosition.Y / 16f - 1f);
@@ -56637,22 +_,27 @@
 			{
 				this.firstTileX = 0;
 			}
+
 			if (this.lastTileX > Main.maxTilesX)
 			{
 				this.lastTileX = Main.maxTilesX;
 			}
+
 			if (this.firstTileY < 0)
 			{
 				this.firstTileY = 0;
 			}
+
 			if (this.lastTileY > Main.maxTilesY)
 			{
 				this.lastTileY = Main.maxTilesY;
 			}
+
 			if (!Main.drawSkip)
 			{
 				Lighting.LightTiles(this.firstTileX, this.lastTileX, this.firstTileY, this.lastTileY);
 			}
+
 			TimeLogger.DetailedDrawReset();
 			if (!Main.mapFullscreen)
 			{
@@ -56667,6 +_,7 @@
 					Main.spriteBatch.Draw(this.backWaterTarget, Main.sceneBackgroundPos - Main.screenPosition, Microsoft.Xna.Framework.Color.White);
 					TimeLogger.DetailedDrawTime(11);
 				}
+
 				Overlays.Scene.Draw(Main.spriteBatch, RenderLayers.BackgroundWater);
 				float x = (Main.sceneBackgroundPos.X - Main.screenPosition.X + (float)Main.offScreenRange) * Main.caveParallax - (float)Main.offScreenRange;
 				if (Main.drawToScreen)
@@ -56680,6 +_,7 @@
 					Main.spriteBatch.Draw(this.backgroundTarget, new Vector2(x, Main.sceneBackgroundPos.Y - Main.screenPosition.Y), Microsoft.Xna.Framework.Color.White);
 					TimeLogger.DetailedDrawTime(12);
 				}
+
 				Overlays.Scene.Draw(Main.spriteBatch, RenderLayers.Background);
 				Sandstorm.DrawGrains(Main.spriteBatch);
 				ScreenDarkness.DrawBack(Main.spriteBatch);
@@ -56693,6 +_,7 @@
 						Main.magmaBGFrame = 0;
 					}
 				}
+
 				try
 				{
 					this.CacheNPCDraws();
@@ -56712,6 +_,7 @@
 						Main.spriteBatch.Draw(this.wallTarget, Main.sceneWallPos - Main.screenPosition, Microsoft.Xna.Framework.Color.White);
 						TimeLogger.DetailedDrawTime(14);
 					}
+
 					Overlays.Scene.Draw(Main.spriteBatch, RenderLayers.Walls);
 					this.DrawWoF();
 					if (Main.drawBackGore)
@@ -56730,8 +_,10 @@
 								goto IL_3DC9;
 							}
 						}
+
 						this.DrawGoreBehind();
 					}
+
 					IL_3DC9:
 					MoonlordDeathDrama.DrawPieces(Main.spriteBatch);
 					MoonlordDeathDrama.DrawExplosions(Main.spriteBatch);
@@ -56755,6 +_,7 @@
 							Main.spriteBatch.Draw(this.tileTarget, Main.sceneTilePos - Main.screenPosition, Microsoft.Xna.Framework.Color.White);
 							TimeLogger.DetailedDrawTime(17);
 						}
+
 						TimeLogger.DetailedDrawReset();
 						Main.spriteBatch.End();
 						this.DrawCachedProjs(this.DrawCacheProjsBehindNPCsAndTiles, true);
@@ -56800,6 +_,7 @@
 							Main.spriteBatch.Draw(this.tileTarget, Main.sceneTilePos - Main.screenPosition, Microsoft.Xna.Framework.Color.White);
 							TimeLogger.DetailedDrawTime(17);
 						}
+
 						Main.player[Main.myPlayer].hitTile.DrawFreshAnimations(Main.spriteBatch);
 						Main.spriteBatch.End();
 						this.DrawCachedProjs(this.DrawCacheProjsBehindNPCs, true);
@@ -56814,6 +_,7 @@
 				{
 					TimeLogger.DrawException(e2);
 				}
+
 				Overlays.Scene.Draw(Main.spriteBatch, RenderLayers.TilesAndNPCs);
 				if (!Main.mapFullscreen && Main.mapStyle == 2)
 				{
@@ -56830,11 +_,16 @@
 							goto IL_4183;
 						}
 					}
+
 					this.DrawMap();
 				}
+
 				IL_4183:
 				TimeLogger.DetailedDrawReset();
 				Main.spriteBatch.End();
+
+				WorldHooks.PostDrawTiles();
+
 				TimeLogger.DetailedDrawTime(35);
 				this.SortDrawCacheWorms();
 				this.DrawCachedProjs(this.DrawCacheProjsBehindProjectiles, true);
@@ -56850,12 +_,14 @@
 						Main.essDir = -1;
 						Main.essScale = 1f;
 					}
+
 					if ((double)Main.essScale < 0.7)
 					{
 						Main.essDir = 1;
 						Main.essScale = 0.7f;
 					}
 				}
+
 				this.DrawItems();
 				TimeLogger.DetailedDrawTime(22);
 				this.DrawRain();
@@ -56872,6 +_,7 @@
 						goto IL_4279;
 					}
 				}
+
 				this.DrawGore();
 				IL_4279:
 				Main.spriteBatch.End();
@@ -56893,8 +_,10 @@
 					{
 						this.DrawWires();
 					}
+
 					TimeLogger.DetailedDrawTime(26);
 				}
+
 				Overlays.Scene.Draw(Main.spriteBatch, RenderLayers.ForegroundWater);
 				this.DrawCachedProjs(this.DrawCacheProjsOverWiresUI, false);
 				this.DrawInfernoRings();
@@ -56908,6 +_,7 @@
 				{
 					Filters.Scene.EndCapture();
 				}
+
 				TimeLogger.DetailedDrawTime(36);
 				Main.spriteBatch.Begin();
 				if (!Main.hideUI)
@@ -56928,10 +_,12 @@
 								vector5.Y -= Main.screenPosition.Y;
 								vector5.Y = Main.screenPosition.Y + (float)Main.screenHeight - vector5.Y;
 							}
+
 							int num66 = 0;
 							ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, Main.fontMouseText, Main.player[m].chatOverhead.snippets, vector5 - Main.screenPosition, 0f, Vector2.Zero, Vector2.One, out num66, -1f, 2f);
 						}
 					}
+
 					for (int n = 0; n < 100; n++)
 					{
 						if (Main.combatText[n].active)
@@ -56941,6 +_,7 @@
 							{
 								num67 = 1;
 							}
+
 							Vector2 vector6 = Main.fontCombatText[num67].MeasureString(Main.combatText[n].text);
 							Vector2 origin = new Vector2(vector6.X * 0.5f, vector6.Y * 0.5f);
 							float arg_45A6_0 = Main.combatText[n].scale;
@@ -56981,6 +_,7 @@
 									num71 = (float)Main.combatText[n].color.A * Main.combatText[n].scale * Main.combatText[n].alpha;
 									color9 = new Microsoft.Xna.Framework.Color((int)num68, (int)num69, (int)num70, (int)num71);
 								}
+
 								if (Main.player[Main.myPlayer].gravDir == -1f)
 								{
 									float num75 = Main.combatText[n].position.Y - Main.screenPosition.Y;
@@ -56994,6 +_,7 @@
 							}
 						}
 					}
+
 					for (int num76 = 0; num76 < 20; num76++)
 					{
 						if (Main.itemText[num76].active)
@@ -57002,13 +_,14 @@
 							if (Main.itemText[num76].stack > 1)
 							{
 								text = string.Concat(new object[]
-									{
-										text,
+								{
+									text,
 										" (",
 										Main.itemText[num76].stack,
 										")"
-									});
-							}
+								});
+							}
+
 							Vector2 vector7 = Main.fontMouseText.MeasureString(text);
 							Vector2 origin2 = new Vector2(vector7.X * 0.5f, vector7.Y * 0.5f);
 							float arg_49F7_0 = Main.itemText[num76].scale;
@@ -57049,45 +_,53 @@
 									num80 = (float)Main.itemText[num76].color.A * Main.itemText[num76].scale * Main.itemText[num76].alpha;
 									color10 = new Microsoft.Xna.Framework.Color((int)num77, (int)num78, (int)num79, (int)num80);
 								}
+
 								if (num81 < 4)
 								{
 									num80 = (float)Main.itemText[num76].color.A * Main.itemText[num76].scale * Main.itemText[num76].alpha;
 									color10 = new Microsoft.Xna.Framework.Color(0, 0, 0, (int)num80);
 								}
+
 								float num84 = Main.itemText[num76].position.Y - Main.screenPosition.Y + (float)num83;
 								if (Main.player[Main.myPlayer].gravDir == -1f)
 								{
 									num84 = (float)Main.screenHeight - num84;
 								}
+
 								Main.spriteBatch.DrawString(Main.fontMouseText, text, new Vector2(Main.itemText[num76].position.X - Main.screenPosition.X + (float)num82 + origin2.X, num84 + origin2.Y), color10, Main.itemText[num76].rotation, origin2, Main.itemText[num76].scale, SpriteEffects.None, 0f);
 							}
 						}
 					}
+
 					if (Main.netMode == 1 && Netplay.Connection.StatusText != "" && Netplay.Connection.StatusText != null)
 					{
 						string text2 = string.Concat(new object[]
-							{
-								Netplay.Connection.StatusText,
+						{
+							Netplay.Connection.StatusText,
 								": ",
 								(int)((float)Netplay.Connection.StatusCount / (float)Netplay.Connection.StatusMax * 100f),
 								"%"
-							});
+						});
 						Main.spriteBatch.DrawString(Main.fontMouseText, text2, new Vector2(628f - Main.fontMouseText.MeasureString(text2).X * 0.5f + (float)(Main.screenWidth - 800), 84f), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 					}
+
 					if (Main.BlackFadeIn > 0)
 					{
 						if (Main.BlackFadeIn < 0)
 						{
 							Main.BlackFadeIn = 0;
 						}
+
 						int num85 = Main.BlackFadeIn;
 						if (num85 > 255)
 						{
 							num85 = 255;
 						}
+
 						Main.BlackFadeIn -= 25;
 						Main.spriteBatch.Draw(Main.loTexture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), new Microsoft.Xna.Framework.Color(0, 0, 0, num85));
 					}
+
 					this.DrawFPS();
 					if (!Main.mapFullscreen)
 					{
@@ -57104,8 +_,10 @@
 								goto IL_4EBD;
 							}
 						}
+
 						this.DrawInterface(gameTime);
 					}
+
 					IL_4EBD:
 					TimeLogger.DetailedDrawTime(27);
 				}
@@ -57113,6 +_,7 @@
 				{
 					Main.maxQ = true;
 				}
+
 				Main.spriteBatch.End();
 				TimeLogger.DetailedDrawTime(37);
 				if (Main.mouseLeft)
@@ -57123,6 +_,7 @@
 				{
 					Main.mouseLeftRelease = true;
 				}
+
 				if (Main.mouseRight)
 				{
 					Main.mouseRightRelease = false;
@@ -57131,22 +_,27 @@
 				{
 					Main.mouseRightRelease = true;
 				}
+
 				if (!PlayerInput.Triggers.Current.MouseRight)
 				{
 					Main.stackSplit = 0;
 				}
+
 				if (Main.stackSplit > 0)
 				{
 					Main.stackSplit--;
 				}
+
 				TimeLogger.RenderTime(Main.renderCount, stopwatch.Elapsed.TotalMilliseconds);
 				TimeLogger.EndDrawFrame();
 				return;
 			}
+
 			if (Main.player[Main.myPlayer].talkNPC >= 0 || Main.player[Main.myPlayer].sign >= 0 || (Main.playerInventory && !CaptureManager.Instance.Active))
 			{
 				Main.player[Main.myPlayer].ToggleInv();
 			}
+
 			this.DrawMap();
 			this.DrawFPS();
 			this.DrawPlayerChat();
@@ -57157,12 +_,14 @@
 			{
 				CaptureManager.Instance.Draw(Main.spriteBatch);
 			}
+
 			Main.spriteBatch.End();
 			if (Main.mouseLeft)
 			{
 				Main.mouseLeftRelease = false;
 				return;
 			}
+
 			Main.mouseLeftRelease = true;
 		}
 
@@ -57176,6 +_,7 @@
 			{
 				num = 0f;
 			}
+
 			num *= 0.00025f;
 			float num2 = num * num;
 			this.scAdj *= 0.45f - num2;
@@ -57191,6 +_,7 @@
 			{
 				this.scAdj *= -150f;
 			}
+
 			this.screenOff = (float)(Main.screenHeight - 600);
 			this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1200.0 + 1190.0) + (int)this.scAdj;
 			this.cTop = (float)(this.bgTop - 50);
@@ -57199,6 +_,7 @@
 				Cloud.resetClouds();
 				Main.resetClouds = false;
 			}
+
 			Main.bgScale = 1f;
 			Main.bgW = (int)((float)Main.backgroundWidth[Main.treeMntBG[0]] * Main.bgScale);
 			Main.backColor = Main.bgColor;
@@ -57256,12 +_,15 @@
 			{
 				num3 = 0;
 			}
+
+			SurfaceBgStyleLoader.ChooseStyle(ref num3);
 			int num5 = 30;
 			Main.tranSpeed = 0.05f;
 			if (num3 == 0)
 			{
 				num5 = 60;
 			}
+
 			if (Main.bgDelay < 0)
 			{
 				Main.bgDelay++;
@@ -57283,6 +_,7 @@
 			{
 				Main.bgDelay--;
 			}
+
 			if (Main.gameMenu)
 			{
 				Main.tranSpeed = 0.02f;
@@ -57294,14 +_,17 @@
 				{
 					Main.bgStyle = 0;
 				}
+
 				num3 = Main.bgStyle;
 			}
+
 			if (Main.quickBG > 0)
 			{
 				Main.quickBG--;
 				Main.bgStyle = num3;
 				Main.tranSpeed = 1f;
 			}
+
 			if (Main.bgStyle == 2)
 			{
 				Main.bgAlpha2[0] -= Main.tranSpeed;
@@ -57309,31 +_,37 @@
 				{
 					Main.bgAlpha2[0] = 0f;
 				}
+
 				Main.bgAlpha2[1] += Main.tranSpeed;
 				if (Main.bgAlpha2[1] > 1f)
 				{
 					Main.bgAlpha2[1] = 1f;
 				}
+
 				Main.bgAlpha2[2] -= Main.tranSpeed;
 				if (Main.bgAlpha2[2] < 0f)
 				{
 					Main.bgAlpha2[2] = 0f;
 				}
+
 				Main.bgAlpha2[3] -= Main.tranSpeed;
 				if (Main.bgAlpha2[3] < 0f)
 				{
 					Main.bgAlpha2[3] = 0f;
 				}
+
 				Main.bgAlpha2[4] -= Main.tranSpeed;
 				if (Main.bgAlpha2[4] < 0f)
 				{
 					Main.bgAlpha2[4] = 0f;
 				}
+
 				Main.bgAlpha2[5] -= Main.tranSpeed;
 				if (Main.bgAlpha2[5] < 0f)
 				{
 					Main.bgAlpha2[5] = 0f;
 				}
+
 				Main.bgAlpha2[6] -= Main.tranSpeed;
 				if (Main.bgAlpha2[6] < 0f)
 				{
@@ -57347,31 +_,37 @@
 				{
 					Main.bgAlpha2[0] = 0f;
 				}
+
 				Main.bgAlpha2[1] -= Main.tranSpeed;
 				if (Main.bgAlpha2[1] < 0f)
 				{
 					Main.bgAlpha2[1] = 0f;
 				}
+
 				Main.bgAlpha2[2] += Main.tranSpeed;
 				if (Main.bgAlpha2[2] > 1f)
 				{
 					Main.bgAlpha2[2] = 1f;
 				}
+
 				Main.bgAlpha2[3] -= Main.tranSpeed;
 				if (Main.bgAlpha2[3] < 0f)
 				{
 					Main.bgAlpha2[3] = 0f;
 				}
+
 				Main.bgAlpha2[4] -= Main.tranSpeed;
 				if (Main.bgAlpha2[4] < 0f)
 				{
 					Main.bgAlpha2[4] = 0f;
 				}
+
 				Main.bgAlpha2[5] -= Main.tranSpeed;
 				if (Main.bgAlpha2[5] < 0f)
 				{
 					Main.bgAlpha2[5] = 0f;
 				}
+
 				Main.bgAlpha2[6] -= Main.tranSpeed;
 				if (Main.bgAlpha2[6] < 0f)
 				{
@@ -57385,31 +_,37 @@
 				{
 					Main.bgAlpha2[0] = 0f;
 				}
+
 				Main.bgAlpha2[1] -= Main.tranSpeed;
 				if (Main.bgAlpha2[1] < 0f)
 				{
 					Main.bgAlpha2[1] = 0f;
 				}
+
 				Main.bgAlpha2[2] -= Main.tranSpeed;
 				if (Main.bgAlpha2[2] < 0f)
 				{
 					Main.bgAlpha2[2] = 0f;
 				}
+
 				Main.bgAlpha2[3] += Main.tranSpeed;
 				if (Main.bgAlpha2[3] > 1f)
 				{
 					Main.bgAlpha2[3] = 1f;
 				}
+
 				Main.bgAlpha2[4] -= Main.tranSpeed;
 				if (Main.bgAlpha2[4] < 0f)
 				{
 					Main.bgAlpha2[4] = 0f;
 				}
+
 				Main.bgAlpha2[5] -= Main.tranSpeed;
 				if (Main.bgAlpha2[5] < 0f)
 				{
 					Main.bgAlpha2[5] = 0f;
 				}
+
 				Main.bgAlpha2[6] -= Main.tranSpeed;
 				if (Main.bgAlpha2[6] < 0f)
 				{
@@ -57423,31 +_,37 @@
 				{
 					Main.bgAlpha2[0] = 0f;
 				}
+
 				Main.bgAlpha2[1] -= Main.tranSpeed;
 				if (Main.bgAlpha2[1] < 0f)
 				{
 					Main.bgAlpha2[1] = 0f;
 				}
+
 				Main.bgAlpha2[2] -= Main.tranSpeed;
 				if (Main.bgAlpha2[2] < 0f)
 				{
 					Main.bgAlpha2[2] = 0f;
 				}
+
 				Main.bgAlpha2[3] -= Main.tranSpeed;
 				if (Main.bgAlpha2[3] < 0f)
 				{
 					Main.bgAlpha2[3] = 0f;
 				}
+
 				Main.bgAlpha2[4] += Main.tranSpeed;
 				if (Main.bgAlpha2[4] > 1f)
 				{
 					Main.bgAlpha2[4] = 1f;
 				}
+
 				Main.bgAlpha2[5] -= Main.tranSpeed;
 				if (Main.bgAlpha2[5] < 0f)
 				{
 					Main.bgAlpha2[5] = 0f;
 				}
+
 				Main.bgAlpha2[6] -= Main.tranSpeed;
 				if (Main.bgAlpha2[6] < 0f)
 				{
@@ -57461,31 +_,37 @@
 				{
 					Main.bgAlpha2[0] = 0f;
 				}
+
 				Main.bgAlpha2[1] -= Main.tranSpeed;
 				if (Main.bgAlpha2[1] < 0f)
 				{
 					Main.bgAlpha2[1] = 0f;
 				}
+
 				Main.bgAlpha2[2] -= Main.tranSpeed;
 				if (Main.bgAlpha2[2] < 0f)
 				{
 					Main.bgAlpha2[2] = 0f;
 				}
+
 				Main.bgAlpha2[3] -= Main.tranSpeed;
 				if (Main.bgAlpha2[3] < 0f)
 				{
 					Main.bgAlpha2[3] = 0f;
 				}
+
 				Main.bgAlpha2[4] -= Main.tranSpeed;
 				if (Main.bgAlpha2[4] < 0f)
 				{
 					Main.bgAlpha2[4] = 0f;
 				}
+
 				Main.bgAlpha2[5] += Main.tranSpeed;
 				if (Main.bgAlpha2[5] > 1f)
 				{
 					Main.bgAlpha2[5] = 1f;
 				}
+
 				Main.bgAlpha2[6] -= Main.tranSpeed;
 				if (Main.bgAlpha2[6] < 0f)
 				{
@@ -57499,75 +_,101 @@
 				{
 					Main.bgAlpha2[0] = 1f;
 				}
+
 				Main.bgAlpha2[1] -= Main.tranSpeed;
 				if (Main.bgAlpha2[1] < 0f)
 				{
 					Main.bgAlpha2[1] = 0f;
 				}
+
 				Main.bgAlpha2[2] -= Main.tranSpeed;
 				if (Main.bgAlpha2[2] < 0f)
 				{
 					Main.bgAlpha2[2] = 0f;
 				}
+
 				Main.bgAlpha2[3] -= Main.tranSpeed;
 				if (Main.bgAlpha2[3] < 0f)
 				{
 					Main.bgAlpha2[3] = 0f;
 				}
+
 				Main.bgAlpha2[4] -= Main.tranSpeed;
 				if (Main.bgAlpha2[4] < 0f)
 				{
 					Main.bgAlpha2[4] = 0f;
 				}
+
 				Main.bgAlpha2[5] -= Main.tranSpeed;
 				if (Main.bgAlpha2[5] < 0f)
 				{
 					Main.bgAlpha2[5] = 0f;
 				}
+
 				Main.bgAlpha2[6] += Main.tranSpeed;
 				if (Main.bgAlpha2[6] > 1f)
 				{
 					Main.bgAlpha2[6] = 1f;
 				}
 			}
-			else
+			else if (Main.bgStyle == 0 || Main.bgStyle == 3)
 			{
 				Main.bgAlpha2[0] += Main.tranSpeed;
 				if (Main.bgAlpha2[0] > 1f)
 				{
 					Main.bgAlpha2[0] = 1f;
 				}
+
 				Main.bgAlpha2[1] -= Main.tranSpeed;
 				if (Main.bgAlpha2[1] < 0f)
 				{
 					Main.bgAlpha2[1] = 0f;
 				}
+
 				Main.bgAlpha2[2] -= Main.tranSpeed;
 				if (Main.bgAlpha2[2] < 0f)
 				{
 					Main.bgAlpha2[2] = 0f;
 				}
+
 				Main.bgAlpha2[3] -= Main.tranSpeed;
 				if (Main.bgAlpha2[3] < 0f)
 				{
 					Main.bgAlpha2[3] = 0f;
 				}
+
 				Main.bgAlpha2[4] -= Main.tranSpeed;
 				if (Main.bgAlpha2[4] < 0f)
 				{
 					Main.bgAlpha2[4] = 0f;
 				}
+
 				Main.bgAlpha2[5] -= Main.tranSpeed;
 				if (Main.bgAlpha2[5] < 0f)
 				{
 					Main.bgAlpha2[5] = 0f;
 				}
+
 				Main.bgAlpha2[6] -= Main.tranSpeed;
 				if (Main.bgAlpha2[6] < 0f)
 				{
 					Main.bgAlpha2[6] = 0f;
 				}
 			}
+
+			if(Main.bgStyle < SurfaceBgStyleLoader.vanillaSurfaceBgStyleCount)
+			{
+				for (int i = SurfaceBgStyleLoader.vanillaSurfaceBgStyleCount; i < Main.bgAlpha2.Length /*SurfaceBackgroundStyleLoader.SurfaceStyleCount*/; i++)
+				{
+					Main.bgAlpha2[i] -= Main.tranSpeed;
+					if (Main.bgAlpha2[i] < 0f)
+					{
+						Main.bgAlpha2[i] = 0f;
+					}
+				}
+			}
+
+			SurfaceBgStyleLoader.ModifyFarFades(Main.bgStyle, Main.bgAlpha2, Main.tranSpeed);
 			if (Main.ignoreErrors)
 			{
 				try
@@ -57577,6 +_,7 @@
 					{
 						this.DrawUnderworldBackground(false);
 					}
+
 					goto IL_ECB;
 				}
 				catch (Exception e)
@@ -57585,11 +_,13 @@
 					goto IL_ECB;
 				}
 			}
+
 			this.DrawSurfaceBG();
 			if (Main.BackgroundEnabled)
 			{
 				this.DrawUnderworldBackground(false);
 			}
+
 			IL_ECB:
 			TimeLogger.DetailedDrawTime(8);
 		}
@@ -57607,6 +_,7 @@
 					{
 						Main.player[i].flameRingScale += 0.004f;
 					}
+
 					float flameRingScale;
 					if (Main.player[i].flameRingScale < 1f)
 					{
@@ -57617,18 +_,22 @@
 						Main.player[i].flameRingScale = 0.8f;
 						flameRingScale = Main.player[i].flameRingScale;
 					}
+
 					if (!Main.gamePaused && base.IsActive)
 					{
 						Main.player[i].flameRingRot += 0.05f;
 					}
+
 					if (Main.player[i].flameRingRot > 6.28318548f)
 					{
 						Main.player[i].flameRingRot -= 6.28318548f;
 					}
+
 					if (Main.player[i].flameRingRot < -6.28318548f)
 					{
 						Main.player[i].flameRingRot += 6.28318548f;
 					}
+
 					for (int j = 0; j < 3; j++)
 					{
 						float num3 = flameRingScale + num * (float)j;
@@ -57636,6 +_,7 @@
 						{
 							num3 -= num * 2f;
 						}
+
 						float num4 = MathHelper.Lerp(0.8f, 0f, Math.Abs(num3 - num2) * 10f);
 						Main.spriteBatch.Draw(this.flameRingTexture, Main.player[i].Center - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 400 * j, 400, 400)), new Microsoft.Xna.Framework.Color(num4, num4, num4, num4 / 2f), Main.player[i].flameRingRot + 1.04719758f * (float)j, new Vector2(200f, 200f), num3, SpriteEffects.None, 0f);
 					}
@@ -57656,6 +_,7 @@
 						{
 							NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
 						}
+
 						AchievementsHelper.NotifyProgressionEvent(10);
 					}
 					else if (Main.invasionType == 2)
@@ -57673,14 +_,17 @@
 						NPC.downedMartians = true;
 						AchievementsHelper.NotifyProgressionEvent(13);
 					}
+
 					Main.InvasionWarning();
 					Main.invasionType = 0;
 					Main.invasionDelay = 0;
 				}
+
 				if (Main.invasionX == (double)Main.spawnTileX)
 				{
 					return;
 				}
+
 				float num = (float)Main.dayRate;
 				if (Main.invasionX > (double)Main.spawnTileX)
 				{
@@ -57708,6 +_,7 @@
 						Main.invasionWarn--;
 					}
 				}
+
 				if (Main.invasionWarn <= 0)
 				{
 					Main.invasionWarn = 3600;
@@ -57792,11 +_,13 @@
 			{
 				text = Lang.misc[3];
 			}
+
 			if (Main.netMode == 0)
 			{
 				Main.NewText(text, 175, 75, 255, false);
 				return;
 			}
+
 			if (Main.netMode == 2)
 			{
 				NetMessage.SendData(25, -1, -1, text, 255, 175f, 75f, 255f, 0, 0, 0);
@@ -57809,10 +_,12 @@
 			{
 				return false;
 			}
+
 			if (Main.invasionDelay != 0 && !ignoreDelay)
 			{
 				return false;
 			}
+
 			int num = 0;
 			for (int i = 0; i < 255; i++)
 			{
@@ -57821,6 +_,7 @@
 					num++;
 				}
 			}
+
 			return num > 0;
 		}
 
@@ -57830,6 +_,7 @@
 			{
 				Main.invasionType = 0;
 			}
+
 			if (Main.invasionType == 0)
 			{
 				int num = 0;
@@ -57840,6 +_,7 @@
 						num++;
 					}
 				}
+
 				if (num > 0)
 				{
 					Main.invasionType = type;
@@ -57848,10 +_,12 @@
 					{
 						Main.invasionSize += 40 + 20 * num;
 					}
+
 					if (type == 4)
 					{
 						Main.invasionSize = 160 + 40 * num;
 					}
+
 					Main.invasionSizeStart = Main.invasionSize;
 					Main.invasionProgress = 0;
 					Main.invasionProgressIcon = type + 3;
@@ -57864,11 +_,13 @@
 						Main.invasionWarn = 2;
 						return;
 					}
+
 					if (Main.rand.Next(2) == 0)
 					{
 						Main.invasionX = 0.0;
 						return;
 					}
+
 					Main.invasionX = (double)Main.maxTilesX;
 				}
 			}
@@ -57883,17 +_,18 @@
 				case 1:
 				case 2:
 					num = 80;
-					num2 = 40;
-					break;
+				num2 = 40;
+				break;
 				case 3:
 					num = 120;
-					num2 = 60;
-					break;
+				num2 = 60;
+				break;
 				case 4:
 					num = 160;
-					num2 = 40;
-					break;
-			}
+				num2 = 40;
+				break;
+			}
+
 			int num3 = (int)Math.Ceiling((double)((float)(Main.invasionSize - num) / (float)num2));
 			Main.invasionSizeStart = num;
 			if (num3 > 0)
@@ -57908,21 +_,25 @@
 			{
 				Netplay.disconnect = true;
 			}
+
 			Main.netPlayCounter++;
 			if (Main.netPlayCounter > 3600)
 			{
 				Main.netPlayCounter = 0;
 			}
+
 			if (Main.netPlayCounter % 420 == 0)
 			{
 				NetMessage.SendData(13, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
 			}
+
 			if (Main.netPlayCounter % 900 == 0)
 			{
 				NetMessage.SendData(36, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
 				NetMessage.SendData(16, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
 				NetMessage.SendData(40, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
 			}
+
 			if (Netplay.Connection.IsActive)
 			{
 				Netplay.Connection.TimeOutTimer++;
@@ -57932,6 +_,7 @@
 					Netplay.disconnect = true;
 				}
 			}
+
 			for (int i = 0; i < 400; i++)
 			{
 				if (Main.item[i].active && Main.item[i].owner == Main.myPlayer)
@@ -57949,6 +_,7 @@
 				NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
 				Main.netPlayCounter = 0;
 			}
+
 			for (int i = 0; i < Main.maxNetPlayers; i++)
 			{
 				if (Main.player[i].active && Netplay.Clients[i].IsActive)
@@ -57956,6 +_,7 @@
 					Netplay.Clients[i].SpamUpdate();
 				}
 			}
+
 			if (Math.IEEERemainder((double)Main.netPlayCounter, 900.0) == 0.0)
 			{
 				bool flag = true;
@@ -57968,18 +_,22 @@
 					{
 						num = 0;
 					}
+
 					num2++;
 					if (!Main.item[num].active || Main.item[num].owner == 255)
 					{
 						NetMessage.SendData(21, -1, -1, "", num, 0f, 0f, 0f, 0, 0, 0);
 					}
+
 					if (num2 >= Main.maxItemUpdates || num == Main.lastItemUpdate)
 					{
 						flag = false;
 					}
 				}
+
 				Main.lastItemUpdate = num;
 			}
+
 			for (int j = 0; j < 400; j++)
 			{
 				if (Main.item[j].active && (Main.item[j].owner == 255 || !Main.player[Main.item[j].owner].active))
@@ -57987,6 +_,7 @@
 					Main.item[j].FindOwner(j);
 				}
 			}
+
 			for (int k = 0; k < 255; k++)
 			{
 				if (Netplay.Clients[k].IsActive)
@@ -57997,11 +_,17 @@
 						Netplay.Clients[k].PendingTermination = true;
 					}
 				}
+
 				if (Main.player[k].active)
 				{
 					RemoteClient.CheckSection(k, Main.player[k].position, 1);
 				}
 			}
+		}
+
+		public static void NewText(string newText, Microsoft.Xna.Framework.Color color, bool force = false)
+		{
+			NewText(newText, color.R, color.G, color.B, force);
 		}
 
 		public static void NewText(string newText, byte R = 255, byte G = 255, byte B = 255, bool force = false)
@@ -58022,6 +_,7 @@
 							break;
 						}
 					}
+
 					if (num3 == 0)
 					{
 						while (text.Substring(num2, 1) != " ")
@@ -58037,10 +_,12 @@
 					{
 						num2 = num3;
 					}
+
 					if (num2 >= text.Length - 1)
 					{
 						num2 = text.Length;
 					}
+
 					string newText2 = text.Substring(0, num2);
 					Main.NewText(newText2, R, G, B, true);
 					text = text.Substring(num2);
@@ -58052,12 +_,15 @@
 						}
 					}
 				}
+
 				if (text.Length > 0)
 				{
 					Main.NewText(text, R, G, B, true);
 				}
+
 				return;
 			}
+
 			for (int i = Main.numChatLines - 1; i > 0; i--)
 			{
 				Main.chatLine[i].text = Main.chatLine[i - 1].text;
@@ -58065,6 +_,7 @@
 				Main.chatLine[i].showTime = Main.chatLine[i - 1].showTime;
 				Main.chatLine[i].color = Main.chatLine[i - 1].color;
 			}
+
 			if (R == 0 && G == 0 && B == 0)
 			{
 				Main.chatLine[0].color = Microsoft.Xna.Framework.Color.White;
@@ -58073,6 +_,7 @@
 			{
 				Main.chatLine[0].color = new Microsoft.Xna.Framework.Color((int)R, (int)G, (int)B);
 			}
+
 			Main.chatLine[0].text = newText;
 			Main.chatLine[0].parsedText = ChatManager.ParseMessage(Main.chatLine[0].text, Main.chatLine[0].color);
 			Main.chatLine[0].showTime = Main.chatLength;
@@ -58085,6 +_,7 @@
 			{
 				c = Microsoft.Xna.Framework.Color.White;
 			}
+
 			List<List<TextSnippet>> list;
 			if (WidthLimit != -1)
 			{
@@ -58094,6 +_,7 @@
 			{
 				list = Utils.WordwrapStringSmart(text, c, Main.fontMouseText, Main.TextMaxLengthForScreen, 10);
 			}
+
 			for (int i = 0; i < list.Count; i++)
 			{
 				Main.NewText(list[i]);
@@ -58109,6 +_,7 @@
 				Main.chatLine[i].showTime = Main.chatLine[i - 1].showTime;
 				Main.chatLine[i].color = Main.chatLine[i - 1].color;
 			}
+
 			Main.chatLine[0].text = "whatever";
 			Main.chatLine[0].parsedText = snippets.ToArray();
 			Main.chatLine[0].showTime = Main.chatLength;
@@ -58121,6 +_,7 @@
 			{
 				c = Microsoft.Xna.Framework.Color.White;
 			}
+
 			int num;
 			string[] array = Utils.WordwrapString(text, Main.fontMouseText, 460, 10, out num);
 			for (int i = 0; i <= num; i++)
@@ -58145,43 +_,53 @@
 			{
 				Main.rainTime += Main.rand.Next(0, num2);
 			}
+
 			if (Main.rand.Next(4) == 0)
 			{
 				Main.rainTime += Main.rand.Next(0, num2 * 2);
 			}
+
 			if (Main.rand.Next(5) == 0)
 			{
 				Main.rainTime += Main.rand.Next(0, num2 * 2);
 			}
+
 			if (Main.rand.Next(6) == 0)
 			{
 				Main.rainTime += Main.rand.Next(0, num2 * 3);
 			}
+
 			if (Main.rand.Next(7) == 0)
 			{
 				Main.rainTime += Main.rand.Next(0, num2 * 4);
 			}
+
 			if (Main.rand.Next(8) == 0)
 			{
 				Main.rainTime += Main.rand.Next(0, num2 * 5);
 			}
+
 			float num3 = 1f;
 			if (Main.rand.Next(2) == 0)
 			{
 				num3 += 0.05f;
 			}
+
 			if (Main.rand.Next(3) == 0)
 			{
 				num3 += 0.1f;
 			}
+
 			if (Main.rand.Next(4) == 0)
 			{
 				num3 += 0.15f;
 			}
+
 			if (Main.rand.Next(5) == 0)
 			{
 				num3 += 0.2f;
 			}
+
 			Main.rainTime = (int)((float)Main.rainTime * num3);
 			Main.ChangeRain();
 			Main.raining = true;
@@ -58196,6 +_,7 @@
 					Main.maxRaining = (float)Main.rand.Next(20, 90) * 0.01f;
 					return;
 				}
+
 				Main.maxRaining = (float)Main.rand.Next(40, 90) * 0.01f;
 				return;
 			}
@@ -58206,6 +_,7 @@
 					Main.maxRaining = (float)Main.rand.Next(10, 70) * 0.01f;
 					return;
 				}
+
 				Main.maxRaining = (float)Main.rand.Next(20, 60) * 0.01f;
 				return;
 			}
@@ -58216,6 +_,7 @@
 					Main.maxRaining = (float)Main.rand.Next(5, 40) * 0.01f;
 					return;
 				}
+
 				Main.maxRaining = (float)Main.rand.Next(5, 30) * 0.01f;
 				return;
 			}
@@ -58227,6 +_,7 @@
 			{
 				return;
 			}
+
 			if (Main.netMode == 1)
 			{
 				Main.slimeRainTime = 54000.0;
@@ -58234,10 +_,12 @@
 				SkyManager.Instance.Activate("Slime", default(Vector2), new object[0]);
 				return;
 			}
+
 			if (Main.raining)
 			{
 				return;
 			}
+
 			Main.slimeRainTime = (double)Main.rand.Next(32400, 54000);
 			Main.slimeRain = true;
 			Main.slimeRainKillCount = 0;
@@ -58263,6 +_,7 @@
 			{
 				return;
 			}
+
 			if (Main.netMode == 1)
 			{
 				Main.slimeRainTime = 0.0;
@@ -58270,12 +_,14 @@
 				SkyManager.Instance.Deactivate("Slime", new object[0]);
 				return;
 			}
+
 			int num = 86400;
 			int num2 = num * 7;
 			if (Main.hardMode)
 			{
 				num2 *= 2;
 			}
+
 			Main.slimeRainTime = (double)(-(double)Main.rand.Next(3024, 6048) * 100);
 			Main.slimeRain = false;
 			if (Main.netMode == 0)
@@ -58284,9 +_,11 @@
 				{
 					Main.slimeWarningTime = Main.slimeWarningDelay;
 				}
+
 				SkyManager.Instance.Deactivate("Slime", new object[0]);
 				return;
 			}
+
 			if (announce)
 			{
 				Main.slimeWarningTime = Main.slimeWarningDelay;
@@ -58301,10 +_,12 @@
 				Main.bloodMoon = false;
 				Main.snowMoon = false;
 			}
+
 			if (Main.snowMoon)
 			{
 				Main.bloodMoon = false;
 			}
+
 			if ((Main.netMode != 1 && !Main.gameMenu) || Main.netMode == 2)
 			{
 				if (Main.slimeRainTime > 0.0)
@@ -58323,6 +_,7 @@
 						Main.slimeRainTime = 0.0;
 					}
 				}
+
 				if (Main.raining)
 				{
 					Main.rainTime -= Main.dayRate;
@@ -58353,6 +_,7 @@
 					{
 						Main.StartRain();
 					}
+
 					if (!Main.raining && !NPC.BusyWithAnyInvasionOfSorts())
 					{
 						int num4 = (int)(1728000.0 / (double)Main.dayRate);
@@ -58360,10 +_,12 @@
 						{
 							num4 /= 2;
 						}
+
 						if (Main.hardMode)
 						{
 							num4 = (int)((double)num4 * 1.5);
 						}
+
 						bool flag = false;
 						for (int i = 0; i < 255; i++)
 						{
@@ -58372,10 +_,12 @@
 								flag = true;
 							}
 						}
+
 						if (!flag)
 						{
 							num4 *= 5;
 						}
+
 						if (Main.dayRate > 0 && num4 > 0 && (flag || Main.expertMode) && Main.rand.Next(num4) == 0)
 						{
 							Main.StartSlimeRain(true);
@@ -58383,14 +_,17 @@
 					}
 				}
 			}
+
 			if (Main.maxRaining != Main.oldMaxRaining)
 			{
 				if (Main.netMode == 2)
 				{
 					NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
 				}
+
 				Main.oldMaxRaining = Main.maxRaining;
 			}
+
 			Main.UpdateSundial();
 			Main.time += (double)Main.dayRate;
 			CultistRitual.UpdateTime();
@@ -58406,12 +_,14 @@
 				{
 					Filters.Scene.Activate("MoonLordShake", Main.player[Main.myPlayer].position, new object[0]);
 				}
+
 				Filters.Scene["MoonLordShake"].GetShader().UseIntensity(num5);
 			}
 			else if (Filters.Scene["MoonLordShake"].IsActive())
 			{
 				Filters.Scene.Deactivate("MoonLordShake", new object[0]);
 			}
+
 #endif
 			if (NPC.MoonLordCountdown > 0)
 			{
@@ -58421,6 +_,7 @@
 					NPC.SpawnOnPlayer((int)Player.FindClosest(new Vector2((float)(Main.maxTilesX / 2), (float)Main.worldSurface / 2f) * 16f, 0, 0), 398);
 				}
 			}
+
 			if (NPC.taxCollector && Main.netMode != 2 && !Main.gameMenu)
 			{
 				Main.player[Main.myPlayer].taxTimer += Main.dayRate;
@@ -58430,6 +_,7 @@
 					Main.player[Main.myPlayer].CollectTaxes();
 				}
 			}
+
 			if (Main.netMode != 1 && Main.slimeWarningTime > 0)
 			{
 				Main.slimeWarningTime--;
@@ -58456,6 +_,7 @@
 					}
 				}
 			}
+
 			if (Main.netMode != 1)
 			{
 				if (NPC.travelNPC)
@@ -58479,14 +_,17 @@
 								num7++;
 							}
 						}
+
 						if (num7 >= 2)
 						{
 							WorldGen.SpawnTravelNPC();
 						}
 					}
 				}
+
 				NPC.travelNPC = false;
 			}
+
 			if (!Main.dayTime)
 			{
 				Main.eclipse = false;
@@ -58504,6 +_,7 @@
 							}
 						}
 					}
+
 					if (WorldGen.spawnHardBoss > 0 && Main.netMode != 1 && Main.time > 4860.0)
 					{
 						bool flag2 = false;
@@ -58514,6 +_,7 @@
 								flag2 = true;
 							}
 						}
+
 						if (!flag2)
 						{
 							int m = 0;
@@ -58526,17 +_,20 @@
 										NPC.SpawnOnPlayer(m, 134);
 										break;
 									}
+
 									if (WorldGen.spawnHardBoss == 2)
 									{
 										NPC.SpawnOnPlayer(m, 125);
 										NPC.SpawnOnPlayer(m, 126);
 										break;
 									}
+
 									if (WorldGen.spawnHardBoss == 3)
 									{
 										NPC.SpawnOnPlayer(m, 127);
 										break;
 									}
+
 									break;
 								}
 								else
@@ -58545,9 +_,11 @@
 								}
 							}
 						}
+
 						WorldGen.spawnHardBoss = 0;
 					}
 				}
+
 				if (Main.time > 32400.0)
 				{
 					if (Main.fastForwardTime)
@@ -58555,6 +_,7 @@
 						Main.fastForwardTime = false;
 						Main.UpdateSundial();
 					}
+
 					Main.checkXMas();
 					Main.checkHalloween();
 					Main.AnglerQuestSwap();
@@ -58563,6 +_,7 @@
 					{
 						Main.invasionDelay--;
 					}
+
 					WorldGen.spawnNPC = 0;
 					Main.checkForSpawns = 0;
 					Main.time = 0.0;
@@ -58570,6 +_,7 @@
 					{
 						AchievementsHelper.NotifyProgressionEvent(5);
 					}
+
 					Main.bloodMoon = false;
 					Main.stopMoonEvent();
 					Main.dayTime = true;
@@ -58577,16 +_,19 @@
 					{
 						Main.sundialCooldown--;
 					}
+
 					Main.moonPhase++;
 					if (Main.moonPhase >= 8)
 					{
 						Main.moonPhase = 0;
 					}
+
 					if (Main.netMode == 2)
 					{
 						NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
 						WorldGen.saveAndPlay();
 					}
+
 					if (Main.netMode != 1)
 					{
 						AchievementsHelper.NotifyProgressionEvent(1);
@@ -58605,6 +_,7 @@
 									NetMessage.SendData(25, -1, -1, Lang.misc[20], 255, 50f, 255f, 130f, 0, 0, 0);
 								}
 							}
+
 							if (Main.netMode == 2)
 							{
 								NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
@@ -58626,6 +_,7 @@
 									Main.StartInvasion(1);
 								}
 							}
+
 							if (Main.invasionType == 0 && Main.hardMode && WorldGen.altarCount > 0 && ((NPC.downedPirates && Main.rand.Next(50) == 0) || (!NPC.downedPirates && Main.rand.Next(30) == 0)))
 							{
 								Main.StartInvasion(3);
@@ -58633,6 +_,7 @@
 						}
 					}
 				}
+
 				if (Main.time > 16200.0 && WorldGen.spawnMeteor)
 				{
 					WorldGen.spawnMeteor = false;
@@ -58654,15 +_,18 @@
 					{
 						WorldGen.spawnMeteor = true;
 					}
+
 					if (Main.eclipse && Main.netMode != 1)
 					{
 						AchievementsHelper.NotifyProgressionEvent(3);
 					}
+
 					Main.eclipse = false;
 					if (Main.netMode != 1)
 					{
 						AchievementsHelper.NotifyProgressionEvent(0);
 					}
+
 					if (!Main.fastForwardTime)
 					{
 						if (!NPC.downedBoss1 && Main.netMode != 1)
@@ -58676,6 +_,7 @@
 									break;
 								}
 							}
+
 							if (flag3 && Main.rand.Next(3) == 0)
 							{
 								int num8 = 0;
@@ -58686,6 +_,7 @@
 										num8++;
 									}
 								}
+
 								if (num8 >= 4)
 								{
 									WorldGen.spawnEye = true;
@@ -58700,6 +_,7 @@
 								}
 							}
 						}
+
 						if (Main.netMode != 1 && !Main.pumpkinMoon && !DD2Event.Ongoing && !Main.snowMoon && WorldGen.altarCount > 0 && Main.hardMode && !WorldGen.spawnEye && Main.rand.Next(10) == 0)
 						{
 							bool flag4 = false;
@@ -58710,6 +_,7 @@
 									flag4 = true;
 								}
 							}
+
 							if (!flag4 && (!NPC.downedMechBoss1 || !NPC.downedMechBoss2 || !NPC.downedMechBoss3))
 							{
 								int num11 = 0;
@@ -58724,11 +_,13 @@
 											Main.NewText(Lang.misc[28], 50, 255, 130, false);
 											break;
 										}
+
 										if (Main.netMode == 2)
 										{
 											NetMessage.SendData(25, -1, -1, Lang.misc[28], 255, 50f, 255f, 130f, 0, 0, 0);
 											break;
 										}
+
 										break;
 									}
 									else if (num12 == 2 && !NPC.downedMechBoss2)
@@ -58739,11 +_,13 @@
 											Main.NewText(Lang.misc[29], 50, 255, 130, false);
 											break;
 										}
+
 										if (Main.netMode == 2)
 										{
 											NetMessage.SendData(25, -1, -1, Lang.misc[29], 255, 50f, 255f, 130f, 0, 0, 0);
 											break;
 										}
+
 										break;
 									}
 									else if (num12 == 3 && !NPC.downedMechBoss3)
@@ -58754,11 +_,13 @@
 											Main.NewText(Lang.misc[30], 50, 255, 130, false);
 											break;
 										}
+
 										if (Main.netMode == 2)
 										{
 											NetMessage.SendData(25, -1, -1, Lang.misc[30], 255, 50f, 255f, 130f, 0, 0, 0);
 											break;
 										}
+
 										break;
 									}
 									else
@@ -58768,6 +_,7 @@
 								}
 							}
 						}
+
 						if (!WorldGen.spawnEye && Main.moonPhase != 4 && Main.rand.Next(9) == 0 && Main.netMode != 1)
 						{
 							for (int num13 = 0; num13 < 255; num13++)
@@ -58778,6 +_,7 @@
 									break;
 								}
 							}
+
 							if (Main.bloodMoon)
 							{
 								AchievementsHelper.NotifyProgressionEvent(4);
@@ -58792,6 +_,7 @@
 							}
 						}
 					}
+
 					Main.time = 0.0;
 					Main.dayTime = false;
 					if (Main.netMode == 2)
@@ -58799,6 +_,7 @@
 						NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
 					}
 				}
+
 				if (Main.netMode != 1 && Main.worldRate > 0)
 				{
 					Main.checkForSpawns++;
@@ -58812,10 +_,12 @@
 								num14++;
 							}
 						}
-						for (int num16 = 0; num16 < 580; num16++)
+
+						for (int num16 = 0; num16 < Main.nextNPC.Length; num16++)
 						{
 							Main.nextNPC[num16] = false;
 						}
+
 						Main.checkForSpawns = 0;
 						WorldGen.spawnNPC = 0;
 						int num17 = 0;
@@ -58851,105 +_,132 @@
 								{
 									WorldGen.QuickFindHome(num42);
 								}
+
 								if (Main.npc[num42].type == 37)
 								{
 									num22++;
 								}
+
 								if (Main.npc[num42].type == 17)
 								{
 									num17++;
 								}
+
 								if (Main.npc[num42].type == 18)
 								{
 									num18++;
 								}
+
 								if (Main.npc[num42].type == 19)
 								{
 									num20++;
 								}
+
 								if (Main.npc[num42].type == 20)
 								{
 									num19++;
 								}
+
 								if (Main.npc[num42].type == 22)
 								{
 									num21++;
 								}
+
 								if (Main.npc[num42].type == 38)
 								{
 									num23++;
 								}
+
 								if (Main.npc[num42].type == 54)
 								{
 									num24++;
 								}
+
 								if (Main.npc[num42].type == 107)
 								{
 									num26++;
 								}
+
 								if (Main.npc[num42].type == 108)
 								{
 									num25++;
 								}
+
 								if (Main.npc[num42].type == 124)
 								{
 									num27++;
 								}
+
 								if (Main.npc[num42].type == 142)
 								{
 									num28++;
 								}
+
 								if (Main.npc[num42].type == 160)
 								{
 									num29++;
 								}
+
 								if (Main.npc[num42].type == 178)
 								{
 									num30++;
 								}
+
 								if (Main.npc[num42].type == 207)
 								{
 									num31++;
 								}
+
 								if (Main.npc[num42].type == 208)
 								{
 									num32++;
 								}
+
 								if (Main.npc[num42].type == 209)
 								{
 									num33++;
 								}
+
 								if (Main.npc[num42].type == 227)
 								{
 									num34++;
 								}
+
 								if (Main.npc[num42].type == 228)
 								{
 									num35++;
 								}
+
 								if (Main.npc[num42].type == 229)
 								{
 									num36++;
 								}
+
 								if (Main.npc[num42].type == 353)
 								{
 									num37++;
 								}
+
 								if (Main.npc[num42].type == 369)
 								{
 									num38++;
 								}
+
 								if (Main.npc[num42].type == 441)
 								{
 									num39++;
-								}
+									//patch file: num40
+								}
+
 								if (Main.npc[num42].type == 550)
 								{
 									num40++;
 								}
+
 								num41++;
 							}
 						}
+
 						if (WorldGen.spawnNPC == 0)
 						{
 							int num43 = 0;
@@ -58969,46 +_,56 @@
 										{
 											if (num43 < 2000000000)
 											{
+												//patch file: num43
 												if (Main.player[num45].inventory[num46].type == 71)
 												{
 													num43 += Main.player[num45].inventory[num46].stack;
 												}
+
 												if (Main.player[num45].inventory[num46].type == 72)
 												{
 													num43 += Main.player[num45].inventory[num46].stack * 100;
 												}
+
 												if (Main.player[num45].inventory[num46].type == 73)
 												{
 													num43 += Main.player[num45].inventory[num46].stack * 10000;
 												}
+
 												if (Main.player[num45].inventory[num46].type == 74)
 												{
 													num43 += Main.player[num45].inventory[num46].stack * 1000000;
 												}
 											}
+
 											if (Main.player[num45].inventory[num46].ammo == AmmoID.Bullet || Main.player[num45].inventory[num46].useAmmo == AmmoID.Bullet)
 											{
 												flag6 = true;
 											}
+
 											if (Main.player[num45].inventory[num46].type == 166 || Main.player[num45].inventory[num46].type == 167 || Main.player[num45].inventory[num46].type == 168 || Main.player[num45].inventory[num46].type == 235 || Main.player[num45].inventory[num46].type == 2896 || Main.player[num45].inventory[num46].type == 3547)
 											{
 												flag7 = true;
 											}
+
 											if (Main.player[num45].inventory[num46].dye > 0 || (Main.player[num45].inventory[num46].type >= 1107 && Main.player[num45].inventory[num46].type <= 1120) || (Main.player[num45].inventory[num46].type >= 3385 && Main.player[num45].inventory[num46].type <= 3388))
 											{
 												if (Main.player[num45].inventory[num46].type >= 3385 && Main.player[num45].inventory[num46].type <= 3388)
 												{
 													flag9 = true;
 												}
+
 												flag8 = true;
 											}
 										}
 									}
+
 									int num47 = Main.player[num45].statLifeMax / 20;
 									if (num47 > 5)
 									{
 										flag5 = true;
 									}
+
 									num44 += num47;
 									if (!flag8)
 									{
@@ -59022,6 +_,7 @@
 									}
 								}
 							}
+
 							if (!NPC.downedBoss3 && num22 == 0)
 							{
 								int num49 = NPC.NewNPC(Main.dungeonX * 16 + 8, Main.dungeonY * 16, 37, 0, 0f, 0f, 0f, 0f, 255);
@@ -59029,195 +_,244 @@
 								Main.npc[num49].homeTileX = Main.dungeonX;
 								Main.npc[num49].homeTileY = Main.dungeonY;
 							}
+
 							bool flag10 = false;
 							if (Main.rand.Next(40) == 0)
 							{
 								flag10 = true;
 							}
+
 							if (num21 < 1)
 							{
 								Main.nextNPC[22] = true;
 							}
+
 							if ((double)num43 > 5000.0 && num17 < 1)
 							{
 								Main.nextNPC[17] = true;
 							}
+
 							if (flag5 && num18 < 1 && num17 > 0)
 							{
 								Main.nextNPC[18] = true;
 							}
+
 							if (flag6 && num20 < 1)
 							{
 								Main.nextNPC[19] = true;
 							}
+
 							if ((NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3) && num19 < 1)
 							{
 								Main.nextNPC[20] = true;
 							}
+
 							if (flag7 && num17 > 0 && num23 < 1)
 							{
 								Main.nextNPC[38] = true;
 							}
+
 							if (NPC.savedStylist && num37 < 1)
 							{
 								Main.nextNPC[353] = true;
 							}
+
 							if (NPC.savedAngler && num38 < 1)
 							{
 								Main.nextNPC[369] = true;
 							}
+
 							if (NPC.downedBoss3 && num24 < 1)
 							{
 								Main.nextNPC[54] = true;
 							}
+
 							if (NPC.savedGoblin && num26 < 1)
 							{
 								Main.nextNPC[107] = true;
 							}
+
 							if (NPC.savedTaxCollector && num39 < 1)
 							{
 								Main.nextNPC[441] = true;
 							}
+
 							if (NPC.savedWizard && num25 < 1)
 							{
 								Main.nextNPC[108] = true;
 							}
+
 							if (NPC.savedMech && num27 < 1)
 							{
 								Main.nextNPC[124] = true;
 							}
+
 							if (NPC.downedFrost && num28 < 1 && Main.xMas)
 							{
 								Main.nextNPC[142] = true;
 							}
+
 							if (NPC.downedMechBossAny && num30 < 1)
 							{
 								Main.nextNPC[178] = true;
 							}
+
 							if (flag8 && num31 < 1 && (NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3 || flag9))
 							{
 								Main.nextNPC[207] = true;
 							}
+
 							if (NPC.downedQueenBee && num35 < 1)
 							{
 								Main.nextNPC[228] = true;
 							}
+
 							if (NPC.downedPirates && num36 < 1)
 							{
 								Main.nextNPC[229] = true;
 							}
+
 							if (num29 < 1 && Main.hardMode)
 							{
 								Main.nextNPC[160] = true;
 							}
+
 							if (Main.hardMode && NPC.downedPlantBoss && num33 < 1)
 							{
 								Main.nextNPC[209] = true;
 							}
+
 							if (num41 >= 8 && num34 < 1)
 							{
 								Main.nextNPC[227] = true;
 							}
+
 							if (flag10 && num32 < 1 && num41 >= 14)
 							{
 								Main.nextNPC[208] = true;
 							}
+
 							if (NPC.savedBartender && num40 < 1)
 							{
 								Main.nextNPC[550] = true;
 							}
+
 							if (WorldGen.spawnNPC == 0 && num21 < 1)
 							{
 								WorldGen.spawnNPC = 22;
 							}
+
 							if (WorldGen.spawnNPC == 0 && (double)num43 > 5000.0 && num17 < 1)
 							{
 								WorldGen.spawnNPC = 17;
 							}
+
 							if (WorldGen.spawnNPC == 0 && flag5 && num18 < 1 && num17 > 0)
 							{
 								WorldGen.spawnNPC = 18;
 							}
+
 							if (WorldGen.spawnNPC == 0 && flag6 && num20 < 1)
 							{
 								WorldGen.spawnNPC = 19;
 							}
+
 							if (WorldGen.spawnNPC == 0 && NPC.savedGoblin && num26 < 1)
 							{
 								WorldGen.spawnNPC = 107;
 							}
+
 							if (WorldGen.spawnNPC == 0 && NPC.savedTaxCollector && num39 < 1)
 							{
 								WorldGen.spawnNPC = 441;
 							}
+
 							if (WorldGen.spawnNPC == 0 && NPC.savedWizard && num25 < 1)
 							{
 								WorldGen.spawnNPC = 108;
 							}
+
 							if (WorldGen.spawnNPC == 0 && Main.hardMode && num29 < 1)
 							{
 								WorldGen.spawnNPC = 160;
 							}
+
 							if (WorldGen.spawnNPC == 0 && (NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3) && num19 < 1)
 							{
 								WorldGen.spawnNPC = 20;
 							}
+
 							if (WorldGen.spawnNPC == 0 && flag7 && num17 > 0 && num23 < 1)
 							{
 								WorldGen.spawnNPC = 38;
 							}
+
 							if (WorldGen.spawnNPC == 0 && NPC.downedQueenBee && num35 < 1)
 							{
 								WorldGen.spawnNPC = 228;
 							}
+
 							if (WorldGen.spawnNPC == 0 && NPC.downedMechBossAny && num30 < 1)
 							{
 								WorldGen.spawnNPC = 178;
 							}
+
 							if (WorldGen.spawnNPC == 0 && NPC.savedMech && num27 < 1)
 							{
 								WorldGen.spawnNPC = 124;
 							}
+
 							if (WorldGen.spawnNPC == 0 && NPC.savedAngler && num38 < 1)
 							{
 								WorldGen.spawnNPC = 369;
 							}
+
 							if (WorldGen.spawnNPC == 0 && Main.hardMode && NPC.downedPlantBoss && num33 < 1)
 							{
 								WorldGen.spawnNPC = 209;
 							}
+
 							if (WorldGen.spawnNPC == 0 && NPC.downedPirates && num36 < 1)
 							{
 								WorldGen.spawnNPC = 229;
 							}
+
 							if (WorldGen.spawnNPC == 0 && NPC.downedBoss3 && num24 < 1)
 							{
 								WorldGen.spawnNPC = 54;
 							}
+
 							if (WorldGen.spawnNPC == 0 && NPC.savedStylist && num37 < 1)
 							{
 								WorldGen.spawnNPC = 353;
 							}
+
 							if (WorldGen.spawnNPC == 0 && flag8 && num31 < 1)
 							{
 								WorldGen.spawnNPC = 207;
 							}
+
 							if (WorldGen.spawnNPC == 0 && num41 >= 8 && num34 < 1)
 							{
 								WorldGen.spawnNPC = 227;
 							}
+
 							if (WorldGen.spawnNPC == 0 && flag10 && num41 >= 14 && num32 < 1)
 							{
 								WorldGen.spawnNPC = 208;
 							}
+
 							if (WorldGen.spawnNPC == 0 && NPC.downedFrost && num28 < 1 && Main.xMas)
 							{
 								WorldGen.spawnNPC = 142;
 							}
+
 							if (WorldGen.spawnNPC == 0 && NPC.savedBartender && num40 < 1)
 							{
 								WorldGen.spawnNPC = 550;
 							}
+
+							NPCLoader.CanTownNPCSpawn(num41, num43);
 						}
 					}
 				}
@@ -59237,6 +_,7 @@
 			{
 				num = 1.0;
 			}
+
 			return num;
 		}
 
@@ -59247,10 +_,12 @@
 			{
 				num = (double)Damage - (double)Defense * 0.75;
 			}
+
 			if (num < 1.0)
 			{
 				num = 1.0;
 			}
+
 			return num;
 		}
 
@@ -59260,13 +_,13 @@
 			{
 				case TileChangeType.LavaWater:
 					Main.PlaySound(SoundID.LiquidsWaterLava, x * 16 + count * 8, y * 16 + count * 8);
-					return;
+				return;
 				case TileChangeType.HoneyWater:
 					Main.PlaySound(SoundID.LiquidsHoneyWater, x * 16 + count * 8, y * 16 + count * 8);
-					return;
+				return;
 				case TileChangeType.HoneyLava:
 					Main.PlaySound(SoundID.LiquidsHoneyLava, x * 16 + count * 8, y * 16 + count * 8);
-					return;
+				return;
 				default:
 					return;
 			}
@@ -59291,6 +_,7 @@
 			{
 				return Main._trackedSounds[id];
 			}
+
 			return null;
 		}
 
@@ -59300,6 +_,7 @@
 			{
 				return null;
 			}
+
 			return Main.PlaySound(type, (int)position.X, (int)position.Y);
 		}
 
@@ -59309,6 +_,7 @@
 			{
 				return null;
 			}
+
 			return Main.PlaySound(type.SoundId, x, y, type.Style, type.Volume, type.GetRandomPitch());
 		}
 
@@ -59318,6 +_,7 @@
 			{
 				current.Value.Stop();
 			}
+
 			Main._trackedSounds.Clear();
 		}
 
@@ -59327,11 +_,13 @@
 			{
 				return SlotId.Invalid;
 			}
+
 			Vector2 value = Main.screenPosition + new Vector2((float)(Main.screenWidth / 2), (float)(Main.screenHeight / 2));
 			if (Vector2.DistanceSquared(value, position) > 1E+08f)
 			{
 				return SlotId.Invalid;
 			}
+
 			ActiveSound value2 = new ActiveSound(style, position);
 			return Main._trackedSounds.Add(value2);
 		}
@@ -59342,6 +_,7 @@
 			{
 				return SlotId.Invalid;
 			}
+
 			ActiveSound value = new ActiveSound(style);
 			return Main._trackedSounds.Add(value);
 		}
@@ -59361,11 +_,13 @@
 						SoundEffectInstance result = null;
 						return result;
 					}
+
 					if (Main.soundVolume == 0f && (type < 30 || type > 35))
 					{
 						SoundEffectInstance result = null;
 						return result;
 					}
+
 					bool flag = false;
 					float num2 = 1f;
 					float num3 = 0f;
@@ -59380,11 +_,13 @@
 							SoundEffectInstance result = null;
 							return result;
 						}
+
 						if (Main.netMode == 2)
 						{
 							SoundEffectInstance result = null;
 							return result;
 						}
+
 						Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)(Main.screenPosition.X - (float)(Main.screenWidth * 2)), (int)(Main.screenPosition.Y - (float)(Main.screenHeight * 2)), Main.screenWidth * 5, Main.screenHeight * 5);
 						Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(x, y, 1, 1);
 						Vector2 vector = new Vector2(Main.screenPosition.X + (float)Main.screenWidth * 0.5f, Main.screenPosition.Y + (float)Main.screenHeight * 0.5f);
@@ -59392,6 +_,7 @@
 						{
 							flag = true;
 						}
+
 						if (flag)
 						{
 							num3 = ((float)x - vector.X) / ((float)Main.screenWidth * 0.5f);
@@ -59401,23 +_,28 @@
 							num2 = 1f - num6 / ((float)Main.screenWidth * 1.5f);
 						}
 					}
+
 					if (num3 < -1f)
 					{
 						num3 = -1f;
 					}
+
 					if (num3 > 1f)
 					{
 						num3 = 1f;
 					}
+
 					if (num2 > 1f)
 					{
 						num2 = 1f;
 					}
+
 					if (num2 <= 0f && (type < 34 || type > 35 || type > 39))
 					{
 						SoundEffectInstance result = null;
 						return result;
 					}
+
 					if (flag)
 					{
 						if ((type >= 30 && type <= 35) || type == 39)
@@ -59428,18 +_,25 @@
 						{
 							num2 *= Main.soundVolume;
 						}
+
 						if (num2 > 1f)
 						{
 							num2 = 1f;
 						}
+
 						SoundEffectInstance result;
 						if (num2 <= 0f && (type < 30 || type > 35) && type != 39)
 						{
 							result = null;
 							return result;
 						}
+
 						SoundEffectInstance soundEffectInstance = null;
-						if (type == 0)
+						if (SoundLoader.PlayModSound(type, num, num2, num3, ref soundEffectInstance))
+						{
+							// Modders can return null to not play anything (prevent overlap), return the original sound effect (restarts sound), or return a new sound effect instance to allow overlapping sound.
+						}
+						else if (type == 0)
 						{
 							int num7 = Main.rand.Next(3);
 							Main.soundInstanceDig[num7].Stop();
@@ -59464,14 +_,17 @@
 							{
 								num2 *= 0.5f;
 							}
+
 							if (num == 124 || num == 125)
 							{
 								num2 *= 0.65f;
 							}
+
 							if (num == 116)
 							{
 								num2 *= 0.5f;
 							}
+
 							if (num == 1)
 							{
 								int num9 = Main.rand.Next(3);
@@ -59479,6 +_,7 @@
 								{
 									num = 18;
 								}
+
 								if (num9 == 2)
 								{
 									num = 19;
@@ -59491,6 +_,7 @@
 								{
 									num2 *= 0.75f;
 								}
+
 								if (Main.soundInstanceItem[num].State == SoundState.Playing)
 								{
 									result = null;
@@ -59501,10 +_,12 @@
 							{
 								num2 *= 0.5f;
 							}
+
 							if (num != 9 && num != 10 && num != 24 && num != 26 && num != 34 && num != 43 && num != 103)
 							{
 								Main.soundInstanceItem[num].Stop();
 							}
+
 							Main.soundInstanceItem[num] = Main.soundItem[num].CreateInstance();
 							Main.soundInstanceItem[num].Volume = num2;
 							Main.soundInstanceItem[num].Pan = num3;
@@ -59524,11 +_,13 @@
 							{
 								Main.soundInstanceItem[num].Pitch = (float)Main.rand.Next(-6, 7) * 0.01f;
 							}
+
 							if (num == 26 || num == 35)
 							{
 								Main.soundInstanceItem[num].Volume = num2 * 0.75f;
 								Main.soundInstanceItem[num].Pitch = Main.harpNote;
 							}
+
 							soundEffectInstance = Main.soundInstanceItem[num];
 						}
 						else if (type == 3)
@@ -59537,19 +_,23 @@
 							{
 								num2 *= 0.5f;
 							}
+
 							if (num == 57 && Main.soundInstanceNPCHit[num].State == SoundState.Playing)
 							{
 								result = null;
 								return result;
 							}
+
 							if (num == 57)
 							{
 								num2 *= 0.6f;
 							}
+
 							if (num == 55 || num == 56)
 							{
 								num2 *= 0.5f;
 							}
+
 							Main.soundInstanceNPCHit[num].Stop();
 							Main.soundInstanceNPCHit[num] = Main.soundNPCHit[num].CreateInstance();
 							Main.soundInstanceNPCHit[num].Volume = num2;
@@ -59563,19 +_,23 @@
 							{
 								num2 *= 0.5f;
 							}
+
 							if (num == 61)
 							{
 								num2 *= 0.6f;
 							}
+
 							if (num == 62)
 							{
 								num2 *= 0.6f;
 							}
+
 							if (num == 10 && Main.soundInstanceNPCKilled[num].State == SoundState.Playing)
 							{
 								result = null;
 								return result;
 							}
+
 							Main.soundInstanceNPCKilled[num] = Main.soundNPCKilled[num].CreateInstance();
 							Main.soundInstanceNPCKilled[num].Volume = num2;
 							Main.soundInstanceNPCKilled[num].Pan = num3;
@@ -59693,6 +_,7 @@
 								num = 1;
 								num13 = 0.25f;
 							}
+
 							if (Main.soundInstanceRoar[num].State == SoundState.Stopped)
 							{
 								Main.soundInstanceRoar[num] = Main.soundRoar[num].CreateInstance();
@@ -59804,6 +_,7 @@
 								result = null;
 								return result;
 							}
+
 							Main.soundInstancePixie.Stop();
 							Main.soundInstancePixie = Main.soundPixie.CreateInstance();
 							Main.soundInstancePixie.Volume = num2;
@@ -59818,6 +_,7 @@
 								result = null;
 								return result;
 							}
+
 							Main.soundInstanceMech[num] = Main.soundMech[num].CreateInstance();
 							Main.soundInstanceMech[num].Volume = num2;
 							Main.soundInstanceMech[num].Pan = num3;
@@ -59830,39 +_,48 @@
 							{
 								num2 *= 0.5f;
 							}
+
 							if (num >= 88 && num <= 91)
 							{
 								num2 *= 0.7f;
 							}
+
 							if (num >= 93 && num <= 99)
 							{
 								num2 *= 0.4f;
 							}
+
 							if (num == 92)
 							{
 								num2 *= 0.5f;
 							}
+
 							if (num == 103)
 							{
 								num2 *= 0.4f;
 							}
+
 							if (num == 104)
 							{
 								num2 *= 0.55f;
 							}
+
 							if (num == 100 || num == 101)
 							{
 								num2 *= 0.25f;
 							}
+
 							if (num == 102)
 							{
 								num2 *= 0.4f;
 							}
+
 							if (Main.soundInstanceZombie[num].State == SoundState.Playing)
 							{
 								result = null;
 								return result;
 							}
+
 							Main.soundInstanceZombie[num] = Main.soundZombie[num].CreateInstance();
 							Main.soundInstanceZombie[num].Volume = num2;
 							Main.soundInstanceZombie[num].Pan = num3;
@@ -59881,6 +_,7 @@
 									return result;
 								}
 							}
+
 							Main.soundInstanceZombie[num] = Main.soundZombie[num].CreateInstance();
 							Main.soundInstanceZombie[num].Volume = num2 * 0.75f;
 							Main.soundInstanceZombie[num].Pan = num3;
@@ -59892,6 +_,7 @@
 							{
 								Main.soundInstanceZombie[num].Pitch = (float)Main.rand.Next(-40, 21) * 0.01f;
 							}
+
 							soundEffectInstance = Main.soundInstanceZombie[num];
 						}
 						else if (type == 31)
@@ -59910,6 +_,7 @@
 								result = null;
 								return result;
 							}
+
 							Main.soundInstanceZombie[num] = Main.soundZombie[num].CreateInstance();
 							Main.soundInstanceZombie[num].Volume = num2 * 0.15f;
 							Main.soundInstanceZombie[num].Pan = num3;
@@ -59924,6 +_,7 @@
 								result = null;
 								return result;
 							}
+
 							Main.soundInstanceZombie[num] = Main.soundZombie[num].CreateInstance();
 							Main.soundInstanceZombie[num].Volume = num2 * 0.2f;
 							Main.soundInstanceZombie[num].Pan = num3;
@@ -59937,6 +_,7 @@
 							{
 								num17 = 1f;
 							}
+
 							num2 *= num17;
 							num2 *= 0.2f;
 							if (num2 <= 0f || x == -1 || y == -1)
@@ -59967,6 +_,7 @@
 							{
 								num18 = 1f;
 							}
+
 							num2 *= num18;
 							num2 *= 0.65f;
 							if (num2 <= 0f || x == -1 || y == -1)
@@ -59997,6 +_,7 @@
 							{
 								num19 = 0;
 							}
+
 							Main.soundInstanceRoar[num19] = Main.soundRoar[num19].CreateInstance();
 							Main.soundInstanceRoar[num19].Volume = num2;
 							Main.soundInstanceRoar[num19].Pan = num3;
@@ -60004,6 +_,7 @@
 							{
 								Main.soundInstanceRoar[num19].Pitch += 0.6f;
 							}
+
 							soundEffectInstance = Main.soundInstanceRoar[num19];
 						}
 						else if (type == 37)
@@ -60056,22 +_,70 @@
 							soundEffectInstance.Pan = num3;
 							Main.trackableSoundInstances[num] = soundEffectInstance;
 						}
+
+						// TODO, trackable sounds? verify working. return soundEffectInstance
+						else if (type == SoundLoader.customSoundType)
+						{
+							SoundLoader.customSoundInstances[num].Stop();
+							SoundLoader.customSoundInstances[num] = SoundLoader.customSounds[num].CreateInstance();
+							SoundLoader.customSoundInstances[num].Volume = num2;
+							SoundLoader.customSoundInstances[num].Pan = num3;
+							//Main.PlaySoundInstance(SoundLoader.customSoundInstances[num]);
+							soundEffectInstance = SoundLoader.customSoundInstances[num];
+						}
+
 						if (soundEffectInstance != null)
 						{
 							soundEffectInstance.Pitch += pitchOffset;
 							soundEffectInstance.Volume *= volumeScale;
 							Main.PlaySoundInstance(soundEffectInstance);
 						}
+
+						if ((type >= 30 && type <= 35) || type == 39)
+						{
+							if (Main.ambientError > 0)
+							{
+								Main.ambientError--;
+							}
+						}
+						else
+						{
+							if (Main.soundError > 0)
+							{
+								Main.soundError--;
+							}
+						}
+
 						result = soundEffectInstance;
 						return result;
 					}
 				}
 				catch
 				{
-				}
+					if ((type >= 30 && type <= 35) || type == 39)
+					{
+						Main.ambientError++;
+						if (Main.ambientError >= 100)
+						{
+							Main.ambientError = 0;
+							Main.ambientVolume = 0f;
+						}
+					}
+					else
+					{
+						Main.soundError++;
+						if (Main.soundError >= 100)
+						{
+							Main.soundError = 0;
+							Main.soundVolume = 0f;
+						}
+					}
+				}
+
 				return null;
 #if !WINDOWS
 			}
+
 #endif
 		}
 
@@ -60088,6 +_,7 @@
 				Main._pendingCharacterSelect = null;
 				return;
 			}
+
 			if (!Main.menuMultiplayer)
 			{
 				Main.ServerSideCharacter = false;
@@ -60099,6 +_,7 @@
 				Main.menuMode = 6;
 				return;
 			}
+
 			Main.ServerSideCharacter = false;
 			data.SetAsActive();
 			Main.PlaySound(10, -1, -1, 1, 1f, 0f);
@@ -60109,15 +_,18 @@
 					Main.menuMode = 10;
 					Netplay.StartTcpClient();
 				}
+
 				Main.autoJoin = false;
 				return;
 			}
+
 			if (Main.menuServer)
 			{
 				Main.LoadWorlds();
 				Main.menuMode = 6;
 				return;
 			}
+
 			Main.menuMode = 13;
 			Main.clrInput();
 		}
@@ -60143,6 +_,7 @@
 			{
 				Main.graphics.ToggleFullScreen();
 			}
+
 #if WINDOWS
 			Main.screenMaximized = (((Form)Control.FromHandle(Main.instance.Window.Handle)).WindowState == FormWindowState.Maximized);
 			if (Main.screenBorderless && Main.screenMaximized && !Main.graphics.IsFullScreen)
@@ -60150,6 +_,7 @@
 				Main.screenMaximized = false;
 				((Form)Control.FromHandle(Main.instance.Window.Handle)).WindowState = FormWindowState.Normal;
 			}
+
 			Form form = (Form)Control.FromHandle(Main.instance.Window.Handle);
 			bool flag = form.FormBorderStyle == FormBorderStyle.None;
 #else
@@ -60159,6 +_,7 @@
 			{
 				return;
 			}
+
 			bool flag2 = false;
 			int num3;
 			int num4;
@@ -60172,6 +_,7 @@
 					width = bounds.Width;
 					height = bounds.Height;
 				}
+
 #endif
 				if (width > Main.maxScreenW)
 				{
@@ -60179,12 +_,14 @@
 					width = Main.maxScreenW;
 					height = (int)(num * (float)width);
 				}
+
 				if (height > Main.maxScreenH)
 				{
 					float num2 = (float)width / (float)height;
 					height = Main.maxScreenH;
 					width = (int)(num2 * (float)height);
 				}
+
 				if (!Main.graphics.IsFullScreen)
 				{
 					num3 = Math.Max(Main.graphics.PreferredBackBufferWidth, Main.graphics.GraphicsDevice.Viewport.Width);
@@ -60209,6 +_,7 @@
 					width = Main.displayWidth[0];
 					height = Main.displayHeight[0];
 				}
+
 #endif
 				width = Math.Min(width, Main.maxScreenW);
 				height = Math.Min(height, Main.maxScreenH);
@@ -60216,6 +_,7 @@
 				num4 = Main.graphics.GraphicsDevice.Viewport.Height;
 				flag2 = (Main.graphics.PreferredBackBufferWidth != Main.graphics.GraphicsDevice.Viewport.Width || Main.graphics.PreferredBackBufferHeight != Main.graphics.GraphicsDevice.Viewport.Height);
 			}
+
 #if WINDOWS
 			if (!fullscreen && !flag2)
 			{
@@ -60224,12 +_,14 @@
 					width = form.ClientSize.Width;
 					flag2 = true;
 				}
+
 				if (form.ClientSize.Height < Main.graphics.PreferredBackBufferHeight)
 				{
 					height = form.ClientSize.Height;
 					flag2 = true;
 				}
 			}
+
 #endif
 			width &= 2147483646;
 			height &= 2147483646;
@@ -60242,6 +_,7 @@
 				{
 					Main.renderNow = true;
 				}
+
 				Main.screenWidth = width;
 				Main.screenHeight = height;
 				Main.graphics.PreferredBackBufferWidth = Main.screenWidth;
@@ -60267,15 +_,18 @@
 						form.FormBorderStyle = FormBorderStyle.Sizable;
 					}
 				}
+
 #endif
 				Lighting.Initialize(true);
 				if (!Main.drawToScreen)
 				{
 					Main.instance.InitTargets();
 				}
+
 				UserInterface.ActiveInstance.Recalculate();
 				Console.WriteLine(Language.GetTextValue("Misc.ResolutionChanged", width, height));
 			}
+
 			if (!Main.graphics.SynchronizeWithVerticalRetrace)
 			{
 				Main.graphics.SynchronizeWithVerticalRetrace = true;
@@ -60294,19 +_,21 @@
 			{
 				return;
 			}
+
 			if (!Main.gameMenu)
 			{
 				WorldGen.SaveAndQuit(delegate
-					{
-						Main.menuMode = 888;
-						Main._blockFancyUIWhileLoading = true;
-						Main.LoadPlayers();
-						Main.MenuUI.SetState(Main._characterSelectMenu);
-						Main._blockFancyUIWhileLoading = false;
-						Main._pendingCharacterSelect = method;
-					});
+				{
+					Main.menuMode = 888;
+					Main._blockFancyUIWhileLoading = true;
+					Main.LoadPlayers();
+					Main.MenuUI.SetState(Main._characterSelectMenu);
+					Main._blockFancyUIWhileLoading = false;
+					Main._pendingCharacterSelect = method;
+				});
 				return;
 			}
+
 			Main.menuMode = 888;
 			Main._blockFancyUIWhileLoading = true;
 			Main.LoadPlayers();

