--- src/Terraria\Terraria\Utils.cs
+++ src/tModLoader\Terraria\Utils.cs
@@ -516,9 +_,42 @@
 			return array;
 		}
 
+		public static T NextEnum<T>(this T src) where T : struct
+		{
+			if (!typeof(T).IsEnum) throw new ArgumentException(String.Format("Argumnent {0} is not an Enum", typeof(T).FullName));
+
+			T[] Arr = (T[])Enum.GetValues(src.GetType());
+			int j = Array.IndexOf<T>(Arr, src) + 1;
+			return (Arr.Length == j) ? Arr[0] : Arr[j];
+		}
+
+		public static T PreviousEnum<T>(this T src) where T : struct
+		{
+			if (!typeof(T).IsEnum) throw new ArgumentException(String.Format("Argumnent {0} is not an Enum", typeof(T).FullName));
+
+			T[] Arr = (T[])Enum.GetValues(src.GetType());
+			int j = Array.IndexOf<T>(Arr, src) - 1;
+			return (j < 0) ? Arr[Arr.Length - 1] : Arr[j];
+		}
+
+		public static bool NextBool(this UnifiedRandom r)
+		{
+			return r.NextDouble() < .5;
+		}
+
 		public static float NextFloat(this UnifiedRandom r)
 		{
 			return (float)r.NextDouble();
+		}
+
+		public static float NextFloat(this UnifiedRandom r, float maxValue)
+		{
+			return (float)r.NextDouble() * maxValue;
+		}
+
+		public static float NextFloat(this UnifiedRandom r, float minValue, float maxValue)
+		{
+			return (float)r.NextDouble() * (maxValue - minValue) + minValue;
 		}
 
 		public static float NextFloatDirection(this UnifiedRandom r)

