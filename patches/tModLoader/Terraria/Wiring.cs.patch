--- src/Terraria\Terraria\Wiring.cs
+++ src/tModLoader\Terraria\Wiring.cs
@@ -5,6 +_,7 @@
 using Terraria.GameContent.Events;
 using Terraria.GameContent.UI;
 using Terraria.ID;
+using Terraria.ModLoader;
 
 namespace Terraria
 {
@@ -15,26 +_,26 @@
 		public static bool blockPlayerTeleportationForOneIteration;
 		public static bool running;
 		private static Dictionary<Point16, bool> _wireSkip;
-		private static DoubleStack<Point16> _wireList;
-		private static DoubleStack<byte> _wireDirectionList;
-		private static Dictionary<Point16, byte> _toProcess;
+		public static DoubleStack<Point16> _wireList;
+		public static DoubleStack<byte> _wireDirectionList;
+		public static Dictionary<Point16, byte> _toProcess;
 		private static Queue<Point16> _GatesCurrent;
-		private static Queue<Point16> _LampsToCheck;
-		private static Queue<Point16> _GatesNext;
+		public static Queue<Point16> _LampsToCheck;
+		public static Queue<Point16> _GatesNext;
 		private static Dictionary<Point16, bool> _GatesDone;
 		private static Dictionary<Point16, byte> _PixelBoxTriggers;
-		private static Vector2[] _teleport;
-		private static int[] _inPumpX;
-		private static int[] _inPumpY;
-		private static int _numInPump;
-		private static int[] _outPumpX;
-		private static int[] _outPumpY;
-		private static int _numOutPump;
+		public static Vector2[] _teleport;
+		public static int[] _inPumpX;
+		public static int[] _inPumpY;
+		public static int _numInPump;
+		public static int[] _outPumpX;
+		public static int[] _outPumpY;
+		public static int _numOutPump;
 		private static int[] _mechX;
 		private static int[] _mechY;
 		private static int _numMechs;
 		private static int[] _mechTime;
-		private static int _currentWireColor;
+		public static int _currentWireColor;
 		private static int CurrentUser = 254;
 
 		public static void SetCurrentUser(int plr = -1)
@@ -338,7 +_,7 @@
 			}
 		}
 
-		private static bool CheckMech(int i, int j, int time)
+		public static bool CheckMech(int i, int j, int time)
 		{
 			for (int k = 0; k < Wiring._numMechs; k++)
 			{
@@ -412,7 +_,7 @@
 			}
 		}
 
-		private static void TripWire(int left, int top, int width, int height)
+		public static void TripWire(int left, int top, int width, int height)
 		{
 			if (Main.netMode == 1)
 			{
@@ -916,6 +_,10 @@
 			}
 			if (tile.active())
 			{
+				if (!TileLoader.PreHitWire(i, j, type))
+				{
+					return;
+				}
 				if (type == 144)
 				{
 					Wiring.HitSwitch(i, j);
@@ -1340,7 +_,7 @@
 									NetMessage.SendData(19, -1, -1, "", 4 + flag4.ToInt(), (float)i, (float)j, 0f, 0, 0, 0);
 									return;
 								}
-								if (type == 11)
+								if (TileLoader.CloseDoorID(Main.tile[i, j]) >= 0)
 								{
 									if (WorldGen.CloseDoor(i, j, true))
 									{
@@ -1348,7 +_,7 @@
 										return;
 									}
 								}
-								else if (type == 10)
+								else if (TileLoader.OpenDoorID(Main.tile[i, j]) >= 0)
 								{
 									int num69 = 1;
 									if (Main.rand.Next(2) == 0)
@@ -1446,7 +_,7 @@
 									}
 									else
 									{
-										if (type == 4)
+										if (TileLoader.IsTorch(type))
 										{
 											if (tile.frameX < 66)
 											{
@@ -2009,7 +_,7 @@
 											}
 											else
 											{
-												if (type == 139 || type == 35)
+												if (type == 139 || type == 35 || TileLoader.IsModMusicBox(tile))
 												{
 													WorldGen.SwitchMB(i, j);
 													return;
@@ -2514,6 +_,7 @@
 						}
 					}
 				}
+				TileLoader.HitWire(i, j, type);
 			}
 		}
 
@@ -2582,7 +_,7 @@
 			}
 		}
 
-		private static void DeActive(int i, int j)
+		public static void DeActive(int i, int j)
 		{
 			if (!Main.tile[i, j].active())
 			{
@@ -2621,7 +_,7 @@
 			}
 		}
 
-		private static void ReActive(int i, int j)
+		public static void ReActive(int i, int j)
 		{
 			Main.tile[i, j].inActive(false);
 			WorldGen.SquareTileFrame(i, j, false);

