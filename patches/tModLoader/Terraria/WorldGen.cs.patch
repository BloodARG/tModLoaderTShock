--- src/Terraria\Terraria\WorldGen.cs
+++ src/tModLoader\Terraria\WorldGen.cs
@@ -18,6 +_,8 @@
 using Terraria.ObjectData;
 using Terraria.Utilities;
 using Terraria.World.Generation;
+using Terraria.ModLoader;
+using Terraria.ModLoader.IO;
 
 #if CLIENT
 using Terraria.Map;
@@ -548,7 +_,13 @@
 		private static int lAltarY;
 		public static int tileReframeCount = 0;
 		public static bool noMapUpdate = false;
+		public static StructureMap structures;
+		public static double worldSurface;
 		public static double worldSurfaceLow;
+		public static double worldSurfaceHigh;
+		public static double rockLayer;
+		public static double rockLayerLow;
+		public static double rockLayerHigh;
 		public static int tLeft;
 		public static int tRight;
 		public static int tTop;
@@ -906,7 +_,7 @@
 					return true;
 				}
 			}
-			for (int j = 0; j < 580; j++)
+			for (int j = 0; j < Main.nextNPC.Length; j++)
 			{
 				if (Main.nextNPC[j] && WorldGen.CheckConditions(j))
 				{
@@ -931,6 +_,10 @@
 
 		public static bool CheckConditions(int type)
 		{
+			if (!NPCLoader.CheckConditions(type))
+			{
+				return false;
+			}
 			if (type != 160)
 			{
 				return true;
@@ -1644,7 +_,7 @@
 												}
 											}
 										}
-										else if (Main.tile[num9, num10].type == 21)
+										else if (TileLoader.IsChest(Main.tile[num9, num10].type))
 										{
 											if (num8 > 0)
 											{
@@ -1752,7 +_,7 @@
 			WorldGen.roomY2 = y;
 			WorldGen.numRoomTiles = 0;
 			WorldGen.roomCeilingsCount = 0;
-			for (int i = 0; i < 467; i++)
+			for (int i = 0; i < WorldGen.houseTile.Length; i++)
 			{
 				WorldGen.houseTile[i] = false;
 			}
@@ -1827,7 +_,7 @@
 				{
 					return;
 				}
-				if (Main.tile[x, y].type == 11 && (Main.tile[x, y].frameX == 0 || Main.tile[x, y].frameX == 54))
+				if (TileLoader.CloseDoorID(Main.tile[x, y]) >= 0 && (Main.tile[x, y].frameX == 0 || Main.tile[x, y].frameX == 54))
 				{
 					return;
 				}
@@ -2024,7 +_,7 @@
 			{
 				for (int n = j - num; n < j + num; n++)
 				{
-					if (Main.tile[m, n].active() && Main.tile[m, n].type == 21)
+					if (Main.tile[m, n].active() && TileLoader.IsChest(Main.tile[m, n].type))
 					{
 						return false;
 					}
@@ -2170,6 +_,18 @@
 
 		public static void worldGenCallBack(object threadContext)
 		{
+			try
+			{
+				do_worldGenCallBack(threadContext);
+			}
+			catch (Exception e)
+			{
+				ErrorLogger.LogException(e);
+			}
+		}
+
+		public static void do_worldGenCallBack(object threadContext)
+		{
 			Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 			WorldGen.clearWorld();
 			WorldGen.generateWorld(Main.ActiveWorldFileData.Seed, threadContext as GenerationProgress);
@@ -2232,11 +_,24 @@
 		public static void SaveAndQuit(Action callback = null)
 		{
 			Main.PlaySound(11, -1, -1, 1, 1f, 0f);
+			ModHooks.PreSaveAndQuit();
 			ThreadPool.QueueUserWorkItem(new WaitCallback(WorldGen.SaveAndQuitCallBack), callback);
 		}
 
 		public static void playWorldCallBack(object threadContext)
 		{
+			try
+			{
+				do_playWorldCallBack(threadContext);
+			}
+			catch (Exception e)
+			{
+				ErrorLogger.LogException(e);
+			}
+		}
+
+		public static void do_playWorldCallBack(object threadContext)
+		{
 			if (Main.rand == null)
 			{
 				Main.rand = new UnifiedRandom((int)DateTime.Now.Ticks);
@@ -2278,12 +_,19 @@
 					{
 						if (!WorldGen.worldBackup)
 						{
-							Console.WriteLine(Language.GetTextValue("Error.LoadFailedNoBackup"));
+							string message = Language.GetTextValue("Error.LoadFailedNoBackup");
+							if (WorldIO.customDataFail != null)
+							{
+								message = WorldIO.customDataFail.modName + " " + message;
+								message += "\n" + WorldIO.customDataFail.InnerException;
+							}
+							Console.WriteLine(message);
 							return;
 						}
 						FileUtilities.Copy(Main.worldPathName, Main.worldPathName + ".bad", isCloudSave, true);
 						FileUtilities.Copy(Main.worldPathName + ".bak", Main.worldPathName, isCloudSave, true);
 						FileUtilities.Delete(Main.worldPathName + ".bak", isCloudSave);
+						WorldIO.LoadDedServBackup(Main.worldPathName, isCloudSave);
 						WorldFile.loadWorld(Main.ActiveWorldFileData.IsCloudSave);
 						if (WorldGen.loadFailed || !WorldGen.loadSuccess)
 						{
@@ -2293,7 +_,14 @@
 								FileUtilities.Copy(Main.worldPathName, Main.worldPathName + ".bak", isCloudSave, true);
 								FileUtilities.Copy(Main.worldPathName + ".bad", Main.worldPathName, isCloudSave, true);
 								FileUtilities.Delete(Main.worldPathName + ".bad", isCloudSave);
-								Console.WriteLine(Language.GetTextValue("Error.LoadFailed"));
+								WorldIO.RevertDedServBackup(Main.worldPathName, isCloudSave);
+								string message = Language.GetTextValue("Error.LoadFailed");
+								if (WorldIO.customDataFail != null)
+								{
+									message = WorldIO.customDataFail.modName + " " + message;
+									message += "\n" + WorldIO.customDataFail.InnerException;
+								}
+								Console.WriteLine(message);
 								return;
 							}
 						}
@@ -2632,6 +_,7 @@
 				Main.liquidBuffer[num10] = new LiquidBuffer();
 			}
 			WorldGen.setWorldSize();
+			WorldHooks.SetupWorld();
 			WorldGen.worldCleared = true;
 		}
 
@@ -4431,13 +_,13 @@
 			WorldGen._generator = new WorldGenerator(seed);
 			Main.rand = new UnifiedRandom(seed);
 			MicroBiome.ResetAll();
-			StructureMap structures = new StructureMap();
-			double worldSurface = 0.0;
+			structures = new StructureMap();
+			worldSurface = 0.0;
 			WorldGen.worldSurfaceLow = 0.0;
-			double worldSurfaceHigh = 0.0;
-			double rockLayer = 0.0;
-			double rockLayerLow = 0.0;
-			double rockLayerHigh = 0.0;
+			worldSurfaceHigh = 0.0;
+			rockLayer = 0.0;
+			rockLayerLow = 0.0;
+			rockLayerHigh = 0.0;
 			int copper = 7;
 			int iron = 6;
 			int silver = 9;
@@ -4478,6 +_,7 @@
 					}
 				}
 			}
+			WorldHooks.PreWorldGen();
 			WorldGen.AddGenerationPass("Reset", delegate(GenerationProgress progress)
 				{
 					Liquid.ReInit();
@@ -7343,7 +_,7 @@
 									int num12 = WorldGen.genRand.Next(num - m, num + m + 1);
 									int num13 = WorldGen.genRand.Next(num2 - num6, num2 + num6 - 2);
 									WorldGen.PlaceTile(num12, num13, 4, true, false, -1, 3);
-									if (Main.tile[num12, num13].type == 4)
+									if (TileLoader.IsTorch(Main.tile[num12, num13].type))
 									{
 										flag3 = true;
 									}
@@ -10292,7 +_,7 @@
 				});
 			WorldGen.AddGenerationPass("Micro Biomes", delegate(GenerationProgress progress)
 				{
-					progress.Message = Lang.gen[76];
+					progress.Message = Lang.gen[76] + "..Thin Ice";
 					float num = (float)(Main.maxTilesX * Main.maxTilesY) / 5040000f;
 					float num2 = (float)Main.maxTilesX / 4200f;
 					int num3 = (int)((float)WorldGen.genRand.Next(3, 6) * num);
@@ -10305,6 +_,7 @@
 						}
 					}
 					progress.Set(0.1f);
+					progress.Message = Lang.gen[76] + "..Enchanted Swords";
 					int num4 = (int)Math.Ceiling((double)num);
 					int l = 0;
 					while (l < num4)
@@ -10325,6 +_,7 @@
 						}
 					}
 					progress.Set(0.2f);
+					progress.Message = Lang.gen[76] + "..Campsites";
 					int num5 = (int)((float)WorldGen.genRand.Next(6, 12) * num);
 					int m = 0;
 					while (m < num5)
@@ -10334,6 +_,8 @@
 							m++;
 						}
 					}
+					progress.Message = Lang.gen[76] + "..Mining Explosives";
+					progress.Set(0.25f);
 					int num6 = (int)((float)WorldGen.genRand.Next(14, 30) * num);
 					int n = 0;
 					while (n < num6)
@@ -10343,6 +_,7 @@
 							n++;
 						}
 					}
+					progress.Message = Lang.gen[76] + "..Mahogany Trees";
 					progress.Set(0.3f);
 					int num7 = (int)((float)WorldGen.genRand.Next(6, 12) * num2);
 					int num8 = 0;
@@ -10355,6 +_,7 @@
 						}
 						num9++;
 					}
+					progress.Message = Lang.gen[76] + "..Corruption Pits";
 					progress.Set(0.4f);
 					if (!WorldGen.crimson)
 					{
@@ -10368,6 +_,8 @@
 							}
 						}
 					}
+					progress.Message = Lang.gen[76] + "..Minecart Tracks";
+					progress.Set(0.5f);
 					TrackGenerator.Run((int)(10f * num), (int)(num * 25f) + 250);
 					progress.Set(1f);
 				});
@@ -10419,7 +_,9 @@
 					WorldGen.gen = false;
 					Main.AnglerQuestSwap();
 				});
+			WorldHooks.ModifyWorldGenTasks(WorldGen._generator._passes, ref WorldGen._generator._totalLoadWeight);
 			WorldGen._generator.GenerateWorld(customProgressObject);
+			WorldHooks.PostWorldGen();
 			Main.WorldFileMetadata = FileMetadata.FromCurrentSettings(FileType.World);
 		}
 
@@ -10446,7 +_,7 @@
 		public static bool GrowPalmTree(int i, int y)
 		{
 			int num = y;
-			while (Main.tile[i, num].type == 20)
+			while (TileLoader.IsSapling(Main.tile[i, num].type))
 			{
 				num++;
 			}
@@ -10460,7 +_,7 @@
 			{
 				return false;
 			}
-			if (tile.type != 53 && tile.type != 234 && tile.type != 116 && tile.type != 112)
+			if (tile.type != 53 && tile.type != 234 && tile.type != 116 && tile.type != 112 && !TileLoader.CanGrowModPalmTree(tile.type))
 			{
 				return false;
 			}
@@ -10518,11 +_,11 @@
 		public static bool GrowEpicTree(int i, int y)
 		{
 			int num = y;
-			while (Main.tile[i, num].type == 20)
+			while (TileLoader.IsSapling(Main.tile[i, num].type))
 			{
 				num++;
 			}
-			if (Main.tile[i, num].active() && !Main.tile[i, num].halfBrick() && Main.tile[i, num].slope() == 0 && Main.tile[i, num].type == 2 && Main.tile[i, num - 1].wall == 0 && Main.tile[i, num - 1].liquid == 0 && ((Main.tile[i - 1, num].active() && (Main.tile[i - 1, num].type == 2 || Main.tile[i - 1, num].type == 23 || Main.tile[i - 1, num].type == 60 || Main.tile[i - 1, num].type == 109)) || (Main.tile[i + 1, num].active() && (Main.tile[i + 1, num].type == 2 || Main.tile[i + 1, num].type == 23 || Main.tile[i + 1, num].type == 60 || Main.tile[i + 1, num].type == 109))))
+			if (Main.tile[i, num].active() && !Main.tile[i, num].halfBrick() && Main.tile[i, num].slope() == 0 && Main.tile[i, num].type == 2 && Main.tile[i, num - 1].wall == 0 && Main.tile[i, num - 1].liquid == 0 && ((Main.tile[i - 1, num].active() && (Main.tile[i - 1, num].type == 2 || Main.tile[i - 1, num].type == 23 || Main.tile[i - 1, num].type == 60 || Main.tile[i - 1, num].type == 109 || TileLoader.CanGrowModTree(Main.tile[i - 1, num].type))) || (Main.tile[i + 1, num].active() && (Main.tile[i + 1, num].type == 2 || Main.tile[i + 1, num].type == 23 || Main.tile[i + 1, num].type == 60 || Main.tile[i + 1, num].type == 109 || TileLoader.CanGrowModTree(Main.tile[i + 1, num].type)))))
 			{
 				int num2 = 2;
 				if (WorldGen.EmptyTileCheck(i - num2, i + num2, num - 55, num - 1, 20))
@@ -10788,11 +_,11 @@
 					int num6 = WorldGen.genRand.Next(3);
 					bool flag3 = false;
 					bool flag4 = false;
-					if (Main.tile[i - 1, num].active() && !Main.tile[i - 1, num].halfBrick() && Main.tile[i - 1, num].slope() == 0 && (Main.tile[i - 1, num].type == 2 || Main.tile[i - 1, num].type == 23 || Main.tile[i - 1, num].type == 60 || Main.tile[i - 1, num].type == 109))
+					if (Main.tile[i - 1, num].active() && !Main.tile[i - 1, num].halfBrick() && Main.tile[i - 1, num].slope() == 0 && (Main.tile[i - 1, num].type == 2 || Main.tile[i - 1, num].type == 23 || Main.tile[i - 1, num].type == 60 || Main.tile[i - 1, num].type == 109 || TileLoader.CanGrowModTree(Main.tile[i - 1, num].type)))
 					{
 						flag3 = true;
 					}
-					if (Main.tile[i + 1, num].active() && !Main.tile[i + 1, num].halfBrick() && Main.tile[i + 1, num].slope() == 0 && (Main.tile[i + 1, num].type == 2 || Main.tile[i + 1, num].type == 23 || Main.tile[i + 1, num].type == 60 || Main.tile[i + 1, num].type == 109))
+					if (Main.tile[i + 1, num].active() && !Main.tile[i + 1, num].halfBrick() && Main.tile[i + 1, num].slope() == 0 && (Main.tile[i + 1, num].type == 2 || Main.tile[i + 1, num].type == 23 || Main.tile[i + 1, num].type == 60 || Main.tile[i + 1, num].type == 109 || TileLoader.CanGrowModTree(Main.tile[i + 1, num].type)))
 					{
 						flag4 = true;
 					}
@@ -11943,10 +_,21 @@
 						}
 					}
 					ushort type = tile3.type;
+					TileLoader.TreeGrowthFXGore(type, ref num2);
+					if (num2 > 0)
+					{
+						break;
+					}
+					TileLoader.PalmTreeGrowthFXGore(type, ref num2);
+					if (num2 > 0)
+					{
+						break;
+					}
 					if (type <= 70)
 					{
 						if (type <= 23)
 						{
+							//patch file: num2
 							if (type == 2)
 							{
 								num2 = 910;
@@ -12100,7 +_,7 @@
 		public static bool GrowTree(int i, int y)
 		{
 			int num = y;
-			while (Main.tile[i, num].type == 20)
+			while (TileLoader.IsSapling(Main.tile[i, num].type))
 			{
 				num++;
 			}
@@ -12108,7 +_,7 @@
 			{
 				return false;
 			}
-			if (Main.tile[i, num].nactive() && !Main.tile[i, num].halfBrick() && Main.tile[i, num].slope() == 0 && (Main.tile[i, num].type == 2 || Main.tile[i, num].type == 23 || Main.tile[i, num].type == 60 || Main.tile[i, num].type == 109 || Main.tile[i, num].type == 147 || Main.tile[i, num].type == 199 || Main.tile[i, num].type == 70) && (Main.tile[i, num - 1].wall == 0 || Main.tile[i, num - 1].wall == 106 || Main.tile[i, num - 1].wall == 107 || (Main.tile[i, num - 1].wall >= 138 && Main.tile[i, num - 1].wall <= 141) || Main.tile[i, num - 1].wall == 145 || Main.tile[i, num - 1].wall == 150 || Main.tile[i, num - 1].wall == 152) && ((Main.tile[i - 1, num].active() && (Main.tile[i - 1, num].type == 2 || Main.tile[i - 1, num].type == 23 || Main.tile[i - 1, num].type == 60 || Main.tile[i - 1, num].type == 109 || Main.tile[i - 1, num].type == 147 || Main.tile[i - 1, num].type == 199 || Main.tile[i - 1, num].type == 70)) || (Main.tile[i + 1, num].active() && (Main.tile[i + 1, num].type == 2 || Main.tile[i + 1, num].type == 23 || Main.tile[i + 1, num].type == 60 || Main.tile[i + 1, num].type == 109 || Main.tile[i + 1, num].type == 147 || Main.tile[i + 1, num].type == 199 || Main.tile[i + 1, num].type == 70))))
+			if (Main.tile[i, num].nactive() && !Main.tile[i, num].halfBrick() && Main.tile[i, num].slope() == 0 && (Main.tile[i, num].type == 2 || Main.tile[i, num].type == 23 || Main.tile[i, num].type == 60 || Main.tile[i, num].type == 109 || Main.tile[i, num].type == 147 || Main.tile[i, num].type == 199 || Main.tile[i, num].type == 70 || TileLoader.CanGrowModTree(Main.tile[i, num].type)) && (Main.tile[i, num - 1].wall == 0 || Main.tile[i, num - 1].wall == 106 || Main.tile[i, num - 1].wall == 107 || (Main.tile[i, num - 1].wall >= 138 && Main.tile[i, num - 1].wall <= 141) || Main.tile[i, num - 1].wall == 145 || Main.tile[i, num - 1].wall == 150 || Main.tile[i, num - 1].wall == 152) && ((Main.tile[i - 1, num].active() && (Main.tile[i - 1, num].type == 2 || Main.tile[i - 1, num].type == 23 || Main.tile[i - 1, num].type == 60 || Main.tile[i - 1, num].type == 109 || Main.tile[i - 1, num].type == 147 || Main.tile[i - 1, num].type == 199 || Main.tile[i - 1, num].type == 70 || TileLoader.CanGrowModTree(Main.tile[i - 1, num].type))) || (Main.tile[i + 1, num].active() && (Main.tile[i + 1, num].type == 2 || Main.tile[i + 1, num].type == 23 || Main.tile[i + 1, num].type == 60 || Main.tile[i + 1, num].type == 109 || Main.tile[i + 1, num].type == 147 || Main.tile[i + 1, num].type == 199 || Main.tile[i + 1, num].type == 70 || TileLoader.CanGrowModTree(Main.tile[i + 1, num].type)))))
 			{
 				int num2 = 2;
 				int num3 = 16;
@@ -12379,11 +_,11 @@
 					int num7 = WorldGen.genRand.Next(3);
 					bool flag3 = false;
 					bool flag4 = false;
-					if (Main.tile[i - 1, num].nactive() && !Main.tile[i - 1, num].halfBrick() && Main.tile[i - 1, num].slope() == 0 && (Main.tile[i - 1, num].type == 2 || Main.tile[i - 1, num].type == 23 || Main.tile[i - 1, num].type == 60 || Main.tile[i - 1, num].type == 109 || Main.tile[i - 1, num].type == 147 || Main.tile[i - 1, num].type == 199))
+					if (Main.tile[i - 1, num].nactive() && !Main.tile[i - 1, num].halfBrick() && Main.tile[i - 1, num].slope() == 0 && (Main.tile[i - 1, num].type == 2 || Main.tile[i - 1, num].type == 23 || Main.tile[i - 1, num].type == 60 || Main.tile[i - 1, num].type == 109 || Main.tile[i - 1, num].type == 147 || Main.tile[i - 1, num].type == 199 || TileLoader.CanGrowModTree(Main.tile[i - 1, num].type)))
 					{
 						flag3 = true;
 					}
-					if (Main.tile[i + 1, num].nactive() && !Main.tile[i + 1, num].halfBrick() && Main.tile[i + 1, num].slope() == 0 && (Main.tile[i + 1, num].type == 2 || Main.tile[i + 1, num].type == 23 || Main.tile[i + 1, num].type == 60 || Main.tile[i + 1, num].type == 109 || Main.tile[i + 1, num].type == 147 || Main.tile[i + 1, num].type == 199))
+					if (Main.tile[i + 1, num].nactive() && !Main.tile[i + 1, num].halfBrick() && Main.tile[i + 1, num].slope() == 0 && (Main.tile[i + 1, num].type == 2 || Main.tile[i + 1, num].type == 23 || Main.tile[i + 1, num].type == 60 || Main.tile[i + 1, num].type == 109 || Main.tile[i + 1, num].type == 147 || Main.tile[i + 1, num].type == 199 || TileLoader.CanGrowModTree(Main.tile[i + 1, num].type)))
 					{
 						flag4 = true;
 					}
@@ -13157,14 +_,14 @@
 								return false;
 							}
 						}
-						else if (ignoreID == 20)
+						else if (TileLoader.IsSapling(ignoreID))
 						{
 							ushort type3 = Main.tile[i, j].type;
-							if (type3 <= 74)
-							{
-								if (type3 <= 24)
-								{
-									if (type3 == 3 || type3 == 20 || type3 == 24)
+							if (type3 <= 74 || TileLoader.IsSapling(type3))
+							{
+								if (type3 <= 24 || TileLoader.IsSapling(type3))
+								{
+									if (type3 == 3 || TileLoader.IsSapling(type3) || type3 == 24)
 									{
 										goto IL_159;
 									}
@@ -13411,7 +_,7 @@
 				Main.tile[i, j] = new Tile();
 			}
 			int frameX = (int)Main.tile[i, j].frameX;
-			if (Main.tile[i, j].type != 11)
+			if (TileLoader.CloseDoorID(Main.tile[i, j]) < 0)
 			{
 				return false;
 			}
@@ -13458,6 +_,7 @@
 					}
 				}
 			}
+			ushort closeDoorID = (ushort)TileLoader.CloseDoorID(Main.tile[i, j]);
 			for (int m = num5; m < num5 + 2; m++)
 			{
 				for (int n = num4; n < num4 + 3; n++)
@@ -13468,7 +_,7 @@
 						{
 							Main.tile[m, n] = new Tile();
 						}
-						Main.tile[m, n].type = 10;
+						Main.tile[m, n].type = closeDoorID;
 						Main.tile[m, n].frameX = (short)(WorldGen.genRand.Next(3) * 18);
 					}
 					else
@@ -13666,7 +_,7 @@
 							{
 								for (int k = num8 - 8; k < num8 + 8; k++)
 								{
-									if (Main.tile[j, k].active() && Main.tile[j, k].type == 4)
+									if (Main.tile[j, k].active() && TileLoader.IsTorch(Main.tile[j, k].type))
 									{
 										flag2 = true;
 										break;
@@ -20140,11 +_,7 @@
 			{
 				Main.tile[i, j] = new Tile();
 			}
-			if (Main.tile[i, j].type != 10)
-			{
-				return false;
-			}
-			if (Main.tile[i, j].frameY >= 594 && Main.tile[i, j].frameY <= 646)
+			if (TileLoader.OpenDoorID(Main.tile[i, j]) < 0)
 			{
 				return false;
 			}
@@ -20207,8 +_,9 @@
 			}
 			int num6 = num * 54;
 			Main.PlaySound(8, i * 16, j * 16, 1, 1f, 0f);
+			ushort openDoorID = (ushort)TileLoader.OpenDoorID(Main.tile[i, j]);
 			Main.tile[num4, num2].active(true);
-			Main.tile[num4, num2].type = 11;
+			Main.tile[num4, num2].type = openDoorID;
 			Main.tile[num4, num2].frameY = (short)num6;
 			Main.tile[num4, num2].frameX = num3;
 			Main.tile[num4, num2].color(color);
@@ -20217,7 +_,7 @@
 				Main.tile[num4 + 1, num2] = new Tile();
 			}
 			Main.tile[num4 + 1, num2].active(true);
-			Main.tile[num4 + 1, num2].type = 11;
+			Main.tile[num4 + 1, num2].type = openDoorID;
 			Main.tile[num4 + 1, num2].frameY = (short)num6;
 			Main.tile[num4 + 1, num2].frameX = (short)(num3 + 18);
 			Main.tile[num4 + 1, num2].color(color);
@@ -20226,7 +_,7 @@
 				Main.tile[num4, num2 + 1] = new Tile();
 			}
 			Main.tile[num4, num2 + 1].active(true);
-			Main.tile[num4, num2 + 1].type = 11;
+			Main.tile[num4, num2 + 1].type = openDoorID;
 			Main.tile[num4, num2 + 1].frameY = (short)(num6 + 18);
 			Main.tile[num4, num2 + 1].frameX = num3;
 			Main.tile[num4, num2 + 1].color(color2);
@@ -20235,7 +_,7 @@
 				Main.tile[num4 + 1, num2 + 1] = new Tile();
 			}
 			Main.tile[num4 + 1, num2 + 1].active(true);
-			Main.tile[num4 + 1, num2 + 1].type = 11;
+			Main.tile[num4 + 1, num2 + 1].type = openDoorID;
 			Main.tile[num4 + 1, num2 + 1].frameY = (short)(num6 + 18);
 			Main.tile[num4 + 1, num2 + 1].frameX = (short)(num3 + 18);
 			Main.tile[num4 + 1, num2 + 1].color(color2);
@@ -20244,7 +_,7 @@
 				Main.tile[num4, num2 + 2] = new Tile();
 			}
 			Main.tile[num4, num2 + 2].active(true);
-			Main.tile[num4, num2 + 2].type = 11;
+			Main.tile[num4, num2 + 2].type = openDoorID;
 			Main.tile[num4, num2 + 2].frameY = (short)(num6 + 36);
 			Main.tile[num4, num2 + 2].frameX = num3;
 			Main.tile[num4, num2 + 2].color(color3);
@@ -20253,7 +_,7 @@
 				Main.tile[num4 + 1, num2 + 2] = new Tile();
 			}
 			Main.tile[num4 + 1, num2 + 2].active(true);
-			Main.tile[num4 + 1, num2 + 2].type = 11;
+			Main.tile[num4 + 1, num2 + 2].type = openDoorID;
 			Main.tile[num4 + 1, num2 + 2].frameY = (short)(num6 + 36);
 			Main.tile[num4 + 1, num2 + 2].frameX = (short)(num3 + 18);
 			Main.tile[num4 + 1, num2 + 2].color(color3);
@@ -21915,8 +_,10 @@
 			{
 				flag = true;
 			}
-			if (Main.tile[x, num].type == 20)
-			{
+			if (TileLoader.IsSapling(Main.tile[x, num].type))
+			{
+				int originalType = Main.tile[x, num].type;
+				int newType = TileID.Saplings;
 				int num3 = (int)(Main.tile[x, num].frameX / 54);
 				int type2 = (int)Main.tile[x, num + 2].type;
 				int num4 = -1;
@@ -21960,12 +_,17 @@
 				{
 					num4 = 9;
 				}
+				else if (TileLoader.SaplingGrowthType(type2, ref newType, ref num4))
+				{
+				}
 				else
 				{
 					flag = true;
 				}
-				if (!flag && num3 != num4)
-				{
+				if (!flag && (originalType != newType || num3 != num4))
+				{
+					Main.tile[x, num].type = (ushort)newType;
+					Main.tile[x, num + 1].type = (ushort)newType;
 					int num5 = 54 * num4;
 					num5 += WorldGen.genRand.Next(3) * 18;
 					Main.tile[x, num].frameX = (short)num5;
@@ -24445,7 +_,7 @@
 		public static void Place1x2(int x, int y, ushort type, int style)
 		{
 			short frameX = 0;
-			if (type == 20)
+			if (TileLoader.IsSapling(type))
 			{
 				frameX = (short)(WorldGen.genRand.Next(3) * 18);
 			}
@@ -25880,7 +_,7 @@
 			{
 				ushort type2 = Main.tile[k, num4 - 1].type;
 				ushort type3 = Main.tile[k + 1, num4 - 1].type;
-				if (type2 != 21 && type3 != 21 && type2 != 88 && type3 != 88 && type2 != 441 && type3 != 441 && !WorldGen.SolidTileAllowBottomSlope(k, num4 + 2) && !WorldGen.SolidTileAllowBottomSlope(k + 1, num4 + 2))
+				if (!TileLoader.IsChest(type2) && !TileLoader.IsChest(type3) && !TileLoader.IsDresser(type2) && !TileLoader.IsDresser(type3) && type2 != 441 && type3 != 441 && !WorldGen.SolidTileAllowBottomSlope(k, num4 + 2) && !WorldGen.SolidTileAllowBottomSlope(k + 1, num4 + 2))
 				{
 					flag = true;
 				}
@@ -26179,7 +_,7 @@
 			{
 			}
 			k = j - k / 18;
-			return Main.tile[num, k - 1].type == 21 || Main.tile[num + 1, k - 1].type == 21 || Main.tile[num, k - 1].type == 441 || Main.tile[num + 1, k - 1].type == 441 || Main.tile[num, k - 1].type == 88 || Main.tile[num + 1, k - 1].type == 88;
+			return TileLoader.IsChest(Main.tile[num, k - 1].type) || TileLoader.IsChest(Main.tile[num + 1, k - 1].type) || Main.tile[num, k - 1].type == 441 || Main.tile[num + 1, k - 1].type == 441 || TileLoader.IsDresser(Main.tile[num, k - 1].type) || TileLoader.IsDresser(Main.tile[num + 1, k - 1].type);
 		}
 
 		public static void OreRunner(int i, int j, double strength, int steps, ushort type)
@@ -26438,7 +_,7 @@
 				{
 					flag = true;
 				}
-				if (Main.tile[l, j - 1].active() && (Main.tile[l, j - 1].type == 21 || Main.tile[l, j - 1].type == 441 || Main.tile[l, j - 1].type == 88))
+				if (Main.tile[l, j - 1].active() && (TileLoader.IsChest(Main.tile[l, j - 1].type) || Main.tile[l, j - 1].type == 441 || TileLoader.IsDresser(Main.tile[l, j - 1].type)))
 				{
 					return;
 				}
@@ -27956,7 +_,8 @@
 					{
 						Main.tile[l, m] = new Tile();
 					}
-					if (Main.tile[l, m].active() && (Main.tile[l, m].type == 139 || Main.tile[l, m].type == 35))
+					if (Main.tile[l, m].active() && (Main.tile[l, m].type == 139 || Main.tile[l, m].type == 35
+						|| TileLoader.IsModMusicBox(Main.tile[l, m])))
 					{
 						if (Main.tile[l, m].frameX < 36)
 						{
@@ -28351,10 +_,6 @@
 
 		public static bool PlaceObject(int x, int y, int type, bool mute = false, int style = 0, int alternate = 0, int random = -1, int direction = -1)
 		{
-			if (type >= 467)
-			{
-				return false;
-			}
 			TileObject toBePlaced;
 			if (!TileObject.CanPlace(x, y, type, style, direction, out toBePlaced, false))
 			{
@@ -29022,7 +_,7 @@
 					flag2 = false;
 				}
 			}
-			if (type == 88)
+			if (TileLoader.IsDresser(type))
 			{
 				int num2 = Chest.CreateChest(x - 1, y - 1, -1);
 				if (num2 == -1)
@@ -30650,7 +_,7 @@
 					}
 				}
 			}
-			if (!Main.tile[num2, num].nactive() || Main.tile[num2, num].halfBrick() || Main.tile[num2, num].slope() != 0 || (Main.tile[num2, num].type != 53 && Main.tile[num2, num].type != 112 && Main.tile[num2, num].type != 116 && Main.tile[num2, num].type != 234))
+			if (!Main.tile[num2, num].nactive() || Main.tile[num2, num].halfBrick() || Main.tile[num2, num].slope() != 0 || (Main.tile[num2, num].type != 53 && Main.tile[num2, num].type != 112 && Main.tile[num2, num].type != 116 && Main.tile[num2, num].type != 234 && !TileLoader.CanGrowModCactus(Main.tile[num2, num2].type)))
 			{
 				WorldGen.KillTile(i, j, false, false, false);
 				return true;
@@ -30663,7 +_,7 @@
 					return true;
 				}
 			}
-			else if (i == num2 && (!Main.tile[i, j + 1].active() || (Main.tile[i, j + 1].type != 80 && Main.tile[i, j + 1].type != 53 && Main.tile[i, j + 1].type != 112 && Main.tile[i, j + 1].type != 116 && Main.tile[i, j + 1].type != 234)))
+			else if (i == num2 && (!Main.tile[i, j + 1].active() || (Main.tile[i, j + 1].type != 80 && Main.tile[i, j + 1].type != 53 && Main.tile[i, j + 1].type != 112 && Main.tile[i, j + 1].type != 116 && Main.tile[i, j + 1].type != 234 && !TileLoader.CanGrowModCactus(Main.tile[i, j + 1].type))))
 			{
 				WorldGen.KillTile(i, j, false, false, false);
 				return true;
@@ -30907,6 +_,10 @@
 				num2 = 53;
 			}
 			if (num2 == 112)
+			{
+				num2 = 53;
+			}
+			if (TileLoader.CanGrowModPalmTree(num2))
 			{
 				num2 = 53;
 			}
@@ -31000,6 +_,10 @@
 			{
 				num4 = 2;
 			}
+			if (TileLoader.CanGrowModTree(num4))
+			{
+				num4 = 2;
+			}
 			if (num4 != 2 && num4 != type && ((Main.tile[i, j].frameX == 0 && Main.tile[i, j].frameY <= 130) || (Main.tile[i, j].frameX == 22 && Main.tile[i, j].frameY <= 130) || (Main.tile[i, j].frameX == 44 && Main.tile[i, j].frameY <= 130)))
 			{
 				WorldGen.KillTile(i, j, false, false, false);
@@ -31343,7 +_,7 @@
 						int wall = (int)Main.tile[k, l].wall;
 						if (conversionType == 4)
 						{
-							if (type <= 467 && wall <= 231)
+							if (true)
 							{
 								if (WallID.Sets.Conversion.Grass[wall] && wall != 81)
 								{
@@ -31421,7 +_,7 @@
 						}
 						else if (conversionType == 2)
 						{
-							if (type <= 467 && wall <= 231)
+							if (true)
 							{
 								if (WallID.Sets.Conversion.Grass[wall] && wall != 70)
 								{
@@ -31501,7 +_,7 @@
 						}
 						else if (conversionType == 1)
 						{
-							if (type <= 467 && wall <= 231)
+							if (true)
 							{
 								if (WallID.Sets.Conversion.Grass[wall] && wall != 69)
 								{
@@ -31944,11 +_,11 @@
 			{
 				return;
 			}
-			if (Main.tile[i, j].type != 53 && Main.tile[i, j].type != 80 && Main.tile[i, j].type != 234 && Main.tile[i, j].type != 112 && Main.tile[i, j].type != 116)
+			if (Main.tile[i, j].type != 53 && Main.tile[i, j].type != 80 && Main.tile[i, j].type != 234 && Main.tile[i, j].type != 112 && Main.tile[i, j].type != 116 && !TileLoader.CanGrowModCactus(Main.tile[i, j].type))
 			{
 				return;
 			}
-			if (Main.tile[i, j].type == 53 || Main.tile[i, j].type == 112 || Main.tile[i, j].type == 116 || Main.tile[i, j].type == 234)
+			if (Main.tile[i, j].type == 53 || Main.tile[i, j].type == 112 || Main.tile[i, j].type == 116 || Main.tile[i, j].type == 234 || TileLoader.CanGrowModCactus(Main.tile[i, j].type))
 			{
 				if (Main.tile[i, j - 1].active() || Main.tile[i - 1, j - 1].active() || Main.tile[i + 1, j - 1].active())
 				{
@@ -31972,7 +_,7 @@
 										return;
 									}
 								}
-								if (Main.tile[k, l].type == 53 || Main.tile[k, l].type == 112 || Main.tile[k, l].type == 116 || Main.tile[k, l].type == 234)
+								if (Main.tile[k, l].type == 53 || Main.tile[k, l].type == 112 || Main.tile[k, l].type == 116 || Main.tile[k, l].type == 234 || TileLoader.CanGrowModCactus(Main.tile[k, l].type))
 								{
 									num4++;
 								}
@@ -33128,10 +_,6 @@
 
 		public static bool PlaceTile(int i, int j, int type, bool mute = false, bool forced = false, int plr = -1, int style = 0)
 		{
-			if (type >= 467)
-			{
-				return false;
-			}
 			bool result = false;
 			if (i >= 0 && j >= 0 && i < Main.maxTilesX && j < Main.maxTilesY)
 			{
@@ -33191,7 +_,7 @@
 								return false;
 							}
 						}
-						else if (type == 3 || type == 20 || type == 24 || type == 27 || type == 32 || type == 51 || type == 69 || type == 72 || type == 201 || type == 352)
+						else if (type == 3 || TileLoader.IsSapling(type) || type == 24 || type == 27 || type == 32 || type == 51 || type == 69 || type == 72 || type == 201 || type == 352)
 						{
 							return false;
 						}
@@ -33409,7 +_,7 @@
 							WorldGen.SquareTileFrame(i, j, true);
 						}
 					}
-					else if (type == 4)
+					else if (TileLoader.IsTorch(type))
 					{
 						if (Main.tile[i - 1, j] == null)
 						{
@@ -33567,7 +_,7 @@
 						WorldGen.PlaceOnTable1x1(i, j, type, style);
 						WorldGen.SquareTileFrame(i, j, true);
 					}
-					else if (type == 14 || type == 26 || type == 86 || type == 87 || type == 88 || type == 89 || type == 114 || type == 186 || type == 187 || type == 215 || type == 217 || type == 218 || type == 377)
+					else if (type == 14 || type == 26 || type == 86 || type == 87 || TileLoader.IsDresser(type) || type == 89 || type == 114 || type == 186 || type == 187 || type == 215 || type == 217 || type == 218 || type == 377)
 					{
 						WorldGen.Place3x2(i, j, (ushort)type, style);
 						WorldGen.SquareTileFrame(i, j, true);
@@ -33582,14 +_,16 @@
 						WorldGen.PlaceJunglePlant(i, j, (ushort)type, 0, 0);
 						WorldGen.SquareTileFrame(i, j, true);
 					}
-					else if (type == 20)
+					else if (TileLoader.IsSapling(type))
 					{
 						if (Main.tile[i, j + 1] == null)
 						{
 							Main.tile[i, j + 1] = new Tile();
 						}
 						int type2 = (int)Main.tile[i, j + 1].type;
-						if (Main.tile[i, j + 1].active() && (type2 == 2 || type2 == 109 || type2 == 147 || type2 == 60 || type2 == 23 || type2 == 199 || type2 == 53 || type2 == 234 || type2 == 116 || type2 == 112))
+						int dummyType = TileID.Saplings;
+						int dummyStyle = 0;
+						if (Main.tile[i, j + 1].active() && (type2 == 2 || type2 == 109 || type2 == 147 || type2 == 60 || type2 == 23 || type2 == 199 || type2 == 53 || type2 == 234 || type2 == 116 || type2 == 112 || TileLoader.SaplingGrowthType(type2, ref dummyType, ref dummyStyle)))
 						{
 							WorldGen.Place1x2(i, j, (ushort)type, style);
 							WorldGen.SquareTileFrame(i, j, true);
@@ -33648,7 +_,7 @@
 						WorldGen.Place2xX(i, j, (ushort)type, style);
 						WorldGen.SquareTileFrame(i, j, true);
 					}
-					else if (type == 21)
+					else if (TileLoader.IsChest(type))
 					{
 						WorldGen.PlaceChest(i, j, (ushort)type, false, style);
 						WorldGen.SquareTileFrame(i, j, true);
@@ -33747,6 +_,10 @@
 					else if (type == 314)
 					{
 						Minecart.PlaceTrack(tile, style);
+					}
+					else if (type >= TileID.Count && TileObjectData.GetTileData(type, style) != null)
+					{
+						PlaceObject(i, j, type, mute, style);
 					}
 					else
 					{
@@ -33813,7 +_,11 @@
 					{
 						fail = true;
 					}
-					if (tile.wall == 21 || tile.wall == 186 || tile.wall == 136 || tile.wall == 137 || tile.wall == 168 || tile.wall == 169 || tile.wall == 172 || tile.wall == 226 || tile.wall == 227)
+					WallLoader.KillWall(i, j, tile.wall, ref fail);
+					if (!WallLoader.KillSound(i, j, tile.wall))
+					{
+					}
+					else if (tile.wall == 21 || tile.wall == 186 || tile.wall == 136 || tile.wall == 137 || tile.wall == 168 || tile.wall == 169 || tile.wall == 172 || tile.wall == 226 || tile.wall == 227)
 					{
 						Main.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
 					}
@@ -33830,6 +_,7 @@
 					{
 						num = 3;
 					}
+					WallLoader.NumDust(i, j, tile.wall, fail, ref num);
 					for (int k = 0; k < num; k++)
 					{
 						int num2 = 0;
@@ -34309,6 +_,10 @@
 						if (tile.wall == 151 || tile.wall == 152)
 						{
 							num2 = 215;
+						}
+						if (!WallLoader.CreateDust(i, j, tile.wall, ref num2))
+						{
+							continue;
 						}
 						if (tile.wall == 44)
 						{
@@ -34833,14 +_,14 @@
 					{
 						num4 = 2210 + (int)tile.wall - 138;
 					}
-					if (num4 > 0)
+					if (WallLoader.Drop(i, j, tile.wall, ref num4) && num4 > 0)
 					{
 						Item.NewItem(i * 16, j * 16, 16, 16, num4, 1, false, 0, false, false);
 					}
 					tile.wall = 0;
 					tile.wallColor(0);
 					WorldGen.SquareWallFrame(i, j, true);
-					if (tile.type >= 0 && tile.type < 467 && TileID.Sets.FramesOnKillWall[(int)tile.type])
+					if (tile.type >= 0 && TileID.Sets.FramesOnKillWall[(int)tile.type])
 					{
 						WorldGen.TileFrame(i, j, false, false);
 					}
@@ -34911,6 +_,10 @@
 			{
 				return false;
 			}
+			if (!TileLoader.CanKillTile(i, j, tile.type, ref blockDamaged))
+			{
+				return false;
+			}
 			if (j >= 1)
 			{
 				tile2 = Main.tile[i, j - 1];
@@ -34919,11 +_,11 @@
 			{
 				int type = (int)tile2.type;
 				int num = type;
-				if (num <= 26)
+				if (num <= 26 || TileLoader.IsChest(num))
 				{
 					if (num != 5)
 					{
-						if (num != 21 && num != 26)
+						if (!TileLoader.IsChest(num) && num != 26)
 						{
 							goto IL_12B;
 						}
@@ -34937,7 +_,7 @@
 						goto IL_12B;
 					}
 				}
-				else if (num != 72 && num != 88)
+				else if (num != 72 && !TileLoader.IsDresser(num))
 				{
 					if (num != 323)
 					{
@@ -34956,11 +_,11 @@
 			}
 			IL_12B:
 			ushort type2 = tile.type;
-			if (type2 <= 21)
+			if (type2 <= 21 || TileLoader.IsChest(type2))
 			{
 				if (type2 != 10)
 				{
-					if (type2 == 21)
+					if (TileLoader.IsChest(type2))
 					{
 						if (!Chest.CanDestroyChest(i - (int)(tile.frameX / 18 % 2), j - (int)(tile.frameY / 18)))
 						{
@@ -34974,7 +_,7 @@
 					return false;
 				}
 			}
-			else if (type2 != 88)
+			else if (!TileLoader.IsDresser(type2))
 			{
 				if (type2 != 138)
 				{
@@ -34983,7 +_,7 @@
 						int num2 = i - (int)(tile.frameX % 54 / 18);
 						for (int k = 0; k < 3; k++)
 						{
-							if (Main.tile[num2 + k, j - 1].active() && (Main.tile[num2 + k, j - 1].type == 21 || Main.tile[num2 + k, j - 1].type == 441))
+							if (Main.tile[num2 + k, j - 1].active() && (TileLoader.IsChest(Main.tile[num2 + k, j - 1].type) || Main.tile[num2 + k, j - 1].type == 441))
 							{
 								blockDamaged = true;
 								return false;
@@ -35020,7 +_,7 @@
 					{
 						Main.tile[i, j - 1] = new Tile();
 					}
-					if (j >= 1 && Main.tile[i, j - 1].active() && ((Main.tile[i, j - 1].type == 5 && tile.type != 5) || (Main.tile[i, j - 1].type == 323 && tile.type != 323) || (Main.tile[i, j - 1].type == 21 && tile.type != 21) || (Main.tile[i, j - 1].type == 323 && tile.type != 323) || (Main.tile[i, j - 1].type == 88 && tile.type != 88) || (Main.tile[i, j - 1].type == 26 && tile.type != 26) || (Main.tile[i, j - 1].type == 72 && tile.type != 72)))
+					if (j >= 1 && Main.tile[i, j - 1].active() && ((Main.tile[i, j - 1].type == 5 && tile.type != 5) || (Main.tile[i, j - 1].type == 323 && tile.type != 323) || (TileLoader.IsChest(Main.tile[i, j - 1].type) && !TileLoader.IsChest(tile.type)) || (Main.tile[i, j - 1].type == 323 && tile.type != 323) || (TileLoader.IsDresser(Main.tile[i, j - 1].type) && !TileLoader.IsDresser(tile.type)) || (Main.tile[i, j - 1].type == 26 && tile.type != 26) || (Main.tile[i, j - 1].type == 72 && tile.type != 72)))
 					{
 						if (Main.tile[i, j - 1].type == 5)
 						{
@@ -35048,20 +_,24 @@
 						int num = i - frameX % 54 / 18;
 						for (int k = 0; k < 3; k++)
 						{
-							if (Main.tile[num + k, j - 1].active() && (Main.tile[num + k, j - 1].type == 21 || Main.tile[num + k, j - 1].type == 441 || Main.tile[num + k, j - 1].type == 88))
+							if (Main.tile[num + k, j - 1].active() && (TileLoader.IsChest(Main.tile[num + k, j - 1].type) || Main.tile[num + k, j - 1].type == 441 || TileLoader.IsDresser(Main.tile[num + k, j - 1].type)))
 							{
 								fail = true;
 								break;
 							}
 						}
 					}
+					TileLoader.KillTile(i, j, tile.type, ref fail, ref effectOnly, ref noItem);
 					if (!effectOnly && !WorldGen.stopDrops)
 					{
 						if (!noItem && FixExploitManEaters.SpotProtected(i, j))
 						{
 							return;
 						}
-						if (tile.type == 127)
+						if (!TileLoader.KillSound(i, j, tile.type))
+						{
+						}
+						else if (tile.type == 127)
 						{
 							Main.PlaySound(SoundID.Item27, i * 16, j * 16);
 						}
@@ -35262,7 +_,7 @@
 							return;
 						}
 					}
-					int num13 = WorldGen.KillTile_GetTileDustAmount(fail, tile);
+					int num13 = WorldGen.KillTile_GetTileDustAmount(fail, tile, i, j);
 					for (int num14 = 0; num14 < num13; num14++)
 					{
 						WorldGen.KillTile_MakeTileDust(i, j, tile);
@@ -35288,7 +_,7 @@
 						WorldGen.SquareTileFrame(i, j, true);
 						return;
 					}
-					if (tile.type == 21 && Main.netMode != 1)
+					if (TileLoader.IsChest(tile.type) && Main.netMode != 1)
 					{
 						int num15 = (int)(tile.frameX / 18);
 						int y = j - (int)(tile.frameY / 18);
@@ -35302,7 +_,7 @@
 							return;
 						}
 					}
-					if (tile.type == 88 && Main.netMode != 1)
+					if (TileLoader.IsDresser(tile.type) && Main.netMode != 1)
 					{
 						int num16 = (int)(tile.frameX / 18);
 						int y2 = j - (int)(tile.frameY / 18);
@@ -35335,6 +_,7 @@
 						}
 						if (tile.type == 73)
 						{
+							//patch file: num17, num18
 							num17 = 200;
 							num18 = 50;
 							if (tile.frameX >= 108)
@@ -35396,6 +_,7 @@
 						{
 							num19 = 10;
 						}
+						TileLoader.DropCritterChance(i, j, tile.type, ref num17, ref num18, ref num19);
 						if (num17 > 0 && NPC.CountNPCS(357) < 5 && WorldGen.genRand.Next(num17) == 0)
 						{
 							int type = 357;
@@ -35764,7 +_,7 @@
 										}
 										if (Main.tile[i, num29] != null)
 										{
-											if (Main.tile[i, num29].type == 2 || Main.tile[i, num29].type == 109 || Main.tile[i, num29].type == 147 || Main.tile[i, num29].type == 199 || Main.tile[i, num29].type == 23)
+											if (Main.tile[i, num29].type == 2 || Main.tile[i, num29].type == 109 || Main.tile[i, num29].type == 147 || Main.tile[i, num29].type == 199 || Main.tile[i, num29].type == 23 || TileLoader.CanDropAcorn(Main.tile[i, num29].type))
 											{
 												num23 = 9;
 												num24 = 27;
@@ -35820,6 +_,7 @@
 								if (Main.tile[num30, num31].active())
 								{
 									ushort type4 = Main.tile[num30, num31].type;
+									//patch file: type4
 									if (type4 <= 70)
 									{
 										if (type4 != 23)
@@ -35859,6 +_,7 @@
 									{
 										num23 = 621;
 									}
+									TileLoader.DropTreeWood(type4, ref num23);
 								}
 								int num32 = (int)Player.FindClosest(new Vector2((float)(num30 * 16), (float)(num31 * 16)), 16, 16);
 								int axe = Main.player[num32].inventory[Main.player[num32].selectedItem].axe;
@@ -35883,6 +_,7 @@
 							if (Main.tile[i, num33].active())
 							{
 								ushort type4 = Main.tile[i, num33].type;
+								//patch file: type4
 								if (type4 != 112)
 								{
 									if (type4 != 116)
@@ -35901,6 +_,7 @@
 								{
 									num23 = 619;
 								}
+								TileLoader.DropPalmTreeWood(type4, ref num23);
 							}
 						}
 						else if (tile.type == 408)
@@ -37199,7 +_,8 @@
 						{
 							num23 = 2504;
 						}
-						if (num23 > 0)
+						bool vanillaDrop = TileLoader.Drop(i, j, tile.type);
+						if (vanillaDrop && num23 > 0)
 						{
 							int num45 = 1;
 							if (flag)
@@ -37208,7 +_,7 @@
 							}
 							Item.NewItem(i * 16, j * 16, 16, 16, num23, num45, false, -1, false, false);
 						}
-						if (num24 > 0)
+						if (vanillaDrop && num24 > 0)
 						{
 							Item.NewItem(i * 16, j * 16, 16, 16, num24, 1, false, -1, false, false);
 						}
@@ -37243,7 +_,7 @@
 			}
 		}
 
-		public static int KillTile_GetTileDustAmount(bool fail, Tile tileCache)
+		public static int KillTile_GetTileDustAmount(bool fail, Tile tileCache, int i, int j)
 		{
 			int result = 10;
 			if (tileCache.type == 231)
@@ -37298,6 +_,7 @@
 			{
 				result = 0;
 			}
+			TileLoader.NumDust(i, j, tileCache.type, fail, ref result);
 			return result;
 		}
 
@@ -38338,10 +_,12 @@
 						{
 							num = 121;
 						}
+						//patch file: num13, num14
 						if (Main.tile[num13, num14].active() && Main.tile[num13, num14].type == 147)
 						{
 							num = 122;
 						}
+						TileLoader.TreeDust(Main.tile[num13, num14], ref num);
 					}
 				}
 			}
@@ -38365,10 +_,12 @@
 						{
 							num = 79;
 						}
+						//patch file: num15
 						if (Main.tile[i, num15].active() && Main.tile[i, num15].type == 112)
 						{
 							num = 77;
 						}
+						TileLoader.PalmTreeDust(Main.tile[i, num15], ref num);
 					}
 				}
 			}
@@ -39319,7 +_,7 @@
 			}
 			flag = true;
 			IL_2514:
-			if (num < 0)
+			if (!TileLoader.CreateDust(i, j, tileCache.type, ref num) || num < 0) // TODO, fix
 			{
 				return 6000;
 			}
@@ -41253,6 +_,7 @@
 
 		public static void UpdateWorld()
 		{
+			WorldHooks.PreUpdate();
 			int num = 20;
 			int maxValue = 40;
 			if (Main.expertMode)
@@ -41327,6 +_,7 @@
 				}
 				int num7 = WorldGen.genRand.Next(10, Main.maxTilesX - 10);
 				int num8 = WorldGen.genRand.Next(10, (int)Main.worldSurface - 1);
+				//patch file: num7, num8
 				int num9 = num7 - 1;
 				int num10 = num7 + 2;
 				int num11 = num8 - 1;
@@ -42093,6 +_,8 @@
 							}
 						}
 					}
+					TileLoader.RandomUpdate(num7, num8, Main.tile[num7, num8].type);
+					WallLoader.RandomUpdate(num7, num8, Main.tile[num7, num8].wall);
 				}
 				num6++;
 			}
@@ -42863,6 +_,8 @@
 						}
 					}
 					WorldGen.SpreadDesertWalls(num, num64, num65);
+					TileLoader.RandomUpdate(num64, num65, Main.tile[num64, num65].type);
+					WallLoader.RandomUpdate(num64, num65, Main.tile[num64, num65].wall);
 				}
 				num63++;
 			}
@@ -42886,6 +_,7 @@
 					Projectile.NewProjectile(vector.X, vector.Y, num147, num148, 12, 1000, 10f, Main.myPlayer, 0f, 0f);
 				}
 			}
+			WorldHooks.PostUpdate();
 		}
 
 		public static void SpreadDesertWalls(int wallDist, int i, int j)
@@ -43027,7 +_,7 @@
 			}
 			if (Main.tile[i, j].wall == 0)
 			{
-				Main.tile[i, j].wall = (byte)type;
+				Main.tile[i, j].wall = (ushort)type;
 				WorldGen.SquareWallFrame(i, j, true);
 				if (!mute)
 				{
@@ -46854,11 +_,11 @@
 			if (Main.tile[i, j - 1].active())
 			{
 				ushort type2 = Main.tile[i, j - 1].type;
-				if (type2 <= 72)
-				{
-					if (type2 <= 21)
-					{
-						if (type2 != 5 && type2 != 21)
+				if (type2 <= 72 || TileLoader.IsChest(type2))
+				{
+					if (type2 <= 21 || TileLoader.IsChest(type2))
+					{
+						if (type2 != 5 && !TileLoader.IsChest(type2))
 						{
 							return true;
 						}
@@ -46868,9 +_,9 @@
 						return true;
 					}
 				}
-				else if (type2 <= 88)
-				{
-					if (type2 != 77 && type2 != 88)
+				else if (type2 <= 88 || TileLoader.IsDresser(type2))
+				{
+					if (type2 != 77 && !TileLoader.IsDresser(type2))
 					{
 						return true;
 					}
@@ -47384,7 +_,11 @@
 					}
 					if (tile.active())
 					{
-						if (noBreak && Main.tileFrameImportant[(int)tile.type] && tile.type != 4)
+						if (!TileLoader.TileFrame(i, j, tile.type, ref resetFrame, ref noBreak))
+						{
+							return;
+						}
+						if (noBreak && Main.tileFrameImportant[(int)tile.type] && !TileLoader.IsTorch(tile.type))
 						{
 							return;
 						}
@@ -47398,7 +_,7 @@
 						Rectangle rectangle = new Rectangle(-1, -1, 0, 0);
 						if (Main.tileFrameImportant[(int)tile.type])
 						{
-							if (num == 4)
+							if (TileLoader.IsTorch(num))
 							{
 								Tile tile2 = Main.tile[i, j - 1];
 								Tile tile3 = Main.tile[i, j + 1];
@@ -48376,7 +_,7 @@
 							{
 								WorldGen.Check3x3(i, j, (int)((ushort)num));
 							}
-							else if (num == 15 || num == 20 || num == 216 || num == 338 || num == 390)
+							else if (num == 15 || TileLoader.IsSapling(num) || num == 216 || num == 338 || num == 390)
 							{
 								WorldGen.Check1x2(i, j, (ushort)num);
 							}
@@ -48566,6 +_,10 @@
 							else if (num == 323)
 							{
 								WorldGen.CheckPalmTree(i, j);
+							}
+							else
+							{
+								TileLoader.CheckModTile(i, j, num);
 							}
 							return;
 						}
@@ -48716,11 +_,11 @@
 								num58 = -1;
 								num56 = -1;
 							}
-							if (num == 147)
+							if (TileID.Sets.Snow[num])
 							{
 								WorldGen.TileMergeAttempt(num, Main.tileBrick, TileID.Sets.Ices, ref num53, ref num58, ref num55, ref num56, ref num52, ref num54, ref num57, ref num59);
 							}
-							else if (num == 161 || num == 163 || num == 164 || num == 200)
+							else if (TileID.Sets.Ices[num])
 							{
 								WorldGen.TileMergeAttempt(num, Main.tileBrick, TileID.Sets.Snow, ref num53, ref num58, ref num55, ref num56, ref num52, ref num54, ref num57, ref num59);
 							}
@@ -48730,7 +_,7 @@
 							}
 							else if (Main.tileBrick[num])
 							{
-								if (num == 60 || num == 70)
+								if (TileID.Sets.GrassSpecial[num])
 								{
 									WorldGen.TileMergeAttempt(num, Main.tileBrick, TileID.Sets.Mud, ref num53, ref num58, ref num55, ref num56, ref num52, ref num54, ref num57, ref num59);
 								}
@@ -48743,7 +_,7 @@
 							{
 								WorldGen.TileMergeAttempt(num, Main.tilePile, ref num53, ref num58, ref num55, ref num56, ref num52, ref num54, ref num57, ref num59);
 							}
-							if ((num == 1 || Main.tileMoss[num] || num == 117 || num == 25 || num == 203) && num58 == 165)
+							if ((TileID.Sets.Stone[num] || Main.tileMoss[num]) && num58 == 165)
 							{
 								if (tile3.frameY == 72)
 								{
@@ -48754,7 +_,7 @@
 									num58 = num;
 								}
 							}
-							if ((num == 1 || Main.tileMoss[num] || num == 117 || num == 25 || num == 203) && num53 == 165)
+							if ((TileID.Sets.Stone[num] || Main.tileMoss[num]) && num53 == 165)
 							{
 								if (tile2.frameY == 90)
 								{
@@ -48776,7 +_,7 @@
 									num53 = num;
 								}
 							}
-							if ((num == 200 || num == 161 || num == 163 || num == 164) && num58 == 165)
+							if (TileID.Sets.Ices[num] && num58 == 165)
 							{
 								num58 = num;
 							}
@@ -48920,7 +_,7 @@
 										num53 = num;
 									}
 								}
-								else if (num53 == 147)
+								else if (num53 > -1 && TileID.Sets.Snow[num53])
 								{
 									WorldGen.TileFrame(i, j - 1, false, false);
 									if (WorldGen.mergeDown)
@@ -48936,7 +_,7 @@
 										num58 = num;
 									}
 								}
-								else if (num58 == 147)
+								else if (num58 > -1 && TileID.Sets.Snow[num58])
 								{
 									WorldGen.TileFrame(i, j + 1, false, false);
 									if (WorldGen.mergeUp)
@@ -48952,7 +_,7 @@
 										num55 = num;
 									}
 								}
-								else if (num55 == 147)
+								else if (num55 > -1 && TileID.Sets.Snow[num55])
 								{
 									WorldGen.TileFrame(i - 1, j, false, false);
 									if (WorldGen.mergeRight)
@@ -48968,7 +_,7 @@
 										num56 = num;
 									}
 								}
-								else if (num56 == 147)
+								else if (num56 > -1 && TileID.Sets.Snow[num56])
 								{
 									WorldGen.TileFrame(i + 1, j, false, false);
 									if (WorldGen.mergeLeft)
@@ -48976,19 +_,19 @@
 										num56 = num;
 									}
 								}
-								if (num53 == 2 || num53 == 23 || num53 == 109 || num53 == 199)
+								if (num53 > -1 && TileID.Sets.Grass[num53])
 								{
 									num53 = num;
 								}
-								if (num58 == 2 || num58 == 23 || num58 == 109 || num58 == 199)
+								if (num58 > -1 && TileID.Sets.Grass[num58])
 								{
 									num58 = num;
 								}
-								if (num55 == 2 || num55 == 23 || num55 == 109 || num55 == 199)
+								if (num55 > -1 && TileID.Sets.Grass[num55])
 								{
 									num55 = num;
 								}
-								if (num56 == 2 || num56 == 23 || num56 == 109 || num56 == 199)
+								if (num56 > -1 && TileID.Sets.Grass[num56])
 								{
 									num56 = num;
 								}
@@ -48996,7 +_,7 @@
 								{
 									num52 = num;
 								}
-								else if (num52 == 2 || num52 == 23 || num52 == 109 || num52 == 199)
+								else if (num52 > -1 && TileID.Sets.Grass[num52])
 								{
 									num52 = num;
 								}
@@ -49004,7 +_,7 @@
 								{
 									num54 = num;
 								}
-								else if (num54 == 2 || num54 == 23 || num54 == 109 || num54 == 199)
+								else if (num54 > -1 && TileID.Sets.Grass[num54])
 								{
 									num54 = num;
 								}
@@ -49012,7 +_,7 @@
 								{
 									num57 = num;
 								}
-								else if (num57 == 2 || num57 == 23 || num57 == 109 || num57 == 199)
+								else if (num57 > -1 && TileID.Sets.Grass[num57])
 								{
 									num57 = num;
 								}
@@ -49020,7 +_,7 @@
 								{
 									num59 = num;
 								}
-								else if (num59 == 2 || num59 == 23 || num59 == 109 || num59 == 199)
+								else if (num59 > -1 && TileID.Sets.Grass[num59])
 								{
 									num59 = num;
 								}
@@ -49081,7 +_,7 @@
 									WorldGen.TileMergeAttemptFrametest(i, j, num, 57, ref num53, ref num58, ref num55, ref num56, ref num52, ref num54, ref num57, ref num59);
 								}
 							}
-							else if (num == 58 || num == 76 || num == 75)
+							else if (TileID.Sets.HellSpecial[num])
 							{
 								WorldGen.TileMergeAttempt(-2, 57, ref num53, ref num58, ref num55, ref num56, ref num52, ref num54, ref num57, ref num59);
 							}
@@ -49090,7 +_,7 @@
 								WorldGen.TileMergeAttempt(-2, 1, ref num53, ref num58, ref num55, ref num56, ref num52, ref num54, ref num57, ref num59);
 								WorldGen.TileMergeAttemptFrametest(i, j, num, TileID.Sets.HellSpecial, ref num53, ref num58, ref num55, ref num56, ref num52, ref num54, ref num57, ref num59);
 							}
-							else if (num == 59)
+							else if (TileID.Sets.Mud[num])
 							{
 								if ((double)j > Main.rockLayer)
 								{
@@ -49128,11 +_,11 @@
 							{
 								WorldGen.TileMergeAttempt(-2, 189, ref num53, ref num58, ref num55, ref num56, ref num52, ref num54, ref num57, ref num59);
 							}
-							else if (num == 147)
+							else if (TileID.Sets.Snow[num])
 							{
 								WorldGen.TileMergeAttemptFrametest(i, j, num, TileID.Sets.IcesSlush, ref num53, ref num58, ref num55, ref num56, ref num52, ref num54, ref num57, ref num59);
 							}
-							else if (num == 161 || num == 163 || num == 164 || num == 200 || num == 224)
+							else if (TileID.Sets.IcesSlush[num])
 							{
 								WorldGen.TileMergeAttempt(-2, 147, ref num53, ref num58, ref num55, ref num56, ref num52, ref num54, ref num57, ref num59);
 							}
@@ -49258,12 +_,12 @@
 								num56 = num;
 								WorldGen.mergeRight = true;
 							}
-							if (num == 2 || num == 23 || num == 60 || num == 70 || num == 109 || num == 199 || Main.tileMoss[num])
+							if (TileID.Sets.Grass[num] || TileID.Sets.GrassSpecial[num] || Main.tileMoss[num])
 							{
 								flag8 = true;
 								WorldGen.TileMergeAttemptWeird(num, -1, Main.tileSolid, ref num53, ref num58, ref num55, ref num56, ref num52, ref num54, ref num57, ref num59);
 								int num63 = 0;
-								if (num == 60 || num == 70)
+								if (TileID.Sets.GrassSpecial[num])
 								{
 									num63 = 59;
 								}
@@ -51904,7 +_,7 @@
 									if (tile3 != null && !tile3.active())
 									{
 										bool flag18 = true;
-										if (tile2.active() && (tile2.type == 21 || tile2.type == 441 || tile2.type == 323 || tile2.type == 88))
+										if (tile2.active() && (TileLoader.IsChest(tile2.type) || tile2.type == 441 || tile2.type == 323 || TileLoader.IsDresser(tile2.type)))
 										{
 											flag18 = false;
 										}
@@ -51970,7 +_,7 @@
 								else if (Main.netMode == 2 && tile3 != null && !tile3.active())
 								{
 									bool flag19 = true;
-									if (tile2.active() && (tile2.type == 21 || tile2.type == 441 || tile2.type == 323 || tile2.type == 88))
+									if (tile2.active() && (TileLoader.IsChest(tile2.type) || tile2.type == 441 || tile2.type == 323 || TileLoader.IsDresser(tile2.type)))
 									{
 										flag19 = false;
 									}
@@ -52052,7 +_,11 @@
 							if (rectangle.X != frameX && rectangle.Y != frameY && frameX >= 0 && frameY >= 0)
 							{
 								WorldGen.tileReframeCount++;
+#if DEBUG
+								if (WorldGen.tileReframeCount < 20)
+#else
 								if (WorldGen.tileReframeCount < 100)
+#endif
 								{
 									bool flag21 = WorldGen.mergeUp;
 									bool flag22 = WorldGen.mergeDown;

