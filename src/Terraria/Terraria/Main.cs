using Microsoft.Win32;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
#if MAC
using SDL2;
#endif
using System;
using System.Collections.Generic;
using System.Diagnostics;
#if WINDOWS
using System.Drawing;
#endif
using System.IO;
#if !WINDOWS
using System.Runtime.CompilerServices;
#endif
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;
using Terraria.Achievements;
using Terraria.Audio;
using Terraria.Cinematics;
using Terraria.DataStructures;
using Terraria.GameContent;
using Terraria.GameContent.Achievements;
using Terraria.GameContent.Events;
using Terraria.GameContent.Liquid;
using Terraria.GameContent.Skies;
using Terraria.GameContent.Tile_Entities;
using Terraria.GameContent.UI;
using Terraria.GameContent.UI.Chat;
using Terraria.GameContent.UI.States;
using Terraria.GameInput;
using Terraria.Graphics;
using Terraria.Graphics.Capture;
using Terraria.Graphics.Effects;
using Terraria.Graphics.Shaders;
using Terraria.ID;
using Terraria.Initializers;
using Terraria.IO;
using Terraria.Localization;
using Terraria.Map;
using Terraria.Net;
using Terraria.ObjectData;
using Terraria.Social;
using Terraria.UI;
using Terraria.UI.Chat;
using Terraria.UI.Gamepad;
using Terraria.Utilities;
using Terraria.World.Generation;
#if SERVER
using Terraria.Server;
#endif

namespace Terraria
{
#if CLIENT
	public class Main : Game
#else
	public class Main : Terraria.Server.Game
#endif
	{
		public delegate void OnPlayerSelected(PlayerFileData player);

		public const int curRelease = 188;

		public const ulong WorldGeneratorVersion = 807453851649uL;

		private const string versionStringBecauseTheyreTheSame = "v1.3.4.4";

		public const int offLimitBorderTiles = 40;

		public const int maxItemTypes = 3884;

		public const int maxProjectileTypes = 714;

		public const int maxNPCTypes = 580;

		public const int maxTileSets = 467;

		public const int maxWallTypes = 231;

		public const int maxBuffTypes = 206;

		public const int maxGlowMasks = 245;

		public const int maxExtras = 90;

		public const int maxGoreTypes = 1087;

		public const int maxMusic = 42;

		public const int MaxBannerTypes = 267;

		public const int numArmorHead = 214;

		public const int numArmorBody = 208;

		public const int numArmorLegs = 157;

		public const int numAccHandsOn = 20;

		public const int numAccHandsOff = 12;

		public const int numAccNeck = 10;

		public const int numAccBack = 14;

		public const int numAccFront = 5;

		public const int numAccShoes = 18;

		public const int numAccWaist = 13;

		public const int numAccShield = 7;

		public const int numAccFace = 9;

		public const int numAccBalloon = 18;

		public const int maxWings = 38;

		public const int maxBackgrounds = 207;

		public const int numInfoIcons = 13;

		private const int MF_BYPOSITION = 1024;

		public const int sectionWidth = 200;

		public const int sectionHeight = 150;

		public const int maxDust = 6000;

		public const int maxCombatText = 100;

		public const int maxItemText = 20;

		public const int maxPlayers = 255;

		public const int maxChests = 1000;

		public const int maxItems = 400;

		public const int maxProjectiles = 1000;

		public const int maxNPCs = 200;

		private const double slimeRainMaxTime = 54000.0;

		private const double slimeRainMinTime = 32400.0;

		private const double slimeRainMaxDelay = 604800.0;

		private const double slimeRainMinDelay = 302400.0;

		private const double slimeRainChance = 1728000.0;

		public const int maxGore = 500;

		public const int realInventory = 50;

		public const int maxInventory = 58;

		public const int maxItemSounds = 125;

		public const int maxNPCHitSounds = 57;

		public const int maxNPCKilledSounds = 62;

		public const int maxLiquidTypes = 12;

		public const double dayLength = 54000.0;

		public const double nightLength = 32400.0;

		public const int maxStars = 130;

		public const int maxStarTypes = 5;

		public const int maxClouds = 200;

		public const int maxCloudTypes = 22;

		public const int maxHairTotal = 134;

		public const int maxCharSelectHair = 51;

		public const int MaxTimeout = 120;

		public static bool SettingsUnlock_WorldEvil = false;

		public static bool SettingsEnabled_MinersWobble = true;

		public static bool HidePassword = false;

		public static bool ReversedUpDownArmorSetBonuses = false;

		public static Microsoft.Xna.Framework.Color MouseBorderColor = Microsoft.Xna.Framework.Color.Transparent;

		public static bool MouseShowBuildingGrid = false;

		public static bool AllowUnfocusedInputOnGamepad = false;

		public static bool InvisibleCursorForGamepad = true;

		public static bool GamepadDisableCursorItemIconInner = true;

		public static bool GamepadDisableInstructionsDisplay = false;

		public static float MouseBuildingGridAlpha = 0f;

		public static bool CaptureModeDisabled = false;

		public bool unityMouseOver;

		public static Main instance;

		public static string versionNumber = "v1.3.4.4";

		public static string versionNumber2 = "v1.3.4.4";

		public static string SavePath = Program.LaunchParameters.ContainsKey("-savedirectory") ? Program.LaunchParameters["-savedirectory"] : PlatformUtilities.GetStoragePath();

		public static bool AnnouncementBoxDisabled = false;

		public static int AnnouncementBoxRange = -1;

		public static Vector2 destroyerHB = new Vector2(0f, 0f);

		public static FavoritesFile LocalFavoriteData = new FavoritesFile(Main.SavePath + "/favorites.json", false);

		public static FavoritesFile CloudFavoritesData = new FavoritesFile("/favorites.json", true);

		public static FileMetadata WorldFileMetadata;

		public static FileMetadata MapFileMetadata;

		private AchievementManager _achievements;

		private static List<SoundEffectInstance> ActiveSoundInstances = new List<SoundEffectInstance>(128);

		public static UserInterface MenuUI = new UserInterface();

		public static UserInterface InGameUI = new UserInterface();

		private static Main.OnPlayerSelected _pendingCharacterSelect;

		public static bool drawBackGore = false;

		public static ulong LobbyId = 0uL;

		private static object _audioLock = new object();

		private static Microsoft.Xna.Framework.Color[] _mapColorCacheArray = new Microsoft.Xna.Framework.Color[30000];

		public static float expertLife = 2f;

		public static float expertDamage = 2f;

		public static float expertDebuffTime = 2f;

		public static float expertKnockBack = 0.9f;

		public static float expertNPCDamage = 1.5f;

		public static float knockBackMultiplier = 1f;

		public static float damageMultiplier = 1f;

		public WaterfallManager waterfallManager;

		public static WorldSections sectionManager;

		public static bool ServerSideCharacter = false;

		public static string clientUUID;

		public static bool ContentLoaded = false;

		public static int maxMsg = 120;

		private static int toolTipDistance = 6;

		public static float GlobalTime = 0f;

		public static bool GlobalTimerPaused = false;

		private static ulong _tileFrameSeed = (ulong)((long)Guid.NewGuid().GetHashCode());

		private static ulong _drawCycleCounter = 0uL;

		public static ContentManager ShaderContentManager;

		public static Ref<Effect> ScreenShaderRef = new Ref<Effect>();

		public static Ref<Effect> PixelShaderRef = new Ref<Effect>();

		public static Ref<Effect> TileShaderRef = new Ref<Effect>();

		public static int WaveQuality = 3;

		public static bool UseStormEffects = true;

		public static bool UseHeatDistortion = true;

		public static int npcStreamSpeed = 60;

		public static int musicError = 0;

		public static bool dedServFPS = false;

		public static int dedServCount1 = 0;

		public static int dedServCount2 = 0;

		public static bool superFast = false;

		public static int MaxShopIDs = 22;

		public static bool[] hairLoaded = new bool[134];

		public static bool[] wingsLoaded = new bool[38];

		public static bool[] goreLoaded = new bool[1087];

		public static bool[] projectileLoaded = new bool[714];

		public static bool[] itemFlameLoaded = new bool[3884];

		public static bool[] backgroundLoaded = new bool[207];

		public static bool[] tileSetsLoaded = new bool[467];

		public static bool[] wallLoaded = new bool[231];

		public static bool[] NPCLoaded = new bool[580];

		public static bool[] armorHeadLoaded = new bool[214];

		public static bool[] armorBodyLoaded = new bool[208];

		public static bool[] armorLegsLoaded = new bool[157];

		public static bool[] accHandsOnLoaded = new bool[20];

		public static bool[] accHandsOffLoaded = new bool[12];

		public static bool[] accBackLoaded = new bool[14];

		public static bool[] accFrontLoaded = new bool[5];

		public static bool[] accShoesLoaded = new bool[18];

		public static bool[] accWaistLoaded = new bool[13];

		public static bool[] accShieldLoaded = new bool[7];

		public static bool[] accNeckLoaded = new bool[10];

		public static bool[] accFaceLoaded = new bool[9];

		public static bool[] accballoonLoaded = new bool[18];

		private static float cameraLerp = 0f;

		private static int cameraLerpTimer = 0;

		private static int cameraLerpTimeToggle = 0;

		private static bool cameraGamePadLerp = false;

		public static Vector2[] OffsetsNPCOffhand = new Vector2[]
		{
			new Vector2(14f, 34f),
			new Vector2(14f, 32f),
			new Vector2(14f, 26f),
			new Vector2(14f, 22f),
			new Vector2(14f, 18f)
		};

		public static Vector2[] OffsetsPlayerOffhand = new Vector2[]
		{
			new Vector2(14f, 20f),
			new Vector2(14f, 20f),
			new Vector2(14f, 20f),
			new Vector2(14f, 18f),
			new Vector2(14f, 20f),
			new Vector2(16f, 4f),
			new Vector2(16f, 16f),
			new Vector2(18f, 14f),
			new Vector2(18f, 14f),
			new Vector2(18f, 14f),
			new Vector2(16f, 16f),
			new Vector2(16f, 16f),
			new Vector2(16f, 16f),
			new Vector2(16f, 16f),
			new Vector2(14f, 14f),
			new Vector2(14f, 14f),
			new Vector2(12f, 14f),
			new Vector2(14f, 16f),
			new Vector2(16f, 16f),
			new Vector2(16f, 16f)
		};

		public static Vector2[] OffsetsPlayerOnhand = new Vector2[]
		{
			new Vector2(6f, 19f),
			new Vector2(5f, 10f),
			new Vector2(12f, 10f),
			new Vector2(13f, 17f),
			new Vector2(12f, 19f),
			new Vector2(5f, 10f),
			new Vector2(7f, 17f),
			new Vector2(6f, 16f),
			new Vector2(6f, 16f),
			new Vector2(6f, 16f),
			new Vector2(6f, 17f),
			new Vector2(7f, 17f),
			new Vector2(7f, 17f),
			new Vector2(7f, 17f),
			new Vector2(8f, 17f),
			new Vector2(9f, 16f),
			new Vector2(9f, 12f),
			new Vector2(8f, 17f),
			new Vector2(7f, 17f),
			new Vector2(7f, 17f)
		};

		public static Vector2[] OffsetsPlayerHeadgear = new Vector2[]
		{
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 0f),
			new Vector2(0f, 0f),
			new Vector2(0f, 0f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 0f),
			new Vector2(0f, 0f),
			new Vector2(0f, 0f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f)
		};

		public static float zoomX;

		public static float zoomY;

		public static float sunCircle;

		public static int BlackFadeIn = 0;

		public static bool noWindowBorder = false;

		public static Matrix Transform = Matrix.CreateScale(1f, 1f, 1f) * Matrix.CreateRotationZ(0f) * Matrix.CreateTranslation(new Vector3(0f, 0f, 0f));

		private RasterizerState Rasterizer = RasterizerState.CullCounterClockwise;

		private static string _cachedTitle;

		public static int ugBack = 0;

		public static int oldUgBack = 0;

		public static int[] bgFrame = new int[1];

		public static int[] bgFrameCounter = new int[1];

		public static bool skipMenu = false;

		public static bool verboseNetplay = false;

		public static bool stopTimeOuts = false;

		public static bool showSpam = false;

		public static bool showItemOwner = false;

		public static bool[] nextNPC = new bool[580];

		public static int musicBox = -1;

		public static int musicBox2 = -1;

		public static byte HealthBarDrawSettings = 1;

		public static bool cEd = false;

		public static float wFrCounter = 0f;

		public static float wFrame = 0f;

		public static float upTimer;

		public static float upTimerMax;

		public static float upTimerMaxDelay;

		public static bool drawDiag = false;

		public static bool drawRelease = false;

		public static bool drawBetterDebug = false;

		public static bool betterDebugRelease = false;

		public static bool renderNow = false;

		public static bool drawToScreen = false;

		public static bool targetSet = false;

		public static int mouseX;

		public static int mouseY;

		public static int lastMouseX;

		public static int lastMouseY;

		public static bool mouseLeft;

		public static bool mouseRight;

		public static bool isMouseLeftConsumedByUI = false;

		public static float essScale = 1f;

		public static int essDir = -1;

		public static float[] cloudBGX = new float[2];

		public static float cloudBGAlpha;

		public static float cloudBGActive;

		public static int[] cloudBG = new int[]
		{
			112,
			113
		};

		public static int[] treeMntBG = new int[2];

		public static int[] treeBG = new int[3];

		public static int[] corruptBG = new int[3];

		public static int[] jungleBG = new int[3];

		public static int[] snowMntBG = new int[2];

		public static int[] snowBG = new int[3];

		public static int[] hallowBG = new int[3];

		public static int[] crimsonBG = new int[3];

		public static int[] desertBG = new int[2];

		public static int oceanBG;

		public static int[] treeX = new int[4];

		public static int[] treeStyle = new int[4];

		public static int[] caveBackX = new int[4];

		public static int[] caveBackStyle = new int[4];

		public static int iceBackStyle;

		public static int hellBackStyle;

		public static int jungleBackStyle;

		public static string debugWords = "";

		public static bool gamePad = false;

		public static bool xMas = false;

		public static bool halloween = false;

		public static int snowDust = 0;

		public static bool chTitle = false;

		public static bool hairWindow = false;

		public static bool clothesWindow = false;

		public static bool ingameOptionsWindow = false;

		public static bool inFancyUI = false;

		public static int keyCount = 0;

		public static string[] keyString = new string[10];

		public static int[] keyInt = new int[10];

		public static byte gFade = 0;

		public static float gFader = 0f;

		public static byte gFadeDir = 1;

		public static bool netDiag = false;

		public static int txData = 0;

		public static int rxData = 0;

		public static int txMsg = 0;

		public static int rxMsg = 0;

		public static int[] rxMsgType = new int[Main.maxMsg];

		public static int[] rxDataType = new int[Main.maxMsg];

		public static int[] txMsgType = new int[Main.maxMsg];

		public static int[] txDataType = new int[Main.maxMsg];

		public static double UpdateTimeAccumulator = 0.0;

		public static bool drawSkip = false;

		public static int fpsCount = 0;

		public static Stopwatch fpsTimer = new Stopwatch();

		public bool gammaTest;

		public static int fountainColor = -1;

		public static int monolithType = -1;

		public static bool showSplash = true;

		public static bool ignoreErrors = true;

		public static string defaultIP = "";

		public static int dayRate = 1;

		public static int maxScreenW = 1920;

		public static int maxScreenH = 1200;

		public static int minScreenW = 800;

		public static int minScreenH = 600;

		public static float iS = 1f;

		public static bool render = false;

		public static int qaStyle = 0;

		public static int zoneX = 99;

		public static int zoneY = 87;

		public static float harpNote = 0f;

		public static bool[] projHostile = new bool[714];

		public static bool[] projHook = new bool[714];

		public static bool[] pvpBuff = new bool[206];

		public static bool[] persistentBuff = new bool[206];

		public static bool[] vanityPet = new bool[206];

		public static bool[] lightPet = new bool[206];

		public static bool[] meleeBuff = new bool[206];

		public static bool[] debuff = new bool[206];

		public static string[] buffName = new string[206];

		public static string[] buffTip = new string[206];

		public static bool[] buffNoSave = new bool[206];

		public static bool[] buffNoTimeDisplay = new bool[206];

		public static bool[] buffDoubleApply = new bool[206];

		public static int maxMP = 10;

		public static string[] recentWorld = new string[Main.maxMP];

		public static string[] recentIP = new string[Main.maxMP];

		public static int[] recentPort = new int[Main.maxMP];

		public static bool shortRender = true;

		public static bool BackgroundEnabled = true;

		public static int quickBG = 2;

		public static int bgDelay = 0;

		public static int bgStyle = 0;

		public static float[] bgAlpha = new float[10];

		public static float[] bgAlpha2 = new float[10];

		public static int EquipPage = 0;

		public static int EquipPageSelected = 0;

		public int mouseNPC = -1;

		public static int wof = -1;

		public static int wofT;

		public static int wofB;

		public static int wofF = 0;

		public static int offScreenRange = 200;

		private RenderTarget2D backWaterTarget;

		public static RenderTarget2D waterTarget;

		private RenderTarget2D tileTarget;

		private RenderTarget2D blackTarget;

		private RenderTarget2D tile2Target;

		private RenderTarget2D wallTarget;

		private RenderTarget2D backgroundTarget;

		public static RenderTarget2D screenTarget;

		public static RenderTarget2D screenTargetSwap;

		public static int maxMapUpdates = 250000;

		public static bool refreshMap = false;

		public static int loadMapLastX = 0;

		public static bool loadMapLock = false;

		public static bool loadMap = false;

		public static bool mapReady = false;

		public static int textureMaxWidth = 2000;

		public static int textureMaxHeight = 1800;

		public static bool updateMap = false;

		public static int mapMinX = 0;

		public static int mapMaxX = 0;

		public static int mapMinY = 0;

		public static int mapMaxY = 0;

		public static int mapTimeMax = 30;

		public static int mapTime = Main.mapTimeMax;

		public static bool clearMap;

		public static int mapTargetX = 5;

		public static int mapTargetY = 2;

		private static bool flameRingLoaded;

		private Texture2D flameRingTexture;

		private Texture2D mapDeathTexture;

		private RenderTarget2D[,] mapTarget = new RenderTarget2D[Main.mapTargetX, Main.mapTargetY];

		private RenderTarget2D mapSectionTexture;

		public static bool[,] initMap = new bool[Main.mapTargetX, Main.mapTargetY];

		public static bool[,] mapWasContentLost = new bool[Main.mapTargetX, Main.mapTargetY];

		public Texture2D[] infoIconTexture = new Texture2D[14];

		public static Texture2D[] wireUITexture = new Texture2D[12];

		public static Texture2D builderAccTexture;

		public static Texture2D quicksIconTexture;

		public static Texture2D[] clothesTexture = new Texture2D[4];

		public static Texture2D[] mapIconTexture = new Texture2D[9];

		private static Texture2D[] underworldTexture = new Texture2D[5];

		public static Texture2D mapTexture;

		private Texture2D mapBG1Texture;

		private Texture2D mapBG2Texture;

		private Texture2D mapBG3Texture;

		private Texture2D mapBG4Texture;

		private Texture2D mapBG5Texture;

		private Texture2D mapBG6Texture;

		private Texture2D mapBG7Texture;

		private Texture2D mapBG8Texture;

		private Texture2D mapBG9Texture;

		private Texture2D mapBG10Texture;

		private Texture2D mapBG11Texture;

		private Texture2D mapBG12Texture;

		private Texture2D mapBG13Texture;

		private Texture2D mapBG14Texture;

		private Texture2D mapBG15Texture;

		private Texture2D hueTexture;

		public static Texture2D colorSliderTexture;

		public static Texture2D colorBarTexture;

		public static Texture2D colorBlipTexture;

		public static Texture2D smartDigTexture;

		public static Texture2D colorHighlightTexture;

		public static Microsoft.Xna.Framework.Color OurFavoriteColor = new Microsoft.Xna.Framework.Color(255, 231, 69);

		public static Texture2D tileCrackTexture;

		public static Texture2D LockOnCursorTexture;

		private Texture2D iceBarrierTexture;

		public static bool mapInit = false;

		public static bool mapEnabled = true;

		public static int mapStyle = 1;

		public static float grabMapX = 0f;

		public static float grabMapY = 0f;

		public static int miniMapX = 0;

		public static int miniMapY = 0;

		public static int miniMapWidth = 0;

		public static int miniMapHeight = 0;

		public static float mapMinimapScale = 1.25f;

		public static float mapMinimapAlpha = 1f;

		public static float mapOverlayScale = 2.5f;

		public static float mapOverlayAlpha = 0.35f;

		public static bool mapFullscreen = false;

		public static bool resetMapFull = false;

		public static float mapFullscreenScale = 4f;

		public static Vector2 mapFullscreenPos = new Vector2(-1f, -1f);

		private static bool IsEnginePreloaded = false;

		private static bool IsEngineLoaded = false;

		public static bool SkipAssemblyLoad = false;

		private int firstTileX;

		private int lastTileX;

		private int firstTileY;

		private int lastTileY;

		private double bgParallax;

		private int bgStart;

		private int bgLoops;

		private int bgStartY;

		private int bgLoopsY;

		private int bgTop;

		public static int renderCount = 99;

		public static GraphicsDeviceManager graphics;

		public static SpriteBatch spriteBatch;

		public static TileBatch tileBatch;

		public static GenerationProgress AutogenProgress = new GenerationProgress();

		private Process tServer = new Process();

		private static Stopwatch saveTime = new Stopwatch();

		public static KeyboardState keyState;

		public static KeyboardState oldKeyState;

		public static Microsoft.Xna.Framework.Color mcColor = new Microsoft.Xna.Framework.Color(125, 125, 255);

		public static Microsoft.Xna.Framework.Color hcColor = new Microsoft.Xna.Framework.Color(200, 125, 255);

		public static Microsoft.Xna.Framework.Color highVersionColor = new Microsoft.Xna.Framework.Color(255, 255, 0);

		public static Microsoft.Xna.Framework.Color errorColor = new Microsoft.Xna.Framework.Color(255, 0, 0);

		public static Microsoft.Xna.Framework.Color bgColor;

		public static bool craftingHide = false;

		public static bool armorHide = false;

		public static float craftingAlpha = 1f;

		public static float armorAlpha = 1f;

		public static float[] buffAlpha = new float[206];

		public static bool hardMode = false;

		public float chestLootScale = 1f;

		public bool chestLootHover;

		public float chestStackScale = 1f;

		public bool chestStackHover;

		public float chestDepositScale = 1f;

		public bool chestDepositHover;

		public float chestRenameScale = 1f;

		public bool chestRenameHover;

		public float chestCancelScale = 1f;

		public bool chestCancelHover;

		public static Vector2 sceneWaterPos = Vector2.Zero;

		public static Vector2 sceneTilePos = Vector2.Zero;

		public static Vector2 sceneTile2Pos = Vector2.Zero;

		public static Vector2 sceneWallPos = Vector2.Zero;

		public static Vector2 sceneBackgroundPos = Vector2.Zero;

		public static bool maxQ = true;

		public static float gfxQuality = 1f;

		public static float gfxRate = 0.01f;

		public int DiscoStyle;

		public static int DiscoR = 255;

		public static int DiscoB = 0;

		public static int DiscoG = 0;

		public static int teamCooldown = 0;

		public static int teamCooldownLen = 300;

		public static bool gamePaused = false;

		public static bool gameInactive = false;

		public static int updateTime = 0;

		public static int drawTime = 0;

		public static int uCount = 0;

		public static int updateRate = 0;

		public static int frameRate = 0;

		public static bool RGBRelease = false;

		public static bool qRelease = false;

		public static bool netRelease = false;

		public static bool frameRelease = false;

		public static bool showFrameRate = false;

		public static int magmaBGFrame = 0;

		public static int magmaBGFrameCounter = 0;

		public static int saveTimer = 0;

		public static bool autoJoin = false;

		public static bool serverStarting = false;

		public static float leftWorld = 0f;

		public static float rightWorld = 134400f;

		public static float topWorld = 0f;

		public static float bottomWorld = 38400f;

		public static int maxTilesX = (int)Main.rightWorld / 16 + 1;

		public static int maxTilesY = (int)Main.bottomWorld / 16 + 1;

		public static int maxSectionsX = Main.maxTilesX / 200;

		public static int maxSectionsY = Main.maxTilesY / 150;

		public static int numDust = 6000;

		public static int ActivePlayersCount = 0;

		public static int maxNetPlayers = 255;

		private static UICharacterSelect _characterSelectMenu = new UICharacterSelect();

		private static UIWorldSelect _worldSelectMenu = new UIWorldSelect();

		public static UIManageControls ManageControlsMenu = new UIManageControls();

		public static UIAchievementsMenu AchievementsMenu = new UIAchievementsMenu();

		public static int maxRain = 750;

		public static int slimeWarningTime = 0;

		public static int slimeWarningDelay = 420;

		public static float slimeRainNPCSlots = 0.65f;

		public static bool[] slimeRainNPC = new bool[580];

		public static double slimeRainTime = 0.0;

		public static bool slimeRain = false;

		public static int slimeRainKillCount = 0;

		public int invBottom = 210;

		public static float cameraX = 0f;

		public static bool drewLava = false;

		public static float[] liquidAlpha = new float[12];

		public static int waterStyle = 0;

		public static int worldRate = 1;

		public static float caveParallax = 0.88f;

		public static int dungeonX;

		public static int dungeonY;

		public static Liquid[] liquid = new Liquid[Liquid.resLiquid];

		public static LiquidBuffer[] liquidBuffer = new LiquidBuffer[10000];

		public static bool dedServ = false;

		public static int spamCount = 0;

		public static int curMusic = 0;

		public static int dayMusic = 0;

		public static int ugMusic = 0;

		public int newMusic;

		public static bool showItemText = true;

		public static bool autoSave = true;

		public static bool validateSaves = true;

		public static bool bannerMouseOver = false;

		public static string buffString = "";

		public static string libPath = "";

		public static int lo = 0;

		public static int LogoA = 255;

		public static int LogoB = 0;

		public static bool LogoT = false;

		public static string statusText = "";

		public static string worldName = "";

		public static int worldID;

		public static int background = 0;

		public static int caveBackground = 0;

		public static float ugBackTransition = 0f;

		public static Microsoft.Xna.Framework.Color tileColor;

		public static double worldSurface;

		public static double rockLayer;

		public static Microsoft.Xna.Framework.Color[] teamColor = new Microsoft.Xna.Framework.Color[6];

		public static bool dayTime = true;

		public static double time = 13500.0;

		public static int moonPhase = 0;

		public static short sunModY = 0;

		public static short moonModY = 0;

		public static bool grabSky = false;

		public static bool bloodMoon = false;

		public static bool pumpkinMoon = false;

		public static bool snowMoon = false;

		public static float cloudAlpha = 0f;

		public static float maxRaining = 0f;

		public static float oldMaxRaining = 0f;

		public static int rainTime = 0;

		public static bool raining = false;

		public static bool eclipse = false;

		public static float eclipseLight = 0f;

		public static int checkForSpawns = 0;

		public static int helpText = 0;

		public static int BartenderHelpTextIndex = 0;

		public static bool autoGen = false;

		public static bool autoPause = false;

		public static int[] projFrames = new int[714];

		public static bool[] projPet = new bool[714];

		public static float demonTorch = 1f;

		public static int demonTorchDir = 1;

		public static float martianLight = 1f;

		public static int martianLightDir = 1;

		public static bool placementPreview = true;

		public static int[] screenTileCounts = new int[467];

		public static int numStars;

		public static int weatherCounter = 0;

		public static int cloudLimit = 200;

		public static int numClouds = Main.cloudLimit;

		public static int numCloudsTemp = Main.numClouds;

		public static float windSpeedTemp = 0f;

		public static float windSpeed = 0f;

		public static float windSpeedSet = 0f;

		public static float windSpeedSpeed = 0f;

		public static Cloud[] cloud = new Cloud[200];

		public static bool resetClouds = true;

		public static int sandTiles;

		public static int evilTiles;

		public static int shroomTiles;

		public static float shroomLight;

		public static int snowTiles;

		public static int holyTiles;

		public static int waterCandles;

		public static int peaceCandles;

		public static int partyMonoliths;

		public static int meteorTiles;

		public static int bloodTiles;

		public static int jungleTiles;

		public static int dungeonTiles;

		public static bool sunflower;

		public static bool clock;

		public static bool campfire;

		public static bool starInBottle;

		public static bool heartLantern;

		public static int fadeCounter = 0;

		public static float invAlpha = 1f;

		public static float invDir = 1f;

		[ThreadStatic]
		public static UnifiedRandom rand;

		public static Texture2D[] chestStackTexture = new Texture2D[2];

		private static bool allChestStackHover = false;

		private static bool inventorySortMouseOver = false;

		public static Texture2D[] bannerTexture = new Texture2D[3];

		public static Texture2D[] npcHeadTexture = new Texture2D[25];

		public static Texture2D[] npcHeadBossTexture = new Texture2D[37];

		public static Texture2D[] craftToggleTexture = new Texture2D[4];

		public static Texture2D[] inventorySortTexture = new Texture2D[2];

		public static Texture2D[] textGlyphTexture = new Texture2D[1];

		public static Texture2D[] hotbarRadialTexture = new Texture2D[3];

		public static Texture2D craftUpButtonTexture;

		public static Texture2D craftDownButtonTexture;

		public static Texture2D scrollLeftButtonTexture;

		public static Texture2D scrollRightButtonTexture;

		public static Texture2D frozenTexture;

		public static Texture2D magicPixel;

		public static Texture2D settingsPanelTexture;

		public static Texture2D settingsPanelTexture2;

		public static Texture2D miniMapFrameTexture;

		public static Texture2D miniMapFrame2Texture;

		public static Texture2D[] miniMapButtonTexture = new Texture2D[3];

		public static Texture2D[] destTexture = new Texture2D[3];

		public static Texture2D[] gemTexture = new Texture2D[7];

		public static Texture2D[] rudolphMountTexture = new Texture2D[3];

		public static Texture2D bunnyMountTexture;

		public static Texture2D pigronMountTexture;

		public static Texture2D slimeMountTexture;

		public static Texture2D minecartMountTexture;

		public static Texture2D turtleMountTexture;

		public static Texture2D[] beeMountTexture = new Texture2D[2];

		public static Texture2D[] UFOMountTexture = new Texture2D[2];

		public static Texture2D[] drillMountTexture = new Texture2D[6];

		public static Texture2D[] scutlixMountTexture = new Texture2D[3];

		public static Texture2D unicornMountTexture;

		public static Texture2D basiliskMountTexture;

		public static Texture2D[] minecartMechMountTexture = new Texture2D[2];

		public static Texture2D[] cuteFishronMountTexture = new Texture2D[2];

		public static Texture2D minecartWoodMountTexture;

		public static Texture2D[] wingsTexture = new Texture2D[38];

		public static Texture2D[] armorHeadTexture = new Texture2D[214];

		public static Texture2D[] armorBodyTexture = new Texture2D[208];

		public static Texture2D[] femaleBodyTexture = new Texture2D[208];

		public static Texture2D[] armorArmTexture = new Texture2D[208];

		public static Texture2D[] armorLegTexture = new Texture2D[157];

		public static Texture2D[] accHandsOnTexture = new Texture2D[20];

		public static Texture2D[] accHandsOffTexture = new Texture2D[12];

		public static Texture2D[] accBackTexture = new Texture2D[14];

		public static Texture2D[] accFrontTexture = new Texture2D[5];

		public static Texture2D[] accShoesTexture = new Texture2D[18];

		public static Texture2D[] accWaistTexture = new Texture2D[13];

		public static Texture2D[] accShieldTexture = new Texture2D[7];

		public static Texture2D[] accNeckTexture = new Texture2D[10];

		public static Texture2D[] accFaceTexture = new Texture2D[9];

		public static Texture2D[] accBalloonTexture = new Texture2D[18];

		public static Texture2D pulleyTexture;

		public static Texture2D[] xmasTree = new Texture2D[5];

		public static Texture2D[] FlameTexture = new Texture2D[17];

		public static Texture2D timerTexture;

		public static Texture2D[] reforgeTexture = new Texture2D[2];

		public static Texture2D wallOutlineTexture;

		public static Texture2D actuatorTexture;

		public static Texture2D wireTexture;

		public static Texture2D wire2Texture;

		public static Texture2D wire3Texture;

		public static Texture2D wire4Texture;

		public static Texture2D wireTextureNew;

		public static Texture2D[] cameraTexture = new Texture2D[8];

		public static Texture2D flyingCarpetTexture;

		public static Texture2D gridTexture;

		public static Texture2D lightDiscTexture;

		public static Texture2D EyeLaserTexture;

		public static Texture2D BoneEyesTexture;

		public static Texture2D BoneLaserTexture;

		public static Texture2D trashTexture;

		public static Texture2D fishingLineTexture;

		public static Texture2D beetleTexture;

		public static Texture2D probeTexture;

		public static Texture2D eyeLaserSmallTexture;

		public static Texture2D xmasLightTexture;

		public static Texture2D[] golemTexture = new Texture2D[4];

		public static Texture2D confuseTexture;

		public static Texture2D sunOrbTexture;

		public static Texture2D sunAltarTexture;

		public static Texture2D[] chainsTexture = new Texture2D[17];

		public static Texture2D chainTexture;

		public static Texture2D[] gemChainTexture = new Texture2D[7];

		public static Texture2D chain2Texture;

		public static Texture2D chain3Texture;

		public static Texture2D chain4Texture;

		public static Texture2D chain5Texture;

		public static Texture2D chain6Texture;

		public static Texture2D chain7Texture;

		public static Texture2D chain8Texture;

		public static Texture2D chain9Texture;

		public static Texture2D chain10Texture;

		public static Texture2D chain11Texture;

		public static Texture2D chain12Texture;

		public static Texture2D chain13Texture;

		public static Texture2D chain14Texture;

		public static Texture2D chain15Texture;

		public static Texture2D chain16Texture;

		public static Texture2D chain17Texture;

		public static Texture2D chain18Texture;

		public static Texture2D chain19Texture;

		public static Texture2D chain20Texture;

		public static Texture2D chain21Texture;

		public static Texture2D chain22Texture;

		public static Texture2D chain23Texture;

		public static Texture2D chain24Texture;

		public static Texture2D chain25Texture;

		public static Texture2D chain26Texture;

		public static Texture2D chain27Texture;

		public static Texture2D chain28Texture;

		public static Texture2D chain29Texture;

		public static Texture2D chain30Texture;

		public static Texture2D chain31Texture;

		public static Texture2D chain32Texture;

		public static Texture2D chain33Texture;

		public static Texture2D chain34Texture;

		public static Texture2D chain35Texture;

		public static Texture2D chain36Texture;

		public static Texture2D chain37Texture;

		public static Texture2D chain38Texture;

		public static Texture2D chain39Texture;

		public static Texture2D chain40Texture;

		public static Texture2D hbTexture1;

		public static Texture2D hbTexture2;

		public static Texture2D chaosTexture;

		public static Texture2D cdTexture;

		public static Texture2D wofTexture;

		public static Texture2D boneArmTexture;

		public static Texture2D boneArm2Texture;

		public static Texture2D pumpkingArmTexture;

		public static Texture2D pumpkingCloakTexture;

		public static Texture2D[] EquipPageTexture = new Texture2D[11];

		public static Texture2D[] PVPTexture = new Texture2D[3];

		public static Texture2D[] npcToggleTexture = new Texture2D[2];

		public static Texture2D[] HBLockTexture = new Texture2D[2];

		public static Texture2D[] buffTexture = new Texture2D[206];

		public static Texture2D[] itemTexture = new Texture2D[3884];

		public static Texture2D[] itemFlameTexture = new Texture2D[3884];

		public static Texture2D[] npcTexture = new Texture2D[580];

		public static Texture2D[][] npcAltTextures;

		public static Texture2D[] projectileTexture = new Texture2D[714];

		public static Texture2D[] goreTexture = new Texture2D[1087];

		public static Texture2D[] BackPackTexture = new Texture2D[8];

		public static Texture2D rainTexture;

		public static Texture2D[] glowMaskTexture = new Texture2D[245];

		public static Texture2D[] extraTexture = new Texture2D[90];

		public static Texture2D[] highlightMaskTexture = new Texture2D[467];

		public static Texture2D[] coinTexture = new Texture2D[4];

		public static Texture2D[] cursorTextures = new Texture2D[17];

		public static Texture2D cursorRadialTexture;

		public static Texture2D dustTexture;

		public static Texture2D sunTexture;

		public static Texture2D sun2Texture;

		public static Texture2D sun3Texture;

		public static int maxMoons = 3;

		public static int moonType = 0;

		public static Texture2D[] moonTexture = new Texture2D[Main.maxMoons];

		public static Texture2D pumpkinMoonTexture;

		public static Texture2D snowMoonTexture;

		public static Texture2D oneDropLogo;

		public static int numTileColors = 31;

		public static RenderTarget2D[,] tileAltTexture = new RenderTarget2D[467, Main.numTileColors];

		public static bool[,] tileAltTextureInit = new bool[467, Main.numTileColors];

		public static bool[,] tileAltTextureDrawn = new bool[467, Main.numTileColors];

		public static int numTreeStyles = 19;

		public static RenderTarget2D[,] treeTopAltTexture = new RenderTarget2D[Main.numTreeStyles, Main.numTileColors];

		public static RenderTarget2D[,] treeBranchAltTexture = new RenderTarget2D[Main.numTreeStyles, Main.numTileColors];

		public static bool[,] treeAltTextureInit = new bool[Main.numTreeStyles, Main.numTileColors];

		public static bool[,] treeAltTextureDrawn = new bool[Main.numTreeStyles, Main.numTileColors];

		public static bool[,] checkTreeAlt = new bool[Main.numTreeStyles, Main.numTileColors];

		public static RenderTarget2D[,] wallAltTexture = new RenderTarget2D[231, Main.numTileColors];

		public static bool[,] wallAltTextureInit = new bool[231, Main.numTileColors];

		public static bool[,] wallAltTextureDrawn = new bool[231, Main.numTileColors];

		public static Texture2D[] tileTexture = new Texture2D[467];

		public static Texture2D blackTileTexture;

		public static Texture2D[] wallTexture = new Texture2D[231];

		public static Texture2D[] backgroundTexture = new Texture2D[207];

		public static Texture2D[] cloudTexture = new Texture2D[22];

		public static Texture2D[] starTexture = new Texture2D[5];

		public static Texture2D[] liquidTexture = new Texture2D[12];

		public static Texture2D heartTexture;

		public static Texture2D heart2Texture;

		public static Texture2D manaTexture;

		public static Texture2D bubbleTexture;

		public static Texture2D flameTexture;

		public static Texture2D[] treeTopTexture = new Texture2D[Main.numTreeStyles];

		public static Texture2D[] treeBranchTexture = new Texture2D[Main.numTreeStyles];

		public static Texture2D[] woodTexture = new Texture2D[7];

		public static RenderTarget2D[,] woodAltTexture = new RenderTarget2D[Main.woodTexture.Length, Main.numTileColors];

		public static Texture2D shroomCapTexture;

		public static Texture2D inventoryBackTexture;

		public static Texture2D inventoryBack2Texture;

		public static Texture2D inventoryBack3Texture;

		public static Texture2D inventoryBack4Texture;

		public static Texture2D inventoryBack5Texture;

		public static Texture2D inventoryBack6Texture;

		public static Texture2D inventoryBack7Texture;

		public static Texture2D inventoryBack8Texture;

		public static Texture2D inventoryBack9Texture;

		public static Texture2D inventoryBack10Texture;

		public static Texture2D inventoryBack11Texture;

		public static Texture2D inventoryBack12Texture;

		public static Texture2D inventoryBack13Texture;

		public static Texture2D inventoryBack14Texture;

		public static Texture2D inventoryBack15Texture;

		public static Texture2D inventoryBack16Texture;

		public static Texture2D hairStyleBackTexture;

		public static Texture2D clothesStyleBackTexture;

		public static Texture2D inventoryTickOnTexture;

		public static Texture2D inventoryTickOffTexture;

		public static Texture2D loTexture;

		public static Texture2D logoTexture;

		public static Texture2D logo2Texture;

		public static Texture2D textBackTexture;

		public static Texture2D chatTexture;

		public static Texture2D chat2Texture;

		public static Texture2D chatBackTexture;

		public static Texture2D teamTexture;

		public static Texture2D reTexture;

		public static Texture2D raTexture;

		public static Texture2D splashTexture;

		public static Texture2D fadeTexture;

		public static Texture2D ninjaTexture;

		public static Texture2D antLionTexture;

		public static Texture2D spikeBaseTexture;

		public static Texture2D ghostTexture;

		public static Texture2D evilCactusTexture;

		public static Texture2D goodCactusTexture;

		public static Texture2D crimsonCactusTexture;

		public static Texture2D wraithEyeTexture;

		public static Texture2D fireflyTexture;

		public static Texture2D fireflyJarTexture;

		public static Texture2D lightningbugTexture;

		public static Texture2D lightningbugJarTexture;

		public static Texture2D[] jellyfishBowlTexture = new Texture2D[3];

		public static Texture2D glowSnailTexture;

		public static Texture2D iceQueenTexture;

		public static Texture2D santaTankTexture;

		public static Texture2D reaperEyeTexture;

		public static Texture2D jackHatTexture;

		public static Texture2D treeFaceTexture;

		public static Texture2D pumpkingFaceTexture;

		public static Texture2D dukeFishronTexture;

		public static Texture2D miniMinotaurTexture;

		public static Texture2D[,] playerTextures;

		public static bool UseExperimentalFeatures = false;

		public static string DefaultSeed = "";

		public static Texture2D[] playerHairTexture = new Texture2D[134];

		public static Texture2D[] playerHairAltTexture = new Texture2D[134];

		public static SoundEffect[] soundDrip = new SoundEffect[3];

		public static SoundEffectInstance[] soundInstanceDrip = new SoundEffectInstance[3];

		public static SoundEffect[] soundLiquid = new SoundEffect[2];

		public static SoundEffectInstance[] soundInstanceLiquid = new SoundEffectInstance[2];

		public static SoundEffect[] soundMech = new SoundEffect[1];

		public static SoundEffectInstance[] soundInstanceMech = new SoundEffectInstance[1];

		public static SoundEffect[] soundDig = new SoundEffect[3];

		public static SoundEffectInstance[] soundInstanceDig = new SoundEffectInstance[3];

		public static SoundEffect[] soundTink = new SoundEffect[3];

		public static SoundEffectInstance[] soundInstanceTink = new SoundEffectInstance[3];

		public static SoundEffect[] soundCoin = new SoundEffect[5];

		public static SoundEffectInstance[] soundInstanceCoin = new SoundEffectInstance[5];

		public static SoundEffect[] soundPlayerHit = new SoundEffect[3];

		public static SoundEffectInstance[] soundInstancePlayerHit = new SoundEffectInstance[3];

		public static SoundEffect[] soundFemaleHit = new SoundEffect[3];

		public static SoundEffectInstance[] soundInstanceFemaleHit = new SoundEffectInstance[3];

		public static SoundEffect soundPlayerKilled;

		public static SoundEffectInstance soundInstancePlayerKilled;

		public static SoundEffect soundGrass;

		public static SoundEffectInstance soundInstanceGrass;

		public static SoundEffect soundGrab;

		public static SoundEffectInstance soundInstanceGrab;

		public static SoundEffect soundPixie;

		public static SoundEffectInstance soundInstancePixie;

		public static SoundEffect[] soundItem = new SoundEffect[126];

		public static SoundEffectInstance[] soundInstanceItem = new SoundEffectInstance[126];

		public static SoundEffect[] soundNPCHit = new SoundEffect[58];

		public static SoundEffectInstance[] soundInstanceNPCHit = new SoundEffectInstance[58];

		public static SoundEffect[] soundNPCKilled = new SoundEffect[63];

		public static SoundEffectInstance[] soundInstanceNPCKilled = new SoundEffectInstance[63];

		public static SoundEffectInstance soundInstanceMoonlordCry;

		public static SoundEffect soundDoorOpen;

		public static SoundEffectInstance soundInstanceDoorOpen;

		public static SoundEffect soundDoorClosed;

		public static SoundEffectInstance soundInstanceDoorClosed;

		public static SoundEffect soundMenuOpen;

		public static SoundEffectInstance soundInstanceMenuOpen;

		public static SoundEffect soundMenuClose;

		public static SoundEffectInstance soundInstanceMenuClose;

		public static SoundEffect soundMenuTick;

		public static SoundEffectInstance soundInstanceMenuTick;

		public static SoundEffect soundShatter;

		public static SoundEffectInstance soundInstanceShatter;

		public static SoundEffect soundCamera;

		public static SoundEffectInstance soundInstanceCamera;

		public static SoundEffect[] soundZombie = new SoundEffect[106];

		public static SoundEffectInstance[] soundInstanceZombie = new SoundEffectInstance[106];

		public static SoundEffect[] soundRoar = new SoundEffect[3];

		public static SoundEffectInstance[] soundInstanceRoar = new SoundEffectInstance[3];

		public static SoundEffect[] soundSplash = new SoundEffect[2];

		public static SoundEffectInstance[] soundInstanceSplash = new SoundEffectInstance[2];

		public static SoundEffect soundDoubleJump;

		public static SoundEffectInstance soundInstanceDoubleJump;

		public static SoundEffect soundRun;

		public static SoundEffectInstance soundInstanceRun;

		public static SoundEffect soundCoins;

		public static SoundEffectInstance soundInstanceCoins;

		public static SoundEffect soundUnlock;

		public static SoundEffectInstance soundInstanceUnlock;

		public static SoundEffect soundChat;

		public static SoundEffectInstance soundInstanceChat;

		public static SoundEffect soundMaxMana;

		public static SoundEffectInstance soundInstanceMaxMana;

		public static SoundEffect soundDrown;

		public static SoundEffectInstance soundInstanceDrown;

		public static SoundEffect[] trackableSounds;

		public static SoundEffectInstance[] trackableSoundInstances;

		private static bool _areSoundsPaused = false;

		public static AudioEngine engine;

		public static SoundBank soundBank;

		public static WaveBank waveBank;

		public static Cue[] music = new Cue[42];

		public static float[] musicFade = new float[42];

		public static float musicVolume = 0.75f;

		public static float ambientVolume = 0.75f;

		public static float soundVolume = 1f;

		public static SpriteFont fontItemStack;

		public static SpriteFont fontMouseText;

		public static SpriteFont fontDeathText;

		public static SpriteFont[] fontCombatText = new SpriteFont[2];

		public static ServerMode MenuServerMode = ServerMode.Lobby | ServerMode.FriendsCanJoin;

		public static bool[] tileLighted = new bool[467];

		public static bool[] tileMergeDirt = new bool[467];

		public static bool[] tileCut = new bool[467];

		public static bool[] tileAlch = new bool[467];

		public static int[] tileShine = new int[467];

		public static bool[] tileShine2 = new bool[467];

		public static bool[] wallHouse = new bool[231];

		public static bool[] wallDungeon = new bool[231];

		public static bool[] wallLight = new bool[231];

		public static int[] wallBlend = new int[231];

		public static bool[] tileStone = new bool[467];

		public static bool[] tileAxe = new bool[467];

		public static bool[] tileHammer = new bool[467];

		public static bool[] tileWaterDeath = new bool[467];

		public static bool[] tileLavaDeath = new bool[467];

		public static bool[] tileTable = new bool[467];

		public static bool[] tileBlockLight = new bool[467];

		public static bool[] tileNoSunLight = new bool[467];

		public static bool[] tileDungeon = new bool[467];

		public static bool[] tileSpelunker = new bool[467];

		public static bool[] tileSolidTop = new bool[467];

		public static bool[] tileSolid = new bool[467];

		public static bool[] tileBouncy = new bool[467];

		public static short[] tileValue = new short[467];

		public static byte[] tileLargeFrames = new byte[467];

		public static byte[] wallLargeFrames = new byte[231];

		public static bool[] tileRope = new bool[467];

		public static bool[] tileBrick = new bool[467];

		public static bool[] tileMoss = new bool[467];

		public static bool[] tileNoAttach = new bool[467];

		public static bool[] tileNoFail = new bool[467];

		public static bool[] tileObsidianKill = new bool[467];

		public static bool[] tileFrameImportant = new bool[467];

		public static bool[] tilePile = new bool[467];

		public static bool[] tileBlendAll = new bool[467];

		public static short[] tileGlowMask = new short[467];

		public static bool[] tileContainer = new bool[467];

		public static bool[] tileSign = new bool[467];

		public static bool[][] tileMerge = new bool[467][];

		public static int cageFrames = 25;

		public static bool critterCage = false;

		public static int[] bunnyCageFrame = new int[Main.cageFrames];

		public static int[] bunnyCageFrameCounter = new int[Main.cageFrames];

		public static int[] squirrelCageFrame = new int[Main.cageFrames];

		public static int[] squirrelCageFrameCounter = new int[Main.cageFrames];

		public static int[] squirrelCageFrameOrange = new int[Main.cageFrames];

		public static int[] squirrelCageFrameCounterOrange = new int[Main.cageFrames];

		public static int[] mallardCageFrame = new int[Main.cageFrames];

		public static int[] mallardCageFrameCounter = new int[Main.cageFrames];

		public static int[] duckCageFrame = new int[Main.cageFrames];

		public static int[] duckCageFrameCounter = new int[Main.cageFrames];

		public static int[] birdCageFrame = new int[Main.cageFrames];

		public static int[] birdCageFrameCounter = new int[Main.cageFrames];

		public static int[] redBirdCageFrame = new int[Main.cageFrames];

		public static int[] redBirdCageFrameCounter = new int[Main.cageFrames];

		public static int[] blueBirdCageFrame = new int[Main.cageFrames];

		public static int[] blueBirdCageFrameCounter = new int[Main.cageFrames];

		public static byte[,] butterflyCageMode = new byte[9, Main.cageFrames];

		public static int[,] butterflyCageFrame = new int[9, Main.cageFrames];

		public static int[,] butterflyCageFrameCounter = new int[9, Main.cageFrames];

		public static int[,] scorpionCageFrame = new int[2, Main.cageFrames];

		public static int[,] scorpionCageFrameCounter = new int[2, Main.cageFrames];

		public static int[] snailCageFrame = new int[Main.cageFrames];

		public static int[] snailCageFrameCounter = new int[Main.cageFrames];

		public static int[] snail2CageFrame = new int[Main.cageFrames];

		public static int[] snail2CageFrameCounter = new int[Main.cageFrames];

		public static byte[] fishBowlFrameMode = new byte[Main.cageFrames];

		public static int[] fishBowlFrame = new int[Main.cageFrames];

		public static int[] fishBowlFrameCounter = new int[Main.cageFrames];

		public static int[] frogCageFrame = new int[Main.cageFrames];

		public static int[] frogCageFrameCounter = new int[Main.cageFrames];

		public static int[] mouseCageFrame = new int[Main.cageFrames];

		public static int[] mouseCageFrameCounter = new int[Main.cageFrames];

		public static byte[,] jellyfishCageMode = new byte[3, Main.cageFrames];

		public static int[,] jellyfishCageFrame = new int[3, Main.cageFrames];

		public static int[,] jellyfishCageFrameCounter = new int[3, Main.cageFrames];

		public static int[] wormCageFrame = new int[Main.cageFrames];

		public static int[] wormCageFrameCounter = new int[Main.cageFrames];

		public static int[] penguinCageFrame = new int[Main.cageFrames];

		public static int[] penguinCageFrameCounter = new int[Main.cageFrames];

		public static int[,] slugCageFrame = new int[3, Main.cageFrames];

		public static int[,] slugCageFrameCounter = new int[3, Main.cageFrames];

		public static int[] grasshopperCageFrame = new int[Main.cageFrames];

		public static int[] grasshopperCageFrameCounter = new int[Main.cageFrames];

		public static bool[] tileSand = new bool[467];

		public static bool[] tileFlame = new bool[467];

		public static bool[] npcCatchable = new bool[580];

		public static int[] tileFrame = new int[467];

		public static int[] tileFrameCounter = new int[467];

		public static byte[] wallFrame = new byte[231];

		public static byte[] wallFrameCounter = new byte[231];

		public static int[] backgroundWidth = new int[207];

		public static int[] backgroundHeight = new int[207];

		public static bool tilesLoaded = false;

		public static WorldMap Map = new WorldMap(Main.maxTilesX, Main.maxTilesY);

		public static Tile[,] tile = new Tile[Main.maxTilesX, Main.maxTilesY];

		public static Dust[] dust = new Dust[6001];

		public static Star[] star = new Star[130];

		public static Item[] item = new Item[401];

		public static int[] itemLockoutTime = new int[401];

		public static NPC[] npc = new NPC[201];

		public static Gore[] gore = new Gore[501];

		public static Rain[] rain = new Rain[Main.maxRain + 1];

		public static Projectile[] projectile = new Projectile[1001];

		public static int[,] projectileIdentity = new int[256, 1001];

		public static CombatText[] combatText = new CombatText[100];

		public static ItemText[] itemText = new ItemText[20];

		public static Chest[] chest = new Chest[1000];

		public static Sign[] sign = new Sign[1000];

		public static int[] itemFrame = new int[401];

		public static int[] itemFrameCounter = new int[401];

		public static DrawAnimation[] itemAnimations = new DrawAnimation[3884];

		public static List<int> itemAnimationsRegistered = new List<int>();

		public static Vector2 screenPosition;

		public static Vector2 screenLastPosition;

		public static int screenWidth = 1152;

		public static int screenHeight = 864;

		public static bool screenMaximized = false;

		public static bool screenBorderless = false;

		public static int chatLength = 600;

		public static bool drawingPlayerChat = false;

		public static bool chatRelease = false;

		public static int showCount = 10;

		public static int numChatLines = 500;

		public static int startChatLine = 0;

		public static string chatText = "";

		public static ChatLine[] chatLine = new ChatLine[Main.numChatLines];

		public static bool inputTextEnter = false;

		public static bool inputTextEscape = false;

		public static float[] hotbarScale = new float[]
		{
			1f,
			0.75f,
			0.75f,
			0.75f,
			0.75f,
			0.75f,
			0.75f,
			0.75f,
			0.75f,
			0.75f
		};

		public static byte mouseTextColor = 0;

		public static int mouseTextColorChange = 1;

		public static bool mouseLeftRelease = false;

		public static bool mouseRightRelease = false;

		public static bool playerInventory = false;

		public static int stackSplit;

		public static int stackCounter = 0;

		public static int stackDelay = 7;

		public static int superFastStack = 0;

		public static Item mouseItem = new Item();

		public static Item guideItem = new Item();

		public static Item reforgeItem = new Item();

		public static float inventoryScale = 0.75f;

		public static bool hasFocus = true;

		public static bool recFastScroll = false;

		public static bool recBigList = false;

		public static int recStart = 0;

		public static Recipe[] recipe = new Recipe[Recipe.maxRecipes];

		public static int[] availableRecipe = new int[Recipe.maxRecipes];

		public static float[] availableRecipeY = new float[Recipe.maxRecipes];

		public static int numAvailableRecipes;

		public static int focusRecipe;

		public static int myPlayer = 0;

		public static Player[] player = new Player[256];

		public static List<DrawData> playerDrawData = new List<DrawData>();

		public static List<int> playerDrawDust = new List<int>();

		public static List<int> playerDrawGore = new List<int>();

		public static int spawnTileX;

		public static int spawnTileY;

		public static bool npcChatRelease = false;

		public static bool editSign = false;

		public static bool editChest = false;

		public static bool blockInput = false;

		public static string blockKey = Microsoft.Xna.Framework.Input.Keys.None.ToString();

		public static string defaultChestName = string.Empty;

		public static string npcChatText = "";

		public static bool npcChatFocus1 = false;

		public static bool npcChatFocus2 = false;

		public static bool npcChatFocus3 = false;

		public static int npcShop = 0;

		public static int npcChatCornerItem = 0;

		public Chest[] shop = new Chest[Main.MaxShopIDs];

		public static int[] travelShop = new int[40];

		public static List<string> anglerWhoFinishedToday = new List<string>();

		public static bool anglerQuestFinished;

		public static int anglerQuest = 0;

		public static int[] anglerQuestItemNetIDs = new int[]
		{
			2450,
			2451,
			2452,
			2453,
			2454,
			2455,
			2456,
			2457,
			2458,
			2459,
			2460,
			2461,
			2462,
			2463,
			2464,
			2465,
			2466,
			2467,
			2468,
			2469,
			2470,
			2471,
			2472,
			2473,
			2474,
			2475,
			2476,
			2477,
			2478,
			2479,
			2480,
			2481,
			2482,
			2483,
			2484,
			2485,
			2486,
			2487,
			2488
		};

		private static int _renderTargetMaxSize = 2048;

		public static bool InGuideCraftMenu = false;

		public static bool InReforgeMenu = false;

		public static Item toolTip = new Item();

		private static int backSpaceCount = 0;

		public static string motd = "";

		public static bool toggleFullscreen;

		public static int numDisplayModes = 0;

		public static int[] displayWidth = new int[99];

		public static int[] displayHeight = new int[99];

		public static bool gameMenu = true;

		private static int maxLoadPlayer = 1000;

		private static int maxLoadWorld = 1000;

		public static List<PlayerFileData> PlayerList = new List<PlayerFileData>();

		public static PlayerFileData ActivePlayerFileData = new PlayerFileData();

		public static Player PendingPlayer = null;

		public static List<WorldFileData> WorldList = new List<WorldFileData>();

		public static WorldFileData ActiveWorldFileData = new WorldFileData();

		public static string WorldPath = Main.SavePath + Path.DirectorySeparatorChar + "Worlds";

		public static string CloudWorldPath = "worlds";

		public static string PlayerPath = Main.SavePath + Path.DirectorySeparatorChar + "Players";

		public static string CloudPlayerPath = "players";

		public static Preferences Configuration = new Preferences(Main.SavePath + Path.DirectorySeparatorChar + "config.json", false, false);

		public static Preferences InputProfiles = new Preferences(Main.SavePath + Path.DirectorySeparatorChar + "input profiles.json", false, false);

		public static string[] itemName = new string[3884];

		public static string[] npcName = new string[580];

		public static string[] npcNameEnglish = new string[580];

		public static string[] projName = new string[714];

		public static KeyboardState inputText;

		public static KeyboardState oldInputText;

		public static int PendingResolutionWidth = 800;

		public static int PendingResolutionHeight = 600;

		public static bool PendingBorderlessState = false;

		public static int invasionType = 0;

		public static double invasionX = 0.0;

		public static int invasionSize = 0;

		public static int invasionDelay = 0;

		public static int invasionWarn = 0;

		public static int invasionSizeStart = 0;

		public static bool invasionProgressNearInvasion = false;

		public static int invasionProgressMode = 2;

		public static int invasionProgressIcon = 0;

		public static int invasionProgress = 0;

		public static int invasionProgressMax = 0;

		public static int invasionProgressWave = 0;

		public static int invasionProgressDisplayLeft = 0;

		public static float invasionProgressAlpha = 0f;

		public static int[] npcFrameCount = new int[]
		{
			1,
			2,
			2,
			3,
			6,
			2,
			2,
			1,
			1,
			1,
			1,
			1,
			1,
			1,
			1,
			1,
			2,
			25,
			23,
			25,
			21,
			15,
			26,
			2,
			10,
			1,
			16,
			16,
			16,
			3,
			1,
			15,
			3,
			1,
			3,
			1,
			1,
			21,
			25,
			1,
			1,
			1,
			3,
			3,
			15,
			3,
			7,
			7,
			4,
			5,
			6,
			5,
			3,
			3,
			23,
			6,
			3,
			6,
			6,
			2,
			5,
			3,
			2,
			7,
			7,
			4,
			2,
			8,
			1,
			5,
			1,
			2,
			4,
			16,
			5,
			4,
			4,
			15,
			15,
			15,
			15,
			2,
			4,
			6,
			6,
			24,
			16,
			1,
			1,
			1,
			1,
			1,
			1,
			4,
			3,
			1,
			1,
			1,
			1,
			1,
			1,
			5,
			6,
			7,
			16,
			1,
			1,
			25,
			23,
			12,
			20,
			21,
			1,
			2,
			2,
			3,
			6,
			1,
			1,
			1,
			15,
			4,
			11,
			1,
			23,
			6,
			6,
			3,
			1,
			2,
			2,
			1,
			3,
			4,
			1,
			2,
			1,
			4,
			2,
			1,
			15,
			3,
			25,
			4,
			5,
			7,
			3,
			2,
			12,
			12,
			4,
			4,
			4,
			8,
			8,
			9,
			5,
			6,
			4,
			15,
			23,
			3,
			3,
			8,
			5,
			4,
			13,
			15,
			12,
			4,
			14,
			14,
			3,
			2,
			5,
			3,
			2,
			3,
			23,
			5,
			14,
			16,
			5,
			2,
			2,
			12,
			3,
			3,
			3,
			3,
			2,
			2,
			2,
			2,
			2,
			7,
			14,
			15,
			16,
			8,
			3,
			15,
			15,
			15,
			2,
			3,
			20,
			25,
			23,
			26,
			4,
			4,
			16,
			16,
			20,
			20,
			20,
			2,
			2,
			2,
			2,
			8,
			12,
			3,
			4,
			2,
			4,
			25,
			26,
			26,
			6,
			3,
			3,
			3,
			3,
			3,
			3,
			4,
			4,
			5,
			4,
			6,
			7,
			15,
			4,
			7,
			6,
			1,
			1,
			2,
			4,
			3,
			5,
			3,
			3,
			3,
			4,
			5,
			6,
			4,
			2,
			1,
			8,
			4,
			4,
			1,
			8,
			1,
			4,
			15,
			15,
			15,
			15,
			15,
			15,
			15,
			15,
			15,
			15,
			15,
			15,
			3,
			3,
			3,
			3,
			3,
			3,
			15,
			3,
			6,
			12,
			20,
			20,
			20,
			15,
			15,
			15,
			5,
			5,
			6,
			6,
			5,
			2,
			7,
			2,
			6,
			6,
			6,
			6,
			6,
			15,
			15,
			15,
			15,
			15,
			11,
			4,
			2,
			2,
			3,
			3,
			3,
			15,
			15,
			15,
			10,
			14,
			12,
			1,
			10,
			8,
			3,
			3,
			2,
			2,
			2,
			2,
			7,
			15,
			15,
			15,
			6,
			3,
			10,
			10,
			6,
			9,
			8,
			9,
			8,
			20,
			10,
			6,
			23,
			1,
			4,
			24,
			2,
			4,
			6,
			6,
			10,
			15,
			15,
			15,
			15,
			4,
			4,
			26,
			23,
			8,
			2,
			4,
			4,
			4,
			4,
			2,
			2,
			4,
			12,
			12,
			9,
			9,
			9,
			1,
			9,
			11,
			2,
			2,
			9,
			5,
			6,
			4,
			18,
			8,
			11,
			1,
			4,
			5,
			8,
			4,
			1,
			1,
			1,
			1,
			4,
			2,
			5,
			4,
			11,
			5,
			11,
			1,
			1,
			1,
			10,
			10,
			15,
			8,
			17,
			6,
			6,
			1,
			12,
			12,
			13,
			15,
			9,
			5,
			10,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			4,
			4,
			16,
			16,
			25,
			5,
			7,
			3,
			10,
			2,
			6,
			2,
			19,
			19,
			19,
			19,
			26,
			3,
			1,
			1,
			1,
			1,
			1,
			16,
			21,
			9,
			16,
			7,
			6,
			18,
			13,
			20,
			12,
			12,
			20,
			6,
			14,
			14,
			14,
			14,
			6,
			1,
			3,
			25,
			19,
			20,
			22,
			2,
			4,
			4,
			4,
			11,
			9,
			8,
			1,
			9,
			1,
			8,
			8,
			12,
			12,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			1,
			6,
			9,
			1,
			1,
			1,
			1,
			1,
			1,
			4,
			1,
			10,
			1,
			8,
			4,
			1,
			5,
			8,
			8,
			8,
			8,
			9,
			9,
			5,
			4,
			8,
			16,
			8,
			2,
			3,
			3,
			6,
			6,
			7,
			13,
			4,
			4,
			4,
			4,
			1,
			1,
			1,
			8,
			25,
			11,
			14,
			14,
			14,
			17,
			17,
			17,
			5,
			5,
			5,
			14,
			14,
			14,
			9,
			9,
			9,
			9,
			17,
			17,
			16,
			16,
			18,
			18,
			10,
			10,
			10,
			10,
			4,
			1
		};

		public static Dictionary<int, byte> npcLifeBytes = new Dictionary<int, byte>();

		private static bool mouseExit = false;

		private static float exitScale = 0.8f;

		private static bool mouseReforge = false;

		private static float reforgeScale = 0.8f;

		public static Player clientPlayer = new Player();

		public static string getIP = Main.defaultIP;

		public static string getPort = Convert.ToString(Netplay.ListenPort);

		public static bool menuMultiplayer = false;

		public static bool menuServer = false;

		public static int netMode = 0;

		private static int _targetNetMode = 0;

		private static bool _hasPendingNetmodeChange = false;

		public static int netPlayCounter;

		public static int lastNPCUpdate;

		public static int lastItemUpdate;

		public static int maxNPCUpdates = 5;

		public static int maxItemUpdates = 5;

		public static string cUp = "W";

		public static string cLeft = "A";

		public static string cDown = "S";

		public static string cRight = "D";

		public static string cJump = "Space";

		public static string cThrowItem = "T";

		public static string cHeal = "H";

		public static string cMana = "J";

		public static string cBuff = "B";

		public static string cHook = "E";

		public static string cTorch = "LeftShift";

		public static string cInv = "Escape";

		public static string cSmart = "LeftControl";

		public static string cMount = "R";

		public static string cFavoriteKey = "LeftAlt";

		public static bool cSmartCursorToggle = true;

		public static bool SmartCursorEnabled = false;

		public static bool SmartCursorShowing = false;

		public static int SmartCursorX;

		public static int SmartCursorY;

		public static bool SmartInteractShowingGenuine = false;

		public static bool SmartInteractShowingFake = false;

		public static int SmartInteractX;

		public static int SmartInteractY;

		public static int SmartInteractNPC;

		public static List<int> SmartInteractNPCsNearby = new List<int>();

		public static List<Microsoft.Xna.Framework.Point> SmartInteractTileCoords = new List<Microsoft.Xna.Framework.Point>();

		public static List<Microsoft.Xna.Framework.Point> SmartInteractTileCoordsSelected = new List<Microsoft.Xna.Framework.Point>();

		public static int TileInteractionLX = -1;

		public static int TileInteractionLY = -1;

		public static int TileInteractionHX = -1;

		public static int TileInteractionHY = -1;

		public static int cursorOverride = -1;

		public static int signHover = -1;

		public static string cMapZoomIn = "Add";

		public static string cMapZoomOut = "Subtract";

		public static string cMapAlphaUp = "PageUp";

		public static string cMapAlphaDown = "PageDown";

		public static string cMapFull = "M";

		public static string cMapStyle = "Tab";

		public static Microsoft.Xna.Framework.Input.Keys FavoriteKey = Microsoft.Xna.Framework.Input.Keys.LeftAlt;

		public static Microsoft.Xna.Framework.Color mouseColor = new Microsoft.Xna.Framework.Color(255, 50, 95);

		public static Microsoft.Xna.Framework.Color cursorColor = Microsoft.Xna.Framework.Color.White;

		public static int cursorColorDirection = 1;

		public static float cursorAlpha = 0f;

		public static float cursorScale = 0f;

		public static bool signBubble = false;

		public static int signX = 0;

		public static int signY = 0;

		public static bool hideUI = false;

		public static bool releaseUI = false;

		public static int FrameSkipMode = 2;

		public static bool terrariasFixedTiming = true;

		private int splashCounter;

		public List<int> DrawCacheNPCsMoonMoon = new List<int>(200);

		public List<int> DrawCacheNPCsOverPlayers = new List<int>(200);

		public List<int> DrawCacheNPCProjectiles = new List<int>(200);

		public List<int> DrawCacheNPCsBehindNonSolidTiles = new List<int>(200);

		public List<int> DrawCacheProjsBehindNPCsAndTiles = new List<int>(1000);

		public List<int> DrawCacheProjsBehindNPCs = new List<int>(1000);

		public List<int> DrawCacheProjsBehindProjectiles = new List<int>(1000);

		public List<int> DrawCacheProjsOverWiresUI = new List<int>(1000);

		public static string oldStatusText = "";

		public static bool autoShutdown = false;

		public static bool serverGenLock = false;

		public static int sundialCooldown = 0;

		public static bool fastForwardTime = false;

		private Type t2d = typeof(Texture2D);

		private Stopwatch t2dtest = new Stopwatch();

		public static readonly object globalTextureLocker = new object();

		public static float ambientWaterfallX = -1f;

		public static float ambientWaterfallY = -1f;

		public static float ambientWaterfallStrength = 0f;

		public static float ambientLavafallX = -1f;

		public static float ambientLavafallY = -1f;

		public static float ambientLavafallStrength = 0f;

		public static float ambientLavaX = -1f;

		public static float ambientLavaY = -1f;

		public static float ambientLavaStrength = 0f;

		public static int ambientCounter = 0;

		public static int ProjectileUpdateLoopIndex = -1;

		private bool _crazyTestedMemoryLimit;

		private Player[] _crazyTestArrayMemoryLimit;

		private float logoRotation;

		private float logoRotationDirection = 1f;

		private float logoRotationSpeed = 1f;

		private float logoScale = 1f;

		private float logoScaleDirection = 1f;

		private float logoScaleSpeed = 1f;

		private static int maxMenuItems = 16;

		private float[] menuItemScale = new float[Main.maxMenuItems];

		private int focusMenu = -1;

		private int selectedMenu = -1;

		private int selectedMenu2 = -1;

		public static int selectedPlayer = 0;

		public static int selectedWorld = 0;

		public static int menuMode = 0;

		public static int menuSkip = 0;

		private static Item cpItem = new Item();

		public int textBlinkerCount;

		public int textBlinkerState;

		public static string newWorldName = "";

		private static int[] specX = new int[1000];

		private static int[] specY = new int[1000];

		public static bool HoveringOverAnNPC = false;

		public static string hoverItemName = "";

		public static Microsoft.Xna.Framework.Color inventoryBack = new Microsoft.Xna.Framework.Color(220, 220, 220, 220);

		public static bool mouseText = false;

		private static int mH = 0;

		private static int UI_ScreenAnchorX = Main.screenWidth - 800;

		private static int UIDisplay_ManaPerStar = 20;

		private static float UIDisplay_LifePerHeart = 20f;

		private static int rare = 0;

		public static int hairStart = 0;

		private static int oldHairStyle;

		private static Microsoft.Xna.Framework.Color oldHairColor;

		public static int selClothes = 0;

		private static Microsoft.Xna.Framework.Color[] oldClothesColor = new Microsoft.Xna.Framework.Color[4];

		private static int oldClothesStyle = 0;

		public static int dresserX;

		public static int dresserY;

		public static Player dresserDummy;

		private bool _needToSetupDrawInterfaceLayers = true;

		private List<MethodSequenceListItem> _drawInterfaceLayers;

		private static GameTime _drawInterfaceGameTime;

		private static bool _MouseOversCanClear = false;

		private static Vector2 _itemIconCacheScreenPosition;

		private static int _itemIconCacheSelectedItemID;

		private static int _itemIconCacheTime = 0;

		public static Microsoft.Xna.Framework.Color selColor = Microsoft.Xna.Framework.Color.White;

		public static int focusColor = 0;

		public static int colorDelay = 0;

		public static int setKey = -1;

		public static int bgScroll = 0;

		public static bool autoPass = false;

		public static int menuFocus = 0;

		public static float hBar = -1f;

		public static float sBar = -1f;

		public static float lBar = 1f;

		public static float aBar = 1f;

		private int grabColorSlider;

		public static bool blockMouse = false;

		private static bool _blockFancyUIWhileLoading = false;

		private bool[] menuWide = new bool[100];

		public static float GamepadCursorAlpha = 0f;

		protected List<Tuple<int, int, ushort>> DrawWiresSpecialTiles = new List<Tuple<int, int, ushort>>();

		private static string[] MonolithFilterNames = new string[]
		{
			"MonolithVortex",
			"MonolithNebula",
			"MonolithStardust",
			"MonolithSolar"
		};

		private static string[] MonolithSkyNames = new string[]
		{
			"MonolithVortex",
			"MonolithNebula",
			"MonolithStardust",
			"MonolithSolar"
		};

		private static float tranSpeed = 0.05f;

		private static float atmo = 0f;

		private static float bgScale = 1f;

		private static int bgW = (int)(1024f * Main.bgScale);

		private static Microsoft.Xna.Framework.Color backColor = Microsoft.Xna.Framework.Color.White;

		private static Microsoft.Xna.Framework.Color trueBackColor = Main.backColor;

		private float screenOff;

		private float scAdj;

		private float cTop;

		private static SlotVector<ActiveSound> _trackedSounds = new SlotVector<ActiveSound>(4096);

		public static event Action OnEnginePreload;

		public static event Action OnEngineLoad;

		public static event Action OnTick;

		public static event Action<GameTime> OnPreDraw;

		public static event Action<GameTime> OnPostDraw;

		public static event Action OnRenderTargetsReleased;

		public static event ResolutionChangeEvent OnRenderTargetsInitialized;

		public static bool ThickMouse
		{
			get
			{
				return Main.MouseBorderColor != Microsoft.Xna.Framework.Color.Transparent;
			}
		}

		public static bool GamepadDisableCursorItemIcon
		{
			get
			{
				return PlayerInput.UsingGamepad && Main.GamepadDisableCursorItemIconInner;
			}
		}

		public static bool expertMode
		{
			get
			{
				return Main.ActiveWorldFileData != null && Main.ActiveWorldFileData.IsExpertMode;
			}
			set
			{
				if (Main.ActiveWorldFileData == null)
				{
					return;
				}
				Main.ActiveWorldFileData.IsExpertMode = value;
			}
		}

		public static AchievementManager Achievements
		{
			get
			{
				return Main.instance._achievements;
			}
		}

		public static Effect screenShader
		{
			get
			{
				return Main.ScreenShaderRef.Value;
			}
		}

		public static Effect pixelShader
		{
			get
			{
				return Main.PixelShaderRef.Value;
			}
		}

		public static Effect tileShader
		{
			get
			{
				return Main.TileShaderRef.Value;
			}
		}

		public static Vector2 MouseScreen
		{
			get
			{
				return new Vector2((float)Main.mouseX, (float)Main.mouseY);
			}
		}

		public static Vector2 MouseWorld
		{
			get
			{
				Vector2 result = Main.MouseScreen + Main.screenPosition;
				if (Main.player[Main.myPlayer].gravDir == -1f)
				{
					result.Y = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY;
				}
				return result;
			}
		}

		public static bool UseSeedUI
		{
			get
			{
				return Main.UseExperimentalFeatures;
			}
		}

		public static Player LocalPlayer
		{
			get
			{
				return Main.player[Main.myPlayer];
			}
		}

		public static string playerPathName
		{
			get
			{
				return Main.ActivePlayerFileData.Path;
			}
		}

		public static string worldPathName
		{
			get
			{
				return Main.ActiveWorldFileData.Path;
			}
		}

		public static int TextMaxLengthForScreen
		{
			get
			{
				return Main.screenWidth - 320;
			}
		}

		public static bool ShouldPVPDraw
		{
			get
			{
				return Main.netMode == 1;
			}
		}

		public static bool ShouldDrawInfoIconsHorizontally
		{
			get
			{
				return (Main.mapStyle != 1 || !Main.mapEnabled || Main.screenHeight >= 820) && (Main.mapStyle == 1 || Main.screenWidth >= 855) && !PlayerInput.UsingGamepad;
			}
		}

		public static bool IsGraphicsDeviceAvailable
		{
			get
			{
				return !Main.instance.GraphicsDevice.IsDisposed && Main.instance.GraphicsDevice.GraphicsDeviceStatus == GraphicsDeviceStatus.Normal;
			}
		}

		public static void FindAnnouncementBoxStatus()
		{
			Main.AnnouncementBoxDisabled = Program.LaunchParameters.ContainsKey("-disableannouncementbox");
			string s;
			int announcementBoxRange;
			if (Program.LaunchParameters.TryGetValue("-announcementboxrange", out s) && int.TryParse(s, out announcementBoxRange))
			{
				Main.AnnouncementBoxRange = announcementBoxRange;
			}
		}

		public static void SetCameraLerp(float lerp, int time)
		{
			Main.cameraLerp = lerp;
			Main.cameraLerpTimer = 0;
			Main.cameraLerpTimeToggle = time;
			Main.cameraGamePadLerp = false;
		}

		public static void SetCameraGamepadLerp(float lerp)
		{
			float arg_0B_0 = Main.cameraLerp;
		}

		public static Vector2 ReverseGravitySupport(Vector2 pos, float height = 0f)
		{
			if (Main.player[Main.myPlayer].gravDir != -1f)
			{
				return pos;
			}
			pos.Y = (float)Main.screenHeight - pos.Y - height;
			return pos;
		}

		public static Microsoft.Xna.Framework.Point ReverseGravitySupport(Microsoft.Xna.Framework.Point pos, int height = 0)
		{
			if (Main.player[Main.myPlayer].gravDir != -1f)
			{
				return pos;
			}
			pos.Y = Main.screenHeight - pos.Y - height;
			return pos;
		}

		public static Microsoft.Xna.Framework.Rectangle ReverseGravitySupport(Microsoft.Xna.Framework.Rectangle box)
		{
			if (Main.player[Main.myPlayer].gravDir != -1f)
			{
				return box;
			}
			box.Y = Main.screenHeight - box.Y - box.Height;
			return box;
		}

		[DllImport("User32")]
		private static extern int RemoveMenu(IntPtr hMenu, int nPosition, int wFlags);

		[DllImport("User32")]
		private static extern IntPtr GetSystemMenu(IntPtr hWnd, bool bRevert);

		[DllImport("User32")]
		private static extern int GetMenuItemCount(IntPtr hWnd);

		[DllImport("kernel32.dll")]
		public static extern IntPtr LoadLibrary(string dllToLoad);

		public static void SetupTileMerge()
		{
			int num = 467;
			Main.tileMerge = new bool[num][];
			for (int i = 0; i < Main.tileMerge.Length; i++)
			{
				Main.tileMerge[i] = new bool[num];
			}
		}

		public static void RegisterItemAnimation(int index, DrawAnimation animation)
		{
			if (!Main.itemAnimationsRegistered.Contains(index))
			{
				Main.itemAnimationsRegistered.Add(index);
			}
			Main.itemAnimations[index] = animation;
		}

		public static void InitializeItemAnimations()
		{
			for (int i = 0; i < Main.itemAnimations.Length; i++)
			{
				Main.itemAnimations[i] = null;
			}
			Main.itemAnimationsRegistered.Clear();
			Main.RegisterItemAnimation(3581, new DrawAnimationVertical(4, 4));
			Main.RegisterItemAnimation(3580, new DrawAnimationVertical(4, 4));
			Main.RegisterItemAnimation(575, new DrawAnimationVertical(5, 4));
			Main.RegisterItemAnimation(547, new DrawAnimationVertical(5, 4));
			Main.RegisterItemAnimation(520, new DrawAnimationVertical(5, 4));
			Main.RegisterItemAnimation(548, new DrawAnimationVertical(5, 4));
			Main.RegisterItemAnimation(521, new DrawAnimationVertical(5, 4));
			Main.RegisterItemAnimation(549, new DrawAnimationVertical(5, 4));
		}

		public static void AnglerQuestSwap()
		{
			if (Main.netMode == 1)
			{
				return;
			}
			Main.anglerWhoFinishedToday.Clear();
			Main.anglerQuestFinished = false;
			bool flag = NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3 || Main.hardMode || NPC.downedSlimeKing || NPC.downedQueenBee;
			bool flag2 = true;
			while (flag2)
			{
				flag2 = false;
				Main.anglerQuest = Main.rand.Next(Main.anglerQuestItemNetIDs.Length);
				int num = Main.anglerQuestItemNetIDs[Main.anglerQuest];
				if (num == 2454 && (!Main.hardMode || WorldGen.crimson))
				{
					flag2 = true;
				}
				if (num == 2457 && WorldGen.crimson)
				{
					flag2 = true;
				}
				if (num == 2462 && !Main.hardMode)
				{
					flag2 = true;
				}
				if (num == 2463 && (!Main.hardMode || !WorldGen.crimson))
				{
					flag2 = true;
				}
				if (num == 2465 && !Main.hardMode)
				{
					flag2 = true;
				}
				if (num == 2468 && !Main.hardMode)
				{
					flag2 = true;
				}
				if (num == 2471 && !Main.hardMode)
				{
					flag2 = true;
				}
				if (num == 2473 && !Main.hardMode)
				{
					flag2 = true;
				}
				if (num == 2477 && !WorldGen.crimson)
				{
					flag2 = true;
				}
				if (num == 2480 && !Main.hardMode)
				{
					flag2 = true;
				}
				if (num == 2483 && !Main.hardMode)
				{
					flag2 = true;
				}
				if (num == 2484 && !Main.hardMode)
				{
					flag2 = true;
				}
				if (num == 2485 && WorldGen.crimson)
				{
					flag2 = true;
				}
				if ((num == 2476 || num == 2453 || num == 2473) && !flag)
				{
					flag2 = true;
				}
			}
			NetMessage.SendAnglerQuest(-1);
		}

		public static void LoadWorlds()
		{
			Main.WorldList.Clear();
			Directory.CreateDirectory(Main.WorldPath);
			string[] files = Directory.GetFiles(Main.WorldPath, "*.wld");
			int num = Math.Min(files.Length, Main.maxLoadWorld);
			for (int i = 0; i < num; i++)
			{
				WorldFileData allMetadata = WorldFile.GetAllMetadata(files[i], false);
				if (allMetadata != null)
				{
					Main.WorldList.Add(allMetadata);
				}
				else
				{
					Main.WorldList.Add(WorldFileData.FromInvalidWorld(files[i], false));
				}
			}
			if (SocialAPI.Cloud != null)
			{
				List<string> files2 = SocialAPI.Cloud.GetFiles(Regex.Escape(Main.CloudWorldPath) + "/.+\\.wld");
				foreach (string current in files2)
				{
					WorldFileData allMetadata2 = WorldFile.GetAllMetadata(current, true);
					if (allMetadata2 != null)
					{
						Main.WorldList.Add(allMetadata2);
					}
					else
					{
						Main.WorldList.Add(WorldFileData.FromInvalidWorld(current, true));
					}
				}
			}
			Main.WorldList.Sort(new Comparison<WorldFileData>(Main.WorldListSortMethod));
		}

		private static int WorldListSortMethod(WorldFileData data1, WorldFileData data2)
		{
			return data1.Name.CompareTo(data2.Name);
		}

		public static void LoadPlayers()
		{
			Main.PlayerList.Clear();
			Directory.CreateDirectory(Main.PlayerPath);
			string[] files = Directory.GetFiles(Main.PlayerPath, "*.plr");
			int num = Math.Min(Main.maxLoadPlayer, files.Length);
			for (int i = 0; i < num; i++)
			{
				PlayerFileData fileData = Player.GetFileData(files[i], false);
				if (fileData != null)
				{
					Main.PlayerList.Add(fileData);
				}
			}
			if (SocialAPI.Cloud != null)
			{
				List<string> files2 = SocialAPI.Cloud.GetFiles(Regex.Escape(Main.CloudPlayerPath) + "/.+\\.plr");
				foreach (string current in files2)
				{
					PlayerFileData fileData2 = Player.GetFileData(current, true);
					if (fileData2 != null)
					{
						Main.PlayerList.Add(fileData2);
					}
				}
			}
			Main.PlayerList.Sort(new Comparison<PlayerFileData>(Main.PlayerListSortMethod));
		}

		private static int PlayerListSortMethod(PlayerFileData data1, PlayerFileData data2)
		{
			return data1.Name.CompareTo(data2.Name);
		}

		protected void OpenRecent()
		{
			try
			{
				if (File.Exists(Main.SavePath + Path.DirectorySeparatorChar + "servers.dat"))
				{
					using (FileStream fileStream = new FileStream(Main.SavePath + Path.DirectorySeparatorChar + "servers.dat", FileMode.Open))
					{
						using (BinaryReader binaryReader = new BinaryReader(fileStream))
						{
							binaryReader.ReadInt32();
							for (int i = 0; i < 10; i++)
							{
								Main.recentWorld[i] = binaryReader.ReadString();
								Main.recentIP[i] = binaryReader.ReadString();
								Main.recentPort[i] = binaryReader.ReadInt32();
							}
						}
					}
				}
			}
			catch
			{
			}
		}

		public static void SaveRecent()
		{
			Directory.CreateDirectory(Main.SavePath);
			try
			{
				File.SetAttributes(Main.SavePath + Path.DirectorySeparatorChar + "servers.dat", FileAttributes.Normal);
			}
			catch
			{
			}
			try
			{
				using (FileStream fileStream = new FileStream(Main.SavePath + Path.DirectorySeparatorChar + "servers.dat", FileMode.Create))
				{
					using (BinaryWriter binaryWriter = new BinaryWriter(fileStream))
					{
						binaryWriter.Write(188);
						for (int i = 0; i < 10; i++)
						{
							binaryWriter.Write(Main.recentWorld[i]);
							binaryWriter.Write(Main.recentIP[i]);
							binaryWriter.Write(Main.recentPort[i]);
						}
					}
				}
			}
			catch
			{
			}
		}

		public static bool SaveSettings()
		{
			Main.Configuration.Clear();
			Main.Configuration.Put("SmartCursorToggle", Main.cSmartCursorToggle);
			Main.Configuration.Put("MapEnabled", Main.mapEnabled);
			Main.Configuration.Put("InvasionBarMode", Main.invasionProgressMode);
			Main.Configuration.Put("AutoSave", Main.autoSave);
			Main.Configuration.Put("AutoPause", Main.autoPause);
			Main.Configuration.Put("Language", Lang.lang);
			Main.Configuration.Put("PlacementPreview", Main.placementPreview);
			Main.Configuration.Put("GoreVisualsAllowed", ChildSafety.Disabled);
			Main.Configuration.Put("VolumeSound", Main.soundVolume);
			Main.Configuration.Put("VolumeAmbient", Main.ambientVolume);
			Main.Configuration.Put("VolumeMusic", Main.musicVolume);
			Main.Configuration.Put("UseExperimentalFeatures", Main.UseExperimentalFeatures);
			Main.Configuration.Put("Fullscreen", Main.graphics.IsFullScreen);
			Main.Configuration.Put("WindowMaximized", Main.screenMaximized);
			Main.Configuration.Put("WindowBorderless", Main.screenBorderless);
			Main.Configuration.Put("DisplayWidth", Main.graphics.PreferredBackBufferWidth);
			Main.Configuration.Put("DisplayHeight", Main.graphics.PreferredBackBufferHeight);
			Main.Configuration.Put("GraphicsQuality", Main.qaStyle);
			Main.Configuration.Put("BackgroundEnabled", Main.BackgroundEnabled);
			Main.Configuration.Put("FrameSkipMode", Main.FrameSkipMode);
			Main.Configuration.Put("LightingMode", Lighting.lightMode);
			Main.Configuration.Put("LightingThreads", Lighting.LightingThreads);
			Main.Configuration.Put("Parallax", Main.caveParallax);
			Main.Configuration.Put("ShowItemText", Main.showItemText);
			Main.Configuration.Put("LastLaunchedVersion", 188);
			Main.Configuration.Put("ClientUUID", Main.clientUUID);
			Main.Configuration.Put("UseSmartCursorForCommonBlocks", Player.SmartCursorSettings.SmartBlocksEnabled);
			Main.Configuration.Put("UseSmartAxeAfterSmartPickaxe", Player.SmartCursorSettings.SmartAxeAfterPickaxe);
			Main.Configuration.Put("UseSmartWallReplacement", Player.SmartCursorSettings.SmartWallReplacement);
			Main.Configuration.Put("DisableLeftShiftTrashCan", ItemSlot.Options.DisableLeftShiftTrashCan);
			Main.Configuration.Put("HighlightNewItems", ItemSlot.Options.HighlightNewItems);
			Main.Configuration.Put("HidePasswords", Main.HidePassword);
			Main.Configuration.Put("ReverseUpDownForArmorSetBonuses", Main.ReversedUpDownArmorSetBonuses);
			Main.Configuration.Put("MouseShowBuildingGrid", Main.MouseShowBuildingGrid);
			Main.Configuration.Put("AllowUnfocusedInputOnGamepad", Main.AllowUnfocusedInputOnGamepad);
			Main.Configuration.Put("LockOnPriority", LockOnHelper.UseMode);
			Main.Configuration.Put("InvisibleCursorForGamepad", Main.InvisibleCursorForGamepad);
			Main.Configuration.Put("GamepadDisableInstructionsDisplay", Main.GamepadDisableInstructionsDisplay);
			Main.Configuration.Put("SettingsUnlock_WorldEvil", Main.SettingsUnlock_WorldEvil);
			Main.Configuration.Put("SettingsEnabled_MinersWobble", Main.SettingsEnabled_MinersWobble);
			Main.Configuration.Put("UseStormEffect", Main.UseStormEffects);
			Main.Configuration.Put("UseHeatDistortion", Main.UseHeatDistortion);
			Main.Configuration.Put("WaveQuality", Main.WaveQuality);
			Main.Configuration.Put("MouseColor", new Dictionary<string, byte>
				{
					{
						"R",
						Main.mouseColor.R
					},
					{
						"G",
						Main.mouseColor.G
					},
					{
						"B",
						Main.mouseColor.B
					}
				});
			Main.Configuration.Put("MouseBorderColor", new Dictionary<string, byte>
				{
					{
						"R",
						Main.MouseBorderColor.R
					},
					{
						"G",
						Main.MouseBorderColor.G
					},
					{
						"B",
						Main.MouseBorderColor.B
					},
					{
						"A",
						Main.MouseBorderColor.A
					}
				});
			Main.Configuration.Put("QuickLaunch", Main.SkipAssemblyLoad);
			bool flag = Main.Configuration.Save(true);
			return flag && PlayerInput.Save();
		}

		protected void CheckBunny()
		{
			try
			{
				RegistryKey registryKey = Registry.CurrentUser;
				registryKey = registryKey.CreateSubKey("Software\\Terraria");
				if (registryKey != null && registryKey.GetValue("Bunny") != null && registryKey.GetValue("Bunny").ToString() == "1")
				{
					Main.cEd = true;
				}
			}
			catch
			{
				Main.cEd = false;
			}
		}

		protected void OpenSettings()
		{
			if (File.Exists(Main.SavePath + Path.DirectorySeparatorChar + "config.dat"))
			{
				this.OpenLegacySettings();
				if (Main.SaveSettings())
				{
					File.Delete(Main.SavePath + Path.DirectorySeparatorChar + "config.dat");
				}
				Lighting.LightingThreads = 0;
				return;
			}
			Main.Configuration.Load();
			Main.Configuration.Get<bool>("SmartCursorToggle", ref Main.cSmartCursorToggle);
			Main.Configuration.Get<bool>("MapEnabled", ref Main.mapEnabled);
			Main.Configuration.Get<int>("InvasionBarMode", ref Main.invasionProgressMode);
			Main.Configuration.Get<bool>("AutoSave", ref Main.autoSave);
			Main.Configuration.Get<bool>("AutoPause", ref Main.autoPause);
			Main.Configuration.Get<int>("Language", ref Lang.lang);
			Main.Configuration.Get<bool>("PlacementPreview", ref Main.placementPreview);
			Main.Configuration.Get<bool>("GoreVisualsAllowed", ref ChildSafety.Disabled);
			Main.Configuration.Get<float>("VolumeSound", ref Main.soundVolume);
			Main.Configuration.Get<float>("VolumeAmbient", ref Main.ambientVolume);
			Main.Configuration.Get<float>("VolumeMusic", ref Main.musicVolume);
			Main.Configuration.Get<string>("KeyFavoriteModifier", ref Main.cFavoriteKey);
			Microsoft.Xna.Framework.Input.Keys favoriteKey;
			if (Enum.TryParse<Microsoft.Xna.Framework.Input.Keys>(Main.cFavoriteKey, out favoriteKey))
			{
				Main.FavoriteKey = favoriteKey;
			}
			Main.Configuration.Get<bool>("WindowMaximized", ref Main.screenMaximized);
			Main.Configuration.Get<bool>("WindowBorderless", ref Main.screenBorderless);
			Main.PendingBorderlessState = Main.screenBorderless;
			Main.Configuration.Get<int>("GraphicsQuality", ref Main.qaStyle);
			Main.Configuration.Get<bool>("BackgroundEnabled", ref Main.BackgroundEnabled);
			if (Main.Configuration.GetAllKeys().Contains("FrameSkip"))
			{
				bool flag = false;
				Main.Configuration.Get<bool>("FrameSkip", ref flag);
				Main.terrariasFixedTiming = !flag;
				if (Main.terrariasFixedTiming)
				{
					Main.FrameSkipMode = 2;
				}
				else
				{
					Main.FrameSkipMode = 1;
				}
			}
			Main.Configuration.Get<int>("FrameSkipMode", ref Main.FrameSkipMode);
			if (Main.FrameSkipMode < 0)
			{
				Main.FrameSkipMode = 0;
			}
			if (Main.FrameSkipMode > 2)
			{
				Main.FrameSkipMode = 2;
			}
			Main.Configuration.Get<int>("LightingMode", ref Lighting.lightMode);
			Main.Configuration.Get<int>("LightingThreads", ref Lighting.LightingThreads);
			Main.Configuration.Get<float>("Parallax", ref Main.caveParallax);
			Main.bgScroll = (int)((1f - Main.caveParallax) * 500f);
			Main.Configuration.Get<bool>("ShowItemText", ref Main.showItemText);
			Main.Configuration.Get<string>("ClientUUID", ref Main.clientUUID);
			Main.Configuration.Get<bool>("UseSmartCursorForCommonBlocks", ref Player.SmartCursorSettings.SmartBlocksEnabled);
			Main.Configuration.Get<bool>("UseSmartWallReplacement", ref Player.SmartCursorSettings.SmartWallReplacement);
			Main.Configuration.Get<bool>("UseSmartAxeAfterSmartPickaxe", ref Player.SmartCursorSettings.SmartAxeAfterPickaxe);
			Main.Configuration.Get<bool>("DisableLeftShiftTrashCan", ref ItemSlot.Options.DisableLeftShiftTrashCan);
			Main.Configuration.Get<bool>("HidePasswords", ref Main.HidePassword);
			Main.Configuration.Get<bool>("HighlightNewItems", ref ItemSlot.Options.HighlightNewItems);
			Main.Configuration.Get<bool>("ReverseUpDownForArmorSetBonuses", ref Main.ReversedUpDownArmorSetBonuses);
			Main.Configuration.Get<bool>("MouseShowBuildingGrid", ref Main.MouseShowBuildingGrid);
			Main.Configuration.Get<bool>("AllowUnfocusedInputOnGamepad", ref Main.AllowUnfocusedInputOnGamepad);
			Main.Configuration.Get<bool>("GamepadDisableInstructionsDisplay", ref Main.GamepadDisableInstructionsDisplay);
			Main.Configuration.Get<bool>("UseStormEffect", ref Main.UseStormEffects);
			Main.Configuration.Get<bool>("UseHeatDistortion", ref Main.UseHeatDistortion);
			Main.Configuration.Get<int>("WaveQuality", ref Main.WaveQuality);
			if (Main.WaveQuality > 3)
			{
				Main.WaveQuality = 3;
			}
			if (Main.WaveQuality < 0)
			{
				Main.WaveQuality = 0;
			}
			bool fullscreen = false;
			int preferredBackBufferWidth = Main.graphics.PreferredBackBufferWidth;
			int preferredBackBufferHeight = Main.graphics.PreferredBackBufferHeight;
			Main.Configuration.Get<bool>("Fullscreen", ref fullscreen);
			Main.Configuration.Get<int>("DisplayWidth", ref preferredBackBufferWidth);
			Main.Configuration.Get<int>("DisplayHeight", ref preferredBackBufferHeight);
			Dictionary<string, byte> dictionary = new Dictionary<string, byte>();
			Main.Configuration.Get<Dictionary<string, byte>>("MouseColor", ref dictionary);
			byte b;
			if (dictionary.TryGetValue("R", out b))
			{
				Main.mouseColor.R = b;
			}
			if (dictionary.TryGetValue("G", out b))
			{
				Main.mouseColor.G = b;
			}
			if (dictionary.TryGetValue("B", out b))
			{
				Main.mouseColor.B = b;
			}
			dictionary.Clear();
			Main.Configuration.Get<Dictionary<string, byte>>("MouseBorderColor", ref dictionary);
			if (dictionary.TryGetValue("R", out b))
			{
				Main.MouseBorderColor.R = b;
			}
			if (dictionary.TryGetValue("G", out b))
			{
				Main.MouseBorderColor.G = b;
			}
			if (dictionary.TryGetValue("B", out b))
			{
				Main.MouseBorderColor.B = b;
			}
			if (dictionary.TryGetValue("A", out b))
			{
				Main.MouseBorderColor.A = b;
			}
			Main.Configuration.Get<bool>("QuickLaunch", ref Main.SkipAssemblyLoad);
			int num = -1;
			Main.Configuration.Get<int>("LockOnPriority", ref num);
			if (num < 0)
			{
				num = 0;
			}
			if (num > 2)
			{
				num = 2;
			}
			LockOnHelper.UseMode = (LockOnHelper.LockOnMode)num;
			if (LockOnHelper.UseMode == LockOnHelper.LockOnMode.FocusTarget)
			{
				LockOnHelper.UseMode = LockOnHelper.LockOnMode.ThreeDS;
			}
			Main.Configuration.Get<bool>("InvisibleCursorForGamepad", ref Main.InvisibleCursorForGamepad);
#if CLIENT && WINDOWS
			Form form = (Form)Control.FromHandle(Main.instance.Window.Handle);
			if (Main.screenBorderless)
			{
				form.Location = new System.Drawing.Point(0, 0);
				form.FormBorderStyle = FormBorderStyle.None;
			}
			else if (Main.screenMaximized)
			{
				form.WindowState = FormWindowState.Maximized;
				form.FormBorderStyle = FormBorderStyle.Sizable;
			}
			else
			{
				form.FormBorderStyle = FormBorderStyle.Sizable;
			}
#endif
			Main.SetDisplayMode(preferredBackBufferWidth, preferredBackBufferHeight, fullscreen);
			Main.Configuration.Get<bool>("SettingsUnlock_WorldEvil", ref Main.SettingsUnlock_WorldEvil);
			Main.Configuration.Get<bool>("SettingsEnabled_MinersWobble", ref Main.SettingsEnabled_MinersWobble);
			int num2 = 0;
			Main.Configuration.Get<int>("LastLaunchedVersion", ref num2);
			if (num2 <= 146)
			{
				Lighting.LightingThreads = 0;
			}
			if (num2 <= 147)
			{
				Main.terrariasFixedTiming = !Main.terrariasFixedTiming;
			}
			if (num2 <= 162)
			{
				bool flag2 = false;
				uint packedValue = 0u;
				Main.Configuration.Get<bool>("ThickMouseEdges", ref flag2);
				if (flag2)
				{
					Main.Configuration.Get<uint>("ThickMouseEdgesPackedColor", ref packedValue);
					Main.MouseBorderColor.PackedValue = packedValue;
					Main.mouseColor.R = Main.Configuration.Get<byte>("MouseColorR", Main.mouseColor.R);
					Main.mouseColor.G = Main.Configuration.Get<byte>("MouseColorG", Main.mouseColor.G);
					Main.mouseColor.B = Main.Configuration.Get<byte>("MouseColorB", Main.mouseColor.B);
				}
			}
			if (num2 <= 162)
			{
				Main.Configuration.Get<string>("KeyUp", ref Main.cUp);
				Main.Configuration.Get<string>("KeyDown", ref Main.cDown);
				Main.Configuration.Get<string>("KeyLeft", ref Main.cLeft);
				Main.Configuration.Get<string>("KeyRight", ref Main.cRight);
				Main.Configuration.Get<string>("KeyJump", ref Main.cJump);
				Main.Configuration.Get<string>("KeyThrowItem", ref Main.cThrowItem);
				Main.Configuration.Get<string>("KeyInventory", ref Main.cInv);
				Main.Configuration.Get<string>("KeyQuickHeal", ref Main.cHeal);
				Main.Configuration.Get<string>("KeyQuickMana", ref Main.cMana);
				Main.Configuration.Get<string>("KeyQuickBuff", ref Main.cBuff);
				Main.Configuration.Get<string>("KeyUseHook", ref Main.cHook);
				Main.Configuration.Get<string>("KeyAutoSelect", ref Main.cTorch);
				Main.Configuration.Get<string>("KeySmartCursor", ref Main.cSmart);
				Main.Configuration.Get<string>("KeyMount", ref Main.cMount);
				Main.Configuration.Get<string>("KeyMapStyle", ref Main.cMapStyle);
				Main.Configuration.Get<string>("KeyFullscreenMap", ref Main.cMapFull);
				Main.Configuration.Get<string>("KeyMapZoomIn", ref Main.cMapZoomIn);
				Main.Configuration.Get<string>("KeyMapZoomOut", ref Main.cMapZoomOut);
				Main.Configuration.Get<string>("KeyMapAlphaUp", ref Main.cMapAlphaUp);
				Main.Configuration.Get<string>("KeyMapAlphaDown", ref Main.cMapAlphaDown);
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Up"] = new List<string>
				{
					Main.cUp
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Down"] = new List<string>
				{
					Main.cDown
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Left"] = new List<string>
				{
					Main.cLeft
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Right"] = new List<string>
				{
					Main.cRight
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Jump"] = new List<string>
				{
					Main.cJump
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Throw"] = new List<string>
				{
					Main.cThrowItem
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Inventory"] = new List<string>
				{
					Main.cInv
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["QuickHeal"] = new List<string>
				{
					Main.cHeal
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["QuickMana"] = new List<string>
				{
					Main.cMana
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["QuickBuff"] = new List<string>
				{
					Main.cBuff
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Grapple"] = new List<string>
				{
					Main.cHook
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["SmartSelect"] = new List<string>
				{
					Main.cTorch
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["SmartCursor"] = new List<string>
				{
					Main.cSmart
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["QuickMount"] = new List<string>
				{
					Main.cMount
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["MapStyle"] = new List<string>
				{
					Main.cMapStyle
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["MapFull"] = new List<string>
				{
					Main.cMapFull
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["MapZoomIn"] = new List<string>
				{
					Main.cMapZoomIn
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["MapZoomOut"] = new List<string>
				{
					Main.cMapZoomOut
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["MapAlphaUp"] = new List<string>
				{
					Main.cMapAlphaUp
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["MapAlphaDown"] = new List<string>
				{
					Main.cMapAlphaDown
				};
			}
			PlayerInput.Load();
			if (num2 < 165)
			{
				try
				{
					PlayerInput.ManageVersion_1_3();
				}
				catch (Exception)
				{
				}
			}
			if (num2 != 188)
			{
				Main.SaveSettings();
			}
		}

		protected void OpenLegacySettings()
		{
			try
			{
				if (File.Exists(Main.SavePath + Path.DirectorySeparatorChar + "config.dat"))
				{
					using (FileStream fileStream = new FileStream(Main.SavePath + Path.DirectorySeparatorChar + "config.dat", FileMode.Open))
					{
						using (BinaryReader binaryReader = new BinaryReader(fileStream))
						{
							int num = binaryReader.ReadInt32();
							if (num >= 68)
							{
								if (num >= 67)
								{
									Main.clientUUID = binaryReader.ReadString();
								}
								bool flag = binaryReader.ReadBoolean();
								Main.mouseColor.R = binaryReader.ReadByte();
								Main.mouseColor.G = binaryReader.ReadByte();
								Main.mouseColor.B = binaryReader.ReadByte();
								Main.soundVolume = binaryReader.ReadSingle();
								if (num >= 90)
								{
									Main.ambientVolume = binaryReader.ReadSingle();
								}
								Main.musicVolume = binaryReader.ReadSingle();
								Main.cUp = binaryReader.ReadString();
								Main.cDown = binaryReader.ReadString();
								Main.cLeft = binaryReader.ReadString();
								Main.cRight = binaryReader.ReadString();
								Main.cJump = binaryReader.ReadString();
								Main.cThrowItem = binaryReader.ReadString();
								if (num >= 1)
								{
									Main.cInv = binaryReader.ReadString();
								}
								if (num >= 12)
								{
									Main.cHeal = binaryReader.ReadString();
									Main.cMana = binaryReader.ReadString();
									Main.cBuff = binaryReader.ReadString();
								}
								if (num >= 13)
								{
									Main.cHook = binaryReader.ReadString();
								}
								Main.caveParallax = binaryReader.ReadSingle();
								if (num >= 2)
								{
									Main.terrariasFixedTiming = binaryReader.ReadBoolean();
								}
								if (num >= 91 && binaryReader.ReadBoolean())
								{
#if CLIENT && WINDOWS
									Form form = (Form)Control.FromHandle(base.Window.Handle);
									form.WindowState = FormWindowState.Maximized;
#endif
								}
								if (num >= 4)
								{
									int width = binaryReader.ReadInt32();
									int height = binaryReader.ReadInt32();
									Main.SetDisplayMode(width, height, flag);
								}
								if (num >= 8)
								{
									Main.autoSave = binaryReader.ReadBoolean();
								}
								if (num >= 9)
								{
									Main.autoPause = binaryReader.ReadBoolean();
								}
								if (num >= 19)
								{
									Main.showItemText = binaryReader.ReadBoolean();
								}
								if (num >= 30)
								{
									Main.cTorch = binaryReader.ReadString();
									Lighting.lightMode = (int)binaryReader.ReadByte();
									Main.qaStyle = (int)binaryReader.ReadByte();
								}
								if (num >= 37)
								{
									Main.BackgroundEnabled = binaryReader.ReadBoolean();
								}
								if (num >= 39)
								{
									Lang.lang = (int)binaryReader.ReadByte();
								}
								if (num >= 46)
								{
									Main.mapEnabled = binaryReader.ReadBoolean();
									Main.cMapStyle = binaryReader.ReadString();
									Main.cMapFull = binaryReader.ReadString();
									Main.cMapZoomIn = binaryReader.ReadString();
									Main.cMapZoomOut = binaryReader.ReadString();
									Main.cMapAlphaUp = binaryReader.ReadString();
									Main.cMapAlphaDown = binaryReader.ReadString();
								}
								if (num >= 89)
								{
									Lighting.LightingThreads = binaryReader.ReadInt32();
									if (Lighting.LightingThreads >= Environment.ProcessorCount)
									{
										Lighting.LightingThreads = Environment.ProcessorCount - 1;
									}
								}
								if (num >= 100)
								{
									Main.cSmart = binaryReader.ReadString();
									Main.cSmartCursorToggle = binaryReader.ReadBoolean();
								}
								if (num >= 107)
								{
									Main.invasionProgressMode = (int)binaryReader.ReadByte();
								}
								if (num >= 111)
								{
									Main.placementPreview = binaryReader.ReadBoolean();
								}
								if (num >= 111)
								{
									Main.placementPreview = binaryReader.ReadBoolean();
								}
								Main.SetFullScreen(flag);
							}
							binaryReader.Close();
						}
					}
				}
			}
			catch
			{
			}
		}

		private static void ErasePlayer(int i)
		{
			try
			{
				FileUtilities.Delete(Main.PlayerList[i].Path, Main.PlayerList[i].IsCloudSave);
				FileUtilities.Delete(Main.PlayerList[i].Path + ".bak", Main.PlayerList[i].IsCloudSave);
			}
			catch
			{
			}
			try
			{
				string path = Main.PlayerList[i].Path.Substring(0, Main.PlayerList[i].Path.Length - 4);
				if (Directory.Exists(path))
				{
					Directory.Delete(path, true);
				}
				Main.LoadPlayers();
			}
			catch
			{
			}
		}

		private static void EraseWorld(int i)
		{
			try
			{
				if (!Main.WorldList[i].IsCloudSave)
				{
#if WINDOWS
					FileOperationAPIWrapper.MoveToRecycleBin(Main.WorldList[i].Path);
					FileOperationAPIWrapper.MoveToRecycleBin(Main.WorldList[i].Path + ".bak");
#else
					File.Delete(Main.WorldList[i].Path);
					File.Delete(Main.WorldList[i].Path + ".bak");
#endif
				}
				else if (SocialAPI.Cloud != null)
				{
					SocialAPI.Cloud.Delete(Main.WorldList[i].Path);
				}
				Main.LoadWorlds();
			}
			catch
			{
			}
		}

		public static string GetPlayerPathFromName(string playerName, bool cloudSave)
		{
			string text = "";
			for (int i = 0; i < playerName.Length; i++)
			{
				string text2 = playerName.Substring(i, 1);
				string str;
				if (text2 == "a" || text2 == "b" || text2 == "c" || text2 == "d" || text2 == "e" || text2 == "f" || text2 == "g" || text2 == "h" || text2 == "i" || text2 == "j" || text2 == "k" || text2 == "l" || text2 == "m" || text2 == "n" || text2 == "o" || text2 == "p" || text2 == "q" || text2 == "r" || text2 == "s" || text2 == "t" || text2 == "u" || text2 == "v" || text2 == "w" || text2 == "x" || text2 == "y" || text2 == "z" || text2 == "A" || text2 == "B" || text2 == "C" || text2 == "D" || text2 == "E" || text2 == "F" || text2 == "G" || text2 == "H" || text2 == "I" || text2 == "J" || text2 == "K" || text2 == "L" || text2 == "M" || text2 == "N" || text2 == "O" || text2 == "P" || text2 == "Q" || text2 == "R" || text2 == "S" || text2 == "T" || text2 == "U" || text2 == "V" || text2 == "W" || text2 == "X" || text2 == "Y" || text2 == "Z" || text2 == "1" || text2 == "2" || text2 == "3" || text2 == "4" || text2 == "5" || text2 == "6" || text2 == "7" || text2 == "8" || text2 == "9" || text2 == "0")
				{
					str = text2;
				}
				else if (text2 == " ")
				{
					str = "_";
				}
				else
				{
					str = "-";
				}
				text += str;
			}
			string text3 = cloudSave ? Main.CloudPlayerPath : Main.PlayerPath;
			string path = string.Concat(new object[]
			{
				text3,
				Path.DirectorySeparatorChar,
				text,
				".plr"
			});
			string fullPath = FileUtilities.GetFullPath(path, cloudSave);
			if (fullPath.StartsWith("\\\\.\\", StringComparison.Ordinal))
			{
				text += "_";
			}
			if (FileUtilities.Exists(string.Concat(new object[]
			{
				text3,
				Path.DirectorySeparatorChar,
				text,
				".plr"
			}), cloudSave))
			{
				int num = 2;
				while (FileUtilities.Exists(string.Concat(new object[]
				{
					text3,
					Path.DirectorySeparatorChar,
					text,
					num,
					".plr"
				}), cloudSave))
				{
					num++;
				}
				text += num;
			}
			return string.Concat(new object[]
			{
				text3,
				Path.DirectorySeparatorChar,
				text,
				".plr"
			});
		}

		public static string GetWorldPathFromName(string worldName, bool cloudSave)
		{
			string text = "";
			for (int i = 0; i < worldName.Length; i++)
			{
				string text2 = worldName.Substring(i, 1);
				string str;
				if (text2 == "a" || text2 == "b" || text2 == "c" || text2 == "d" || text2 == "e" || text2 == "f" || text2 == "g" || text2 == "h" || text2 == "i" || text2 == "j" || text2 == "k" || text2 == "l" || text2 == "m" || text2 == "n" || text2 == "o" || text2 == "p" || text2 == "q" || text2 == "r" || text2 == "s" || text2 == "t" || text2 == "u" || text2 == "v" || text2 == "w" || text2 == "x" || text2 == "y" || text2 == "z" || text2 == "A" || text2 == "B" || text2 == "C" || text2 == "D" || text2 == "E" || text2 == "F" || text2 == "G" || text2 == "H" || text2 == "I" || text2 == "J" || text2 == "K" || text2 == "L" || text2 == "M" || text2 == "N" || text2 == "O" || text2 == "P" || text2 == "Q" || text2 == "R" || text2 == "S" || text2 == "T" || text2 == "U" || text2 == "V" || text2 == "W" || text2 == "X" || text2 == "Y" || text2 == "Z" || text2 == "1" || text2 == "2" || text2 == "3" || text2 == "4" || text2 == "5" || text2 == "6" || text2 == "7" || text2 == "8" || text2 == "9" || text2 == "0")
				{
					str = text2;
				}
				else if (text2 == " ")
				{
					str = "_";
				}
				else
				{
					str = "-";
				}
				text += str;
			}
			string text3 = cloudSave ? Main.CloudWorldPath : Main.WorldPath;
			string path = string.Concat(new object[]
			{
				text3,
				Path.DirectorySeparatorChar,
				text,
				".wld"
			});
			string fullPath = FileUtilities.GetFullPath(path, cloudSave);
			if (fullPath.StartsWith("\\\\.\\", StringComparison.Ordinal))
			{
				text += "_";
			}
			if (FileUtilities.Exists(string.Concat(new object[]
			{
				text3,
				Path.DirectorySeparatorChar,
				text,
				".wld"
			}), cloudSave))
			{
				int num = 2;
				while (FileUtilities.Exists(string.Concat(new object[]
				{
					text3,
					Path.DirectorySeparatorChar,
					text,
					num,
					".wld"
				}), cloudSave))
				{
					num++;
				}
				text += num;
			}
			return string.Concat(new object[]
			{
				text3,
				Path.DirectorySeparatorChar,
				text,
				".wld"
			});
		}

		public void autoCreate(string worldSize)
		{
			if (worldSize == "0")
			{
				Main.autoGen = false;
				return;
			}
			if (worldSize == "1")
			{
				Main.maxTilesX = 4200;
				Main.maxTilesY = 1200;
				Main.autoGen = true;
				return;
			}
			if (worldSize == "2")
			{
				Main.maxTilesX = 6300;
				Main.maxTilesY = 1800;
				Main.autoGen = true;
				return;
			}
			if (worldSize == "3")
			{
				Main.maxTilesX = 8400;
				Main.maxTilesY = 2400;
				Main.autoGen = true;
			}
		}

		public void NewMOTD(string newMOTD)
		{
			Main.motd = newMOTD;
		}

		public void LoadDedConfig(string configPath)
		{
			if (File.Exists(configPath))
			{
				using (StreamReader streamReader = new StreamReader(configPath))
				{
					string text;
					while ((text = streamReader.ReadLine()) != null)
					{
						try
						{
							if (text.Length > 6 && text.Substring(0, 6).ToLower() == "world=")
							{
								string file = text.Substring(6);
								Main.ActiveWorldFileData = WorldFile.GetAllMetadata(file, false);
							}
							if (text.Length > 5 && text.Substring(0, 5).ToLower() == "port=")
							{
								string value = text.Substring(5);
								try
								{
									int listenPort = Convert.ToInt32(value);
									Netplay.ListenPort = listenPort;
								}
								catch
								{
								}
							}
							if (text.Length > 11 && text.Substring(0, 11).ToLower() == "maxplayers=")
							{
								string value2 = text.Substring(11);
								try
								{
									int num = Convert.ToInt32(value2);
									Main.maxNetPlayers = num;
								}
								catch
								{
								}
							}
							if (text.Length > 11 && text.Substring(0, 9).ToLower() == "priority=" && !Program.LaunchParameters.ContainsKey("-forcepriority"))
							{
								string value3 = text.Substring(9);
								try
								{
									int num2 = Convert.ToInt32(value3);
									if (num2 >= 0 && num2 <= 5)
									{
										Process currentProcess = Process.GetCurrentProcess();
										if (num2 == 0)
										{
											currentProcess.PriorityClass = ProcessPriorityClass.RealTime;
										}
										else if (num2 == 1)
										{
											currentProcess.PriorityClass = ProcessPriorityClass.High;
										}
										else if (num2 == 2)
										{
											currentProcess.PriorityClass = ProcessPriorityClass.AboveNormal;
										}
										else if (num2 == 3)
										{
											currentProcess.PriorityClass = ProcessPriorityClass.Normal;
										}
										else if (num2 == 4)
										{
											currentProcess.PriorityClass = ProcessPriorityClass.BelowNormal;
										}
										else if (num2 == 5)
										{
											currentProcess.PriorityClass = ProcessPriorityClass.Idle;
										}
									}
								}
								catch
								{
								}
							}
							if (text.Length > 9 && text.Substring(0, 9).ToLower() == "password=")
							{
								string serverPassword = text.Substring(9);
								Netplay.ServerPassword = serverPassword;
							}
							if (text.Length > 5 && text.Substring(0, 5).ToLower() == "motd=")
							{
								string text2 = text.Substring(5);
								Main.motd = text2;
							}
							if (text.Length > 5 && text.Substring(0, 5).ToLower() == "lang=")
							{
								string value4 = text.Substring(5);
								Lang.lang = Convert.ToInt32(value4);
							}
							if (text.Length >= 10 && text.Substring(0, 10).ToLower() == "worldpath=")
							{
								string worldPath = text.Substring(10);
								Main.WorldPath = worldPath;
							}
							if (text.Length >= 10 && text.Substring(0, 10).ToLower() == "worldname=")
							{
								string text3 = text.Substring(10);
								Main.worldName = text3;
							}
							if (text.Length > 8 && text.Substring(0, 8).ToLower() == "banlist=")
							{
								string banFilePath = text.Substring(8);
								Netplay.BanFilePath = banFilePath;
							}
							if (text.Length > 11 && text.Substring(0, 11).ToLower() == "difficulty=")
							{
								string a = text.Substring(11);
								if (a == "0")
								{
									Main.expertMode = false;
								}
								else if (a == "1")
								{
									Main.expertMode = true;
								}
							}
							if (text.Length > 11 && text.Substring(0, 11).ToLower() == "autocreate=")
							{
								string a2 = text.Substring(11);
								if (a2 == "0")
								{
									Main.autoGen = false;
								}
								else if (a2 == "1")
								{
									Main.maxTilesX = 4200;
									Main.maxTilesY = 1200;
									Main.autoGen = true;
								}
								else if (a2 == "2")
								{
									Main.maxTilesX = 6300;
									Main.maxTilesY = 1800;
									Main.autoGen = true;
								}
								else if (a2 == "3")
								{
									Main.maxTilesX = 8400;
									Main.maxTilesY = 2400;
									Main.autoGen = true;
								}
							}
							if (text.Length > 7 && text.Substring(0, 7).ToLower() == "secure=")
							{
								string a3 = text.Substring(7);
								if (a3 == "1")
								{
									Netplay.spamCheck = true;
								}
							}
							if (text.Length > 5 && text.Substring(0, 5).ToLower() == "upnp=")
							{
								string a4 = text.Substring(5);
								if (a4 != "1")
								{
									Netplay.UseUPNP = false;
								}
							}
							if (text.Length > 10 && text.Substring(0, 10).ToLower() == "npcstream=")
							{
								string value5 = text.Substring(10);
								try
								{
									int num3 = Convert.ToInt32(value5);
									Main.npcStreamSpeed = num3;
								}
								catch
								{
								}
							}
						}
						catch
						{
						}
					}
				}
			}
		}

		public void SetNetPlayers(int mPlayers)
		{
			Main.maxNetPlayers = mPlayers;
		}

		public void SetWorld(string world, bool cloud)
		{
			Main.ActiveWorldFileData = WorldFile.GetAllMetadata(world, cloud);
		}

		public void SetWorldName(string world)
		{
			Main.worldName = world;
		}

		public void EnableAutoShutdown()
		{
			Main.autoShutdown = true;
		}

		[DllImport("user32.dll")]
		public static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

		[DllImport("user32.dll")]
		private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

		public void AutoPass()
		{
			Main.autoPass = true;
		}

		public void AutoJoin(string IP)
		{
			Main.defaultIP = IP;
			Main.getIP = IP;
			Netplay.SetRemoteIP(Main.defaultIP);
			Main.autoJoin = true;
		}

		public void AutoHost()
		{
			Main.menuMultiplayer = true;
			Main.menuServer = true;
			Main.menuMode = 1;
		}

		public void loadLib(string path)
		{
			Main.libPath = path;
			Main.LoadLibrary(Main.libPath);
		}

		public void DedServ()
		{
			Main.rand = new UnifiedRandom();
			if (Main.autoShutdown)
			{
				string text = "terraria" + Main.rand.Next(2147483647);
				Console.Title = text;
#if WINDOWS
				IntPtr intPtr = Main.FindWindow(null, text);
				if (intPtr != IntPtr.Zero)
				{
					Main.ShowWindow(intPtr, 0);
				}
#endif
			}
			else
			{
				Console.Title = "Terraria Server " + Main.versionNumber2;
			}
			Main.dedServ = true;
			Main.showSplash = false;
			this.Initialize();
			if (Lang.lang > 1)
			{
				Lang.setLang(true);
			}
			Lang.setLang(false);
			while (Main.worldPathName == null || Main.worldPathName == "")
			{
				bool flag = true;
				while (flag)
				{
					Main.LoadWorlds();
					Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2));
					Console.WriteLine("");
					for (int i = 0; i < Main.WorldList.Count; i++)
					{
						Console.WriteLine(string.Concat(new object[]
						{
							i + 1,
							'\t',
							'\t',
							Main.WorldList[i].Name
						}));
					}
					string text2 = Language.GetTextValue("CLI.NewWorld_Command");
					string text3 = Language.GetTextValue("CLI.DeleteWorld_Example");
					int num = (Math.Max(Main.newWorldName.Length, text3.Length) + 1) / 8;
					text2 = text2 + new string('\t', num - text2.Length / 8) + Language.GetTextValue("CLI.NewWorld_Description");
					text3 = text3 + new string('\t', num - text3.Length / 8) + Language.GetTextValue("CLI.DeleteWorld_Description");
					Console.WriteLine(text2);
					Console.WriteLine(text3);
					Console.WriteLine("");
					Console.Write(Language.GetTextValue("CLI.ChooseWorld"));
					string text4 = Console.ReadLine();
					if (text4 == null)
					{
						text4 = "";
					}
					try
					{
						Console.Clear();
					}
					catch
					{
					}
					if (text4.StartsWith(Language.GetTextValue("CLI.DeleteWorld_Command") + " "))
					{
						try
						{
							int length = Language.GetTextValue("CLI.DeleteWorld_Command").Length;
							int num2 = Convert.ToInt32(text4.Substring(length + 1)) - 1;
							if (num2 < Main.WorldList.Count)
							{
								Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2));
								Console.WriteLine("");
								Console.WriteLine(Language.GetTextValue("CLI.DeleteConfirmation", Main.WorldList[num2].Name));
								Console.Write(string.Format("({0}/{1}): ", Language.GetTextValue("CLI.ShortYes"), Language.GetTextValue("CLI.ShortNo")));
								string text5 = Console.ReadLine();
								if (text5.ToLower() == Language.GetTextValue("CLI.ShortYes").ToLower())
								{
									Main.EraseWorld(num2);
								}
							}
						}
						catch
						{
						}
						try
						{
							Console.Clear();
							continue;
						}
						catch
						{
							continue;
						}
					}
					if (text4 == "n" || text4 == "N")
					{
						bool flag2 = true;
						while (flag2)
						{
							Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2));
							Console.WriteLine("");
							Console.WriteLine("1\t" + Language.GetTextValue("UI.WorldSizeSmall"));
							Console.WriteLine("2\t" + Language.GetTextValue("UI.WorldSizeMedium"));
							Console.WriteLine("3\t" + Language.GetTextValue("UI.WorldSizeLarge"));
							Console.WriteLine("");
							Console.Write(Language.GetTextValue("CLI.ChooseSize"));
							string value = Console.ReadLine();
							try
							{
								int num3 = Convert.ToInt32(value);
								if (num3 == 1)
								{
									Main.maxTilesX = 4200;
									Main.maxTilesY = 1200;
									flag2 = false;
								}
								else if (num3 == 2)
								{
									Main.maxTilesX = 6400;
									Main.maxTilesY = 1800;
									flag2 = false;
								}
								else if (num3 == 3)
								{
									Main.maxTilesX = 8400;
									Main.maxTilesY = 2400;
									flag2 = false;
								}
							}
							catch
							{
							}
							try
							{
								Console.Clear();
							}
							catch
							{
							}
						}
						flag2 = true;
						while (flag2)
						{
							Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2));
							Console.WriteLine("");
							Console.WriteLine("1\t" + Language.GetTextValue("UI.Normal"));
							Console.WriteLine("2\t" + Language.GetTextValue("UI.Expert"));
							Console.WriteLine("");
							Console.Write(Language.GetTextValue("CLI.ChooseDifficulty"));
							string value = Console.ReadLine();
							try
							{
								int num4 = Convert.ToInt32(value);
								if (num4 == 1)
								{
									Main.expertMode = false;
									flag2 = false;
								}
								else if (num4 == 2)
								{
									Main.expertMode = true;
									flag2 = false;
								}
							}
							catch
							{
							}
							try
							{
								Console.Clear();
							}
							catch
							{
							}
						}
						if (Main.SettingsUnlock_WorldEvil)
						{
							flag2 = true;
							while (flag2)
							{
								Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2));
								Console.WriteLine("");
								Console.WriteLine("1\t" + Language.GetTextValue("CLI.Random"));
								Console.WriteLine("2\t" + Language.GetTextValue("CLI.Corrupt"));
								Console.WriteLine("3\t" + Language.GetTextValue("CLI.Crimson"));
								Console.WriteLine("");
								Console.Write(Language.GetTextValue("CLI.ChooseEvil"));
								string value = Console.ReadLine();
								try
								{
									int num5 = Convert.ToInt32(value);
									if (num5 == 1)
									{
										WorldGen.WorldGenParam_Evil = -1;
										flag2 = false;
									}
									else if (num5 == 2)
									{
										WorldGen.WorldGenParam_Evil = 0;
										flag2 = false;
									}
									else if (num5 == 3)
									{
										WorldGen.WorldGenParam_Evil = 1;
										flag2 = false;
									}
								}
								catch
								{
								}
								try
								{
									Console.Clear();
								}
								catch
								{
								}
							}
						}
						flag2 = true;
						while (flag2)
						{
							Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2));
							Console.WriteLine("");
							Console.Write(Language.GetTextValue("CLI.EnterWorldName"));
							Main.newWorldName = Console.ReadLine();
							if (Main.newWorldName != "" && Main.newWorldName != " " && Main.newWorldName != null)
							{
								flag2 = false;
							}
							try
							{
								Console.Clear();
							}
							catch
							{
							}
						}
						string text6 = "";
						flag2 = Main.UseSeedUI;
						while (flag2)
						{
							Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2));
							Console.WriteLine("");
							Console.Write(Language.GetTextValue("CLI.EnterSeed"));
							text6 = Console.ReadLine();
							if (text6 != null)
							{
								flag2 = false;
							}
							else
							{
								text6 = "";
							}
							try
							{
								Console.Clear();
							}
							catch
							{
							}
						}
						Main.worldName = Main.newWorldName;
						Main.ActiveWorldFileData = WorldFile.CreateMetadata(Main.worldName, SocialAPI.Cloud != null && SocialAPI.Cloud.EnabledByDefault, Main.expertMode);
						text6 = text6.Trim();
						if (text6.Length == 0)
						{
							Main.ActiveWorldFileData.SetSeedToRandom();
						}
						else
						{
							Main.ActiveWorldFileData.SetSeed(text6);
						}
						Main.menuMode = 10;
						Main.serverGenLock = true;
						GenerationProgress generationProgress = new GenerationProgress();
						WorldGen.CreateNewWorld(generationProgress);
						flag2 = false;
						while (Main.menuMode == 10)
						{
							if (Main.oldStatusText != Main.statusText)
							{
								Main.oldStatusText = Main.statusText;
								Console.WriteLine(Main.statusText);
							}
						}
						try
						{
							Console.Clear();
							goto IL_783;
						}
						catch
						{
							goto IL_783;
						}
						goto IL_726;
						IL_783:
						if (!Main.serverGenLock)
						{
							continue;
						}
						IL_726:
						Main.statusText = string.Format("{0:0.0%} - " + generationProgress.Message + " - {1:0.0%}", generationProgress.TotalProgress, generationProgress.Value);
						if (Main.oldStatusText != Main.statusText)
						{
							Main.oldStatusText = Main.statusText;
							Console.WriteLine(Main.statusText);
							goto IL_783;
						}
						goto IL_783;
					}
					else
					{
						try
						{
							int num6 = Convert.ToInt32(text4);
							num6--;
							if (num6 >= 0 && num6 < Main.WorldList.Count)
							{
								bool flag3 = true;
								while (flag3)
								{
									Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2));
									Console.WriteLine("");
									Console.Write(Language.GetTextValue("CLI.SetInitialMaxPlayers"));
									string text7 = Console.ReadLine();
									try
									{
										if (text7 == "")
										{
											text7 = "8";
										}
										int num7 = Convert.ToInt32(text7);
										if (num7 <= 255 && num7 >= 1)
										{
											Main.maxNetPlayers = num7;
											flag3 = false;
										}
										flag3 = false;
									}
									catch
									{
									}
									try
									{
										Console.Clear();
									}
									catch
									{
									}
								}
								flag3 = true;
								while (flag3)
								{
									Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2));
									Console.WriteLine("");
									Console.Write(Language.GetTextValue("CLI.SetInitialPort"));
									string text8 = Console.ReadLine();
									try
									{
										if (text8 == "")
										{
											text8 = "7777";
										}
										int num8 = Convert.ToInt32(text8);
										if (num8 <= 65535)
										{
											Netplay.ListenPort = num8;
											flag3 = false;
										}
									}
									catch
									{
									}
									try
									{
										Console.Clear();
									}
									catch
									{
									}
								}
								flag3 = true;
								while (flag3)
								{
									Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2));
									Console.WriteLine("");
									Console.Write(Language.GetTextValue("CLI.AutomaticPortForward", Language.GetTextValue("CLI.ShortYes"), Language.GetTextValue("CLI.ShortNo")));
									string text9 = Console.ReadLine();
									try
									{
										if (text9 == "" || text9.ToLower() == Language.GetTextValue("CLI.ShortYes").ToLower() || text9.ToLower() == Language.GetTextValue("CLI.Yes").ToLower())
										{
											Netplay.UseUPNP = true;
											flag3 = false;
										}
										else if (text9.ToLower() == Language.GetTextValue("CLI.ShortNo").ToLower() || text9.ToLower() == Language.GetTextValue("CLI.No").ToLower())
										{
											Netplay.UseUPNP = false;
											flag3 = false;
										}
									}
									catch
									{
									}
									try
									{
										Console.Clear();
									}
									catch
									{
									}
								}
								Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2));
								Console.WriteLine("");
								Console.Write(Language.GetTextValue("CLI.EnterServerPassword"));
								Netplay.ServerPassword = Console.ReadLine();
								Main.ActiveWorldFileData = Main.WorldList[num6];
								flag = false;
								try
								{
									Console.Clear();
								}
								catch
								{
								}
							}
						}
						catch
						{
						}
					}
				}
			}
			try
			{
				Console.Clear();
			}
			catch
			{
			}
			WorldGen.serverLoadWorld();
			Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber));
			Console.WriteLine("");
			while (!Netplay.IsServerRunning)
			{
				if (Main.AutogenProgress.TotalProgress != 0f)
				{
					Main.statusText = string.Format("{0:0.0%} - " + Main.AutogenProgress.Message + " - {1:0.0%}", Main.AutogenProgress.TotalProgress, Main.AutogenProgress.Value);
				}
				if (Main.oldStatusText != Main.statusText)
				{
					Main.oldStatusText = Main.statusText;
					Console.WriteLine(Main.statusText);
				}
			}
			try
			{
				Console.Clear();
			}
			catch
			{
			}
			Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber));
			Console.WriteLine("");
			Console.WriteLine(Language.GetTextValue("CLI.ListeningOnPort", Netplay.ListenPort));
			Console.WriteLine(Language.GetTextValue("CLI.HelpHint"));
			Console.WriteLine("");
			Console.Title = "Terraria Server: " + Main.worldName;
			Stopwatch stopwatch = new Stopwatch();
			if (!Main.autoShutdown)
			{
				Main.startDedInput();
			}
			stopwatch.Start();
			double num9 = 16.666666666666668;
			double num10 = 0.0;
			int num11 = 0;
			Stopwatch stopwatch2 = new Stopwatch();
			stopwatch2.Start();
			while (!Netplay.disconnect)
			{
				double totalMilliseconds = stopwatch.Elapsed.TotalMilliseconds;
				if (totalMilliseconds + num10 >= num9)
				{
					num11++;
					num10 += totalMilliseconds - num9;
					stopwatch.Reset();
					stopwatch.Start();
					if (Main.oldStatusText != Main.statusText)
					{
						Main.oldStatusText = Main.statusText;
						Console.WriteLine(Main.statusText);
					}
					if (Netplay.anyClients)
					{
						this.Update(new GameTime());
					}
					if (Main.OnTick != null)
					{
						Main.OnTick();
					}
					double num12 = stopwatch.Elapsed.TotalMilliseconds + num10;
					if (num12 < num9)
					{
						int num13 = (int)(num9 - num12) - 1;
						if (num13 > 1)
						{
							Thread.Sleep(num13 - 1);
							if (!Netplay.anyClients)
							{
								num10 = 0.0;
								Thread.Sleep(10);
							}
						}
					}
				}
				Thread.Sleep(0);
			}
		}

		public static void CacheEntityNames()
		{
			NPC nPC = new NPC();
			for (int i = 0; i < 580; i++)
			{
				nPC.SetDefaults(i, -1f);
				Main.npcName[i] = Lang.npcName(nPC.netID, false);
				Main.npcNameEnglish[i] = Lang.npcName(nPC.netID, true);
			}
			Projectile projectile = new Projectile();
			for (int j = 0; j < 714; j++)
			{
				projectile.SetDefaults(j);
				Main.projName[j] = Lang.GetProjectileNameByType(projectile.type);
			}
		}

		public static void startDedInput()
		{
			ThreadPool.QueueUserWorkItem(new WaitCallback(Main.startDedInputCallBack), 1);
		}

		public static void startDedInputCallBack(object threadContext)
		{
			while (!Netplay.disconnect)
			{
				Console.Write(": ");
				string text = Console.ReadLine();
				string text2 = text;
				text = text.ToLower();
				try
				{
					if (text == Language.GetTextValue("CLI.Help_Command"))
					{
						Console.WriteLine(Language.GetTextValue("CLI.AvailableCommands"));
						Console.WriteLine("");
						List<string> list = new List<string>
						{
							"Help",
							"Playing",
							"Clear",
							"Exit",
							"ExitNoSave",
							"Save",
							"Kick",
							"Ban",
							"Password",
							"SetPassword",
							"Version",
							"Time",
							"Port",
							"MaxPlayers",
							"Say",
							"MOTD",
							"SetMOTD",
							"Dawn",
							"Noon",
							"Dusk",
							"Midnight",
							"Settle"
						};
						if (Main.UseSeedUI)
						{
							list.Add("Seed");
						}
						int num = 0;
						for (int i = 0; i < list.Count; i++)
						{
							string text3 = Language.Exists("CLI." + list[i] + "_Example") ? Language.GetTextValue("CLI." + list[i] + "_Example") : Language.GetTextValue("CLI." + list[i] + "_Command");
							if (text3.Length > num)
							{
								num = text3.Length;
							}
						}
						int num2 = (num + 1) / 8;
						for (int j = 0; j < list.Count; j++)
						{
							string text4 = Language.Exists("CLI." + list[j] + "_Example") ? Language.GetTextValue("CLI." + list[j] + "_Example") : Language.GetTextValue("CLI." + list[j] + "_Command");
							Console.WriteLine(text4 + new string('\t', num2 - text4.Length / 8) + Language.GetTextValue("CLI." + list[j] + "_Description"));
						}
					}
					else if (text == Language.GetTextValue("CLI.Settle_Command"))
					{
						if (!Liquid.panicMode)
						{
							Liquid.StartPanic();
						}
						else
						{
							Console.WriteLine(Language.GetTextValue("CLI.WaterIsAlreadySettling"));
						}
					}
					else if (text == Language.GetTextValue("CLI.Dawn_Command"))
					{
						Main.dayTime = true;
						Main.time = 0.0;
						NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
					}
					else if (text == Language.GetTextValue("CLI.Dusk_Command"))
					{
						Main.dayTime = false;
						Main.time = 0.0;
						NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
					}
					else if (text == Language.GetTextValue("CLI.Noon_Command"))
					{
						Main.dayTime = true;
						Main.time = 27000.0;
						NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
					}
					else if (text == Language.GetTextValue("CLI.Midnight_Command"))
					{
						Main.dayTime = false;
						Main.time = 16200.0;
						NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
					}
					else if (text == Language.GetTextValue("CLI.ExitNoSave_Command"))
					{
						Netplay.disconnect = true;
					}
					else if (text == Language.GetTextValue("CLI.Exit_Command"))
					{
						WorldFile.saveWorld();
						Netplay.disconnect = true;
						SocialAPI.Shutdown();
					}
					else if (text == Language.GetTextValue("CLI.FPS_Command"))
					{
						if (!Main.dedServFPS)
						{
							Main.dedServFPS = true;
							Main.fpsTimer.Reset();
						}
						else
						{
							Main.dedServCount1 = 0;
							Main.dedServCount2 = 0;
							Main.dedServFPS = false;
						}
					}
					else if (text == Language.GetTextValue("CLI.Save_Command"))
					{
						WorldFile.saveWorld();
					}
					else if (text == Language.GetTextValue("CLI.Time_Command"))
					{
						string text5 = "AM";
						double num3 = Main.time;
						if (!Main.dayTime)
						{
							num3 += 54000.0;
						}
						num3 = num3 / 86400.0 * 24.0;
						double num4 = 7.5;
						num3 = num3 - num4 - 12.0;
						if (num3 < 0.0)
						{
							num3 += 24.0;
						}
						if (num3 >= 12.0)
						{
							text5 = "PM";
						}
						int num5 = (int)num3;
						double num6 = num3 - (double)num5;
						num6 = (double)((int)(num6 * 60.0));
						string text6 = string.Concat(num6);
						if (num6 < 10.0)
						{
							text6 = "0" + text6;
						}
						if (num5 > 12)
						{
							num5 -= 12;
						}
						if (num5 == 0)
						{
							num5 = 12;
						}
						Console.WriteLine(Language.GetTextValue("CLI.Time", string.Concat(new object[]
						{
							num5,
							":",
							text6,
							" ",
							text5
						})));
					}
					else if (text == Language.GetTextValue("CLI.MaxPlayers_Command"))
					{
						Console.WriteLine(Language.GetTextValue("CLI.PlayerLimit", Main.maxNetPlayers));
					}
					else if (text == Language.GetTextValue("CLI.Port_Command"))
					{
						Console.WriteLine(Language.GetTextValue("CLI.Port", Netplay.ListenPort));
					}
					else if (text == Language.GetTextValue("CLI.Version_Command"))
					{
						Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber));
					}
					else
					{
						if (text == Language.GetTextValue("CLI.Clear_Command"))
						{
							try
							{
								Console.Clear();
								continue;
							}
							catch
							{
								continue;
							}
						}
						if (text == Language.GetTextValue("CLI.Playing_Command"))
						{
							int num7 = 0;
							for (int k = 0; k < 255; k++)
							{
								if (Main.player[k].active)
								{
									num7++;
									Console.WriteLine(string.Concat(new object[]
									{
										Main.player[k].name,
										" (",
										Netplay.Clients[k].Socket.GetRemoteAddress(),
										")"
									}));
								}
							}
							if (num7 == 0)
							{
								Console.WriteLine(Language.GetTextValue("CLI.NoPlayers"));
							}
							else if (num7 == 1)
							{
								Console.WriteLine(Language.GetTextValue("CLI.OnePlayerConnected"));
							}
							else
							{
								Console.WriteLine(Language.GetTextValue("CLI.PlayersConnected", num7));
							}
						}
						else if (!(text == ""))
						{
							if (text == Language.GetTextValue("CLI.MOTD_Command"))
							{
								if (Main.motd == "")
								{
									Console.WriteLine(Language.GetTextValue("CLI.NoMOTD", Main.worldName));
								}
								else
								{
									Console.WriteLine(Language.GetTextValue("CLI.MOTD", Main.motd));
								}
							}
							else if (text.StartsWith(Language.GetTextValue("CLI.SetMOTD_Command") + " "))
							{
								string text7 = text2.Substring(Language.GetTextValue("CLI.SetMOTD_Command").Length + 1);
								Main.motd = text7;
							}
							else if (text == Language.GetTextValue("CLI.Password_Command"))
							{
								if (Netplay.ServerPassword == "")
								{
									Console.WriteLine(Language.GetTextValue("CLI.NoPassword"));
								}
								else
								{
									Console.WriteLine(Language.GetTextValue("CLI.Password", Netplay.ServerPassword));
								}
							}
							else if (text.StartsWith(Language.GetTextValue("CLI.SetPassword_Command") + " "))
							{
								string text8 = text2.Substring(Language.GetTextValue("CLI.SetPassword_Command").Length + 1);
								if (text8 == "")
								{
									Netplay.ServerPassword = "";
									Console.WriteLine(Language.GetTextValue("CLI.PasswordDisabled"));
								}
								else
								{
									Netplay.ServerPassword = text8;
									Console.WriteLine(Language.GetTextValue("CLI.PasswordSet", Netplay.ServerPassword));
								}
							}
							else if (text == Language.GetTextValue("CLI.Say_Command"))
							{
								Console.WriteLine(Language.GetTextValue("CLI.Say_Usage"));
							}
							else if (text.StartsWith(Language.GetTextValue("CLI.Say_Command") + " "))
							{
								int length = Language.GetTextValue("CLI.Say_Command").Length;
								if (text.Length <= length + 1)
								{
									Console.WriteLine(Language.GetTextValue("CLI.Say_Usage"));
								}
								else
								{
									string arg = text2.Substring(length + 1);
									Console.WriteLine(Language.GetTextValue("CLI.ServerMessage", arg));
									NetMessage.SendData(25, -1, -1, Language.GetTextValue("CLI.ServerMessage", arg), 255, 255f, 240f, 20f, 0, 0, 0);
								}
							}
							else if (text == Language.GetTextValue("CLI.Kick_Command"))
							{
								Console.WriteLine(Language.GetTextValue("CLI.Kick_Usage"));
							}
							else if (text.StartsWith(Language.GetTextValue("CLI.Kick_Command") + " "))
							{
								int length2 = Language.GetTextValue("CLI.Kick_Command").Length;
								if (text.Length <= length2 + 1)
								{
									Console.WriteLine(Language.GetTextValue("CLI.Kick_Usage"));
								}
								else
								{
									string text9 = text.Substring(length2 + 1);
									text9 = text9.ToLower();
									for (int l = 0; l < 255; l++)
									{
										if (Main.player[l].active && Main.player[l].name.ToLower() == text9)
										{
											NetMessage.SendData(2, l, -1, Language.GetTextValue("CLI.KickMessage"), 0, 0f, 0f, 0f, 0, 0, 0);
										}
									}
								}
							}
							else if (text == Language.GetTextValue("CLI.Seed_Command"))
							{
								if (Main.ActiveWorldFileData == null || !Main.ActiveWorldFileData.HasValidSeed)
								{
									Console.WriteLine(Language.GetTextValue("CLI.NoValidSeed"));
								}
								else
								{
									Console.WriteLine(Language.GetTextValue("CLI.DisplaySeed", Main.ActiveWorldFileData.SeedText));
								}
							}
							else if (text == Language.GetTextValue("CLI.Ban_Command"))
							{
								Console.WriteLine(Language.GetTextValue("CLI.Ban_Usage"));
							}
							else if (text.StartsWith(Language.GetTextValue("CLI.Ban_Command") + " "))
							{
								int length3 = Language.GetTextValue("CLI.Ban_Command").Length;
								if (text.Length <= length3 + 1)
								{
									Console.WriteLine(Language.GetTextValue("CLI.Ban_Usage"));
								}
								else
								{
									string text10 = text.Substring(4);
									text10 = text10.ToLower();
									for (int m = 0; m < 255; m++)
									{
										if (Main.player[m].active && Main.player[m].name.ToLower() == text10)
										{
											Netplay.AddBan(m);
											NetMessage.SendData(2, m, -1, Language.GetTextValue("CLI.BanMessage"), 0, 0f, 0f, 0f, 0, 0, 0);
										}
									}
								}
							}
							else
							{
								Console.WriteLine(Language.GetTextValue("CLI.InvalidCommand"));
							}
						}
					}
				}
				catch
				{
					Console.WriteLine(Language.GetTextValue("CLI.InvalidCommand"));
				}
			}
		}

		public static void Sundialing()
		{
			if (Main.sundialCooldown == 0)
			{
				if (Main.netMode == 1)
				{
					NetMessage.SendData(51, -1, -1, "", Main.myPlayer, 3f, 0f, 0f, 0, 0, 0);
					return;
				}
				Main.fastForwardTime = true;
				Main.sundialCooldown = 8;
				NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
			}
		}

		public static void UpdateSundial()
		{
			if (Main.fastForwardTime)
			{
				Main.dayRate = 60;
				return;
			}
			Main.dayRate = 1;
		}

		public Main()
		{
			Main.instance = this;
#if CLIENT
			Main.graphics = new GraphicsDeviceManager((Game)this);
			base.Content.RootDirectory = "Content";
#endif
		}

		protected void SetTitle()
		{
#if CLIENT
			Main._cachedTitle = Lang.title();
			base.Window.Title = Main._cachedTitle;
#endif
		}

		public static void InitLifeBytes()
		{
			NPC nPC = new NPC();
			for (int i = -65; i < 580; i++)
			{
				if (i != 0)
				{
					nPC.netDefaults(i);
					if (nPC.lifeMax > 32767 || nPC.boss)
					{
						Main.npcLifeBytes[i] = 4;
					}
					else if (nPC.lifeMax > 127)
					{
						Main.npcLifeBytes[i] = 2;
					}
					else
					{
						Main.npcLifeBytes[i] = 1;
					}
				}
			}
		}

		private static void SetTileValue()
		{
			Main.tileValue[28] = 100;
			Main.tileValue[7] = 200;
			Main.tileValue[166] = 210;
			Main.tileValue[6] = 220;
			Main.tileValue[167] = 230;
			Main.tileValue[9] = 240;
			Main.tileValue[168] = 250;
			Main.tileValue[37] = 300;
			Main.tileValue[22] = 310;
			Main.tileValue[204] = 320;
			Main.tileValue[407] = 350;
			Main.tileValue[8] = 400;
			Main.tileValue[169] = 410;
			Main.tileValue[21] = 500;
			Main.tileValue[441] = 500;
			Main.tileValue[107] = 600;
			Main.tileValue[221] = 610;
			Main.tileValue[108] = 620;
			Main.tileValue[222] = 630;
			Main.tileValue[111] = 640;
			Main.tileValue[223] = 650;
			Main.tileValue[211] = 700;
			Main.tileValue[12] = 800;
			Main.tileValue[236] = 810;
		}

		protected override void Initialize()
		{
#if SERVER
			Main.netMode = 2;
#endif
			Main.LocalFavoriteData.Load();
			Main.CloudFavoritesData.Load();
			Main.FindAnnouncementBoxStatus();
			PlayerInput.Initialize();
			CustomCurrencyManager.Initialize();
			TileObjectData.Initialize();
			Animation.Initialize();
			Chest.Initialize();
			Wiring.Initialize();
			Framing.Initialize();
			ItemRarity.Initialize();
			TileEntity.InitializeAll();
			Projectile.InitializeStaticThings();
			Main.InitializeItemAnimations();
#if CLIENT
			Lighting.Initialize(false);
			MapHelper.Initialize();
			TimeLogger.Initialize();
#else
			Mount.Initialize();
			Minecart.Initialize();
#endif
			WorldGen.RandomizeBackgrounds();
			WorldGen.RandomizeCaveBackgrounds();
			WorldGen.RandomizeMoonState();
			Main.bgAlpha[0] = 1f;
			Main.bgAlpha2[0] = 1f;
			this.invBottom = 258;
			for (int i = 0; i < 714; i++)
			{
				Main.projFrames[i] = 1;
			}
			Main.projFrames[706] = 8;
			Main.projFrames[712] = 8;
			Main.projFrames[663] = 7;
			Main.projFrames[665] = 9;
			Main.projFrames[667] = 9;
			Main.projFrames[677] = 6;
			Main.projFrames[678] = 6;
			Main.projFrames[679] = 6;
			Main.projFrames[688] = 6;
			Main.projFrames[689] = 6;
			Main.projFrames[690] = 8;
			Main.projFrames[691] = 4;
			Main.projFrames[692] = 4;
			Main.projFrames[693] = 4;
			Main.projFrames[694] = 4;
			Main.projFrames[695] = 4;
			Main.projFrames[696] = 5;
			Main.projFrames[700] = 4;
			Main.projFrames[643] = 8;
			Main.projFrames[566] = 4;
			Main.projFrames[565] = 4;
			Main.projFrames[525] = 5;
			Main.projFrames[519] = 4;
			Main.projFrames[509] = 2;
			Main.projFrames[485] = 5;
			Main.projFrames[492] = 8;
			Main.projFrames[500] = 4;
			Main.projFrames[499] = 12;
			Main.projFrames[518] = 4;
			Main.projFrames[585] = 4;
			Main.projFrames[593] = 4;
			Main.projFrames[595] = 28;
			Main.projFrames[596] = 4;
			Main.projFrames[612] = 5;
			Main.projFrames[613] = 4;
			Main.projFrames[614] = 4;
			Main.projFrames[615] = 7;
			Main.projFrames[623] = 12;
			Main.projFrames[633] = 5;
			Main.projFrames[645] = 7;
			Main.projFrames[650] = 4;
			Main.projFrames[652] = 6;
			Main.projFrames[659] = 4;
			Main.projFrames[384] = 6;
			Main.projFrames[385] = 3;
			Main.projFrames[386] = 6;
			Main.projFrames[390] = 11;
			Main.projFrames[391] = 11;
			Main.projFrames[392] = 11;
			Main.projFrames[393] = 15;
			Main.projFrames[394] = 15;
			Main.projFrames[395] = 15;
			Main.projFrames[398] = 10;
			Main.projFrames[407] = 6;
			Main.projFrames[408] = 2;
			Main.projFrames[409] = 3;
			Main.projFrames[387] = 3;
			Main.projFrames[388] = 3;
			Main.projFrames[334] = 11;
			Main.projFrames[324] = 10;
			Main.projFrames[351] = 2;
			Main.projFrames[349] = 5;
			Main.projFrames[423] = 4;
			Main.projFrames[435] = 4;
			Main.projFrames[682] = 4;
			Main.projFrames[436] = 4;
			Main.projFrames[439] = 6;
			Main.projFrames[443] = 4;
			Main.projFrames[447] = 4;
			Main.projFrames[448] = 3;
			Main.projFrames[450] = 5;
			Main.projFrames[454] = 2;
			Main.projFrames[456] = 4;
			Main.projFrames[459] = 3;
			Main.projFrames[462] = 5;
			Main.projFrames[465] = 4;
			Main.projFrames[467] = 4;
			Main.projFrames[468] = 4;
			Main.projFrames[533] = 21;
			Main.projFrames[535] = 12;
			Main.projFrames[539] = 4;
			Main.projFrames[575] = 4;
			Main.projFrames[574] = 2;
			Main.projFrames[634] = 4;
			Main.projFrames[635] = 4;
			Main.projFrames[709] = 3;
			Main.projFrames[353] = 14;
			Main.projFrames[346] = 2;
			Main.projFrames[347] = 2;
			Main.projFrames[335] = 4;
			Main.projFrames[344] = 3;
			Main.projFrames[337] = 5;
			Main.projFrames[317] = 8;
			Main.projFrames[321] = 3;
			Main.projFrames[308] = 10;
			Main.projFrames[316] = 4;
			Main.projFrames[275] = 2;
			Main.projFrames[276] = 2;
			Main.projFrames[254] = 5;
			Main.projFrames[307] = 2;
			Main.projFrames[72] = 4;
			Main.projFrames[86] = 4;
			Main.projFrames[87] = 4;
			Main.projFrames[102] = 2;
			Main.projFrames[111] = 8;
			Main.projFrames[112] = 3;
			Main.projFrames[127] = 16;
			Main.projFrames[175] = 2;
			Main.projFrames[181] = 4;
			Main.projFrames[189] = 4;
			Main.projFrames[191] = 18;
			Main.projFrames[192] = 18;
			Main.projFrames[193] = 18;
			Main.projFrames[194] = 18;
			Main.projFrames[190] = 4;
			Main.projFrames[198] = 4;
			Main.projFrames[199] = 8;
			Main.projFrames[200] = 10;
			Main.projFrames[206] = 5;
			Main.projFrames[208] = 5;
			Main.projFrames[209] = 12;
			Main.projFrames[210] = 12;
			Main.projFrames[211] = 10;
			Main.projFrames[221] = 3;
			Main.projFrames[237] = 4;
			Main.projFrames[238] = 6;
			Main.projFrames[221] = 3;
			Main.projFrames[228] = 5;
			Main.projFrames[229] = 4;
			Main.projFrames[236] = 13;
			Main.projFrames[243] = 4;
			Main.projFrames[244] = 6;
			Main.projFrames[249] = 5;
			Main.projFrames[252] = 4;
			Main.projFrames[266] = 6;
			Main.projFrames[268] = 8;
			Main.projFrames[269] = 7;
			Main.projFrames[270] = 3;
			Main.projFrames[313] = 12;
			Main.projFrames[314] = 13;
			Main.projFrames[319] = 11;
			Main.projFrames[373] = 3;
			Main.projFrames[375] = 8;
			Main.projFrames[377] = 9;
			Main.projFrames[379] = 4;
			Main.projFrames[380] = 4;
			Main.projFrames[601] = 2;
			Main.projFrames[602] = 4;
			Main.projFrames[703] = 8;
			Main.projFrames[701] = 3;
			Main.projFrames[702] = 4;
			Main.projPet[492] = true;
			Main.projPet[499] = true;
			Main.projPet[653] = true;
			Main.projPet[701] = true;
			Main.projPet[703] = true;
			Main.projPet[702] = true;
			Main.projPet[319] = true;
			Main.projPet[334] = true;
			Main.projPet[324] = true;
			Main.projPet[266] = true;
			Main.projPet[313] = true;
			Main.projPet[314] = true;
			Main.projPet[317] = true;
			Main.projPet[175] = true;
			Main.projPet[111] = true;
			Main.projPet[112] = true;
			Main.projPet[127] = true;
			Main.projPet[191] = true;
			Main.projPet[192] = true;
			Main.projPet[193] = true;
			Main.projPet[194] = true;
			Main.projPet[197] = true;
			Main.projPet[198] = true;
			Main.projPet[199] = true;
			Main.projPet[200] = true;
			Main.projPet[208] = true;
			Main.projPet[209] = true;
			Main.projPet[210] = true;
			Main.projPet[211] = true;
			Main.projPet[236] = true;
			Main.projPet[268] = true;
			Main.projPet[269] = true;
			Main.projPet[353] = true;
			Main.projPet[373] = true;
			Main.projPet[375] = true;
			Main.projPet[380] = true;
			Main.projPet[387] = true;
			Main.projPet[388] = true;
			Main.projPet[390] = true;
			Main.projPet[391] = true;
			Main.projPet[392] = true;
			Main.projPet[393] = true;
			Main.projPet[394] = true;
			Main.projPet[395] = true;
			Main.projPet[398] = true;
			Main.projPet[407] = true;
			Main.projPet[423] = true;
			Main.projPet[533] = true;
			Main.projPet[613] = true;
			Main.projPet[623] = true;
			Main.projPet[625] = true;
			Main.projPet[626] = true;
			Main.projPet[627] = true;
			Main.projPet[628] = true;
			Main.tileLighted[237] = true;
			Main.tileLighted[27] = true;
			Main.tileLighted[381] = true;
			Main.tileLighted[184] = true;
			Main.tileLighted[463] = true;
			Main.slimeRainNPC[1] = true;
			Main.debuff[158] = true;
			Main.debuff[160] = true;
			Main.debuff[20] = true;
			Main.debuff[21] = true;
			Main.debuff[22] = true;
			Main.debuff[23] = true;
			Main.debuff[24] = true;
			Main.debuff[25] = true;
			Main.debuff[28] = true;
			Main.debuff[30] = true;
			Main.debuff[31] = true;
			Main.debuff[32] = true;
			Main.debuff[33] = true;
			Main.debuff[34] = true;
			Main.debuff[35] = true;
			Main.debuff[36] = true;
			Main.debuff[37] = true;
			Main.debuff[38] = true;
			Main.debuff[39] = true;
			Main.debuff[44] = true;
			Main.debuff[46] = true;
			Main.debuff[47] = true;
			Main.debuff[67] = true;
			Main.debuff[68] = true;
			Main.debuff[69] = true;
			Main.debuff[70] = true;
			Main.debuff[80] = true;
			Main.debuff[86] = true;
			Main.debuff[87] = true;
			Main.debuff[88] = true;
			Main.debuff[89] = true;
			Main.debuff[94] = true;
			Main.debuff[103] = true;
			Main.debuff[119] = true;
			Main.debuff[120] = true;
			Main.debuff[137] = true;
			Main.debuff[145] = true;
			Main.debuff[146] = true;
			Main.debuff[147] = true;
			Main.debuff[148] = true;
			Main.debuff[149] = true;
			Main.debuff[156] = true;
			Main.debuff[157] = true;
			Main.debuff[163] = true;
			Main.debuff[164] = true;
			Main.debuff[144] = true;
			Main.debuff[194] = true;
			Main.debuff[195] = true;
			Main.debuff[196] = true;
			Main.debuff[197] = true;
			Main.debuff[199] = true;
			Main.pvpBuff[20] = true;
			Main.pvpBuff[24] = true;
			Main.pvpBuff[31] = true;
			Main.pvpBuff[39] = true;
			Main.pvpBuff[44] = true;
			Main.pvpBuff[20] = true;
			Main.pvpBuff[69] = true;
			Main.pvpBuff[103] = true;
			Main.pvpBuff[119] = true;
			Main.pvpBuff[120] = true;
			Main.pvpBuff[137] = true;
			Main.meleeBuff[71] = true;
			Main.meleeBuff[73] = true;
			Main.meleeBuff[74] = true;
			Main.meleeBuff[75] = true;
			Main.meleeBuff[76] = true;
			Main.meleeBuff[77] = true;
			Main.meleeBuff[78] = true;
			Main.meleeBuff[79] = true;
			Main.buffNoSave[20] = true;
			Main.buffNoSave[22] = true;
			Main.buffNoSave[23] = true;
			Main.buffNoSave[24] = true;
			Main.buffNoSave[28] = true;
			Main.buffNoSave[30] = true;
			Main.buffNoSave[31] = true;
			Main.buffNoSave[34] = true;
			Main.buffNoSave[35] = true;
			Main.buffNoSave[37] = true;
			Main.buffNoSave[38] = true;
			Main.buffNoSave[39] = true;
			Main.buffNoSave[43] = true;
			Main.buffNoSave[44] = true;
			Main.buffNoSave[46] = true;
			Main.buffNoSave[47] = true;
			Main.buffNoSave[48] = true;
			Main.buffNoSave[58] = true;
			Main.buffNoSave[59] = true;
			Main.buffNoSave[60] = true;
			Main.buffNoSave[62] = true;
			Main.buffNoSave[63] = true;
			Main.buffNoSave[64] = true;
			Main.buffNoSave[67] = true;
			Main.buffNoSave[68] = true;
			Main.buffNoSave[69] = true;
			Main.buffNoSave[70] = true;
			Main.buffNoSave[72] = true;
			Main.buffNoSave[80] = true;
			Main.buffNoSave[87] = true;
			Main.buffNoSave[158] = true;
			Main.buffNoSave[146] = true;
			Main.buffNoSave[147] = true;
			Main.buffNoSave[88] = true;
			Main.buffNoSave[89] = true;
			Main.buffNoSave[94] = true;
			Main.buffNoSave[95] = true;
			Main.buffNoSave[96] = true;
			Main.buffNoSave[97] = true;
			Main.buffNoSave[98] = true;
			Main.buffNoSave[99] = true;
			Main.buffNoSave[100] = true;
			Main.buffNoSave[103] = true;
			Main.buffNoSave[118] = true;
			Main.buffNoSave[138] = true;
			Main.buffNoSave[167] = true;
			Main.buffNoSave[166] = true;
			Main.buffNoSave[184] = true;
			Main.buffNoSave[185] = true;
			Main.buffNoSave[119] = true;
			Main.buffNoSave[120] = true;
			Main.buffNoSave[90] = true;
			Main.buffNoSave[125] = true;
			Main.buffNoSave[126] = true;
			Main.buffNoSave[128] = true;
			Main.buffNoSave[129] = true;
			Main.buffNoSave[130] = true;
			Main.buffNoSave[131] = true;
			Main.buffNoSave[132] = true;
			Main.buffNoSave[133] = true;
			Main.buffNoSave[134] = true;
			Main.buffNoSave[135] = true;
			Main.buffNoSave[139] = true;
			Main.buffNoSave[140] = true;
			Main.buffNoSave[141] = true;
			Main.buffNoSave[142] = true;
			Main.buffNoSave[143] = true;
			Main.buffNoSave[137] = true;
			Main.buffNoSave[144] = true;
			Main.buffNoSave[161] = true;
			Main.buffNoSave[162] = true;
			Main.buffNoSave[163] = true;
			Main.buffNoSave[164] = true;
			Main.buffNoSave[168] = true;
			Main.buffNoSave[170] = true;
			Main.buffNoSave[171] = true;
			Main.buffNoSave[172] = true;
			Main.buffNoSave[182] = true;
			Main.buffNoSave[187] = true;
			Main.buffNoSave[188] = true;
			Main.buffNoSave[193] = true;
			Main.buffNoSave[194] = true;
			Main.buffNoSave[195] = true;
			Main.buffNoSave[196] = true;
			Main.buffNoSave[197] = true;
			Main.buffNoSave[198] = true;
			Main.buffNoSave[199] = true;
			Main.buffNoSave[205] = true;
			for (int j = 173; j <= 181; j++)
			{
				Main.buffNoSave[j] = true;
			}
			Main.buffNoTimeDisplay[19] = true;
			Main.buffNoTimeDisplay[27] = true;
			Main.buffNoTimeDisplay[28] = true;
			Main.buffNoTimeDisplay[34] = true;
			Main.buffNoTimeDisplay[37] = true;
			Main.buffNoTimeDisplay[38] = true;
			Main.buffNoTimeDisplay[40] = true;
			Main.buffNoTimeDisplay[41] = true;
			Main.buffNoTimeDisplay[42] = true;
			Main.buffNoTimeDisplay[43] = true;
			Main.buffNoTimeDisplay[45] = true;
			Main.buffNoTimeDisplay[49] = true;
			Main.buffNoTimeDisplay[60] = true;
			Main.buffNoTimeDisplay[62] = true;
			Main.buffNoTimeDisplay[64] = true;
			Main.buffNoTimeDisplay[68] = true;
			Main.buffNoTimeDisplay[81] = true;
			Main.buffNoTimeDisplay[82] = true;
			Main.buffNoTimeDisplay[83] = true;
			Main.buffNoTimeDisplay[90] = true;
			Main.buffNoTimeDisplay[95] = true;
			Main.buffNoTimeDisplay[96] = true;
			Main.buffNoTimeDisplay[97] = true;
			Main.buffNoTimeDisplay[98] = true;
			Main.buffNoTimeDisplay[99] = true;
			Main.buffNoTimeDisplay[100] = true;
			Main.buffNoTimeDisplay[101] = true;
			Main.buffNoTimeDisplay[102] = true;
			Main.buffNoTimeDisplay[118] = true;
			Main.buffNoTimeDisplay[138] = true;
			Main.buffNoTimeDisplay[167] = true;
			Main.buffNoTimeDisplay[166] = true;
			Main.buffNoTimeDisplay[184] = true;
			Main.buffNoTimeDisplay[185] = true;
			Main.buffNoTimeDisplay[125] = true;
			Main.buffNoTimeDisplay[126] = true;
			Main.buffNoTimeDisplay[128] = true;
			Main.buffNoTimeDisplay[129] = true;
			Main.buffNoTimeDisplay[130] = true;
			Main.buffNoTimeDisplay[131] = true;
			Main.buffNoTimeDisplay[132] = true;
			Main.buffNoTimeDisplay[133] = true;
			Main.buffNoTimeDisplay[134] = true;
			Main.buffNoTimeDisplay[135] = true;
			Main.buffNoTimeDisplay[136] = true;
			Main.buffNoTimeDisplay[139] = true;
			Main.buffNoTimeDisplay[140] = true;
			Main.buffNoTimeDisplay[141] = true;
			Main.buffNoTimeDisplay[142] = true;
			Main.buffNoTimeDisplay[143] = true;
			Main.buffNoTimeDisplay[137] = true;
			Main.buffNoTimeDisplay[200] = true;
			Main.buffNoTimeDisplay[202] = true;
			Main.buffNoTimeDisplay[201] = true;
			Main.buffNoTimeDisplay[161] = true;
			Main.buffNoTimeDisplay[162] = true;
			Main.buffNoTimeDisplay[163] = true;
			Main.buffNoTimeDisplay[168] = true;
			Main.buffNoTimeDisplay[170] = true;
			Main.buffNoTimeDisplay[171] = true;
			Main.buffNoTimeDisplay[172] = true;
			Main.buffNoTimeDisplay[182] = true;
			Main.buffNoTimeDisplay[165] = true;
			Main.buffNoTimeDisplay[186] = true;
			Main.buffNoTimeDisplay[187] = true;
			Main.buffNoTimeDisplay[188] = true;
			Main.buffNoTimeDisplay[193] = true;
			Main.buffNoTimeDisplay[199] = true;
			Main.persistentBuff[71] = true;
			Main.persistentBuff[73] = true;
			Main.persistentBuff[74] = true;
			Main.persistentBuff[75] = true;
			Main.persistentBuff[76] = true;
			Main.persistentBuff[77] = true;
			Main.persistentBuff[78] = true;
			Main.persistentBuff[79] = true;
			Main.vanityPet[40] = true;
			Main.vanityPet[41] = true;
			Main.vanityPet[42] = true;
			Main.vanityPet[45] = true;
			Main.vanityPet[50] = true;
			Main.vanityPet[51] = true;
			Main.vanityPet[52] = true;
			Main.vanityPet[53] = true;
			Main.vanityPet[54] = true;
			Main.vanityPet[55] = true;
			Main.vanityPet[56] = true;
			Main.vanityPet[61] = true;
			Main.vanityPet[154] = true;
			Main.vanityPet[65] = true;
			Main.vanityPet[66] = true;
			Main.vanityPet[81] = true;
			Main.vanityPet[82] = true;
			Main.vanityPet[84] = true;
			Main.vanityPet[85] = true;
			Main.vanityPet[91] = true;
			Main.vanityPet[92] = true;
			Main.vanityPet[127] = true;
			Main.vanityPet[136] = true;
			Main.vanityPet[191] = true;
			Main.vanityPet[202] = true;
			Main.vanityPet[200] = true;
			Main.lightPet[19] = true;
			Main.lightPet[155] = true;
			Main.lightPet[27] = true;
			Main.lightPet[101] = true;
			Main.lightPet[102] = true;
			Main.lightPet[57] = true;
			Main.lightPet[190] = true;
			Main.lightPet[152] = true;
			Main.lightPet[201] = true;
			Main.tileFlame[4] = true;
			Main.tileFlame[33] = true;
			Main.tileFlame[34] = true;
			Main.tileFlame[35] = true;
			Main.tileFlame[42] = true;
			Main.tileFlame[49] = true;
			Main.tileFlame[93] = true;
			Main.tileFlame[98] = true;
			Main.tileFlame[100] = true;
			Main.tileFlame[173] = true;
			Main.tileFlame[174] = true;
			Main.tileFlame[372] = true;
			Main.tileRope[213] = true;
			Main.tileRope[214] = true;
			Main.tileRope[353] = true;
			Main.tileRope[365] = true;
			Main.tileRope[366] = true;
			Main.tileRope[449] = true;
			Main.tileRope[450] = true;
			Main.tileRope[451] = true;
			Main.tilePile[330] = true;
			Main.tilePile[331] = true;
			Main.tilePile[332] = true;
			Main.tilePile[333] = true;
			for (int k = 0; k < 580; k++)
			{
				Main.npcCatchable[k] = false;
			}
			Main.npcCatchable[46] = true;
			Main.npcCatchable[55] = true;
			Main.npcCatchable[74] = true;
			Main.npcCatchable[148] = true;
			Main.npcCatchable[149] = true;
			Main.npcCatchable[297] = true;
			Main.npcCatchable[298] = true;
			Main.npcCatchable[299] = true;
			Main.npcCatchable[300] = true;
			Main.npcCatchable[355] = true;
			Main.npcCatchable[356] = true;
			Main.npcCatchable[357] = true;
			Main.npcCatchable[358] = true;
			Main.npcCatchable[359] = true;
			Main.npcCatchable[360] = true;
			Main.npcCatchable[361] = true;
			Main.npcCatchable[362] = true;
			Main.npcCatchable[363] = true;
			Main.npcCatchable[364] = true;
			Main.npcCatchable[365] = true;
			Main.npcCatchable[366] = true;
			Main.npcCatchable[367] = true;
			Main.npcCatchable[374] = true;
			Main.npcCatchable[377] = true;
			Main.npcCatchable[539] = true;
			Main.npcCatchable[538] = true;
			Main.npcCatchable[484] = true;
			Main.npcCatchable[485] = true;
			Main.npcCatchable[486] = true;
			Main.npcCatchable[487] = true;
			for (int l = 442; l <= 448; l++)
			{
				Main.npcCatchable[l] = true;
			}
			Main.SetTileValue();
			Main.tileSpelunker[6] = true;
			Main.tileSpelunker[7] = true;
			Main.tileSpelunker[8] = true;
			Main.tileSpelunker[9] = true;
			Main.tileSpelunker[12] = true;
			Main.tileSpelunker[21] = true;
			Main.tileSpelunker[441] = true;
			Main.tileSpelunker[28] = true;
			Main.tileSpelunker[107] = true;
			Main.tileSpelunker[108] = true;
			Main.tileSpelunker[111] = true;
			Main.tileSpelunker[63] = true;
			Main.tileSpelunker[64] = true;
			Main.tileSpelunker[65] = true;
			Main.tileSpelunker[66] = true;
			Main.tileSpelunker[67] = true;
			Main.tileSpelunker[68] = true;
			Main.tileSpelunker[166] = true;
			Main.tileSpelunker[167] = true;
			Main.tileSpelunker[168] = true;
			Main.tileSpelunker[169] = true;
			Main.tileSpelunker[178] = true;
			Main.tileSpelunker[211] = true;
			Main.tileSpelunker[221] = true;
			Main.tileSpelunker[222] = true;
			Main.tileSpelunker[223] = true;
			Main.tileSpelunker[236] = true;
			Main.tileSpelunker[37] = true;
			Main.tileSpelunker[407] = true;
			Main.tileSpelunker[227] = true;
			Main.SetupTileMerge();
			Main.tileSolid[379] = true;
			Main.tileSolid[371] = true;
			Main.tileMergeDirt[371] = true;
			Main.tileBlockLight[371] = true;
			Main.tileBouncy[371] = true;
			Main.tileBouncy[448] = true;
			Main.tileBouncy[446] = true;
			Main.tileBouncy[447] = true;
			Main.tileFrameImportant[377] = true;
			Main.tileFrameImportant[373] = true;
			Main.tileFrameImportant[375] = true;
			Main.tileFrameImportant[374] = true;
			Main.tileFrameImportant[461] = true;
			Main.tileLighted[372] = true;
			Main.tileFrameImportant[372] = true;
			Main.tileWaterDeath[372] = true;
			Main.tileLavaDeath[372] = true;
			Main.tileSolid[357] = true;
			Main.tileBrick[357] = true;
			Main.tileSolid[408] = true;
			Main.tileMergeDirt[408] = true;
			Main.tileBrick[408] = true;
			Main.tileSolid[409] = true;
			Main.tileBrick[409] = true;
			Main.tileSolid[415] = true;
			Main.tileBrick[415] = true;
			Main.tileLighted[415] = true;
			Main.tileSolid[416] = true;
			Main.tileBrick[416] = true;
			Main.tileLighted[416] = true;
			Main.tileSolid[417] = true;
			Main.tileBrick[417] = true;
			Main.tileLighted[417] = true;
			Main.tileSolid[418] = true;
			Main.tileBrick[418] = true;
			Main.tileLighted[418] = true;
			Main.tileBrick[37] = true;
			Main.tileBrick[117] = true;
			Main.tileBrick[25] = true;
			Main.tileBrick[203] = true;
			Main.tileSolid[232] = true;
			Main.tileSolid[311] = true;
			Main.tileSolid[312] = true;
			Main.tileSolid[313] = true;
			Main.tileMergeDirt[311] = true;
			Main.tileSolid[315] = true;
			Main.tileMergeDirt[315] = true;
			Main.tileSolid[321] = true;
			Main.tileSolid[322] = true;
			Main.tileBlockLight[321] = true;
			Main.tileBlockLight[322] = true;
			Main.tileMergeDirt[321] = true;
			Main.tileMergeDirt[322] = true;
			Main.tileBrick[321] = true;
			Main.tileBrick[322] = true;
			Main.tileShine[239] = 1100;
			Main.tileSolid[239] = true;
			Main.tileSolidTop[239] = true;
			Main.tileSolid[380] = true;
			Main.tileSolidTop[380] = true;
			Main.tileFrameImportant[358] = true;
			Main.tileFrameImportant[359] = true;
			Main.tileFrameImportant[360] = true;
			Main.tileFrameImportant[361] = true;
			Main.tileFrameImportant[362] = true;
			Main.tileFrameImportant[363] = true;
			Main.tileFrameImportant[364] = true;
			Main.tileFrameImportant[391] = true;
			Main.tileLighted[391] = true;
			Main.tileFrameImportant[392] = true;
			Main.tileFrameImportant[393] = true;
			Main.tileFrameImportant[394] = true;
			Main.tileFrameImportant[356] = true;
			Main.tileFrameImportant[334] = true;
			Main.tileFrameImportant[440] = true;
			Main.tileFrameImportant[300] = true;
			Main.tileFrameImportant[301] = true;
			Main.tileFrameImportant[302] = true;
			Main.tileFrameImportant[303] = true;
			Main.tileFrameImportant[304] = true;
			Main.tileFrameImportant[305] = true;
			Main.tileFrameImportant[306] = true;
			Main.tileFrameImportant[307] = true;
			Main.tileFrameImportant[308] = true;
			Main.tileFrameImportant[354] = true;
			Main.tileFrameImportant[355] = true;
			Main.tileFrameImportant[324] = true;
			Main.tileObsidianKill[324] = true;
			Main.tileLavaDeath[324] = true;
			Main.tileFrameImportant[463] = true;
			Main.tileFrameImportant[464] = true;
			Main.tileFrameImportant[466] = true;
			Main.tileFrameImportant[419] = true;
			Main.tileFrameImportant[442] = true;
			Main.tileFrameImportant[443] = true;
			Main.tileFrameImportant[444] = true;
			Main.tileFrameImportant[420] = true;
			Main.tileFrameImportant[423] = true;
			Main.tileFrameImportant[424] = true;
			Main.tileFrameImportant[428] = true;
			Main.tileFrameImportant[429] = true;
			Main.tileFrameImportant[445] = true;
			Main.tileFrameImportant[283] = true;
			Main.tileFrameImportant[288] = true;
			Main.tileFrameImportant[289] = true;
			Main.tileFrameImportant[290] = true;
			Main.tileFrameImportant[291] = true;
			Main.tileFrameImportant[292] = true;
			Main.tileFrameImportant[293] = true;
			Main.tileFrameImportant[294] = true;
			Main.tileFrameImportant[295] = true;
			Main.tileFrameImportant[296] = true;
			Main.tileFrameImportant[297] = true;
			Main.tileFrameImportant[316] = true;
			Main.tileFrameImportant[317] = true;
			Main.tileFrameImportant[318] = true;
			Main.tileLargeFrames[284] = 1;
			Main.wallHouse[224] = true;
			Main.wallLargeFrames[224] = 2;
			Main.wallHouse[60] = true;
			Main.wallHouse[225] = true;
			Main.wallHouse[226] = true;
			Main.wallHouse[227] = true;
			Main.tileLargeFrames[409] = 1;
			Main.tileFrameImportant[410] = true;
			Main.wallHouse[173] = true;
			Main.wallHouse[183] = true;
			Main.wallHouse[179] = true;
			Main.wallLargeFrames[179] = 1;
			Main.tileSolid[367] = true;
			Main.tileBlockLight[367] = true;
			Main.tileMergeDirt[367] = true;
			Main.tileSolid[357] = true;
			Main.tileBlockLight[357] = true;
			Main.tileLargeFrames[357] = 1;
			Main.tileBlendAll[357] = true;
			Main.wallHouse[184] = true;
			Main.wallHouse[181] = true;
			Main.tileSolid[368] = true;
			Main.tileBlockLight[368] = true;
			Main.tileMergeDirt[368] = true;
			Main.tileSolid[369] = true;
			Main.tileBlockLight[369] = true;
			Main.tileBrick[369] = true;
			Main.tileMergeDirt[369] = true;
			Main.wallHouse[186] = true;
			Main.tileLargeFrames[325] = 1;
			Main.tileSolid[325] = true;
			Main.tileBlockLight[325] = true;
			Main.wallLargeFrames[146] = 1;
			Main.wallLargeFrames[147] = 1;
			Main.wallLargeFrames[167] = 1;
			Main.wallLargeFrames[185] = 2;
			Main.tileSolid[460] = true;
			Main.tileSolid[326] = true;
			Main.tileBlockLight[326] = true;
			Main.tileSolid[458] = true;
			Main.tileBlockLight[458] = true;
			Main.tileSolid[459] = true;
			Main.tileSolid[327] = true;
			Main.tileBlockLight[327] = true;
			Main.tileSolid[345] = true;
			Main.tileBlockLight[345] = true;
			Main.tileLighted[327] = true;
			Main.tileSolid[328] = true;
			Main.tileBrick[328] = true;
			Main.tileSolid[329] = true;
			Main.tileBrick[329] = true;
			Main.tileBlockLight[329] = true;
			Main.tileLighted[336] = true;
			Main.tileLighted[340] = true;
			Main.tileLighted[341] = true;
			Main.tileLighted[342] = true;
			Main.tileLighted[343] = true;
			Main.tileLighted[344] = true;
			Main.tileLighted[349] = true;
			Main.tileSolid[421] = true;
			Main.tileBlockLight[421] = true;
			Main.tileSolid[422] = true;
			Main.tileBlockLight[422] = true;
			Main.tileSolid[426] = true;
			Main.tileBlockLight[426] = true;
			Main.tileSolid[430] = true;
			Main.tileBlockLight[430] = true;
			Main.tileSolid[431] = true;
			Main.tileBlockLight[431] = true;
			Main.tileSolid[432] = true;
			Main.tileBlockLight[432] = true;
			Main.tileSolid[433] = true;
			Main.tileBlockLight[433] = true;
			Main.tileSolid[434] = true;
			Main.tileBlockLight[434] = true;
			Main.tileSolid[446] = true;
			Main.tileSolid[447] = true;
			Main.tileSolid[448] = true;
			Main.tileFrameImportant[427] = true;
			Main.tileSolidTop[427] = true;
			Main.tileSolid[427] = true;
			Main.tileNoAttach[427] = true;
			Main.tileTable[427] = true;
			Main.tileLavaDeath[427] = true;
			Main.tileNoSunLight[427] = false;
			for (int m = 435; m <= 439; m++)
			{
				Main.tileFrameImportant[m] = true;
				Main.tileSolidTop[m] = true;
				Main.tileSolid[m] = true;
				Main.tileNoAttach[m] = true;
				Main.tileTable[m] = true;
				Main.tileLavaDeath[m] = true;
				Main.tileNoSunLight[m] = false;
			}
			Main.tileSolid[284] = true;
			Main.tileBlockLight[284] = true;
			Main.tileSolid[346] = true;
			Main.tileBlockLight[346] = true;
			Main.tileLighted[346] = true;
			Main.tileShine[346] = 2000;
			Main.tileShine2[346] = true;
			Main.tileBrick[346] = true;
			Main.tileMergeDirt[346] = true;
			Main.tileSolid[347] = true;
			Main.tileBlockLight[347] = true;
			Main.tileLighted[347] = true;
			Main.tileShine[347] = 1900;
			Main.tileShine2[347] = true;
			Main.tileBrick[347] = true;
			Main.tileMergeDirt[347] = true;
			Main.tileSolid[348] = true;
			Main.tileBlockLight[348] = true;
			Main.tileLighted[348] = true;
			Main.tileShine[348] = 1800;
			Main.tileShine2[348] = true;
			Main.tileBrick[348] = true;
			Main.tileMergeDirt[348] = true;
			Main.tileSolid[350] = true;
			Main.tileBlockLight[350] = true;
			Main.tileLighted[350] = true;
			Main.tileBrick[350] = true;
			Main.tileMergeDirt[350] = true;
			Main.tileGlowMask[350] = 94;
			Main.tileGlowMask[390] = 130;
			Main.tileGlowMask[381] = 126;
			Main.tileGlowMask[370] = 111;
			Main.tileGlowMask[391] = 131;
			Main.tileGlowMask[429] = 214;
			Main.tileGlowMask[209] = 215;
			Main.tileGlowMask[445] = 214;
			Main.tileLighted[429] = true;
			Main.tileLighted[209] = true;
			Main.tileGlowMask[410] = 201;
			Main.tileSolid[370] = true;
			Main.tileBlockLight[370] = true;
			Main.tileLighted[370] = true;
			Main.tileShine[370] = 1900;
			Main.tileShine2[370] = true;
			Main.tileBrick[370] = true;
			Main.tileMergeDirt[370] = true;
			Main.tileContainer[21] = true;
			Main.tileContainer[88] = true;
			Main.tileSign[55] = true;
			Main.tileSign[85] = true;
			Main.tileSign[425] = true;
			Main.tileSolid[383] = true;
			Main.tileBrick[383] = true;
			Main.tileBlockLight[383] = true;
			Main.tileSolid[385] = true;
			Main.tileBrick[385] = true;
			Main.tileBlockLight[385] = true;
			Main.tileSolid[396] = true;
			Main.tileBlockLight[396] = true;
			Main.tileSolid[397] = true;
			Main.tileBlockLight[397] = true;
			Main.tileSolid[399] = true;
			Main.tileBlockLight[399] = true;
			Main.tileSolid[401] = true;
			Main.tileBlockLight[401] = true;
			Main.tileSolid[398] = true;
			Main.tileBlockLight[398] = true;
			Main.tileSolid[400] = true;
			Main.tileBlockLight[400] = true;
			Main.tileSolid[402] = true;
			Main.tileBlockLight[402] = true;
			Main.tileSolid[403] = true;
			Main.tileBlockLight[403] = true;
			Main.tileSolid[404] = true;
			Main.tileBlockLight[404] = true;
			Main.tileSolid[407] = true;
			Main.tileBlockLight[407] = true;
			Main.tileShine2[407] = true;
			Main.tileShine[407] = 1000;
			Main.tileFrameImportant[36] = true;
			Main.tileFrameImportant[275] = true;
			Main.tileFrameImportant[276] = true;
			Main.tileFrameImportant[277] = true;
			Main.tileFrameImportant[278] = true;
			Main.tileFrameImportant[279] = true;
			Main.tileFrameImportant[280] = true;
			Main.tileFrameImportant[281] = true;
			Main.tileFrameImportant[282] = true;
			Main.tileFrameImportant[285] = true;
			Main.tileFrameImportant[286] = true;
			Main.tileFrameImportant[414] = true;
			Main.tileFrameImportant[413] = true;
			Main.tileFrameImportant[309] = true;
			Main.tileFrameImportant[310] = true;
			Main.tileFrameImportant[339] = true;
			Main.tileLighted[286] = true;
			Main.tileLighted[302] = true;
			Main.tileFrameImportant[298] = true;
			Main.tileFrameImportant[299] = true;
			Main.tileSolid[170] = true;
			Main.tileFrameImportant[171] = true;
			Main.tileLighted[171] = true;
			Main.tileFrameImportant[247] = true;
			Main.tileFrameImportant[245] = true;
			Main.tileFrameImportant[246] = true;
			Main.tileFrameImportant[239] = true;
			Main.tileFrameImportant[240] = true;
			Main.tileFrameImportant[241] = true;
			Main.tileFrameImportant[242] = true;
			Main.tileFrameImportant[243] = true;
			Main.tileFrameImportant[244] = true;
			Main.tileFrameImportant[254] = true;
			Main.tileSolid[221] = true;
			Main.tileBlockLight[221] = true;
			Main.tileMergeDirt[221] = true;
			Main.tileLighted[96] = true;
			Main.tileMergeDirt[250] = true;
			Main.tileSolid[272] = true;
			Main.tileBlockLight[272] = true;
			Main.tileSolid[229] = true;
			Main.tileBlockLight[229] = true;
			Main.tileMergeDirt[229] = true;
			Main.tileSolid[230] = true;
			Main.tileBlockLight[230] = true;
			Main.tileMergeDirt[230] = true;
			Main.tileSolid[222] = true;
			Main.tileBlockLight[222] = true;
			Main.tileMergeDirt[222] = true;
			Main.tileSolid[223] = true;
			Main.tileBlockLight[223] = true;
			Main.tileMergeDirt[223] = true;
			Main.tileSolid[224] = true;
			Main.tileBlockLight[224] = true;
			Main.tileFrameImportant[237] = true;
			Main.tileFrameImportant[238] = true;
			Main.tileSolid[225] = true;
			Main.tileBlockLight[225] = true;
			Main.tileBrick[225] = true;
			Main.tileSolid[226] = true;
			Main.tileBlockLight[226] = true;
			Main.tileBrick[226] = true;
			Main.tileSolid[235] = true;
			Main.tileBlockLight[235] = true;
			Main.tileFrameImportant[235] = true;
			Main.tileLighted[238] = true;
			Main.tileCut[254] = true;
			Main.tileFrameImportant[236] = true;
			Main.tileCut[236] = true;
			Main.tileSolid[191] = true;
			Main.tileBrick[191] = true;
			Main.tileBlockLight[191] = true;
			Main.tileSolid[211] = true;
			Main.tileBlockLight[211] = true;
			Main.tileSolid[208] = true;
			Main.tileBrick[208] = true;
			Main.tileBlockLight[208] = true;
			Main.tileSolid[192] = true;
			Main.tileBrick[192] = true;
			Main.tileBlockLight[192] = true;
			Main.tileSolid[193] = true;
			Main.tileBrick[193] = true;
			Main.tileBlockLight[193] = true;
			Main.tileMergeDirt[193] = true;
			Main.tileSolid[194] = true;
			Main.tileBrick[194] = true;
			Main.tileBlockLight[194] = true;
			Main.tileSolid[195] = true;
			Main.tileBrick[195] = true;
			Main.tileMergeDirt[195] = true;
			Main.tileBlockLight[195] = true;
			Main.tileBlockLight[200] = true;
			Main.tileSolid[200] = true;
			Main.tileBrick[200] = true;
			Main.tileBlockLight[203] = true;
			Main.tileSolid[203] = true;
			Main.tileMergeDirt[203] = true;
			Main.tileBlockLight[204] = true;
			Main.tileSolid[204] = true;
			Main.tileMergeDirt[204] = true;
			Main.tileBlockLight[165] = true;
			Main.tileShine2[147] = true;
			Main.tileShine2[161] = true;
			Main.tileShine2[163] = true;
			Main.tileShine2[164] = true;
			Main.tileSolid[189] = true;
			Main.tileBlockLight[51] = true;
			Main.tileLighted[204] = true;
			Main.tileShine[204] = 1150;
			Main.tileShine2[204] = true;
			Main.tileSolid[190] = true;
			Main.tileBlockLight[190] = true;
			Main.tileBrick[190] = true;
			Main.tileSolid[198] = true;
			Main.tileMergeDirt[198] = true;
			Main.tileBrick[198] = true;
			Main.tileBlockLight[198] = true;
			Main.tileSolid[206] = true;
			Main.tileBlockLight[206] = true;
			Main.tileMergeDirt[206] = true;
			Main.tileBrick[206] = true;
			Main.tileBlockLight[234] = true;
			Main.tileSolid[248] = true;
			Main.tileSolid[249] = true;
			Main.tileSolid[250] = true;
			Main.tileBrick[248] = true;
			Main.tileBrick[249] = true;
			Main.tileBrick[250] = true;
			Main.tileSolid[251] = true;
			Main.tileSolid[252] = true;
			Main.tileBrick[252] = true;
			Main.tileSolid[253] = true;
			Main.tileBrick[253] = true;
			Main.tileMergeDirt[251] = true;
			Main.tileMergeDirt[252] = true;
			Main.tileMergeDirt[253] = true;
			Main.tileBlockLight[251] = true;
			Main.tileBlockLight[252] = true;
			Main.tileBlockLight[253] = true;
			Main.tileBlockLight[248] = true;
			Main.tileBlockLight[249] = true;
			Main.tileBlockLight[250] = true;
			Main.tileLargeFrames[273] = 1;
			Main.tileSolid[273] = true;
			Main.tileBlockLight[273] = true;
			Main.tileLargeFrames[274] = 1;
			Main.tileSolid[274] = true;
			Main.tileBlockLight[274] = true;
			for (int n = 255; n <= 268; n++)
			{
				Main.tileSolid[n] = true;
				if (n > 261)
				{
					Main.tileLighted[n] = true;
					Main.tileShine2[n] = true;
				}
			}
			Main.tileFrameImportant[269] = true;
			Main.tileFrameImportant[390] = true;
			Main.tileNoAttach[390] = true;
			Main.tileLavaDeath[390] = true;
			Main.tileLighted[390] = true;
			Main.wallHouse[168] = true;
			Main.wallHouse[169] = true;
			Main.wallHouse[142] = true;
			Main.wallHouse[143] = true;
			Main.wallHouse[144] = true;
			Main.wallHouse[149] = true;
			Main.wallHouse[151] = true;
			Main.wallHouse[150] = true;
			Main.wallHouse[152] = true;
			Main.wallHouse[175] = true;
			Main.wallHouse[176] = true;
			Main.wallHouse[182] = true;
			for (int num = 153; num < 167; num++)
			{
				Main.wallHouse[num] = true;
			}
			Main.wallHouse[146] = true;
			Main.wallHouse[147] = true;
			Main.wallHouse[149] = true;
			Main.wallHouse[167] = true;
			Main.wallHouse[168] = true;
			Main.wallHouse[133] = true;
			Main.wallHouse[134] = true;
			Main.wallHouse[135] = true;
			Main.wallHouse[136] = true;
			Main.wallHouse[137] = true;
			Main.wallHouse[75] = true;
			Main.wallHouse[76] = true;
			Main.wallHouse[78] = true;
			Main.wallHouse[82] = true;
			Main.wallHouse[77] = true;
			Main.wallHouse[1] = true;
			Main.wallHouse[4] = true;
			Main.wallHouse[5] = true;
			Main.wallHouse[6] = true;
			Main.wallHouse[10] = true;
			Main.wallHouse[11] = true;
			Main.wallHouse[12] = true;
			Main.wallHouse[16] = true;
			Main.wallHouse[17] = true;
			Main.wallHouse[18] = true;
			Main.wallHouse[19] = true;
			Main.wallHouse[20] = true;
			Main.wallHouse[21] = true;
			Main.wallHouse[22] = true;
			Main.wallHouse[23] = true;
			Main.wallHouse[24] = true;
			Main.wallHouse[25] = true;
			Main.wallHouse[26] = true;
			Main.wallHouse[27] = true;
			Main.wallHouse[29] = true;
			Main.wallHouse[30] = true;
			Main.wallHouse[31] = true;
			Main.wallHouse[32] = true;
			Main.wallHouse[33] = true;
			Main.wallHouse[34] = true;
			Main.wallHouse[35] = true;
			Main.wallHouse[36] = true;
			Main.wallHouse[37] = true;
			Main.wallHouse[38] = true;
			Main.wallHouse[39] = true;
			Main.wallHouse[41] = true;
			Main.wallHouse[42] = true;
			Main.wallHouse[43] = true;
			Main.wallHouse[44] = true;
			Main.wallHouse[45] = true;
			Main.wallHouse[46] = true;
			Main.wallHouse[47] = true;
			Main.wallHouse[66] = true;
			Main.wallHouse[67] = true;
			Main.wallHouse[68] = true;
			Main.wallHouse[72] = true;
			Main.wallHouse[73] = true;
			Main.wallHouse[107] = true;
			Main.wallHouse[106] = true;
			Main.wallHouse[109] = true;
			Main.wallHouse[110] = true;
			Main.wallHouse[111] = true;
			Main.wallHouse[112] = true;
			Main.wallHouse[113] = true;
			Main.wallHouse[114] = true;
			Main.wallHouse[115] = true;
			Main.wallHouse[116] = true;
			Main.wallHouse[117] = true;
			Main.wallHouse[118] = true;
			Main.wallHouse[119] = true;
			Main.wallHouse[120] = true;
			Main.wallHouse[121] = true;
			Main.wallHouse[122] = true;
			Main.wallHouse[123] = true;
			Main.wallHouse[124] = true;
			Main.wallHouse[125] = true;
			Main.wallHouse[108] = true;
			Main.wallHouse[100] = true;
			Main.wallHouse[101] = true;
			Main.wallHouse[102] = true;
			Main.wallHouse[103] = true;
			Main.wallHouse[104] = true;
			Main.wallHouse[105] = true;
			Main.wallHouse[84] = true;
			Main.wallHouse[74] = true;
			Main.wallHouse[85] = true;
			Main.wallHouse[88] = true;
			Main.wallHouse[89] = true;
			Main.wallHouse[90] = true;
			Main.wallHouse[91] = true;
			Main.wallHouse[92] = true;
			Main.wallHouse[93] = true;
			Main.wallHouse[126] = true;
			Main.wallHouse[127] = true;
			Main.wallHouse[128] = true;
			Main.wallHouse[129] = true;
			Main.wallHouse[130] = true;
			Main.wallHouse[131] = true;
			Main.wallHouse[132] = true;
			Main.wallHouse[138] = true;
			Main.wallHouse[139] = true;
			Main.wallHouse[140] = true;
			Main.wallHouse[141] = true;
			Main.wallHouse[177] = true;
			Main.wallHouse[172] = true;
			Main.wallHouse[174] = true;
			Main.wallHouse[223] = true;
			Main.wallHouse[230] = true;
			Main.wallHouse[228] = true;
			Main.wallHouse[229] = true;
			Main.wallLight[0] = true;
			Main.wallLight[21] = true;
			Main.wallLight[106] = true;
			Main.wallLight[107] = true;
			Main.wallLight[138] = true;
			Main.wallLight[140] = true;
			Main.wallLight[141] = true;
			Main.wallLight[139] = true;
			Main.wallLight[145] = true;
			Main.wallLight[150] = true;
			Main.wallLight[152] = true;
			Main.wallLight[168] = true;
			for (int num2 = 0; num2 < 231; num2++)
			{
				Main.wallDungeon[num2] = false;
			}
			Main.wallDungeon[7] = true;
			Main.wallDungeon[8] = true;
			Main.wallDungeon[9] = true;
			Main.wallDungeon[94] = true;
			Main.wallDungeon[95] = true;
			Main.wallDungeon[96] = true;
			Main.wallDungeon[97] = true;
			Main.wallDungeon[98] = true;
			Main.wallDungeon[99] = true;
			for (int num3 = 0; num3 < 10; num3++)
			{
				Main.recentWorld[num3] = "";
				Main.recentIP[num3] = "";
				Main.recentPort[num3] = 0;
			}
			if (Main.rand == null)
			{
				Main.rand = new UnifiedRandom((int)DateTime.Now.Ticks);
			}
			this.SetTitle();
			Main.lo = Main.rand.Next(6);
			Main.critterCage = true;
			for (int num4 = 0; num4 < 3600; num4++)
			{
				Main.CritterCages();
			}
			Main.critterCage = false;
			Main.tileBrick[1] = true;
			Main.tileBrick[54] = true;
			Main.tileBrick[118] = true;
			Main.tileBrick[119] = true;
			Main.tileBrick[120] = true;
			Main.tileBrick[121] = true;
			Main.tileBrick[122] = true;
			Main.tileBrick[140] = true;
			Main.tileBrick[148] = true;
			Main.tileBrick[150] = true;
			Main.tileBrick[151] = true;
			Main.tileBrick[152] = true;
			Main.tileBrick[30] = true;
			Main.tileBrick[38] = true;
			Main.tileBrick[39] = true;
			Main.tileBrick[41] = true;
			Main.tileBrick[43] = true;
			Main.tileBrick[44] = true;
			Main.tileBrick[45] = true;
			Main.tileBrick[46] = true;
			Main.tileBrick[47] = true;
			Main.tileBrick[75] = true;
			Main.tileBrick[76] = true;
			Main.tileBrick[160] = true;
			Main.tileBrick[2] = true;
			Main.tileBrick[199] = true;
			Main.tileBrick[23] = true;
			Main.tileBrick[60] = true;
			Main.tileBrick[70] = true;
			Main.tileBrick[109] = true;
			Main.tileBrick[53] = true;
			Main.tileBrick[116] = true;
			Main.tileBrick[234] = true;
			Main.tileBrick[112] = true;
			Main.tileBrick[147] = true;
			Main.tileBrick[153] = true;
			Main.tileBrick[154] = true;
			Main.tileBrick[155] = true;
			Main.tileBrick[156] = true;
			Main.tileBrick[157] = true;
			Main.tileBrick[158] = true;
			Main.tileBrick[159] = true;
			Main.tileMergeDirt[202] = true;
			Main.tileBrick[202] = true;
			Main.tileSolid[202] = true;
			Main.tileBlockLight[202] = true;
			Main.tileBrick[161] = true;
			Main.tileBlockLight[161] = true;
			Main.tileBlockLight[163] = true;
			Main.tileBlockLight[164] = true;
			Main.tileSolid[188] = true;
			Main.tileBlockLight[188] = true;
			Main.tileBrick[188] = true;
			Main.tileMergeDirt[188] = true;
			Main.tileBrick[179] = true;
			Main.tileSolid[179] = true;
			Main.tileBlockLight[179] = true;
			Main.tileMoss[179] = true;
			Main.tileBrick[381] = true;
			Main.tileSolid[381] = true;
			Main.tileBlockLight[381] = true;
			Main.tileMoss[381] = true;
			Main.tileBrick[180] = true;
			Main.tileSolid[180] = true;
			Main.tileBlockLight[180] = true;
			Main.tileMoss[180] = true;
			Main.tileBrick[181] = true;
			Main.tileSolid[181] = true;
			Main.tileBlockLight[181] = true;
			Main.tileMoss[181] = true;
			Main.tileBrick[182] = true;
			Main.tileSolid[182] = true;
			Main.tileBlockLight[182] = true;
			Main.tileMoss[182] = true;
			Main.tileBrick[183] = true;
			Main.tileSolid[183] = true;
			Main.tileBlockLight[183] = true;
			Main.tileMoss[183] = true;
			Main.tileMergeDirt[177] = true;
			Main.tileMergeDirt[190] = true;
			Main.tileSolid[196] = true;
			Main.tileSolid[197] = true;
			Main.tileMergeDirt[197] = true;
			Main.tileBlockLight[197] = true;
			Main.tileNoSunLight[197] = true;
			Main.tileBrick[175] = true;
			Main.tileSolid[175] = true;
			Main.tileBlockLight[175] = true;
			Main.tileBrick[176] = true;
			Main.tileSolid[176] = true;
			Main.tileBlockLight[176] = true;
			Main.tileBrick[177] = true;
			Main.tileSolid[177] = true;
			Main.tileBlockLight[177] = true;
			Main.tileBrick[225] = true;
			Main.tileBrick[229] = true;
			Main.tileShine[221] = 925;
			Main.tileShine[222] = 875;
			Main.tileShine[223] = 825;
			Main.tileShine2[221] = true;
			Main.tileShine2[222] = true;
			Main.tileShine2[223] = true;
			Main.tileMergeDirt[175] = true;
			Main.tileMergeDirt[176] = true;
			Main.tileMergeDirt[177] = true;
			Main.tileMergeDirt[208] = true;
			Main.tileBrick[162] = true;
			Main.tileSolid[162] = true;
			Main.tileBlockLight[162] = false;
			Main.tileBrick[163] = true;
			Main.tileSolid[163] = true;
			Main.tileBrick[164] = true;
			Main.tileSolid[164] = true;
			Main.tileShine2[6] = true;
			Main.tileShine2[7] = true;
			Main.tileShine2[8] = true;
			Main.tileShine2[9] = true;
			Main.tileShine2[166] = true;
			Main.tileShine2[167] = true;
			Main.tileShine2[168] = true;
			Main.tileShine2[169] = true;
			Main.tileShine2[12] = true;
			Main.tileShine2[21] = true;
			Main.tileShine2[441] = true;
			Main.tileShine2[22] = true;
			Main.tileShine2[25] = true;
			Main.tileShine2[45] = true;
			Main.tileShine2[46] = true;
			Main.tileShine2[47] = true;
			Main.tileShine2[63] = true;
			Main.tileShine2[64] = true;
			Main.tileShine2[65] = true;
			Main.tileShine2[66] = true;
			Main.tileShine2[67] = true;
			Main.tileShine2[68] = true;
			Main.tileShine2[107] = true;
			Main.tileShine2[108] = true;
			Main.tileShine2[111] = true;
			Main.tileShine2[121] = true;
			Main.tileShine2[122] = true;
			Main.tileShine2[117] = true;
			Main.tileShine2[211] = true;
			Main.tileShine[129] = 300;
			Main.tileNoFail[330] = true;
			Main.tileNoFail[331] = true;
			Main.tileNoFail[332] = true;
			Main.tileNoFail[333] = true;
			Main.tileNoFail[254] = true;
			Main.tileNoFail[129] = true;
			Main.tileNoFail[192] = true;
			Main.tileHammer[26] = true;
			Main.tileHammer[31] = true;
			Main.tileAxe[5] = true;
			Main.tileAxe[72] = true;
			Main.tileAxe[80] = true;
			Main.tileAxe[323] = true;
			Main.tileBrick[59] = true;
			Main.tileBrick[234] = true;
			Main.tileSolid[234] = true;
			Main.tileMergeDirt[234] = true;
			Main.tileSand[53] = true;
			Main.tileSand[112] = true;
			Main.tileSand[116] = true;
			Main.tileSand[234] = true;
			Main.tileFrameImportant[233] = true;
			Main.tileLighted[215] = true;
			Main.tileFrameImportant[227] = true;
			Main.tileFrameImportant[228] = true;
			Main.tileFrameImportant[231] = true;
			Main.tileCut[231] = true;
			Main.tileFrameImportant[216] = true;
			Main.tileFrameImportant[217] = true;
			Main.tileFrameImportant[218] = true;
			Main.tileFrameImportant[219] = true;
			Main.tileFrameImportant[220] = true;
			Main.tileFrameImportant[338] = true;
			Main.tileFrameImportant[453] = true;
			Main.tileFrameImportant[456] = true;
			Main.tileFrameImportant[165] = true;
			Main.tileFrameImportant[209] = true;
			Main.tileFrameImportant[215] = true;
			Main.tileFrameImportant[210] = true;
			Main.tileFrameImportant[212] = true;
			Main.tileFrameImportant[207] = true;
			Main.tileFrameImportant[178] = true;
			Main.tileFrameImportant[184] = true;
			Main.tileFrameImportant[185] = true;
			Main.tileFrameImportant[186] = true;
			Main.tileFrameImportant[187] = true;
			Main.tileFrameImportant[173] = true;
			Main.tileFrameImportant[174] = true;
			Main.tileLighted[173] = true;
			Main.tileLighted[174] = true;
			Main.tileFrameImportant[139] = true;
			Main.tileLighted[160] = true;
			Main.tileLighted[149] = true;
			Main.tileFrameImportant[149] = true;
			Main.tileFrameImportant[142] = true;
			Main.tileFrameImportant[143] = true;
			Main.tileFrameImportant[144] = true;
			Main.tileStone[131] = true;
			Main.tileFrameImportant[136] = true;
			Main.tileFrameImportant[137] = true;
			Main.tileFrameImportant[138] = true;
			Main.tileBlockLight[137] = true;
			Main.tileSolid[137] = true;
			Main.tileBlockLight[160] = true;
			Main.tileSolid[160] = true;
			Main.tileMergeDirt[160] = true;
			Main.tileBlockLight[161] = true;
			Main.tileSolid[161] = true;
			Main.tileBlockLight[145] = true;
			Main.tileSolid[145] = true;
			Main.tileMergeDirt[145] = true;
			Main.tileBlockLight[146] = true;
			Main.tileSolid[146] = true;
			Main.tileMergeDirt[146] = true;
			Main.tileBlockLight[147] = true;
			Main.tileSolid[147] = true;
			Main.tileBlockLight[148] = true;
			Main.tileSolid[148] = true;
			Main.tileMergeDirt[148] = true;
			Main.tileSolid[138] = true;
			Main.tileBlockLight[140] = true;
			Main.tileSolid[140] = true;
			Main.tileBlockLight[151] = true;
			Main.tileSolid[151] = true;
			Main.tileMergeDirt[151] = true;
			Main.tileBlockLight[152] = true;
			Main.tileSolid[152] = true;
			Main.tileMergeDirt[152] = true;
			Main.tileBlockLight[153] = true;
			Main.tileSolid[153] = true;
			Main.tileMergeDirt[153] = true;
			Main.tileBlockLight[154] = true;
			Main.tileSolid[154] = true;
			Main.tileMergeDirt[154] = true;
			Main.tileBlockLight[155] = true;
			Main.tileSolid[155] = true;
			Main.tileMergeDirt[155] = true;
			Main.tileBlockLight[156] = true;
			Main.tileSolid[156] = true;
			Main.tileMergeDirt[156] = true;
			Main.tileMergeDirt[150] = true;
			Main.tileBlockLight[157] = true;
			Main.tileSolid[157] = true;
			Main.tileMergeDirt[157] = true;
			Main.tileBlockLight[158] = true;
			Main.tileSolid[158] = true;
			Main.tileMergeDirt[158] = true;
			Main.tileBlockLight[159] = true;
			Main.tileSolid[159] = true;
			Main.tileMergeDirt[159] = true;
			Main.tileFrameImportant[320] = true;
			Main.tileShine[22] = 1150;
			Main.tileShine[6] = 1150;
			Main.tileShine[7] = 1100;
			Main.tileShine[8] = 1000;
			Main.tileShine[9] = 1050;
			Main.tileShine[166] = 1125;
			Main.tileShine[167] = 1075;
			Main.tileShine[168] = 1025;
			Main.tileShine[169] = 975;
			Main.tileShine[178] = 500;
			Main.tileShine2[178] = true;
			Main.tileShine[12] = 300;
			Main.tileShine[21] = 1200;
			Main.tileShine[441] = 1200;
			Main.tileShine[63] = 900;
			Main.tileShine[64] = 900;
			Main.tileShine[65] = 900;
			Main.tileShine[66] = 900;
			Main.tileShine[67] = 900;
			Main.tileShine[68] = 900;
			Main.tileShine[45] = 1900;
			Main.tileShine[46] = 2000;
			Main.tileShine[47] = 2100;
			Main.tileShine[122] = 1800;
			Main.tileShine[121] = 1850;
			Main.tileShine[125] = 600;
			Main.tileShine[109] = 9000;
			Main.tileShine[110] = 9000;
			Main.tileShine[116] = 9000;
			Main.tileShine[117] = 9000;
			Main.tileShine[118] = 8000;
			Main.tileShine[107] = 950;
			Main.tileShine[108] = 900;
			Main.tileShine[111] = 850;
			Main.tileShine[211] = 800;
			Main.tileLighted[4] = true;
			Main.tileLighted[17] = true;
			Main.tileLighted[133] = true;
			Main.tileLighted[31] = true;
			Main.tileLighted[33] = true;
			Main.tileLighted[34] = true;
			Main.tileLighted[35] = true;
			Main.tileLighted[37] = true;
			Main.tileLighted[42] = true;
			Main.tileLighted[49] = true;
			Main.tileLighted[58] = true;
			Main.tileLighted[61] = true;
			Main.tileLighted[70] = true;
			Main.tileLighted[71] = true;
			Main.tileLighted[72] = true;
			Main.tileLighted[76] = true;
			Main.tileLighted[77] = true;
			Main.tileLighted[19] = true;
			Main.tileLighted[22] = true;
			Main.tileLighted[26] = true;
			Main.tileLighted[83] = true;
			Main.tileLighted[84] = true;
			Main.tileLighted[92] = true;
			Main.tileLighted[93] = true;
			Main.tileLighted[95] = true;
			Main.tileLighted[98] = true;
			Main.tileLighted[100] = true;
			Main.tileLighted[109] = true;
			Main.tileLighted[125] = true;
			Main.tileLighted[126] = true;
			Main.tileLighted[129] = true;
			Main.tileLighted[140] = true;
			Main.tileLighted[270] = true;
			Main.tileLighted[271] = true;
			Main.tileMergeDirt[1] = true;
			Main.tileMergeDirt[6] = true;
			Main.tileMergeDirt[7] = true;
			Main.tileMergeDirt[8] = true;
			Main.tileMergeDirt[9] = true;
			Main.tileMergeDirt[166] = true;
			Main.tileMergeDirt[167] = true;
			Main.tileMergeDirt[168] = true;
			Main.tileMergeDirt[169] = true;
			Main.tileMergeDirt[22] = true;
			Main.tileMergeDirt[25] = true;
			Main.tileMergeDirt[30] = true;
			Main.tileMergeDirt[37] = true;
			Main.tileMergeDirt[38] = true;
			Main.tileMergeDirt[40] = true;
			Main.tileMergeDirt[53] = true;
			Main.tileMergeDirt[56] = true;
			Main.tileMergeDirt[107] = true;
			Main.tileMergeDirt[108] = true;
			Main.tileMergeDirt[111] = true;
			Main.tileMergeDirt[112] = true;
			Main.tileMergeDirt[116] = true;
			Main.tileMergeDirt[117] = true;
			Main.tileMergeDirt[123] = true;
			Main.tileMergeDirt[140] = true;
			Main.tileMergeDirt[39] = true;
			Main.tileMergeDirt[122] = true;
			Main.tileMergeDirt[121] = true;
			Main.tileMergeDirt[120] = true;
			Main.tileMergeDirt[119] = true;
			Main.tileMergeDirt[118] = true;
			Main.tileMergeDirt[47] = true;
			Main.tileMergeDirt[46] = true;
			Main.tileMergeDirt[45] = true;
			Main.tileMergeDirt[44] = true;
			Main.tileMergeDirt[43] = true;
			Main.tileMergeDirt[41] = true;
			Main.tileFrameImportant[380] = true;
			Main.tileFrameImportant[201] = true;
			Main.tileFrameImportant[3] = true;
			Main.tileFrameImportant[4] = true;
			Main.tileFrameImportant[5] = true;
			Main.tileFrameImportant[10] = true;
			Main.tileFrameImportant[11] = true;
			Main.tileFrameImportant[12] = true;
			Main.tileFrameImportant[13] = true;
			Main.tileFrameImportant[14] = true;
			Main.tileFrameImportant[15] = true;
			Main.tileFrameImportant[16] = true;
			Main.tileFrameImportant[17] = true;
			Main.tileFrameImportant[18] = true;
			Main.tileFrameImportant[19] = true;
			Main.tileFrameImportant[20] = true;
			Main.tileFrameImportant[21] = true;
			Main.tileFrameImportant[441] = true;
			Main.tileFrameImportant[24] = true;
			Main.tileFrameImportant[26] = true;
			Main.tileFrameImportant[27] = true;
			Main.tileFrameImportant[28] = true;
			Main.tileFrameImportant[29] = true;
			Main.tileFrameImportant[31] = true;
			Main.tileFrameImportant[33] = true;
			Main.tileFrameImportant[34] = true;
			Main.tileFrameImportant[35] = true;
			Main.tileFrameImportant[42] = true;
			Main.tileFrameImportant[50] = true;
			Main.tileFrameImportant[55] = true;
			Main.tileFrameImportant[61] = true;
			Main.tileFrameImportant[71] = true;
			Main.tileFrameImportant[72] = true;
			Main.tileFrameImportant[73] = true;
			Main.tileFrameImportant[74] = true;
			Main.tileFrameImportant[77] = true;
			Main.tileFrameImportant[78] = true;
			Main.tileFrameImportant[79] = true;
			Main.tileFrameImportant[81] = true;
			Main.tileFrameImportant[82] = true;
			Main.tileFrameImportant[83] = true;
			Main.tileFrameImportant[84] = true;
			Main.tileFrameImportant[85] = true;
			Main.tileFrameImportant[86] = true;
			Main.tileFrameImportant[87] = true;
			Main.tileFrameImportant[88] = true;
			Main.tileFrameImportant[89] = true;
			Main.tileFrameImportant[90] = true;
			Main.tileFrameImportant[91] = true;
			Main.tileFrameImportant[92] = true;
			Main.tileFrameImportant[93] = true;
			Main.tileFrameImportant[94] = true;
			Main.tileFrameImportant[95] = true;
			Main.tileFrameImportant[96] = true;
			Main.tileFrameImportant[97] = true;
			Main.tileFrameImportant[98] = true;
			Main.tileFrameImportant[99] = true;
			Main.tileFrameImportant[101] = true;
			Main.tileFrameImportant[102] = true;
			Main.tileFrameImportant[103] = true;
			Main.tileFrameImportant[104] = true;
			Main.tileFrameImportant[105] = true;
			Main.tileFrameImportant[100] = true;
			Main.tileFrameImportant[106] = true;
			Main.tileFrameImportant[110] = true;
			Main.tileFrameImportant[113] = true;
			Main.tileFrameImportant[114] = true;
			Main.tileFrameImportant[125] = true;
			Main.tileFrameImportant[287] = true;
			Main.tileFrameImportant[126] = true;
			Main.tileFrameImportant[128] = true;
			Main.tileFrameImportant[129] = true;
			Main.tileFrameImportant[132] = true;
			Main.tileFrameImportant[133] = true;
			Main.tileFrameImportant[134] = true;
			Main.tileFrameImportant[135] = true;
			Main.tileFrameImportant[172] = true;
			Main.tileFrameImportant[319] = true;
			Main.tileFrameImportant[323] = true;
			Main.tileFrameImportant[335] = true;
			Main.tileFrameImportant[337] = true;
			Main.tileFrameImportant[349] = true;
			Main.tileFrameImportant[376] = true;
			Main.tileFrameImportant[378] = true;
			Main.tileFrameImportant[425] = true;
			Main.tileFrameImportant[465] = true;
			Main.tileFrameImportant[141] = true;
			Main.tileFrameImportant[270] = true;
			Main.tileFrameImportant[271] = true;
			Main.tileFrameImportant[314] = true;
			Main.tileSolidTop[376] = true;
			Main.tileTable[376] = true;
			Main.tileTable[380] = true;
			Main.tileCut[201] = true;
			Main.tileCut[3] = true;
			Main.tileCut[24] = true;
			Main.tileCut[28] = true;
			Main.tileCut[32] = true;
			Main.tileCut[51] = true;
			Main.tileCut[52] = true;
			Main.tileCut[61] = true;
			Main.tileCut[62] = true;
			Main.tileCut[69] = true;
			Main.tileCut[71] = true;
			Main.tileCut[73] = true;
			Main.tileCut[74] = true;
			Main.tileCut[82] = true;
			Main.tileCut[83] = true;
			Main.tileCut[84] = true;
			Main.tileCut[110] = true;
			Main.tileCut[113] = true;
			Main.tileCut[115] = true;
			Main.tileCut[184] = true;
			Main.tileCut[205] = true;
			Main.tileCut[352] = true;
			Main.tileCut[382] = true;
			Main.tileCut[444] = true;
			Main.tileAlch[82] = true;
			Main.tileAlch[83] = true;
			Main.tileAlch[84] = true;
			Main.tileSolid[127] = true;
			Main.tileSolid[130] = true;
			Main.tileBlockLight[130] = true;
			Main.tileBlockLight[131] = true;
			Main.tileNoAttach[232] = true;
			Main.tileSolid[107] = true;
			Main.tileBlockLight[107] = true;
			Main.tileSolid[108] = true;
			Main.tileBlockLight[108] = true;
			Main.tileSolid[111] = true;
			Main.tileBlockLight[111] = true;
			Main.tileSolid[109] = true;
			Main.tileBlockLight[109] = true;
			Main.tileSolid[110] = false;
			Main.tileNoAttach[110] = true;
			Main.tileNoFail[110] = true;
			Main.tileSolid[112] = true;
			Main.tileBlockLight[112] = true;
			Main.tileSolid[116] = true;
			Main.tileBlockLight[116] = true;
			Main.tileBrick[117] = true;
			Main.tileBrick[25] = true;
			Main.tileBrick[203] = true;
			Main.tileSolid[117] = true;
			Main.tileBlockLight[117] = true;
			Main.tileSolid[123] = true;
			Main.tileBlockLight[123] = true;
			Main.tileNoFail[165] = true;
			Main.tileNoFail[184] = true;
			Main.tileNoFail[185] = true;
			Main.tileNoFail[186] = true;
			Main.tileNoFail[187] = true;
			Main.tileSolid[118] = true;
			Main.tileBlockLight[118] = true;
			Main.tileSolid[119] = true;
			Main.tileBlockLight[119] = true;
			Main.tileSolid[120] = true;
			Main.tileBlockLight[120] = true;
			Main.tileSolid[121] = true;
			Main.tileBlockLight[121] = true;
			Main.tileSolid[122] = true;
			Main.tileBlockLight[122] = true;
			Main.tileSolid[150] = true;
			Main.tileBlockLight[150] = true;
			Main.tileBlockLight[115] = true;
			Main.tileSolid[199] = true;
			Main.tileBlockLight[199] = true;
			Main.tileNoFail[162] = true;
			Main.tileSolid[0] = true;
			Main.tileBlockLight[0] = true;
			Main.tileSolid[1] = true;
			Main.tileBlockLight[1] = true;
			Main.tileSolid[2] = true;
			Main.tileBlockLight[2] = true;
			Main.tileSolid[3] = false;
			Main.tileNoAttach[3] = true;
			Main.tileNoFail[3] = true;
			Main.tileNoFail[201] = true;
			Main.tileSolid[4] = false;
			Main.tileNoAttach[4] = true;
			Main.tileNoFail[4] = true;
			Main.tileNoFail[24] = true;
			Main.tileSolid[5] = false;
			Main.tileSolid[6] = true;
			Main.tileBlockLight[6] = true;
			Main.tileSolid[7] = true;
			Main.tileBlockLight[7] = true;
			Main.tileSolid[8] = true;
			Main.tileBlockLight[8] = true;
			Main.tileSolid[9] = true;
			Main.tileBlockLight[9] = true;
			Main.tileSolid[166] = true;
			Main.tileBlockLight[166] = true;
			Main.tileSolid[167] = true;
			Main.tileBlockLight[167] = true;
			Main.tileSolid[168] = true;
			Main.tileBlockLight[168] = true;
			Main.tileSolid[169] = true;
			Main.tileBlockLight[169] = true;
			Main.tileBlockLight[10] = true;
			Main.tileSolid[10] = true;
			Main.tileNoAttach[10] = true;
			Main.tileBlockLight[10] = true;
			Main.tileSolid[11] = false;
			Main.tileSolidTop[19] = true;
			Main.tileSolid[19] = true;
			Main.tileSolid[22] = true;
			Main.tileSolid[23] = true;
			Main.tileSolid[25] = true;
			Main.tileSolid[30] = true;
			Main.tileNoFail[32] = true;
			Main.tileBlockLight[32] = true;
			Main.tileNoFail[352] = true;
			Main.tileBlockLight[352] = true;
			Main.tileSolid[37] = true;
			Main.tileBlockLight[37] = true;
			Main.tileSolid[38] = true;
			Main.tileBlockLight[38] = true;
			Main.tileSolid[39] = true;
			Main.tileBlockLight[39] = true;
			Main.tileSolid[40] = true;
			Main.tileBlockLight[40] = true;
			Main.tileSolid[41] = true;
			Main.tileBlockLight[41] = true;
			Main.tileSolid[43] = true;
			Main.tileBlockLight[43] = true;
			Main.tileSolid[44] = true;
			Main.tileBlockLight[44] = true;
			Main.tileSolid[45] = true;
			Main.tileBlockLight[45] = true;
			Main.tileSolid[46] = true;
			Main.tileBlockLight[46] = true;
			Main.tileSolid[47] = true;
			Main.tileBlockLight[47] = true;
			Main.tileSolid[48] = true;
			Main.tileBlockLight[48] = true;
			Main.tileSolid[53] = true;
			Main.tileBlockLight[53] = true;
			Main.tileSolid[54] = true;
			Main.tileBlockLight[52] = true;
			Main.tileBlockLight[205] = true;
			Main.tileSolid[56] = true;
			Main.tileBlockLight[56] = true;
			Main.tileSolid[57] = true;
			Main.tileBlockLight[57] = true;
			Main.tileSolid[58] = true;
			Main.tileBlockLight[58] = true;
			Main.tileBlockLight[382] = true;
			Main.tileSolid[59] = true;
			Main.tileBlockLight[59] = true;
			Main.tileSolid[60] = true;
			Main.tileBlockLight[60] = true;
			Main.tileSolid[63] = true;
			Main.tileBlockLight[63] = true;
			Main.tileStone[63] = true;
			Main.tileStone[130] = true;
			Main.tileSolid[64] = true;
			Main.tileBlockLight[64] = true;
			Main.tileStone[64] = true;
			Main.tileSolid[65] = true;
			Main.tileBlockLight[65] = true;
			Main.tileStone[65] = true;
			Main.tileSolid[66] = true;
			Main.tileBlockLight[66] = true;
			Main.tileStone[66] = true;
			Main.tileSolid[67] = true;
			Main.tileBlockLight[67] = true;
			Main.tileStone[67] = true;
			Main.tileSolid[68] = true;
			Main.tileBlockLight[68] = true;
			Main.tileStone[68] = true;
			Main.tileSolid[75] = true;
			Main.tileBlockLight[75] = true;
			Main.tileSolid[76] = true;
			Main.tileBlockLight[76] = true;
			Main.tileSolid[70] = true;
			Main.tileBlockLight[70] = true;
			Main.tileNoFail[50] = true;
			Main.tileNoAttach[50] = true;
			Main.tileDungeon[41] = true;
			Main.tileDungeon[43] = true;
			Main.tileDungeon[44] = true;
			Main.tileBlockLight[30] = true;
			Main.tileBlockLight[25] = true;
			Main.tileBlockLight[23] = true;
			Main.tileBlockLight[22] = true;
			Main.tileBlockLight[62] = true;
			Main.tileSolidTop[18] = true;
			Main.tileSolidTop[14] = true;
			Main.tileSolidTop[16] = true;
			Main.tileSolidTop[134] = true;
			Main.tileSolidTop[114] = true;
			Main.tileNoAttach[20] = true;
			Main.tileNoAttach[19] = true;
			Main.tileNoAttach[13] = true;
			Main.tileNoAttach[14] = true;
			Main.tileNoAttach[15] = true;
			Main.tileNoAttach[16] = true;
			Main.tileNoAttach[134] = true;
			Main.tileNoAttach[17] = true;
			Main.tileNoAttach[18] = true;
			Main.tileNoAttach[21] = true;
			Main.tileNoAttach[441] = true;
			Main.tileNoAttach[27] = true;
			Main.tileNoAttach[114] = true;
			Main.tileTable[14] = true;
			Main.tileTable[18] = true;
			Main.tileTable[19] = true;
			Main.tileTable[114] = true;
			Main.tileNoAttach[86] = true;
			Main.tileNoAttach[87] = true;
			Main.tileNoAttach[88] = true;
			Main.tileNoAttach[89] = true;
			Main.tileNoAttach[90] = true;
			Main.tileTable[101] = true;
			Main.tileNoAttach[101] = true;
			Main.tileNoAttach[102] = true;
			Main.tileNoAttach[94] = true;
			Main.tileNoAttach[95] = true;
			Main.tileNoAttach[96] = true;
			Main.tileNoAttach[97] = true;
			Main.tileNoAttach[98] = true;
			Main.tileNoAttach[99] = true;
			Main.tileTable[87] = true;
			Main.tileTable[88] = true;
			Main.tileSolidTop[87] = true;
			Main.tileSolidTop[88] = true;
			Main.tileSolidTop[101] = true;
			Main.tileNoAttach[91] = true;
			Main.tileNoAttach[92] = true;
			Main.tileNoAttach[93] = true;
			Main.tileLighted[190] = true;
			Main.tileBlockLight[192] = true;
			Main.tileBrick[192] = false;
			Main.tileWaterDeath[215] = true;
			Main.tileWaterDeath[4] = true;
			Main.tileWaterDeath[51] = true;
			Main.tileWaterDeath[93] = true;
			Main.tileWaterDeath[98] = true;
			Main.tileLavaDeath[3] = true;
			Main.tileLavaDeath[5] = true;
			Main.tileLavaDeath[10] = true;
			Main.tileLavaDeath[11] = true;
			Main.tileLavaDeath[12] = true;
			Main.tileLavaDeath[13] = true;
			Main.tileLavaDeath[14] = true;
			Main.tileLavaDeath[15] = true;
			Main.tileLavaDeath[16] = true;
			Main.tileLavaDeath[17] = true;
			Main.tileLavaDeath[18] = true;
			Main.tileLavaDeath[19] = true;
			Main.tileLavaDeath[20] = true;
			Main.tileLavaDeath[24] = true;
			Main.tileLavaDeath[27] = true;
			Main.tileLavaDeath[28] = true;
			Main.tileLavaDeath[29] = true;
			Main.tileLavaDeath[32] = true;
			Main.tileLavaDeath[33] = true;
			Main.tileLavaDeath[34] = true;
			Main.tileLavaDeath[35] = true;
			Main.tileLavaDeath[36] = true;
			Main.tileLavaDeath[42] = true;
			Main.tileLavaDeath[49] = true;
			Main.tileLavaDeath[50] = true;
			Main.tileLavaDeath[51] = true;
			Main.tileLavaDeath[52] = true;
			Main.tileLavaDeath[55] = true;
			Main.tileLavaDeath[61] = true;
			Main.tileLavaDeath[62] = true;
			Main.tileLavaDeath[69] = true;
			Main.tileLavaDeath[71] = true;
			Main.tileLavaDeath[72] = true;
			Main.tileLavaDeath[73] = true;
			Main.tileLavaDeath[74] = true;
			Main.tileLavaDeath[79] = true;
			Main.tileLavaDeath[80] = true;
			Main.tileLavaDeath[81] = true;
			Main.tileLavaDeath[86] = true;
			Main.tileLavaDeath[87] = true;
			Main.tileLavaDeath[88] = true;
			Main.tileLavaDeath[89] = true;
			Main.tileLavaDeath[90] = true;
			Main.tileLavaDeath[91] = true;
			Main.tileLavaDeath[92] = true;
			Main.tileLavaDeath[93] = true;
			Main.tileLavaDeath[94] = true;
			Main.tileLavaDeath[95] = true;
			Main.tileLavaDeath[96] = true;
			Main.tileLavaDeath[97] = true;
			Main.tileLavaDeath[98] = true;
			Main.tileLavaDeath[100] = true;
			Main.tileLavaDeath[101] = true;
			Main.tileLavaDeath[102] = true;
			Main.tileLavaDeath[103] = true;
			Main.tileLavaDeath[104] = true;
			Main.tileLavaDeath[106] = true;
			Main.tileLavaDeath[110] = true;
			Main.tileLavaDeath[113] = true;
			Main.tileLavaDeath[115] = true;
			Main.tileLavaDeath[125] = true;
			Main.tileLavaDeath[126] = true;
			Main.tileLavaDeath[128] = true;
			Main.tileLavaDeath[149] = true;
			Main.tileLavaDeath[172] = true;
			Main.tileLavaDeath[173] = true;
			Main.tileLavaDeath[174] = true;
			Main.tileLavaDeath[184] = true;
			Main.tileLavaDeath[201] = true;
			Main.tileLavaDeath[205] = true;
			Main.tileLavaDeath[201] = true;
			Main.tileLavaDeath[209] = true;
			Main.tileLavaDeath[210] = true;
			Main.tileLavaDeath[212] = true;
			Main.tileLavaDeath[213] = true;
			Main.tileLavaDeath[353] = true;
			Main.tileLavaDeath[214] = true;
			Main.tileLavaDeath[215] = true;
			Main.tileLavaDeath[216] = true;
			Main.tileLavaDeath[217] = true;
			Main.tileLavaDeath[218] = true;
			Main.tileLavaDeath[219] = true;
			Main.tileLavaDeath[220] = true;
			Main.tileLavaDeath[227] = true;
			Main.tileLavaDeath[228] = true;
			Main.tileLavaDeath[233] = true;
			Main.tileLavaDeath[236] = true;
			Main.tileLavaDeath[238] = true;
			Main.tileLavaDeath[240] = true;
			Main.tileLavaDeath[241] = true;
			Main.tileLavaDeath[242] = true;
			Main.tileLavaDeath[243] = true;
			Main.tileLavaDeath[244] = true;
			Main.tileLavaDeath[245] = true;
			Main.tileLavaDeath[246] = true;
			Main.tileLavaDeath[247] = true;
			Main.tileLavaDeath[254] = true;
			Main.tileLavaDeath[269] = true;
			Main.tileLavaDeath[270] = true;
			Main.tileLavaDeath[271] = true;
			Main.tileLavaDeath[275] = true;
			Main.tileLavaDeath[413] = true;
			Main.tileLavaDeath[276] = true;
			Main.tileLavaDeath[277] = true;
			Main.tileLavaDeath[278] = true;
			Main.tileLavaDeath[279] = true;
			Main.tileLavaDeath[280] = true;
			Main.tileLavaDeath[281] = true;
			Main.tileLavaDeath[282] = true;
			Main.tileLavaDeath[283] = true;
			Main.tileLavaDeath[285] = true;
			Main.tileLavaDeath[286] = true;
			Main.tileLavaDeath[287] = true;
			Main.tileLavaDeath[288] = true;
			Main.tileLavaDeath[289] = true;
			Main.tileLavaDeath[290] = true;
			Main.tileLavaDeath[291] = true;
			Main.tileLavaDeath[292] = true;
			Main.tileLavaDeath[293] = true;
			Main.tileLavaDeath[294] = true;
			Main.tileLavaDeath[295] = true;
			Main.tileLavaDeath[296] = true;
			Main.tileLavaDeath[297] = true;
			Main.tileLavaDeath[298] = true;
			Main.tileLavaDeath[299] = true;
			Main.tileLavaDeath[300] = true;
			Main.tileLavaDeath[301] = true;
			Main.tileLavaDeath[302] = true;
			Main.tileLavaDeath[303] = true;
			Main.tileLavaDeath[304] = true;
			Main.tileLavaDeath[305] = true;
			Main.tileLavaDeath[306] = true;
			Main.tileLavaDeath[307] = true;
			Main.tileLavaDeath[308] = true;
			Main.tileLavaDeath[309] = true;
			Main.tileLavaDeath[310] = true;
			Main.tileLavaDeath[316] = true;
			Main.tileLavaDeath[317] = true;
			Main.tileLavaDeath[318] = true;
			Main.tileLavaDeath[319] = true;
			Main.tileLavaDeath[354] = true;
			Main.tileLavaDeath[355] = true;
			Main.tileLavaDeath[323] = true;
			Main.tileLavaDeath[335] = true;
			Main.tileLavaDeath[338] = true;
			Main.tileLavaDeath[339] = true;
			Main.tileLavaDeath[352] = true;
			Main.tileLavaDeath[382] = true;
			Main.tileLavaDeath[425] = true;
			Main.tileLavaDeath[453] = true;
			Main.tileLavaDeath[456] = true;
			Main.tileLavaDeath[463] = true;
			Main.tileLavaDeath[464] = true;
			Main.tileLavaDeath[465] = true;
			Main.tileLighted[316] = true;
			Main.tileLighted[317] = true;
			Main.tileLighted[318] = true;
			for (int num5 = 0; num5 < 467; num5++)
			{
				if (Main.tileLavaDeath[num5])
				{
					Main.tileObsidianKill[num5] = true;
				}
			}
			Main.tileObsidianKill[77] = true;
			Main.tileObsidianKill[78] = true;
			Main.tileObsidianKill[82] = true;
			Main.tileObsidianKill[83] = true;
			Main.tileObsidianKill[84] = true;
			Main.tileObsidianKill[85] = true;
			Main.tileObsidianKill[105] = true;
			Main.tileObsidianKill[129] = true;
			Main.tileObsidianKill[132] = true;
			Main.tileObsidianKill[133] = true;
			Main.tileObsidianKill[134] = true;
			Main.tileObsidianKill[135] = true;
			Main.tileObsidianKill[136] = true;
			Main.tileObsidianKill[139] = true;
			Main.tileObsidianKill[165] = true;
			Main.tileObsidianKill[178] = true;
			Main.tileObsidianKill[185] = true;
			Main.tileObsidianKill[186] = true;
			Main.tileObsidianKill[187] = true;
			Main.tileObsidianKill[231] = true;
			Main.tileObsidianKill[337] = true;
			Main.tileObsidianKill[349] = true;
			Main.tileSolid[384] = true;
			Main.tileBlockLight[384] = true;
			Main.tileNoFail[384] = true;
			Main.tileFrameImportant[395] = true;
			Main.tileLavaDeath[395] = true;
			Main.tileFrameImportant[405] = true;
			Main.tileLavaDeath[405] = true;
			Main.tileSolidTop[405] = true;
			Main.tileTable[405] = true;
			Main.tileLighted[405] = true;
			Main.tileWaterDeath[405] = true;
			Main.tileFrameImportant[406] = true;
			Main.tileLavaDeath[406] = true;
			Main.tileFrameImportant[452] = true;
			Main.tileLavaDeath[452] = true;
			Main.tileFrameImportant[411] = true;
			Main.tileLavaDeath[411] = true;
			Main.tileFrameImportant[457] = true;
			Main.tileLavaDeath[457] = true;
			Main.tileFrameImportant[462] = true;
			Main.tileFrameImportant[454] = true;
			Main.tileLavaDeath[454] = true;
			Main.tileCut[454] = true;
			Main.tileFrameImportant[455] = true;
			Main.tileFrameImportant[412] = true;
			for (int num6 = 0; num6 < 231; num6++)
			{
				if (num6 == 20)
				{
					Main.wallBlend[num6] = 14;
				}
				else if (num6 == 19)
				{
					Main.wallBlend[num6] = 9;
				}
				else if (num6 == 18)
				{
					Main.wallBlend[num6] = 8;
				}
				else if (num6 == 17)
				{
					Main.wallBlend[num6] = 7;
				}
				else if (num6 == 16 || num6 == 59)
				{
					Main.wallBlend[num6] = 2;
				}
				else if (num6 == 1 || (num6 >= 48 && num6 <= 53))
				{
					Main.wallBlend[num6] = 1;
				}
				else
				{
					Main.wallBlend[num6] = num6;
				}
			}
			Main.wallBlend[65] = 63;
			Main.wallBlend[66] = 63;
			Main.wallBlend[68] = 63;
			Main.wallBlend[67] = 64;
			Main.wallBlend[80] = 74;
			Main.wallBlend[81] = 77;
			Main.wallBlend[94] = 7;
			Main.wallBlend[95] = 7;
			Main.wallBlend[100] = 7;
			Main.wallBlend[101] = 7;
			Main.wallBlend[96] = 8;
			Main.wallBlend[97] = 8;
			Main.wallBlend[102] = 8;
			Main.wallBlend[103] = 8;
			Main.wallBlend[98] = 9;
			Main.wallBlend[99] = 9;
			Main.wallBlend[104] = 9;
			Main.wallBlend[105] = 9;
			Main.tileNoFail[24] = true;
			Main.tileNoFail[3] = true;
			Main.tileNoFail[52] = true;
			Main.tileNoFail[62] = true;
			Main.tileNoFail[32] = true;
			Main.tileNoFail[61] = true;
			Main.tileNoFail[69] = true;
			Main.tileNoFail[73] = true;
			Main.tileNoFail[74] = true;
			Main.tileNoFail[82] = true;
			Main.tileNoFail[83] = true;
			Main.tileNoFail[84] = true;
			Main.tileNoFail[110] = true;
			Main.tileNoFail[113] = true;
			Main.tileNoFail[115] = true;
			Main.tileNoFail[165] = true;
			Main.tileNoFail[184] = true;
			Main.tileNoFail[201] = true;
			Main.tileNoFail[205] = true;
			Main.tileNoFail[227] = true;
			Main.tileNoFail[233] = true;
			Main.tileNoFail[352] = true;
			Main.tileNoFail[382] = true;
			Main.tileFrameImportant[387] = true;
			Main.tileSolid[387] = true;
			Main.tileBlockLight[387] = true;
			Main.tileNoAttach[387] = true;
			Main.tileLavaDeath[387] = true;
			Main.tileFrameImportant[386] = true;
			Main.tileLavaDeath[386] = true;
			Main.tileNoSunLight[386] = true;
			Main.tileFrameImportant[388] = true;
			Main.tileSolid[388] = true;
			Main.tileBlockLight[388] = true;
			Main.tileNoAttach[388] = true;
			Main.tileLavaDeath[388] = true;
			Main.tileFrameImportant[389] = true;
			Main.tileLavaDeath[389] = true;
			Main.tileNoSunLight[389] = true;
			for (int num7 = 0; num7 < 467; num7++)
			{
				if (Main.tileSolid[num7])
				{
					Main.tileNoSunLight[num7] = true;
				}
				Main.tileFrame[num7] = 0;
				Main.tileFrameCounter[num7] = 0;
			}
			Main.tileNoSunLight[379] = false;
			Main.tileNoSunLight[54] = false;
			Main.tileNoSunLight[328] = false;
			Main.tileNoSunLight[459] = false;
			Main.tileNoSunLight[19] = false;
			Main.tileNoSunLight[11] = true;
			Main.tileNoSunLight[189] = false;
			Main.tileNoSunLight[196] = false;
			Main.tileNoSunLight[460] = false;
			for (int num8 = 0; num8 < Main.maxMenuItems; num8++)
			{
				this.menuItemScale[num8] = 0.8f;
			}
			for (int num9 = 0; num9 < 6001; num9++)
			{
				Main.dust[num9] = new Dust();
				Main.dust[num9].dustIndex = num9;
			}
			for (int num10 = 0; num10 < 401; num10++)
			{
				Main.item[num10] = new Item();
			}
			for (int num11 = 0; num11 < 201; num11++)
			{
				Main.npc[num11] = new NPC();
				Main.npc[num11].whoAmI = num11;
			}
			for (int num12 = 0; num12 < 256; num12++)
			{
				Main.player[num12] = new Player();
			}
			for (int num13 = 0; num13 < 1001; num13++)
			{
				Main.projectile[num13] = new Projectile();
			}
			for (int num14 = 0; num14 < 501; num14++)
			{
				Main.gore[num14] = new Gore();
			}
			for (int num15 = 0; num15 < Main.maxRain + 1; num15++)
			{
				Main.rain[num15] = new Rain();
			}
			for (int num16 = 0; num16 < 200; num16++)
			{
				Main.cloud[num16] = new Cloud();
			}
			for (int num17 = 0; num17 < 100; num17++)
			{
				Main.combatText[num17] = new CombatText();
			}
			for (int num18 = 0; num18 < 20; num18++)
			{
				Main.itemText[num18] = new ItemText();
			}
			int num19 = 0;
			while (num19 < 3884)
			{
				Item item = new Item();
				item.SetDefaults(num19, false);
				Main.itemName[num19] = item.name;
				if (item.headSlot > 0)
				{
					Item.headType[item.headSlot] = item.type;
				}
				if (item.bodySlot > 0)
				{
					Item.bodyType[item.bodySlot] = item.type;
				}
				if (item.legSlot > 0)
				{
					Item.legType[item.legSlot] = item.type;
				}
				int type = item.type;
				if (type <= 1931)
				{
					if (type <= 788)
					{
						if (type <= 723)
						{
							if (type == 683 || type == 723)
							{
								goto IL_60FE;
							}
						}
						else
						{
							if (type == 726)
							{
								goto IL_60FE;
							}
							switch (type)
							{
							case 739:
							case 740:
							case 741:
							case 742:
							case 743:
							case 744:
								goto IL_60FE;
							default:
								if (type == 788)
								{
									goto IL_60FE;
								}
								break;
							}
						}
					}
					else if (type <= 1446)
					{
						if (type == 1308 || type == 1326)
						{
							goto IL_60FE;
						}
						switch (type)
						{
						case 1444:
						case 1445:
						case 1446:
							goto IL_60FE;
						}
					}
					else
					{
						if (type == 1801)
						{
							goto IL_60FE;
						}
						if (type == 1827)
						{
							goto IL_610E;
						}
						switch (type)
						{
						case 1930:
						case 1931:
							goto IL_60FE;
						}
					}
				}
				else if (type <= 3245)
				{
					if (type <= 3006)
					{
						if (type == 2188 || type == 2750 || type == 3006)
						{
							goto IL_60FE;
						}
					}
					else
					{
						if (type == 3051)
						{
							goto IL_60FE;
						}
						switch (type)
						{
						case 3209:
						case 3210:
							goto IL_60FE;
						default:
							if (type == 3245)
							{
								goto IL_610E;
							}
							break;
						}
					}
				}
				else if (type <= 3571)
				{
					if (type == 3377 || type == 3476)
					{
						goto IL_60FE;
					}
					switch (type)
					{
					case 3569:
					case 3571:
						goto IL_60FE;
					}
				}
				else if (type == 3787 || type == 3852 || type == 3870)
				{
					goto IL_60FE;
				}
				IL_611C:
				num19++;
				continue;
				IL_60FE:
				Item.staff[item.type] = true;
				goto IL_611C;
				IL_610E:
				Item.claw[item.type] = true;
				goto IL_611C;
			}
			Main.InitLifeBytes();
			for (int num20 = 0; num20 < Recipe.maxRecipes; num20++)
			{
				Main.recipe[num20] = new Recipe();
				Main.availableRecipeY[num20] = (float)(65 * num20);
			}
			Recipe.SetupRecipes();
			for (int num21 = 0; num21 < Main.numChatLines; num21++)
			{
				Main.chatLine[num21] = new ChatLine();
			}
			for (int num22 = 0; num22 < Liquid.resLiquid; num22++)
			{
				Main.liquid[num22] = new Liquid();
			}
			for (int num23 = 0; num23 < 10000; num23++)
			{
				Main.liquidBuffer[num23] = new LiquidBuffer();
			}
			this.waterfallManager = new WaterfallManager();
			Lighting.LightingThreads = 0;
			this.shop[0] = new Chest(false);
			Chest.SetupTravelShop();
			for (int num24 = 1; num24 < Main.MaxShopIDs; num24++)
			{
				this.shop[num24] = new Chest(false);
				this.shop[num24].SetupShop(num24);
			}
			Main.teamColor[0] = Microsoft.Xna.Framework.Color.White;
			Main.teamColor[1] = new Microsoft.Xna.Framework.Color(218, 59, 59);
			Main.teamColor[2] = new Microsoft.Xna.Framework.Color(59, 218, 85);
			Main.teamColor[3] = new Microsoft.Xna.Framework.Color(59, 149, 218);
			Main.teamColor[4] = new Microsoft.Xna.Framework.Color(242, 221, 100);
			Main.teamColor[5] = new Microsoft.Xna.Framework.Color(224, 100, 242);
			if (Main.menuMode == 1)
			{
				Main.LoadPlayers();
			}
			for (int num25 = 1; num25 < 714; num25++)
			{
				Projectile projectile = new Projectile();
				projectile.SetDefaults(num25);
				if (projectile.hostile)
				{
					Main.projHostile[num25] = true;
				}
				if (projectile.aiStyle == 7)
				{
					Main.projHook[num25] = true;
				}
			}
			Netplay.Initialize();
			NetworkInitializer.Load();
			if (Main.skipMenu)
			{
				WorldGen.clearWorld();
				Main.gameMenu = false;
				Main.LoadPlayers();
				Main.PlayerList[0].SetAsActive();
				Main.LoadWorlds();
				WorldGen.generateWorld(new UnifiedRandom().Next(), null);
				WorldGen.EveryTileFrame();
				Main.player[Main.myPlayer].Spawn();
				Main.ActivePlayerFileData.StartPlayTimer();
				Player.Hooks.EnterWorld(Main.myPlayer);
			}
#if CLIENT && WINDOWS
			else
			{
				IntPtr systemMenu = Main.GetSystemMenu(base.Window.Handle, false);
				int menuItemCount = Main.GetMenuItemCount(systemMenu);
				Main.RemoveMenu(systemMenu, menuItemCount - 1, 1024);
			}
#endif
			if (Main.dedServ)
			{
				return;
			}
			MessageBuffer.OnTileChangeReceived += new TileChangeReceivedEvent(this.OnTileChangeEvent);
			Main.clientUUID = Guid.NewGuid().ToString();
#if CLIENT
			FilterManager arg_6400_0 = Filters.Scene;
			keyBoardInput.newKeyEvent += delegate(char keyStroke)
			{
				if (Main.keyCount < 10)
				{
					Main.keyInt[Main.keyCount] = (int)keyStroke;
					Main.keyString[Main.keyCount] = string.Concat(keyStroke);
					Main.keyCount++;
				}
			};
#endif
			base.Initialize();
			base.Window.AllowUserResizing = true;
			this.OpenSettings();
			if (Main.screenWidth > GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Width)
			{
				Main.screenWidth = GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Width;
			}
			if (Main.screenHeight > GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Height)
			{
				Main.screenHeight = GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Height;
			}
			Main.graphics.ApplyChanges();
			this.CheckBunny();
			base.GraphicsDevice.DeviceLost += new EventHandler<EventArgs>(this.GraphicsDeviceLost);
			base.GraphicsDevice.DeviceReset += new EventHandler<EventArgs>(this.GraphicsDeviceLost);
			base.GraphicsDevice.DeviceResetting += new EventHandler<EventArgs>(this.GraphicsDeviceLost);
			if (Lang.lang > 1)
			{
				Lang.setLang(true);
			}
			Lang.setLang(false);
			if (Lang.lang == 0)
			{
				Main.menuMode = 1212;
			}
			this.OpenRecent();
			Star.SpawnStars();
			WorldGen.RandomizeWeather();
#if CLIENT
			this._achievements = new AchievementManager();
			AchievementInitializer.Load();
			DyeInitializer.Load();
			ScreenEffectInitializer.Load();
			ChatInitializer.Load();
			AchievementCompleteUI.Initialize();
			UILinksInitializer.Load();
			ItemSorting.SetupWhiteLists();
#endif
			foreach (DisplayMode current in GraphicsAdapter.DefaultAdapter.SupportedDisplayModes)
			{
				if (current.Width >= Main.minScreenW && current.Height >= Main.minScreenH && current.Width <= Main.maxScreenW && current.Height <= Main.maxScreenH)
				{
					bool flag = true;
					for (int num26 = 0; num26 < Main.numDisplayModes; num26++)
					{
						if (current.Width == Main.displayWidth[num26] && current.Height == Main.displayHeight[num26])
						{
							flag = false;
							break;
						}
					}
					if (flag)
					{
						Main.displayHeight[Main.numDisplayModes] = current.Height;
						Main.displayWidth[Main.numDisplayModes] = current.Width;
						Main.numDisplayModes++;
					}
				}
			}
			if (Main.autoJoin)
			{
				Main.LoadPlayers();
				Main.menuMode = 1;
				Main.menuMultiplayer = true;
			}
			Main.fpsTimer.Start();
		}

		public T OurLoad<T>(string path)
		{
			T result;
			lock (Main.globalTextureLocker)
			{
				if (TexturePackSupport.Enabled && typeof(T) == this.t2d)
				{
					Texture2D texture2D;
					bool flag2 = TexturePackSupport.FetchTexture(path + ".png", out texture2D);
					if (flag2)
					{
						result = (T)((object)texture2D);
						return result;
					}
				}
				result = base.Content.Load<T>(path);
			}
			return result;
		}

		protected override void LoadContent()
		{
			Main.Configuration.Load();
			Main.Configuration.Get<bool>("UseExperimentalFeatures", ref Main.UseExperimentalFeatures);
			if (Main.UseExperimentalFeatures)
			{
				TexturePackSupport.Enabled = true;
			}
			TexturePackSupport.FindTexturePack();
			TextureManager.Initialize();
			this.mapSectionTexture = new RenderTarget2D(base.GraphicsDevice, 200, 150);
			Main.ShaderContentManager = new ContentManager(base.Content.ServiceProvider, base.Content.RootDirectory);
			Main.PixelShaderRef.Value = Main.ShaderContentManager.Load<Effect>("PixelShader");
			Main.TileShaderRef.Value = Main.ShaderContentManager.Load<Effect>("TileShader");
			Main.ScreenShaderRef.Value = Main.ShaderContentManager.Load<Effect>("ScreenShader");
			try
			{
				Main.LoadMusic();
				this.LoadSounds();
			}
			catch
			{
				Main.musicVolume = 0f;
				Main.soundVolume = 0f;
			}
			this.LoadTextures();
			this.LoadFonts();
			Mount.Initialize();
			Minecart.Initialize();
		}

		private void LoadFonts()
		{
			Main.fontItemStack = this.OurLoad<SpriteFont>("Fonts" + Path.DirectorySeparatorChar + "Item_Stack");
			Main.fontMouseText = this.OurLoad<SpriteFont>("Fonts" + Path.DirectorySeparatorChar + "Mouse_Text");
			Main.fontDeathText = this.OurLoad<SpriteFont>("Fonts" + Path.DirectorySeparatorChar + "Death_Text");
			Main.fontCombatText[0] = this.OurLoad<SpriteFont>("Fonts" + Path.DirectorySeparatorChar + "Combat_Text");
			Main.fontCombatText[1] = this.OurLoad<SpriteFont>("Fonts" + Path.DirectorySeparatorChar + "Combat_Crit");
		}

		private void LoadTextures()
		{
			Main.tileCrackTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "TileCracks");
			Main.chestStackTexture[0] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "ChestStack_0");
			Main.chestStackTexture[1] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "ChestStack_1");
			Main.smartDigTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "SmartDig");
			this.iceBarrierTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "IceBarrier");
			Main.frozenTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Frozen");
			for (int i = 0; i < Main.PVPTexture.Length; i++)
			{
				Main.PVPTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"UI",
					Path.DirectorySeparatorChar,
					"PVP_",
					i
				}));
			}
			for (int j = 0; j < Main.EquipPageTexture.Length; j++)
			{
				Main.EquipPageTexture[j] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"UI",
					Path.DirectorySeparatorChar,
					"DisplaySlots_",
					j
				}));
			}
			for (int k = 0; k < Main.craftToggleTexture.Length; k++)
			{
				Main.craftToggleTexture[k] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"UI",
					Path.DirectorySeparatorChar,
					"Craft_Toggle_",
					k
				}));
			}
			for (int l = 0; l < Main.inventorySortTexture.Length; l++)
			{
				Main.inventorySortTexture[l] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"UI",
					Path.DirectorySeparatorChar,
					"Sort_",
					l
				}));
			}
			for (int m = 0; m < Main.textGlyphTexture.Length; m++)
			{
				Main.textGlyphTexture[m] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"UI",
					Path.DirectorySeparatorChar,
					"Glyphs_",
					m
				}));
			}
			for (int n = 0; n < Main.hotbarRadialTexture.Length; n++)
			{
				Main.hotbarRadialTexture[n] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"UI",
					Path.DirectorySeparatorChar,
					"HotbarRadial_",
					n
				}));
			}
			for (int num = 0; num < this.infoIconTexture.Length; num++)
			{
				this.infoIconTexture[num] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"UI",
					Path.DirectorySeparatorChar,
					"InfoIcon_",
					num
				}));
			}
			for (int num2 = 0; num2 < Main.reforgeTexture.Length; num2++)
			{
				Main.reforgeTexture[num2] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"UI",
					Path.DirectorySeparatorChar,
					"Reforge_",
					num2
				}));
			}
			for (int num3 = 0; num3 < Main.cameraTexture.Length; num3++)
			{
				Main.cameraTexture[num3] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"UI",
					Path.DirectorySeparatorChar,
					"Camera_",
					num3
				}));
			}
			for (int num4 = 0; num4 < Main.wireUITexture.Length; num4++)
			{
				Main.wireUITexture[num4] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"UI",
					Path.DirectorySeparatorChar,
					"Wires_",
					num4
				}));
			}
			Main.builderAccTexture = this.OurLoad<Texture2D>(string.Concat(new object[]
			{
				"Images",
				Path.DirectorySeparatorChar,
				"UI",
				Path.DirectorySeparatorChar,
				"BuilderIcons"
			}));
			Main.quicksIconTexture = this.OurLoad<Texture2D>(string.Concat(new object[]
			{
				"Images",
				Path.DirectorySeparatorChar,
				"UI",
				Path.DirectorySeparatorChar,
				"UI_quickicon1"
			}));
			Main.craftUpButtonTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "RecUp");
			Main.craftDownButtonTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "RecDown");
			Main.scrollLeftButtonTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "RecLeft");
			Main.scrollRightButtonTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "RecRight");
			Main.oneDropLogo = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "OneDropLogo");
			Main.pulleyTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "PlayerPulley");
			Main.timerTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Timer");
			Main.wofTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "WallOfFlesh");
			Main.wallOutlineTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Wall_Outline");
			Main.fadeTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "fade-out");
			Main.ghostTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Ghost");
			Main.evilCactusTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Evil_Cactus");
			Main.goodCactusTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Good_Cactus");
			Main.crimsonCactusTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Crimson_Cactus");
			Main.wraithEyeTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Wraith_Eyes");
			Main.fireflyTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Firefly");
			Main.fireflyJarTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "FireflyJar");
			Main.lightningbugTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "LightningBug");
			Main.lightningbugJarTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "LightningBugJar");
			AchievementCompleteUI.LoadContent();
			for (int num5 = 1; num5 <= 3; num5++)
			{
				Main.jellyfishBowlTexture[num5 - 1] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"jellyfishBowl",
					num5
				}));
			}
			Main.glowSnailTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "GlowSnail");
			Main.iceQueenTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "IceQueen");
			Main.santaTankTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "SantaTank");
			Main.jackHatTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "JackHat");
			Main.treeFaceTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "TreeFace");
			Main.pumpkingFaceTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "PumpkingFace");
			Main.reaperEyeTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Reaper_Eyes");
			this.mapDeathTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapDeath");
			Main.dukeFishronTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "DukeFishron");
			Main.miniMinotaurTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "MiniMinotaur");
			Main.mapTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Map");
			this.mapBG1Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG1");
			this.mapBG2Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG2");
			this.mapBG3Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG3");
			this.mapBG4Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG4");
			this.mapBG5Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG5");
			this.mapBG6Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG6");
			this.mapBG7Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG7");
			this.mapBG8Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG8");
			this.mapBG9Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG9");
			this.mapBG10Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG10");
			this.mapBG11Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG11");
			this.mapBG12Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG12");
			this.mapBG13Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG13");
			this.mapBG14Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG14");
			this.mapBG15Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG15");
			this.hueTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Hue");
			Main.colorSliderTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "ColorSlider");
			Main.colorBarTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "ColorBar");
			Main.colorBlipTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "ColorBlip");
			Main.colorHighlightTexture = this.OurLoad<Texture2D>(string.Concat(new object[]
			{
				"Images",
				Path.DirectorySeparatorChar,
				"UI",
				Path.DirectorySeparatorChar,
				"Slider_Highlight"
			}));
			Main.LockOnCursorTexture = this.OurLoad<Texture2D>(string.Concat(new object[]
			{
				"Images",
				Path.DirectorySeparatorChar,
				"UI",
				Path.DirectorySeparatorChar,
				"LockOn_Cursor"
			}));
			Main.rainTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Rain");
			for (int num6 = 0; num6 < 245; num6++)
			{
				Main.glowMaskTexture[num6] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Glow_",
					num6
				}));
			}
			for (int num7 = 0; num7 < Main.highlightMaskTexture.Length; num7++)
			{
				if (TileID.Sets.HasOutlines[num7])
				{
					Main.highlightMaskTexture[num7] = this.OurLoad<Texture2D>(string.Concat(new object[]
					{
						"Images",
						Path.DirectorySeparatorChar,
						"Misc",
						Path.DirectorySeparatorChar,
						"TileOutlines",
						Path.DirectorySeparatorChar,
						"Tiles_",
						num7
					}));
				}
			}
			for (int num8 = 0; num8 < 90; num8++)
			{
				Main.extraTexture[num8] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Extra_",
					num8
				}));
			}
			for (int num9 = 0; num9 < 4; num9++)
			{
				Main.coinTexture[num9] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Coin_",
					num9
				}));
			}
			Main.magicPixel = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "MagicPixel");
			Main.settingsPanelTexture = this.OurLoad<Texture2D>(string.Concat(new object[]
			{
				"Images",
				Path.DirectorySeparatorChar,
				"UI",
				Path.DirectorySeparatorChar,
				"Settings_Panel"
			}));
			Main.settingsPanelTexture2 = this.OurLoad<Texture2D>(string.Concat(new object[]
			{
				"Images",
				Path.DirectorySeparatorChar,
				"UI",
				Path.DirectorySeparatorChar,
				"Settings_Panel_2"
			}));
			Main.miniMapFrameTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "MiniMapFrame");
			Main.miniMapFrame2Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "MiniMapFrame2");
			for (int num10 = 0; num10 < Main.xmasTree.Length; num10++)
			{
				Main.xmasTree[num10] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Xmas_",
					num10
				}));
			}
			for (int num11 = 0; num11 < 4; num11++)
			{
				Main.clothesTexture[num11] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Clothes_",
					num11
				}));
			}
			for (int num12 = 0; num12 < Main.FlameTexture.Length; num12++)
			{
				Main.FlameTexture[num12] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Flame_",
					num12
				}));
			}
			for (int num13 = 0; num13 < 3; num13++)
			{
				Main.miniMapButtonTexture[num13] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"MiniMapButton_",
					num13
				}));
			}
			for (int num14 = 0; num14 < 8; num14++)
			{
				Main.mapIconTexture[num14] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Map_",
					num14
				}));
			}
			for (int num15 = 0; num15 < Main.underworldTexture.Length; num15++)
			{
				Main.underworldTexture[num15] = this.OurLoad<Texture2D>("Images/Backgrounds/Underworld " + num15);
			}
			Main.destTexture[0] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Dest1");
			Main.destTexture[1] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Dest2");
			Main.destTexture[2] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Dest3");
			Main.actuatorTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Actuator");
			Main.wireTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Wires");
			Main.wire2Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Wires2");
			Main.wire3Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Wires3");
			Main.wire4Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Wires4");
			Main.wireTextureNew = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "WiresNew");
			Main.flyingCarpetTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "FlyingCarpet");
			Main.hbTexture1 = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "HealthBar1");
			Main.hbTexture2 = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "HealthBar2");
			Main.loTexture = this.OurLoad<Texture2D>(string.Concat(new object[]
			{
				"Images",
				Path.DirectorySeparatorChar,
				"logo_",
				Main.rand.Next(1, 9)
			}));
			Main.spriteBatch = new SpriteBatch(base.GraphicsDevice);
			Main.tileBatch = new TileBatch(base.GraphicsDevice);
			for (int num16 = 1; num16 < 2; num16++)
			{
				Main.bannerTexture[num16] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"House_Banner_",
					num16
				}));
			}
			for (int num17 = 0; num17 < Main.npcHeadTexture.Length; num17++)
			{
				Main.npcHeadTexture[num17] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"NPC_Head_",
					num17
				}));
			}
			for (int num18 = 0; num18 < Main.npcHeadBossTexture.Length; num18++)
			{
				Main.npcHeadBossTexture[num18] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"NPC_Head_Boss_",
					num18
				}));
			}
			for (int num19 = 1; num19 < Main.BackPackTexture.Length; num19++)
			{
				Main.BackPackTexture[num19] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"BackPack_",
					num19
				}));
			}
			for (int num20 = 1; num20 < 206; num20++)
			{
				Main.buffTexture[num20] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Buff_",
					num20
				}));
			}
			this.LoadBackground(0);
			this.LoadBackground(49);
			Main.minecartMountTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Minecart");
			for (int num21 = 0; num21 < Main.rudolphMountTexture.Length; num21++)
			{
				Main.rudolphMountTexture[num21] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Rudolph_",
					num21
				}));
			}
			Main.bunnyMountTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Bunny");
			Main.pigronMountTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Pigron");
			Main.slimeMountTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Slime");
			Main.turtleMountTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Turtle");
			Main.unicornMountTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Unicorn");
			Main.basiliskMountTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Basilisk");
			Main.minecartMechMountTexture[0] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_MinecartMech");
			Main.minecartMechMountTexture[1] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_MinecartMechGlow");
			Main.cuteFishronMountTexture[0] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_CuteFishron1");
			Main.cuteFishronMountTexture[1] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_CuteFishron2");
			Main.minecartWoodMountTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_MinecartWood");
			Main.beeMountTexture[0] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Bee");
			Main.beeMountTexture[1] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_BeeWings");
			Main.UFOMountTexture[0] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_UFO");
			Main.UFOMountTexture[1] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_UFOGlow");
			Main.drillMountTexture[0] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_DrillRing");
			Main.drillMountTexture[1] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_DrillSeat");
			Main.drillMountTexture[2] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_DrillDiode");
			Main.drillMountTexture[3] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Glow_DrillRing");
			Main.drillMountTexture[4] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Glow_DrillSeat");
			Main.drillMountTexture[5] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Glow_DrillDiode");
			Main.scutlixMountTexture[0] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Scutlix");
			Main.scutlixMountTexture[1] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_ScutlixEyes");
			Main.scutlixMountTexture[2] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_ScutlixEyeGlow");
			for (int num22 = 0; num22 < 3884; num22++)
			{
				int num23 = ItemID.Sets.TextureCopyLoad[num22];
				if (num23 != -1)
				{
					Main.itemTexture[num22] = Main.itemTexture[num23];
				}
				else
				{
					Main.itemTexture[num22] = this.OurLoad<Texture2D>(string.Concat(new object[]
					{
						"Images",
						Path.DirectorySeparatorChar,
						"Item_",
						num22
					}));
				}
			}
			for (int num24 = 0; num24 < Main.gemTexture.Length; num24++)
			{
				Main.gemTexture[num24] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Gem_",
					num24
				}));
			}
			for (int num25 = 0; num25 < 22; num25++)
			{
				Main.cloudTexture[num25] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Cloud_",
					num25
				}));
			}
			for (int num26 = 0; num26 < 5; num26++)
			{
				Main.starTexture[num26] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Star_",
					num26
				}));
			}
			for (int num27 = 0; num27 < 12; num27++)
			{
				Main.liquidTexture[num27] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Liquid_",
					num27
				}));
			}
			this.waterfallManager.LoadContent();
			Main.npcToggleTexture[0] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "House_1");
			Main.npcToggleTexture[1] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "House_2");
			Main.HBLockTexture[0] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Lock_0");
			Main.HBLockTexture[1] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Lock_1");
			Main.gridTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Grid");
			Main.trashTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Trash");
			Main.cdTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "CoolDown");
			Main.logoTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Logo");
			Main.logo2Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Logo2");
			Main.dustTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Dust");
			Main.sunTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Sun");
			Main.sun2Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Sun2");
			Main.sun3Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Sun3");
			Main.blackTileTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Black_Tile");
			Main.heartTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Heart");
			Main.heart2Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Heart2");
			Main.bubbleTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Bubble");
			Main.flameTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Flame");
			Main.manaTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mana");
			for (int num28 = 0; num28 < Main.cursorTextures.Length; num28++)
			{
				Main.cursorTextures[num28] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"UI",
					Path.DirectorySeparatorChar,
					"Cursor_",
					num28
				}));
			}
			Main.cursorRadialTexture = this.OurLoad<Texture2D>(string.Concat(new object[]
			{
				"Images",
				Path.DirectorySeparatorChar,
				"UI",
				Path.DirectorySeparatorChar,
				"Radial"
			}));
			Main.ninjaTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Ninja");
			Main.antLionTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "AntlionBody");
			Main.spikeBaseTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Spike_Base");
			Main.woodTexture[0] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_0");
			Main.woodTexture[1] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_1");
			Main.woodTexture[2] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_2");
			Main.woodTexture[3] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_3");
			Main.woodTexture[4] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_4");
			Main.woodTexture[5] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_5");
			Main.woodTexture[6] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_6");
			Main.pumpkinMoonTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Moon_Pumpkin");
			Main.snowMoonTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Moon_Snow");
			for (int num29 = 0; num29 < Main.moonTexture.Length; num29++)
			{
				Main.moonTexture[num29] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Moon_",
					num29
				}));
			}
			for (int num30 = 0; num30 < Main.treeTopTexture.Length; num30++)
			{
				Main.treeTopTexture[num30] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Tree_Tops_",
					num30
				}));
			}
			for (int num31 = 0; num31 < Main.treeBranchTexture.Length; num31++)
			{
				Main.treeBranchTexture[num31] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Tree_Branches_",
					num31
				}));
			}
			Main.shroomCapTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Shroom_Tops");
			Main.inventoryBackTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back");
			Main.inventoryBack2Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back2");
			Main.inventoryBack3Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back3");
			Main.inventoryBack4Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back4");
			Main.inventoryBack5Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back5");
			Main.inventoryBack6Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back6");
			Main.inventoryBack7Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back7");
			Main.inventoryBack8Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back8");
			Main.inventoryBack9Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back9");
			Main.inventoryBack10Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back10");
			Main.inventoryBack11Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back11");
			Main.inventoryBack12Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back12");
			Main.inventoryBack13Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back13");
			Main.inventoryBack14Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back14");
			Main.inventoryBack15Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back15");
			Main.inventoryBack16Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back16");
			Main.hairStyleBackTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "HairStyleBack");
			Main.clothesStyleBackTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "ClothesStyleBack");
			Main.inventoryTickOffTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Tick_Off");
			Main.inventoryTickOnTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Tick_On");
			Main.textBackTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Text_Back");
			Main.chatTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chat");
			Main.chat2Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chat2");
			Main.chatBackTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chat_Back");
			Main.teamTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Team");
			PlayerDataInitializer.Load();
			Main.chaosTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chaos");
			Main.EyeLaserTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Eye_Laser");
			Main.BoneEyesTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Bone_Eyes");
			Main.BoneLaserTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Bone_Laser");
			Main.lightDiscTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Light_Disc");
			Main.confuseTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Confuse");
			Main.probeTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Probe");
			Main.sunOrbTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "SunOrb");
			Main.sunAltarTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "SunAltar");
			Main.xmasLightTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "XmasLight");
			Main.beetleTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "BeetleOrb");
			for (int num32 = 0; num32 < 17; num32++)
			{
				Main.chainsTexture[num32] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Chains_",
					num32
				}));
			}
			Main.chain20Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain20");
			Main.fishingLineTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "FishingLine");
			Main.chainTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain");
			Main.chain2Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain2");
			Main.chain3Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain3");
			Main.chain4Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain4");
			Main.chain5Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain5");
			Main.chain6Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain6");
			Main.chain7Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain7");
			Main.chain8Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain8");
			Main.chain9Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain9");
			Main.chain10Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain10");
			Main.chain11Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain11");
			Main.chain12Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain12");
			Main.chain13Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain13");
			Main.chain14Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain14");
			Main.chain15Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain15");
			Main.chain16Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain16");
			Main.chain17Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain17");
			Main.chain18Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain18");
			Main.chain19Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain19");
			Main.chain20Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain20");
			Main.chain21Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain21");
			Main.chain22Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain22");
			Main.chain23Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain23");
			Main.chain24Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain24");
			Main.chain25Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain25");
			Main.chain26Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain26");
			Main.chain27Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain27");
			Main.chain28Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain28");
			Main.chain29Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain29");
			Main.chain30Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain30");
			Main.chain31Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain31");
			Main.chain32Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain32");
			Main.chain33Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain33");
			Main.chain34Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain34");
			Main.chain35Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain35");
			Main.chain36Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain36");
			Main.chain37Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain37");
			Main.chain38Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain38");
			Main.chain39Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain39");
			Main.chain40Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain40");
			Main.eyeLaserSmallTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Eye_Laser_Small");
			Main.boneArmTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Arm_Bone");
			Main.pumpkingArmTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "PumpkingArm");
			Main.pumpkingCloakTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "PumpkingCloak");
			Main.boneArm2Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Arm_Bone_2");
			for (int num33 = 1; num33 < Main.gemChainTexture.Length; num33++)
			{
				Main.gemChainTexture[num33] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"GemChain_",
					num33
				}));
			}
			for (int num34 = 1; num34 < Main.golemTexture.Length; num34++)
			{
				Main.golemTexture[num34] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"GolemLights",
					num34
				}));
			}
			Main.npcAltTextures = new Texture2D[Main.npcTexture.Length][];
			for (int num35 = 0; num35 < NPCID.Sets.ExtraTextureCount.Length; num35++)
			{
				int num36 = NPCID.Sets.ExtraTextureCount[num35];
				Main.npcAltTextures[num35] = new Texture2D[num36 + 1];
				if (num36 > 0)
				{
					this.LoadNPC(num35);
					Main.npcAltTextures[num35][0] = Main.npcTexture[num35];
				}
				for (int num37 = 1; num37 <= num36; num37++)
				{
					Main.npcAltTextures[num35][num37] = this.OurLoad<Texture2D>(string.Concat(new object[]
					{
						"Images",
						Path.DirectorySeparatorChar,
						"NPC_",
						num35,
						"_Alt_",
						num37
					}));
				}
			}
		}

		private static void LoadMusic()
		{
			Main.engine = new AudioEngine("Content" + Path.DirectorySeparatorChar + "TerrariaMusic.xgs");
			Main.soundBank = new SoundBank(Main.engine, "Content" + Path.DirectorySeparatorChar + "Sound Bank.xsb");
			Main.waveBank = new WaveBank(Main.engine, "Content" + Path.DirectorySeparatorChar + "Wave Bank.xwb");
			for (int i = 1; i < 42; i++)
			{
				Main.music[i] = Main.soundBank.GetCue("Music_" + i);
			}
		}

		private void LoadSounds()
		{
			Main.soundMech[0] = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Mech_0");
			Main.soundInstanceMech[0] = Main.soundMech[0].CreateInstance();
			Main.soundGrab = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Grab");
			Main.soundInstanceGrab = Main.soundGrab.CreateInstance();
			Main.soundPixie = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Pixie");
			Main.soundInstancePixie = Main.soundGrab.CreateInstance();
			Main.soundDig[0] = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Dig_0");
			Main.soundInstanceDig[0] = Main.soundDig[0].CreateInstance();
			Main.soundDig[1] = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Dig_1");
			Main.soundInstanceDig[1] = Main.soundDig[1].CreateInstance();
			Main.soundDig[2] = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Dig_2");
			Main.soundInstanceDig[2] = Main.soundDig[2].CreateInstance();
			Main.soundTink[0] = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Tink_0");
			Main.soundInstanceTink[0] = Main.soundTink[0].CreateInstance();
			Main.soundTink[1] = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Tink_1");
			Main.soundInstanceTink[1] = Main.soundTink[1].CreateInstance();
			Main.soundTink[2] = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Tink_2");
			Main.soundInstanceTink[2] = Main.soundTink[2].CreateInstance();
			Main.soundPlayerHit[0] = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Player_Hit_0");
			Main.soundInstancePlayerHit[0] = Main.soundPlayerHit[0].CreateInstance();
			Main.soundPlayerHit[1] = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Player_Hit_1");
			Main.soundInstancePlayerHit[1] = Main.soundPlayerHit[1].CreateInstance();
			Main.soundPlayerHit[2] = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Player_Hit_2");
			Main.soundInstancePlayerHit[2] = Main.soundPlayerHit[2].CreateInstance();
			Main.soundFemaleHit[0] = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Female_Hit_0");
			Main.soundInstanceFemaleHit[0] = Main.soundFemaleHit[0].CreateInstance();
			Main.soundFemaleHit[1] = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Female_Hit_1");
			Main.soundInstanceFemaleHit[1] = Main.soundFemaleHit[1].CreateInstance();
			Main.soundFemaleHit[2] = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Female_Hit_2");
			Main.soundInstanceFemaleHit[2] = Main.soundFemaleHit[2].CreateInstance();
			Main.soundPlayerKilled = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Player_Killed");
			Main.soundInstancePlayerKilled = Main.soundPlayerKilled.CreateInstance();
			Main.soundChat = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Chat");
			Main.soundInstanceChat = Main.soundChat.CreateInstance();
			Main.soundGrass = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Grass");
			Main.soundInstanceGrass = Main.soundGrass.CreateInstance();
			Main.soundDoorOpen = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Door_Opened");
			Main.soundInstanceDoorOpen = Main.soundDoorOpen.CreateInstance();
			Main.soundDoorClosed = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Door_Closed");
			Main.soundInstanceDoorClosed = Main.soundDoorClosed.CreateInstance();
			Main.soundMenuTick = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Menu_Tick");
			Main.soundInstanceMenuTick = Main.soundMenuTick.CreateInstance();
			Main.soundMenuOpen = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Menu_Open");
			Main.soundInstanceMenuOpen = Main.soundMenuOpen.CreateInstance();
			Main.soundMenuClose = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Menu_Close");
			Main.soundInstanceMenuClose = Main.soundMenuClose.CreateInstance();
			Main.soundShatter = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Shatter");
			Main.soundInstanceShatter = Main.soundShatter.CreateInstance();
			Main.soundCamera = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Camera");
			Main.soundInstanceCamera = Main.soundShatter.CreateInstance();
			for (int i = 0; i < Main.soundCoin.Length; i++)
			{
				Main.soundCoin[i] = this.OurLoad<SoundEffect>(string.Concat(new object[]
				{
					"Sounds",
					Path.DirectorySeparatorChar,
					"Coin_",
					i
				}));
				Main.soundInstanceCoin[i] = Main.soundCoin[i].CreateInstance();
			}
			for (int j = 0; j < Main.soundDrip.Length; j++)
			{
				Main.soundDrip[j] = this.OurLoad<SoundEffect>(string.Concat(new object[]
				{
					"Sounds",
					Path.DirectorySeparatorChar,
					"Drip_",
					j
				}));
				Main.soundInstanceDrip[j] = Main.soundDrip[j].CreateInstance();
			}
			for (int k = 0; k < Main.soundZombie.Length; k++)
			{
				Main.soundZombie[k] = this.OurLoad<SoundEffect>(string.Concat(new object[]
				{
					"Sounds",
					Path.DirectorySeparatorChar,
					"Zombie_",
					k
				}));
				Main.soundInstanceZombie[k] = Main.soundZombie[k].CreateInstance();
			}
			for (int l = 0; l < Main.soundLiquid.Length; l++)
			{
				Main.soundLiquid[l] = this.OurLoad<SoundEffect>(string.Concat(new object[]
				{
					"Sounds",
					Path.DirectorySeparatorChar,
					"Liquid_",
					l
				}));
				Main.soundInstanceLiquid[l] = Main.soundLiquid[l].CreateInstance();
			}
			for (int m = 0; m < Main.soundRoar.Length; m++)
			{
				Main.soundRoar[m] = this.OurLoad<SoundEffect>(string.Concat(new object[]
				{
					"Sounds",
					Path.DirectorySeparatorChar,
					"Roar_",
					m
				}));
				Main.soundInstanceRoar[m] = Main.soundRoar[m].CreateInstance();
			}
			Main.soundSplash[0] = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Splash_0");
			Main.soundInstanceSplash[0] = Main.soundRoar[0].CreateInstance();
			Main.soundSplash[1] = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Splash_1");
			Main.soundInstanceSplash[1] = Main.soundSplash[1].CreateInstance();
			Main.soundDoubleJump = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Double_Jump");
			Main.soundInstanceDoubleJump = Main.soundRoar[0].CreateInstance();
			Main.soundRun = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Run");
			Main.soundInstanceRun = Main.soundRun.CreateInstance();
			Main.soundCoins = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Coins");
			Main.soundInstanceCoins = Main.soundCoins.CreateInstance();
			Main.soundUnlock = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Unlock");
			Main.soundInstanceUnlock = Main.soundUnlock.CreateInstance();
			Main.soundMaxMana = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "MaxMana");
			Main.soundInstanceMaxMana = Main.soundMaxMana.CreateInstance();
			Main.soundDrown = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Drown");
			Main.soundInstanceDrown = Main.soundDrown.CreateInstance();
			for (int n = 1; n < 126; n++)
			{
				Main.soundItem[n] = this.OurLoad<SoundEffect>(string.Concat(new object[]
				{
					"Sounds",
					Path.DirectorySeparatorChar,
					"Item_",
					n
				}));
				Main.soundInstanceItem[n] = Main.soundItem[n].CreateInstance();
			}
			for (int num = 1; num < 58; num++)
			{
				Main.soundNPCHit[num] = this.OurLoad<SoundEffect>(string.Concat(new object[]
				{
					"Sounds",
					Path.DirectorySeparatorChar,
					"NPC_Hit_",
					num
				}));
				Main.soundInstanceNPCHit[num] = Main.soundNPCHit[num].CreateInstance();
			}
			for (int num2 = 1; num2 < 63; num2++)
			{
				Main.soundNPCKilled[num2] = this.OurLoad<SoundEffect>(string.Concat(new object[]
				{
					"Sounds",
					Path.DirectorySeparatorChar,
					"NPC_Killed_",
					num2
				}));
				Main.soundInstanceNPCKilled[num2] = Main.soundNPCKilled[num2].CreateInstance();
			}
			Main.trackableSounds = new SoundEffect[SoundID.TrackableLegacySoundCount];
			Main.trackableSoundInstances = new SoundEffectInstance[Main.trackableSounds.Length];
			for (int num3 = 0; num3 < Main.trackableSounds.Length; num3++)
			{
				Main.trackableSounds[num3] = this.OurLoad<SoundEffect>(string.Concat(new object[]
				{
					"Sounds",
					Path.DirectorySeparatorChar,
					"Custom",
					Path.DirectorySeparatorChar,
					SoundID.GetTrackableLegacySoundPath(num3)
				}));
				Main.trackableSoundInstances[num3] = Main.trackableSounds[num3].CreateInstance();
			}
			Main.soundInstanceMoonlordCry = Main.soundNPCKilled[10].CreateInstance();
		}

		protected override void UnloadContent()
		{
		}

		public static void stopMoonEvent()
		{
			if (Main.pumpkinMoon)
			{
				Main.pumpkinMoon = false;
				if (Main.netMode != 1)
				{
					NPC.waveKills = 0f;
					NPC.waveNumber = 0;
				}
			}
			if (Main.snowMoon)
			{
				Main.snowMoon = false;
				if (Main.netMode != 1)
				{
					NPC.waveKills = 0f;
					NPC.waveNumber = 0;
				}
			}
		}

		public static void startPumpkinMoon()
		{
			Main.pumpkinMoon = true;
			Main.snowMoon = false;
			Main.bloodMoon = false;
			if (Main.netMode != 1)
			{
				NPC.waveKills = 0f;
				NPC.waveNumber = 1;
				string invasionWaveText = Lang.GetInvasionWaveText(1, new short[]
				{
					305
				});
				if (Main.netMode == 0)
				{
					Main.NewText(invasionWaveText, 175, 75, 255, false);
					return;
				}
				if (Main.netMode == 2)
				{
					NetMessage.SendData(25, -1, -1, invasionWaveText, 255, 175f, 75f, 255f, 0, 0, 0);
				}
			}
		}

		public static void startSnowMoon()
		{
			Main.snowMoon = true;
			Main.pumpkinMoon = false;
			Main.bloodMoon = false;
			if (Main.netMode != 1)
			{
				NPC.waveKills = 0f;
				NPC.waveNumber = 1;
				string invasionWaveText = Lang.GetInvasionWaveText(1, new short[]
				{
					338,
					342
				});
				if (Main.netMode == 0)
				{
					Main.NewText(invasionWaveText, 175, 75, 255, false);
					return;
				}
				if (Main.netMode == 2)
				{
					NetMessage.SendData(25, -1, -1, invasionWaveText, 255, 175f, 75f, 255f, 0, 0, 0);
				}
			}
		}

		protected void UpdateAudio()
		{
#if !WINDOWS
			if (Main.engine != null)
			{
				Main.engine.Update();
			}
			object audioLock = Main._audioLock;
			lock (audioLock)
			{
				for (int i = 0; i < Main.ActiveSoundInstances.Count; i++)
				{
					if (Main.ActiveSoundInstances[i] == null)
					{
						Main.ActiveSoundInstances.RemoveAt(i);
						i--;
					}
					else if (Main.ActiveSoundInstances[i].State == SoundState.Stopped)
					{
						Main.ActiveSoundInstances[i].Dispose();
						Main.ActiveSoundInstances.RemoveAt(i);
						i--;
					}
				}
			}
#endif
			if (!Main.dedServ)
			{
				bool flag = (!Main.hasFocus || Main.gamePaused) && Main.netMode == 0;
				if (flag)
				{
					using (IEnumerator<SlotVector<ActiveSound>.ItemPair> enumerator = ((IEnumerable<SlotVector<ActiveSound>.ItemPair>)Main._trackedSounds).GetEnumerator())
					{
						while (enumerator.MoveNext())
						{
							SlotVector<ActiveSound>.ItemPair current = enumerator.Current;
							current.Value.Pause();
						}
						goto IL_A3;
					}
				}
				if (Main._areSoundsPaused && !flag)
				{
					foreach (SlotVector<ActiveSound>.ItemPair current2 in ((IEnumerable<SlotVector<ActiveSound>.ItemPair>)Main._trackedSounds))
					{
						current2.Value.Resume();
					}
				}
				IL_A3:
				Main._areSoundsPaused = flag;
				if (!Main._areSoundsPaused)
				{
					foreach (SlotVector<ActiveSound>.ItemPair current3 in ((IEnumerable<SlotVector<ActiveSound>.ItemPair>)Main._trackedSounds))
					{
						current3.Value.Update();
						if (!current3.Value.IsPlaying)
						{
							Main._trackedSounds.Remove(current3.Id);
						}
					}
				}
			}
			if (Main.musicVolume == 0f)
			{
				Main.curMusic = 0;
			}
			try
			{
				if (!Main.dedServ)
				{
					if (Main.curMusic > 0)
					{
						if (!base.IsActive)
						{
							for (int i = 0; i < Main.music.Length; i++)
							{
								if (Main.music[i] != null && !Main.music[i].IsPaused && Main.music[i].IsPlaying && Main.musicFade[i] > 0f)
								{
									try
									{
										Main.music[i].Pause();
									}
									catch (Exception)
									{
									}
								}
							}
							for (int j = 0; j < Main.soundInstanceLiquid.Length; j++)
							{
								Main.soundInstanceLiquid[j].Stop();
							}
						}
						else
						{
							for (int k = 0; k < Main.music.Length; k++)
							{
								if (Main.music[k] != null && Main.music[k].IsPaused && Main.musicFade[k] > 0f)
								{
									try
									{
										Main.music[k].Resume();
									}
									catch (Exception)
									{
									}
								}
							}
						}
					}
					bool flag2 = false;
					bool flag3 = false;
					bool flag4 = false;
					bool flag5 = false;
					bool flag6 = false;
					bool flag7 = false;
					bool flag8 = false;
					bool flag9 = false;
					bool flag10 = false;
					bool flag11 = false;
					bool flag12 = false;
					bool flag13 = false;
					Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)Main.screenPosition.X, (int)Main.screenPosition.Y, Main.screenWidth, Main.screenHeight);
					int num = 5000;
					for (int l = 0; l < 200; l++)
					{
						if (Main.npc[l].active)
						{
							int num2 = 0;
							int type = Main.npc[l].type;
							if (type <= 245)
							{
								if (type <= 126)
								{
									if (type > 29)
									{
										switch (type)
										{
										case 111:
											goto IL_486;
										case 112:
											goto IL_4D9;
										case 113:
										case 114:
											break;
										default:
											switch (type)
											{
											case 125:
											case 126:
												break;
											default:
												goto IL_4D9;
											}
											break;
										}
										num2 = 2;
										goto IL_4D9;
									}
									switch (type)
									{
									case 13:
									case 14:
									case 15:
										num2 = 1;
										goto IL_4D9;
									default:
										switch (type)
										{
										case 26:
										case 27:
										case 28:
										case 29:
											break;
										default:
											goto IL_4D9;
										}
										break;
									}
									IL_486:
									num2 = 11;
								}
								else if (type <= 145)
								{
									if (type == 134)
									{
										goto IL_491;
									}
									switch (type)
									{
									case 143:
									case 144:
									case 145:
										goto IL_491;
									}
								}
								else
								{
									switch (type)
									{
									case 212:
									case 213:
									case 214:
									case 215:
									case 216:
										goto IL_496;
									case 217:
									case 218:
									case 219:
									case 220:
									case 221:
										break;
									case 222:
										num2 = 5;
										break;
									default:
										if (type == 245)
										{
											num2 = 4;
										}
										break;
									}
								}
							}
							else
							{
								if (type <= 439)
								{
									if (type <= 398)
									{
										switch (type)
										{
										case 262:
										case 263:
										case 264:
											num2 = 6;
											goto IL_4D9;
										case 265:
											goto IL_4D9;
										case 266:
											goto IL_491;
										default:
											switch (type)
											{
											case 381:
											case 382:
											case 383:
											case 385:
											case 386:
											case 388:
											case 389:
											case 390:
											case 391:
											case 395:
												break;
											case 384:
											case 387:
											case 392:
											case 393:
											case 394:
											case 396:
											case 397:
												goto IL_4D9;
											case 398:
												num2 = 7;
												goto IL_4D9;
											default:
												goto IL_4D9;
											}
											break;
										}
									}
									else
									{
										if (type == 422)
										{
											goto IL_4B5;
										}
										switch (type)
										{
										case 438:
											if (Main.npc[l].ai[1] == 1f)
											{
												num2 = 4;
												goto IL_4D9;
											}
											goto IL_4D9;
										case 439:
											num2 = 4;
											goto IL_4D9;
										default:
											goto IL_4D9;
										}
									}
								}
								else if (type <= 507)
								{
									switch (type)
									{
									case 491:
										goto IL_496;
									case 492:
										goto IL_4D9;
									case 493:
										goto IL_4B5;
									default:
										if (type != 507)
										{
											goto IL_4D9;
										}
										goto IL_4B5;
									}
								}
								else
								{
									if (type == 517)
									{
										goto IL_4B5;
									}
									if (type != 520)
									{
										goto IL_4D9;
									}
								}
								num2 = 9;
								goto IL_4D9;
								IL_4B5:
								num2 = 10;
							}
							IL_4D9:
							if (NPCID.Sets.BelongsToInvasionOldOnesArmy[Main.npc[l].type])
							{
								num2 = 12;
							}
							if (num2 == 0 && Main.npc[l].boss)
							{
								num2 = 1;
							}
							if (num2 == 0)
							{
								goto IL_5F6;
							}
							Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)(Main.npc[l].position.X + (float)(Main.npc[l].width / 2)) - num, (int)(Main.npc[l].position.Y + (float)(Main.npc[l].height / 2)) - num, num * 2, num * 2);
							if (!rectangle.Intersects(value))
							{
								goto IL_5F6;
							}
							if (num2 == 1)
							{
								flag2 = true;
								break;
							}
							if (num2 == 2)
							{
								flag3 = true;
								break;
							}
							if (num2 == 3)
							{
								flag4 = true;
								break;
							}
							if (num2 == 4)
							{
								flag5 = true;
								break;
							}
							if (num2 == 5)
							{
								flag6 = true;
								break;
							}
							if (num2 == 6)
							{
								flag7 = true;
								break;
							}
							if (num2 == 7)
							{
								flag8 = true;
								break;
							}
							if (num2 == 8)
							{
								flag9 = true;
								break;
							}
							if (num2 == 9)
							{
								flag10 = true;
								break;
							}
							if (num2 == 10)
							{
								flag11 = true;
								break;
							}
							if (num2 == 11)
							{
								flag12 = true;
								break;
							}
							if (num2 == 12)
							{
								flag13 = true;
								break;
							}
							break;
							IL_491:
							num2 = 3;
							goto IL_4D9;
							IL_496:
							num2 = 8;
							goto IL_4D9;
						}
						IL_5F6:;
					}
					int num3 = (int)((Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f);
					if (Main.musicVolume == 0f)
					{
						this.newMusic = 0;
					}
					else if (Main.gameMenu)
					{
						if (Main.netMode != 2)
						{
							this.newMusic = 6;
						}
						else
						{
							this.newMusic = 0;
						}
					}
					else
					{
						float num4 = (float)(Main.maxTilesX / 4200);
						num4 *= num4;
						float num5 = (float)((double)((Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16f - (65f + 10f * num4)) / (Main.worldSurface / 5.0));
						if (flag8)
						{
							this.newMusic = 38;
						}
						else if (flag10)
						{
							this.newMusic = 37;
						}
						else if (flag11)
						{
							this.newMusic = 34;
						}
						else if (flag7)
						{
							this.newMusic = 24;
						}
						else if (flag3)
						{
							this.newMusic = 12;
						}
						else if (flag2)
						{
							this.newMusic = 5;
						}
						else if (flag4)
						{
							this.newMusic = 13;
						}
						else if (flag5)
						{
							this.newMusic = 17;
						}
						else if (flag6)
						{
							this.newMusic = 25;
						}
						else if (flag9)
						{
							this.newMusic = 35;
						}
						else if (flag12)
						{
							this.newMusic = 39;
						}
						else if (flag13)
						{
							this.newMusic = 41;
						}
						else if (Main.player[Main.myPlayer].ZoneSandstorm)
						{
							this.newMusic = 40;
						}
						else if (Main.player[Main.myPlayer].position.Y > (float)((Main.maxTilesY - 200) * 16))
						{
							this.newMusic = 36;
						}
						else if (Main.eclipse && (double)Main.player[Main.myPlayer].position.Y < Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2))
						{
							this.newMusic = 27;
						}
						else if (num5 < 1f)
						{
							this.newMusic = 15;
						}
						else if (Main.tile[(int)(Main.player[Main.myPlayer].Center.X / 16f), (int)(Main.player[Main.myPlayer].Center.Y / 16f)].wall == 87)
						{
							this.newMusic = 26;
						}
						else if ((Main.bgStyle == 9 && (double)Main.player[Main.myPlayer].position.Y < Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2)) || Main.ugBack == 2)
						{
							this.newMusic = 29;
						}
						else if (Main.player[Main.myPlayer].ZoneCorrupt)
						{
							if ((double)Main.player[Main.myPlayer].position.Y > Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2))
							{
								this.newMusic = 10;
							}
							else
							{
								this.newMusic = 8;
							}
						}
						else if (Main.player[Main.myPlayer].ZoneCrimson)
						{
							if ((double)Main.player[Main.myPlayer].position.Y > Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2))
							{
								this.newMusic = 33;
							}
							else
							{
								this.newMusic = 16;
							}
						}
						else if (Main.player[Main.myPlayer].ZoneDungeon)
						{
							this.newMusic = 23;
						}
						else if (Main.player[Main.myPlayer].ZoneMeteor)
						{
							this.newMusic = 2;
						}
						else if (Main.player[Main.myPlayer].ZoneJungle)
						{
							this.newMusic = 7;
						}
						else if (Main.player[Main.myPlayer].ZoneSnow)
						{
							if ((double)Main.player[Main.myPlayer].position.Y > Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2))
							{
								this.newMusic = 20;
							}
							else
							{
								this.newMusic = 14;
							}
						}
						else if ((double)Main.player[Main.myPlayer].position.Y > Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2))
						{
							if (Main.player[Main.myPlayer].ZoneHoly)
							{
								this.newMusic = 11;
							}
							else if (Main.sandTiles > 2200)
							{
								this.newMusic = 21;
							}
							else
							{
								if (Main.ugMusic == 0)
								{
									Main.ugMusic = 4;
								}
								if (!Main.music[4].IsPlaying && !Main.music[31].IsPlaying)
								{
									if (Main.musicFade[4] == 1f)
									{
										Main.musicFade[31] = 1f;
									}
									if (Main.musicFade[31] == 1f)
									{
										Main.musicFade[4] = 1f;
									}
									int num6 = Main.rand.Next(2);
									if (num6 == 0)
									{
										Main.ugMusic = 4;
										Main.musicFade[31] = 0f;
									}
									else if (num6 == 1)
									{
										Main.ugMusic = 31;
										Main.musicFade[4] = 0f;
									}
								}
								this.newMusic = Main.ugMusic;
							}
						}
						else if (Main.dayTime && Main.player[Main.myPlayer].ZoneHoly)
						{
							if (Main.cloudAlpha > 0f && !Main.gameMenu)
							{
								this.newMusic = 19;
							}
							else
							{
								this.newMusic = 9;
							}
						}
						else if ((double)(Main.screenPosition.Y / 16f) < Main.worldSurface + 10.0 && (num3 < 380 || num3 > Main.maxTilesX - 380))
						{
							this.newMusic = 22;
						}
						else if (Main.sandTiles > 1000)
						{
							this.newMusic = 21;
						}
						else if (Main.dayTime)
						{
							if (Main.cloudAlpha > 0f && !Main.gameMenu)
							{
								this.newMusic = 19;
							}
							else
							{
								if (Main.dayMusic == 0)
								{
									Main.dayMusic = 1;
								}
								if (!Main.music[1].IsPlaying && !Main.music[18].IsPlaying)
								{
									int num7 = Main.rand.Next(2);
									if (num7 == 0)
									{
										Main.dayMusic = 1;
									}
									else if (num7 == 1)
									{
										Main.dayMusic = 18;
									}
								}
								this.newMusic = Main.dayMusic;
							}
						}
						else if (!Main.dayTime)
						{
							if (Main.bloodMoon)
							{
								this.newMusic = 2;
							}
							else if (Main.cloudAlpha > 0f && !Main.gameMenu)
							{
								this.newMusic = 19;
							}
							else
							{
								this.newMusic = 3;
							}
						}
						if ((double)(Main.screenPosition.Y / 16f) < Main.worldSurface + 10.0 && Main.pumpkinMoon)
						{
							this.newMusic = 30;
						}
						if ((double)(Main.screenPosition.Y / 16f) < Main.worldSurface + 10.0 && Main.snowMoon)
						{
							this.newMusic = 32;
						}
					}
					if (Main.gameMenu || Main.musicVolume == 0f)
					{
						Main.musicBox2 = -1;
						Main.musicBox = -1;
					}
					if (Main.musicBox2 >= 0)
					{
						Main.musicBox = Main.musicBox2;
					}
					if (Main.musicBox >= 0)
					{
						if (Main.musicBox == 0)
						{
							this.newMusic = 1;
						}
						if (Main.musicBox == 1)
						{
							this.newMusic = 2;
						}
						if (Main.musicBox == 2)
						{
							this.newMusic = 3;
						}
						if (Main.musicBox == 4)
						{
							this.newMusic = 4;
						}
						if (Main.musicBox == 5)
						{
							this.newMusic = 5;
						}
						if (Main.musicBox == 3)
						{
							this.newMusic = 6;
						}
						if (Main.musicBox == 6)
						{
							this.newMusic = 7;
						}
						if (Main.musicBox == 7)
						{
							this.newMusic = 8;
						}
						if (Main.musicBox == 9)
						{
							this.newMusic = 9;
						}
						if (Main.musicBox == 8)
						{
							this.newMusic = 10;
						}
						if (Main.musicBox == 11)
						{
							this.newMusic = 11;
						}
						if (Main.musicBox == 10)
						{
							this.newMusic = 12;
						}
						if (Main.musicBox == 12)
						{
							this.newMusic = 13;
						}
						if (Main.musicBox == 13)
						{
							this.newMusic = 14;
						}
						if (Main.musicBox == 14)
						{
							this.newMusic = 15;
						}
						if (Main.musicBox == 15)
						{
							this.newMusic = 16;
						}
						if (Main.musicBox == 16)
						{
							this.newMusic = 17;
						}
						if (Main.musicBox == 17)
						{
							this.newMusic = 18;
						}
						if (Main.musicBox == 18)
						{
							this.newMusic = 19;
						}
						if (Main.musicBox == 19)
						{
							this.newMusic = 20;
						}
						if (Main.musicBox == 20)
						{
							this.newMusic = 21;
						}
						if (Main.musicBox == 21)
						{
							this.newMusic = 22;
						}
						if (Main.musicBox == 22)
						{
							this.newMusic = 23;
						}
						if (Main.musicBox == 23)
						{
							this.newMusic = 24;
						}
						if (Main.musicBox == 24)
						{
							this.newMusic = 25;
						}
						if (Main.musicBox == 25)
						{
							this.newMusic = 26;
						}
						if (Main.musicBox == 26)
						{
							this.newMusic = 27;
						}
						if (Main.musicBox == 27)
						{
							this.newMusic = 29;
						}
						if (Main.musicBox == 28)
						{
							this.newMusic = 30;
						}
						if (Main.musicBox == 29)
						{
							this.newMusic = 31;
						}
						if (Main.musicBox == 30)
						{
							this.newMusic = 32;
						}
						if (Main.musicBox == 31)
						{
							this.newMusic = 33;
						}
						if (Main.musicBox == 32)
						{
							this.newMusic = 38;
						}
						if (Main.musicBox == 33)
						{
							this.newMusic = 37;
						}
						if (Main.musicBox == 34)
						{
							this.newMusic = 35;
						}
						if (Main.musicBox == 35)
						{
							this.newMusic = 36;
						}
						if (Main.musicBox == 36)
						{
							this.newMusic = 34;
						}
						if (Main.musicBox == 37)
						{
							this.newMusic = 39;
						}
						if (Main.musicBox == 38)
						{
							this.newMusic = 40;
						}
						if (Main.musicBox == 39)
						{
							this.newMusic = 41;
						}
					}
					Main.curMusic = this.newMusic;
					float num8 = 1f;
					if (NPC.MoonLordCountdown > 0)
					{
						num8 = (float)NPC.MoonLordCountdown / 3600f;
						num8 *= num8;
						if (NPC.MoonLordCountdown > 720)
						{
							num8 = MathHelper.Lerp(0f, 1f, num8);
						}
						else
						{
							num8 = 0f;
							Main.curMusic = 0;
						}
						if (NPC.MoonLordCountdown == 1 && Main.curMusic >= 1 && Main.curMusic < 42)
						{
							Main.musicFade[Main.curMusic] = 0f;
						}
					}
					for (int m = 1; m < 42; m++)
					{
						if (m == 28)
						{
							if (Main.cloudAlpha > 0f && (double)Main.player[Main.myPlayer].position.Y < Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2) && !Main.player[Main.myPlayer].ZoneSnow)
							{
								if (Main.ambientVolume == 0f)
								{
									if (Main.music[m].IsPlaying)
									{
										Main.music[m].Stop(AudioStopOptions.Immediate);
									}
								}
								else if (!Main.music[m].IsPlaying)
								{
									Main.music[m] = Main.soundBank.GetCue("Music_" + m);
									Main.music[m].Play();
									Main.music[m].SetVariable("Volume", Main.musicFade[m] * Main.ambientVolume);
								}
								else if (Main.music[m].IsPaused && base.IsActive)
								{
									Main.music[m].Resume();
								}
								else
								{
									Main.musicFade[m] += 0.005f;
									if (Main.musicFade[m] > 1f)
									{
										Main.musicFade[m] = 1f;
									}
									Main.music[m].SetVariable("Volume", Main.musicFade[m] * Main.ambientVolume);
								}
							}
							else if (Main.music[m].IsPlaying)
							{
								if (Main.musicFade[Main.curMusic] > 0.25f)
								{
									Main.musicFade[m] -= 0.005f;
								}
								else if (Main.curMusic == 0)
								{
									Main.musicFade[m] = 0f;
								}
								if (Main.musicFade[m] <= 0f)
								{
									Main.musicFade[m] -= 0f;
									Main.music[m].Stop(AudioStopOptions.Immediate);
								}
								else
								{
									Main.music[m].SetVariable("Volume", Main.musicFade[m] * Main.ambientVolume);
								}
							}
							else
							{
								Main.musicFade[m] = 0f;
							}
						}
						else if (m == Main.curMusic)
						{
							if (!Main.music[m].IsPlaying)
							{
								Main.music[m] = Main.soundBank.GetCue("Music_" + m);
								Main.music[m].Play();
								Main.music[m].SetVariable("Volume", Main.musicFade[m] * Main.musicVolume * num8);
							}
							else
							{
								Main.musicFade[m] += 0.005f;
								if (Main.musicFade[m] > 1f)
								{
									Main.musicFade[m] = 1f;
								}
								Main.music[m].SetVariable("Volume", Main.musicFade[m] * Main.musicVolume * num8);
							}
						}
						else if (Main.music[m].IsPlaying)
						{
							if (Main.musicFade[Main.curMusic] > 0.25f)
							{
								Main.musicFade[m] -= 0.005f;
							}
							else if (Main.curMusic == 0)
							{
								Main.musicFade[m] = 0f;
							}
							if (Main.musicFade[m] <= 0f)
							{
								Main.musicFade[m] -= 0f;
								Main.music[m].Stop(AudioStopOptions.Immediate);
							}
							else
							{
								Main.music[m].SetVariable("Volume", Main.musicFade[m] * Main.musicVolume * num8);
							}
						}
						else
						{
							Main.musicFade[m] = 0f;
						}
					}
					if (Main.musicError > 0)
					{
						Main.musicError--;
					}
				}
			}
			catch
			{
				Main.musicError++;
				if (Main.musicError >= 100)
				{
					Main.musicError = 0;
					Main.musicVolume = 0f;
				}
			}
		}

		public static void snowing()
		{
			if (Main.gamePaused)
			{
				return;
			}
			if (Main.snowTiles > 0 && (double)Main.player[Main.myPlayer].position.Y < Main.worldSurface * 16.0)
			{
				int maxValue = 800 / Main.snowTiles;
				float num = (float)Main.screenWidth / (float)Main.maxScreenW;
				int num2 = (int)(500f * num);
				num2 = (int)((float)num2 * (1f + 2f * Main.cloudAlpha));
				float num3 = 1f + 50f * Main.cloudAlpha;
				int num4 = 0;
				while ((float)num4 < num3)
				{
					try
					{
						if ((float)Main.snowDust >= (float)num2 * (Main.gfxQuality / 2f + 0.5f) + (float)num2 * 0.1f)
						{
							break;
						}
						if (Main.rand.Next(maxValue) == 0)
						{
							int num5 = Main.rand.Next(Main.screenWidth + 1000) - 500;
							int num6 = (int)Main.screenPosition.Y - Main.rand.Next(50);
							if (Main.player[Main.myPlayer].velocity.Y > 0f)
							{
								num6 -= (int)Main.player[Main.myPlayer].velocity.Y;
							}
							if (Main.rand.Next(5) == 0)
							{
								num5 = Main.rand.Next(500) - 500;
							}
							else if (Main.rand.Next(5) == 0)
							{
								num5 = Main.rand.Next(500) + Main.screenWidth;
							}
							if (num5 < 0 || num5 > Main.screenWidth)
							{
								num6 += Main.rand.Next((int)((double)Main.screenHeight * 0.8)) + (int)((double)Main.screenHeight * 0.1);
							}
							num5 += (int)Main.screenPosition.X;
							int num7 = num5 / 16;
							int num8 = num6 / 16;
							if (Main.tile[num7, num8] != null && Main.tile[num7, num8].wall == 0)
							{
								int num9 = Dust.NewDust(new Vector2((float)num5, (float)num6), 10, 10, 76, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
								Main.dust[num9].scale += Main.cloudAlpha * 0.2f;
								Main.dust[num9].velocity.Y = 3f + (float)Main.rand.Next(30) * 0.1f;
								Dust expr_292_cp_0 = Main.dust[num9];
								expr_292_cp_0.velocity.Y = expr_292_cp_0.velocity.Y * Main.dust[num9].scale;
								if (!Main.raining)
								{
									Main.dust[num9].velocity.X = Main.windSpeed + (float)Main.rand.Next(-10, 10) * 0.1f;
									Dust expr_2EC_cp_0 = Main.dust[num9];
									expr_2EC_cp_0.velocity.X = expr_2EC_cp_0.velocity.X + Main.windSpeed * Main.cloudAlpha * 10f;
								}
								else
								{
									Main.dust[num9].velocity.X = (float)Math.Sqrt((double)Math.Abs(Main.windSpeed)) * (float)Math.Sign(Main.windSpeed) * (Main.cloudAlpha + 0.5f) * 25f + Main.rand.NextFloat() * 0.2f - 0.1f;
									Dust expr_370_cp_0 = Main.dust[num9];
									expr_370_cp_0.velocity.Y = expr_370_cp_0.velocity.Y * 0.5f;
								}
								Dust expr_38E_cp_0 = Main.dust[num9];
								expr_38E_cp_0.velocity.Y = expr_38E_cp_0.velocity.Y * (1f + 0.3f * Main.cloudAlpha);
								Main.dust[num9].scale += Main.cloudAlpha * 0.2f;
								Main.dust[num9].velocity *= 1f + Main.cloudAlpha * 0.5f;
							}
						}
					}
					catch
					{
					}
					num4++;
				}
			}
		}

		public static void checkXMas()
		{
			DateTime now = DateTime.Now;
			int day = now.Day;
			int month = now.Month;
			if (day >= 15 && month == 12)
			{
				Main.xMas = true;
				return;
			}
			Main.xMas = false;
		}

		public static void checkHalloween()
		{
			DateTime now = DateTime.Now;
			int day = now.Day;
			int month = now.Month;
			if (day >= 20 && month == 10)
			{
				Main.halloween = true;
				return;
			}
			if (day <= 1 && month == 11)
			{
				Main.halloween = true;
				return;
			}
			Main.halloween = false;
		}

		public void updateCloudLayer()
		{
			if (Main.netMode == 1)
			{
				return;
			}
			if (Main.netMode == 0 && Main.gameMenu)
			{
				return;
			}
			int num = 86400;
			int num2 = num / 24;
			float num3 = Math.Max(1f, 1f + 4f * Main.cloudAlpha);
			if (Main.cloudBGActive > 0f)
			{
				if (Main.cloudBGActive > 1f)
				{
					Main.cloudBGActive -= (float)Main.dayRate / num3;
				}
				if (Main.cloudBGActive < 1f)
				{
					Main.cloudBGActive = 1f;
				}
				if (Main.cloudBGActive == 1f && Main.rand.Next((int)((float)(num2 * 2 / Math.Max(Main.dayRate, 1)) * num3)) == 0)
				{
					Main.cloudBGActive = (float)(-(float)Main.rand.Next(num2 * 4, num * 4));
					if (Main.netMode == 2)
					{
						NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
			}
			else
			{
				if (Main.cloudBGActive < 0f)
				{
					Main.cloudBGActive += (float)Main.dayRate * num3;
					if (Main.raining)
					{
						Main.cloudBGActive += (float)(2 * Main.dayRate) * num3;
					}
				}
				if (Main.cloudBGActive > 0f)
				{
					Main.cloudBGActive = 0f;
				}
				if (Main.cloudBGActive == 0f && Main.rand.Next((int)((float)(num2 * 8 / ((Main.dayRate == 0) ? 1 : Main.dayRate)) / num3)) == 0)
				{
					Main.cloudBGActive = (float)Main.rand.Next(num2 * 3, num * 2);
					if (Main.netMode == 2)
					{
						NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
					}
				}
			}
		}

		public static void TeleportEffect(Microsoft.Xna.Framework.Rectangle effectRect, int Style, int extraInfo = 0, float dustCountMult = 1f)
		{
			if (Style == 0)
			{
				Main.PlaySound(SoundID.Item6, effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2);
				int num = effectRect.Width * effectRect.Height / 5;
				num = (int)((float)num * dustCountMult);
				for (int i = 0; i < num; i++)
				{
					int num2 = Dust.NewDust(new Vector2((float)effectRect.X, (float)effectRect.Y), effectRect.Width, effectRect.Height, 159, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
					Main.dust[num2].scale = (float)Main.rand.Next(20, 70) * 0.01f;
					if (i < 10)
					{
						Main.dust[num2].scale += 0.25f;
					}
					if (i < 5)
					{
						Main.dust[num2].scale += 0.25f;
					}
				}
				return;
			}
			if (Style == 1)
			{
				Main.PlaySound(SoundID.Item8, effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2);
				int num3 = effectRect.Width * effectRect.Height / 5;
				for (int j = 0; j < num3; j++)
				{
					int num4 = Dust.NewDust(new Vector2((float)effectRect.X, (float)effectRect.Y), effectRect.Width, effectRect.Height, 164, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
					Main.dust[num4].scale = (float)Main.rand.Next(20, 70) * 0.01f;
					if (j < 10)
					{
						Main.dust[num4].scale += 0.25f;
					}
					if (j < 5)
					{
						Main.dust[num4].scale += 0.25f;
					}
				}
				return;
			}
			if (Style == 2)
			{
				for (int k = 0; k < 50; k++)
				{
					Main.dust[Dust.NewDust(new Vector2((float)effectRect.X, (float)effectRect.Y), effectRect.Width, effectRect.Height, 58, 0f, 0f, 150, Microsoft.Xna.Framework.Color.GhostWhite, 1.2f)].velocity *= 0.5f;
				}
				return;
			}
			if (Style == 3)
			{
				Main.PlaySound(SoundID.Item6, effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2);
				for (int l = 0; l < 50; l++)
				{
					int num5 = Dust.NewDust(new Vector2((float)effectRect.X, (float)effectRect.Y), effectRect.Width, effectRect.Height, 180, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
					Main.dust[num5].noGravity = true;
					for (int m = 0; m < 5; m++)
					{
						if (Main.rand.Next(3) == 0)
						{
							Main.dust[num5].velocity *= 0.75f;
						}
					}
					if (Main.rand.Next(3) == 0)
					{
						Main.dust[num5].velocity *= 2f;
						Main.dust[num5].scale *= 1.2f;
					}
					if (Main.rand.Next(3) == 0)
					{
						Main.dust[num5].velocity *= 2f;
						Main.dust[num5].scale *= 1.2f;
					}
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num5].fadeIn = (float)Main.rand.Next(75, 100) * 0.01f;
						Main.dust[num5].scale = (float)Main.rand.Next(25, 75) * 0.01f;
					}
					Main.dust[num5].scale *= 0.8f;
				}
				return;
			}
			if (Style == 4)
			{
				Main.PlaySound(SoundID.Item8, effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2);
				int num6 = effectRect.Width * effectRect.Height / 5;
				num6 = (int)((float)num6 * dustCountMult);
				for (int n = 0; n < num6; n++)
				{
					Dust dust = Main.dust[Dust.NewDust(effectRect.TopLeft(), effectRect.Width, effectRect.Height, 263, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f)];
					dust.color = PortalHelper.GetPortalColor(extraInfo);
					dust.noLight = true;
					dust.noGravity = true;
					dust.scale = 1.2f;
					dust.fadeIn = 0.4f;
					dust.color.A = 255;
				}
			}
		}

		public static void Ambience()
		{
			Main.ambientCounter++;
			if (Main.ambientCounter >= 15)
			{
				Main.ambientCounter = 0;
				Main.PlaySound(34, (int)Main.ambientWaterfallX, (int)Main.ambientWaterfallY, (int)Main.ambientWaterfallStrength, 1f, 0f);
				float num = Math.Abs(Main.ambientLavaX - (Main.screenPosition.X + (float)(Main.screenWidth / 2))) + Math.Abs(Main.ambientLavaY - (Main.screenPosition.Y + (float)(Main.screenHeight / 2)));
				float num2 = Math.Abs(Main.ambientLavafallX - (Main.screenPosition.X + (float)(Main.screenWidth / 2))) + Math.Abs(Main.ambientLavafallY - (Main.screenPosition.Y + (float)(Main.screenHeight / 2)));
				float num3 = Main.ambientLavaX;
				float num4 = Main.ambientLavaY;
				if (num2 < num)
				{
					num3 = Main.ambientLavafallX;
					num4 = Main.ambientLavafallY;
				}
				float num5 = Main.ambientLavafallStrength + Main.ambientLavaStrength;
				Main.PlaySound(35, (int)num3, (int)num4, (int)num5, 1f, 0f);
			}
		}

		public unsafe static void CritterCages()
		{
			if (Main.critterCage)
			{
				for (int i = 0; i < Main.cageFrames; i++)
				{
					if (Main.bunnyCageFrame[i] == 0)
					{
						Main.bunnyCageFrameCounter[i]++;
						if (Main.bunnyCageFrameCounter[i] > Main.rand.Next(30, 900))
						{
							if (Main.rand.Next(3) != 0)
							{
								int num = Main.rand.Next(7);
								if (num == 0)
								{
									Main.bunnyCageFrame[i] = 4;
								}
								else if (num <= 2)
								{
									Main.bunnyCageFrame[i] = 2;
								}
								else
								{
									Main.bunnyCageFrame[i] = 1;
								}
							}
							Main.bunnyCageFrameCounter[i] = 0;
						}
					}
					else if (Main.bunnyCageFrame[i] == 1)
					{
						Main.bunnyCageFrameCounter[i]++;
						if (Main.bunnyCageFrameCounter[i] >= 10)
						{
							Main.bunnyCageFrameCounter[i] = 0;
							Main.bunnyCageFrame[i] = 0;
						}
					}
					else if (Main.bunnyCageFrame[i] >= 2 && Main.bunnyCageFrame[i] <= 3)
					{
						Main.bunnyCageFrameCounter[i]++;
						if (Main.bunnyCageFrameCounter[i] >= 10)
						{
							Main.bunnyCageFrameCounter[i] = 0;
							Main.bunnyCageFrame[i]++;
						}
						if (Main.bunnyCageFrame[i] > 3)
						{
							Main.bunnyCageFrame[i] = 0;
						}
					}
					else if (Main.bunnyCageFrame[i] >= 4 && Main.bunnyCageFrame[i] <= 10)
					{
						Main.bunnyCageFrameCounter[i]++;
						if (Main.bunnyCageFrameCounter[i] >= 5)
						{
							Main.bunnyCageFrameCounter[i] = 0;
							Main.bunnyCageFrame[i]++;
						}
					}
					else if (Main.bunnyCageFrame[i] == 11)
					{
						Main.bunnyCageFrameCounter[i]++;
						if (Main.bunnyCageFrameCounter[i] > Main.rand.Next(30, 900))
						{
							if (Main.rand.Next(3) != 0)
							{
								if (Main.rand.Next(7) == 0)
								{
									Main.bunnyCageFrame[i] = 13;
								}
								else
								{
									Main.bunnyCageFrame[i] = 12;
								}
							}
							Main.bunnyCageFrameCounter[i] = 0;
						}
					}
					else if (Main.bunnyCageFrame[i] == 12)
					{
						Main.bunnyCageFrameCounter[i]++;
						if (Main.bunnyCageFrameCounter[i] >= 10)
						{
							Main.bunnyCageFrameCounter[i] = 0;
							Main.bunnyCageFrame[i] = 11;
						}
					}
					else if (Main.bunnyCageFrame[i] >= 13)
					{
						Main.bunnyCageFrameCounter[i]++;
						if (Main.bunnyCageFrameCounter[i] >= 5)
						{
							Main.bunnyCageFrameCounter[i] = 0;
							Main.bunnyCageFrame[i]++;
						}
						if (Main.bunnyCageFrame[i] > 21)
						{
							Main.bunnyCageFrame[i] = 0;
						}
					}
				}
				for (int j = 0; j < Main.cageFrames; j++)
				{
					if (Main.squirrelCageFrame[j] == 0)
					{
						Main.squirrelCageFrameCounter[j]++;
						if (Main.squirrelCageFrameCounter[j] > Main.rand.Next(30, 900))
						{
							if (Main.rand.Next(3) != 0)
							{
								int num = Main.rand.Next(7);
								if (num == 0)
								{
									Main.squirrelCageFrame[j] = 4;
								}
								else if (num <= 2)
								{
									Main.squirrelCageFrame[j] = 2;
								}
								else
								{
									Main.squirrelCageFrame[j] = 1;
								}
							}
							Main.squirrelCageFrameCounter[j] = 0;
						}
					}
					else if (Main.squirrelCageFrame[j] == 1)
					{
						Main.squirrelCageFrameCounter[j]++;
						if (Main.squirrelCageFrameCounter[j] >= 10)
						{
							Main.squirrelCageFrameCounter[j] = 0;
							Main.squirrelCageFrame[j] = 0;
						}
					}
					else if (Main.squirrelCageFrame[j] >= 2 && Main.squirrelCageFrame[j] <= 3)
					{
						Main.squirrelCageFrameCounter[j]++;
						if (Main.squirrelCageFrameCounter[j] >= 5)
						{
							Main.squirrelCageFrameCounter[j] = 0;
							Main.squirrelCageFrame[j]++;
						}
						if (Main.squirrelCageFrame[j] > 3)
						{
							if (Main.rand.Next(5) == 0)
							{
								Main.squirrelCageFrame[j] = 0;
							}
							else
							{
								Main.squirrelCageFrame[j] = 2;
							}
						}
					}
					else if (Main.squirrelCageFrame[j] >= 4 && Main.squirrelCageFrame[j] <= 8)
					{
						Main.squirrelCageFrameCounter[j]++;
						if (Main.squirrelCageFrameCounter[j] >= 5)
						{
							Main.squirrelCageFrameCounter[j] = 0;
							Main.squirrelCageFrame[j]++;
						}
					}
					else if (Main.squirrelCageFrame[j] == 9)
					{
						Main.squirrelCageFrameCounter[j]++;
						if (Main.squirrelCageFrameCounter[j] > Main.rand.Next(30, 900))
						{
							if (Main.rand.Next(3) != 0)
							{
								int num = Main.rand.Next(7);
								if (num == 0)
								{
									Main.squirrelCageFrame[j] = 13;
								}
								else if (num <= 2)
								{
									Main.squirrelCageFrame[j] = 11;
								}
								else
								{
									Main.squirrelCageFrame[j] = 10;
								}
							}
							Main.squirrelCageFrameCounter[j] = 0;
						}
					}
					else if (Main.squirrelCageFrame[j] == 10)
					{
						Main.squirrelCageFrameCounter[j]++;
						if (Main.squirrelCageFrameCounter[j] >= 10)
						{
							Main.squirrelCageFrameCounter[j] = 0;
							Main.squirrelCageFrame[j] = 9;
						}
					}
					else if (Main.squirrelCageFrame[j] == 11 || Main.squirrelCageFrame[j] == 12)
					{
						Main.squirrelCageFrameCounter[j]++;
						if (Main.squirrelCageFrameCounter[j] >= 5)
						{
							Main.squirrelCageFrame[j]++;
							if (Main.squirrelCageFrame[j] > 12)
							{
								if (Main.rand.Next(5) != 0)
								{
									Main.squirrelCageFrame[j] = 11;
								}
								else
								{
									Main.squirrelCageFrame[j] = 9;
								}
							}
							Main.squirrelCageFrameCounter[j] = 0;
						}
					}
					else if (Main.squirrelCageFrame[j] >= 13)
					{
						Main.squirrelCageFrameCounter[j]++;
						if (Main.squirrelCageFrameCounter[j] >= 5)
						{
							Main.squirrelCageFrameCounter[j] = 0;
							Main.squirrelCageFrame[j]++;
						}
						if (Main.squirrelCageFrame[j] > 17)
						{
							Main.squirrelCageFrame[j] = 0;
						}
					}
				}
				for (int k = 0; k < Main.cageFrames; k++)
				{
					if (Main.squirrelCageFrameOrange[k] == 0)
					{
						Main.squirrelCageFrameCounterOrange[k]++;
						if (Main.squirrelCageFrameCounterOrange[k] > Main.rand.Next(30, 900))
						{
							if (Main.rand.Next(3) != 0)
							{
								int num = Main.rand.Next(7);
								if (num == 0)
								{
									Main.squirrelCageFrameOrange[k] = 4;
								}
								else if (num <= 2)
								{
									Main.squirrelCageFrameOrange[k] = 2;
								}
								else
								{
									Main.squirrelCageFrameOrange[k] = 1;
								}
							}
							Main.squirrelCageFrameCounterOrange[k] = 0;
						}
					}
					else if (Main.squirrelCageFrameOrange[k] == 1)
					{
						Main.squirrelCageFrameCounterOrange[k]++;
						if (Main.squirrelCageFrameCounterOrange[k] >= 10)
						{
							Main.squirrelCageFrameCounterOrange[k] = 0;
							Main.squirrelCageFrameOrange[k] = 0;
						}
					}
					else if (Main.squirrelCageFrameOrange[k] >= 2 && Main.squirrelCageFrameOrange[k] <= 3)
					{
						Main.squirrelCageFrameCounterOrange[k]++;
						if (Main.squirrelCageFrameCounterOrange[k] >= 5)
						{
							Main.squirrelCageFrameCounterOrange[k] = 0;
							Main.squirrelCageFrameOrange[k]++;
						}
						if (Main.squirrelCageFrameOrange[k] > 3)
						{
							if (Main.rand.Next(5) == 0)
							{
								Main.squirrelCageFrameOrange[k] = 0;
							}
							else
							{
								Main.squirrelCageFrameOrange[k] = 2;
							}
						}
					}
					else if (Main.squirrelCageFrameOrange[k] >= 4 && Main.squirrelCageFrameOrange[k] <= 8)
					{
						Main.squirrelCageFrameCounterOrange[k]++;
						if (Main.squirrelCageFrameCounterOrange[k] >= 5)
						{
							Main.squirrelCageFrameCounterOrange[k] = 0;
							Main.squirrelCageFrameOrange[k]++;
						}
					}
					else if (Main.squirrelCageFrameOrange[k] == 9)
					{
						Main.squirrelCageFrameCounterOrange[k]++;
						if (Main.squirrelCageFrameCounterOrange[k] > Main.rand.Next(30, 900))
						{
							if (Main.rand.Next(3) != 0)
							{
								int num = Main.rand.Next(7);
								if (num == 0)
								{
									Main.squirrelCageFrameOrange[k] = 13;
								}
								else if (num <= 2)
								{
									Main.squirrelCageFrameOrange[k] = 11;
								}
								else
								{
									Main.squirrelCageFrameOrange[k] = 10;
								}
							}
							Main.squirrelCageFrameCounterOrange[k] = 0;
						}
					}
					else if (Main.squirrelCageFrameOrange[k] == 10)
					{
						Main.squirrelCageFrameCounterOrange[k]++;
						if (Main.squirrelCageFrameCounterOrange[k] >= 10)
						{
							Main.squirrelCageFrameCounterOrange[k] = 0;
							Main.squirrelCageFrameOrange[k] = 9;
						}
					}
					else if (Main.squirrelCageFrameOrange[k] == 11 || Main.squirrelCageFrameOrange[k] == 12)
					{
						Main.squirrelCageFrameCounterOrange[k]++;
						if (Main.squirrelCageFrameCounterOrange[k] >= 5)
						{
							Main.squirrelCageFrameOrange[k]++;
							if (Main.squirrelCageFrameOrange[k] > 12)
							{
								if (Main.rand.Next(5) != 0)
								{
									Main.squirrelCageFrameOrange[k] = 11;
								}
								else
								{
									Main.squirrelCageFrameOrange[k] = 9;
								}
							}
							Main.squirrelCageFrameCounterOrange[k] = 0;
						}
					}
					else if (Main.squirrelCageFrameOrange[k] >= 13)
					{
						Main.squirrelCageFrameCounterOrange[k]++;
						if (Main.squirrelCageFrameCounterOrange[k] >= 5)
						{
							Main.squirrelCageFrameCounterOrange[k] = 0;
							Main.squirrelCageFrameOrange[k]++;
						}
						if (Main.squirrelCageFrameOrange[k] > 17)
						{
							Main.squirrelCageFrameOrange[k] = 0;
						}
					}
				}
				for (int l = 0; l < Main.cageFrames; l++)
				{
					if (Main.mallardCageFrame[l] == 0 || Main.mallardCageFrame[l] == 4)
					{
						Main.mallardCageFrameCounter[l]++;
						if (Main.mallardCageFrameCounter[l] > Main.rand.Next(45, 2700))
						{
							if ((Main.mallardCageFrame[l] == 0 && Main.rand.Next(3) != 0) || (Main.mallardCageFrame[l] == 4 && Main.rand.Next(5) == 0))
							{
								if (Main.rand.Next(6) == 0)
								{
									Main.mallardCageFrame[l] = 5;
								}
								else if (Main.rand.Next(3) == 0)
								{
									if (Main.mallardCageFrame[l] == 4)
									{
										Main.mallardCageFrame[l] = 0;
									}
									else
									{
										Main.mallardCageFrame[l] = 4;
									}
								}
								else
								{
									Main.mallardCageFrame[l] = 1;
								}
							}
							Main.mallardCageFrameCounter[l] = 0;
						}
					}
					else if (Main.mallardCageFrame[l] >= 1 && Main.mallardCageFrame[l] <= 3)
					{
						Main.mallardCageFrameCounter[l]++;
						if (Main.mallardCageFrameCounter[l] >= 5)
						{
							Main.mallardCageFrameCounter[l] = 0;
							Main.mallardCageFrame[l]++;
						}
						if (Main.mallardCageFrame[l] > 3)
						{
							if (Main.rand.Next(5) == 0)
							{
								Main.mallardCageFrame[l] = 0;
							}
							else
							{
								Main.mallardCageFrame[l] = 1;
							}
						}
					}
					else if (Main.mallardCageFrame[l] >= 5 && Main.mallardCageFrame[l] <= 11)
					{
						Main.mallardCageFrameCounter[l]++;
						if (Main.mallardCageFrameCounter[l] >= 5)
						{
							Main.mallardCageFrameCounter[l] = 0;
							Main.mallardCageFrame[l]++;
						}
					}
					else if (Main.mallardCageFrame[l] == 12 || Main.mallardCageFrame[l] == 16)
					{
						Main.mallardCageFrameCounter[l]++;
						if (Main.mallardCageFrameCounter[l] > Main.rand.Next(45, 2700))
						{
							if ((Main.mallardCageFrame[l] == 12 && Main.rand.Next(3) != 0) || (Main.mallardCageFrame[l] == 16 && Main.rand.Next(5) == 0))
							{
								if (Main.rand.Next(6) == 0)
								{
									Main.mallardCageFrame[l] = 17;
								}
								else if (Main.rand.Next(3) == 0)
								{
									if (Main.mallardCageFrame[l] == 16)
									{
										Main.mallardCageFrame[l] = 12;
									}
									else
									{
										Main.mallardCageFrame[l] = 16;
									}
								}
								else
								{
									Main.mallardCageFrame[l] = 13;
								}
							}
							Main.mallardCageFrameCounter[l] = 0;
						}
					}
					else if (Main.mallardCageFrame[l] >= 13 && Main.mallardCageFrame[l] <= 15)
					{
						Main.mallardCageFrameCounter[l]++;
						if (Main.mallardCageFrameCounter[l] >= 5)
						{
							Main.mallardCageFrame[l]++;
							if (Main.mallardCageFrame[l] > 15)
							{
								if (Main.rand.Next(5) != 0)
								{
									Main.mallardCageFrame[l] = 12;
								}
								else
								{
									Main.mallardCageFrame[l] = 13;
								}
							}
							Main.mallardCageFrameCounter[l] = 0;
						}
					}
					else if (Main.mallardCageFrame[l] >= 17)
					{
						Main.mallardCageFrameCounter[l]++;
						if (Main.mallardCageFrameCounter[l] >= 5)
						{
							Main.mallardCageFrameCounter[l] = 0;
							Main.mallardCageFrame[l]++;
						}
						if (Main.mallardCageFrame[l] > 23)
						{
							Main.mallardCageFrame[l] = 0;
						}
					}
				}
				for (int m = 0; m < Main.cageFrames; m++)
				{
					if (Main.duckCageFrame[m] == 0 || Main.duckCageFrame[m] == 4)
					{
						Main.duckCageFrameCounter[m]++;
						if (Main.duckCageFrameCounter[m] > Main.rand.Next(45, 2700))
						{
							if ((Main.duckCageFrame[m] == 0 && Main.rand.Next(3) != 0) || (Main.duckCageFrame[m] == 4 && Main.rand.Next(5) == 0))
							{
								if (Main.rand.Next(6) == 0)
								{
									Main.duckCageFrame[m] = 5;
								}
								else if (Main.rand.Next(3) == 0)
								{
									if (Main.duckCageFrame[m] == 4)
									{
										Main.duckCageFrame[m] = 0;
									}
									else
									{
										Main.duckCageFrame[m] = 4;
									}
								}
								else
								{
									Main.duckCageFrame[m] = 1;
								}
							}
							Main.duckCageFrameCounter[m] = 0;
						}
					}
					else if (Main.duckCageFrame[m] >= 1 && Main.duckCageFrame[m] <= 3)
					{
						Main.duckCageFrameCounter[m]++;
						if (Main.duckCageFrameCounter[m] >= 5)
						{
							Main.duckCageFrameCounter[m] = 0;
							Main.duckCageFrame[m]++;
						}
						if (Main.duckCageFrame[m] > 3)
						{
							if (Main.rand.Next(5) == 0)
							{
								Main.duckCageFrame[m] = 0;
							}
							else
							{
								Main.duckCageFrame[m] = 1;
							}
						}
					}
					else if (Main.duckCageFrame[m] >= 5 && Main.duckCageFrame[m] <= 11)
					{
						Main.duckCageFrameCounter[m]++;
						if (Main.duckCageFrameCounter[m] >= 5)
						{
							Main.duckCageFrameCounter[m] = 0;
							Main.duckCageFrame[m]++;
						}
					}
					else if (Main.duckCageFrame[m] == 12 || Main.duckCageFrame[m] == 16)
					{
						Main.duckCageFrameCounter[m]++;
						if (Main.duckCageFrameCounter[m] > Main.rand.Next(45, 2700))
						{
							if ((Main.duckCageFrame[m] == 12 && Main.rand.Next(3) != 0) || (Main.duckCageFrame[m] == 16 && Main.rand.Next(5) == 0))
							{
								if (Main.rand.Next(6) == 0)
								{
									Main.duckCageFrame[m] = 17;
								}
								else if (Main.rand.Next(3) == 0)
								{
									if (Main.duckCageFrame[m] == 16)
									{
										Main.duckCageFrame[m] = 12;
									}
									else
									{
										Main.duckCageFrame[m] = 16;
									}
								}
								else
								{
									Main.duckCageFrame[m] = 13;
								}
							}
							Main.duckCageFrameCounter[m] = 0;
						}
					}
					else if (Main.duckCageFrame[m] >= 13 && Main.duckCageFrame[m] <= 15)
					{
						Main.duckCageFrameCounter[m]++;
						if (Main.duckCageFrameCounter[m] >= 5)
						{
							Main.duckCageFrame[m]++;
							if (Main.duckCageFrame[m] > 15)
							{
								if (Main.rand.Next(5) != 0)
								{
									Main.duckCageFrame[m] = 12;
								}
								else
								{
									Main.duckCageFrame[m] = 13;
								}
							}
							Main.duckCageFrameCounter[m] = 0;
						}
					}
					else if (Main.duckCageFrame[m] >= 17)
					{
						Main.duckCageFrameCounter[m]++;
						if (Main.duckCageFrameCounter[m] >= 5)
						{
							Main.duckCageFrameCounter[m] = 0;
							Main.duckCageFrame[m]++;
						}
						if (Main.duckCageFrame[m] > 23)
						{
							Main.duckCageFrame[m] = 0;
						}
					}
				}
				for (int n = 0; n < Main.cageFrames; n++)
				{
					if (Main.birdCageFrame[n] == 0)
					{
						Main.birdCageFrameCounter[n]++;
						if (Main.birdCageFrameCounter[n] > Main.rand.Next(30, 2700))
						{
							if (Main.rand.Next(3) != 0)
							{
								if (Main.rand.Next(3) != 0)
								{
									Main.birdCageFrame[n] = 2;
								}
								else
								{
									Main.birdCageFrame[n] = 1;
								}
							}
							Main.birdCageFrameCounter[n] = 0;
						}
					}
					else if (Main.birdCageFrame[n] == 1)
					{
						Main.birdCageFrameCounter[n]++;
						if (Main.birdCageFrameCounter[n] > Main.rand.Next(900, 18000) && Main.rand.Next(3) == 0)
						{
							Main.birdCageFrameCounter[n] = 0;
							Main.birdCageFrame[n] = 0;
						}
					}
					else if (Main.birdCageFrame[n] >= 2 && Main.birdCageFrame[n] <= 5)
					{
						Main.birdCageFrameCounter[n]++;
						if (Main.birdCageFrameCounter[n] >= 5)
						{
							Main.birdCageFrameCounter[n] = 0;
							if (Main.birdCageFrame[n] == 3 && Main.rand.Next(3) == 0)
							{
								Main.birdCageFrame[n] = 13;
							}
							else
							{
								Main.birdCageFrame[n]++;
							}
						}
					}
					else if (Main.birdCageFrame[n] == 6)
					{
						Main.birdCageFrameCounter[n]++;
						if (Main.birdCageFrameCounter[n] > Main.rand.Next(45, 2700))
						{
							if (Main.rand.Next(3) != 0)
							{
								if (Main.rand.Next(6) == 0)
								{
									Main.birdCageFrame[n] = 7;
								}
								else if (Main.rand.Next(6) == 0)
								{
									Main.birdCageFrame[n] = 11;
								}
							}
							Main.birdCageFrameCounter[n] = 0;
						}
					}
					else if (Main.birdCageFrame[n] >= 7 && Main.birdCageFrame[n] <= 10)
					{
						Main.birdCageFrameCounter[n]++;
						if (Main.birdCageFrameCounter[n] >= 5)
						{
							Main.birdCageFrame[n]++;
							if (Main.birdCageFrame[n] > 10)
							{
								Main.birdCageFrame[n] = 0;
							}
							Main.birdCageFrameCounter[n] = 0;
						}
					}
					else if (Main.birdCageFrame[n] >= 11 && Main.birdCageFrame[n] <= 13)
					{
						Main.birdCageFrameCounter[n]++;
						if (Main.birdCageFrameCounter[n] >= 5)
						{
							Main.birdCageFrame[n]++;
							Main.birdCageFrameCounter[n] = 0;
						}
					}
					else if (Main.birdCageFrame[n] == 14)
					{
						Main.birdCageFrameCounter[n]++;
						if (Main.birdCageFrameCounter[n] > Main.rand.Next(5, 600))
						{
							if (Main.rand.Next(20) == 0)
							{
								Main.birdCageFrame[n] = 16;
							}
							else if (Main.rand.Next(20) == 0)
							{
								Main.birdCageFrame[n] = 4;
							}
							else
							{
								Main.birdCageFrame[n] = 15;
							}
							Main.birdCageFrameCounter[n] = 0;
						}
					}
					else if (Main.birdCageFrame[n] == 15)
					{
						Main.birdCageFrameCounter[n]++;
						if (Main.birdCageFrameCounter[n] >= 10)
						{
							Main.birdCageFrameCounter[n] = 0;
							Main.birdCageFrame[n] = 14;
						}
					}
					else if (Main.birdCageFrame[n] >= 16 && Main.birdCageFrame[n] <= 18)
					{
						Main.birdCageFrameCounter[n]++;
						if (Main.birdCageFrameCounter[n] >= 5)
						{
							Main.birdCageFrame[n]++;
							if (Main.birdCageFrame[n] > 18)
							{
								Main.birdCageFrame[n] = 0;
							}
							Main.birdCageFrameCounter[n] = 0;
						}
					}
				}
				for (int num2 = 0; num2 < Main.cageFrames; num2++)
				{
					if (Main.blueBirdCageFrame[num2] == 0)
					{
						Main.blueBirdCageFrameCounter[num2]++;
						if (Main.blueBirdCageFrameCounter[num2] > Main.rand.Next(30, 2700))
						{
							if (Main.rand.Next(3) != 0)
							{
								if (Main.rand.Next(3) != 0)
								{
									Main.blueBirdCageFrame[num2] = 2;
								}
								else
								{
									Main.blueBirdCageFrame[num2] = 1;
								}
							}
							Main.blueBirdCageFrameCounter[num2] = 0;
						}
					}
					else if (Main.blueBirdCageFrame[num2] == 1)
					{
						Main.blueBirdCageFrameCounter[num2]++;
						if (Main.blueBirdCageFrameCounter[num2] > Main.rand.Next(900, 18000) && Main.rand.Next(3) == 0)
						{
							Main.blueBirdCageFrameCounter[num2] = 0;
							Main.blueBirdCageFrame[num2] = 0;
						}
					}
					else if (Main.blueBirdCageFrame[num2] >= 2 && Main.blueBirdCageFrame[num2] <= 5)
					{
						Main.blueBirdCageFrameCounter[num2]++;
						if (Main.blueBirdCageFrameCounter[num2] >= 5)
						{
							Main.blueBirdCageFrameCounter[num2] = 0;
							if (Main.blueBirdCageFrame[num2] == 3 && Main.rand.Next(3) == 0)
							{
								Main.blueBirdCageFrame[num2] = 13;
							}
							else
							{
								Main.blueBirdCageFrame[num2]++;
							}
						}
					}
					else if (Main.blueBirdCageFrame[num2] == 6)
					{
						Main.blueBirdCageFrameCounter[num2]++;
						if (Main.blueBirdCageFrameCounter[num2] > Main.rand.Next(45, 2700))
						{
							if (Main.rand.Next(3) != 0)
							{
								if (Main.rand.Next(6) == 0)
								{
									Main.blueBirdCageFrame[num2] = 7;
								}
								else if (Main.rand.Next(6) == 0)
								{
									Main.blueBirdCageFrame[num2] = 11;
								}
							}
							Main.blueBirdCageFrameCounter[num2] = 0;
						}
					}
					else if (Main.blueBirdCageFrame[num2] >= 7 && Main.blueBirdCageFrame[num2] <= 10)
					{
						Main.blueBirdCageFrameCounter[num2]++;
						if (Main.blueBirdCageFrameCounter[num2] >= 5)
						{
							Main.blueBirdCageFrame[num2]++;
							if (Main.blueBirdCageFrame[num2] > 10)
							{
								Main.blueBirdCageFrame[num2] = 0;
							}
							Main.blueBirdCageFrameCounter[num2] = 0;
						}
					}
					else if (Main.blueBirdCageFrame[num2] >= 11 && Main.blueBirdCageFrame[num2] <= 13)
					{
						Main.blueBirdCageFrameCounter[num2]++;
						if (Main.blueBirdCageFrameCounter[num2] >= 5)
						{
							Main.blueBirdCageFrame[num2]++;
							Main.blueBirdCageFrameCounter[num2] = 0;
						}
					}
					else if (Main.blueBirdCageFrame[num2] == 14)
					{
						Main.blueBirdCageFrameCounter[num2]++;
						if (Main.blueBirdCageFrameCounter[num2] > Main.rand.Next(5, 600))
						{
							if (Main.rand.Next(20) == 0)
							{
								Main.blueBirdCageFrame[num2] = 16;
							}
							else if (Main.rand.Next(20) == 0)
							{
								Main.blueBirdCageFrame[num2] = 4;
							}
							else
							{
								Main.blueBirdCageFrame[num2] = 15;
							}
							Main.blueBirdCageFrameCounter[num2] = 0;
						}
					}
					else if (Main.blueBirdCageFrame[num2] == 15)
					{
						Main.blueBirdCageFrameCounter[num2]++;
						if (Main.blueBirdCageFrameCounter[num2] >= 10)
						{
							Main.blueBirdCageFrameCounter[num2] = 0;
							Main.blueBirdCageFrame[num2] = 14;
						}
					}
					else if (Main.blueBirdCageFrame[num2] >= 16 && Main.blueBirdCageFrame[num2] <= 18)
					{
						Main.blueBirdCageFrameCounter[num2]++;
						if (Main.blueBirdCageFrameCounter[num2] >= 5)
						{
							Main.blueBirdCageFrame[num2]++;
							if (Main.blueBirdCageFrame[num2] > 18)
							{
								Main.blueBirdCageFrame[num2] = 0;
							}
							Main.blueBirdCageFrameCounter[num2] = 0;
						}
					}
				}
				for (int num3 = 0; num3 < Main.cageFrames; num3++)
				{
					if (Main.redBirdCageFrame[num3] == 0)
					{
						Main.redBirdCageFrameCounter[num3]++;
						if (Main.redBirdCageFrameCounter[num3] > Main.rand.Next(30, 2700))
						{
							if (Main.rand.Next(3) != 0)
							{
								if (Main.rand.Next(3) != 0)
								{
									Main.redBirdCageFrame[num3] = 2;
								}
								else
								{
									Main.redBirdCageFrame[num3] = 1;
								}
							}
							Main.redBirdCageFrameCounter[num3] = 0;
						}
					}
					else if (Main.redBirdCageFrame[num3] == 1)
					{
						Main.redBirdCageFrameCounter[num3]++;
						if (Main.redBirdCageFrameCounter[num3] > Main.rand.Next(900, 18000) && Main.rand.Next(3) == 0)
						{
							Main.redBirdCageFrameCounter[num3] = 0;
							Main.redBirdCageFrame[num3] = 0;
						}
					}
					else if (Main.redBirdCageFrame[num3] >= 2 && Main.redBirdCageFrame[num3] <= 5)
					{
						Main.redBirdCageFrameCounter[num3]++;
						if (Main.redBirdCageFrameCounter[num3] >= 5)
						{
							Main.redBirdCageFrameCounter[num3] = 0;
							if (Main.redBirdCageFrame[num3] == 3 && Main.rand.Next(3) == 0)
							{
								Main.redBirdCageFrame[num3] = 13;
							}
							else
							{
								Main.redBirdCageFrame[num3]++;
							}
						}
					}
					else if (Main.redBirdCageFrame[num3] == 6)
					{
						Main.redBirdCageFrameCounter[num3]++;
						if (Main.redBirdCageFrameCounter[num3] > Main.rand.Next(45, 2700))
						{
							if (Main.rand.Next(3) != 0)
							{
								if (Main.rand.Next(6) == 0)
								{
									Main.redBirdCageFrame[num3] = 7;
								}
								else if (Main.rand.Next(6) == 0)
								{
									Main.redBirdCageFrame[num3] = 11;
								}
							}
							Main.redBirdCageFrameCounter[num3] = 0;
						}
					}
					else if (Main.redBirdCageFrame[num3] >= 7 && Main.redBirdCageFrame[num3] <= 10)
					{
						Main.redBirdCageFrameCounter[num3]++;
						if (Main.redBirdCageFrameCounter[num3] >= 5)
						{
							Main.redBirdCageFrame[num3]++;
							if (Main.redBirdCageFrame[num3] > 10)
							{
								Main.redBirdCageFrame[num3] = 0;
							}
							Main.redBirdCageFrameCounter[num3] = 0;
						}
					}
					else if (Main.redBirdCageFrame[num3] >= 11 && Main.redBirdCageFrame[num3] <= 13)
					{
						Main.redBirdCageFrameCounter[num3]++;
						if (Main.redBirdCageFrameCounter[num3] >= 5)
						{
							Main.redBirdCageFrame[num3]++;
							Main.redBirdCageFrameCounter[num3] = 0;
						}
					}
					else if (Main.redBirdCageFrame[num3] == 14)
					{
						Main.redBirdCageFrameCounter[num3]++;
						if (Main.redBirdCageFrameCounter[num3] > Main.rand.Next(5, 600))
						{
							if (Main.rand.Next(20) == 0)
							{
								Main.redBirdCageFrame[num3] = 16;
							}
							else if (Main.rand.Next(20) == 0)
							{
								Main.redBirdCageFrame[num3] = 4;
							}
							else
							{
								Main.redBirdCageFrame[num3] = 15;
							}
							Main.redBirdCageFrameCounter[num3] = 0;
						}
					}
					else if (Main.redBirdCageFrame[num3] == 15)
					{
						Main.redBirdCageFrameCounter[num3]++;
						if (Main.redBirdCageFrameCounter[num3] >= 10)
						{
							Main.redBirdCageFrameCounter[num3] = 0;
							Main.redBirdCageFrame[num3] = 14;
						}
					}
					else if (Main.redBirdCageFrame[num3] >= 16 && Main.redBirdCageFrame[num3] <= 18)
					{
						Main.redBirdCageFrameCounter[num3]++;
						if (Main.redBirdCageFrameCounter[num3] >= 5)
						{
							Main.redBirdCageFrame[num3]++;
							if (Main.redBirdCageFrame[num3] > 18)
							{
								Main.redBirdCageFrame[num3] = 0;
							}
							Main.redBirdCageFrameCounter[num3] = 0;
						}
					}
				}
				for (int num4 = 0; num4 < 2; num4++)
				{
					for (int num5 = 0; num5 < Main.cageFrames; num5++)
					{
						if (Main.scorpionCageFrame[num4, num5] == 0 || Main.scorpionCageFrame[num4, num5] == 7)
						{
							Main.scorpionCageFrameCounter[num4, num5]++;
							if (Main.scorpionCageFrameCounter[num4, num5] > Main.rand.Next(30, 3600))
							{
								if (Main.scorpionCageFrame[num4, num5] == 7)
								{
									Main.scorpionCageFrame[num4, num5] = 0;
								}
								else if (Main.rand.Next(3) == 0)
								{
									if (Main.rand.Next(7) == 0)
									{
										Main.scorpionCageFrame[num4, num5] = 1;
									}
									else if (Main.rand.Next(4) == 0)
									{
										Main.scorpionCageFrame[num4, num5] = 8;
									}
									else if (Main.rand.Next(3) == 0)
									{
										Main.scorpionCageFrame[num4, num5] = 7;
									}
									else
									{
										Main.scorpionCageFrame[num4, num5] = 14;
									}
								}
								Main.scorpionCageFrameCounter[num4, num5] = 0;
							}
						}
						else if (Main.scorpionCageFrame[num4, num5] >= 1 && Main.scorpionCageFrame[num4, num5] <= 2)
						{
							Main.scorpionCageFrameCounter[num4, num5]++;
							if (Main.scorpionCageFrameCounter[num4, num5] >= 10)
							{
								Main.scorpionCageFrameCounter[num4, num5] = 0;
								Main.scorpionCageFrame[num4, num5]++;
							}
						}
						else if (Main.scorpionCageFrame[num4, num5] >= 8 && Main.scorpionCageFrame[num4, num5] <= 10)
						{
							Main.scorpionCageFrameCounter[num4, num5]++;
							if (Main.scorpionCageFrameCounter[num4, num5] >= 10)
							{
								Main.scorpionCageFrameCounter[num4, num5] = 0;
								Main.scorpionCageFrame[num4, num5]++;
							}
						}
						else if (Main.scorpionCageFrame[num4, num5] == 11)
						{
							Main.scorpionCageFrameCounter[num4, num5]++;
							if (Main.scorpionCageFrameCounter[num4, num5] > Main.rand.Next(45, 5400))
							{
								if (Main.rand.Next(6) == 0)
								{
									Main.scorpionCageFrame[num4, num5] = 12;
								}
								Main.scorpionCageFrameCounter[num4, num5] = 0;
							}
						}
						else if (Main.scorpionCageFrame[num4, num5] >= 12 && Main.scorpionCageFrame[num4, num5] <= 13)
						{
							Main.scorpionCageFrameCounter[num4, num5]++;
							if (Main.scorpionCageFrameCounter[num4, num5] >= 10)
							{
								Main.scorpionCageFrameCounter[num4, num5] = 0;
								Main.scorpionCageFrame[num4, num5]++;
								if (Main.scorpionCageFrame[num4, num5] > 13)
								{
									Main.scorpionCageFrame[num4, num5] = 0;
								}
							}
						}
						else if (Main.scorpionCageFrame[num4, num5] >= 14 && Main.scorpionCageFrame[num4, num5] <= 15)
						{
							Main.scorpionCageFrameCounter[num4, num5]++;
							if (Main.scorpionCageFrameCounter[num4, num5] >= 5)
							{
								Main.scorpionCageFrameCounter[num4, num5] = 0;
								Main.scorpionCageFrame[num4, num5]++;
								if (Main.scorpionCageFrame[num4, num5] > 15)
								{
									Main.scorpionCageFrame[num4, num5] = 14;
								}
								if (Main.rand.Next(5) == 0)
								{
									Main.scorpionCageFrame[num4, num5] = 0;
								}
							}
						}
						else if (Main.scorpionCageFrame[num4, num5] == 4 || Main.scorpionCageFrame[num4, num5] == 3)
						{
							Main.scorpionCageFrameCounter[num4, num5]++;
							if (Main.scorpionCageFrameCounter[num4, num5] > Main.rand.Next(30, 3600))
							{
								if (Main.scorpionCageFrame[num4, num5] == 3)
								{
									Main.scorpionCageFrame[num4, num5] = 4;
								}
								else if (Main.rand.Next(3) == 0)
								{
									if (Main.rand.Next(5) == 0)
									{
										Main.scorpionCageFrame[num4, num5] = 5;
									}
									else if (Main.rand.Next(3) == 0)
									{
										Main.scorpionCageFrame[num4, num5] = 3;
									}
									else
									{
										Main.scorpionCageFrame[num4, num5] = 16;
									}
								}
								Main.scorpionCageFrameCounter[num4, num5] = 0;
							}
						}
						else if (Main.scorpionCageFrame[num4, num5] >= 5 && Main.scorpionCageFrame[num4, num5] <= 6)
						{
							Main.scorpionCageFrameCounter[num4, num5]++;
							if (Main.scorpionCageFrameCounter[num4, num5] >= 10)
							{
								Main.scorpionCageFrameCounter[num4, num5] = 0;
								Main.scorpionCageFrame[num4, num5]++;
								if (Main.scorpionCageFrame[num4, num5] > 7)
								{
									Main.scorpionCageFrame[num4, num5] = 0;
								}
							}
						}
						else if (Main.scorpionCageFrame[num4, num5] >= 16 && Main.scorpionCageFrame[num4, num5] <= 17)
						{
							Main.scorpionCageFrameCounter[num4, num5]++;
							if (Main.scorpionCageFrameCounter[num4, num5] >= 5)
							{
								Main.scorpionCageFrameCounter[num4, num5] = 0;
								Main.scorpionCageFrame[num4, num5]++;
								if (Main.scorpionCageFrame[num4, num5] > 17)
								{
									Main.scorpionCageFrame[num4, num5] = 16;
								}
								if (Main.rand.Next(5) == 0)
								{
									Main.scorpionCageFrame[num4, num5] = 4;
								}
							}
						}
					}
				}
				for (int num6 = 0; num6 < Main.cageFrames; num6++)
				{
					if (Main.penguinCageFrame[num6] == 0)
					{
						Main.penguinCageFrameCounter[num6]++;
						if (Main.penguinCageFrameCounter[num6] > Main.rand.Next(30, 1800))
						{
							if (Main.rand.Next(2) == 0)
							{
								if (Main.rand.Next(10) == 0)
								{
									Main.penguinCageFrame[num6] = 4;
								}
								else if (Main.rand.Next(7) == 0)
								{
									Main.penguinCageFrame[num6] = 15;
								}
								else if (Main.rand.Next(3) == 0)
								{
									Main.penguinCageFrame[num6] = 2;
								}
								else
								{
									Main.penguinCageFrame[num6] = 1;
								}
							}
							Main.penguinCageFrameCounter[num6] = 0;
						}
					}
					else if (Main.penguinCageFrame[num6] == 1)
					{
						Main.penguinCageFrameCounter[num6]++;
						if (Main.penguinCageFrameCounter[num6] >= 10)
						{
							Main.penguinCageFrameCounter[num6] = 0;
							Main.penguinCageFrame[num6] = 0;
						}
					}
					else if (Main.penguinCageFrame[num6] >= 2 && Main.penguinCageFrame[num6] <= 3)
					{
						Main.penguinCageFrameCounter[num6]++;
						if (Main.penguinCageFrameCounter[num6] >= 5)
						{
							Main.penguinCageFrameCounter[num6] = 0;
							Main.penguinCageFrame[num6]++;
							if (Main.penguinCageFrame[num6] > 3)
							{
								if (Main.rand.Next(3) == 0)
								{
									Main.penguinCageFrame[num6] = 0;
								}
								else
								{
									Main.penguinCageFrame[num6] = 2;
								}
							}
						}
					}
					else if (Main.penguinCageFrame[num6] >= 4 && Main.penguinCageFrame[num6] <= 6)
					{
						Main.penguinCageFrameCounter[num6]++;
						if (Main.penguinCageFrameCounter[num6] >= 10)
						{
							Main.penguinCageFrameCounter[num6] = 0;
							Main.penguinCageFrame[num6]++;
						}
					}
					else if (Main.penguinCageFrame[num6] == 15)
					{
						Main.penguinCageFrameCounter[num6]++;
						if (Main.penguinCageFrameCounter[num6] > Main.rand.Next(10, 1800))
						{
							if (Main.rand.Next(2) == 0)
							{
								Main.penguinCageFrame[num6] = 0;
							}
							Main.penguinCageFrameCounter[num6] = 0;
						}
					}
					else if (Main.penguinCageFrame[num6] == 8)
					{
						Main.penguinCageFrameCounter[num6]++;
						if (Main.penguinCageFrameCounter[num6] > Main.rand.Next(30, 3600))
						{
							if (Main.rand.Next(2) == 0)
							{
								if (Main.rand.Next(10) == 0)
								{
									Main.penguinCageFrame[num6] = 12;
								}
								else if (Main.rand.Next(7) == 0)
								{
									Main.penguinCageFrame[num6] = 7;
								}
								else if (Main.rand.Next(3) == 0)
								{
									Main.penguinCageFrame[num6] = 10;
								}
								else
								{
									Main.penguinCageFrame[num6] = 9;
								}
							}
							Main.penguinCageFrameCounter[num6] = 0;
						}
					}
					else if (Main.penguinCageFrame[num6] == 9)
					{
						Main.penguinCageFrameCounter[num6]++;
						if (Main.penguinCageFrameCounter[num6] >= 10)
						{
							Main.penguinCageFrameCounter[num6] = 0;
							Main.penguinCageFrame[num6] = 8;
						}
					}
					else if (Main.penguinCageFrame[num6] >= 10 && Main.penguinCageFrame[num6] <= 11)
					{
						Main.penguinCageFrameCounter[num6]++;
						if (Main.penguinCageFrameCounter[num6] >= 5)
						{
							Main.penguinCageFrameCounter[num6] = 0;
							Main.penguinCageFrame[num6]++;
							if (Main.penguinCageFrame[num6] > 3)
							{
								if (Main.rand.Next(3) == 0)
								{
									Main.penguinCageFrame[num6] = 8;
								}
								else
								{
									Main.penguinCageFrame[num6] = 10;
								}
							}
						}
					}
					else if (Main.penguinCageFrame[num6] >= 12 && Main.penguinCageFrame[num6] <= 14)
					{
						Main.penguinCageFrameCounter[num6]++;
						if (Main.penguinCageFrameCounter[num6] >= 10)
						{
							Main.penguinCageFrameCounter[num6] = 0;
							Main.penguinCageFrame[num6]++;
						}
					}
					else if (Main.penguinCageFrame[num6] == 7)
					{
						Main.penguinCageFrameCounter[num6]++;
						if (Main.penguinCageFrameCounter[num6] > Main.rand.Next(10, 3600))
						{
							if (Main.rand.Next(2) == 0)
							{
								Main.penguinCageFrame[num6] = 8;
							}
							Main.penguinCageFrameCounter[num6] = 0;
						}
					}
				}
				for (int num7 = 0; num7 < Main.cageFrames; num7++)
				{
					if (Main.snailCageFrame[num7] >= 0 && Main.snailCageFrame[num7] <= 13)
					{
						Main.snailCageFrameCounter[num7]++;
						if (Main.snailCageFrameCounter[num7] > Main.rand.Next(45, 3600))
						{
							if (Main.snailCageFrame[num7] == 8 && Main.rand.Next(2) == 0)
							{
								Main.snailCageFrame[num7] = 14;
							}
							else if (Main.snailCageFrame[num7] == 1 && Main.rand.Next(3) == 0)
							{
								Main.snailCageFrame[num7] = 19;
							}
							else if (Main.snailCageFrame[num7] == 1 && Main.rand.Next(3) == 0)
							{
								Main.snailCageFrame[num7] = 20;
							}
							else
							{
								Main.snailCageFrame[num7]++;
								if (Main.snailCageFrame[num7] > 13)
								{
									Main.snailCageFrame[num7] = 0;
								}
							}
							Main.snailCageFrameCounter[num7] = 0;
						}
					}
					else if (Main.snailCageFrame[num7] >= 14 && Main.snailCageFrame[num7] <= 18)
					{
						Main.snailCageFrameCounter[num7]++;
						if (Main.snailCageFrameCounter[num7] >= 5)
						{
							Main.snailCageFrameCounter[num7] = 0;
							Main.snailCageFrame[num7]++;
						}
						if (Main.snailCageFrame[num7] > 18)
						{
							Main.snailCageFrame[num7] = 20;
						}
					}
					else if (Main.snailCageFrame[num7] == 19 || Main.snailCageFrame[num7] == 20)
					{
						Main.snailCageFrameCounter[num7]++;
						if (Main.snailCageFrameCounter[num7] > Main.rand.Next(60, 7200))
						{
							Main.snailCageFrameCounter[num7] = 0;
							if (Main.rand.Next(4) == 0)
							{
								if (Main.rand.Next(3) == 0)
								{
									Main.snailCageFrame[num7] = 2;
								}
								else if (Main.snailCageFrame[num7] == 19)
								{
									Main.snailCageFrame[num7] = 20;
								}
								else
								{
									Main.snailCageFrame[num7] = 19;
								}
							}
						}
					}
				}
				for (int num8 = 0; num8 < Main.cageFrames; num8++)
				{
					if (Main.snail2CageFrame[num8] >= 0 && Main.snail2CageFrame[num8] <= 13)
					{
						Main.snail2CageFrameCounter[num8]++;
						if (Main.snail2CageFrameCounter[num8] > Main.rand.Next(30, 2700))
						{
							if (Main.snail2CageFrame[num8] == 8 && Main.rand.Next(2) == 0)
							{
								Main.snail2CageFrame[num8] = 14;
							}
							else if (Main.snail2CageFrame[num8] == 1 && Main.rand.Next(3) == 0)
							{
								Main.snail2CageFrame[num8] = 19;
							}
							else if (Main.snail2CageFrame[num8] == 1 && Main.rand.Next(3) == 0)
							{
								Main.snail2CageFrame[num8] = 20;
							}
							else
							{
								Main.snail2CageFrame[num8]++;
								if (Main.snail2CageFrame[num8] > 13)
								{
									Main.snail2CageFrame[num8] = 0;
								}
							}
							Main.snail2CageFrameCounter[num8] = 0;
						}
					}
					else if (Main.snail2CageFrame[num8] >= 14 && Main.snail2CageFrame[num8] <= 18)
					{
						Main.snail2CageFrameCounter[num8]++;
						if (Main.snail2CageFrameCounter[num8] >= 5)
						{
							Main.snail2CageFrameCounter[num8] = 0;
							Main.snail2CageFrame[num8]++;
						}
						if (Main.snail2CageFrame[num8] > 18)
						{
							Main.snail2CageFrame[num8] = 20;
						}
					}
					else if (Main.snail2CageFrame[num8] == 19 || Main.snail2CageFrame[num8] == 20)
					{
						Main.snail2CageFrameCounter[num8]++;
						if (Main.snail2CageFrameCounter[num8] > Main.rand.Next(45, 5400))
						{
							Main.snail2CageFrameCounter[num8] = 0;
							if (Main.rand.Next(4) == 0)
							{
								if (Main.rand.Next(3) == 0)
								{
									Main.snail2CageFrame[num8] = 2;
								}
								else if (Main.snail2CageFrame[num8] == 19)
								{
									Main.snail2CageFrame[num8] = 20;
								}
								else
								{
									Main.snail2CageFrame[num8] = 19;
								}
							}
						}
					}
				}
				for (int num9 = 0; num9 < Main.cageFrames; num9++)
				{
					if (Main.frogCageFrame[num9] == 0)
					{
						Main.frogCageFrameCounter[num9]++;
						if (Main.frogCageFrameCounter[num9] > Main.rand.Next(45, 3600))
						{
							if (Main.rand.Next(10) == 0)
							{
								Main.frogCageFrame[num9] = 1;
							}
							else
							{
								Main.frogCageFrame[num9] = 12;
							}
							Main.frogCageFrameCounter[num9] = 0;
						}
					}
					else if (Main.frogCageFrame[num9] >= 1 && Main.frogCageFrame[num9] <= 5)
					{
						Main.frogCageFrameCounter[num9]++;
						if (Main.frogCageFrameCounter[num9] >= 5)
						{
							Main.frogCageFrame[num9]++;
							Main.frogCageFrameCounter[num9] = 0;
						}
					}
					else if (Main.frogCageFrame[num9] >= 12 && Main.frogCageFrame[num9] <= 17)
					{
						Main.frogCageFrameCounter[num9]++;
						if (Main.frogCageFrameCounter[num9] >= 5)
						{
							Main.frogCageFrameCounter[num9] = 0;
							Main.frogCageFrame[num9]++;
						}
						if (Main.frogCageFrame[num9] > 17)
						{
							if (Main.rand.Next(3) == 0)
							{
								Main.frogCageFrame[num9] = 0;
							}
							else
							{
								Main.frogCageFrame[num9] = 12;
							}
						}
					}
					else if (Main.frogCageFrame[num9] == 6)
					{
						Main.frogCageFrameCounter[num9]++;
						if (Main.frogCageFrameCounter[num9] > Main.rand.Next(45, 3600))
						{
							if (Main.rand.Next(10) == 0)
							{
								Main.frogCageFrame[num9] = 7;
							}
							else
							{
								Main.frogCageFrame[num9] = 18;
							}
							Main.frogCageFrameCounter[num9] = 0;
						}
					}
					else if (Main.frogCageFrame[num9] >= 7 && Main.frogCageFrame[num9] <= 11)
					{
						Main.frogCageFrameCounter[num9]++;
						if (Main.frogCageFrameCounter[num9] >= 5)
						{
							Main.frogCageFrame[num9]++;
							Main.frogCageFrameCounter[num9] = 0;
							if (Main.frogCageFrame[num9] > 11)
							{
								Main.frogCageFrame[num9] = 0;
							}
						}
					}
					else if (Main.frogCageFrame[num9] >= 18 && Main.frogCageFrame[num9] <= 23)
					{
						Main.frogCageFrameCounter[num9]++;
						if (Main.frogCageFrameCounter[num9] >= 5)
						{
							Main.frogCageFrameCounter[num9] = 0;
							Main.frogCageFrame[num9]++;
						}
						if (Main.frogCageFrame[num9] > 17)
						{
							if (Main.rand.Next(3) == 0)
							{
								Main.frogCageFrame[num9] = 6;
							}
							else
							{
								Main.frogCageFrame[num9] = 18;
							}
						}
					}
				}
				for (int num10 = 0; num10 < Main.cageFrames; num10++)
				{
					if (Main.mouseCageFrame[num10] >= 0 && Main.mouseCageFrame[num10] <= 1)
					{
						Main.mouseCageFrameCounter[num10]++;
						if (Main.mouseCageFrameCounter[num10] >= 5)
						{
							Main.mouseCageFrame[num10]++;
							if (Main.mouseCageFrame[num10] > 1)
							{
								Main.mouseCageFrame[num10] = 0;
							}
							Main.mouseCageFrameCounter[num10] = 0;
							if (Main.rand.Next(15) == 0)
							{
								Main.mouseCageFrame[num10] = 4;
							}
						}
					}
					else if (Main.mouseCageFrame[num10] >= 4 && Main.mouseCageFrame[num10] <= 7)
					{
						Main.mouseCageFrameCounter[num10]++;
						if (Main.mouseCageFrameCounter[num10] >= 5)
						{
							Main.mouseCageFrameCounter[num10] = 0;
							Main.mouseCageFrame[num10]++;
						}
						if (Main.mouseCageFrame[num10] > 7)
						{
							Main.mouseCageFrame[num10] = 2;
						}
					}
					else if (Main.mouseCageFrame[num10] >= 2 && Main.mouseCageFrame[num10] <= 3)
					{
						Main.mouseCageFrameCounter[num10]++;
						if (Main.mouseCageFrameCounter[num10] >= 5)
						{
							Main.mouseCageFrame[num10]++;
							if (Main.mouseCageFrame[num10] > 3)
							{
								Main.mouseCageFrame[num10] = 2;
							}
							Main.mouseCageFrameCounter[num10] = 0;
							if (Main.rand.Next(15) == 0)
							{
								Main.mouseCageFrame[num10] = 8;
							}
							else if (Main.rand.Next(15) == 0)
							{
								Main.mouseCageFrame[num10] = 12;
							}
						}
					}
					else if (Main.mouseCageFrame[num10] >= 8 && Main.mouseCageFrame[num10] <= 11)
					{
						Main.mouseCageFrameCounter[num10]++;
						if (Main.mouseCageFrameCounter[num10] >= 5)
						{
							Main.mouseCageFrameCounter[num10] = 0;
							Main.mouseCageFrame[num10]++;
						}
						if (Main.mouseCageFrame[num10] > 11)
						{
							Main.mouseCageFrame[num10] = 0;
						}
					}
					else if (Main.mouseCageFrame[num10] >= 12 && Main.mouseCageFrame[num10] <= 13)
					{
						Main.mouseCageFrameCounter[num10]++;
						if (Main.mouseCageFrameCounter[num10] >= 5)
						{
							Main.mouseCageFrameCounter[num10] = 0;
							Main.mouseCageFrame[num10]++;
						}
					}
					else if (Main.mouseCageFrame[num10] >= 14 && Main.mouseCageFrame[num10] <= 17)
					{
						Main.mouseCageFrameCounter[num10]++;
						if (Main.mouseCageFrameCounter[num10] >= 5)
						{
							Main.mouseCageFrameCounter[num10] = 0;
							Main.mouseCageFrame[num10]++;
							if (Main.mouseCageFrame[num10] > 17 && Main.rand.Next(20) != 0)
							{
								Main.mouseCageFrame[num10] = 14;
							}
						}
					}
					else if (Main.mouseCageFrame[num10] >= 18 && Main.mouseCageFrame[num10] <= 19)
					{
						Main.mouseCageFrameCounter[num10]++;
						if (Main.mouseCageFrameCounter[num10] >= 5)
						{
							Main.mouseCageFrameCounter[num10] = 0;
							Main.mouseCageFrame[num10]++;
							if (Main.mouseCageFrame[num10] > 19)
							{
								Main.mouseCageFrame[num10] = 0;
							}
						}
					}
				}
				for (int num11 = 0; num11 < Main.cageFrames; num11++)
				{
					Main.wormCageFrameCounter[num11]++;
					if (Main.wormCageFrameCounter[num11] >= Main.rand.Next(30, 91))
					{
						Main.wormCageFrameCounter[num11] = 0;
						if (Main.rand.Next(4) == 0)
						{
							Main.wormCageFrame[num11]++;
							if (Main.wormCageFrame[num11] == 9 && Main.rand.Next(2) == 0)
							{
								Main.wormCageFrame[num11] = 0;
							}
							if (Main.wormCageFrame[num11] > 18)
							{
								if (Main.rand.Next(2) == 0)
								{
									Main.wormCageFrame[num11] = 9;
								}
								else
								{
									Main.wormCageFrame[num11] = 0;
								}
							}
						}
					}
				}
				int num12 = 0;
				for (int num13 = 0; num13 < 3; num13++)
				{
					switch (num13)
					{
					case 0:
						num12 = 24;
						break;
					case 1:
						num12 = 31;
						break;
					case 2:
						num12 = 34;
						break;
					}
					for (int num14 = 0; num14 < Main.cageFrames; num14++)
					{
						if (++Main.slugCageFrameCounter[num13, num14] >= Main.rand.Next(5, 15))
						{
							Main.slugCageFrameCounter[num13, num14] = 0;
							if (++Main.slugCageFrame[num13, num14] >= num12)
							{
								Main.slugCageFrame[num13, num14] = 0;
							}
						}
					}
				}
				for (int num15 = 0; num15 < Main.cageFrames; num15++)
				{
					if (Main.grasshopperCageFrame[num15] >= 0 && Main.grasshopperCageFrame[num15] <= 1)
					{
						Main.grasshopperCageFrameCounter[num15]++;
						if (Main.grasshopperCageFrameCounter[num15] >= 5)
						{
							Main.grasshopperCageFrame[num15]++;
							if (Main.grasshopperCageFrame[num15] > 1)
							{
								Main.grasshopperCageFrame[num15] = 0;
							}
							Main.grasshopperCageFrameCounter[num15] = 0;
							if (Main.rand.Next(15) == 0)
							{
								Main.grasshopperCageFrame[num15] = 2;
							}
						}
					}
					else if (Main.grasshopperCageFrame[num15] >= 2 && Main.grasshopperCageFrame[num15] <= 5)
					{
						Main.grasshopperCageFrameCounter[num15]++;
						if (Main.grasshopperCageFrameCounter[num15] >= 5)
						{
							Main.grasshopperCageFrameCounter[num15] = 0;
							Main.grasshopperCageFrame[num15]++;
						}
						if (Main.grasshopperCageFrame[num15] > 5)
						{
							Main.grasshopperCageFrame[num15] = 6;
						}
					}
					else if (Main.grasshopperCageFrame[num15] >= 6 && Main.grasshopperCageFrame[num15] <= 7)
					{
						Main.grasshopperCageFrameCounter[num15]++;
						if (Main.grasshopperCageFrameCounter[num15] >= 5)
						{
							Main.grasshopperCageFrame[num15]++;
							if (Main.grasshopperCageFrame[num15] > 7)
							{
								Main.grasshopperCageFrame[num15] = 6;
							}
							Main.grasshopperCageFrameCounter[num15] = 0;
							if (Main.rand.Next(15) == 0)
							{
								Main.grasshopperCageFrame[num15] = 8;
							}
						}
					}
					else if (Main.grasshopperCageFrame[num15] >= 8 && Main.grasshopperCageFrame[num15] <= 11)
					{
						Main.grasshopperCageFrameCounter[num15]++;
						if (Main.grasshopperCageFrameCounter[num15] >= 5)
						{
							Main.grasshopperCageFrameCounter[num15] = 0;
							Main.grasshopperCageFrame[num15]++;
						}
						if (Main.grasshopperCageFrame[num15] > 11)
						{
							Main.grasshopperCageFrame[num15] = 0;
						}
					}
				}
				for (int num16 = 0; num16 < Main.cageFrames; num16++)
				{
					byte maxValue = 5;
					if (Main.fishBowlFrameMode[num16] == 1)
					{
						if (Main.rand.Next(900) == 0)
						{
							Main.fishBowlFrameMode[num16] = (byte)Main.rand.Next((int)maxValue);
						}
						Main.fishBowlFrameCounter[num16]++;
						if (Main.fishBowlFrameCounter[num16] >= 5)
						{
							Main.fishBowlFrameCounter[num16] = 0;
							if (Main.fishBowlFrame[num16] == 10)
							{
								if (Main.rand.Next(20) == 0)
								{
									Main.fishBowlFrame[num16] = 11;
									Main.fishBowlFrameMode[num16] = 0;
								}
								else
								{
									Main.fishBowlFrame[num16] = 1;
								}
							}
							else
							{
								Main.fishBowlFrame[num16]++;
							}
						}
					}
					else if (Main.fishBowlFrameMode[num16] == 2)
					{
						if (Main.rand.Next(3600) == 0)
						{
							Main.fishBowlFrameMode[num16] = (byte)Main.rand.Next((int)maxValue);
						}
						Main.fishBowlFrameCounter[num16]++;
						if (Main.fishBowlFrameCounter[num16] >= 20)
						{
							Main.fishBowlFrameCounter[num16] = 0;
							if (Main.fishBowlFrame[num16] == 10)
							{
								if (Main.rand.Next(20) == 0)
								{
									Main.fishBowlFrame[num16] = 11;
									Main.fishBowlFrameMode[num16] = 0;
								}
								else
								{
									Main.fishBowlFrame[num16] = 1;
								}
							}
							else
							{
								Main.fishBowlFrame[num16]++;
							}
						}
					}
					else if (Main.fishBowlFrameMode[num16] == 3)
					{
						if (Main.rand.Next(3600) == 0)
						{
							Main.fishBowlFrameMode[num16] = (byte)Main.rand.Next((int)maxValue);
						}
						Main.fishBowlFrameCounter[num16]++;
						if (Main.fishBowlFrameCounter[num16] >= Main.rand.Next(5, 3600))
						{
							Main.fishBowlFrameCounter[num16] = 0;
							if (Main.fishBowlFrame[num16] == 10)
							{
								if (Main.rand.Next(20) == 0)
								{
									Main.fishBowlFrame[num16] = 11;
									Main.fishBowlFrameMode[num16] = 0;
								}
								else
								{
									Main.fishBowlFrame[num16] = 1;
								}
							}
							else
							{
								Main.fishBowlFrame[num16]++;
							}
						}
					}
					else if (Main.fishBowlFrame[num16] <= 10)
					{
						if (Main.rand.Next(3600) == 0)
						{
							Main.fishBowlFrameMode[num16] = (byte)Main.rand.Next((int)maxValue);
						}
						Main.fishBowlFrameCounter[num16]++;
						if (Main.fishBowlFrameCounter[num16] >= 10)
						{
							Main.fishBowlFrameCounter[num16] = 0;
							if (Main.fishBowlFrame[num16] == 10)
							{
								if (Main.rand.Next(12) == 0)
								{
									Main.fishBowlFrame[num16] = 11;
								}
								else
								{
									Main.fishBowlFrame[num16] = 1;
								}
							}
							else
							{
								Main.fishBowlFrame[num16]++;
							}
						}
					}
					else if (Main.fishBowlFrame[num16] == 12 || Main.fishBowlFrame[num16] == 13)
					{
						Main.fishBowlFrameCounter[num16]++;
						if (Main.fishBowlFrameCounter[num16] >= 10)
						{
							Main.fishBowlFrameCounter[num16] = 0;
							Main.fishBowlFrame[num16]++;
							if (Main.fishBowlFrame[num16] > 13)
							{
								if (Main.rand.Next(20) == 0)
								{
									Main.fishBowlFrame[num16] = 14;
								}
								else
								{
									Main.fishBowlFrame[num16] = 12;
								}
							}
						}
					}
					else if (Main.fishBowlFrame[num16] >= 11)
					{
						Main.fishBowlFrameCounter[num16]++;
						if (Main.fishBowlFrameCounter[num16] >= 10)
						{
							Main.fishBowlFrameCounter[num16] = 0;
							Main.fishBowlFrame[num16]++;
							if (Main.fishBowlFrame[num16] > 16)
							{
								Main.fishBowlFrame[num16] = 4;
							}
						}
					}
				}
				for (int num17 = 0; num17 < 9; num17++)
				{
					for (int num18 = 0; num18 < Main.cageFrames; num18++)
					{
						Main.butterflyCageFrameCounter[num17, num18]++;
						if (Main.rand.Next(3600) == 0)
						{
							Main.butterflyCageMode[num17, num18] = (byte)Main.rand.Next(5);
							if (Main.rand.Next(2) == 0)
							{
								Main.butterflyCageMode[num17, num18] += 10;
							}
						}
						int num19 = Main.rand.Next(3, 16);
						if (Main.butterflyCageMode[num17, num18] == 1 || Main.butterflyCageMode[num17, num18] == 11)
						{
							num19 = 3;
						}
						if (Main.butterflyCageMode[num17, num18] == 2 || Main.butterflyCageMode[num17, num18] == 12)
						{
							num19 = 5;
						}
						if (Main.butterflyCageMode[num17, num18] == 3 || Main.butterflyCageMode[num17, num18] == 13)
						{
							num19 = 10;
						}
						if (Main.butterflyCageMode[num17, num18] == 4 || Main.butterflyCageMode[num17, num18] == 14)
						{
							num19 = 15;
						}
						if (Main.butterflyCageMode[num17, num18] >= 10)
						{
							if (Main.butterflyCageFrame[num17, num18] <= 7)
							{
								if (Main.butterflyCageFrameCounter[num17, num18] >= num19)
								{
									Main.butterflyCageFrameCounter[num17, num18] = 0;
									Main.butterflyCageFrame[num17, num18]--;
									if (Main.butterflyCageFrame[num17, num18] < 0)
									{
										Main.butterflyCageFrame[num17, num18] = 7;
									}
									if (Main.butterflyCageFrame[num17, num18] == 1 || Main.butterflyCageFrame[num17, num18] == 4 || Main.butterflyCageFrame[num17, num18] == 6)
									{
										if (Main.rand.Next(20) == 0)
										{
											Main.butterflyCageFrame[num17, num18] += 8;
										}
										else if (Main.rand.Next(6) == 0)
										{
											if (Main.butterflyCageMode[num17, num18] >= 10)
											{
												Main.butterflyCageMode[num17, num18] -= 10;
											}
											else
											{
												Main.butterflyCageMode[num17, num18] += 10;
											}
										}
									}
								}
							}
							else if (Main.butterflyCageFrameCounter[num17, num18] >= num19)
							{
								Main.butterflyCageFrameCounter[num17, num18] = 0;
								Main.butterflyCageFrame[num17, num18]--;
								if (Main.butterflyCageFrame[num17, num18] < 8)
								{
									Main.butterflyCageFrame[num17, num18] = 14;
								}
								if (Main.butterflyCageFrame[num17, num18] == 9 || Main.butterflyCageFrame[num17, num18] == 12 || Main.butterflyCageFrame[num17, num18] == 14)
								{
									if (Main.rand.Next(20) == 0)
									{
										Main.butterflyCageFrame[num17, num18] -= 8;
									}
									else if (Main.rand.Next(6) == 0)
									{
										if (Main.butterflyCageMode[num17, num18] >= 10)
										{
											Main.butterflyCageMode[num17, num18] -= 10;
										}
										else
										{
											Main.butterflyCageMode[num17, num18] += 10;
										}
									}
								}
							}
						}
						else if (Main.butterflyCageFrame[num17, num18] <= 7)
						{
							if (Main.butterflyCageFrameCounter[num17, num18] >= num19)
							{
								Main.butterflyCageFrameCounter[num17, num18] = 0;
								Main.butterflyCageFrame[num17, num18]++;
								if (Main.butterflyCageFrame[num17, num18] > 7)
								{
									Main.butterflyCageFrame[num17, num18] = 0;
								}
								if ((Main.butterflyCageFrame[num17, num18] == 1 || Main.butterflyCageFrame[num17, num18] == 4 || Main.butterflyCageFrame[num17, num18] == 6) && Main.rand.Next(10) == 0)
								{
									Main.butterflyCageFrame[num17, num18] += 8;
								}
							}
						}
						else if (Main.butterflyCageFrameCounter[num17, num18] >= num19)
						{
							Main.butterflyCageFrameCounter[num17, num18] = 0;
							Main.butterflyCageFrame[num17, num18]++;
							if (Main.butterflyCageFrame[num17, num18] > 15)
							{
								Main.butterflyCageFrame[num17, num18] = 8;
							}
							if ((Main.butterflyCageFrame[num17, num18] == 9 || Main.butterflyCageFrame[num17, num18] == 12 || Main.butterflyCageFrame[num17, num18] == 14) && Main.rand.Next(10) == 0)
							{
								Main.butterflyCageFrame[num17, num18] -= 8;
							}
						}
					}
				}
				for (int num20 = 0; num20 < 3; num20++)
				{
					for (int num21 = 0; num21 < Main.cageFrames; num21++)
					{
						Main.jellyfishCageFrameCounter[num20, num21]++;
						if (Main.jellyfishCageMode[num20, num21] == 0 && Main.rand.Next(1800) == 0)
						{
							Main.jellyfishCageMode[num20, num21] = 1;
						}
						if (Main.jellyfishCageMode[num20, num21] == 2 && Main.rand.Next(60) == 0)
						{
							Main.jellyfishCageMode[num20, num21] = 3;
						}
						int num22 = 1;
						if (Main.jellyfishCageMode[num20, num21] == 0)
						{
							num22 = Main.rand.Next(10, 20);
						}
						if (Main.jellyfishCageMode[num20, num21] == 1)
						{
							num22 = Main.rand.Next(15, 25);
						}
						if (Main.jellyfishCageMode[num20, num21] == 2)
						{
							num22 = Main.rand.Next(4, 9);
						}
						if (Main.jellyfishCageMode[num20, num21] == 3)
						{
							num22 = Main.rand.Next(15, 25);
						}
						if (Main.jellyfishCageMode[num20, num21] == 0 && Main.jellyfishCageFrame[num20, num21] <= 3 && Main.jellyfishCageFrameCounter[num20, num21] >= num22)
						{
							Main.jellyfishCageFrameCounter[num20, num21] = 0;
							Main.jellyfishCageFrame[num20, num21]++;
							if (Main.jellyfishCageFrame[num20, num21] >= 4)
							{
								Main.jellyfishCageFrame[num20, num21] = 0;
							}
						}
						if (Main.jellyfishCageMode[num20, num21] == 1 && Main.jellyfishCageFrame[num20, num21] <= 7 && Main.jellyfishCageFrameCounter[num20, num21] >= num22)
						{
							Main.jellyfishCageFrameCounter[num20, num21] = 0;
							Main.jellyfishCageFrame[num20, num21]++;
							if (Main.jellyfishCageFrame[num20, num21] >= 7)
							{
								Main.jellyfishCageMode[num20, num21] = 2;
							}
						}
						if (Main.jellyfishCageMode[num20, num21] == 2 && Main.jellyfishCageFrame[num20, num21] <= 9 && Main.jellyfishCageFrameCounter[num20, num21] >= num22)
						{
							Main.jellyfishCageFrameCounter[num20, num21] = 0;
							Main.jellyfishCageFrame[num20, num21]++;
							if (Main.jellyfishCageFrame[num20, num21] >= 9)
							{
								Main.jellyfishCageFrame[num20, num21] = 7;
							}
						}
						if (Main.jellyfishCageMode[num20, num21] == 3 && Main.jellyfishCageFrame[num20, num21] <= 10 && Main.jellyfishCageFrameCounter[num20, num21] >= num22)
						{
							Main.jellyfishCageFrameCounter[num20, num21] = 0;
							Main.jellyfishCageFrame[num20, num21]++;
							if (Main.jellyfishCageFrame[num20, num21] >= 10)
							{
								Main.jellyfishCageFrame[num20, num21] = 3;
								Main.jellyfishCageMode[num20, num21] = 0;
							}
						}
					}
				}
			}
		}

		public static void UpdateDrawAnimations()
		{
			for (int i = 0; i < Main.itemAnimationsRegistered.Count; i++)
			{
				int num = Main.itemAnimationsRegistered[i];
				if (Main.itemAnimations[num] != null)
				{
					Main.itemAnimations[num].Update();
				}
			}
		}

		public void CrazyTestMemoryLimit()
		{
			if (!this._crazyTestedMemoryLimit)
			{
				this._crazyTestedMemoryLimit = true;
				int num = 50000;
				this._crazyTestArrayMemoryLimit = new Player[num];
				for (int i = 0; i < this._crazyTestArrayMemoryLimit.Length; i++)
				{
					this._crazyTestArrayMemoryLimit[i] = new Player();
				}
			}
			int num2 = Main.rand.Next(this._crazyTestArrayMemoryLimit.Length);
			Main.NewText(string.Concat(new object[]
			{
				"testing ",
				num2,
				" ",
				this._crazyTestArrayMemoryLimit[num2].name
			}), 255, 255, 255, false);
		}

		protected override void Update(GameTime gameTime)
		{
			if (!Main.IsEnginePreloaded)
			{
				Main.IsEnginePreloaded = true;
				if (Main.OnEnginePreload != null)
				{
					Main.OnEnginePreload();
				}
			}
			this.DoUpdate(gameTime);
			CinematicManager.Instance.Update(gameTime);
			if (Main.netMode == 2)
			{
				for (int i = 0; i < 256; i++)
				{
					if (Netplay.Clients[i].Socket != null)
					{
						Netplay.Clients[i].Socket.SendQueuedPackets();
					}
				}
				return;
			}
			if (Main.netMode == 1)
			{
				Netplay.Connection.Socket.SendQueuedPackets();
			}
		}

		protected void DoUpdate(GameTime gameTime)
		{
			PartySky.MultipleSkyWorkaroundFix = true;
			if (!Main.GlobalTimerPaused)
			{
				Main.GlobalTime = (float)(gameTime.TotalGameTime.TotalSeconds % 3600.0);
			}
			if (Player.StopMoneyTroughFromWorking > 0 && !Main.mouseRight && Main.mouseRightRelease)
			{
				Player.StopMoneyTroughFromWorking--;
			}
			if (!Main.gameMenu || Main.menuMode != 888)
			{
				Main.MenuUI.SetState(null);
			}
			else
			{
				Main.InGameUI.SetState(null);
			}
			if (Main.MenuUI != null)
			{
				Main.MenuUI.Update(gameTime);
			}
			if (Main.InGameUI != null)
			{
				Main.InGameUI.Update(gameTime);
			}
			Main.MouseOversTryToClear();
			PlayerInput.ResetInputsOnActiveStateChange();
#if CLIENT
			if (Main.OnTick != null)
			{
				Main.OnTick();
			}
#endif
			if (Main._hasPendingNetmodeChange)
			{
				Main.netMode = Main._targetNetMode;
				Main._hasPendingNetmodeChange = false;
			}
			if (CaptureManager.Instance.IsCapturing)
			{
				return;
			}
			if (Main.ActivePlayerFileData != null)
			{
				Main.ActivePlayerFileData.UpdatePlayTimer();
			}
			Main.ignoreErrors = true;
			if (Main.expertMode)
			{
				Main.damageMultiplier = Main.expertDamage;
				Main.knockBackMultiplier = Main.expertKnockBack;
			}
			else
			{
				Main.damageMultiplier = 1f;
				Main.knockBackMultiplier = 1f;
			}
			Main.gameInactive = !base.IsActive;
			if (Main.chTitle)
			{
				Main.chTitle = false;
				this.SetTitle();
			}
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			WorldGen.destroyObject = false;
			if (Main.gameMenu)
			{
				Main.mapFullscreen = false;
			}
			Main.UpdateSettingUnlocks();
			if (Main.dedServ)
			{
				if (Main.dedServFPS)
				{
					Main.updateTime++;
					if (!Main.fpsTimer.IsRunning)
					{
						Main.fpsTimer.Restart();
					}
					if (Main.fpsTimer.ElapsedMilliseconds >= 1000L)
					{
						Main.dedServCount1 += Main.updateTime;
						Main.dedServCount2++;
						float num = (float)Main.dedServCount1 / (float)Main.dedServCount2;
						Console.WriteLine(string.Concat(new object[]
						{
							Main.updateTime,
							"  (",
							num,
							")"
						}));
						Main.updateTime = 0;
						Main.fpsTimer.Restart();
					}
				}
				else
				{
					if (Main.fpsTimer.IsRunning)
					{
						Main.fpsTimer.Stop();
					}
					Main.updateTime = 0;
				}
			}
			if (!Main.dedServ)
			{
				if (Main.superFast)
				{
					base.IsFixedTimeStep = false;
					Main.graphics.SynchronizeWithVerticalRetrace = false;
				}
				else
				{
					if (Main.FrameSkipMode == 0 || Main.FrameSkipMode == 2)
					{
						if (base.IsActive)
						{
							base.IsFixedTimeStep = false;
						}
						else
						{
							base.IsFixedTimeStep = true;
						}
					}
					else
					{
						base.IsFixedTimeStep = true;
						Main.graphics.SynchronizeWithVerticalRetrace = true;
					}
					Main.graphics.SynchronizeWithVerticalRetrace = true;
				}
				if (Main.showSplash)
				{
					return;
				}
				if (!Main.gameMenu && Main.netMode == 1)
				{
					if (!Main.saveTime.IsRunning)
					{
						Main.saveTime.Start();
					}
					if (Main.saveTime.ElapsedMilliseconds > 300000L)
					{
						Main.saveTime.Reset();
						WorldGen.saveToonWhilePlaying();
					}
				}
				else if (!Main.gameMenu && Main.autoSave)
				{
					if (!Main.saveTime.IsRunning)
					{
						Main.saveTime.Start();
					}
					if (Main.saveTime.ElapsedMilliseconds > 600000L)
					{
						Main.saveTime.Reset();
						WorldGen.saveToonWhilePlaying();
						WorldGen.saveAndPlay();
					}
				}
				else if (Main.saveTime.IsRunning)
				{
					Main.saveTime.Stop();
				}
				Main.updateTime++;
				if (Main.fpsTimer.ElapsedMilliseconds >= 1000L)
				{
					if ((float)Main.fpsCount >= 30f + 30f * Main.gfxQuality)
					{
						Main.gfxQuality += Main.gfxRate;
						Main.gfxRate += 0.005f;
					}
					else if ((float)Main.fpsCount < 29f + 30f * Main.gfxQuality)
					{
						Main.gfxRate = 0.01f;
						Main.gfxQuality -= 0.1f;
					}
					if (Main.gfxQuality < 0f)
					{
						Main.gfxQuality = 0f;
					}
					if (Main.gfxQuality > 1f)
					{
						Main.gfxQuality = 1f;
					}
					if (Main.maxQ && base.IsActive)
					{
						Main.gfxQuality = 1f;
						Main.maxQ = false;
					}
					Main.updateRate = Main.uCount;
					Main.frameRate = Main.fpsCount;
					Main.fpsCount = 0;
					Main.fpsTimer.Restart();
					Main.updateTime = 0;
					Main.drawTime = 0;
					Main.uCount = 0;
					if ((double)Main.gfxQuality < 0.8)
					{
						Main.mapTimeMax = (int)((1f - Main.gfxQuality) * 60f);
					}
					else
					{
						Main.mapTimeMax = 0;
					}
					int arg_4AE_0 = Main.netMode;
				}
				if (Main.FrameSkipMode == 0 || Main.FrameSkipMode == 2)
				{
					Main.UpdateTimeAccumulator += gameTime.ElapsedGameTime.TotalSeconds;
					if (Main.UpdateTimeAccumulator < 0.016666666666666666 && !Main.superFast)
					{
						if (Main.FrameSkipMode == 2)
						{
							Main.instance.SuppressDraw();
						}
						return;
					}
					gameTime = new GameTime(gameTime.TotalGameTime, new TimeSpan(166666L));
					Main.UpdateTimeAccumulator -= 0.016666666666666666;
					Main.UpdateTimeAccumulator = Math.Min(Main.UpdateTimeAccumulator, 0.016666666666666666);
				}
				Main.uCount++;
				Main.drawSkip = false;
				Filters.Scene.Update(gameTime);
				Overlays.Scene.Update(gameTime);
				SkyManager.Instance.Update(gameTime);
				LiquidRenderer.Instance.Update(gameTime);
				this.UpdateAudio();
				AchievementCompleteUI.Update();
				ItemSlot.UpdateInterface();
				if (Main.teamCooldown > 0)
				{
					Main.teamCooldown--;
				}
				if (Main.treeMntBG[1] == 94 || (Main.treeMntBG[1] >= 114 && Main.treeMntBG[1] <= 116))
				{
					Main.bgFrameCounter[0]++;
					if (Main.bgFrameCounter[0] >= 6)
					{
						Main.bgFrameCounter[0] = 0;
						Main.bgFrame[0]++;
						if (Main.bgFrame[0] >= 4)
						{
							Main.bgFrame[0] = 0;
						}
					}
					if (Main.bgFrame[0] == 0)
					{
						Main.treeMntBG[1] = 94;
					}
					else if (Main.bgFrame[0] == 1)
					{
						Main.treeMntBG[1] = 114;
					}
					else if (Main.bgFrame[0] == 2)
					{
						Main.treeMntBG[1] = 115;
					}
					else
					{
						Main.treeMntBG[1] = 116;
					}
					if (Main.bgFrame[0] == 0)
					{
						Main.treeMntBG[0] = 93;
					}
					else if (Main.bgFrame[0] == 1)
					{
						Main.treeMntBG[0] = 168;
					}
					else if (Main.bgFrame[0] == 2)
					{
						Main.treeMntBG[0] = 169;
					}
					else
					{
						Main.treeMntBG[0] = 170;
					}
				}
				if (Main.treeMntBG[1] >= 180 && Main.treeMntBG[1] <= 183)
				{
					Main.bgFrameCounter[0]++;
					if (Main.bgFrameCounter[0] >= 6)
					{
						Main.bgFrameCounter[0] = 0;
						Main.bgFrame[0]++;
						if (Main.bgFrame[0] >= 4)
						{
							Main.bgFrame[0] = 0;
						}
					}
					if (Main.bgFrame[0] == 0)
					{
						Main.treeMntBG[1] = 180;
					}
					else if (Main.bgFrame[0] == 1)
					{
						Main.treeMntBG[1] = 181;
					}
					else if (Main.bgFrame[0] == 2)
					{
						Main.treeMntBG[1] = 182;
					}
					else
					{
						Main.treeMntBG[1] = 183;
					}
				}
				Animation.UpdateAll();
				if (Main.qaStyle == 1)
				{
					Main.gfxQuality = 1f;
				}
				else if (Main.qaStyle == 2)
				{
					Main.gfxQuality = 0.5f;
				}
				else if (Main.qaStyle == 3)
				{
					Main.gfxQuality = 0f;
				}
				Main.numDust = (int)(6000f * (Main.gfxQuality * 0.7f + 0.3f));
				if ((double)Main.gfxQuality < 0.9)
				{
					Main.numDust = (int)((float)Main.numDust * Main.gfxQuality);
				}
				if (Main.numDust < 1000)
				{
					Main.numDust = 1000;
				}
				Gore.goreTime = (int)(600f * Main.gfxQuality);
				if (!WorldGen.gen)
				{
					Liquid.maxLiquid = (int)(2500f + 2500f * Main.gfxQuality);
					Liquid.cycles = (int)(17f - 10f * Main.gfxQuality);
				}
				if (Main.superFast)
				{
					Main.graphics.SynchronizeWithVerticalRetrace = false;
					Main.drawSkip = false;
				}
				if ((double)Main.gfxQuality < 0.2)
				{
					Lighting.maxRenderCount = 8;
				}
				else if ((double)Main.gfxQuality < 0.4)
				{
					Lighting.maxRenderCount = 7;
				}
				else if ((double)Main.gfxQuality < 0.6)
				{
					Lighting.maxRenderCount = 6;
				}
				else if ((double)Main.gfxQuality < 0.8)
				{
					Lighting.maxRenderCount = 5;
				}
				else
				{
					Lighting.maxRenderCount = 4;
				}
				if (!WorldGen.gen && Liquid.quickSettle)
				{
					Liquid.maxLiquid = Liquid.resLiquid;
					Liquid.cycles = 1;
				}
				Main.hasFocus = base.IsActive;
				if (!Main.gameMenu || Main.netMode == 2)
				{
					WorldFile.tempRaining = Main.raining;
					WorldFile.tempRainTime = Main.rainTime;
					WorldFile.tempMaxRain = Main.maxRaining;
				}
				if (!base.IsActive && Main.netMode == 0)
				{
#if !MAC
					base.IsMouseVisible = true;
#endif
					if (Main.netMode != 2 && Main.myPlayer >= 0)
					{
						Main.player[Main.myPlayer].delayUseItem = true;
					}
					Main.mouseLeftRelease = false;
					Main.mouseRightRelease = false;
					if (Main.gameMenu)
					{
						Main.UpdateMenu();
					}
					Main.gamePaused = true;
					return;
				}
#if !MAC
				base.IsMouseVisible = false;
#endif
				EmoteBubble.UpdateAll();
				ScreenObstruction.Update();
				ScreenDarkness.Update();
				MoonlordDeathDrama.Update();
				Main.CursorColor();
				Main.mouseTextColor += (byte)Main.mouseTextColorChange;
				if (Main.mouseTextColor >= 250)
				{
					Main.mouseTextColorChange = -4;
				}
				if (Main.mouseTextColor <= 175)
				{
					Main.mouseTextColorChange = 4;
				}
				Main.demonTorch += (float)Main.demonTorchDir * 0.01f;
				if (Main.demonTorch > 1f)
				{
					Main.demonTorch = 1f;
					Main.demonTorchDir = -1;
				}
				if (Main.demonTorch < 0f)
				{
					Main.demonTorch = 0f;
					Main.demonTorchDir = 1;
				}
				Main.martianLight += (float)Main.martianLightDir * 0.015f;
				if (Main.martianLight > 1f)
				{
					Main.martianLight = 1f;
					Main.martianLightDir = -1;
				}
				if (Main.martianLight < 0f)
				{
					Main.martianLight = 0f;
					Main.martianLightDir = 1;
				}
				int num2 = 7;
				if (this.DiscoStyle == 0)
				{
					Main.DiscoG += num2;
					if (Main.DiscoG >= 255)
					{
						Main.DiscoG = 255;
						this.DiscoStyle++;
					}
				}
				if (this.DiscoStyle == 1)
				{
					Main.DiscoR -= num2;
					if (Main.DiscoR <= 0)
					{
						Main.DiscoR = 0;
						this.DiscoStyle++;
					}
				}
				if (this.DiscoStyle == 2)
				{
					Main.DiscoB += num2;
					if (Main.DiscoB >= 255)
					{
						Main.DiscoB = 255;
						this.DiscoStyle++;
					}
				}
				if (this.DiscoStyle == 3)
				{
					Main.DiscoG -= num2;
					if (Main.DiscoG <= 0)
					{
						Main.DiscoG = 0;
						this.DiscoStyle++;
					}
				}
				if (this.DiscoStyle == 4)
				{
					Main.DiscoR += num2;
					if (Main.DiscoR >= 255)
					{
						Main.DiscoR = 255;
						this.DiscoStyle++;
					}
				}
				if (this.DiscoStyle == 5)
				{
					Main.DiscoB -= num2;
					if (Main.DiscoB <= 0)
					{
						Main.DiscoB = 0;
						this.DiscoStyle = 0;
					}
				}
				if (Main.gFadeDir == 1)
				{
					Main.gFader += 0.1f;
					Main.gFade = (byte)Main.gFader;
					if (Main.gFade > 150)
					{
						Main.gFadeDir = 0;
					}
				}
				else
				{
					Main.gFader -= 0.1f;
					Main.gFade = (byte)Main.gFader;
					if (Main.gFade < 100)
					{
						Main.gFadeDir = 1;
					}
				}
				Main.wFrCounter += Main.windSpeed * 2f;
				if (Main.wFrCounter > 4f)
				{
					Main.wFrCounter = 0f;
					Main.wFrame += 1f;
				}
				if (Main.wFrCounter < 0f)
				{
					Main.wFrCounter = 4f;
					Main.wFrame -= 1f;
				}
				if (Main.wFrame > 16f)
				{
					Main.wFrame = 1f;
				}
				if (Main.wFrame < 1f)
				{
					Main.wFrame = 16f;
				}
				this.waterfallManager.UpdateFrame();
				byte[] expr_CC5_cp_0 = Main.wallFrameCounter;
				int expr_CC5_cp_1 = 136;
				expr_CC5_cp_0[expr_CC5_cp_1] += 1;
				if (Main.wallFrameCounter[136] >= 5)
				{
					Main.wallFrameCounter[136] = 0;
					byte[] expr_CFC_cp_0 = Main.wallFrame;
					int expr_CFC_cp_1 = 136;
					expr_CFC_cp_0[expr_CFC_cp_1] += 1;
					if (Main.wallFrame[136] > 7)
					{
						Main.wallFrame[136] = 0;
					}
				}
				byte[] expr_D33_cp_0 = Main.wallFrameCounter;
				int expr_D33_cp_1 = 137;
				expr_D33_cp_0[expr_D33_cp_1] += 1;
				if (Main.wallFrameCounter[137] >= 10)
				{
					Main.wallFrameCounter[137] = 0;
					byte[] expr_D6B_cp_0 = Main.wallFrame;
					int expr_D6B_cp_1 = 137;
					expr_D6B_cp_0[expr_D6B_cp_1] += 1;
					if (Main.wallFrame[137] > 7)
					{
						Main.wallFrame[137] = 0;
					}
				}
				int num3 = 226;
				byte[] expr_DA4_cp_0 = Main.wallFrameCounter;
				int expr_DA4_cp_1 = num3;
				expr_DA4_cp_0[expr_DA4_cp_1] += 1;
				if (Main.wallFrameCounter[num3] >= 10)
				{
					Main.wallFrameCounter[num3] = 0;
					byte[] expr_DD0_cp_0 = Main.wallFrame;
					int expr_DD0_cp_1 = num3;
					expr_DD0_cp_0[expr_DD0_cp_1] += 1;
					if (Main.wallFrame[num3] > 7)
					{
						Main.wallFrame[num3] = 0;
					}
				}
				num3 = 227;
				byte[] expr_E01_cp_0 = Main.wallFrameCounter;
				int expr_E01_cp_1 = num3;
				expr_E01_cp_0[expr_E01_cp_1] += 1;
				if (Main.wallFrameCounter[num3] >= 5)
				{
					Main.wallFrameCounter[num3] = 0;
					byte[] expr_E2C_cp_0 = Main.wallFrame;
					int expr_E2C_cp_1 = num3;
					expr_E2C_cp_0[expr_E2C_cp_1] += 1;
					if (Main.wallFrame[num3] > 7)
					{
						Main.wallFrame[num3] = 0;
					}
				}
				num3 = 225;
				byte[] expr_E5D_cp_0 = Main.wallFrameCounter;
				int expr_E5D_cp_1 = num3;
				expr_E5D_cp_0[expr_E5D_cp_1] += 1;
				if (Main.wallFrameCounter[num3] >= 5)
				{
					Main.wallFrameCounter[num3] = 0;
					byte[] expr_E88_cp_0 = Main.wallFrame;
					int expr_E88_cp_1 = num3;
					expr_E88_cp_0[expr_E88_cp_1] += 1;
					if (Main.wallFrame[num3] > 1)
					{
						Main.wallFrame[num3] = 0;
					}
				}
				byte[] expr_EB7_cp_0 = Main.wallFrameCounter;
				int expr_EB7_cp_1 = 172;
				expr_EB7_cp_0[expr_EB7_cp_1] += 1;
				if (Main.wallFrameCounter[172] >= 10)
				{
					Main.wallFrameCounter[172] = 0;
					byte[] expr_EEF_cp_0 = Main.wallFrame;
					int expr_EEF_cp_1 = 172;
					expr_EEF_cp_0[expr_EEF_cp_1] += 1;
					if (Main.wallFrame[172] > 7)
					{
						Main.wallFrame[172] = 0;
					}
				}
				byte[] expr_F26_cp_0 = Main.wallFrameCounter;
				int expr_F26_cp_1 = 168;
				expr_F26_cp_0[expr_F26_cp_1] += 1;
				if (Main.wallFrameCounter[168] >= 5)
				{
					Main.wallFrameCounter[168] = 0;
					byte[] expr_F5D_cp_0 = Main.wallFrame;
					int expr_F5D_cp_1 = 168;
					expr_F5D_cp_0[expr_F5D_cp_1] += 1;
					if (Main.wallFrame[168] > 7)
					{
						Main.wallFrame[168] = 0;
					}
				}
				byte[] expr_F94_cp_0 = Main.wallFrameCounter;
				int expr_F94_cp_1 = 169;
				expr_F94_cp_0[expr_F94_cp_1] += 1;
				if (Main.wallFrameCounter[169] >= 5)
				{
					Main.wallFrameCounter[169] = 0;
					byte[] expr_FCB_cp_0 = Main.wallFrame;
					int expr_FCB_cp_1 = 169;
					expr_FCB_cp_0[expr_FCB_cp_1] += 1;
					if (Main.wallFrame[169] > 7)
					{
						Main.wallFrame[169] = 0;
					}
				}
				byte[] expr_1002_cp_0 = Main.wallFrameCounter;
				int expr_1002_cp_1 = 144;
				expr_1002_cp_0[expr_1002_cp_1] += 1;
				int num4 = 5;
				int num5 = 10;
				if ((int)Main.wallFrameCounter[144] < num4)
				{
					Main.wallFrame[144] = 0;
				}
				else if ((int)Main.wallFrameCounter[144] < num4)
				{
					Main.wallFrame[144] = 1;
				}
				else if ((int)Main.wallFrameCounter[144] < num4 * 2)
				{
					Main.wallFrame[144] = 2;
				}
				else if ((int)Main.wallFrameCounter[144] < num4 * 3)
				{
					Main.wallFrame[144] = 3;
				}
				else if ((int)Main.wallFrameCounter[144] < num4 * 4)
				{
					Main.wallFrame[144] = 4;
				}
				else if ((int)Main.wallFrameCounter[144] < num4 * 5)
				{
					Main.wallFrame[144] = 5;
				}
				else if ((int)Main.wallFrameCounter[144] < num4 * 6)
				{
					Main.wallFrame[144] = 6;
				}
				else if ((int)Main.wallFrameCounter[144] < num4 * 7)
				{
					Main.wallFrame[144] = 7;
				}
				else if ((int)Main.wallFrameCounter[144] < num4 * (8 + num5))
				{
					Main.wallFrame[144] = 8;
				}
				else if ((int)Main.wallFrameCounter[144] < num4 * (9 + num5))
				{
					Main.wallFrame[144] = 7;
				}
				else if ((int)Main.wallFrameCounter[144] < num4 * (10 + num5))
				{
					Main.wallFrame[144] = 6;
				}
				else if ((int)Main.wallFrameCounter[144] < num4 * (11 + num5))
				{
					Main.wallFrame[144] = 5;
				}
				else if ((int)Main.wallFrameCounter[144] < num4 * (12 + num5))
				{
					Main.wallFrame[144] = 4;
				}
				else if ((int)Main.wallFrameCounter[144] < num4 * (13 + num5))
				{
					Main.wallFrame[144] = 3;
				}
				else if ((int)Main.wallFrameCounter[144] < num4 * (14 + num5))
				{
					Main.wallFrame[144] = 2;
				}
				else if ((int)Main.wallFrameCounter[144] < num4 * (15 + num5))
				{
					Main.wallFrame[144] = 1;
				}
				else
				{
					Main.wallFrame[144] = 0;
					if ((int)Main.wallFrameCounter[144] > num4 * (16 + num5 * 2))
					{
						Main.wallFrameCounter[144] = 0;
					}
				}
				Main.tileFrameCounter[12]++;
				if (Main.tileFrameCounter[12] > 5)
				{
					Main.tileFrameCounter[12] = 0;
					Main.tileFrame[12]++;
					if (Main.tileFrame[12] >= 10)
					{
						Main.tileFrame[12] = 0;
					}
				}
				Main.tileFrameCounter[17]++;
				if (Main.tileFrameCounter[17] > 5)
				{
					Main.tileFrameCounter[17] = 0;
					Main.tileFrame[17]++;
					if (Main.tileFrame[17] >= 12)
					{
						Main.tileFrame[17] = 0;
					}
				}
				if (++Main.tileFrameCounter[133] >= 4)
				{
					Main.tileFrameCounter[133] = 0;
					if (++Main.tileFrame[133] >= 6)
					{
						Main.tileFrame[133] = 0;
					}
				}
				Main.tileFrameCounter[31]++;
				if (Main.tileFrameCounter[31] > 10)
				{
					Main.tileFrameCounter[31] = 0;
					Main.tileFrame[31]++;
					if (Main.tileFrame[31] > 1)
					{
						Main.tileFrame[31] = 0;
					}
				}
				Main.tileFrameCounter[77]++;
				if (Main.tileFrameCounter[77] > 5)
				{
					Main.tileFrameCounter[77] = 0;
					Main.tileFrame[77]++;
					if (Main.tileFrame[77] >= 12)
					{
						Main.tileFrame[77] = 0;
					}
				}
				Main.tileFrameCounter[106]++;
				if (Main.tileFrameCounter[106] > 4)
				{
					Main.tileFrameCounter[106] = 0;
					Main.tileFrame[106]++;
					if (Main.tileFrame[106] >= 2)
					{
						Main.tileFrame[106] = 0;
					}
				}
				Main.tileFrameCounter[207]++;
				if (Main.tileFrameCounter[207] > 4)
				{
					Main.tileFrameCounter[207] = 0;
					Main.tileFrame[207]++;
					if (Main.tileFrame[207] >= 6)
					{
						Main.tileFrame[207] = 0;
					}
				}
				Main.tileFrameCounter[215]++;
				if (Main.tileFrameCounter[215] >= 4)
				{
					Main.tileFrameCounter[215] = 0;
					Main.tileFrame[215]++;
					if (Main.tileFrame[215] >= 8)
					{
						Main.tileFrame[215] = 0;
					}
				}
				Main.tileFrameCounter[217]++;
				if (Main.tileFrameCounter[217] > 4)
				{
					Main.tileFrameCounter[217] = 0;
					Main.tileFrame[217]++;
					if (Main.tileFrame[217] >= 5)
					{
						Main.tileFrame[217] = 0;
					}
				}
				Main.tileFrameCounter[218]++;
				if (Main.tileFrameCounter[218] > 4)
				{
					Main.tileFrameCounter[218] = 0;
					Main.tileFrame[218]++;
					if (Main.tileFrame[218] >= 2)
					{
						Main.tileFrame[218] = 0;
					}
				}
				Main.tileFrameCounter[219]++;
				if (Main.tileFrameCounter[219] > 4)
				{
					Main.tileFrameCounter[219] = 0;
					Main.tileFrame[219]++;
					if (Main.tileFrame[219] >= 10)
					{
						Main.tileFrame[219] = 0;
					}
				}
				Main.tileFrameCounter[220]++;
				if (Main.tileFrameCounter[220] > 4)
				{
					Main.tileFrameCounter[220] = 0;
					Main.tileFrame[220]++;
					if (Main.tileFrame[220] >= 4)
					{
						Main.tileFrame[220] = 0;
					}
				}
				Main.tileFrameCounter[231]++;
				if (Main.tileFrameCounter[231] > 16)
				{
					Main.tileFrameCounter[231] = 0;
					Main.tileFrame[231]++;
					if (Main.tileFrame[231] >= 7)
					{
						Main.tileFrame[231] = 0;
					}
				}
				Main.tileFrameCounter[235]++;
				if (Main.tileFrameCounter[235] > 20)
				{
					Main.tileFrameCounter[235] = 0;
					Main.tileFrame[235]++;
					if (Main.tileFrame[235] >= 4)
					{
						Main.tileFrame[235] = 0;
					}
					if (Main.tileFrame[235] > 1)
					{
						Main.tileLighted[235] = true;
					}
					else
					{
						Main.tileLighted[235] = false;
					}
				}
				Main.tileFrameCounter[238]++;
				if (Main.tileFrameCounter[238] > 20)
				{
					Main.tileFrameCounter[238] = 0;
					Main.tileFrame[238]++;
					if (Main.tileFrame[238] >= 4)
					{
						Main.tileFrame[238] = 0;
					}
				}
				Main.tileFrameCounter[243]++;
				if (Main.tileFrameCounter[243] > 4)
				{
					Main.tileFrameCounter[243] = 0;
					Main.tileFrame[243]++;
					if (Main.tileFrame[243] >= 6)
					{
						Main.tileFrame[243] = 0;
					}
				}
				Main.tileFrameCounter[244]++;
				if (Main.tileFrameCounter[244] > 4)
				{
					Main.tileFrameCounter[244] = 0;
					Main.tileFrame[244]++;
					if (Main.tileFrame[244] >= 6)
					{
						Main.tileFrame[244] = 0;
					}
				}
				Main.tileFrameCounter[247]++;
				if (Main.tileFrameCounter[247] > 4)
				{
					Main.tileFrameCounter[247] = 0;
					Main.tileFrame[247]++;
					if (Main.tileFrame[247] > 7)
					{
						Main.tileFrame[247] = 0;
					}
				}
				Main.tileFrameCounter[96]++;
				if (Main.tileFrameCounter[96] > 4)
				{
					Main.tileFrameCounter[96] = 0;
					Main.tileFrame[96]++;
					if (Main.tileFrame[96] > 3)
					{
						Main.tileFrame[96] = 0;
					}
				}
				Main.tileFrameCounter[171]++;
				if (Main.tileFrameCounter[171] > 16)
				{
					Main.tileFrameCounter[171] = 0;
					Main.tileFrame[171]++;
					if (Main.tileFrame[171] > 3)
					{
						Main.tileFrame[171] = 0;
					}
				}
				Main.tileFrameCounter[270]++;
				if (Main.tileFrameCounter[270] > 8)
				{
					Main.tileFrameCounter[270] = 0;
					Main.tileFrame[270]++;
					if (Main.tileFrame[270] > 5)
					{
						Main.tileFrame[270] = 0;
					}
				}
				Main.tileFrame[271] = Main.tileFrame[270];
				Main.tileFrameCounter[272]++;
				if (Main.tileFrameCounter[272] >= 10)
				{
					Main.tileFrameCounter[272] = 0;
					Main.tileFrame[272]++;
					if (Main.tileFrame[272] > 1)
					{
						Main.tileFrame[272] = 0;
					}
				}
				Main.tileFrameCounter[300]++;
				if (Main.tileFrameCounter[300] >= 5)
				{
					Main.tileFrameCounter[300] = 0;
					Main.tileFrame[300]++;
					if (Main.tileFrame[300] > 6)
					{
						Main.tileFrame[300] = 0;
					}
				}
				Main.tileFrameCounter[301]++;
				if (Main.tileFrameCounter[301] >= 5)
				{
					Main.tileFrameCounter[301] = 0;
					Main.tileFrame[301]++;
					if (Main.tileFrame[301] > 7)
					{
						Main.tileFrame[301] = 0;
					}
				}
				Main.tileFrameCounter[302]++;
				if (Main.tileFrameCounter[302] >= 5)
				{
					Main.tileFrameCounter[302] = 0;
					Main.tileFrame[302]++;
					if (Main.tileFrame[302] > 3)
					{
						Main.tileFrame[302] = 0;
					}
				}
				Main.tileFrameCounter[303]++;
				if (Main.tileFrameCounter[303] >= 5)
				{
					Main.tileFrameCounter[303] = 0;
					Main.tileFrame[303]++;
					if (Main.tileFrame[303] > 4)
					{
						Main.tileFrame[303] = 0;
					}
				}
				Main.tileFrameCounter[305]++;
				if (Main.tileFrameCounter[305] >= 5)
				{
					Main.tileFrameCounter[305] = 0;
					Main.tileFrame[305]++;
					if (Main.tileFrame[305] > 11)
					{
						Main.tileFrame[305] = 0;
					}
				}
				Main.tileFrameCounter[306]++;
				if (Main.tileFrameCounter[306] >= 5)
				{
					Main.tileFrameCounter[306] = 0;
					Main.tileFrame[306]++;
					if (Main.tileFrame[306] > 11)
					{
						Main.tileFrame[306] = 0;
					}
				}
				Main.tileFrameCounter[307]++;
				if (Main.tileFrameCounter[307] >= 5)
				{
					Main.tileFrameCounter[307] = 0;
					Main.tileFrame[307]++;
					if (Main.tileFrame[307] > 1)
					{
						Main.tileFrame[307] = 0;
					}
				}
				Main.tileFrameCounter[308]++;
				if (Main.tileFrameCounter[308] >= 5)
				{
					Main.tileFrameCounter[308] = 0;
					Main.tileFrame[308]++;
					if (Main.tileFrame[308] > 7)
					{
						Main.tileFrame[308] = 0;
					}
				}
				Main.tileFrameCounter[314]++;
				if (Main.tileFrameCounter[314] >= 10)
				{
					Main.tileFrameCounter[314] = 0;
					Main.tileFrame[314]++;
					if (Main.tileFrame[314] > 4)
					{
						Main.tileFrame[314] = 0;
					}
				}
				Main.tileFrameCounter[326]++;
				if (Main.tileFrameCounter[326] >= 5)
				{
					Main.tileFrameCounter[326] = 0;
					Main.tileFrame[326]++;
					if (Main.tileFrame[326] > 7)
					{
						Main.tileFrame[326] = 0;
					}
				}
				Main.tileFrameCounter[327]++;
				if (Main.tileFrameCounter[327] >= 10)
				{
					Main.tileFrameCounter[327] = 0;
					Main.tileFrame[327]++;
					if (Main.tileFrame[327] > 7)
					{
						Main.tileFrame[327] = 0;
					}
				}
				Main.tileFrameCounter[345]++;
				if (Main.tileFrameCounter[345] >= 10)
				{
					Main.tileFrameCounter[345] = 0;
					Main.tileFrame[345]++;
					if (Main.tileFrame[345] > 7)
					{
						Main.tileFrame[345] = 0;
					}
				}
				Main.tileFrameCounter[458]++;
				if (Main.tileFrameCounter[458] >= 10)
				{
					Main.tileFrameCounter[458] = 0;
					Main.tileFrame[458]++;
					if (Main.tileFrame[458] > 7)
					{
						Main.tileFrame[458] = 0;
					}
				}
				Main.tileFrameCounter[459]++;
				if (Main.tileFrameCounter[459] >= 10)
				{
					Main.tileFrameCounter[459] = 0;
					Main.tileFrame[459]++;
					if (Main.tileFrame[459] > 7)
					{
						Main.tileFrame[459] = 0;
					}
				}
				Main.tileFrameCounter[336]++;
				if (Main.tileFrameCounter[336] >= 5)
				{
					Main.tileFrameCounter[336] = 0;
					Main.tileFrame[336]++;
					if (Main.tileFrame[336] > 3)
					{
						Main.tileFrame[336] = 0;
					}
				}
				Main.tileFrameCounter[328]++;
				if (Main.tileFrameCounter[328] >= 5)
				{
					Main.tileFrameCounter[328] = 0;
					Main.tileFrame[328]++;
					if (Main.tileFrame[328] > 7)
					{
						Main.tileFrame[328] = 0;
					}
				}
				Main.tileFrameCounter[329]++;
				if (Main.tileFrameCounter[329] >= 5)
				{
					Main.tileFrameCounter[329] = 0;
					Main.tileFrame[329]++;
					if (Main.tileFrame[329] > 7)
					{
						Main.tileFrame[329] = 0;
					}
				}
				for (int i = 340; i <= 344; i++)
				{
					Main.tileFrameCounter[i]++;
					if (Main.tileFrameCounter[i] >= 5)
					{
						Main.tileFrameCounter[i] = 0;
						Main.tileFrame[i]++;
						if (Main.tileFrame[i] > 3)
						{
							Main.tileFrame[i] = 0;
						}
					}
				}
				Main.tileFrameCounter[351]++;
				if (Main.tileFrameCounter[351] >= 5)
				{
					Main.tileFrameCounter[351] = 0;
					Main.tileFrame[351]++;
					if (Main.tileFrame[351] > 2)
					{
						Main.tileFrame[351] = 0;
					}
				}
				Main.tileFrameCounter[354]++;
				if (Main.tileFrameCounter[354] >= 5)
				{
					Main.tileFrameCounter[354] = 0;
					Main.tileFrame[354]++;
					if (Main.tileFrame[354] >= 8)
					{
						Main.tileFrame[354] = 0;
					}
				}
				Main.tileFrame[355] = Main.tileFrame[354];
				Main.tileFrameCounter[377]++;
				if (Main.tileFrameCounter[377] >= 5)
				{
					Main.tileFrameCounter[377] = 0;
					Main.tileFrame[377]++;
					if (Main.tileFrame[377] >= 4)
					{
						Main.tileFrame[377] = 0;
					}
				}
				Main.tileFrameCounter[379]++;
				if (Main.tileFrameCounter[379] >= 10)
				{
					Main.tileFrameCounter[379] = 0;
					Main.tileFrame[379]++;
					if (Main.tileFrame[379] >= 4)
					{
						Main.tileFrame[379] = 0;
					}
				}
				if (++Main.tileFrameCounter[390] >= 8)
				{
					Main.tileFrameCounter[390] = 0;
					if (++Main.tileFrame[390] >= 7)
					{
						Main.tileFrame[390] = 0;
					}
				}
				if (++Main.tileFrameCounter[228] >= 5)
				{
					Main.tileFrameCounter[228] = 0;
					if (++Main.tileFrame[228] >= 3)
					{
						Main.tileFrame[228] = 0;
					}
				}
				if (++Main.tileFrameCounter[405] >= 5)
				{
					Main.tileFrameCounter[405] = 0;
					if (++Main.tileFrame[405] >= 8)
					{
						Main.tileFrame[405] = 0;
					}
				}
				if (++Main.tileFrameCounter[406] >= 8)
				{
					Main.tileFrameCounter[406] = 0;
					if (++Main.tileFrame[406] >= 6)
					{
						Main.tileFrame[406] = 0;
					}
				}
				if (++Main.tileFrameCounter[452] >= 5)
				{
					Main.tileFrameCounter[452] = 0;
					if (++Main.tileFrame[452] >= 15)
					{
						Main.tileFrame[452] = 0;
					}
				}
				if (++Main.tileFrameCounter[455] >= 5)
				{
					Main.tileFrameCounter[455] = 0;
					if (++Main.tileFrame[455] >= 6)
					{
						Main.tileFrame[455] = 0;
					}
				}
				if (++Main.tileFrameCounter[454] >= 10 && (Main.tileFrame[454] != 0 || Main.tileFrameCounter[454] >= 90))
				{
					Main.tileFrameCounter[454] = 0;
					if (--Main.tileFrame[454] < 0)
					{
						Main.tileFrame[454] = 4;
					}
				}
				Main.tileFrameCounter[453] += (WorldGen.gen ? 0 : Main.rand.Next(3));
				if (++Main.tileFrameCounter[453] >= 60)
				{
					Main.tileFrameCounter[453] = 0;
				}
				if (++Main.tileFrame[412] >= 240)
				{
					Main.tileFrame[412] = 0;
				}
				Main.tileFrameCounter[456] += (WorldGen.gen ? 0 : Main.rand.Next(3));
				if (++Main.tileFrameCounter[456] >= 80)
				{
					Main.tileFrameCounter[456] = 0;
				}
				if (++Main.tileFrame[456] >= 240)
				{
					Main.tileFrame[456] = 0;
				}
				if (++Main.tileFrameCounter[410] >= 8)
				{
					Main.tileFrameCounter[410] = 0;
					if (++Main.tileFrame[410] >= 8)
					{
						Main.tileFrame[410] = 0;
					}
				}
				if (++Main.tileFrameCounter[421] >= 4)
				{
					Main.tileFrameCounter[421] = 0;
					if (++Main.tileFrame[421] >= 4)
					{
						Main.tileFrame[421] = 0;
					}
				}
				if (++Main.tileFrameCounter[422] >= 4)
				{
					Main.tileFrameCounter[422] = 0;
					if (--Main.tileFrame[422] < 0)
					{
						Main.tileFrame[422] = 3;
					}
				}
				if (++Main.tileFrameCounter[463] >= 10)
				{
					Main.tileFrameCounter[463] = 0;
					if (++Main.tileFrame[463] >= 6)
					{
						Main.tileFrame[463] = 0;
					}
				}
				if (++Main.tileFrameCounter[464] >= 5)
				{
					Main.tileFrameCounter[464] = 0;
					if (++Main.tileFrame[464] >= 23)
					{
						Main.tileFrame[464] = 0;
					}
				}
				Main.CritterCages();
				Main.UpdateDrawAnimations();
				if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F10) && !Main.drawingPlayerChat && !Main.editSign && !Main.editChest)
				{
					if (Main.frameRelease)
					{
						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
						if (Main.showFrameRate)
						{
							Main.showFrameRate = false;
						}
						else
						{
							Main.showFrameRate = true;
						}
					}
					Main.frameRelease = false;
				}
				else
				{
					Main.frameRelease = true;
				}
				if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F9) && !Main.drawingPlayerChat && !Main.editSign && !Main.editChest)
				{
					if (Main.RGBRelease)
					{
						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
						Lighting.NextLightMode();
					}
					Main.RGBRelease = false;
				}
				else
				{
					Main.RGBRelease = true;
				}
				if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F8) && !Main.drawingPlayerChat && !Main.editSign && !Main.editChest)
				{
					if (Main.netRelease)
					{
						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
						if (Main.netDiag)
						{
							Main.netDiag = false;
						}
						else
						{
							Main.netDiag = true;
						}
					}
					Main.netRelease = false;
				}
				else
				{
					Main.netRelease = true;
				}
				if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F7) && !Main.drawingPlayerChat && !Main.editSign && !Main.editChest)
				{
					if (Main.drawRelease)
					{
						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
						if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) || Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt))
						{
							TimeLogger.Start();
						}
						else if (Main.drawDiag)
						{
							Main.drawDiag = false;
						}
						else
						{
							Main.drawDiag = true;
						}
					}
					Main.drawRelease = false;
				}
				else
				{
					Main.drawRelease = true;
				}
				if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F11))
				{
					if (Main.releaseUI)
					{
						if (Main.hideUI)
						{
							Main.hideUI = false;
						}
						else
						{
							Main.hideUI = true;
						}
					}
					Main.releaseUI = false;
				}
				else
				{
					Main.releaseUI = true;
				}
				if ((Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) || Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt)) && Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Enter) && Main.hasFocus)
				{
					if (Main.toggleFullscreen)
					{
						Main.ToggleFullScreen();
						Main.chatRelease = false;
					}
					Main.toggleFullscreen = false;
				}
				else
				{
					Main.toggleFullscreen = true;
				}
				PlayerInput.UpdateInput();
				UILinkPointNavigator.Update();
				Main.oldKeyState = Main.keyState;
				Main.keyState = Keyboard.GetState();
				if (Main.editSign)
				{
					Main.drawingPlayerChat = false;
				}
				if (!Main.drawingPlayerChat)
				{
					Main.startChatLine = 0;
				}
				else
				{
					Main.showCount = (int)((float)(Main.screenHeight / 3) / Main.fontMouseText.MeasureString("1").Y) - 1;
					if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Up))
					{
						Main.startChatLine++;
						if (Main.startChatLine + Main.showCount >= Main.numChatLines - 1)
						{
							Main.startChatLine = Main.numChatLines - Main.showCount - 1;
						}
						if (Main.chatLine[Main.startChatLine + Main.showCount].text == "")
						{
							Main.startChatLine--;
						}
					}
					else if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Down))
					{
						Main.startChatLine--;
						if (Main.startChatLine < 0)
						{
							Main.startChatLine = 0;
						}
					}
					if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Escape))
					{
						Main.drawingPlayerChat = false;
					}
					string a = Main.chatText;
					Main.chatText = Main.GetInputText(Main.chatText);
					int num6 = Main.screenWidth - 330;
					if (a != Main.chatText)
					{
						while (ChatManager.GetStringSize(Main.fontMouseText, Main.chatText, Vector2.One, -1f).X > (float)num6)
						{
							Main.chatText = Main.chatText.Substring(0, Main.chatText.Length - 1);
						}
					}
					if (a != Main.chatText)
					{
						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
					}
					if (Main.inputTextEnter && Main.chatRelease)
					{
						if (Main.chatText != "")
						{
							NetMessage.SendData(25, -1, -1, Main.chatText, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
						}
						if (Main.netMode == 0 && Main.chatText != "")
						{
							Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
							if (Main.player[Main.myPlayer].difficulty == 2)
							{
								white = Main.hcColor;
							}
							else if (Main.player[Main.myPlayer].difficulty == 1)
							{
								white = Main.mcColor;
							}
							string text = Main.chatText;
							text = NameTagHandler.GenerateTag(Main.player[Main.myPlayer].name) + " " + Main.chatText;
							Main.player[Main.myPlayer].chatOverhead.NewMessage(Main.chatText, Main.chatLength / 2);
							Main.NewTextMultiline(text, false, white, Main.TextMaxLengthForScreen);
						}
						Main.chatText = "";
						Main.drawingPlayerChat = false;
						Main.chatRelease = false;
						PlayerInput.WritingText = true;
						Main.player[Main.myPlayer].releaseHook = false;
						Main.player[Main.myPlayer].releaseThrow = false;
						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
					}
				}
				if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Enter) && Main.netMode == 1 && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt) && Main.hasFocus)
				{
					if (Main.chatRelease && !Main.drawingPlayerChat && !Main.editSign && !Main.editChest && !Main.gameMenu && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Escape))
					{
						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
						Main.drawingPlayerChat = true;
						Main.clrInput();
						Main.chatText = "";
					}
					Main.chatRelease = false;
				}
				else
				{
					Main.chatRelease = true;
				}
				if (Main.gameMenu)
				{
					Main.UpdateMenu();
					if (Main.netMode != 2)
					{
						return;
					}
					Main.gamePaused = false;
				}
				Main.CheckInvasionProgressDisplay();
			}
			if (Main.netMode == 2)
			{
				Main.cloudAlpha = Main.maxRaining;
			}
			if (base.IsActive && Main.cloudAlpha > 0f)
			{
				Rain.MakeRain();
			}
			if (Main.netMode != 1)
			{
				this.updateCloudLayer();
			}
			this.UpdateWeather(gameTime);
			Main.Ambience();
			if (Main.netMode != 2)
			{
				if (Main.ignoreErrors)
				{
					try
					{
						Main.snowing();
						goto IL_3130;
					}
					catch
					{
						goto IL_3130;
					}
				}
				Main.snowing();
				IL_3130:
				Sandstorm.EmitDust();
			}
			if (Main.netMode == 1)
			{
				for (int j = 0; j < 59; j++)
				{
					if (Main.player[Main.myPlayer].inventory[j].IsNotTheSameAs(Main.clientPlayer.inventory[j]))
					{
						NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].inventory[j].name, Main.myPlayer, (float)j, (float)Main.player[Main.myPlayer].inventory[j].prefix, 0f, 0, 0, 0);
					}
				}
				for (int k = 0; k < Main.player[Main.myPlayer].armor.Length; k++)
				{
					if (Main.player[Main.myPlayer].armor[k].IsNotTheSameAs(Main.clientPlayer.armor[k]))
					{
						NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].armor[k].name, Main.myPlayer, (float)(59 + k), (float)Main.player[Main.myPlayer].armor[k].prefix, 0f, 0, 0, 0);
					}
				}
				for (int l = 0; l < Main.player[Main.myPlayer].miscEquips.Length; l++)
				{
					if (Main.player[Main.myPlayer].miscEquips[l].IsNotTheSameAs(Main.clientPlayer.miscEquips[l]))
					{
						NetMessage.SendData(5, -1, -1, "", Main.myPlayer, (float)(58 + Main.player[Main.myPlayer].armor.Length + Main.player[Main.myPlayer].dye.Length + 1 + l), (float)Main.player[Main.myPlayer].miscEquips[l].prefix, 0f, 0, 0, 0);
					}
				}
				for (int m = 0; m < Main.player[Main.myPlayer].miscDyes.Length; m++)
				{
					if (Main.player[Main.myPlayer].miscDyes[m].IsNotTheSameAs(Main.clientPlayer.miscDyes[m]))
					{
						NetMessage.SendData(5, -1, -1, "", Main.myPlayer, (float)(58 + Main.player[Main.myPlayer].armor.Length + Main.player[Main.myPlayer].dye.Length + Main.player[Main.myPlayer].miscEquips.Length + 1 + m), (float)Main.player[Main.myPlayer].miscDyes[m].prefix, 0f, 0, 0, 0);
					}
				}
				for (int n = 0; n < Main.player[Main.myPlayer].bank.item.Length; n++)
				{
					if (Main.player[Main.myPlayer].bank.item[n].IsNotTheSameAs(Main.clientPlayer.bank.item[n]))
					{
						NetMessage.SendData(5, -1, -1, "", Main.myPlayer, (float)(58 + Main.player[Main.myPlayer].armor.Length + Main.player[Main.myPlayer].dye.Length + Main.player[Main.myPlayer].miscEquips.Length + Main.player[Main.myPlayer].miscDyes.Length + 1 + n), (float)Main.player[Main.myPlayer].bank.item[n].prefix, 0f, 0, 0, 0);
					}
				}
				for (int num7 = 0; num7 < Main.player[Main.myPlayer].bank2.item.Length; num7++)
				{
					if (Main.player[Main.myPlayer].bank2.item[num7].IsNotTheSameAs(Main.clientPlayer.bank2.item[num7]))
					{
						NetMessage.SendData(5, -1, -1, "", Main.myPlayer, (float)(58 + Main.player[Main.myPlayer].armor.Length + Main.player[Main.myPlayer].dye.Length + Main.player[Main.myPlayer].miscEquips.Length + Main.player[Main.myPlayer].miscDyes.Length + Main.player[Main.myPlayer].bank.item.Length + 1 + num7), (float)Main.player[Main.myPlayer].bank2.item[num7].prefix, 0f, 0, 0, 0);
					}
				}
				if (Main.player[Main.myPlayer].trashItem.IsNotTheSameAs(Main.clientPlayer.trashItem))
				{
					NetMessage.SendData(5, -1, -1, "", Main.myPlayer, (float)(58 + Main.player[Main.myPlayer].armor.Length + Main.player[Main.myPlayer].dye.Length + Main.player[Main.myPlayer].miscEquips.Length + Main.player[Main.myPlayer].miscDyes.Length + Main.player[Main.myPlayer].bank.item.Length + Main.player[Main.myPlayer].bank2.item.Length + 1), (float)Main.player[Main.myPlayer].trashItem.prefix, 0f, 0, 0, 0);
				}
				for (int num8 = 0; num8 < Main.player[Main.myPlayer].bank3.item.Length; num8++)
				{
					if (Main.player[Main.myPlayer].bank3.item[num8].IsNotTheSameAs(Main.clientPlayer.bank3.item[num8]))
					{
						NetMessage.SendData(5, -1, -1, "", Main.myPlayer, (float)(58 + Main.player[Main.myPlayer].armor.Length + Main.player[Main.myPlayer].dye.Length + Main.player[Main.myPlayer].miscEquips.Length + Main.player[Main.myPlayer].miscDyes.Length + Main.player[Main.myPlayer].bank.item.Length + Main.player[Main.myPlayer].bank2.item.Length + 2 + num8), (float)Main.player[Main.myPlayer].bank3.item[num8].prefix, 0f, 0, 0, 0);
					}
				}
				for (int num9 = 0; num9 < Main.player[Main.myPlayer].dye.Length; num9++)
				{
					if (Main.player[Main.myPlayer].dye[num9].IsNotTheSameAs(Main.clientPlayer.dye[num9]))
					{
						NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].dye[0].name, Main.myPlayer, (float)(58 + Main.player[Main.myPlayer].armor.Length + 1 + num9), (float)Main.player[Main.myPlayer].dye[num9].prefix, 0f, 0, 0, 0);
					}
				}
				if (Main.player[Main.myPlayer].chest != Main.clientPlayer.chest && Main.player[Main.myPlayer].chest < 0)
				{
					if (Main.player[Main.myPlayer].editedChestName)
					{
						if (Main.chest[Main.clientPlayer.chest] != null)
						{
							NetMessage.SendData(33, -1, -1, Main.chest[Main.clientPlayer.chest].name, Main.player[Main.myPlayer].chest, 1f, 0f, 0f, 0, 0, 0);
						}
						else
						{
							NetMessage.SendData(33, -1, -1, "", Main.player[Main.myPlayer].chest, 0f, 0f, 0f, 0, 0, 0);
						}
						Main.player[Main.myPlayer].editedChestName = false;
					}
					else
					{
						NetMessage.SendData(33, -1, -1, "", Main.player[Main.myPlayer].chest, 0f, 0f, 0f, 0, 0, 0);
					}
				}
				if (Main.player[Main.myPlayer].talkNPC != Main.clientPlayer.talkNPC)
				{
					NetMessage.SendData(40, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
				}
				bool flag = false;
				if (Main.player[Main.myPlayer].zone1 != Main.clientPlayer.zone1)
				{
					flag = true;
				}
				if (Main.player[Main.myPlayer].zone2 != Main.clientPlayer.zone2)
				{
					flag = true;
				}
				if (Main.player[Main.myPlayer].zone3 != Main.clientPlayer.zone3)
				{
					flag = true;
				}
				if (Main.player[Main.myPlayer].zone4 != Main.clientPlayer.zone4)
				{
					flag = true;
				}
				if (flag)
				{
					NetMessage.SendData(36, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
				}
				if (Main.player[Main.myPlayer].statLife != Main.clientPlayer.statLife || Main.player[Main.myPlayer].statLifeMax != Main.clientPlayer.statLifeMax)
				{
					Main.player[Main.myPlayer].netLife = true;
				}
				if (Main.player[Main.myPlayer].netLifeTime > 0)
				{
					Main.player[Main.myPlayer].netLifeTime--;
				}
				else if (Main.player[Main.myPlayer].netLife)
				{
					Main.player[Main.myPlayer].netLife = false;
					Main.player[Main.myPlayer].netLifeTime = 60;
					NetMessage.SendData(16, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
				}
				if (Main.player[Main.myPlayer].statMana != Main.clientPlayer.statMana || Main.player[Main.myPlayer].statManaMax != Main.clientPlayer.statManaMax)
				{
					Main.player[Main.myPlayer].netMana = true;
				}
				if (Main.player[Main.myPlayer].netManaTime > 0)
				{
					Main.player[Main.myPlayer].netManaTime--;
				}
				else if (Main.player[Main.myPlayer].netMana)
				{
					Main.player[Main.myPlayer].netMana = false;
					Main.player[Main.myPlayer].netManaTime = 60;
					NetMessage.SendData(42, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
				}
				bool flag2 = false;
				for (int num10 = 0; num10 < 22; num10++)
				{
					if (Main.player[Main.myPlayer].buffType[num10] != Main.clientPlayer.buffType[num10])
					{
						flag2 = true;
					}
				}
				if (flag2)
				{
					NetMessage.SendData(50, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
					NetMessage.SendData(13, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
				}
				bool flag3 = false;
				if (Main.player[Main.myPlayer].MinionRestTargetPoint != Main.clientPlayer.MinionRestTargetPoint)
				{
					flag3 = true;
				}
				if (flag3)
				{
					NetMessage.SendData(99, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
				}
				bool flag4 = false;
				if (Main.player[Main.myPlayer].MinionAttackTargetNPC != Main.clientPlayer.MinionAttackTargetNPC)
				{
					flag4 = true;
				}
				if (flag4)
				{
					NetMessage.SendData(115, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
				}
			}
			if (Main.netMode == 1)
			{
				Main.clientPlayer = (Player)Main.player[Main.myPlayer].clientClone();
			}
			if (Main.netMode == 0 && (Main.playerInventory || Main.npcChatText != "" || Main.player[Main.myPlayer].sign >= 0 || Main.ingameOptionsWindow || Main.inFancyUI) && Main.autoPause)
			{
				if (!Main.drawingPlayerChat && !Main.editSign && !Main.editChest && !Main.blockInput)
				{
					Main.player[Main.myPlayer].controlInv = PlayerInput.Triggers.Current.Inventory;
					if (Main.player[Main.myPlayer].controlInv)
					{
						if (Main.player[Main.myPlayer].releaseInventory)
						{
							Main.player[Main.myPlayer].ToggleInv();
						}
						Main.player[Main.myPlayer].releaseInventory = false;
					}
					else
					{
						Main.player[Main.myPlayer].releaseInventory = true;
					}
				}
				if (Main.playerInventory)
				{
					int num11 = PlayerInput.ScrollWheelDelta / 120;
					bool flag5 = true;
					if (Main.recBigList)
					{
						int num12 = 42;
						int num13 = 340;
						int num14 = 310;
						int num15 = (Main.screenWidth - num14 - 280) / num12;
						int num16 = (Main.screenHeight - num13 - 20) / num12;
						if (new Microsoft.Xna.Framework.Rectangle(num14, num13, num15 * num12, num16 * num12).Contains(Main.MouseScreen.ToPoint()))
						{
							int num17 = Math.Sign(num11);
							while (num11 != 0)
							{
								if (num11 < 0)
								{
									Main.recStart -= num15;
									if (Main.recStart < 0)
									{
										Main.recStart = 0;
									}
								}
								else
								{
									Main.recStart += num15;
									Main.PlaySound(12, -1, -1, 1, 1f, 0f);
									if (Main.recStart > Main.numAvailableRecipes - num15)
									{
										Main.recStart = Main.numAvailableRecipes - num15;
									}
								}
								num11 -= num17;
							}
						}
					}
					if (flag5)
					{
						Main.focusRecipe += num11;
						if (Main.focusRecipe > Main.numAvailableRecipes - 1)
						{
							Main.focusRecipe = Main.numAvailableRecipes - 1;
						}
						if (Main.focusRecipe < 0)
						{
							Main.focusRecipe = 0;
						}
					}
					Main.player[Main.myPlayer].dropItemCheck();
				}
				Main.player[Main.myPlayer].head = Main.player[Main.myPlayer].armor[0].headSlot;
				Main.player[Main.myPlayer].body = Main.player[Main.myPlayer].armor[1].bodySlot;
				Main.player[Main.myPlayer].legs = Main.player[Main.myPlayer].armor[2].legSlot;
				if (!Main.player[Main.myPlayer].hostile)
				{
					if (Main.player[Main.myPlayer].armor[10].headSlot >= 0)
					{
						Main.player[Main.myPlayer].head = Main.player[Main.myPlayer].armor[10].headSlot;
					}
					if (Main.player[Main.myPlayer].armor[11].bodySlot >= 0)
					{
						Main.player[Main.myPlayer].body = Main.player[Main.myPlayer].armor[11].bodySlot;
					}
					if (Main.player[Main.myPlayer].armor[12].legSlot >= 0)
					{
						Main.player[Main.myPlayer].legs = Main.player[Main.myPlayer].armor[12].legSlot;
					}
				}
				if (Main.editSign)
				{
					if (Main.player[Main.myPlayer].sign == -1)
					{
						Main.editSign = false;
					}
					else
					{
						Main.InputTextSign();
					}
				}
				else if (Main.editChest && Main.player[Main.myPlayer].chest == -1)
				{
					Main.editChest = false;
				}
				Main.player[Main.myPlayer].lastChest = Main.player[Main.myPlayer].chest;
				if (Main.playerInventory)
				{
					Main.player[Main.myPlayer].AdjTiles();
				}
				Main.gamePaused = true;
				return;
			}
			Main.gamePaused = false;
			if (!Main.dedServ && (double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0 && Main.netMode != 2)
			{
				Star.UpdateStars();
				Cloud.UpdateClouds();
			}
			PortalHelper.UpdatePortalPoints();
			Main.tileSolid[379] = false;
			Main.ActivePlayersCount = 0;
			int num18 = 0;
			while (num18 < 255)
			{
				if (Main.ignoreErrors)
				{
					try
					{
						Main.player[num18].Update(num18);
						goto IL_41E9;
					}
					catch
					{
						goto IL_41E9;
					}
					goto IL_41DA;
				}
				goto IL_41DA;
				IL_41E9:
				num18++;
				continue;
				IL_41DA:
				Main.player[num18].Update(num18);
				goto IL_41E9;
			}
			if (Main.netMode != 1)
			{
				try
				{
					NPC.SpawnNPC();
				}
				catch
				{
				}
			}
			if (Main.netMode != 1)
			{
				PressurePlateHelper.Update();
			}
			for (int num19 = 0; num19 < 255; num19++)
			{
				Main.player[num19].activeNPCs = 0f;
				Main.player[num19].townNPCs = 0f;
			}
			if (Main.wof >= 0 && !Main.npc[Main.wof].active)
			{
				Main.wof = -1;
			}
			if (NPC.golemBoss >= 0 && !Main.npc[NPC.golemBoss].active)
			{
				NPC.golemBoss = -1;
			}
			if (NPC.plantBoss >= 0 && !Main.npc[NPC.plantBoss].active)
			{
				NPC.plantBoss = -1;
			}
			if (NPC.crimsonBoss >= 0 && !Main.npc[NPC.crimsonBoss].active)
			{
				NPC.crimsonBoss = -1;
			}
			NPC.taxCollector = false;
			NPC.ClearFoundActiveNPCs();
			NPC.UpdateFoundActiveNPCs();
			FixExploitManEaters.Update();
			int num20 = 0;
			while (num20 < 200)
			{
				if (Main.ignoreErrors)
				{
					try
					{
						Main.npc[num20].UpdateNPC(num20);
						goto IL_4320;
					}
					catch (Exception)
					{
						Main.npc[num20] = new NPC();
						goto IL_4320;
					}
					goto IL_4311;
				}
				goto IL_4311;
				IL_4320:
				num20++;
				continue;
				IL_4311:
				Main.npc[num20].UpdateNPC(num20);
				goto IL_4320;
			}
			int num21 = 0;
			while (num21 < 500)
			{
				if (Main.ignoreErrors)
				{
					try
					{
						Main.gore[num21].Update();
						goto IL_4367;
					}
					catch
					{
						Main.gore[num21] = new Gore();
						goto IL_4367;
					}
					goto IL_435A;
				}
				goto IL_435A;
				IL_4367:
				num21++;
				continue;
				IL_435A:
				Main.gore[num21].Update();
				goto IL_4367;
			}
			Projectile.UpdateStaticThings();
			LockOnHelper.SetUP();
			int num22 = 0;
			while (num22 < 1000)
			{
				Main.ProjectileUpdateLoopIndex = num22;
				if (Main.ignoreErrors)
				{
					try
					{
						Main.projectile[num22].Update(num22);
						goto IL_43C3;
					}
					catch
					{
						Main.projectile[num22] = new Projectile();
						goto IL_43C3;
					}
					goto IL_43B4;
				}
				goto IL_43B4;
				IL_43C3:
				num22++;
				continue;
				IL_43B4:
				Main.projectile[num22].Update(num22);
				goto IL_43C3;
			}
			Main.ProjectileUpdateLoopIndex = -1;
			LockOnHelper.SetDOWN();
			int num23 = 0;
			while (num23 < 400)
			{
				if (Main.ignoreErrors)
				{
					try
					{
						Main.item[num23].UpdateItem(num23);
						goto IL_4419;
					}
					catch
					{
						Main.item[num23] = new Item();
						goto IL_4419;
					}
					goto IL_440A;
				}
				goto IL_440A;
				IL_4419:
				num23++;
				continue;
				IL_440A:
				Main.item[num23].UpdateItem(num23);
				goto IL_4419;
			}
			if (Main.ignoreErrors)
			{
				try
				{
					Dust.UpdateDust();
					goto IL_446E;
				}
				catch
				{
					for (int num24 = 0; num24 < 6000; num24++)
					{
						Main.dust[num24] = new Dust();
						Main.dust[num24].dustIndex = num24;
					}
					goto IL_446E;
				}
			}
			Dust.UpdateDust();
			IL_446E:
			if (Main.netMode != 2)
			{
				CombatText.UpdateCombatText();
				ItemText.UpdateItemText();
			}
			if (Main.ignoreErrors)
			{
				try
				{
					Main.UpdateTime();
					goto IL_449C;
				}
				catch
				{
					Main.checkForSpawns = 0;
					goto IL_449C;
				}
			}
			Main.UpdateTime();
			IL_449C:
			Main.tileSolid[379] = true;
			if (Main.netMode != 1)
			{
				if (Main.ignoreErrors)
				{
					try
					{
						WorldGen.UpdateWorld();
						Main.UpdateInvasion();
						goto IL_44D0;
					}
					catch
					{
						goto IL_44D0;
					}
				}
				WorldGen.UpdateWorld();
				Main.UpdateInvasion();
			}
			IL_44D0:
			if (Main.ignoreErrors)
			{
				try
				{
					if (Main.netMode == 2)
					{
						Main.UpdateServer();
					}
					if (Main.netMode == 1)
					{
						Main.UpdateClient();
					}
					goto IL_4518;
				}
				catch
				{
					int arg_44FB_0 = Main.netMode;
					goto IL_4518;
				}
			}
			if (Main.netMode == 2)
			{
				Main.UpdateServer();
			}
			if (Main.netMode == 1)
			{
				Main.UpdateClient();
			}
			IL_4518:
			if (Main.ignoreErrors)
			{
				try
				{
					for (int num25 = 0; num25 < Main.numChatLines; num25++)
					{
						if (Main.chatLine[num25].showTime > 0)
						{
							Main.chatLine[num25].showTime--;
						}
					}
					goto IL_45B7;
				}
				catch
				{
					for (int num26 = 0; num26 < Main.numChatLines; num26++)
					{
						Main.chatLine[num26] = new ChatLine();
					}
					goto IL_45B7;
				}
			}
			for (int num27 = 0; num27 < Main.numChatLines; num27++)
			{
				if (Main.chatLine[num27].showTime > 0)
				{
					Main.chatLine[num27].showTime--;
				}
			}
			IL_45B7:
			Main.upTimer = (float)stopwatch.Elapsed.TotalMilliseconds;
			if (Main.upTimerMaxDelay > 0f)
			{
				Main.upTimerMaxDelay -= 1f;
			}
			else
			{
				Main.upTimerMax = 0f;
			}
			if (Main.upTimer > Main.upTimerMax)
			{
				Main.upTimerMax = Main.upTimer;
				Main.upTimerMaxDelay = 400f;
			}
			Chest.UpdateChestFrames();
			if (Main.cameraLerp > 0f)
			{
				Main.cameraLerpTimer++;
				if (Main.cameraLerpTimer >= Main.cameraLerpTimeToggle)
				{
					Main.cameraLerp += (float)((Main.cameraLerpTimer - Main.cameraLerpTimeToggle) / 3 + 1) * 0.001f;
				}
				if (Main.cameraLerp > 1f)
				{
					Main.cameraLerp = 1f;
				}
			}
			base.Update(gameTime);
		}

		private static void UpdateSettingUnlocks()
		{
			if (Main.netMode == 2 || Main.dedServ)
			{
				return;
			}
			if (Main.hardMode && !Main.SettingsUnlock_WorldEvil)
			{
				Main.SettingsUnlock_WorldEvil = true;
				Main.SaveSettings();
			}
		}

		public static void InputTextSign()
		{
			if (IngameFancyUI.CanShowVirtualKeyboard(1) && UIVirtualKeyboard.KeyboardContext == 1)
			{
				return;
			}
			Main.npcChatText = Main.GetInputText(Main.npcChatText);
			if (Main.inputTextEnter)
			{
				byte[] bytes = new byte[]
				{
					10
				};
				Main.npcChatText += Encoding.ASCII.GetString(bytes);
				return;
			}
			if (Main.inputTextEscape)
			{
				Main.InputTextSignCancel();
			}
		}

		public static void InputTextChest()
		{
			if (IngameFancyUI.CanShowVirtualKeyboard(2) && UIVirtualKeyboard.KeyboardContext == 2)
			{
				return;
			}
			Main.npcChatText = Main.GetInputText(Main.npcChatText);
			if (Main.inputTextEnter)
			{
				ChestUI.RenameChestSubmit(Main.player[Main.myPlayer]);
				return;
			}
			if (Main.inputTextEscape)
			{
				ChestUI.RenameChestCancel();
			}
		}

		public static void InputTextSignCancel()
		{
			Main.PlaySound(12, -1, -1, 1, 1f, 0f);
			Main.editSign = false;
			Main.blockKey = Microsoft.Xna.Framework.Input.Keys.Escape.ToString();
			UIVirtualKeyboard.CacheCancelledInput(1);
			Main.npcChatText = Main.sign[Main.player[Main.myPlayer].sign].text;
		}

		private static void UpdateMenu()
		{
			AchievementCompleteUI.Clear();
			Main.playerInventory = false;
			Main.exitScale = 0.8f;
			if (Main.netMode == 0)
			{
				Main.maxRaining = 0f;
				Main.raining = false;
				if (!Main.grabSky)
				{
					Main.time += 86.4;
					if (!Main.dayTime)
					{
						if (Main.time > 32400.0)
						{
							Main.bloodMoon = false;
							Main.time = 0.0;
							Main.dayTime = true;
							Main.moonPhase++;
							if (Main.moonPhase >= 8)
							{
								Main.moonPhase = 0;
								return;
							}
						}
					}
					else if (Main.time > 54000.0)
					{
						Main.time = 0.0;
						Main.dayTime = false;
						return;
					}
				}
			}
			else if (Main.netMode == 1)
			{
				Main.UpdateTime();
			}
		}

		public static void clrInput()
		{
			Main.keyCount = 0;
		}

		[DllImport("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true)]
		public static extern short GetKeyState(int keyCode);

		public static string GetInputText(string oldString)
		{
#if CLIENT
			if (!Main.hasFocus)
			{
				return oldString;
			}
			Main.inputTextEnter = false;
			Main.inputTextEscape = false;
			string text = oldString;
			string newKeys = "";
			if (text == null)
			{
				text = "";
			}
			bool flag = false;
			if (Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftControl) || Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightControl))
			{
				if (Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Z) && !Main.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Z))
				{
					text = "";
				}
				else if (Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.X) && !Main.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.X))
				{
					PlatformUtilities.SetClipboard(oldString);
					text = "";
				}
				else if ((Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.C) && !Main.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.C)) || (Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Insert) && !Main.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Insert)))
				{
					PlatformUtilities.SetClipboard(oldString);
				}
				else if (Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.V) && !Main.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.V))
				{
					newKeys += PlatformUtilities.GetClipboard();
				}
			}
			else
			{
				if (Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftShift) || Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightShift))
				{
					if (Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Delete) && !Main.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Delete))
					{
						Thread thread = new Thread((ThreadStart)delegate
						{
							if (oldString.Length > 0)
							{
								Clipboard.SetText(oldString);
							}
						});
						thread.SetApartmentState(ApartmentState.STA);
						thread.Start();
						while (thread.IsAlive)
						{
						}
						text = "";
					}
					if (Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Insert) && !Main.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Insert))
					{
						Thread thread2 = new Thread((ThreadStart)delegate
						{
							string text2 = Clipboard.GetText();
							for (int l = 0; l < text2.Length; l++)
							{
								if (text2[l] < ' ' || text2[l] == '\u007f')
								{
									text2 = text2.Replace(string.Concat(text2[l--]), "");
								}
							}
							newKeys += text2;
						});
						thread2.SetApartmentState(ApartmentState.STA);
						thread2.Start();
						while (thread2.IsAlive)
						{
						}
					}
				}
				for (int i = 0; i < Main.keyCount; i++)
				{
					int num = Main.keyInt[i];
					string str = Main.keyString[i];
					if (num == 13)
					{
						Main.inputTextEnter = true;
					}
					else if (num == 27)
					{
						Main.inputTextEscape = true;
					}
					else if (num >= 32 && num != 127)
					{
						newKeys += str;
					}
				}
			}
			Main.keyCount = 0;
			text += newKeys;
			Main.oldInputText = Main.inputText;
			Main.inputText = Keyboard.GetState();
			Microsoft.Xna.Framework.Input.Keys[] pressedKeys = Main.inputText.GetPressedKeys();
			Microsoft.Xna.Framework.Input.Keys[] pressedKeys2 = Main.oldInputText.GetPressedKeys();
			if (Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Back) && Main.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Back))
			{
				if (Main.backSpaceCount == 0)
				{
					Main.backSpaceCount = 7;
					flag = true;
				}
				Main.backSpaceCount--;
			}
			else
			{
				Main.backSpaceCount = 15;
			}
			for (int j = 0; j < pressedKeys.Length; j++)
			{
				bool flag2 = true;
				for (int k = 0; k < pressedKeys2.Length; k++)
				{
					if (pressedKeys[j] == pressedKeys2[k])
					{
						flag2 = false;
					}
				}
				string a = string.Concat(pressedKeys[j]);
				if (a == "Back" && (flag2 || flag) && text.Length > 0)
				{
					TextSnippet[] array = ChatManager.ParseMessage(text, Microsoft.Xna.Framework.Color.White);
					if (array[array.Length - 1].DeleteWhole)
					{
						text = text.Substring(0, text.Length - array[array.Length - 1].TextOriginal.Length);
					}
					else
					{
						text = text.Substring(0, text.Length - 1);
					}
				}
			}
			return text;
#else
			return "";
#endif
		}

		public string TooltipMousetextProcessor(string tooltip)
		{
			if (tooltip.Contains("<right>"))
			{
				InputMode inputMode = InputMode.XBoxGamepad;
				if (PlayerInput.UsingGamepad)
				{
					inputMode = InputMode.XBoxGamepadUI;
				}
				if (inputMode == InputMode.XBoxGamepadUI)
				{
					KeyConfiguration keyConfiguration = PlayerInput.CurrentProfile.InputModes[inputMode];
					string text = PlayerInput.BuildCommand("", true, new List<string>[]
					{
						keyConfiguration.KeyStatus["MouseRight"]
					});
					text = text.Replace(": ", "");
					tooltip = tooltip.Replace("<right>", text);
				}
				else
				{
					tooltip = tooltip.Replace("<right>", Language.GetTextValue("Controls.RightClick"));
				}
			}
			return tooltip;
		}

		public void MouseText(string cursorText, int rare = 0, byte diff = 0)
		{
			if (this.mouseNPC > -1)
			{
				return;
			}
			if (cursorText == null)
			{
				return;
			}
			int num = Main.mouseX + 10;
			int num2 = Main.mouseY + 10;
			new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
			if (Main.toolTip.type > 0)
			{
				this.MouseText_DrawItemTooltip(rare, diff, num, num2);
				return;
			}
			if (Main.buffString != "" && Main.buffString != null)
			{
				this.MouseText_DrawBuffString(ref num, ref num2);
			}
			if (Main.ThickMouse)
			{
				num += 6;
				num2 += 6;
			}
			Vector2 vector = Main.fontMouseText.MeasureString(cursorText);
			if ((float)num + vector.X + 4f > (float)Main.screenWidth)
			{
				num = (int)((float)Main.screenWidth - vector.X - 4f);
			}
			if ((float)num2 + vector.Y + 4f > (float)Main.screenHeight)
			{
				num2 = (int)((float)Main.screenHeight - vector.Y - 4f);
			}
			Main.spriteBatch.DrawString(Main.fontMouseText, cursorText, new Vector2((float)num, (float)(num2 - 2)), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			Main.spriteBatch.DrawString(Main.fontMouseText, cursorText, new Vector2((float)num, (float)(num2 + 2)), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			Main.spriteBatch.DrawString(Main.fontMouseText, cursorText, new Vector2((float)(num - 2), (float)num2), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			Main.spriteBatch.DrawString(Main.fontMouseText, cursorText, new Vector2((float)(num + 2), (float)num2), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			float num3 = (float)Main.mouseTextColor / 255f;
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
			if (rare == -11)
			{
				color = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num3)), (int)((byte)(175f * num3)), (int)((byte)(0f * num3)), (int)Main.mouseTextColor);
			}
			if (rare == -10)
			{
				color = new Microsoft.Xna.Framework.Color((int)((byte)(65f * num3)), (int)((byte)(255f * num3)), (int)((byte)(110f * num3)), (int)Main.mouseTextColor);
			}
			if (rare == -1)
			{
				color = new Microsoft.Xna.Framework.Color((int)((byte)(130f * num3)), (int)((byte)(130f * num3)), (int)((byte)(130f * num3)), (int)Main.mouseTextColor);
			}
			if (rare == 1)
			{
				color = new Microsoft.Xna.Framework.Color((int)((byte)(150f * num3)), (int)((byte)(150f * num3)), (int)((byte)(255f * num3)), (int)Main.mouseTextColor);
			}
			if (rare == 2)
			{
				color = new Microsoft.Xna.Framework.Color((int)((byte)(150f * num3)), (int)((byte)(255f * num3)), (int)((byte)(150f * num3)), (int)Main.mouseTextColor);
			}
			if (rare == 3)
			{
				color = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num3)), (int)((byte)(200f * num3)), (int)((byte)(150f * num3)), (int)Main.mouseTextColor);
			}
			if (rare == 4)
			{
				color = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num3)), (int)((byte)(150f * num3)), (int)((byte)(150f * num3)), (int)Main.mouseTextColor);
			}
			if (rare == 5)
			{
				color = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num3)), (int)((byte)(150f * num3)), (int)((byte)(255f * num3)), (int)Main.mouseTextColor);
			}
			if (rare == 6)
			{
				color = new Microsoft.Xna.Framework.Color((int)((byte)(210f * num3)), (int)((byte)(160f * num3)), (int)((byte)(255f * num3)), (int)Main.mouseTextColor);
			}
			if (rare == 7)
			{
				color = new Microsoft.Xna.Framework.Color((int)((byte)(150f * num3)), (int)((byte)(255f * num3)), (int)((byte)(10f * num3)), (int)Main.mouseTextColor);
			}
			if (rare == 8)
			{
				color = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num3)), (int)((byte)(255f * num3)), (int)((byte)(10f * num3)), (int)Main.mouseTextColor);
			}
			if (rare == 9)
			{
				color = new Microsoft.Xna.Framework.Color((int)((byte)(5f * num3)), (int)((byte)(200f * num3)), (int)((byte)(255f * num3)), (int)Main.mouseTextColor);
			}
			if (rare == 10)
			{
				color = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num3)), (int)((byte)(40f * num3)), (int)((byte)(100f * num3)), (int)Main.mouseTextColor);
			}
			if (rare >= 11)
			{
				color = new Microsoft.Xna.Framework.Color((int)((byte)(180f * num3)), (int)((byte)(40f * num3)), (int)((byte)(255f * num3)), (int)Main.mouseTextColor);
			}
			if (Main.toolTip.expert || rare == -12)
			{
				color = new Microsoft.Xna.Framework.Color((int)((byte)((float)Main.DiscoR * num3)), (int)((byte)((float)Main.DiscoG * num3)), (int)((byte)((float)Main.DiscoB * num3)), (int)Main.mouseTextColor);
			}
			if (diff == 1)
			{
				color = new Microsoft.Xna.Framework.Color((int)((byte)((float)Main.mcColor.R * num3)), (int)((byte)((float)Main.mcColor.G * num3)), (int)((byte)((float)Main.mcColor.B * num3)), (int)Main.mouseTextColor);
			}
			if (diff == 2)
			{
				color = new Microsoft.Xna.Framework.Color((int)((byte)((float)Main.hcColor.R * num3)), (int)((byte)((float)Main.hcColor.G * num3)), (int)((byte)((float)Main.hcColor.B * num3)), (int)Main.mouseTextColor);
			}
			Main.spriteBatch.DrawString(Main.fontMouseText, cursorText, new Vector2((float)num, (float)num2), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
		}

		private void MouseText_DrawItemTooltip(int rare, byte diff, int X, int Y)
		{
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
			int num = -1;
			rare = Main.toolTip.rare;
			float knockBack = Main.toolTip.knockBack;
			float num2 = 1f;
			if (Main.toolTip.melee && Main.player[Main.myPlayer].kbGlove)
			{
				num2 += 1f;
			}
			if (Main.player[Main.myPlayer].kbBuff)
			{
				num2 += 0.5f;
			}
			if (num2 != 1f)
			{
				Main.toolTip.knockBack *= num2;
			}
			if (Main.toolTip.ranged && Main.player[Main.myPlayer].shroomiteStealth)
			{
				Main.toolTip.knockBack *= 1f + (1f - Main.player[Main.myPlayer].stealth) * 0.5f;
			}
			int num3 = 20;
			int num4 = 1;
			string[] array = new string[num3];
			bool[] array2 = new bool[num3];
			bool[] array3 = new bool[num3];
			for (int i = 0; i < num3; i++)
			{
				array2[i] = false;
				array3[i] = false;
			}
			array[0] = Main.toolTip.AffixName();
			if (Main.toolTip.stack > 1)
			{
				string[] array4;
				string[] expr_148 = array4 = array;
				int arg_18C_1 = 0;
				object obj = array4[0];
				expr_148[arg_18C_1] = string.Concat(new object[]
				{
					obj,
					" (",
					Main.toolTip.stack,
					")"
				});
			}
			if (Main.toolTip.favorited)
			{
				array[num4++] = Lang.tip[56];
				array[num4++] = Lang.tip[57];
			}
			if (Main.toolTip.social)
			{
				array[num4] = Lang.tip[0];
				num4++;
				array[num4] = Lang.tip[1];
				num4++;
			}
			else
			{
				if (Main.toolTip.damage > 0 && (!Main.toolTip.notAmmo || Main.toolTip.useStyle > 0) && (Main.toolTip.type < 71 || Main.toolTip.type > 74 || Main.player[Main.myPlayer].HasItem(905)))
				{
					float num5 = 5E-06f;
					int damage = Main.toolTip.damage;
					if (Main.toolTip.melee)
					{
						array[num4] = string.Concat((int)(Main.player[Main.myPlayer].meleeDamage * (float)damage + num5));
						string[] array5;
						IntPtr intPtr;
						(array5 = array)[(int)(intPtr = (IntPtr)num4)] = array5[(int)intPtr] + Lang.tip[2];
					}
					else if (Main.toolTip.ranged)
					{
						float num6 = (float)damage * Main.player[Main.myPlayer].rangedDamage;
						if (Main.toolTip.useAmmo == AmmoID.Arrow || Main.toolTip.useAmmo == AmmoID.Stake)
						{
							num6 *= Main.player[Main.myPlayer].arrowDamage;
						}
						if (Main.toolTip.useAmmo == AmmoID.Arrow && Main.player[Main.myPlayer].archery)
						{
							num6 *= 1.2f;
						}
						if (Main.toolTip.useAmmo == AmmoID.Bullet || Main.toolTip.useAmmo == AmmoID.CandyCorn)
						{
							num6 *= Main.player[Main.myPlayer].bulletDamage;
						}
						if (Main.toolTip.useAmmo == AmmoID.Rocket || Main.toolTip.useAmmo == AmmoID.StyngerBolt || Main.toolTip.useAmmo == AmmoID.JackOLantern || Main.toolTip.useAmmo == AmmoID.NailFriendly)
						{
							num6 *= Main.player[Main.myPlayer].rocketDamage;
						}
						array[num4] = string.Concat((int)(num6 + num5));
						string[] array6;
						IntPtr intPtr2;
						(array6 = array)[(int)(intPtr2 = (IntPtr)num4)] = array6[(int)intPtr2] + Lang.tip[3];
					}
					else if (Main.toolTip.magic)
					{
						array[num4] = string.Concat((int)(Main.player[Main.myPlayer].magicDamage * (float)damage + num5));
						string[] array7;
						IntPtr intPtr3;
						(array7 = array)[(int)(intPtr3 = (IntPtr)num4)] = array7[(int)intPtr3] + Lang.tip[4];
					}
					else if (Main.toolTip.thrown)
					{
						array[num4] = string.Concat((int)(Main.player[Main.myPlayer].thrownDamage * (float)damage + num5));
						string[] array8;
						IntPtr intPtr4;
						(array8 = array)[(int)(intPtr4 = (IntPtr)num4)] = array8[(int)intPtr4] + Lang.tip[58];
					}
					else if (Main.toolTip.summon)
					{
						if (Main.toolTip.type == 3829 || Main.toolTip.type == 3830 || Main.toolTip.type == 3831)
						{
							array[num4] = string.Concat((int)((Main.player[Main.myPlayer].minionDamage * (float)damage + num5) * 3f));
						}
						else
						{
							array[num4] = string.Concat((int)(Main.player[Main.myPlayer].minionDamage * (float)damage + num5));
						}
						string[] array4;
						IntPtr intPtr;
						(array4 = array)[(int)(intPtr = (IntPtr)num4)] = array4[(int)intPtr] + Lang.tip[53];
					}
					else
					{
						array[num4] = string.Concat(damage);
						string[] array4;
						IntPtr intPtr;
						(array4 = array)[(int)(intPtr = (IntPtr)num4)] = array4[(int)intPtr] + Lang.tip[55];
					}
					num4++;
					if (Main.toolTip.melee)
					{
						int num7 = Main.player[Main.myPlayer].meleeCrit - Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].crit + Main.toolTip.crit;
						array[num4] = num7 + Lang.tip[5];
						num4++;
					}
					else if (Main.toolTip.ranged)
					{
						int num8 = Main.player[Main.myPlayer].rangedCrit - Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].crit + Main.toolTip.crit;
						array[num4] = num8 + Lang.tip[5];
						num4++;
					}
					else if (Main.toolTip.magic)
					{
						int num9 = Main.player[Main.myPlayer].magicCrit - Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].crit + Main.toolTip.crit;
						array[num4] = num9 + Lang.tip[5];
						num4++;
					}
					else if (Main.toolTip.thrown)
					{
						int num10 = Main.player[Main.myPlayer].thrownCrit - Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].crit + Main.toolTip.crit;
						array[num4] = num10 + Lang.tip[5];
						num4++;
					}
					if (Main.toolTip.useStyle > 0 && !Main.toolTip.summon)
					{
						if (Main.toolTip.useAnimation <= 8)
						{
							array[num4] = Lang.tip[6];
						}
						else if (Main.toolTip.useAnimation <= 20)
						{
							array[num4] = Lang.tip[7];
						}
						else if (Main.toolTip.useAnimation <= 25)
						{
							array[num4] = Lang.tip[8];
						}
						else if (Main.toolTip.useAnimation <= 30)
						{
							array[num4] = Lang.tip[9];
						}
						else if (Main.toolTip.useAnimation <= 35)
						{
							array[num4] = Lang.tip[10];
						}
						else if (Main.toolTip.useAnimation <= 45)
						{
							array[num4] = Lang.tip[11];
						}
						else if (Main.toolTip.useAnimation <= 55)
						{
							array[num4] = Lang.tip[12];
						}
						else
						{
							array[num4] = Lang.tip[13];
						}
						num4++;
					}
					float num11 = Main.toolTip.knockBack;
					if (Main.toolTip.summon)
					{
						num11 += Main.player[Main.myPlayer].minionKB;
					}
					if ((Main.player[Main.myPlayer].magicQuiver && Main.toolTip.useAmmo == AmmoID.Arrow) || Main.toolTip.useAmmo == AmmoID.Stake)
					{
						num11 = (float)((int)(num11 * 1.1f));
					}
					if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type == 3106 && Main.toolTip.type == 3106)
					{
						num11 += num11 * (1f - Main.player[Main.myPlayer].stealth);
					}
					if (num11 == 0f)
					{
						array[num4] = Lang.tip[14];
					}
					else if ((double)num11 <= 1.5)
					{
						array[num4] = Lang.tip[15];
					}
					else if (num11 <= 3f)
					{
						array[num4] = Lang.tip[16];
					}
					else if (num11 <= 4f)
					{
						array[num4] = Lang.tip[17];
					}
					else if (num11 <= 6f)
					{
						array[num4] = Lang.tip[18];
					}
					else if (num11 <= 7f)
					{
						array[num4] = Lang.tip[19];
					}
					else if (num11 <= 9f)
					{
						array[num4] = Lang.tip[20];
					}
					else if (num11 <= 11f)
					{
						array[num4] = Lang.tip[21];
					}
					else
					{
						array[num4] = Lang.tip[22];
					}
					num4++;
				}
				if (Main.toolTip.fishingPole > 0)
				{
					array[num4] = Language.GetTextValue("GameUI.PrecentFishingPower", Main.toolTip.fishingPole);
					num4++;
					array[num4] = Language.GetTextValue("GameUI.BaitRequired");
					num4++;
				}
				if (Main.toolTip.bait > 0)
				{
					array[num4] = Language.GetTextValue("GameUI.BaitPower", Main.toolTip.bait);
					num4++;
				}
				if (Main.toolTip.headSlot > 0 || Main.toolTip.bodySlot > 0 || Main.toolTip.legSlot > 0 || Main.toolTip.accessory || Main.projHook[Main.toolTip.shoot] || Main.toolTip.mountType != -1 || (Main.toolTip.buffType > 0 && (Main.lightPet[Main.toolTip.buffType] || Main.vanityPet[Main.toolTip.buffType])))
				{
					array[num4] = Lang.tip[23];
					num4++;
				}
				if (Main.toolTip.tileWand > 0)
				{
					array[num4] = Lang.tip[52] + Lang.itemName(Main.toolTip.tileWand, false);
					num4++;
				}
				if (Main.toolTip.questItem)
				{
					array[num4] = Lang.inter[65];
					num4++;
				}
				if (Main.toolTip.vanity)
				{
					array[num4] = Lang.tip[24];
					num4++;
				}
				if (Main.toolTip.defense > 0)
				{
					array[num4] = Main.toolTip.defense + Lang.tip[25];
					num4++;
				}
				if (Main.toolTip.pick > 0)
				{
					array[num4] = Main.toolTip.pick + Lang.tip[26];
					num4++;
				}
				if (Main.toolTip.axe > 0)
				{
					array[num4] = Main.toolTip.axe * 5 + Lang.tip[27];
					num4++;
				}
				if (Main.toolTip.hammer > 0)
				{
					array[num4] = Main.toolTip.hammer + Lang.tip[28];
					num4++;
				}
				if (Main.toolTip.tileBoost != 0)
				{
					int tileBoost = Main.toolTip.tileBoost;
					if (tileBoost > 0)
					{
						array[num4] = "+" + tileBoost + Lang.tip[54];
					}
					else
					{
						array[num4] = tileBoost + Lang.tip[54];
					}
					num4++;
				}
				if (Main.toolTip.healLife > 0)
				{
					array[num4] = string.Concat(new object[]
					{
						Lang.tip[29],
						" ",
						Main.toolTip.healLife,
						" ",
						Lang.tip[30]
					});
					num4++;
				}
				if (Main.toolTip.healMana > 0)
				{
					array[num4] = string.Concat(new object[]
					{
						Lang.tip[29],
						" ",
						Main.toolTip.healMana,
						" ",
						Lang.tip[31]
					});
					num4++;
				}
				if (Main.toolTip.mana > 0 && (Main.toolTip.type != 127 || !Main.player[Main.myPlayer].spaceGun))
				{
					array[num4] = string.Concat(new object[]
					{
						Lang.tip[32],
						" ",
						(int)((float)Main.toolTip.mana * Main.player[Main.myPlayer].manaCost),
						" ",
						Lang.tip[31]
					});
					num4++;
				}
				if (Main.toolTip.createWall > 0 || Main.toolTip.createTile > -1)
				{
					if (Main.toolTip.type != 213 && Main.toolTip.tileWand < 1)
					{
						array[num4] = Lang.tip[33];
						num4++;
					}
				}
				else if (Main.toolTip.ammo > 0 && !Main.toolTip.notAmmo)
				{
					array[num4] = Lang.tip[34];
					num4++;
				}
				else if (Main.toolTip.consumable)
				{
					array[num4] = Lang.tip[35];
					num4++;
				}
				if (Main.toolTip.material)
				{
					array[num4] = Lang.tip[36];
					num4++;
				}
				if (Main.toolTip.toolTip != null)
				{
					if (Main.toolTip.type >= 1533 && Main.toolTip.type <= 1537 && !NPC.downedPlantBoss)
					{
						array[num4] = Lang.tip[59];
					}
					else
					{
						array[num4] = this.TooltipMousetextProcessor(Main.toolTip.toolTip);
					}
					num4++;
				}
				if (Main.toolTip.toolTip2 != null)
				{
					array[num4] = this.TooltipMousetextProcessor(Main.toolTip.toolTip2);
					num4++;
				}
				if ((Main.toolTip.type == 3818 || Main.toolTip.type == 3819 || Main.toolTip.type == 3820 || Main.toolTip.type == 3824 || Main.toolTip.type == 3825 || Main.toolTip.type == 3826 || Main.toolTip.type == 3829 || Main.toolTip.type == 3830 || Main.toolTip.type == 3831 || Main.toolTip.type == 3832 || Main.toolTip.type == 3833 || Main.toolTip.type == 3834) && !Main.player[Main.myPlayer].downedDD2EventAnyDifficulty)
				{
					array[num4] = Lang.misc[104];
					num4++;
				}
				if (Main.toolTip.buffType == 26 && Main.expertMode)
				{
					array[num4] = Lang.misc[40];
					num4++;
				}
				if (Main.toolTip.buffTime > 0)
				{
					string text;
					if (Main.toolTip.buffTime / 60 >= 60)
					{
						text = Math.Round((double)(Main.toolTip.buffTime / 60) / 60.0) + Lang.tip[37];
					}
					else
					{
						text = Math.Round((double)Main.toolTip.buffTime / 60.0) + Lang.tip[38];
					}
					array[num4] = text;
					num4++;
				}
				if (Main.toolTip.type == 3262 || Main.toolTip.type == 3282 || Main.toolTip.type == 3283 || Main.toolTip.type == 3284 || Main.toolTip.type == 3285 || Main.toolTip.type == 3286 || Main.toolTip.type == 3316 || Main.toolTip.type == 3315 || Main.toolTip.type == 3317 || Main.toolTip.type == 3291 || Main.toolTip.type == 3389)
				{
					array[num4] = " ";
					num = num4;
					num4++;
				}
				if (Main.toolTip.prefix > 0)
				{
					if (Main.cpItem == null || Main.cpItem.netID != Main.toolTip.netID)
					{
						Main.cpItem = new Item();
						Main.cpItem.netDefaults(Main.toolTip.netID);
					}
					if (Main.cpItem.damage != Main.toolTip.damage)
					{
						double num12 = (double)((float)Main.toolTip.damage - (float)Main.cpItem.damage);
						num12 = num12 / (double)((float)Main.cpItem.damage) * 100.0;
						num12 = Math.Round(num12);
						if (num12 > 0.0)
						{
							array[num4] = "+" + num12 + Lang.tip[39];
						}
						else
						{
							array[num4] = num12 + Lang.tip[39];
						}
						if (num12 < 0.0)
						{
							array3[num4] = true;
						}
						array2[num4] = true;
						num4++;
					}
					if (Main.cpItem.useAnimation != Main.toolTip.useAnimation)
					{
						double num13 = (double)((float)Main.toolTip.useAnimation - (float)Main.cpItem.useAnimation);
						num13 = num13 / (double)((float)Main.cpItem.useAnimation) * 100.0;
						num13 = Math.Round(num13);
						num13 *= -1.0;
						if (num13 > 0.0)
						{
							array[num4] = "+" + num13 + Lang.tip[40];
						}
						else
						{
							array[num4] = num13 + Lang.tip[40];
						}
						if (num13 < 0.0)
						{
							array3[num4] = true;
						}
						array2[num4] = true;
						num4++;
					}
					if (Main.cpItem.crit != Main.toolTip.crit)
					{
						double num14 = (double)((float)Main.toolTip.crit - (float)Main.cpItem.crit);
						if (num14 > 0.0)
						{
							array[num4] = "+" + num14 + Lang.tip[41];
						}
						else
						{
							array[num4] = num14 + Lang.tip[41];
						}
						if (num14 < 0.0)
						{
							array3[num4] = true;
						}
						array2[num4] = true;
						num4++;
					}
					if (Main.cpItem.mana != Main.toolTip.mana)
					{
						double num15 = (double)((float)Main.toolTip.mana - (float)Main.cpItem.mana);
						num15 = num15 / (double)((float)Main.cpItem.mana) * 100.0;
						num15 = Math.Round(num15);
						if (num15 > 0.0)
						{
							array[num4] = "+" + num15 + Lang.tip[42];
						}
						else
						{
							array[num4] = num15 + Lang.tip[42];
						}
						if (num15 > 0.0)
						{
							array3[num4] = true;
						}
						array2[num4] = true;
						num4++;
					}
					if (Main.cpItem.scale != Main.toolTip.scale)
					{
						double num16 = (double)(Main.toolTip.scale - Main.cpItem.scale);
						num16 = num16 / (double)Main.cpItem.scale * 100.0;
						num16 = Math.Round(num16);
						if (num16 > 0.0)
						{
							array[num4] = "+" + num16 + Lang.tip[43];
						}
						else
						{
							array[num4] = num16 + Lang.tip[43];
						}
						if (num16 < 0.0)
						{
							array3[num4] = true;
						}
						array2[num4] = true;
						num4++;
					}
					if (Main.cpItem.shootSpeed != Main.toolTip.shootSpeed)
					{
						double num17 = (double)(Main.toolTip.shootSpeed - Main.cpItem.shootSpeed);
						num17 = num17 / (double)Main.cpItem.shootSpeed * 100.0;
						num17 = Math.Round(num17);
						if (num17 > 0.0)
						{
							array[num4] = "+" + num17 + Lang.tip[44];
						}
						else
						{
							array[num4] = num17 + Lang.tip[44];
						}
						if (num17 < 0.0)
						{
							array3[num4] = true;
						}
						array2[num4] = true;
						num4++;
					}
					if (Main.cpItem.knockBack != knockBack)
					{
						double num18 = (double)(knockBack - Main.cpItem.knockBack);
						num18 = num18 / (double)Main.cpItem.knockBack * 100.0;
						num18 = Math.Round(num18);
						if (num18 > 0.0)
						{
							array[num4] = "+" + num18 + Lang.tip[45];
						}
						else
						{
							array[num4] = num18 + Lang.tip[45];
						}
						if (num18 < 0.0)
						{
							array3[num4] = true;
						}
						array2[num4] = true;
						num4++;
					}
					if (Main.toolTip.prefix == 62)
					{
						array[num4] = "+1" + Lang.tip[25];
						array2[num4] = true;
						num4++;
					}
					if (Main.toolTip.prefix == 63)
					{
						array[num4] = "+2" + Lang.tip[25];
						array2[num4] = true;
						num4++;
					}
					if (Main.toolTip.prefix == 64)
					{
						array[num4] = "+3" + Lang.tip[25];
						array2[num4] = true;
						num4++;
					}
					if (Main.toolTip.prefix == 65)
					{
						array[num4] = "+4" + Lang.tip[25];
						array2[num4] = true;
						num4++;
					}
					if (Main.toolTip.prefix == 66)
					{
						array[num4] = "+20 " + Lang.tip[31];
						array2[num4] = true;
						num4++;
					}
					if (Main.toolTip.prefix == 67)
					{
						array[num4] = "+2" + Lang.tip[5];
						array2[num4] = true;
						num4++;
					}
					if (Main.toolTip.prefix == 68)
					{
						array[num4] = "+4" + Lang.tip[5];
						array2[num4] = true;
						num4++;
					}
					if (Main.toolTip.prefix == 69)
					{
						array[num4] = "+1" + Lang.tip[39];
						array2[num4] = true;
						num4++;
					}
					if (Main.toolTip.prefix == 70)
					{
						array[num4] = "+2" + Lang.tip[39];
						array2[num4] = true;
						num4++;
					}
					if (Main.toolTip.prefix == 71)
					{
						array[num4] = "+3" + Lang.tip[39];
						array2[num4] = true;
						num4++;
					}
					if (Main.toolTip.prefix == 72)
					{
						array[num4] = "+4" + Lang.tip[39];
						array2[num4] = true;
						num4++;
					}
					if (Main.toolTip.prefix == 73)
					{
						array[num4] = "+1" + Lang.tip[46];
						array2[num4] = true;
						num4++;
					}
					if (Main.toolTip.prefix == 74)
					{
						array[num4] = "+2" + Lang.tip[46];
						array2[num4] = true;
						num4++;
					}
					if (Main.toolTip.prefix == 75)
					{
						array[num4] = "+3" + Lang.tip[46];
						array2[num4] = true;
						num4++;
					}
					if (Main.toolTip.prefix == 76)
					{
						array[num4] = "+4" + Lang.tip[46];
						array2[num4] = true;
						num4++;
					}
					if (Main.toolTip.prefix == 77)
					{
						array[num4] = "+1" + Lang.tip[47];
						array2[num4] = true;
						num4++;
					}
					if (Main.toolTip.prefix == 78)
					{
						array[num4] = "+2" + Lang.tip[47];
						array2[num4] = true;
						num4++;
					}
					if (Main.toolTip.prefix == 79)
					{
						array[num4] = "+3" + Lang.tip[47];
						array2[num4] = true;
						num4++;
					}
					if (Main.toolTip.prefix == 80)
					{
						array[num4] = "+4" + Lang.tip[47];
						array2[num4] = true;
						num4++;
					}
				}
				if (Main.toolTip.wornArmor && Main.player[Main.myPlayer].setBonus != "")
				{
					array[num4] = Lang.tip[48] + " " + Main.player[Main.myPlayer].setBonus;
					num4++;
				}
			}
			if (Main.toolTip.expert)
			{
				array[num4] = Language.GetTextValue("GameUI.Expert");
				num4++;
			}
			float num19 = (float)Main.mouseTextColor / 255f;
			float num20 = num19;
			int a = (int)Main.mouseTextColor;
			if (Main.npcShop > 0)
			{
				int storeValue = Main.toolTip.GetStoreValue();
				if (Main.toolTip.shopSpecialCurrency != -1)
				{
					CustomCurrencyManager.GetPriceText(Main.toolTip.shopSpecialCurrency, array, ref num4, storeValue);
					color = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num20)), (int)((byte)(255f * num20)), (int)((byte)(255f * num20)), a);
				}
				else if (Main.toolTip.GetStoreValue() > 0)
				{
					string text2 = "";
					int num21 = 0;
					int num22 = 0;
					int num23 = 0;
					int num24 = 0;
					int num25 = storeValue * Main.toolTip.stack;
					if (!Main.toolTip.buy)
					{
						num25 = storeValue / 5;
						if (num25 < 1)
						{
							num25 = 1;
						}
						num25 *= Main.toolTip.stack;
					}
					if (num25 < 1)
					{
						num25 = 1;
					}
					if (num25 >= 1000000)
					{
						num21 = num25 / 1000000;
						num25 -= num21 * 1000000;
					}
					if (num25 >= 10000)
					{
						num22 = num25 / 10000;
						num25 -= num22 * 10000;
					}
					if (num25 >= 100)
					{
						num23 = num25 / 100;
						num25 -= num23 * 100;
					}
					if (num25 >= 1)
					{
						num24 = num25;
					}
					if (num21 > 0)
					{
						object obj = text2;
						text2 = string.Concat(new object[]
						{
							obj,
							num21,
							" ",
							Lang.inter[15],
							" "
						});
					}
					if (num22 > 0)
					{
						object obj = text2;
						text2 = string.Concat(new object[]
						{
							obj,
							num22,
							" ",
							Lang.inter[16],
							" "
						});
					}
					if (num23 > 0)
					{
						object obj = text2;
						text2 = string.Concat(new object[]
						{
							obj,
							num23,
							" ",
							Lang.inter[17],
							" "
						});
					}
					if (num24 > 0)
					{
						object obj = text2;
						text2 = string.Concat(new object[]
						{
							obj,
							num24,
							" ",
							Lang.inter[18],
							" "
						});
					}
					if (!Main.toolTip.buy)
					{
						array[num4] = Lang.tip[49] + " " + text2;
					}
					else
					{
						array[num4] = Lang.tip[50] + " " + text2;
					}
					num4++;
					if (num21 > 0)
					{
						color = new Microsoft.Xna.Framework.Color((int)((byte)(220f * num20)), (int)((byte)(220f * num20)), (int)((byte)(198f * num20)), a);
					}
					else if (num22 > 0)
					{
						color = new Microsoft.Xna.Framework.Color((int)((byte)(224f * num20)), (int)((byte)(201f * num20)), (int)((byte)(92f * num20)), a);
					}
					else if (num23 > 0)
					{
						color = new Microsoft.Xna.Framework.Color((int)((byte)(181f * num20)), (int)((byte)(192f * num20)), (int)((byte)(193f * num20)), a);
					}
					else if (num24 > 0)
					{
						color = new Microsoft.Xna.Framework.Color((int)((byte)(246f * num20)), (int)((byte)(138f * num20)), (int)((byte)(96f * num20)), a);
					}
				}
				else if (Main.toolTip.type != 3817)
				{
					array[num4] = Lang.tip[51];
					num4++;
					color = new Microsoft.Xna.Framework.Color((int)((byte)(120f * num20)), (int)((byte)(120f * num20)), (int)((byte)(120f * num20)), a);
				}
			}
			Vector2 zero = Vector2.Zero;
			int num26 = 0;
			for (int j = 0; j < num4; j++)
			{
				Vector2 vector = Main.fontMouseText.MeasureString(array[j]);
				if (vector.X > zero.X)
				{
					zero.X = vector.X;
				}
				zero.Y += vector.Y + (float)num26;
			}
			X += Main.toolTipDistance;
			Y += Main.toolTipDistance;
			if ((float)X + zero.X + 4f > (float)Main.screenWidth)
			{
				X = (int)((float)Main.screenWidth - zero.X - 4f);
			}
			if ((float)Y + zero.Y + 4f > (float)Main.screenHeight)
			{
				Y = (int)((float)Main.screenHeight - zero.Y - 4f);
			}
			int num27 = 0;
			num19 = (float)Main.mouseTextColor / 255f;
			for (int k = 0; k < num4; k++)
			{
				if (k == num)
				{
					float num28 = 1f;
					int num29 = (int)((float)Main.mouseTextColor * num28);
					Microsoft.Xna.Framework.Color black = Microsoft.Xna.Framework.Color.Black;
					for (int l = 0; l < 5; l++)
					{
						int num30 = X;
						int num31 = Y + num27;
						if (l == 4)
						{
							black = new Microsoft.Xna.Framework.Color(num29, num29, num29, num29);
						}
						if (l == 0)
						{
							num30--;
						}
						else if (l == 1)
						{
							num30++;
						}
						else if (l == 2)
						{
							num31--;
						}
						else if (l == 3)
						{
							num31++;
						}
						Main.spriteBatch.Draw(Main.oneDropLogo, new Vector2((float)num30, (float)num31), null, black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
				}
				else
				{
					Microsoft.Xna.Framework.Color baseColor = Microsoft.Xna.Framework.Color.Black;
					baseColor = new Microsoft.Xna.Framework.Color(num20, num20, num20, num20);
					if (k == 0)
					{
						if (rare == -11)
						{
							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num20)), (int)((byte)(175f * num20)), (int)((byte)(0f * num20)), a);
						}
						if (rare == -1)
						{
							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)(130f * num20)), (int)((byte)(130f * num20)), (int)((byte)(130f * num20)), a);
						}
						if (rare == 1)
						{
							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)(150f * num20)), (int)((byte)(150f * num20)), (int)((byte)(255f * num20)), a);
						}
						if (rare == 2)
						{
							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)(150f * num20)), (int)((byte)(255f * num20)), (int)((byte)(150f * num20)), a);
						}
						if (rare == 3)
						{
							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num20)), (int)((byte)(200f * num20)), (int)((byte)(150f * num20)), a);
						}
						if (rare == 4)
						{
							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num20)), (int)((byte)(150f * num20)), (int)((byte)(150f * num20)), a);
						}
						if (rare == 5)
						{
							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num20)), (int)((byte)(150f * num20)), (int)((byte)(255f * num20)), a);
						}
						if (rare == 6)
						{
							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)(210f * num20)), (int)((byte)(160f * num20)), (int)((byte)(255f * num20)), a);
						}
						if (rare == 7)
						{
							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)(150f * num20)), (int)((byte)(255f * num20)), (int)((byte)(10f * num20)), a);
						}
						if (rare == 8)
						{
							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num20)), (int)((byte)(255f * num20)), (int)((byte)(10f * num20)), a);
						}
						if (rare == 9)
						{
							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)(5f * num20)), (int)((byte)(200f * num20)), (int)((byte)(255f * num20)), a);
						}
						if (rare == 10)
						{
							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num20)), (int)((byte)(40f * num20)), (int)((byte)(100f * num20)), a);
						}
						if (rare >= 11)
						{
							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)(180f * num20)), (int)((byte)(40f * num20)), (int)((byte)(255f * num20)), a);
						}
						if (diff == 1)
						{
							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)((float)Main.mcColor.R * num20)), (int)((byte)((float)Main.mcColor.G * num20)), (int)((byte)((float)Main.mcColor.B * num20)), a);
						}
						if (diff == 2)
						{
							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)((float)Main.hcColor.R * num20)), (int)((byte)((float)Main.hcColor.G * num20)), (int)((byte)((float)Main.hcColor.B * num20)), a);
						}
						if (Main.toolTip.expert || rare == -12)
						{
							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)((float)Main.DiscoR * num20)), (int)((byte)((float)Main.DiscoG * num20)), (int)((byte)((float)Main.DiscoB * num20)), a);
						}
					}
					else if (array2[k])
					{
						if (array3[k])
						{
							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)(190f * num20)), (int)((byte)(120f * num20)), (int)((byte)(120f * num20)), a);
						}
						else
						{
							baseColor = new Microsoft.Xna.Framework.Color((int)((byte)(120f * num20)), (int)((byte)(190f * num20)), (int)((byte)(120f * num20)), a);
						}
					}
					else if (k == num4 - 1)
					{
						baseColor = color;
					}
					ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, Main.fontMouseText, array[k], new Vector2((float)X, (float)(Y + num27)), baseColor, 0f, Vector2.Zero, Vector2.One, -1f, 2f);
				}
				num27 += (int)(Main.fontMouseText.MeasureString(array[k]).Y + (float)num26);
			}
		}

		private void MouseText_DrawBuffString(ref int X, ref int Y)
		{
			Microsoft.Xna.Framework.Point p = new Microsoft.Xna.Framework.Point(X, Y);
			List<Vector2> list = new List<Vector2>();
			Vector2 vector = Main.fontMouseText.MeasureString(Main.buffString);
			list.Add(vector);
			if (Main.bannerMouseOver)
			{
				int num = 0;
				for (int i = 0; i < 267; i++)
				{
					if (Item.BannerToNPC(i) != 0 && Main.player[Main.myPlayer].NPCBannerBuff[i])
					{
						num++;
						Vector2 value = Main.fontMouseText.MeasureString(Main.buffString);
						int num2 = X;
						int num3 = Y + (int)value.Y + num * 20 + 10;
						int num4 = (Main.screenHeight - 250) / 20;
						int num5 = 0;
						if (num > num4)
						{
							num5++;
							num2 += 260;
							num3 -= num4 * 20;
						}
						if (num > num4 * 2)
						{
							num5++;
							num2 += 260;
							num3 -= num4 * 20;
						}
						if (num > num4 * 3)
						{
							num5++;
							num2 += 260;
							num3 -= num4 * 20;
						}
						list.Add(new Vector2((float)(num2 - 260 * num5), (float)num3) + value - p.ToVector2());
					}
				}
			}
			Vector2 zero = Vector2.Zero;
			foreach (Vector2 current in list)
			{
				if (zero.X < current.X)
				{
					zero.X = current.X;
				}
				if (zero.Y < current.Y)
				{
					zero.Y = current.Y;
				}
			}
			if ((float)X + zero.X + 24f > (float)Main.screenWidth)
			{
				X = (int)((float)Main.screenWidth - zero.X - 24f);
			}
			if ((float)Y + zero.Y + 4f > (float)Main.screenHeight)
			{
				Y = (int)((float)Main.screenHeight - zero.Y - 4f);
			}
			for (int j = 0; j < 5; j++)
			{
				int num6 = X;
				int num7 = Y + (int)Main.fontMouseText.MeasureString(Main.buffString).Y;
				Microsoft.Xna.Framework.Color black = Microsoft.Xna.Framework.Color.Black;
				if (j == 0)
				{
					num6 -= 2;
				}
				else if (j == 1)
				{
					num6 += 2;
				}
				else if (j == 2)
				{
					num7 -= 2;
				}
				else if (j == 3)
				{
					num7 += 2;
				}
				else
				{
					black = new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
				}
				Main.spriteBatch.DrawString(Main.fontMouseText, Main.buffString, new Vector2((float)num6, (float)num7), black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
			if (Main.bannerMouseOver)
			{
				int num8 = 0;
				for (int k = 0; k < 267; k++)
				{
					if (Item.BannerToNPC(k) != 0 && Main.player[Main.myPlayer].NPCBannerBuff[k])
					{
						num8++;
						for (int l = 0; l < 5; l++)
						{
							int num9 = X;
							int num10 = Y + (int)Main.fontMouseText.MeasureString(Main.buffString).Y + num8 * 20 + 10;
							int num11 = (Main.screenHeight - 250) / 20;
							if (num8 > num11)
							{
								num9 += 260;
								num10 -= num11 * 20;
							}
							if (num8 > num11 * 2)
							{
								num9 += 260;
								num10 -= num11 * 20;
							}
							if (num8 > num11 * 3)
							{
								num9 += 260;
								num10 -= num11 * 20;
							}
							Microsoft.Xna.Framework.Color black2 = Microsoft.Xna.Framework.Color.Black;
							if (l == 0)
							{
								num9 -= 2;
							}
							else if (l == 1)
							{
								num9 += 2;
							}
							else if (l == 2)
							{
								num10 -= 2;
							}
							else if (l == 3)
							{
								num10 += 2;
							}
							else
							{
								float num12 = (float)Main.mouseTextColor / 255f;
								black2 = new Microsoft.Xna.Framework.Color((int)((byte)(80f * num12)), (int)((byte)(255f * num12)), (int)((byte)(120f * num12)), (int)Main.mouseTextColor);
							}
							Main.spriteBatch.DrawString(Main.fontMouseText, Lang.npcName(Item.BannerToNPC(k), false), new Vector2((float)num9, (float)num10), black2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						}
					}
				}
			}
		}

		protected void DrawFPS()
		{
			Main.DrawGamepadInstructions();
			if (Main.showFrameRate)
			{
				string text = string.Concat(Main.frameRate);
				object obj = text;
				text = string.Concat(new object[]
				{
					obj,
					" (",
					Liquid.numLiquid + LiquidBuffer.numLiquidBuffer,
					")"
				});
				object obj2 = text;
				text = string.Concat(new object[]
				{
					obj2,
					" (",
					(int)(Main.gfxQuality * 100f),
					"%)"
				});
				string text2 = text + " " + Main.debugWords;
				int num = 4;
				if (!Main.gameMenu)
				{
					num = Main.screenHeight - 24;
				}
				Vector2 position = new Vector2(4f, (float)num);
				Vector2 origin = new Vector2(0f, 0f);
				Vector2 vector = Main.fontMouseText.MeasureString(text2);
				if (PlayerInput.UsingGamepad && !Main.gameMenu)
				{
					position.X = (float)(Main.screenWidth - 4) - vector.X;
				}
				Main.spriteBatch.DrawString(Main.fontMouseText, text2, position, new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, origin, 1f, SpriteEffects.None, 0f);
			}
		}

		public static void DrawGamepadInstructions()
		{
			if (Main.drawingPlayerChat || Main.GamepadDisableInstructionsDisplay)
			{
				return;
			}
			string text = PlayerInput.ComposeInstructionsForGamepad();
			if (text.Length > 0 && (!Main.player[Main.myPlayer].dead || Main.gameMenu))
			{
				float num = 35f;
				float num2 = 1f;
				Vector2 baseScale = new Vector2(num2);
				if (Main.gameMenu)
				{
					num = 55f;
				}
				Vector2 stringSize = ChatManager.GetStringSize(Main.fontMouseText, text, new Vector2(1f), -1f);
				float num3 = num2;
				Utils.Swap<float>(ref GlyphTagHandler.GlyphsScale, ref num3);
				ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, Main.fontMouseText, text, new Vector2(12f, (float)Main.screenHeight - num) - stringSize * new Vector2(0f, 0f), Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, baseScale, -1f, num2 * 2f);
				Utils.Swap<float>(ref GlyphTagHandler.GlyphsScale, ref num3);
			}
		}

		public static Microsoft.Xna.Framework.Color shine(Microsoft.Xna.Framework.Color newColor, int type)
		{
			int num = (int)newColor.R;
			int num2 = (int)newColor.G;
			int num3 = (int)newColor.B;
			float num4 = 0.6f;
			if (type == 25)
			{
				num = (int)((float)newColor.R * 0.95f);
				num2 = (int)((float)newColor.G * 0.85f);
				num3 = (int)((double)((float)newColor.B) * 1.1);
			}
			else if (type == 117)
			{
				num = (int)((float)newColor.R * 1.1f);
				num2 = (int)((float)newColor.G * 1f);
				num3 = (int)((double)((float)newColor.B) * 1.2);
			}
			else
			{
				if (type == 204)
				{
					num4 = 0.3f + (float)Main.mouseTextColor / 300f;
					num = (int)((float)newColor.R * (1.3f * num4));
					if (num > 255)
					{
						num = 255;
					}
					return new Microsoft.Xna.Framework.Color(num, num2, num3, 255);
				}
				if (type == 211)
				{
					num4 = 0.3f + (float)Main.mouseTextColor / 300f;
					num2 = (int)((float)newColor.G * (1.5f * num4));
					num3 = (int)((float)newColor.B * (1.1f * num4));
				}
				else if (type == 147 || type == 161)
				{
					num = (int)((float)newColor.R * 1.1f);
					num2 = (int)((float)newColor.G * 1.12f);
					num3 = (int)((double)((float)newColor.B) * 1.15);
				}
				else if (type == 163)
				{
					num = (int)((float)newColor.R * 1.05f);
					num2 = (int)((float)newColor.G * 1.1f);
					num3 = (int)((double)((float)newColor.B) * 1.15);
				}
				else if (type == 164)
				{
					num = (int)((float)newColor.R * 1.1f);
					num2 = (int)((float)newColor.G * 1.1f);
					num3 = (int)((double)((float)newColor.B) * 1.2);
				}
				else if (type == 178)
				{
					num4 = 0.5f;
					num = (int)((float)newColor.R * (1f + num4));
					num2 = (int)((float)newColor.G * (1f + num4));
					num3 = (int)((float)newColor.B * (1f + num4));
				}
				else if (type == 185 || type == 186)
				{
					num4 = 0.3f;
					num = (int)((float)newColor.R * (1f + num4));
					num2 = (int)((float)newColor.G * (1f + num4));
					num3 = (int)((float)newColor.B * (1f + num4));
				}
				else if (type >= 262 && type <= 268)
				{
					num3 += 100;
					num += 100;
					num2 += 100;
				}
				else
				{
					num = (int)((float)newColor.R * (1f + num4));
					num2 = (int)((float)newColor.G * (1f + num4));
					num3 = (int)((float)newColor.B * (1f + num4));
				}
			}
			if (num > 255)
			{
				num = 255;
			}
			if (num2 > 255)
			{
				num2 = 255;
			}
			if (num3 > 255)
			{
				num3 = 255;
			}
			newColor.R = (byte)num;
			newColor.G = (byte)num2;
			newColor.B = (byte)num3;
			return new Microsoft.Xna.Framework.Color((int)((byte)num), (int)((byte)num2), (int)((byte)num3), (int)newColor.A);
		}

		public static bool canDrawColorTree(int i, int j, int treeColor)
		{
			return Main.tile[i, j] != null && Main.tile[i, j].color() > 0 && (int)Main.tile[i, j].color() < Main.numTileColors && Main.woodAltTexture[treeColor, (int)Main.tile[i, j].color()] != null && !Main.woodAltTexture[treeColor, (int)Main.tile[i, j].color()].IsContentLost;
		}

		public static bool canDrawColorTile(int i, int j)
		{
			return Main.tile[i, j] != null && Main.tile[i, j].color() > 0 && (int)Main.tile[i, j].color() < Main.numTileColors && Main.tileAltTextureDrawn[(int)Main.tile[i, j].type, (int)Main.tile[i, j].color()] && Main.tileAltTextureInit[(int)Main.tile[i, j].type, (int)Main.tile[i, j].color()];
		}

		public static bool canDrawColorTile(ushort type, int color)
		{
			return color > 0 && color < Main.numTileColors && Main.tileAltTextureDrawn[(int)type, color] && Main.tileAltTextureInit[(int)type, color];
		}

		public static bool canDrawColorWall(int i, int j)
		{
			return Main.tile[i, j] != null && Main.tile[i, j].wallColor() > 0 && Main.wallAltTextureDrawn[(int)Main.tile[i, j].wall, (int)Main.tile[i, j].wallColor()] && Main.wallAltTextureInit[(int)Main.tile[i, j].wall, (int)Main.tile[i, j].wallColor()];
		}

		protected void DrawTiles(bool solidOnly = true, int waterStyleOverride = -1)
		{
			if (!solidOnly)
			{
				Main.critterCage = false;
			}
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			int num = (int)(255f * (1f - Main.gfxQuality) + 30f * Main.gfxQuality);
			int num2 = (int)(50f * (1f - Main.gfxQuality) + 2f * Main.gfxQuality);
			Vector2 zero = new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
			if (Main.drawToScreen)
			{
				zero = Vector2.Zero;
			}
			int num3 = 0;
			int[] arg_7B_0 = Main.specX;
			int num4 = (int)((Main.screenPosition.X - zero.X) / 16f - 1f);
			int num5 = (int)((Main.screenPosition.X + (float)Main.screenWidth + zero.X) / 16f) + 2;
			int num6 = (int)((Main.screenPosition.Y - zero.Y) / 16f - 1f);
			int num7 = (int)((Main.screenPosition.Y + (float)Main.screenHeight + zero.Y) / 16f) + 5;
			if (num4 < 0)
			{
				num4 = 0;
			}
			if (num5 > Main.maxTilesX)
			{
				num5 = Main.maxTilesX;
			}
			if (num6 < 0)
			{
				num6 = 0;
			}
			if (num7 > Main.maxTilesY)
			{
				num7 = Main.maxTilesY;
			}
			if (Main.sectionManager.FrameSectionsLeft > 0)
			{
				TimeLogger.DetailedDrawReset();
				WorldGen.SectionTileFrameWithCheck(num4, num6, num5, num7);
				TimeLogger.DetailedDrawTime(5);
			}
			Dictionary<Microsoft.Xna.Framework.Point, int> dictionary = new Dictionary<Microsoft.Xna.Framework.Point, int>();
			Dictionary<Microsoft.Xna.Framework.Point, int> dictionary2 = new Dictionary<Microsoft.Xna.Framework.Point, int>();
			Dictionary<Microsoft.Xna.Framework.Point, int> dictionary3 = new Dictionary<Microsoft.Xna.Framework.Point, int>();
			int arg_180_0 = Main.player[Main.myPlayer].team;
			if (Main.player[Main.myPlayer].active)
			{
				int arg_19A_0 = Main.netMode;
			}
			int num8 = 16;
			Microsoft.Xna.Framework.Color[] array = new Microsoft.Xna.Framework.Color[9];
			for (int i = num6; i < num7 + 4; i++)
			{
				for (int j = num4 - 2; j < num5 + 2; j++)
				{
					if (j == 809)
					{
					}
					Tile tile = Main.tile[j, i];
					if (tile == null)
					{
						tile = new Tile();
						Main.tile[j, i] = tile;
						Main.mapTime += 60;
					}
					ushort type = tile.type;
					short num9 = tile.frameX;
					short num10 = tile.frameY;
					bool flag = Main.tileSolid[(int)type];
					if (type == 11)
					{
						flag = true;
					}
					if (tile.active() && flag == solidOnly)
					{
						if (!Main.tileSetsLoaded[(int)type])
						{
							this.LoadTiles((int)type);
						}
						SpriteEffects effects = SpriteEffects.None;
						if (type == 3 || type == 13 || type == 20 || type == 24 || type == 49 || type == 372 || type == 50 || type == 52 || type == 61 || type == 62 || type == 71 || type == 73 || type == 74 || type == 81 || type == 82 || type == 83 || type == 84 || type == 91 || type == 92 || type == 93 || type == 110 || type == 113 || type == 115 || type == 135 || type == 141 || type == 165 || type == 174 || type == 201 || type == 205 || type == 227 || type == 270 || type == 271 || type == 382)
						{
							if (j % 2 == 1)
							{
								effects = SpriteEffects.FlipHorizontally;
							}
						}
						else if (type == 184)
						{
							if (num10 < 108)
							{
								if (j % 2 == 1)
								{
									effects = SpriteEffects.FlipHorizontally;
								}
							}
							else if (i % 2 == 1)
							{
								effects = SpriteEffects.FlipVertically;
							}
						}
						else if (type == 185 && num10 == 0 && j % 2 == 1)
						{
							effects = SpriteEffects.FlipHorizontally;
						}
						Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
						int num11 = 0;
						int num12 = 16;
						if (type >= 330 && type <= 333)
						{
							num11 += 2;
						}
						if (type == 4 && WorldGen.SolidTile(j, i - 1))
						{
							num11 = 2;
							if (WorldGen.SolidTile(j - 1, i + 1) || WorldGen.SolidTile(j + 1, i + 1))
							{
								num11 = 4;
							}
						}
						if (type == 336)
						{
							num11 = 2;
						}
						if (type == 457)
						{
							num11 = 2;
						}
						if (type == 466)
						{
							num11 = 2;
						}
						if ((type >= 275 && type <= 282) || type == 414 || type == 413)
						{
							num11 = 2;
						}
						if (type == 285 || type == 286 || type == 298 || type == 299 || type == 309 || type == 358 || type == 359 || type == 360 || type == 361 || type == 362 || type == 363 || type == 364 || type == 391 || type == 392 || type == 393 || type == 394 || type == 310)
						{
							num11 = 2;
						}
						if (type == 100 || type == 283)
						{
							num11 = 2;
						}
						if (type == 78 || type == 85 || type == 210 || type == 133 || type == 134 || type == 233)
						{
							num11 = 2;
						}
						if (type == 33 || type == 49 || type == 174 || type == 372)
						{
							num11 = -4;
						}
						if (type == 3 || type == 4 || type == 5 || type == 24 || type == 33 || type == 49 || type == 372 || type == 61 || type == 71 || type == 110 || type == 174 || type == 201 || type == 323 || type == 324)
						{
							num12 = 20;
						}
						else if (type == 16 || type == 17 || type == 18 || type == 20 || type == 26 || type == 32 || type == 352 || type == 69 || type == 72 || type == 77 || type == 79 || type == 80)
						{
							num12 = 18;
						}
						else if (type == 14 || type == 15 || type == 21 || type == 411 || type == 441)
						{
							if (num10 == 18)
							{
								num12 = 18;
							}
						}
						else if (type == 172 || type == 376)
						{
							if (num10 % 38 == 18)
							{
								num12 = 18;
							}
						}
						else if (type == 27)
						{
							if (num10 % 74 == 54)
							{
								num12 = 18;
							}
						}
						else if (type == 137)
						{
							num12 = 18;
						}
						else if (type == 462)
						{
							num12 = 18;
						}
						else if (type == 135)
						{
							num11 = 2;
							num12 = 18;
						}
						else if (type == 378)
						{
							num11 = 2;
						}
						else if (type == 254)
						{
							num11 = 2;
						}
						else if (type == 132)
						{
							num11 = 2;
							num12 = 18;
						}
						else if (type == 405)
						{
							num12 = 16;
							if (num10 > 0)
							{
								num12 = 18;
							}
						}
						else if (type == 406)
						{
							num12 = 16;
							if (num10 % 54 >= 36)
							{
								num12 = 18;
							}
						}
						else
						{
							num12 = 16;
						}
						if (type == 52)
						{
							num11 -= 2;
						}
						if (type == 324)
						{
							num11 = -2;
						}
						if (type == 231 || type == 238)
						{
							num11 += 2;
						}
						if (type == 207)
						{
							num11 = 2;
						}
						if (type == 4 || type == 5 || type == 323 || type == 324)
						{
							num8 = 20;
						}
						else
						{
							num8 = 16;
						}
						if (type == 73 || type == 74 || type == 113)
						{
							num11 -= 12;
							num12 = 32;
						}
						if (type == 388 || type == 389)
						{
							TileObjectData tileData = TileObjectData.GetTileData((int)type, (int)(num9 / 18), 0);
							int height = tileData.Height;
							int num13 = height * 18 + 4;
							num11 = -2;
							if ((int)num10 == num13 - 20 || (int)num10 == num13 * 2 - 20 || num10 == 0 || (int)num10 == num13)
							{
								num12 = 18;
							}
						}
						if (type == 410 && num10 == 36)
						{
							num12 = 18;
						}
						if (type == 227)
						{
							num8 = 32;
							num12 = 38;
							if (num9 == 238)
							{
								num11 -= 6;
							}
							else
							{
								num11 -= 20;
							}
						}
						if (type == 185 || type == 186 || type == 187)
						{
							num11 = 2;
							if (type == 185)
							{
								if (num10 == 18 && num9 >= 576 && num9 <= 882)
								{
									Main.tileShine2[185] = true;
								}
								else
								{
									Main.tileShine2[185] = false;
								}
							}
							else if (type == 186)
							{
								if (num9 >= 864 && num9 <= 1170)
								{
									Main.tileShine2[186] = true;
								}
								else
								{
									Main.tileShine2[186] = false;
								}
							}
						}
						if (type == 178 && num10 <= 36)
						{
							num11 = 2;
						}
						if (type == 184)
						{
							num8 = 20;
							if (num10 <= 36)
							{
								num11 = 2;
							}
							else if (num10 <= 108)
							{
								num11 = -2;
							}
						}
						if (type == 28)
						{
							num11 += 2;
						}
						if (type == 81)
						{
							num11 -= 8;
							num12 = 26;
							num8 = 24;
						}
						if (type == 105)
						{
							num11 = 2;
						}
						if (type == 124)
						{
							num12 = 18;
						}
						if (type == 137)
						{
							num12 = 18;
						}
						if (type == 138)
						{
							num12 = 18;
						}
						if (type == 139 || type == 142 || type == 143)
						{
							num11 = 2;
						}
						int num14 = 0;
						if (tile.halfBrick())
						{
							num14 = 8;
						}
						int num15 = Main.tileFrame[(int)type] * 38;
						int num16 = 0;
						if (type == 272)
						{
							num15 = 0;
						}
						if (type == 106)
						{
							num15 = Main.tileFrame[(int)type] * 54;
						}
						if (type >= 300 && type <= 308)
						{
							num15 = Main.tileFrame[(int)type] * 54;
							num11 = 2;
						}
						if (type == 354)
						{
							num15 = Main.tileFrame[(int)type] * 54;
							num11 = 2;
						}
						if (type == 355)
						{
							num15 = Main.tileFrame[(int)type] * 54;
							num11 = 2;
						}
						if (type == 377)
						{
							num15 = Main.tileFrame[(int)type] * 38;
							num11 = 2;
						}
						if (type == 463)
						{
							num15 = Main.tileFrame[(int)type] * 72;
							num11 = 2;
						}
						if (type == 464)
						{
							num15 = Main.tileFrame[(int)type] * 72;
							num11 = 2;
						}
						if (type == 379)
						{
							num15 = Main.tileFrame[(int)type] * 90;
						}
						if (type == 349)
						{
							int num17 = (int)(num9 % 36);
							int num18 = (int)(num10 % 54);
							int num19;
							if (Animation.GetTemporaryFrame(j - num17 / 18, i - num18 / 18, out num19))
							{
								num9 = (short)(36 * num19 + num17);
							}
						}
						if (type == 441)
						{
							int num20 = (int)(num9 % 36);
							int num21 = (int)(num10 % 38);
							int num22;
							if (Animation.GetTemporaryFrame(j - num20 / 18, i - num21 / 18, out num22))
							{
								num10 = (short)(38 * num22 + num21);
							}
						}
						if (type == 390)
						{
							num15 = Main.tileFrame[(int)type] * 36;
						}
						if (type == 412)
						{
							num15 = 0;
							num11 = 2;
						}
						if (type == 455)
						{
							num15 = 0;
							num11 = 2;
						}
						if (type == 406)
						{
							int num23 = Main.tileFrame[(int)type];
							if (num10 >= 108)
							{
								num23 = (int)(6 - num10 / 54);
							}
							else if (num10 >= 54)
							{
								num23 = Main.tileFrame[(int)type] - 1;
							}
							num15 = num23 * 56;
							num15 += (int)(num10 / 54 * 2);
						}
						if (type == 452)
						{
							int num24 = Main.tileFrame[(int)type];
							if (num9 >= 54)
							{
								num24 = 0;
							}
							num15 = num24 * 54;
						}
						if (type == 455)
						{
							int num25 = 1 + Main.tileFrame[(int)type];
							if (!BirthdayParty.PartyIsUp)
							{
								num25 = 0;
							}
							num15 = num25 * 54;
						}
						if (type == 454)
						{
							int num26 = Main.tileFrame[(int)type];
							num15 = num26 * 54;
						}
						if (type == 453)
						{
							int num27 = Main.tileFrameCounter[(int)type];
							num27 /= 20;
							int num28 = i - (int)(tile.frameY / 18);
							num27 += num28 + j;
							num27 %= 3;
							num15 = num27 * 54;
						}
						if (type == 456)
						{
							int num29 = Main.tileFrameCounter[(int)type];
							num29 /= 20;
							int num30 = i - (int)(tile.frameY / 18);
							int num31 = j - (int)(tile.frameX / 18);
							num29 += num30 + num31;
							num29 %= 4;
							num15 = num29 * 54;
						}
						if (type == 405)
						{
							int num32 = Main.tileFrame[(int)type];
							if (num9 >= 54)
							{
								num32 = 0;
							}
							num15 = num32 * 38;
						}
						if (type == 12)
						{
							num15 = Main.tileFrame[(int)type] * 36;
						}
						if (type == 96)
						{
							num15 = Main.tileFrame[(int)type] * 36;
						}
						if (type == 238)
						{
							num15 = Main.tileFrame[(int)type] * 36;
						}
						if (type == 31)
						{
							num15 = Main.tileFrame[(int)type] * 36;
						}
						if (type == 215)
						{
							if (num10 < 36)
							{
								num15 = Main.tileFrame[(int)type] * 36;
							}
							else
							{
								num15 = 252;
							}
							num11 = 2;
						}
						if (type == 231)
						{
							num15 = Main.tileFrame[(int)type] * 54;
							num11 = 2;
						}
						if (type == 243)
						{
							num15 = Main.tileFrame[(int)type] * 54;
							num11 = 2;
						}
						if (type == 247)
						{
							num15 = Main.tileFrame[(int)type] * 54;
							num11 = 2;
						}
						if (type == 228)
						{
							num15 = Main.tileFrame[(int)type] * 54;
							num11 = 2;
						}
						if (type == 244)
						{
							num11 = 2;
							if (num9 < 54)
							{
								num15 = Main.tileFrame[(int)type] * 36;
							}
							else
							{
								num15 = 0;
							}
						}
						if (type == 235)
						{
							num15 = Main.tileFrame[(int)type] * 18;
						}
						if (type == 217 || type == 218)
						{
							num15 = Main.tileFrame[(int)type] * 36;
							num11 = 2;
						}
						if (type == 219 || type == 220)
						{
							num15 = Main.tileFrame[(int)type] * 54;
							num11 = 2;
						}
						if (type == 270 || type == 271)
						{
							int k = Main.tileFrame[(int)type] + j % 6;
							if (j % 2 == 0)
							{
								k += 3;
							}
							if (j % 3 == 0)
							{
								k += 3;
							}
							if (j % 4 == 0)
							{
								k += 3;
							}
							while (k > 5)
							{
								k -= 6;
							}
							num16 = k * 18;
							num15 = 0;
						}
						if (type == 428)
						{
							num11 += 4;
							if (PressurePlateHelper.PressurePlatesPressed.ContainsKey(new Microsoft.Xna.Framework.Point(j, i)))
							{
								num16 += 18;
							}
						}
						else if (type == 442)
						{
							num8 = 20;
							num12 = 20;
							switch (num9 / 22)
							{
							case 1:
								num11 = -4;
								break;
							case 2:
								num11 = -2;
								num8 = 24;
								break;
							case 3:
								num11 = -2;
								num8 = 16;
								break;
							}
						}
						if (TileID.Sets.TeamTiles[(int)type])
						{
							if (TileID.Sets.Platforms[(int)type])
							{
								num15 = num15;
							}
							else
							{
								num15 += 90;
							}
						}
						if (type == 373 || type == 374 || type == 375 || type == 461)
						{
							int num33 = 60;
							if (type == 374)
							{
								num33 = 120;
							}
							else if (type == 375)
							{
								num33 = 180;
							}
							if (Main.rand.Next(num33 * 2) == 0 && tile.liquid == 0)
							{
								Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(j * 16, i * 16, 16, 16);
								rectangle.X -= 34;
								rectangle.Width += 68;
								rectangle.Y -= 100;
								rectangle.Height = 400;
								bool flag2 = true;
								for (int l = 0; l < 500; l++)
								{
									if (Main.gore[l].active && ((Main.gore[l].type >= 706 && Main.gore[l].type <= 717) || Main.gore[l].type == 943))
									{
										Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)Main.gore[l].position.X, (int)Main.gore[l].position.Y, 16, 16);
										if (rectangle.Intersects(value))
										{
											flag2 = false;
										}
									}
								}
								if (flag2)
								{
									Vector2 position = new Vector2((float)(j * 16), (float)(i * 16));
									int num34 = 706;
									if (Main.waterStyle > 1)
									{
										num34 = 706 + Main.waterStyle - 1;
									}
									if (type == 374)
									{
										num34 = 716;
									}
									if (type == 375)
									{
										num34 = 717;
									}
									if (type == 461)
									{
										num34 = 943;
									}
									if (num34 != 943 || Main.rand.Next(3) == 0)
									{
										int num35 = Gore.NewGore(position, default(Vector2), num34, 1f);
										Main.gore[num35].velocity *= 0f;
									}
								}
							}
						}
						else
						{
							if ((type >= 275 && type <= 281) || type == 296 || type == 297 || type == 309 || type == 358 || type == 359 || type == 414 || type == 413)
							{
								Main.critterCage = true;
								int num36 = j - (int)(num9 / 18);
								int num37 = i - (int)(num10 / 18);
								int num38 = num36 / 6 * (num37 / 4);
								num38 %= Main.cageFrames;
								if (type == 275 || type == 359)
								{
									num15 = Main.bunnyCageFrame[num38] * 54;
								}
								if (type == 276 || type == 414)
								{
									num15 = Main.squirrelCageFrame[num38] * 54;
								}
								if (type == 413)
								{
									num15 = Main.squirrelCageFrameOrange[num38] * 54;
								}
								if (type == 277)
								{
									num15 = Main.mallardCageFrame[num38] * 54;
								}
								if (type == 278)
								{
									num15 = Main.duckCageFrame[num38] * 54;
								}
								if (type == 279 || type == 358)
								{
									num15 = Main.birdCageFrame[num38] * 54;
								}
								if (type == 280)
								{
									num15 = Main.blueBirdCageFrame[num38] * 54;
								}
								if (type == 281)
								{
									num15 = Main.redBirdCageFrame[num38] * 54;
								}
								if (type == 296)
								{
									num15 = Main.scorpionCageFrame[0, num38] * 54;
								}
								if (type == 297)
								{
									num15 = Main.scorpionCageFrame[0, num38] * 54;
								}
								if (type == 309)
								{
									num15 = Main.penguinCageFrame[num38] * 54;
								}
							}
							else if (type == 285 || type == 286 || type == 298 || type == 299 || type == 310 || type == 339 || (type >= 361 && type <= 364) || (type >= 391 && type <= 394))
							{
								Main.critterCage = true;
								int num39 = j - (int)(num9 / 18);
								int num40 = i - (int)(num10 / 18);
								int num41 = num39 / 3 * (num40 / 3);
								num41 %= Main.cageFrames;
								if (type == 285)
								{
									num15 = Main.snailCageFrame[num41] * 36;
								}
								if (type == 286)
								{
									num15 = Main.snail2CageFrame[num41] * 36;
								}
								if (type == 298 || type == 361)
								{
									num15 = Main.frogCageFrame[num41] * 36;
								}
								if (type == 299 || type == 363)
								{
									num15 = Main.mouseCageFrame[num41] * 36;
								}
								if (type == 310 || type == 364 || type == 391)
								{
									num15 = Main.wormCageFrame[num41] * 36;
								}
								if (type == 339 || type == 362)
								{
									num15 = Main.grasshopperCageFrame[num41] * 36;
								}
								if (type == 392 || type == 393 || type == 394)
								{
									num15 = Main.slugCageFrame[(int)(type - 392), num41] * 36;
								}
							}
							else if (type == 282 || (type >= 288 && type <= 295) || (type >= 316 && type <= 318) || type == 360)
							{
								Main.critterCage = true;
								int num42 = j - (int)(num9 / 18);
								int num43 = i - (int)(num10 / 18);
								int num44 = num42 / 2 * (num43 / 3);
								num44 %= Main.cageFrames;
								if (type == 282)
								{
									num15 = Main.fishBowlFrame[num44] * 36;
								}
								else if ((type >= 288 && type <= 295) || type == 360)
								{
									int num45 = (int)(type - 288);
									if (type == 360)
									{
										num45 = 8;
									}
									num15 = Main.butterflyCageFrame[num45, num44] * 36;
								}
								else if (type >= 316 && type <= 318)
								{
									int num46 = (int)(type - 316);
									num15 = Main.jellyfishCageFrame[num46, num44] * 36;
								}
							}
							else if (type == 207)
							{
								if (num10 >= 72)
								{
									num15 = Main.tileFrame[(int)type];
									int num47 = j;
									if (num9 % 36 != 0)
									{
										num47--;
									}
									num15 += num47 % 6;
									if (num15 >= 6)
									{
										num15 -= 6;
									}
									num15 *= 72;
								}
								else
								{
									num15 = 0;
								}
							}
							else if (type == 410)
							{
								if (num10 >= 56)
								{
									num15 = Main.tileFrame[(int)type];
									num15 *= 56;
								}
								else
								{
									num15 = 0;
								}
							}
							else if (type == 326 || type == 327 || type == 328 || type == 329 || type == 336 || type == 340 || type == 341 || type == 342 || type == 343 || type == 344 || type == 345 || type == 351 || type == 421 || type == 422 || type == 458 || type == 459)
							{
								num15 = Main.tileFrame[(int)type] * 90;
							}
							Texture2D texture2D = null;
							Microsoft.Xna.Framework.Rectangle empty = Microsoft.Xna.Framework.Rectangle.Empty;
							Microsoft.Xna.Framework.Color color2 = Microsoft.Xna.Framework.Color.Transparent;
							byte b = (byte)(100f + 150f * Main.martianLight);
							Microsoft.Xna.Framework.Color color3 = new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, 0);
							Microsoft.Xna.Framework.Color color4 = new Microsoft.Xna.Framework.Color(100, 100, 100, 0);
							Microsoft.Xna.Framework.Color color5 = new Microsoft.Xna.Framework.Color(150, 100, 50, 0);
							ushort num48 = type;
							if (num48 <= 93)
							{
								if (num48 <= 34)
								{
									switch (num48)
									{
									case 10:
									{
										int num49 = (int)(num10 / 54);
										if (num49 == 32)
										{
											texture2D = Main.glowMaskTexture[57];
											empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 54), num8, num12);
											color2 = color3;
										}
										break;
									}
									case 11:
									{
										int num49 = (int)(num10 / 54);
										if (num49 == 32)
										{
											texture2D = Main.glowMaskTexture[58];
											empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 54), num8, num12);
											color2 = color3;
										}
										if (num49 == 33)
										{
											texture2D = Main.glowMaskTexture[119];
											empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 54), num8, num12);
											color2 = color4;
										}
										break;
									}
									case 12:
									case 13:
									case 16:
									case 17:
									case 20:
										break;
									case 14:
									{
										int num49 = (int)(num9 / 54);
										if (num49 == 31)
										{
											texture2D = Main.glowMaskTexture[67];
											empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
											color2 = color3;
										}
										if (num49 == 32)
										{
											texture2D = Main.glowMaskTexture[124];
											empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
											color2 = color4;
										}
										break;
									}
									case 15:
									{
										int num49 = (int)(num10 / 40);
										if (num49 == 32)
										{
											texture2D = Main.glowMaskTexture[54];
											empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 40), num8, num12);
											color2 = color3;
										}
										if (num49 == 33)
										{
											texture2D = Main.glowMaskTexture[116];
											empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 40), num8, num12);
											color2 = color4;
										}
										break;
									}
									case 18:
									{
										int num49 = (int)(num9 / 36);
										if (num49 == 27)
										{
											texture2D = Main.glowMaskTexture[69];
											empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
											color2 = color3;
										}
										if (num49 == 28)
										{
											texture2D = Main.glowMaskTexture[125];
											empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
											color2 = color4;
										}
										break;
									}
									case 19:
									{
										int num49 = (int)(num10 / 18);
										if (num49 == 26)
										{
											texture2D = Main.glowMaskTexture[65];
											empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 18), num8, num12);
											color2 = color3;
										}
										if (num49 == 27)
										{
											texture2D = Main.glowMaskTexture[112];
											empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 18), num8, num12);
											color2 = color4;
										}
										break;
									}
									case 21:
									{
										int num49 = (int)(num9 / 36);
										if (num49 == 48)
										{
											texture2D = Main.glowMaskTexture[56];
											empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
											color2 = color3;
										}
										if (num49 == 49)
										{
											texture2D = Main.glowMaskTexture[117];
											empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
											color2 = color4;
										}
										break;
									}
									default:
										switch (num48)
										{
										case 33:
											if (num9 / 18 == 0)
											{
												int num49 = (int)(num10 / 22);
												if (num49 == 26)
												{
													texture2D = Main.glowMaskTexture[61];
													empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 22), num8, num12);
													color2 = color3;
												}
											}
											break;
										case 34:
											if (num9 / 54 == 0)
											{
												int num49 = (int)(num10 / 54);
												if (num49 == 33)
												{
													texture2D = Main.glowMaskTexture[55];
													empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 54), num8, num12);
													color2 = color3;
												}
											}
											break;
										}
										break;
									}
								}
								else if (num48 != 42)
								{
									if (num48 != 79)
									{
										switch (num48)
										{
										case 87:
										{
											int num49 = (int)(num9 / 54);
											if (num49 == 26)
											{
												texture2D = Main.glowMaskTexture[64];
												empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
												color2 = color3;
											}
											if (num49 == 27)
											{
												texture2D = Main.glowMaskTexture[121];
												empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
												color2 = color4;
											}
											break;
										}
										case 88:
										{
											int num49 = (int)(num9 / 54);
											if (num49 == 24)
											{
												texture2D = Main.glowMaskTexture[59];
												empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
												color2 = color3;
											}
											if (num49 == 25)
											{
												texture2D = Main.glowMaskTexture[120];
												empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
												color2 = color4;
											}
											break;
										}
										case 89:
										{
											int num49 = (int)(num9 / 54);
											if (num49 == 29)
											{
												texture2D = Main.glowMaskTexture[66];
												empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
												color2 = color3;
											}
											if (num49 == 30)
											{
												texture2D = Main.glowMaskTexture[123];
												empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
												color2 = color4;
											}
											break;
										}
										case 90:
										{
											int num49 = (int)(num10 / 36);
											if (num49 == 27)
											{
												texture2D = Main.glowMaskTexture[52];
												empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 36), num8, num12);
												color2 = color3;
											}
											if (num49 == 28)
											{
												texture2D = Main.glowMaskTexture[113];
												empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 36), num8, num12);
												color2 = color4;
											}
											break;
										}
										case 93:
										{
											int num49 = (int)(num9 / 54);
											if (num49 == 27)
											{
												texture2D = Main.glowMaskTexture[62];
												empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 54), num8, num12);
												color2 = color3;
											}
											break;
										}
										}
									}
									else
									{
										int num49 = (int)(num10 / 36);
										if (num49 == 27)
										{
											texture2D = Main.glowMaskTexture[53];
											empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 36), num8, num12);
											color2 = color3;
										}
										if (num49 == 28)
										{
											texture2D = Main.glowMaskTexture[114];
											empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 36), num8, num12);
											color2 = color4;
										}
									}
								}
								else
								{
									int num49 = (int)(num10 / 36);
									if (num49 == 33)
									{
										texture2D = Main.glowMaskTexture[63];
										empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 36), num8, num12);
										color2 = color3;
									}
								}
							}
							else if (num48 <= 172)
							{
								switch (num48)
								{
								case 100:
									if (num9 / 36 == 0)
									{
										int num49 = (int)(num10 / 36);
										if (num49 == 27)
										{
											texture2D = Main.glowMaskTexture[68];
											empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 36), num8, num12);
											color2 = color3;
										}
									}
									break;
								case 101:
								{
									int num49 = (int)(num9 / 54);
									if (num49 == 28)
									{
										texture2D = Main.glowMaskTexture[60];
										empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
										color2 = color3;
									}
									if (num49 == 29)
									{
										texture2D = Main.glowMaskTexture[115];
										empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
										color2 = color4;
									}
									break;
								}
								case 102:
								case 103:
									break;
								case 104:
								{
									int num49 = (int)(num9 / 36);
									if (num49 == 24)
									{
										texture2D = Main.glowMaskTexture[51];
										empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
										color2 = color3;
									}
									if (num49 == 25)
									{
										texture2D = Main.glowMaskTexture[118];
										empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
										color2 = color4;
									}
									break;
								}
								default:
									if (num48 == 172)
									{
										int num49 = (int)(num10 / 38);
										if (num49 == 28)
										{
											texture2D = Main.glowMaskTexture[88];
											empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 38), num8, num12);
											color2 = color3;
										}
										if (num49 == 29)
										{
											texture2D = Main.glowMaskTexture[122];
											empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 38), num8, num12);
											color2 = color4;
										}
									}
									break;
								}
							}
							else if (num48 != 184)
							{
								if (num48 != 441)
								{
									if (num48 == 463)
									{
										texture2D = Main.glowMaskTexture[243];
										empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10 + num15, num8, num12);
										color2 = new Microsoft.Xna.Framework.Color(127, 127, 127, 0);
									}
								}
								else
								{
									int num49 = (int)(num9 / 36);
									if (num49 == 48)
									{
										texture2D = Main.glowMaskTexture[56];
										empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
										color2 = color3;
									}
									if (num49 == 49)
									{
										texture2D = Main.glowMaskTexture[117];
										empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
										color2 = color4;
									}
								}
							}
							else if (tile.frameX == 110)
							{
								texture2D = Main.glowMaskTexture[127];
								empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12);
								color2 = color5;
							}
							Texture2D texture2D2 = null;
							Microsoft.Xna.Framework.Rectangle empty2 = Microsoft.Xna.Framework.Rectangle.Empty;
							Microsoft.Xna.Framework.Color transparent = Microsoft.Xna.Framework.Color.Transparent;
							if (TileID.Sets.HasOutlines[(int)type] && Collision.InTileBounds(j, i, Main.TileInteractionLX, Main.TileInteractionLY, Main.TileInteractionHX, Main.TileInteractionHY) && Main.SmartInteractTileCoords.Contains(new Microsoft.Xna.Framework.Point(j, i)))
							{
								int num50 = (int)((color.R + color.G + color.B) / 3);
								bool flag3 = false;
								if (Main.SmartInteractTileCoordsSelected.Contains(new Microsoft.Xna.Framework.Point(j, i)))
								{
									flag3 = true;
								}
								if (num50 > 10)
								{
									texture2D2 = Main.highlightMaskTexture[(int)type];
									if (flag3)
									{
										transparent = new Microsoft.Xna.Framework.Color(num50, num50, num50 / 3, num50);
									}
									else
									{
										transparent = new Microsoft.Xna.Framework.Color(num50 / 2, num50 / 2, num50 / 2, num50);
									}
								}
							}
							if (Main.player[Main.myPlayer].dangerSense)
							{
								bool flag4 = false || type == 135 || type == 137 || type == 138 || type == 141 || type == 210 || type == 442 || type == 443 || type == 444;
								if (tile.slope() == 0 && !tile.inActive())
								{
									flag4 = (flag4 || type == 32 || type == 69 || type == 48 || type == 232 || type == 352 || type == 51 || type == 229);
									if (!Main.player[Main.myPlayer].fireWalk)
									{
										flag4 = (flag4 || type == 37 || type == 58 || type == 76);
									}
									if (!Main.player[Main.myPlayer].iceSkate)
									{
										flag4 = (flag4 || type == 162);
									}
								}
								if (flag4)
								{
									if (color.R < 255)
									{
										color.R = 255;
									}
									if (color.G < 50)
									{
										color.G = 50;
									}
									if (color.B < 50)
									{
										color.B = 50;
									}
									color.A = Main.mouseTextColor;
									if (!Main.gamePaused && base.IsActive && Main.rand.Next(30) == 0)
									{
										int num51 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 60, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 0.3f);
										Main.dust[num51].fadeIn = 1f;
										Main.dust[num51].velocity *= 0.1f;
										Main.dust[num51].noLight = true;
										Main.dust[num51].noGravity = true;
									}
								}
							}
							if (Main.player[Main.myPlayer].findTreasure)
							{
								bool flag5 = false;
								if (type == 185 && num10 == 18 && num9 >= 576 && num9 <= 882)
								{
									flag5 = true;
								}
								if (type == 186 && num9 >= 864 && num9 <= 1170)
								{
									flag5 = true;
								}
								if (flag5 || Main.tileSpelunker[(int)type] || (Main.tileAlch[(int)type] && type != 82))
								{
									byte b2 = 200;
									byte b3 = 170;
									if (color.R < b2)
									{
										color.R = b2;
									}
									if (color.G < b3)
									{
										color.G = b3;
									}
									color.A = Main.mouseTextColor;
									if (!Main.gamePaused && base.IsActive && Main.rand.Next(60) == 0)
									{
										int num52 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 204, 0f, 0f, 150, default(Microsoft.Xna.Framework.Color), 0.3f);
										Main.dust[num52].fadeIn = 1f;
										Main.dust[num52].velocity *= 0.1f;
										Main.dust[num52].noLight = true;
									}
								}
							}
							if (!Main.gamePaused && base.IsActive && (Lighting.lightMode < 2 || Main.rand.Next(4) == 0))
							{
								if (type == 238)
								{
									if (Main.rand.Next(10) == 0)
									{
										int num53 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 168, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
										Main.dust[num53].noGravity = true;
										Main.dust[num53].alpha = 200;
									}
								}
								else if (type == 463)
								{
									if (num10 == 54 && num9 == 0)
									{
										for (int m = 0; m < 4; m++)
										{
											if (Main.rand.Next(2) != 0)
											{
												Dust dust = Dust.NewDustDirect(new Vector2((float)(j * 16 + 4), (float)(i * 16)), 36, 8, 16, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
												dust.noGravity = true;
												dust.alpha = 140;
												dust.fadeIn = 1.2f;
												dust.velocity = Vector2.Zero;
											}
										}
									}
									if (num10 == 18 && (num9 == 0 || num9 == 36))
									{
										for (int n = 0; n < 1; n++)
										{
											if (Main.rand.Next(13) == 0)
											{
												Dust dust = Dust.NewDustDirect(new Vector2((float)(j * 16), (float)(i * 16)), 8, 8, 274, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
												dust.position = new Vector2((float)(j * 16 + 8), (float)(i * 16 + 8));
												Dust expr_24CA_cp_0 = dust;
												expr_24CA_cp_0.position.X = expr_24CA_cp_0.position.X + (float)((num9 == 36) ? 4 : -4);
												dust.noGravity = true;
												dust.alpha = 128;
												dust.fadeIn = 1.2f;
												dust.noLight = true;
												dust.velocity = new Vector2(0f, Main.rand.NextFloatDirection() * 1.2f);
											}
										}
									}
								}
								if (type == 139 && tile.frameX == 36 && tile.frameY % 36 == 0 && (int)Main.time % 7 == 0 && Main.rand.Next(3) == 0)
								{
									int num54 = Main.rand.Next(570, 573);
									Vector2 position2 = new Vector2((float)(j * 16 + 8), (float)(i * 16 - 8));
									Vector2 velocity = new Vector2(Main.windSpeed * 2f, -0.5f);
									velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
									velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
									if (num54 == 572)
									{
										position2.X -= 8f;
									}
									if (num54 == 571)
									{
										position2.X -= 4f;
									}
									Gore.NewGore(position2, velocity, num54, 0.8f);
								}
								if (type == 244 && num9 == 18 && num10 == 18 && Main.rand.Next(2) == 0)
								{
									if (Main.rand.Next(500) == 0)
									{
										Gore.NewGore(new Vector2((float)(j * 16 + 8), (float)(i * 16 + 8)), default(Vector2), 415, (float)Main.rand.Next(51, 101) * 0.01f);
									}
									else if (Main.rand.Next(250) == 0)
									{
										Gore.NewGore(new Vector2((float)(j * 16 + 8), (float)(i * 16 + 8)), default(Vector2), 414, (float)Main.rand.Next(51, 101) * 0.01f);
									}
									else if (Main.rand.Next(80) == 0)
									{
										Gore.NewGore(new Vector2((float)(j * 16 + 8), (float)(i * 16 + 8)), default(Vector2), 413, (float)Main.rand.Next(51, 101) * 0.01f);
									}
									else if (Main.rand.Next(10) == 0)
									{
										Gore.NewGore(new Vector2((float)(j * 16 + 8), (float)(i * 16 + 8)), default(Vector2), 412, (float)Main.rand.Next(51, 101) * 0.01f);
									}
									else if (Main.rand.Next(3) == 0)
									{
										Gore.NewGore(new Vector2((float)(j * 16 + 8), (float)(i * 16 + 8)), default(Vector2), 411, (float)Main.rand.Next(51, 101) * 0.01f);
									}
								}
								if (type == 165 && num9 >= 162 && num9 <= 214 && num10 == 72 && Main.rand.Next(60) == 0)
								{
									int num55 = Dust.NewDust(new Vector2((float)(j * 16 + 2), (float)(i * 16 + 6)), 8, 4, 153, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
									Main.dust[num55].scale -= (float)Main.rand.Next(3) * 0.1f;
									Main.dust[num55].velocity.Y = 0f;
									Dust expr_2900_cp_0 = Main.dust[num55];
									expr_2900_cp_0.velocity.X = expr_2900_cp_0.velocity.X * 0.05f;
									Main.dust[num55].alpha = 100;
								}
								if (type == 42 && num9 == 0)
								{
									int num56 = (int)(num10 / 36);
									int num57 = (int)(num10 / 18 % 2);
									if (num56 == 7 && num57 == 1)
									{
										if (Main.rand.Next(50) == 0)
										{
											int num58 = Dust.NewDust(new Vector2((float)(j * 16 + 4), (float)(i * 16 + 4)), 8, 8, 58, 0f, 0f, 150, default(Microsoft.Xna.Framework.Color), 1f);
											Main.dust[num58].velocity *= 0.5f;
										}
										if (Main.rand.Next(100) == 0)
										{
											int num59 = Gore.NewGore(new Vector2((float)(j * 16 - 2), (float)(i * 16 - 4)), default(Vector2), Main.rand.Next(16, 18), 1f);
											Main.gore[num59].scale *= 0.7f;
											Main.gore[num59].velocity *= 0.25f;
										}
									}
									else if (num56 == 29 && num57 == 1 && Main.rand.Next(40) == 0)
									{
										int num60 = Dust.NewDust(new Vector2((float)(j * 16 + 4), (float)(i * 16)), 8, 8, 59, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
										if (Main.rand.Next(3) != 0)
										{
											Main.dust[num60].noGravity = true;
										}
										Main.dust[num60].velocity *= 0.3f;
										Dust expr_2AEA_cp_0 = Main.dust[num60];
										expr_2AEA_cp_0.velocity.Y = expr_2AEA_cp_0.velocity.Y - 1.5f;
									}
								}
								if (type == 215 && num10 < 36 && Main.rand.Next(3) == 0 && ((Main.drawToScreen && Main.rand.Next(4) == 0) || !Main.drawToScreen) && num10 == 0)
								{
									int num61 = Dust.NewDust(new Vector2((float)(j * 16 + 2), (float)(i * 16 - 4)), 4, 8, 31, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
									if (num9 == 0)
									{
										Dust expr_2B95_cp_0 = Main.dust[num61];
										expr_2B95_cp_0.position.X = expr_2B95_cp_0.position.X + (float)Main.rand.Next(8);
									}
									if (num9 == 36)
									{
										Dust expr_2BC0_cp_0 = Main.dust[num61];
										expr_2BC0_cp_0.position.X = expr_2BC0_cp_0.position.X - (float)Main.rand.Next(8);
									}
									Main.dust[num61].alpha += Main.rand.Next(100);
									Main.dust[num61].velocity *= 0.2f;
									Dust expr_2C22_cp_0 = Main.dust[num61];
									expr_2C22_cp_0.velocity.Y = expr_2C22_cp_0.velocity.Y - (0.5f + (float)Main.rand.Next(10) * 0.1f);
									Main.dust[num61].fadeIn = 0.5f + (float)Main.rand.Next(10) * 0.1f;
								}
								if (type == 4 && Main.rand.Next(40) == 0 && num9 < 66)
								{
									int num62 = (int)(num10 / 22);
									if (num62 == 0)
									{
										num62 = 6;
									}
									else if (num62 == 8)
									{
										num62 = 75;
									}
									else if (num62 == 9)
									{
										num62 = 135;
									}
									else if (num62 == 10)
									{
										num62 = 158;
									}
									else if (num62 == 11)
									{
										num62 = 169;
									}
									else if (num62 == 12)
									{
										num62 = 156;
									}
									else if (num62 == 13)
									{
										num62 = 234;
									}
									else if (num62 == 14)
									{
										num62 = 66;
									}
									else
									{
										num62 = 58 + num62;
									}
									int num63;
									if (num9 == 22)
									{
										num63 = Dust.NewDust(new Vector2((float)(j * 16 + 6), (float)(i * 16)), 4, 4, num62, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
									}
									else if (num9 == 44)
									{
										num63 = Dust.NewDust(new Vector2((float)(j * 16 + 2), (float)(i * 16)), 4, 4, num62, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
									}
									else
									{
										num63 = Dust.NewDust(new Vector2((float)(j * 16 + 4), (float)(i * 16)), 4, 4, num62, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
									}
									if (Main.rand.Next(3) != 0)
									{
										Main.dust[num63].noGravity = true;
									}
									Main.dust[num63].velocity *= 0.3f;
									Dust expr_2E1A_cp_0 = Main.dust[num63];
									expr_2E1A_cp_0.velocity.Y = expr_2E1A_cp_0.velocity.Y - 1.5f;
									if (num62 == 66)
									{
										Main.dust[num63].color = new Microsoft.Xna.Framework.Color(Main.DiscoR, Main.DiscoG, Main.DiscoB);
										Main.dust[num63].noGravity = true;
									}
								}
								if (type == 93 && Main.rand.Next(40) == 0 && num9 == 0)
								{
									int num64 = (int)(num10 / 54);
									if (num10 / 18 % 3 == 0)
									{
										int num65 = num64;
										if (num65 == 0)
										{
											goto IL_2EEE;
										}
										int num66;
										switch (num65)
										{
										case 6:
										case 7:
										case 8:
										case 10:
										case 14:
										case 15:
										case 16:
											goto IL_2EEE;
										case 20:
											num66 = 59;
											goto IL_2EFC;
										}
										num66 = -1;
										IL_2EFC:
										if (num66 != -1)
										{
											int num67 = Dust.NewDust(new Vector2((float)(j * 16 + 4), (float)(i * 16 + 2)), 4, 4, num66, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
											if (Main.rand.Next(3) != 0)
											{
												Main.dust[num67].noGravity = true;
											}
											Main.dust[num67].velocity *= 0.3f;
											Dust expr_2F88_cp_0 = Main.dust[num67];
											expr_2F88_cp_0.velocity.Y = expr_2F88_cp_0.velocity.Y - 1.5f;
											goto IL_2F99;
										}
										goto IL_2F99;
										IL_2EEE:
										num66 = 6;
										goto IL_2EFC;
									}
								}
								IL_2F99:
								if (type == 100 && Main.rand.Next(40) == 0 && num9 < 36)
								{
									int num68 = (int)(num10 / 36);
									if (num10 / 18 % 2 == 0)
									{
										int num69;
										switch (num68)
										{
										case 0:
										case 2:
										case 5:
										case 7:
										case 8:
										case 10:
										case 12:
										case 14:
										case 15:
										case 16:
											num69 = 6;
											break;
										case 1:
										case 3:
										case 4:
										case 6:
										case 9:
										case 11:
										case 13:
										case 17:
										case 18:
										case 19:
											goto IL_3043;
										case 20:
											num69 = 59;
											break;
										default:
											goto IL_3043;
										}
										IL_3046:
										if (num69 != -1)
										{
											Vector2 position3;
											if (num9 == 0)
											{
												if (Main.rand.Next(3) == 0)
												{
													position3 = new Vector2((float)(j * 16 + 4), (float)(i * 16 + 2));
												}
												else
												{
													position3 = new Vector2((float)(j * 16 + 14), (float)(i * 16 + 2));
												}
											}
											else if (Main.rand.Next(3) == 0)
											{
												position3 = new Vector2((float)(j * 16 + 6), (float)(i * 16 + 2));
											}
											else
											{
												position3 = new Vector2((float)(j * 16), (float)(i * 16 + 2));
											}
											int num70 = Dust.NewDust(position3, 4, 4, num69, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
											if (Main.rand.Next(3) != 0)
											{
												Main.dust[num70].noGravity = true;
											}
											Main.dust[num70].velocity *= 0.3f;
											Dust expr_3141_cp_0 = Main.dust[num70];
											expr_3141_cp_0.velocity.Y = expr_3141_cp_0.velocity.Y - 1.5f;
											goto IL_3152;
										}
										goto IL_3152;
										IL_3043:
										num69 = -1;
										goto IL_3046;
									}
								}
								IL_3152:
								if (type == 98 && Main.rand.Next(40) == 0 && num10 == 0 && num9 == 0)
								{
									int num71 = Dust.NewDust(new Vector2((float)(j * 16 + 12), (float)(i * 16 + 2)), 4, 4, 6, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
									if (Main.rand.Next(3) != 0)
									{
										Main.dust[num71].noGravity = true;
									}
									Main.dust[num71].velocity *= 0.3f;
									Dust expr_31FE_cp_0 = Main.dust[num71];
									expr_31FE_cp_0.velocity.Y = expr_31FE_cp_0.velocity.Y - 1.5f;
								}
								if (type == 49 && Main.rand.Next(2) == 0)
								{
									int num72 = Dust.NewDust(new Vector2((float)(j * 16 + 4), (float)(i * 16 - 4)), 4, 4, 172, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
									if (Main.rand.Next(3) == 0)
									{
										Main.dust[num72].scale = 0.5f;
									}
									else
									{
										Main.dust[num72].scale = 0.9f;
										Main.dust[num72].noGravity = true;
									}
									Main.dust[num72].velocity *= 0.3f;
									Dust expr_32D5_cp_0 = Main.dust[num72];
									expr_32D5_cp_0.velocity.Y = expr_32D5_cp_0.velocity.Y - 1.5f;
								}
								if (type == 372 && Main.rand.Next(2) == 0)
								{
									int num73 = Dust.NewDust(new Vector2((float)(j * 16 + 4), (float)(i * 16 - 4)), 4, 4, 242, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
									if (Main.rand.Next(3) == 0)
									{
										Main.dust[num73].scale = 0.5f;
									}
									else
									{
										Main.dust[num73].scale = 0.9f;
										Main.dust[num73].noGravity = true;
									}
									Main.dust[num73].velocity *= 0.3f;
									Dust expr_33AF_cp_0 = Main.dust[num73];
									expr_33AF_cp_0.velocity.Y = expr_33AF_cp_0.velocity.Y - 1.5f;
								}
								if (type == 34 && Main.rand.Next(40) == 0 && num9 < 54)
								{
									int num74 = (int)(num10 / 54);
									int num75 = (int)(num9 / 18 % 3);
									int num76 = (int)(num10 / 18 % 3);
									if (num76 == 1 && num75 != 1)
									{
										int num65 = num74;
										int num77;
										switch (num65)
										{
										case 0:
										case 1:
										case 2:
										case 3:
										case 4:
										case 5:
										case 12:
										case 13:
										case 16:
											goto IL_3481;
										case 6:
										case 7:
										case 8:
										case 9:
										case 10:
										case 11:
										case 14:
										case 15:
											goto IL_348C;
										default:
											switch (num65)
											{
											case 19:
											case 21:
												goto IL_3481;
											case 20:
												goto IL_348C;
											default:
												if (num65 != 25)
												{
													goto IL_348C;
												}
												num77 = 59;
												break;
											}
											break;
										}
										IL_348F:
										if (num77 != -1)
										{
											int num78 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16 + 2)), 14, 6, num77, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
											if (Main.rand.Next(3) != 0)
											{
												Main.dust[num78].noGravity = true;
											}
											Main.dust[num78].velocity *= 0.3f;
											Dust expr_351A_cp_0 = Main.dust[num78];
											expr_351A_cp_0.velocity.Y = expr_351A_cp_0.velocity.Y - 1.5f;
											goto IL_352B;
										}
										goto IL_352B;
										IL_348C:
										num77 = -1;
										goto IL_348F;
										IL_3481:
										num77 = 6;
										goto IL_348F;
									}
								}
								IL_352B:
								if (type == 22 && Main.rand.Next(400) == 0)
								{
									Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 14, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
								}
								else if ((type == 23 || type == 24 || type == 32) && Main.rand.Next(500) == 0)
								{
									Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 14, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
								}
								else if (type == 25 && Main.rand.Next(700) == 0)
								{
									Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 14, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
								}
								else if (type == 112 && Main.rand.Next(700) == 0)
								{
									Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 14, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
								}
								else if (type == 31 && Main.rand.Next(20) == 0)
								{
									if (num9 >= 36)
									{
										int num79 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 5, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
										Main.dust[num79].velocity.Y = 0f;
										Dust expr_3713_cp_0 = Main.dust[num79];
										expr_3713_cp_0.velocity.X = expr_3713_cp_0.velocity.X * 0.3f;
									}
									else
									{
										Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 14, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
									}
								}
								else if (type == 26 && Main.rand.Next(20) == 0)
								{
									if (num9 >= 54)
									{
										int num80 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 5, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
										Main.dust[num80].scale = 1.5f;
										Main.dust[num80].noGravity = true;
										Main.dust[num80].velocity *= 0.75f;
									}
									else
									{
										Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 14, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
									}
								}
								else if ((type == 71 || type == 72) && Main.rand.Next(500) == 0)
								{
									Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 41, 0f, 0f, 250, default(Microsoft.Xna.Framework.Color), 0.8f);
								}
								else if ((type == 17 || type == 77 || type == 133) && Main.rand.Next(40) == 0)
								{
									if (num9 == 18 & num10 == 18)
									{
										int num81 = Dust.NewDust(new Vector2((float)(j * 16 - 4), (float)(i * 16 - 6)), 8, 6, 6, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
										if (Main.rand.Next(3) != 0)
										{
											Main.dust[num81].noGravity = true;
										}
									}
								}
								else if (type == 405 && Main.rand.Next(20) == 0)
								{
									if (num9 == 18 & num10 == 18)
									{
										int num82 = Dust.NewDust(new Vector2((float)(j * 16 - 4), (float)(i * 16 - 6)), 24, 10, 6, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
										if (Main.rand.Next(5) != 0)
										{
											Main.dust[num82].noGravity = true;
										}
									}
								}
								else if (type == 452 && num10 == 0 && num9 == 0 && Main.rand.Next(3) == 0)
								{
									Vector2 position4 = new Vector2((float)(j * 16 + 16), (float)(i * 16 + 8));
									Vector2 velocity2 = new Vector2(0f, 0f);
									if (Main.windSpeed < 0f)
									{
										velocity2.X = -Main.windSpeed;
									}
									int num83 = Main.tileFrame[(int)type];
									int type2 = 907 + num83 / 5;
									if (Main.rand.Next(2) == 0)
									{
										Gore.NewGore(position4, velocity2, type2, Main.rand.NextFloat() * 0.4f + 0.4f);
									}
								}
								else if (type == 406 && num10 == 54 && num9 == 0 && Main.rand.Next(3) == 0)
								{
									Vector2 position5 = new Vector2((float)(j * 16 + 16), (float)(i * 16 + 8));
									Vector2 velocity3 = new Vector2(0f, 0f);
									if (Main.windSpeed < 0f)
									{
										velocity3.X = -Main.windSpeed;
									}
									int type3 = Main.rand.Next(825, 828);
									if (Main.rand.Next(4) == 0)
									{
										Gore.NewGore(position5, velocity3, type3, Main.rand.NextFloat() * 0.2f + 0.2f);
									}
									else if (Main.rand.Next(2) == 0)
									{
										Gore.NewGore(position5, velocity3, type3, Main.rand.NextFloat() * 0.3f + 0.3f);
									}
									else
									{
										Gore.NewGore(position5, velocity3, type3, Main.rand.NextFloat() * 0.4f + 0.4f);
									}
								}
								else if (type == 37 && Main.rand.Next(250) == 0)
								{
									int num84 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 6, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), (float)Main.rand.Next(3));
									if (Main.dust[num84].scale > 1f)
									{
										Main.dust[num84].noGravity = true;
									}
								}
								else if ((type == 58 || type == 76) && Main.rand.Next(250) == 0)
								{
									int num85 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 6, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), (float)Main.rand.Next(3));
									if (Main.dust[num85].scale > 1f)
									{
										Main.dust[num85].noGravity = true;
									}
									Main.dust[num85].noLight = true;
								}
								else if (type == 61)
								{
									if (num9 == 144)
									{
										if (Main.rand.Next(60) == 0)
										{
											int num86 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 44, 0f, 0f, 250, default(Microsoft.Xna.Framework.Color), 0.4f);
											Main.dust[num86].fadeIn = 0.7f;
										}
										color.A = (byte)(245f - (float)Main.mouseTextColor * 1.5f);
										color.R = (byte)(245f - (float)Main.mouseTextColor * 1.5f);
										color.B = (byte)(245f - (float)Main.mouseTextColor * 1.5f);
										color.G = (byte)(245f - (float)Main.mouseTextColor * 1.5f);
									}
								}
								else if (Main.tileShine[(int)type] > 0)
								{
									Main.tileShine[211] = 500;
									if (color.R > 20 || color.B > 20 || color.G > 20)
									{
										int num87 = (int)color.R;
										if ((int)color.G > num87)
										{
											num87 = (int)color.G;
										}
										if ((int)color.B > num87)
										{
											num87 = (int)color.B;
										}
										num87 /= 30;
										if (Main.rand.Next(Main.tileShine[(int)type]) < num87 && (type != 21 || (num9 >= 36 && num9 < 180) || (num9 >= 396 && num9 <= 409)))
										{
											Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
											if (type == 178)
											{
												int num88 = (int)(num9 / 18);
												if (num88 == 0)
												{
													white = new Microsoft.Xna.Framework.Color(255, 0, 255, 255);
												}
												else if (num88 == 1)
												{
													white = new Microsoft.Xna.Framework.Color(255, 255, 0, 255);
												}
												else if (num88 == 2)
												{
													white = new Microsoft.Xna.Framework.Color(0, 0, 255, 255);
												}
												else if (num88 == 3)
												{
													white = new Microsoft.Xna.Framework.Color(0, 255, 0, 255);
												}
												else if (num88 == 4)
												{
													white = new Microsoft.Xna.Framework.Color(255, 0, 0, 255);
												}
												else if (num88 == 5)
												{
													white = new Microsoft.Xna.Framework.Color(255, 255, 255, 255);
												}
												else if (num88 == 6)
												{
													white = new Microsoft.Xna.Framework.Color(255, 255, 0, 255);
												}
												int num89 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 43, 0f, 0f, 254, white, 0.5f);
												Main.dust[num89].velocity *= 0f;
											}
											else
											{
												if (type == 63)
												{
													white = new Microsoft.Xna.Framework.Color(0, 0, 255, 255);
												}
												if (type == 64)
												{
													white = new Microsoft.Xna.Framework.Color(255, 0, 0, 255);
												}
												if (type == 65)
												{
													white = new Microsoft.Xna.Framework.Color(0, 255, 0, 255);
												}
												if (type == 66)
												{
													white = new Microsoft.Xna.Framework.Color(255, 255, 0, 255);
												}
												if (type == 67)
												{
													white = new Microsoft.Xna.Framework.Color(255, 0, 255, 255);
												}
												if (type == 68)
												{
													white = new Microsoft.Xna.Framework.Color(255, 255, 255, 255);
												}
												if (type == 12)
												{
													white = new Microsoft.Xna.Framework.Color(255, 0, 0, 255);
												}
												if (type == 204)
												{
													white = new Microsoft.Xna.Framework.Color(255, 0, 0, 255);
												}
												if (type == 211)
												{
													white = new Microsoft.Xna.Framework.Color(50, 255, 100, 255);
												}
												int num90 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 43, 0f, 0f, 254, white, 0.5f);
												Main.dust[num90].velocity *= 0f;
											}
										}
									}
								}
							}
							if (type == 21)
							{
								Microsoft.Xna.Framework.Point key = new Microsoft.Xna.Framework.Point(j, i);
								if (num9 % 36 != 0)
								{
									key.X--;
								}
								if (num10 % 36 != 0)
								{
									key.Y--;
								}
								if (!dictionary.ContainsKey(key))
								{
									dictionary[key] = Chest.FindChest(key.X, key.Y);
								}
								int num91 = (int)(num9 / 18);
								int num92 = (int)(num10 / 18);
								int num93 = (int)(num9 / 36);
								int num94 = num91 * 18;
								num16 = num94 - (int)num9;
								int num95 = num92 * 18;
								if (dictionary[key] != -1)
								{
									int frame = Main.chest[dictionary[key]].frame;
									if (frame == 1)
									{
										num95 += 38;
									}
									if (frame == 2)
									{
										num95 += 76;
									}
								}
								num15 = num95 - (int)num10;
								if (num92 != 0)
								{
									num12 = 18;
								}
								if (num93 == 48 || num93 == 49)
								{
									empty = new Microsoft.Xna.Framework.Rectangle(16 * (num91 % 2), (int)num10 + num15, num8, num12);
								}
							}
							if (type == 378)
							{
								Microsoft.Xna.Framework.Point key2 = new Microsoft.Xna.Framework.Point(j, i);
								if (num9 % 36 != 0)
								{
									key2.X--;
								}
								if (num10 % 54 != 0)
								{
									key2.Y -= (int)(num10 / 18);
								}
								if (!dictionary2.ContainsKey(key2))
								{
									dictionary2[key2] = TETrainingDummy.Find(key2.X, key2.Y);
								}
								if (dictionary2[key2] != -1)
								{
									int num96 = ((TETrainingDummy)TileEntity.ByID[dictionary2[key2]]).npc;
									if (num96 != -1)
									{
										int num97 = Main.npc[num96].frame.Y / 55;
										num97 *= 54;
										num97 += (int)num10;
										num15 = num97 - (int)num10;
									}
								}
							}
							if (type == 395)
							{
								Microsoft.Xna.Framework.Point key3 = new Microsoft.Xna.Framework.Point(j, i);
								if (num9 % 36 != 0)
								{
									key3.X--;
								}
								if (num10 % 36 != 0)
								{
									key3.Y--;
								}
								if (!dictionary3.ContainsKey(key3))
								{
									dictionary3[key3] = TEItemFrame.Find(key3.X, key3.Y);
									if (dictionary3[key3] != -1)
									{
										Main.specX[num3] = key3.X;
										Main.specY[num3] = key3.Y;
										num3++;
									}
								}
							}
							if (type == 269 || type == 128)
							{
								int num98 = (int)(num10 / 18);
								if (num98 == 2)
								{
									if (num9 >= 100)
									{
										bool flag6 = false;
										int num99 = (int)Main.tile[j, i - 1].frameX;
										if (num99 >= 100)
										{
											int num100 = 0;
											while (num99 >= 100)
											{
												num100++;
												num99 -= 100;
											}
											int num65 = num100;
											if (num65 <= 36)
											{
												if (num65 != 15 && num65 != 36)
												{
													goto IL_4404;
												}
											}
											else
											{
												switch (num65)
												{
												case 41:
												case 42:
													break;
												default:
													switch (num65)
													{
													case 58:
													case 59:
													case 60:
													case 61:
													case 62:
													case 63:
														break;
													default:
														goto IL_4404;
													}
													break;
												}
											}
											flag6 = true;
										}
										IL_4404:
										if (!flag6)
										{
											Main.specX[num3] = j;
											Main.specY[num3] = i;
											num3++;
										}
									}
									if (Main.tile[j, i - 1].frameX >= 100)
									{
										Main.specX[num3] = j;
										Main.specY[num3] = i - 1;
										num3++;
									}
									if (Main.tile[j, i - 2].frameX >= 100)
									{
										Main.specX[num3] = j;
										Main.specY[num3] = i - 2;
										num3++;
									}
								}
							}
							if (type == 5 && num10 >= 198 && num9 >= 22)
							{
								Main.specX[num3] = j;
								Main.specY[num3] = i;
								num3++;
							}
							if (type == 323 && num9 <= 132 && num9 >= 88)
							{
								Main.specX[num3] = j;
								Main.specY[num3] = i;
								num3++;
							}
							if (type == 412 && num9 == 0 && num10 == 0)
							{
								Main.specX[num3] = j;
								Main.specY[num3] = i;
								num3++;
							}
							if (type == 237 && num9 == 18 && num10 == 0)
							{
								Main.specX[num3] = j;
								Main.specY[num3] = i;
								num3++;
							}
							if (type == 334)
							{
								int num101 = (int)(num10 / 18);
								if (num101 == 1 && num9 >= 5000)
								{
									int num102 = (int)Main.tile[j, i].frameX;
									int num103 = 0;
									while (num102 >= 5000)
									{
										num103++;
										num102 -= 5000;
									}
									if (num103 == 1 || num103 == 4)
									{
										Main.specX[num3] = j;
										Main.specY[num3] = i;
										num3++;
									}
								}
							}
							if (type == 5 && num10 >= 198 && num9 >= 22)
							{
								Main.specX[num3] = j;
								Main.specY[num3] = i;
								num3++;
							}
							if (type == 323 && num9 <= 132 && num9 >= 88)
							{
								Main.specX[num3] = j;
								Main.specY[num3] = i;
								num3++;
							}
							if (type == 412 && num9 == 0 && num10 == 0)
							{
								Main.specX[num3] = j;
								Main.specY[num3] = i;
								num3++;
							}
							if (type == 237 && num9 == 18 && num10 == 0)
							{
								Main.specX[num3] = j;
								Main.specY[num3] = i;
								num3++;
							}
							if (type == 72 && num9 >= 36)
							{
								int num104 = 0;
								if (num10 == 18)
								{
									num104 = 1;
								}
								else if (num10 == 36)
								{
									num104 = 2;
								}
								Main.spriteBatch.Draw(Main.shroomCapTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X - 22), (float)(i * 16 - (int)Main.screenPosition.Y - 26)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num104 * 62, 0, 60, 42)), Lighting.GetColor(j, i), 0f, default(Vector2), 1f, effects, 0f);
							}
							if (color.R >= 1 || color.G >= 1 || color.B >= 1)
							{
								Tile tile2 = Main.tile[j + 1, i];
								Tile tile3 = Main.tile[j - 1, i];
								Tile tile4 = Main.tile[j, i - 1];
								Tile tile5 = Main.tile[j, i + 1];
								if (tile2 == null)
								{
									tile2 = new Tile();
									Main.tile[j + 1, i] = tile2;
								}
								if (tile3 == null)
								{
									tile3 = new Tile();
									Main.tile[j - 1, i] = tile3;
								}
								if (tile4 == null)
								{
									tile4 = new Tile();
									Main.tile[j, i - 1] = tile4;
								}
								if (tile5 == null)
								{
									tile5 = new Tile();
									Main.tile[j, i + 1] = tile5;
								}
								if (solidOnly && flag && !tile.inActive() && !Main.tileSolidTop[(int)type])
								{
									bool flag7 = false;
									if (tile.halfBrick())
									{
										int num105 = 160;
										if (((int)tile3.liquid > num105 || (int)tile2.liquid > num105) && this.waterfallManager.CheckForWaterfall(j, i))
										{
											flag7 = true;
										}
									}
									if (!flag7)
									{
										int num106 = 0;
										bool flag8 = false;
										bool flag9 = false;
										bool flag10 = false;
										bool flag11 = false;
										int num107 = 0;
										bool flag12 = false;
										int num108 = (int)tile.slope();
										if (tile3.liquid > 0 && num108 != 1 && num108 != 3)
										{
											flag8 = true;
											switch (tile3.liquidType())
											{
											case 0:
												flag12 = true;
												break;
											case 1:
												num107 = 1;
												break;
											case 2:
												num107 = 11;
												break;
											}
											if ((int)tile3.liquid > num106)
											{
												num106 = (int)tile3.liquid;
											}
										}
										if (tile2.liquid > 0 && num108 != 2 && num108 != 4)
										{
											flag9 = true;
											switch (tile2.liquidType())
											{
											case 0:
												flag12 = true;
												break;
											case 1:
												num107 = 1;
												break;
											case 2:
												num107 = 11;
												break;
											}
											if ((int)tile2.liquid > num106)
											{
												num106 = (int)tile2.liquid;
											}
										}
										if (tile4.liquid > 0 && num108 != 3 && num108 != 4)
										{
											flag10 = true;
											switch (tile4.liquidType())
											{
											case 0:
												flag12 = true;
												break;
											case 1:
												num107 = 1;
												break;
											case 2:
												num107 = 11;
												break;
											}
										}
										if (tile5.liquid > 0 && num108 != 1 && num108 != 2)
										{
											if (tile5.liquid > 240)
											{
												flag11 = true;
											}
											switch (tile5.liquidType())
											{
											case 0:
												flag12 = true;
												break;
											case 1:
												num107 = 1;
												break;
											case 2:
												num107 = 11;
												break;
											}
										}
										if (waterStyleOverride != -1)
										{
											Main.waterStyle = waterStyleOverride;
										}
										if (num107 == 0)
										{
											num107 = Main.waterStyle;
										}
										if ((flag10 || flag11 || flag8 || flag9) && (!flag12 || num107 != 1))
										{
											Microsoft.Xna.Framework.Color color6 = Lighting.GetColor(j, i);
											Vector2 value2 = new Vector2((float)(j * 16), (float)(i * 16));
											Microsoft.Xna.Framework.Rectangle value3 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 16);
											if (flag11 && (flag8 || flag9))
											{
												flag8 = true;
												flag9 = true;
											}
											if ((!flag10 || (!flag8 && !flag9)) && (!flag11 || !flag10))
											{
												if (flag10)
												{
													value3 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 4);
													if (tile.halfBrick() || tile.slope() != 0)
													{
														value3 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 12);
													}
												}
												else if (flag11 && !flag8 && !flag9)
												{
													value2 = new Vector2((float)(j * 16), (float)(i * 16 + 12));
													value3 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 4);
												}
												else
												{
													float num109 = (float)(256 - num106);
													num109 /= 32f;
													int y = 4;
													if (tile4.liquid == 0 && !WorldGen.SolidTile(j, i - 1))
													{
														y = 0;
													}
													if ((flag8 && flag9) || tile.halfBrick() || tile.slope() != 0)
													{
														value2 = new Vector2((float)(j * 16), (float)(i * 16 + (int)num109 * 2));
														value3 = new Microsoft.Xna.Framework.Rectangle(0, y, 16, 16 - (int)num109 * 2);
													}
													else if (flag8)
													{
														value2 = new Vector2((float)(j * 16), (float)(i * 16 + (int)num109 * 2));
														value3 = new Microsoft.Xna.Framework.Rectangle(0, y, 4, 16 - (int)num109 * 2);
													}
													else
													{
														value2 = new Vector2((float)(j * 16 + 12), (float)(i * 16 + (int)num109 * 2));
														value3 = new Microsoft.Xna.Framework.Rectangle(0, y, 4, 16 - (int)num109 * 2);
													}
												}
											}
											float num110 = 0.5f;
											if (num107 == 1)
											{
												num110 = 1f;
											}
											else if (num107 == 11)
											{
												num110 *= 1.7f;
												if (num110 > 1f)
												{
													num110 = 1f;
												}
											}
											if ((double)i < Main.worldSurface || num110 > 1f)
											{
												num110 = 1f;
												if (tile4.wall > 0 || tile3.wall > 0 || tile2.wall > 0 || tile5.wall > 0)
												{
													num110 = 0.65f;
												}
												if (tile.wall > 0)
												{
													num110 = 0.5f;
												}
											}
											if (tile.halfBrick() && tile4.liquid > 0 && tile.wall > 0)
											{
												num110 = 0f;
											}
											float num111 = (float)color6.R * num110;
											float num112 = (float)color6.G * num110;
											float num113 = (float)color6.B * num110;
											float num114 = (float)color6.A * num110;
											color6 = new Microsoft.Xna.Framework.Color((int)((byte)num111), (int)((byte)num112), (int)((byte)num113), (int)((byte)num114));
											Main.spriteBatch.Draw(Main.liquidTexture[num107], value2 - Main.screenPosition + zero, new Microsoft.Xna.Framework.Rectangle?(value3), color6, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
										}
									}
								}
								if (type == 314)
								{
									if (tile.inActive())
									{
										color = tile.actColor(color);
									}
									else if (Main.tileShine2[(int)type])
									{
										color = Main.shine(color, (int)type);
									}
									int num115;
									int num116;
									Minecart.TrackColors(j, i, tile, out num115, out num116);
									Texture2D texture;
									if (Main.canDrawColorTile(type, num115))
									{
										texture = Main.tileAltTexture[(int)type, num115];
									}
									else
									{
										texture = Main.tileTexture[(int)type];
									}
									Texture2D texture2;
									if (Main.canDrawColorTile(type, num116))
									{
										texture2 = Main.tileAltTexture[(int)type, num116];
									}
									else
									{
										texture2 = Main.tileTexture[(int)type];
									}
									tile.frameNumber();
									if (num10 != -1)
									{
										Main.spriteBatch.Draw(texture2, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(Minecart.GetSourceRect((int)num10, Main.tileFrame[314])), color, 0f, default(Vector2), 1f, effects, 0f);
									}
									Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(Minecart.GetSourceRect((int)num9, Main.tileFrame[314])), color, 0f, default(Vector2), 1f, effects, 0f);
									if (Minecart.DrawLeftDecoration((int)num10))
									{
										Main.spriteBatch.Draw(texture2, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)((i + 1) * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(Minecart.GetSourceRect(36, 0)), color, 0f, default(Vector2), 1f, effects, 0f);
									}
									if (Minecart.DrawLeftDecoration((int)num9))
									{
										Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)((i + 1) * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(Minecart.GetSourceRect(36, 0)), color, 0f, default(Vector2), 1f, effects, 0f);
									}
									if (Minecart.DrawRightDecoration((int)num10))
									{
										Main.spriteBatch.Draw(texture2, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)((i + 1) * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(Minecart.GetSourceRect(37, Main.tileFrame[314])), color, 0f, default(Vector2), 1f, effects, 0f);
									}
									if (Minecart.DrawRightDecoration((int)num9))
									{
										Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)((i + 1) * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(Minecart.GetSourceRect(37, 0)), color, 0f, default(Vector2), 1f, effects, 0f);
									}
									if (Minecart.DrawBumper((int)num9))
									{
										Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)((i - 1) * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(Minecart.GetSourceRect(39, 0)), color, 0f, default(Vector2), 1f, effects, 0f);
									}
									else if (Minecart.DrawBouncyBumper((int)num9))
									{
										Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)((i - 1) * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(Minecart.GetSourceRect(38, 0)), color, 0f, default(Vector2), 1f, effects, 0f);
									}
								}
								else if (type == 51)
								{
									Microsoft.Xna.Framework.Color color7 = Lighting.GetColor(j, i);
									float num117 = 0.5f;
									float num118 = (float)color7.R * num117;
									float num119 = (float)color7.G * num117;
									float num120 = (float)color7.B * num117;
									float num121 = (float)color7.A * num117;
									color7 = new Microsoft.Xna.Framework.Color((int)((byte)num118), (int)((byte)num119), (int)((byte)num120), (int)((byte)num121));
									if (Main.canDrawColorTile(j, i))
									{
										Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), color7, 0f, default(Vector2), 1f, effects, 0f);
									}
									else
									{
										Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), color7, 0f, default(Vector2), 1f, effects, 0f);
									}
								}
								else if (type == 171)
								{
									if (num6 > i - (int)num10 && num10 == 7)
									{
										num11 -= (int)(16 * num10);
										num9 = Main.tile[j, i - (int)num10].frameX;
										num10 = Main.tile[j, i - (int)num10].frameY;
									}
									if (num9 >= 10)
									{
										int num122 = 0;
										if ((num10 & 1) == 1)
										{
											num122++;
										}
										if ((num10 & 2) == 2)
										{
											num122 += 2;
										}
										if ((num10 & 4) == 4)
										{
											num122 += 4;
										}
										int num123 = 0;
										if ((num10 & 8) == 8)
										{
											num123++;
										}
										if ((num10 & 16) == 16)
										{
											num123 += 2;
										}
										if ((num10 & 32) == 32)
										{
											num123 += 4;
										}
										int num124 = 0;
										if ((num10 & 64) == 64)
										{
											num124++;
										}
										if ((num10 & 128) == 128)
										{
											num124 += 2;
										}
										if ((num10 & 256) == 256)
										{
											num124 += 4;
										}
										if ((num10 & 512) == 512)
										{
											num124 += 8;
										}
										int num125 = 0;
										if ((num10 & 1024) == 1024)
										{
											num125++;
										}
										if ((num10 & 2048) == 2048)
										{
											num125 += 2;
										}
										if ((num10 & 4096) == 4096)
										{
											num125 += 4;
										}
										if ((num10 & 8192) == 8192)
										{
											num125 += 8;
										}
										Microsoft.Xna.Framework.Color color8 = Lighting.GetColor(j + 1, i + 4);
										Main.spriteBatch.Draw(Main.xmasTree[0], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 64, 128)), color8, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
										if (num122 > 0)
										{
											num122--;
											Microsoft.Xna.Framework.Color color9 = color8;
											if (num122 != 3)
											{
												color9 = new Microsoft.Xna.Framework.Color(255, 255, 255, 255);
											}
											Main.spriteBatch.Draw(Main.xmasTree[3], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(66 * num122, 0, 64, 128)), color9, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
										}
										if (num123 > 0)
										{
											num123--;
											Main.spriteBatch.Draw(Main.xmasTree[1], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(66 * num123, 0, 64, 128)), color8, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
										}
										if (num124 > 0)
										{
											num124--;
											Main.spriteBatch.Draw(Main.xmasTree[2], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(66 * num124, 0, 64, 128)), color8, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
										}
										if (num125 > 0)
										{
											num125--;
											Main.spriteBatch.Draw(Main.xmasTree[4], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(66 * num125, 130 * Main.tileFrame[171], 64, 128)), new Microsoft.Xna.Framework.Color(255, 255, 255, 255), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
										}
									}
								}
								else if (type == 160 && !tile.halfBrick())
								{
									Microsoft.Xna.Framework.Color color10 = default(Microsoft.Xna.Framework.Color);
									color10 = new Microsoft.Xna.Framework.Color(Main.DiscoR, Main.DiscoG, Main.DiscoB, 255);
									if (tile.inActive())
									{
										color10 = tile.actColor(color10);
									}
									if (tile.slope() == 0)
									{
										Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), color10, 0f, default(Vector2), 1f, effects, 0f);
									}
									else if (tile.slope() > 2)
									{
										if (tile.slope() == 3)
										{
											for (int num126 = 0; num126 < 8; num126++)
											{
												int num127 = 2;
												int num128 = num126 * 2;
												int num129 = num126 * -2;
												int num130 = 16 - num126 * 2;
												if (Main.canDrawColorTile(j, i))
												{
													Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num128, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num126 * num127 + num129)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num128, (int)(num10 + 16) - num130, num127, num130)), color10, 0f, default(Vector2), 1f, effects, 0f);
												}
												else
												{
													Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num128, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num126 * num127 + num129)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num128, (int)(num10 + 16) - num130, num127, num130)), color10, 0f, default(Vector2), 1f, effects, 0f);
												}
											}
										}
										else
										{
											for (int num131 = 0; num131 < 8; num131++)
											{
												int num132 = 2;
												int num133 = 16 - num131 * num132 - num132;
												int num134 = 16 - num131 * num132;
												int num135 = num131 * -2;
												if (Main.canDrawColorTile(j, i))
												{
													Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num133, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num131 * num132 + num135)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num133, (int)(num10 + 16) - num134, num132, num134)), color10, 0f, default(Vector2), 1f, effects, 0f);
												}
												else
												{
													Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num133, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num131 * num132 + num135)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num133, (int)(num10 + 16) - num134, num132, num134)), color10, 0f, default(Vector2), 1f, effects, 0f);
												}
											}
										}
										if (Main.canDrawColorTile(j, i))
										{
											Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, 16, 2)), color10, 0f, default(Vector2), 1f, effects, 0f);
										}
										else
										{
											Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, 16, 2)), color10, 0f, default(Vector2), 1f, effects, 0f);
										}
									}
									else
									{
										if (tile.slope() == 1)
										{
											for (int num136 = 0; num136 < 8; num136++)
											{
												int num137 = 2;
												int num138 = num136 * 2;
												int height2 = 14 - num136 * num137;
												Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num138, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num136 * num137)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num138, (int)num10, num137, height2)), color10, 0f, default(Vector2), 1f, effects, 0f);
											}
										}
										if (tile.slope() == 2)
										{
											for (int num139 = 0; num139 < 8; num139++)
											{
												int num140 = 2;
												int num141 = 16 - num139 * num140 - num140;
												int height3 = 14 - num139 * num140;
												Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num141, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num139 * num140)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num141, (int)num10, num140, height3)), color10, 0f, default(Vector2), 1f, effects, 0f);
											}
										}
										if (Main.canDrawColorTile(j, i))
										{
											Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + 14)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 + 14), 16, 2)), color10, 0f, default(Vector2), 1f, effects, 0f);
										}
										else
										{
											Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + 14)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 + 14), 16, 2)), color10, 0f, default(Vector2), 1f, effects, 0f);
										}
									}
								}
								else if (tile.slope() > 0)
								{
									if (tile.inActive())
									{
										color = tile.actColor(color);
									}
									else if (Main.tileShine2[(int)type])
									{
										color = Main.shine(color, (int)type);
									}
									if (TileID.Sets.Platforms[(int)tile.type])
									{
										if (Main.canDrawColorTile(j, i))
										{
											Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
										}
										else
										{
											Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
										}
										if (tile.slope() == 1 && Main.tile[j + 1, i + 1].active() && Main.tile[j + 1, i + 1].slope() != 2 && !Main.tile[j + 1, i + 1].halfBrick() && !TileID.Sets.BlocksStairs[(int)Main.tile[j + 1, i + 1].type] && !TileID.Sets.BlocksStairsAbove[(int)Main.tile[j, i + 1].type])
										{
											if (TileID.Sets.Platforms[(int)Main.tile[j + 1, i + 1].type] && Main.tile[j + 1, i + 1].slope() == 0)
											{
												if (Main.canDrawColorTile(j, i))
												{
													Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + 16)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(324, (int)num10, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
												}
												else
												{
													Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + 16)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(324, (int)num10, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
												}
											}
											else if (Main.canDrawColorTile(j, i))
											{
												Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + 16)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(198, (int)num10, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
											}
											else
											{
												Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + 16)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(198, (int)num10, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
											}
										}
										else if (tile.slope() == 2 && Main.tile[j - 1, i + 1].active() && Main.tile[j - 1, i + 1].slope() != 1 && !Main.tile[j - 1, i + 1].halfBrick() && !TileID.Sets.BlocksStairs[(int)Main.tile[j - 1, i + 1].type] && !TileID.Sets.BlocksStairsAbove[(int)Main.tile[j, i + 1].type])
										{
											if (TileID.Sets.Platforms[(int)Main.tile[j - 1, i + 1].type] && Main.tile[j - 1, i + 1].slope() == 0)
											{
												if (Main.canDrawColorTile(j, i))
												{
													Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + 16)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(306, (int)num10, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
												}
												else
												{
													Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + 16)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(306, (int)num10, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
												}
											}
											else if (Main.canDrawColorTile(j, i))
											{
												Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + 16)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(162, (int)num10, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
											}
											else
											{
												Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + 16)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(162, (int)num10, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
											}
										}
									}
									else if (TileID.Sets.HasSlopeFrames[(int)tile.type])
									{
										if (Main.canDrawColorTile(j, i))
										{
											Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)num10 + num15, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
										}
										else
										{
											Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)num10 + num15, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
										}
									}
									else if (tile.slope() > 2)
									{
										if (tile.slope() == 3)
										{
											for (int num142 = 0; num142 < 8; num142++)
											{
												int num143 = 2;
												int num144 = num142 * 2;
												int num145 = num142 * -2;
												int num146 = 16 - num142 * 2;
												if (Main.canDrawColorTile(j, i))
												{
													Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num144, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num142 * num143 + num145)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num144 + num16, (int)(num10 + 16) - num146 + num15, num143, num146)), color, 0f, default(Vector2), 1f, effects, 0f);
												}
												else
												{
													Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num144, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num142 * num143 + num145)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num144 + num16, (int)(num10 + 16) - num146 + num15, num143, num146)), color, 0f, default(Vector2), 1f, effects, 0f);
												}
											}
										}
										else
										{
											for (int num147 = 0; num147 < 8; num147++)
											{
												int num148 = 2;
												int num149 = 16 - num147 * num148 - num148;
												int num150 = 16 - num147 * num148;
												int num151 = num147 * -2;
												if (Main.canDrawColorTile(j, i))
												{
													Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num149, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num147 * num148 + num151)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num149 + num16, (int)(num10 + 16) - num150 + num15, num148, num150)), color, 0f, default(Vector2), 1f, effects, 0f);
												}
												else
												{
													Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num149, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num147 * num148 + num151)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num149 + num16, (int)(num10 + 16) - num150 + num15, num148, num150)), color, 0f, default(Vector2), 1f, effects, 0f);
												}
											}
										}
										if (Main.canDrawColorTile(j, i))
										{
											Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)num10 + num15, 16, 2)), color, 0f, default(Vector2), 1f, effects, 0f);
										}
										else
										{
											Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)num10 + num15, 16, 2)), color, 0f, default(Vector2), 1f, effects, 0f);
										}
									}
									else
									{
										if (tile.slope() == 1)
										{
											for (int num152 = 0; num152 < 8; num152++)
											{
												int num153 = 2;
												int num154 = num152 * 2;
												int height4 = 14 - num152 * num153;
												if (Main.canDrawColorTile(j, i))
												{
													Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num154, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num152 * num153)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num154 + num16, (int)num10 + num15, num153, height4)), color, 0f, default(Vector2), 1f, effects, 0f);
												}
												else
												{
													Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num154, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num152 * num153)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num154 + num16, (int)num10 + num15, num153, height4)), color, 0f, default(Vector2), 1f, effects, 0f);
												}
											}
										}
										if (tile.slope() == 2)
										{
											for (int num155 = 0; num155 < 8; num155++)
											{
												int num156 = 2;
												int num157 = 16 - num155 * num156 - num156;
												int height5 = 14 - num155 * num156;
												if (Main.canDrawColorTile(j, i))
												{
													Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num157, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num155 * num156)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num157 + num16, (int)num10 + num15, num156, height5)), color, 0f, default(Vector2), 1f, effects, 0f);
												}
												else
												{
													Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num157, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num155 * num156)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num157 + num16, (int)num10 + num15, num156, height5)), color, 0f, default(Vector2), 1f, effects, 0f);
												}
											}
										}
										if (Main.canDrawColorTile(j, i))
										{
											Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + 14)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)(num10 + 14) + num15, 16, 2)), color, 0f, default(Vector2), 1f, effects, 0f);
										}
										else
										{
											Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + 14)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)(num10 + 14) + num15, 16, 2)), color, 0f, default(Vector2), 1f, effects, 0f);
										}
									}
								}
								else if (type == 129)
								{
									Vector2 value4 = new Vector2(0f, 0f);
									if (num10 < 36)
									{
										value4.Y += (float)(2 * (num10 == 0).ToDirectionInt());
									}
									else
									{
										value4.X += (float)(2 * (num10 == 36).ToDirectionInt());
									}
									Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero + value4, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(255, 255, 255, 100), 0f, default(Vector2), 1f, effects, 0f);
								}
								else if (Main.tileAlch[(int)type])
								{
									num12 = 20;
									num11 = 0;
									int num158 = (int)type;
									int num159 = (int)(num9 / 18);
									if (num158 > 82)
									{
										if (num159 == 0 && Main.dayTime)
										{
											num158 = 84;
										}
										if (num159 == 1 && !Main.dayTime)
										{
											num158 = 84;
										}
										if (num159 == 3 && !Main.dayTime && (Main.bloodMoon || Main.moonPhase == 0))
										{
											num158 = 84;
										}
										if (num159 == 4 && (Main.raining || Main.cloudAlpha > 0f))
										{
											num158 = 84;
										}
										if (num159 == 5 && !Main.raining && Main.time > 40500.0)
										{
											num158 = 84;
										}
									}
									if (num158 == 84)
									{
										if (num159 == 0 && Main.rand.Next(100) == 0)
										{
											int num160 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16 - 4)), 16, 16, 19, 0f, 0f, 160, default(Microsoft.Xna.Framework.Color), 0.1f);
											Dust expr_7410_cp_0 = Main.dust[num160];
											expr_7410_cp_0.velocity.X = expr_7410_cp_0.velocity.X / 2f;
											Dust expr_742E_cp_0 = Main.dust[num160];
											expr_742E_cp_0.velocity.Y = expr_742E_cp_0.velocity.Y / 2f;
											Main.dust[num160].noGravity = true;
											Main.dust[num160].fadeIn = 1f;
										}
										if (num159 == 1 && Main.rand.Next(100) == 0)
										{
											Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 41, 0f, 0f, 250, default(Microsoft.Xna.Framework.Color), 0.8f);
										}
										if (num159 == 3)
										{
											if (Main.rand.Next(200) == 0)
											{
												int num161 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 14, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 0.2f);
												Main.dust[num161].fadeIn = 1.2f;
											}
											if (Main.rand.Next(75) == 0)
											{
												int num162 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 27, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
												Dust expr_7571_cp_0 = Main.dust[num162];
												expr_7571_cp_0.velocity.X = expr_7571_cp_0.velocity.X / 2f;
												Dust expr_758F_cp_0 = Main.dust[num162];
												expr_758F_cp_0.velocity.Y = expr_758F_cp_0.velocity.Y / 2f;
											}
										}
										if (num159 == 4 && Main.rand.Next(150) == 0)
										{
											int num163 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 8, 16, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
											Dust expr_7604_cp_0 = Main.dust[num163];
											expr_7604_cp_0.velocity.X = expr_7604_cp_0.velocity.X / 3f;
											Dust expr_7622_cp_0 = Main.dust[num163];
											expr_7622_cp_0.velocity.Y = expr_7622_cp_0.velocity.Y / 3f;
											Dust expr_7640_cp_0 = Main.dust[num163];
											expr_7640_cp_0.velocity.Y = expr_7640_cp_0.velocity.Y - 0.7f;
											Main.dust[num163].alpha = 50;
											Main.dust[num163].scale *= 0.1f;
											Main.dust[num163].fadeIn = 0.9f;
											Main.dust[num163].noGravity = true;
										}
										if (num159 == 5)
										{
											if (Main.rand.Next(40) == 0)
											{
												int num164 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16 - 6)), 16, 16, 6, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1.5f);
												Dust expr_76F9_cp_0 = Main.dust[num164];
												expr_76F9_cp_0.velocity.Y = expr_76F9_cp_0.velocity.Y - 2f;
												Main.dust[num164].noGravity = true;
											}
											color.A = (byte)(Main.mouseTextColor / 2);
											color.G = Main.mouseTextColor;
											color.B = Main.mouseTextColor;
										}
										if (num159 == 6)
										{
											if (Main.rand.Next(30) == 0)
											{
												Microsoft.Xna.Framework.Color newColor = new Microsoft.Xna.Framework.Color(50, 255, 255, 255);
												int num165 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 43, 0f, 0f, 254, newColor, 0.5f);
												Main.dust[num165].velocity *= 0f;
											}
											byte b4 = (byte)((Main.mouseTextColor + color.G * 2) / 3);
											byte b5 = (byte)((Main.mouseTextColor + color.B * 2) / 3);
											if (b4 > color.G)
											{
												color.G = b4;
											}
											if (b5 > color.B)
											{
												color.B = b5;
											}
										}
									}
									if (Main.canDrawColorTile(j, i))
									{
										Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
									}
									else
									{
										this.LoadTiles(num158);
										Main.spriteBatch.Draw(Main.tileTexture[num158], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
									}
								}
								else if (type == 80)
								{
									bool flag13 = false;
									bool flag14 = false;
									bool flag15 = false;
									if (!Main.canDrawColorTile(j, i))
									{
										int num166 = j;
										if (num9 == 36)
										{
											num166--;
										}
										if (num9 == 54)
										{
											num166++;
										}
										if (num9 == 108)
										{
											if (num10 == 18)
											{
												num166--;
											}
											else
											{
												num166++;
											}
										}
										int num167 = i;
										bool flag16 = false;
										if (Main.tile[num166, num167].type == 80 && Main.tile[num166, num167].active())
										{
											flag16 = true;
										}
										while (!Main.tile[num166, num167].active() || !Main.tileSolid[(int)Main.tile[num166, num167].type] || !flag16)
										{
											if (Main.tile[num166, num167].type == 80 && Main.tile[num166, num167].active())
											{
												flag16 = true;
											}
											num167++;
											if (num167 > i + 20)
											{
												break;
											}
										}
										if (Main.tile[num166, num167].type == 112)
										{
											flag13 = true;
										}
										if (Main.tile[num166, num167].type == 116)
										{
											flag14 = true;
										}
										if (Main.tile[num166, num167].type == 234)
										{
											flag15 = true;
										}
									}
									if (flag13)
									{
										Main.spriteBatch.Draw(Main.evilCactusTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
									}
									else if (flag15)
									{
										Main.spriteBatch.Draw(Main.crimsonCactusTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
									}
									else if (flag14)
									{
										Main.spriteBatch.Draw(Main.goodCactusTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
									}
									else if (Main.canDrawColorTile(j, i))
									{
										Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
									}
									else
									{
										Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
									}
								}
								else if (type == 272 && !tile.halfBrick() && !Main.tile[j - 1, i].halfBrick() && !Main.tile[j + 1, i].halfBrick())
								{
									int num168 = Main.tileFrame[(int)type];
									num168 += j % 2;
									num168 += i % 2;
									num168 += j % 3;
									for (num168 += i % 3; num168 > 1; num168 -= 2)
									{
									}
									num168 *= 90;
									if (tile.inActive())
									{
										color = tile.actColor(color);
									}
									else if (Main.tileShine2[(int)type])
									{
										color = Main.shine(color, (int)type);
									}
									if (Main.canDrawColorTile(j, i))
									{
										Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10 + num168, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
									}
									else
									{
										Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10 + num168, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
									}
								}
								else
								{
									if (type == 160)
									{
										color = new Microsoft.Xna.Framework.Color(Main.DiscoR, Main.DiscoG, Main.DiscoB, 255);
									}
									if (type != 19 && type != 380 && Main.tileSolid[(int)type] && !TileID.Sets.NotReallySolid[(int)type] && !tile.halfBrick() && (Main.tile[j - 1, i].halfBrick() || Main.tile[j + 1, i].halfBrick()))
									{
										if (tile.inActive())
										{
											color = tile.actColor(color);
										}
										else if (Main.tileShine2[(int)type])
										{
											color = Main.shine(color, (int)type);
										}
										if (Main.tile[j - 1, i].halfBrick() && Main.tile[j + 1, i].halfBrick())
										{
											if (Main.canDrawColorTile(j, i))
											{
												Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + 8)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, num15 + (int)num10 + 8, num8, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
												Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(126 + num16, num15, 16, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
											}
											else
											{
												Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + 8)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, num15 + (int)num10 + 8, num8, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
												if (!Main.tile[j, i - 1].bottomSlope() && Main.tile[j, i - 1].type == type)
												{
													Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(90 + num16, num15, 16, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
												}
												else
												{
													Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(126 + num16, num15, 16, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
												}
											}
										}
										else if (Main.tile[j - 1, i].halfBrick())
										{
											if (Main.canDrawColorTile(j, i))
											{
												Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + 8)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, num15 + (int)num10 + 8, num8, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
												Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + 4f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)(num9 + 4) + num16, num15 + (int)num10, num8 - 4, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
												Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(126 + num16, num15, 4, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
											}
											else
											{
												Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + 8)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, num15 + (int)num10 + 8, num8, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
												Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + 4f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)(num9 + 4) + num16, num15 + (int)num10, num8 - 4, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
												Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(126 + num16, num15, 4, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
											}
										}
										else if (Main.tile[j + 1, i].halfBrick())
										{
											if (Main.canDrawColorTile(j, i))
											{
												Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + 8)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, num15 + (int)num10 + 8, num8, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
												Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, num15 + (int)num10, num8 - 4, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
												Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + 12f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(138 + num16, num15, 4, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
											}
											else
											{
												Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + 8)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, num15 + (int)num10 + 8, num8, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
												Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, num15 + (int)num10, num8 - 4, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
												Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + 12f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(138, 0, 4, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
											}
										}
										else if (Main.canDrawColorTile(j, i))
										{
											Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, num15 + (int)num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
										}
										else
										{
											Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, num15 + (int)num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
										}
									}
									else if (Lighting.lightMode < 2 && Main.tileSolid[(int)type] && type != 137 && type != 235 && type != 388 && !tile.halfBrick() && !tile.inActive())
									{
										if ((int)color.R > num || (double)color.G > (double)num * 1.1 || (double)color.B > (double)num * 1.2)
										{
											Lighting.GetColor9Slice(j, i, ref array);
											bool flag17 = tile.inActive();
											bool flag18 = Main.tileShine2[(int)type];
											Texture2D texture;
											if (Main.canDrawColorTile(j, i))
											{
												texture = Main.tileAltTexture[(int)type, (int)tile.color()];
											}
											else
											{
												texture = Main.tileTexture[(int)type];
											}
											for (int num169 = 0; num169 < 9; num169++)
											{
												int num170 = 0;
												int num171 = 0;
												int width = 4;
												int height6 = 4;
												switch (num169)
												{
												case 1:
													width = 8;
													num170 = 4;
													break;
												case 2:
													num170 = 12;
													break;
												case 3:
													height6 = 8;
													num171 = 4;
													break;
												case 4:
													width = 8;
													height6 = 8;
													num170 = 4;
													num171 = 4;
													break;
												case 5:
													num170 = 12;
													num171 = 4;
													height6 = 8;
													break;
												case 6:
													num171 = 12;
													break;
												case 7:
													width = 8;
													height6 = 4;
													num170 = 4;
													num171 = 12;
													break;
												case 8:
													num170 = 12;
													num171 = 12;
													break;
												}
												Microsoft.Xna.Framework.Color color11 = color;
												Microsoft.Xna.Framework.Color color12 = array[num169];
												color11.R = (byte)((color.R + color12.R) / 2);
												color11.G = (byte)((color.G + color12.G) / 2);
												color11.B = (byte)((color.B + color12.B) / 2);
												if (flag17)
												{
													color11 = tile.actColor(color11);
												}
												else if (flag18)
												{
													color11 = Main.shine(color11, (int)type);
												}
												Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num170, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num171)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num170 + num16, (int)num10 + num171 + num15, width, height6)), color11, 0f, default(Vector2), 1f, effects, 0f);
											}
										}
										else if ((int)color.R > num2 || (double)color.G > (double)num2 * 1.1 || (double)color.B > (double)num2 * 1.2)
										{
											Lighting.GetColor4Slice(j, i, ref array);
											bool flag19 = tile.inActive();
											bool flag20 = Main.tileShine2[(int)type];
											Texture2D texture;
											if (Main.canDrawColorTile(j, i))
											{
												texture = Main.tileAltTexture[(int)type, (int)tile.color()];
											}
											else
											{
												texture = Main.tileTexture[(int)type];
											}
											for (int num172 = 0; num172 < 4; num172++)
											{
												int num173 = 0;
												int num174 = 0;
												switch (num172)
												{
												case 1:
													num173 = 8;
													break;
												case 2:
													num174 = 8;
													break;
												case 3:
													num173 = 8;
													num174 = 8;
													break;
												}
												Microsoft.Xna.Framework.Color color13 = color;
												Microsoft.Xna.Framework.Color color14 = array[num172];
												color13.R = (byte)((color.R + color14.R) / 2);
												color13.G = (byte)((color.G + color14.G) / 2);
												color13.B = (byte)((color.B + color14.B) / 2);
												if (flag19)
												{
													color13 = tile.actColor(color13);
												}
												else if (flag20)
												{
													color13 = Main.shine(color13, (int)type);
												}
												Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num173, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num174)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num173 + num16, (int)num10 + num174 + num15, 8, 8)), color13, 0f, default(Vector2), 1f, effects, 0f);
											}
										}
										else
										{
											if (tile.inActive())
											{
												color = tile.actColor(color);
											}
											else if (Main.tileShine2[(int)type])
											{
												color = Main.shine(color, (int)type);
											}
											Texture2D texture;
											if (Main.canDrawColorTile(j, i))
											{
												texture = Main.tileAltTexture[(int)type, (int)tile.color()];
											}
											else
											{
												texture = Main.tileTexture[(int)type];
											}
											Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)num10 + num15, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
										}
									}
									else
									{
										if (Lighting.lightMode < 2 && Main.tileShine2[(int)type])
										{
											if (type == 21)
											{
												if (num9 >= 36 && num9 < 178)
												{
													color = Main.shine(color, (int)type);
												}
											}
											else if (!tile.inActive())
											{
												color = Main.shine(color, (int)type);
											}
										}
										if (tile.inActive())
										{
											color = tile.actColor(color);
										}
										if (type == 128 || type == 269)
										{
											int num175;
											for (num175 = (int)num9; num175 >= 100; num175 -= 100)
											{
											}
											Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num175, (int)num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
										}
										else if (type == 334)
										{
											int num176 = (int)num9;
											int num177 = 0;
											while (num176 >= 5000)
											{
												num176 -= 5000;
												num177++;
											}
											if (num177 != 0)
											{
												num176 = (num177 - 1) * 18;
											}
											Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num176, (int)num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
										}
										else if (type == 5)
										{
											int num178 = j;
											int num179 = i;
											if (num9 == 66 && num10 <= 45)
											{
												num178++;
											}
											if (num9 == 88 && num10 >= 66 && num10 <= 110)
											{
												num178--;
											}
											if (num9 == 22 && num10 >= 132)
											{
												num178--;
											}
											if (num9 == 44 && num10 >= 132)
											{
												num178++;
											}
											while (Main.tile[num178, num179].active() && Main.tile[num178, num179].type == 5)
											{
												num179++;
											}
											int treeVariant = Main.GetTreeVariant(num178, num179);
											if (treeVariant == -1)
											{
												if (Main.canDrawColorTile(j, i))
												{
													Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
												}
												else
												{
													Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
												}
											}
											else if (Main.canDrawColorTree(j, i, treeVariant))
											{
												Main.spriteBatch.Draw(Main.woodAltTexture[treeVariant, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
											}
											else
											{
												Main.spriteBatch.Draw(Main.woodTexture[treeVariant], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
											}
										}
										else if (type == 323)
										{
											int num180 = -1;
											int num181 = j;
											int num182 = i;
											while (Main.tile[num181, num182].active() && Main.tile[num181, num182].type == 323)
											{
												num182++;
											}
											if (Main.tile[num181, num182].active() && Main.tile[num181, num182].type == 53)
											{
												num180 = 0;
											}
											if (Main.tile[num181, num182].active() && Main.tile[num181, num182].type == 234)
											{
												num180 = 1;
											}
											if (Main.tile[num181, num182].active() && Main.tile[num181, num182].type == 116)
											{
												num180 = 2;
											}
											if (Main.tile[num181, num182].active() && Main.tile[num181, num182].type == 112)
											{
												num180 = 3;
											}
											int y2 = 22 * num180;
											int num183 = (int)num10;
											if (Main.canDrawColorTile(j, i))
											{
												Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num183, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, y2, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
											}
											else
											{
												Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num183, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, y2, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
											}
										}
										else
										{
											if (num14 == 8 && (!Main.tile[j, i + 1].active() || !Main.tileSolid[(int)Main.tile[j, i + 1].type] || Main.tile[j, i + 1].halfBrick()))
											{
												Texture2D texture;
												if (Main.canDrawColorTile(j, i))
												{
													texture = Main.tileAltTexture[(int)type, (int)tile.color()];
												}
												else
												{
													texture = Main.tileTexture[(int)type];
												}
												if (TileID.Sets.Platforms[(int)type])
												{
													Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num14)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)num10 + num15, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
												}
												else
												{
													Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num14)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)num10 + num15, num8, num12 - num14 - 4)), color, 0f, default(Vector2), 1f, effects, 0f);
													Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + 12)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(144 + num16, 66 + num15, num8, 4)), color, 0f, default(Vector2), 1f, effects, 0f);
												}
											}
											else
											{
												Texture2D texture;
												if (Main.canDrawColorTile(j, i))
												{
													texture = Main.tileAltTexture[(int)type, (int)tile.color()];
												}
												else
												{
													texture = Main.tileTexture[(int)type];
												}
												Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num14)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)num10 + num15, num8, num12 - num14)), color, 0f, default(Vector2), 1f, effects, 0f);
											}
											if (type == 27)
											{
												int num184 = 14;
												Main.spriteBatch.Draw(Main.FlameTexture[num184], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10 + num15, num8, num12)), new Microsoft.Xna.Framework.Color(255, 255, 255, 255), 0f, default(Vector2), 1f, effects, 0f);
											}
											if (type == 215 && num10 < 36)
											{
												int num185 = 15;
												Microsoft.Xna.Framework.Color color15 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
												if (num9 / 54 == 5)
												{
													color15 = new Microsoft.Xna.Framework.Color((float)Main.DiscoR / 255f, (float)Main.DiscoG / 255f, (float)Main.DiscoB / 255f, 0f);
												}
												Main.spriteBatch.Draw(Main.FlameTexture[num185], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10 + num15, num8, num12)), color15, 0f, default(Vector2), 1f, effects, 0f);
											}
											if (type == 286)
											{
												Main.spriteBatch.Draw(Main.glowSnailTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)num10 + num15, num8, num12)), new Microsoft.Xna.Framework.Color(75, 100, 255, 0), 0f, default(Vector2), 1f, effects, 0f);
											}
											if (type == 270)
											{
												Main.spriteBatch.Draw(Main.fireflyJarTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
											}
											if (type == 271)
											{
												Main.spriteBatch.Draw(Main.lightningbugJarTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
											}
											if (type == 316 || type == 317 || type == 318)
											{
												int num186 = j - (int)(num9 / 18);
												int num187 = i - (int)(num10 / 18);
												int num188 = num186 / 2 * (num187 / 3);
												num188 %= Main.cageFrames;
												Main.spriteBatch.Draw(Main.jellyfishBowlTexture[(int)(type - 316)], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)num10 + Main.jellyfishCageFrame[(int)(type - 316), num188] * 36, num8, num12)), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
											}
											if (type == 149 && num9 < 54)
											{
												Main.spriteBatch.Draw(Main.xmasLightTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
											}
											if (type == 300 || type == 302 || type == 303 || type == 306)
											{
												int num189 = 9;
												if (type == 302)
												{
													num189 = 10;
												}
												if (type == 303)
												{
													num189 = 11;
												}
												if (type == 306)
												{
													num189 = 12;
												}
												Main.spriteBatch.Draw(Main.FlameTexture[num189], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10 + num15, num8, num12)), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
											}
											else if (Main.tileFlame[(int)type])
											{
												ulong num190 = Main._tileFrameSeed ^ (ulong)((long)j << 32 | (long)((ulong)i));
												int num191 = (int)type;
												int num192 = 0;
												if (num191 == 4)
												{
													num192 = 0;
												}
												else if (num191 == 33 || num191 == 174)
												{
													num192 = 1;
												}
												else if (num191 == 100 || num191 == 173)
												{
													num192 = 2;
												}
												else if (num191 == 34)
												{
													num192 = 3;
												}
												else if (num191 == 93)
												{
													num192 = 4;
												}
												else if (num191 == 49)
												{
													num192 = 5;
												}
												else if (num191 == 372)
												{
													num192 = 16;
												}
												else if (num191 == 98)
												{
													num192 = 6;
												}
												else if (num191 == 35)
												{
													num192 = 7;
												}
												else if (num191 == 42)
												{
													num192 = 13;
												}
												if (num192 == 7)
												{
													for (int num193 = 0; num193 < 4; num193++)
													{
														float num194 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.15f;
														float num195 = (float)Utils.RandomInt(ref num190, -10, 10) * 0.15f;
														num194 = 0f;
														num195 = 0f;
														Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num194, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num195) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
													}
												}
												else if (num192 == 1)
												{
													int num196 = (int)(Main.tile[j, i].frameY / 22);
													if (num196 == 5 || num196 == 6 || num196 == 7 || num196 == 10)
													{
														for (int num197 = 0; num197 < 7; num197++)
														{
															float num198 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.075f;
															float num199 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.075f;
															Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num198, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num199) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
														}
													}
													else if (num196 == 8)
													{
														for (int num200 = 0; num200 < 7; num200++)
														{
															float num201 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.3f;
															float num202 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.3f;
															Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num201, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num202) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
														}
													}
													else if (num196 == 12)
													{
														for (int num203 = 0; num203 < 7; num203++)
														{
															float num204 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.1f;
															float num205 = (float)Utils.RandomInt(ref num190, -10, 1) * 0.15f;
															Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num204, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num205) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
														}
													}
													else if (num196 == 14)
													{
														for (int num206 = 0; num206 < 8; num206++)
														{
															float num207 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.1f;
															float num208 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.1f;
															Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num207, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num208) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
														}
													}
													else if (num196 == 16)
													{
														for (int num209 = 0; num209 < 4; num209++)
														{
															float num210 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.15f;
															float num211 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.15f;
															Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num210, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num211) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
														}
													}
													else if (num196 == 27 || num196 == 28)
													{
														Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
													}
													else
													{
														for (int num212 = 0; num212 < 7; num212++)
														{
															float num213 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.15f;
															float num214 = (float)Utils.RandomInt(ref num190, -10, 1) * 0.35f;
															Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num213, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num214) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(100, 100, 100, 0), 0f, default(Vector2), 1f, effects, 0f);
														}
													}
												}
												else if (num192 == 2)
												{
													int num215 = (int)(Main.tile[j, i].frameY / 36);
													if (num215 == 3)
													{
														for (int num216 = 0; num216 < 3; num216++)
														{
															float num217 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.05f;
															float num218 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.15f;
															Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num217, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num218) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
														}
													}
													else if (num215 == 6)
													{
														for (int num219 = 0; num219 < 5; num219++)
														{
															float num220 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.15f;
															float num221 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.15f;
															Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num220, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num221) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
														}
													}
													else if (num215 == 9)
													{
														for (int num222 = 0; num222 < 7; num222++)
														{
															float num223 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.3f;
															float num224 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.3f;
															Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num223, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num224) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(100, 100, 100, 0), 0f, default(Vector2), 1f, effects, 0f);
														}
													}
													else if (num215 == 11)
													{
														for (int num225 = 0; num225 < 7; num225++)
														{
															float num226 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.1f;
															float num227 = (float)Utils.RandomInt(ref num190, -10, 1) * 0.15f;
															Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num226, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num227) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
														}
													}
													else if (num215 == 13)
													{
														for (int num228 = 0; num228 < 8; num228++)
														{
															float num229 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.1f;
															float num230 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.1f;
															Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num229, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num230) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
														}
													}
													else if (num215 == 28 || num215 == 29)
													{
														Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
													}
													else
													{
														for (int num231 = 0; num231 < 7; num231++)
														{
															float num232 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.15f;
															float num233 = (float)Utils.RandomInt(ref num190, -10, 1) * 0.35f;
															Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num232, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num233) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(100, 100, 100, 0), 0f, default(Vector2), 1f, effects, 0f);
														}
													}
												}
												else if (num192 == 3)
												{
													int num234 = (int)(Main.tile[j, i].frameY / 54);
													if (num234 == 8)
													{
														for (int num235 = 0; num235 < 7; num235++)
														{
															float num236 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.075f;
															float num237 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.075f;
															Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num236, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num237) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
														}
													}
													else if (num234 == 9)
													{
														for (int num238 = 0; num238 < 3; num238++)
														{
															float num239 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.05f;
															float num240 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.15f;
															Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num239, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num240) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
														}
													}
													else if (num234 == 11)
													{
														for (int num241 = 0; num241 < 7; num241++)
														{
															float num242 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.3f;
															float num243 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.3f;
															Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num242, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num243) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
														}
													}
													else if (num234 == 15)
													{
														for (int num244 = 0; num244 < 7; num244++)
														{
															float num245 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.1f;
															float num246 = (float)Utils.RandomInt(ref num190, -10, 1) * 0.15f;
															Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num245, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num246) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
														}
													}
													else if (num234 == 17 || num234 == 20)
													{
														for (int num247 = 0; num247 < 7; num247++)
														{
															float num248 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.075f;
															float num249 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.075f;
															Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num248, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num249) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
														}
													}
													else if (num234 == 18)
													{
														for (int num250 = 0; num250 < 8; num250++)
														{
															float num251 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.1f;
															float num252 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.1f;
															Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num251, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num252) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
														}
													}
													else if (num234 == 34 || num234 == 35)
													{
														Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
													}
													else
													{
														for (int num253 = 0; num253 < 7; num253++)
														{
															float num254 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.15f;
															float num255 = (float)Utils.RandomInt(ref num190, -10, 1) * 0.35f;
															Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num254, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num255) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(100, 100, 100, 0), 0f, default(Vector2), 1f, effects, 0f);
														}
													}
												}
												else if (num192 == 4)
												{
													int num256 = (int)(Main.tile[j, i].frameY / 54);
													if (num256 == 1)
													{
														for (int num257 = 0; num257 < 3; num257++)
														{
															float num258 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.15f;
															float num259 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.15f;
															Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num258, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num259) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
														}
													}
													else if (num256 == 2 || num256 == 4)
													{
														for (int num260 = 0; num260 < 7; num260++)
														{
															float num261 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.075f;
															float num262 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.075f;
															Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num261, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num262) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
														}
													}
													else if (num256 == 3)
													{
														for (int num263 = 0; num263 < 7; num263++)
														{
															float num264 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.2f;
															float num265 = (float)Utils.RandomInt(ref num190, -20, 1) * 0.35f;
															Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num264, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num265) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(100, 100, 100, 0), 0f, default(Vector2), 1f, effects, 0f);
														}
													}
													else if (num256 == 5)
													{
														for (int num266 = 0; num266 < 7; num266++)
														{
															float num267 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.3f;
															float num268 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.3f;
															Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num267, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num268) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
														}
													}
													else if (num256 == 9)
													{
														for (int num269 = 0; num269 < 7; num269++)
														{
															float num270 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.1f;
															float num271 = (float)Utils.RandomInt(ref num190, -10, 1) * 0.15f;
															Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num270, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num271) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
														}
													}
													else if (num256 == 13)
													{
														for (int num272 = 0; num272 < 8; num272++)
														{
															float num273 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.1f;
															float num274 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.1f;
															Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num273, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num274) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
														}
													}
													else if (num256 == 12)
													{
														float num275 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.01f;
														float num276 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.01f;
														Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num275, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num276) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(Utils.RandomInt(ref num190, 90, 111), Utils.RandomInt(ref num190, 90, 111), Utils.RandomInt(ref num190, 90, 111), 0), 0f, default(Vector2), 1f, effects, 0f);
													}
													else if (num256 == 28 || num256 == 29)
													{
														Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
													}
													else
													{
														for (int num277 = 0; num277 < 7; num277++)
														{
															float num278 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.15f;
															float num279 = (float)Utils.RandomInt(ref num190, -10, 1) * 0.35f;
															Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num278, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num279) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(100, 100, 100, 0), 0f, default(Vector2), 1f, effects, 0f);
														}
													}
												}
												else if (num192 == 13)
												{
													int num280 = (int)(num10 / 36);
													if (num280 == 1 || num280 == 3 || num280 == 6 || num280 == 8 || num280 == 19 || num280 == 27 || num280 == 29 || num280 == 30 || num280 == 31 || num280 == 32 || num280 == 36)
													{
														for (int num281 = 0; num281 < 7; num281++)
														{
															float num282 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.15f;
															float num283 = (float)Utils.RandomInt(ref num190, -10, 1) * 0.35f;
															Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num282, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num283) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(100, 100, 100, 0), 0f, default(Vector2), 1f, effects, 0f);
														}
													}
													else if (num280 == 25 || num280 == 16 || num280 == 2)
													{
														for (int num284 = 0; num284 < 7; num284++)
														{
															float num285 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.15f;
															float num286 = (float)Utils.RandomInt(ref num190, -10, 1) * 0.1f;
															Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num285, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num286) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
														}
													}
													else if (num280 == 29)
													{
														for (int num287 = 0; num287 < 7; num287++)
														{
															float num288 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.15f;
															float num289 = (float)Utils.RandomInt(ref num190, -10, 1) * 0.15f;
															Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num288, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num289) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(25, 25, 25, 0), 0f, default(Vector2), 1f, effects, 0f);
														}
													}
													else if (num280 == 34 || num280 == 35)
													{
														Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
													}
												}
												else
												{
													for (int num290 = 0; num290 < 7; num290++)
													{
														Microsoft.Xna.Framework.Color color16 = new Microsoft.Xna.Framework.Color(100, 100, 100, 0);
														if (num10 / 22 == 14)
														{
															color16 = new Microsoft.Xna.Framework.Color((float)Main.DiscoR / 255f, (float)Main.DiscoG / 255f, (float)Main.DiscoB / 255f, 0f);
														}
														float num291 = (float)Utils.RandomInt(ref num190, -10, 11) * 0.15f;
														float num292 = (float)Utils.RandomInt(ref num190, -10, 1) * 0.35f;
														Main.spriteBatch.Draw(Main.FlameTexture[num192], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + num291, (float)(i * 16 - (int)Main.screenPosition.Y + num11) + num292) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), color16, 0f, default(Vector2), 1f, effects, 0f);
													}
												}
											}
											if (type == 144)
											{
												Main.spriteBatch.Draw(Main.timerTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
											}
											if (type == 237)
											{
												Main.spriteBatch.Draw(Main.sunAltarTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), new Microsoft.Xna.Framework.Color((int)(Main.mouseTextColor / 2), (int)(Main.mouseTextColor / 2), (int)(Main.mouseTextColor / 2), 0), 0f, default(Vector2), 1f, effects, 0f);
											}
										}
									}
								}
							}
							if (Main.tileGlowMask[(int)tile.type] != 0)
							{
								Texture2D texture = Main.glowMaskTexture[(int)Main.tileGlowMask[(int)tile.type]];
								double num293 = Main.time * 0.08;
								Microsoft.Xna.Framework.Color color17 = Microsoft.Xna.Framework.Color.White;
								if (tile.type == 350)
								{
									color17 = new Microsoft.Xna.Framework.Color(new Vector4((float)(-(float)Math.Cos(((int)(num293 / 6.283) % 3 == 1) ? num293 : 0.0) * 0.2 + 0.2)));
								}
								if (tile.type == 381)
								{
									color17 = color5;
								}
								if (tile.type == 370)
								{
									color17 = color4;
								}
								if (tile.type == 390)
								{
									color17 = color4;
								}
								if (tile.type == 391)
								{
									color17 = new Microsoft.Xna.Framework.Color(250, 250, 250, 200);
								}
								if (tile.type == 209)
								{
									color17 = PortalHelper.GetPortalColor(Main.myPlayer, (tile.frameX >= 288) ? 1 : 0);
								}
								if (tile.type == 429 || tile.type == 445)
								{
									if (Main.canDrawColorTile(j, i))
									{
										texture = Main.tileAltTexture[(int)type, (int)tile.color()];
									}
									else
									{
										texture = Main.tileTexture[(int)type];
									}
									num15 = 18;
								}
								if (tile.slope() == 0 && !tile.halfBrick())
								{
									Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)num10 + num15, num8, num12)), color17, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
								}
								else if (tile.halfBrick())
								{
									Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + 10)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)num10 + num15 + 10, num8, 6)), color17, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
								}
								else
								{
									byte b6 = tile.slope();
									for (int num294 = 0; num294 < 8; num294++)
									{
										int num295 = num294 << 1;
										Microsoft.Xna.Framework.Rectangle value5 = new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)num10 + num15 + num294 * 2, num295, 2);
										int num296 = 0;
										switch (b6)
										{
										case 2:
											value5.X = 16 - num295;
											num296 = 16 - num295;
											break;
										case 3:
											value5.Width = 16 - num295;
											break;
										case 4:
											value5.Width = 14 - num295;
											value5.X = num295 + 2;
											num296 = num295 + 2;
											break;
										}
										Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num296, (float)(i * 16 - (int)Main.screenPosition.Y + num294 * 2)) + zero, new Microsoft.Xna.Framework.Rectangle?(value5), color17, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
									}
								}
							}
							if (texture2D != null)
							{
								int num297 = 0;
								int num298 = 0;
								Main.spriteBatch.Draw(texture2D, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num297, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num298)) + zero, new Microsoft.Xna.Framework.Rectangle?(empty), color2, 0f, default(Vector2), 1f, effects, 0f);
							}
							if (texture2D2 != null)
							{
								empty2 = new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)num10 + num15, num8, num12);
								int num299 = 0;
								int num300 = 0;
								Main.spriteBatch.Draw(texture2D2, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num299, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num300)) + zero, new Microsoft.Xna.Framework.Rectangle?(empty2), transparent, 0f, default(Vector2), 1f, effects, 0f);
							}
						}
					}
				}
			}
			if (solidOnly)
			{
				this.DrawTileCracks(1);
			}
			for (int num301 = 0; num301 < num3; num301++)
			{
				int num302 = Main.specX[num301];
				int num303 = Main.specY[num301];
				Tile tile6 = Main.tile[num302, num303];
				ushort type4 = tile6.type;
				short frameX = tile6.frameX;
				short frameY = tile6.frameY;
				if (type4 == 237)
				{
					Main.spriteBatch.Draw(Main.sunOrbTexture, new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X) + (float)num8 / 2f, (float)(num303 * 16 - (int)Main.screenPosition.Y - 36)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.sunOrbTexture.Width, Main.sunOrbTexture.Height)), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, 0), Main.sunCircle, new Vector2((float)(Main.sunOrbTexture.Width / 2), (float)(Main.sunOrbTexture.Height / 2)), 1f, SpriteEffects.None, 0f);
				}
				if ((type4 == 128 || type4 == 269) && frameX >= 100)
				{
					int num304 = (int)(frameY / 18);
					int num305 = (int)frameX;
					int num306 = 0;
					while (num305 >= 100)
					{
						num306++;
						num305 -= 100;
					}
					int num307 = -4;
					SpriteEffects effects2 = SpriteEffects.FlipHorizontally;
					if (num305 >= 36)
					{
						effects2 = SpriteEffects.None;
						num307 = -4;
					}
					if (num304 == 0)
					{
						bool flag21 = false;
						int num308 = Player.SetMatch(0, num306, type4 == 128, ref flag21);
						if (num308 == -1)
						{
							num308 = num306;
						}
						this.LoadArmorHead(num308);
						Main.spriteBatch.Draw(Main.armorHeadTexture[num308], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X + num307), (float)(num303 * 16 - (int)Main.screenPosition.Y - 12)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, effects2, 0f);
					}
					else if (num304 == 1)
					{
						bool flag22 = false;
						int num309 = Player.SetMatch(1, num306, type4 == 128, ref flag22);
						if (num309 != -1)
						{
							this.LoadArmorLegs(num309);
							Main.spriteBatch.Draw(Main.armorLegTexture[num309], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X + num307), (float)(num303 * 16 - (int)Main.screenPosition.Y - 28)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, effects2, 0f);
						}
						this.LoadArmorBody(num306);
						if (type4 == 269)
						{
							Main.spriteBatch.Draw(Main.femaleBodyTexture[num306], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X + num307), (float)(num303 * 16 - (int)Main.screenPosition.Y - 28)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, effects2, 0f);
						}
						else
						{
							Main.spriteBatch.Draw(Main.armorBodyTexture[num306], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X + num307), (float)(num303 * 16 - (int)Main.screenPosition.Y - 28)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, effects2, 0f);
						}
						if (num306 >= 0 && num306 < 208 && ArmorIDs.Body.Sets.NeedsToDrawArm[num306])
						{
							Main.spriteBatch.Draw(Main.armorArmTexture[num306], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X + num307), (float)(num303 * 16 - (int)Main.screenPosition.Y - 28)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, effects2, 0f);
						}
					}
					else if (num304 == 2)
					{
						bool flag23 = false;
						int num310 = Player.SetMatch(2, num306, type4 == 128, ref flag23);
						if (num310 == -1)
						{
							num310 = num306;
						}
						this.LoadArmorLegs(num310);
						Main.spriteBatch.Draw(Main.armorLegTexture[num310], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X + num307), (float)(num303 * 16 - (int)Main.screenPosition.Y - 44)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, effects2, 0f);
					}
				}
				if (type4 == 334 && frameX >= 5000)
				{
					short arg_D4C2_0 = (short)(frameY / 18);
					int num311 = (int)frameX;
					int num312 = 0;
					int num313 = num311 % 5000;
					num313 -= 100;
					while (num311 >= 5000)
					{
						num312++;
						num311 -= 5000;
					}
					int num314 = (int)Main.tile[num302 + 1, num303].frameX;
					if (num314 >= 25000)
					{
						num314 -= 25000;
					}
					else
					{
						num314 -= 10000;
					}
					Item item = new Item();
					item.netDefaults(num313);
					item.Prefix(num314);
					Texture2D texture2D3 = Main.itemTexture[item.type];
					Microsoft.Xna.Framework.Rectangle value6;
					if (Main.itemAnimations[item.type] != null)
					{
						value6 = Main.itemAnimations[item.type].GetFrame(texture2D3);
					}
					else
					{
						value6 = texture2D3.Frame(1, 1, 0, 0);
					}
					int width2 = value6.Width;
					int height7 = value6.Height;
					float num315 = 1f;
					if (width2 > 40 || height7 > 40)
					{
						if (width2 > height7)
						{
							num315 = 40f / (float)width2;
						}
						else
						{
							num315 = 40f / (float)height7;
						}
					}
					num315 *= item.scale;
					SpriteEffects effects3 = SpriteEffects.None;
					if (num312 >= 3)
					{
						effects3 = SpriteEffects.FlipHorizontally;
					}
					Microsoft.Xna.Framework.Color color18 = Lighting.GetColor(num302, num303);
					Main.spriteBatch.Draw(texture2D3, new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X + 24), (float)(num303 * 16 - (int)Main.screenPosition.Y + 8)) + zero, new Microsoft.Xna.Framework.Rectangle?(value6), Lighting.GetColor(num302, num303), 0f, new Vector2((float)(width2 / 2), (float)(height7 / 2)), num315, effects3, 0f);
					if (item.color != default(Microsoft.Xna.Framework.Color))
					{
						Main.spriteBatch.Draw(texture2D3, new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X + 24), (float)(num303 * 16 - (int)Main.screenPosition.Y + 8)) + zero, new Microsoft.Xna.Framework.Rectangle?(value6), item.GetColor(color18), 0f, new Vector2((float)(width2 / 2), (float)(height7 / 2)), num315, effects3, 0f);
					}
				}
				if (type4 == 395)
				{
					TEItemFrame tEItemFrame = (TEItemFrame)TileEntity.ByPosition[new Point16(num302, num303)];
					Item item2 = tEItemFrame.item;
					Texture2D texture2D4 = Main.itemTexture[item2.type];
					Microsoft.Xna.Framework.Rectangle value7;
					if (Main.itemAnimations[item2.type] != null)
					{
						value7 = Main.itemAnimations[item2.type].GetFrame(texture2D4);
					}
					else
					{
						value7 = texture2D4.Frame(1, 1, 0, 0);
					}
					int width3 = value7.Width;
					int height8 = value7.Height;
					float num316 = 1f;
					if (width3 > 20 || height8 > 20)
					{
						if (width3 > height8)
						{
							num316 = 20f / (float)width3;
						}
						else
						{
							num316 = 20f / (float)height8;
						}
					}
					num316 *= item2.scale;
					SpriteEffects effects4 = SpriteEffects.None;
					Microsoft.Xna.Framework.Color color19 = Lighting.GetColor(num302, num303);
					Microsoft.Xna.Framework.Color color20 = color19;
					float num317 = 1f;
					ItemSlot.GetItemLight(ref color20, ref num317, item2, false);
					num316 *= num317;
					Main.spriteBatch.Draw(texture2D4, new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X + 16), (float)(num303 * 16 - (int)Main.screenPosition.Y + 16)) + zero, new Microsoft.Xna.Framework.Rectangle?(value7), color20, 0f, new Vector2((float)(width3 / 2), (float)(height8 / 2)), num316, effects4, 0f);
					if (item2.color != default(Microsoft.Xna.Framework.Color))
					{
						Main.spriteBatch.Draw(texture2D4, new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X + 16), (float)(num303 * 16 - (int)Main.screenPosition.Y + 16)) + zero, new Microsoft.Xna.Framework.Rectangle?(value7), item2.GetColor(color19), 0f, new Vector2((float)(width3 / 2), (float)(height8 / 2)), num316, effects4, 0f);
					}
				}
				if (type4 == 412)
				{
					Texture2D texture2D5 = Main.glowMaskTexture[202];
					int num318 = Main.tileFrame[(int)type4] / 60;
					int frameY2 = (num318 + 1) % 4;
					float num319 = (float)(Main.tileFrame[(int)type4] % 60) / 60f;
					Microsoft.Xna.Framework.Color value8 = new Microsoft.Xna.Framework.Color(255, 255, 255, 255);
					Main.spriteBatch.Draw(texture2D5, new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X), (float)(num303 * 16 - (int)Main.screenPosition.Y + 2)) + zero, new Microsoft.Xna.Framework.Rectangle?(texture2D5.Frame(1, 4, 0, num318)), value8 * (1f - num319), 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
					Main.spriteBatch.Draw(texture2D5, new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X), (float)(num303 * 16 - (int)Main.screenPosition.Y + 2)) + zero, new Microsoft.Xna.Framework.Rectangle?(texture2D5.Frame(1, 4, 0, frameY2)), value8 * num319, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
				}
				try
				{
					if (type4 == 5 && frameY >= 198 && frameX >= 22)
					{
						int num320 = 0;
						if (frameX == 22)
						{
							if (frameY == 220)
							{
								num320 = 1;
							}
							else if (frameY == 242)
							{
								num320 = 2;
							}
							int num321 = 0;
							int num322 = 80;
							int num323 = 80;
							int num324 = 32;
							int num325 = 0;
							int num326 = num303;
							while (num326 < num303 + 100)
							{
								if (Main.tile[num302, num326].type == 2)
								{
									num321 = Main.GetTreeStyle(num302);
									break;
								}
								if (Main.tile[num302, num326].type == 23)
								{
									num321 = 1;
									break;
								}
								if (Main.tile[num302, num326].type == 70)
								{
									num321 = 14;
									break;
								}
								if (Main.tile[num302, num326].type == 60)
								{
									num321 = 2;
									if (WorldGen.jungleBG == 1)
									{
										num321 = 11;
									}
									if ((double)num326 > Main.worldSurface)
									{
										num321 = 13;
									}
									num322 = 114;
									num323 = 96;
									num324 = 48;
									break;
								}
								if (Main.tile[num302, num326].type == 147)
								{
									num321 = 4;
									if (WorldGen.snowBG == 0)
									{
										num321 = 12;
										if (num302 % 10 == 0)
										{
											num321 = 18;
										}
									}
									if (WorldGen.snowBG != 2 && WorldGen.snowBG != 3 && WorldGen.snowBG != 32 && WorldGen.snowBG != 4 && WorldGen.snowBG != 42)
									{
										break;
									}
									if (WorldGen.snowBG % 2 == 0)
									{
										if (num302 < Main.maxTilesX / 2)
										{
											num321 = 16;
											break;
										}
										num321 = 17;
										break;
									}
									else
									{
										if (num302 > Main.maxTilesX / 2)
										{
											num321 = 16;
											break;
										}
										num321 = 17;
										break;
									}
								}
								else
								{
									if (Main.tile[num302, num326].type == 199)
									{
										num321 = 5;
										break;
									}
									if (Main.tile[num302, num326].type == 109)
									{
										num321 = 3;
										num323 = 140;
										if (num302 % 3 == 1)
										{
											num320 += 3;
											break;
										}
										if (num302 % 3 == 2)
										{
											num320 += 6;
											break;
										}
										break;
									}
									else
									{
										num326++;
									}
								}
							}
							if (num321 == 14)
							{
								float num327 = (float)Main.rand.Next(28, 42) * 0.005f;
								num327 += (float)(270 - (int)Main.mouseTextColor) / 1000f;
								Lighting.AddLight(num302, num303, 0.1f, 0.2f + num327 / 2f, 0.7f + num327);
							}
							if (tile6.color() > 0)
							{
								Main.checkTreeAlt[num321, (int)tile6.color()] = true;
							}
							if (tile6.color() > 0 && Main.treeAltTextureDrawn[num321, (int)tile6.color()])
							{
								Main.spriteBatch.Draw(Main.treeTopAltTexture[num321, (int)tile6.color()], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X - num324), (float)(num303 * 16 - (int)Main.screenPosition.Y - num323 + 16 + num325)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num320 * (num322 + 2), 0, num322, num323)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
							else
							{
								Main.spriteBatch.Draw(Main.treeTopTexture[num321], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X - num324), (float)(num303 * 16 - (int)Main.screenPosition.Y - num323 + 16 + num325)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num320 * (num322 + 2), 0, num322, num323)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
						}
						else if (frameX == 44)
						{
							if (frameY == 220)
							{
								num320 = 1;
							}
							else if (frameY == 242)
							{
								num320 = 2;
							}
							int num328 = 0;
							int num329 = num303;
							while (num329 < num303 + 100)
							{
								if (Main.tile[num302 + 1, num329].type == 2)
								{
									num328 = Main.GetTreeStyle(num302 + 1);
									break;
								}
								if (Main.tile[num302 + 1, num329].type == 23)
								{
									num328 = 1;
									break;
								}
								if (Main.tile[num302 + 1, num329].type == 70)
								{
									num328 = 14;
									break;
								}
								if (Main.tile[num302 + 1, num329].type == 60)
								{
									num328 = 2;
									if ((double)num329 > Main.worldSurface)
									{
										num328 = 13;
										break;
									}
									break;
								}
								else if (Main.tile[num302 + 1, num329].type == 147)
								{
									num328 = 4;
									if (WorldGen.snowBG == 0)
									{
										num328 = 12;
										break;
									}
									break;
								}
								else
								{
									if (Main.tile[num302 + 1, num329].type == 199)
									{
										num328 = 5;
										break;
									}
									if (Main.tile[num302 + 1, num329].type == 109)
									{
										num328 = 3;
										if (num302 % 3 == 1)
										{
											num320 += 3;
											break;
										}
										if (num302 % 3 == 2)
										{
											num320 += 6;
											break;
										}
										break;
									}
									else
									{
										num329++;
									}
								}
							}
							if (num328 == 14)
							{
								float num330 = (float)Main.rand.Next(28, 42) * 0.005f;
								num330 += (float)(270 - (int)Main.mouseTextColor) / 1000f;
								Lighting.AddLight(num302, num303, 0.1f, 0.2f + num330 / 2f, 0.7f + num330);
							}
							if (tile6.color() > 0)
							{
								Main.checkTreeAlt[num328, (int)tile6.color()] = true;
							}
							if (tile6.color() > 0 && Main.treeAltTextureDrawn[num328, (int)tile6.color()])
							{
								Main.spriteBatch.Draw(Main.treeBranchAltTexture[num328, (int)tile6.color()], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X - 24), (float)(num303 * 16 - (int)Main.screenPosition.Y - 12)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num320 * 42, 40, 40)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
							else
							{
								Main.spriteBatch.Draw(Main.treeBranchTexture[num328], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X - 24), (float)(num303 * 16 - (int)Main.screenPosition.Y - 12)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num320 * 42, 40, 40)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
						}
						else if (frameX == 66)
						{
							if (frameY == 220)
							{
								num320 = 1;
							}
							else if (frameY == 242)
							{
								num320 = 2;
							}
							int num331 = 0;
							int num332 = num303;
							while (num332 < num303 + 100)
							{
								if (Main.tile[num302 - 1, num332].type == 2)
								{
									num331 = Main.GetTreeStyle(num302 - 1);
									break;
								}
								if (Main.tile[num302 - 1, num332].type == 23)
								{
									num331 = 1;
									break;
								}
								if (Main.tile[num302 - 1, num332].type == 70)
								{
									num331 = 14;
									break;
								}
								if (Main.tile[num302 - 1, num332].type == 60)
								{
									num331 = 2;
									if ((double)num332 > Main.worldSurface)
									{
										num331 = 13;
										break;
									}
									break;
								}
								else if (Main.tile[num302 - 1, num332].type == 147)
								{
									num331 = 4;
									if (WorldGen.snowBG == 0)
									{
										num331 = 12;
										break;
									}
									break;
								}
								else
								{
									if (Main.tile[num302 - 1, num332].type == 199)
									{
										num331 = 5;
										break;
									}
									if (Main.tile[num302 - 1, num332].type == 109)
									{
										num331 = 3;
										if (num302 % 3 == 1)
										{
											num320 += 3;
											break;
										}
										if (num302 % 3 == 2)
										{
											num320 += 6;
											break;
										}
										break;
									}
									else
									{
										num332++;
									}
								}
							}
							if (num331 == 14)
							{
								float num333 = (float)Main.rand.Next(28, 42) * 0.005f;
								num333 += (float)(270 - (int)Main.mouseTextColor) / 1000f;
								Lighting.AddLight(num302, num303, 0.1f, 0.2f + num333 / 2f, 0.7f + num333);
							}
							if (tile6.color() > 0)
							{
								Main.checkTreeAlt[num331, (int)tile6.color()] = true;
							}
							if (tile6.color() > 0 && Main.treeAltTextureDrawn[num331, (int)tile6.color()])
							{
								Main.spriteBatch.Draw(Main.treeBranchAltTexture[num331, (int)tile6.color()], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X), (float)(num303 * 16 - (int)Main.screenPosition.Y - 12)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(42, num320 * 42, 40, 40)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
							else
							{
								Main.spriteBatch.Draw(Main.treeBranchTexture[num331], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X), (float)(num303 * 16 - (int)Main.screenPosition.Y - 12)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(42, num320 * 42, 40, 40)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
						}
					}
					if (type4 == 323 && frameX >= 88 && frameX <= 132)
					{
						int num334 = 0;
						if (frameX == 110)
						{
							num334 = 1;
						}
						else if (frameX == 132)
						{
							num334 = 2;
						}
						int num335 = 15;
						int num336 = 0;
						int num337 = 80;
						int num338 = 80;
						int num339 = 32;
						int num340 = 0;
						for (int num341 = num303; num341 < num303 + 100; num341++)
						{
							if (Main.tile[num302, num341].type == 53)
							{
								num336 = 0;
								break;
							}
							if (Main.tile[num302, num341].type == 234)
							{
								num336 = 1;
								break;
							}
							if (Main.tile[num302, num341].type == 116)
							{
								num336 = 2;
								break;
							}
							if (Main.tile[num302, num341].type == 112)
							{
								num336 = 3;
								break;
							}
						}
						int frameY3 = (int)Main.tile[num302, num303].frameY;
						int y3 = num336 * 82;
						if (tile6.color() > 0)
						{
							Main.checkTreeAlt[num335, (int)tile6.color()] = true;
						}
						if (tile6.color() > 0 && Main.treeAltTextureDrawn[num335, (int)tile6.color()])
						{
							Main.spriteBatch.Draw(Main.treeTopAltTexture[num335, (int)tile6.color()], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X - num339 + frameY3), (float)(num303 * 16 - (int)Main.screenPosition.Y - num338 + 16 + num340)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num334 * (num337 + 2), y3, num337, num338)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						}
						else
						{
							Main.spriteBatch.Draw(Main.treeTopTexture[num335], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X - num339 + frameY3), (float)(num303 * 16 - (int)Main.screenPosition.Y - num338 + 16 + num340)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num334 * (num337 + 2), y3, num337, num338)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						}
					}
				}
				catch
				{
				}
			}
			if (TileObject.objectPreview.Active && Main.player[Main.myPlayer].showItemIcon && Main.placementPreview && !CaptureManager.Instance.Active)
			{
				this.LoadTiles((int)TileObject.objectPreview.Type);
				TileObject.DrawPreview(Main.spriteBatch, TileObject.objectPreview, Main.screenPosition - zero);
			}
			if (solidOnly)
			{
				TimeLogger.DrawTime(0, stopwatch.Elapsed.TotalMilliseconds);
				return;
			}
			TimeLogger.DrawTime(1, stopwatch.Elapsed.TotalMilliseconds);
		}

		private void DrawSpecialTilesDeprecated(Vector2 offSet, int specTop)
		{
			for (int i = Main.specX.Length - 1; i > specTop; i--)
			{
				int num = Main.specX[i];
				int num2 = Main.specY[i];
				Tile tile = Main.tile[num, num2];
				ushort type = tile.type;
				short frameX = tile.frameX;
				short frameY = tile.frameY;
				if ((type == 128 || type == 269) && frameX >= 100)
				{
					int num3 = (int)(frameY / 18);
					int j = (int)frameX;
					int num4 = 0;
					while (j >= 100)
					{
						num4++;
						j -= 100;
					}
					int num5 = -4;
					SpriteEffects effects = SpriteEffects.FlipHorizontally;
					if (j >= 36)
					{
						effects = SpriteEffects.None;
						num5 = -4;
					}
					if (num3 == 0)
					{
						this.LoadArmorHead(num4);
						Main.spriteBatch.Draw(Main.armorHeadTexture[num4], new Vector2((float)(num * 16 - (int)Main.screenPosition.X + num5), (float)(num2 * 16 - (int)Main.screenPosition.Y - 12)) + offSet, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 36)), Lighting.GetColor(num, num2), 0f, default(Vector2), 1f, effects, 0f);
					}
					else if (num3 == 1)
					{
						bool flag = false;
						int num6 = Player.SetMatch(1, num4, type != 128, ref flag);
						if (num6 != -1)
						{
							this.LoadArmorLegs(num6);
							Main.spriteBatch.Draw(Main.armorLegTexture[num6], new Vector2((float)(num * 16 - (int)Main.screenPosition.X + num5), (float)(num2 * 16 - (int)Main.screenPosition.Y - 28)) + offSet, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54)), Lighting.GetColor(num, num2), 0f, default(Vector2), 1f, effects, 0f);
						}
						this.LoadArmorBody(num4);
						if (type == 269)
						{
							Main.spriteBatch.Draw(Main.femaleBodyTexture[num4], new Vector2((float)(num * 16 - (int)Main.screenPosition.X + num5), (float)(num2 * 16 - (int)Main.screenPosition.Y - 28)) + offSet, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54)), Lighting.GetColor(num, num2), 0f, default(Vector2), 1f, effects, 0f);
						}
						else
						{
							Main.spriteBatch.Draw(Main.armorBodyTexture[num4], new Vector2((float)(num * 16 - (int)Main.screenPosition.X + num5), (float)(num2 * 16 - (int)Main.screenPosition.Y - 28)) + offSet, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54)), Lighting.GetColor(num, num2), 0f, default(Vector2), 1f, effects, 0f);
						}
					}
					else if (num3 == 2)
					{
						int num7 = num4;
						switch (num7)
						{
						case 83:
							if (type == 128)
							{
								num7 = 117;
							}
							break;
						case 84:
							if (type == 128)
							{
								num7 = 120;
							}
							break;
						}
						this.LoadArmorLegs(num7);
						Main.spriteBatch.Draw(Main.armorLegTexture[num7], new Vector2((float)(num * 16 - (int)Main.screenPosition.X + num5), (float)(num2 * 16 - (int)Main.screenPosition.Y - 44)) + offSet, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54)), Lighting.GetColor(num, num2), 0f, default(Vector2), 1f, effects, 0f);
					}
				}
			}
		}

		protected void DrawGoreBehind()
		{
			for (int i = 0; i < 500; i++)
			{
				if (Main.gore[i].active && Main.gore[i].type > 0)
				{
					bool flag = false;
					if (((Main.gore[i].type >= 706 && Main.gore[i].type <= 717) || Main.gore[i].type == 943) && (Main.gore[i].frame < 7 || Main.gore[i].frame > 9))
					{
						flag = true;
					}
					if (flag)
					{
						this.LoadGore(Main.gore[i].type);
						if (Main.gore[i].numFrames > 1)
						{
							int num = Main.goreTexture[Main.gore[i].type].Height / (int)Main.gore[i].numFrames;
							Microsoft.Xna.Framework.Color alpha = Main.gore[i].GetAlpha(Lighting.GetColor((int)((double)Main.gore[i].position.X + (double)Main.goreTexture[Main.gore[i].type].Width * 0.5) / 16, (int)(((double)Main.gore[i].position.Y + (double)num * 0.5) / 16.0)));
							Main.spriteBatch.Draw(Main.goreTexture[Main.gore[i].type], new Vector2(Main.gore[i].position.X - Main.screenPosition.X + (float)(Main.goreTexture[Main.gore[i].type].Width / 2), Main.gore[i].position.Y - Main.screenPosition.Y + (float)(num / 2) - 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num * (int)Main.gore[i].frame, Main.goreTexture[Main.gore[i].type].Width, num)), alpha, Main.gore[i].rotation, new Vector2((float)(Main.goreTexture[Main.gore[i].type].Width / 2), (float)(num / 2)), Main.gore[i].scale, SpriteEffects.None, 0f);
						}
						else
						{
							Microsoft.Xna.Framework.Color alpha2 = Main.gore[i].GetAlpha(Lighting.GetColor((int)((double)Main.gore[i].position.X + (double)Main.goreTexture[Main.gore[i].type].Width * 0.5) / 16, (int)(((double)Main.gore[i].position.Y + (double)Main.goreTexture[Main.gore[i].type].Height * 0.5) / 16.0)));
							Main.spriteBatch.Draw(Main.goreTexture[Main.gore[i].type], new Vector2(Main.gore[i].position.X - Main.screenPosition.X + (float)(Main.goreTexture[Main.gore[i].type].Width / 2), Main.gore[i].position.Y - Main.screenPosition.Y + (float)(Main.goreTexture[Main.gore[i].type].Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.goreTexture[Main.gore[i].type].Width, Main.goreTexture[Main.gore[i].type].Height)), alpha2, Main.gore[i].rotation, new Vector2((float)(Main.goreTexture[Main.gore[i].type].Width / 2), (float)(Main.goreTexture[Main.gore[i].type].Height / 2)), Main.gore[i].scale, SpriteEffects.None, 0f);
						}
					}
				}
			}
		}

		protected void DrawGore()
		{
			Main.drawBackGore = false;
			for (int i = 0; i < 500; i++)
			{
				if (Main.gore[i].active && Main.gore[i].type > 0)
				{
					if (((Main.gore[i].type >= 706 && Main.gore[i].type <= 717) || Main.gore[i].type == 943) && (Main.gore[i].frame < 7 || Main.gore[i].frame > 9))
					{
						Main.drawBackGore = true;
					}
					else
					{
						this.LoadGore(Main.gore[i].type);
						if (Main.gore[i].numFrames > 1)
						{
							int num = Main.goreTexture[Main.gore[i].type].Height / (int)Main.gore[i].numFrames;
							Microsoft.Xna.Framework.Color alpha = Main.gore[i].GetAlpha(Lighting.GetColor((int)((double)Main.gore[i].position.X + (double)Main.goreTexture[Main.gore[i].type].Width * 0.5) / 16, (int)(((double)Main.gore[i].position.Y + (double)num * 0.5) / 16.0)));
							Main.spriteBatch.Draw(Main.goreTexture[Main.gore[i].type], new Vector2(Main.gore[i].position.X - Main.screenPosition.X + (float)(Main.goreTexture[Main.gore[i].type].Width / 2), Main.gore[i].position.Y - Main.screenPosition.Y + (float)(num / 2) - 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num * (int)Main.gore[i].frame, Main.goreTexture[Main.gore[i].type].Width, num)), alpha, Main.gore[i].rotation, new Vector2((float)(Main.goreTexture[Main.gore[i].type].Width / 2), (float)(num / 2)), Main.gore[i].scale, SpriteEffects.None, 0f);
						}
						else
						{
							Microsoft.Xna.Framework.Color alpha2 = Main.gore[i].GetAlpha(Lighting.GetColor((int)((double)Main.gore[i].position.X + (double)Main.goreTexture[Main.gore[i].type].Width * 0.5) / 16, (int)(((double)Main.gore[i].position.Y + (double)Main.goreTexture[Main.gore[i].type].Height * 0.5) / 16.0)));
							Main.spriteBatch.Draw(Main.goreTexture[Main.gore[i].type], new Vector2(Main.gore[i].position.X - Main.screenPosition.X + (float)(Main.goreTexture[Main.gore[i].type].Width / 2), Main.gore[i].position.Y - Main.screenPosition.Y + (float)(Main.goreTexture[Main.gore[i].type].Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.goreTexture[Main.gore[i].type].Width, Main.goreTexture[Main.gore[i].type].Height)), alpha2, Main.gore[i].rotation, new Vector2((float)(Main.goreTexture[Main.gore[i].type].Width / 2), (float)(Main.goreTexture[Main.gore[i].type].Height / 2)), Main.gore[i].scale, SpriteEffects.None, 0f);
						}
					}
				}
			}
			TimeLogger.DetailedDrawTime(24);
		}

		protected void DrawHealthBar(float X, float Y, int Health, int MaxHealth, float alpha, float scale = 1f)
		{
			if (Health <= 0)
			{
				return;
			}
			float num = (float)Health / (float)MaxHealth;
			if (num > 1f)
			{
				num = 1f;
			}
			int num2 = (int)(36f * num);
			float num3 = X - 18f * scale;
			float num4 = Y;
			if (Main.player[Main.myPlayer].gravDir == -1f)
			{
				num4 -= Main.screenPosition.Y;
				num4 = Main.screenPosition.Y + (float)Main.screenHeight - num4;
			}
			float num5 = 0f;
			float num6 = 255f;
			num -= 0.1f;
			float num7;
			float num8;
			if ((double)num > 0.5)
			{
				num7 = 255f;
				num8 = 255f * (1f - num) * 2f;
			}
			else
			{
				num7 = 255f * num * 2f;
				num8 = 255f;
			}
			float num9 = 0.95f;
			num8 = num8 * alpha * num9;
			num7 = num7 * alpha * num9;
			num6 = num6 * alpha * num9;
			if (num8 < 0f)
			{
				num8 = 0f;
			}
			if (num8 > 255f)
			{
				num8 = 255f;
			}
			if (num7 < 0f)
			{
				num7 = 0f;
			}
			if (num7 > 255f)
			{
				num7 = 255f;
			}
			if (num6 < 0f)
			{
				num6 = 0f;
			}
			if (num6 > 255f)
			{
				num6 = 255f;
			}
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color((int)((byte)num8), (int)((byte)num7), (int)((byte)num5), (int)((byte)num6));
			if (num2 < 3)
			{
				num2 = 3;
			}
			if (num2 < 34)
			{
				if (num2 < 36)
				{
					Main.spriteBatch.Draw(Main.hbTexture2, new Vector2(num3 - Main.screenPosition.X + (float)num2 * scale, num4 - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(2, 0, 2, Main.hbTexture2.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
				}
				if (num2 < 34)
				{
					Main.spriteBatch.Draw(Main.hbTexture2, new Vector2(num3 - Main.screenPosition.X + (float)(num2 + 2) * scale, num4 - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num2 + 2, 0, 36 - num2 - 2, Main.hbTexture2.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
				}
				if (num2 > 2)
				{
					Main.spriteBatch.Draw(Main.hbTexture1, new Vector2(num3 - Main.screenPosition.X, num4 - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, num2 - 2, Main.hbTexture1.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
				}
				Main.spriteBatch.Draw(Main.hbTexture1, new Vector2(num3 - Main.screenPosition.X + (float)(num2 - 2) * scale, num4 - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(32, 0, 2, Main.hbTexture1.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
				return;
			}
			if (num2 < 36)
			{
				Main.spriteBatch.Draw(Main.hbTexture2, new Vector2(num3 - Main.screenPosition.X + (float)num2 * scale, num4 - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num2, 0, 36 - num2, Main.hbTexture2.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
			}
			Main.spriteBatch.Draw(Main.hbTexture1, new Vector2(num3 - Main.screenPosition.X, num4 - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, num2, Main.hbTexture1.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
		}

		public static float NPCAddHeight(int i)
		{
			float num = 0f;
			if (Main.npc[i].type == 125)
			{
				num = 30f;
			}
			else if (Main.npc[i].type == 54)
			{
				num = 2f;
			}
			else if (Main.npc[i].type == 205)
			{
				num = 8f;
			}
			else if (Main.npc[i].type == 182)
			{
				num = 24f;
			}
			else if (Main.npc[i].type == 178)
			{
				num = 2f;
			}
			else if (Main.npc[i].type == 126)
			{
				num = 30f;
			}
			else if (Main.npc[i].type == 6 || Main.npc[i].type == 173)
			{
				num = 26f;
			}
			else if (Main.npc[i].type == 94)
			{
				num = 14f;
			}
			else if (Main.npc[i].type == 7 || Main.npc[i].type == 8 || Main.npc[i].type == 9)
			{
				num = 13f;
			}
			else if (Main.npc[i].type == 98 || Main.npc[i].type == 99 || Main.npc[i].type == 100)
			{
				num = 13f;
			}
			else if (Main.npc[i].type == 95 || Main.npc[i].type == 96 || Main.npc[i].type == 97)
			{
				num = 13f;
			}
			else if (Main.npc[i].type == 10 || Main.npc[i].type == 11 || Main.npc[i].type == 12)
			{
				num = 8f;
			}
			else if (Main.npc[i].type == 13 || Main.npc[i].type == 14 || Main.npc[i].type == 15)
			{
				num = 26f;
			}
			else if (Main.npc[i].type == 175)
			{
				num = 4f;
			}
			else if (Main.npc[i].type == 520)
			{
				num = 2f;
			}
			else if (Main.npc[i].type >= 412 && Main.npc[i].type <= 414)
			{
				num = 18f;
			}
			else if (Main.npc[i].type == 48)
			{
				num = 32f;
			}
			else if (Main.npc[i].type == 49 || Main.npc[i].type == 51)
			{
				num = 4f;
			}
			else if (Main.npc[i].type == 60)
			{
				num = 10f;
			}
			else if (Main.npc[i].type == 62 || Main.npc[i].type == 66 || Main.npc[i].type == 156)
			{
				num = 14f;
			}
			else if (Main.npc[i].type == 63 || Main.npc[i].type == 64 || Main.npc[i].type == 103)
			{
				num = 4f;
			}
			else if (Main.npc[i].type == 65)
			{
				num = 14f;
			}
			else if (Main.npc[i].type == 69)
			{
				num = 4f;
			}
			else if (Main.npc[i].type == 70)
			{
				num = -4f;
			}
			else if (Main.npc[i].type == 72)
			{
				num = -2f;
			}
			else if (Main.npc[i].type == 83 || Main.npc[i].type == 84)
			{
				num = 20f;
			}
			else if (Main.npc[i].type == 150 || Main.npc[i].type == 151 || Main.npc[i].type == 158)
			{
				num = 10f;
			}
			else if (Main.npc[i].type == 152)
			{
				num = 6f;
			}
			else if (Main.npc[i].type == 153 || Main.npc[i].type == 154)
			{
				num = 4f;
			}
			else if (Main.npc[i].type == 165 || Main.npc[i].type == 237 || Main.npc[i].type == 238 || Main.npc[i].type == 240 || Main.npc[i].type == 531)
			{
				num = 10f;
			}
			else if (Main.npc[i].type == 39 || Main.npc[i].type == 40 || Main.npc[i].type == 41)
			{
				num = 26f;
			}
			else if (Main.npc[i].type >= 87 && Main.npc[i].type <= 92)
			{
				num = 56f;
			}
			else if (Main.npc[i].type >= 134 && Main.npc[i].type <= 136)
			{
				num = 30f;
			}
			else if (Main.npc[i].type == 169)
			{
				num = 8f;
			}
			else if (Main.npc[i].type == 174)
			{
				num = 6f;
			}
			else if (Main.npc[i].type == 369)
			{
				num = 2f;
			}
			else if (Main.npc[i].type == 376)
			{
				num = 6f;
			}
			else if (Main.npc[i].type == 579)
			{
				num = -2f;
			}
			if (Main.npc[i].townNPC && Main.npc[i].ai[0] == 5f)
			{
				num -= 4f;
			}
			return num * Main.npc[i].scale;
		}

		protected void DrawProjectiles()
		{
			Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, Main.Transform);
			int num = 0;
			int num2 = 0;
			if (Main.ignoreErrors)
			{
				for (int i = 0; i < 1000; i++)
				{
					if (Main.projectile[i].active && Main.projectile[i].type > 0 && !Main.projectile[i].hide)
					{
						num++;
						try
						{
							int num3 = 0;
							if (Main.projHook[Main.projectile[i].type] && Main.projectile[i].owner != 255)
							{
								num3 = Main.player[Main.projectile[i].owner].cGrapple;
							}
							if (Main.projPet[Main.projectile[i].type] && !Main.projectile[i].minion && Main.projectile[i].owner != 255 && Main.projectile[i].damage == 0 && !ProjectileID.Sets.LightPet[Main.projectile[i].type])
							{
								num3 = Main.player[Main.projectile[i].owner].cPet;
							}
							if (!Main.projectile[i].minion && Main.projectile[i].owner != 255 && Main.projectile[i].damage == 0 && ProjectileID.Sets.LightPet[Main.projectile[i].type])
							{
								num3 = Main.player[Main.projectile[i].owner].cLight;
							}
							if (Main.projectile[i].type == 623 && Main.projectile[i].owner != 255)
							{
								num3 = Main.player[Main.projectile[i].owner].cPet;
							}
							if (num3 != 0)
							{
								if (num2 == 0)
								{
									Main.spriteBatch.End();
									Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, Main.Transform);
								}
								GameShaders.Armor.ApplySecondary(num3, Main.player[Main.projectile[i].owner], null);
							}
							else if (num2 != 0)
							{
								Main.spriteBatch.End();
								Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, Main.Transform);
							}
							num2 = num3;
							this.DrawProj(i);
						}
						catch (Exception e)
						{
							TimeLogger.DrawException(e);
							Main.projectile[i].active = false;
						}
					}
				}
			}
			else
			{
				for (int j = 0; j < 1000; j++)
				{
					if (Main.projectile[j].active && Main.projectile[j].type > 0 && !Main.projectile[j].hide)
					{
						int num4 = 0;
						if (Main.projHook[Main.projectile[j].type] && Main.projectile[j].owner != 255)
						{
							num4 = Main.player[Main.projectile[j].owner].cGrapple;
						}
						if (Main.projPet[Main.projectile[j].type] && !Main.projectile[j].minion && Main.projectile[j].owner != 255 && Main.projectile[j].damage == 0 && !ProjectileID.Sets.LightPet[Main.projectile[j].type])
						{
							num4 = Main.player[Main.projectile[j].owner].cPet;
						}
						if (!Main.projectile[j].minion && Main.projectile[j].owner != 255 && Main.projectile[j].damage == 0 && ProjectileID.Sets.LightPet[Main.projectile[j].type])
						{
							num4 = Main.player[Main.projectile[j].owner].cLight;
						}
						if (Main.projectile[j].type == 623 && Main.projectile[j].owner != 255)
						{
							num4 = Main.player[Main.projectile[j].owner].cPet;
						}
						if (num4 != 0)
						{
							if (num2 == 0)
							{
								Main.spriteBatch.End();
								Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, Main.Transform);
							}
							GameShaders.Armor.ApplySecondary(num4, Main.player[Main.projectile[j].owner], null);
						}
						else if (num2 != 0)
						{
							Main.spriteBatch.End();
							Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, Main.Transform);
						}
						num2 = num4;
						this.DrawProj(j);
					}
				}
			}
			Main.spriteBatch.End();
			TimeLogger.DetailedDrawTime(20);
		}

		protected void DrawPlayers()
		{
			Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, Main.Transform);
			for (int i = 0; i < 255; i++)
			{
				Player player = Main.player[i];
				if (player.active && !player.outOfRange)
				{
					if (Main.gamePaused)
					{
						player.PlayerFrame();
					}
					if (player.ghost)
					{
						for (int j = 0; j < 3; j++)
						{
							this.DrawGhost(player, player.shadowPos[j], 0.5f + 0.2f * (float)j);
						}
						this.DrawGhost(player, player.position, 0f);
					}
					else
					{
						if (player.inventory[player.selectedItem].flame || player.head == 137 || player.wings == 22)
						{
							player.itemFlameCount--;
							if (player.itemFlameCount <= 0)
							{
								player.itemFlameCount = 5;
								for (int k = 0; k < 7; k++)
								{
									player.itemFlamePos[k].X = (float)Main.rand.Next(-10, 11) * 0.15f;
									player.itemFlamePos[k].Y = (float)Main.rand.Next(-10, 1) * 0.35f;
								}
							}
						}
						if (player.armorEffectDrawShadowEOCShield)
						{
							int num = player.eocDash / 4;
							if (num > 3)
							{
								num = 3;
							}
							for (int l = 0; l < num; l++)
							{
								this.DrawPlayer(player, player.shadowPos[l], player.shadowRotation[l], player.shadowOrigin[l], 0.5f + 0.2f * (float)l);
							}
						}
						Vector2 position;
						if (player.invis)
						{
							player.armorEffectDrawOutlines = false;
							player.armorEffectDrawShadow = false;
							player.armorEffectDrawShadowSubtle = false;
							position = player.position;
							if (player.aggro <= -750)
							{
								this.DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, 1f);
							}
							else
							{
								player.invis = false;
								this.DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, 0f);
								player.invis = true;
							}
						}
						if (player.armorEffectDrawOutlines)
						{
							Vector2 arg_23E_0 = player.position;
							if (!Main.gamePaused)
							{
								player.ghostFade += player.ghostDir * 0.075f;
							}
							if ((double)player.ghostFade < 0.1)
							{
								player.ghostDir = 1f;
								player.ghostFade = 0.1f;
							}
							else if ((double)player.ghostFade > 0.9)
							{
								player.ghostDir = -1f;
								player.ghostFade = 0.9f;
							}
							float num2 = player.ghostFade * 5f;
							for (int m = 0; m < 4; m++)
							{
								float num3;
								float num4;
								switch (m)
								{
								case 0:
								default:
									num3 = num2;
									num4 = 0f;
									break;
								case 1:
									num3 = -num2;
									num4 = 0f;
									break;
								case 2:
									num3 = 0f;
									num4 = num2;
									break;
								case 3:
									num3 = 0f;
									num4 = -num2;
									break;
								}
								position = new Vector2(player.position.X + num3, player.position.Y + player.gfxOffY + num4);
								this.DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, player.ghostFade);
							}
						}
						if (player.armorEffectDrawOutlinesForbidden)
						{
							Vector2 arg_37A_0 = player.position;
							if (!Main.gamePaused)
							{
								player.ghostFade += player.ghostDir * 0.025f;
							}
							if ((double)player.ghostFade < 0.1)
							{
								player.ghostDir = 1f;
								player.ghostFade = 0.1f;
							}
							else if ((double)player.ghostFade > 0.9)
							{
								player.ghostDir = -1f;
								player.ghostFade = 0.9f;
							}
							float num5 = player.ghostFade * 5f;
							for (int n = 0; n < 4; n++)
							{
								float num6;
								float num7;
								switch (n)
								{
								case 0:
								default:
									num6 = num5;
									num7 = 0f;
									break;
								case 1:
									num6 = -num5;
									num7 = 0f;
									break;
								case 2:
									num6 = 0f;
									num7 = num5;
									break;
								case 3:
									num6 = 0f;
									num7 = -num5;
									break;
								}
								position = new Vector2(player.position.X + num6, player.position.Y + player.gfxOffY + num7);
								this.DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, player.ghostFade);
							}
						}
						if (player.armorEffectDrawShadowBasilisk)
						{
							int num8 = (int)(player.basiliskCharge * 3f);
							for (int num9 = 0; num9 < num8; num9++)
							{
								this.DrawPlayer(player, player.shadowPos[num9], player.shadowRotation[num9], player.shadowOrigin[num9], 0.5f + 0.2f * (float)num9);
							}
						}
						else if (player.armorEffectDrawShadow)
						{
							for (int num10 = 0; num10 < 3; num10++)
							{
								this.DrawPlayer(player, player.shadowPos[num10], player.shadowRotation[num10], player.shadowOrigin[num10], 0.5f + 0.2f * (float)num10);
							}
						}
						if (player.armorEffectDrawShadowLokis)
						{
							for (int num11 = 0; num11 < 3; num11++)
							{
								this.DrawPlayer(player, Vector2.Lerp(player.shadowPos[num11], player.position + new Vector2(0f, player.gfxOffY), 0.5f), player.shadowRotation[num11], player.shadowOrigin[num11], MathHelper.Lerp(1f, 0.5f + 0.2f * (float)num11, 0.5f));
							}
						}
						if (player.armorEffectDrawShadowSubtle)
						{
							for (int num12 = 0; num12 < 4; num12++)
							{
								position.X = player.position.X + (float)Main.rand.Next(-20, 21) * 0.1f;
								position.Y = player.position.Y + (float)Main.rand.Next(-20, 21) * 0.1f + player.gfxOffY;
								this.DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, 0.9f);
							}
						}
						if (player.shadowDodge)
						{
							player.shadowDodgeCount += 1f;
							if (player.shadowDodgeCount > 30f)
							{
								player.shadowDodgeCount = 30f;
							}
						}
						else
						{
							player.shadowDodgeCount -= 1f;
							if (player.shadowDodgeCount < 0f)
							{
								player.shadowDodgeCount = 0f;
							}
						}
						if (player.shadowDodgeCount > 0f)
						{
							Vector2 arg_702_0 = player.position;
							position.X = player.position.X + player.shadowDodgeCount;
							position.Y = player.position.Y + player.gfxOffY;
							this.DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, 0.5f + (float)Main.rand.Next(-10, 11) * 0.005f);
							position.X = player.position.X - player.shadowDodgeCount;
							this.DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, 0.5f + (float)Main.rand.Next(-10, 11) * 0.005f);
						}
						position = player.position;
						position.Y += player.gfxOffY;
						if (player.stoned)
						{
							this.DrawPlayerStoned(player, position);
						}
						else if (!player.invis)
						{
							this.DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, 0f);
						}
					}
				}
			}
			Main.spriteBatch.End();
			TimeLogger.DetailedDrawTime(21);
		}

		private static void DrawPlayers_SetArmorEffectsOld(Player drawPlayer, ref bool armorEffectDrawShadow, ref bool armorEffectDrawShadowSubtle, ref bool armorEffectDrawOutlines, ref bool armorEffectDrawShadowLokis, ref bool armorEffectDrawShadowBasilisk, ref bool armorEffectDrawOutlinesForbidden, ref bool armorEffectEOCShield)
		{
			if (drawPlayer.head == 111 && drawPlayer.body == 73 && drawPlayer.legs == 62)
			{
				armorEffectDrawShadowSubtle = true;
				armorEffectDrawOutlines = true;
			}
			if (drawPlayer.head == 134 && drawPlayer.body == 95 && drawPlayer.legs == 79)
			{
				armorEffectDrawShadowSubtle = true;
				armorEffectDrawOutlines = true;
			}
			if (drawPlayer.head == 107 && drawPlayer.body == 69 && drawPlayer.legs == 58)
			{
				armorEffectDrawShadowSubtle = true;
				armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 108 && drawPlayer.body == 70 && drawPlayer.legs == 59)
			{
				armorEffectDrawShadowSubtle = true;
				armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 109 && drawPlayer.body == 71 && drawPlayer.legs == 60)
			{
				armorEffectDrawShadowSubtle = true;
				armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 110 && drawPlayer.body == 72 && drawPlayer.legs == 61)
			{
				armorEffectDrawShadowSubtle = true;
				armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 193 && drawPlayer.body == 194 && drawPlayer.legs == 134)
			{
				armorEffectDrawShadowSubtle = true;
				armorEffectDrawShadowLokis = true;
				armorEffectDrawOutlines = true;
			}
			if (drawPlayer.mount.Active && drawPlayer.mount.Type == 3 && drawPlayer.velocity.Y != 0f && !drawPlayer.SlimeDontHyperJump)
			{
				armorEffectDrawShadow = true;
			}
			if (drawPlayer.mount.Active && drawPlayer.mount.Type == 10 && Math.Abs(drawPlayer.velocity.X) > drawPlayer.mount.DashSpeed - drawPlayer.mount.RunSpeed / 2f)
			{
				armorEffectDrawShadow = true;
			}
			if (drawPlayer.mount.Active && drawPlayer.mount.Type == 14 && Math.Abs(drawPlayer.velocity.X) > drawPlayer.mount.RunSpeed / 2f)
			{
				armorEffectDrawShadowBasilisk = true;
			}
			if (drawPlayer.body == 67 && drawPlayer.legs == 56 && drawPlayer.head >= 103 && drawPlayer.head <= 105)
			{
				armorEffectDrawShadow = true;
			}
			if ((drawPlayer.head == 78 || drawPlayer.head == 79 || drawPlayer.head == 80) && drawPlayer.body == 51 && drawPlayer.legs == 47)
			{
				armorEffectDrawShadowSubtle = true;
			}
			if (drawPlayer.head == 200 && drawPlayer.body == 198 && drawPlayer.legs == 142)
			{
				armorEffectDrawShadowLokis = true;
				armorEffectDrawOutlinesForbidden = true;
			}
			if (drawPlayer.head == 171 && drawPlayer.body == 177 && drawPlayer.legs == 112)
			{
				armorEffectDrawShadow = true;
				armorEffectDrawOutlines = true;
			}
			if (drawPlayer.head == 169 && drawPlayer.body == 175 && drawPlayer.legs == 110)
			{
				armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 170 && drawPlayer.body == 176 && drawPlayer.legs == 111)
			{
				armorEffectDrawShadowLokis = true;
				armorEffectDrawOutlines = true;
			}
			if (drawPlayer.eocDash > 0)
			{
				armorEffectEOCShield = true;
			}
			else if (drawPlayer.dashDelay < 0)
			{
				armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 5 && drawPlayer.body == 5 && drawPlayer.legs == 5)
			{
				armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 74 && drawPlayer.body == 48 && drawPlayer.legs == 44)
			{
				armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 76 && drawPlayer.body == 49 && drawPlayer.legs == 45)
			{
				armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 7 && drawPlayer.body == 7 && drawPlayer.legs == 7)
			{
				armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 22 && drawPlayer.body == 14 && drawPlayer.legs == 14)
			{
				armorEffectDrawShadow = true;
			}
			if (drawPlayer.dye[0].dye == 30 && drawPlayer.dye[1].dye == 30 && drawPlayer.dye[2].dye == 30 && drawPlayer.head == 4 && drawPlayer.body == 27 && drawPlayer.legs == 26)
			{
				armorEffectDrawShadow = true;
				armorEffectDrawOutlines = true;
			}
			if (drawPlayer.head == 189 && drawPlayer.body == 190 && drawPlayer.legs == 130)
			{
				armorEffectDrawOutlines = true;
			}
			if (drawPlayer.body == 17 && drawPlayer.legs == 16 && (drawPlayer.head == 29 || drawPlayer.head == 30 || drawPlayer.head == 31))
			{
				armorEffectDrawShadow = true;
			}
			if (drawPlayer.body == 19 && drawPlayer.legs == 18 && (drawPlayer.head == 35 || drawPlayer.head == 36 || drawPlayer.head == 37))
			{
				armorEffectDrawOutlines = true;
			}
			if (drawPlayer.body == 24 && drawPlayer.legs == 23 && (drawPlayer.head == 41 || drawPlayer.head == 42 || drawPlayer.head == 43))
			{
				armorEffectDrawOutlines = true;
				armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 157 && drawPlayer.legs == 98 && drawPlayer.body != 105)
			{
				int arg_4E6_0 = drawPlayer.body;
			}
			if (drawPlayer.body == 36 && drawPlayer.head == 56)
			{
				armorEffectDrawOutlines = true;
			}
			if (drawPlayer.stoned || drawPlayer.stealth != 1f)
			{
				armorEffectDrawOutlines = false;
				armorEffectDrawShadow = false;
				armorEffectDrawShadowSubtle = false;
			}
		}

		protected void DrawElderEye(SpriteBatch spriteBatch, Vector2 worldPosition, float opacity, float scale, int frameNumber, Microsoft.Xna.Framework.Color passedColor)
		{
			Texture2D texture2D = Main.extraTexture[78];
			Vector2 origin = new Vector2(68f, 94f);
			Microsoft.Xna.Framework.Rectangle value = texture2D.Frame(1, 8, 0, frameNumber);
			Vector2 position = worldPosition - Main.screenPosition;
			passedColor *= opacity;
			spriteBatch.Draw(texture2D, position, new Microsoft.Xna.Framework.Rectangle?(value), passedColor, 0f, origin, scale, SpriteEffects.None, 0f);
		}

		protected void DrawNPCs(bool behindTiles = false)
		{
			bool flag = false;
			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)Main.screenPosition.X - 800, (int)Main.screenPosition.Y - 800, Main.screenWidth + 1600, Main.screenHeight + 1600);
			for (int i = 199; i >= 0; i--)
			{
				try
				{
					if (Main.npc[i].active && Main.npc[i].type > 0 && Main.npc[i].type < 580 && !Main.npc[i].hide)
					{
						Main.npc[i].visualOffset *= 0.95f;
						Main.npc[i].position += Main.npc[i].visualOffset;
						if (Main.npc[i].behindTiles == behindTiles)
						{
							if (Main.npc[i].type == 125 || Main.npc[i].type == 126)
							{
								if (!flag)
								{
									flag = true;
									for (int j = 0; j < 200; j++)
									{
										if (Main.npc[j].active && i != j && (Main.npc[j].type == 125 || Main.npc[j].type == 126))
										{
											float num = Main.npc[j].position.X + (float)Main.npc[j].width * 0.5f;
											float num2 = Main.npc[j].position.Y + (float)Main.npc[j].height * 0.5f;
											Vector2 vector = new Vector2(Main.npc[i].position.X + (float)Main.npc[i].width * 0.5f, Main.npc[i].position.Y + (float)Main.npc[i].height * 0.5f);
											float num3 = num - vector.X;
											float num4 = num2 - vector.Y;
											float rotation = (float)Math.Atan2((double)num4, (double)num3) - 1.57f;
											bool flag2 = true;
											float num5 = (float)Math.Sqrt((double)(num3 * num3 + num4 * num4));
											if (num5 > 2000f)
											{
												flag2 = false;
											}
											while (flag2)
											{
												num5 = (float)Math.Sqrt((double)(num3 * num3 + num4 * num4));
												if (num5 < 40f)
												{
													flag2 = false;
												}
												else
												{
													num5 = (float)Main.chain12Texture.Height / num5;
													num3 *= num5;
													num4 *= num5;
													vector.X += num3;
													vector.Y += num4;
													num3 = num - vector.X;
													num4 = num2 - vector.Y;
													Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f));
													Main.spriteBatch.Draw(Main.chain12Texture, new Vector2(vector.X - Main.screenPosition.X, vector.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain12Texture.Width, Main.chain12Texture.Height)), color, rotation, new Vector2((float)Main.chain12Texture.Width * 0.5f, (float)Main.chain12Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
												}
											}
										}
									}
								}
							}
							else if (Main.npc[i].type == 263 && Main.npc[i].aiStyle == 52 && NPC.plantBoss >= 0)
							{
								Vector2 vector2 = new Vector2(Main.npc[i].position.X + (float)(Main.npc[i].width / 2), Main.npc[i].position.Y + (float)(Main.npc[i].height / 2));
								float num6 = Main.npc[NPC.plantBoss].Center.X - vector2.X;
								float num7 = Main.npc[NPC.plantBoss].Center.Y - vector2.Y;
								float rotation2 = (float)Math.Atan2((double)num7, (double)num6) - 1.57f;
								bool flag3 = true;
								while (flag3)
								{
									int num8 = 16;
									int num9 = 32;
									float num10 = (float)Math.Sqrt((double)(num6 * num6 + num7 * num7));
									if (num10 < (float)num9)
									{
										num8 = (int)num10 - num9 + num8;
										flag3 = false;
									}
									num10 = (float)num8 / num10;
									num6 *= num10;
									num7 *= num10;
									vector2.X += num6;
									vector2.Y += num7;
									num6 = Main.npc[NPC.plantBoss].Center.X - vector2.X;
									num7 = Main.npc[NPC.plantBoss].Center.Y - vector2.Y;
									Microsoft.Xna.Framework.Color color2 = Lighting.GetColor((int)vector2.X / 16, (int)(vector2.Y / 16f));
									Main.spriteBatch.Draw(Main.chain26Texture, new Vector2(vector2.X - Main.screenPosition.X, vector2.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain26Texture.Width, num8)), color2, rotation2, new Vector2((float)Main.chain26Texture.Width * 0.5f, (float)Main.chain26Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
								}
							}
							else if (Main.npc[i].type == 264 && Main.npc[i].aiStyle == 53 && NPC.plantBoss >= 0)
							{
								int num11 = NPC.plantBoss;
								if (Main.npc[i].ai[3] > 0f)
								{
									num11 = (int)Main.npc[i].ai[3] - 1;
								}
								Vector2 vector3 = new Vector2(Main.npc[i].position.X + (float)(Main.npc[i].width / 2), Main.npc[i].position.Y + (float)(Main.npc[i].height / 2));
								float num12 = Main.npc[num11].Center.X - vector3.X;
								float num13 = Main.npc[num11].Center.Y - vector3.Y;
								float rotation3 = (float)Math.Atan2((double)num13, (double)num12) - 1.57f;
								bool flag4 = true;
								while (flag4)
								{
									int num14 = 16;
									int num15 = 32;
									float num16 = (float)Math.Sqrt((double)(num12 * num12 + num13 * num13));
									if (num16 < (float)num15)
									{
										num14 = (int)num16 - num15 + num14;
										flag4 = false;
									}
									num16 = (float)num14 / num16;
									num12 *= num16;
									num13 *= num16;
									vector3.X += num12;
									vector3.Y += num13;
									num12 = Main.npc[num11].Center.X - vector3.X;
									num13 = Main.npc[num11].Center.Y - vector3.Y;
									Microsoft.Xna.Framework.Color color3 = Lighting.GetColor((int)vector3.X / 16, (int)(vector3.Y / 16f));
									Main.spriteBatch.Draw(Main.chain27Texture, new Vector2(vector3.X - Main.screenPosition.X, vector3.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain27Texture.Width, num14)), color3, rotation3, new Vector2((float)Main.chain27Texture.Width * 0.5f, (float)Main.chain27Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
								}
							}
							if (NPCID.Sets.MustAlwaysDraw[Main.npc[i].type] || rectangle.Intersects(new Microsoft.Xna.Framework.Rectangle((int)Main.npc[i].position.X, (int)Main.npc[i].position.Y, Main.npc[i].width, Main.npc[i].height)))
							{
								this.DrawNPCCheckAlt(Main.npc[i]);
								this.DrawNPC(i, behindTiles);
							}
						}
						Main.npc[i].position -= Main.npc[i].visualOffset;
					}
				}
				catch
				{
					Main.npc[i].active = false;
				}
			}
		}

		protected void DrawNPCCheckAlt(NPC n)
		{
			if (NPCID.Sets.ExtraTextureCount[n.type] == 0)
			{
				return;
			}
			if (!Main.NPCLoaded[n.type])
			{
				return;
			}
			Main.npcTexture[n.type] = Main.npcAltTextures[n.type][n.altTexture];
		}

		protected void DrawNPC(int iNPCIndex, bool behindTiles)
		{
			NPC nPC = Main.npc[iNPCIndex];
			int type = nPC.type;
			this.LoadNPC(type);
			if (nPC.setFrameSize)
			{
				nPC.frame = new Microsoft.Xna.Framework.Rectangle(0, 0, Main.npcTexture[type].Width, Main.npcTexture[type].Height / Main.npcFrameCount[type]);
				nPC.setFrameSize = false;
			}
			if (nPC.realLife == -1 && nPC.life >= nPC.lifeMax && !nPC.boss)
			{
				bool flag = Lighting.GetColor((int)((double)nPC.position.X + (double)nPC.width * 0.5) / 16, (int)(((double)nPC.position.Y + (double)nPC.height * 0.5) / 16.0)).ToVector3().Length() > 0.4325f;
				bool flag2 = false;
				if (LockOnHelper.AimedTarget == nPC)
				{
					flag2 = true;
				}
				else
				{
					float num = nPC.Distance(Main.player[Main.myPlayer].Center);
					if (num < 400f && flag)
					{
						flag2 = true;
					}
				}
				if (flag2 && nPC.lifeMax < 5)
				{
					flag2 = false;
				}
				if (flag2 && nPC.aiStyle == 25 && nPC.ai[0] == 0f)
				{
					flag2 = false;
				}
				if (flag2)
				{
					nPC.nameOver = MathHelper.Clamp(nPC.nameOver + 0.025f, 0f, 1f);
				}
				else
				{
					nPC.nameOver = MathHelper.Clamp(nPC.nameOver - 0.025f, 0f, 1f);
				}
			}
			else
			{
				nPC.nameOver = MathHelper.Clamp(nPC.nameOver - 0.025f, 0f, 1f);
			}
			if (type == 101)
			{
				bool flag3 = true;
				Vector2 vector = new Vector2(nPC.position.X + (float)(nPC.width / 2), nPC.position.Y + (float)(nPC.height / 2));
				float num2 = nPC.ai[0] * 16f + 8f - vector.X;
				float num3 = nPC.ai[1] * 16f + 8f - vector.Y;
				float rotation = (float)Math.Atan2((double)num3, (double)num2) - 1.57f;
				bool flag4 = true;
				while (flag4)
				{
					float num4 = 0.75f;
					int height = 28;
					float num5 = (float)Math.Sqrt((double)(num2 * num2 + num3 * num3));
					if (num5 < 28f * num4)
					{
						height = (int)num5 - 40 + 28;
						flag4 = false;
					}
					num5 = 20f * num4 / num5;
					num2 *= num5;
					num3 *= num5;
					vector.X += num2;
					vector.Y += num3;
					num2 = nPC.ai[0] * 16f + 8f - vector.X;
					num3 = nPC.ai[1] * 16f + 8f - vector.Y;
					Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f));
					if (!flag3)
					{
						flag3 = true;
						Main.spriteBatch.Draw(Main.chain10Texture, new Vector2(vector.X - Main.screenPosition.X, vector.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain10Texture.Width, height)), color, rotation, new Vector2((float)Main.chain10Texture.Width * 0.5f, (float)Main.chain10Texture.Height * 0.5f), num4, SpriteEffects.None, 0f);
					}
					else
					{
						flag3 = false;
						Main.spriteBatch.Draw(Main.chain11Texture, new Vector2(vector.X - Main.screenPosition.X, vector.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain10Texture.Width, height)), color, rotation, new Vector2((float)Main.chain10Texture.Width * 0.5f, (float)Main.chain10Texture.Height * 0.5f), num4, SpriteEffects.None, 0f);
					}
				}
			}
			else if (nPC.aiStyle == 13)
			{
				Vector2 vector2 = new Vector2(nPC.position.X + (float)(nPC.width / 2), nPC.position.Y + (float)(nPC.height / 2));
				float num6 = nPC.ai[0] * 16f + 8f - vector2.X;
				float num7 = nPC.ai[1] * 16f + 8f - vector2.Y;
				float rotation2 = (float)Math.Atan2((double)num7, (double)num6) - 1.57f;
				bool flag5 = true;
				while (flag5)
				{
					int num8 = 28;
					int num9 = 40;
					if (type == 259 || type == 260)
					{
						num9 = 20;
						num8 = 12;
					}
					float num10 = (float)Math.Sqrt((double)(num6 * num6 + num7 * num7));
					if (num10 < (float)num9)
					{
						num8 = (int)num10 - num9 + num8;
						flag5 = false;
					}
					num10 = (float)num8 / num10;
					num6 *= num10;
					num7 *= num10;
					vector2.X += num6;
					vector2.Y += num7;
					num6 = nPC.ai[0] * 16f + 8f - vector2.X;
					num7 = nPC.ai[1] * 16f + 8f - vector2.Y;
					Microsoft.Xna.Framework.Color color2 = Lighting.GetColor((int)vector2.X / 16, (int)(vector2.Y / 16f));
					if (type == 259 || type == 260)
					{
						color2.B = 255;
						if (color2.R < 100)
						{
							color2.R = 100;
						}
						if (color2.G < 150)
						{
							color2.G = 150;
						}
					}
					if (type == 56)
					{
						Main.spriteBatch.Draw(Main.chain5Texture, new Vector2(vector2.X - Main.screenPosition.X, vector2.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain4Texture.Width, num8)), color2, rotation2, new Vector2((float)Main.chain4Texture.Width * 0.5f, (float)Main.chain4Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
					else if (type == 175)
					{
						Main.spriteBatch.Draw(Main.chain14Texture, new Vector2(vector2.X - Main.screenPosition.X, vector2.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain14Texture.Width, num8)), color2, rotation2, new Vector2((float)Main.chain14Texture.Width * 0.5f, (float)Main.chain14Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
					else if (type == 259)
					{
						Main.spriteBatch.Draw(Main.chain24Texture, new Vector2(vector2.X - Main.screenPosition.X, vector2.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain24Texture.Width, num8)), color2, rotation2, new Vector2((float)Main.chain24Texture.Width * 0.5f, (float)Main.chain24Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
					else if (type == 260)
					{
						Main.spriteBatch.Draw(Main.chain25Texture, new Vector2(vector2.X - Main.screenPosition.X, vector2.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain25Texture.Width, num8)), color2, rotation2, new Vector2((float)Main.chain25Texture.Width * 0.5f, (float)Main.chain25Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
					else
					{
						Main.spriteBatch.Draw(Main.chain4Texture, new Vector2(vector2.X - Main.screenPosition.X, vector2.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain4Texture.Width, num8)), color2, rotation2, new Vector2((float)Main.chain4Texture.Width * 0.5f, (float)Main.chain4Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
				}
			}
			if (type == 327)
			{
				float rotation3 = 0f;
				Vector2 vector3 = new Vector2(nPC.Center.X, nPC.Center.Y + 80f);
				int num11 = (int)nPC.localAI[1];
				Microsoft.Xna.Framework.Color color3 = Lighting.GetColor((int)vector3.X / 16, (int)(vector3.Y / 16f));
				Main.spriteBatch.Draw(Main.pumpkingCloakTexture, new Vector2(vector3.X - Main.screenPosition.X, vector3.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.pumpkingCloakTexture.Height / 5 * num11, Main.pumpkingCloakTexture.Width, Main.pumpkingCloakTexture.Height / 5)), color3, rotation3, new Vector2((float)Main.pumpkingCloakTexture.Width * 0.5f, (float)Main.pumpkingCloakTexture.Height * 0.5f / 5f), 1f, SpriteEffects.None, 0f);
			}
			if (type == 328)
			{
				Vector2 vector4 = new Vector2(nPC.position.X + (float)nPC.width * 0.5f - 5f * nPC.ai[0], nPC.position.Y + 20f);
				for (int i = 0; i < 2; i++)
				{
					float num12 = Main.npc[(int)nPC.ai[1]].position.X + (float)(Main.npc[(int)nPC.ai[1]].width / 2) - vector4.X;
					float num13 = Main.npc[(int)nPC.ai[1]].position.Y + (float)(Main.npc[(int)nPC.ai[1]].height / 2) - 30f - vector4.Y;
					float num14;
					if (i == 0)
					{
						num12 -= 200f * nPC.ai[0];
						num13 += 130f;
						num14 = (float)Math.Sqrt((double)(num12 * num12 + num13 * num13));
						num14 = 92f / num14;
						vector4.X += num12 * num14;
						vector4.Y += num13 * num14;
					}
					else
					{
						num12 -= 50f * nPC.ai[0];
						num13 += 80f;
						num14 = (float)Math.Sqrt((double)(num12 * num12 + num13 * num13));
						num14 = 60f / num14;
						vector4.X += num12 * num14;
						vector4.Y += num13 * num14;
					}
					float rotation4 = (float)Math.Atan2((double)num13, (double)num12) - 1.57f;
					Microsoft.Xna.Framework.Color color4 = Lighting.GetColor((int)vector4.X / 16, (int)(vector4.Y / 16f));
					Main.spriteBatch.Draw(Main.pumpkingArmTexture, new Vector2(vector4.X - Main.screenPosition.X, vector4.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.pumpkingArmTexture.Width, Main.pumpkingArmTexture.Height)), color4, rotation4, new Vector2((float)Main.pumpkingArmTexture.Width * 0.5f, (float)Main.pumpkingArmTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					if (i == 0)
					{
						vector4.X += num12 * num14 / 2f;
						vector4.Y += num13 * num14 / 2f;
					}
				}
			}
			if (type == 36)
			{
				Vector2 vector5 = new Vector2(nPC.position.X + (float)nPC.width * 0.5f - 5f * nPC.ai[0], nPC.position.Y + 20f);
				for (int j = 0; j < 2; j++)
				{
					float num15 = Main.npc[(int)nPC.ai[1]].position.X + (float)(Main.npc[(int)nPC.ai[1]].width / 2) - vector5.X;
					float num16 = Main.npc[(int)nPC.ai[1]].position.Y + (float)(Main.npc[(int)nPC.ai[1]].height / 2) - vector5.Y;
					float num17;
					if (j == 0)
					{
						num15 -= 200f * nPC.ai[0];
						num16 += 130f;
						num17 = (float)Math.Sqrt((double)(num15 * num15 + num16 * num16));
						num17 = 92f / num17;
						vector5.X += num15 * num17;
						vector5.Y += num16 * num17;
					}
					else
					{
						num15 -= 50f * nPC.ai[0];
						num16 += 80f;
						num17 = (float)Math.Sqrt((double)(num15 * num15 + num16 * num16));
						num17 = 60f / num17;
						vector5.X += num15 * num17;
						vector5.Y += num16 * num17;
					}
					float rotation5 = (float)Math.Atan2((double)num16, (double)num15) - 1.57f;
					Microsoft.Xna.Framework.Color color5 = Lighting.GetColor((int)vector5.X / 16, (int)(vector5.Y / 16f));
					Main.spriteBatch.Draw(Main.boneArmTexture, new Vector2(vector5.X - Main.screenPosition.X, vector5.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.boneArmTexture.Width, Main.boneArmTexture.Height)), color5, rotation5, new Vector2((float)Main.boneArmTexture.Width * 0.5f, (float)Main.boneArmTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					if (j == 0)
					{
						vector5.X += num15 * num17 / 2f;
						vector5.Y += num16 * num17 / 2f;
					}
					else if (base.IsActive)
					{
						vector5.X += num15 * num17 - 16f;
						vector5.Y += num16 * num17 - 6f;
						int num18 = Dust.NewDust(new Vector2(vector5.X, vector5.Y), 30, 10, 5, num15 * 0.02f, num16 * 0.02f, 0, default(Microsoft.Xna.Framework.Color), 2f);
						Main.dust[num18].noGravity = true;
					}
				}
			}
			if (nPC.aiStyle == 47)
			{
				Vector2 vector6 = new Vector2(nPC.Center.X, nPC.Center.Y);
				float num19 = Main.npc[NPC.golemBoss].Center.X - vector6.X;
				float num20 = Main.npc[NPC.golemBoss].Center.Y - vector6.Y;
				num20 -= 7f;
				if (type == 247)
				{
					num19 -= 70f;
				}
				else
				{
					num19 += 66f;
				}
				float rotation6 = (float)Math.Atan2((double)num20, (double)num19) - 1.57f;
				bool flag6 = true;
				while (flag6)
				{
					float num21 = (float)Math.Sqrt((double)(num19 * num19 + num20 * num20));
					if (num21 < 16f)
					{
						flag6 = false;
					}
					else
					{
						num21 = 16f / num21;
						num19 *= num21;
						num20 *= num21;
						vector6.X += num19;
						vector6.Y += num20;
						num19 = Main.npc[NPC.golemBoss].Center.X - vector6.X;
						num20 = Main.npc[NPC.golemBoss].Center.Y - vector6.Y;
						num20 -= 7f;
						if (type == 247)
						{
							num19 -= 70f;
						}
						else
						{
							num19 += 66f;
						}
						Microsoft.Xna.Framework.Color color6 = Lighting.GetColor((int)vector6.X / 16, (int)(vector6.Y / 16f));
						Main.spriteBatch.Draw(Main.chain21Texture, new Vector2(vector6.X - Main.screenPosition.X, vector6.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain21Texture.Width, Main.chain21Texture.Height)), color6, rotation6, new Vector2((float)Main.chain21Texture.Width * 0.5f, (float)Main.chain21Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
				}
			}
			if (nPC.aiStyle >= 33 && nPC.aiStyle <= 36)
			{
				Vector2 vector7 = new Vector2(nPC.position.X + (float)nPC.width * 0.5f - 5f * nPC.ai[0], nPC.position.Y + 20f);
				for (int k = 0; k < 2; k++)
				{
					float num22 = Main.npc[(int)nPC.ai[1]].position.X + (float)(Main.npc[(int)nPC.ai[1]].width / 2) - vector7.X;
					float num23 = Main.npc[(int)nPC.ai[1]].position.Y + (float)(Main.npc[(int)nPC.ai[1]].height / 2) - vector7.Y;
					float num24;
					if (k == 0)
					{
						num22 -= 200f * nPC.ai[0];
						num23 += 130f;
						num24 = (float)Math.Sqrt((double)(num22 * num22 + num23 * num23));
						num24 = 92f / num24;
						vector7.X += num22 * num24;
						vector7.Y += num23 * num24;
					}
					else
					{
						num22 -= 50f * nPC.ai[0];
						num23 += 80f;
						num24 = (float)Math.Sqrt((double)(num22 * num22 + num23 * num23));
						num24 = 60f / num24;
						vector7.X += num22 * num24;
						vector7.Y += num23 * num24;
					}
					float rotation7 = (float)Math.Atan2((double)num23, (double)num22) - 1.57f;
					Microsoft.Xna.Framework.Color color7 = Lighting.GetColor((int)vector7.X / 16, (int)(vector7.Y / 16f));
					Main.spriteBatch.Draw(Main.boneArm2Texture, new Vector2(vector7.X - Main.screenPosition.X, vector7.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.boneArmTexture.Width, Main.boneArmTexture.Height)), color7, rotation7, new Vector2((float)Main.boneArmTexture.Width * 0.5f, (float)Main.boneArmTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					if (k == 0)
					{
						vector7.X += num22 * num24 / 2f;
						vector7.Y += num23 * num24 / 2f;
					}
					else if (base.IsActive)
					{
						vector7.X += num22 * num24 - 16f;
						vector7.Y += num23 * num24 - 6f;
						int num25 = Dust.NewDust(new Vector2(vector7.X, vector7.Y), 30, 10, 6, num22 * 0.02f, num23 * 0.02f, 0, default(Microsoft.Xna.Framework.Color), 2.5f);
						Main.dust[num25].noGravity = true;
					}
				}
			}
			if (nPC.aiStyle == 20)
			{
				Vector2 vector8 = new Vector2(nPC.position.X + (float)(nPC.width / 2), nPC.position.Y + (float)(nPC.height / 2));
				float num26 = nPC.ai[1] - vector8.X;
				float num27 = nPC.ai[2] - vector8.Y;
				float num28 = (float)Math.Atan2((double)num27, (double)num26) - 1.57f;
				nPC.rotation = num28;
				bool flag7 = true;
				while (flag7)
				{
					int height2 = 12;
					float num29 = (float)Math.Sqrt((double)(num26 * num26 + num27 * num27));
					if (num29 < 20f)
					{
						height2 = (int)num29 - 20 + 12;
						flag7 = false;
					}
					num29 = 12f / num29;
					num26 *= num29;
					num27 *= num29;
					vector8.X += num26;
					vector8.Y += num27;
					num26 = nPC.ai[1] - vector8.X;
					num27 = nPC.ai[2] - vector8.Y;
					Microsoft.Xna.Framework.Color color8 = Lighting.GetColor((int)vector8.X / 16, (int)(vector8.Y / 16f));
					Main.spriteBatch.Draw(Main.chainTexture, new Vector2(vector8.X - Main.screenPosition.X, vector8.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chainTexture.Width, height2)), color8, num28, new Vector2((float)Main.chainTexture.Width * 0.5f, (float)Main.chainTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
				}
				Main.spriteBatch.Draw(Main.spikeBaseTexture, new Vector2(nPC.ai[1] - Main.screenPosition.X, nPC.ai[2] - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.spikeBaseTexture.Width, Main.spikeBaseTexture.Height)), Lighting.GetColor((int)nPC.ai[1] / 16, (int)(nPC.ai[2] / 16f)), num28 - 0.75f, new Vector2((float)Main.spikeBaseTexture.Width * 0.5f, (float)Main.spikeBaseTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
			}
			Microsoft.Xna.Framework.Color color9 = Lighting.GetColor((int)((double)nPC.position.X + (double)nPC.width * 0.5) / 16, (int)(((double)nPC.position.Y + (double)nPC.height * 0.5) / 16.0));
			if (type >= 277 && type <= 280)
			{
				if (color9.R < 255)
				{
					color9.R = 255;
				}
				if (color9.G < 175)
				{
					color9.G = 175;
				}
			}
			if (type == -4)
			{
				int num30 = (int)color9.R;
				int num31 = (int)color9.G;
				int num32 = (int)color9.B;
				num30 *= 2;
				if (num30 > 255)
				{
					num30 = 255;
				}
				num31 *= 2;
				if (num31 > 255)
				{
					num31 = 255;
				}
				num32 *= 2;
				if (num32 > 255)
				{
					num32 = 255;
				}
				color9 = new Microsoft.Xna.Framework.Color(num30, num31, num32);
			}
			if (behindTiles && type != 113 && type != 114)
			{
				int num33 = (int)((nPC.position.X - 8f) / 16f);
				int num34 = (int)((nPC.position.X + (float)nPC.width + 8f) / 16f);
				int num35 = (int)((nPC.position.Y - 8f) / 16f);
				int num36 = (int)((nPC.position.Y + (float)nPC.height + 8f) / 16f);
				for (int l = num33; l <= num34; l++)
				{
					for (int m = num35; m <= num36; m++)
					{
						if (Lighting.Brightness(l, m) == 0f)
						{
							color9 = Microsoft.Xna.Framework.Color.Black;
						}
					}
				}
			}
			float num37 = 1f;
			float num38 = 1f;
			float num39 = 1f;
			float a = 1f;
			if (nPC.poisoned)
			{
				if (Main.rand.Next(30) == 0)
				{
					int num40 = Dust.NewDust(nPC.position, nPC.width, nPC.height, 46, 0f, 0f, 120, default(Microsoft.Xna.Framework.Color), 0.2f);
					Main.dust[num40].noGravity = true;
					Main.dust[num40].fadeIn = 1.9f;
				}
				num37 *= 0.65f;
				num39 *= 0.75f;
				color9 = Main.buffColor(color9, num37, num38, num39, a);
			}
			if (nPC.venom)
			{
				if (Main.rand.Next(10) == 0)
				{
					int num41 = Dust.NewDust(nPC.position, nPC.width, nPC.height, 171, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 0.5f);
					Main.dust[num41].noGravity = true;
					Main.dust[num41].fadeIn = 1.5f;
				}
				num38 *= 0.45f;
				num37 *= 0.75f;
				color9 = Main.buffColor(color9, num37, num38, num39, a);
			}
			if (nPC.midas)
			{
				num39 *= 0.3f;
				num37 *= 0.85f;
				color9 = Main.buffColor(color9, num37, num38, num39, a);
			}
			if (nPC.shadowFlame && Main.rand.Next(5) < 4)
			{
				int num42 = Dust.NewDust(new Vector2(nPC.position.X - 2f, nPC.position.Y - 2f), nPC.width + 4, nPC.height + 4, 27, nPC.velocity.X * 0.4f, nPC.velocity.Y * 0.4f, 180, default(Microsoft.Xna.Framework.Color), 1.95f);
				Main.dust[num42].noGravity = true;
				Main.dust[num42].velocity *= 0.75f;
				Dust expr_1BA2_cp_0 = Main.dust[num42];
				expr_1BA2_cp_0.velocity.X = expr_1BA2_cp_0.velocity.X * 0.75f;
				Dust expr_1BC0_cp_0 = Main.dust[num42];
				expr_1BC0_cp_0.velocity.Y = expr_1BC0_cp_0.velocity.Y - 1f;
				if (Main.rand.Next(4) == 0)
				{
					Main.dust[num42].noGravity = false;
					Main.dust[num42].scale *= 0.5f;
				}
			}
			if (nPC.onFire)
			{
				if (Main.rand.Next(4) < 3)
				{
					int num43 = Dust.NewDust(new Vector2(nPC.position.X - 2f, nPC.position.Y - 2f), nPC.width + 4, nPC.height + 4, 6, nPC.velocity.X * 0.4f, nPC.velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 3.5f);
					Main.dust[num43].noGravity = true;
					Main.dust[num43].velocity *= 1.8f;
					Dust expr_1CCF_cp_0 = Main.dust[num43];
					expr_1CCF_cp_0.velocity.Y = expr_1CCF_cp_0.velocity.Y - 0.5f;
					if (Main.rand.Next(4) == 0)
					{
						Main.dust[num43].noGravity = false;
						Main.dust[num43].scale *= 0.5f;
					}
				}
				Lighting.AddLight((int)(nPC.position.X / 16f), (int)(nPC.position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
			}
			if (nPC.daybreak)
			{
				if (Main.rand.Next(4) < 3)
				{
					int num44 = Dust.NewDust(new Vector2(nPC.position.X - 2f, nPC.position.Y - 2f), nPC.width + 4, nPC.height + 4, 158, nPC.velocity.X * 0.4f, nPC.velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 3.5f);
					Main.dust[num44].noGravity = true;
					Main.dust[num44].velocity *= 2.8f;
					Dust expr_1E20_cp_0 = Main.dust[num44];
					expr_1E20_cp_0.velocity.Y = expr_1E20_cp_0.velocity.Y - 0.5f;
					if (Main.rand.Next(4) == 0)
					{
						Main.dust[num44].noGravity = false;
						Main.dust[num44].scale *= 0.5f;
					}
				}
				Lighting.AddLight((int)(nPC.position.X / 16f), (int)(nPC.position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
			}
			if (nPC.betsysCurse)
			{
				num37 *= 0.8f;
				num38 *= 0.6f;
				color9 = Main.buffColor(color9, num37, num38, num39, a);
				if (Main.rand.Next(4) < 3)
				{
					int num45 = Dust.NewDust(new Vector2(nPC.position.X - 2f, nPC.position.Y - 2f), nPC.width + 4, nPC.height + 4, 55, nPC.velocity.X * 0.4f, nPC.velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 3.5f);
					Main.dust[num45].noGravity = true;
					Main.dust[num45].velocity *= 2.8f;
					Dust expr_1F93_cp_0 = Main.dust[num45];
					expr_1F93_cp_0.velocity.Y = expr_1F93_cp_0.velocity.Y - 1.5f;
					Main.dust[num45].noGravity = false;
					Main.dust[num45].scale = 0.9f;
					Main.dust[num45].color = new Microsoft.Xna.Framework.Color(0, 0, 180, 255);
					Main.dust[num45].velocity *= 0.2f;
				}
				Lighting.AddLight((int)(nPC.position.X / 16f), (int)(nPC.position.Y / 16f + 1f), 0.6f, 0.1f, 0.9f);
			}
			if (nPC.oiled)
			{
				num37 *= 0.7f;
				num38 *= 0.7f;
				num39 *= 0.7f;
				color9 = Main.buffColor(color9, num37, num38, num39, a);
				if (Main.rand.Next(3) != 0)
				{
					int alpha = 175;
					Microsoft.Xna.Framework.Color newColor = new Microsoft.Xna.Framework.Color(0, 0, 0, 140);
					Vector2 position = nPC.position;
					position.X -= 2f;
					position.Y -= 2f;
					if (Main.rand.Next(2) == 0)
					{
						int num46 = Dust.NewDust(position, nPC.width + 4, nPC.height + 2, 4, 0f, 0f, alpha, newColor, 1.4f);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num46].alpha += 25;
						}
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num46].alpha += 25;
						}
						Main.dust[num46].noLight = true;
						Main.dust[num46].velocity *= 0.2f;
						Dust expr_2186_cp_0 = Main.dust[num46];
						expr_2186_cp_0.velocity.Y = expr_2186_cp_0.velocity.Y + 0.2f;
						Main.dust[num46].velocity += nPC.velocity;
					}
				}
			}
			if (nPC.dryadWard && nPC.velocity.X != 0f && Main.rand.Next(4) == 0)
			{
				int num47 = Dust.NewDust(new Vector2(nPC.position.X - 2f, nPC.position.Y + (float)nPC.height - 2f), nPC.width + 4, 4, 163, nPC.velocity.X * 0.4f, nPC.velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 1.5f);
				Main.dust[num47].noGravity = true;
				Main.dust[num47].noLight = true;
				Main.dust[num47].velocity *= 0f;
			}
			if (nPC.dryadBane && Main.rand.Next(4) == 0)
			{
				int num48 = Dust.NewDust(new Vector2(nPC.position.X - 2f, nPC.position.Y), nPC.width + 4, nPC.height, 163, nPC.velocity.X * 0.4f, nPC.velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 1.5f);
				Main.dust[num48].noGravity = true;
				Main.dust[num48].velocity *= new Vector2(Main.rand.NextFloat() * 4f - 2f, 0f);
				Main.dust[num48].noLight = true;
			}
			if (nPC.loveStruck && Main.rand.Next(5) == 0)
			{
				Vector2 value = new Vector2((float)Main.rand.Next(-10, 11), (float)Main.rand.Next(-10, 11));
				value.Normalize();
				value.X *= 0.66f;
				int num49 = Gore.NewGore(nPC.position + new Vector2((float)Main.rand.Next(nPC.width + 1), (float)Main.rand.Next(nPC.height + 1)), value * (float)Main.rand.Next(3, 6) * 0.33f, 331, (float)Main.rand.Next(40, 121) * 0.01f);
				Main.gore[num49].sticky = false;
				Main.gore[num49].velocity *= 0.4f;
				Gore expr_2481_cp_0 = Main.gore[num49];
				expr_2481_cp_0.velocity.Y = expr_2481_cp_0.velocity.Y - 0.6f;
			}
			if (nPC.stinky)
			{
				num37 *= 0.7f;
				num39 *= 0.55f;
				color9 = Main.buffColor(color9, num37, num38, num39, a);
				if (Main.rand.Next(5) == 0)
				{
					Vector2 value2 = new Vector2((float)Main.rand.Next(-10, 11), (float)Main.rand.Next(-10, 11));
					value2.Normalize();
					value2.X *= 0.66f;
					value2.Y = Math.Abs(value2.Y);
					Vector2 vector9 = value2 * (float)Main.rand.Next(3, 5) * 0.25f;
					int num50 = Dust.NewDust(nPC.position, nPC.width, nPC.height, 188, vector9.X, vector9.Y * 0.5f, 100, default(Microsoft.Xna.Framework.Color), 1.5f);
					Main.dust[num50].velocity *= 0.1f;
					Dust expr_25B5_cp_0 = Main.dust[num50];
					expr_25B5_cp_0.velocity.Y = expr_25B5_cp_0.velocity.Y - 0.5f;
				}
			}
			if (nPC.dripping && Main.rand.Next(4) != 0)
			{
				Vector2 position2 = nPC.position;
				position2.X -= 2f;
				position2.Y -= 2f;
				if (Main.rand.Next(2) == 0)
				{
					int num51 = Dust.NewDust(position2, nPC.width + 4, nPC.height + 2, 211, 0f, 0f, 50, default(Microsoft.Xna.Framework.Color), 0.8f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num51].alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num51].alpha += 25;
					}
					Main.dust[num51].noLight = true;
					Main.dust[num51].velocity *= 0.2f;
					Dust expr_26DA_cp_0 = Main.dust[num51];
					expr_26DA_cp_0.velocity.Y = expr_26DA_cp_0.velocity.Y + 0.2f;
					Main.dust[num51].velocity += nPC.velocity;
				}
				else
				{
					int num52 = Dust.NewDust(position2, nPC.width + 8, nPC.height + 8, 211, 0f, 0f, 50, default(Microsoft.Xna.Framework.Color), 1.1f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num52].alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num52].alpha += 25;
					}
					Main.dust[num52].noLight = true;
					Main.dust[num52].noGravity = true;
					Main.dust[num52].velocity *= 0.2f;
					Dust expr_27D7_cp_0 = Main.dust[num52];
					expr_27D7_cp_0.velocity.Y = expr_27D7_cp_0.velocity.Y + 1f;
					Main.dust[num52].velocity += nPC.velocity;
				}
			}
			if (nPC.drippingSlime)
			{
				if (Main.rand.Next(4) != 0)
				{
					int alpha2 = 175;
					Microsoft.Xna.Framework.Color newColor2 = new Microsoft.Xna.Framework.Color(0, 80, 255, 100);
					Vector2 position3 = nPC.position;
					position3.X -= 2f;
					position3.Y -= 2f;
					if (Main.rand.Next(2) == 0)
					{
						int num53 = Dust.NewDust(position3, nPC.width + 4, nPC.height + 2, 4, 0f, 0f, alpha2, newColor2, 1.4f);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num53].alpha += 25;
						}
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num53].alpha += 25;
						}
						Main.dust[num53].noLight = true;
						Main.dust[num53].velocity *= 0.2f;
						Dust expr_2922_cp_0 = Main.dust[num53];
						expr_2922_cp_0.velocity.Y = expr_2922_cp_0.velocity.Y + 0.2f;
						Main.dust[num53].velocity += nPC.velocity;
					}
				}
				num37 *= 0.8f;
				num38 *= 0.8f;
				color9 = Main.buffColor(color9, num37, num38, num39, a);
			}
			if (nPC.ichor)
			{
				color9 = new Microsoft.Xna.Framework.Color(255, 255, 0, 255);
			}
			if (nPC.onFrostBurn)
			{
				if (Main.rand.Next(4) < 3)
				{
					int num54 = Dust.NewDust(new Vector2(nPC.position.X - 2f, nPC.position.Y - 2f), nPC.width + 4, nPC.height + 4, 135, nPC.velocity.X * 0.4f, nPC.velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 3.5f);
					Main.dust[num54].noGravity = true;
					Main.dust[num54].velocity *= 1.8f;
					Dust expr_2A63_cp_0 = Main.dust[num54];
					expr_2A63_cp_0.velocity.Y = expr_2A63_cp_0.velocity.Y - 0.5f;
					if (Main.rand.Next(4) == 0)
					{
						Main.dust[num54].noGravity = false;
						Main.dust[num54].scale *= 0.5f;
					}
				}
				Lighting.AddLight((int)(nPC.position.X / 16f), (int)(nPC.position.Y / 16f + 1f), 0.1f, 0.6f, 1f);
			}
			if (nPC.onFire2)
			{
				if (Main.rand.Next(4) < 3)
				{
					int num55 = Dust.NewDust(new Vector2(nPC.position.X - 2f, nPC.position.Y - 2f), nPC.width + 4, nPC.height + 4, 75, nPC.velocity.X * 0.4f, nPC.velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 3.5f);
					Main.dust[num55].noGravity = true;
					Main.dust[num55].velocity *= 1.8f;
					Dust expr_2BB1_cp_0 = Main.dust[num55];
					expr_2BB1_cp_0.velocity.Y = expr_2BB1_cp_0.velocity.Y - 0.5f;
					if (Main.rand.Next(4) == 0)
					{
						Main.dust[num55].noGravity = false;
						Main.dust[num55].scale *= 0.5f;
					}
				}
				Lighting.AddLight((int)(nPC.position.X / 16f), (int)(nPC.position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
			}
			if (Main.player[Main.myPlayer].detectCreature && nPC.lifeMax > 1)
			{
				byte b;
				byte b2;
				byte b3;
				if (nPC.friendly || nPC.catchItem > 0 || (nPC.damage == 0 && nPC.lifeMax == 5))
				{
					b = 50;
					b2 = 255;
					b3 = 50;
				}
				else
				{
					b = 255;
					b2 = 50;
					b3 = 50;
				}
				if (color9.R < b)
				{
					color9.R = b;
				}
				if (color9.G < b2)
				{
					color9.G = b2;
				}
				if (color9.B < b3)
				{
					color9.B = b3;
				}
			}
			if (type == 50)
			{
				Vector2 zero = Vector2.Zero;
				float num56 = 0f;
				zero.Y -= nPC.velocity.Y;
				zero.X -= nPC.velocity.X * 2f;
				num56 += nPC.velocity.X * 0.05f;
				if (nPC.frame.Y == 120)
				{
					zero.Y += 2f;
				}
				if (nPC.frame.Y == 360)
				{
					zero.Y -= 2f;
				}
				if (nPC.frame.Y == 480)
				{
					zero.Y -= 6f;
				}
				Main.spriteBatch.Draw(Main.ninjaTexture, new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) + zero.X, nPC.position.Y - Main.screenPosition.Y + (float)(nPC.height / 2) + zero.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.ninjaTexture.Width, Main.ninjaTexture.Height)), color9, num56, new Vector2((float)(Main.ninjaTexture.Width / 2), (float)(Main.ninjaTexture.Height / 2)), 1f, SpriteEffects.None, 0f);
			}
			if (type == 71)
			{
				Vector2 zero2 = Vector2.Zero;
				float num57 = 0f;
				zero2.Y -= nPC.velocity.Y * 0.3f;
				zero2.X -= nPC.velocity.X * 0.6f;
				num57 += nPC.velocity.X * 0.09f;
				if (nPC.frame.Y == 120)
				{
					zero2.Y += 2f;
				}
				if (nPC.frame.Y == 360)
				{
					zero2.Y -= 2f;
				}
				if (nPC.frame.Y == 480)
				{
					zero2.Y -= 6f;
				}
				Main.spriteBatch.Draw(Main.itemTexture[327], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) + zero2.X, nPC.position.Y - Main.screenPosition.Y + (float)(nPC.height / 2) + zero2.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[327].Width, Main.itemTexture[327].Height)), color9, num57, new Vector2((float)(Main.itemTexture[327].Width / 2), (float)(Main.itemTexture[327].Height / 2)), 1f, SpriteEffects.None, 0f);
			}
			if (type == 69)
			{
				Main.spriteBatch.Draw(Main.antLionTexture, new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2), nPC.position.Y - Main.screenPosition.Y + (float)nPC.height + 14f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.antLionTexture.Width, Main.antLionTexture.Height)), color9, -nPC.rotation * 0.3f, new Vector2((float)(Main.antLionTexture.Width / 2), (float)(Main.antLionTexture.Height / 2)), 1f, SpriteEffects.None, 0f);
			}
			if (type == 1 && nPC.ai[1] > 0f)
			{
				int num58 = (int)nPC.ai[1];
				float num59 = 1f;
				float num60 = 22f * nPC.scale;
				float num61 = 18f * nPC.scale;
				float num62 = (float)Main.itemTexture[num58].Width;
				float num63 = (float)Main.itemTexture[num58].Height;
				if (num62 > num60)
				{
					num59 *= num60 / num62;
					num62 *= num59;
					num63 *= num59;
				}
				if (num63 > num61)
				{
					num59 *= num61 / num63;
					num62 *= num59;
					num63 *= num59;
				}
				float num64 = -1f;
				float num65 = 1f;
				int num66 = nPC.frame.Y / (Main.npcTexture[type].Height / Main.npcFrameCount[type]);
				num65 -= (float)num66;
				num64 += (float)(num66 * 2);
				float num67 = 0.2f;
				num67 -= 0.3f * (float)num66;
				Main.spriteBatch.Draw(Main.itemTexture[num58], new Vector2(nPC.Center.X - Main.screenPosition.X + num64, nPC.Center.Y - Main.screenPosition.Y + nPC.gfxOffY + num65), null, color9, num67, new Vector2((float)(Main.itemTexture[num58].Width / 2), (float)(Main.itemTexture[num58].Height / 2)), num59, SpriteEffects.None, 0f);
			}
			float num68 = 0f;
			float num69 = Main.NPCAddHeight(iNPCIndex);
			Vector2 vector10 = new Vector2((float)(Main.npcTexture[type].Width / 2), (float)(Main.npcTexture[type].Height / Main.npcFrameCount[type] / 2));
			if (type == 108 || type == 124)
			{
				num68 = 2f;
			}
			else if (type == 357)
			{
				num68 = nPC.localAI[0];
			}
			else if (type == 467)
			{
				num68 = 7f;
			}
			else if (type == 537)
			{
				num68 = 2f;
			}
			else if (type == 509)
			{
				num68 = -6f;
			}
			else if (type == 490)
			{
				num68 = 4f;
			}
			else if (type == 484)
			{
				num68 = 2f;
			}
			else if (type == 483)
			{
				num68 = 14f;
			}
			else if (type == 477)
			{
				num69 = 22f;
			}
			else if (type == 478)
			{
				num68 -= 2f;
			}
			else if (type == 469 && nPC.ai[2] == 1f)
			{
				num68 = 14f;
			}
			else if (type == 4)
			{
				vector10 = new Vector2(55f, 107f);
			}
			else if (type == 125)
			{
				vector10 = new Vector2(55f, 107f);
			}
			else if (type == 126)
			{
				vector10 = new Vector2(55f, 107f);
			}
			else if (type == 63 || type == 64 || type == 103)
			{
				vector10.Y += 4f;
			}
			else if (type == 69)
			{
				vector10.Y += 8f;
			}
			else if (type == 262)
			{
				vector10.Y = 77f;
				num69 += 26f;
			}
			else if (type == 264)
			{
				vector10.Y = 21f;
				num69 += 2f;
			}
			else if (type == 266)
			{
				num69 += 50f;
			}
			else if (type == 268)
			{
				num69 += 16f;
			}
			else if (type == 288)
			{
				num69 += 6f;
			}
			if (nPC.aiStyle == 10 || type == 72)
			{
				color9 = Microsoft.Xna.Framework.Color.White;
			}
			SpriteEffects spriteEffects = SpriteEffects.None;
			if (nPC.spriteDirection == 1)
			{
				spriteEffects = SpriteEffects.FlipHorizontally;
			}
			if (type == 124 && nPC.localAI[0] == 0f)
			{
				int num70 = 0;
				if (nPC.frame.Y > 56)
				{
					num70 += 4;
				}
				num70 += nPC.frame.Y / 56;
				if (num70 >= Main.OffsetsPlayerHeadgear.Length)
				{
					num70 = 0;
				}
				float y = Main.OffsetsPlayerHeadgear[num70].Y;
				this.LoadProjectile(582);
				Texture2D texture2D = Main.projectileTexture[582];
				Vector2 vector11 = nPC.Center - Main.screenPosition;
				vector11 -= new Vector2((float)texture2D.Width, (float)(texture2D.Height / Main.npcFrameCount[type])) * nPC.scale / 2f;
				vector11 += new Vector2(0f, num68 + num69 + nPC.gfxOffY + y);
				vector11 += new Vector2((float)(-(float)nPC.spriteDirection * 2), -2f);
				Main.spriteBatch.Draw(texture2D, vector11, null, nPC.GetAlpha(color9), nPC.rotation, texture2D.Size() * new Vector2(0f, 0.5f), nPC.scale, spriteEffects, 0f);
			}
			if (type == 427 || type == 426 || type == 428 || type == 509 || type == 521 || type == 523 || type == 541 || (type >= 542 && type <= 545) || type == 546 || type == 552 || type == 553 || type == 554 || type == 561 || type == 562 || type == 563 || type == 555 || type == 556 || type == 557 || type == 558 || type == 559 || type == 560 || type == 574 || type == 575 || type == 568 || type == 569 || type == 572 || type == 573 || type == 566 || type == 567 || type == 570 || type == 578 || type == 571)
			{
				Texture2D texture2D2 = Main.npcTexture[type];
				Microsoft.Xna.Framework.Color color10 = Microsoft.Xna.Framework.Color.White;
				float amount = 0f;
				float amount2 = 0f;
				int num71 = 0;
				int num72 = 0;
				int num73 = 1;
				int num74 = 15;
				int num75 = 0;
				float scale = nPC.scale;
				float value3 = nPC.scale;
				int num76 = 0;
				float num77 = 0f;
				float scaleFactor = 0f;
				float num78 = 0f;
				Microsoft.Xna.Framework.Color color11 = color9;
				int num79 = type;
				switch (num79)
				{
				case 426:
					num76 = 4;
					scaleFactor = 4f;
					num77 = (float)Math.Cos((double)(Main.GlobalTime % 1.2f / 1.2f * 6.28318548f)) / 2f + 0.5f;
					color10 = Microsoft.Xna.Framework.Color.Turquoise;
					amount = 0.5f;
					num71 = 6;
					num72 = 2;
					num74 = num71;
					break;
				case 427:
					num71 = 8;
					num72 = 2;
					num74 = num71 * 3;
					break;
				default:
					if (num79 != 509)
					{
						switch (num79)
						{
						case 521:
							num71 = 10;
							num72 = 2;
							num74 = num71;
							num75 = 1;
							value3 = 0.3f;
							break;
						case 523:
							num76 = 3;
							scaleFactor = 10f * nPC.scale;
							amount = 0.5f;
							amount2 = 0.8f;
							color10 = Microsoft.Xna.Framework.Color.HotPink;
							color10.A = 128;
							num78 = nPC.localAI[0];
							num77 = nPC.localAI[1];
							break;
						case 541:
							num76 = 4;
							scaleFactor = 6f;
							num77 = (float)Math.Cos((double)(Main.GlobalTime % 2.4f / 2.4f * 6.28318548f)) / 2f + 0.5f;
							color10 = Microsoft.Xna.Framework.Color.Gold;
							amount = 0.5f;
							break;
						case 542:
						case 543:
						case 544:
						case 545:
							num71 = 6;
							num72 = 3;
							num74 = num71 * 2;
							break;
						case 546:
							num71 = 8;
							num72 = 2;
							num74 = num71 * 3;
							break;
						case 552:
						case 553:
						case 554:
						case 555:
						case 556:
						case 557:
						case 561:
						case 562:
						case 563:
						case 568:
						case 569:
						case 570:
						case 571:
						case 572:
						case 573:
							num71 = 0;
							if (type == 561 || type == 562 || type == 563)
							{
								num69 = -8f;
							}
							if (type == 555 || type == 556 || type == 557)
							{
								num69 = -5f;
							}
							if (type == 572 || type == 573)
							{
								num69 = -4f;
							}
							if (type == 570 || type == 571)
							{
								spriteEffects ^= SpriteEffects.FlipHorizontally;
								num69 = -2f;
							}
							if (type == 568 || type == 569)
							{
								spriteEffects ^= SpriteEffects.FlipHorizontally;
								num69 = -3f;
								num76 = 4;
								scaleFactor = 4f;
								num77 = (float)Math.Cos((double)(Main.GlobalTime % 1.5f / 1.5f * 6.28318548f)) / 6f + 0.75f;
								color10 = Microsoft.Xna.Framework.Color.HotPink;
								color10.A = 127;
								amount = 0.5f;
							}
							if (nPC.localAI[3] < 60f)
							{
								float num80 = 8f;
								float num81 = nPC.localAI[3] / 60f;
								num76 = 3;
								num77 = 1f - num81 * num81;
								scaleFactor = num80;
								color10 = new Microsoft.Xna.Framework.Color(127, 0, 255, 0);
								amount2 = 1f;
								color11 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Transparent, color11, num81 * num81);
							}
							break;
						case 558:
						case 559:
						case 560:
						case 574:
						case 575:
							if (nPC.ai[0] != 2f)
							{
								num71 = 0;
							}
							else
							{
								num71 = 6;
								num72 = 2;
								num74 = num71 * 3;
								num75 = 1;
							}
							break;
						case 566:
						case 567:
						case 578:
							num71 = 0;
							num69 = -2f;
							break;
						}
					}
					else
					{
						num71 = 6;
						num72 = 2;
						num74 = num71 * 3;
					}
					break;
				}
				for (int n = num73; n < num71; n += num72)
				{
					Vector2 arg_3B84_0 = nPC.oldPos[n];
					Microsoft.Xna.Framework.Color color12 = color11;
					color12 = Microsoft.Xna.Framework.Color.Lerp(color12, color10, amount);
					color12 = nPC.GetAlpha(color12);
					color12 *= (float)(num71 - n) / (float)num74;
					float arg_3BB9_0 = nPC.rotation;
					if (num75 == 1)
					{
						float arg_3BC8_0 = nPC.oldRot[n];
					}
					float scale2 = MathHelper.Lerp(scale, value3, 1f - (float)(num71 - n) / (float)num74);
					Vector2 vector12 = nPC.oldPos[n] + new Vector2((float)nPC.width, (float)nPC.height) / 2f - Main.screenPosition;
					vector12 -= new Vector2((float)texture2D2.Width, (float)(texture2D2.Height / Main.npcFrameCount[type])) * nPC.scale / 2f;
					vector12 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
					Main.spriteBatch.Draw(texture2D2, vector12, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color12, nPC.rotation, vector10, scale2, spriteEffects, 0f);
				}
				for (int num82 = 0; num82 < num76; num82++)
				{
					Microsoft.Xna.Framework.Color color13 = color9;
					color13 = Microsoft.Xna.Framework.Color.Lerp(color13, color10, amount);
					color13 = nPC.GetAlpha(color13);
					color13 = Microsoft.Xna.Framework.Color.Lerp(color13, color10, amount2);
					color13 *= 1f - num77;
					Vector2 vector13 = nPC.Center + ((float)num82 / (float)num76 * 6.28318548f + nPC.rotation + num78).ToRotationVector2() * scaleFactor * num77 - Main.screenPosition;
					vector13 -= new Vector2((float)texture2D2.Width, (float)(texture2D2.Height / Main.npcFrameCount[type])) * nPC.scale / 2f;
					vector13 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
					Main.spriteBatch.Draw(texture2D2, vector13, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color13, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
				}
				Vector2 vector14 = nPC.Center - Main.screenPosition;
				vector14 -= new Vector2((float)texture2D2.Width, (float)(texture2D2.Height / Main.npcFrameCount[type])) * nPC.scale / 2f;
				vector14 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
				Main.spriteBatch.Draw(texture2D2, vector14, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), nPC.GetAlpha(color11), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
				if (type == 427)
				{
					Main.spriteBatch.Draw(Main.glowMaskTexture[152], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(255 - nPC.alpha, 255 - nPC.alpha, 255 - nPC.alpha, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
				}
				else if (type == 426)
				{
					Main.spriteBatch.Draw(Main.glowMaskTexture[153], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(128 - nPC.alpha / 2, 128 - nPC.alpha / 2, 128 - nPC.alpha / 2, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
				}
				if (type == 541)
				{
					Microsoft.Xna.Framework.Color color14 = new Microsoft.Xna.Framework.Color(127 - nPC.alpha, 127 - nPC.alpha, 127 - nPC.alpha, 0).MultiplyRGBA(Microsoft.Xna.Framework.Color.Gold);
					for (int num83 = 0; num83 < num76; num83++)
					{
						Microsoft.Xna.Framework.Color color15 = color14;
						color15 = nPC.GetAlpha(color15);
						color15 *= 1f - num77;
						Vector2 vector15 = nPC.Center + ((float)num83 / (float)num76 * 6.28318548f + nPC.rotation + num78).ToRotationVector2() * (4f * num77 + 2f) - Main.screenPosition;
						vector15 -= new Vector2((float)texture2D2.Width, (float)(texture2D2.Height / Main.npcFrameCount[type])) * nPC.scale / 2f;
						vector15 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
						Main.spriteBatch.Draw(Main.glowMaskTexture[216], vector15, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color15, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
					}
					Main.spriteBatch.Draw(Main.glowMaskTexture[216], vector14, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color14, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
				}
				if ((type == 568 || type == 569) && nPC.localAI[3] >= 60f)
				{
					Microsoft.Xna.Framework.Color color16 = new Microsoft.Xna.Framework.Color(127 - nPC.alpha, 127 - nPC.alpha, 127 - nPC.alpha, 0).MultiplyRGBA(color10);
					for (int num84 = 0; num84 < num76; num84++)
					{
						Microsoft.Xna.Framework.Color color17 = color16;
						color17 = nPC.GetAlpha(color17);
						color17 *= 1f - num77;
						Vector2 vector16 = nPC.Center + ((float)num84 / (float)num76 * 6.28318548f + nPC.rotation + num78).ToRotationVector2() * (4f * num77 + 2f) - Main.screenPosition;
						vector16 -= new Vector2((float)texture2D2.Width, (float)(texture2D2.Height / Main.npcFrameCount[type])) * nPC.scale / 2f;
						vector16 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
						Main.spriteBatch.Draw(Main.glowMaskTexture[224], vector16, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color17, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
					}
					Main.spriteBatch.Draw(Main.glowMaskTexture[224], vector14, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color16, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
					float num85 = nPC.localAI[0];
					if (num85 > 0f)
					{
						byte a2 = (byte)((Math.Cos((double)(num85 * 6.28318548f / 60f)) * 0.5 + 0.5) * 32.0 + 0.0);
						Microsoft.Xna.Framework.Color color18 = new Microsoft.Xna.Framework.Color(180, 90, 255, (int)a2) * 0.75f;
						float num86 = 1f;
						if (num85 < 60f)
						{
							float num87 = Utils.InverseLerp(0f, 60f, num85, false);
							color18 *= num87;
							num86 = MathHelper.Lerp(1f, 0.5f, 1f - num87 * num87);
						}
						Texture2D texture2D3 = Main.extraTexture[89];
						Vector2 origin = texture2D3.Size() / 2f;
						Vector2 scale3 = new Vector2(num86);
						float num88 = num85 * 0.00418879045f;
						float num89 = 1.57079637f;
						scale3.Y *= 1f;
						scale3.X *= 1f;
						for (float num90 = 0f; num90 < 16f; num90 += 1f)
						{
							float num91 = num88 + 6.28318548f * (num90 / 16f);
							Vector2 position4 = nPC.Center - Main.screenPosition + num91.ToRotationVector2() * 400f * num86;
							Main.spriteBatch.Draw(texture2D3, position4, null, color18, num91 + 1.57079637f + num89, origin, scale3, SpriteEffects.None, 0f);
						}
					}
				}
				if (type == 546)
				{
					Main.spriteBatch.Draw(Main.extraTexture[76], vector14, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(255, 255, 255, 200), MathHelper.Clamp(nPC.velocity.X * 0.1f, -0.3926991f, 0.3926991f), vector10, nPC.scale, spriteEffects, 0f);
				}
				if ((type == 566 || type == 567) && nPC.localAI[3] >= 115f)
				{
					int frameY = (int)(Main.GlobalTime % 0.5f / 0.5f * 4f);
					Texture2D texture2D4 = Main.extraTexture[80];
					Microsoft.Xna.Framework.Rectangle rectangle = texture2D4.Frame(1, 4, 0, frameY);
					Vector2 value4 = new Vector2((float)(nPC.spriteDirection * 8), -26f) * nPC.scale;
					int num92 = nPC.frame.Y / nPC.frame.Height;
					int num93 = 0;
					switch (num92)
					{
					case 0:
						num93 = 6;
						break;
					case 1:
						num93 = 4;
						break;
					case 2:
						num93 = 2;
						break;
					case 3:
						num93 = 6;
						break;
					case 4:
						num93 = 8;
						break;
					case 5:
						num93 = 6;
						break;
					case 6:
						num93 = 4;
						break;
					case 7:
						num93 = 6;
						break;
					case 8:
						num93 = 2;
						break;
					}
					Microsoft.Xna.Framework.Color color19 = new Microsoft.Xna.Framework.Color(255, 255, 255, 130);
					value4.Y += (float)num93;
					Main.spriteBatch.Draw(texture2D4, vector14 + value4 * nPC.scale, new Microsoft.Xna.Framework.Rectangle?(rectangle), color19, MathHelper.Clamp(nPC.velocity.X * 0.1f, -0.3926991f, 0.3926991f), rectangle.Size() / 2f, nPC.scale * 0.7f, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
					return;
				}
			}
			else
			{
				if (type == 551)
				{
					Texture2D texture = Main.npcTexture[type];
					Vector2 vector17 = nPC.Center - Main.screenPosition;
					Microsoft.Xna.Framework.Rectangle frame = nPC.frame;
					SpriteEffects spriteEffects2 = spriteEffects ^ SpriteEffects.FlipHorizontally;
					float rotation8 = nPC.rotation;
					Microsoft.Xna.Framework.Color color20 = color9;
					Microsoft.Xna.Framework.Color value5 = Microsoft.Xna.Framework.Color.Lerp(color20, Microsoft.Xna.Framework.Color.White, 0.6f);
					value5.A = 66;
					Vector2 value6 = new Vector2(171f, 44f);
					Vector2 vector18 = new Vector2(230f, 52f);
					Vector2 vector19 = Vector2.Lerp(value6, vector18, 0.5f) + new Vector2(-50f, 30f);
					int num94 = (int)nPC.localAI[0] / 4;
					Vector2 spinningpoint = value6 - vector19;
					Vector2 spinningpoint2 = vector18 - vector19;
					Texture2D texture2D5 = Main.extraTexture[82];
					if (spriteEffects2.HasFlag(SpriteEffects.FlipHorizontally))
					{
						spinningpoint2.X *= -1f;
					}
					Microsoft.Xna.Framework.Rectangle value7 = texture2D5.Frame(2, 5, num94 / 5, num94 % 5);
					Vector2 origin2 = new Vector2(16f, 176f);
					if (spriteEffects2.HasFlag(SpriteEffects.FlipHorizontally))
					{
						origin2.X = (float)value7.Width - origin2.X;
					}
					if (spriteEffects2.HasFlag(SpriteEffects.FlipHorizontally))
					{
						vector19.X = (float)frame.Width - vector19.X;
					}
					Texture2D texture2D6 = Main.extraTexture[81];
					if (spriteEffects2.HasFlag(SpriteEffects.FlipHorizontally))
					{
						spinningpoint.X *= -1f;
					}
					Microsoft.Xna.Framework.Rectangle value8 = texture2D6.Frame(2, 5, num94 / 5, num94 % 5);
					Vector2 origin3 = new Vector2(215f, 170f);
					if (spriteEffects2.HasFlag(SpriteEffects.FlipHorizontally))
					{
						origin3.X = (float)value8.Width - origin3.X;
					}
					float num95 = Utils.InverseLerp(0f, 30f, nPC.localAI[1], true);
					if (num95 == 1f)
					{
						num95 = Utils.InverseLerp(60f, 30f, nPC.localAI[1], true);
					}
					num95 = 2f;
					Vector2 value9 = nPC.Size / 2f - Main.screenPosition;
					int num96 = 9;
					int num97 = -3;
					int num98 = 0;
					byte b4 = 2;
					for (int num99 = num96; num99 > num98; num99 += num97)
					{
						Vector2 vector20 = nPC.oldPos[num99] + value9;
						float num100 = nPC.oldRot[num99];
						Microsoft.Xna.Framework.Color color21 = color20 * (1f - (float)num99 / 10f) * 0.35f;
						color21.A /= b4;
						Main.spriteBatch.Draw(texture2D5, vector20 + spinningpoint2.RotatedBy((double)num100, default(Vector2)), new Microsoft.Xna.Framework.Rectangle?(value7), color21, num100, origin2, 1f, spriteEffects2, 0f);
						Main.spriteBatch.Draw(texture, vector20, new Microsoft.Xna.Framework.Rectangle?(frame), color21, num100, vector19, 1f, spriteEffects2, 0f);
						Main.spriteBatch.Draw(texture2D6, vector20 + spinningpoint.RotatedBy((double)num100, default(Vector2)), new Microsoft.Xna.Framework.Rectangle?(value8), color21, num100, origin3, 1f, spriteEffects2, 0f);
					}
					Main.spriteBatch.Draw(texture2D5, vector17 + spinningpoint2.RotatedBy((double)rotation8, default(Vector2)), new Microsoft.Xna.Framework.Rectangle?(value7), color20, rotation8, origin2, 1f, spriteEffects2, 0f);
					Main.spriteBatch.Draw(texture, vector17, new Microsoft.Xna.Framework.Rectangle?(frame), color20, rotation8, vector19, 1f, spriteEffects2, 0f);
					Main.spriteBatch.Draw(Main.glowMaskTexture[226], vector17, new Microsoft.Xna.Framework.Rectangle?(frame), value5 * (0.7f + 0.3f * num95), rotation8, vector19, 1f, spriteEffects2, 0f);
					Main.spriteBatch.Draw(texture2D6, vector17 + spinningpoint.RotatedBy((double)rotation8, default(Vector2)), new Microsoft.Xna.Framework.Rectangle?(value8), color20, rotation8, origin3, 1f, spriteEffects2, 0f);
					return;
				}
				if (type == 576 || type == 577)
				{
					Texture2D texture2D7 = Main.npcTexture[type];
					Vector2 vector21 = nPC.Bottom - Main.screenPosition;
					Microsoft.Xna.Framework.Rectangle rectangle2 = texture2D7.Frame(5, 10, nPC.frame.Y / 10, nPC.frame.Y % 10);
					Vector2 origin4 = rectangle2.Size() * new Vector2(0.5f, 1f);
					origin4.Y -= 4f;
					int num101 = 94;
					if (nPC.spriteDirection == 1)
					{
						origin4.X = (float)num101;
					}
					else
					{
						origin4.X = (float)(rectangle2.Width - num101);
					}
					Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
					float amount3 = 0f;
					float amount4 = 0f;
					int num102 = 0;
					float num103 = 0f;
					Microsoft.Xna.Framework.Color color22 = color9;
					if (nPC.localAI[3] < 60f)
					{
						float num104 = nPC.localAI[3] / 60f;
						num102 = 3;
						num103 = 1f - num104 * num104;
						white = new Microsoft.Xna.Framework.Color(127, 0, 255, 0);
						amount4 = 1f;
						color22 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Transparent, color22, num104 * num104);
					}
					for (int num105 = 0; num105 < num102; num105++)
					{
						Microsoft.Xna.Framework.Color color23 = color9;
						color23 = Microsoft.Xna.Framework.Color.Lerp(color23, white, amount3);
						color23 = nPC.GetAlpha(color23);
						color23 = Microsoft.Xna.Framework.Color.Lerp(color23, white, amount4);
						color23 *= 1f - num103;
						Vector2 vector22 = vector21;
						vector22 -= new Vector2((float)texture2D7.Width, (float)(texture2D7.Height / Main.npcFrameCount[type])) * nPC.scale / 2f;
						vector22 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
						Main.spriteBatch.Draw(texture2D7, vector22, new Microsoft.Xna.Framework.Rectangle?(rectangle2), color23, nPC.rotation, origin4, nPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
					}
					Main.spriteBatch.Draw(texture2D7, vector21, new Microsoft.Xna.Framework.Rectangle?(rectangle2), nPC.GetAlpha(color22), nPC.rotation, origin4, nPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
					return;
				}
				if (type == 564 || type == 565)
				{
					Texture2D texture2D8 = Main.npcTexture[type];
					Vector2 vector23 = nPC.Bottom - Main.screenPosition;
					Microsoft.Xna.Framework.Rectangle rectangle3 = texture2D8.Frame(5, 9, nPC.frame.Y / 9, nPC.frame.Y % 9);
					Vector2 origin5 = rectangle3.Size() * new Vector2(0.5f, 1f);
					origin5.Y -= 10f;
					int num106 = 52;
					if (nPC.spriteDirection == 1)
					{
						origin5.X = (float)num106;
					}
					else
					{
						origin5.X = (float)(rectangle3.Width - num106);
					}
					Microsoft.Xna.Framework.Color white2 = Microsoft.Xna.Framework.Color.White;
					float amount5 = 0f;
					float amount6 = 0f;
					int num107 = 0;
					float num108 = 0f;
					float scaleFactor2 = 0f;
					Microsoft.Xna.Framework.Color color24 = color9;
					if (nPC.localAI[3] < 60f)
					{
						float num109 = 8f;
						float num110 = nPC.localAI[3] / 60f;
						num107 = 3;
						num108 = 1f - num110 * num110;
						scaleFactor2 = num109;
						white2 = new Microsoft.Xna.Framework.Color(127, 0, 255, 0);
						amount6 = 1f;
						color24 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Transparent, color24, num110 * num110);
					}
					for (int num111 = 0; num111 < num107; num111++)
					{
						Microsoft.Xna.Framework.Color color25 = color9;
						color25 = Microsoft.Xna.Framework.Color.Lerp(color25, white2, amount5);
						color25 = nPC.GetAlpha(color25);
						color25 = Microsoft.Xna.Framework.Color.Lerp(color25, white2, amount6);
						color25 *= 1f - num108;
						Vector2 vector24 = vector23;
						vector24 -= new Vector2((float)texture2D8.Width, (float)(texture2D8.Height / Main.npcFrameCount[type])) * nPC.scale / 2f;
						vector24 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
						vector24 += ((float)num111 / (float)num107 * 6.28318548f).ToRotationVector2() * scaleFactor2 * num108;
						Main.spriteBatch.Draw(texture2D8, vector24, new Microsoft.Xna.Framework.Rectangle?(rectangle3), color25, nPC.rotation, origin5, nPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
					}
					Microsoft.Xna.Framework.Color alpha3 = nPC.GetAlpha(color24);
					num107 = 4;
					scaleFactor2 = 4f;
					num108 = 0.625f + (float)Math.Sin((double)(Main.GlobalTime * 6.28318548f * 0.75f + 3.14159274f)) * 0.125f;
					for (int num112 = 0; num112 < num107; num112++)
					{
						Microsoft.Xna.Framework.Color color26 = alpha3;
						color26 *= 1f - num108;
						Vector2 vector25 = vector23;
						vector25 -= new Vector2((float)texture2D8.Width, (float)(texture2D8.Height / Main.npcFrameCount[type])) * nPC.scale / 2f;
						vector25 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
						vector25 += ((float)num112 / (float)num107 * 6.28318548f).ToRotationVector2() * scaleFactor2 * num108;
						Main.spriteBatch.Draw(texture2D8, vector25, new Microsoft.Xna.Framework.Rectangle?(rectangle3), color26, nPC.rotation, origin5, nPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
					}
					Main.spriteBatch.Draw(texture2D8, vector23, new Microsoft.Xna.Framework.Rectangle?(rectangle3), alpha3, nPC.rotation, origin5, nPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
					if (nPC.Opacity > 0f)
					{
						Microsoft.Xna.Framework.Color color27 = Microsoft.Xna.Framework.Color.White;
						color27.A /= 2;
						color27 *= nPC.Opacity;
						Main.spriteBatch.Draw(Main.glowMaskTexture[225], vector23, new Microsoft.Xna.Framework.Rectangle?(rectangle3), color27, nPC.rotation, origin5, nPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
						num107 = 4;
						scaleFactor2 = 4f;
						num108 = 0.5f + (float)Math.Sin((double)(Main.GlobalTime * 6.28318548f * 0.75f)) * 0.5f;
						for (int num113 = 0; num113 < num107; num113++)
						{
							Microsoft.Xna.Framework.Color color28 = color27 * 0.35f;
							color28 *= 1f - num108;
							Vector2 vector26 = vector23;
							vector26 -= new Vector2((float)texture2D8.Width, (float)(texture2D8.Height / Main.npcFrameCount[type])) * nPC.scale / 2f;
							vector26 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
							vector26 += ((float)num113 / (float)num107 * 6.28318548f).ToRotationVector2() * scaleFactor2 * num108;
							Main.spriteBatch.Draw(Main.glowMaskTexture[225], vector26, new Microsoft.Xna.Framework.Rectangle?(rectangle3), color28, nPC.rotation, origin5, nPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
						}
						return;
					}
				}
				else if (type == 548)
				{
					Texture2D texture2D9 = Main.npcTexture[type];
					Vector2 vector27 = nPC.Bottom - Main.screenPosition;
					Microsoft.Xna.Framework.Rectangle rectangle4 = texture2D9.Frame(1, 1, 0, 0);
					Vector2 origin6 = rectangle4.Size() / 2f;
					origin6.Y += 30f;
					origin6.Y += 8f;
					origin6.X -= 1f;
					Microsoft.Xna.Framework.Color white3 = Microsoft.Xna.Framework.Color.White;
					float amount7 = 0f;
					float amount8 = 0f;
					int num114 = 0;
					float num115 = 0f;
					float scaleFactor3 = 0f;
					Microsoft.Xna.Framework.Color newColor3 = color9;
					for (int num116 = 0; num116 < num114; num116++)
					{
						Microsoft.Xna.Framework.Color color29 = color9;
						color29 = Microsoft.Xna.Framework.Color.Lerp(color29, white3, amount7);
						color29 = nPC.GetAlpha(color29);
						color29 = Microsoft.Xna.Framework.Color.Lerp(color29, white3, amount8);
						color29 *= 1f - num115;
						Vector2 vector28 = vector27;
						vector28 -= new Vector2((float)texture2D9.Width, (float)(texture2D9.Height / Main.npcFrameCount[type])) * nPC.scale / 2f;
						vector28 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
						vector28 += ((float)num116 / (float)num114 * 6.28318548f).ToRotationVector2() * scaleFactor3 * num115;
						Main.spriteBatch.Draw(texture2D9, vector28, new Microsoft.Xna.Framework.Rectangle?(rectangle4), color29, nPC.rotation, origin6, nPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
					}
					Microsoft.Xna.Framework.Color alpha4 = nPC.GetAlpha(newColor3);
					num114 = 4;
					scaleFactor3 = 4f;
					num115 = 0.625f + (float)Math.Sin((double)(Main.GlobalTime * 6.28318548f * 0.75f + 3.14159274f)) * 0.125f;
					for (int num117 = 0; num117 < num114; num117++)
					{
						Microsoft.Xna.Framework.Color color30 = alpha4;
						color30.A = 0;
						color30 *= 1f - num115;
						Vector2 vector29 = vector27;
						vector29 -= new Vector2((float)texture2D9.Width, (float)(texture2D9.Height / Main.npcFrameCount[type])) * nPC.scale / 2f;
						vector29 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
						vector29 += ((float)num117 / (float)num114 * 6.28318548f).ToRotationVector2() * scaleFactor3 * num115;
						Main.spriteBatch.Draw(texture2D9, vector29, new Microsoft.Xna.Framework.Rectangle?(rectangle4), color30, nPC.rotation, origin6, nPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
					}
					Main.spriteBatch.Draw(texture2D9, vector27, new Microsoft.Xna.Framework.Rectangle?(rectangle4), alpha4, nPC.rotation, origin6, nPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
					if (nPC.ai[1] == 2f)
					{
						float scale4 = Math.Min(1f, nPC.ai[0] / 120f);
						Main.spriteBatch.Draw(texture2D9, vector27, new Microsoft.Xna.Framework.Rectangle?(rectangle4), new Microsoft.Xna.Framework.Color(1f, 1f, 1f, 0f) * scale4, nPC.rotation, origin6, nPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
						float progress = MathHelper.Clamp(nPC.ai[0] / 450f, 0f, 1f);
						if (!Filters.Scene["CrystalWin"].IsActive())
						{
							Filters.Scene.Activate("CrystalWin", nPC.Center, new object[0]);
						}
						else
						{
							Filters.Scene["CrystalWin"].GetShader().UseProgress(progress);
						}
						Filters.Scene["CrystalWin"].GetShader().UseTargetPosition(nPC.Center);
					}
					num114 = 4;
					scaleFactor3 = 4f;
					num115 = 0.625f + (float)Math.Sin((double)(Main.GlobalTime * 6.28318548f * 0.75f)) * 0.125f;
					for (int num118 = 0; num118 < num114; num118++)
					{
						Microsoft.Xna.Framework.Color color31 = alpha4;
						color31.A = 0;
						color31 *= 0.3f;
						color31 *= 1f - num115;
						Vector2 vector30 = vector27;
						vector30 -= new Vector2((float)texture2D9.Width, (float)(texture2D9.Height / Main.npcFrameCount[type])) * nPC.scale / 2f;
						vector30 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
						vector30 += ((float)num118 / (float)num114 * 6.28318548f).ToRotationVector2() * scaleFactor3 * num115;
						Main.spriteBatch.Draw(texture2D9, vector30, new Microsoft.Xna.Framework.Rectangle?(rectangle4), color31, nPC.rotation, origin6, nPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
					}
					if (nPC.alpha < 255)
					{
						float num119 = Main.GlobalTime % 3f / 3f;
						float num120 = num119;
						if (num120 > 0.5f)
						{
							num120 = 1f - num119;
						}
						if (num120 < 0f)
						{
							num120 = 0f;
						}
						float num121 = (num119 + 0.5f) % 1f;
						float num122 = num121;
						if (num122 > 0.5f)
						{
							num122 = 1f - num121;
						}
						if (num122 < 0f)
						{
							num122 = 0f;
						}
						texture2D9 = Main.glowMaskTexture[239];
						rectangle4 = texture2D9.Frame(1, 1, 0, 0);
						origin6 = rectangle4.Size() / 2f;
						Vector2 position5 = vector27 + new Vector2(0f, -40f);
						Microsoft.Xna.Framework.Color color32 = new Microsoft.Xna.Framework.Color(140, 50, 255, 0);
						color32 *= 0.6f;
						Main.spriteBatch.Draw(texture2D9, position5, new Microsoft.Xna.Framework.Rectangle?(rectangle4), color32, nPC.rotation, origin6, nPC.scale * 0.75f, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
						num115 = 1f + num119 * 0.75f;
						Main.spriteBatch.Draw(texture2D9, position5, new Microsoft.Xna.Framework.Rectangle?(rectangle4), color32 * num120, nPC.rotation, origin6, nPC.scale * 0.75f * num115, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
						num115 = 1f + num121 * 0.75f;
						Main.spriteBatch.Draw(texture2D9, position5, new Microsoft.Xna.Framework.Rectangle?(rectangle4), color32 * num122, nPC.rotation, origin6, nPC.scale * 0.75f * num115, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
						texture2D9 = Main.extraTexture[89];
						rectangle4 = texture2D9.Frame(1, 1, 0, 0);
						origin6 = rectangle4.Size() / 2f;
						Vector2 scale5 = new Vector2(0.75f, 1f + num115) * 1.5f;
						num115 = 1f + num121 * 0.75f;
						if (nPC.dontTakeDamageFromHostiles)
						{
							scale5.Y *= 0.6f;
						}
						position5.Y -= 6f;
						Main.spriteBatch.Draw(texture2D9, position5, new Microsoft.Xna.Framework.Rectangle?(rectangle4), color32 * num122, nPC.rotation + 1.57079637f, origin6, scale5, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
						Main.spriteBatch.Draw(texture2D9, position5, new Microsoft.Xna.Framework.Rectangle?(rectangle4), Microsoft.Xna.Framework.Color.Lerp(color32, Microsoft.Xna.Framework.Color.White, 0.5f), nPC.rotation + 1.57079637f, origin6, 1.5f, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
						return;
					}
				}
				else
				{
					if (type == 371 || (type >= 454 && type <= 459))
					{
						Texture2D texture2D10 = Main.npcTexture[type];
						Vector2 vector31 = nPC.Center - Main.screenPosition;
						vector31 -= new Vector2((float)texture2D10.Width, (float)(texture2D10.Height / Main.npcFrameCount[type])) * nPC.scale / 2f;
						vector31 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
						Main.spriteBatch.Draw(texture2D10, vector31, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), nPC.GetAlpha(color9), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
						return;
					}
					if (type == 549)
					{
						Texture2D texture2 = Main.npcTexture[type];
						Vector2 vector32 = nPC.Center - Main.screenPosition;
						Microsoft.Xna.Framework.Rectangle frame2 = nPC.frame;
						Vector2 origin7 = new Vector2(70f, 127f);
						origin7.Y += 8f;
						Vector2 vector33 = new Vector2(nPC.scale);
						float num123 = nPC.localAI[0];
						if (num123 < 120f)
						{
							vector33 *= num123 / 240f + 0.5f;
						}
						Microsoft.Xna.Framework.Color alpha5 = nPC.GetAlpha(color9);
						float num124 = Utils.InverseLerp(0f, 120f, num123, true);
						float scaleFactor4 = MathHelper.Lerp(32f, 0f, num124);
						Microsoft.Xna.Framework.Color color33 = alpha5;
						color33.A = (byte)MathHelper.Lerp((float)color33.A, 0f, num124);
						color33 *= num124;
						if (num123 >= 120f)
						{
							color33 = alpha5;
						}
						Main.spriteBatch.Draw(texture2, vector32, new Microsoft.Xna.Framework.Rectangle?(frame2), color33, nPC.rotation, origin7, vector33, spriteEffects, 0f);
						float num125 = (nPC.ai[0] + 54f) % 180f;
						num125 -= 120f;
						num125 /= 180f;
						num125 *= 2f;
						float y2 = (num125 * 6.28318548f).ToRotationVector2().Y;
						if (num123 >= 120f)
						{
							scaleFactor4 = y2 * 0f;
							color33.A = (byte)((float)color33.A * 0.5f);
							color33 *= y2 / 2f + 0.5f;
							float num126 = 1f;
							for (float num127 = 0f; num127 < num126; num127 += 1f)
							{
								Main.spriteBatch.Draw(texture2, vector32 + (6.28318548f / num126 * num127).ToRotationVector2() * scaleFactor4, new Microsoft.Xna.Framework.Rectangle?(frame2), color33, nPC.rotation, origin7, vector33, spriteEffects, 0f);
							}
						}
						float num128 = nPC.ai[0] / 180f - 0.76f;
						if (num128 < 0f)
						{
							num128 += 1f;
						}
						float num129 = 0f;
						float num130 = 0f;
						float num131 = 0.6f;
						float num132 = 0.8f;
						if (num128 >= num131 && num128 <= num132)
						{
							num129 = Utils.InverseLerp(num131, num132, num128, false);
							num130 = MathHelper.Lerp(0.75f, 0.85f, num129);
						}
						num131 = num132;
						num132 = num131 + 0.13f;
						if (num128 >= num131 && num128 <= num132)
						{
							num129 = 1f - Utils.InverseLerp(num131, num132, num128, false);
							num130 = MathHelper.Lerp(1.3f, 0.85f, num129);
						}
						Vector2 value10 = new Vector2(0f, -150f);
						int frameNumber = frame2.Y / frame2.Height;
						float num133 = MathHelper.Clamp((num123 - 100f) / 40f, 0f, 1f);
						this.DrawElderEye(Main.spriteBatch, nPC.Center + value10, 0.75f * num133, 0.75f, frameNumber, Microsoft.Xna.Framework.Color.White);
						this.DrawElderEye(Main.spriteBatch, nPC.Center + value10, 0.75f * num133, 0.75f, frameNumber, new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * (y2 / 2f + 0.5f));
						if (num129 > 0f && num130 > 0f)
						{
							this.DrawElderEye(Main.spriteBatch, nPC.Center + value10, num129 * 0.5f, num130, frameNumber, new Microsoft.Xna.Framework.Color(255, 255, 255, 127));
						}
						if (num123 < 120f)
						{
							float num134 = 6.28318548f * num124 * (float)Math.Pow((double)num124, 2.0) * 2f + num124;
							color33.A = (byte)((float)alpha5.A * (float)Math.Pow((double)num124, 2.0) * 0.5f);
							float num135 = 3f;
							for (float num136 = 0f; num136 < num135; num136 += 1f)
							{
								Main.spriteBatch.Draw(texture2, vector32 + (num134 + 6.28318548f / num135 * num136).ToRotationVector2() * scaleFactor4, new Microsoft.Xna.Framework.Rectangle?(frame2), color33, nPC.rotation, origin7, vector33, spriteEffects, 0f);
							}
							return;
						}
					}
					else if (type == 493 || type == 507 || type == 422 || type == 517)
					{
						Texture2D texture2D11 = Main.npcTexture[type];
						Vector2 vector34 = nPC.Center - Main.screenPosition;
						Vector2 value11 = vector34 - new Vector2(300f, 310f);
						vector34 -= new Vector2((float)texture2D11.Width, (float)(texture2D11.Height / Main.npcFrameCount[type])) * nPC.scale / 2f;
						vector34 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
						Main.spriteBatch.Draw(texture2D11, vector34, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), nPC.GetAlpha(color9), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
						if (type == 493)
						{
							texture2D11 = Main.glowMaskTexture[132];
							float scaleFactor5 = 4f + (nPC.GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 4f;
							for (int num137 = 0; num137 < 4; num137++)
							{
								Main.spriteBatch.Draw(texture2D11, vector34 + nPC.velocity.RotatedBy((double)((float)num137 * 1.57079637f), default(Vector2)) * scaleFactor5, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0) * nPC.Opacity, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
							}
						}
						else if (type == 507)
						{
							texture2D11 = Main.glowMaskTexture[143];
							float scaleFactor6 = 4f + (nPC.GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 4f;
							for (int num138 = 0; num138 < 4; num138++)
							{
								Main.spriteBatch.Draw(texture2D11, vector34 + nPC.velocity.RotatedBy((double)((float)num138 * 1.57079637f), default(Vector2)) * scaleFactor6, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0) * nPC.Opacity, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
							}
						}
						else if (type == 422)
						{
							texture2D11 = Main.glowMaskTexture[149];
							float scaleFactor7 = 4f + (nPC.GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 4f;
							for (int num139 = 0; num139 < 4; num139++)
							{
								Main.spriteBatch.Draw(texture2D11, vector34 + nPC.velocity.RotatedBy((double)((float)num139 * 1.57079637f), default(Vector2)) * scaleFactor7, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0) * nPC.Opacity, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
							}
						}
						else if (type == 517)
						{
							texture2D11 = Main.glowMaskTexture[162];
							float scaleFactor8 = 2f + (nPC.GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 9f;
							for (int num140 = 0; num140 < 4; num140++)
							{
								Main.spriteBatch.Draw(texture2D11, vector34 + nPC.velocity.RotatedBy((double)((float)num140 * 1.57079637f), default(Vector2)) * scaleFactor8 + Vector2.UnitX * 2f, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0) * nPC.Opacity, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
							}
						}
						int num141 = 0;
						string key = "";
						int num79 = type;
						if (num79 <= 493)
						{
							if (num79 != 422)
							{
								if (num79 == 493)
								{
									num141 = NPC.ShieldStrengthTowerStardust;
									key = "Stardust";
								}
							}
							else
							{
								num141 = NPC.ShieldStrengthTowerVortex;
								key = "Vortex";
							}
						}
						else if (num79 != 507)
						{
							if (num79 == 517)
							{
								num141 = NPC.ShieldStrengthTowerSolar;
								key = "Solar";
							}
						}
						else
						{
							num141 = NPC.ShieldStrengthTowerNebula;
							key = "Nebula";
						}
						float num142 = (float)num141 / (float)NPC.ShieldStrengthTowerMax;
						if (num141 > 0)
						{
							Main.spriteBatch.End();
							Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.PointWrap, DepthStencilState.Default, RasterizerState.CullNone, null, Main.Transform);
							float num143 = 0f;
							if (nPC.ai[3] > 0f && nPC.ai[3] <= 30f)
							{
								num143 = 1f - nPC.ai[3] / 30f;
							}
							Filters.Scene[key].GetShader().UseIntensity(1f + num143).UseProgress(0f);
							DrawData value12 = new DrawData(TextureManager.Load("Images/Misc/Perlin"), value11 + new Vector2(300f, 300f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 600, 600)), Microsoft.Xna.Framework.Color.White * (num142 * 0.8f + 0.2f), nPC.rotation, new Vector2(300f, 300f), nPC.scale * (1f + num143 * 0.05f), spriteEffects, 0);
							GameShaders.Misc["ForceField"].UseColor(new Vector3(1f + num143 * 0.5f));
							GameShaders.Misc["ForceField"].Apply(new DrawData?(value12));
							value12.Draw(Main.spriteBatch);
							Main.spriteBatch.End();
							Main.spriteBatch.Begin();
							return;
						}
						if (nPC.ai[3] > 0f)
						{
							Main.spriteBatch.End();
							Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.PointWrap, DepthStencilState.Default, RasterizerState.CullNone);
							float num144 = nPC.ai[3] / 120f;
							float num145 = Math.Min(nPC.ai[3] / 30f, 1f);
							Filters.Scene[key].GetShader().UseIntensity(Math.Min(5f, 15f * num144) + 1f).UseProgress(num144);
							DrawData value13 = new DrawData(TextureManager.Load("Images/Misc/Perlin"), value11 + new Vector2(300f, 300f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 600, 600)), new Microsoft.Xna.Framework.Color(new Vector4(1f - (float)Math.Sqrt((double)num145))), nPC.rotation, new Vector2(300f, 300f), nPC.scale * (1f + num145), spriteEffects, 0);
							GameShaders.Misc["ForceField"].UseColor(new Vector3(2f));
							GameShaders.Misc["ForceField"].Apply(new DrawData?(value13));
							value13.Draw(Main.spriteBatch);
							Main.spriteBatch.End();
							Main.spriteBatch.Begin();
							return;
						}
						Filters.Scene[key].GetShader().UseIntensity(0f).UseProgress(0f);
						return;
					}
					else
					{
						if (type == 402)
						{
							this.LoadNPC(403);
							this.LoadNPC(404);
							NPC nPC2 = nPC;
							Texture2D texture2D12 = Main.npcTexture[nPC2.type];
							Vector2 vector35 = nPC2.Center - Main.screenPosition;
							vector35 -= new Vector2((float)texture2D12.Width, (float)(texture2D12.Height / Main.npcFrameCount[nPC2.type])) * nPC2.scale / 2f;
							vector35 += vector10 * nPC2.scale + new Vector2(0f, num68 + num69 + nPC2.gfxOffY);
							int num146 = 0;
							float num147 = 2f / (float)nPC2.oldPos.Length * 0.7f;
							int num148 = nPC2.oldPos.Length - 1;
							while ((float)num148 >= 1f)
							{
								if (num146 == 0)
								{
									texture2D12 = Main.npcTexture[404];
								}
								else
								{
									texture2D12 = Main.npcTexture[403];
								}
								Main.spriteBatch.Draw(texture2D12, vector35 + nPC2.oldPos[num148] - nPC2.position, null, nPC2.GetAlpha(color9) * (0.8f - num147 * (float)num148 / 2f), nPC2.oldRot[num148], vector10, nPC2.scale, spriteEffects, 0f);
								if (num146 == 0)
								{
									texture2D12 = Main.glowMaskTexture[134];
								}
								else
								{
									texture2D12 = Main.glowMaskTexture[133];
								}
								Main.spriteBatch.Draw(texture2D12, vector35 + nPC2.oldPos[num148] - nPC2.position, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * (1f - num147 * (float)num148 / 2f), nPC2.oldRot[num148], vector10, nPC2.scale, spriteEffects, 0f);
								num146++;
								num148 -= 2;
							}
							texture2D12 = Main.npcTexture[nPC2.type];
							Main.spriteBatch.Draw(texture2D12, vector35, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), nPC.GetAlpha(color9), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
							texture2D12 = Main.glowMaskTexture[135];
							Main.spriteBatch.Draw(texture2D12, vector35, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
							return;
						}
						if (type == 519)
						{
							NPC nPC3 = nPC;
							Texture2D texture2D13 = Main.npcTexture[nPC3.type];
							Vector2 vector36 = nPC3.Center - Main.screenPosition;
							vector36 -= new Vector2((float)texture2D13.Width, (float)(texture2D13.Height / Main.npcFrameCount[nPC3.type])) * nPC3.scale / 2f;
							vector36 += vector10 * nPC3.scale + new Vector2(0f, num68 + num69 + nPC3.gfxOffY);
							texture2D13 = Main.npcTexture[nPC3.type];
							Main.spriteBatch.Draw(texture2D13, vector36, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), nPC.GetAlpha(color9), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
							int num149 = 0;
							float num150 = 1f / (float)nPC3.oldPos.Length * 0.7f;
							int num151 = nPC3.oldPos.Length - 1;
							while ((float)num151 >= 0f)
							{
								float num152 = (float)(nPC3.oldPos.Length - num151) / (float)nPC3.oldPos.Length;
								Microsoft.Xna.Framework.Color color34 = Microsoft.Xna.Framework.Color.Pink;
								color34 *= 1f - num150 * (float)num151 / 1f;
								color34.A = (byte)((float)color34.A * (1f - num152));
								Main.spriteBatch.Draw(texture2D13, vector36 + nPC3.oldPos[num151] - nPC3.position, null, color34, nPC3.oldRot[num151], vector10, nPC3.scale * MathHelper.Lerp(0.3f, 1.1f, num152), spriteEffects, 0f);
								num149++;
								num151--;
							}
							return;
						}
						if (type == 522)
						{
							NPC nPC4 = nPC;
							Texture2D texture2D14 = Main.npcTexture[nPC4.type];
							Vector2 vector37 = nPC4.Center - Main.screenPosition;
							vector37 -= new Vector2((float)texture2D14.Width, (float)(texture2D14.Height / Main.npcFrameCount[nPC4.type])) * nPC4.scale / 2f;
							vector37 += vector10 * nPC4.scale + new Vector2(0f, num68 + num69 + nPC4.gfxOffY);
							int num153 = 0;
							float num154 = 1f / (float)nPC4.oldPos.Length * 1.1f;
							int num155 = nPC4.oldPos.Length - 1;
							while ((float)num155 >= 0f)
							{
								float num156 = (float)(nPC4.oldPos.Length - num155) / (float)nPC4.oldPos.Length;
								Microsoft.Xna.Framework.Color color35 = Microsoft.Xna.Framework.Color.White;
								color35 *= 1f - num154 * (float)num155 / 1f;
								color35.A = (byte)((float)color35.A * (1f - num156));
								Main.spriteBatch.Draw(texture2D14, vector37 + nPC4.oldPos[num155] - nPC4.position, null, color35, nPC4.oldRot[num155], vector10, nPC4.scale * MathHelper.Lerp(0.8f, 0.3f, num156), spriteEffects, 0f);
								num153++;
								num155--;
							}
							texture2D14 = Main.extraTexture[57];
							Main.spriteBatch.Draw(texture2D14, vector37, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), 0f, texture2D14.Size() / 2f, nPC.scale, spriteEffects, 0f);
							return;
						}
						if (type == 488)
						{
							return;
						}
						if (type == 370 || type == 372 || type == 373)
						{
							Texture2D texture2D15 = Main.npcTexture[type];
							Microsoft.Xna.Framework.Color color36 = Microsoft.Xna.Framework.Color.White;
							float amount9 = 0f;
							bool flag8 = type == 370 && nPC.ai[0] > 4f;
							bool flag9 = type == 370 && nPC.ai[0] > 9f;
							int num157 = 120;
							int num158 = 60;
							Microsoft.Xna.Framework.Color color37 = color9;
							if (flag9)
							{
								color9 = Main.buffColor(color9, 0.4f, 0.8f, 0.4f, 1f);
							}
							else if (flag8)
							{
								color9 = Main.buffColor(color9, 0.5f, 0.7f, 0.5f, 1f);
							}
							else if (type == 370 && nPC.ai[0] == 4f && nPC.ai[2] > (float)num157)
							{
								float num159 = nPC.ai[2] - (float)num157;
								num159 /= (float)num158;
								color9 = Main.buffColor(color9, 1f - 0.5f * num159, 1f - 0.3f * num159, 1f - 0.5f * num159, 1f);
							}
							int num160 = 10;
							int num161 = 2;
							if (type == 370)
							{
								if (nPC.ai[0] == -1f)
								{
									num160 = 0;
								}
								if (nPC.ai[0] == 0f || nPC.ai[0] == 5f || nPC.ai[0] == 10f)
								{
									num160 = 7;
								}
								if (nPC.ai[0] == 1f)
								{
									color36 = Microsoft.Xna.Framework.Color.Blue;
									amount9 = 0.5f;
								}
								else
								{
									color37 = color9;
								}
							}
							else if ((type == 372 || type == 373) && nPC.ai[0] == 1f)
							{
								color36 = Microsoft.Xna.Framework.Color.Blue;
								amount9 = 0.5f;
							}
							for (int num162 = 1; num162 < num160; num162 += num161)
							{
								Vector2 arg_7753_0 = nPC.oldPos[num162];
								Microsoft.Xna.Framework.Color color38 = color37;
								color38 = Microsoft.Xna.Framework.Color.Lerp(color38, color36, amount9);
								color38 = nPC.GetAlpha(color38);
								color38 *= (float)(num160 - num162) / 15f;
								Vector2 vector38 = nPC.oldPos[num162] + new Vector2((float)nPC.width, (float)nPC.height) / 2f - Main.screenPosition;
								vector38 -= new Vector2((float)texture2D15.Width, (float)(texture2D15.Height / Main.npcFrameCount[type])) * nPC.scale / 2f;
								vector38 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
								Main.spriteBatch.Draw(texture2D15, vector38, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color38, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
							}
							int num163 = 0;
							float num164 = 0f;
							float scaleFactor9 = 0f;
							if (type == 370)
							{
								if (nPC.ai[0] == -1f)
								{
									num163 = 0;
								}
								if (nPC.ai[0] == 3f || nPC.ai[0] == 8f)
								{
									int num165 = 60;
									int num166 = 30;
									if (nPC.ai[2] > (float)num165)
									{
										num163 = 6;
										num164 = 1f - (float)Math.Cos((double)((nPC.ai[2] - (float)num165) / (float)num166 * 6.28318548f));
										num164 /= 3f;
										scaleFactor9 = 40f;
									}
								}
								if (nPC.ai[0] == 4f && nPC.ai[2] > (float)num157)
								{
									num163 = 6;
									num164 = 1f - (float)Math.Cos((double)((nPC.ai[2] - (float)num157) / (float)num158 * 6.28318548f));
									num164 /= 3f;
									scaleFactor9 = 60f;
								}
								if (nPC.ai[0] == 9f && nPC.ai[2] > (float)num157)
								{
									num163 = 6;
									num164 = 1f - (float)Math.Cos((double)((nPC.ai[2] - (float)num157) / (float)num158 * 6.28318548f));
									num164 /= 3f;
									scaleFactor9 = 60f;
								}
								if (nPC.ai[0] == 12f)
								{
									num163 = 6;
									num164 = 1f - (float)Math.Cos((double)(nPC.ai[2] / 30f * 6.28318548f));
									num164 /= 3f;
									scaleFactor9 = 20f;
								}
							}
							for (int num167 = 0; num167 < num163; num167++)
							{
								Microsoft.Xna.Framework.Color color39 = color9;
								color39 = Microsoft.Xna.Framework.Color.Lerp(color39, color36, amount9);
								color39 = nPC.GetAlpha(color39);
								color39 *= 1f - num164;
								Vector2 vector39 = nPC.Center + ((float)num167 / (float)num163 * 6.28318548f + nPC.rotation).ToRotationVector2() * scaleFactor9 * num164 - Main.screenPosition;
								vector39 -= new Vector2((float)texture2D15.Width, (float)(texture2D15.Height / Main.npcFrameCount[type])) * nPC.scale / 2f;
								vector39 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
								Main.spriteBatch.Draw(texture2D15, vector39, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color39, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
							}
							Vector2 vector40 = nPC.Center - Main.screenPosition;
							vector40 -= new Vector2((float)texture2D15.Width, (float)(texture2D15.Height / Main.npcFrameCount[type])) * nPC.scale / 2f;
							vector40 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
							Main.spriteBatch.Draw(texture2D15, vector40, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), nPC.GetAlpha(color9), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
							if (type == 370 && nPC.ai[0] >= 4f)
							{
								texture2D15 = Main.dukeFishronTexture;
								Microsoft.Xna.Framework.Color color40 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.White, Microsoft.Xna.Framework.Color.Yellow, 0.5f);
								color36 = Microsoft.Xna.Framework.Color.Yellow;
								amount9 = 1f;
								num164 = 0.5f;
								scaleFactor9 = 10f;
								num161 = 1;
								if (nPC.ai[0] == 4f)
								{
									float num168 = nPC.ai[2] - (float)num157;
									num168 /= (float)num158;
									color36 *= num168;
									color40 *= num168;
								}
								if (nPC.ai[0] == 12f)
								{
									float num169 = nPC.ai[2];
									num169 /= 30f;
									if (num169 > 0.5f)
									{
										num169 = 1f - num169;
									}
									num169 *= 2f;
									num169 = 1f - num169;
									color36 *= num169;
									color40 *= num169;
								}
								for (int num170 = 1; num170 < num160; num170 += num161)
								{
									Vector2 arg_7DEB_0 = nPC.oldPos[num170];
									Microsoft.Xna.Framework.Color color41 = color40;
									color41 = Microsoft.Xna.Framework.Color.Lerp(color41, color36, amount9);
									color41 *= (float)(num160 - num170) / 15f;
									Vector2 vector41 = nPC.oldPos[num170] + new Vector2((float)nPC.width, (float)nPC.height) / 2f - Main.screenPosition;
									vector41 -= new Vector2((float)texture2D15.Width, (float)(texture2D15.Height / Main.npcFrameCount[type])) * nPC.scale / 2f;
									vector41 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
									Main.spriteBatch.Draw(texture2D15, vector41, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color41, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
								}
								for (int num171 = 1; num171 < num163; num171++)
								{
									Microsoft.Xna.Framework.Color color42 = color40;
									color42 = Microsoft.Xna.Framework.Color.Lerp(color42, color36, amount9);
									color42 = nPC.GetAlpha(color42);
									color42 *= 1f - num164;
									Vector2 vector42 = nPC.Center + ((float)num171 / (float)num163 * 6.28318548f + nPC.rotation).ToRotationVector2() * scaleFactor9 * num164 - Main.screenPosition;
									vector42 -= new Vector2((float)texture2D15.Width, (float)(texture2D15.Height / Main.npcFrameCount[type])) * nPC.scale / 2f;
									vector42 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
									Main.spriteBatch.Draw(texture2D15, vector42, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color42, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
								}
								Main.spriteBatch.Draw(texture2D15, vector40, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color40, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
								return;
							}
						}
						else
						{
							if (type == 439 || type == 440)
							{
								int num172 = nPC.frame.Y / (Main.npcTexture[type].Height / Main.npcFrameCount[type]);
								Texture2D texture2D16 = Main.npcTexture[type];
								Texture2D texture2D17 = Main.extraTexture[30];
								Microsoft.Xna.Framework.Rectangle rectangle5 = texture2D17.Frame(1, 1, 0, 0);
								rectangle5.Height /= 2;
								if (num172 >= 4)
								{
									rectangle5.Y += rectangle5.Height;
								}
								Microsoft.Xna.Framework.Color white4 = Microsoft.Xna.Framework.Color.White;
								float amount10 = 0f;
								Microsoft.Xna.Framework.Color color43 = color9;
								int num173 = 0;
								int num174 = 0;
								int num175 = 0;
								if (nPC.ai[0] == -1f)
								{
									if (nPC.ai[1] >= 320f && nPC.ai[1] < 960f)
									{
										white4 = Microsoft.Xna.Framework.Color.White;
										amount10 = 0.5f;
										num173 = 6;
										num174 = 2;
										num175 = 1;
									}
								}
								else if (nPC.ai[0] == 1f)
								{
									white4 = Microsoft.Xna.Framework.Color.White;
									amount10 = 0.5f;
									num173 = 4;
									num174 = 2;
									num175 = 1;
								}
								else
								{
									color43 = color9;
								}
								for (int num176 = num175; num176 < num173; num176 += num174)
								{
									Vector2 arg_8222_0 = nPC.oldPos[num176];
									Microsoft.Xna.Framework.Color color44 = color43;
									color44 = Microsoft.Xna.Framework.Color.Lerp(color44, white4, amount10);
									color44 = nPC.GetAlpha(color44);
									color44 *= (float)(num173 - num176) / (float)num173;
									color44.A = 100;
									Vector2 vector43 = nPC.oldPos[num176] + new Vector2((float)nPC.width, (float)nPC.height) / 2f - Main.screenPosition;
									vector43 -= rectangle5.Size() * nPC.scale / 2f;
									vector43 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
									Main.spriteBatch.Draw(texture2D17, vector43, new Microsoft.Xna.Framework.Rectangle?(rectangle5), color44, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
								}
								int num177 = 0;
								float num178 = 0f;
								float scaleFactor10 = 0f;
								if (nPC.ai[0] == 5f && nPC.ai[1] >= 0f && nPC.ai[1] < 30f)
								{
									num177 = 4;
									num178 = 1f - (float)Math.Cos((double)((nPC.ai[1] - 0f) / 30f * 3.14159274f));
									num178 /= 2f;
									scaleFactor10 = 70f;
								}
								for (int num179 = 0; num179 < num177; num179++)
								{
									Microsoft.Xna.Framework.Color color45 = color9;
									color45 = Microsoft.Xna.Framework.Color.Lerp(color45, white4, amount10);
									color45 = nPC.GetAlpha(color45);
									color45 *= 1f - num178;
									Vector2 vector44 = nPC.Center + ((float)num179 / (float)num177 * 6.28318548f + nPC.rotation).ToRotationVector2() * scaleFactor10 * num178 - Main.screenPosition;
									vector44 -= new Vector2((float)texture2D16.Width, (float)(texture2D16.Height / Main.npcFrameCount[type])) * nPC.scale / 2f;
									vector44 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
									Main.spriteBatch.Draw(texture2D17, vector44, new Microsoft.Xna.Framework.Rectangle?(rectangle5), color45, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
								}
								Vector2 vector45 = nPC.Center - Main.screenPosition;
								vector45 -= new Vector2((float)texture2D16.Width, (float)(texture2D16.Height / Main.npcFrameCount[type])) * nPC.scale / 2f;
								vector45 += vector10 * nPC.scale + new Vector2(0f, num68 + num69 + nPC.gfxOffY);
								Main.spriteBatch.Draw(texture2D16, vector45, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), nPC.GetAlpha(color9), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
								return;
							}
							if (type == 392 || type == 393 || type == 394 || type == 395)
							{
								Texture2D texture3 = Main.npcTexture[type];
								Vector2 vector46 = nPC.Center - Main.screenPosition + Vector2.UnitY * nPC.gfxOffY;
								vector46 = vector46.Floor();
								float scaleFactor11 = 0f;
								if (type == 393)
								{
									scaleFactor11 = -8f;
								}
								Main.spriteBatch.Draw(texture3, vector46, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), nPC.GetAlpha(color9), nPC.rotation, vector10 + Vector2.UnitY * scaleFactor11, nPC.scale, spriteEffects, 0f);
								if (type == 392)
								{
									Main.spriteBatch.Draw(Main.glowMaskTexture[48], vector46, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), nPC.rotation, vector10 + Vector2.UnitY * scaleFactor11, nPC.scale, spriteEffects, 0f);
								}
								if (type == 395)
								{
									Main.spriteBatch.Draw(Main.glowMaskTexture[49], vector46, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), nPC.rotation, vector10 + Vector2.UnitY * scaleFactor11, nPC.scale, spriteEffects, 0f);
								}
								if (type == 394)
								{
									Main.spriteBatch.Draw(Main.glowMaskTexture[50], vector46, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), nPC.rotation, vector10 + Vector2.UnitY * scaleFactor11, nPC.scale, spriteEffects, 0f);
									return;
								}
							}
							else
							{
								if (type == 83 || type == 84 || type == 179)
								{
									Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), Microsoft.Xna.Framework.Color.White, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									return;
								}
								if (type >= 87 && type <= 92)
								{
									Microsoft.Xna.Framework.Color alpha6 = nPC.GetAlpha(color9);
									byte b5 = (byte)((Main.tileColor.R + Main.tileColor.G + Main.tileColor.B) / 3);
									if (alpha6.R < b5)
									{
										alpha6.R = b5;
									}
									if (alpha6.G < b5)
									{
										alpha6.G = b5;
									}
									if (alpha6.B < b5)
									{
										alpha6.B = b5;
									}
									Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), alpha6, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									return;
								}
								if (type == 491)
								{
									NPC nPC5 = nPC;
									Texture2D texture2D18 = Main.npcTexture[nPC5.type];
									Microsoft.Xna.Framework.Rectangle rectangle6 = nPC5.frame;
									Vector2 origin8 = rectangle6.OriginFlip(new Vector2(208f, 460f), spriteEffects);
									Vector2 vector47 = nPC5.Center - Main.screenPosition;
									Vector2 value14 = new Vector2((float)(spriteEffects.HasFlag(SpriteEffects.FlipHorizontally) ? -1 : 1), 1f);
									Microsoft.Xna.Framework.Color alpha7 = nPC5.GetAlpha(color9);
									Main.spriteBatch.Draw(texture2D18, vector47, new Microsoft.Xna.Framework.Rectangle?(rectangle6), alpha7, nPC5.rotation, origin8, nPC5.scale, spriteEffects, 0f);
									int num180 = (int)nPC5.localAI[3] / 8;
									texture2D18 = Main.extraTexture[40];
									rectangle6 = texture2D18.Frame(1, 4, 0, num180 % 4);
									origin8 = rectangle6.Size() * new Vector2(0.5f, 1f);
									Main.spriteBatch.Draw(texture2D18, vector47 + (new Vector2(102f, -384f) * value14).RotatedBy((double)nPC5.rotation, default(Vector2)), new Microsoft.Xna.Framework.Rectangle?(rectangle6), alpha7, nPC5.rotation, origin8, nPC5.scale, spriteEffects, 0f);
									texture2D18 = Main.extraTexture[41];
									rectangle6 = texture2D18.Frame(1, 8, 0, num180 % 8);
									origin8 = rectangle6.Size() * new Vector2(0.5f, 0f) + new Vector2(0f, 10f);
									for (int num181 = 0; num181 < 5; num181++)
									{
										Main.spriteBatch.Draw(texture2D18, vector47 + (new Vector2((float)(-96 + 34 * num181), 40f) * value14).RotatedBy((double)nPC5.rotation, default(Vector2)), new Microsoft.Xna.Framework.Rectangle?(rectangle6), alpha7, nPC5.rotation, origin8, nPC5.scale, spriteEffects, 0f);
									}
									texture2D18 = Main.extraTexture[42];
									rectangle6 = texture2D18.Frame(1, 4, 0, num180 % 4);
									origin8 = rectangle6.Size() * new Vector2(0.5f, 0f);
									for (int num182 = 0; num182 < 2; num182++)
									{
										Main.spriteBatch.Draw(texture2D18, vector47 + (new Vector2((float)(158 - 106 * num182), -302f) * value14).RotatedBy((double)nPC5.rotation, default(Vector2)), new Microsoft.Xna.Framework.Rectangle?(rectangle6), alpha7, nPC5.rotation, origin8, nPC5.scale, spriteEffects, 0f);
									}
									texture2D18 = Main.extraTexture[43];
									rectangle6 = texture2D18.Frame(1, 4, 0, num180 % 4);
									origin8 = rectangle6.Size() * new Vector2(0.5f, 0f);
									for (int num183 = 0; num183 < 2; num183++)
									{
										Main.spriteBatch.Draw(texture2D18, vector47 + (new Vector2((float)(42 - 178 * num183), -444f) * value14).RotatedBy((double)nPC5.rotation, default(Vector2)), new Microsoft.Xna.Framework.Rectangle?(rectangle6), alpha7, nPC5.rotation, origin8, nPC5.scale, spriteEffects, 0f);
									}
									texture2D18 = Main.extraTexture[44];
									rectangle6 = texture2D18.Frame(1, 4, 0, num180 % 4);
									origin8 = rectangle6.Size() * new Vector2(0.5f, 0f);
									Main.spriteBatch.Draw(texture2D18, vector47 + (new Vector2(-134f, -302f) * value14).RotatedBy((double)nPC5.rotation, default(Vector2)), new Microsoft.Xna.Framework.Rectangle?(rectangle6), alpha7, nPC5.rotation, origin8, nPC5.scale, spriteEffects, 0f);
									texture2D18 = Main.extraTexture[45];
									rectangle6 = texture2D18.Frame(1, 4, 0, (2 + num180) % 4);
									origin8 = rectangle6.Size() * new Vector2(0.5f, 0f);
									Main.spriteBatch.Draw(texture2D18, vector47 + (new Vector2(-60f, -330f) * value14).RotatedBy((double)nPC5.rotation, default(Vector2)), new Microsoft.Xna.Framework.Rectangle?(rectangle6), alpha7, nPC5.rotation, origin8, nPC5.scale, spriteEffects, 0f);
									this.LoadNPC(492);
									if (Main.NPCLoaded[492])
									{
										texture2D18 = Main.npcTexture[492];
										rectangle6 = texture2D18.Frame(1, 9, 0, 0);
										origin8 = rectangle6.Size() * new Vector2(0.5f, 0f) + new Vector2(0f, 10f);
										for (int num184 = 0; num184 < 4; num184++)
										{
											int num185 = (int)nPC5.ai[num184];
											if (num185 >= 0)
											{
												rectangle6.Y = Main.npc[num185].frame.Y;
												Main.spriteBatch.Draw(texture2D18, vector47 + (new Vector2((float)(-122 + 68 * num184), -20f) * value14).RotatedBy((double)nPC5.rotation, default(Vector2)), new Microsoft.Xna.Framework.Rectangle?(rectangle6), alpha7, nPC5.rotation, origin8, nPC5.scale, spriteEffects, 0f);
											}
										}
										return;
									}
								}
								else
								{
									if (type == 398)
									{
										bool flag10 = false;
										Texture2D texture4 = Main.npcTexture[type];
										Texture2D texture5 = Main.extraTexture[16];
										Texture2D texture2D19 = Main.extraTexture[14];
										float num186 = 340f;
										float scaleFactor12 = 0.5f;
										Vector2 value15 = new Vector2(220f, -60f);
										Vector2 vector48 = new Vector2(76f, 66f);
										Texture2D texture2D20 = Main.extraTexture[13];
										Vector2 origin9 = new Vector2((float)texture2D20.Width, 278f);
										Vector2 origin10 = new Vector2(0f, 278f);
										Vector2 value16 = new Vector2(0f, 76f);
										Vector2 center = nPC.Center;
										Microsoft.Xna.Framework.Point point = (nPC.Center + new Vector2(0f, -150f)).ToTileCoordinates();
										Microsoft.Xna.Framework.Color alpha8 = nPC.GetAlpha(Microsoft.Xna.Framework.Color.Lerp(Lighting.GetColor(point.X, point.Y), Microsoft.Xna.Framework.Color.White, 0.3f));
										for (int num187 = 0; num187 < 2; num187++)
										{
											bool flag11 = num187 == 0;
											Vector2 value17 = new Vector2((float)(flag11 ? -1 : 1), 1f);
											int num188 = -1;
											for (int num189 = 0; num189 < 200; num189++)
											{
												if (Main.npc[num189].active && Main.npc[num189].type == 397 && Main.npc[num189].ai[2] == (float)num187 && Main.npc[num189].ai[3] == (float)iNPCIndex)
												{
													num188 = num189;
													break;
												}
											}
											if (num188 != -1)
											{
												Vector2 vector49 = center + value15 * value17;
												Vector2 value18 = Main.npc[num188].Center + value16;
												Vector2 vector50 = (value18 - vector49) * scaleFactor12;
												if (flag10)
												{
													Main.dust[Dust.NewDust(vector49 + vector50, 0, 0, 6, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f)].noGravity = true;
												}
												float num190 = (float)Math.Acos((double)(vector50.Length() / num186)) * -value17.X;
												SpriteEffects effects = flag11 ? SpriteEffects.None : SpriteEffects.FlipHorizontally;
												Vector2 origin11 = vector48;
												if (!flag11)
												{
													origin11.X = (float)texture2D19.Width - origin11.X;
												}
												Main.spriteBatch.Draw(texture2D19, vector49 - Main.screenPosition, null, alpha8, vector50.ToRotation() - num190 - 1.57079637f, origin11, 1f, effects, 0f);
												if (flag10)
												{
													Main.dust[Dust.NewDust(vector49, 0, 0, 6, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f)].noGravity = true;
												}
												if (flag10)
												{
													Main.dust[Dust.NewDust(center, 0, 0, 6, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f)].noGravity = true;
												}
												if (flag10)
												{
													Main.dust[Dust.NewDust(vector49 + new Vector2(0f, num186).RotatedBy((double)(vector50.ToRotation() - num190 - 1.57079637f), default(Vector2)), 0, 0, 6, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f)].noGravity = true;
												}
											}
										}
										Main.spriteBatch.Draw(texture2D20, center - Main.screenPosition, null, alpha8, 0f, origin9, 1f, SpriteEffects.None, 0f);
										Main.spriteBatch.Draw(texture2D20, center - Main.screenPosition, null, alpha8, 0f, origin10, 1f, SpriteEffects.FlipHorizontally, 0f);
										Main.spriteBatch.Draw(texture5, center - Main.screenPosition, null, alpha8, 0f, new Vector2(112f, 101f), 1f, SpriteEffects.None, 0f);
										Main.spriteBatch.Draw(texture4, center - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), alpha8, 0f, nPC.frame.Size() / 2f, 1f, SpriteEffects.None, 0f);
										return;
									}
									if (type == 397)
									{
										Texture2D texture2D21 = Main.npcTexture[type];
										float num191 = 0.5f;
										Vector2 value19 = new Vector2(220f, -60f);
										Vector2 value20 = new Vector2(0f, 76f);
										Texture2D texture2D22 = Main.extraTexture[15];
										Vector2 vector51 = new Vector2(60f, 30f);
										float num192 = 340f;
										Vector2 center2 = Main.npc[(int)nPC.ai[3]].Center;
										Microsoft.Xna.Framework.Point point2 = nPC.Center.ToTileCoordinates();
										Microsoft.Xna.Framework.Color alpha9 = nPC.GetAlpha(Microsoft.Xna.Framework.Color.Lerp(Lighting.GetColor(point2.X, point2.Y), Microsoft.Xna.Framework.Color.White, 0.3f));
										bool flag12 = nPC.ai[2] == 0f;
										Vector2 value21 = new Vector2((float)(flag12 ? -1 : 1), 1f);
										Vector2 origin12 = new Vector2(120f, 180f);
										if (!flag12)
										{
											origin12.X = (float)texture2D21.Width - origin12.X;
										}
										Texture2D texture2D23 = Main.extraTexture[17];
										Texture2D texture2D24 = Main.extraTexture[19];
										Vector2 vector52 = new Vector2(26f, 42f);
										if (!flag12)
										{
											vector52.X = (float)texture2D23.Width - vector52.X;
										}
										Vector2 value22 = new Vector2(30f, 66f);
										Vector2 value23 = new Vector2(1f * -value21.X, 3f);
										Texture2D texture2D25 = Main.extraTexture[26];
										Microsoft.Xna.Framework.Rectangle value24 = texture2D25.Frame(1, 1, 0, 0);
										value24.Height /= 4;
										Vector2 value25 = center2 + value19 * value21;
										Vector2 vector53 = nPC.Center + value20;
										Vector2 vector54 = value25 - vector53;
										vector54 *= 1f - num191;
										Vector2 origin13 = vector51;
										if (!flag12)
										{
											origin13.X = (float)texture2D22.Width - origin13.X;
										}
										float num193 = (float)Math.Acos((double)(vector54.Length() / num192)) * -value21.X;
										Main.spriteBatch.Draw(texture2D22, vector53 - Main.screenPosition, null, alpha9, vector54.ToRotation() + num193 - 1.57079637f, origin13, 1f, spriteEffects, 0f);
										if (nPC.ai[0] == -2f)
										{
											int num194 = (int)nPC.ai[1];
											num194 /= 8;
											value24.Y += value24.Height * num194;
											Main.spriteBatch.Draw(texture2D25, nPC.Center - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(value24), alpha9, 0f, vector52 - new Vector2(4f, 4f), 1f, spriteEffects, 0f);
										}
										else
										{
											Main.spriteBatch.Draw(texture2D23, nPC.Center - Main.screenPosition, null, alpha9, 0f, vector52, 1f, spriteEffects, 0f);
											Vector2 value26 = Utils.Vector2FromElipse(nPC.localAI[0].ToRotationVector2(), value22 * nPC.localAI[1]);
											Main.spriteBatch.Draw(texture2D24, nPC.Center - Main.screenPosition + value26 + value23, null, alpha9, 0f, new Vector2((float)texture2D24.Width, (float)texture2D24.Height) / 2f, 1f, SpriteEffects.None, 0f);
										}
										Main.spriteBatch.Draw(texture2D21, nPC.Center - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), alpha9, 0f, origin12, 1f, spriteEffects, 0f);
										return;
									}
									if (type == 396)
									{
										Texture2D texture6 = Main.npcTexture[type];
										Vector2 origin14 = new Vector2(191f, 130f);
										Texture2D texture7 = Main.extraTexture[18];
										Texture2D texture2D26 = Main.extraTexture[19];
										Vector2 vector55 = new Vector2(19f, 34f);
										Vector2 value27 = new Vector2(27f, 59f);
										Vector2 value28 = new Vector2(0f, 0f);
										Texture2D texture2D27 = Main.extraTexture[25];
										Vector2 value29 = new Vector2(0f, 214f).RotatedBy((double)nPC.rotation, default(Vector2));
										Microsoft.Xna.Framework.Rectangle rectangle7 = texture2D27.Frame(1, 1, 0, 0);
										rectangle7.Height /= 3;
										rectangle7.Y += rectangle7.Height * (int)(nPC.localAI[2] / 7f);
										Texture2D texture2D28 = Main.extraTexture[29];
										Vector2 value30 = new Vector2(0f, 4f).RotatedBy((double)nPC.rotation, default(Vector2));
										Microsoft.Xna.Framework.Rectangle rectangle8 = texture2D28.Frame(1, 1, 0, 0);
										rectangle8.Height /= 4;
										rectangle8.Y += rectangle8.Height * (int)(nPC.localAI[3] / 5f);
										Texture2D texture2D29 = Main.extraTexture[26];
										Microsoft.Xna.Framework.Rectangle value31 = texture2D29.Frame(1, 1, 0, 0);
										value31.Height /= 4;
										Vector2 arg_9D07_0 = Main.npc[(int)nPC.ai[3]].Center;
										Microsoft.Xna.Framework.Point point3 = nPC.Center.ToTileCoordinates();
										Microsoft.Xna.Framework.Color alpha10 = nPC.GetAlpha(Microsoft.Xna.Framework.Color.Lerp(Lighting.GetColor(point3.X, point3.Y), Microsoft.Xna.Framework.Color.White, 0.3f));
										if (nPC.ai[0] < 0f)
										{
											int num195 = (int)nPC.ai[1];
											num195 /= 8;
											value31.Y += value31.Height * num195;
											Main.spriteBatch.Draw(texture2D29, nPC.Center - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(value31), alpha10, nPC.rotation, vector55 + new Vector2(4f, 4f), 1f, spriteEffects, 0f);
										}
										else
										{
											Main.spriteBatch.Draw(texture7, nPC.Center - Main.screenPosition, null, alpha10, nPC.rotation, vector55, 1f, spriteEffects, 0f);
											Vector2 value32 = Utils.Vector2FromElipse(nPC.localAI[0].ToRotationVector2(), value27 * nPC.localAI[1]);
											Main.spriteBatch.Draw(texture2D26, nPC.Center - Main.screenPosition + value32 + value28, null, alpha10, nPC.rotation, new Vector2((float)texture2D26.Width, (float)texture2D26.Height) / 2f, 1f, SpriteEffects.None, 0f);
										}
										Main.spriteBatch.Draw(texture6, nPC.Center - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), alpha10, nPC.rotation, origin14, 1f, spriteEffects, 0f);
										Main.spriteBatch.Draw(texture2D28, (nPC.Center - Main.screenPosition + value30).Floor(), new Microsoft.Xna.Framework.Rectangle?(rectangle8), alpha10, nPC.rotation, rectangle8.Size() / 2f, 1f, spriteEffects, 0f);
										Main.spriteBatch.Draw(texture2D27, (nPC.Center - Main.screenPosition + value29).Floor(), new Microsoft.Xna.Framework.Rectangle?(rectangle7), alpha10, nPC.rotation, rectangle7.Size() / 2f, 1f, spriteEffects, 0f);
										return;
									}
									if (type == 400)
									{
										Texture2D texture8 = Main.npcTexture[type];
										Texture2D texture2D30 = Main.extraTexture[19];
										Vector2 origin15 = new Vector2(40f, 40f);
										Vector2 value33 = new Vector2(30f, 30f);
										Vector2 arg_A019_0 = nPC.Center;
										Microsoft.Xna.Framework.Point point4 = nPC.Center.ToTileCoordinates();
										Microsoft.Xna.Framework.Color alpha11 = nPC.GetAlpha(Microsoft.Xna.Framework.Color.Lerp(Lighting.GetColor(point4.X, point4.Y), Microsoft.Xna.Framework.Color.White, 0.3f));
										Main.spriteBatch.Draw(texture8, nPC.Center - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), alpha11, nPC.rotation, origin15, 1f, spriteEffects, 0f);
										Vector2 value34 = Utils.Vector2FromElipse(nPC.localAI[0].ToRotationVector2(), value33 * nPC.localAI[1]);
										Main.spriteBatch.Draw(texture2D30, nPC.Center - Main.screenPosition + value34, null, alpha11, nPC.rotation, texture2D30.Size() / 2f, nPC.localAI[2], SpriteEffects.None, 0f);
										return;
									}
									if (type == 384)
									{
										return;
									}
									if (type == 416)
									{
										int num196 = -1;
										int num197 = (int)nPC.ai[0];
										Vector2 position6 = nPC.position;
										Vector2 spinningpoint3 = Vector2.Zero;
										if (Main.npc[num197].active && Main.npc[num197].type == 415)
										{
											num196 = num197;
										}
										if (num196 != -1)
										{
											Vector2 position7 = nPC.position;
											nPC.Bottom = Main.npc[num196].Bottom;
											position6 = nPC.position;
											nPC.position = position7;
											nPC.gfxOffY = Main.npc[num196].gfxOffY;
											spinningpoint3 = Main.npc[num196].velocity;
										}
										Microsoft.Xna.Framework.Rectangle frame3 = nPC.frame;
										Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(position6.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, position6.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame3), nPC.GetAlpha(color9), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										if (nPC.color != default(Microsoft.Xna.Framework.Color))
										{
											Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(position6.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, position6.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame3), nPC.GetColor(color9), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										}
										Main.spriteBatch.Draw(Main.glowMaskTexture[156], position6 + nPC.Size * new Vector2(0.5f, 1f) - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(255 - nPC.alpha, 255 - nPC.alpha, 255 - nPC.alpha, 255 - nPC.alpha), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										float scaleFactor13 = 0.5f + (nPC.GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 0.5f;
										for (int num198 = 0; num198 < 4; num198++)
										{
											Main.spriteBatch.Draw(Main.glowMaskTexture[156], position6 + nPC.Size * new Vector2(0.5f, 1f) - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY) + spinningpoint3.RotatedBy((double)((float)num198 * 1.57079637f), default(Vector2)) * scaleFactor13, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										}
										return;
									}
									if (type == 399)
									{
										Texture2D texture2D31 = Main.npcTexture[type];
										Vector2 vec = nPC.position - Main.screenPosition + Vector2.UnitY * nPC.gfxOffY;
										vec = vec.Floor();
										float num199 = 5f;
										int num200 = 0;
										while ((float)num200 < num199)
										{
											float num201 = 1f - (Main.GlobalTime + (float)num200) % num199 / num199;
											Microsoft.Xna.Framework.Color color46 = Microsoft.Xna.Framework.Color.LimeGreen;
											if (nPC.ai[0] == 1f)
											{
												color46 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.LimeGreen, Microsoft.Xna.Framework.Color.Red, MathHelper.Clamp(nPC.ai[1] / 20f, 0f, 1f));
											}
											if (nPC.ai[0] == 2f)
											{
												color46 = Microsoft.Xna.Framework.Color.Red;
											}
											color46 *= 1f - num201;
											color46.A = 0;
											for (int num202 = 0; num202 < 2; num202++)
											{
												Main.spriteBatch.Draw(Main.extraTexture[27], nPC.Center - Main.screenPosition + Vector2.UnitY * (nPC.gfxOffY - 4f + 6f), null, color46, 1.57079637f, new Vector2(10f, 48f), num201 * 4f, SpriteEffects.None, 0f);
											}
											num200++;
										}
										Main.spriteBatch.Draw(texture2D31, new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), nPC.GetAlpha(color9), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										texture2D31 = Main.glowMaskTexture[100];
										Main.spriteBatch.Draw(texture2D31, new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(127 - nPC.alpha / 2, 127 - nPC.alpha / 2, 127 - nPC.alpha / 2, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										texture2D31 = Main.extraTexture[20];
										Microsoft.Xna.Framework.Rectangle value35 = texture2D31.Frame(1, 4, 0, (int)nPC.ai[0] + 1);
										Vector2 position8 = new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)texture2D31.Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY + 18f + 6f);
										Main.spriteBatch.Draw(texture2D31, position8, new Microsoft.Xna.Framework.Rectangle?(value35), nPC.GetAlpha(color9), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										texture2D31 = Main.glowMaskTexture[101];
										Main.spriteBatch.Draw(texture2D31, position8, new Microsoft.Xna.Framework.Rectangle?(value35), new Microsoft.Xna.Framework.Color(127 - nPC.alpha / 2, 127 - nPC.alpha / 2, 127 - nPC.alpha / 2, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										return;
									}
									if (type == 94)
									{
										for (int num203 = 1; num203 < 6; num203 += 2)
										{
											Vector2 arg_AB90_0 = nPC.oldPos[num203];
											Microsoft.Xna.Framework.Color alpha12 = nPC.GetAlpha(color9);
											alpha12.R = (byte)((int)alpha12.R * (10 - num203) / 15);
											alpha12.G = (byte)((int)alpha12.G * (10 - num203) / 15);
											alpha12.B = (byte)((int)alpha12.B * (10 - num203) / 15);
											alpha12.A = (byte)((int)alpha12.A * (10 - num203) / 15);
											Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.oldPos[num203].X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.oldPos[num203].Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), alpha12, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										}
									}
									if (type == 125 || type == 126 || type == 127 || type == 128 || type == 129 || type == 130 || type == 131 || type == 139 || type == 140)
									{
										for (int num204 = 9; num204 >= 0; num204 -= 2)
										{
											Vector2 arg_AD74_0 = nPC.oldPos[num204];
											Microsoft.Xna.Framework.Color alpha13 = nPC.GetAlpha(color9);
											alpha13.R = (byte)((int)alpha13.R * (10 - num204) / 20);
											alpha13.G = (byte)((int)alpha13.G * (10 - num204) / 20);
											alpha13.B = (byte)((int)alpha13.B * (10 - num204) / 20);
											alpha13.A = (byte)((int)alpha13.A * (10 - num204) / 20);
											Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.oldPos[num204].X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.oldPos[num204].Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), alpha13, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										}
									}
									if (type == 417 && nPC.ai[0] >= 6f && nPC.ai[0] <= 6f)
									{
										for (int num205 = 5; num205 >= 0; num205--)
										{
											Vector2 arg_AF44_0 = nPC.oldPos[num205];
											Microsoft.Xna.Framework.Color alpha14 = nPC.GetAlpha(color9);
											alpha14.R = (byte)((int)alpha14.R * (10 - num205) / 20);
											alpha14.G = (byte)((int)alpha14.G * (10 - num205) / 20);
											alpha14.B = (byte)((int)alpha14.B * (10 - num205) / 20);
											alpha14.A = (byte)((int)alpha14.A * (10 - num205) / 20);
											Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.oldPos[num205].X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.oldPos[num205].Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), alpha14, nPC.oldRot[num205], vector10, MathHelper.Lerp(0.5f, 1f, (5f - (float)num205) / 6f), spriteEffects, 0f);
										}
									}
									if (type == 419 && nPC.ai[2] <= -9f)
									{
										int num206 = Main.glowMaskTexture[154].Height / Main.npcFrameCount[type];
										int num207 = nPC.frame.Y / num206;
										for (int num208 = 6; num208 >= 0; num208--)
										{
											Vector2 arg_B151_0 = nPC.oldPos[num208];
											Microsoft.Xna.Framework.Color white5 = Microsoft.Xna.Framework.Color.White;
											white5.R = (byte)(255 * (10 - num208) / 20);
											white5.G = (byte)(255 * (10 - num208) / 20);
											white5.B = (byte)(255 * (10 - num208) / 20);
											white5.A = 0;
											Microsoft.Xna.Framework.Rectangle frame4 = nPC.frame;
											int num209 = (num207 - 3 - num208) % 3;
											if (num209 < 0)
											{
												num209 += 3;
											}
											num209 += 5;
											frame4.Y = num206 * num209;
											Main.spriteBatch.Draw(Main.glowMaskTexture[154], new Vector2(nPC.oldPos[num208].X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.oldPos[num208].Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69), new Microsoft.Xna.Framework.Rectangle?(frame4), white5, nPC.oldRot[num208], vector10, MathHelper.Lerp(0.75f, 1.2f, (10f - (float)num208) / 10f), spriteEffects, 0f);
										}
									}
									if (type == 418 && (nPC.ai[0] == 2f || nPC.ai[0] == 4f))
									{
										Texture2D texture2D32 = Main.extraTexture[55];
										Vector2 origin16 = new Vector2((float)(texture2D32.Width / 2), (float)(texture2D32.Height / 8 + 14));
										int num210 = (int)nPC.ai[1] / 2;
										float num211 = -1.57079637f * (float)nPC.spriteDirection;
										float num212 = nPC.ai[1] / 45f;
										if (num212 > 1f)
										{
											num212 = 1f;
										}
										num210 %= 4;
										for (int num213 = 6; num213 >= 0; num213--)
										{
											Vector2 arg_B3E4_0 = nPC.oldPos[num213];
											Microsoft.Xna.Framework.Color color47 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Gold, Microsoft.Xna.Framework.Color.OrangeRed, num212);
											color47 = Microsoft.Xna.Framework.Color.Lerp(color47, Microsoft.Xna.Framework.Color.Blue, (float)num213 / 12f);
											color47.A = (byte)(64f * num212);
											color47.R = (byte)((int)color47.R * (10 - num213) / 20);
											color47.G = (byte)((int)color47.G * (10 - num213) / 20);
											color47.B = (byte)((int)color47.B * (10 - num213) / 20);
											color47.A = (byte)((int)color47.A * (10 - num213) / 20);
											color47 *= num212;
											int num214 = (num210 - num213) % 4;
											if (num214 < 0)
											{
												num214 += 4;
											}
											Microsoft.Xna.Framework.Rectangle value36 = texture2D32.Frame(1, 4, 0, num214);
											Main.spriteBatch.Draw(texture2D32, new Vector2(nPC.oldPos[num213].X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.oldPos[num213].Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69), new Microsoft.Xna.Framework.Rectangle?(value36), color47, nPC.oldRot[num213] + num211, origin16, MathHelper.Lerp(0.1f, 1.2f, (10f - (float)num213) / 10f), spriteEffects, 0f);
										}
									}
									if (type == 516)
									{
										int num215 = Main.npcTexture[type].Height / Main.npcFrameCount[type];
										int num216 = nPC.frame.Y / num215;
										for (int num217 = 6; num217 >= 0; num217--)
										{
											Vector2 arg_B65E_0 = nPC.oldPos[num217];
											Microsoft.Xna.Framework.Color color48 = Microsoft.Xna.Framework.Color.White;
											color48.R = (byte)(255 * (10 - num217) / 20);
											color48.G = (byte)(255 * (10 - num217) / 20);
											color48.B = (byte)(255 * (10 - num217) / 20);
											color48.A = (byte)(255 * (10 - num217) / 20);
											color48 = Microsoft.Xna.Framework.Color.Lerp(color48, Microsoft.Xna.Framework.Color.Transparent, (float)num217 / 6f);
											Microsoft.Xna.Framework.Rectangle frame5 = nPC.frame;
											int num218 = (num216 - 4 - num217) % 4;
											if (num218 < 0)
											{
												num218 += 4;
											}
											frame5.Y = num215 * num218;
											Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.oldPos[num217].X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.oldPos[num217].Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69), new Microsoft.Xna.Framework.Rectangle?(frame5), color48, nPC.rotation, vector10, MathHelper.Lerp(0.35f, 1.2f, (10f - (float)num217) / 10f), spriteEffects, 0f);
										}
									}
									Microsoft.Xna.Framework.Rectangle frame6 = nPC.frame;
									if (type == 182 || type == 289)
									{
										frame6.Height -= 2;
									}
									if (nPC.aiStyle == 7)
									{
										NPC n2 = nPC;
										this.DrawNPCExtras(n2, true, num69, num68, color9, vector10, spriteEffects);
									}
									if (type == 346 && (double)nPC.life < (double)nPC.lifeMax * 0.5)
									{
										Main.spriteBatch.Draw(Main.santaTankTexture, new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame6), nPC.GetAlpha(color9), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 356)
									{
										frame6.Height--;
										Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame6), nPC.GetAlpha(color9), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 360)
									{
										float num219 = 0f;
										if (nPC.ai[2] == 0f)
										{
											if (nPC.rotation == 3.14f || nPC.rotation == -3.14f)
											{
												num69 = 2f;
											}
											if (nPC.direction < 0 && (nPC.rotation == 1.57f || nPC.rotation == 4.71f))
											{
												num219 = 1f;
											}
											if (nPC.direction > 0 && (nPC.rotation == 1.57f || nPC.rotation == 4.71f))
											{
												num219 = -1f;
											}
										}
										Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale + num219, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame6), nPC.GetAlpha(color9), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 266 && nPC.life < nPC.lifeMax && Main.expertMode)
									{
										Microsoft.Xna.Framework.Color alpha15 = nPC.GetAlpha(color9);
										float num220 = 1f - (float)nPC.life / (float)nPC.lifeMax;
										num220 *= num220;
										alpha15.R = (byte)((float)alpha15.R * num220);
										alpha15.G = (byte)((float)alpha15.G * num220);
										alpha15.B = (byte)((float)alpha15.B * num220);
										alpha15.A = (byte)((float)alpha15.A * num220);
										for (int num221 = 0; num221 < 4; num221++)
										{
											Vector2 position9 = nPC.position;
											float num222 = Math.Abs(nPC.Center.X - Main.player[Main.myPlayer].Center.X);
											float num223 = Math.Abs(nPC.Center.Y - Main.player[Main.myPlayer].Center.Y);
											if (num221 == 0 || num221 == 2)
											{
												position9.X = Main.player[Main.myPlayer].Center.X + num222;
											}
											else
											{
												position9.X = Main.player[Main.myPlayer].Center.X - num222;
											}
											position9.X -= (float)(nPC.width / 2);
											if (num221 == 0 || num221 == 1)
											{
												position9.Y = Main.player[Main.myPlayer].Center.Y + num223;
											}
											else
											{
												position9.Y = Main.player[Main.myPlayer].Center.Y - num223;
											}
											position9.Y -= (float)(nPC.height / 2);
											Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(position9.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, position9.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame6), alpha15, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										}
										Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame6), nPC.GetAlpha(color9), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 421 && nPC.ai[0] == 5f)
									{
										Player player = Main.player[nPC.target];
										if (player.gravDir == -1f)
										{
											spriteEffects |= SpriteEffects.FlipVertically;
										}
										Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2((float)(player.direction * 4), player.gfxOffY) + ((player.gravDir == 1f) ? player.Top : player.Bottom) - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(frame6), nPC.GetAlpha(color9), nPC.rotation, frame6.Size() / 2f, nPC.scale, spriteEffects, 0f);
										Main.spriteBatch.Draw(Main.glowMaskTexture[146], new Vector2((float)(player.direction * 4), player.gfxOffY) + ((player.gravDir == 1f) ? player.Top : player.Bottom) - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(frame6), nPC.GetAlpha(color9), nPC.rotation, frame6.Size() / 2f, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 518)
									{
										Vector2 value37 = new Vector2(-10f, 0f);
										Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame6), nPC.GetAlpha(color9), nPC.rotation, vector10 + value37, nPC.scale, spriteEffects, 0f);
										if (nPC.color != default(Microsoft.Xna.Framework.Color))
										{
											Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame6), nPC.GetColor(color9), nPC.rotation, vector10 + value37, nPC.scale, spriteEffects, 0f);
										}
									}
									else
									{
										Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame6), nPC.GetAlpha(color9), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										if (nPC.color != default(Microsoft.Xna.Framework.Color))
										{
											Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame6), nPC.GetColor(color9), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										}
									}
									if (nPC.confused)
									{
										Main.spriteBatch.Draw(Main.confuseTexture, new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 - (float)Main.confuseTexture.Height - 20f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.confuseTexture.Width, Main.confuseTexture.Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, 70), nPC.velocity.X * -0.05f, new Vector2((float)(Main.confuseTexture.Width / 2), (float)(Main.confuseTexture.Height / 2)), Main.essScale + 0.2f, SpriteEffects.None, 0f);
									}
									if (type >= 134 && type <= 136 && color9 != Microsoft.Xna.Framework.Color.Black)
									{
										Main.spriteBatch.Draw(Main.destTexture[type - 134], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * (1f - (float)nPC.alpha / 255f), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 125)
									{
										Main.spriteBatch.Draw(Main.EyeLaserTexture, new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 139)
									{
										Main.spriteBatch.Draw(Main.probeTexture, new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 127)
									{
										Main.spriteBatch.Draw(Main.BoneEyesTexture, new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 131)
									{
										Main.spriteBatch.Draw(Main.BoneLaserTexture, new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 120)
									{
										for (int num224 = 1; num224 < nPC.oldPos.Length; num224++)
										{
											Vector2 arg_CC04_0 = nPC.oldPos[num224];
											Microsoft.Xna.Framework.Color color49 = default(Microsoft.Xna.Framework.Color);
											color49.R = (byte)(150 * (10 - num224) / 15);
											color49.G = (byte)(100 * (10 - num224) / 15);
											color49.B = (byte)(150 * (10 - num224) / 15);
											color49.A = (byte)(50 * (10 - num224) / 15);
											Main.spriteBatch.Draw(Main.chaosTexture, new Vector2(nPC.oldPos[num224].X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.oldPos[num224].Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color49, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										}
									}
									else if (type == 137 || type == 138)
									{
										for (int num225 = 1; num225 < nPC.oldPos.Length; num225++)
										{
											Vector2 arg_CDAA_0 = nPC.oldPos[num225];
											Microsoft.Xna.Framework.Color color50 = default(Microsoft.Xna.Framework.Color);
											color50.R = (byte)(150 * (10 - num225) / 15);
											color50.G = (byte)(100 * (10 - num225) / 15);
											color50.B = (byte)(150 * (10 - num225) / 15);
											color50.A = (byte)(50 * (10 - num225) / 15);
											Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.oldPos[num225].X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.oldPos[num225].Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color50, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										}
									}
									else if (type == 327)
									{
										Main.spriteBatch.Draw(Main.pumpkingFaceTexture, new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), Microsoft.Xna.Framework.Color.White, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										for (int num226 = 1; num226 < 10; num226++)
										{
											Microsoft.Xna.Framework.Color color51 = new Microsoft.Xna.Framework.Color(110 - num226 * 10, 110 - num226 * 10, 110 - num226 * 10, 110 - num226 * 10);
											Vector2 value38 = new Vector2((float)Main.rand.Next(-10, 11) * 0.2f, (float)Main.rand.Next(-10, 11) * 0.2f);
											Main.spriteBatch.Draw(Main.pumpkingFaceTexture, new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69) + value38, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color51, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										}
									}
									else if (type == 325)
									{
										Main.spriteBatch.Draw(Main.treeFaceTexture, new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), Microsoft.Xna.Framework.Color.White, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										for (int num227 = 1; num227 < 10; num227++)
										{
											Microsoft.Xna.Framework.Color color52 = new Microsoft.Xna.Framework.Color(110 - num227 * 10, 110 - num227 * 10, 110 - num227 * 10, 110 - num227 * 10);
											Vector2 value39 = new Vector2((float)Main.rand.Next(-10, 11) * 0.2f, (float)Main.rand.Next(-10, 11) * 0.2f);
											Main.spriteBatch.Draw(Main.treeFaceTexture, new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69) + value39, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color52, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										}
									}
									else if (type == 345)
									{
										Main.spriteBatch.Draw(Main.iceQueenTexture, new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), Microsoft.Xna.Framework.Color.White, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										for (int num228 = 1; num228 < 5; num228++)
										{
											Microsoft.Xna.Framework.Color color53 = new Microsoft.Xna.Framework.Color(100 - num228 * 10, 100 - num228 * 10, 100 - num228 * 10, 100 - num228 * 10);
											Main.spriteBatch.Draw(Main.iceQueenTexture, new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69) - nPC.velocity * (float)num228 * 0.2f, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color53, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										}
									}
									else if (type == 355)
									{
										Main.spriteBatch.Draw(Main.fireflyTexture, new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 358)
									{
										Main.spriteBatch.Draw(Main.lightningbugTexture, new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 82)
									{
										Main.spriteBatch.Draw(Main.wraithEyeTexture, new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), Microsoft.Xna.Framework.Color.White, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										for (int num229 = 1; num229 < 10; num229++)
										{
											Microsoft.Xna.Framework.Color color54 = new Microsoft.Xna.Framework.Color(110 - num229 * 10, 110 - num229 * 10, 110 - num229 * 10, 110 - num229 * 10);
											Main.spriteBatch.Draw(Main.wraithEyeTexture, new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69) - nPC.velocity * (float)num229 * 0.5f, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color54, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										}
									}
									else if (type == 253)
									{
										Main.spriteBatch.Draw(Main.reaperEyeTexture, new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 3f + vector10.Y * nPC.scale + num69), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), Microsoft.Xna.Framework.Color.White, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										for (int num230 = 1; num230 < 20; num230++)
										{
											Microsoft.Xna.Framework.Color color55 = new Microsoft.Xna.Framework.Color(210 - num230 * 20, 210 - num230 * 20, 210 - num230 * 20, 210 - num230 * 20);
											Main.spriteBatch.Draw(Main.reaperEyeTexture, new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 3f + vector10.Y * nPC.scale + num69) - nPC.velocity * (float)num230 * 0.5f, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color55, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										}
									}
									else if (type == 245 && nPC.alpha == 0)
									{
										Microsoft.Xna.Framework.Color color56 = new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, 0);
										Main.spriteBatch.Draw(Main.golemTexture[3], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame6), color56, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 246)
									{
										Microsoft.Xna.Framework.Color color57 = new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, 0);
										if (nPC.frame.Y < 222)
										{
											Main.spriteBatch.Draw(Main.golemTexture[1], new Vector2(nPC.Center.X - Main.screenPosition.X - 20f, nPC.Center.Y - Main.screenPosition.Y - 27f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.golemTexture[1].Width, Main.golemTexture[1].Height / 2)), color57, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
										}
										else if (nPC.frame.Y < 444)
										{
											Main.spriteBatch.Draw(Main.golemTexture[2], new Vector2(nPC.Center.X - Main.screenPosition.X + 26f, nPC.Center.Y - Main.screenPosition.Y - 28f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.golemTexture[2].Width, Main.golemTexture[2].Height / 4)), color57, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
										}
										else
										{
											Main.spriteBatch.Draw(Main.golemTexture[2], new Vector2(nPC.Center.X - Main.screenPosition.X - 38f, nPC.Center.Y - Main.screenPosition.Y - 28f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.golemTexture[2].Height / 2, Main.golemTexture[2].Width, Main.golemTexture[2].Height / 4)), color57, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
										}
									}
									else if (type == 249)
									{
										Microsoft.Xna.Framework.Color color58 = new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, 0);
										Main.spriteBatch.Draw(Main.golemTexture[1], new Vector2(nPC.Center.X - Main.screenPosition.X - 20f, nPC.Center.Y - Main.screenPosition.Y - 47f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.golemTexture[1].Width, Main.golemTexture[1].Height / 2)), color58, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
									}
									else if (type == 383)
									{
										Main.spriteBatch.Draw(Main.glowMaskTexture[11], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame6), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										if (nPC.ai[2] != 0f && Main.npc[(int)nPC.ai[2] - 1].active && Main.npc[(int)nPC.ai[2] - 1].type == 384)
										{
											float arg_E17E_0 = nPC.ai[2];
											Main.spriteBatch.Draw(Main.npcTexture[384], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), null, new Microsoft.Xna.Framework.Color(100, 100, 100, 0), nPC.rotation, new Vector2((float)Main.npcTexture[384].Width, (float)Main.npcTexture[384].Height) / 2f, nPC.scale, spriteEffects, 0f);
										}
									}
									else if (type == 381)
									{
										Vector2 vector56 = Vector2.Zero;
										Vector2 zero3 = Vector2.Zero;
										int num231 = Main.npcTexture[type].Height / Main.npcFrameCount[type];
										int num232 = nPC.frame.Y / num231;
										Microsoft.Xna.Framework.Rectangle value40 = new Microsoft.Xna.Framework.Rectangle(0, 0, 32, 42);
										switch (num232)
										{
										case 0:
											vector56 += new Vector2(8f, 32f);
											break;
										case 1:
											vector56 += new Vector2(6f, 72f);
											break;
										case 2:
											vector56 += new Vector2(8f, 126f);
											break;
										case 3:
											vector56 += new Vector2(6f, 174f);
											break;
										case 4:
											vector56 += new Vector2(6f, 224f);
											break;
										case 5:
											vector56 += new Vector2(8f, 272f);
											break;
										case 6:
											vector56 += new Vector2(10f, 318f);
											break;
										case 7:
											vector56 += new Vector2(14f, 366f);
											break;
										case 8:
											vector56 += new Vector2(10f, 414f);
											break;
										}
										vector56.Y -= (float)(num231 * num232);
										vector56 -= vector10;
										int num233 = 2;
										if (nPC.ai[2] > 0f)
										{
											num233 = (int)nPC.ai[2] - 1;
										}
										if (nPC.velocity.Y != 0f)
										{
											num233 = 3;
										}
										value40.Y += 44 * num233;
										switch (num233)
										{
										case 0:
											zero3 = new Vector2(10f, 18f);
											break;
										case 1:
											zero3 = new Vector2(8f, 20f);
											break;
										case 2:
											zero3 = new Vector2(8f, 20f);
											break;
										case 3:
											zero3 = new Vector2(8f, 20f);
											break;
										case 4:
											zero3 = new Vector2(6f, 18f);
											break;
										}
										if (spriteEffects.HasFlag(SpriteEffects.FlipHorizontally))
										{
											vector56.X *= -1f;
											zero3.X = (float)value40.Width - zero3.X;
										}
										vector56 += nPC.Center;
										vector56 -= Main.screenPosition;
										vector56.Y += nPC.gfxOffY;
										Main.spriteBatch.Draw(Main.extraTexture[0], vector56, new Microsoft.Xna.Framework.Rectangle?(value40), color9, nPC.rotation, zero3, nPC.scale, spriteEffects, 0f);
										Main.spriteBatch.Draw(Main.glowMaskTexture[24], vector56, new Microsoft.Xna.Framework.Rectangle?(value40), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), nPC.rotation, zero3, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 382)
									{
										Vector2 vector57 = Vector2.Zero;
										Vector2 zero4 = Vector2.Zero;
										int num234 = Main.npcTexture[type].Height / Main.npcFrameCount[type];
										int num235 = nPC.frame.Y / num234;
										Microsoft.Xna.Framework.Rectangle value41 = new Microsoft.Xna.Framework.Rectangle(0, 0, 30, 42);
										switch (num235)
										{
										case 0:
											vector57 += new Vector2(8f, 30f);
											break;
										case 1:
											vector57 += new Vector2(6f, 68f);
											break;
										case 2:
											vector57 += new Vector2(8f, 120f);
											break;
										case 3:
											vector57 += new Vector2(6f, 166f);
											break;
										case 4:
											vector57 += new Vector2(6f, 214f);
											break;
										case 5:
											vector57 += new Vector2(8f, 260f);
											break;
										case 6:
											vector57 += new Vector2(14f, 304f);
											break;
										case 7:
											vector57 += new Vector2(14f, 350f);
											break;
										case 8:
											vector57 += new Vector2(10f, 396f);
											break;
										}
										vector57.Y -= (float)(num234 * num235);
										vector57 -= vector10;
										int num236 = 2;
										if (nPC.ai[2] > 0f)
										{
											num236 = (int)nPC.ai[2] - 1;
										}
										if (nPC.velocity.Y != 0f)
										{
											num236 = 3;
										}
										value41.Y += 44 * num236;
										switch (num236)
										{
										case 0:
											zero4 = new Vector2(10f, 18f);
											break;
										case 1:
											zero4 = new Vector2(8f, 20f);
											break;
										case 2:
											zero4 = new Vector2(8f, 20f);
											break;
										case 3:
											zero4 = new Vector2(8f, 20f);
											break;
										case 4:
											zero4 = new Vector2(6f, 18f);
											break;
										}
										if (spriteEffects.HasFlag(SpriteEffects.FlipHorizontally))
										{
											vector57.X *= -1f;
											zero4.X = (float)value41.Width - zero4.X;
										}
										vector57 += nPC.Center;
										vector57 -= Main.screenPosition;
										vector57.Y += nPC.gfxOffY;
										Main.spriteBatch.Draw(Main.extraTexture[1], vector57, new Microsoft.Xna.Framework.Rectangle?(value41), color9, nPC.rotation, zero4, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 520)
									{
										Main.spriteBatch.Draw(Main.glowMaskTexture[164], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame6), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										Vector2 vector58 = Vector2.Zero;
										Vector2 origin17 = new Vector2(4f, 4f);
										int num237 = Main.npcTexture[type].Height / Main.npcFrameCount[type];
										int arg_EB11_0 = nPC.frame.Y / num237;
										if (spriteEffects.HasFlag(SpriteEffects.FlipHorizontally))
										{
											vector58.X *= -1f;
											origin17.X = (float)Main.extraTexture[56].Width - origin17.X;
										}
										vector58 += nPC.Top + new Vector2(0f, 20f);
										vector58 -= Main.screenPosition;
										vector58.Y += nPC.gfxOffY;
										float num238 = nPC.localAI[3];
										if (spriteEffects.HasFlag(SpriteEffects.FlipHorizontally))
										{
											num238 += 3.14159274f;
										}
										Main.spriteBatch.Draw(Main.extraTexture[56], vector58, null, color9, num238, origin17, nPC.scale, spriteEffects, 0f);
										Main.spriteBatch.Draw(Main.glowMaskTexture[165], vector58, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), num238, origin17, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 386)
									{
										Main.spriteBatch.Draw(Main.glowMaskTexture[31], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame6), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 387)
									{
										Microsoft.Xna.Framework.Color color59 = new Microsoft.Xna.Framework.Color(1f, 1f, 1f, 1f) * 0.75f;
										if (nPC.ai[0] > 0f)
										{
											float amount11 = (nPC.ai[0] + 1f) / 60f;
											color59 = Microsoft.Xna.Framework.Color.Lerp(color59, Microsoft.Xna.Framework.Color.White, amount11);
											color59.A = (byte)MathHelper.Lerp((float)color59.A, 0f, amount11);
										}
										color59 *= (255f - (float)nPC.alpha) / 255f;
										Main.spriteBatch.Draw(Main.glowMaskTexture[32], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame6), color59, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 388)
									{
										Main.spriteBatch.Draw(Main.glowMaskTexture[33], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame6), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 389)
									{
										Main.spriteBatch.Draw(Main.glowMaskTexture[34], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame6), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 4 && nPC.ai[1] >= 4f && nPC.ai[0] == 3f)
									{
										for (int num239 = 1; num239 < nPC.oldPos.Length; num239++)
										{
											Vector2 arg_F150_0 = nPC.oldPos[num239];
											Microsoft.Xna.Framework.Color color60 = color9;
											color60.R = (byte)(0.5 * (double)color60.R * (double)(10 - num239) / 20.0);
											color60.G = (byte)(0.5 * (double)color60.G * (double)(10 - num239) / 20.0);
											color60.B = (byte)(0.5 * (double)color60.B * (double)(10 - num239) / 20.0);
											color60.A = (byte)(0.5 * (double)color60.A * (double)(10 - num239) / 20.0);
											Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.oldPos[num239].X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.oldPos[num239].Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color60, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										}
									}
									else if (type == 437)
									{
										Microsoft.Xna.Framework.Color white6 = Microsoft.Xna.Framework.Color.White;
										white6.A = 200;
										Main.spriteBatch.Draw(Main.glowMaskTexture[109], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame6), white6, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										Main.spriteBatch.Draw(Main.glowMaskTexture[108], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + num68 + nPC.gfxOffY), null, white6, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 471 && nPC.ai[3] < 0f)
									{
										for (int num240 = 1; num240 < nPC.oldPos.Length; num240++)
										{
											Vector2 arg_F54E_0 = nPC.oldPos[num240];
											Microsoft.Xna.Framework.Color color61 = color9;
											color61.R = (byte)(0.5 * (double)color61.R * (double)(10 - num240) / 20.0);
											color61.G = (byte)(0.5 * (double)color61.G * (double)(10 - num240) / 20.0);
											color61.B = (byte)(0.5 * (double)color61.B * (double)(10 - num240) / 20.0);
											color61.A = (byte)(0.5 * (double)color61.A * (double)(10 - num240) / 20.0);
											Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.oldPos[num240].X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.oldPos[num240].Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color61, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										}
									}
									else if (type == 477 && nPC.velocity.Length() > 9f)
									{
										for (int num241 = 1; num241 < nPC.oldPos.Length; num241++)
										{
											Vector2 arg_F761_0 = nPC.oldPos[num241];
											Microsoft.Xna.Framework.Color color62 = color9;
											color62.R = (byte)(0.5 * (double)color62.R * (double)(10 - num241) / 20.0);
											color62.G = (byte)(0.5 * (double)color62.G * (double)(10 - num241) / 20.0);
											color62.B = (byte)(0.5 * (double)color62.B * (double)(10 - num241) / 20.0);
											color62.A = (byte)(0.5 * (double)color62.A * (double)(10 - num241) / 20.0);
											Microsoft.Xna.Framework.Rectangle frame7 = nPC.frame;
											int num242 = Main.npcTexture[type].Height / Main.npcFrameCount[type];
											frame7.Y -= num242 * num241;
											while (frame7.Y < 0)
											{
												frame7.Y += num242 * Main.npcFrameCount[type];
											}
											Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.oldPos[num241].X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.oldPos[num241].Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69), new Microsoft.Xna.Framework.Rectangle?(frame7), color62, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										}
									}
									if (type == 479 && (double)nPC.velocity.Length() > 6.5)
									{
										for (int num243 = 1; num243 < nPC.oldPos.Length; num243++)
										{
											Vector2 arg_F9D7_0 = nPC.oldPos[num243];
											Microsoft.Xna.Framework.Color color63 = color9;
											color63.R = (byte)(0.5 * (double)color63.R * (double)(10 - num243) / 20.0);
											color63.G = (byte)(0.5 * (double)color63.G * (double)(10 - num243) / 20.0);
											color63.B = (byte)(0.5 * (double)color63.B * (double)(10 - num243) / 20.0);
											color63.A = (byte)(0.5 * (double)color63.A * (double)(10 - num243) / 20.0);
											Microsoft.Xna.Framework.Rectangle frame8 = nPC.frame;
											int num244 = Main.npcTexture[type].Height / Main.npcFrameCount[type];
											frame8.Y -= num244 * num243;
											while (frame8.Y < 0)
											{
												frame8.Y += num244 * Main.npcFrameCount[type];
											}
											Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.oldPos[num243].X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.oldPos[num243].Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69), new Microsoft.Xna.Framework.Rectangle?(frame8), color63, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										}
									}
									else if (type == 472)
									{
										Main.spriteBatch.Draw(Main.glowMaskTexture[110], new Vector2(nPC.position.X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.position.Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(255 - nPC.alpha, 255 - nPC.alpha, 255 - nPC.alpha, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (nPC.aiStyle == 87)
									{
										if ((int)nPC.ai[0] == 4 || nPC.ai[0] == 5f || nPC.ai[0] == 6f)
										{
											for (int num245 = 1; num245 < nPC.oldPos.Length; num245++)
											{
												Vector2 arg_FD76_0 = nPC.oldPos[num245];
												Microsoft.Xna.Framework.Color color64 = color9;
												color64.R = (byte)(0.5 * (double)color64.R * (double)(10 - num245) / 20.0);
												color64.G = (byte)(0.5 * (double)color64.G * (double)(10 - num245) / 20.0);
												color64.B = (byte)(0.5 * (double)color64.B * (double)(10 - num245) / 20.0);
												color64.A = (byte)(0.5 * (double)color64.A * (double)(10 - num245) / 20.0);
												Main.spriteBatch.Draw(Main.npcTexture[type], new Vector2(nPC.oldPos[num245].X - Main.screenPosition.X + (float)(nPC.width / 2) - (float)Main.npcTexture[type].Width * nPC.scale / 2f + vector10.X * nPC.scale, nPC.oldPos[num245].Y - Main.screenPosition.Y + (float)nPC.height - (float)Main.npcTexture[type].Height * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color64, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
											}
										}
									}
									else if (type == 50)
									{
										Texture2D texture2D33 = Main.extraTexture[39];
										Vector2 center3 = nPC.Center;
										float num246 = 0f;
										switch (nPC.frame.Y / (Main.npcTexture[type].Height / Main.npcFrameCount[type]))
										{
										case 0:
											num246 = 2f;
											break;
										case 1:
											num246 = -6f;
											break;
										case 2:
											num246 = 2f;
											break;
										case 3:
											num246 = 10f;
											break;
										case 4:
											num246 = 2f;
											break;
										case 5:
											num246 = 0f;
											break;
										}
										center3.Y += nPC.gfxOffY - (70f - num246) * nPC.scale;
										Main.spriteBatch.Draw(texture2D33, center3 - Main.screenPosition, null, color9, 0f, texture2D33.Size() / 2f, 1f, spriteEffects, 0f);
									}
									else if (type == 411)
									{
										Main.spriteBatch.Draw(Main.glowMaskTexture[136], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(128 - nPC.alpha / 2, 128 - nPC.alpha / 2, 128 - nPC.alpha / 2, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 409)
									{
										Main.spriteBatch.Draw(Main.glowMaskTexture[138], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(255 - nPC.alpha, 255 - nPC.alpha, 255 - nPC.alpha, 255 - nPC.alpha), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 410)
									{
										Main.spriteBatch.Draw(Main.glowMaskTexture[137], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(255 - nPC.alpha, 255 - nPC.alpha, 255 - nPC.alpha, 255 - nPC.alpha), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 407)
									{
										Main.spriteBatch.Draw(Main.glowMaskTexture[139], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(255 - nPC.alpha, 255 - nPC.alpha, 255 - nPC.alpha, 255 - nPC.alpha), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 405)
									{
										Main.spriteBatch.Draw(Main.glowMaskTexture[141], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(128 - nPC.alpha / 2, 128 - nPC.alpha / 2, 128 - nPC.alpha / 2, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 406)
									{
										Main.spriteBatch.Draw(Main.glowMaskTexture[142], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(128 - nPC.alpha / 2, 128 - nPC.alpha / 2, 128 - nPC.alpha / 2, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 424)
									{
										Main.spriteBatch.Draw(Main.glowMaskTexture[144], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(128 - nPC.alpha / 2, 128 - nPC.alpha / 2, 128 - nPC.alpha / 2, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 423)
									{
										Main.spriteBatch.Draw(Main.glowMaskTexture[145], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(128 - nPC.alpha / 2, 128 - nPC.alpha / 2, 128 - nPC.alpha / 2, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 421)
									{
										Main.spriteBatch.Draw(Main.glowMaskTexture[146], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(128 - nPC.alpha / 2, 128 - nPC.alpha / 2, 128 - nPC.alpha / 2, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 420)
									{
										Main.spriteBatch.Draw(Main.glowMaskTexture[147], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(128 - nPC.alpha / 2, 128 - nPC.alpha / 2, 128 - nPC.alpha / 2, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 425)
									{
										Main.spriteBatch.Draw(Main.glowMaskTexture[150], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(128 - nPC.alpha / 2, 128 - nPC.alpha / 2, 128 - nPC.alpha / 2, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 429)
									{
										Main.spriteBatch.Draw(Main.glowMaskTexture[151], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(128 - nPC.alpha / 2, 128 - nPC.alpha / 2, 128 - nPC.alpha / 2, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 418)
									{
										Main.spriteBatch.Draw(Main.glowMaskTexture[161], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(255 - nPC.alpha, 255 - nPC.alpha, 255 - nPC.alpha, 255 - nPC.alpha), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										float scaleFactor14 = 0.25f + (nPC.GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 0.25f;
										for (int num247 = 0; num247 < 4; num247++)
										{
											Main.spriteBatch.Draw(Main.glowMaskTexture[161], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY) + nPC.velocity.RotatedBy((double)((float)num247 * 1.57079637f), default(Vector2)) * scaleFactor14, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										}
									}
									else if (type >= 412 && type <= 414)
									{
										Microsoft.Xna.Framework.Color color65 = new Microsoft.Xna.Framework.Color(255 - nPC.alpha, 255 - nPC.alpha, 255 - nPC.alpha, 0);
										int num248 = 157 + type - 412;
										if (type == 414 && nPC.localAI[2] != 0f)
										{
											int num249 = (int)nPC.localAI[2];
											if (nPC.localAI[2] < 0f)
											{
												num249 = 128 + (int)nPC.localAI[2];
											}
											int num250 = 255 - num249;
											color65 = new Microsoft.Xna.Framework.Color(num250, num249, num249, num250);
										}
										Main.spriteBatch.Draw(Main.glowMaskTexture[num248], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), color65, nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 415)
									{
										Main.spriteBatch.Draw(Main.glowMaskTexture[155], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(255 - nPC.alpha, 255 - nPC.alpha, 255 - nPC.alpha, 255 - nPC.alpha), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										float scaleFactor15 = 0.5f + (nPC.GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 0.5f;
										for (int num251 = 0; num251 < 4; num251++)
										{
											Main.spriteBatch.Draw(Main.glowMaskTexture[155], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY) + nPC.velocity.RotatedBy((double)((float)num251 * 1.57079637f), default(Vector2)) * scaleFactor15, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										}
									}
									else if (type == 419)
									{
										Main.spriteBatch.Draw(Main.glowMaskTexture[154], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(255 - nPC.alpha, 255 - nPC.alpha, 255 - nPC.alpha, 255 - nPC.alpha), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										if (nPC.ai[2] >= -6f)
										{
											float scaleFactor16 = 0.5f + (nPC.GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 0.5f;
											for (int num252 = 0; num252 < 4; num252++)
											{
												Main.spriteBatch.Draw(Main.glowMaskTexture[154], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY) + nPC.velocity.RotatedBy((double)((float)num252 * 1.57079637f), default(Vector2)) * scaleFactor16, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
											}
										}
										else
										{
											float scaleFactor17 = 4f;
											for (int num253 = 0; num253 < 4; num253++)
											{
												Main.spriteBatch.Draw(Main.glowMaskTexture[154], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY) + Vector2.UnitX.RotatedBy((double)((float)num253 * 1.57079637f), default(Vector2)) * scaleFactor17, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
											}
										}
									}
									else if (type == 417)
									{
										Main.spriteBatch.Draw(Main.glowMaskTexture[160], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(255 - nPC.alpha, 255 - nPC.alpha, 255 - nPC.alpha, 255 - nPC.alpha), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										float scaleFactor18 = 0.25f + (nPC.GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 0.25f;
										for (int num254 = 0; num254 < 4; num254++)
										{
											Main.spriteBatch.Draw(Main.glowMaskTexture[160], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY) + nPC.velocity.RotatedBy((double)((float)num254 * 1.57079637f), default(Vector2)) * scaleFactor18, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										}
									}
									else if (type == 516)
									{
										Main.spriteBatch.Draw(Main.npcTexture[type], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(255 - nPC.alpha, 255 - nPC.alpha, 255 - nPC.alpha, 255 - nPC.alpha), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										float scaleFactor19 = 0.5f + (nPC.GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 0.5f;
										for (int num255 = 0; num255 < 4; num255++)
										{
											Main.spriteBatch.Draw(Main.npcTexture[type], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY) + nPC.velocity.RotatedBy((double)((float)num255 * 1.57079637f), default(Vector2)) * scaleFactor19, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
										}
									}
									else if (type == 518)
									{
										Vector2 value42 = new Vector2(-10f, 0f);
										Main.spriteBatch.Draw(Main.glowMaskTexture[163], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(255 - nPC.alpha, 255 - nPC.alpha, 255 - nPC.alpha, 255 - nPC.alpha), nPC.rotation, vector10 + value42, nPC.scale, spriteEffects, 0f);
										float scaleFactor20 = 0.5f + (nPC.GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 0.5f;
										for (int num256 = 0; num256 < 4; num256++)
										{
											Main.spriteBatch.Draw(Main.glowMaskTexture[163], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY) + nPC.velocity.RotatedBy((double)((float)num256 * 1.57079637f), default(Vector2)) * scaleFactor20, new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0), nPC.rotation, vector10 + value42, nPC.scale, spriteEffects, 0f);
										}
									}
									else if (type == 525)
									{
										Main.spriteBatch.Draw(Main.glowMaskTexture[169], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(200, 200, 200, 100), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 526)
									{
										Main.spriteBatch.Draw(Main.glowMaskTexture[170], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(200, 200, 200, 100), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 527)
									{
										Main.spriteBatch.Draw(Main.glowMaskTexture[171], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(200, 200, 200, 100), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 533)
									{
										Main.spriteBatch.Draw(Main.glowMaskTexture[172], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(255, 255, 255, 100), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 160)
									{
										Main.spriteBatch.Draw(Main.glowMaskTexture[166], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(128 - nPC.alpha / 2, 128 - nPC.alpha / 2, 128 - nPC.alpha / 2, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									else if (type == 209)
									{
										Main.spriteBatch.Draw(Main.glowMaskTexture[167], nPC.Bottom - Main.screenPosition + new Vector2((float)(-(float)Main.npcTexture[type].Width) * nPC.scale / 2f + vector10.X * nPC.scale, (float)(-(float)Main.npcTexture[type].Height) * nPC.scale / (float)Main.npcFrameCount[type] + 4f + vector10.Y * nPC.scale + num69 + nPC.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(nPC.frame), new Microsoft.Xna.Framework.Color(128 - nPC.alpha / 2, 128 - nPC.alpha / 2, 128 - nPC.alpha / 2, 0), nPC.rotation, vector10, nPC.scale, spriteEffects, 0f);
									}
									if (nPC.aiStyle == 7)
									{
										NPC n3 = nPC;
										this.DrawNPCExtras(n3, false, num69, num68, color9, vector10, spriteEffects);
									}
								}
							}
						}
					}
				}
			}
		}

		protected void DrawNPCExtras(NPC n, bool beforeDraw, float addHeight, float addY, Microsoft.Xna.Framework.Color npcColor, Vector2 halfSize, SpriteEffects npcSpriteEffect)
		{
			if (!beforeDraw && n.UsesPartyHat())
			{
				int num = n.frame.Y / n.frame.Height;
				int[] array = NPCID.Sets.TownNPCsFramingGroups[NPCID.Sets.NPCFramingGroup[n.type]];
				if (num >= array.Length)
				{
					num = 0;
				}
				Texture2D texture2D = Main.extraTexture[72];
				int num2 = 0;
				switch (n.GetPartyHatColor())
				{
				case PartyHatColor.Pink:
					num2 = 16;
					break;
				case PartyHatColor.Cyan:
					num2 = 17;
					break;
				case PartyHatColor.Purple:
					num2 = 18;
					break;
				case PartyHatColor.White:
					num2 = 19;
					break;
				}
				Microsoft.Xna.Framework.Rectangle rectangle = texture2D.Frame(20, 1, num2 % 20, 0);
				rectangle.Width -= 2;
				rectangle.Height -= 2;
				Vector2 vector = n.Top + new Vector2((float)(-2 * n.spriteDirection), n.gfxOffY);
				vector.Y += (float)array[num];
				vector.Y += (float)NPCID.Sets.HatOffsetY[n.type];
				int num3 = 0;
				if (n.ai[0] == 5f)
				{
					num3 = -4;
					if (n.type == 38)
					{
						num3 = -8;
					}
					if (n.type == 124)
					{
						num3 = -2;
					}
					if (n.type == 550)
					{
						num3 = -4;
					}
					if (n.type == 108 || n.type == 178)
					{
						num3 = -6;
					}
				}
				vector.Y += (float)num3;
				if (n.type == 229 && n.ai[0] == 12f)
				{
					vector.X -= (float)(n.spriteDirection * 4);
				}
				if (n.type == 550 && n.ai[0] == 5f)
				{
					vector.X += (float)(n.spriteDirection * 7);
				}
				Vector2 origin = rectangle.Size() - new Vector2((float)(rectangle.Width / 2), 12f);
				int num4 = 0;
				int type = n.type;
				if (type > 160)
				{
					if (type <= 229)
					{
						if (type != 178)
						{
							switch (type)
							{
							case 207:
							case 209:
								goto IL_2F5;
							case 208:
								break;
							default:
								switch (type)
								{
								case 227:
									num4 = -4;
									goto IL_2FE;
								case 228:
									num4 = -2;
									goto IL_2FE;
								case 229:
									goto IL_2F0;
								default:
									goto IL_2FE;
								}
								break;
							}
						}
					}
					else
					{
						if (type == 353)
						{
							goto IL_2F0;
						}
						if (type != 369)
						{
							if (type == 550)
							{
								num4 = -4;
								goto IL_2FE;
							}
							goto IL_2FE;
						}
					}
					num4 = 1;
					goto IL_2FE;
				}
				if (type <= 54)
				{
					switch (type)
					{
					case 17:
					case 18:
					case 19:
					case 20:
					case 22:
						break;
					case 21:
						goto IL_2FE;
					default:
						switch (type)
						{
						case 37:
						case 38:
							goto IL_2F5;
						default:
							if (type != 54)
							{
								goto IL_2FE;
							}
							goto IL_2F5;
						}
						break;
					}
				}
				else
				{
					switch (type)
					{
					case 107:
					case 108:
						goto IL_2F5;
					default:
						if (type != 124)
						{
							if (type != 160)
							{
								goto IL_2FE;
							}
							goto IL_2F5;
						}
						break;
					}
				}
				IL_2F0:
				num4 = -1;
				goto IL_2FE;
				IL_2F5:
				num4 = -3;
				IL_2FE:
				vector.X += (float)(num4 * n.spriteDirection);
				vector.X += (float)(4 * n.spriteDirection);
				Main.spriteBatch.Draw(texture2D, new Vector2(vector.X - Main.screenPosition.X, vector.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(rectangle), npcColor, 0f, origin, n.scale, npcSpriteEffect, 0f);
			}
			if (NPCID.Sets.AttackType[n.type] == 1 && n.ai[0] == 12f && !beforeDraw)
			{
				if (n.type == 228 || n.type == 229 || n.type == 209)
				{
					return;
				}
				float num5 = n.ai[2];
				Vector2 value = Main.OffsetsNPCOffhand[2];
				if (n.spriteDirection == 1)
				{
					value.X *= -1f;
				}
				Vector2 vector2 = n.Bottom - value;
				if (n.type == 22 && n.ai[2] > -0.1f)
				{
					vector2.Y += 4f;
				}
				if (n.type == 368 && Main.hardMode && n.ai[2] > -0.1f)
				{
					vector2.Y += 4f;
				}
				if (n.type == 368 && !Main.hardMode && n.ai[2] < -0.1f)
				{
					vector2.Y -= 8f;
				}
				float rotation = num5 * 1.57079637f * (float)n.spriteDirection;
				float num6 = 1f;
				int num7 = 0;
				int num8 = 4;
				if (n.type == 19)
				{
					num7 = (Main.hardMode ? 98 : 95);
					if (Main.hardMode)
					{
						vector2.X -= (float)(10 * n.direction);
						vector2.Y += 4f;
					}
				}
				else if (n.type == 22)
				{
					num7 = 39;
					num8 = 18;
				}
				else if (n.type == 178)
				{
					num7 = 434;
				}
				else if (n.type == 227)
				{
					num7 = 3350;
					num8 = 16;
					num6 = 0.85f;
				}
				else if (n.type == 368)
				{
					num7 = (Main.hardMode ? 2223 : 2269);
					if (Main.hardMode)
					{
						num8 = 18;
					}
					else
					{
						if (n.ai[2] < -0.1f)
						{
							num8 = 28;
						}
						num6 = 0.75f;
					}
				}
				Texture2D texture2D2 = Main.itemTexture[num7];
				int num9 = (int)this.DrawPlayerItemPos(1f, num7).X - num8;
				Vector2 origin2 = new Vector2((float)(-(float)num9), (float)(texture2D2.Height / 2));
				if (n.spriteDirection == -1)
				{
					origin2 = new Vector2((float)(texture2D2.Width + num9), (float)(texture2D2.Height / 2));
				}
				Main.spriteBatch.Draw(texture2D2, new Vector2((float)((int)(vector2.X - Main.screenPosition.X)), (float)((int)(vector2.Y - Main.screenPosition.Y))), null, npcColor, rotation, origin2, n.scale * num6, npcSpriteEffect ^ SpriteEffects.FlipHorizontally, 0f);
				if (n.type == 22 && n.frame.Y / (Main.npcTexture[n.type].Height / Main.npcFrameCount[n.type]) >= 21)
				{
					Texture2D texture2D3 = Main.extraTexture[52];
					Microsoft.Xna.Framework.Rectangle value2 = texture2D3.Frame(1, 5, 0, n.frame.Y / (Main.npcTexture[n.type].Height / Main.npcFrameCount[n.type]) - 21);
					Main.spriteBatch.Draw(texture2D3, new Vector2(n.position.X - Main.screenPosition.X + (float)(n.width / 2) - (float)Main.npcTexture[n.type].Width * n.scale / 2f + halfSize.X * n.scale, n.position.Y - Main.screenPosition.Y + (float)n.height - (float)Main.npcTexture[n.type].Height * n.scale / (float)Main.npcFrameCount[n.type] + 4f + halfSize.Y * n.scale + addHeight + addY + n.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(value2), n.GetAlpha(npcColor), n.rotation, halfSize, n.scale, npcSpriteEffect, 0f);
				}
				else if (n.type == 368 && n.frame.Y / (Main.npcTexture[n.type].Height / Main.npcFrameCount[n.type]) >= 21)
				{
					Texture2D texture2D4 = Main.extraTexture[53];
					Microsoft.Xna.Framework.Rectangle value3 = texture2D4.Frame(1, 5, 0, n.frame.Y / (Main.npcTexture[n.type].Height / Main.npcFrameCount[n.type]) - 21);
					Main.spriteBatch.Draw(texture2D4, new Vector2(n.position.X - Main.screenPosition.X + (float)(n.width / 2) - (float)Main.npcTexture[n.type].Width * n.scale / 2f + halfSize.X * n.scale, n.position.Y - Main.screenPosition.Y + (float)n.height - (float)Main.npcTexture[n.type].Height * n.scale / (float)Main.npcFrameCount[n.type] + 4f + halfSize.Y * n.scale + addHeight + addY + n.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(value3), n.GetAlpha(npcColor), n.rotation, halfSize, n.scale, npcSpriteEffect, 0f);
				}
			}
			if (NPCID.Sets.AttackType[n.type] == 2 && n.ai[0] == 14f && !beforeDraw)
			{
				Texture2D texture2D5 = Main.extraTexture[51];
				Vector2 vector3 = n.Bottom + new Vector2(0f, n.gfxOffY + 4f);
				Microsoft.Xna.Framework.Rectangle rectangle2 = texture2D5.Frame(1, 4, 0, (int)n.frameCounter % 48 / 12);
				Vector2 origin3 = rectangle2.Size() * new Vector2(0.5f, 1f);
				Main.spriteBatch.Draw(texture2D5, new Vector2((float)((int)(vector3.X - Main.screenPosition.X)), (float)((int)(vector3.Y - Main.screenPosition.Y))), new Microsoft.Xna.Framework.Rectangle?(rectangle2), NPCID.Sets.MagicAuraColor[n.type], 0f, origin3, n.scale, npcSpriteEffect ^ SpriteEffects.FlipHorizontally, 0f);
			}
			if (NPCID.Sets.AttackType[n.type] == 3 && n.ai[0] == 15f)
			{
				Texture2D texture2D6 = Main.itemTexture[4];
				int num10 = 32;
				float scaleFactor = 0f;
				Vector2 zero = Vector2.Zero;
				if (n.type == 207)
				{
					texture2D6 = Main.itemTexture[3349];
					scaleFactor = 0.15f;
					if (beforeDraw)
					{
						return;
					}
					if (n.ai[1] > (float)NPCID.Sets.AttackTime[n.type] * 0.66f)
					{
						zero.Y = 12f;
					}
				}
				else if (n.type == 353)
				{
					texture2D6 = Main.itemTexture[3352];
					scaleFactor = 0.15f;
					if (!beforeDraw)
					{
						return;
					}
					if (n.ai[1] > (float)NPCID.Sets.AttackTime[n.type] * 0.66f)
					{
						zero.Y = 12f;
					}
				}
				else if (n.type == 441)
				{
					texture2D6 = Main.itemTexture[3351];
					num10 = 28;
					scaleFactor = 0.1f;
					if (!beforeDraw)
					{
						return;
					}
					if (n.ai[1] > (float)NPCID.Sets.AttackTime[n.type] * 0.66f)
					{
						zero.Y = 12f;
					}
				}
				Tuple<Vector2, float> swingStats = n.GetSwingStats(NPCID.Sets.AttackTime[n.type] * 2, (int)n.ai[1], n.spriteDirection, num10, num10);
				Vector2 vector4 = swingStats.Item1 + (swingStats.Item1 - n.Center) * scaleFactor + zero;
				Vector2 origin4 = texture2D6.Size() * new Vector2((float)((n.spriteDirection == 1) ? 0 : 1), 1f);
				Main.spriteBatch.Draw(texture2D6, new Vector2((float)((int)(vector4.X - Main.screenPosition.X)), (float)((int)(vector4.Y - Main.screenPosition.Y))), null, n.GetAlpha(npcColor), swingStats.Item2, origin4, n.scale, npcSpriteEffect ^ SpriteEffects.FlipHorizontally, 0f);
			}
			if (n.type == 550 && n.ai[0] == 18f)
			{
				Texture2D texture2D7 = Main.itemTexture[353];
				int num11 = 32;
				float scaleFactor2 = 0f;
				Vector2 zero2 = Vector2.Zero;
				if (n.type == 550)
				{
					texture2D7 = Main.itemTexture[353];
					scaleFactor2 = 0.15f;
					if (beforeDraw)
					{
						return;
					}
				}
				int num12 = (int)n.ai[2];
				if (num12 >= 0 && num12 < 255)
				{
					Player player = Main.player[num12];
					bool flag = player.HeldItem.type == 353 && player.direction == Math.Sign(n.Center.X - player.Center.X);
					float num13 = player.Hitbox.Distance(n.Center);
					float num14 = n.localAI[3];
					if (num13 < 46f && flag)
					{
						n.localAI[3] = 1f;
						if (n.localAI[3] != num14)
						{
							Vector2 value4 = n.Center + new Vector2((float)(n.spriteDirection * 30), -6f);
							Vector2 value5 = new Vector2(10f, 10f);
							for (int i = 0; i < 30; i++)
							{
								Dust dust = Dust.NewDustDirect(value4 - value5 / 2f, (int)value5.X, (int)value5.Y, 4, 0f, 0f, 50, new Microsoft.Xna.Framework.Color(245, 200, 30, 155), 0.7f);
								dust.noGravity = true;
								dust.velocity *= 1f;
								dust = Dust.NewDustDirect(value4 - value5 / 2f, (int)value5.X, (int)value5.Y, 4, 0f, 0f, 50, new Microsoft.Xna.Framework.Color(245, 200, 30, 155), 0.6f);
								dust.velocity *= 2f;
							}
						}
					}
					else if (n.localAI[3] == 1f)
					{
						n.localAI[3] = 2f;
					}
				}
				Tuple<Vector2, float> swingStats2 = n.GetSwingStats(40, 12, n.spriteDirection, num11, num11);
				Vector2 vector5 = swingStats2.Item1 + (swingStats2.Item1 - n.Center) * scaleFactor2 + zero2;
				Vector2 origin5 = texture2D7.Size() * new Vector2((float)((n.spriteDirection == 1) ? 0 : 1), 1f);
				Main.spriteBatch.Draw(texture2D7, new Vector2((float)((int)(vector5.X - Main.screenPosition.X)), (float)((int)(vector5.Y - Main.screenPosition.Y))), null, n.GetAlpha(npcColor), swingStats2.Item2, origin5, n.scale, npcSpriteEffect ^ SpriteEffects.FlipHorizontally, 0f);
			}
		}

		public void DrawProj(int i)
		{
			float num = 0f;
			float num2 = 0f;
			Projectile projectile = Main.projectile[i];
			this.LoadProjectile(projectile.type);
			Vector2 mountedCenter = Main.player[projectile.owner].MountedCenter;
			if (projectile.aiStyle == 99)
			{
				Vector2 vector = mountedCenter;
				vector.Y += Main.player[projectile.owner].gfxOffY;
				float num3 = projectile.Center.X - vector.X;
				float num4 = projectile.Center.Y - vector.Y;
				Math.Sqrt((double)(num3 * num3 + num4 * num4));
				float rotation = (float)Math.Atan2((double)num4, (double)num3) - 1.57f;
				if (!projectile.counterweight)
				{
					int num5 = -1;
					if (projectile.position.X + (float)(projectile.width / 2) < Main.player[projectile.owner].position.X + (float)(Main.player[projectile.owner].width / 2))
					{
						num5 = 1;
					}
					num5 *= -1;
					Main.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num4 * (float)num5), (double)(num3 * (float)num5));
				}
				bool flag = true;
				if (num3 == 0f && num4 == 0f)
				{
					flag = false;
				}
				else
				{
					float num6 = (float)Math.Sqrt((double)(num3 * num3 + num4 * num4));
					num6 = 12f / num6;
					num3 *= num6;
					num4 *= num6;
					vector.X -= num3 * 0.1f;
					vector.Y -= num4 * 0.1f;
					num3 = projectile.position.X + (float)projectile.width * 0.5f - vector.X;
					num4 = projectile.position.Y + (float)projectile.height * 0.5f - vector.Y;
				}
				while (flag)
				{
					float num7 = 12f;
					float num8 = (float)Math.Sqrt((double)(num3 * num3 + num4 * num4));
					float num9 = num8;
					if (float.IsNaN(num8) || float.IsNaN(num9))
					{
						flag = false;
					}
					else
					{
						if (num8 < 20f)
						{
							num7 = num8 - 8f;
							flag = false;
						}
						num8 = 12f / num8;
						num3 *= num8;
						num4 *= num8;
						vector.X += num3;
						vector.Y += num4;
						num3 = projectile.position.X + (float)projectile.width * 0.5f - vector.X;
						num4 = projectile.position.Y + (float)projectile.height * 0.1f - vector.Y;
						if (num9 > 12f)
						{
							float num10 = 0.3f;
							float num11 = Math.Abs(projectile.velocity.X) + Math.Abs(projectile.velocity.Y);
							if (num11 > 16f)
							{
								num11 = 16f;
							}
							num11 = 1f - num11 / 16f;
							num10 *= num11;
							num11 = num9 / 80f;
							if (num11 > 1f)
							{
								num11 = 1f;
							}
							num10 *= num11;
							if (num10 < 0f)
							{
								num10 = 0f;
							}
							num10 *= num11;
							num10 *= 0.5f;
							if (num4 > 0f)
							{
								num4 *= 1f + num10;
								num3 *= 1f - num10;
							}
							else
							{
								num11 = Math.Abs(projectile.velocity.X) / 3f;
								if (num11 > 1f)
								{
									num11 = 1f;
								}
								num11 -= 0.5f;
								num10 *= num11;
								if (num10 > 0f)
								{
									num10 *= 2f;
								}
								num4 *= 1f + num10;
								num3 *= 1f - num10;
							}
						}
						rotation = (float)Math.Atan2((double)num4, (double)num3) - 1.57f;
						int stringColor = Main.player[projectile.owner].stringColor;
						Microsoft.Xna.Framework.Color color = WorldGen.paintColor(stringColor);
						if (color.R < 75)
						{
							color.R = 75;
						}
						if (color.G < 75)
						{
							color.G = 75;
						}
						if (color.B < 75)
						{
							color.B = 75;
						}
						if (stringColor == 13)
						{
							color = new Microsoft.Xna.Framework.Color(20, 20, 20);
						}
						else if (stringColor == 14 || stringColor == 0)
						{
							color = new Microsoft.Xna.Framework.Color(200, 200, 200);
						}
						else if (stringColor == 28)
						{
							color = new Microsoft.Xna.Framework.Color(163, 116, 91);
						}
						else if (stringColor == 27)
						{
							color = new Microsoft.Xna.Framework.Color(Main.DiscoR, Main.DiscoG, Main.DiscoB);
						}
						color.A = (byte)((float)color.A * 0.4f);
						float num12 = 0.5f;
						color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f), color);
						color = new Microsoft.Xna.Framework.Color((int)((byte)((float)color.R * num12)), (int)((byte)((float)color.G * num12)), (int)((byte)((float)color.B * num12)), (int)((byte)((float)color.A * num12)));
						Main.spriteBatch.Draw(Main.fishingLineTexture, new Vector2(vector.X - Main.screenPosition.X + (float)Main.fishingLineTexture.Width * 0.5f, vector.Y - Main.screenPosition.Y + (float)Main.fishingLineTexture.Height * 0.5f) - new Vector2(6f, 0f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.fishingLineTexture.Width, (int)num7)), color, rotation, new Vector2((float)Main.fishingLineTexture.Width * 0.5f, 0f), 1f, SpriteEffects.None, 0f);
					}
				}
			}
			if (projectile.bobber && Main.player[projectile.owner].inventory[Main.player[projectile.owner].selectedItem].holdStyle > 0)
			{
				num = mountedCenter.X;
				num2 = mountedCenter.Y;
				num2 += Main.player[projectile.owner].gfxOffY;
				int type = Main.player[projectile.owner].inventory[Main.player[projectile.owner].selectedItem].type;
				float gravDir = Main.player[projectile.owner].gravDir;
				if (type == 2289)
				{
					num += (float)(43 * Main.player[projectile.owner].direction);
					if (Main.player[projectile.owner].direction < 0)
					{
						num -= 13f;
					}
					num2 -= 36f * gravDir;
				}
				else if (type == 2291)
				{
					num += (float)(43 * Main.player[projectile.owner].direction);
					if (Main.player[projectile.owner].direction < 0)
					{
						num -= 13f;
					}
					num2 -= 34f * gravDir;
				}
				else if (type == 2292)
				{
					num += (float)(46 * Main.player[projectile.owner].direction);
					if (Main.player[projectile.owner].direction < 0)
					{
						num -= 13f;
					}
					num2 -= 34f * gravDir;
				}
				else if (type == 2293)
				{
					num += (float)(43 * Main.player[projectile.owner].direction);
					if (Main.player[projectile.owner].direction < 0)
					{
						num -= 13f;
					}
					num2 -= 34f * gravDir;
				}
				else if (type == 2294)
				{
					num += (float)(43 * Main.player[projectile.owner].direction);
					if (Main.player[projectile.owner].direction < 0)
					{
						num -= 13f;
					}
					num2 -= 30f * gravDir;
				}
				else if (type == 2295)
				{
					num += (float)(43 * Main.player[projectile.owner].direction);
					if (Main.player[projectile.owner].direction < 0)
					{
						num -= 13f;
					}
					num2 -= 30f * gravDir;
				}
				else if (type == 2296)
				{
					num += (float)(43 * Main.player[projectile.owner].direction);
					if (Main.player[projectile.owner].direction < 0)
					{
						num -= 13f;
					}
					num2 -= 30f * gravDir;
				}
				else if (type == 2421)
				{
					num += (float)(47 * Main.player[projectile.owner].direction);
					if (Main.player[projectile.owner].direction < 0)
					{
						num -= 13f;
					}
					num2 -= 36f * gravDir;
				}
				else if (type == 2422)
				{
					num += (float)(47 * Main.player[projectile.owner].direction);
					if (Main.player[projectile.owner].direction < 0)
					{
						num -= 13f;
					}
					num2 -= 32f * gravDir;
				}
				if (gravDir == -1f)
				{
					num2 -= 12f;
				}
				Vector2 value = new Vector2(num, num2);
				value = Main.player[projectile.owner].RotatedRelativePoint(value + new Vector2(8f), true) - new Vector2(8f);
				float num13 = projectile.position.X + (float)projectile.width * 0.5f - value.X;
				float num14 = projectile.position.Y + (float)projectile.height * 0.5f - value.Y;
				Math.Sqrt((double)(num13 * num13 + num14 * num14));
				float rotation2 = (float)Math.Atan2((double)num14, (double)num13) - 1.57f;
				bool flag2 = true;
				if (num13 == 0f && num14 == 0f)
				{
					flag2 = false;
				}
				else
				{
					float num15 = (float)Math.Sqrt((double)(num13 * num13 + num14 * num14));
					num15 = 12f / num15;
					num13 *= num15;
					num14 *= num15;
					value.X -= num13;
					value.Y -= num14;
					num13 = projectile.position.X + (float)projectile.width * 0.5f - value.X;
					num14 = projectile.position.Y + (float)projectile.height * 0.5f - value.Y;
				}
				while (flag2)
				{
					float num16 = 12f;
					float num17 = (float)Math.Sqrt((double)(num13 * num13 + num14 * num14));
					float num18 = num17;
					if (float.IsNaN(num17) || float.IsNaN(num18))
					{
						flag2 = false;
					}
					else
					{
						if (num17 < 20f)
						{
							num16 = num17 - 8f;
							flag2 = false;
						}
						num17 = 12f / num17;
						num13 *= num17;
						num14 *= num17;
						value.X += num13;
						value.Y += num14;
						num13 = projectile.position.X + (float)projectile.width * 0.5f - value.X;
						num14 = projectile.position.Y + (float)projectile.height * 0.1f - value.Y;
						if (num18 > 12f)
						{
							float num19 = 0.3f;
							float num20 = Math.Abs(projectile.velocity.X) + Math.Abs(projectile.velocity.Y);
							if (num20 > 16f)
							{
								num20 = 16f;
							}
							num20 = 1f - num20 / 16f;
							num19 *= num20;
							num20 = num18 / 80f;
							if (num20 > 1f)
							{
								num20 = 1f;
							}
							num19 *= num20;
							if (num19 < 0f)
							{
								num19 = 0f;
							}
							num20 = 1f - projectile.localAI[0] / 100f;
							num19 *= num20;
							if (num14 > 0f)
							{
								num14 *= 1f + num19;
								num13 *= 1f - num19;
							}
							else
							{
								num20 = Math.Abs(projectile.velocity.X) / 3f;
								if (num20 > 1f)
								{
									num20 = 1f;
								}
								num20 -= 0.5f;
								num19 *= num20;
								if (num19 > 0f)
								{
									num19 *= 2f;
								}
								num14 *= 1f + num19;
								num13 *= 1f - num19;
							}
						}
						rotation2 = (float)Math.Atan2((double)num14, (double)num13) - 1.57f;
						Microsoft.Xna.Framework.Color color2 = Lighting.GetColor((int)value.X / 16, (int)(value.Y / 16f), new Microsoft.Xna.Framework.Color(200, 200, 200, 100));
						if (type == 2294)
						{
							color2 = Lighting.GetColor((int)value.X / 16, (int)(value.Y / 16f), new Microsoft.Xna.Framework.Color(100, 180, 230, 100));
						}
						if (type == 2295)
						{
							color2 = Lighting.GetColor((int)value.X / 16, (int)(value.Y / 16f), new Microsoft.Xna.Framework.Color(250, 90, 70, 100));
						}
						if (type == 2293)
						{
							color2 = Lighting.GetColor((int)value.X / 16, (int)(value.Y / 16f), new Microsoft.Xna.Framework.Color(203, 190, 210, 100));
						}
						if (type == 2421)
						{
							color2 = Lighting.GetColor((int)value.X / 16, (int)(value.Y / 16f), new Microsoft.Xna.Framework.Color(183, 77, 112, 100));
						}
						if (type == 2422)
						{
							color2 = Lighting.GetColor((int)value.X / 16, (int)(value.Y / 16f), new Microsoft.Xna.Framework.Color(255, 226, 116, 100));
						}
						Main.spriteBatch.Draw(Main.fishingLineTexture, new Vector2(value.X - Main.screenPosition.X + (float)Main.fishingLineTexture.Width * 0.5f, value.Y - Main.screenPosition.Y + (float)Main.fishingLineTexture.Height * 0.5f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.fishingLineTexture.Width, (int)num16)), color2, rotation2, new Vector2((float)Main.fishingLineTexture.Width * 0.5f, 0f), 1f, SpriteEffects.None, 0f);
					}
				}
			}
			else if (projectile.type == 32)
			{
				Vector2 vector2 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num21 = mountedCenter.X - vector2.X;
				float num22 = mountedCenter.Y - vector2.Y;
				float rotation3 = (float)Math.Atan2((double)num22, (double)num21) - 1.57f;
				bool flag3 = true;
				if (num21 == 0f && num22 == 0f)
				{
					flag3 = false;
				}
				else
				{
					float num23 = (float)Math.Sqrt((double)(num21 * num21 + num22 * num22));
					num23 = 8f / num23;
					num21 *= num23;
					num22 *= num23;
					vector2.X -= num21;
					vector2.Y -= num22;
					num21 = mountedCenter.X - vector2.X;
					num22 = mountedCenter.Y - vector2.Y;
				}
				while (flag3)
				{
					float num24 = (float)Math.Sqrt((double)(num21 * num21 + num22 * num22));
					if (num24 < 28f)
					{
						flag3 = false;
					}
					else if (float.IsNaN(num24))
					{
						flag3 = false;
					}
					else
					{
						num24 = 28f / num24;
						num21 *= num24;
						num22 *= num24;
						vector2.X += num21;
						vector2.Y += num22;
						num21 = mountedCenter.X - vector2.X;
						num22 = mountedCenter.Y - vector2.Y;
						Microsoft.Xna.Framework.Color color3 = Lighting.GetColor((int)vector2.X / 16, (int)(vector2.Y / 16f));
						Main.spriteBatch.Draw(Main.chain5Texture, new Vector2(vector2.X - Main.screenPosition.X, vector2.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain5Texture.Width, Main.chain5Texture.Height)), color3, rotation3, new Vector2((float)Main.chain5Texture.Width * 0.5f, (float)Main.chain5Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
				}
			}
			else if (projectile.type == 73)
			{
				Vector2 vector3 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num25 = mountedCenter.X - vector3.X;
				float num26 = mountedCenter.Y - vector3.Y;
				float rotation4 = (float)Math.Atan2((double)num26, (double)num25) - 1.57f;
				bool flag4 = true;
				while (flag4)
				{
					float num27 = (float)Math.Sqrt((double)(num25 * num25 + num26 * num26));
					if (num27 < 25f)
					{
						flag4 = false;
					}
					else if (float.IsNaN(num27))
					{
						flag4 = false;
					}
					else
					{
						num27 = 12f / num27;
						num25 *= num27;
						num26 *= num27;
						vector3.X += num25;
						vector3.Y += num26;
						num25 = mountedCenter.X - vector3.X;
						num26 = mountedCenter.Y - vector3.Y;
						Microsoft.Xna.Framework.Color color4 = Lighting.GetColor((int)vector3.X / 16, (int)(vector3.Y / 16f));
						Main.spriteBatch.Draw(Main.chain8Texture, new Vector2(vector3.X - Main.screenPosition.X, vector3.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain8Texture.Width, Main.chain8Texture.Height)), color4, rotation4, new Vector2((float)Main.chain8Texture.Width * 0.5f, (float)Main.chain8Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
				}
			}
			else if (projectile.type == 186)
			{
				Vector2 vector4 = new Vector2(projectile.localAI[0], projectile.localAI[1]);
				float num28 = Vector2.Distance(projectile.Center, vector4) - projectile.velocity.Length();
				float num29 = (float)Main.chain17Texture.Height - num28;
				if (num28 > 0f && projectile.ai[1] > 0f)
				{
					Microsoft.Xna.Framework.Color color5 = Lighting.GetColor((int)projectile.position.X / 16, (int)projectile.position.Y / 16);
					Main.spriteBatch.Draw(Main.chain17Texture, vector4 - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, (int)num29, Main.chain17Texture.Width, (int)num28)), color5, projectile.rotation, new Vector2((float)(Main.chain17Texture.Width / 2), 0f), 1f, SpriteEffects.None, 0f);
				}
			}
			else if (projectile.type == 74)
			{
				Vector2 vector5 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num30 = mountedCenter.X - vector5.X;
				float num31 = mountedCenter.Y - vector5.Y;
				float rotation5 = (float)Math.Atan2((double)num31, (double)num30) - 1.57f;
				bool flag5 = true;
				while (flag5)
				{
					float num32 = (float)Math.Sqrt((double)(num30 * num30 + num31 * num31));
					if (num32 < 25f)
					{
						flag5 = false;
					}
					else if (float.IsNaN(num32))
					{
						flag5 = false;
					}
					else
					{
						num32 = 12f / num32;
						num30 *= num32;
						num31 *= num32;
						vector5.X += num30;
						vector5.Y += num31;
						num30 = mountedCenter.X - vector5.X;
						num31 = mountedCenter.Y - vector5.Y;
						Microsoft.Xna.Framework.Color color6 = Lighting.GetColor((int)vector5.X / 16, (int)(vector5.Y / 16f));
						Main.spriteBatch.Draw(Main.chain9Texture, new Vector2(vector5.X - Main.screenPosition.X, vector5.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain8Texture.Width, Main.chain8Texture.Height)), color6, rotation5, new Vector2((float)Main.chain8Texture.Width * 0.5f, (float)Main.chain8Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
				}
			}
			else if (projectile.type == 171)
			{
				Vector2 vector6 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num33 = -projectile.velocity.X;
				float num34 = -projectile.velocity.Y;
				float num35 = 1f;
				if (projectile.ai[0] <= 17f)
				{
					num35 = projectile.ai[0] / 17f;
				}
				int num36 = (int)(30f * num35);
				float num37 = 1f;
				if (projectile.ai[0] <= 30f)
				{
					num37 = projectile.ai[0] / 30f;
				}
				float num38 = 0.4f * num37;
				float num39 = num38;
				num34 += num39;
				Vector2[] array = new Vector2[num36];
				float[] array2 = new float[num36];
				for (int j = 0; j < num36; j++)
				{
					float num40 = (float)Math.Sqrt((double)(num33 * num33 + num34 * num34));
					float num41 = 5.6f;
					if (Math.Abs(num33) + Math.Abs(num34) < 1f)
					{
						num41 *= Math.Abs(num33) + Math.Abs(num34) / 1f;
					}
					num40 = num41 / num40;
					num33 *= num40;
					num34 *= num40;
					float num42 = (float)Math.Atan2((double)num34, (double)num33) - 1.57f;
					array[j].X = vector6.X;
					array[j].Y = vector6.Y;
					array2[j] = num42;
					vector6.X += num33;
					vector6.Y += num34;
					num33 = -projectile.velocity.X;
					num34 = -projectile.velocity.Y;
					num39 += num38;
					num34 += num39;
				}
				for (int k = num36 - 1; k >= 0; k--)
				{
					vector6.X = array[k].X;
					vector6.Y = array[k].Y;
					float rotation6 = array2[k];
					Microsoft.Xna.Framework.Color color7 = Lighting.GetColor((int)vector6.X / 16, (int)(vector6.Y / 16f));
					Main.spriteBatch.Draw(Main.chain16Texture, new Vector2(vector6.X - Main.screenPosition.X, vector6.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain16Texture.Width, Main.chain16Texture.Height)), color7, rotation6, new Vector2((float)Main.chain16Texture.Width * 0.5f, (float)Main.chain16Texture.Height * 0.5f), 0.8f, SpriteEffects.None, 0f);
				}
			}
			else if (projectile.type == 475)
			{
				Vector2 vector7 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num43 = -projectile.velocity.X;
				float num44 = -projectile.velocity.Y;
				float num45 = 1f;
				if (projectile.ai[0] <= 17f)
				{
					num45 = projectile.ai[0] / 17f;
				}
				int num46 = (int)(30f * num45);
				float num47 = 1f;
				if (projectile.ai[0] <= 30f)
				{
					num47 = projectile.ai[0] / 30f;
				}
				float num48 = 0.4f * num47;
				float num49 = num48;
				num44 += num49;
				Vector2[] array3 = new Vector2[num46];
				float[] array4 = new float[num46];
				for (int l = 0; l < num46; l++)
				{
					float num50 = (float)Math.Sqrt((double)(num43 * num43 + num44 * num44));
					float num51 = 5.6f;
					if (Math.Abs(num43) + Math.Abs(num44) < 1f)
					{
						num51 *= Math.Abs(num43) + Math.Abs(num44) / 1f;
					}
					num50 = num51 / num50;
					num43 *= num50;
					num44 *= num50;
					float num52 = (float)Math.Atan2((double)num44, (double)num43) - 1.57f;
					array3[l].X = vector7.X;
					array3[l].Y = vector7.Y;
					array4[l] = num52;
					vector7.X += num43;
					vector7.Y += num44;
					num43 = -projectile.velocity.X;
					num44 = -projectile.velocity.Y;
					num49 += num48;
					num44 += num49;
				}
				int num53 = 0;
				for (int m = num46 - 1; m >= 0; m--)
				{
					vector7.X = array3[m].X;
					vector7.Y = array3[m].Y;
					float rotation7 = array4[m];
					Microsoft.Xna.Framework.Color color8 = Lighting.GetColor((int)vector7.X / 16, (int)(vector7.Y / 16f));
					if (num53 % 2 == 0)
					{
						Main.spriteBatch.Draw(Main.chain38Texture, new Vector2(vector7.X - Main.screenPosition.X, vector7.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain38Texture.Width, Main.chain38Texture.Height)), color8, rotation7, new Vector2((float)Main.chain38Texture.Width * 0.5f, (float)Main.chain38Texture.Height * 0.5f), 0.8f, SpriteEffects.None, 0f);
					}
					else
					{
						Main.spriteBatch.Draw(Main.chain39Texture, new Vector2(vector7.X - Main.screenPosition.X, vector7.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain39Texture.Width, Main.chain39Texture.Height)), color8, rotation7, new Vector2((float)Main.chain39Texture.Width * 0.5f, (float)Main.chain39Texture.Height * 0.5f), 0.8f, SpriteEffects.None, 0f);
					}
					num53++;
				}
			}
			else if (projectile.type == 505 || projectile.type == 506)
			{
				Vector2 vector8 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num54 = -projectile.velocity.X;
				float num55 = -projectile.velocity.Y;
				float num56 = 1f;
				if (projectile.ai[0] <= 17f)
				{
					num56 = projectile.ai[0] / 17f;
				}
				int num57 = (int)(30f * num56);
				float num58 = 1f;
				if (projectile.ai[0] <= 30f)
				{
					num58 = projectile.ai[0] / 30f;
				}
				float num59 = 0.4f * num58;
				float num60 = num59;
				num55 += num60;
				Vector2[] array5 = new Vector2[num57];
				float[] array6 = new float[num57];
				for (int n = 0; n < num57; n++)
				{
					float num61 = (float)Math.Sqrt((double)(num54 * num54 + num55 * num55));
					float num62 = 5.6f;
					if (Math.Abs(num54) + Math.Abs(num55) < 1f)
					{
						num62 *= Math.Abs(num54) + Math.Abs(num55) / 1f;
					}
					num61 = num62 / num61;
					num54 *= num61;
					num55 *= num61;
					float num63 = (float)Math.Atan2((double)num55, (double)num54) - 1.57f;
					array5[n].X = vector8.X;
					array5[n].Y = vector8.Y;
					array6[n] = num63;
					vector8.X += num54;
					vector8.Y += num55;
					num54 = -projectile.velocity.X;
					num55 = -projectile.velocity.Y;
					num60 += num59;
					num55 += num60;
				}
				int num64 = 0;
				for (int num65 = num57 - 1; num65 >= 0; num65--)
				{
					vector8.X = array5[num65].X;
					vector8.Y = array5[num65].Y;
					float rotation8 = array6[num65];
					Microsoft.Xna.Framework.Color color9 = Lighting.GetColor((int)vector8.X / 16, (int)(vector8.Y / 16f));
					int num66 = 4;
					if (projectile.type == 506)
					{
						num66 = 6;
					}
					num66 += num64 % 2;
					Main.spriteBatch.Draw(Main.chainsTexture[num66], new Vector2(vector8.X - Main.screenPosition.X, vector8.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chainsTexture[num66].Width, Main.chainsTexture[num66].Height)), color9, rotation8, new Vector2((float)Main.chainsTexture[num66].Width * 0.5f, (float)Main.chainsTexture[num66].Height * 0.5f), 0.8f, SpriteEffects.None, 0f);
					num64++;
				}
			}
			else if (projectile.type == 165)
			{
				Vector2 vector9 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num67 = mountedCenter.X - vector9.X;
				float num68 = mountedCenter.Y - vector9.Y;
				float rotation9 = (float)Math.Atan2((double)num68, (double)num67) - 1.57f;
				bool flag6 = true;
				while (flag6)
				{
					float num69 = (float)Math.Sqrt((double)(num67 * num67 + num68 * num68));
					if (num69 < 25f)
					{
						flag6 = false;
					}
					else if (float.IsNaN(num69))
					{
						flag6 = false;
					}
					else
					{
						num69 = 24f / num69;
						num67 *= num69;
						num68 *= num69;
						vector9.X += num67;
						vector9.Y += num68;
						num67 = mountedCenter.X - vector9.X;
						num68 = mountedCenter.Y - vector9.Y;
						Microsoft.Xna.Framework.Color color10 = Lighting.GetColor((int)vector9.X / 16, (int)(vector9.Y / 16f));
						Main.spriteBatch.Draw(Main.chain15Texture, new Vector2(vector9.X - Main.screenPosition.X, vector9.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain15Texture.Width, Main.chain15Texture.Height)), color10, rotation9, new Vector2((float)Main.chain15Texture.Width * 0.5f, (float)Main.chain15Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
				}
			}
			else if (projectile.type >= 230 && projectile.type <= 235)
			{
				int num70 = projectile.type - 229;
				Vector2 vector10 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num71 = mountedCenter.X - vector10.X;
				float num72 = mountedCenter.Y - vector10.Y;
				float rotation10 = (float)Math.Atan2((double)num72, (double)num71) - 1.57f;
				bool flag7 = true;
				while (flag7)
				{
					float num73 = (float)Math.Sqrt((double)(num71 * num71 + num72 * num72));
					if (num73 < 25f)
					{
						flag7 = false;
					}
					else if (float.IsNaN(num73))
					{
						flag7 = false;
					}
					else
					{
						num73 = (float)Main.gemChainTexture[num70].Height / num73;
						num71 *= num73;
						num72 *= num73;
						vector10.X += num71;
						vector10.Y += num72;
						num71 = mountedCenter.X - vector10.X;
						num72 = mountedCenter.Y - vector10.Y;
						Microsoft.Xna.Framework.Color color11 = Lighting.GetColor((int)vector10.X / 16, (int)(vector10.Y / 16f));
						Main.spriteBatch.Draw(Main.gemChainTexture[num70], new Vector2(vector10.X - Main.screenPosition.X, vector10.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.gemChainTexture[num70].Width, Main.gemChainTexture[num70].Height)), color11, rotation10, new Vector2((float)Main.gemChainTexture[num70].Width * 0.5f, (float)Main.gemChainTexture[num70].Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
				}
			}
			else if (projectile.type == 256)
			{
				Vector2 vector11 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num74 = mountedCenter.X - vector11.X;
				float num75 = mountedCenter.Y - vector11.Y;
				float num76 = (float)Math.Atan2((double)num75, (double)num74) - 1.57f;
				bool flag8 = true;
				while (flag8)
				{
					float num77 = (float)Math.Sqrt((double)(num74 * num74 + num75 * num75));
					if (num77 < 26f)
					{
						flag8 = false;
					}
					else if (float.IsNaN(num77))
					{
						flag8 = false;
					}
					else
					{
						num77 = 26f / num77;
						num74 *= num77;
						num75 *= num77;
						vector11.X += num74;
						vector11.Y += num75;
						num74 = Main.player[projectile.owner].position.X + (float)(Main.player[projectile.owner].width / 2) - vector11.X;
						num75 = Main.player[projectile.owner].position.Y + (float)(Main.player[projectile.owner].height / 2) - vector11.Y;
						Microsoft.Xna.Framework.Color color12 = Lighting.GetColor((int)vector11.X / 16, (int)(vector11.Y / 16f));
						Main.spriteBatch.Draw(Main.chain20Texture, new Vector2(vector11.X - Main.screenPosition.X, vector11.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain20Texture.Width, Main.chain20Texture.Height)), color12, num76 - 0.785f, new Vector2((float)Main.chain20Texture.Width * 0.5f, (float)Main.chain20Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
				}
			}
			else if (projectile.type == 322)
			{
				Vector2 vector12 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num78 = mountedCenter.X - vector12.X;
				float num79 = mountedCenter.Y - vector12.Y;
				float rotation11 = (float)Math.Atan2((double)num79, (double)num78) - 1.57f;
				bool flag9 = true;
				while (flag9)
				{
					float num80 = (float)Math.Sqrt((double)(num78 * num78 + num79 * num79));
					if (num80 < 22f)
					{
						flag9 = false;
					}
					else if (float.IsNaN(num80))
					{
						flag9 = false;
					}
					else
					{
						num80 = 22f / num80;
						num78 *= num80;
						num79 *= num80;
						vector12.X += num78;
						vector12.Y += num79;
						num78 = mountedCenter.X - vector12.X;
						num79 = mountedCenter.Y - vector12.Y;
						Microsoft.Xna.Framework.Color color13 = Lighting.GetColor((int)vector12.X / 16, (int)(vector12.Y / 16f));
						Main.spriteBatch.Draw(Main.chain29Texture, new Vector2(vector12.X - Main.screenPosition.X, vector12.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain29Texture.Width, Main.chain29Texture.Height)), color13, rotation11, new Vector2((float)Main.chain29Texture.Width * 0.5f, (float)Main.chain29Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
				}
			}
			else if (projectile.type == 315)
			{
				Vector2 vector13 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num81 = mountedCenter.X - vector13.X;
				float num82 = mountedCenter.Y - vector13.Y;
				float rotation12 = (float)Math.Atan2((double)num82, (double)num81) - 1.57f;
				bool flag10 = true;
				while (flag10)
				{
					float num83 = (float)Math.Sqrt((double)(num81 * num81 + num82 * num82));
					if (num83 < 50f)
					{
						flag10 = false;
					}
					else if (float.IsNaN(num83))
					{
						flag10 = false;
					}
					else
					{
						num83 = 40f / num83;
						num81 *= num83;
						num82 *= num83;
						vector13.X += num81;
						vector13.Y += num82;
						num81 = mountedCenter.X - vector13.X;
						num82 = mountedCenter.Y - vector13.Y;
						Microsoft.Xna.Framework.Color color14 = Lighting.GetColor((int)vector13.X / 16, (int)(vector13.Y / 16f));
						Main.spriteBatch.Draw(Main.chain28Texture, new Vector2(vector13.X - Main.screenPosition.X, vector13.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain28Texture.Width, Main.chain28Texture.Height)), color14, rotation12, new Vector2((float)Main.chain28Texture.Width * 0.5f, (float)Main.chain28Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
				}
			}
			else if (projectile.type == 331)
			{
				Vector2 vector14 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num84 = mountedCenter.X - vector14.X;
				float num85 = mountedCenter.Y - vector14.Y;
				float rotation13 = (float)Math.Atan2((double)num85, (double)num84) - 1.57f;
				bool flag11 = true;
				while (flag11)
				{
					float num86 = (float)Math.Sqrt((double)(num84 * num84 + num85 * num85));
					if (num86 < 30f)
					{
						flag11 = false;
					}
					else if (float.IsNaN(num86))
					{
						flag11 = false;
					}
					else
					{
						num86 = 24f / num86;
						num84 *= num86;
						num85 *= num86;
						vector14.X += num84;
						vector14.Y += num85;
						num84 = mountedCenter.X - vector14.X;
						num85 = mountedCenter.Y - vector14.Y;
						Microsoft.Xna.Framework.Color color15 = Lighting.GetColor((int)vector14.X / 16, (int)(vector14.Y / 16f));
						Main.spriteBatch.Draw(Main.chain30Texture, new Vector2(vector14.X - Main.screenPosition.X, vector14.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain30Texture.Width, Main.chain30Texture.Height)), color15, rotation13, new Vector2((float)Main.chain30Texture.Width * 0.5f, (float)Main.chain30Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
				}
			}
			else if (projectile.type == 332)
			{
				int num87 = 0;
				Vector2 vector15 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num88 = mountedCenter.X - vector15.X;
				float num89 = mountedCenter.Y - vector15.Y;
				float rotation14 = (float)Math.Atan2((double)num89, (double)num88) - 1.57f;
				bool flag12 = true;
				while (flag12)
				{
					float num90 = (float)Math.Sqrt((double)(num88 * num88 + num89 * num89));
					if (num90 < 30f)
					{
						flag12 = false;
					}
					else if (float.IsNaN(num90))
					{
						flag12 = false;
					}
					else
					{
						int i2 = (int)vector15.X / 16;
						int j2 = (int)vector15.Y / 16;
						if (num87 == 0)
						{
							Lighting.AddLight(i2, j2, 0f, 0.2f, 0.2f);
						}
						if (num87 == 1)
						{
							Lighting.AddLight(i2, j2, 0.1f, 0.2f, 0f);
						}
						if (num87 == 2)
						{
							Lighting.AddLight(i2, j2, 0.2f, 0.1f, 0f);
						}
						if (num87 == 3)
						{
							Lighting.AddLight(i2, j2, 0.2f, 0f, 0.2f);
						}
						num90 = 16f / num90;
						num88 *= num90;
						num89 *= num90;
						vector15.X += num88;
						vector15.Y += num89;
						num88 = mountedCenter.X - vector15.X;
						num89 = mountedCenter.Y - vector15.Y;
						Microsoft.Xna.Framework.Color color16 = Lighting.GetColor((int)vector15.X / 16, (int)(vector15.Y / 16f));
						Main.spriteBatch.Draw(Main.chain31Texture, new Vector2(vector15.X - Main.screenPosition.X, vector15.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.chain31Texture.Height / 4 * num87, Main.chain31Texture.Width, Main.chain31Texture.Height / 4)), color16, rotation14, new Vector2((float)Main.chain30Texture.Width * 0.5f, (float)(Main.chain30Texture.Height / 8)), 1f, SpriteEffects.None, 0f);
						Main.spriteBatch.Draw(Main.chain32Texture, new Vector2(vector15.X - Main.screenPosition.X, vector15.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.chain31Texture.Height / 4 * num87, Main.chain31Texture.Width, Main.chain31Texture.Height / 4)), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), rotation14, new Vector2((float)Main.chain30Texture.Width * 0.5f, (float)(Main.chain30Texture.Height / 8)), 1f, SpriteEffects.None, 0f);
						num87++;
						if (num87 > 3)
						{
							num87 = 0;
						}
					}
				}
			}
			else if (projectile.type == 372 || projectile.type == 383 || projectile.type == 396 || projectile.type == 403 || projectile.type == 404 || projectile.type == 446 || (projectile.type >= 486 && projectile.type <= 489) || (projectile.type >= 646 && projectile.type <= 649) || projectile.type == 652)
			{
				Texture2D texture2D = null;
				Microsoft.Xna.Framework.Color transparent = Microsoft.Xna.Framework.Color.Transparent;
				Texture2D texture2D2 = Main.chain33Texture;
				if (projectile.type == 383)
				{
					texture2D2 = Main.chain34Texture;
				}
				if (projectile.type == 396)
				{
					texture2D2 = Main.chain35Texture;
				}
				if (projectile.type == 403)
				{
					texture2D2 = Main.chain36Texture;
				}
				if (projectile.type == 404)
				{
					texture2D2 = Main.chain37Texture;
				}
				if (projectile.type == 446)
				{
					texture2D2 = Main.extraTexture[3];
				}
				if (projectile.type >= 486 && projectile.type <= 489)
				{
					texture2D2 = Main.chainsTexture[projectile.type - 486];
				}
				if (projectile.type >= 646 && projectile.type <= 649)
				{
					texture2D2 = Main.chainsTexture[projectile.type - 646 + 8];
					texture2D = Main.chainsTexture[projectile.type - 646 + 12];
					transparent = new Microsoft.Xna.Framework.Color(255, 255, 255, 127);
				}
				if (projectile.type == 652)
				{
					texture2D2 = Main.chainsTexture[16];
				}
				Vector2 vector16 = projectile.Center;
				Microsoft.Xna.Framework.Rectangle? sourceRectangle = null;
				Vector2 origin = new Vector2((float)texture2D2.Width * 0.5f, (float)texture2D2.Height * 0.5f);
				float num91 = (float)texture2D2.Height;
				float num92 = 0f;
				if (projectile.type == 446)
				{
					int num93 = 7;
					int num94 = (int)projectile.localAI[0] / num93;
					sourceRectangle = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, texture2D2.Height / 4 * num94, texture2D2.Width, texture2D2.Height / 4));
					origin.Y /= 4f;
					num91 /= 4f;
				}
				int type2 = projectile.type;
				if (type2 != 383)
				{
					if (type2 != 446)
					{
						switch (type2)
						{
						case 487:
							num92 = 8f;
							break;
						case 489:
							num92 = 10f;
							break;
						}
					}
					else
					{
						num92 = 20f;
					}
				}
				else
				{
					num92 = 14f;
				}
				if (num92 != 0f)
				{
					float num95 = -1.57f;
					Vector2 value2 = new Vector2((float)Math.Cos((double)(projectile.rotation + num95)), (float)Math.Sin((double)(projectile.rotation + num95)));
					vector16 -= value2 * num92;
					value2 = mountedCenter - vector16;
					value2.Normalize();
					vector16 -= value2 * num91 / 2f;
				}
				Vector2 vector17 = mountedCenter - vector16;
				float rotation15 = (float)Math.Atan2((double)vector17.Y, (double)vector17.X) - 1.57f;
				bool flag13 = true;
				if (float.IsNaN(vector16.X) && float.IsNaN(vector16.Y))
				{
					flag13 = false;
				}
				if (float.IsNaN(vector17.X) && float.IsNaN(vector17.Y))
				{
					flag13 = false;
				}
				while (flag13)
				{
					float num96 = vector17.Length();
					if (num96 < num91 + 1f)
					{
						flag13 = false;
					}
					else
					{
						Vector2 value3 = vector17;
						value3.Normalize();
						vector16 += value3 * num91;
						vector17 = mountedCenter - vector16;
						Microsoft.Xna.Framework.Color color17 = Lighting.GetColor((int)vector16.X / 16, (int)(vector16.Y / 16f));
						if (projectile.type == 396)
						{
							color17 *= (float)(255 - projectile.alpha) / 255f;
						}
						if (projectile.type == 446)
						{
							color17 = projectile.GetAlpha(color17);
						}
						if (projectile.type == 488)
						{
							Lighting.AddLight(vector16, 0.2f, 0f, 0.175f);
							color17 = new Microsoft.Xna.Framework.Color(255, 255, 255, 255);
						}
						if (projectile.type >= 646 && projectile.type <= 649)
						{
							color17 = projectile.GetAlpha(color17);
						}
						Main.spriteBatch.Draw(texture2D2, vector16 - Main.screenPosition, sourceRectangle, color17, rotation15, origin, 1f, SpriteEffects.None, 0f);
						if (texture2D != null)
						{
							Main.spriteBatch.Draw(texture2D, vector16 - Main.screenPosition, sourceRectangle, transparent, rotation15, origin, 1f, SpriteEffects.None, 0f);
						}
					}
				}
			}
			else if (projectile.aiStyle == 7)
			{
				Vector2 vector18 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num97 = mountedCenter.X - vector18.X;
				float num98 = mountedCenter.Y - vector18.Y;
				float rotation16 = (float)Math.Atan2((double)num98, (double)num97) - 1.57f;
				bool flag14 = true;
				while (flag14)
				{
					float num99 = (float)Math.Sqrt((double)(num97 * num97 + num98 * num98));
					if (num99 < 25f)
					{
						flag14 = false;
					}
					else if (float.IsNaN(num99))
					{
						flag14 = false;
					}
					else
					{
						num99 = 12f / num99;
						num97 *= num99;
						num98 *= num99;
						vector18.X += num97;
						vector18.Y += num98;
						num97 = mountedCenter.X - vector18.X;
						num98 = mountedCenter.Y - vector18.Y;
						Microsoft.Xna.Framework.Color color18 = Lighting.GetColor((int)vector18.X / 16, (int)(vector18.Y / 16f));
						Main.spriteBatch.Draw(Main.chainTexture, new Vector2(vector18.X - Main.screenPosition.X, vector18.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chainTexture.Width, Main.chainTexture.Height)), color18, rotation16, new Vector2((float)Main.chainTexture.Width * 0.5f, (float)Main.chainTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
				}
			}
			else if (projectile.type == 262)
			{
				float num100 = projectile.Center.X;
				float num101 = projectile.Center.Y;
				float num102 = projectile.velocity.X;
				float num103 = projectile.velocity.Y;
				float num104 = (float)Math.Sqrt((double)(num102 * num102 + num103 * num103));
				num104 = 4f / num104;
				if (projectile.ai[0] == 0f)
				{
					num100 -= projectile.velocity.X * num104;
					num101 -= projectile.velocity.Y * num104;
				}
				else
				{
					num100 += projectile.velocity.X * num104;
					num101 += projectile.velocity.Y * num104;
				}
				Vector2 vector19 = new Vector2(num100, num101);
				num102 = mountedCenter.X - vector19.X;
				num103 = mountedCenter.Y - vector19.Y;
				float rotation17 = (float)Math.Atan2((double)num103, (double)num102) - 1.57f;
				if (projectile.alpha == 0)
				{
					int num105 = -1;
					if (projectile.position.X + (float)(projectile.width / 2) < mountedCenter.X)
					{
						num105 = 1;
					}
					if (Main.player[projectile.owner].direction == 1)
					{
						Main.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num103 * (float)num105), (double)(num102 * (float)num105));
					}
					else
					{
						Main.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num103 * (float)num105), (double)(num102 * (float)num105));
					}
				}
				bool flag15 = true;
				while (flag15)
				{
					float num106 = (float)Math.Sqrt((double)(num102 * num102 + num103 * num103));
					if (num106 < 25f)
					{
						flag15 = false;
					}
					else if (float.IsNaN(num106))
					{
						flag15 = false;
					}
					else
					{
						num106 = 12f / num106;
						num102 *= num106;
						num103 *= num106;
						vector19.X += num102;
						vector19.Y += num103;
						num102 = mountedCenter.X - vector19.X;
						num103 = mountedCenter.Y - vector19.Y;
						Microsoft.Xna.Framework.Color color19 = Lighting.GetColor((int)vector19.X / 16, (int)(vector19.Y / 16f));
						Main.spriteBatch.Draw(Main.chain22Texture, new Vector2(vector19.X - Main.screenPosition.X, vector19.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain22Texture.Width, Main.chain22Texture.Height)), color19, rotation17, new Vector2((float)Main.chain22Texture.Width * 0.5f, (float)Main.chain22Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
				}
			}
			else if (projectile.type == 273)
			{
				float num107 = projectile.Center.X;
				float num108 = projectile.Center.Y;
				float num109 = projectile.velocity.X;
				float num110 = projectile.velocity.Y;
				float num111 = (float)Math.Sqrt((double)(num109 * num109 + num110 * num110));
				num111 = 4f / num111;
				if (projectile.ai[0] == 0f)
				{
					num107 -= projectile.velocity.X * num111;
					num108 -= projectile.velocity.Y * num111;
				}
				else
				{
					num107 += projectile.velocity.X * num111;
					num108 += projectile.velocity.Y * num111;
				}
				Vector2 vector20 = new Vector2(num107, num108);
				num109 = mountedCenter.X - vector20.X;
				num110 = mountedCenter.Y - vector20.Y;
				float rotation18 = (float)Math.Atan2((double)num110, (double)num109) - 1.57f;
				if (projectile.alpha == 0)
				{
					int num112 = -1;
					if (projectile.position.X + (float)(projectile.width / 2) < mountedCenter.X)
					{
						num112 = 1;
					}
					if (Main.player[projectile.owner].direction == 1)
					{
						Main.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num110 * (float)num112), (double)(num109 * (float)num112));
					}
					else
					{
						Main.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num110 * (float)num112), (double)(num109 * (float)num112));
					}
				}
				bool flag16 = true;
				while (flag16)
				{
					float num113 = (float)Math.Sqrt((double)(num109 * num109 + num110 * num110));
					if (num113 < 25f)
					{
						flag16 = false;
					}
					else if (float.IsNaN(num113))
					{
						flag16 = false;
					}
					else
					{
						num113 = 12f / num113;
						num109 *= num113;
						num110 *= num113;
						vector20.X += num109;
						vector20.Y += num110;
						num109 = mountedCenter.X - vector20.X;
						num110 = mountedCenter.Y - vector20.Y;
						Microsoft.Xna.Framework.Color color20 = Lighting.GetColor((int)vector20.X / 16, (int)(vector20.Y / 16f));
						Main.spriteBatch.Draw(Main.chain23Texture, new Vector2(vector20.X - Main.screenPosition.X, vector20.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain23Texture.Width, Main.chain23Texture.Height)), color20, rotation18, new Vector2((float)Main.chain23Texture.Width * 0.5f, (float)Main.chain23Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
				}
			}
			else if (projectile.type == 481)
			{
				float num114 = projectile.Center.X;
				float num115 = projectile.Center.Y;
				float num116 = projectile.velocity.X;
				float num117 = projectile.velocity.Y;
				float num118 = (float)Math.Sqrt((double)(num116 * num116 + num117 * num117));
				num118 = 4f / num118;
				if (projectile.ai[0] == 0f)
				{
					num114 -= projectile.velocity.X * num118;
					num115 -= projectile.velocity.Y * num118;
				}
				else
				{
					num114 += projectile.velocity.X * num118;
					num115 += projectile.velocity.Y * num118;
				}
				Vector2 vector21 = new Vector2(num114, num115);
				num116 = mountedCenter.X - vector21.X;
				num117 = mountedCenter.Y - vector21.Y;
				float rotation19 = (float)Math.Atan2((double)num117, (double)num116) - 1.57f;
				if (projectile.alpha == 0)
				{
					int num119 = -1;
					if (projectile.position.X + (float)(projectile.width / 2) < mountedCenter.X)
					{
						num119 = 1;
					}
					if (Main.player[projectile.owner].direction == 1)
					{
						Main.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num117 * (float)num119), (double)(num116 * (float)num119));
					}
					else
					{
						Main.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num117 * (float)num119), (double)(num116 * (float)num119));
					}
				}
				bool flag17 = true;
				while (flag17)
				{
					float num120 = 0.85f;
					float num121 = (float)Math.Sqrt((double)(num116 * num116 + num117 * num117));
					float num122 = num121;
					if ((double)num121 < (double)Main.chain40Texture.Height * 1.5)
					{
						flag17 = false;
					}
					else if (float.IsNaN(num121))
					{
						flag17 = false;
					}
					else
					{
						num121 = (float)Main.chain40Texture.Height * num120 / num121;
						num116 *= num121;
						num117 *= num121;
						vector21.X += num116;
						vector21.Y += num117;
						num116 = mountedCenter.X - vector21.X;
						num117 = mountedCenter.Y - vector21.Y;
						if (num122 > (float)(Main.chain40Texture.Height * 2))
						{
							for (int num123 = 0; num123 < 2; num123++)
							{
								float num124 = 0.75f;
								float num125;
								if (num123 == 0)
								{
									num125 = Math.Abs(Main.player[projectile.owner].velocity.X);
								}
								else
								{
									num125 = Math.Abs(Main.player[projectile.owner].velocity.Y);
								}
								if (num125 > 10f)
								{
									num125 = 10f;
								}
								num125 /= 10f;
								num124 *= num125;
								num125 = num122 / 80f;
								if (num125 > 1f)
								{
									num125 = 1f;
								}
								num124 *= num125;
								if (num124 < 0f)
								{
									num124 = 0f;
								}
								if (!float.IsNaN(num124))
								{
									if (num123 == 0)
									{
										if (Main.player[projectile.owner].velocity.X < 0f && projectile.Center.X < mountedCenter.X)
										{
											num117 *= 1f - num124;
										}
										if (Main.player[projectile.owner].velocity.X > 0f && projectile.Center.X > mountedCenter.X)
										{
											num117 *= 1f - num124;
										}
									}
									else
									{
										if (Main.player[projectile.owner].velocity.Y < 0f && projectile.Center.Y < mountedCenter.Y)
										{
											num116 *= 1f - num124;
										}
										if (Main.player[projectile.owner].velocity.Y > 0f && projectile.Center.Y > mountedCenter.Y)
										{
											num116 *= 1f - num124;
										}
									}
								}
							}
						}
						Microsoft.Xna.Framework.Color color21 = Lighting.GetColor((int)vector21.X / 16, (int)(vector21.Y / 16f));
						Main.spriteBatch.Draw(Main.chain40Texture, new Vector2(vector21.X - Main.screenPosition.X, vector21.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain40Texture.Width, Main.chain40Texture.Height)), color21, rotation19, new Vector2((float)Main.chain40Texture.Width * 0.5f, (float)Main.chain40Texture.Height * 0.5f), num120, SpriteEffects.None, 0f);
					}
				}
			}
			else if (projectile.type == 271)
			{
				float num126 = projectile.Center.X;
				float num127 = projectile.Center.Y;
				float num128 = projectile.velocity.X;
				float num129 = projectile.velocity.Y;
				float num130 = (float)Math.Sqrt((double)(num128 * num128 + num129 * num129));
				num130 = 4f / num130;
				if (projectile.ai[0] == 0f)
				{
					num126 -= projectile.velocity.X * num130;
					num127 -= projectile.velocity.Y * num130;
				}
				else
				{
					num126 += projectile.velocity.X * num130;
					num127 += projectile.velocity.Y * num130;
				}
				Vector2 vector22 = new Vector2(num126, num127);
				num128 = mountedCenter.X - vector22.X;
				num129 = mountedCenter.Y - vector22.Y;
				float rotation20 = (float)Math.Atan2((double)num129, (double)num128) - 1.57f;
				if (projectile.alpha == 0)
				{
					int num131 = -1;
					if (projectile.position.X + (float)(projectile.width / 2) < mountedCenter.X)
					{
						num131 = 1;
					}
					if (Main.player[projectile.owner].direction == 1)
					{
						Main.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num129 * (float)num131), (double)(num128 * (float)num131));
					}
					else
					{
						Main.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num129 * (float)num131), (double)(num128 * (float)num131));
					}
				}
				bool flag18 = true;
				while (flag18)
				{
					float num132 = (float)Math.Sqrt((double)(num128 * num128 + num129 * num129));
					if (num132 < 25f)
					{
						flag18 = false;
					}
					else if (float.IsNaN(num132))
					{
						flag18 = false;
					}
					else
					{
						num132 = 12f / num132;
						num128 *= num132;
						num129 *= num132;
						vector22.X += num128;
						vector22.Y += num129;
						num128 = mountedCenter.X - vector22.X;
						num129 = mountedCenter.Y - vector22.Y;
						Microsoft.Xna.Framework.Color color22 = Lighting.GetColor((int)vector22.X / 16, (int)(vector22.Y / 16f));
						Main.spriteBatch.Draw(Main.chain18Texture, new Vector2(vector22.X - Main.screenPosition.X, vector22.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain18Texture.Width, Main.chain18Texture.Height)), color22, rotation20, new Vector2((float)Main.chain18Texture.Width * 0.5f, (float)Main.chain18Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
				}
			}
			else if (projectile.aiStyle == 13)
			{
				float num133 = projectile.position.X + 8f;
				float num134 = projectile.position.Y + 2f;
				float num135 = projectile.velocity.X;
				float num136 = projectile.velocity.Y;
				if (num135 == 0f && num136 == 0f)
				{
					num136 = 0.0001f;
				}
				float num137 = (float)Math.Sqrt((double)(num135 * num135 + num136 * num136));
				num137 = 20f / num137;
				if (projectile.ai[0] == 0f)
				{
					num133 -= projectile.velocity.X * num137;
					num134 -= projectile.velocity.Y * num137;
				}
				else
				{
					num133 += projectile.velocity.X * num137;
					num134 += projectile.velocity.Y * num137;
				}
				Vector2 vector23 = new Vector2(num133, num134);
				num135 = mountedCenter.X - vector23.X;
				num136 = mountedCenter.Y - vector23.Y;
				float rotation21 = (float)Math.Atan2((double)num136, (double)num135) - 1.57f;
				if (projectile.alpha == 0)
				{
					int num138 = -1;
					if (projectile.position.X + (float)(projectile.width / 2) < mountedCenter.X)
					{
						num138 = 1;
					}
					if (Main.player[projectile.owner].direction == 1)
					{
						Main.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num136 * (float)num138), (double)(num135 * (float)num138));
					}
					else
					{
						Main.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num136 * (float)num138), (double)(num135 * (float)num138));
					}
				}
				bool flag19 = true;
				while (flag19)
				{
					float num139 = (float)Math.Sqrt((double)(num135 * num135 + num136 * num136));
					if (num139 < 25f)
					{
						flag19 = false;
					}
					else if (float.IsNaN(num139))
					{
						flag19 = false;
					}
					else
					{
						num139 = 12f / num139;
						num135 *= num139;
						num136 *= num139;
						vector23.X += num135;
						vector23.Y += num136;
						num135 = mountedCenter.X - vector23.X;
						num136 = mountedCenter.Y - vector23.Y;
						Microsoft.Xna.Framework.Color color23 = Lighting.GetColor((int)vector23.X / 16, (int)(vector23.Y / 16f));
						Main.spriteBatch.Draw(Main.chainTexture, new Vector2(vector23.X - Main.screenPosition.X, vector23.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chainTexture.Width, Main.chainTexture.Height)), color23, rotation21, new Vector2((float)Main.chainTexture.Width * 0.5f, (float)Main.chainTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
				}
			}
			else if (projectile.type == 190)
			{
				float x = projectile.position.X + (float)(projectile.width / 2);
				float y = projectile.position.Y + (float)(projectile.height / 2);
				float num140 = projectile.velocity.X;
				float num141 = projectile.velocity.Y;
				Math.Sqrt((double)(num140 * num140 + num141 * num141));
				Vector2 vector24 = new Vector2(x, y);
				num140 = mountedCenter.X - vector24.X;
				num141 = mountedCenter.Y + Main.player[projectile.owner].gfxOffY - vector24.Y;
				Math.Atan2((double)num141, (double)num140);
				if (projectile.alpha == 0)
				{
					int num142 = -1;
					if (projectile.position.X + (float)(projectile.width / 2) < mountedCenter.X)
					{
						num142 = 1;
					}
					if (Main.player[projectile.owner].direction == 1)
					{
						Main.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num141 * (float)num142), (double)(num140 * (float)num142));
					}
					else
					{
						Main.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num141 * (float)num142), (double)(num140 * (float)num142));
					}
				}
			}
			else if (projectile.aiStyle == 15)
			{
				Vector2 vector25 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num143 = mountedCenter.X - vector25.X;
				float num144 = mountedCenter.Y - vector25.Y;
				float rotation22 = (float)Math.Atan2((double)num144, (double)num143) - 1.57f;
				if (projectile.alpha == 0)
				{
					int num145 = -1;
					if (projectile.position.X + (float)(projectile.width / 2) < mountedCenter.X)
					{
						num145 = 1;
					}
					if (Main.player[projectile.owner].direction == 1)
					{
						Main.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num144 * (float)num145), (double)(num143 * (float)num145));
					}
					else
					{
						Main.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num144 * (float)num145), (double)(num143 * (float)num145));
					}
				}
				bool flag20 = true;
				while (flag20)
				{
					float num146 = (float)Math.Sqrt((double)(num143 * num143 + num144 * num144));
					if (num146 < 25f)
					{
						flag20 = false;
					}
					else if (float.IsNaN(num146))
					{
						flag20 = false;
					}
					else
					{
						if (projectile.type == 154 || projectile.type == 247)
						{
							num146 = 18f / num146;
						}
						else
						{
							num146 = 12f / num146;
						}
						num143 *= num146;
						num144 *= num146;
						vector25.X += num143;
						vector25.Y += num144;
						num143 = mountedCenter.X - vector25.X;
						num144 = mountedCenter.Y - vector25.Y;
						Microsoft.Xna.Framework.Color color24 = Lighting.GetColor((int)vector25.X / 16, (int)(vector25.Y / 16f));
						if (projectile.type == 25)
						{
							Main.spriteBatch.Draw(Main.chain2Texture, new Vector2(vector25.X - Main.screenPosition.X, vector25.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain2Texture.Width, Main.chain2Texture.Height)), color24, rotation22, new Vector2((float)Main.chain2Texture.Width * 0.5f, (float)Main.chain2Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
						}
						else if (projectile.type == 35)
						{
							Main.spriteBatch.Draw(Main.chain6Texture, new Vector2(vector25.X - Main.screenPosition.X, vector25.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain6Texture.Width, Main.chain6Texture.Height)), color24, rotation22, new Vector2((float)Main.chain6Texture.Width * 0.5f, (float)Main.chain6Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
						}
						else if (projectile.type == 247)
						{
							Main.spriteBatch.Draw(Main.chain19Texture, new Vector2(vector25.X - Main.screenPosition.X, vector25.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain19Texture.Width, Main.chain19Texture.Height)), color24, rotation22, new Vector2((float)Main.chain19Texture.Width * 0.5f, (float)Main.chain19Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
						}
						else if (projectile.type == 63)
						{
							Main.spriteBatch.Draw(Main.chain7Texture, new Vector2(vector25.X - Main.screenPosition.X, vector25.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain7Texture.Width, Main.chain7Texture.Height)), color24, rotation22, new Vector2((float)Main.chain7Texture.Width * 0.5f, (float)Main.chain7Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
						}
						else if (projectile.type == 154)
						{
							Main.spriteBatch.Draw(Main.chain13Texture, new Vector2(vector25.X - Main.screenPosition.X, vector25.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain13Texture.Width, Main.chain13Texture.Height)), color24, rotation22, new Vector2((float)Main.chain13Texture.Width * 0.5f, (float)Main.chain13Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
						}
						else
						{
							Main.spriteBatch.Draw(Main.chain3Texture, new Vector2(vector25.X - Main.screenPosition.X, vector25.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain3Texture.Width, Main.chain3Texture.Height)), color24, rotation22, new Vector2((float)Main.chain3Texture.Width * 0.5f, (float)Main.chain3Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
						}
					}
				}
			}
			Microsoft.Xna.Framework.Color color25 = Lighting.GetColor((int)((double)projectile.position.X + (double)projectile.width * 0.5) / 16, (int)(((double)projectile.position.Y + (double)projectile.height * 0.5) / 16.0));
			if (projectile.hide && !ProjectileID.Sets.DontAttachHideToAlpha[projectile.type])
			{
				color25 = Lighting.GetColor((int)mountedCenter.X / 16, (int)(mountedCenter.Y / 16f));
			}
			if (projectile.type == 14)
			{
				color25 = Microsoft.Xna.Framework.Color.White;
			}
			int num147 = 0;
			int num148 = 0;
			if (projectile.type == 175)
			{
				num147 = 10;
			}
			if (projectile.type == 392)
			{
				num147 = -2;
			}
			if (projectile.type == 499)
			{
				num147 = 12;
			}
			if (projectile.bobber)
			{
				num147 = 8;
			}
			if (projectile.type == 519)
			{
				num147 = 6;
				num148 -= 6;
			}
			if (projectile.type == 520)
			{
				num147 = 12;
			}
			if (projectile.type == 492)
			{
				num148 -= 4;
				num147 += 5;
			}
			if (projectile.type == 498)
			{
				num147 = 6;
			}
			if (projectile.type == 489)
			{
				num147 = -2;
			}
			if (projectile.type == 486)
			{
				num147 = -6;
			}
			if (projectile.type == 525)
			{
				num147 = 5;
			}
			if (projectile.type == 488)
			{
				num148 -= 8;
			}
			if (projectile.type == 373)
			{
				num148 = -10;
				num147 = 6;
			}
			if (projectile.type == 375)
			{
				num148 = -11;
				num147 = 12;
			}
			if (projectile.type == 423)
			{
				num148 = -5;
			}
			if (projectile.type == 346)
			{
				num147 = 4;
			}
			if (projectile.type == 331)
			{
				num148 = -4;
			}
			if (projectile.type == 254)
			{
				num147 = 3;
			}
			if (projectile.type == 273)
			{
				num148 = 2;
			}
			if (projectile.type == 335)
			{
				num147 = 6;
			}
			if (projectile.type == 162)
			{
				num147 = 1;
				num148 = 1;
			}
			if (projectile.type == 377)
			{
				num147 = -6;
			}
			if (projectile.type == 353)
			{
				num147 = 36;
				num148 = -12;
			}
			if (projectile.type == 324)
			{
				num147 = 22;
				num148 = -6;
			}
			if (projectile.type == 266)
			{
				num147 = 10;
				num148 = -10;
			}
			if (projectile.type == 319)
			{
				num147 = 10;
				num148 = -12;
			}
			if (projectile.type == 315)
			{
				num147 = -13;
				num148 = -6;
			}
			if (projectile.type == 313 && projectile.height != 54)
			{
				num148 = -12;
				num147 = 20;
			}
			if (projectile.type == 314)
			{
				num148 = -8;
				num147 = 0;
			}
			if (projectile.type == 269)
			{
				num147 = 18;
				num148 = -14;
			}
			if (projectile.type == 268)
			{
				num147 = 22;
				num148 = -2;
			}
			if (projectile.type == 18)
			{
				num147 = 3;
				num148 = 3;
			}
			if (projectile.type == 16)
			{
				num147 = 6;
			}
			if (projectile.type == 17 || projectile.type == 31)
			{
				num147 = 2;
			}
			if (projectile.type == 25 || projectile.type == 26 || projectile.type == 35 || projectile.type == 63 || projectile.type == 154)
			{
				num147 = 6;
				num148 -= 6;
			}
			if (projectile.type == 28 || projectile.type == 37 || projectile.type == 75)
			{
				num147 = 8;
			}
			if (projectile.type == 29 || projectile.type == 470 || projectile.type == 637)
			{
				num147 = 11;
			}
			if (projectile.type == 43)
			{
				num147 = 4;
			}
			if (projectile.type == 208)
			{
				num147 = 2;
				num148 -= 12;
			}
			if (projectile.type == 209)
			{
				num147 = 4;
				num148 -= 8;
			}
			if (projectile.type == 210)
			{
				num147 = 2;
				num148 -= 22;
			}
			if (projectile.type == 251)
			{
				num147 = 18;
				num148 -= 10;
			}
			if (projectile.type == 163 || projectile.type == 310)
			{
				num147 = 10;
			}
			if (projectile.type == 69 || projectile.type == 70)
			{
				num147 = 4;
				num148 = 4;
			}
			float num149 = (float)(Main.projectileTexture[projectile.type].Width - projectile.width) * 0.5f + (float)projectile.width * 0.5f;
			if (projectile.type == 50 || projectile.type == 53 || projectile.type == 515)
			{
				num148 = -8;
			}
			if (projectile.type == 473)
			{
				num148 = -6;
				num147 = 2;
			}
			if (projectile.type == 72 || projectile.type == 86 || projectile.type == 87)
			{
				num148 = -16;
				num147 = 8;
			}
			if (projectile.type == 74)
			{
				num148 = -6;
			}
			if (projectile.type == 99)
			{
				num147 = 1;
			}
			if (projectile.type == 655)
			{
				num147 = 1;
			}
			if (projectile.type == 111)
			{
				num147 = 18;
				num148 = -16;
			}
			if (projectile.type == 334)
			{
				num148 = -18;
				num147 = 8;
			}
			if (projectile.type == 200)
			{
				num147 = 12;
				num148 = -12;
			}
			if (projectile.type == 211)
			{
				num147 = 14;
				num148 = 0;
			}
			if (projectile.type == 236)
			{
				num147 = 30;
				num148 = -14;
			}
			if (projectile.type >= 191 && projectile.type <= 194)
			{
				num147 = 26;
				if (projectile.direction == 1)
				{
					num148 = -10;
				}
				else
				{
					num148 = -22;
				}
			}
			if (projectile.type >= 390 && projectile.type <= 392)
			{
				num148 = 4 * projectile.direction;
			}
			if (projectile.type == 112)
			{
				num147 = 12;
			}
			int arg_536F_0 = projectile.type;
			if (projectile.type == 517 || projectile.type == 681)
			{
				num147 = 6;
			}
			if (projectile.type == 516)
			{
				num147 = 6;
			}
			if (projectile.type == 127)
			{
				num147 = 8;
			}
			if (projectile.type == 155)
			{
				num147 = 3;
				num148 = 3;
			}
			if (projectile.type == 397)
			{
				num149 -= 1f;
				num147 = -2;
				num148 = -2;
			}
			if (projectile.type == 398)
			{
				num147 = 8;
			}
			SpriteEffects spriteEffects = SpriteEffects.None;
			if (projectile.spriteDirection == -1)
			{
				spriteEffects = SpriteEffects.FlipHorizontally;
			}
			if (projectile.type == 681 && projectile.velocity.X > 0f)
			{
				spriteEffects ^= SpriteEffects.FlipHorizontally;
			}
			if (projectile.type == 221)
			{
				for (int num150 = 1; num150 < 10; num150++)
				{
					float num151 = projectile.velocity.X * (float)num150 * 0.5f;
					float num152 = projectile.velocity.Y * (float)num150 * 0.5f;
					Microsoft.Xna.Framework.Color alpha = projectile.GetAlpha(color25);
					float num153 = 0f;
					if (num150 == 1)
					{
						num153 = 0.9f;
					}
					if (num150 == 2)
					{
						num153 = 0.8f;
					}
					if (num150 == 3)
					{
						num153 = 0.7f;
					}
					if (num150 == 4)
					{
						num153 = 0.6f;
					}
					if (num150 == 5)
					{
						num153 = 0.5f;
					}
					if (num150 == 6)
					{
						num153 = 0.4f;
					}
					if (num150 == 7)
					{
						num153 = 0.3f;
					}
					if (num150 == 8)
					{
						num153 = 0.2f;
					}
					if (num150 == 9)
					{
						num153 = 0.1f;
					}
					alpha.R = (byte)((float)alpha.R * num153);
					alpha.G = (byte)((float)alpha.G * num153);
					alpha.B = (byte)((float)alpha.B * num153);
					alpha.A = (byte)((float)alpha.A * num153);
					int num154 = Main.projectileTexture[projectile.type].Height / Main.projFrames[projectile.type];
					int y2 = num154 * projectile.frame;
					Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], new Vector2(projectile.position.X - Main.screenPosition.X + num149 + (float)num148 - num151, projectile.position.Y - Main.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY - num152), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y2, Main.projectileTexture[projectile.type].Width, num154)), alpha, projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), projectile.scale, spriteEffects, 0f);
				}
			}
			if (projectile.type == 408 || projectile.type == 435 || projectile.type == 436 || projectile.type == 438 || projectile.type == 452 || projectile.type == 454 || projectile.type == 459 || projectile.type == 462 || projectile.type == 503 || projectile.type == 532 || projectile.type == 533 || projectile.type == 573 || projectile.type == 582 || projectile.type == 585 || projectile.type == 592 || projectile.type == 601 || projectile.type == 636 || projectile.type == 638 || projectile.type == 640 || projectile.type == 639 || projectile.type == 424 || projectile.type == 425 || projectile.type == 426 || projectile.type == 660 || projectile.type == 661 || projectile.type == 671 || projectile.type == 664 || projectile.type == 666 || projectile.type == 668 || projectile.type == 675 || projectile.type == 680 || projectile.type == 682 || projectile.type == 684 || projectile.type == 686 || projectile.type == 700 || projectile.type == 706 || projectile.type == 709 || projectile.type == 710 || projectile.type == 711)
			{
				Texture2D texture2D3 = Main.projectileTexture[projectile.type];
				int num155 = Main.projectileTexture[projectile.type].Height / Main.projFrames[projectile.type];
				int y3 = num155 * projectile.frame;
				Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(0, y3, texture2D3.Width, num155);
				Vector2 origin2 = rectangle.Size() / 2f;
				if (projectile.type == 503)
				{
					origin2.Y = 70f;
				}
				if (projectile.type == 686 || projectile.type == 711)
				{
					origin2.Y = (float)(rectangle.Height - 70);
				}
				if (projectile.type == 438)
				{
				}
				if (projectile.type == 452)
				{
				}
				if (projectile.type == 408)
				{
				}
				if (projectile.type == 636)
				{
					origin2.Y = 10f;
				}
				if (projectile.type == 638)
				{
					origin2.Y = 2f;
				}
				if (projectile.type == 640 || projectile.type == 639 || projectile.type == 710)
				{
					origin2.Y = 5f;
				}
				if (projectile.type == 700)
				{
					origin2.X = (float)((projectile.spriteDirection == 1) ? (rectangle.Width - 20) : 20);
				}
				int num156 = 8;
				int num157 = 2;
				int num158 = 1;
				float value4 = 1f;
				float num159 = 0f;
				if (projectile.type == 503)
				{
					num156 = 9;
					num157 = 3;
					value4 = 0.5f;
				}
				else if (projectile.type == 686 || projectile.type == 711)
				{
					num158 = 19;
					num156 = 0;
					num157 = -3;
					value4 = 0.5f;
				}
				else if (projectile.type == 671)
				{
					num158 = 5;
					num156 = 0;
					num157 = -1;
					value4 = 2.6f;
				}
				else if (projectile.type == 700)
				{
					num156 = 5;
					num157 = 1;
					value4 = 2.6f;
				}
				else if (projectile.type == 664 || projectile.type == 666 || projectile.type == 668)
				{
					num156 = 8;
					num157 = 2;
					value4 = 0.4f;
				}
				else if (projectile.type == 582)
				{
					num156 = 10;
					num157 = 2;
					value4 = 0.7f;
					num159 = 0.2f;
				}
				else if (projectile.type == 675)
				{
					num156 = 5;
					num157 = 1;
					value4 = 0.4f;
				}
				else if (projectile.type == 638)
				{
					num156 = 5;
					num157 = 1;
					value4 = 1f;
				}
				else if (projectile.type == 660)
				{
					num156 = 3;
					num157 = 1;
					value4 = 8f;
					rectangle = new Microsoft.Xna.Framework.Rectangle(38 * projectile.frame, 0, 38, 38);
					origin2 = rectangle.Size() / 2f;
				}
				else if (projectile.type == 684)
				{
					num156 = 8;
					num157 = 1;
					value4 = 0.75f;
				}
				else if (projectile.type == 639)
				{
					num156 = 10;
					num157 = 1;
					value4 = 1f;
				}
				else if (projectile.type == 710)
				{
					num158 = 9;
					num156 = 0;
					num157 = -2;
					value4 = 0.5f;
				}
				else if (projectile.type == 640)
				{
					num156 = 20;
					num157 = 1;
					value4 = 1f;
				}
				else if (projectile.type == 436)
				{
					num157 = 2;
					value4 = 0.5f;
				}
				else if (projectile.type == 424 || projectile.type == 425 || projectile.type == 426)
				{
					num156 = 10;
					num157 = 2;
					value4 = 0.6f;
				}
				else if (projectile.type == 438)
				{
					num156 = 10;
					num157 = 2;
					value4 = 1f;
				}
				else if (projectile.type == 452)
				{
					num156 = 10;
					num157 = 3;
					value4 = 0.5f;
				}
				else if (projectile.type == 454)
				{
					num156 = 5;
					num157 = 1;
					value4 = 0.2f;
				}
				else if (projectile.type == 462)
				{
					num156 = 7;
					num157 = 1;
					value4 = 0.2f;
				}
				else if (projectile.type == 661)
				{
					num156 = 0;
					num157 = 1;
					value4 = 0.5f;
				}
				else if (projectile.type == 706)
				{
					num158 = 9;
					num156 = 0;
					num157 = -2;
					value4 = 0.5f;
				}
				else if (projectile.type == 585)
				{
					num156 = 7;
					num157 = 1;
					value4 = 0.2f;
				}
				else if (projectile.type == 459)
				{
					num156 = (int)(projectile.scale * 8f);
					num157 = num156 / 4;
					if (num157 < 1)
					{
						num157 = 1;
					}
					value4 = 0.3f;
				}
				else if (projectile.type == 709)
				{
					num156 = 8;
					num157 = num156 / 4;
					if (num157 < 1)
					{
						num157 = 1;
					}
					value4 = 0.5f;
				}
				else if (projectile.type == 532)
				{
					num156 = 10;
					num157 = 1;
					value4 = 0.7f;
					num159 = 0.2f;
				}
				else if (projectile.type == 592)
				{
					num156 = 10;
					num157 = 2;
					value4 = 1f;
				}
				else if (projectile.type == 601)
				{
					num156 = 8;
					num157 = 1;
					value4 = 0.3f;
				}
				else if (projectile.type == 636)
				{
					num156 = 20;
					num157 = 3;
					value4 = 0.5f;
				}
				else if (projectile.type == 680)
				{
					num156 = 9;
					num157 = 3;
					value4 = 0.5f;
				}
				else if (projectile.type == 533)
				{
					if (projectile.ai[0] >= 6f && projectile.ai[0] <= 8f)
					{
						num156 = ((projectile.ai[0] == 6f) ? 8 : 4);
						num157 = 1;
						if (projectile.ai[0] != 7f)
						{
							num159 = 0.2f;
						}
					}
					else
					{
						num157 = (num156 = 0);
					}
				}
				int num160 = num158;
				while ((num157 > 0 && num160 < num156) || (num157 < 0 && num160 > num156))
				{
					Microsoft.Xna.Framework.Color color26 = color25;
					if (projectile.type == 408 || projectile.type == 435 || projectile.type == 682)
					{
						color26 = Microsoft.Xna.Framework.Color.Lerp(color26, Microsoft.Xna.Framework.Color.Blue, 0.5f);
					}
					else if (projectile.type == 436)
					{
						color26 = Microsoft.Xna.Framework.Color.Lerp(color26, Microsoft.Xna.Framework.Color.LimeGreen, 0.5f);
					}
					else if (projectile.type >= 424 && projectile.type <= 426)
					{
						color26 = Microsoft.Xna.Framework.Color.Lerp(color26, Microsoft.Xna.Framework.Color.Red, 0.5f);
					}
					else if (projectile.type == 640 || projectile.type == 639)
					{
						color26.A = 127;
					}
					else if (projectile.type == 671)
					{
						color26 = Microsoft.Xna.Framework.Color.Lerp(color26, Microsoft.Xna.Framework.Color.Purple, (float)num160 / (float)num156);
					}
					color26 = projectile.GetAlpha(color26);
					if (projectile.type == 438)
					{
						color26.G /= (byte)num160;
						color26.B /= (byte)num160;
						goto IL_64BA;
					}
					if (projectile.type == 682)
					{
						color26.G /= (byte)num160;
						goto IL_64BA;
					}
					if (projectile.type == 686)
					{
						if (!(projectile.oldPos[num160] == Vector2.Zero))
						{
							float num161 = (float)num160 / (float)num158;
							if (num161 < 0.5f)
							{
								color26 = Microsoft.Xna.Framework.Color.Lerp(color26, Microsoft.Xna.Framework.Color.Purple, Utils.InverseLerp(0f, 0.5f, num161, false));
								goto IL_64BA;
							}
							color26 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Purple, Microsoft.Xna.Framework.Color.Black, Utils.InverseLerp(0.5f, 1f, num161, false));
							goto IL_64BA;
						}
					}
					else if (projectile.type == 711)
					{
						if (!(projectile.oldPos[num160] == Vector2.Zero))
						{
							float num162 = (float)num160 / (float)num158;
							if (num162 < 0.5f)
							{
								color26 = Microsoft.Xna.Framework.Color.Lerp(color26, new Microsoft.Xna.Framework.Color(128, 0, 255, 180), Utils.InverseLerp(0f, 0.5f, num162, false));
								goto IL_64BA;
							}
							color26 = Microsoft.Xna.Framework.Color.Lerp(new Microsoft.Xna.Framework.Color(128, 0, 255, 180), Microsoft.Xna.Framework.Color.Black, Utils.InverseLerp(0.5f, 1f, num162, false));
							goto IL_64BA;
						}
					}
					else
					{
						if (projectile.type == 684)
						{
							if (num160 == 1)
							{
								color26.B /= 2;
								color26.G /= 2;
								color26.A /= 2;
							}
							color26.B /= (byte)num160;
							color26.G /= (byte)num160;
							color26.A /= (byte)num160;
							goto IL_64BA;
						}
						if (projectile.type == 706 || projectile.type == 710)
						{
							color26.B /= (byte)num160;
							color26.G /= (byte)num160;
							color26.A /= (byte)num160;
							goto IL_64BA;
						}
						if (projectile.type == 592)
						{
							color26.R /= (byte)num160;
							color26.G /= (byte)num160;
							goto IL_64BA;
						}
						if (projectile.type == 640)
						{
							color26.R /= (byte)num160;
							color26.A /= (byte)num160;
							goto IL_64BA;
						}
						if (projectile.type >= 424 && projectile.type <= 426)
						{
							color26.B /= (byte)num160;
							color26.G /= (byte)num160;
							color26.A /= (byte)num160;
							goto IL_64BA;
						}
						goto IL_64BA;
					}
					IL_660E:
					num160 += num157;
					continue;
					IL_64BA:
					float num163 = (float)(num156 - num160);
					if (num157 < 0)
					{
						num163 = (float)(num158 - num160);
					}
					color26 *= num163 / ((float)ProjectileID.Sets.TrailCacheLength[projectile.type] * 1.5f);
					Vector2 value5 = projectile.oldPos[num160];
					float num164 = projectile.rotation;
					SpriteEffects effects = spriteEffects;
					if (ProjectileID.Sets.TrailingMode[projectile.type] == 2)
					{
						num164 = projectile.oldRot[num160];
						effects = ((projectile.oldSpriteDirection[num160] == -1) ? SpriteEffects.FlipHorizontally : SpriteEffects.None);
					}
					Main.spriteBatch.Draw(texture2D3, value5 + projectile.Size / 2f - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(rectangle), color26, num164 + projectile.rotation * num159 * (float)(num160 - 1) * (float)(-(float)spriteEffects.HasFlag(SpriteEffects.FlipHorizontally).ToDirectionInt()), origin2, MathHelper.Lerp(projectile.scale, value4, (float)num160 / 15f), effects, 0f);
					goto IL_660E;
				}
				if (projectile.type == 661)
				{
					Microsoft.Xna.Framework.Color color27 = new Microsoft.Xna.Framework.Color(120, 40, 222, 120);
					for (int num165 = 0; num165 < 4; num165++)
					{
						Main.spriteBatch.Draw(Main.extraTexture[75], projectile.Center - Main.screenPosition + new Vector2(0f, projectile.gfxOffY) + projectile.rotation.ToRotationVector2().RotatedBy((double)(1.57079637f * (float)num165), default(Vector2)) * 4f, new Microsoft.Xna.Framework.Rectangle?(rectangle), color27, projectile.rotation, origin2, projectile.scale, spriteEffects, 0f);
					}
				}
				else if (projectile.type == 684)
				{
					float x2 = (projectile.localAI[0] * 6.28318548f / 30f).ToRotationVector2().X;
					Microsoft.Xna.Framework.Color color28 = new Microsoft.Xna.Framework.Color(220, 40, 30, 40);
					color28 *= 0.75f + 0.25f * x2;
					for (int num166 = 0; num166 < 8; num166++)
					{
						Main.spriteBatch.Draw(texture2D3, projectile.Center - Main.screenPosition + new Vector2(0f, projectile.gfxOffY) + projectile.rotation.ToRotationVector2().RotatedBy((double)(0.7853982f * (float)num166), default(Vector2)) * (4f + 1f * x2), new Microsoft.Xna.Framework.Rectangle?(rectangle), color28, projectile.rotation, origin2, projectile.scale, spriteEffects, 0f);
					}
				}
				Microsoft.Xna.Framework.Color color29 = projectile.GetAlpha(color25);
				if (projectile.type == 640)
				{
					color29 = Microsoft.Xna.Framework.Color.Transparent;
				}
				if (projectile.type == 684)
				{
					color29.A = 127;
				}
				Main.spriteBatch.Draw(texture2D3, projectile.Center - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(rectangle), color29, projectile.rotation, origin2, projectile.scale, spriteEffects, 0f);
				if (projectile.type == 503)
				{
					Main.spriteBatch.Draw(Main.extraTexture[36], projectile.Center - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(rectangle), Microsoft.Xna.Framework.Color.White, projectile.localAI[0], origin2, projectile.scale, spriteEffects, 0f);
				}
				else if (projectile.type == 533)
				{
					Main.spriteBatch.Draw(Main.glowMaskTexture[128], projectile.Center - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(rectangle), Microsoft.Xna.Framework.Color.White * 0.3f, projectile.rotation, origin2, projectile.scale, spriteEffects, 0f);
				}
				else if (projectile.type == 601)
				{
					Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
					white.A = 0;
					Main.spriteBatch.Draw(texture2D3, projectile.Center - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(rectangle), white, projectile.rotation, origin2, projectile.scale * 0.7f, spriteEffects, 0f);
				}
			}
			else if (projectile.type == 672)
			{
				Vector2 position = projectile.Center - Main.screenPosition;
				if (projectile.localAI[1] == 0f)
				{
					position.Y += 60f;
					float num167 = projectile.localAI[0] / 120f;
					for (int num168 = 0; num168 < 4; num168++)
					{
						float num169 = num167 * 2f - (float)num168 / 3f;
						num169 = MathHelper.Clamp(num169, 0f, 1f);
						float num170 = 1f - MathHelper.Clamp((num167 - 0.8f) / 0.2f, 0f, 1f);
						Main.spriteBatch.Draw(Main.magicPixel, position, null, new Microsoft.Xna.Framework.Color(0.4f, 0.17f, 0.4f, 0f) * (num169 * num170) * 1.3f, 0f, new Vector2((float)Main.magicPixel.Width / 2f, (float)Main.magicPixel.Height), new Vector2((float)Math.Sqrt((double)num169) * 100f, num169 * 2f), SpriteEffects.None, 0f);
					}
				}
				else if (projectile.localAI[1] == 1f)
				{
					float arg_6BE1_0 = projectile.localAI[0] / 300f;
					float scale = Math.Min(1f, projectile.localAI[0] / 30f);
					int num171 = (int)(Main.GlobalTime * 10f) % 8;
					this.DrawElderEye(Main.spriteBatch, projectile.Center, 1f, 1f, num171, Microsoft.Xna.Framework.Color.White * scale);
					this.DrawElderEye(Main.spriteBatch, projectile.Center, 1f, 1f, (num171 + 1) % 8, new Microsoft.Xna.Framework.Color(0.2f, 0.2f, 0.2f, 0f) * scale);
				}
				else if (projectile.localAI[1] == 2f)
				{
					int num172 = (int)(Main.GlobalTime * 10f) % 8;
					this.DrawElderEye(Main.spriteBatch, projectile.Center, 1f, 1f, num172, Microsoft.Xna.Framework.Color.White);
					this.DrawElderEye(Main.spriteBatch, projectile.Center, 1f, 1f, (num172 + 1) % 8, new Microsoft.Xna.Framework.Color(0.2f, 0.2f, 0.2f, 0f));
				}
			}
			else if (projectile.type != 713)
			{
				if (projectile.type == 674)
				{
					Texture2D texture = Main.extraTexture[60];
					Vector2 origin3 = new Vector2(66f, 86f);
					Vector2 position2 = projectile.Center - Main.screenPosition;
					Vector2 vector26 = Vector2.One;
					vector26 = new Vector2(4f, 1f) * 1.4f;
					Microsoft.Xna.Framework.Color color30 = new Microsoft.Xna.Framework.Color(115, 0, 155, 0);
					Microsoft.Xna.Framework.Color color31 = new Microsoft.Xna.Framework.Color(255, 180, 255, 0);
					float num173 = 0f;
					if (projectile.ai[0] < 30f)
					{
						num173 = Utils.InverseLerp(0f, 30f, projectile.ai[0], true);
					}
					else if (projectile.ai[0] < 40f)
					{
						num173 = 1f + Utils.InverseLerp(30f, 40f, projectile.ai[0], true);
					}
					Vector2 value6 = new Vector2(1f, 1f);
					Vector2 value7 = new Vector2(0.8f, 2f);
					if (num173 < 1f)
					{
						value6.X *= num173;
					}
					vector26 *= num173;
					if (num173 < 1f)
					{
						color30 *= num173;
						color31 *= num173;
					}
					if (num173 > 1.5f)
					{
						float scale2 = Utils.InverseLerp(2f, 1.5f, num173, true);
						color30 *= scale2;
						color31 *= scale2;
					}
					float scale3 = 0.42f;
					color30 *= scale3;
					color31 *= scale3;
					Main.spriteBatch.Draw(texture, position2, null, color30, 0f, origin3, vector26 * value6, SpriteEffects.None, 0f);
					Main.spriteBatch.Draw(texture, position2, null, color31, 0f, origin3, vector26 * value7, SpriteEffects.None, 0f);
					Main.spriteBatch.Draw(Main.extraTexture[59], position2, null, color30, 0f, origin3, vector26 * value6 * new Vector2(1f, 0.3f), SpriteEffects.None, 0f);
				}
				else if (projectile.type == 440 || projectile.type == 449 || projectile.type == 606)
				{
					Microsoft.Xna.Framework.Rectangle value8 = new Microsoft.Xna.Framework.Rectangle((int)Main.screenPosition.X - 500, (int)Main.screenPosition.Y - 500, Main.screenWidth + 1000, Main.screenHeight + 1000);
					if (projectile.getRect().Intersects(value8))
					{
						Vector2 value9 = new Vector2(projectile.position.X - Main.screenPosition.X + num149 + (float)num148, projectile.position.Y - Main.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY);
						float num174 = 100f;
						float scaleFactor = 3f;
						if (projectile.type == 606)
						{
							num174 = 150f;
							scaleFactor = 3f;
						}
						if (projectile.ai[1] == 1f)
						{
							num174 = (float)((int)projectile.localAI[0]);
						}
						for (int num175 = 1; num175 <= (int)projectile.localAI[0]; num175++)
						{
							Vector2 value10 = Vector2.Normalize(projectile.velocity) * (float)num175 * scaleFactor;
							Microsoft.Xna.Framework.Color color32 = projectile.GetAlpha(color25);
							color32 *= (num174 - (float)num175) / num174;
							color32.A = 0;
							Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], value9 - value10, null, color32, projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), projectile.scale, spriteEffects, 0f);
						}
					}
				}
				else if (projectile.type == 687)
				{
					Vector2 value11 = projectile.Center;
					value11 -= Main.screenPosition;
					float num176 = 40f;
					float num177 = num176 * 2f;
					float num178 = (float)projectile.frameCounter / num176;
					Texture2D texture2D4 = Main.projectileTexture[projectile.type];
					Microsoft.Xna.Framework.Color color33 = Microsoft.Xna.Framework.Color.Transparent;
					Microsoft.Xna.Framework.Color color34 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
					Microsoft.Xna.Framework.Color color35 = new Microsoft.Xna.Framework.Color(180, 30, 30, 200);
					Microsoft.Xna.Framework.Color color36 = new Microsoft.Xna.Framework.Color(0, 0, 0, 30);
					ulong num179 = 1uL;
					for (float num180 = 0f; num180 < 15f; num180 += 1f)
					{
						float num181 = Utils.RandomFloat(ref num179) * 0.25f - 0.125f;
						Vector2 value12 = (projectile.rotation + num181).ToRotationVector2();
						Vector2 value13 = value11 + value12 * 400f;
						float num182 = num178 + num180 * 0.06666667f;
						int num183 = (int)(num182 / 0.06666667f);
						num182 %= 1f;
						if ((num182 <= num178 % 1f || (float)projectile.frameCounter >= num176) && (num182 >= num178 % 1f || (float)projectile.frameCounter < num177 - num176))
						{
							if (num182 < 0.1f)
							{
								color33 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Transparent, color34, Utils.InverseLerp(0f, 0.1f, num182, true));
							}
							else if (num182 < 0.35f)
							{
								color33 = color34;
							}
							else if (num182 < 0.7f)
							{
								color33 = Microsoft.Xna.Framework.Color.Lerp(color34, color35, Utils.InverseLerp(0.35f, 0.7f, num182, true));
							}
							else if (num182 < 0.9f)
							{
								color33 = Microsoft.Xna.Framework.Color.Lerp(color35, color36, Utils.InverseLerp(0.7f, 0.9f, num182, true));
							}
							else if (num182 < 1f)
							{
								color33 = Microsoft.Xna.Framework.Color.Lerp(color36, Microsoft.Xna.Framework.Color.Transparent, Utils.InverseLerp(0.9f, 1f, num182, true));
							}
							else
							{
								color33 = Microsoft.Xna.Framework.Color.Transparent;
							}
							float num184 = 0.9f + num182 * 0.8f;
							num184 *= num184;
							num184 *= 0.8f;
							Vector2 position3 = Vector2.SmoothStep(value11, value13, num182);
							Microsoft.Xna.Framework.Rectangle rectangle2 = texture2D4.Frame(1, 7, 0, (int)(num182 * 7f));
							Main.spriteBatch.Draw(texture2D4, position3, new Microsoft.Xna.Framework.Rectangle?(rectangle2), color33, projectile.rotation + 6.28318548f * (num182 + Main.GlobalTime * 1.2f) * 0.2f + (float)num183 * 1.2566371f, rectangle2.Size() / 2f, num184, SpriteEffects.None, 0f);
						}
					}
				}
				else if (projectile.type == 651)
				{
					Player player = Main.player[projectile.owner];
					Microsoft.Xna.Framework.Point point = new Vector2(projectile.ai[0], projectile.ai[1]).ToPoint();
					Microsoft.Xna.Framework.Point point2 = projectile.Center.ToTileCoordinates();
					Microsoft.Xna.Framework.Color color37 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
					Microsoft.Xna.Framework.Color color38 = new Microsoft.Xna.Framework.Color(127, 127, 127, 0);
					int num185 = 1;
					float num186 = 0f;
					WiresUI.Settings.MultiToolMode toolMode = WiresUI.Settings.ToolMode;
					bool flag21 = toolMode.HasFlag(WiresUI.Settings.MultiToolMode.Actuator);
					if (toolMode.HasFlag(WiresUI.Settings.MultiToolMode.Red))
					{
						num186 += 1f;
						color38 = Microsoft.Xna.Framework.Color.Lerp(color38, Microsoft.Xna.Framework.Color.Red, 1f / num186);
					}
					if (toolMode.HasFlag(WiresUI.Settings.MultiToolMode.Blue))
					{
						num186 += 1f;
						color38 = Microsoft.Xna.Framework.Color.Lerp(color38, Microsoft.Xna.Framework.Color.Blue, 1f / num186);
					}
					if (toolMode.HasFlag(WiresUI.Settings.MultiToolMode.Green))
					{
						num186 += 1f;
						color38 = Microsoft.Xna.Framework.Color.Lerp(color38, new Microsoft.Xna.Framework.Color(0, 255, 0), 1f / num186);
					}
					if (toolMode.HasFlag(WiresUI.Settings.MultiToolMode.Yellow))
					{
						num186 += 1f;
						color38 = Microsoft.Xna.Framework.Color.Lerp(color38, new Microsoft.Xna.Framework.Color(255, 255, 0), 1f / num186);
					}
					if (toolMode.HasFlag(WiresUI.Settings.MultiToolMode.Cutter))
					{
						color37 = new Microsoft.Xna.Framework.Color(50, 50, 50, 255);
					}
					color38.A = 0;
					if (point == point2)
					{
						Vector2 position4 = point2.ToVector2() * 16f - Main.screenPosition;
						Microsoft.Xna.Framework.Rectangle value14 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
						if (flag21)
						{
							Main.spriteBatch.Draw(Main.wireUITexture[11], position4, null, color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						}
						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position4, new Microsoft.Xna.Framework.Rectangle?(value14), color38, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						value14.Y = 18;
						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position4, new Microsoft.Xna.Framework.Rectangle?(value14), color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
					}
					else if (point.X == point2.X)
					{
						int num187 = point2.Y - point.Y;
						int num188 = Math.Sign(num187);
						Vector2 position5 = point.ToVector2() * 16f - Main.screenPosition;
						Microsoft.Xna.Framework.Rectangle value15 = new Microsoft.Xna.Framework.Rectangle((num187 * num185 > 0) ? 72 : 18, 0, 16, 16);
						if (flag21)
						{
							Main.spriteBatch.Draw(Main.wireUITexture[11], position5, null, color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						}
						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position5, new Microsoft.Xna.Framework.Rectangle?(value15), color38, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						value15.Y = 18;
						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position5, new Microsoft.Xna.Framework.Rectangle?(value15), color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						for (int num189 = point.Y + num188; num189 != point2.Y; num189 += num188)
						{
							position5 = new Vector2((float)(point.X * 16), (float)(num189 * 16)) - Main.screenPosition;
							value15.Y = 0;
							value15.X = 90;
							if (flag21)
							{
								Main.spriteBatch.Draw(Main.wireUITexture[11], position5, null, color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
							}
							Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position5, new Microsoft.Xna.Framework.Rectangle?(value15), color38, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
							value15.Y = 18;
							Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position5, new Microsoft.Xna.Framework.Rectangle?(value15), color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						}
						position5 = point2.ToVector2() * 16f - Main.screenPosition;
						value15 = new Microsoft.Xna.Framework.Rectangle((num187 * num185 > 0) ? 18 : 72, 0, 16, 16);
						if (flag21)
						{
							Main.spriteBatch.Draw(Main.wireUITexture[11], position5, null, color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						}
						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position5, new Microsoft.Xna.Framework.Rectangle?(value15), color38, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						value15.Y = 18;
						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position5, new Microsoft.Xna.Framework.Rectangle?(value15), color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
					}
					else if (point.Y == point2.Y)
					{
						int num190 = point2.X - point.X;
						int num191 = Math.Sign(num190);
						Vector2 position6 = point.ToVector2() * 16f - Main.screenPosition;
						Microsoft.Xna.Framework.Rectangle value16 = new Microsoft.Xna.Framework.Rectangle((num190 > 0) ? 36 : 144, 0, 16, 16);
						if (flag21)
						{
							Main.spriteBatch.Draw(Main.wireUITexture[11], position6, null, color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						}
						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position6, new Microsoft.Xna.Framework.Rectangle?(value16), color38, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						value16.Y = 18;
						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position6, new Microsoft.Xna.Framework.Rectangle?(value16), color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						for (int num192 = point.X + num191; num192 != point2.X; num192 += num191)
						{
							position6 = new Vector2((float)(num192 * 16), (float)(point.Y * 16)) - Main.screenPosition;
							value16.Y = 0;
							value16.X = 180;
							if (flag21)
							{
								Main.spriteBatch.Draw(Main.wireUITexture[11], position6, null, color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
							}
							Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position6, new Microsoft.Xna.Framework.Rectangle?(value16), color38, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
							value16.Y = 18;
							Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position6, new Microsoft.Xna.Framework.Rectangle?(value16), color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						}
						position6 = point2.ToVector2() * 16f - Main.screenPosition;
						value16 = new Microsoft.Xna.Framework.Rectangle((num190 > 0) ? 144 : 36, 0, 16, 16);
						if (flag21)
						{
							Main.spriteBatch.Draw(Main.wireUITexture[11], position6, null, color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						}
						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position6, new Microsoft.Xna.Framework.Rectangle?(value16), color38, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						value16.Y = 18;
						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position6, new Microsoft.Xna.Framework.Rectangle?(value16), color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
					}
					else
					{
						Math.Abs(point.X - point2.X);
						Math.Abs(point.Y - point2.Y);
						int num193 = Math.Sign(point2.X - point.X);
						int num194 = Math.Sign(point2.Y - point.Y);
						Microsoft.Xna.Framework.Point p = default(Microsoft.Xna.Framework.Point);
						bool flag22 = false;
						bool flag23 = player.direction == 1;
						int num195;
						int num196;
						int num197;
						if (flag23)
						{
							p.X = point.X;
							num195 = point.Y;
							num196 = point2.Y;
							num197 = num194;
						}
						else
						{
							p.Y = point.Y;
							num195 = point.X;
							num196 = point2.X;
							num197 = num193;
						}
						Vector2 position7 = point.ToVector2() * 16f - Main.screenPosition;
						Microsoft.Xna.Framework.Rectangle value17 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
						if (!flag23)
						{
							value17.X = ((num197 > 0) ? 36 : 144);
						}
						else
						{
							value17.X = ((num197 > 0) ? 72 : 18);
						}
						if (flag21)
						{
							Main.spriteBatch.Draw(Main.wireUITexture[11], position7, null, color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						}
						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position7, new Microsoft.Xna.Framework.Rectangle?(value17), color38, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						value17.Y = 18;
						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position7, new Microsoft.Xna.Framework.Rectangle?(value17), color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						int num198 = num195 + num197;
						while (num198 != num196 && !flag22)
						{
							if (flag23)
							{
								p.Y = num198;
							}
							else
							{
								p.X = num198;
							}
							if (WorldGen.InWorld(p.X, p.Y, 1))
							{
								Tile tile = Main.tile[p.X, p.Y];
								if (tile != null)
								{
									position7 = p.ToVector2() * 16f - Main.screenPosition;
									value17.Y = 0;
									if (!flag23)
									{
										value17.X = 180;
									}
									else
									{
										value17.X = 90;
									}
									if (flag21)
									{
										Main.spriteBatch.Draw(Main.wireUITexture[11], position7, null, color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
									}
									Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position7, new Microsoft.Xna.Framework.Rectangle?(value17), color38, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
									value17.Y = 18;
									Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position7, new Microsoft.Xna.Framework.Rectangle?(value17), color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
								}
							}
							num198 += num197;
						}
						if (flag23)
						{
							p.Y = point2.Y;
							num195 = point.X;
							num196 = point2.X;
							num197 = num193;
						}
						else
						{
							p.X = point2.X;
							num195 = point.Y;
							num196 = point2.Y;
							num197 = num194;
						}
						position7 = p.ToVector2() * 16f - Main.screenPosition;
						value17 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
						if (!flag23)
						{
							value17.X += ((num193 > 0) ? 144 : 36);
							value17.X += ((num194 * num185 > 0) ? 72 : 18);
						}
						else
						{
							value17.X += ((num193 > 0) ? 36 : 144);
							value17.X += ((num194 * num185 > 0) ? 18 : 72);
						}
						if (flag21)
						{
							Main.spriteBatch.Draw(Main.wireUITexture[11], position7, null, color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						}
						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position7, new Microsoft.Xna.Framework.Rectangle?(value17), color38, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						value17.Y = 18;
						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position7, new Microsoft.Xna.Framework.Rectangle?(value17), color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						int num199 = num195 + num197;
						while (num199 != num196 && !flag22)
						{
							if (!flag23)
							{
								p.Y = num199;
							}
							else
							{
								p.X = num199;
							}
							if (WorldGen.InWorld(p.X, p.Y, 1))
							{
								Tile tile = Main.tile[p.X, p.Y];
								if (tile != null)
								{
									position7 = p.ToVector2() * 16f - Main.screenPosition;
									value17.Y = 0;
									if (!flag23)
									{
										value17.X = 90;
									}
									else
									{
										value17.X = 180;
									}
									if (flag21)
									{
										Main.spriteBatch.Draw(Main.wireUITexture[11], position7, null, color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
									}
									Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position7, new Microsoft.Xna.Framework.Rectangle?(value17), color38, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
									value17.Y = 18;
									Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position7, new Microsoft.Xna.Framework.Rectangle?(value17), color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
								}
							}
							num199 += num197;
						}
						position7 = point2.ToVector2() * 16f - Main.screenPosition;
						value17 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
						if (!flag23)
						{
							value17.X += ((num194 * num185 > 0) ? 18 : 72);
						}
						else
						{
							value17.X += ((num193 > 0) ? 144 : 36);
						}
						if (flag21)
						{
							Main.spriteBatch.Draw(Main.wireUITexture[11], position7, null, color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						}
						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position7, new Microsoft.Xna.Framework.Rectangle?(value17), color38, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						value17.Y = 18;
						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], position7, new Microsoft.Xna.Framework.Rectangle?(value17), color37, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
					}
				}
				else if (projectile.type == 586)
				{
					float num200 = 300f;
					if (projectile.ai[0] >= 100f)
					{
						num200 = MathHelper.Lerp(300f, 600f, (projectile.ai[0] - 100f) / 200f);
					}
					if (num200 > 600f)
					{
						num200 = 600f;
					}
					if (projectile.ai[0] >= 500f)
					{
						num200 = MathHelper.Lerp(600f, 1200f, (projectile.ai[0] - 500f) / 100f);
					}
					float rotation23 = projectile.rotation;
					Texture2D texture2D5 = Main.projectileTexture[projectile.type];
					Microsoft.Xna.Framework.Color alpha2 = projectile.GetAlpha(color25);
					alpha2.A /= 2;
					int num201 = (int)(projectile.ai[0] / 6f);
					Vector2 spinningpoint = new Vector2(0f, -num200);
					int num202 = 0;
					while ((float)num202 < 10f)
					{
						Microsoft.Xna.Framework.Rectangle rectangle3 = texture2D5.Frame(1, 5, 0, (num201 + num202) % 5);
						float num203 = rotation23 + 0.628318548f * (float)num202;
						Vector2 position8 = spinningpoint.RotatedBy((double)num203, default(Vector2)) / 3f + projectile.Center - Main.screenPosition;
						Main.spriteBatch.Draw(texture2D5, position8, new Microsoft.Xna.Framework.Rectangle?(rectangle3), alpha2, num203, rectangle3.Size() / 2f, projectile.scale, SpriteEffects.None, 0f);
						num202++;
					}
					int num204 = 0;
					while ((float)num204 < 20f)
					{
						Microsoft.Xna.Framework.Rectangle rectangle4 = texture2D5.Frame(1, 5, 0, (num201 + num204) % 5);
						float num205 = -rotation23 + 0.314159274f * (float)num204;
						num205 *= 2f;
						Vector2 position9 = spinningpoint.RotatedBy((double)num205, default(Vector2)) + projectile.Center - Main.screenPosition;
						Main.spriteBatch.Draw(texture2D5, position9, new Microsoft.Xna.Framework.Rectangle?(rectangle4), alpha2, num205, rectangle4.Size() / 2f, projectile.scale, SpriteEffects.None, 0f);
						num204++;
					}
				}
				else if (projectile.type == 536 || projectile.type == 591 || projectile.type == 607)
				{
					Texture2D texture2D6 = Main.projectileTexture[projectile.type];
					Vector2 position10 = projectile.position + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
					Vector2 scale4 = new Vector2(1f, projectile.velocity.Length() / (float)texture2D6.Height);
					Main.spriteBatch.Draw(texture2D6, position10, null, projectile.GetAlpha(color25), projectile.rotation, texture2D6.Frame(1, 1, 0, 0).Bottom(), scale4, spriteEffects, 0f);
				}
				else if (projectile.type == 688 || projectile.type == 689 || projectile.type == 690)
				{
					Texture2D texture2D7 = Main.projectileTexture[projectile.type];
					Vector2 position11 = projectile.Top + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
					Microsoft.Xna.Framework.Rectangle rectangle5 = texture2D7.Frame(1, Main.projFrames[projectile.type], 0, projectile.frame);
					Vector2 origin4 = rectangle5.Size() * new Vector2(0.5f, 0f);
					Microsoft.Xna.Framework.Color color39 = Microsoft.Xna.Framework.Color.Lerp(projectile.GetAlpha(color25), Microsoft.Xna.Framework.Color.White, 0.5f);
					Microsoft.Xna.Framework.Color color40 = color39;
					color40.A = 127;
					Texture2D texture2D8 = null;
					Texture2D texture2D9 = null;
					switch (projectile.type)
					{
					case 688:
						texture2D8 = Main.glowMaskTexture[228];
						texture2D9 = Main.extraTexture[86];
						break;
					case 689:
						texture2D8 = Main.glowMaskTexture[229];
						texture2D9 = Main.extraTexture[87];
						break;
					case 690:
						texture2D8 = Main.glowMaskTexture[230];
						texture2D9 = Main.extraTexture[88];
						break;
					}
					Main.spriteBatch.Draw(texture2D7, position11, new Microsoft.Xna.Framework.Rectangle?(rectangle5), color39, projectile.rotation, origin4, projectile.scale, spriteEffects, 0f);
					if (texture2D8 != null)
					{
						Main.spriteBatch.Draw(texture2D8, position11, new Microsoft.Xna.Framework.Rectangle?(rectangle5), color40, projectile.rotation, origin4, projectile.scale, spriteEffects, 0f);
					}
					if (texture2D9 != null)
					{
						Vector2 position12 = projectile.Center + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
						rectangle5 = texture2D9.Frame(1, 1, 0, 0);
						origin4 = rectangle5.Size() * new Vector2(0.5f, 1f);
						origin4.Y -= 2f;
						Main.spriteBatch.Draw(texture2D9, position12, new Microsoft.Xna.Framework.Rectangle?(rectangle5), color39, projectile.rotation, origin4, projectile.scale, spriteEffects, 0f);
					}
				}
				else if (projectile.type == 694 || projectile.type == 695 || projectile.type == 696)
				{
					Texture2D texture2D10 = Main.projectileTexture[projectile.type];
					Vector2 position13 = projectile.Bottom + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
					Microsoft.Xna.Framework.Rectangle rectangle6 = texture2D10.Frame(1, Main.projFrames[projectile.type], 0, projectile.frame);
					Vector2 origin5 = rectangle6.Size() * new Vector2(0.5f, 1f);
					origin5.Y -= 8f;
					switch (projectile.type)
					{
					case 694:
					case 695:
						origin5.X += 3f;
						break;
					}
					Microsoft.Xna.Framework.Color color41 = Microsoft.Xna.Framework.Color.Lerp(projectile.GetAlpha(color25), Microsoft.Xna.Framework.Color.White, 0f);
					Main.spriteBatch.Draw(texture2D10, position13, new Microsoft.Xna.Framework.Rectangle?(rectangle6), color41, projectile.rotation, origin5, projectile.scale, spriteEffects, 0f);
					Main.spriteBatch.Draw(texture2D10, position13, new Microsoft.Xna.Framework.Rectangle?(rectangle6), color41 * 0.3f, projectile.rotation, origin5, projectile.scale * 1.1f, spriteEffects, 0f);
				}
				else if (projectile.type == 409)
				{
					Texture2D texture2D11 = Main.projectileTexture[projectile.type];
					int num206 = Main.projectileTexture[projectile.type].Height / Main.projFrames[projectile.type];
					int y4 = num206 * projectile.frame;
					int num207 = 10;
					int num208 = 2;
					float value18 = 0.5f;
					for (int num209 = 1; num209 < num207; num209 += num208)
					{
						Vector2 arg_9047_0 = projectile.oldPos[num209];
						Microsoft.Xna.Framework.Color color42 = color25;
						color42 = projectile.GetAlpha(color42);
						color42 *= (float)(num207 - num209) / 15f;
						Vector2 _ = projectile.oldPos[num209] - Main.screenPosition + new Vector2(num149 + (float)num148, (float)(projectile.height / 2) + projectile.gfxOffY);
						Main.spriteBatch.Draw(texture2D11, projectile.oldPos[num209] + new Vector2((float)projectile.width, (float)projectile.height) / 2f - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y4, texture2D11.Width, num206)), color42, projectile.rotation, new Vector2((float)texture2D11.Width / 2f, (float)num206 / 2f), MathHelper.Lerp(projectile.scale, value18, (float)num209 / 15f), spriteEffects, 0f);
					}
					Main.spriteBatch.Draw(texture2D11, projectile.Center - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y4, texture2D11.Width, num206)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D11.Width / 2f, (float)num206 / 2f), projectile.scale, spriteEffects, 0f);
				}
				else if (projectile.type == 437)
				{
					Texture2D texture2D12 = Main.projectileTexture[projectile.type];
					int num210 = Main.projectileTexture[projectile.type].Height / Main.projFrames[projectile.type];
					int y5 = num210 * projectile.frame;
					int num211 = 10;
					int num212 = 2;
					float value19 = 0.2f;
					for (int num213 = 1; num213 < num211; num213 += num212)
					{
						Vector2 arg_92C0_0 = Main.npc[i].oldPos[num213];
						Microsoft.Xna.Framework.Color color43 = color25;
						color43 = projectile.GetAlpha(color43);
						color43 *= (float)(num211 - num213) / 15f;
						Vector2 _ = projectile.oldPos[num213] - Main.screenPosition + new Vector2(num149 + (float)num148, (float)(projectile.height / 2) + projectile.gfxOffY);
						Main.spriteBatch.Draw(texture2D12, projectile.oldPos[num213] + new Vector2((float)projectile.width, (float)projectile.height) / 2f - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y5, texture2D12.Width, num210)), color43, projectile.rotation, new Vector2((float)texture2D12.Width / 2f, (float)num210 / 2f), MathHelper.Lerp(projectile.scale, value19, (float)num213 / 15f), spriteEffects, 0f);
					}
					Main.spriteBatch.Draw(texture2D12, projectile.Center - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y5, texture2D12.Width, num210)), Microsoft.Xna.Framework.Color.White, projectile.rotation, new Vector2((float)texture2D12.Width / 2f, (float)num210 / 2f), projectile.scale + 0.2f, spriteEffects, 0f);
					Main.spriteBatch.Draw(texture2D12, projectile.Center - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y5, texture2D12.Width, num210)), projectile.GetAlpha(Microsoft.Xna.Framework.Color.White), projectile.rotation, new Vector2((float)texture2D12.Width / 2f, (float)num210 / 2f), projectile.scale + 0.2f, spriteEffects, 0f);
				}
				else if (projectile.type == 384 || projectile.type == 386)
				{
					Texture2D texture2D13 = Main.projectileTexture[projectile.type];
					int num214 = Main.projectileTexture[projectile.type].Height / Main.projFrames[projectile.type];
					int y6 = num214 * projectile.frame;
					Main.spriteBatch.Draw(texture2D13, projectile.Center - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y6, texture2D13.Width, num214)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D13.Width / 2f, (float)num214 / 2f), projectile.scale, spriteEffects, 0f);
				}
				else if (projectile.type == 439 || projectile.type == 460 || projectile.type == 600 || projectile.type == 615 || projectile.type == 630 || projectile.type == 633 || projectile.type == 705)
				{
					Texture2D texture2D14 = Main.projectileTexture[projectile.type];
					int num215 = Main.projectileTexture[projectile.type].Height / Main.projFrames[projectile.type];
					int y7 = num215 * projectile.frame;
					Vector2 vector27 = (projectile.position + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition).Floor();
					float scale5 = 1f;
					if (Main.player[projectile.owner].shroomiteStealth && Main.player[projectile.owner].inventory[Main.player[projectile.owner].selectedItem].ranged)
					{
						float num216 = Main.player[projectile.owner].stealth;
						if ((double)num216 < 0.03)
						{
							num216 = 0.03f;
						}
						float arg_97B3_0 = (1f + num216 * 10f) / 11f;
						color25 *= num216;
						scale5 = num216;
					}
					if (Main.player[projectile.owner].setVortex && Main.player[projectile.owner].inventory[Main.player[projectile.owner].selectedItem].ranged)
					{
						float num217 = Main.player[projectile.owner].stealth;
						if ((double)num217 < 0.03)
						{
							num217 = 0.03f;
						}
						float arg_9854_0 = (1f + num217 * 10f) / 11f;
						color25 = color25.MultiplyRGBA(new Microsoft.Xna.Framework.Color(Vector4.Lerp(Vector4.One, new Vector4(0f, 0.12f, 0.16f, 0f), 1f - num217)));
						scale5 = num217;
					}
					Main.spriteBatch.Draw(texture2D14, vector27, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y7, texture2D14.Width, num215)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D14.Width / 2f, (float)num215 / 2f), projectile.scale, spriteEffects, 0f);
					if (projectile.type == 439)
					{
						Main.spriteBatch.Draw(Main.glowMaskTexture[35], vector27, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y7, texture2D14.Width, num215)), new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * scale5, projectile.rotation, new Vector2((float)texture2D14.Width / 2f, (float)num215 / 2f), projectile.scale, spriteEffects, 0f);
					}
					else if (projectile.type == 615)
					{
						Main.spriteBatch.Draw(Main.glowMaskTexture[192], vector27, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y7, texture2D14.Width, num215)), new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * scale5, projectile.rotation, new Vector2((float)texture2D14.Width / 2f, (float)num215 / 2f), projectile.scale, spriteEffects, 0f);
					}
					else if (projectile.type == 630)
					{
						Main.spriteBatch.Draw(Main.glowMaskTexture[200], vector27, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y7, texture2D14.Width, num215)), new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * scale5, projectile.rotation, new Vector2((float)texture2D14.Width / 2f, (float)num215 / 2f), projectile.scale, spriteEffects, 0f);
						if (projectile.localAI[0] > 0f)
						{
							int frameY = 6 - (int)(projectile.localAI[0] / 1f);
							texture2D14 = Main.extraTexture[65];
							Main.spriteBatch.Draw(texture2D14, vector27 + Vector2.Normalize(projectile.velocity) * 2f, new Microsoft.Xna.Framework.Rectangle?(texture2D14.Frame(1, 6, 0, frameY)), new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * scale5, projectile.rotation, new Vector2((float)(spriteEffects.HasFlag(SpriteEffects.FlipHorizontally) ? texture2D14.Width : 0), (float)num215 / 2f - 2f), projectile.scale, spriteEffects, 0f);
						}
					}
					else if (projectile.type == 600)
					{
						Microsoft.Xna.Framework.Color portalColor = PortalHelper.GetPortalColor(projectile.owner, (int)projectile.ai[1]);
						portalColor.A = 70;
						Main.spriteBatch.Draw(Main.glowMaskTexture[173], vector27, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y7, texture2D14.Width, num215)), portalColor, projectile.rotation, new Vector2((float)texture2D14.Width / 2f, (float)num215 / 2f), projectile.scale, spriteEffects, 0f);
					}
					else if (projectile.type == 460)
					{
						if (Math.Abs(projectile.rotation - 1.57079637f) > 1.57079637f)
						{
							spriteEffects |= SpriteEffects.FlipVertically;
						}
						Main.spriteBatch.Draw(Main.glowMaskTexture[102], vector27, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y7, texture2D14.Width, num215)), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), projectile.rotation - 1.57079637f, new Vector2((float)texture2D14.Width / 2f, (float)num215 / 2f), projectile.scale, spriteEffects, 0f);
						if (projectile.ai[0] > 180f && Main.projectile[(int)projectile.ai[1]].type == 461)
						{
							this.DrawProj((int)projectile.ai[1]);
						}
					}
					else if (projectile.type == 633)
					{
						float scaleFactor2 = (float)Math.Cos((double)(6.28318548f * (projectile.ai[0] / 30f))) * 2f + 2f;
						if (projectile.ai[0] > 120f)
						{
							scaleFactor2 = 4f;
						}
						for (float num218 = 0f; num218 < 4f; num218 += 1f)
						{
							Main.spriteBatch.Draw(texture2D14, vector27 + Vector2.UnitY.RotatedBy((double)(num218 * 6.28318548f / 4f), default(Vector2)) * scaleFactor2, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y7, texture2D14.Width, num215)), projectile.GetAlpha(color25).MultiplyRGBA(new Microsoft.Xna.Framework.Color(255, 255, 255, 0)) * 0.03f, projectile.rotation, new Vector2((float)texture2D14.Width / 2f, (float)num215 / 2f), projectile.scale, spriteEffects, 0f);
						}
					}
				}
				else if (projectile.type == 442)
				{
					Texture2D texture2D15 = Main.projectileTexture[projectile.type];
					int num219 = Main.projectileTexture[projectile.type].Height / Main.projFrames[projectile.type];
					int y8 = num219 * projectile.frame;
					Vector2 position14 = projectile.position + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
					Main.spriteBatch.Draw(texture2D15, position14, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y8, texture2D15.Width, num219)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D15.Width / 2f, (float)num219 / 2f), projectile.scale, spriteEffects, 0f);
					Main.spriteBatch.Draw(Main.glowMaskTexture[37], position14, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y8, texture2D15.Width, num219)), new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * (1f - (float)projectile.alpha / 255f), projectile.rotation, new Vector2((float)texture2D15.Width / 2f, (float)num219 / 2f), projectile.scale, spriteEffects, 0f);
				}
				else if (projectile.type == 447)
				{
					Texture2D texture2D16 = Main.projectileTexture[projectile.type];
					Texture2D texture2D17 = Main.extraTexture[4];
					int num220 = texture2D16.Height / Main.projFrames[projectile.type];
					int y9 = num220 * projectile.frame;
					int num221 = texture2D17.Height / Main.projFrames[projectile.type];
					int num222 = num221 * projectile.frame;
					Microsoft.Xna.Framework.Rectangle value20 = new Microsoft.Xna.Framework.Rectangle(0, num222, texture2D17.Width, num221);
					Vector2 vector28 = projectile.position + new Vector2((float)projectile.width, 0f) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
					Main.spriteBatch.Draw(Main.extraTexture[4], vector28, new Microsoft.Xna.Framework.Rectangle?(value20), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)(texture2D17.Width / 2), 0f), projectile.scale, spriteEffects, 0f);
					int num223 = projectile.height - num220 - 14;
					if (num223 < 0)
					{
						num223 = 0;
					}
					if (num223 > 0)
					{
						if (num222 == num221 * 3)
						{
							num222 = num221 * 2;
						}
						Main.spriteBatch.Draw(Main.extraTexture[4], vector28 + Vector2.UnitY * (float)(num221 - 1), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num222 + num221 - 1, texture2D17.Width, 1)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)(texture2D17.Width / 2), 0f), new Vector2(1f, (float)num223), spriteEffects, 0f);
					}
					value20.Width = texture2D16.Width;
					value20.Y = y9;
					Main.spriteBatch.Draw(texture2D16, vector28 + Vector2.UnitY * (float)(num221 - 1 + num223), new Microsoft.Xna.Framework.Rectangle?(value20), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D16.Width / 2f, 0f), projectile.scale, spriteEffects, 0f);
				}
				else if (projectile.type == 455)
				{
					if (projectile.velocity == Vector2.Zero)
					{
						return;
					}
					Texture2D texture2D18 = Main.projectileTexture[projectile.type];
					Texture2D texture2D19 = Main.extraTexture[21];
					Texture2D texture2D20 = Main.extraTexture[22];
					float num224 = projectile.localAI[1];
					Microsoft.Xna.Framework.Color color44 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * 0.9f;
					Main.spriteBatch.Draw(texture2D18, projectile.Center - Main.screenPosition, null, color44, projectile.rotation, texture2D18.Size() / 2f, projectile.scale, SpriteEffects.None, 0f);
					num224 -= (float)(texture2D18.Height / 2 + texture2D20.Height) * projectile.scale;
					Vector2 value21 = projectile.Center;
					value21 += projectile.velocity * projectile.scale * (float)texture2D18.Height / 2f;
					if (num224 > 0f)
					{
						float num225 = 0f;
						Microsoft.Xna.Framework.Rectangle value22 = new Microsoft.Xna.Framework.Rectangle(0, 16 * (projectile.timeLeft / 3 % 5), texture2D19.Width, 16);
						while (num225 + 1f < num224)
						{
							if (num224 - num225 < (float)value22.Height)
							{
								value22.Height = (int)(num224 - num225);
							}
							Main.spriteBatch.Draw(texture2D19, value21 - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(value22), color44, projectile.rotation, new Vector2((float)(value22.Width / 2), 0f), projectile.scale, SpriteEffects.None, 0f);
							num225 += (float)value22.Height * projectile.scale;
							value21 += projectile.velocity * (float)value22.Height * projectile.scale;
							value22.Y += 16;
							if (value22.Y + value22.Height > texture2D19.Height)
							{
								value22.Y = 0;
							}
						}
					}
					Main.spriteBatch.Draw(texture2D20, value21 - Main.screenPosition, null, color44, projectile.rotation, texture2D20.Frame(1, 1, 0, 0).Top(), projectile.scale, SpriteEffects.None, 0f);
				}
				else if (projectile.type == 461)
				{
					if (projectile.velocity == Vector2.Zero)
					{
						return;
					}
					Texture2D texture2D21 = Main.projectileTexture[projectile.type];
					float num226 = projectile.localAI[1];
					Microsoft.Xna.Framework.Color color45 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * 0.9f;
					Microsoft.Xna.Framework.Rectangle rectangle7 = new Microsoft.Xna.Framework.Rectangle(0, 0, texture2D21.Width, 22);
					Vector2 value23 = new Vector2(0f, Main.player[projectile.owner].gfxOffY);
					Main.spriteBatch.Draw(texture2D21, projectile.Center.Floor() - Main.screenPosition + value23, new Microsoft.Xna.Framework.Rectangle?(rectangle7), color45, projectile.rotation, rectangle7.Size() / 2f, projectile.scale, SpriteEffects.None, 0f);
					num226 -= 33f * projectile.scale;
					Vector2 value24 = projectile.Center.Floor();
					value24 += projectile.velocity * projectile.scale * 10.5f;
					rectangle7 = new Microsoft.Xna.Framework.Rectangle(0, 25, texture2D21.Width, 28);
					if (num226 > 0f)
					{
						float num227 = 0f;
						while (num227 + 1f < num226)
						{
							if (num226 - num227 < (float)rectangle7.Height)
							{
								rectangle7.Height = (int)(num226 - num227);
							}
							Main.spriteBatch.Draw(texture2D21, value24 - Main.screenPosition + value23, new Microsoft.Xna.Framework.Rectangle?(rectangle7), color45, projectile.rotation, new Vector2((float)(rectangle7.Width / 2), 0f), projectile.scale, SpriteEffects.None, 0f);
							num227 += (float)rectangle7.Height * projectile.scale;
							value24 += projectile.velocity * (float)rectangle7.Height * projectile.scale;
						}
					}
					rectangle7 = new Microsoft.Xna.Framework.Rectangle(0, 56, texture2D21.Width, 22);
					Main.spriteBatch.Draw(texture2D21, value24 - Main.screenPosition + value23, new Microsoft.Xna.Framework.Rectangle?(rectangle7), color45, projectile.rotation, texture2D21.Frame(1, 1, 0, 0).Top(), projectile.scale, SpriteEffects.None, 0f);
				}
				else if (projectile.type == 632)
				{
					if (projectile.velocity == Vector2.Zero)
					{
						return;
					}
					Texture2D tex = Main.projectileTexture[projectile.type];
					float num228 = projectile.localAI[1];
					float prismHue = projectile.GetPrismHue(projectile.ai[0]);
					Microsoft.Xna.Framework.Color value25 = Main.hslToRgb(prismHue, 1f, 0.5f);
					value25.A = 0;
					Vector2 value26 = projectile.Center.Floor();
					value26 += projectile.velocity * projectile.scale * 10.5f;
					num228 -= projectile.scale * 14.5f * projectile.scale;
					Vector2 vector29 = new Vector2(projectile.scale);
					DelegateMethods.f_1 = 1f;
					DelegateMethods.c_1 = value25 * 0.75f * projectile.Opacity;
					Vector2 _ = projectile.oldPos[0] + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
					Utils.DrawLaser(Main.spriteBatch, tex, value26 - Main.screenPosition, value26 + projectile.velocity * num228 - Main.screenPosition, vector29, new Utils.LaserLineFraming(DelegateMethods.RainbowLaserDraw));
					DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * 0.75f * projectile.Opacity;
					Utils.DrawLaser(Main.spriteBatch, tex, value26 - Main.screenPosition, value26 + projectile.velocity * num228 - Main.screenPosition, vector29 / 2f, new Utils.LaserLineFraming(DelegateMethods.RainbowLaserDraw));
				}
				else if (projectile.type == 642)
				{
					if (projectile.velocity == Vector2.Zero)
					{
						return;
					}
					Texture2D tex2 = Main.projectileTexture[projectile.type];
					float num229 = projectile.localAI[1];
					Microsoft.Xna.Framework.Color c_ = new Microsoft.Xna.Framework.Color(255, 255, 255, 127);
					Vector2 value27 = projectile.Center.Floor();
					num229 -= projectile.scale * 10.5f;
					Vector2 vector30 = new Vector2(projectile.scale);
					DelegateMethods.f_1 = 1f;
					DelegateMethods.c_1 = c_;
					DelegateMethods.i_1 = 54000 - (int)Main.time / 2;
					Vector2 _ = projectile.oldPos[0] + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
					Utils.DrawLaser(Main.spriteBatch, tex2, value27 - Main.screenPosition, value27 + projectile.velocity * num229 - Main.screenPosition, vector30, new Utils.LaserLineFraming(DelegateMethods.TurretLaserDraw));
					DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * 0.75f * projectile.Opacity;
					Utils.DrawLaser(Main.spriteBatch, tex2, value27 - Main.screenPosition, value27 + projectile.velocity * num229 - Main.screenPosition, vector30 / 2f, new Utils.LaserLineFraming(DelegateMethods.TurretLaserDraw));
				}
				else if (projectile.type == 611)
				{
					Vector2 _ = projectile.position + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
					Texture2D texture2D22 = Main.projectileTexture[projectile.type];
					Microsoft.Xna.Framework.Color alpha3 = projectile.GetAlpha(color25);
					if (projectile.velocity == Vector2.Zero)
					{
						return;
					}
					float num230 = projectile.velocity.Length() + 16f;
					bool flag24 = num230 < 100f;
					Vector2 value28 = Vector2.Normalize(projectile.velocity);
					Microsoft.Xna.Framework.Rectangle rectangle8 = new Microsoft.Xna.Framework.Rectangle(0, 2, texture2D22.Width, 40);
					Vector2 value29 = new Vector2(0f, Main.player[projectile.owner].gfxOffY);
					float rotation24 = projectile.rotation + 3.14159274f;
					Main.spriteBatch.Draw(texture2D22, projectile.Center.Floor() - Main.screenPosition + value29, new Microsoft.Xna.Framework.Rectangle?(rectangle8), alpha3, rotation24, rectangle8.Size() / 2f - Vector2.UnitY * 4f, projectile.scale, SpriteEffects.None, 0f);
					num230 -= 40f * projectile.scale;
					Vector2 vector31 = projectile.Center.Floor();
					vector31 += value28 * projectile.scale * 24f;
					rectangle8 = new Microsoft.Xna.Framework.Rectangle(0, 68, texture2D22.Width, 18);
					if (num230 > 0f)
					{
						float num231 = 0f;
						while (num231 + 1f < num230)
						{
							if (num230 - num231 < (float)rectangle8.Height)
							{
								rectangle8.Height = (int)(num230 - num231);
							}
							Main.spriteBatch.Draw(texture2D22, vector31 - Main.screenPosition + value29, new Microsoft.Xna.Framework.Rectangle?(rectangle8), alpha3, rotation24, new Vector2((float)(rectangle8.Width / 2), 0f), projectile.scale, SpriteEffects.None, 0f);
							num231 += (float)rectangle8.Height * projectile.scale;
							vector31 += value28 * (float)rectangle8.Height * projectile.scale;
						}
					}
					Vector2 value30 = vector31;
					vector31 = projectile.Center.Floor();
					vector31 += value28 * projectile.scale * 24f;
					rectangle8 = new Microsoft.Xna.Framework.Rectangle(0, 46, texture2D22.Width, 18);
					int num232 = 18;
					if (flag24)
					{
						num232 = 9;
					}
					float num233 = num230;
					if (num230 > 0f)
					{
						float num234 = 0f;
						float num235 = num233 / (float)num232;
						num234 += num235 * 0.25f;
						vector31 += value28 * num235 * 0.25f;
						for (int num236 = 0; num236 < num232; num236++)
						{
							float num237 = num235;
							if (num236 == 0)
							{
								num237 *= 0.75f;
							}
							Main.spriteBatch.Draw(texture2D22, vector31 - Main.screenPosition + value29, new Microsoft.Xna.Framework.Rectangle?(rectangle8), alpha3, rotation24, new Vector2((float)(rectangle8.Width / 2), 0f), projectile.scale, SpriteEffects.None, 0f);
							num234 += num237;
							vector31 += value28 * num237;
						}
					}
					rectangle8 = new Microsoft.Xna.Framework.Rectangle(0, 90, texture2D22.Width, 48);
					Main.spriteBatch.Draw(texture2D22, value30 - Main.screenPosition + value29, new Microsoft.Xna.Framework.Rectangle?(rectangle8), alpha3, rotation24, texture2D22.Frame(1, 1, 0, 0).Top(), projectile.scale, SpriteEffects.None, 0f);
				}
				else if (projectile.type == 537)
				{
					if (projectile.velocity == Vector2.Zero)
					{
						return;
					}
					Texture2D texture2D23 = Main.projectileTexture[projectile.type];
					float num238 = projectile.localAI[1];
					Microsoft.Xna.Framework.Color color46 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * 0.9f;
					Microsoft.Xna.Framework.Rectangle rectangle9 = new Microsoft.Xna.Framework.Rectangle(0, 0, texture2D23.Width, 22);
					Vector2 value31 = new Vector2(0f, Main.npc[(int)projectile.ai[1]].gfxOffY);
					Main.spriteBatch.Draw(texture2D23, projectile.Center.Floor() - Main.screenPosition + value31, new Microsoft.Xna.Framework.Rectangle?(rectangle9), color46, projectile.rotation, rectangle9.Size() / 2f, projectile.scale, SpriteEffects.None, 0f);
					num238 -= 33f * projectile.scale;
					Vector2 value32 = projectile.Center.Floor();
					value32 += projectile.velocity * projectile.scale * 10.5f;
					rectangle9 = new Microsoft.Xna.Framework.Rectangle(0, 25, texture2D23.Width, 28);
					if (num238 > 0f)
					{
						float num239 = 0f;
						while (num239 + 1f < num238)
						{
							if (num238 - num239 < (float)rectangle9.Height)
							{
								rectangle9.Height = (int)(num238 - num239);
							}
							Main.spriteBatch.Draw(texture2D23, value32 - Main.screenPosition + value31, new Microsoft.Xna.Framework.Rectangle?(rectangle9), color46, projectile.rotation, new Vector2((float)(rectangle9.Width / 2), 0f), projectile.scale, SpriteEffects.None, 0f);
							num239 += (float)rectangle9.Height * projectile.scale;
							value32 += projectile.velocity * (float)rectangle9.Height * projectile.scale;
						}
					}
					rectangle9 = new Microsoft.Xna.Framework.Rectangle(0, 56, texture2D23.Width, 22);
					Main.spriteBatch.Draw(texture2D23, value32 - Main.screenPosition + value31, new Microsoft.Xna.Framework.Rectangle?(rectangle9), color46, projectile.rotation, texture2D23.Frame(1, 1, 0, 0).Top(), projectile.scale, SpriteEffects.None, 0f);
				}
				else if (projectile.type == 456)
				{
					Texture2D texture2D24 = Main.projectileTexture[projectile.type];
					Texture2D texture2D25 = Main.extraTexture[23];
					Texture2D texture2D26 = Main.extraTexture[24];
					Vector2 value33 = new Vector2(0f, 216f);
					Vector2 value34 = Main.npc[(int)Math.Abs(projectile.ai[0]) - 1].Center - projectile.Center + value33;
					float num240 = value34.Length();
					Vector2 value35 = Vector2.Normalize(value34);
					Microsoft.Xna.Framework.Rectangle rectangle10 = texture2D24.Frame(1, 1, 0, 0);
					rectangle10.Height /= 4;
					rectangle10.Y += projectile.frame * rectangle10.Height;
					color25 = Microsoft.Xna.Framework.Color.Lerp(color25, Microsoft.Xna.Framework.Color.White, 0.3f);
					Main.spriteBatch.Draw(texture2D24, projectile.Center - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(rectangle10), projectile.GetAlpha(color25), projectile.rotation, rectangle10.Size() / 2f, projectile.scale, SpriteEffects.None, 0f);
					num240 -= (float)(rectangle10.Height / 2 + texture2D26.Height) * projectile.scale;
					Vector2 vector32 = projectile.Center;
					vector32 += value35 * projectile.scale * (float)rectangle10.Height / 2f;
					if (num240 > 0f)
					{
						float num241 = 0f;
						Microsoft.Xna.Framework.Rectangle rectangle11 = new Microsoft.Xna.Framework.Rectangle(0, 0, texture2D25.Width, texture2D25.Height);
						while (num241 + 1f < num240)
						{
							if (num240 - num241 < (float)rectangle11.Height)
							{
								rectangle11.Height = (int)(num240 - num241);
							}
							Microsoft.Xna.Framework.Point point3 = vector32.ToTileCoordinates();
							Microsoft.Xna.Framework.Color color47 = Lighting.GetColor(point3.X, point3.Y);
							color47 = Microsoft.Xna.Framework.Color.Lerp(color47, Microsoft.Xna.Framework.Color.White, 0.3f);
							Main.spriteBatch.Draw(texture2D25, vector32 - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(rectangle11), projectile.GetAlpha(color47), projectile.rotation, rectangle11.Bottom(), projectile.scale, SpriteEffects.None, 0f);
							num241 += (float)rectangle11.Height * projectile.scale;
							vector32 += value35 * (float)rectangle11.Height * projectile.scale;
						}
					}
					Microsoft.Xna.Framework.Point point4 = vector32.ToTileCoordinates();
					Microsoft.Xna.Framework.Color color48 = Lighting.GetColor(point4.X, point4.Y);
					color48 = Microsoft.Xna.Framework.Color.Lerp(color48, Microsoft.Xna.Framework.Color.White, 0.3f);
					Microsoft.Xna.Framework.Rectangle value36 = texture2D26.Frame(1, 1, 0, 0);
					if (num240 < 0f)
					{
						value36.Height += (int)num240;
					}
					Main.spriteBatch.Draw(texture2D26, vector32 - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(value36), color48, projectile.rotation, new Vector2((float)value36.Width / 2f, (float)value36.Height), projectile.scale, SpriteEffects.None, 0f);
				}
				else if (projectile.type == 443)
				{
					Texture2D texture2D27 = Main.projectileTexture[projectile.type];
					float num242 = 30f;
					float num243 = num242 * 4f;
					float num244 = 6.28318548f * projectile.ai[0] / num242;
					float num245 = 6.28318548f * projectile.ai[0] / num243;
					Vector2 vector33 = -Vector2.UnitY.RotatedBy((double)num244, default(Vector2));
					float scale6 = 0.75f + vector33.Y * 0.25f;
					float scale7 = 0.8f - vector33.Y * 0.2f;
					int num246 = Main.projectileTexture[projectile.type].Height / Main.projFrames[projectile.type];
					int y10 = num246 * projectile.frame;
					Vector2 position15 = projectile.position + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
					Main.spriteBatch.Draw(texture2D27, position15, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y10, texture2D27.Width, num246)), projectile.GetAlpha(color25), projectile.rotation + num245, new Vector2((float)texture2D27.Width / 2f, (float)num246 / 2f), scale6, spriteEffects, 0f);
					Main.spriteBatch.Draw(texture2D27, position15, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y10, texture2D27.Width, num246)), projectile.GetAlpha(color25), projectile.rotation + (6.28318548f - num245), new Vector2((float)texture2D27.Width / 2f, (float)num246 / 2f), scale7, spriteEffects, 0f);
				}
				else if (projectile.type == 656 || projectile.type == 657)
				{
					float num247 = 900f;
					if (projectile.type == 657)
					{
						num247 = 300f;
					}
					float num248 = 15f;
					float num249 = 15f;
					float num250 = projectile.ai[0];
					float scale8 = MathHelper.Clamp(num250 / 30f, 0f, 1f);
					if (num250 > num247 - 60f)
					{
						scale8 = MathHelper.Lerp(1f, 0f, (num250 - (num247 - 60f)) / 60f);
					}
					Microsoft.Xna.Framework.Point point5 = projectile.Center.ToTileCoordinates();
					int num251;
					int num252;
					Collision.ExpandVertically(point5.X, point5.Y, out num251, out num252, (int)num248, (int)num249);
					num251++;
					num252--;
					float num253 = 0.2f;
					Vector2 value37 = new Vector2((float)point5.X, (float)num251) * 16f + new Vector2(8f);
					Vector2 value38 = new Vector2((float)point5.X, (float)num252) * 16f + new Vector2(8f);
					Vector2.Lerp(value37, value38, 0.5f);
					Vector2 vector34 = new Vector2(0f, value38.Y - value37.Y);
					vector34.X = vector34.Y * num253;
					new Vector2(value37.X - vector34.X / 2f, value37.Y);
					Texture2D texture2D28 = Main.projectileTexture[projectile.type];
					Microsoft.Xna.Framework.Rectangle rectangle12 = texture2D28.Frame(1, 1, 0, 0);
					Vector2 origin6 = rectangle12.Size() / 2f;
					float num254 = -0.06283186f * num250;
					Vector2 spinningpoint2 = Vector2.UnitY.RotatedBy((double)(num250 * 0.1f), default(Vector2));
					float num255 = 0f;
					float num256 = 5.1f;
					Microsoft.Xna.Framework.Color value39 = new Microsoft.Xna.Framework.Color(212, 192, 100);
					for (float num257 = (float)((int)value38.Y); num257 > (float)((int)value37.Y); num257 -= num256)
					{
						num255 += num256;
						float num258 = num255 / vector34.Y;
						float num259 = num255 * 6.28318548f / -20f;
						float num260 = num258 - 0.15f;
						Vector2 vector35 = spinningpoint2.RotatedBy((double)num259, default(Vector2));
						Vector2 value40 = new Vector2(0f, num258 + 1f);
						value40.X = value40.Y * num253;
						Microsoft.Xna.Framework.Color color49 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Transparent, value39, num258 * 2f);
						if (num258 > 0.5f)
						{
							color49 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Transparent, value39, 2f - num258 * 2f);
						}
						color49.A = (byte)((float)color49.A * 0.5f);
						color49 *= scale8;
						vector35 *= value40 * 100f;
						vector35.Y = 0f;
						vector35.X = 0f;
						vector35 += new Vector2(value38.X, num257) - Main.screenPosition;
						Main.spriteBatch.Draw(texture2D28, vector35, new Microsoft.Xna.Framework.Rectangle?(rectangle12), color49, num254 + num259, origin6, 1f + num260, SpriteEffects.None, 0f);
					}
				}
				else if (projectile.type == 704)
				{
					float num261 = 300f;
					float num262 = projectile.ai[0];
					float scale9 = MathHelper.Clamp(num262 / 30f, 0f, 1f);
					if (num262 > num261 - 60f)
					{
						scale9 = MathHelper.Lerp(1f, 0f, (num262 - (num261 - 60f)) / 60f);
					}
					float num263 = 0.2f;
					Vector2 top = projectile.Top;
					Vector2 bottom = projectile.Bottom;
					Vector2.Lerp(top, bottom, 0.5f);
					Vector2 vector36 = new Vector2(0f, bottom.Y - top.Y);
					vector36.X = vector36.Y * num263;
					new Vector2(top.X - vector36.X / 2f, top.Y);
					Texture2D texture2D29 = Main.projectileTexture[projectile.type];
					Microsoft.Xna.Framework.Rectangle rectangle13 = texture2D29.Frame(1, 1, 0, 0);
					Vector2 origin7 = rectangle13.Size() / 2f;
					float num264 = -0.157079637f * num262 * (float)((projectile.velocity.X > 0f) ? -1 : 1);
					SpriteEffects effects2 = (projectile.velocity.X > 0f) ? SpriteEffects.FlipVertically : SpriteEffects.None;
					bool flag25 = projectile.velocity.X > 0f;
					Vector2 spinningpoint3 = Vector2.UnitY.RotatedBy((double)(num262 * 0.14f), default(Vector2));
					float num265 = 0f;
					float num266 = 5.01f + num262 / 150f * -0.9f;
					if (num266 < 4.11f)
					{
						num266 = 4.11f;
					}
					Microsoft.Xna.Framework.Color value41 = new Microsoft.Xna.Framework.Color(160, 140, 100, 127);
					Microsoft.Xna.Framework.Color color50 = new Microsoft.Xna.Framework.Color(140, 160, 255, 127);
					float num267 = num262 % 60f;
					if (num267 < 30f)
					{
						color50 *= Utils.InverseLerp(22f, 30f, num267, true);
					}
					else
					{
						color50 *= Utils.InverseLerp(38f, 30f, num267, true);
					}
					bool flag26 = color50 != Microsoft.Xna.Framework.Color.Transparent;
					for (float num268 = (float)((int)bottom.Y); num268 > (float)((int)top.Y); num268 -= num266)
					{
						num265 += num266;
						float num269 = num265 / vector36.Y;
						float num270 = num265 * 6.28318548f / -20f;
						if (flag25)
						{
							num270 *= -1f;
						}
						float num271 = num269 - 0.35f;
						Vector2 vector37 = spinningpoint3.RotatedBy((double)num270, default(Vector2));
						Vector2 value42 = new Vector2(0f, num269 + 1f);
						value42.X = value42.Y * num263;
						Microsoft.Xna.Framework.Color color51 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Transparent, value41, num269 * 2f);
						if (num269 > 0.5f)
						{
							color51 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Transparent, value41, 2f - num269 * 2f);
						}
						color51.A = (byte)((float)color51.A * 0.5f);
						color51 *= scale9;
						vector37 *= value42 * 100f;
						vector37.Y = 0f;
						vector37.X = 0f;
						vector37 += new Vector2(bottom.X, num268) - Main.screenPosition;
						if (flag26)
						{
							Microsoft.Xna.Framework.Color color52 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Transparent, color50, num269 * 2f);
							if (num269 > 0.5f)
							{
								color52 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Transparent, color50, 2f - num269 * 2f);
							}
							color52.A = (byte)((float)color52.A * 0.5f);
							color52 *= scale9;
							Main.spriteBatch.Draw(texture2D29, vector37, new Microsoft.Xna.Framework.Rectangle?(rectangle13), color52, num264 + num270, origin7, (1f + num271) * 0.8f, effects2, 0f);
						}
						Main.spriteBatch.Draw(texture2D29, vector37, new Microsoft.Xna.Framework.Rectangle?(rectangle13), color51, num264 + num270, origin7, 1f + num271, effects2, 0f);
					}
				}
				else if (projectile.type == 444 || projectile.type == 446 || projectile.type == 490 || projectile.type == 464 || projectile.type == 502 || projectile.type == 538 || projectile.type == 540 || projectile.type == 579 || projectile.type == 578 || projectile.type == 583 || projectile.type == 584 || projectile.type == 616 || projectile.type == 617 || projectile.type == 618 || projectile.type == 641 || (projectile.type >= 646 && projectile.type <= 649) || projectile.type == 653 || projectile.type == 186 || projectile.type == 662 || projectile.type == 685 || projectile.type == 673 || projectile.type == 676 || projectile.type == 697 || projectile.type == 699 || projectile.type == 707 || projectile.type == 708)
				{
					Vector2 vector38 = projectile.position + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
					Texture2D texture2D30 = Main.projectileTexture[projectile.type];
					Microsoft.Xna.Framework.Color alpha4 = projectile.GetAlpha(color25);
					Vector2 origin8 = new Vector2((float)texture2D30.Width, (float)texture2D30.Height) / 2f;
					if (projectile.type == 446)
					{
						origin8.Y = 4f;
					}
					if (projectile.type == 662 || projectile.type == 685)
					{
						origin8 = new Vector2(6f, 6f);
					}
					if (projectile.type == 699 || projectile.type == 708)
					{
						origin8 = new Vector2((projectile.spriteDirection == 1) ? ((float)texture2D30.Width - -8f) : -8f, -8f);
					}
					if (projectile.type == 502)
					{
						this.LoadProjectile(250);
						Texture2D texture2D31 = Main.projectileTexture[250];
						Vector2 origin9 = new Vector2((float)(texture2D31.Width / 2), 0f);
						Vector2 value43 = new Vector2((float)projectile.width, (float)projectile.height) / 2f;
						Microsoft.Xna.Framework.Color white2 = Microsoft.Xna.Framework.Color.White;
						white2.A = 127;
						for (int num272 = projectile.oldPos.Length - 1; num272 > 0; num272--)
						{
							Vector2 vector39 = projectile.oldPos[num272] + value43;
							if (!(vector39 == value43))
							{
								Vector2 vector40 = projectile.oldPos[num272 - 1] + value43;
								float rotation25 = (vector40 - vector39).ToRotation() - 1.57079637f;
								Vector2 scale10 = new Vector2(1f, Vector2.Distance(vector39, vector40) / (float)texture2D31.Height);
								Microsoft.Xna.Framework.Color color53 = white2 * (1f - (float)num272 / (float)projectile.oldPos.Length);
								Main.spriteBatch.Draw(texture2D31, vector39 - Main.screenPosition, null, color53, rotation25, origin9, scale10, spriteEffects, 0f);
							}
						}
					}
					else if (projectile.type == 540 && projectile.velocity != Vector2.Zero)
					{
						float num273 = 0f;
						if (projectile.ai[0] >= 10f)
						{
							num273 = (projectile.ai[0] - 10f) / 10f;
						}
						if (projectile.ai[0] >= 20f)
						{
							num273 = (20f - projectile.ai[0]) / 10f;
						}
						if (num273 > 1f)
						{
							num273 = 1f;
						}
						if (num273 < 0f)
						{
							num273 = 0f;
						}
						if (num273 != 0f)
						{
							Texture2D texture2D32 = Main.extraTexture[47];
							Vector2 origin10 = new Vector2((float)(texture2D32.Width / 2), 0f);
							Microsoft.Xna.Framework.Color color54 = alpha4 * num273 * 0.7f;
							Vector2 vector41 = projectile.Center - Main.screenPosition;
							Vector2 value44 = projectile.velocity.ToRotation().ToRotationVector2() * (float)texture2D30.Width / 3f;
							value44 = Vector2.Zero;
							vector41 += value44;
							float rotation26 = projectile.velocity.ToRotation() - 1.57079637f;
							Vector2 scale11 = new Vector2(1f, (projectile.velocity.Length() - value44.Length() * 2f) / (float)texture2D32.Height);
							Main.spriteBatch.Draw(texture2D32, vector41, null, color54, rotation26, origin10, scale11, SpriteEffects.None, 0f);
						}
					}
					if (projectile.type == 578 || projectile.type == 579 || projectile.type == 641)
					{
						Microsoft.Xna.Framework.Color color55 = alpha4 * 0.8f;
						color55.A /= 2;
						Microsoft.Xna.Framework.Color color56 = Microsoft.Xna.Framework.Color.Lerp(alpha4, Microsoft.Xna.Framework.Color.Black, 0.5f);
						color56.A = alpha4.A;
						float num274 = 0.95f + (projectile.rotation * 0.75f).ToRotationVector2().Y * 0.1f;
						color56 *= num274;
						float scale12 = 0.6f + projectile.scale * 0.6f * num274;
						Main.spriteBatch.Draw(Main.extraTexture[50], vector38, null, color56, -projectile.rotation + 0.35f, origin8, scale12, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
						Main.spriteBatch.Draw(Main.extraTexture[50], vector38, null, alpha4, -projectile.rotation, origin8, projectile.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
						Main.spriteBatch.Draw(texture2D30, vector38, null, color55, -projectile.rotation * 0.7f, origin8, projectile.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
						Main.spriteBatch.Draw(Main.extraTexture[50], vector38, null, alpha4 * 0.8f, projectile.rotation * 0.5f, origin8, projectile.scale * 0.9f, spriteEffects, 0f);
						alpha4.A = 0;
					}
					if (projectile.type == 617)
					{
						Microsoft.Xna.Framework.Color color57 = alpha4 * 0.8f;
						color57.A /= 2;
						Microsoft.Xna.Framework.Color color58 = Microsoft.Xna.Framework.Color.Lerp(alpha4, Microsoft.Xna.Framework.Color.Black, 0.5f);
						color58.A = alpha4.A;
						float num275 = 0.95f + (projectile.rotation * 0.75f).ToRotationVector2().Y * 0.1f;
						color58 *= num275;
						float scale13 = 0.6f + projectile.scale * 0.6f * num275;
						Main.spriteBatch.Draw(Main.extraTexture[50], vector38, null, color58, -projectile.rotation + 0.35f, origin8, scale13, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
						Main.spriteBatch.Draw(Main.extraTexture[50], vector38, null, alpha4, -projectile.rotation, origin8, projectile.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
						Main.spriteBatch.Draw(texture2D30, vector38, null, color57, -projectile.rotation * 0.7f, origin8, projectile.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
						Main.spriteBatch.Draw(Main.extraTexture[50], vector38, null, alpha4 * 0.8f, projectile.rotation * 0.5f, origin8, projectile.scale * 0.9f, spriteEffects, 0f);
						alpha4.A = 0;
					}
					bool flag27 = false;
					if (!(flag27 | (projectile.type == 464 && projectile.ai[1] != 1f)))
					{
						Main.spriteBatch.Draw(texture2D30, vector38, null, alpha4, projectile.rotation, origin8, projectile.scale, spriteEffects, 0f);
					}
					if (projectile.type == 464 && projectile.ai[1] != 1f)
					{
						texture2D30 = Main.extraTexture[35];
						Microsoft.Xna.Framework.Rectangle rectangle14 = texture2D30.Frame(1, 3, 0, 0);
						origin8 = rectangle14.Size() / 2f;
						Vector2 value45 = new Vector2(0f, -720f).RotatedBy((double)projectile.velocity.ToRotation(), default(Vector2));
						float scaleFactor3 = projectile.ai[0] % 45f / 45f;
						Vector2 spinningpoint4 = value45 * scaleFactor3;
						for (int num276 = 0; num276 < 6; num276++)
						{
							float num277 = (float)num276 * 6.28318548f / 6f;
							Vector2 value46 = projectile.Center + spinningpoint4.RotatedBy((double)num277, default(Vector2));
							Main.spriteBatch.Draw(texture2D30, value46 - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(rectangle14), alpha4, num277 + projectile.velocity.ToRotation() + 3.14159274f, origin8, projectile.scale, spriteEffects, 0f);
							rectangle14.Y += rectangle14.Height;
							if (rectangle14.Y >= texture2D30.Height)
							{
								rectangle14.Y = 0;
							}
						}
					}
					else if (projectile.type == 490)
					{
						Main.spriteBatch.Draw(Main.extraTexture[34], vector38, null, alpha4, -projectile.rotation, Main.extraTexture[34].Size() / 2f, projectile.scale, spriteEffects, 0f);
						Main.spriteBatch.Draw(texture2D30, vector38, null, alpha4, projectile.rotation, origin8, projectile.scale * 0.42f, spriteEffects, 0f);
						Main.spriteBatch.Draw(Main.extraTexture[34], vector38, null, alpha4, -projectile.rotation, Main.extraTexture[34].Size() / 2f, projectile.scale * 0.42f, spriteEffects, 0f);
					}
					else if (projectile.type == 616)
					{
						texture2D30 = Main.glowMaskTexture[193];
						Main.spriteBatch.Draw(texture2D30, vector38, null, new Microsoft.Xna.Framework.Color(127, 127, 127, 0), projectile.rotation, origin8, projectile.scale, spriteEffects, 0f);
					}
					else if (projectile.type >= 646 && projectile.type <= 649)
					{
						texture2D30 = Main.glowMaskTexture[203 + projectile.type - 646];
						Main.spriteBatch.Draw(texture2D30, vector38, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 127), projectile.rotation, origin8, projectile.scale, spriteEffects, 0f);
					}
					else if (projectile.type == 699)
					{
						texture2D30 = Main.glowMaskTexture[231];
						Main.spriteBatch.Draw(texture2D30, vector38, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 127), projectile.rotation, origin8, projectile.scale, spriteEffects, 0f);
					}
					else if (projectile.type == 707 || projectile.type == 708)
					{
						float scale14 = 0.5f;
						texture2D30 = Main.glowMaskTexture[232];
						Microsoft.Xna.Framework.Rectangle value47 = texture2D30.Frame(1, 3, 0, (int)(projectile.ai[0] % 9f) / 3);
						if (projectile.type == 708)
						{
							value47 = texture2D30.Frame(1, 3, 0, Main.player[projectile.owner].itemAnimation % 9 / 3);
							scale14 = 0.75f;
						}
						Microsoft.Xna.Framework.Color color59 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * scale14;
						float x3 = 2f;
						Vector2 spinningpoint5 = new Vector2(x3, 0f).RotatedBy((double)projectile.rotation, default(Vector2));
						for (float num278 = 0f; num278 < 4f; num278 += 1f)
						{
							Main.spriteBatch.Draw(texture2D30, vector38 + spinningpoint5.RotatedBy((double)(num278 * 1.57079637f), default(Vector2)), new Microsoft.Xna.Framework.Rectangle?(value47), color59 * 0.5f, projectile.rotation, origin8, projectile.scale, spriteEffects, 0f);
						}
						Main.spriteBatch.Draw(texture2D30, vector38, new Microsoft.Xna.Framework.Rectangle?(value47), color59, projectile.rotation, origin8, projectile.scale, spriteEffects, 0f);
					}
				}
				else if (projectile.type == 465 || projectile.type == 467 || projectile.type == 468 || projectile.type == 500 || projectile.type == 518 || projectile.type == 535 || projectile.type == 539 || projectile.type == 575 || projectile.type == 574 || projectile.type == 589 || projectile.type == 590 || projectile.type == 593 || projectile.type == 602 || projectile.type == 596 || projectile.type == 612 || projectile.type == 613 || projectile.type == 614 || projectile.type == 623 || projectile.type == 625 || projectile.type == 626 || projectile.type == 627 || projectile.type == 628 || projectile.type == 634 || projectile.type == 635 || projectile.type == 643 || projectile.type == 644 || projectile.type == 645 || projectile.type == 650 || projectile.type == 652 || projectile.type == 658 || projectile.type == 659 || projectile.type == 663 || projectile.type == 665 || projectile.type == 667 || projectile.type == 677 || projectile.type == 678 || projectile.type == 679 || projectile.type == 691 || projectile.type == 692 || projectile.type == 693 || projectile.type == 702 || projectile.type == 703 || projectile.type == 701 || projectile.type == 712)
				{
					Vector2 vector42 = projectile.position + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
					Texture2D texture2D33 = Main.projectileTexture[projectile.type];
					Microsoft.Xna.Framework.Rectangle rectangle15 = texture2D33.Frame(1, Main.projFrames[projectile.type], 0, projectile.frame);
					Microsoft.Xna.Framework.Color alpha5 = projectile.GetAlpha(color25);
					Vector2 origin11 = rectangle15.Size() / 2f;
					if (projectile.type == 539)
					{
						if (projectile.ai[0] >= 210f)
						{
							float num279 = projectile.ai[0] - 210f;
							num279 /= 20f;
							if (num279 > 1f)
							{
								num279 = 1f;
							}
							Main.spriteBatch.Draw(Main.extraTexture[46], vector42, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 128) * num279, projectile.rotation, new Vector2(17f, 22f), projectile.scale, spriteEffects, 0f);
						}
					}
					else if (projectile.type == 663 || projectile.type == 665 || projectile.type == 667)
					{
						vector42 = projectile.Bottom + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
						origin11 = rectangle15.Size() * new Vector2(0.5f, 1f);
						origin11.Y -= 2f;
						origin11.Y -= 2f;
					}
					else if (projectile.type == 691 || projectile.type == 692 || projectile.type == 693)
					{
						vector42 = projectile.Bottom + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
						origin11 = rectangle15.Size() * new Vector2(0.5f, 1f);
						origin11.Y -= 2f;
						origin11.Y -= 2f;
					}
					else if (projectile.type == 677 || projectile.type == 678 || projectile.type == 679)
					{
						if (projectile.spriteDirection == -1)
						{
							spriteEffects ^= (SpriteEffects.FlipHorizontally | SpriteEffects.FlipVertically);
						}
						Texture2D texture2D34 = Main.extraTexture[83];
						if (projectile.type == 678)
						{
							texture2D34 = Main.extraTexture[84];
						}
						if (projectile.type == 679)
						{
							texture2D34 = Main.extraTexture[85];
						}
						Vector2 position16 = projectile.Bottom + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
						Vector2 origin12 = texture2D34.Size() * new Vector2(0.5f, 1f);
						origin12.Y -= 2f;
						Main.spriteBatch.Draw(texture2D34, position16, null, alpha5, 0f, origin12, 1f, spriteEffects & SpriteEffects.FlipHorizontally, 0f);
						origin11.X += (float)spriteEffects.HasFlag(SpriteEffects.FlipHorizontally).ToDirectionInt();
						vector42.Y += 1f;
						vector42.Y += 2f;
						if (projectile.type == 678)
						{
							vector42.Y += -4f;
						}
						if (projectile.type == 679)
						{
							vector42.Y -= 2f;
							if (!spriteEffects.HasFlag(SpriteEffects.FlipVertically))
							{
								origin11.Y += 4f;
							}
							else
							{
								origin11.Y -= 4f;
							}
							origin11.X += (float)(spriteEffects.HasFlag(SpriteEffects.FlipHorizontally).ToDirectionInt() * 4);
						}
					}
					else if (projectile.type == 602)
					{
						origin11.X = (float)(rectangle15.Width - 6);
						origin11.Y -= 1f;
						rectangle15.Height -= 2;
					}
					else if (projectile.type == 589)
					{
						rectangle15 = texture2D33.Frame(5, 1, (int)projectile.ai[1], 0);
						origin11 = rectangle15.Size() / 2f;
					}
					else if (projectile.type == 590)
					{
						rectangle15 = texture2D33.Frame(3, 1, projectile.frame, 0);
						origin11 = rectangle15.Size() / 2f;
					}
					else if (projectile.type == 650)
					{
						origin11.Y -= 4f;
					}
					else if (projectile.type == 623)
					{
						alpha5.A /= 2;
					}
					else if (projectile.type >= 625 && projectile.type <= 628)
					{
						alpha5.A /= 2;
					}
					else if (projectile.type == 644)
					{
						Microsoft.Xna.Framework.Color color60 = Main.hslToRgb(projectile.ai[0], 1f, 0.5f).MultiplyRGBA(new Microsoft.Xna.Framework.Color(255, 255, 255, 0));
						Main.spriteBatch.Draw(texture2D33, vector42, new Microsoft.Xna.Framework.Rectangle?(rectangle15), color60, projectile.rotation, origin11, projectile.scale * 2f, spriteEffects, 0f);
						Main.spriteBatch.Draw(texture2D33, vector42, new Microsoft.Xna.Framework.Rectangle?(rectangle15), color60, 0f, origin11, projectile.scale * 2f, spriteEffects, 0f);
						if (projectile.ai[1] != -1f && projectile.Opacity > 0.3f)
						{
							Vector2 vector43 = Main.projectile[(int)projectile.ai[1]].Center - projectile.Center;
							Vector2 vector44 = new Vector2(1f, vector43.Length() / (float)texture2D33.Height);
							float rotation27 = vector43.ToRotation() + 1.57079637f;
							float num280 = MathHelper.Distance(30f, projectile.localAI[1]) / 20f;
							num280 = MathHelper.Clamp(num280, 0f, 1f);
							if (num280 > 0f)
							{
								Main.spriteBatch.Draw(texture2D33, vector42 + vector43 / 2f, new Microsoft.Xna.Framework.Rectangle?(rectangle15), color60 * num280, rotation27, origin11, vector44, spriteEffects, 0f);
								Main.spriteBatch.Draw(texture2D33, vector42 + vector43 / 2f, new Microsoft.Xna.Framework.Rectangle?(rectangle15), alpha5 * num280, rotation27, origin11, vector44 / 2f, spriteEffects, 0f);
							}
						}
					}
					else if (projectile.type == 658)
					{
						Microsoft.Xna.Framework.Color color61 = Main.hslToRgb(0.136f, 1f, 0.5f).MultiplyRGBA(new Microsoft.Xna.Framework.Color(255, 255, 255, 0));
						Main.spriteBatch.Draw(texture2D33, vector42, new Microsoft.Xna.Framework.Rectangle?(rectangle15), color61, 0f, origin11, new Vector2(1f, 5f) * projectile.scale * 2f, spriteEffects, 0f);
					}
					Main.spriteBatch.Draw(texture2D33, vector42, new Microsoft.Xna.Framework.Rectangle?(rectangle15), alpha5, projectile.rotation, origin11, projectile.scale, spriteEffects, 0f);
					if (projectile.type == 535)
					{
						for (int num281 = 0; num281 < 1000; num281++)
						{
							if (Main.projectile[num281].active && Main.projectile[num281].owner == projectile.owner && Main.projectile[num281].type == 536)
							{
								this.DrawProj(num281);
							}
						}
					}
					else if (projectile.type == 702)
					{
						Texture2D texture2D35 = Main.FlameTexture[5];
						Vector2 origin13 = texture2D35.Size() / 2f;
						Vector2 value48 = new Vector2((float)(5 * projectile.spriteDirection), -10f).RotatedBy((double)projectile.rotation, default(Vector2));
						ulong num282 = (ulong)(projectile.localAI[0] / 4f);
						for (int num283 = 0; num283 < 5; num283++)
						{
							Microsoft.Xna.Framework.Color color62 = new Microsoft.Xna.Framework.Color(100, 100, 100, 0);
							float x4 = (float)Utils.RandomInt(ref num282, -10, 11) * 0.15f;
							float y11 = (float)Utils.RandomInt(ref num282, -10, 1) * 0.35f;
							Main.spriteBatch.Draw(texture2D35, vector42 + value48 + new Vector2(x4, y11), null, color62, projectile.rotation, origin13, 1f, spriteEffects, 0f);
						}
					}
					else if (projectile.type == 663 || projectile.type == 665 || projectile.type == 667)
					{
						Texture2D texture2 = Main.glowMaskTexture[221];
						switch (projectile.type)
						{
						case 665:
							texture2 = Main.glowMaskTexture[222];
							break;
						case 667:
							texture2 = Main.glowMaskTexture[223];
							break;
						}
						float num284 = (projectile.localAI[0] / 100f * 6.28318548f).ToRotationVector2().X * 1f + 1f;
						Microsoft.Xna.Framework.Color color63 = new Microsoft.Xna.Framework.Color(140, 100, 40, 0) * (num284 / 4f + 0.5f) * 1f;
						for (float num285 = 0f; num285 < 4f; num285 += 1f)
						{
							Main.spriteBatch.Draw(texture2, vector42 + (num285 * 1.57079637f).ToRotationVector2() * num284, new Microsoft.Xna.Framework.Rectangle?(rectangle15), color63, projectile.rotation, origin11, projectile.scale, spriteEffects, 0f);
						}
					}
					else if (projectile.type == 644)
					{
						Main.spriteBatch.Draw(texture2D33, vector42, new Microsoft.Xna.Framework.Rectangle?(rectangle15), alpha5, 0f, origin11, projectile.scale, spriteEffects, 0f);
					}
					else if (projectile.type == 658)
					{
						Main.spriteBatch.Draw(texture2D33, vector42, new Microsoft.Xna.Framework.Rectangle?(rectangle15), alpha5, 0f, origin11, new Vector2(1f, 8f) * projectile.scale, spriteEffects, 0f);
					}
					else if (projectile.type == 602)
					{
						texture2D33 = Main.extraTexture[60];
						Microsoft.Xna.Framework.Color color64 = alpha5;
						color64.A = 0;
						color64 *= 0.3f;
						origin11 = texture2D33.Size() / 2f;
						Main.spriteBatch.Draw(texture2D33, vector42, null, color64, projectile.rotation - 1.57079637f, origin11, projectile.scale, spriteEffects, 0f);
						texture2D33 = Main.extraTexture[59];
						color64 = alpha5;
						color64.A = 0;
						color64 *= 0.13f;
						origin11 = texture2D33.Size() / 2f;
						Main.spriteBatch.Draw(texture2D33, vector42, null, color64, projectile.rotation - 1.57079637f, origin11, projectile.scale * 0.9f, spriteEffects, 0f);
					}
					else if (projectile.type == 539)
					{
						Main.spriteBatch.Draw(Main.glowMaskTexture[140], vector42, new Microsoft.Xna.Framework.Rectangle?(rectangle15), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), projectile.rotation, origin11, projectile.scale, spriteEffects, 0f);
					}
					else if (projectile.type == 613)
					{
						Main.spriteBatch.Draw(Main.glowMaskTexture[189], vector42, new Microsoft.Xna.Framework.Rectangle?(rectangle15), new Microsoft.Xna.Framework.Color(128 - projectile.alpha / 2, 128 - projectile.alpha / 2, 128 - projectile.alpha / 2, 0), projectile.rotation, origin11, projectile.scale, spriteEffects, 0f);
					}
					else if (projectile.type == 614)
					{
						Main.spriteBatch.Draw(Main.glowMaskTexture[190], vector42, new Microsoft.Xna.Framework.Rectangle?(rectangle15), new Microsoft.Xna.Framework.Color(128 - projectile.alpha / 2, 128 - projectile.alpha / 2, 128 - projectile.alpha / 2, 0), projectile.rotation, origin11, projectile.scale, spriteEffects, 0f);
					}
					else if (projectile.type == 574)
					{
						Main.spriteBatch.Draw(Main.glowMaskTexture[148], vector42, new Microsoft.Xna.Framework.Rectangle?(rectangle15), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), projectile.rotation, origin11, projectile.scale, spriteEffects, 0f);
					}
					else if (projectile.type == 691 || projectile.type == 692 || projectile.type == 693)
					{
						Texture2D texture3 = Main.glowMaskTexture[235];
						switch (projectile.type)
						{
						case 692:
							texture3 = Main.glowMaskTexture[236];
							break;
						case 693:
							texture3 = Main.glowMaskTexture[237];
							break;
						}
						Main.spriteBatch.Draw(texture3, vector42, new Microsoft.Xna.Framework.Rectangle?(rectangle15), new Microsoft.Xna.Framework.Color(255, 255, 255, 127), projectile.rotation, origin11, projectile.scale, spriteEffects, 0f);
					}
					else if (projectile.type == 590)
					{
						Main.spriteBatch.Draw(Main.glowMaskTexture[168], vector42, new Microsoft.Xna.Framework.Rectangle?(rectangle15), new Microsoft.Xna.Framework.Color(127 - projectile.alpha / 2, 127 - projectile.alpha / 2, 127 - projectile.alpha / 2, 0), projectile.rotation, origin11, projectile.scale, spriteEffects, 0f);
					}
					else if (projectile.type == 623 || (projectile.type >= 625 && projectile.type <= 628))
					{
						if (Main.player[projectile.owner].ghostFade != 0f)
						{
							float scaleFactor4 = Main.player[projectile.owner].ghostFade * 5f;
							for (float num286 = 0f; num286 < 4f; num286 += 1f)
							{
								Main.spriteBatch.Draw(texture2D33, vector42 + Vector2.UnitY.RotatedBy((double)(num286 * 6.28318548f / 4f), default(Vector2)) * scaleFactor4, new Microsoft.Xna.Framework.Rectangle?(rectangle15), alpha5 * 0.1f, projectile.rotation, origin11, projectile.scale, spriteEffects, 0f);
							}
						}
					}
					else if (projectile.type == 643)
					{
						float scaleFactor5 = (float)Math.Cos((double)(6.28318548f * (projectile.localAI[0] / 60f))) + 3f + 3f;
						for (float num287 = 0f; num287 < 4f; num287 += 1f)
						{
							Main.spriteBatch.Draw(texture2D33, vector42 + Vector2.UnitY.RotatedBy((double)(num287 * 1.57079637f), default(Vector2)) * scaleFactor5, new Microsoft.Xna.Framework.Rectangle?(rectangle15), alpha5 * 0.2f, projectile.rotation, origin11, projectile.scale, spriteEffects, 0f);
						}
					}
					else if (projectile.type == 650)
					{
						int num288 = (int)(projectile.localAI[0] / 6.28318548f);
						float f = projectile.localAI[0] % 6.28318548f - 3.14159274f;
						float num289 = (float)Math.IEEERemainder((double)projectile.localAI[1], 1.0);
						if (num289 < 0f)
						{
							num289 += 1f;
						}
						int num290 = (int)Math.Floor((double)projectile.localAI[1]);
						float scaleFactor6 = 5f;
						float scale15 = 1f + (float)num290 * 0.02f;
						if ((float)num288 == 1f)
						{
							scaleFactor6 = 7f;
						}
						Vector2 value49 = f.ToRotationVector2() * num289 * scaleFactor6 * projectile.scale;
						texture2D33 = Main.extraTexture[66];
						Main.spriteBatch.Draw(texture2D33, vector42 + value49, null, alpha5, projectile.rotation, texture2D33.Size() / 2f, scale15, SpriteEffects.None, 0f);
					}
				}
				else if (projectile.type == 466)
				{
					Vector2 end = projectile.position + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
					Texture2D tex3 = Main.extraTexture[33];
					projectile.GetAlpha(color25);
					Vector2 scale16 = new Vector2(projectile.scale) / 2f;
					for (int num291 = 0; num291 < 3; num291++)
					{
						if (num291 == 0)
						{
							scale16 = new Vector2(projectile.scale) * 0.6f;
							DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(115, 204, 219, 0) * 0.5f;
						}
						else if (num291 == 1)
						{
							scale16 = new Vector2(projectile.scale) * 0.4f;
							DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(113, 251, 255, 0) * 0.5f;
						}
						else
						{
							scale16 = new Vector2(projectile.scale) * 0.2f;
							DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * 0.5f;
						}
						DelegateMethods.f_1 = 1f;
						for (int num292 = projectile.oldPos.Length - 1; num292 > 0; num292--)
						{
							if (!(projectile.oldPos[num292] == Vector2.Zero))
							{
								Vector2 start = projectile.oldPos[num292] + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
								Vector2 end2 = projectile.oldPos[num292 - 1] + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
								Utils.DrawLaser(Main.spriteBatch, tex3, start, end2, scale16, new Utils.LaserLineFraming(DelegateMethods.LightningLaserDraw));
							}
						}
						if (projectile.oldPos[0] != Vector2.Zero)
						{
							DelegateMethods.f_1 = 1f;
							Vector2 start2 = projectile.oldPos[0] + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
							Utils.DrawLaser(Main.spriteBatch, tex3, start2, end, scale16, new Utils.LaserLineFraming(DelegateMethods.LightningLaserDraw));
						}
					}
				}
				else if (projectile.type == 580)
				{
					Vector2 end3 = projectile.position + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
					Texture2D tex4 = Main.extraTexture[33];
					projectile.GetAlpha(color25);
					Vector2 scale17 = new Vector2(projectile.scale) / 2f;
					for (int num293 = 0; num293 < 2; num293++)
					{
						float num294 = (projectile.localAI[1] == -1f || projectile.localAI[1] == 1f) ? -0.2f : 0f;
						if (num293 == 0)
						{
							scale17 = new Vector2(projectile.scale) * (0.5f + num294);
							DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(115, 244, 219, 0) * 0.5f;
						}
						else
						{
							scale17 = new Vector2(projectile.scale) * (0.3f + num294);
							DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * 0.5f;
						}
						DelegateMethods.f_1 = 1f;
						for (int num295 = projectile.oldPos.Length - 1; num295 > 0; num295--)
						{
							if (!(projectile.oldPos[num295] == Vector2.Zero))
							{
								Vector2 start3 = projectile.oldPos[num295] + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
								Vector2 end4 = projectile.oldPos[num295 - 1] + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
								Utils.DrawLaser(Main.spriteBatch, tex4, start3, end4, scale17, new Utils.LaserLineFraming(DelegateMethods.LightningLaserDraw));
							}
						}
						if (projectile.oldPos[0] != Vector2.Zero)
						{
							DelegateMethods.f_1 = 1f;
							Vector2 start4 = projectile.oldPos[0] + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
							Utils.DrawLaser(Main.spriteBatch, tex4, start4, end3, scale17, new Utils.LaserLineFraming(DelegateMethods.LightningLaserDraw));
						}
					}
				}
				else if (projectile.type == 445)
				{
					Vector2 vector45 = projectile.position + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
					Texture2D texture2D36 = Main.projectileTexture[projectile.type];
					Microsoft.Xna.Framework.Color alpha6 = projectile.GetAlpha(color25);
					Vector2 vector46 = Main.player[projectile.owner].RotatedRelativePoint(mountedCenter, true) + Vector2.UnitY * Main.player[projectile.owner].gfxOffY;
					Vector2 vector47 = vector45 + Main.screenPosition - vector46;
					Vector2 value50 = Vector2.Normalize(vector47);
					float num296 = vector47.Length();
					float num297 = vector47.ToRotation() + 1.57079637f;
					float num298 = -5f;
					float num299 = num298 + 30f;
					new Vector2(2f, num296 - num299);
					Vector2 value51 = Vector2.Lerp(vector45 + Main.screenPosition, vector46 + value50 * num299, 0.5f);
					Vector2 vector48 = -Vector2.UnitY.RotatedBy((double)(projectile.localAI[0] / 60f * 3.14159274f), default(Vector2));
					Vector2[] array7 = new Vector2[]
					{
						vector48,
						vector48.RotatedBy(1.5707963705062866, default(Vector2)),
						vector48.RotatedBy(3.1415927410125732, default(Vector2)),
						vector48.RotatedBy(4.71238911151886, default(Vector2))
					};
					if (num296 > num299)
					{
						for (int num300 = 0; num300 < 2; num300++)
						{
							Microsoft.Xna.Framework.Color color65 = Microsoft.Xna.Framework.Color.White;
							if (num300 % 2 == 0)
							{
								color65 = Microsoft.Xna.Framework.Color.LimeGreen;
								color65.A = 128;
								color65 *= 0.5f;
							}
							else
							{
								color65 = Microsoft.Xna.Framework.Color.CornflowerBlue;
								color65.A = 128;
								color65 *= 0.5f;
							}
							Vector2 value52 = new Vector2(array7[num300].X, 0f).RotatedBy((double)num297, default(Vector2)) * 4f;
							Main.spriteBatch.Draw(Main.magicPixel, value51 - Main.screenPosition + value52, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), color65, num297, Vector2.One / 2f, new Vector2(2f, num296 - num299), spriteEffects, 0f);
						}
					}
					Texture2D texture2D37 = Main.itemTexture[Main.player[projectile.owner].inventory[Main.player[projectile.owner].selectedItem].type];
					Microsoft.Xna.Framework.Color color66 = Lighting.GetColor((int)vector46.X / 16, (int)vector46.Y / 16);
					Main.spriteBatch.Draw(texture2D37, vector46 - Main.screenPosition + value50 * num298, null, color66, projectile.rotation + 1.57079637f + ((spriteEffects == SpriteEffects.None) ? 3.14159274f : 0f), new Vector2((float)((spriteEffects == SpriteEffects.None) ? 0 : texture2D37.Width), (float)texture2D37.Height / 2f) + Vector2.UnitY * 1f, Main.player[projectile.owner].inventory[Main.player[projectile.owner].selectedItem].scale, spriteEffects, 0f);
					Main.spriteBatch.Draw(Main.glowMaskTexture[39], vector46 - Main.screenPosition + value50 * num298, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), projectile.rotation + 1.57079637f + ((spriteEffects == SpriteEffects.None) ? 3.14159274f : 0f), new Vector2((float)((spriteEffects == SpriteEffects.None) ? 0 : texture2D37.Width), (float)texture2D37.Height / 2f) + Vector2.UnitY * 1f, Main.player[projectile.owner].inventory[Main.player[projectile.owner].selectedItem].scale, spriteEffects, 0f);
					if (num296 > num299)
					{
						for (int num301 = 2; num301 < 4; num301++)
						{
							Microsoft.Xna.Framework.Color color67 = Microsoft.Xna.Framework.Color.White;
							if (num301 % 2 == 0)
							{
								color67 = Microsoft.Xna.Framework.Color.LimeGreen;
								color67.A = 128;
								color67 *= 0.5f;
							}
							else
							{
								color67 = Microsoft.Xna.Framework.Color.CornflowerBlue;
								color67.A = 128;
								color67 *= 0.5f;
							}
							Vector2 value53 = new Vector2(array7[num301].X, 0f).RotatedBy((double)num297, default(Vector2)) * 4f;
							Main.spriteBatch.Draw(Main.magicPixel, value51 - Main.screenPosition + value53, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), color67, num297, Vector2.One / 2f, new Vector2(2f, num296 - num299), spriteEffects, 0f);
						}
					}
					float num302 = projectile.localAI[0] / 60f;
					if (num302 > 0.5f)
					{
						num302 = 1f - num302;
					}
					Main.spriteBatch.Draw(texture2D36, vector45, null, alpha6 * num302 * 2f, projectile.rotation, new Vector2((float)texture2D36.Width, (float)texture2D36.Height) / 2f, projectile.scale, spriteEffects, 0f);
					Main.spriteBatch.Draw(Main.glowMaskTexture[40], vector45, null, alpha6 * (0.5f - num302) * 2f, projectile.rotation, new Vector2((float)texture2D36.Width, (float)texture2D36.Height) / 2f, projectile.scale, spriteEffects, 0f);
				}
				else if ((projectile.type >= 393 && projectile.type <= 395) || projectile.type == 398 || projectile.type == 423 || projectile.type == 450)
				{
					Texture2D texture2D38 = Main.projectileTexture[projectile.type];
					int num303 = Main.projectileTexture[projectile.type].Height / Main.projFrames[projectile.type];
					int y12 = num303 * projectile.frame;
					Main.spriteBatch.Draw(texture2D38, projectile.Center - Main.screenPosition + new Vector2(0f, projectile.gfxOffY - 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y12, texture2D38.Width, num303)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D38.Width / 2f, (float)num303 / 2f), projectile.scale, spriteEffects, 0f);
					if (projectile.type == 398)
					{
						texture2D38 = Main.miniMinotaurTexture;
						Main.spriteBatch.Draw(texture2D38, projectile.Center - Main.screenPosition + new Vector2(0f, projectile.gfxOffY - 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y12, texture2D38.Width, num303)), new Microsoft.Xna.Framework.Color(250, 250, 250, projectile.alpha), projectile.rotation, new Vector2((float)texture2D38.Width / 2f, (float)num303 / 2f), projectile.scale, spriteEffects, 0f);
					}
					if (projectile.type == 423)
					{
						texture2D38 = Main.glowMaskTexture[0];
						Main.spriteBatch.Draw(texture2D38, projectile.Center - Main.screenPosition + new Vector2(0f, projectile.gfxOffY - 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y12, texture2D38.Width, num303)), new Microsoft.Xna.Framework.Color(250, 250, 250, projectile.alpha), projectile.rotation, new Vector2((float)texture2D38.Width / 2f, (float)num303 / 2f), projectile.scale, spriteEffects, 0f);
					}
				}
				else if (projectile.type == 385)
				{
					Texture2D texture2D39 = Main.projectileTexture[projectile.type];
					int num304 = texture2D39.Height / Main.projFrames[projectile.type];
					int y13 = num304 * projectile.frame;
					int num305 = 8;
					int num306 = 2;
					float value54 = 0.4f;
					for (int num307 = 1; num307 < num305; num307 += num306)
					{
						Vector2 arg_FBB3_0 = projectile.oldPos[num307];
						Microsoft.Xna.Framework.Color color68 = color25;
						color68 = projectile.GetAlpha(color68);
						color68 *= (float)(num305 - num307) / 15f;
						Microsoft.Xna.Framework.Color alpha7 = projectile.GetAlpha(color25);
						Vector2 _ = projectile.oldPos[num307] - Main.screenPosition + new Vector2(num149 + (float)num148, (float)(projectile.height / 2) + projectile.gfxOffY);
						Main.spriteBatch.Draw(texture2D39, projectile.oldPos[num307] + new Vector2((float)projectile.width, (float)projectile.height) / 2f - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y13, texture2D39.Width, num304)), Microsoft.Xna.Framework.Color.Lerp(alpha7, color68, 0.3f), projectile.rotation, new Vector2((float)texture2D39.Width / 2f, (float)num304 / 2f), MathHelper.Lerp(projectile.scale, value54, (float)num307 / 15f), spriteEffects, 0f);
					}
					Main.spriteBatch.Draw(texture2D39, projectile.Center - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y13, texture2D39.Width, num304)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D39.Width / 2f, (float)num304 / 2f), projectile.scale, spriteEffects, 0f);
				}
				else if (projectile.type == 388)
				{
					Texture2D texture2D40 = Main.projectileTexture[projectile.type];
					int num308 = texture2D40.Height / Main.projFrames[projectile.type];
					int y14 = num308 * projectile.frame;
					int num309;
					int num310;
					if (projectile.ai[0] == 2f)
					{
						num309 = 10;
						num310 = 1;
					}
					else
					{
						num310 = 2;
						num309 = 5;
					}
					for (int num311 = 1; num311 < num309; num311 += num310)
					{
						Vector2 arg_FE5C_0 = Main.npc[i].oldPos[num311];
						Microsoft.Xna.Framework.Color color69 = color25;
						color69 = projectile.GetAlpha(color69);
						color69 *= (float)(num309 - num311) / 15f;
						Vector2 position17 = projectile.oldPos[num311] - Main.screenPosition + new Vector2(num149 + (float)num148, (float)(projectile.height / 2) + projectile.gfxOffY);
						Main.spriteBatch.Draw(texture2D40, position17, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y14, texture2D40.Width, num308)), color69, projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), projectile.scale, spriteEffects, 0f);
					}
					Main.spriteBatch.Draw(texture2D40, projectile.position - Main.screenPosition + new Vector2(num149 + (float)num148, (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y14, texture2D40.Width, num308)), projectile.GetAlpha(color25), projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), projectile.scale, spriteEffects, 0f);
				}
				else if (Main.projFrames[projectile.type] > 1)
				{
					int num312 = Main.projectileTexture[projectile.type].Height / Main.projFrames[projectile.type];
					int y15 = num312 * projectile.frame;
					if (projectile.type == 111)
					{
						int r = (int)Main.player[projectile.owner].shirtColor.R;
						int g = (int)Main.player[projectile.owner].shirtColor.G;
						int b = (int)Main.player[projectile.owner].shirtColor.B;
						Microsoft.Xna.Framework.Color oldColor = new Microsoft.Xna.Framework.Color((int)((byte)r), (int)((byte)g), (int)((byte)b));
						color25 = Lighting.GetColor((int)((double)projectile.position.X + (double)projectile.width * 0.5) / 16, (int)(((double)projectile.position.Y + (double)projectile.height * 0.5) / 16.0), oldColor);
						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], new Vector2(projectile.position.X - Main.screenPosition.X + num149 + (float)num148, projectile.position.Y - Main.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y15, Main.projectileTexture[projectile.type].Width, num312)), projectile.GetAlpha(color25), projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), projectile.scale, spriteEffects, 0f);
					}
					else
					{
						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], new Vector2(projectile.position.X - Main.screenPosition.X + num149 + (float)num148, projectile.position.Y - Main.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y15, Main.projectileTexture[projectile.type].Width, num312 - 1)), projectile.GetAlpha(color25), projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), projectile.scale, spriteEffects, 0f);
						if (projectile.type == 387)
						{
							Main.spriteBatch.Draw(Main.eyeLaserSmallTexture, new Vector2(projectile.position.X - Main.screenPosition.X + num149 + (float)num148, projectile.position.Y - Main.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y15, Main.projectileTexture[projectile.type].Width, num312)), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), projectile.scale, spriteEffects, 0f);
						}
					}
				}
				else if (projectile.type == 383 || projectile.type == 399)
				{
					Texture2D texture2D41 = Main.projectileTexture[projectile.type];
					Main.spriteBatch.Draw(texture2D41, projectile.Center - Main.screenPosition, null, projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D41.Width, (float)texture2D41.Height) / 2f, projectile.scale, spriteEffects, 0f);
				}
				else if (projectile.type == 157 || projectile.type == 378)
				{
					Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], new Vector2(projectile.position.X - Main.screenPosition.X + (float)(projectile.width / 2), projectile.position.Y - Main.screenPosition.Y + (float)(projectile.height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.projectileTexture[projectile.type].Width, Main.projectileTexture[projectile.type].Height)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)(Main.projectileTexture[projectile.type].Width / 2), (float)(Main.projectileTexture[projectile.type].Height / 2)), projectile.scale, spriteEffects, 0f);
				}
				else if (projectile.type == 306)
				{
					Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], new Vector2(projectile.position.X - Main.screenPosition.X + (float)(projectile.width / 2), projectile.position.Y - Main.screenPosition.Y + (float)(projectile.height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.projectileTexture[projectile.type].Width, Main.projectileTexture[projectile.type].Height)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)(Main.projectileTexture[projectile.type].Width / 2), (float)(Main.projectileTexture[projectile.type].Height / 2)), projectile.scale, spriteEffects, 0f);
				}
				else if (projectile.type == 256)
				{
					Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], new Vector2(projectile.position.X - Main.screenPosition.X + (float)(projectile.width / 2), projectile.position.Y - Main.screenPosition.Y + (float)(projectile.height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.projectileTexture[projectile.type].Width, Main.projectileTexture[projectile.type].Height)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)(Main.projectileTexture[projectile.type].Width / 2), (float)(Main.projectileTexture[projectile.type].Height / 2)), projectile.scale, spriteEffects, 0f);
				}
				else if (projectile.aiStyle == 27)
				{
					Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], new Vector2(projectile.position.X - Main.screenPosition.X + (float)(projectile.width / 2), projectile.position.Y - Main.screenPosition.Y + (float)(projectile.height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.projectileTexture[projectile.type].Width, Main.projectileTexture[projectile.type].Height)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)Main.projectileTexture[projectile.type].Width, 0f), projectile.scale, spriteEffects, 0f);
				}
				else if (projectile.aiStyle == 19)
				{
					Vector2 zero = Vector2.Zero;
					if (projectile.spriteDirection == -1)
					{
						zero.X = (float)Main.projectileTexture[projectile.type].Width;
					}
					Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], new Vector2(projectile.position.X - Main.screenPosition.X + (float)(projectile.width / 2), projectile.position.Y - Main.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.projectileTexture[projectile.type].Width, Main.projectileTexture[projectile.type].Height)), projectile.GetAlpha(color25), projectile.rotation, zero, projectile.scale, spriteEffects, 0f);
				}
				else if (projectile.type == 451)
				{
					Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], projectile.Center - Main.screenPosition, null, projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)Main.projectileTexture[projectile.type].Width, 0f), projectile.scale, spriteEffects, 0f);
				}
				else if (projectile.type == 434)
				{
					Vector2 value55 = new Vector2(projectile.ai[0], projectile.ai[1]);
					Vector2 v = projectile.position - value55;
					float num313 = (float)Math.Sqrt((double)(v.X * v.X + v.Y * v.Y));
					new Vector2(4f, num313);
					float rotation28 = v.ToRotation() + 1.57079637f;
					Vector2 value56 = Vector2.Lerp(projectile.position, value55, 0.5f);
					Microsoft.Xna.Framework.Color color70 = Microsoft.Xna.Framework.Color.Red;
					color70.A = 0;
					Microsoft.Xna.Framework.Color color71 = Microsoft.Xna.Framework.Color.White;
					color70 *= projectile.localAI[0];
					color71 *= projectile.localAI[0];
					float num314 = (float)Math.Sqrt((double)(projectile.damage / 50));
					Main.spriteBatch.Draw(Main.magicPixel, value56 - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), color70, rotation28, Vector2.One / 2f, new Vector2(2f * num314, num313 + 8f), spriteEffects, 0f);
					Main.spriteBatch.Draw(Main.magicPixel, value56 - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), color70, rotation28, Vector2.One / 2f, new Vector2(4f * num314, num313), spriteEffects, 0f);
					Main.spriteBatch.Draw(Main.magicPixel, value56 - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), color71, rotation28, Vector2.One / 2f, new Vector2(2f * num314, num313), spriteEffects, 0f);
				}
				else
				{
					if (projectile.type == 94 && projectile.ai[1] > 6f)
					{
						for (int num315 = 0; num315 < 10; num315++)
						{
							Microsoft.Xna.Framework.Color alpha8 = projectile.GetAlpha(color25);
							float num316 = (float)(9 - num315) / 9f;
							alpha8.R = (byte)((float)alpha8.R * num316);
							alpha8.G = (byte)((float)alpha8.G * num316);
							alpha8.B = (byte)((float)alpha8.B * num316);
							alpha8.A = (byte)((float)alpha8.A * num316);
							float num317 = (float)(9 - num315) / 9f;
							Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], new Vector2(projectile.oldPos[num315].X - Main.screenPosition.X + num149 + (float)num148, projectile.oldPos[num315].Y - Main.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.projectileTexture[projectile.type].Width, Main.projectileTexture[projectile.type].Height)), alpha8, projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), num317 * projectile.scale, spriteEffects, 0f);
						}
					}
					if (projectile.type == 301)
					{
						for (int num318 = 0; num318 < 10; num318++)
						{
							Microsoft.Xna.Framework.Color alpha9 = projectile.GetAlpha(color25);
							float num319 = (float)(9 - num318) / 9f;
							alpha9.R = (byte)((float)alpha9.R * num319);
							alpha9.G = (byte)((float)alpha9.G * num319);
							alpha9.B = (byte)((float)alpha9.B * num319);
							alpha9.A = (byte)((float)alpha9.A * num319);
							float num320 = (float)(9 - num318) / 9f;
							Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], new Vector2(projectile.oldPos[num318].X - Main.screenPosition.X + num149 + (float)num148, projectile.oldPos[num318].Y - Main.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.projectileTexture[projectile.type].Width, Main.projectileTexture[projectile.type].Height)), alpha9, projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), num320 * projectile.scale, spriteEffects, 0f);
						}
					}
					if (projectile.type == 323 && projectile.alpha == 0)
					{
						for (int num321 = 1; num321 < 8; num321++)
						{
							float num322 = projectile.velocity.X * (float)num321;
							float num323 = projectile.velocity.Y * (float)num321;
							Microsoft.Xna.Framework.Color alpha10 = projectile.GetAlpha(color25);
							float num324 = 0f;
							if (num321 == 1)
							{
								num324 = 0.7f;
							}
							if (num321 == 2)
							{
								num324 = 0.6f;
							}
							if (num321 == 3)
							{
								num324 = 0.5f;
							}
							if (num321 == 4)
							{
								num324 = 0.4f;
							}
							if (num321 == 5)
							{
								num324 = 0.3f;
							}
							if (num321 == 6)
							{
								num324 = 0.2f;
							}
							if (num321 == 7)
							{
								num324 = 0.1f;
							}
							alpha10.R = (byte)((float)alpha10.R * num324);
							alpha10.G = (byte)((float)alpha10.G * num324);
							alpha10.B = (byte)((float)alpha10.B * num324);
							alpha10.A = (byte)((float)alpha10.A * num324);
							Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], new Vector2(projectile.position.X - Main.screenPosition.X + num149 + (float)num148 - num322, projectile.position.Y - Main.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY - num323), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.projectileTexture[projectile.type].Width, Main.projectileTexture[projectile.type].Height)), alpha10, projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), num324 + 0.2f, spriteEffects, 0f);
						}
					}
					if (projectile.type == 117 && projectile.ai[0] > 3f)
					{
						for (int num325 = 1; num325 < 5; num325++)
						{
							float num326 = projectile.velocity.X * (float)num325;
							float num327 = projectile.velocity.Y * (float)num325;
							Microsoft.Xna.Framework.Color alpha11 = projectile.GetAlpha(color25);
							float num328 = 0f;
							if (num325 == 1)
							{
								num328 = 0.4f;
							}
							if (num325 == 2)
							{
								num328 = 0.3f;
							}
							if (num325 == 3)
							{
								num328 = 0.2f;
							}
							if (num325 == 4)
							{
								num328 = 0.1f;
							}
							alpha11.R = (byte)((float)alpha11.R * num328);
							alpha11.G = (byte)((float)alpha11.G * num328);
							alpha11.B = (byte)((float)alpha11.B * num328);
							alpha11.A = (byte)((float)alpha11.A * num328);
							Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], new Vector2(projectile.position.X - Main.screenPosition.X + num149 + (float)num148 - num326, projectile.position.Y - Main.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY - num327), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.projectileTexture[projectile.type].Width, Main.projectileTexture[projectile.type].Height)), alpha11, projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), projectile.scale, spriteEffects, 0f);
						}
					}
					if (projectile.bobber)
					{
						if (projectile.ai[1] > 0f && projectile.ai[1] < 3884f && projectile.ai[0] == 1f)
						{
							int num329 = (int)projectile.ai[1];
							Vector2 center = projectile.Center;
							float num330 = projectile.rotation;
							Vector2 vector49 = center;
							float num331 = num - vector49.X;
							float num332 = num2 - vector49.Y;
							num330 = (float)Math.Atan2((double)num332, (double)num331);
							if (projectile.velocity.X > 0f)
							{
								spriteEffects = SpriteEffects.None;
								num330 = (float)Math.Atan2((double)num332, (double)num331);
								num330 += 0.785f;
								if (projectile.ai[1] == 2342f)
								{
									num330 -= 0.785f;
								}
							}
							else
							{
								spriteEffects = SpriteEffects.FlipHorizontally;
								num330 = (float)Math.Atan2((double)(-(double)num332), (double)(-(double)num331));
								num330 -= 0.785f;
								if (projectile.ai[1] == 2342f)
								{
									num330 += 0.785f;
								}
							}
							Main.spriteBatch.Draw(Main.itemTexture[num329], new Vector2(center.X - Main.screenPosition.X, center.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[num329].Width, Main.itemTexture[num329].Height)), color25, num330, new Vector2((float)(Main.itemTexture[num329].Width / 2), (float)(Main.itemTexture[num329].Height / 2)), projectile.scale, spriteEffects, 0f);
						}
						else if (projectile.ai[0] <= 1f)
						{
							Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], new Vector2(projectile.position.X - Main.screenPosition.X + num149 + (float)num148, projectile.position.Y - Main.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.projectileTexture[projectile.type].Width, Main.projectileTexture[projectile.type].Height)), projectile.GetAlpha(color25), projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), projectile.scale, spriteEffects, 0f);
						}
					}
					else
					{
						Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], new Vector2(projectile.position.X - Main.screenPosition.X + num149 + (float)num148, projectile.position.Y - Main.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.projectileTexture[projectile.type].Width, Main.projectileTexture[projectile.type].Height)), projectile.GetAlpha(color25), projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), projectile.scale, spriteEffects, 0f);
						if (projectile.glowMask != -1)
						{
							Main.spriteBatch.Draw(Main.glowMaskTexture[(int)projectile.glowMask], new Vector2(projectile.position.X - Main.screenPosition.X + num149 + (float)num148, projectile.position.Y - Main.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.projectileTexture[projectile.type].Width, Main.projectileTexture[projectile.type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, projectile.alpha), projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), projectile.scale, spriteEffects, 0f);
						}
						if (projectile.type == 473)
						{
							Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], new Vector2(projectile.position.X - Main.screenPosition.X + num149 + (float)num148, projectile.position.Y - Main.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.projectileTexture[projectile.type].Width, Main.projectileTexture[projectile.type].Height)), new Microsoft.Xna.Framework.Color(255, 255, 0, 0), projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), projectile.scale, spriteEffects, 0f);
						}
					}
					if (projectile.type == 106)
					{
						Main.spriteBatch.Draw(Main.lightDiscTexture, new Vector2(projectile.position.X - Main.screenPosition.X + num149 + (float)num148, projectile.position.Y - Main.screenPosition.Y + (float)(projectile.height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.projectileTexture[projectile.type].Width, Main.projectileTexture[projectile.type].Height)), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), projectile.scale, spriteEffects, 0f);
					}
					if (projectile.type == 554 || projectile.type == 603)
					{
						for (int num333 = 1; num333 < 5; num333++)
						{
							float num334 = projectile.velocity.X * (float)num333 * 0.5f;
							float num335 = projectile.velocity.Y * (float)num333 * 0.5f;
							Microsoft.Xna.Framework.Color alpha12 = projectile.GetAlpha(color25);
							float num336 = 0f;
							if (num333 == 1)
							{
								num336 = 0.4f;
							}
							if (num333 == 2)
							{
								num336 = 0.3f;
							}
							if (num333 == 3)
							{
								num336 = 0.2f;
							}
							if (num333 == 4)
							{
								num336 = 0.1f;
							}
							alpha12.R = (byte)((float)alpha12.R * num336);
							alpha12.G = (byte)((float)alpha12.G * num336);
							alpha12.B = (byte)((float)alpha12.B * num336);
							alpha12.A = (byte)((float)alpha12.A * num336);
							Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], new Vector2(projectile.position.X - Main.screenPosition.X + num149 + (float)num148 - num334, projectile.position.Y - Main.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY - num335), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.projectileTexture[projectile.type].Width, Main.projectileTexture[projectile.type].Height)), alpha12, projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), projectile.scale, spriteEffects, 0f);
						}
					}
					else if (projectile.type == 604)
					{
						int num337 = (int)projectile.ai[1] + 1;
						if (num337 > 7)
						{
							num337 = 7;
						}
						for (int num338 = 1; num338 < num337; num338++)
						{
							float num339 = projectile.velocity.X * (float)num338 * 1.5f;
							float num340 = projectile.velocity.Y * (float)num338 * 1.5f;
							Microsoft.Xna.Framework.Color alpha13 = projectile.GetAlpha(color25);
							if (num338 == 1)
							{
							}
							if (num338 == 2)
							{
							}
							if (num338 == 3)
							{
							}
							if (num338 == 4)
							{
							}
							float num341 = 0.4f - (float)num338 * 0.06f;
							num341 *= 1f - (float)projectile.alpha / 255f;
							alpha13.R = (byte)((float)alpha13.R * num341);
							alpha13.G = (byte)((float)alpha13.G * num341);
							alpha13.B = (byte)((float)alpha13.B * num341);
							alpha13.A = (byte)((float)alpha13.A * num341 / 2f);
							float num342 = projectile.scale;
							num342 -= (float)num338 * 0.1f;
							Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], new Vector2(projectile.position.X - Main.screenPosition.X + num149 + (float)num148 - num339, projectile.position.Y - Main.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY - num340), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.projectileTexture[projectile.type].Width, Main.projectileTexture[projectile.type].Height)), alpha13, projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), num342, spriteEffects, 0f);
						}
					}
					else if (projectile.type == 553)
					{
						for (int num343 = 1; num343 < 5; num343++)
						{
							float num344 = projectile.velocity.X * (float)num343 * 0.4f;
							float num345 = projectile.velocity.Y * (float)num343 * 0.4f;
							Microsoft.Xna.Framework.Color alpha14 = projectile.GetAlpha(color25);
							float num346 = 0f;
							if (num343 == 1)
							{
								num346 = 0.4f;
							}
							if (num343 == 2)
							{
								num346 = 0.3f;
							}
							if (num343 == 3)
							{
								num346 = 0.2f;
							}
							if (num343 == 4)
							{
								num346 = 0.1f;
							}
							alpha14.R = (byte)((float)alpha14.R * num346);
							alpha14.G = (byte)((float)alpha14.G * num346);
							alpha14.B = (byte)((float)alpha14.B * num346);
							alpha14.A = (byte)((float)alpha14.A * num346);
							Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], new Vector2(projectile.position.X - Main.screenPosition.X + num149 + (float)num148 - num344, projectile.position.Y - Main.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY - num345), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.projectileTexture[projectile.type].Width, Main.projectileTexture[projectile.type].Height)), alpha14, projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), projectile.scale, spriteEffects, 0f);
						}
					}
				}
			}
			if (projectile.type == 525 && (!Main.gamePaused || Main.gameMenu))
			{
				Vector2 vector50 = projectile.position - Main.screenPosition;
				if ((float)Main.mouseX > vector50.X && (float)Main.mouseX < vector50.X + (float)projectile.width && (float)Main.mouseY > vector50.Y && (float)Main.mouseY < vector50.Y + (float)projectile.height)
				{
					int num347 = (int)(Main.player[Main.myPlayer].Center.X / 16f);
					int num348 = (int)(Main.player[Main.myPlayer].Center.Y / 16f);
					int num349 = (int)projectile.Center.X / 16;
					int num350 = (int)projectile.Center.Y / 16;
					int lastTileRangeX = Main.player[Main.myPlayer].lastTileRangeX;
					int lastTileRangeY = Main.player[Main.myPlayer].lastTileRangeY;
					if (num347 >= num349 - lastTileRangeX && num347 <= num349 + lastTileRangeX + 1 && num348 >= num350 - lastTileRangeY && num348 <= num350 + lastTileRangeY + 1)
					{
						Main.player[Main.myPlayer].noThrow = 2;
						Main.player[Main.myPlayer].showItemIcon = true;
						Main.player[Main.myPlayer].showItemIcon2 = 3213;
						if (PlayerInput.UsingGamepad)
						{
							Main.player[Main.myPlayer].GamepadEnableGrappleCooldown();
						}
						if (Main.mouseRight && Main.mouseRightRelease && Player.StopMoneyTroughFromWorking == 0)
						{
							Main.mouseRightRelease = false;
							if (Main.player[Main.myPlayer].chest == -2)
							{
								Main.PlaySound(SoundID.Item59, -1, -1);
								Main.player[Main.myPlayer].chest = -1;
								Recipe.FindRecipes();
								return;
							}
							Main.player[Main.myPlayer].flyingPigChest = i;
							Main.player[Main.myPlayer].chest = -2;
							Main.player[Main.myPlayer].chestX = (int)(projectile.Center.X / 16f);
							Main.player[Main.myPlayer].chestY = (int)(projectile.Center.Y / 16f);
							Main.player[Main.myPlayer].talkNPC = -1;
							Main.npcShop = 0;
							Main.playerInventory = true;
							Main.PlaySound(SoundID.Item59, -1, -1);
							Recipe.FindRecipes();
						}
					}
				}
			}
		}

		private static Microsoft.Xna.Framework.Color buffColor(Microsoft.Xna.Framework.Color newColor, float R, float G, float B, float A)
		{
			newColor.R = (byte)((float)newColor.R * R);
			newColor.G = (byte)((float)newColor.G * G);
			newColor.B = (byte)((float)newColor.B * B);
			newColor.A = (byte)((float)newColor.A * A);
			return newColor;
		}

		protected void CacheNPCDraws()
		{
			this.DrawCacheNPCsMoonMoon.Clear();
			this.DrawCacheNPCsOverPlayers.Clear();
			this.DrawCacheNPCProjectiles.Clear();
			this.DrawCacheNPCsBehindNonSolidTiles.Clear();
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active)
				{
					if (Main.npc[i].type == 398 && Main.npc[i].ai[0] >= 0f)
					{
						int num = i;
						int num2 = -1;
						int num3 = -1;
						int num4 = -1;
						for (int j = 0; j < 200; j++)
						{
							if (Main.npc[j].active && Main.npc[j].ai[3] == (float)num)
							{
								if (num2 == -1 && Main.npc[j].type == 397 && Main.npc[j].ai[2] == 0f)
								{
									num2 = j;
								}
								if (num3 == -1 && Main.npc[j].type == 397 && Main.npc[j].ai[2] == 1f)
								{
									num3 = j;
								}
								if (num4 == -1 && Main.npc[j].type == 396)
								{
									num4 = j;
								}
								if (num2 != -1 && num3 != -1 && num4 != -1)
								{
									break;
								}
							}
						}
						if (num2 != -1 && num3 != -1 && num4 != -1)
						{
							this.DrawCacheNPCsMoonMoon.Add(num);
							if (num2 != -1)
							{
								this.DrawCacheNPCsMoonMoon.Add(num2);
							}
							if (num3 != -1)
							{
								this.DrawCacheNPCsMoonMoon.Add(num3);
							}
							if (num4 != -1)
							{
								this.DrawCacheNPCsMoonMoon.Add(num4);
							}
						}
					}
					else if (Main.npc[i].type == 421 && Main.npc[i].ai[0] == 5f)
					{
						this.DrawCacheNPCsOverPlayers.Add(i);
					}
					else if (Main.npc[i].type == 516 || Main.npc[i].type == 519)
					{
						this.DrawCacheNPCProjectiles.Add(i);
					}
					else if (Main.npc[i].type == 548)
					{
						this.DrawCacheNPCsBehindNonSolidTiles.Add(i);
					}
				}
			}
		}

		protected void CacheProjDraws()
		{
			this.DrawCacheProjsBehindNPCsAndTiles.Clear();
			this.DrawCacheProjsBehindNPCs.Clear();
			this.DrawCacheProjsBehindProjectiles.Clear();
			this.DrawCacheProjsOverWiresUI.Clear();
			for (int i = 0; i < 1000; i++)
			{
				if (Main.projectile[i].active)
				{
					if (Main.projectile[i].type == 578 || Main.projectile[i].type == 579 || Main.projectile[i].type == 641 || Main.projectile[i].type == 617)
					{
						this.DrawCacheProjsBehindNPCsAndTiles.Add(i);
					}
					if (Main.projectile[i].type == 625 || Main.projectile[i].type == 626 || Main.projectile[i].type == 627 || Main.projectile[i].type == 628)
					{
						this.DrawCacheProjsBehindProjectiles.Add(i);
					}
					if (Main.projectile[i].type == 651)
					{
						this.DrawCacheProjsOverWiresUI.Add(i);
					}
					if (Main.projectile[i].type == 673 || Main.projectile[i].type == 674 || Main.projectile[i].type == 691 || Main.projectile[i].type == 692 || Main.projectile[i].type == 693)
					{
						this.DrawCacheProjsBehindNPCs.Add(i);
					}
					if (Main.projectile[i].type == 636 || Main.projectile[i].type == 598)
					{
						bool flag = true;
						if (Main.projectile[i].ai[0] == 1f)
						{
							int num = (int)Main.projectile[i].ai[1];
							if (num >= 0 && num < 200 && Main.npc[num].active)
							{
								if (Main.npc[num].behindTiles)
								{
									this.DrawCacheProjsBehindNPCsAndTiles.Add(i);
								}
								else
								{
									this.DrawCacheProjsBehindNPCs.Add(i);
								}
								flag = false;
							}
						}
						if (flag)
						{
							this.DrawCacheProjsBehindProjectiles.Add(i);
						}
					}
				}
			}
		}

		protected void DrawCachedNPCs(List<int> npcCache, bool behindTiles)
		{
			for (int i = 0; i < npcCache.Count; i++)
			{
				try
				{
					this.DrawNPC(npcCache[i], behindTiles);
				}
				catch
				{
					Main.npc[npcCache[i]].active = false;
				}
			}
		}

		protected void DrawCachedProjs(List<int> projCache, bool startSpriteBatch = true)
		{
			if (startSpriteBatch)
			{
				Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, Main.Transform);
			}
			for (int i = 0; i < projCache.Count; i++)
			{
				try
				{
					this.DrawProj(projCache[i]);
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
					Main.projectile[projCache[i]].active = false;
				}
			}
			if (startSpriteBatch)
			{
				Main.spriteBatch.End();
			}
		}

		protected void SortDrawCacheWorms()
		{
			List<int> drawCacheProjsBehindProjectiles = this.DrawCacheProjsBehindProjectiles;
			if (drawCacheProjsBehindProjectiles.Count == 0)
			{
				return;
			}
			List<List<int>> list = new List<List<int>>();
			for (int i = 0; i < drawCacheProjsBehindProjectiles.Count; i++)
			{
				int num = drawCacheProjsBehindProjectiles[i];
				if (Main.projectile[num].type == 628)
				{
					drawCacheProjsBehindProjectiles.Remove(num);
					List<int> list2 = new List<int>();
					list2.Insert(0, num);
					int byUUID = Projectile.GetByUUID(Main.projectile[num].owner, Main.projectile[num].ai[0]);
					while (byUUID >= 0 && !list2.Contains(byUUID) && Main.projectile[byUUID].active && Main.projectile[byUUID].type >= 625 && Main.projectile[byUUID].type <= 627)
					{
						list2.Insert(0, byUUID);
						drawCacheProjsBehindProjectiles.Remove(byUUID);
						byUUID = Projectile.GetByUUID(Main.projectile[byUUID].owner, Main.projectile[byUUID].ai[0]);
					}
					list.Add(list2);
					i = -1;
				}
			}
			List<int> list3 = new List<int>(this.DrawCacheProjsBehindProjectiles);
			list.Add(list3);
			this.DrawCacheProjsBehindProjectiles.Clear();
			for (int j = 0; j < list.Count; j++)
			{
				for (int k = 0; k < list[j].Count; k++)
				{
					this.DrawCacheProjsBehindProjectiles.Add(list[j][k]);
				}
			}
			for (int l = 0; l < this.DrawCacheProjsBehindProjectiles.Count; l++)
			{
				Projectile projectile = Main.projectile[this.DrawCacheProjsBehindProjectiles[l]];
				int byUUID2 = Projectile.GetByUUID(projectile.owner, projectile.ai[0]);
				if (projectile.type >= 626 && projectile.type <= 628 && byUUID2 >= 0 && ProjectileID.Sets.StardustDragon[Main.projectile[byUUID2].type])
				{
					Vector2 vector = Main.projectile[byUUID2].Center - projectile.Center;
					if (vector != Vector2.Zero)
					{
						float num2 = Main.projectile[byUUID2].scale * 16f;
						float num3 = vector.Length();
						float num4 = num2 - num3;
						if (num4 != 0f)
						{
							projectile.Center += Vector2.Normalize(vector) * -num4;
						}
					}
				}
			}
		}

		protected void DrawWoF()
		{
			if (Main.wof >= 0 && Main.player[Main.myPlayer].gross)
			{
				for (int i = 0; i < 255; i++)
				{
					if (Main.player[i].active && Main.player[i].tongued && !Main.player[i].dead)
					{
						float num = Main.npc[Main.wof].position.X + (float)(Main.npc[Main.wof].width / 2);
						float num2 = Main.npc[Main.wof].position.Y + (float)(Main.npc[Main.wof].height / 2);
						Vector2 vector = new Vector2(Main.player[i].position.X + (float)Main.player[i].width * 0.5f, Main.player[i].position.Y + (float)Main.player[i].height * 0.5f);
						float num3 = num - vector.X;
						float num4 = num2 - vector.Y;
						float rotation = (float)Math.Atan2((double)num4, (double)num3) - 1.57f;
						bool flag = true;
						while (flag)
						{
							float num5 = (float)Math.Sqrt((double)(num3 * num3 + num4 * num4));
							if (num5 < 40f)
							{
								flag = false;
							}
							else
							{
								num5 = (float)Main.chain12Texture.Height / num5;
								num3 *= num5;
								num4 *= num5;
								vector.X += num3;
								vector.Y += num4;
								num3 = num - vector.X;
								num4 = num2 - vector.Y;
								Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f));
								Main.spriteBatch.Draw(Main.chain12Texture, new Vector2(vector.X - Main.screenPosition.X, vector.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain12Texture.Width, Main.chain12Texture.Height)), color, rotation, new Vector2((float)Main.chain12Texture.Width * 0.5f, (float)Main.chain12Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
							}
						}
					}
				}
				for (int j = 0; j < 200; j++)
				{
					if (Main.npc[j].active && Main.npc[j].aiStyle == 29)
					{
						float num6 = Main.npc[Main.wof].position.X + (float)(Main.npc[Main.wof].width / 2);
						float num7 = Main.npc[Main.wof].position.Y;
						float num8 = (float)(Main.wofB - Main.wofT);
						bool flag2 = false;
						if (Main.npc[j].frameCounter > 7.0)
						{
							flag2 = true;
						}
						num7 = (float)Main.wofT + num8 * Main.npc[j].ai[0];
						Vector2 vector2 = new Vector2(Main.npc[j].position.X + (float)(Main.npc[j].width / 2), Main.npc[j].position.Y + (float)(Main.npc[j].height / 2));
						float num9 = num6 - vector2.X;
						float num10 = num7 - vector2.Y;
						float rotation2 = (float)Math.Atan2((double)num10, (double)num9) - 1.57f;
						bool flag3 = true;
						while (flag3)
						{
							SpriteEffects effects = SpriteEffects.None;
							if (flag2)
							{
								effects = SpriteEffects.FlipHorizontally;
								flag2 = false;
							}
							else
							{
								flag2 = true;
							}
							int height = 28;
							float num11 = (float)Math.Sqrt((double)(num9 * num9 + num10 * num10));
							if (num11 < 40f)
							{
								height = (int)num11 - 40 + 28;
								flag3 = false;
							}
							num11 = 28f / num11;
							num9 *= num11;
							num10 *= num11;
							vector2.X += num9;
							vector2.Y += num10;
							num9 = num6 - vector2.X;
							num10 = num7 - vector2.Y;
							Microsoft.Xna.Framework.Color color2 = Lighting.GetColor((int)vector2.X / 16, (int)(vector2.Y / 16f));
							Main.spriteBatch.Draw(Main.chain12Texture, new Vector2(vector2.X - Main.screenPosition.X, vector2.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain4Texture.Width, height)), color2, rotation2, new Vector2((float)Main.chain4Texture.Width * 0.5f, (float)Main.chain4Texture.Height * 0.5f), 1f, effects, 0f);
						}
					}
				}
				int num12 = 140;
				float num13 = (float)Main.wofT;
				float num14 = (float)Main.wofB;
				num14 = Main.screenPosition.Y + (float)Main.screenHeight;
				float num15 = (float)((int)((num13 - Main.screenPosition.Y) / (float)num12) + 1);
				num15 *= (float)num12;
				if (num15 > 0f)
				{
					num13 -= num15;
				}
				float num16 = num13;
				float num17 = Main.npc[Main.wof].position.X;
				float num18 = num14 - num13;
				bool flag4 = true;
				SpriteEffects effects2 = SpriteEffects.None;
				if (Main.npc[Main.wof].spriteDirection == 1)
				{
					effects2 = SpriteEffects.FlipHorizontally;
				}
				if (Main.npc[Main.wof].direction > 0)
				{
					num17 -= 80f;
				}
				int num19 = 0;
				if (!Main.gamePaused)
				{
					Main.wofF++;
				}
				if (Main.wofF > 12)
				{
					num19 = 280;
					if (Main.wofF > 17)
					{
						Main.wofF = 0;
					}
				}
				else if (Main.wofF > 6)
				{
					num19 = 140;
				}
				while (flag4)
				{
					num18 = num14 - num16;
					if (num18 > (float)num12)
					{
						num18 = (float)num12;
					}
					bool flag5 = true;
					int num20 = 0;
					while (flag5)
					{
						int x = (int)(num17 + (float)(Main.wofTexture.Width / 2)) / 16;
						int y = (int)(num16 + (float)num20) / 16;
						Main.spriteBatch.Draw(Main.wofTexture, new Vector2(num17 - Main.screenPosition.X, num16 + (float)num20 - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num19 + num20, Main.wofTexture.Width, 16)), Lighting.GetColor(x, y), 0f, default(Vector2), 1f, effects2, 0f);
						num20 += 16;
						if ((float)num20 >= num18)
						{
							flag5 = false;
						}
					}
					num16 += (float)num12;
					if (num16 >= num14)
					{
						flag4 = false;
					}
				}
			}
		}

		protected void DrawGhost(Player drawPlayer, Vector2 Position, float shadow = 0f)
		{
			SpriteEffects effects;
			if (drawPlayer.direction == 1)
			{
				effects = SpriteEffects.None;
			}
			else
			{
				effects = SpriteEffects.FlipHorizontally;
			}
			Microsoft.Xna.Framework.Color immuneAlpha = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)drawPlayer.position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)drawPlayer.position.Y + (double)drawPlayer.height * 0.5) / 16, new Microsoft.Xna.Framework.Color((int)(Main.mouseTextColor / 2 + 100), (int)(Main.mouseTextColor / 2 + 100), (int)(Main.mouseTextColor / 2 + 100), (int)(Main.mouseTextColor / 2 + 100))), shadow);
			Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle(0, Main.ghostTexture.Height / 4 * drawPlayer.ghostFrame, Main.ghostTexture.Width, Main.ghostTexture.Height / 4);
			Vector2 origin = new Vector2((float)value.Width * 0.5f, (float)value.Height * 0.5f);
			Main.spriteBatch.Draw(Main.ghostTexture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X + (float)(value.Width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)(value.Height / 2)))), new Microsoft.Xna.Framework.Rectangle?(value), immuneAlpha, 0f, origin, 1f, effects, 0f);
		}

		protected Vector2 DrawPlayerItemPos(float gravdir, int itemtype)
		{
			float num = 10f;
			Vector2 result = new Vector2((float)(Main.itemTexture[itemtype].Width / 2), (float)(Main.itemTexture[itemtype].Height / 2));
			if (itemtype == 95)
			{
				num = 6f;
				result.Y += 2f * gravdir;
			}
			else if (itemtype == 1295)
			{
				num = 4f;
			}
			else if (itemtype == 3611)
			{
				num = 2f;
			}
			else if (itemtype == 3350)
			{
				num = 2f;
			}
			else if (itemtype == 2624)
			{
				num = 4f;
			}
			else if (itemtype == 3018)
			{
				num = 2f;
			}
			else if (itemtype == 3007)
			{
				num = 4f;
				result.Y += 4f * gravdir;
			}
			else if (itemtype == 3107)
			{
				num = 4f;
				result.Y += 2f * gravdir;
			}
			else if (itemtype == 3008)
			{
				num = -12f;
				result.Y += 2f * gravdir;
			}
			else if (itemtype == 1255)
			{
				num = 6f;
				result.Y += 0f * gravdir;
			}
			else if (itemtype == 2269)
			{
				num = 2f;
				result.Y += 2f * gravdir;
			}
			else if (itemtype == 1265)
			{
				num = -8f;
				result.Y += 4f * gravdir;
			}
			else if (itemtype == 2272)
			{
				num = 0f;
				result.Y += 4f * gravdir;
			}
			else if (itemtype == 3029)
			{
				num = 4f;
			}
			else if (itemtype == 2796)
			{
				num = -28f;
				result.Y += 2f * gravdir;
			}
			else if (itemtype == 2797)
			{
				num = 0f;
			}
			else if (itemtype == 2610)
			{
				num = 0f;
			}
			else if (itemtype == 2623)
			{
				num = -30f;
				result.Y -= 4f * gravdir;
			}
			else if (itemtype == 3546)
			{
				num = -14f;
				result.Y -= 6f * gravdir;
			}
			else if (itemtype == 1835)
			{
				num = -2f;
				result.Y += 2f * gravdir;
			}
			else if (itemtype == 2624)
			{
				num = -4f;
			}
			else if (itemtype == 3859)
			{
				num = -2f;
			}
			else if (itemtype == 2888)
			{
				num = 6f;
			}
			else if (itemtype == 2223)
			{
				num = 2f;
				result.Y -= 2f * gravdir;
			}
			else if (itemtype == 1782)
			{
				num = 0f;
				result.Y += 4f * gravdir;
			}
			else if (itemtype == 1929)
			{
				num = 0f;
				result.Y += 2f * gravdir;
			}
			else if (itemtype == 2270)
			{
				num = -4f;
			}
			else if (itemtype == 1784)
			{
				num = 0f;
				result.Y += 4f * gravdir;
			}
			else if (itemtype == 1000)
			{
				num = 6f;
				result.Y += 0f * gravdir;
			}
			else if (itemtype == 1178)
			{
				num = 4f;
				result.Y += 0f * gravdir;
			}
			else if (itemtype == 1319)
			{
				num = 0f;
				result.Y += 0f * gravdir;
			}
			else if (itemtype == 1297)
			{
				num = -8f;
				result.Y += 0f * gravdir;
			}
			else if (itemtype == 1121)
			{
				num = 6f;
				result.Y -= 2f * gravdir;
			}
			else if (itemtype == 1314)
			{
				num = 2f;
			}
			else if (itemtype == 1258)
			{
				num = 2f;
				result.Y -= 2f * gravdir;
			}
			else if (itemtype == 1155)
			{
				num = -10f;
				result.Y -= 2f * gravdir;
			}
			else if (itemtype == 1156)
			{
				num = -2f;
			}
			else if (itemtype == 96)
			{
				num = -8f;
				result.Y += 2f * gravdir;
			}
			else if (itemtype == 1870)
			{
				num = -8f;
				result.Y += 2f * gravdir;
			}
			else if (itemtype == 1260)
			{
				num = -8f;
				result.Y += 2f * gravdir;
			}
			else if (itemtype == 1254)
			{
				num = -6f;
				result.Y += 2f * gravdir;
			}
			else if (itemtype == 98)
			{
				num = -5f;
				result.Y -= 2f * gravdir;
			}
			else if (itemtype == 534)
			{
				num = -2f;
				result.Y += 1f * gravdir;
			}
			else if (itemtype == 679)
			{
				num = 0f;
				result.Y += 2f * gravdir;
			}
			else if (itemtype == 964)
			{
				num = 0f;
				result.Y += 0f * gravdir;
			}
			else if (itemtype == 533)
			{
				num = -7f;
				result.Y -= 2f * gravdir;
			}
			else if (itemtype == 1553)
			{
				num = -10f;
				result.Y -= 2f * gravdir;
			}
			else if (itemtype == 506)
			{
				num = 0f;
				result.Y -= 2f * gravdir;
			}
			else if (itemtype == 1910)
			{
				num = 0f;
				result.Y -= 2f * gravdir;
			}
			else if (itemtype == 494 || itemtype == 508)
			{
				num = -2f;
			}
			else if (itemtype == 434)
			{
				num = 0f;
				result.Y -= 2f * gravdir;
			}
			else if (itemtype == 514)
			{
				num = 0f;
				result.Y += 3f * gravdir;
			}
			else if (itemtype == 435 || itemtype == 436 || itemtype == 481 || itemtype == 578 || itemtype == 1187 || itemtype == 1194 || itemtype == 1201 || itemtype == 1229)
			{
				num = -2f;
				result.Y -= 2f * gravdir;
			}
			else if (itemtype == 197)
			{
				num = -5f;
				result.Y += 4f * gravdir;
			}
			else if (itemtype == 126)
			{
				num = 4f;
				result.Y += 4f * gravdir;
			}
			else if (itemtype == 800)
			{
				num = 4f;
				result.Y += 2f * gravdir;
			}
			else if (itemtype == 127)
			{
				num = 4f;
				result.Y += 2f * gravdir;
			}
			else if (itemtype == 157)
			{
				num = 6f;
				result.Y += 2f * gravdir;
			}
			else if (itemtype == 160)
			{
				num = -8f;
			}
			else if (itemtype == 164 || itemtype == 219)
			{
				num = 0f;
				result.Y += 2f * gravdir;
			}
			else if (itemtype == 165 || itemtype == 272)
			{
				num = 4f;
				result.Y += 4f * gravdir;
			}
			else if (itemtype == 3870)
			{
				num = 4f;
				result.Y += 4f * gravdir;
			}
			else if (itemtype == 266)
			{
				num = 0f;
				result.Y += 2f * gravdir;
			}
			else if (itemtype == 281)
			{
				num = 6f;
				result.Y -= 6f * gravdir;
			}
			else if (itemtype == 986)
			{
				num = 6f;
				result.Y -= 10f * gravdir;
			}
			else if (itemtype == 682)
			{
				num = 4f;
			}
			else if (itemtype == 758)
			{
				num -= 20f;
				result.Y += 0f * gravdir;
			}
			else if (itemtype == 759)
			{
				num -= 18f;
				result.Y += 2f * gravdir;
			}
			else if (itemtype == 760)
			{
				num -= 12f;
				result.Y += 2f * gravdir;
			}
			else if (itemtype == 1946)
			{
				num -= 12f;
				result.Y += 2f * gravdir;
			}
			else if (itemtype == 779)
			{
				num = 0f;
				result.Y += 2f * gravdir;
			}
			else if (itemtype == 905)
			{
				num = -5f;
				result.Y += 0f * gravdir;
			}
			else if (itemtype == 930)
			{
				num = 4f;
				result.Y += 2f * gravdir;
			}
			else if (itemtype == 3788)
			{
				num = 2f;
				result.Y += 2f * gravdir;
			}
			result.X = num;
			return result;
		}

		protected Microsoft.Xna.Framework.Color quickAlpha(Microsoft.Xna.Framework.Color oldColor, float Alpha)
		{
			Microsoft.Xna.Framework.Color result = oldColor;
			result.R = (byte)((float)result.R * Alpha);
			result.G = (byte)((float)result.G * Alpha);
			result.B = (byte)((float)result.B * Alpha);
			result.A = (byte)((float)result.A * Alpha);
			return result;
		}

		protected void DrawPlayerHead(Player drawPlayer, float X, float Y, float Alpha = 1f, float Scale = 1f)
		{
			int shaderId = 0;
			int skinVariant = drawPlayer.skinVariant;
			short num = (short)drawPlayer.hairDye;
			if (drawPlayer.head == 0 && num == 0)
			{
				num = 1;
			}
			for (int i = 0; i < 16 + drawPlayer.extraAccessorySlots * 2; i++)
			{
				int num2 = i % 10;
				if (drawPlayer.dye[num2] != null && drawPlayer.armor[i].type > 0 && drawPlayer.armor[i].stack > 0 && drawPlayer.armor[i].faceSlot > 0 && drawPlayer.armor[i].faceSlot < 9)
				{
					byte arg_81_0 = drawPlayer.dye[num2].dye;
				}
			}
			if (drawPlayer.face > 0 && drawPlayer.face < 9)
			{
				this.LoadAccFace((int)drawPlayer.face);
			}
			if (drawPlayer.dye[0] != null)
			{
				shaderId = (int)drawPlayer.dye[0].dye;
			}
			this.LoadHair(drawPlayer.hair);
			Microsoft.Xna.Framework.Color color = this.quickAlpha(Microsoft.Xna.Framework.Color.White, Alpha);
			Microsoft.Xna.Framework.Color color2 = this.quickAlpha(drawPlayer.eyeColor, Alpha);
			Microsoft.Xna.Framework.Color color3 = this.quickAlpha(drawPlayer.GetHairColor(false), Alpha);
			Microsoft.Xna.Framework.Color color4 = this.quickAlpha(drawPlayer.skinColor, Alpha);
			Microsoft.Xna.Framework.Color color5 = this.quickAlpha(Microsoft.Xna.Framework.Color.White, Alpha);
			SpriteEffects spriteEffects = SpriteEffects.None;
			if (drawPlayer.direction < 0)
			{
				spriteEffects = SpriteEffects.FlipHorizontally;
			}
			Vector2 vector = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.4f);
			Vector2 position = drawPlayer.position;
			Microsoft.Xna.Framework.Rectangle bodyFrame = drawPlayer.bodyFrame;
			drawPlayer.bodyFrame.Y = 0;
			drawPlayer.position = Main.screenPosition;
			drawPlayer.position.X = drawPlayer.position.X + X;
			drawPlayer.position.Y = drawPlayer.position.Y + Y;
			drawPlayer.position.X = drawPlayer.position.X - 6f;
			drawPlayer.position.Y = drawPlayer.position.Y - 4f;
			float num3 = (float)drawPlayer.mount.PlayerHeadOffset;
			drawPlayer.position.Y = drawPlayer.position.Y - num3;
			if (drawPlayer.head > 0 && drawPlayer.head < 214)
			{
				this.LoadArmorHead(drawPlayer.head);
			}
			if (drawPlayer.face > 0 && drawPlayer.face < 9)
			{
				this.LoadAccFace((int)drawPlayer.face);
			}
			bool flag = false;
			if (drawPlayer.head == 10 || drawPlayer.head == 12 || drawPlayer.head == 28 || drawPlayer.head == 62 || drawPlayer.head == 97 || drawPlayer.head == 106 || drawPlayer.head == 113 || drawPlayer.head == 116 || drawPlayer.head == 119 || drawPlayer.head == 133 || drawPlayer.head == 138 || drawPlayer.head == 139 || drawPlayer.head == 163 || drawPlayer.head == 178 || drawPlayer.head == 181 || drawPlayer.head == 191 || drawPlayer.head == 198)
			{
				flag = true;
			}
			bool flag2 = false;
			if (drawPlayer.head == 161 || drawPlayer.head == 14 || drawPlayer.head == 15 || drawPlayer.head == 16 || drawPlayer.head == 18 || drawPlayer.head == 21 || drawPlayer.head == 24 || drawPlayer.head == 25 || drawPlayer.head == 26 || drawPlayer.head == 40 || drawPlayer.head == 44 || drawPlayer.head == 51 || drawPlayer.head == 56 || drawPlayer.head == 59 || drawPlayer.head == 60 || drawPlayer.head == 67 || drawPlayer.head == 68 || drawPlayer.head == 69 || drawPlayer.head == 114 || drawPlayer.head == 121 || drawPlayer.head == 126 || drawPlayer.head == 130 || drawPlayer.head == 136 || drawPlayer.head == 140 || drawPlayer.head == 145 || drawPlayer.head == 158 || drawPlayer.head == 159 || drawPlayer.head == 184 || drawPlayer.head == 190 || (double)drawPlayer.head == 92.0 || drawPlayer.head == 195)
			{
				flag2 = true;
			}
			if (drawPlayer.head != 38 && drawPlayer.head != 135)
			{
				Main.spriteBatch.Draw(Main.playerTextures[skinVariant, 0], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color4, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
				Main.spriteBatch.Draw(Main.playerTextures[skinVariant, 1], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
				Main.spriteBatch.Draw(Main.playerTextures[skinVariant, 2], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color2, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
			}
			if (flag)
			{
				DrawData value = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
				GameShaders.Armor.Apply(shaderId, drawPlayer, new DrawData?(value));
				value.Draw(Main.spriteBatch);
				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
				if (!drawPlayer.invis)
				{
					Microsoft.Xna.Framework.Rectangle bodyFrame2 = drawPlayer.bodyFrame;
					bodyFrame2.Y -= 336;
					if (bodyFrame2.Y < 0)
					{
						bodyFrame2.Y = 0;
					}
					value = new DrawData(Main.playerHairTexture[drawPlayer.hair], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(bodyFrame2), color3, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
					GameShaders.Hair.Apply(num, drawPlayer, new DrawData?(value));
					value.Draw(Main.spriteBatch);
					Main.pixelShader.CurrentTechnique.Passes[0].Apply();
				}
			}
			if (flag2)
			{
				Microsoft.Xna.Framework.Rectangle bodyFrame3 = drawPlayer.bodyFrame;
				bodyFrame3.Y -= 336;
				if (bodyFrame3.Y < 0)
				{
					bodyFrame3.Y = 0;
				}
				if (!drawPlayer.invis)
				{
					DrawData value2 = new DrawData(Main.playerHairAltTexture[drawPlayer.hair], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(bodyFrame3), color3, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
					GameShaders.Hair.Apply(num, drawPlayer, new DrawData?(value2));
					value2.Draw(Main.spriteBatch);
					Main.pixelShader.CurrentTechnique.Passes[0].Apply();
				}
			}
			if (drawPlayer.head == 23)
			{
				Microsoft.Xna.Framework.Rectangle bodyFrame4 = drawPlayer.bodyFrame;
				bodyFrame4.Y -= 336;
				if (bodyFrame4.Y < 0)
				{
					bodyFrame4.Y = 0;
				}
				DrawData value3;
				if (!drawPlayer.invis)
				{
					value3 = new DrawData(Main.playerHairTexture[drawPlayer.hair], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(bodyFrame4), color3, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
					GameShaders.Hair.Apply(num, drawPlayer, new DrawData?(value3));
					value3.Draw(Main.spriteBatch);
					Main.pixelShader.CurrentTechnique.Passes[0].Apply();
				}
				value3 = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
				GameShaders.Armor.Apply(shaderId, drawPlayer, new DrawData?(value3));
				value3.Draw(Main.spriteBatch);
				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
			}
			else if (drawPlayer.head == 14 || drawPlayer.head == 56 || drawPlayer.head == 158)
			{
				Microsoft.Xna.Framework.Rectangle bodyFrame5 = drawPlayer.bodyFrame;
				if (drawPlayer.head == 158)
				{
					bodyFrame5.Height -= 2;
				}
				int num4 = 0;
				if (bodyFrame5.Y == bodyFrame5.Height * 6)
				{
					bodyFrame5.Height -= 2;
				}
				else if (bodyFrame5.Y == bodyFrame5.Height * 7)
				{
					num4 = -2;
				}
				else if (bodyFrame5.Y == bodyFrame5.Height * 8)
				{
					num4 = -2;
				}
				else if (bodyFrame5.Y == bodyFrame5.Height * 9)
				{
					num4 = -2;
				}
				else if (bodyFrame5.Y == bodyFrame5.Height * 10)
				{
					num4 = -2;
				}
				else if (bodyFrame5.Y == bodyFrame5.Height * 13)
				{
					bodyFrame5.Height -= 2;
				}
				else if (bodyFrame5.Y == bodyFrame5.Height * 14)
				{
					num4 = -2;
				}
				else if (bodyFrame5.Y == bodyFrame5.Height * 15)
				{
					num4 = -2;
				}
				else if (bodyFrame5.Y == bodyFrame5.Height * 16)
				{
					num4 = -2;
				}
				bodyFrame5.Y += num4;
				DrawData value4 = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f + (float)num4) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(bodyFrame5), color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
				GameShaders.Armor.Apply(shaderId, drawPlayer, new DrawData?(value4));
				value4.Draw(Main.spriteBatch);
				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
			}
			else if (drawPlayer.head > 0 && drawPlayer.head < 214 && drawPlayer.head != 28)
			{
				DrawData value5 = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
				GameShaders.Armor.Apply(shaderId, drawPlayer, new DrawData?(value5));
				value5.Draw(Main.spriteBatch);
				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
			}
			else
			{
				Microsoft.Xna.Framework.Rectangle bodyFrame6 = drawPlayer.bodyFrame;
				bodyFrame6.Y -= 336;
				if (bodyFrame6.Y < 0)
				{
					bodyFrame6.Y = 0;
				}
				DrawData value6 = new DrawData(Main.playerHairTexture[drawPlayer.hair], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(bodyFrame6), color3, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
				GameShaders.Hair.Apply(num, drawPlayer, new DrawData?(value6));
				value6.Draw(Main.spriteBatch);
				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
			}
			if (drawPlayer.face > 0 && drawPlayer.face < 9)
			{
				DrawData value7;
				if (drawPlayer.face == 7)
				{
					value7 = new DrawData(Main.accFaceTexture[(int)drawPlayer.face], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), new Microsoft.Xna.Framework.Color(200, 200, 200, 150), drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
				}
				else
				{
					value7 = new DrawData(Main.accFaceTexture[(int)drawPlayer.face], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
				}
				GameShaders.Armor.Apply(shaderId, drawPlayer, new DrawData?(value7));
				value7.Draw(Main.spriteBatch);
				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
			}
			drawPlayer.position = position;
			drawPlayer.bodyFrame.Y = bodyFrame.Y;
		}

		protected void DrawPlayerStoned(Player drawPlayer, Vector2 Position)
		{
			if (drawPlayer.dead)
			{
				return;
			}
			SpriteEffects effects;
			if (drawPlayer.direction == 1)
			{
				effects = SpriteEffects.None;
			}
			else
			{
				effects = SpriteEffects.FlipHorizontally;
			}
			Main.spriteBatch.Draw(Main.extraTexture[37], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 8f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), null, Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.5) / 16, Microsoft.Xna.Framework.Color.White), 0f, new Vector2((float)(Main.extraTexture[37].Width / 2), (float)(Main.extraTexture[37].Height / 2)), 1f, effects, 0f);
		}

		public void DrawPlayer(Player drawPlayer, Vector2 Position, float rotation, Vector2 rotationOrigin, float shadow = 0f)
		{
			DrawData value = default(DrawData);
			int projectileDrawPosition = -1;
			Main.playerDrawData.Clear();
			Main.playerDrawDust.Clear();
			Main.playerDrawGore.Clear();
			Vector2 value2 = Position + (drawPlayer.itemLocation - drawPlayer.position);
			int num = 0;
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			int skinVariant = drawPlayer.skinVariant;
			if (drawPlayer.body == 77 || drawPlayer.body == 103 || drawPlayer.body == 41 || drawPlayer.body == 100 || drawPlayer.body == 10 || drawPlayer.body == 11 || drawPlayer.body == 12 || drawPlayer.body == 13 || drawPlayer.body == 14 || drawPlayer.body == 43 || drawPlayer.body == 15 || drawPlayer.body == 16 || drawPlayer.body == 20 || drawPlayer.body == 39 || drawPlayer.body == 50 || drawPlayer.body == 38 || drawPlayer.body == 40 || drawPlayer.body == 57 || drawPlayer.body == 44 || drawPlayer.body == 52 || drawPlayer.body == 53 || drawPlayer.body == 68 || drawPlayer.body == 81 || drawPlayer.body == 85 || drawPlayer.body == 88 || drawPlayer.body == 98 || drawPlayer.body == 86 || drawPlayer.body == 87 || drawPlayer.body == 99 || drawPlayer.body == 165 || drawPlayer.body == 166 || drawPlayer.body == 167 || drawPlayer.body == 171 || drawPlayer.body == 45 || drawPlayer.body == 168 || drawPlayer.body == 169 || drawPlayer.body == 42 || drawPlayer.body == 180 || drawPlayer.body == 181 || drawPlayer.body == 183 || drawPlayer.body == 186 || drawPlayer.body == 187 || drawPlayer.body == 188 || drawPlayer.body == 64 || drawPlayer.body == 189 || drawPlayer.body == 191 || drawPlayer.body == 192 || drawPlayer.body == 198 || drawPlayer.body == 199 || drawPlayer.body == 202 || drawPlayer.body == 203)
			{
				flag = true;
			}
			if (drawPlayer.body == 99 || drawPlayer.body == 98 || drawPlayer.body == 100 || drawPlayer.body == 167 || drawPlayer.body == 171 || drawPlayer.body == 183 || drawPlayer.body == 191 || drawPlayer.body == 192 || drawPlayer.body == 198 || drawPlayer.body == 199 || drawPlayer.body == 202 || drawPlayer.body == 201 || drawPlayer.body == 203)
			{
				flag2 = true;
			}
			int num2;
			if (drawPlayer.heldProj >= 0 && shadow == 0f)
			{
				num2 = Main.projectile[drawPlayer.heldProj].type;
				if (num2 == 460 || num2 == 535 || num2 == 600)
				{
					flag3 = true;
				}
			}
			bool flag4 = false;
			if (drawPlayer.head == 10 || drawPlayer.head == 12 || drawPlayer.head == 28 || drawPlayer.head == 62 || drawPlayer.head == 97 || drawPlayer.head == 106 || drawPlayer.head == 113 || drawPlayer.head == 116 || drawPlayer.head == 119 || drawPlayer.head == 133 || drawPlayer.head == 138 || drawPlayer.head == 139 || drawPlayer.head == 163 || drawPlayer.head == 178 || drawPlayer.head == 181 || drawPlayer.head == 191 || drawPlayer.head == 198)
			{
				flag4 = true;
			}
			bool flag5 = false;
			if (drawPlayer.head == 161 || drawPlayer.head == 14 || drawPlayer.head == 15 || drawPlayer.head == 16 || drawPlayer.head == 18 || drawPlayer.head == 21 || drawPlayer.head == 24 || drawPlayer.head == 25 || drawPlayer.head == 26 || drawPlayer.head == 40 || drawPlayer.head == 44 || drawPlayer.head == 51 || drawPlayer.head == 56 || drawPlayer.head == 59 || drawPlayer.head == 60 || drawPlayer.head == 67 || drawPlayer.head == 68 || drawPlayer.head == 69 || drawPlayer.head == 114 || drawPlayer.head == 121 || drawPlayer.head == 126 || drawPlayer.head == 130 || drawPlayer.head == 136 || drawPlayer.head == 140 || drawPlayer.head == 145 || drawPlayer.head == 158 || drawPlayer.head == 159 || drawPlayer.head == 184 || drawPlayer.head == 190 || drawPlayer.head == 92 || drawPlayer.head == 195)
			{
				flag5 = true;
			}
			bool flag6 = false;
			if (drawPlayer.face == 4 || drawPlayer.face == 3 || drawPlayer.face == 2)
			{
				flag6 = true;
			}
			int num3 = (int)drawPlayer.hairDye;
			if (drawPlayer.head == 0 && num3 == 0)
			{
				num3 = 1;
			}
			float num4 = (float)drawPlayer.mount.PlayerOffset;
			Position.Y -= num4;
			int num5 = 0;
			if (drawPlayer.dye[0] != null)
			{
				num5 = (int)drawPlayer.dye[0].dye;
			}
			int num6 = 0;
			if (drawPlayer.dye[1] != null)
			{
				num6 = (int)drawPlayer.dye[1].dye;
			}
			int shader = 0;
			if (drawPlayer.dye[2] != null)
			{
				shader = (int)drawPlayer.dye[2].dye;
			}
			if (drawPlayer.wearsRobe)
			{
				shader = num6;
			}
			int shader2 = 0;
			int shader3 = 0;
			int shader4 = 0;
			int shader5 = 0;
			int shader6 = 0;
			int shader7 = 0;
			int shader8 = 0;
			int shader9 = 0;
			int shader10 = 0;
			int shader11 = 0;
			int shader12 = 0;
			int shader13 = 0;
			for (int i = 0; i < 20; i++)
			{
				int num7 = i % 10;
				if (drawPlayer.dye[num7] != null && drawPlayer.armor[i].type > 0 && drawPlayer.armor[i].stack > 0 && (i / 10 >= 1 || !drawPlayer.hideVisual[num7] || drawPlayer.armor[i].wingSlot > 0 || drawPlayer.armor[i].type == 934))
				{
					if (drawPlayer.armor[i].handOnSlot > 0 && drawPlayer.armor[i].handOnSlot < 20)
					{
						shader2 = (int)drawPlayer.dye[num7].dye;
					}
					if (drawPlayer.armor[i].handOffSlot > 0 && drawPlayer.armor[i].handOffSlot < 12)
					{
						shader3 = (int)drawPlayer.dye[num7].dye;
					}
					if (drawPlayer.armor[i].backSlot > 0 && drawPlayer.armor[i].backSlot < 14)
					{
						shader4 = (int)drawPlayer.dye[num7].dye;
					}
					if (drawPlayer.armor[i].frontSlot > 0 && drawPlayer.armor[i].frontSlot < 5)
					{
						shader5 = (int)drawPlayer.dye[num7].dye;
					}
					if (drawPlayer.armor[i].shoeSlot > 0 && drawPlayer.armor[i].shoeSlot < 18)
					{
						shader6 = (int)drawPlayer.dye[num7].dye;
					}
					if (drawPlayer.armor[i].waistSlot > 0 && drawPlayer.armor[i].waistSlot < 13)
					{
						shader7 = (int)drawPlayer.dye[num7].dye;
					}
					if (drawPlayer.armor[i].shieldSlot > 0 && drawPlayer.armor[i].shieldSlot < 7)
					{
						shader8 = (int)drawPlayer.dye[num7].dye;
					}
					if (drawPlayer.armor[i].neckSlot > 0 && drawPlayer.armor[i].neckSlot < 10)
					{
						shader9 = (int)drawPlayer.dye[num7].dye;
					}
					if (drawPlayer.armor[i].faceSlot > 0 && drawPlayer.armor[i].faceSlot < 9)
					{
						shader10 = (int)drawPlayer.dye[num7].dye;
					}
					if (drawPlayer.armor[i].balloonSlot > 0 && drawPlayer.armor[i].balloonSlot < 18)
					{
						shader11 = (int)drawPlayer.dye[num7].dye;
					}
					if (drawPlayer.armor[i].wingSlot > 0 && drawPlayer.armor[i].wingSlot < 38)
					{
						shader12 = (int)drawPlayer.dye[num7].dye;
					}
					if (drawPlayer.armor[i].type == 934)
					{
						shader13 = (int)drawPlayer.dye[num7].dye;
					}
				}
			}
			if (drawPlayer.mount.Active)
			{
				Mount.currentShader = (drawPlayer.mount.Cart ? drawPlayer.cMinecart : drawPlayer.cMount);
			}
			else
			{
				Mount.currentShader = 0;
			}
			SpriteEffects spriteEffects = SpriteEffects.None;
			SpriteEffects effect = SpriteEffects.FlipHorizontally;
			Microsoft.Xna.Framework.Color color = drawPlayer.GetImmuneAlpha(drawPlayer.GetHairColor(true), shadow);
			Microsoft.Xna.Framework.Color color2 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), Microsoft.Xna.Framework.Color.White), shadow);
			Microsoft.Xna.Framework.Color color3 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), drawPlayer.eyeColor), shadow);
			Microsoft.Xna.Framework.Color color4 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), drawPlayer.skinColor), shadow);
			Microsoft.Xna.Framework.Color color5 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.skinColor), shadow);
			Microsoft.Xna.Framework.Color color6 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.skinColor), shadow);
			Microsoft.Xna.Framework.Color color7 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.shirtColor), shadow);
			Microsoft.Xna.Framework.Color color8 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.underShirtColor), shadow);
			Microsoft.Xna.Framework.Color color9 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.pantsColor), shadow);
			Microsoft.Xna.Framework.Color color10 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.shoeColor), shadow);
			Microsoft.Xna.Framework.Color color11 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.25) / 16, Microsoft.Xna.Framework.Color.White), shadow);
			Microsoft.Xna.Framework.Color color12 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.5) / 16, Microsoft.Xna.Framework.Color.White), shadow);
			Microsoft.Xna.Framework.Color color13 = color12;
			Microsoft.Xna.Framework.Color color14 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.75) / 16, Microsoft.Xna.Framework.Color.White), shadow);
			Microsoft.Xna.Framework.Color color15 = new Microsoft.Xna.Framework.Color(255, 255, 255, 100);
			int num8 = 0;
			int num9 = 0;
			int num10 = 0;
			int num11 = 0;
			int num12 = -1;
			int num13 = -1;
			int num14 = -1;
			int num15 = -1;
			Microsoft.Xna.Framework.Color color16 = Microsoft.Xna.Framework.Color.Transparent;
			Microsoft.Xna.Framework.Color color17 = Microsoft.Xna.Framework.Color.Transparent;
			Microsoft.Xna.Framework.Color color18 = Microsoft.Xna.Framework.Color.Transparent;
			Microsoft.Xna.Framework.Color color19 = Microsoft.Xna.Framework.Color.Transparent;
			num2 = drawPlayer.head;
			switch (num2)
			{
			case 169:
				num8++;
				break;
			case 170:
				num9++;
				break;
			case 171:
				num10++;
				break;
			default:
				if (num2 == 189)
				{
					num11++;
				}
				break;
			}
			num2 = drawPlayer.body;
			switch (num2)
			{
			case 175:
				num8++;
				break;
			case 176:
				num9++;
				break;
			case 177:
				num10++;
				break;
			default:
				if (num2 == 190)
				{
					num11++;
				}
				break;
			}
			num2 = drawPlayer.legs;
			switch (num2)
			{
			case 110:
				num8++;
				break;
			case 111:
				num9++;
				break;
			case 112:
				num10++;
				break;
			default:
				if (num2 == 130)
				{
					num11++;
				}
				break;
			}
			if (drawPlayer.head == 169)
			{
				num12 = 15;
				byte b = (byte)(62.5f * (float)(1 + num8));
				color16 = new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, 0);
			}
			else if (drawPlayer.head == 210)
			{
				num12 = 242;
				byte b2 = 127;
				color16 = new Microsoft.Xna.Framework.Color((int)b2, (int)b2, (int)b2, 0);
			}
			else if (drawPlayer.head == 170)
			{
				num12 = 16;
				byte b3 = (byte)(62.5f * (float)(1 + num9));
				color16 = new Microsoft.Xna.Framework.Color((int)b3, (int)b3, (int)b3, 0);
			}
			else if (drawPlayer.head == 189)
			{
				num12 = 184;
				byte b4 = (byte)(62.5f * (float)(1 + num11));
				color16 = new Microsoft.Xna.Framework.Color((int)b4, (int)b4, (int)b4, 0);
				color11 = drawPlayer.GetImmuneAlphaPure(new Microsoft.Xna.Framework.Color((int)b4, (int)b4, (int)b4, 255), shadow);
			}
			else if (drawPlayer.head == 171)
			{
				byte b5 = (byte)(62.5f * (float)(1 + num10));
				color11 = drawPlayer.GetImmuneAlphaPure(new Microsoft.Xna.Framework.Color((int)b5, (int)b5, (int)b5, 255), shadow);
			}
			else if (drawPlayer.head == 175)
			{
				num12 = 41;
				color16 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
			}
			else if (drawPlayer.head == 193)
			{
				num12 = 209;
				color16 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127);
			}
			else if (drawPlayer.head == 109)
			{
				num12 = 208;
				color16 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
			}
			else if (drawPlayer.head == 178)
			{
				num12 = 96;
				color16 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
			}
			if (drawPlayer.body == 175)
			{
				if (drawPlayer.Male)
				{
					num13 = 13;
				}
				else
				{
					num13 = 18;
				}
				byte b6 = (byte)(62.5f * (float)(1 + num8));
				color17 = new Microsoft.Xna.Framework.Color((int)b6, (int)b6, (int)b6, 0);
			}
			else if (drawPlayer.body == 190)
			{
				if (drawPlayer.Male)
				{
					num13 = 185;
				}
				else
				{
					num13 = 186;
				}
				num14 = 188;
				byte b7 = (byte)(62.5f * (float)(1 + num11));
				color17 = new Microsoft.Xna.Framework.Color((int)b7, (int)b7, (int)b7, 0);
				color18 = new Microsoft.Xna.Framework.Color((int)b7, (int)b7, (int)b7, 0);
				color12 = drawPlayer.GetImmuneAlphaPure(new Microsoft.Xna.Framework.Color((int)b7, (int)b7, (int)b7, 255), shadow);
			}
			else if (drawPlayer.body == 176)
			{
				if (drawPlayer.Male)
				{
					num13 = 14;
				}
				else
				{
					num13 = 19;
				}
				num14 = 12;
				byte b8 = (byte)(62.5f * (float)(1 + num9));
				color17 = new Microsoft.Xna.Framework.Color((int)b8, (int)b8, (int)b8, 0);
				color18 = new Microsoft.Xna.Framework.Color((int)b8, (int)b8, (int)b8, 0);
			}
			else if (drawPlayer.body == 194)
			{
				num13 = 210;
				num14 = 211;
				color17 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127);
				color18 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127);
			}
			else if (drawPlayer.body == 177)
			{
				byte b9 = (byte)(62.5f * (float)(1 + num10));
				color12 = drawPlayer.GetImmuneAlphaPure(new Microsoft.Xna.Framework.Color((int)b9, (int)b9, (int)b9, 255), shadow);
			}
			else if (drawPlayer.body == 179)
			{
				if (drawPlayer.Male)
				{
					num13 = 42;
				}
				else
				{
					num13 = 43;
				}
				num14 = 44;
				color17 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
				color18 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
			}
			if (drawPlayer.legs == 111)
			{
				num15 = 17;
				byte b10 = (byte)(62.5f * (float)(1 + num9));
				color19 = new Microsoft.Xna.Framework.Color((int)b10, (int)b10, (int)b10, 0);
			}
			else if (drawPlayer.legs == 110)
			{
				num15 = 199;
				byte b11 = (byte)(62.5f * (float)(1 + num8));
				color19 = new Microsoft.Xna.Framework.Color((int)b11, (int)b11, (int)b11, 0);
			}
			else if (drawPlayer.legs == 112)
			{
				byte b12 = (byte)(62.5f * (float)(1 + num10));
				color14 = drawPlayer.GetImmuneAlphaPure(new Microsoft.Xna.Framework.Color((int)b12, (int)b12, (int)b12, 255), shadow);
			}
			else if (drawPlayer.legs == 134)
			{
				num15 = 212;
				color19 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127);
			}
			else if (drawPlayer.legs == 130)
			{
				byte b13 = (byte)(127 * (1 + num11));
				num15 = 187;
				color19 = new Microsoft.Xna.Framework.Color((int)b13, (int)b13, (int)b13, 0);
				color14 = drawPlayer.GetImmuneAlphaPure(new Microsoft.Xna.Framework.Color((int)b13, (int)b13, (int)b13, 255), shadow);
			}
			color16 = drawPlayer.GetImmuneAlphaPure(color16, shadow);
			color17 = drawPlayer.GetImmuneAlphaPure(color17, shadow);
			color18 = drawPlayer.GetImmuneAlphaPure(color18, shadow);
			color19 = drawPlayer.GetImmuneAlphaPure(color19, shadow);
			if (drawPlayer.head > 0 && drawPlayer.head < 214)
			{
				this.LoadArmorHead(drawPlayer.head);
			}
			if (drawPlayer.body > 0 && drawPlayer.body < 208)
			{
				this.LoadArmorBody(drawPlayer.body);
			}
			if (drawPlayer.legs > 0 && drawPlayer.legs < 157)
			{
				this.LoadArmorLegs(drawPlayer.legs);
			}
			if (drawPlayer.handon > 0 && drawPlayer.handon < 20)
			{
				this.LoadAccHandsOn((int)drawPlayer.handon);
			}
			if (drawPlayer.handoff > 0 && drawPlayer.handoff < 12)
			{
				this.LoadAccHandsOff((int)drawPlayer.handoff);
			}
			if (drawPlayer.back > 0 && drawPlayer.back < 14)
			{
				this.LoadAccBack((int)drawPlayer.back);
			}
			if (drawPlayer.front > 0 && drawPlayer.front < 5)
			{
				this.LoadAccFront((int)drawPlayer.front);
			}
			if (drawPlayer.shoe > 0 && drawPlayer.shoe < 18)
			{
				this.LoadAccShoes((int)drawPlayer.shoe);
			}
			if (drawPlayer.waist > 0 && drawPlayer.waist < 13)
			{
				this.LoadAccWaist((int)drawPlayer.waist);
			}
			if (drawPlayer.shield > 0 && drawPlayer.shield < 7)
			{
				this.LoadAccShield((int)drawPlayer.shield);
			}
			if (drawPlayer.neck > 0 && drawPlayer.neck < 10)
			{
				this.LoadAccNeck((int)drawPlayer.neck);
			}
			if (drawPlayer.face > 0 && drawPlayer.face < 9)
			{
				this.LoadAccFace((int)drawPlayer.face);
			}
			if (drawPlayer.balloon > 0 && drawPlayer.balloon < 18)
			{
				this.LoadAccBalloon((int)drawPlayer.balloon);
			}
			this.LoadHair(drawPlayer.hair);
			if ((drawPlayer.head == 78 || drawPlayer.head == 79 || drawPlayer.head == 80) && drawPlayer.body == 51 && drawPlayer.legs == 47)
			{
				float num16 = (float)Main.mouseTextColor / 200f - 0.3f;
				if (shadow != 0f)
				{
					num16 = 0f;
				}
				color11.R = (byte)((float)color11.R * num16);
				color11.G = (byte)((float)color11.G * num16);
				color11.B = (byte)((float)color11.B * num16);
				color12.R = (byte)((float)color12.R * num16);
				color12.G = (byte)((float)color12.G * num16);
				color12.B = (byte)((float)color12.B * num16);
				color14.R = (byte)((float)color14.R * num16);
				color14.G = (byte)((float)color14.G * num16);
				color14.B = (byte)((float)color14.B * num16);
			}
			if (drawPlayer.head == 193 && drawPlayer.body == 194 && drawPlayer.legs == 134)
			{
				float num17 = 0.6f - drawPlayer.ghostFade * 0.3f;
				if (shadow != 0f)
				{
					num17 = 0f;
				}
				color11.R = (byte)((float)color11.R * num17);
				color11.G = (byte)((float)color11.G * num17);
				color11.B = (byte)((float)color11.B * num17);
				color12.R = (byte)((float)color12.R * num17);
				color12.G = (byte)((float)color12.G * num17);
				color12.B = (byte)((float)color12.B * num17);
				color14.R = (byte)((float)color14.R * num17);
				color14.G = (byte)((float)color14.G * num17);
				color14.B = (byte)((float)color14.B * num17);
			}
			if (shadow > 0f)
			{
				color6 = Microsoft.Xna.Framework.Color.Transparent;
				color5 = Microsoft.Xna.Framework.Color.Transparent;
				color4 = Microsoft.Xna.Framework.Color.Transparent;
				color = Microsoft.Xna.Framework.Color.Transparent;
				color3 = Microsoft.Xna.Framework.Color.Transparent;
				color2 = Microsoft.Xna.Framework.Color.Transparent;
			}
			float num18 = 1f;
			float num19 = 1f;
			float num20 = 1f;
			float num21 = 1f;
			if (drawPlayer.honey && Main.rand.Next(30) == 0 && shadow == 0f)
			{
				int num22 = Dust.NewDust(Position, drawPlayer.width, drawPlayer.height, 152, 0f, 0f, 150, default(Microsoft.Xna.Framework.Color), 1f);
				Main.dust[num22].velocity.Y = 0.3f;
				Dust expr_1920_cp_0 = Main.dust[num22];
				expr_1920_cp_0.velocity.X = expr_1920_cp_0.velocity.X * 0.1f;
				Main.dust[num22].scale += (float)Main.rand.Next(3, 4) * 0.1f;
				Main.dust[num22].alpha = 100;
				Main.dust[num22].noGravity = true;
				Main.dust[num22].velocity += drawPlayer.velocity * 0.1f;
				Main.playerDrawDust.Add(num22);
			}
			if (drawPlayer.dryadWard && drawPlayer.velocity.X != 0f && Main.rand.Next(4) == 0)
			{
				int num23 = Dust.NewDust(new Vector2(drawPlayer.position.X - 2f, drawPlayer.position.Y + (float)drawPlayer.height - 2f), drawPlayer.width + 4, 4, 163, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1.5f);
				Main.dust[num23].noGravity = true;
				Main.dust[num23].noLight = true;
				Main.dust[num23].velocity *= 0f;
			}
			if (drawPlayer.poisoned)
			{
				if (Main.rand.Next(50) == 0 && shadow == 0f)
				{
					int num24 = Dust.NewDust(Position, drawPlayer.width, drawPlayer.height, 46, 0f, 0f, 150, default(Microsoft.Xna.Framework.Color), 0.2f);
					Main.dust[num24].noGravity = true;
					Main.dust[num24].fadeIn = 1.9f;
					Main.playerDrawDust.Add(num24);
				}
				num18 *= 0.65f;
				num20 *= 0.75f;
			}
			if (drawPlayer.venom)
			{
				if (Main.rand.Next(10) == 0 && shadow == 0f)
				{
					int num25 = Dust.NewDust(Position, drawPlayer.width, drawPlayer.height, 171, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 0.5f);
					Main.dust[num25].noGravity = true;
					Main.dust[num25].fadeIn = 1.5f;
					Main.playerDrawDust.Add(num25);
				}
				num19 *= 0.45f;
				num18 *= 0.75f;
			}
			if (drawPlayer.onFire)
			{
				if (Main.rand.Next(4) == 0 && shadow == 0f)
				{
					int num26 = Dust.NewDust(new Vector2(Position.X - 2f, Position.Y - 2f), drawPlayer.width + 4, drawPlayer.height + 4, 6, drawPlayer.velocity.X * 0.4f, drawPlayer.velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 3f);
					Main.dust[num26].noGravity = true;
					Main.dust[num26].velocity *= 1.8f;
					Dust expr_1C76_cp_0 = Main.dust[num26];
					expr_1C76_cp_0.velocity.Y = expr_1C76_cp_0.velocity.Y - 0.5f;
					Main.playerDrawDust.Add(num26);
				}
				num20 *= 0.6f;
				num19 *= 0.7f;
			}
			if (drawPlayer.dripping && shadow == 0f && Main.rand.Next(4) != 0)
			{
				Vector2 position = Position;
				position.X -= 2f;
				position.Y -= 2f;
				if (Main.rand.Next(2) == 0)
				{
					int num27 = Dust.NewDust(position, drawPlayer.width + 4, drawPlayer.height + 2, 211, 0f, 0f, 50, default(Microsoft.Xna.Framework.Color), 0.8f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num27].alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num27].alpha += 25;
					}
					Main.dust[num27].noLight = true;
					Main.dust[num27].velocity *= 0.2f;
					Dust expr_1DC2_cp_0 = Main.dust[num27];
					expr_1DC2_cp_0.velocity.Y = expr_1DC2_cp_0.velocity.Y + 0.2f;
					Main.dust[num27].velocity += drawPlayer.velocity;
					Main.playerDrawDust.Add(num27);
				}
				else
				{
					int num28 = Dust.NewDust(position, drawPlayer.width + 8, drawPlayer.height + 8, 211, 0f, 0f, 50, default(Microsoft.Xna.Framework.Color), 1.1f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num28].alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num28].alpha += 25;
					}
					Main.dust[num28].noLight = true;
					Main.dust[num28].noGravity = true;
					Main.dust[num28].velocity *= 0.2f;
					Dust expr_1ECB_cp_0 = Main.dust[num28];
					expr_1ECB_cp_0.velocity.Y = expr_1ECB_cp_0.velocity.Y + 1f;
					Main.dust[num28].velocity += drawPlayer.velocity;
					Main.playerDrawDust.Add(num28);
				}
			}
			if (drawPlayer.drippingSlime)
			{
				int alpha = 175;
				Microsoft.Xna.Framework.Color newColor = new Microsoft.Xna.Framework.Color(0, 80, 255, 100);
				if (Main.rand.Next(4) != 0 && shadow == 0f)
				{
					Vector2 position2 = Position;
					position2.X -= 2f;
					position2.Y -= 2f;
					if (Main.rand.Next(2) == 0)
					{
						int num29 = Dust.NewDust(position2, drawPlayer.width + 4, drawPlayer.height + 2, 4, 0f, 0f, alpha, newColor, 1.4f);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num29].alpha += 25;
						}
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num29].alpha += 25;
						}
						Main.dust[num29].noLight = true;
						Main.dust[num29].velocity *= 0.2f;
						Dust expr_2029_cp_0 = Main.dust[num29];
						expr_2029_cp_0.velocity.Y = expr_2029_cp_0.velocity.Y + 0.2f;
						Main.dust[num29].velocity += drawPlayer.velocity;
						Main.playerDrawDust.Add(num29);
					}
				}
				num18 *= 0.8f;
				num19 *= 0.8f;
			}
			if (drawPlayer.ichor)
			{
				num20 = 0f;
			}
			if (drawPlayer.electrified && shadow == 0f && Main.rand.Next(3) == 0)
			{
				int num30 = Dust.NewDust(new Vector2(Position.X - 2f, Position.Y - 2f), drawPlayer.width + 4, drawPlayer.height + 4, 226, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 0.5f);
				Main.dust[num30].velocity *= 1.6f;
				Dust expr_2132_cp_0 = Main.dust[num30];
				expr_2132_cp_0.velocity.Y = expr_2132_cp_0.velocity.Y - 1f;
				Main.dust[num30].position = Vector2.Lerp(Main.dust[num30].position, drawPlayer.Center, 0.5f);
				Main.playerDrawDust.Add(num30);
			}
			if (drawPlayer.burned)
			{
				if (shadow == 0f)
				{
					int num31 = Dust.NewDust(new Vector2(Position.X - 2f, Position.Y - 2f), drawPlayer.width + 4, drawPlayer.height + 4, 6, drawPlayer.velocity.X * 0.4f, drawPlayer.velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 2f);
					Main.dust[num31].noGravity = true;
					Main.dust[num31].velocity *= 1.8f;
					Dust expr_2236_cp_0 = Main.dust[num31];
					expr_2236_cp_0.velocity.Y = expr_2236_cp_0.velocity.Y - 0.75f;
					Main.playerDrawDust.Add(num31);
				}
				num18 = 1f;
				num20 *= 0.6f;
				num19 *= 0.7f;
			}
			if (drawPlayer.onFrostBurn)
			{
				if (Main.rand.Next(4) == 0 && shadow == 0f)
				{
					int num32 = Dust.NewDust(new Vector2(Position.X - 2f, Position.Y - 2f), drawPlayer.width + 4, drawPlayer.height + 4, 135, drawPlayer.velocity.X * 0.4f, drawPlayer.velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 3f);
					Main.dust[num32].noGravity = true;
					Main.dust[num32].velocity *= 1.8f;
					Dust expr_233F_cp_0 = Main.dust[num32];
					expr_233F_cp_0.velocity.Y = expr_233F_cp_0.velocity.Y - 0.5f;
					Main.playerDrawDust.Add(num32);
				}
				num18 *= 0.5f;
				num19 *= 0.7f;
			}
			if (drawPlayer.onFire2)
			{
				if (Main.rand.Next(4) == 0 && shadow == 0f)
				{
					int num33 = Dust.NewDust(new Vector2(Position.X - 2f, Position.Y - 2f), drawPlayer.width + 4, drawPlayer.height + 4, 75, drawPlayer.velocity.X * 0.4f, drawPlayer.velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 3f);
					Main.dust[num33].noGravity = true;
					Main.dust[num33].velocity *= 1.8f;
					Dust expr_243E_cp_0 = Main.dust[num33];
					expr_243E_cp_0.velocity.Y = expr_243E_cp_0.velocity.Y - 0.5f;
					Main.playerDrawDust.Add(num33);
				}
				num20 *= 0.6f;
				num19 *= 0.7f;
			}
			if (drawPlayer.noItems)
			{
				num19 *= 0.8f;
				num18 *= 0.65f;
			}
			if (drawPlayer.blind)
			{
				num19 *= 0.65f;
				num18 *= 0.7f;
			}
			if (drawPlayer.bleed)
			{
				num19 *= 0.9f;
				num20 *= 0.9f;
				if (!drawPlayer.dead && Main.rand.Next(30) == 0 && shadow == 0f)
				{
					int num34 = Dust.NewDust(Position, drawPlayer.width, drawPlayer.height, 5, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
					Dust expr_252B_cp_0 = Main.dust[num34];
					expr_252B_cp_0.velocity.Y = expr_252B_cp_0.velocity.Y + 0.5f;
					Main.dust[num34].velocity *= 0.25f;
					Main.playerDrawDust.Add(num34);
				}
			}
			if (shadow == 0f && drawPlayer.palladiumRegen && drawPlayer.statLife < drawPlayer.statLifeMax2 && base.IsActive && !Main.gamePaused && drawPlayer.miscCounter % 10 == 0 && shadow == 0f)
			{
				Vector2 position3;
				position3.X = Position.X + (float)Main.rand.Next(drawPlayer.width);
				position3.Y = Position.Y + (float)Main.rand.Next(drawPlayer.height);
				position3.X = Position.X + (float)(drawPlayer.width / 2) - 6f;
				position3.Y = Position.Y + (float)(drawPlayer.height / 2) - 6f;
				position3.X -= (float)Main.rand.Next(-10, 11);
				position3.Y -= (float)Main.rand.Next(-20, 21);
				int num35 = Gore.NewGore(position3, new Vector2((float)Main.rand.Next(-10, 11) * 0.1f, (float)Main.rand.Next(-20, -10) * 0.1f), 331, (float)Main.rand.Next(80, 120) * 0.01f);
				Main.playerDrawGore.Add(num35);
			}
			if (shadow == 0f && drawPlayer.loveStruck && base.IsActive && !Main.gamePaused && Main.rand.Next(5) == 0)
			{
				Vector2 value3 = new Vector2((float)Main.rand.Next(-10, 11), (float)Main.rand.Next(-10, 11));
				value3.Normalize();
				value3.X *= 0.66f;
				int num36 = Gore.NewGore(Position + new Vector2((float)Main.rand.Next(drawPlayer.width + 1), (float)Main.rand.Next(drawPlayer.height + 1)), value3 * (float)Main.rand.Next(3, 6) * 0.33f, 331, (float)Main.rand.Next(40, 121) * 0.01f);
				Main.gore[num36].sticky = false;
				Main.gore[num36].velocity *= 0.4f;
				Gore expr_27F3_cp_0 = Main.gore[num36];
				expr_27F3_cp_0.velocity.Y = expr_27F3_cp_0.velocity.Y - 0.6f;
				Main.playerDrawGore.Add(num36);
			}
			if (drawPlayer.stinky && base.IsActive && !Main.gamePaused)
			{
				num18 *= 0.7f;
				num20 *= 0.55f;
				if (Main.rand.Next(5) == 0 && shadow == 0f)
				{
					Vector2 value4 = new Vector2((float)Main.rand.Next(-10, 11), (float)Main.rand.Next(-10, 11));
					value4.Normalize();
					value4.X *= 0.66f;
					value4.Y = Math.Abs(value4.Y);
					Vector2 vector = value4 * (float)Main.rand.Next(3, 5) * 0.25f;
					int num37 = Dust.NewDust(Position, drawPlayer.width, drawPlayer.height, 188, vector.X, vector.Y * 0.5f, 100, default(Microsoft.Xna.Framework.Color), 1.5f);
					Main.dust[num37].velocity *= 0.1f;
					Dust expr_293E_cp_0 = Main.dust[num37];
					expr_293E_cp_0.velocity.Y = expr_293E_cp_0.velocity.Y - 0.5f;
					Main.playerDrawDust.Add(num37);
				}
			}
			if (drawPlayer.slowOgreSpit && base.IsActive && !Main.gamePaused)
			{
				num18 *= 0.6f;
				num20 *= 0.45f;
				if (Main.rand.Next(5) == 0 && shadow == 0f)
				{
					int type = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						4,
						256
					});
					Dust dust = Main.dust[Dust.NewDust(Position, drawPlayer.width, drawPlayer.height, type, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f)];
					dust.scale = 0.8f + Main.rand.NextFloat() * 0.6f;
					dust.fadeIn = 0.5f;
					dust.velocity *= 0.05f;
					dust.noLight = true;
					if (dust.type == 4)
					{
						dust.color = new Microsoft.Xna.Framework.Color(80, 170, 40, 120);
					}
					Main.playerDrawDust.Add(dust.dustIndex);
				}
				if (Main.rand.Next(5) == 0 && shadow == 0f)
				{
					int num38 = Gore.NewGore(Position + new Vector2(Main.rand.NextFloat(), Main.rand.NextFloat()) * drawPlayer.Size, Vector2.Zero, Utils.SelectRandom<int>(Main.rand, new int[]
					{
						1024,
						1025,
						1026
					}), 0.65f);
					Main.gore[num38].velocity *= 0.05f;
					Main.playerDrawGore.Add(num38);
				}
			}
			if (base.IsActive && !Main.gamePaused && shadow == 0f)
			{
				float num39 = (float)drawPlayer.miscCounter / 180f;
				float num40 = 0f;
				float scaleFactor = 10f;
				int type2 = 90;
				int num41 = 0;
				int j = 0;
				while (j < 3)
				{
					switch (j)
					{
					case 0:
						if (drawPlayer.nebulaLevelLife >= 1)
						{
							num40 = 6.28318548f / (float)drawPlayer.nebulaLevelLife;
							num41 = drawPlayer.nebulaLevelLife;
							goto IL_2C54;
						}
						break;
					case 1:
						if (drawPlayer.nebulaLevelMana >= 1)
						{
							num40 = -6.28318548f / (float)drawPlayer.nebulaLevelMana;
							num41 = drawPlayer.nebulaLevelMana;
							num39 = (float)(-(float)drawPlayer.miscCounter) / 180f;
							scaleFactor = 20f;
							type2 = 88;
							goto IL_2C54;
						}
						break;
					case 2:
						if (drawPlayer.nebulaLevelDamage >= 1)
						{
							num40 = 6.28318548f / (float)drawPlayer.nebulaLevelDamage;
							num41 = drawPlayer.nebulaLevelDamage;
							num39 = (float)drawPlayer.miscCounter / 180f;
							scaleFactor = 30f;
							type2 = 86;
							goto IL_2C54;
						}
						break;
					default:
						goto IL_2C54;
					}
					IL_2D22:
					j++;
					continue;
					IL_2C54:
					for (int k = 0; k < num41; k++)
					{
						int num42 = Dust.NewDust(Position, drawPlayer.width, drawPlayer.height, type2, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1.5f);
						Main.dust[num42].noGravity = true;
						Main.dust[num42].velocity = Vector2.Zero;
						Main.dust[num42].position = drawPlayer.Center + Vector2.UnitY * drawPlayer.gfxOffY + (num39 * 6.28318548f + num40 * (float)k).ToRotationVector2() * scaleFactor;
						Main.dust[num42].customData = drawPlayer;
						Main.playerDrawDust.Add(num42);
					}
					goto IL_2D22;
				}
			}
			if (drawPlayer.witheredArmor && base.IsActive && !Main.gamePaused)
			{
				num19 *= 0.5f;
				num18 *= 0.75f;
			}
			if (drawPlayer.witheredWeapon && drawPlayer.itemAnimation > 0 && drawPlayer.inventory[drawPlayer.selectedItem].damage > 0 && base.IsActive && !Main.gamePaused && Main.rand.Next(3) == 0)
			{
				int num43 = Dust.NewDust(new Vector2(Position.X - 2f, Position.Y - 2f), drawPlayer.width + 4, drawPlayer.height + 4, 272, 0f, 0f, 50, default(Microsoft.Xna.Framework.Color), 0.5f);
				Main.dust[num43].velocity *= 1.6f;
				Dust expr_2E33_cp_0 = Main.dust[num43];
				expr_2E33_cp_0.velocity.Y = expr_2E33_cp_0.velocity.Y - 1f;
				Main.dust[num43].position = Vector2.Lerp(Main.dust[num43].position, drawPlayer.Center, 0.5f);
				Main.playerDrawDust.Add(num43);
			}
			if (num18 != 1f || num19 != 1f || num20 != 1f || num21 != 1f)
			{
				if (drawPlayer.onFire || drawPlayer.onFire2 || drawPlayer.onFrostBurn)
				{
					color2 = drawPlayer.GetImmuneAlpha(Microsoft.Xna.Framework.Color.White, shadow);
					color3 = drawPlayer.GetImmuneAlpha(drawPlayer.eyeColor, shadow);
					color = drawPlayer.GetImmuneAlpha(drawPlayer.GetHairColor(true), shadow);
					color4 = drawPlayer.GetImmuneAlpha(drawPlayer.skinColor, shadow);
					color5 = drawPlayer.GetImmuneAlpha(drawPlayer.skinColor, shadow);
					color7 = drawPlayer.GetImmuneAlpha(drawPlayer.shirtColor, shadow);
					color8 = drawPlayer.GetImmuneAlpha(drawPlayer.underShirtColor, shadow);
					color9 = drawPlayer.GetImmuneAlpha(drawPlayer.pantsColor, shadow);
					color6 = drawPlayer.GetImmuneAlpha(drawPlayer.skinColor, shadow);
					color10 = drawPlayer.GetImmuneAlpha(drawPlayer.shoeColor, shadow);
					color11 = drawPlayer.GetImmuneAlpha(Microsoft.Xna.Framework.Color.White, shadow);
					color12 = drawPlayer.GetImmuneAlpha(Microsoft.Xna.Framework.Color.White, shadow);
					color14 = drawPlayer.GetImmuneAlpha(Microsoft.Xna.Framework.Color.White, shadow);
				}
				else
				{
					color2 = Main.buffColor(color2, num18, num19, num20, num21);
					color3 = Main.buffColor(color3, num18, num19, num20, num21);
					color = Main.buffColor(color, num18, num19, num20, num21);
					color4 = Main.buffColor(color4, num18, num19, num20, num21);
					color5 = Main.buffColor(color5, num18, num19, num20, num21);
					color7 = Main.buffColor(color7, num18, num19, num20, num21);
					color8 = Main.buffColor(color8, num18, num19, num20, num21);
					color9 = Main.buffColor(color9, num18, num19, num20, num21);
					color6 = Main.buffColor(color6, num18, num19, num20, num21);
					color10 = Main.buffColor(color10, num18, num19, num20, num21);
					color11 = Main.buffColor(color11, num18, num19, num20, num21);
					color12 = Main.buffColor(color12, num18, num19, num20, num21);
					color14 = Main.buffColor(color14, num18, num19, num20, num21);
				}
			}
			if (drawPlayer.socialGhost)
			{
				color2 = Microsoft.Xna.Framework.Color.Transparent;
				color3 = Microsoft.Xna.Framework.Color.Transparent;
				color = Microsoft.Xna.Framework.Color.Transparent;
				color4 = Microsoft.Xna.Framework.Color.Transparent;
				color5 = Microsoft.Xna.Framework.Color.Transparent;
				color7 = Microsoft.Xna.Framework.Color.Transparent;
				color8 = Microsoft.Xna.Framework.Color.Transparent;
				color9 = Microsoft.Xna.Framework.Color.Transparent;
				color10 = Microsoft.Xna.Framework.Color.Transparent;
				color6 = Microsoft.Xna.Framework.Color.Transparent;
				if (color11.A > Main.gFade)
				{
					color11.A = Main.gFade;
				}
				if (color12.A > Main.gFade)
				{
					color12.A = Main.gFade;
				}
				if (color14.A > Main.gFade)
				{
					color14.A = Main.gFade;
				}
			}
			if (drawPlayer.socialIgnoreLight)
			{
				float scale = 1.2f;
				color2 = Microsoft.Xna.Framework.Color.White * scale;
				color3 = drawPlayer.eyeColor * scale;
				color = GameShaders.Hair.GetColor((short)drawPlayer.hairDye, drawPlayer, Microsoft.Xna.Framework.Color.White);
				color4 = drawPlayer.skinColor * scale;
				color5 = drawPlayer.skinColor * scale;
				color7 = drawPlayer.shirtColor * scale;
				color8 = drawPlayer.underShirtColor * scale;
				color9 = drawPlayer.pantsColor * scale;
				color10 = drawPlayer.shoeColor * scale;
				color6 = drawPlayer.skinColor * scale;
			}
			float num44 = 1f;
			if (drawPlayer.inventory[drawPlayer.selectedItem].type == 3106)
			{
				float num45 = drawPlayer.stealth;
				if ((double)num45 < 0.03)
				{
					num45 = 0.03f;
				}
				float num46 = (1f + num45 * 10f) / 11f;
				if (num45 < 0f)
				{
					num45 = 0f;
				}
				if (num45 >= 1f - shadow && shadow > 0f)
				{
					num45 = shadow * 0.5f;
				}
				num44 = num46;
				color11 = new Microsoft.Xna.Framework.Color((int)((byte)((float)color11.R * num45)), (int)((byte)((float)color11.G * num45)), (int)((byte)((float)color11.B * num46)), (int)((byte)((float)color11.A * num45)));
				color12 = new Microsoft.Xna.Framework.Color((int)((byte)((float)color12.R * num45)), (int)((byte)((float)color12.G * num45)), (int)((byte)((float)color12.B * num46)), (int)((byte)((float)color12.A * num45)));
				color14 = new Microsoft.Xna.Framework.Color((int)((byte)((float)color14.R * num45)), (int)((byte)((float)color14.G * num45)), (int)((byte)((float)color14.B * num46)), (int)((byte)((float)color14.A * num45)));
				num45 *= num45;
				color2 = Microsoft.Xna.Framework.Color.Multiply(color2, num45);
				color3 = Microsoft.Xna.Framework.Color.Multiply(color3, num45);
				color = Microsoft.Xna.Framework.Color.Multiply(color, num45);
				color4 = Microsoft.Xna.Framework.Color.Multiply(color4, num45);
				color5 = Microsoft.Xna.Framework.Color.Multiply(color5, num45);
				color7 = Microsoft.Xna.Framework.Color.Multiply(color7, num45);
				color8 = Microsoft.Xna.Framework.Color.Multiply(color8, num45);
				color9 = Microsoft.Xna.Framework.Color.Multiply(color9, num45);
				color10 = Microsoft.Xna.Framework.Color.Multiply(color10, num45);
				color6 = Microsoft.Xna.Framework.Color.Multiply(color6, num45);
				color13 = Microsoft.Xna.Framework.Color.Multiply(color13, num45);
				color16 = Microsoft.Xna.Framework.Color.Multiply(color16, num45);
				color17 = Microsoft.Xna.Framework.Color.Multiply(color17, num45);
				color18 = Microsoft.Xna.Framework.Color.Multiply(color18, num45);
				color19 = Microsoft.Xna.Framework.Color.Multiply(color19, num45);
			}
			else if (drawPlayer.shroomiteStealth)
			{
				float num47 = drawPlayer.stealth;
				if ((double)num47 < 0.03)
				{
					num47 = 0.03f;
				}
				float num48 = (1f + num47 * 10f) / 11f;
				if (num47 < 0f)
				{
					num47 = 0f;
				}
				if (num47 >= 1f - shadow && shadow > 0f)
				{
					num47 = shadow * 0.5f;
				}
				num44 = num48;
				color11 = new Microsoft.Xna.Framework.Color((int)((byte)((float)color11.R * num47)), (int)((byte)((float)color11.G * num47)), (int)((byte)((float)color11.B * num48)), (int)((byte)((float)color11.A * num47)));
				color12 = new Microsoft.Xna.Framework.Color((int)((byte)((float)color12.R * num47)), (int)((byte)((float)color12.G * num47)), (int)((byte)((float)color12.B * num48)), (int)((byte)((float)color12.A * num47)));
				color14 = new Microsoft.Xna.Framework.Color((int)((byte)((float)color14.R * num47)), (int)((byte)((float)color14.G * num47)), (int)((byte)((float)color14.B * num48)), (int)((byte)((float)color14.A * num47)));
				num47 *= num47;
				color2 = Microsoft.Xna.Framework.Color.Multiply(color2, num47);
				color3 = Microsoft.Xna.Framework.Color.Multiply(color3, num47);
				color = Microsoft.Xna.Framework.Color.Multiply(color, num47);
				color4 = Microsoft.Xna.Framework.Color.Multiply(color4, num47);
				color5 = Microsoft.Xna.Framework.Color.Multiply(color5, num47);
				color7 = Microsoft.Xna.Framework.Color.Multiply(color7, num47);
				color8 = Microsoft.Xna.Framework.Color.Multiply(color8, num47);
				color9 = Microsoft.Xna.Framework.Color.Multiply(color9, num47);
				color10 = Microsoft.Xna.Framework.Color.Multiply(color10, num47);
				color6 = Microsoft.Xna.Framework.Color.Multiply(color6, num47);
				color13 = Microsoft.Xna.Framework.Color.Multiply(color13, num47);
				color16 = Microsoft.Xna.Framework.Color.Multiply(color16, num47);
				color17 = Microsoft.Xna.Framework.Color.Multiply(color17, num47);
				color18 = Microsoft.Xna.Framework.Color.Multiply(color18, num47);
				color19 = Microsoft.Xna.Framework.Color.Multiply(color19, num47);
			}
			else if (drawPlayer.setVortex)
			{
				float num49 = drawPlayer.stealth;
				if ((double)num49 < 0.03)
				{
					num49 = 0.03f;
				}
				if (num49 < 0f)
				{
					num49 = 0f;
				}
				if (num49 >= 1f - shadow && shadow > 0f)
				{
					num49 = shadow * 0.5f;
				}
				num44 = num49;
				Microsoft.Xna.Framework.Color secondColor = new Microsoft.Xna.Framework.Color(Vector4.Lerp(Vector4.One, new Vector4(0f, 0.12f, 0.16f, 0f), 1f - num49));
				color11 = color11.MultiplyRGBA(secondColor);
				color12 = color12.MultiplyRGBA(secondColor);
				color14 = color14.MultiplyRGBA(secondColor);
				num49 *= num49;
				color2 = Microsoft.Xna.Framework.Color.Multiply(color2, num49);
				color3 = Microsoft.Xna.Framework.Color.Multiply(color3, num49);
				color = Microsoft.Xna.Framework.Color.Multiply(color, num49);
				color4 = Microsoft.Xna.Framework.Color.Multiply(color4, num49);
				color5 = Microsoft.Xna.Framework.Color.Multiply(color5, num49);
				color7 = Microsoft.Xna.Framework.Color.Multiply(color7, num49);
				color8 = Microsoft.Xna.Framework.Color.Multiply(color8, num49);
				color9 = Microsoft.Xna.Framework.Color.Multiply(color9, num49);
				color10 = Microsoft.Xna.Framework.Color.Multiply(color10, num49);
				color6 = Microsoft.Xna.Framework.Color.Multiply(color6, num49);
				color13 = Microsoft.Xna.Framework.Color.Multiply(color13, num49);
				color16 = Microsoft.Xna.Framework.Color.Multiply(color16, num49);
				color17 = Microsoft.Xna.Framework.Color.Multiply(color17, num49);
				color18 = Microsoft.Xna.Framework.Color.Multiply(color18, num49);
				color19 = Microsoft.Xna.Framework.Color.Multiply(color19, num49);
			}
			if (drawPlayer.gravDir == 1f)
			{
				if (drawPlayer.direction == 1)
				{
					spriteEffects = SpriteEffects.None;
					effect = SpriteEffects.None;
				}
				else
				{
					spriteEffects = SpriteEffects.FlipHorizontally;
					effect = SpriteEffects.FlipHorizontally;
				}
				if (!drawPlayer.dead)
				{
					drawPlayer.legPosition.Y = 0f;
					drawPlayer.headPosition.Y = 0f;
					drawPlayer.bodyPosition.Y = 0f;
				}
			}
			else
			{
				if (drawPlayer.direction == 1)
				{
					spriteEffects = SpriteEffects.FlipVertically;
					effect = SpriteEffects.FlipVertically;
				}
				else
				{
					spriteEffects = (SpriteEffects.FlipHorizontally | SpriteEffects.FlipVertically);
					effect = (SpriteEffects.FlipHorizontally | SpriteEffects.FlipVertically);
				}
				if (!drawPlayer.dead)
				{
					drawPlayer.legPosition.Y = 6f;
					drawPlayer.headPosition.Y = 6f;
					drawPlayer.bodyPosition.Y = 6f;
				}
			}
			Vector2 vector2 = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.75f);
			Vector2 origin = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.5f);
			Vector2 vector3 = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.4f);
			if ((drawPlayer.merman || drawPlayer.forceMerman) && !drawPlayer.hideMerman)
			{
				drawPlayer.headRotation = drawPlayer.velocity.Y * (float)drawPlayer.direction * 0.1f;
				if ((double)drawPlayer.headRotation < -0.3)
				{
					drawPlayer.headRotation = -0.3f;
				}
				if ((double)drawPlayer.headRotation > 0.3)
				{
					drawPlayer.headRotation = 0.3f;
				}
			}
			else if (!drawPlayer.dead)
			{
				drawPlayer.headRotation = 0f;
			}
			Microsoft.Xna.Framework.Rectangle bodyFrame = drawPlayer.bodyFrame;
			bodyFrame.Y -= 336;
			if (bodyFrame.Y < 0)
			{
				bodyFrame.Y = 0;
			}
			int height = 26;
			int hair = drawPlayer.hair;
			bool flag7 = hair > 50 && (hair < 56 || hair > 63) && (hair < 74 || hair > 77) && (hair < 88 || hair > 89) && hair != 94 && hair != 100 && hair != 104 && hair != 112 && hair < 116;
			if (hair == 133)
			{
				flag7 = true;
			}
			if (flag6)
			{
				bodyFrame.Height = 0;
			}
			else if (flag7)
			{
				if (drawPlayer.head == -1 || flag4 || drawPlayer.head == 23 || drawPlayer.head == 0)
				{
					value = new DrawData(Main.playerHairTexture[drawPlayer.hair], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(bodyFrame), color, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
					value.shader = -num3;
					Main.playerDrawData.Add(value);
				}
				else if (flag5)
				{
					value = new DrawData(Main.playerHairAltTexture[drawPlayer.hair], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(bodyFrame), color, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
					value.shader = -num3;
					Main.playerDrawData.Add(value);
				}
				if (drawPlayer.gravDir == 1f)
				{
					bodyFrame.Height = height;
				}
			}
			if (drawPlayer.mount.Active)
			{
				drawPlayer.mount.Draw(Main.playerDrawData, 0, drawPlayer, Position, color13, spriteEffects, shadow);
				drawPlayer.mount.Draw(Main.playerDrawData, 1, drawPlayer, Position, color13, spriteEffects, shadow);
			}
			if (drawPlayer.carpetFrame >= 0)
			{
				Microsoft.Xna.Framework.Color color20 = color14;
				float num50 = 0f;
				if (drawPlayer.gravDir == -1f)
				{
					num50 = 10f;
				}
				value = new DrawData(Main.flyingCarpetTexture, new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + 28f * drawPlayer.gravDir + num50))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.flyingCarpetTexture.Height / 6 * drawPlayer.carpetFrame, Main.flyingCarpetTexture.Width, Main.flyingCarpetTexture.Height / 6)), color20, drawPlayer.bodyRotation, new Vector2((float)(Main.flyingCarpetTexture.Width / 2), (float)(Main.flyingCarpetTexture.Height / 8)), 1f, spriteEffects, 0);
				value.shader = shader13;
				Main.playerDrawData.Add(value);
			}
			if (drawPlayer.electrified && shadow == 0f)
			{
				Texture2D texture2D = Main.glowMaskTexture[25];
				int num51 = drawPlayer.miscCounter / 5;
				for (int l = 0; l < 2; l++)
				{
					num51 %= 7;
					if (num51 <= 1 || num51 >= 5)
					{
						value = new DrawData(texture2D, new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num51 * texture2D.Height / 7, texture2D.Width, texture2D.Height / 7)), color15, drawPlayer.bodyRotation, new Vector2((float)(texture2D.Width / 2), (float)(texture2D.Height / 14)), 1f, spriteEffects, 0);
						Main.playerDrawData.Add(value);
					}
					num51 += 3;
				}
			}
			if (drawPlayer.setForbidden && shadow == 0f)
			{
				Microsoft.Xna.Framework.Color color21 = Microsoft.Xna.Framework.Color.Lerp(color12, Microsoft.Xna.Framework.Color.White, 0.7f);
				Texture2D texture2D2 = Main.extraTexture[74];
				Texture2D texture = Main.glowMaskTexture[217];
				bool flag8 = !drawPlayer.setForbiddenCooldownLocked;
				int num52 = (int)(((float)drawPlayer.miscCounter / 300f * 6.28318548f).ToRotationVector2().Y * 6f);
				float num53 = ((float)drawPlayer.miscCounter / 75f * 6.28318548f).ToRotationVector2().X * 4f;
				Microsoft.Xna.Framework.Color color22 = new Microsoft.Xna.Framework.Color(80, 70, 40, 0) * (num53 / 8f + 0.5f) * 0.8f;
				if (!flag8)
				{
					num52 = 0;
					num53 = 2f;
					color22 = new Microsoft.Xna.Framework.Color(80, 70, 40, 0) * 0.3f;
					color21 = color21.MultiplyRGB(new Microsoft.Xna.Framework.Color(0.5f, 0.5f, 1f));
				}
				Vector2 vector4 = new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2));
				vector4 += new Vector2((float)(-(float)drawPlayer.direction * 10), (float)(-20 + num52));
				value = new DrawData(texture2D2, vector4, null, color21, drawPlayer.bodyRotation, texture2D2.Size() / 2f, 1f, spriteEffects, 0);
				value.shader = num6;
				Main.playerDrawData.Add(value);
				for (float num54 = 0f; num54 < 4f; num54 += 1f)
				{
					value = new DrawData(texture, vector4 + (num54 * 1.57079637f).ToRotationVector2() * num53, null, color22, drawPlayer.bodyRotation, texture2D2.Size() / 2f, 1f, spriteEffects, 0);
					Main.playerDrawData.Add(value);
				}
			}
			else if (drawPlayer.webbed && shadow == 0f && drawPlayer.velocity.Y != 0f)
			{
				Microsoft.Xna.Framework.Color color23 = color12 * 0.75f;
				Texture2D texture2D3 = Main.extraTexture[32];
				value = new DrawData(texture2D3, new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), null, color23, drawPlayer.bodyRotation, texture2D3.Size() / 2f, 1f, spriteEffects, 0);
				Main.playerDrawData.Add(value);
			}
			bool flag9 = false;
			if ((drawPlayer.wings == 0 || drawPlayer.velocity.Y == 0f) && (drawPlayer.inventory[drawPlayer.selectedItem].type == 1178 || drawPlayer.inventory[drawPlayer.selectedItem].type == 779 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1295 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1910 || drawPlayer.turtleArmor || drawPlayer.body == 106 || drawPlayer.body == 170))
			{
				flag9 = true;
				int type3 = drawPlayer.inventory[drawPlayer.selectedItem].type;
				int num55 = 1;
				float num56 = -4f;
				float num57 = -8f;
				int shader14 = 0;
				if (drawPlayer.turtleArmor)
				{
					num55 = 4;
					shader14 = num6;
				}
				else if (drawPlayer.body == 106)
				{
					num55 = 6;
					shader14 = num6;
				}
				else if (drawPlayer.body == 170)
				{
					num55 = 7;
					shader14 = num6;
				}
				else if (type3 == 1178)
				{
					num55 = 1;
				}
				else if (type3 == 779)
				{
					num55 = 2;
				}
				else if (type3 == 1295)
				{
					num55 = 3;
				}
				else if (type3 == 1910)
				{
					num55 = 5;
				}
				if (num55 == 7)
				{
					value = new DrawData(Main.BackPackTexture[num55], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, drawPlayer.bodyFrame.Y, Main.BackPackTexture[num55].Width, drawPlayer.bodyFrame.Height)), color12, drawPlayer.bodyRotation, new Vector2((float)Main.BackPackTexture[num55].Width * 0.5f, origin.Y), 1f, spriteEffects, 0);
					value.shader = shader14;
					Main.playerDrawData.Add(value);
				}
				else if (num55 == 4 || num55 == 6)
				{
					value = new DrawData(Main.BackPackTexture[num55], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
					value.shader = shader14;
					Main.playerDrawData.Add(value);
				}
				else
				{
					value = new DrawData(Main.BackPackTexture[num55], new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction))) + num56 * (float)drawPlayer.direction, (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + num57 * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.BackPackTexture[num55].Width, Main.BackPackTexture[num55].Height)), color12, drawPlayer.bodyRotation, new Vector2((float)(Main.BackPackTexture[num55].Width / 2), (float)(Main.BackPackTexture[num55].Height / 2)), 1f, spriteEffects, 0);
					value.shader = shader14;
					Main.playerDrawData.Add(value);
				}
			}
			if (!flag9 && drawPlayer.back > 0 && drawPlayer.back < 14 && !drawPlayer.mount.Active)
			{
				if (drawPlayer.front >= 1 && drawPlayer.front <= 4)
				{
					int num58 = drawPlayer.bodyFrame.Y / 56;
					if (num58 < 1 || num58 > 5)
					{
						num = 10;
					}
					else
					{
						if (drawPlayer.front == 1)
						{
							num = 0;
						}
						if (drawPlayer.front == 2)
						{
							num = 8;
						}
						if (drawPlayer.front == 3)
						{
							num = 0;
						}
						if (drawPlayer.front == 4)
						{
							num = 8;
						}
					}
				}
				value = new DrawData(Main.accBackTexture[(int)drawPlayer.back], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
				value.shader = shader4;
				Main.playerDrawData.Add(value);
			}
			Position.Y += (float)((int)num4 / 2);
			if (!flag9 && drawPlayer.wings > 0)
			{
				this.LoadWings(drawPlayer.wings);
				if (drawPlayer.wings == 22)
				{
					if ((drawPlayer.velocity.Y != 0f || drawPlayer.grappling[0] != -1) && !drawPlayer.mount.Active)
					{
						this.LoadItemFlames(1866);
						Microsoft.Xna.Framework.Color color24 = color12;
						int num59 = 24;
						int num60 = 0;
						if (shadow == 0f && drawPlayer.grappling[0] == -1)
						{
							for (int m = 0; m < 7; m++)
							{
								Microsoft.Xna.Framework.Color color25 = new Microsoft.Xna.Framework.Color(250 - m * 10, 250 - m * 10, 250 - m * 10, 150 - m * 10);
								Vector2 vector5 = new Vector2((float)Main.rand.Next(-10, 11) * 0.2f, (float)Main.rand.Next(-10, 11) * 0.2f);
								num44 *= num44;
								num44 *= 1f - shadow;
								color25 = new Microsoft.Xna.Framework.Color((int)((float)color25.R * num44), (int)((float)color25.G * num44), (int)((float)color25.B * num44), (int)((float)color25.A * num44));
								vector5.X = drawPlayer.itemFlamePos[m].X;
								vector5.Y = -drawPlayer.itemFlamePos[m].Y;
								vector5 *= 0.5f;
								value = new DrawData(Main.itemFlameTexture[1866], new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num60 * drawPlayer.direction), (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num59 * drawPlayer.gravDir))) + vector5, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.wingsTexture[drawPlayer.wings].Height / 7 * drawPlayer.wingFrame, Main.wingsTexture[drawPlayer.wings].Width, Main.wingsTexture[drawPlayer.wings].Height / 7 - 2)), color25, drawPlayer.bodyRotation, new Vector2((float)(Main.wingsTexture[drawPlayer.wings].Width / 2), (float)(Main.wingsTexture[drawPlayer.wings].Height / 14)), 1f, spriteEffects, 0);
								value.shader = shader12;
								Main.playerDrawData.Add(value);
							}
						}
						value = new DrawData(Main.wingsTexture[drawPlayer.wings], new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num60 * drawPlayer.direction), (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num59 * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.wingsTexture[drawPlayer.wings].Height / 7 * drawPlayer.wingFrame, Main.wingsTexture[drawPlayer.wings].Width, Main.wingsTexture[drawPlayer.wings].Height / 7)), color24, drawPlayer.bodyRotation, new Vector2((float)(Main.wingsTexture[drawPlayer.wings].Width / 2), (float)(Main.wingsTexture[drawPlayer.wings].Height / 14)), 1f, spriteEffects, 0);
						value.shader = shader12;
						Main.playerDrawData.Add(value);
					}
				}
				else if (drawPlayer.wings == 28)
				{
					if ((drawPlayer.velocity.Y != 0f || drawPlayer.grappling[0] != -1) && !drawPlayer.mount.Active)
					{
						Microsoft.Xna.Framework.Color value5 = color12;
						Vector2 value6 = new Vector2(0f, 0f);
						Texture2D texture2D4 = Main.wingsTexture[drawPlayer.wings];
						Vector2 vec = Position + drawPlayer.Size * new Vector2(0.5f, 1f) - Main.screenPosition + value6 * drawPlayer.Directions;
						Microsoft.Xna.Framework.Rectangle rectangle = texture2D4.Frame(1, 4, 0, drawPlayer.miscCounter / 5 % 4);
						rectangle.Width -= 2;
						rectangle.Height -= 2;
						value = new DrawData(texture2D4, vec.Floor(), new Microsoft.Xna.Framework.Rectangle?(rectangle), Microsoft.Xna.Framework.Color.Lerp(value5, Microsoft.Xna.Framework.Color.White, 1f), drawPlayer.bodyRotation, rectangle.Size() / 2f, 1f, spriteEffects, 0);
						value.shader = shader12;
						Main.playerDrawData.Add(value);
						texture2D4 = Main.extraTexture[38];
						value = new DrawData(texture2D4, vec.Floor(), new Microsoft.Xna.Framework.Rectangle?(rectangle), Microsoft.Xna.Framework.Color.Lerp(value5, Microsoft.Xna.Framework.Color.White, 0.5f), drawPlayer.bodyRotation, rectangle.Size() / 2f, 1f, spriteEffects, 0);
						value.shader = shader12;
						Main.playerDrawData.Add(value);
					}
				}
				else if (drawPlayer.wings == 34)
				{
					if ((drawPlayer.velocity.Y != 0f || drawPlayer.grappling[0] != -1) && !drawPlayer.mount.Active)
					{
						num44 *= num44;
						num44 *= 1f - shadow;
						Microsoft.Xna.Framework.Color color26 = new Microsoft.Xna.Framework.Color((int)(250f * num44), (int)(250f * num44), (int)(250f * num44), (int)(100f * num44));
						Vector2 value7 = new Vector2(0f, 0f);
						Texture2D texture2D5 = Main.wingsTexture[drawPlayer.wings];
						Vector2 vec2 = Position + drawPlayer.Size / 2f - Main.screenPosition + value7 * drawPlayer.Directions - Vector2.UnitX * (float)drawPlayer.direction * 4f;
						Microsoft.Xna.Framework.Rectangle rectangle2 = texture2D5.Frame(1, 6, 0, drawPlayer.wingFrame);
						rectangle2.Width -= 2;
						rectangle2.Height -= 2;
						value = new DrawData(texture2D5, vec2.Floor(), new Microsoft.Xna.Framework.Rectangle?(rectangle2), color26, drawPlayer.bodyRotation, rectangle2.Size() / 2f, 1f, spriteEffects, 0);
						value.shader = shader12;
						Main.playerDrawData.Add(value);
					}
				}
				else
				{
					int num61 = 0;
					int num62 = 0;
					if (drawPlayer.wings == 5)
					{
						num62 = 4;
						num61 -= 4;
					}
					else if (drawPlayer.wings == 27)
					{
						num62 = 4;
					}
					Microsoft.Xna.Framework.Color color27 = color12;
					if (drawPlayer.wings == 9 || drawPlayer.wings == 29)
					{
						num44 *= num44;
						num44 *= 1f - shadow;
						color27 = new Microsoft.Xna.Framework.Color((int)(250f * num44), (int)(250f * num44), (int)(250f * num44), (int)(100f * num44));
					}
					if (drawPlayer.wings == 10)
					{
						num44 *= num44;
						num44 *= 1f - shadow;
						color27 = new Microsoft.Xna.Framework.Color((int)(250f * num44), (int)(250f * num44), (int)(250f * num44), (int)(175f * num44));
					}
					if (drawPlayer.wings == 11 && color27.A > Main.gFade)
					{
						color27.A = Main.gFade;
					}
					if (drawPlayer.wings == 31)
					{
						color27.A = (byte)(220f * num44);
					}
					if (drawPlayer.wings == 32)
					{
						color27.A = (byte)(127f * num44);
					}
					value = new DrawData(Main.wingsTexture[drawPlayer.wings], new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num62 * drawPlayer.direction), (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num61 * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, Main.wingsTexture[drawPlayer.wings].Width, Main.wingsTexture[drawPlayer.wings].Height / 4)), color27, drawPlayer.bodyRotation, new Vector2((float)(Main.wingsTexture[drawPlayer.wings].Width / 2), (float)(Main.wingsTexture[drawPlayer.wings].Height / 8)), 1f, spriteEffects, 0);
					value.shader = shader12;
					Main.playerDrawData.Add(value);
					if (drawPlayer.wings == 23)
					{
						num44 *= num44;
						num44 *= 1f - shadow;
						color27 = new Microsoft.Xna.Framework.Color((int)(200f * num44), (int)(200f * num44), (int)(200f * num44), (int)(200f * num44));
						value = new DrawData(Main.FlameTexture[8], new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num62 * drawPlayer.direction), (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num61 * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, Main.wingsTexture[drawPlayer.wings].Width, Main.wingsTexture[drawPlayer.wings].Height / 4)), color27, drawPlayer.bodyRotation, new Vector2((float)(Main.wingsTexture[drawPlayer.wings].Width / 2), (float)(Main.wingsTexture[drawPlayer.wings].Height / 8)), 1f, spriteEffects, 0);
						value.shader = shader12;
						Main.playerDrawData.Add(value);
					}
					else if (drawPlayer.wings == 27)
					{
						value = new DrawData(Main.glowMaskTexture[92], new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num62 * drawPlayer.direction), (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num61 * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, Main.wingsTexture[drawPlayer.wings].Width, Main.wingsTexture[drawPlayer.wings].Height / 4)), new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * num44 * (1f - shadow), drawPlayer.bodyRotation, new Vector2((float)(Main.wingsTexture[drawPlayer.wings].Width / 2), (float)(Main.wingsTexture[drawPlayer.wings].Height / 8)), 1f, spriteEffects, 0);
						value.shader = shader12;
						Main.playerDrawData.Add(value);
					}
					else if (drawPlayer.wings == 30)
					{
						value = new DrawData(Main.glowMaskTexture[181], new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num62 * drawPlayer.direction), (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num61 * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, Main.wingsTexture[drawPlayer.wings].Width, Main.wingsTexture[drawPlayer.wings].Height / 4)), new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * num44 * (1f - shadow), drawPlayer.bodyRotation, new Vector2((float)(Main.wingsTexture[drawPlayer.wings].Width / 2), (float)(Main.wingsTexture[drawPlayer.wings].Height / 8)), 1f, spriteEffects, 0);
						value.shader = shader12;
						Main.playerDrawData.Add(value);
					}
					else if (drawPlayer.wings == 29)
					{
						value = new DrawData(Main.wingsTexture[drawPlayer.wings], new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num62 * drawPlayer.direction), (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num61 * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, Main.wingsTexture[drawPlayer.wings].Width, Main.wingsTexture[drawPlayer.wings].Height / 4)), new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * num44 * (1f - shadow) * 0.5f, drawPlayer.bodyRotation, new Vector2((float)(Main.wingsTexture[drawPlayer.wings].Width / 2), (float)(Main.wingsTexture[drawPlayer.wings].Height / 8)), 1.06f, spriteEffects, 0);
						value.shader = shader12;
						Main.playerDrawData.Add(value);
					}
					else if (drawPlayer.wings == 36)
					{
						value = new DrawData(Main.glowMaskTexture[213], new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num62 * drawPlayer.direction), (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num61 * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, Main.wingsTexture[drawPlayer.wings].Width, Main.wingsTexture[drawPlayer.wings].Height / 4)), new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * num44 * (1f - shadow), drawPlayer.bodyRotation, new Vector2((float)(Main.wingsTexture[drawPlayer.wings].Width / 2), (float)(Main.wingsTexture[drawPlayer.wings].Height / 8)), 1.06f, spriteEffects, 0);
						value.shader = shader12;
						Main.playerDrawData.Add(value);
						Vector2 spinningpoint = new Vector2(0f, 2f - shadow * 2f);
						for (int n = 0; n < 4; n++)
						{
							value = new DrawData(Main.glowMaskTexture[213], spinningpoint.RotatedBy((double)(1.57079637f * (float)n), default(Vector2)) + new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num62 * drawPlayer.direction), (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num61 * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, Main.wingsTexture[drawPlayer.wings].Width, Main.wingsTexture[drawPlayer.wings].Height / 4)), new Microsoft.Xna.Framework.Color(127, 127, 127, 127) * num44 * (1f - shadow), drawPlayer.bodyRotation, new Vector2((float)(Main.wingsTexture[drawPlayer.wings].Width / 2), (float)(Main.wingsTexture[drawPlayer.wings].Height / 8)), 1f, spriteEffects, 0);
							value.shader = shader12;
							Main.playerDrawData.Add(value);
						}
					}
					else if (drawPlayer.wings == 31)
					{
						Microsoft.Xna.Framework.Color value8 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
						value8 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.HotPink, Microsoft.Xna.Framework.Color.Crimson, (float)Math.Cos((double)(6.28318548f * ((float)drawPlayer.miscCounter / 100f))) * 0.4f + 0.5f);
						value8.A = 0;
						for (int num63 = 0; num63 < 4; num63++)
						{
							Vector2 value9 = new Vector2((float)Math.Cos((double)(6.28318548f * ((float)drawPlayer.miscCounter / 60f))) * 0.5f + 0.5f, 0f).RotatedBy((double)((float)num63 * 1.57079637f), default(Vector2)) * 1f;
							value = new DrawData(Main.wingsTexture[drawPlayer.wings], new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num62 * drawPlayer.direction), (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num61 * drawPlayer.gravDir))) + value9, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, Main.wingsTexture[drawPlayer.wings].Width, Main.wingsTexture[drawPlayer.wings].Height / 4)), value8 * num44 * (1f - shadow) * 0.5f, drawPlayer.bodyRotation, new Vector2((float)(Main.wingsTexture[drawPlayer.wings].Width / 2), (float)(Main.wingsTexture[drawPlayer.wings].Height / 8)), 1f, spriteEffects, 0);
							value.shader = shader12;
							Main.playerDrawData.Add(value);
						}
						value = new DrawData(Main.wingsTexture[drawPlayer.wings], new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num62 * drawPlayer.direction), (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num61 * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, Main.wingsTexture[drawPlayer.wings].Width, Main.wingsTexture[drawPlayer.wings].Height / 4)), value8 * num44 * (1f - shadow) * 1f, drawPlayer.bodyRotation, new Vector2((float)(Main.wingsTexture[drawPlayer.wings].Width / 2), (float)(Main.wingsTexture[drawPlayer.wings].Height / 8)), 1f, spriteEffects, 0);
						value.shader = shader12;
						Main.playerDrawData.Add(value);
					}
					else if (drawPlayer.wings == 32)
					{
						value = new DrawData(Main.glowMaskTexture[183], new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num62 * drawPlayer.direction), (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num61 * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, Main.wingsTexture[drawPlayer.wings].Width, Main.wingsTexture[drawPlayer.wings].Height / 4)), new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * num44 * (1f - shadow), drawPlayer.bodyRotation, new Vector2((float)(Main.wingsTexture[drawPlayer.wings].Width / 2), (float)(Main.wingsTexture[drawPlayer.wings].Height / 8)), 1.06f, spriteEffects, 0);
						value.shader = shader12;
						Main.playerDrawData.Add(value);
					}
				}
			}
			if (drawPlayer.balloon > 0)
			{
				int num64 = DateTime.Now.Millisecond % 800 / 200;
				Vector2 vector6 = Main.OffsetsPlayerOffhand[drawPlayer.bodyFrame.Y / 56];
				if (drawPlayer.direction != 1)
				{
					vector6.X = (float)drawPlayer.width - vector6.X;
				}
				if (drawPlayer.gravDir != 1f)
				{
					vector6.Y -= (float)drawPlayer.height;
				}
				value = new DrawData(Main.accBalloonTexture[(int)drawPlayer.balloon], new Vector2((float)((int)(Position.X - Main.screenPosition.X + vector6.X)), (float)((int)(Position.Y - Main.screenPosition.Y + vector6.Y * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.accBalloonTexture[(int)drawPlayer.balloon].Height / 4 * num64, Main.accBalloonTexture[(int)drawPlayer.balloon].Width, Main.accBalloonTexture[(int)drawPlayer.balloon].Height / 4)), color12, drawPlayer.bodyRotation, new Vector2((float)(26 + drawPlayer.direction * 4), 28f + drawPlayer.gravDir * 6f), 1f, spriteEffects, 0);
				value.shader = shader11;
				Main.playerDrawData.Add(value);
			}
			Position.Y -= (float)((int)num4 / 2);
			if (drawPlayer.body != 83 && drawPlayer.body != 82 && drawPlayer.body != 93)
			{
				value = new DrawData(Main.playerTextures[skinVariant, 3], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
				Main.playerDrawData.Add(value);
				if (drawPlayer.legs != 67 && drawPlayer.legs != 106 && drawPlayer.legs != 140 && drawPlayer.legs != 138 && drawPlayer.shoe != 15 && drawPlayer.legs != 143)
				{
					value = new DrawData(Main.playerTextures[skinVariant, 10], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color6, drawPlayer.legRotation, origin, 1f, spriteEffects, 0);
					Main.playerDrawData.Add(value);
				}
			}
			if (drawPlayer.wearsRobe)
			{
				goto IL_6502;
			}
			IL_6048:
			if (drawPlayer.legs == 140)
			{
				if (!drawPlayer.invis && !drawPlayer.mount.Active)
				{
					Texture2D texture2 = Main.extraTexture[73];
					bool flag10 = drawPlayer.legFrame.Y == 0;
					int num65 = drawPlayer.miscCounter / 3 % 8;
					if (flag10)
					{
						num65 = drawPlayer.miscCounter / 4 % 8;
					}
					Microsoft.Xna.Framework.Rectangle rectangle3 = new Microsoft.Xna.Framework.Rectangle(18 * flag10.ToInt(), num65 * 26, 16, 24);
					float num66 = 12f - Main.OffsetsPlayerHeadgear[drawPlayer.bodyFrame.Y / drawPlayer.bodyFrame.Height].Y;
					Vector2 scale2 = new Vector2(1f, 1f);
					Vector2 arg_6147_0 = Position + drawPlayer.Size * new Vector2(0.5f, 0.5f + 0.5f * drawPlayer.gravDir);
					int arg_6135_0 = drawPlayer.direction;
					Vector2 vector7 = arg_6147_0 + new Vector2((float)0, -num66 * drawPlayer.gravDir) - Main.screenPosition + drawPlayer.legPosition;
					vector7 = vector7.Floor();
					value = new DrawData(texture2, vector7, new Microsoft.Xna.Framework.Rectangle?(rectangle3), color14, drawPlayer.legRotation, rectangle3.Size() * new Vector2(0.5f, 0.5f - drawPlayer.gravDir * 0.5f), scale2, spriteEffects, 0);
					value.shader = shader;
					Main.playerDrawData.Add(value);
				}
			}
			else if (drawPlayer.legs > 0 && drawPlayer.legs < 157 && (drawPlayer.shoe != 15 || drawPlayer.wearsRobe))
			{
				if (!drawPlayer.invis)
				{
					value = new DrawData(Main.armorLegTexture[drawPlayer.legs], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color14, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
					value.shader = shader;
					Main.playerDrawData.Add(value);
					if (num15 != -1)
					{
						value = new DrawData(Main.glowMaskTexture[num15], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color19, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
						value.shader = shader;
						Main.playerDrawData.Add(value);
					}
				}
			}
			else if (!drawPlayer.invis && drawPlayer.shoe != 15)
			{
				value = new DrawData(Main.playerTextures[skinVariant, 11], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color9, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
				Main.playerDrawData.Add(value);
				value = new DrawData(Main.playerTextures[skinVariant, 12], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color10, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
				Main.playerDrawData.Add(value);
			}
			if (drawPlayer.wearsRobe)
			{
				goto IL_65DD;
			}
			IL_6502:
			if (drawPlayer.shoe > 0 && drawPlayer.shoe < 18)
			{
				value = new DrawData(Main.accShoesTexture[(int)drawPlayer.shoe], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color14, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
				value.shader = shader6;
				Main.playerDrawData.Add(value);
			}
			if (drawPlayer.wearsRobe)
			{
				goto IL_6048;
			}
			IL_65DD:
			bool flag11 = skinVariant == 3 || skinVariant == 8 || skinVariant == 7;
			if (flag11 && (drawPlayer.body <= 0 || drawPlayer.body >= 208) && !drawPlayer.invis)
			{
				value = new DrawData(Main.playerTextures[skinVariant, 14], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color7, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
				Main.playerDrawData.Add(value);
			}
			int num67 = -1;
			switch (drawPlayer.body)
			{
			case 200:
				num67 = 149;
				break;
			case 201:
				num67 = 150;
				break;
			case 202:
				num67 = 151;
				break;
			}
			if (num67 != -1)
			{
				this.LoadArmorLegs(num67);
				value = new DrawData(Main.armorLegTexture[num67], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color12, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
				value.shader = num6;
				Main.playerDrawData.Add(value);
			}
			if (drawPlayer.body > 0 && drawPlayer.body < 208)
			{
				Microsoft.Xna.Framework.Rectangle bodyFrame2 = drawPlayer.bodyFrame;
				int num68 = num;
				bodyFrame2.X += num68;
				bodyFrame2.Width -= num68;
				if (drawPlayer.direction == -1)
				{
					num68 = 0;
				}
				if (!drawPlayer.invis || (drawPlayer.body != 21 && drawPlayer.body != 22))
				{
					Texture2D texture3;
					if (!drawPlayer.Male)
					{
						texture3 = Main.femaleBodyTexture[drawPlayer.body];
					}
					else
					{
						texture3 = Main.armorBodyTexture[drawPlayer.body];
					}
					value = new DrawData(texture3, new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)) + num68), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(bodyFrame2), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
					value.shader = num6;
					Main.playerDrawData.Add(value);
					if (num13 != -1)
					{
						value = new DrawData(Main.glowMaskTexture[num13], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)) + num68), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(bodyFrame2), color17, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
						value.shader = num6;
						Main.playerDrawData.Add(value);
					}
				}
				if (flag && !drawPlayer.invis)
				{
					value = new DrawData(Main.playerTextures[skinVariant, 5], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
					Main.playerDrawData.Add(value);
				}
			}
			else if (!drawPlayer.invis)
			{
				if (!drawPlayer.Male)
				{
					value = new DrawData(Main.playerTextures[skinVariant, 4], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color8, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
					Main.playerDrawData.Add(value);
					value = new DrawData(Main.playerTextures[skinVariant, 6], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color7, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
					Main.playerDrawData.Add(value);
				}
				else
				{
					value = new DrawData(Main.playerTextures[skinVariant, 4], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color8, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
					Main.playerDrawData.Add(value);
					value = new DrawData(Main.playerTextures[skinVariant, 6], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color7, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
					Main.playerDrawData.Add(value);
				}
				value = new DrawData(Main.playerTextures[skinVariant, 5], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
				Main.playerDrawData.Add(value);
			}
			if (drawPlayer.handoff > 0 && drawPlayer.handoff < 12)
			{
				value = new DrawData(Main.accHandsOffTexture[(int)drawPlayer.handoff], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
				value.shader = shader3;
				Main.playerDrawData.Add(value);
			}
			if (drawPlayer.waist > 0 && drawPlayer.waist < 13)
			{
				Microsoft.Xna.Framework.Rectangle legFrame = drawPlayer.legFrame;
				if (legFrame.Y >= 1064)
				{
					legFrame.Y = 0;
				}
				value = new DrawData(Main.accWaistTexture[(int)drawPlayer.waist], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(legFrame), color14, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
				value.shader = shader7;
				Main.playerDrawData.Add(value);
			}
			if (drawPlayer.neck > 0 && drawPlayer.neck < 10)
			{
				value = new DrawData(Main.accNeckTexture[(int)drawPlayer.neck], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
				value.shader = shader9;
				Main.playerDrawData.Add(value);
			}
			if (!drawPlayer.invis && drawPlayer.head != 38 && drawPlayer.head != 135)
			{
				value = new DrawData(Main.playerTextures[skinVariant, 0], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color4, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
				Main.playerDrawData.Add(value);
				value = new DrawData(Main.playerTextures[skinVariant, 1], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color2, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
				Main.playerDrawData.Add(value);
				value = new DrawData(Main.playerTextures[skinVariant, 2], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color3, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
				Main.playerDrawData.Add(value);
				if (drawPlayer.yoraiz0rDarkness)
				{
					value = new DrawData(Main.extraTexture[67], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color4, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
					Main.playerDrawData.Add(value);
				}
			}
			if (flag4)
			{
				value = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color11, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
				value.shader = num5;
				Main.playerDrawData.Add(value);
				if (!drawPlayer.invis)
				{
					value = new DrawData(Main.playerHairTexture[drawPlayer.hair], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(bodyFrame), color, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
					value.shader = -num3;
					Main.playerDrawData.Add(value);
				}
			}
			if (flag5 && !drawPlayer.invis)
			{
				value = new DrawData(Main.playerHairAltTexture[drawPlayer.hair], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(bodyFrame), color, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
				value.shader = -num3;
				Main.playerDrawData.Add(value);
			}
			if (drawPlayer.head == 23)
			{
				if (!drawPlayer.invis)
				{
					value = new DrawData(Main.playerHairTexture[drawPlayer.hair], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(bodyFrame), color, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
					value.shader = -num3;
					Main.playerDrawData.Add(value);
				}
				value = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color11, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
				value.shader = num5;
				Main.playerDrawData.Add(value);
			}
			else if (drawPlayer.head == 14 || drawPlayer.head == 56 || drawPlayer.head == 114 || drawPlayer.head == 158 || drawPlayer.head == 69 || drawPlayer.head == 180)
			{
				Microsoft.Xna.Framework.Rectangle bodyFrame3 = drawPlayer.bodyFrame;
				Vector2 origin2 = vector3;
				if (drawPlayer.gravDir == 1f)
				{
					if (bodyFrame3.Y != 0)
					{
						bodyFrame3.Y -= 2;
						bodyFrame3.Height -= 8;
						origin2.Y += 2f;
					}
				}
				else if (bodyFrame3.Y != 0)
				{
					bodyFrame3.Y -= 2;
					origin2.Y -= 10f;
					bodyFrame3.Height -= 8;
				}
				value = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(bodyFrame3), color11, drawPlayer.headRotation, origin2, 1f, spriteEffects, 0);
				value.shader = num5;
				Main.playerDrawData.Add(value);
			}
			else if (drawPlayer.head > 0 && drawPlayer.head < 214 && drawPlayer.head != 28)
			{
				if (!drawPlayer.invis || (drawPlayer.head != 39 && drawPlayer.head != 38))
				{
					if (drawPlayer.head == 13)
					{
						int num69 = 0;
						int num70 = 0;
						if (drawPlayer.armor[num70] != null && drawPlayer.armor[num70].type == 205 && drawPlayer.armor[num70].stack > 0)
						{
							num69 += drawPlayer.armor[num70].stack;
						}
						num70 = 10;
						if (drawPlayer.armor[num70] != null && drawPlayer.armor[num70].type == 205 && drawPlayer.armor[num70].stack > 0)
						{
							num69 += drawPlayer.armor[num70].stack;
						}
						float num71 = 0.05235988f;
						float num72 = num71 * drawPlayer.position.X % 6.28318548f;
						for (int num73 = 0; num73 < num69; num73++)
						{
							float num74 = Vector2.UnitY.RotatedBy((double)(num72 + num71 * (float)num73), default(Vector2)).X * ((float)num73 / 30f) * 2f;
							value = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))) + num74, (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f - (float)(4 * num73)))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color11, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
							value.shader = num5;
							Main.playerDrawData.Add(value);
						}
					}
					else
					{
						value = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color11, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
						value.shader = num5;
						Main.playerDrawData.Add(value);
						if (num12 != -1)
						{
							value = new DrawData(Main.glowMaskTexture[num12], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color16, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
							value.shader = num5;
							Main.playerDrawData.Add(value);
						}
						if (drawPlayer.head == 211)
						{
							Microsoft.Xna.Framework.Color color28 = new Microsoft.Xna.Framework.Color(100, 100, 100, 0);
							ulong num75 = (ulong)((long)(drawPlayer.miscCounter / 4 + 100));
							int num76 = 4;
							for (int num77 = 0; num77 < num76; num77++)
							{
								float x = (float)Utils.RandomInt(ref num75, -10, 11) * 0.2f;
								float y = (float)Utils.RandomInt(ref num75, -14, 1) * 0.15f;
								value = new DrawData(Main.glowMaskTexture[241], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3 + new Vector2(x, y), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color28, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
								value.shader = num5;
								Main.playerDrawData.Add(value);
							}
						}
					}
				}
			}
			else if (!drawPlayer.invis && drawPlayer.face != 3 && drawPlayer.face != 2 && drawPlayer.face != 4)
			{
				value = new DrawData(Main.playerHairTexture[drawPlayer.hair], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(bodyFrame), color, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
				value.shader = -num3;
				Main.playerDrawData.Add(value);
			}
			if (drawPlayer.head == 205)
			{
				value = new DrawData(Main.extraTexture[77], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color4, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
				Main.playerDrawData.Add(value);
			}
			if (drawPlayer.head == 137)
			{
				value = new DrawData(Main.jackHatTexture, new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), new Microsoft.Xna.Framework.Color(255, 255, 255, 255), drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
				Main.playerDrawData.Add(value);
				for (int num78 = 0; num78 < 7; num78++)
				{
					Microsoft.Xna.Framework.Color color29 = new Microsoft.Xna.Framework.Color(110 - num78 * 10, 110 - num78 * 10, 110 - num78 * 10, 110 - num78 * 10);
					Vector2 vector8 = new Vector2((float)Main.rand.Next(-10, 11) * 0.2f, (float)Main.rand.Next(-10, 11) * 0.2f);
					vector8.X = drawPlayer.itemFlamePos[num78].X;
					vector8.Y = drawPlayer.itemFlamePos[num78].Y;
					vector8 *= 0.5f;
					value = new DrawData(Main.jackHatTexture, new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3 + vector8, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color29, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
					Main.playerDrawData.Add(value);
				}
			}
			if (drawPlayer.face > 0 && drawPlayer.face < 9)
			{
				if (drawPlayer.face == 7)
				{
					value = new DrawData(Main.accFaceTexture[(int)drawPlayer.face], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), new Microsoft.Xna.Framework.Color(200, 200, 200, 150), drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
					value.shader = shader10;
					Main.playerDrawData.Add(value);
				}
				else
				{
					value = new DrawData(Main.accFaceTexture[(int)drawPlayer.face], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color11, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
					value.shader = shader10;
					Main.playerDrawData.Add(value);
				}
			}
			if (drawPlayer.mount.Active)
			{
				drawPlayer.mount.Draw(Main.playerDrawData, 2, drawPlayer, Position, color13, spriteEffects, shadow);
				drawPlayer.mount.Draw(Main.playerDrawData, 3, drawPlayer, Position, color13, spriteEffects, shadow);
			}
			if (drawPlayer.pulley && drawPlayer.itemAnimation == 0)
			{
				if (drawPlayer.pulleyDir == 2)
				{
					int num79 = -25;
					int num80 = 0;
					float rotation2 = 0f;
					value = new DrawData(Main.pulleyTexture, new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num80 * drawPlayer.direction), (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num79 * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.pulleyTexture.Height / 2 * drawPlayer.pulleyFrame, Main.pulleyTexture.Width, Main.pulleyTexture.Height / 2)), color11, rotation2, new Vector2((float)(Main.pulleyTexture.Width / 2), (float)(Main.pulleyTexture.Height / 4)), 1f, spriteEffects, 0);
					Main.playerDrawData.Add(value);
				}
				else
				{
					int num81 = -26;
					int num82 = 10;
					float rotation3 = 0.35f * (float)(-(float)drawPlayer.direction);
					value = new DrawData(Main.pulleyTexture, new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num82 * drawPlayer.direction), (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num81 * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.pulleyTexture.Height / 2 * drawPlayer.pulleyFrame, Main.pulleyTexture.Width, Main.pulleyTexture.Height / 2)), color11, rotation3, new Vector2((float)(Main.pulleyTexture.Width / 2), (float)(Main.pulleyTexture.Height / 4)), 1f, spriteEffects, 0);
					Main.playerDrawData.Add(value);
				}
			}
			if (drawPlayer.shield > 0 && drawPlayer.shield < 7)
			{
				Vector2 zero = Vector2.Zero;
				if (drawPlayer.shieldRaised)
				{
					zero.Y -= 4f;
				}
				if (drawPlayer.shieldRaised)
				{
					float num83 = (float)Math.Sin((double)(Main.GlobalTime * 6.28318548f));
					float x2 = 2.5f + 1.5f * num83;
					Microsoft.Xna.Framework.Color color30 = color12;
					color30.A = 0;
					color30 *= 0.45f - num83 * 0.15f;
					for (float num84 = 0f; num84 < 4f; num84 += 1f)
					{
						value = new DrawData(Main.accShieldTexture[(int)drawPlayer.shield], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)) + zero + new Vector2(x2, 0f).RotatedBy((double)(num84 / 4f * 6.28318548f), default(Vector2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color30, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
						value.shader = shader8;
						Main.playerDrawData.Add(value);
					}
				}
				value = new DrawData(Main.accShieldTexture[(int)drawPlayer.shield], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)) + zero, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
				value.shader = shader8;
				Main.playerDrawData.Add(value);
				if (drawPlayer.shieldRaised)
				{
					Microsoft.Xna.Framework.Color color31 = color12;
					float num85 = (float)Math.Sin((double)(Main.GlobalTime * 3.14159274f));
					color31.A = (byte)((float)color31.A * (0.5f + 0.5f * num85));
					color31 *= 0.5f + 0.5f * num85;
					value = new DrawData(Main.accShieldTexture[(int)drawPlayer.shield], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)) + zero, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color31, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
					value.shader = shader8;
				}
				if (drawPlayer.shieldRaised && drawPlayer.shieldParryTimeLeft > 0)
				{
					float num86 = (float)drawPlayer.shieldParryTimeLeft / 20f;
					float num87 = 1.5f * num86;
					Vector2 vector9 = new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)) + zero;
					Microsoft.Xna.Framework.Color color32 = color12;
					float num88 = 1f;
					Vector2 value10 = Position + drawPlayer.Size / 2f - Main.screenPosition;
					Vector2 value11 = vector9 - value10;
					vector9 += value11 * num87;
					num88 += num87;
					color32.A = (byte)((float)color32.A * (1f - num86));
					color32 *= 1f - num86;
					value = new DrawData(Main.accShieldTexture[(int)drawPlayer.shield], vector9, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color32, drawPlayer.bodyRotation, origin, num88, spriteEffects, 0);
					value.shader = shader8;
					Main.playerDrawData.Add(value);
				}
				if (drawPlayer.mount.Cart)
				{
					Main.playerDrawData.Reverse(Main.playerDrawData.Count - 2, 2);
				}
			}
			Position.Y += (float)((int)num4 / 2);
			if (drawPlayer.solarShields > 0 && shadow == 0f && !drawPlayer.dead)
			{
				Texture2D texture2D6 = Main.extraTexture[61 + drawPlayer.solarShields - 1];
				Microsoft.Xna.Framework.Color color33 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127);
				float num89 = (drawPlayer.solarShieldPos[0] * new Vector2(1f, 0.5f)).ToRotation();
				if (drawPlayer.direction == -1)
				{
					num89 += 3.14159274f;
				}
				num89 += 0.06283186f * (float)drawPlayer.direction;
				value = new DrawData(texture2D6, new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2)))) + drawPlayer.solarShieldPos[0], null, color33, num89, texture2D6.Size() / 2f, 1f, spriteEffects, 0);
				value.shader = num6;
				Main.playerDrawData.Add(value);
			}
			Position.Y -= (float)((int)num4 / 2);
			if (drawPlayer.heldProj >= 0 && shadow == 0f && !flag3)
			{
				projectileDrawPosition = Main.playerDrawData.Count;
			}
			Microsoft.Xna.Framework.Color color34 = Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0));
			if (drawPlayer.inventory[drawPlayer.selectedItem].type == 678)
			{
				color34 = Microsoft.Xna.Framework.Color.White;
			}
			if (drawPlayer.shroomiteStealth && drawPlayer.inventory[drawPlayer.selectedItem].ranged)
			{
				float num90 = drawPlayer.stealth;
				if ((double)num90 < 0.03)
				{
					num90 = 0.03f;
				}
				float num91 = (1f + num90 * 10f) / 11f;
				color34 = new Microsoft.Xna.Framework.Color((int)((byte)((float)color34.R * num90)), (int)((byte)((float)color34.G * num90)), (int)((byte)((float)color34.B * num91)), (int)((byte)((float)color34.A * num90)));
			}
			if (drawPlayer.setVortex && drawPlayer.inventory[drawPlayer.selectedItem].ranged)
			{
				float num92 = drawPlayer.stealth;
				if ((double)num92 < 0.03)
				{
					num92 = 0.03f;
				}
				float arg_8EED_0 = (1f + num92 * 10f) / 11f;
				color34 = color34.MultiplyRGBA(new Microsoft.Xna.Framework.Color(Vector4.Lerp(Vector4.One, new Vector4(0f, 0.12f, 0.16f, 0f), 1f - num92)));
			}
			if (shadow == 0f && !drawPlayer.frozen && ((drawPlayer.itemAnimation > 0 && drawPlayer.inventory[drawPlayer.selectedItem].useStyle != 0) || (drawPlayer.inventory[drawPlayer.selectedItem].holdStyle > 0 && !drawPlayer.pulley)) && drawPlayer.inventory[drawPlayer.selectedItem].type > 0 && !drawPlayer.dead && !drawPlayer.inventory[drawPlayer.selectedItem].noUseGraphic && (!drawPlayer.wet || !drawPlayer.inventory[drawPlayer.selectedItem].noWet))
			{
				string arg_8FDD_0 = drawPlayer.name;
				Microsoft.Xna.Framework.Color color35 = new Microsoft.Xna.Framework.Color(250, 250, 250, drawPlayer.inventory[drawPlayer.selectedItem].alpha);
				Vector2 zero2 = Vector2.Zero;
				if (drawPlayer.inventory[drawPlayer.selectedItem].type == 3823)
				{
					zero2 = new Vector2((float)(7 * drawPlayer.direction), -7f * drawPlayer.gravDir);
				}
				if (drawPlayer.inventory[drawPlayer.selectedItem].type == 3827)
				{
					zero2 = new Vector2((float)(13 * drawPlayer.direction), -13f * drawPlayer.gravDir);
					color35 = drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(color34);
					color35 = Microsoft.Xna.Framework.Color.Lerp(color35, Microsoft.Xna.Framework.Color.White, 0.6f);
					color35.A = 66;
				}
				ItemSlot.GetItemLight(ref color34, drawPlayer.inventory[drawPlayer.selectedItem], false);
				if (drawPlayer.inventory[drawPlayer.selectedItem].type == 3476)
				{
					Texture2D texture2D7 = Main.extraTexture[64];
					Microsoft.Xna.Framework.Rectangle rectangle4 = texture2D7.Frame(1, 9, 0, drawPlayer.miscCounter % 54 / 6);
					Vector2 value12 = new Vector2((float)(rectangle4.Width / 2 * drawPlayer.direction), 0f);
					Vector2 origin3 = rectangle4.Size() / 2f;
					value = new DrawData(texture2D7, (value2 - Main.screenPosition + value12).Floor(), new Microsoft.Xna.Framework.Rectangle?(rectangle4), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(color34).MultiplyRGBA(new Microsoft.Xna.Framework.Color(new Vector4(0.5f, 0.5f, 0.5f, 0.8f))), drawPlayer.itemRotation, origin3, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
					Main.playerDrawData.Add(value);
					texture2D7 = Main.glowMaskTexture[195];
					value = new DrawData(texture2D7, (value2 - Main.screenPosition + value12).Floor(), new Microsoft.Xna.Framework.Rectangle?(rectangle4), new Microsoft.Xna.Framework.Color(250, 250, 250, drawPlayer.inventory[drawPlayer.selectedItem].alpha) * 0.5f, drawPlayer.itemRotation, origin3, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
					Main.playerDrawData.Add(value);
				}
				else if (drawPlayer.inventory[drawPlayer.selectedItem].type == 3779)
				{
					Texture2D texture2D8 = Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type];
					Microsoft.Xna.Framework.Rectangle rectangle5 = texture2D8.Frame(1, 1, 0, 0);
					Vector2 value13 = new Vector2((float)(rectangle5.Width / 2 * drawPlayer.direction), 0f);
					Vector2 origin4 = rectangle5.Size() / 2f;
					float num93 = ((float)drawPlayer.miscCounter / 75f * 6.28318548f).ToRotationVector2().X * 1f + 0f;
					Microsoft.Xna.Framework.Color color36 = new Microsoft.Xna.Framework.Color(120, 40, 222, 0) * (num93 / 2f * 0.3f + 0.85f) * 0.5f;
					num93 = 2f;
					for (float num94 = 0f; num94 < 4f; num94 += 1f)
					{
						value = new DrawData(Main.glowMaskTexture[218], (value2 - Main.screenPosition + value13).Floor() + (num94 * 1.57079637f).ToRotationVector2() * num93, new Microsoft.Xna.Framework.Rectangle?(rectangle5), color36, drawPlayer.itemRotation, origin4, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
						Main.playerDrawData.Add(value);
					}
					value = new DrawData(texture2D8, (value2 - Main.screenPosition + value13).Floor(), new Microsoft.Xna.Framework.Rectangle?(rectangle5), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(color34).MultiplyRGBA(new Microsoft.Xna.Framework.Color(new Vector4(0.5f, 0.5f, 0.5f, 0.8f))), drawPlayer.itemRotation, origin4, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
					Main.playerDrawData.Add(value);
				}
				else if (drawPlayer.inventory[drawPlayer.selectedItem].useStyle == 5)
				{
					bool flag12 = Item.staff[drawPlayer.inventory[drawPlayer.selectedItem].type];
					if (flag12)
					{
						float num95 = drawPlayer.itemRotation + 0.785f * (float)drawPlayer.direction;
						int num96 = 0;
						int num97 = 0;
						Vector2 zero3 = new Vector2(0f, (float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height);
						if (drawPlayer.inventory[drawPlayer.selectedItem].type == 3210)
						{
							num96 = 8 * -drawPlayer.direction;
							num97 = 2 * (int)drawPlayer.gravDir;
						}
						if (drawPlayer.inventory[drawPlayer.selectedItem].type == 3870)
						{
							num96 = 12 * -drawPlayer.direction;
							num97 = 12 * (int)drawPlayer.gravDir;
						}
						if (drawPlayer.inventory[drawPlayer.selectedItem].type == 3787)
						{
							num97 = (int)((float)(8 * (int)drawPlayer.gravDir) * (float)Math.Cos((double)num95));
						}
						if (drawPlayer.gravDir == -1f)
						{
							if (drawPlayer.direction == -1)
							{
								num95 += 1.57f;
								zero3 = new Vector2((float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, 0f);
								num96 -= Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width;
							}
							else
							{
								num95 -= 1.57f;
								zero3 = Vector2.Zero;
							}
						}
						else if (drawPlayer.direction == -1)
						{
							zero3 = new Vector2((float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, (float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height);
							num96 -= Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width;
						}
						value = new DrawData(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((float)((int)(value2.X - Main.screenPosition.X + zero3.X + (float)num96)), (float)((int)(value2.Y - Main.screenPosition.Y + (float)num97))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(color34), num95, zero3, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
						Main.playerDrawData.Add(value);
						if (drawPlayer.inventory[drawPlayer.selectedItem].type == 3870)
						{
							value = new DrawData(Main.glowMaskTexture[238], new Vector2((float)((int)(value2.X - Main.screenPosition.X + zero3.X + (float)num96)), (float)((int)(value2.Y - Main.screenPosition.Y + (float)num97))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height)), new Microsoft.Xna.Framework.Color(255, 255, 255, 127), num95, zero3, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
							Main.playerDrawData.Add(value);
						}
					}
					else
					{
						Vector2 vector10 = new Vector2((float)(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width / 2), (float)(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height / 2));
						Vector2 vector11 = this.DrawPlayerItemPos(drawPlayer.gravDir, drawPlayer.inventory[drawPlayer.selectedItem].type);
						int num98 = (int)vector11.X;
						vector10.Y = vector11.Y;
						Vector2 origin5 = new Vector2((float)(-(float)num98), (float)(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height / 2));
						if (drawPlayer.direction == -1)
						{
							origin5 = new Vector2((float)(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width + num98), (float)(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height / 2));
						}
						value = new DrawData(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((float)((int)(value2.X - Main.screenPosition.X + vector10.X)), (float)((int)(value2.Y - Main.screenPosition.Y + vector10.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(color34), drawPlayer.itemRotation, origin5, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
						Main.playerDrawData.Add(value);
						if (drawPlayer.inventory[drawPlayer.selectedItem].color != default(Microsoft.Xna.Framework.Color))
						{
							value = new DrawData(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((float)((int)(value2.X - Main.screenPosition.X + vector10.X)), (float)((int)(value2.Y - Main.screenPosition.Y + vector10.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetColor(color34), drawPlayer.itemRotation, origin5, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
							Main.playerDrawData.Add(value);
						}
						if (drawPlayer.inventory[drawPlayer.selectedItem].glowMask != -1)
						{
							value = new DrawData(Main.glowMaskTexture[(int)drawPlayer.inventory[drawPlayer.selectedItem].glowMask], new Vector2((float)((int)(value2.X - Main.screenPosition.X + vector10.X)), (float)((int)(value2.Y - Main.screenPosition.Y + vector10.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, drawPlayer.inventory[drawPlayer.selectedItem].alpha), drawPlayer.itemRotation, origin5, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
							Main.playerDrawData.Add(value);
						}
						if (drawPlayer.inventory[drawPlayer.selectedItem].type == 3788)
						{
							float num99 = ((float)drawPlayer.miscCounter / 75f * 6.28318548f).ToRotationVector2().X * 1f + 0f;
							Microsoft.Xna.Framework.Color color37 = new Microsoft.Xna.Framework.Color(80, 40, 252, 0) * (num99 / 2f * 0.3f + 0.85f) * 0.5f;
							for (float num100 = 0f; num100 < 4f; num100 += 1f)
							{
								value = new DrawData(Main.glowMaskTexture[220], new Vector2((float)((int)(value2.X - Main.screenPosition.X + vector10.X)), (float)((int)(value2.Y - Main.screenPosition.Y + vector10.Y))) + (num100 * 1.57079637f + drawPlayer.itemRotation).ToRotationVector2() * num99, null, color37, drawPlayer.itemRotation, origin5, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
								Main.playerDrawData.Add(value);
							}
						}
					}
				}
				else if (drawPlayer.gravDir == -1f)
				{
					value = new DrawData(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((float)((int)(value2.X - Main.screenPosition.X)), (float)((int)(value2.Y - Main.screenPosition.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(color34), drawPlayer.itemRotation, new Vector2((float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f - (float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f * (float)drawPlayer.direction, 0f) + zero2, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
					Main.playerDrawData.Add(value);
					if (drawPlayer.inventory[drawPlayer.selectedItem].color != default(Microsoft.Xna.Framework.Color))
					{
						value = new DrawData(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((float)((int)(value2.X - Main.screenPosition.X)), (float)((int)(value2.Y - Main.screenPosition.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetColor(color34), drawPlayer.itemRotation, new Vector2((float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f - (float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f * (float)drawPlayer.direction, 0f) + zero2, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
						Main.playerDrawData.Add(value);
					}
					if (drawPlayer.inventory[drawPlayer.selectedItem].glowMask != -1)
					{
						value = new DrawData(Main.glowMaskTexture[(int)drawPlayer.inventory[drawPlayer.selectedItem].glowMask], new Vector2((float)((int)(value2.X - Main.screenPosition.X)), (float)((int)(value2.Y - Main.screenPosition.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, drawPlayer.inventory[drawPlayer.selectedItem].alpha), drawPlayer.itemRotation, new Vector2((float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f - (float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f * (float)drawPlayer.direction, 0f) + zero2, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
						Main.playerDrawData.Add(value);
					}
				}
				else
				{
					if (drawPlayer.inventory[drawPlayer.selectedItem].type == 425 || drawPlayer.inventory[drawPlayer.selectedItem].type == 507)
					{
						if (drawPlayer.gravDir == 1f)
						{
							if (drawPlayer.direction == 1)
							{
								effect = SpriteEffects.FlipVertically;
							}
							else
							{
								effect = (SpriteEffects.FlipHorizontally | SpriteEffects.FlipVertically);
							}
						}
						else if (drawPlayer.direction == 1)
						{
							effect = SpriteEffects.None;
						}
						else
						{
							effect = SpriteEffects.FlipHorizontally;
						}
					}
					int type4 = drawPlayer.inventory[drawPlayer.selectedItem].type;
					value = new DrawData(Main.itemTexture[type4], new Vector2((float)((int)(value2.X - Main.screenPosition.X)), (float)((int)(value2.Y - Main.screenPosition.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[type4].Width, Main.itemTexture[type4].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(color34), drawPlayer.itemRotation, new Vector2((float)Main.itemTexture[type4].Width * 0.5f - (float)Main.itemTexture[type4].Width * 0.5f * (float)drawPlayer.direction, (float)Main.itemTexture[type4].Height) + zero2, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
					Main.playerDrawData.Add(value);
					if (drawPlayer.inventory[drawPlayer.selectedItem].color != default(Microsoft.Xna.Framework.Color))
					{
						value = new DrawData(Main.itemTexture[type4], new Vector2((float)((int)(value2.X - Main.screenPosition.X)), (float)((int)(value2.Y - Main.screenPosition.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[type4].Width, Main.itemTexture[type4].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetColor(color34), drawPlayer.itemRotation, new Vector2((float)Main.itemTexture[type4].Width * 0.5f - (float)Main.itemTexture[type4].Width * 0.5f * (float)drawPlayer.direction, (float)Main.itemTexture[type4].Height) + zero2, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
						Main.playerDrawData.Add(value);
					}
					if (drawPlayer.inventory[drawPlayer.selectedItem].glowMask != -1)
					{
						value = new DrawData(Main.glowMaskTexture[(int)drawPlayer.inventory[drawPlayer.selectedItem].glowMask], new Vector2((float)((int)(value2.X - Main.screenPosition.X)), (float)((int)(value2.Y - Main.screenPosition.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[type4].Width, Main.itemTexture[type4].Height)), color35, drawPlayer.itemRotation, new Vector2((float)Main.itemTexture[type4].Width * 0.5f - (float)Main.itemTexture[type4].Width * 0.5f * (float)drawPlayer.direction, (float)Main.itemTexture[type4].Height) + zero2, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
						Main.playerDrawData.Add(value);
					}
					if (drawPlayer.inventory[drawPlayer.selectedItem].flame && shadow == 0f)
					{
						try
						{
							this.LoadItemFlames(type4);
							if (Main.itemFlameTexture[type4] != null)
							{
								for (int num101 = 0; num101 < 7; num101++)
								{
									Microsoft.Xna.Framework.Color color38 = new Microsoft.Xna.Framework.Color(100, 100, 100, 0);
									if (type4 == 3045)
									{
										color38 = new Microsoft.Xna.Framework.Color(Main.DiscoR, Main.DiscoG, Main.DiscoB, 0);
									}
									float x3 = drawPlayer.itemFlamePos[num101].X;
									float y2 = drawPlayer.itemFlamePos[num101].Y;
									value = new DrawData(Main.itemFlameTexture[type4], new Vector2((float)((int)(value2.X - Main.screenPosition.X)) + x3, (float)((int)(value2.Y - Main.screenPosition.Y)) + y2), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[type4].Width, Main.itemTexture[type4].Height)), color38, drawPlayer.itemRotation, new Vector2((float)Main.itemTexture[type4].Width * 0.5f - (float)Main.itemTexture[type4].Width * 0.5f * (float)drawPlayer.direction, (float)Main.itemTexture[type4].Height) + zero2, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
									Main.playerDrawData.Add(value);
								}
							}
						}
						catch
						{
						}
					}
				}
			}
			if (drawPlayer.body > 0 && drawPlayer.body < 208)
			{
				Microsoft.Xna.Framework.Rectangle bodyFrame4 = drawPlayer.bodyFrame;
				int num102 = num;
				bodyFrame4.X += num102;
				bodyFrame4.Width -= num102;
				if (drawPlayer.direction == -1)
				{
					num102 = 0;
				}
				if (!drawPlayer.invis || (drawPlayer.body != 21 && drawPlayer.body != 22))
				{
					if (flag && !drawPlayer.invis)
					{
						int arg_A72E_0 = drawPlayer.body;
						if (flag2)
						{
							value = new DrawData(Main.playerTextures[skinVariant, 7], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
							Main.playerDrawData.Add(value);
						}
						value = new DrawData(Main.playerTextures[skinVariant, 9], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
						Main.playerDrawData.Add(value);
					}
					value = new DrawData(Main.armorArmTexture[drawPlayer.body], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)) + num102), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(bodyFrame4), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
					value.shader = num6;
					Main.playerDrawData.Add(value);
					if (num14 != -1)
					{
						value = new DrawData(Main.glowMaskTexture[num14], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)) + num102), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(bodyFrame4), color18, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
						value.shader = num6;
						Main.playerDrawData.Add(value);
					}
					if (drawPlayer.body == 205)
					{
						Microsoft.Xna.Framework.Color color39 = new Microsoft.Xna.Framework.Color(100, 100, 100, 0);
						ulong num103 = (ulong)((long)(drawPlayer.miscCounter / 4));
						int num104 = 4;
						for (int num105 = 0; num105 < num104; num105++)
						{
							float num106 = (float)Utils.RandomInt(ref num103, -10, 11) * 0.2f;
							float num107 = (float)Utils.RandomInt(ref num103, -10, 1) * 0.15f;
							value = new DrawData(Main.glowMaskTexture[240], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)) + num102), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2) + num106, (float)(drawPlayer.bodyFrame.Height / 2) + num107), new Microsoft.Xna.Framework.Rectangle?(bodyFrame4), color39, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
							value.shader = num6;
							Main.playerDrawData.Add(value);
						}
					}
				}
			}
			else if (!drawPlayer.invis)
			{
				value = new DrawData(Main.playerTextures[skinVariant, 7], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
				Main.playerDrawData.Add(value);
				value = new DrawData(Main.playerTextures[skinVariant, 8], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color8, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
				Main.playerDrawData.Add(value);
				value = new DrawData(Main.playerTextures[skinVariant, 13], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color7, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
				Main.playerDrawData.Add(value);
			}
			if (drawPlayer.handon > 0 && drawPlayer.handon < 20)
			{
				value = new DrawData(Main.accHandsOnTexture[(int)drawPlayer.handon], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
				value.shader = shader2;
				Main.playerDrawData.Add(value);
			}
			if (drawPlayer.inventory[drawPlayer.selectedItem].type > -1 && Item.claw[drawPlayer.inventory[drawPlayer.selectedItem].type] && shadow == 0f && !drawPlayer.frozen && (drawPlayer.itemAnimation > 0 || (drawPlayer.inventory[drawPlayer.selectedItem].holdStyle > 0 && !drawPlayer.pulley)) && drawPlayer.inventory[drawPlayer.selectedItem].type > 0 && !drawPlayer.dead && !drawPlayer.inventory[drawPlayer.selectedItem].noUseGraphic && (!drawPlayer.wet || !drawPlayer.inventory[drawPlayer.selectedItem].noWet))
			{
				if (drawPlayer.gravDir == -1f)
				{
					value = new DrawData(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((float)((int)(value2.X - Main.screenPosition.X)), (float)((int)(value2.Y - Main.screenPosition.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(color34), drawPlayer.itemRotation, new Vector2((float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f - (float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f * (float)drawPlayer.direction, 0f), drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
					Main.playerDrawData.Add(value);
				}
				else
				{
					int type5 = drawPlayer.inventory[drawPlayer.selectedItem].type;
					value = new DrawData(Main.itemTexture[type5], new Vector2((float)((int)(value2.X - Main.screenPosition.X)), (float)((int)(value2.Y - Main.screenPosition.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[type5].Width, Main.itemTexture[type5].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(color34), drawPlayer.itemRotation, new Vector2((float)Main.itemTexture[type5].Width * 0.5f - (float)Main.itemTexture[type5].Width * 0.5f * (float)drawPlayer.direction, (float)Main.itemTexture[type5].Height), drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
					Main.playerDrawData.Add(value);
				}
			}
			if (drawPlayer.heldProj >= 0 && shadow == 0f && flag3)
			{
				projectileDrawPosition = Main.playerDrawData.Count;
			}
			if (!flag9 && drawPlayer.front > 0 && drawPlayer.front < 5 && !drawPlayer.mount.Active)
			{
				value = new DrawData(Main.accFrontTexture[(int)drawPlayer.front], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
				value.shader = shader5;
				Main.playerDrawData.Add(value);
			}
			if (drawPlayer.frozen && shadow == 0f)
			{
				Microsoft.Xna.Framework.Color color40 = color12;
				color40.R = (byte)((double)color40.R * 0.55);
				color40.G = (byte)((double)color40.G * 0.55);
				color40.B = (byte)((double)color40.B * 0.55);
				color40.A = (byte)((double)color40.A * 0.55);
				value = new DrawData(Main.frozenTexture, new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.frozenTexture.Width, Main.frozenTexture.Height)), color40, drawPlayer.bodyRotation, new Vector2((float)(Main.frozenTexture.Width / 2), (float)(Main.frozenTexture.Height / 2)), 1f, spriteEffects, 0);
				Main.playerDrawData.Add(value);
			}
			else if (drawPlayer.webbed && shadow == 0f && drawPlayer.velocity.Y == 0f)
			{
				Microsoft.Xna.Framework.Color color41 = color12 * 0.75f;
				Texture2D texture2D9 = Main.extraTexture[31];
				int num108 = drawPlayer.height / 2;
				value = new DrawData(texture2D9, new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f + (float)num108))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), null, color41, drawPlayer.bodyRotation, texture2D9.Size() / 2f, 1f, spriteEffects, 0);
				Main.playerDrawData.Add(value);
			}
			if (drawPlayer.electrified && shadow == 0f)
			{
				Texture2D texture2D10 = Main.glowMaskTexture[25];
				int num109 = drawPlayer.miscCounter / 5;
				for (int num110 = 0; num110 < 2; num110++)
				{
					num109 %= 7;
					if (num109 > 1 && num109 < 5)
					{
						value = new DrawData(texture2D10, new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num109 * texture2D10.Height / 7, texture2D10.Width, texture2D10.Height / 7)), color15, drawPlayer.bodyRotation, new Vector2((float)(texture2D10.Width / 2), (float)(texture2D10.Height / 14)), 1f, spriteEffects, 0);
						Main.playerDrawData.Add(value);
					}
					num109 += 3;
				}
			}
			if (drawPlayer.iceBarrier && shadow == 0f)
			{
				int num111 = this.iceBarrierTexture.Height / 12;
				Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
				value = new DrawData(this.iceBarrierTexture, new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num111 * (int)drawPlayer.iceBarrierFrame, this.iceBarrierTexture.Width, num111)), white, 0f, new Vector2((float)(Main.frozenTexture.Width / 2), (float)(Main.frozenTexture.Height / 2)), 1f, spriteEffects, 0);
				Main.playerDrawData.Add(value);
			}
			if (shadow == 0f && drawPlayer.ownedLargeGems > 0)
			{
				bool flag13 = false;
				BitsByte ownedLargeGems = drawPlayer.ownedLargeGems;
				float num112 = 0f;
				for (int num113 = 0; num113 < 7; num113++)
				{
					if (ownedLargeGems[num113])
					{
						num112 += 1f;
					}
				}
				float num114 = 1f - num112 * 0.06f;
				float num115 = (num112 - 1f) * 4f;
				switch ((int)num112)
				{
				case 2:
					num115 += 10f;
					break;
				case 3:
					num115 += 8f;
					break;
				case 4:
					num115 += 6f;
					break;
				case 5:
					num115 += 6f;
					break;
				case 6:
					num115 += 2f;
					break;
				case 7:
					num115 += 0f;
					break;
				}
				float num116 = (float)drawPlayer.miscCounter / 300f * 6.28318548f;
				if (num112 > 0f)
				{
					float num117 = 6.28318548f / num112;
					float num118 = 0f;
					Vector2 one = new Vector2(1.3f, 0.65f);
					if (!flag13)
					{
						one = Vector2.One;
					}
					List<DrawData> list = new List<DrawData>();
					for (int num119 = 0; num119 < 7; num119++)
					{
						if (!ownedLargeGems[num119])
						{
							num118 += 1f;
						}
						else
						{
							float f = num116 + num117 * ((float)num119 - num118);
							Vector2 value14 = f.ToRotationVector2();
							float num120 = num114;
							if (flag13)
							{
								num120 = MathHelper.Lerp(num114 * 0.7f, 1f, value14.Y / 2f + 0.5f);
							}
							Texture2D texture2D11 = Main.gemTexture[num119];
							value = new DrawData(texture2D11, new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - 80f))) + value14 * one * num115, null, new Microsoft.Xna.Framework.Color(250, 250, 250, (int)(Main.mouseTextColor / 2)), 0f, texture2D11.Size() / 2f, ((float)Main.mouseTextColor / 1000f + 0.8f) * num120, SpriteEffects.None, 0);
							list.Add(value);
						}
					}
					if (flag13)
					{
						list.Sort(new Comparison<DrawData>(DelegateMethods.CompareDrawSorterByYScale));
					}
					Main.playerDrawData.AddRange(list);
				}
			}
			if ((drawPlayer.beetleOffense || drawPlayer.beetleDefense) && shadow == 0f)
			{
				for (int num121 = 0; num121 < drawPlayer.beetleOrbs; num121++)
				{
					for (int num122 = 0; num122 < 5; num122++)
					{
						Microsoft.Xna.Framework.Color color42 = color12;
						float num123 = (float)num122 * 0.1f;
						num123 = 0.5f - num123;
						color42.R = (byte)((float)color42.R * num123);
						color42.G = (byte)((float)color42.G * num123);
						color42.B = (byte)((float)color42.B * num123);
						color42.A = (byte)((float)color42.A * num123);
						Vector2 value15 = -drawPlayer.beetleVel[num121] * (float)num122;
						value = new DrawData(Main.beetleTexture, new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2)))) + drawPlayer.beetlePos[num121] + value15, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.beetleTexture.Height / 3 * drawPlayer.beetleFrame + 1, Main.beetleTexture.Width, Main.beetleTexture.Height / 3 - 2)), color42, 0f, new Vector2((float)(Main.beetleTexture.Width / 2), (float)(Main.beetleTexture.Height / 6)), 1f, spriteEffects, 0);
						Main.playerDrawData.Add(value);
					}
					value = new DrawData(Main.beetleTexture, new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2)))) + drawPlayer.beetlePos[num121], new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.beetleTexture.Height / 3 * drawPlayer.beetleFrame + 1, Main.beetleTexture.Width, Main.beetleTexture.Height / 3 - 2)), color12, 0f, new Vector2((float)(Main.beetleTexture.Width / 2), (float)(Main.beetleTexture.Height / 6)), 1f, spriteEffects, 0);
					Main.playerDrawData.Add(value);
				}
			}
			if (rotation != 0f)
			{
				Vector2 value16 = Position - Main.screenPosition + rotationOrigin;
				Vector2 value17 = drawPlayer.position + rotationOrigin;
				Matrix matrix = Matrix.CreateRotationZ(rotation);
				for (int num124 = 0; num124 < Main.playerDrawDust.Count; num124++)
				{
					Vector2 vector12 = Main.dust[Main.playerDrawDust[num124]].position - value17;
					vector12 = Vector2.Transform(vector12, matrix);
					Main.dust[Main.playerDrawDust[num124]].position = vector12 + value17;
				}
				for (int num125 = 0; num125 < Main.playerDrawGore.Count; num125++)
				{
					Vector2 vector13 = Main.gore[Main.playerDrawGore[num125]].position - value17;
					vector13 = Vector2.Transform(vector13, matrix);
					Main.gore[Main.playerDrawGore[num125]].position = vector13 + value17;
				}
				for (int num126 = 0; num126 < Main.playerDrawData.Count; num126++)
				{
					value = Main.playerDrawData[num126];
					if (!value.ignorePlayerRotation)
					{
						Vector2 vector14 = value.position - value16;
						vector14 = Vector2.Transform(vector14, matrix);
						value.position = vector14 + value16;
						value.rotation += rotation;
						Main.playerDrawData[num126] = value;
					}
				}
			}
			this.DrawPlayer_DrawAllLayers(drawPlayer, projectileDrawPosition, num5);
			Main.pixelShader.CurrentTechnique.Passes[0].Apply();
			if (drawPlayer.mount.Active && drawPlayer.mount.Type == 11)
			{
				for (int num127 = 0; num127 < 1000; num127++)
				{
					if (Main.projectile[num127].active && Main.projectile[num127].owner == drawPlayer.whoAmI && Main.projectile[num127].type == 591)
					{
						Main.instance.DrawProj(num127);
					}
				}
			}
		}

		private void DrawPlayer_DrawAllLayers(Player drawPlayer, int projectileDrawPosition, int cHead)
		{
			int num = -1;
			for (int i = 0; i <= Main.playerDrawData.Count; i++)
			{
				if (projectileDrawPosition == i)
				{
					if (num != 0)
					{
						Main.pixelShader.CurrentTechnique.Passes[0].Apply();
						num = 0;
					}
					Main.projectile[drawPlayer.heldProj].gfxOffY = drawPlayer.gfxOffY;
					try
					{
						this.DrawProj(drawPlayer.heldProj);
					}
					catch
					{
						Main.projectile[drawPlayer.heldProj].active = false;
					}
				}
				if (i != Main.playerDrawData.Count)
				{
					DrawData value = Main.playerDrawData[i];
					if (!value.sourceRect.HasValue)
					{
						value.sourceRect = new Microsoft.Xna.Framework.Rectangle?(value.texture.Frame(1, 1, 0, 0));
					}
					if (value.shader >= 0)
					{
						GameShaders.Hair.Apply(0, drawPlayer, new DrawData?(value));
						GameShaders.Armor.Apply(value.shader, drawPlayer, new DrawData?(value));
					}
					else if (drawPlayer.head == 0)
					{
						GameShaders.Hair.Apply(0, drawPlayer, new DrawData?(value));
						GameShaders.Armor.Apply(cHead, drawPlayer, new DrawData?(value));
					}
					else
					{
						GameShaders.Armor.Apply(0, drawPlayer, new DrawData?(value));
						GameShaders.Hair.Apply((short)(-(short)value.shader), drawPlayer, new DrawData?(value));
					}
					num = value.shader;
					if (value.texture != null)
					{
						value.Draw(Main.spriteBatch);
					}
				}
			}
		}

		protected void DrawItem(Item item, int whoami)
		{
			int arg_22_0 = (int)((double)item.position.X + (double)item.width * 0.5) / 16;
			int arg_28_0 = Lighting.offScreenTiles;
			int arg_4B_0 = (int)((double)item.position.Y + (double)item.height * 0.5) / 16;
			int arg_51_0 = Lighting.offScreenTiles;
			Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)((double)item.position.X + (double)item.width * 0.5) / 16, (int)((double)item.position.Y + (double)item.height * 0.5) / 16);
			if (!Main.gamePaused && base.IsActive && item.type >= 71 && item.type <= 74 && (double)(Math.Abs(item.velocity.X) + Math.Abs(item.velocity.Y)) > 0.2)
			{
				float num = (float)Main.rand.Next(500) - (Math.Abs(item.velocity.X) + Math.Abs(item.velocity.Y)) * 20f;
				int num2 = item.type - 72;
				num -= (float)(num2 * 20);
				int type = 244 + item.type - 71;
				if (item.isBeingGrabbed)
				{
					num /= 100f;
				}
				if (num < (float)(color.R / 70 + 1))
				{
					int num3 = Dust.NewDust(item.position - new Vector2(1f, 2f), item.width, item.height, type, 0f, 0f, 254, default(Microsoft.Xna.Framework.Color), 0.25f);
					Main.dust[num3].velocity *= 0f;
				}
			}
			float num4 = item.velocity.X * 0.2f;
			float scale = 1f;
			Microsoft.Xna.Framework.Color alpha = item.GetAlpha(color);
			ItemSlot.GetItemLight(ref alpha, ref scale, item, false);
			float num5 = (float)(item.height - Main.itemTexture[item.type].Height);
			float num6 = (float)(item.width / 2 - Main.itemTexture[item.type].Width / 2);
			if (item.type >= 71 && item.type <= 74)
			{
				int num7 = item.type - 71;
				Main.itemFrameCounter[whoami]++;
				if (Main.itemFrameCounter[whoami] > 5)
				{
					Main.itemFrameCounter[whoami] = 0;
					Main.itemFrame[whoami]++;
				}
				if (Main.itemFrame[whoami] > 7)
				{
					Main.itemFrame[whoami] = 0;
				}
				int width = Main.coinTexture[num7].Width;
				int num8 = Main.coinTexture[num7].Height / 8;
				num6 = (float)(item.width / 2 - Main.coinTexture[num7].Width / 2);
				Main.spriteBatch.Draw(Main.coinTexture[num7], new Vector2(item.position.X - Main.screenPosition.X + (float)(width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(num8 / 2) + num5), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.itemFrame[whoami] * num8 + 1, Main.itemTexture[item.type].Width, num8)), alpha, num4, new Vector2((float)(width / 2), (float)(num8 / 2)), scale, SpriteEffects.None, 0f);
				return;
			}
			if (ItemID.Sets.NebulaPickup[item.type])
			{
				Main.itemFrameCounter[whoami]++;
				if (Main.itemFrameCounter[whoami] > 5)
				{
					Main.itemFrameCounter[whoami] = 0;
					Main.itemFrame[whoami]++;
				}
				if (Main.itemFrame[whoami] >= 4)
				{
					Main.itemFrame[whoami] = 0;
				}
				Microsoft.Xna.Framework.Rectangle rectangle = Main.itemTexture[item.type].Frame(1, 4, 0, Main.itemFrame[whoami]);
				num6 = (float)(item.width / 2 - rectangle.Width / 2);
				num5 = (float)(item.height - rectangle.Height);
				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(rectangle.Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(rectangle.Height / 2) + num5), new Microsoft.Xna.Framework.Rectangle?(rectangle), alpha, num4, rectangle.Size() / 2f, scale, SpriteEffects.None, 0f);
				return;
			}
			if (ItemID.Sets.AnimatesAsSoul[item.type])
			{
				Main.itemFrameCounter[whoami]++;
				if (Main.itemFrameCounter[whoami] > 5)
				{
					Main.itemFrameCounter[whoami] = 0;
					Main.itemFrame[whoami]++;
				}
				if (Main.itemFrame[whoami] >= 4)
				{
					Main.itemFrame[whoami] = 0;
				}
				Microsoft.Xna.Framework.Rectangle rectangle2 = Main.itemTexture[item.type].Frame(1, 4, 0, Main.itemFrame[whoami]);
				num6 = (float)(item.width / 2 - rectangle2.Width / 2);
				num5 = (float)(item.height - rectangle2.Height);
				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(rectangle2.Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(rectangle2.Height / 2) + num5), new Microsoft.Xna.Framework.Rectangle?(rectangle2), alpha, num4, rectangle2.Size() / 2f, scale, SpriteEffects.None, 0f);
				return;
			}
			if (item.type == 3858)
			{
				Main.itemFrameCounter[whoami]++;
				if (Main.itemFrameCounter[whoami] >= 5)
				{
					Main.itemFrameCounter[whoami] = 0;
					Main.itemFrame[whoami]++;
				}
				if (Main.itemFrame[whoami] >= 3)
				{
					Main.itemFrame[whoami] = 0;
				}
				Texture2D texture2D = Main.glowMaskTexture[233];
				Microsoft.Xna.Framework.Rectangle rectangle3 = texture2D.Frame(1, 3, 0, Main.itemFrame[whoami]);
				num6 = (float)(item.width / 2 - rectangle3.Width / 2);
				num5 = (float)(item.height - rectangle3.Height);
				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(rectangle3.Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(rectangle3.Height / 2) + num5), null, alpha, num4, rectangle3.Size() / 2f, scale, SpriteEffects.None, 0f);
				num6 -= 2f;
				num5 -= 2f;
				Main.spriteBatch.Draw(texture2D, new Vector2(item.position.X - Main.screenPosition.X + (float)(rectangle3.Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(rectangle3.Height / 2) + num5), new Microsoft.Xna.Framework.Rectangle?(rectangle3), new Microsoft.Xna.Framework.Color(255, 255, 255, 63) * 0.75f, num4, rectangle3.Size() / 2f, scale, SpriteEffects.None, 0f);
				return;
			}
			if (ItemID.Sets.TrapSigned[item.type])
			{
				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), alpha, num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
				if (item.color != default(Microsoft.Xna.Framework.Color))
				{
					Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), item.GetColor(color), num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
				}
				if (item.glowMask != -1)
				{
					Main.spriteBatch.Draw(Main.glowMaskTexture[(int)item.glowMask], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, item.alpha), num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
				}
				Main.spriteBatch.Draw(Main.wireTexture, new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f) + Main.itemTexture[item.type].Size().RotatedBy((double)num4, default(Vector2)) * 0.45f * item.scale, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(4, 58, 8, 8)), alpha, 0f, new Vector2(4f), 1f, SpriteEffects.None, 0f);
				return;
			}
			if ((item.type >= 1522 && item.type <= 1527) || item.type == 3643)
			{
				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, (int)(Main.mouseTextColor / 2)), num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), (float)Main.mouseTextColor / 1000f + 0.8f, SpriteEffects.None, 0f);
				return;
			}
			if (item.type == 3779)
			{
				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), alpha, num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
				return;
			}
			Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), alpha, num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
			if (item.color != default(Microsoft.Xna.Framework.Color))
			{
				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), item.GetColor(color), num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
			}
			if (item.glowMask != -1)
			{
				Main.spriteBatch.Draw(Main.glowMaskTexture[(int)item.glowMask], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, item.alpha), num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
			}
		}

		protected void DrawRain()
		{
			bool isActive = base.IsActive;
			Microsoft.Xna.Framework.Rectangle[] array = new Microsoft.Xna.Framework.Rectangle[6];
			for (int i = 0; i < array.Length; i++)
			{
				array[i] = new Microsoft.Xna.Framework.Rectangle(i * 4, 0, 2, 40);
			}
			for (int j = 0; j < Main.maxRain; j++)
			{
				if (Main.rain[j].active)
				{
					Rain rain = Main.rain[j];
					Main.spriteBatch.Draw(Main.rainTexture, rain.position - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(array[(int)rain.type]), Lighting.GetColor((int)(rain.position.X + 4f) >> 4, (int)(rain.position.Y + 4f) >> 4) * 0.85f, rain.rotation, Vector2.Zero, rain.scale, SpriteEffects.None, 0f);
					if (isActive)
					{
						rain.Update();
					}
				}
			}
			TimeLogger.DetailedDrawTime(23);
		}

		protected void DrawDust()
		{
			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)Main.screenPosition.X - 500, (int)Main.screenPosition.Y - 50, Main.screenWidth + 1000, Main.screenHeight + 100);
			rectangle = new Microsoft.Xna.Framework.Rectangle((int)Main.screenPosition.X - 1000, (int)Main.screenPosition.Y - 1050, Main.screenWidth + 2000, Main.screenHeight + 2100);
			Microsoft.Xna.Framework.Rectangle rectangle2;
			rectangle = (rectangle2 = rectangle);
			ArmorShaderData armorShaderData = null;
			Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullNone, null, Main.Transform);
			for (int i = 0; i < Main.numDust; i++)
			{
				Dust dust = Main.dust[i];
				if (dust.active)
				{
					if ((dust.type >= 130 && dust.type <= 134) || (dust.type >= 219 && dust.type <= 223) || dust.type == 226)
					{
						rectangle = rectangle2;
					}
					if (new Microsoft.Xna.Framework.Rectangle((int)dust.position.X, (int)dust.position.Y, 4, 4).Intersects(rectangle))
					{
						float scale = dust.scale;
						if (dust.shader != armorShaderData)
						{
							Main.spriteBatch.End();
							armorShaderData = dust.shader;
							if (armorShaderData == null)
							{
								Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullNone, null, Main.Transform);
							}
							else
							{
								Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullNone, null, Main.Transform);
								dust.shader.Apply(null, null);
							}
						}
						if (dust.type >= 130 && dust.type <= 134)
						{
							float num = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
							num *= 0.3f;
							num *= 10f;
							if (num > 10f)
							{
								num = 10f;
							}
							int num2 = 0;
							while ((float)num2 < num)
							{
								Vector2 velocity = dust.velocity;
								Vector2 value = dust.position - velocity * (float)num2;
								float scale2 = dust.scale * (1f - (float)num2 / 10f);
								Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
								color = dust.GetAlpha(color);
								Main.spriteBatch.Draw(Main.dustTexture, value - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), color, dust.rotation, new Vector2(4f, 4f), scale2, SpriteEffects.None, 0f);
								num2++;
							}
						}
						else if (dust.type >= 219 && dust.type <= 223 && dust.fadeIn == 0f)
						{
							float num3 = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
							num3 *= 0.3f;
							num3 *= 10f;
							if (num3 > 10f)
							{
								num3 = 10f;
							}
							int num4 = 0;
							while ((float)num4 < num3)
							{
								Vector2 velocity2 = dust.velocity;
								Vector2 value2 = dust.position - velocity2 * (float)num4;
								float scale3 = dust.scale * (1f - (float)num4 / 10f);
								Microsoft.Xna.Framework.Color color2 = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
								color2 = dust.GetAlpha(color2);
								Main.spriteBatch.Draw(Main.dustTexture, value2 - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), color2, dust.rotation, new Vector2(4f, 4f), scale3, SpriteEffects.None, 0f);
								num4++;
							}
						}
						else if (dust.type == 264 && dust.fadeIn == 0f)
						{
							float num5 = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
							num5 *= 10f;
							if (num5 > 10f)
							{
								num5 = 10f;
							}
							int num6 = 0;
							while ((float)num6 < num5)
							{
								Vector2 velocity3 = dust.velocity;
								Vector2 value3 = dust.position - velocity3 * (float)num6;
								float scale4 = dust.scale * (1f - (float)num6 / 10f);
								Microsoft.Xna.Framework.Color color3 = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
								color3 = dust.GetAlpha(color3) * 0.3f;
								Main.spriteBatch.Draw(Main.dustTexture, value3 - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), color3, dust.rotation, new Vector2(5f), scale4, SpriteEffects.None, 0f);
								color3 = dust.GetColor(color3);
								Main.spriteBatch.Draw(Main.dustTexture, value3 - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), color3, dust.rotation, new Vector2(5f), scale4, SpriteEffects.None, 0f);
								num6++;
							}
						}
						else if ((dust.type == 226 || dust.type == 272) && dust.fadeIn == 0f)
						{
							float num7 = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
							num7 *= 0.3f;
							num7 *= 10f;
							if (num7 > 10f)
							{
								num7 = 10f;
							}
							int num8 = 0;
							while ((float)num8 < num7)
							{
								Vector2 velocity4 = dust.velocity;
								Vector2 value4 = dust.position - velocity4 * (float)num8;
								float scale5 = dust.scale * (1f - (float)num8 / 10f);
								Microsoft.Xna.Framework.Color color4 = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
								color4 = dust.GetAlpha(color4);
								Main.spriteBatch.Draw(Main.dustTexture, value4 - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), color4, dust.rotation, new Vector2(4f, 4f), scale5, SpriteEffects.None, 0f);
								num8++;
							}
						}
						Microsoft.Xna.Framework.Color color5 = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
						if (dust.type == 6 || dust.type == 15 || (dust.noLight && dust.type < 86 && dust.type > 91) || (dust.type >= 59 && dust.type <= 64))
						{
							color5 = Microsoft.Xna.Framework.Color.White;
						}
						color5 = dust.GetAlpha(color5);
						if (dust.type == 213)
						{
							scale = 1f;
						}
						Main.spriteBatch.Draw(Main.dustTexture, dust.position - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), color5, dust.rotation, new Vector2(4f, 4f), scale, SpriteEffects.None, 0f);
						if (dust.color != default(Microsoft.Xna.Framework.Color))
						{
							Main.spriteBatch.Draw(Main.dustTexture, dust.position - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), dust.GetColor(color5), dust.rotation, new Vector2(4f, 4f), scale, SpriteEffects.None, 0f);
						}
						if (color5 == Microsoft.Xna.Framework.Color.Black)
						{
							dust.active = false;
						}
					}
					else
					{
						dust.active = false;
					}
				}
			}
			Main.spriteBatch.End();
			Main.pixelShader.CurrentTechnique.Passes[0].Apply();
			TimeLogger.DetailedDrawTime(25);
		}

		private static void HelpText()
		{
			bool flag = false;
			if (Main.player[Main.myPlayer].statLifeMax > 100)
			{
				flag = true;
			}
			bool flag2 = false;
			if (Main.player[Main.myPlayer].statManaMax > 0)
			{
				flag2 = true;
			}
			bool flag3 = true;
			bool flag4 = false;
			bool flag5 = false;
			bool flag6 = false;
			bool flag7 = false;
			bool flag8 = false;
			bool flag9 = false;
			for (int i = 0; i < 58; i++)
			{
				if (Main.player[Main.myPlayer].inventory[i].pick > 0 && Main.player[Main.myPlayer].inventory[i].name != "Copper Pickaxe")
				{
					flag3 = false;
				}
				if (Main.player[Main.myPlayer].inventory[i].axe > 0 && Main.player[Main.myPlayer].inventory[i].name != "Copper Axe")
				{
					flag3 = false;
				}
				if (Main.player[Main.myPlayer].inventory[i].hammer > 0)
				{
					flag3 = false;
				}
				if (Main.player[Main.myPlayer].inventory[i].type == 11 || Main.player[Main.myPlayer].inventory[i].type == 12 || Main.player[Main.myPlayer].inventory[i].type == 13 || Main.player[Main.myPlayer].inventory[i].type == 14)
				{
					flag4 = true;
				}
				if (Main.player[Main.myPlayer].inventory[i].type == 19 || Main.player[Main.myPlayer].inventory[i].type == 20 || Main.player[Main.myPlayer].inventory[i].type == 21 || Main.player[Main.myPlayer].inventory[i].type == 22)
				{
					flag5 = true;
				}
				if (Main.player[Main.myPlayer].inventory[i].type == 75)
				{
					flag6 = true;
				}
				if (Main.player[Main.myPlayer].inventory[i].type == 38)
				{
					flag7 = true;
				}
				if (Main.player[Main.myPlayer].inventory[i].type == 68 || Main.player[Main.myPlayer].inventory[i].type == 70 || Main.player[Main.myPlayer].inventory[i].type == 1330)
				{
					flag8 = true;
				}
				if (Main.player[Main.myPlayer].inventory[i].type == 84)
				{
					flag9 = true;
				}
			}
			bool flag10 = false;
			bool flag11 = false;
			bool flag12 = false;
			bool flag13 = false;
			bool flag14 = false;
			bool flag15 = false;
			bool flag16 = false;
			bool flag17 = false;
			bool flag18 = false;
			for (int j = 0; j < 200; j++)
			{
				if (Main.npc[j].active)
				{
					if (Main.npc[j].type == 17)
					{
						flag10 = true;
					}
					if (Main.npc[j].type == 18)
					{
						flag11 = true;
					}
					if (Main.npc[j].type == 19)
					{
						flag13 = true;
					}
					if (Main.npc[j].type == 20)
					{
						flag12 = true;
					}
					if (Main.npc[j].type == 54)
					{
						flag18 = true;
					}
					if (Main.npc[j].type == 124)
					{
						flag15 = true;
					}
					if (Main.npc[j].type == 38)
					{
						flag14 = true;
					}
					if (Main.npc[j].type == 108)
					{
						flag16 = true;
					}
					if (Main.npc[j].type == 107)
					{
						flag17 = true;
					}
				}
			}
			object obj = Lang.CreateDialogSubstitutionObject(null);
			LocalizedText text;
			while (true)
			{
				Main.helpText++;
				if (Language.Exists("GuideHelpText.Help_" + Main.helpText))
				{
					text = Language.GetText("GuideHelpText.Help_" + Main.helpText);
					if (text.CanFormatWith(obj))
					{
						break;
					}
				}
				if (flag3)
				{
					if (Main.helpText == 1)
					{
						goto Block_34;
					}
					if (Main.helpText == 2)
					{
						goto Block_35;
					}
					if (Main.helpText == 3)
					{
						goto Block_36;
					}
					if (Main.helpText == 4)
					{
						goto Block_37;
					}
					if (Main.helpText == 5)
					{
						goto Block_38;
					}
					if (Main.helpText == 6)
					{
						goto Block_39;
					}
				}
				if (flag3 && !flag4 && !flag5 && Main.helpText == 11)
				{
					goto Block_43;
				}
				if (flag3 && flag4 && !flag5)
				{
					if (Main.helpText == 21)
					{
						goto Block_47;
					}
					if (Main.helpText == 22)
					{
						goto Block_48;
					}
				}
				if (flag3 && flag5)
				{
					if (Main.helpText == 31)
					{
						goto Block_51;
					}
					if (Main.helpText == 32)
					{
						goto Block_52;
					}
				}
				if (!flag && Main.helpText == 41)
				{
					goto Block_54;
				}
				if (!flag2 && Main.helpText == 42)
				{
					goto Block_56;
				}
				if (!flag2 && !flag6 && Main.helpText == 43)
				{
					goto Block_59;
				}
				if (!flag10 && !flag11)
				{
					if (Main.helpText == 51)
					{
						goto Block_62;
					}
					if (Main.helpText == 52)
					{
						goto Block_63;
					}
					if (Main.helpText == 53)
					{
						goto Block_64;
					}
					if (Main.helpText == 54)
					{
						goto Block_65;
					}
				}
				if (!flag10 && Main.helpText == 61)
				{
					goto Block_67;
				}
				if (!flag11 && Main.helpText == 62)
				{
					goto Block_69;
				}
				if (!flag13 && Main.helpText == 63)
				{
					goto Block_71;
				}
				if (!flag12 && Main.helpText == 64)
				{
					goto Block_73;
				}
				if (!flag15 && Main.helpText == 65 && NPC.downedBoss3)
				{
					goto Block_76;
				}
				if (!flag18 && Main.helpText == 66 && NPC.downedBoss3)
				{
					goto Block_79;
				}
				if (!flag14 && Main.helpText == 67)
				{
					goto Block_81;
				}
				if (!flag17 && NPC.downedBoss2 && Main.helpText == 68)
				{
					goto Block_84;
				}
				if (!flag16 && Main.hardMode && Main.helpText == 69)
				{
					goto Block_87;
				}
				if (flag7 && Main.helpText == 71)
				{
					goto Block_89;
				}
				if (flag8 && Main.helpText == 72)
				{
					goto Block_91;
				}
				if ((flag7 || flag8) && Main.helpText == 80)
				{
					goto Block_94;
				}
				if (!flag9 && Main.helpText == 201 && !Main.hardMode && !NPC.downedBoss3 && !NPC.downedBoss2)
				{
					goto Block_100;
				}
				if (Main.helpText == 1000 && !NPC.downedBoss1 && !NPC.downedBoss2)
				{
					goto Block_103;
				}
				if (Main.helpText == 1001 && !NPC.downedBoss1 && !NPC.downedBoss2)
				{
					goto Block_106;
				}
				if (Main.helpText == 1002 && !NPC.downedBoss2)
				{
					goto Block_108;
				}
				if (Main.helpText == 1050 && !NPC.downedBoss1 && Main.player[Main.myPlayer].statLifeMax < 200)
				{
					goto Block_112;
				}
				if (Main.helpText == 1051 && !NPC.downedBoss1 && Main.player[Main.myPlayer].statDefense <= 10)
				{
					goto Block_115;
				}
				if (Main.helpText == 1052 && !NPC.downedBoss1 && Main.player[Main.myPlayer].statLifeMax >= 200 && Main.player[Main.myPlayer].statDefense > 10)
				{
					goto Block_119;
				}
				if (Main.helpText == 1053 && NPC.downedBoss1 && !NPC.downedBoss2 && Main.player[Main.myPlayer].statLifeMax < 300)
				{
					goto Block_123;
				}
				if (Main.helpText == 1054 && NPC.downedBoss1 && !NPC.downedBoss2 && Main.player[Main.myPlayer].statLifeMax >= 300)
				{
					goto Block_127;
				}
				if (Main.helpText == 1055 && NPC.downedBoss1 && !NPC.downedBoss2 && Main.player[Main.myPlayer].statLifeMax >= 300)
				{
					goto Block_131;
				}
				if (Main.helpText == 1056 && NPC.downedBoss1 && NPC.downedBoss2 && !NPC.downedBoss3)
				{
					goto Block_135;
				}
				if (Main.helpText == 1057 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !Main.hardMode && Main.player[Main.myPlayer].statLifeMax < 400)
				{
					goto Block_141;
				}
				if (Main.helpText == 1058 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !Main.hardMode && Main.player[Main.myPlayer].statLifeMax >= 400)
				{
					goto Block_147;
				}
				if (Main.helpText == 1059 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !Main.hardMode && Main.player[Main.myPlayer].statLifeMax >= 400)
				{
					goto Block_153;
				}
				if (Main.helpText == 1060 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !Main.hardMode && Main.player[Main.myPlayer].statLifeMax >= 400)
				{
					goto Block_159;
				}
				if (Main.helpText == 1061 && Main.hardMode)
				{
					goto Block_161;
				}
				if (Main.helpText == 1062 && Main.hardMode)
				{
					goto Block_164;
				}
				if (Main.helpText > 1100)
				{
					Main.helpText = 0;
				}
			}
			Main.npcChatText = text.FormatWith(obj);
			return;
			Block_34:
			Main.npcChatText = Lang.dialog(177, false);
			return;
			Block_35:
			Main.npcChatText = Lang.dialog(178, false);
			return;
			Block_36:
			Main.npcChatText = Lang.dialog(179, false);
			return;
			Block_37:
			Main.npcChatText = Lang.dialog(180, false);
			return;
			Block_38:
			Main.npcChatText = Lang.dialog(181, false);
			return;
			Block_39:
			Main.npcChatText = Lang.dialog(182, false);
			return;
			Block_43:
			Main.npcChatText = Lang.dialog(183, false);
			return;
			Block_47:
			Main.npcChatText = Lang.dialog(184, false);
			return;
			Block_48:
			Main.npcChatText = Lang.dialog(185, false);
			return;
			Block_51:
			Main.npcChatText = Lang.dialog(186, false);
			return;
			Block_52:
			Main.npcChatText = Lang.dialog(187, false);
			return;
			Block_54:
			Main.npcChatText = Lang.dialog(188, false);
			return;
			Block_56:
			Main.npcChatText = Lang.dialog(189, false);
			return;
			Block_59:
			Main.npcChatText = Lang.dialog(190, false);
			return;
			Block_62:
			Main.npcChatText = Lang.dialog(191, false);
			return;
			Block_63:
			Main.npcChatText = Lang.dialog(192, false);
			return;
			Block_64:
			Main.npcChatText = Lang.dialog(193, false);
			return;
			Block_65:
			Main.npcChatText = Lang.dialog(194, false);
			return;
			Block_67:
			Main.npcChatText = Lang.dialog(195, false);
			return;
			Block_69:
			Main.npcChatText = Lang.dialog(196, false);
			return;
			Block_71:
			Main.npcChatText = Lang.dialog(197, false);
			return;
			Block_73:
			Main.npcChatText = Lang.dialog(198, false);
			return;
			Block_76:
			Main.npcChatText = Lang.dialog(199, false);
			return;
			Block_79:
			Main.npcChatText = Lang.dialog(200, false);
			return;
			Block_81:
			Main.npcChatText = Lang.dialog(201, false);
			return;
			Block_84:
			Main.npcChatText = Lang.dialog(202, false);
			return;
			Block_87:
			Main.npcChatText = Lang.dialog(203, false);
			return;
			Block_89:
			Main.npcChatText = Lang.dialog(204, false);
			return;
			Block_91:
			Main.npcChatText = Lang.dialog(WorldGen.crimson ? 403 : 205, false);
			return;
			Block_94:
			Main.npcChatText = Lang.dialog(WorldGen.crimson ? 402 : 206, false);
			return;
			Block_100:
			Main.npcChatText = Lang.dialog(207, false);
			return;
			Block_103:
			Main.npcChatText = Lang.dialog(208, false);
			return;
			Block_106:
			Main.npcChatText = Lang.dialog(209, false);
			return;
			Block_108:
			if (WorldGen.crimson)
			{
				Main.npcChatText = Lang.dialog(331, false);
				return;
			}
			Main.npcChatText = Lang.dialog(210, false);
			return;
			Block_112:
			Main.npcChatText = Lang.dialog(211, false);
			return;
			Block_115:
			Main.npcChatText = Lang.dialog(212, false);
			return;
			Block_119:
			Main.npcChatText = Lang.dialog(213, false);
			return;
			Block_123:
			Main.npcChatText = Lang.dialog(214, false);
			return;
			Block_127:
			Main.npcChatText = Lang.dialog(215, false);
			return;
			Block_131:
			Main.npcChatText = Lang.dialog(216, false);
			return;
			Block_135:
			Main.npcChatText = Lang.dialog(217, false);
			return;
			Block_141:
			Main.npcChatText = Lang.dialog(218, false);
			return;
			Block_147:
			Main.npcChatText = Lang.dialog(219, false);
			return;
			Block_153:
			Main.npcChatText = Lang.dialog(220, false);
			return;
			Block_159:
			Main.npcChatText = Lang.dialog(221, false);
			return;
			Block_161:
			Main.npcChatText = Lang.dialog(WorldGen.crimson ? 401 : 222, false);
			return;
			Block_164:
			Main.npcChatText = Lang.dialog(223, false);
		}

		protected void GUIChatDrawInner()
		{
			if (Main.player[Main.myPlayer].talkNPC < 0 && Main.player[Main.myPlayer].sign == -1)
			{
				Main.npcChatText = "";
				return;
			}
			if (Main.netMode == 0 && Main.autoPause && Main.player[Main.myPlayer].talkNPC >= 0)
			{
				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 105)
				{
					Main.npc[Main.player[Main.myPlayer].talkNPC].Transform(107);
				}
				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 106)
				{
					Main.npc[Main.player[Main.myPlayer].talkNPC].Transform(108);
				}
				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 123)
				{
					Main.npc[Main.player[Main.myPlayer].talkNPC].Transform(124);
				}
				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 354)
				{
					Main.npc[Main.player[Main.myPlayer].talkNPC].Transform(353);
				}
				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 376)
				{
					Main.npc[Main.player[Main.myPlayer].talkNPC].Transform(369);
				}
				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 579)
				{
					Main.npc[Main.player[Main.myPlayer].talkNPC].Transform(550);
				}
			}
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(200, 200, 200, 200);
			int num = (int)((Main.mouseTextColor * 2 + 255) / 3);
			Microsoft.Xna.Framework.Color textColor = new Microsoft.Xna.Framework.Color(num, num, num, num);
			bool flag = Main.InGameUI.CurrentState is UIVirtualKeyboard && PlayerInput.UsingGamepad;
			int num2;
			string[] array = Utils.WordwrapString(Main.npcChatText, Main.fontMouseText, 460, 10, out num2);
			if (Main.editSign)
			{
				this.textBlinkerCount++;
				if (this.textBlinkerCount >= 20)
				{
					if (this.textBlinkerState == 0)
					{
						this.textBlinkerState = 1;
					}
					else
					{
						this.textBlinkerState = 0;
					}
					this.textBlinkerCount = 0;
				}
				if (this.textBlinkerState == 1)
				{
					string[] array2;
					IntPtr intPtr;
					(array2 = array)[(int)(intPtr = (IntPtr)num2)] = array2[(int)intPtr] + "|";
				}
			}
			num2++;
			Main.spriteBatch.Draw(Main.chatBackTexture, new Vector2((float)(Main.screenWidth / 2 - Main.chatBackTexture.Width / 2), 100f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chatBackTexture.Width, (num2 + 1) * 30)), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			Main.spriteBatch.Draw(Main.chatBackTexture, new Vector2((float)(Main.screenWidth / 2 - Main.chatBackTexture.Width / 2), (float)(100 + (num2 + 1) * 30)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.chatBackTexture.Height - 30, Main.chatBackTexture.Width, 30)), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			for (int i = 0; i < num2; i++)
			{
				if (array[i] != null)
				{
					Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontMouseText, array[i], (float)(170 + (Main.screenWidth - 800) / 2), (float)(120 + i * 30), textColor, Microsoft.Xna.Framework.Color.Black, Vector2.Zero, 1f);
				}
			}
			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(Main.screenWidth / 2 - Main.chatBackTexture.Width / 2, 100, Main.chatBackTexture.Width, (num2 + 2) * 30);
			int num3 = 120 + num2 * 30 + 30;
			num3 -= 235;
			if (!PlayerInput.UsingGamepad)
			{
				num3 = 9999;
			}
			UIVirtualKeyboard.OffsetDown = num3;
			if (Main.npcChatCornerItem != 0)
			{
				Vector2 vector = new Vector2((float)(Main.screenWidth / 2 + Main.chatBackTexture.Width / 2), (float)(100 + (num2 + 1) * 30 + 30));
				vector -= Vector2.One * 8f;
				Item item = new Item();
				item.netDefaults(Main.npcChatCornerItem);
				float num4 = 1f;
				Texture2D texture2D = Main.itemTexture[item.type];
				if (texture2D.Width > 32 || texture2D.Height > 32)
				{
					if (texture2D.Width > texture2D.Height)
					{
						num4 = 32f / (float)texture2D.Width;
					}
					else
					{
						num4 = 32f / (float)texture2D.Height;
					}
				}
				Main.spriteBatch.Draw(texture2D, vector, null, item.GetAlpha(Microsoft.Xna.Framework.Color.White), 0f, new Vector2((float)texture2D.Width, (float)texture2D.Height), num4, SpriteEffects.None, 0f);
				if (item.color != default(Microsoft.Xna.Framework.Color))
				{
					Main.spriteBatch.Draw(texture2D, vector, null, item.GetColor(item.color), 0f, new Vector2((float)texture2D.Width, (float)texture2D.Height), num4, SpriteEffects.None, 0f);
				}
				if (new Microsoft.Xna.Framework.Rectangle((int)vector.X - (int)((float)texture2D.Width * num4), (int)vector.Y - (int)((float)texture2D.Height * num4), (int)((float)texture2D.Width * num4), (int)((float)texture2D.Height * num4)).Contains(new Microsoft.Xna.Framework.Point(Main.mouseX, Main.mouseY)))
				{
					this.MouseText(item.name, -11, 0);
				}
			}
			num = (int)Main.mouseTextColor;
			textColor = new Microsoft.Xna.Framework.Color(num, (int)((double)num / 1.1), num / 2, num);
			string text = "";
			string text2 = "";
			int num5 = Main.player[Main.myPlayer].statLifeMax2 - Main.player[Main.myPlayer].statLife;
			for (int j = 0; j < 22; j++)
			{
				int num6 = Main.player[Main.myPlayer].buffType[j];
				if (Main.debuff[num6] && Main.player[Main.myPlayer].buffTime[j] > 5 && num6 != 28 && num6 != 34 && num6 != 87 && num6 != 89 && num6 != 21 && num6 != 86 && num6 != 199)
				{
					num5 += 1000;
				}
			}
			if (Main.player[Main.myPlayer].sign > -1)
			{
				if (Main.editSign)
				{
					text = Lang.inter[47];
				}
				else
				{
					text = Lang.inter[48];
				}
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 20)
			{
				text = Lang.inter[28];
				text2 = Lang.inter[49];
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 207)
			{
				text = Lang.inter[28];
				text2 = Lang.inter[107];
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 453)
			{
				text = Lang.inter[28];
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 550)
			{
				text = Lang.inter[28];
				text2 = Language.GetTextValue("UI.BartenderHelp");
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 353)
			{
				text = Lang.inter[28];
				text2 = Language.GetTextValue("GameUI.HairStyle");
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 368)
			{
				text = Lang.inter[28];
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 369)
			{
				text = Lang.inter[64];
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 17 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 19 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 38 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 54 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 107 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 108 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 124 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 142 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 160 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 178 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 207 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 208 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 209 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 227 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 228 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 229)
			{
				text = Lang.inter[28];
				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 107)
				{
					text2 = Lang.inter[19];
				}
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 37)
			{
				if (!Main.dayTime)
				{
					text = Lang.inter[50];
				}
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 22)
			{
				text = Lang.inter[51];
				text2 = Lang.inter[25];
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 441)
			{
				if (Main.player[Main.myPlayer].taxMoney <= 0)
				{
					text = Lang.inter[89];
				}
				else
				{
					string text3 = "";
					int num7 = 0;
					int num8 = 0;
					int num9 = 0;
					int num10 = 0;
					int num11 = Main.player[Main.myPlayer].taxMoney;
					if (num11 < 0)
					{
						num11 = 0;
					}
					num5 = num11;
					if (num11 >= 1000000)
					{
						num7 = num11 / 1000000;
						num11 -= num7 * 1000000;
					}
					if (num11 >= 10000)
					{
						num8 = num11 / 10000;
						num11 -= num8 * 10000;
					}
					if (num11 >= 100)
					{
						num9 = num11 / 100;
						num11 -= num9 * 100;
					}
					if (num11 >= 1)
					{
						num10 = num11;
					}
					if (num7 > 0)
					{
						object obj = text3;
						text3 = string.Concat(new object[]
						{
							obj,
							num7,
							" ",
							Lang.inter[15],
							" "
						});
					}
					if (num8 > 0)
					{
						object obj = text3;
						text3 = string.Concat(new object[]
						{
							obj,
							num8,
							" ",
							Lang.inter[16],
							" "
						});
					}
					if (num9 > 0)
					{
						object obj = text3;
						text3 = string.Concat(new object[]
						{
							obj,
							num9,
							" ",
							Lang.inter[17],
							" "
						});
					}
					if (num10 > 0)
					{
						object obj = text3;
						text3 = string.Concat(new object[]
						{
							obj,
							num10,
							" ",
							Lang.inter[18],
							" "
						});
					}
					float num12 = (float)Main.mouseTextColor / 255f;
					if (num7 > 0)
					{
						textColor = new Microsoft.Xna.Framework.Color((int)((byte)(220f * num12)), (int)((byte)(220f * num12)), (int)((byte)(198f * num12)), (int)Main.mouseTextColor);
					}
					else if (num8 > 0)
					{
						textColor = new Microsoft.Xna.Framework.Color((int)((byte)(224f * num12)), (int)((byte)(201f * num12)), (int)((byte)(92f * num12)), (int)Main.mouseTextColor);
					}
					else if (num9 > 0)
					{
						textColor = new Microsoft.Xna.Framework.Color((int)((byte)(181f * num12)), (int)((byte)(192f * num12)), (int)((byte)(193f * num12)), (int)Main.mouseTextColor);
					}
					else if (num10 > 0)
					{
						textColor = new Microsoft.Xna.Framework.Color((int)((byte)(246f * num12)), (int)((byte)(138f * num12)), (int)((byte)(96f * num12)), (int)Main.mouseTextColor);
					}
					if (text3 == "")
					{
						text = Lang.inter[89];
					}
					else
					{
						text3 = text3.Substring(0, text3.Length - 1);
						text = Lang.inter[89] + " (" + text3 + ")";
					}
				}
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 18)
			{
				string text4 = "";
				int num13 = 0;
				int num14 = 0;
				int num15 = 0;
				int num16 = 0;
				int num17 = num5;
				if (num17 > 0)
				{
					num17 = (int)((double)num17 * 0.75);
					if (num17 < 1)
					{
						num17 = 1;
					}
				}
				if (num17 < 0)
				{
					num17 = 0;
				}
				num5 = num17;
				if (num17 >= 1000000)
				{
					num13 = num17 / 1000000;
					num17 -= num13 * 1000000;
				}
				if (num17 >= 10000)
				{
					num14 = num17 / 10000;
					num17 -= num14 * 10000;
				}
				if (num17 >= 100)
				{
					num15 = num17 / 100;
					num17 -= num15 * 100;
				}
				if (num17 >= 1)
				{
					num16 = num17;
				}
				if (num13 > 0)
				{
					object obj = text4;
					text4 = string.Concat(new object[]
					{
						obj,
						num13,
						" ",
						Lang.inter[15],
						" "
					});
				}
				if (num14 > 0)
				{
					object obj = text4;
					text4 = string.Concat(new object[]
					{
						obj,
						num14,
						" ",
						Lang.inter[16],
						" "
					});
				}
				if (num15 > 0)
				{
					object obj = text4;
					text4 = string.Concat(new object[]
					{
						obj,
						num15,
						" ",
						Lang.inter[17],
						" "
					});
				}
				if (num16 > 0)
				{
					object obj = text4;
					text4 = string.Concat(new object[]
					{
						obj,
						num16,
						" ",
						Lang.inter[18],
						" "
					});
				}
				float num18 = (float)Main.mouseTextColor / 255f;
				if (num13 > 0)
				{
					textColor = new Microsoft.Xna.Framework.Color((int)((byte)(220f * num18)), (int)((byte)(220f * num18)), (int)((byte)(198f * num18)), (int)Main.mouseTextColor);
				}
				else if (num14 > 0)
				{
					textColor = new Microsoft.Xna.Framework.Color((int)((byte)(224f * num18)), (int)((byte)(201f * num18)), (int)((byte)(92f * num18)), (int)Main.mouseTextColor);
				}
				else if (num15 > 0)
				{
					textColor = new Microsoft.Xna.Framework.Color((int)((byte)(181f * num18)), (int)((byte)(192f * num18)), (int)((byte)(193f * num18)), (int)Main.mouseTextColor);
				}
				else if (num16 > 0)
				{
					textColor = new Microsoft.Xna.Framework.Color((int)((byte)(246f * num18)), (int)((byte)(138f * num18)), (int)((byte)(96f * num18)), (int)Main.mouseTextColor);
				}
				if (text4 == "")
				{
					text = Lang.inter[54];
				}
				else
				{
					text4 = text4.Substring(0, text4.Length - 1);
					text = Lang.inter[54] + " (" + text4 + ")";
				}
			}
			if (!flag)
			{
				int num19 = 180 + (Main.screenWidth - 800) / 2;
				int num20 = 130 + num2 * 30;
				float scale = 0.9f;
				Vector2 value = new Vector2((float)num19, (float)num20);
				Vector2 value2 = Main.fontMouseText.MeasureString(text);
				if (Main.mouseX > num19 && (float)Main.mouseX < (float)num19 + value2.X && Main.mouseY > num20 && (float)Main.mouseY < (float)num20 + value2.Y && !PlayerInput.IgnoreMouseInterface)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
					scale = 1.1f;
					if (!Main.npcChatFocus2)
					{
						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
					}
					Main.npcChatFocus2 = true;
					Main.player[Main.myPlayer].releaseUseItem = false;
				}
				else
				{
					if (Main.npcChatFocus2)
					{
						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
					}
					Main.npcChatFocus2 = false;
				}
				Vector2 vector2 = value2 * 0.5f;
				Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontMouseText, text, (float)num19 + vector2.X, (float)num20 + vector2.Y, textColor, Microsoft.Xna.Framework.Color.Black, vector2, scale);
				if (text.Length > 0)
				{
					UILinkPointNavigator.SetPosition(2500, value + vector2);
					UILinkPointNavigator.Shortcuts.NPCCHAT_ButtonsLeft = true;
				}
				string text5 = Lang.inter[52];
				textColor = new Microsoft.Xna.Framework.Color(num, (int)((double)num / 1.1), num / 2, num);
				num19 = num19 + (int)Main.fontMouseText.MeasureString(text).X + 20;
				int num21 = num19 + (int)Main.fontMouseText.MeasureString(text5).X;
				num20 = 130 + num2 * 30;
				scale = 0.9f;
				value = new Vector2((float)num19, (float)num20);
				value2 = Main.fontMouseText.MeasureString(text5);
				if (Main.mouseX > num19 && (float)Main.mouseX < (float)num19 + value2.X && Main.mouseY > num20 && (float)Main.mouseY < (float)num20 + value2.Y)
				{
					scale = 1.1f;
					if (!Main.npcChatFocus1)
					{
						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
					}
					Main.npcChatFocus1 = true;
					Main.player[Main.myPlayer].releaseUseItem = false;
					Main.player[Main.myPlayer].controlUseItem = false;
				}
				else
				{
					if (Main.npcChatFocus1)
					{
						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
					}
					Main.npcChatFocus1 = false;
				}
				vector2 = value2 * 0.5f;
				Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontMouseText, text5, (float)num19 + vector2.X, (float)num20 + vector2.Y, textColor, Microsoft.Xna.Framework.Color.Black, vector2, scale);
				if (text5.Length > 0)
				{
					UILinkPointNavigator.SetPosition(2501, value + vector2);
					UILinkPointNavigator.Shortcuts.NPCCHAT_ButtonsMiddle = true;
				}
				if (text2 != "")
				{
					num19 = num21 + (int)Main.fontMouseText.MeasureString(text2).X / 3;
					num20 = 130 + num2 * 30;
					scale = 0.9f;
					value = new Vector2((float)num19, (float)num20);
					value2 = Main.fontMouseText.MeasureString(text2);
					if (Main.mouseX > num19 && (float)Main.mouseX < (float)num19 + value2.X && Main.mouseY > num20 && (float)Main.mouseY < (float)num20 + value2.Y && !PlayerInput.IgnoreMouseInterface)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						scale = 1.1f;
						if (!Main.npcChatFocus3)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
						}
						Main.npcChatFocus3 = true;
						Main.player[Main.myPlayer].releaseUseItem = false;
					}
					else
					{
						if (Main.npcChatFocus3)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
						}
						Main.npcChatFocus3 = false;
					}
					vector2 = value2 * 0.5f;
					Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontMouseText, text2, (float)num19 + vector2.X, (float)num20 + vector2.Y, textColor, Microsoft.Xna.Framework.Color.Black, vector2, scale);
					UILinkPointNavigator.SetPosition(2502, value + vector2);
					UILinkPointNavigator.Shortcuts.NPCCHAT_ButtonsRight = true;
				}
			}
			if (!PlayerInput.IgnoreMouseInterface)
			{
				if (rectangle.Contains(new Microsoft.Xna.Framework.Point(Main.mouseX, Main.mouseY)))
				{
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				if (Main.mouseLeft && Main.mouseLeftRelease && rectangle.Contains(new Microsoft.Xna.Framework.Point(Main.mouseX, Main.mouseY)))
				{
					Main.mouseLeftRelease = false;
					Main.player[Main.myPlayer].releaseUseItem = false;
					Main.player[Main.myPlayer].mouseInterface = true;
					if (Main.npcChatFocus1)
					{
						Main.CloseNPCChatOrSign();
						return;
					}
					if (Main.npcChatFocus2)
					{
						if (Main.player[Main.myPlayer].sign != -1)
						{
							if (Main.editSign)
							{
								Main.SubmitSignText();
								return;
							}
							IngameFancyUI.OpenVirtualKeyboard(1);
							return;
						}
						else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 369)
						{
							Main.npcChatCornerItem = 0;
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							bool flag2 = false;
							if (!Main.anglerQuestFinished && !Main.anglerWhoFinishedToday.Contains(Main.player[Main.myPlayer].name))
							{
								int num22 = Main.player[Main.myPlayer].FindItem(Main.anglerQuestItemNetIDs[Main.anglerQuest]);
								if (num22 != -1)
								{
									Main.player[Main.myPlayer].inventory[num22].stack--;
									if (Main.player[Main.myPlayer].inventory[num22].stack <= 0)
									{
										Main.player[Main.myPlayer].inventory[num22] = new Item();
									}
									flag2 = true;
									Main.PlaySound(24, -1, -1, 1, 1f, 0f);
									Main.player[Main.myPlayer].anglerQuestsFinished++;
									Main.player[Main.myPlayer].GetAnglerReward();
								}
							}
							Main.npcChatText = Lang.AnglerQuestChat(flag2);
							if (flag2)
							{
								Main.anglerQuestFinished = true;
								if (Main.netMode == 1)
								{
									NetMessage.SendData(75, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
								}
								else
								{
									Main.anglerWhoFinishedToday.Add(Main.player[Main.myPlayer].name);
								}
								AchievementsHelper.HandleAnglerService();
								return;
							}
						}
						else
						{
							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 17)
							{
								Main.playerInventory = true;
								Main.npcChatText = "";
								Main.npcShop = 1;
								this.shop[Main.npcShop].SetupShop(Main.npcShop);
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								return;
							}
							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 19)
							{
								Main.playerInventory = true;
								Main.npcChatText = "";
								Main.npcShop = 2;
								this.shop[Main.npcShop].SetupShop(Main.npcShop);
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								return;
							}
							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 124)
							{
								Main.playerInventory = true;
								Main.npcChatText = "";
								Main.npcShop = 8;
								this.shop[Main.npcShop].SetupShop(Main.npcShop);
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								return;
							}
							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 142)
							{
								Main.playerInventory = true;
								Main.npcChatText = "";
								Main.npcShop = 9;
								this.shop[Main.npcShop].SetupShop(Main.npcShop);
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								return;
							}
							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 353)
							{
								Main.playerInventory = true;
								Main.npcChatText = "";
								Main.npcShop = 18;
								this.shop[Main.npcShop].SetupShop(Main.npcShop);
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								return;
							}
							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 368)
							{
								Main.playerInventory = true;
								Main.npcChatText = "";
								Main.npcShop = 19;
								this.shop[Main.npcShop].SetupShop(Main.npcShop);
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								return;
							}
							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 453)
							{
								Main.playerInventory = true;
								Main.npcChatText = "";
								Main.npcShop = 20;
								this.shop[Main.npcShop].SetupShop(Main.npcShop);
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								return;
							}
							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 37)
							{
								if (Main.netMode == 0)
								{
									NPC.SpawnSkeletron();
								}
								else
								{
									NetMessage.SendData(51, -1, -1, "", Main.myPlayer, 1f, 0f, 0f, 0, 0, 0);
								}
								Main.npcChatText = "";
								return;
							}
							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 20)
							{
								Main.playerInventory = true;
								Main.npcChatText = "";
								Main.npcShop = 3;
								this.shop[Main.npcShop].SetupShop(Main.npcShop);
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								return;
							}
							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 38)
							{
								Main.playerInventory = true;
								Main.npcChatText = "";
								Main.npcShop = 4;
								this.shop[Main.npcShop].SetupShop(Main.npcShop);
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								return;
							}
							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 54)
							{
								Main.playerInventory = true;
								Main.npcChatText = "";
								Main.npcShop = 5;
								this.shop[Main.npcShop].SetupShop(Main.npcShop);
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								return;
							}
							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 107)
							{
								Main.playerInventory = true;
								Main.npcChatText = "";
								Main.npcShop = 6;
								this.shop[Main.npcShop].SetupShop(Main.npcShop);
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								return;
							}
							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 108)
							{
								Main.playerInventory = true;
								Main.npcChatText = "";
								Main.npcShop = 7;
								this.shop[Main.npcShop].SetupShop(Main.npcShop);
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								return;
							}
							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 160)
							{
								Main.playerInventory = true;
								Main.npcChatText = "";
								Main.npcShop = 10;
								this.shop[Main.npcShop].SetupShop(Main.npcShop);
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								return;
							}
							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 178)
							{
								Main.playerInventory = true;
								Main.npcChatText = "";
								Main.npcShop = 11;
								this.shop[Main.npcShop].SetupShop(Main.npcShop);
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								return;
							}
							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 207)
							{
								Main.playerInventory = true;
								Main.npcChatText = "";
								Main.npcShop = 12;
								this.shop[Main.npcShop].SetupShop(Main.npcShop);
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								return;
							}
							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 208)
							{
								Main.playerInventory = true;
								Main.npcChatText = "";
								Main.npcShop = 13;
								this.shop[Main.npcShop].SetupShop(Main.npcShop);
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								return;
							}
							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 209)
							{
								Main.playerInventory = true;
								Main.npcChatText = "";
								Main.npcShop = 14;
								this.shop[Main.npcShop].SetupShop(Main.npcShop);
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								return;
							}
							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 227)
							{
								Main.playerInventory = true;
								Main.npcChatText = "";
								Main.npcShop = 15;
								this.shop[Main.npcShop].SetupShop(Main.npcShop);
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								return;
							}
							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 228)
							{
								Main.playerInventory = true;
								Main.npcChatText = "";
								Main.npcShop = 16;
								this.shop[Main.npcShop].SetupShop(Main.npcShop);
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								return;
							}
							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 229)
							{
								Main.playerInventory = true;
								Main.npcChatText = "";
								Main.npcShop = 17;
								this.shop[Main.npcShop].SetupShop(Main.npcShop);
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								return;
							}
							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 22)
							{
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								Main.HelpText();
								return;
							}
							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 441)
							{
								if (Main.player[Main.myPlayer].taxMoney > 0)
								{
									int k = Main.player[Main.myPlayer].taxMoney;
									while (k > 0)
									{
										if (k > 1000000)
										{
											int num23 = k / 1000000;
											k -= 1000000 * num23;
											int number = Item.NewItem((int)Main.player[Main.myPlayer].position.X, (int)Main.player[Main.myPlayer].position.Y, Main.player[Main.myPlayer].width, Main.player[Main.myPlayer].height, 74, num23, false, 0, false, false);
											if (Main.netMode == 1)
											{
												NetMessage.SendData(21, -1, -1, "", number, 1f, 0f, 0f, 0, 0, 0);
											}
										}
										else if (k > 10000)
										{
											int num24 = k / 10000;
											k -= 10000 * num24;
											int number2 = Item.NewItem((int)Main.player[Main.myPlayer].position.X, (int)Main.player[Main.myPlayer].position.Y, Main.player[Main.myPlayer].width, Main.player[Main.myPlayer].height, 73, num24, false, 0, false, false);
											if (Main.netMode == 1)
											{
												NetMessage.SendData(21, -1, -1, "", number2, 1f, 0f, 0f, 0, 0, 0);
											}
										}
										else if (k > 100)
										{
											int num25 = k / 100;
											k -= 100 * num25;
											int number3 = Item.NewItem((int)Main.player[Main.myPlayer].position.X, (int)Main.player[Main.myPlayer].position.Y, Main.player[Main.myPlayer].width, Main.player[Main.myPlayer].height, 72, num25, false, 0, false, false);
											if (Main.netMode == 1)
											{
												NetMessage.SendData(21, -1, -1, "", number3, 1f, 0f, 0f, 0, 0, 0);
											}
										}
										else
										{
											int num26 = k;
											if (num26 < 1)
											{
												num26 = 1;
											}
											k -= num26;
											int number4 = Item.NewItem((int)Main.player[Main.myPlayer].position.X, (int)Main.player[Main.myPlayer].position.Y, Main.player[Main.myPlayer].width, Main.player[Main.myPlayer].height, 71, num26, false, 0, false, false);
											if (Main.netMode == 1)
											{
												NetMessage.SendData(21, -1, -1, "", number4, 1f, 0f, 0f, 0, 0, 0);
											}
										}
									}
									Main.npcChatText = Lang.dialog(Main.rand.Next(380, 382), false);
									Main.player[Main.myPlayer].taxMoney = 0;
									return;
								}
								Main.npcChatText = Lang.dialog(Main.rand.Next(390, 401), false);
								return;
							}
							else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 18)
							{
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								if (num5 > 0)
								{
									if (Main.player[Main.myPlayer].BuyItem(num5, -1))
									{
										AchievementsHelper.HandleNurseService(num5);
										Main.PlaySound(SoundID.Item4, -1, -1);
										Main.player[Main.myPlayer].HealEffect(Main.player[Main.myPlayer].statLifeMax2 - Main.player[Main.myPlayer].statLife, true);
										if ((double)Main.player[Main.myPlayer].statLife < (double)Main.player[Main.myPlayer].statLifeMax2 * 0.25)
										{
											Main.npcChatText = Lang.dialog(227, false);
										}
										else if ((double)Main.player[Main.myPlayer].statLife < (double)Main.player[Main.myPlayer].statLifeMax2 * 0.5)
										{
											Main.npcChatText = Lang.dialog(228, false);
										}
										else if ((double)Main.player[Main.myPlayer].statLife < (double)Main.player[Main.myPlayer].statLifeMax2 * 0.75)
										{
											Main.npcChatText = Lang.dialog(229, false);
										}
										else
										{
											Main.npcChatText = Lang.dialog(230, false);
										}
										Main.player[Main.myPlayer].statLife = Main.player[Main.myPlayer].statLifeMax2;
										for (int l = 0; l < 22; l++)
										{
											int num27 = Main.player[Main.myPlayer].buffType[l];
											if (Main.debuff[num27] && Main.player[Main.myPlayer].buffTime[l] > 0 && num27 != 28 && num27 != 34 && num27 != 87 && num27 != 89 && num27 != 21 && num27 != 86 && num27 != 199)
											{
												Main.player[Main.myPlayer].DelBuff(l);
												l = -1;
											}
										}
										return;
									}
									int num28 = Main.rand.Next(3);
									if (num28 == 0)
									{
										Main.npcChatText = Lang.dialog(52, false);
									}
									if (num28 == 1)
									{
										Main.npcChatText = Lang.dialog(53, false);
									}
									if (num28 == 2)
									{
										Main.npcChatText = Lang.dialog(54, false);
										return;
									}
								}
								else
								{
									int num29 = Main.rand.Next(3);
									if (!ChildSafety.Disabled)
									{
										num29 = Main.rand.Next(1, 3);
									}
									if (num29 == 0)
									{
										Main.npcChatText = Lang.dialog(55, false);
										return;
									}
									if (num29 == 1)
									{
										Main.npcChatText = Lang.dialog(56, false);
										return;
									}
									if (num29 == 2)
									{
										Main.npcChatText = Lang.dialog(57, false);
										return;
									}
								}
							}
							else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 550)
							{
								Main.playerInventory = true;
								Main.npcChatText = "";
								Main.npcShop = 21;
								this.shop[Main.npcShop].SetupShop(Main.npcShop);
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								return;
							}
						}
					}
					else if (Main.npcChatFocus3 && Main.player[Main.myPlayer].talkNPC >= 0)
					{
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 20)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.npcChatText = Lang.evilGood();
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 22)
						{
							Main.playerInventory = true;
							Main.npcChatText = "";
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.InGuideCraftMenu = true;
							UILinkPointNavigator.GoToDefaultPage(0);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 107)
						{
							Main.playerInventory = true;
							Main.npcChatText = "";
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.InReforgeMenu = true;
							UILinkPointNavigator.GoToDefaultPage(0);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 353)
						{
							Main.OpenHairWindow();
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 207)
						{
							Main.npcChatCornerItem = 0;
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							bool gotDye = false;
							int num30 = Main.player[Main.myPlayer].FindItem(ItemID.Sets.ExoticPlantsForDyeTrade);
							if (num30 != -1)
							{
								Main.player[Main.myPlayer].inventory[num30].stack--;
								if (Main.player[Main.myPlayer].inventory[num30].stack <= 0)
								{
									Main.player[Main.myPlayer].inventory[num30] = new Item();
								}
								gotDye = true;
								Main.PlaySound(24, -1, -1, 1, 1f, 0f);
								Main.player[Main.myPlayer].GetDyeTraderReward();
							}
							Main.npcChatText = Lang.DyeTraderQuestChat(gotDye);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 550)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.HelpText();
							Main.npcChatText = Lang.BartenderHelpText(Main.npc[Main.player[Main.myPlayer].talkNPC]);
						}
					}
				}
			}
		}

		public static void CloseNPCChatOrSign()
		{
			Main.player[Main.myPlayer].talkNPC = -1;
			Main.player[Main.myPlayer].sign = -1;
			Main.npcChatCornerItem = 0;
			Main.editSign = false;
			Main.npcChatText = "";
			Main.PlaySound(11, -1, -1, 1, 1f, 0f);
			Main.player[Main.myPlayer].releaseMount = false;
		}

		public static void SubmitSignText()
		{
			Main.PlaySound(12, -1, -1, 1, 1f, 0f);
			int num = Main.player[Main.myPlayer].sign;
			Sign.TextSign(num, Main.npcChatText);
			Main.editSign = false;
			if (Main.netMode == 1)
			{
				NetMessage.SendData(47, -1, -1, "", num, 0f, 0f, 0f, 0, 0, 0);
			}
		}

		public static void MoveCoins(Item[] pInv, Item[] cInv)
		{
			int[] array = new int[4];
			List<int> list = new List<int>();
			List<int> list2 = new List<int>();
			bool flag = false;
			int[] array2 = new int[40];
			for (int i = 0; i < cInv.Length; i++)
			{
				array2[i] = -1;
				if (cInv[i].stack < 1 || cInv[i].type < 1)
				{
					list2.Add(i);
					cInv[i] = new Item();
				}
				if (cInv[i] != null && cInv[i].stack > 0)
				{
					int num = 0;
					if (cInv[i].type == 71)
					{
						num = 1;
					}
					if (cInv[i].type == 72)
					{
						num = 2;
					}
					if (cInv[i].type == 73)
					{
						num = 3;
					}
					if (cInv[i].type == 74)
					{
						num = 4;
					}
					array2[i] = num - 1;
					if (num > 0)
					{
						array[num - 1] += cInv[i].stack;
						list2.Add(i);
						cInv[i] = new Item();
						flag = true;
					}
				}
			}
			if (!flag)
			{
				return;
			}
			Main.PlaySound(7, -1, -1, 1, 1f, 0f);
			for (int j = 0; j < pInv.Length; j++)
			{
				if (j != 58 && pInv[j] != null && pInv[j].stack > 0)
				{
					int num2 = 0;
					if (pInv[j].type == 71)
					{
						num2 = 1;
					}
					if (pInv[j].type == 72)
					{
						num2 = 2;
					}
					if (pInv[j].type == 73)
					{
						num2 = 3;
					}
					if (pInv[j].type == 74)
					{
						num2 = 4;
					}
					if (num2 > 0)
					{
						array[num2 - 1] += pInv[j].stack;
						list.Add(j);
						pInv[j] = new Item();
					}
				}
			}
			for (int k = 0; k < 3; k++)
			{
				while (array[k] >= 100)
				{
					array[k] -= 100;
					array[k + 1]++;
				}
			}
			for (int l = 0; l < 40; l++)
			{
				if (array2[l] >= 0 && cInv[l].type == 0)
				{
					int num3 = l;
					int num4 = array2[l];
					if (array[num4] > 0)
					{
						cInv[num3].SetDefaults(71 + num4, false);
						cInv[num3].stack = array[num4];
						if (cInv[num3].stack > cInv[num3].maxStack)
						{
							cInv[num3].stack = cInv[num3].maxStack;
						}
						array[num4] -= cInv[num3].stack;
						array2[l] = -1;
					}
					if (Main.netMode == 1 && Main.player[Main.myPlayer].chest > -1)
					{
						NetMessage.SendData(32, -1, -1, "", Main.player[Main.myPlayer].chest, (float)num3, 0f, 0f, 0, 0, 0);
					}
					list2.Remove(num3);
				}
			}
			for (int m = 0; m < 40; m++)
			{
				if (array2[m] >= 0 && cInv[m].type == 0)
				{
					int num5 = m;
					for (int n = 3; n >= 0; n--)
					{
						if (array[n] > 0)
						{
							cInv[num5].SetDefaults(71 + n, false);
							cInv[num5].stack = array[n];
							if (cInv[num5].stack > cInv[num5].maxStack)
							{
								cInv[num5].stack = cInv[num5].maxStack;
							}
							array[n] -= cInv[num5].stack;
							array2[m] = -1;
							break;
						}
					}
					if (Main.netMode == 1 && Main.player[Main.myPlayer].chest > -1)
					{
						NetMessage.SendData(32, -1, -1, "", Main.player[Main.myPlayer].chest, (float)num5, 0f, 0f, 0, 0, 0);
					}
					list2.Remove(num5);
				}
			}
			while (list2.Count > 0)
			{
				int num6 = list2[0];
				for (int num7 = 3; num7 >= 0; num7--)
				{
					if (array[num7] > 0)
					{
						cInv[num6].SetDefaults(71 + num7, false);
						cInv[num6].stack = array[num7];
						if (cInv[num6].stack > cInv[num6].maxStack)
						{
							cInv[num6].stack = cInv[num6].maxStack;
						}
						array[num7] -= cInv[num6].stack;
						break;
					}
				}
				if (Main.netMode == 1 && Main.player[Main.myPlayer].chest > -1)
				{
					NetMessage.SendData(32, -1, -1, "", Main.player[Main.myPlayer].chest, (float)list2[0], 0f, 0f, 0, 0, 0);
				}
				list2.RemoveAt(0);
			}
			while (list.Count > 0)
			{
				int num8 = list[0];
				for (int num9 = 3; num9 >= 0; num9--)
				{
					if (array[num9] > 0)
					{
						pInv[num8].SetDefaults(71 + num9, false);
						pInv[num8].stack = array[num9];
						if (pInv[num8].stack > pInv[num8].maxStack)
						{
							pInv[num8].stack = pInv[num8].maxStack;
						}
						array[num9] -= pInv[num8].stack;
					}
				}
				list.RemoveAt(0);
			}
		}

		protected void DrawNPCHouse()
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].townNPC && !Main.npc[i].homeless && Main.npc[i].homeTileX > 0 && Main.npc[i].homeTileY > 0 && Main.npc[i].type != 37)
				{
					int num = 1;
					int num2 = Main.npc[i].homeTileX;
					int num3 = Main.npc[i].homeTileY - 1;
					if (Main.tile[num2, num3] != null)
					{
						bool flag = false;
						while (!Main.tile[num2, num3].active() || !Main.tileSolid[(int)Main.tile[num2, num3].type])
						{
							num3--;
							if (num3 < 10)
							{
								break;
							}
							if (Main.tile[num2, num3] == null)
							{
								flag = true;
								break;
							}
						}
						if (!flag)
						{
							int num4 = 8;
							int num5 = 18;
							if (Main.tile[num2, num3].type == 19)
							{
								num5 -= 8;
							}
							num3++;
							int num6 = 0;
							float num7 = (float)(num3 * 16);
							SpriteEffects effects = SpriteEffects.None;
							if (Main.player[Main.myPlayer].gravDir == -1f)
							{
								num7 -= Main.screenPosition.Y;
								num7 = Main.screenPosition.Y + (float)Main.screenHeight - num7;
								num7 -= (float)Main.bannerTexture[num].Height;
								effects = SpriteEffects.FlipVertically;
								num6 = 4;
							}
							Main.spriteBatch.Draw(Main.bannerTexture[num], new Vector2((float)(num2 * 16 - (int)Main.screenPosition.X + num4), num7 - (float)((int)Main.screenPosition.Y) + (float)num5 + (float)num6), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.bannerTexture[num].Width, Main.bannerTexture[num].Height)), Lighting.GetColor(num2, num3), 0f, new Vector2((float)(Main.bannerTexture[num].Width / 2), (float)(Main.bannerTexture[num].Height / 2)), 1f, effects, 0f);
							int num8 = NPC.TypeToHeadIndex(Main.npc[i].type);
							float scale = 1f;
							float num9;
							if (Main.npcHeadTexture[num8].Width > Main.npcHeadTexture[num8].Height)
							{
								num9 = (float)Main.npcHeadTexture[num8].Width;
							}
							else
							{
								num9 = (float)Main.npcHeadTexture[num8].Height;
							}
							if (num9 > 24f)
							{
								scale = 24f / num9;
							}
							Main.spriteBatch.Draw(Main.npcHeadTexture[num8], new Vector2((float)(num2 * 16 - (int)Main.screenPosition.X + num4), num7 - (float)((int)Main.screenPosition.Y) + (float)num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.npcHeadTexture[num8].Width, Main.npcHeadTexture[num8].Height)), Lighting.GetColor(num2, num3), 0f, new Vector2((float)(Main.npcHeadTexture[num8].Width / 2), (float)(Main.npcHeadTexture[num8].Height / 2)), scale, effects, 0f);
							num2 = num2 * 16 - (int)Main.screenPosition.X + num4 - Main.bannerTexture[num].Width / 2;
							num3 = num3 * 16 - (int)Main.screenPosition.Y + num5 - Main.bannerTexture[num].Height / 2;
							if (Main.mouseX >= num2 && Main.mouseX <= num2 + Main.bannerTexture[num].Width && Main.mouseY >= num3 && Main.mouseY <= num3 + Main.bannerTexture[num].Height)
							{
								this.MouseText(Language.GetTextValue("Game.NPCTitle", Main.npc[i].displayName, Main.npcName[Main.npc[i].type]), 0, 0);
								if (Main.mouseRightRelease && Main.mouseRight)
								{
									Main.mouseRightRelease = false;
									WorldGen.kickOut(i);
									Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								}
							}
						}
					}
				}
			}
		}

		protected void DrawPlayerChat()
		{
			if (Main.drawingPlayerChat)
			{
				this.textBlinkerCount++;
				if (this.textBlinkerCount >= 20)
				{
					if (this.textBlinkerState == 0)
					{
						this.textBlinkerState = 1;
					}
					else
					{
						this.textBlinkerState = 0;
					}
					this.textBlinkerCount = 0;
				}
				PlayerInput.WritingText = true;
				string text = Main.chatText;
				if (this.textBlinkerState == 1)
				{
					text += "|";
				}
				if (Main.screenWidth > 800)
				{
					int i = Main.screenWidth - 300;
					int num = 78;
					Main.spriteBatch.Draw(Main.textBackTexture, new Vector2((float)num, (float)(Main.screenHeight - 36)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.textBackTexture.Width - 100, Main.textBackTexture.Height)), new Microsoft.Xna.Framework.Color(100, 100, 100, 100), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					i -= 400;
					num += 400;
					while (i > 0)
					{
						if (i > 300)
						{
							Main.spriteBatch.Draw(Main.textBackTexture, new Vector2((float)num, (float)(Main.screenHeight - 36)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(100, 0, Main.textBackTexture.Width - 200, Main.textBackTexture.Height)), new Microsoft.Xna.Framework.Color(100, 100, 100, 100), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							i -= 300;
							num += 300;
						}
						else
						{
							Main.spriteBatch.Draw(Main.textBackTexture, new Vector2((float)num, (float)(Main.screenHeight - 36)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(Main.textBackTexture.Width - i, 0, Main.textBackTexture.Width - (Main.textBackTexture.Width - i), Main.textBackTexture.Height)), new Microsoft.Xna.Framework.Color(100, 100, 100, 100), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							i = 0;
						}
					}
				}
				else
				{
					Main.spriteBatch.Draw(Main.textBackTexture, new Vector2(78f, (float)(Main.screenHeight - 36)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.textBackTexture.Width, Main.textBackTexture.Height)), new Microsoft.Xna.Framework.Color(100, 100, 100, 100), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				int num2 = -1;
				TextSnippet[] array = ChatManager.ParseMessage(text, Microsoft.Xna.Framework.Color.White);
				ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, Main.fontMouseText, array, new Vector2(88f, (float)(Main.screenHeight - 30)), 0f, Vector2.Zero, Vector2.One, out num2, -1f, 2f);
				if (num2 > -1)
				{
					array[num2].OnHover();
					if (Main.mouseLeft && Main.mouseLeftRelease)
					{
						array[num2].OnClick();
					}
				}
			}
			int num3 = Main.startChatLine;
			int num4 = Main.startChatLine + Main.showCount;
			if (num4 >= Main.numChatLines)
			{
				num4 = --Main.numChatLines;
				num3 = num4 - Main.showCount;
			}
			int num5 = 0;
			int num6 = -1;
			int num7 = -1;
			for (int j = num3; j < num4; j++)
			{
				if (Main.drawingPlayerChat || (Main.chatLine[j].showTime > 0 && Main.chatLine[j].text.Length > 0))
				{
					int num8 = -1;
					ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, Main.fontMouseText, Main.chatLine[j].parsedText, new Vector2(88f, (float)(Main.screenHeight - 30 - 28 - num5 * 21)), 0f, Vector2.Zero, Vector2.One, out num8, -1f, 2f);
					if (num8 >= 0 && Main.chatLine[j].parsedText[num8].CheckForHover)
					{
						num6 = j;
						num7 = num8;
					}
				}
				num5++;
			}
			if (num6 > -1)
			{
				Main.chatLine[num6].parsedText[num7].OnHover();
				if (Main.mouseLeft && Main.mouseLeftRelease)
				{
					Main.chatLine[num6].parsedText[num7].OnClick();
				}
			}
			TimeLogger.DetailedDrawTime(10);
		}

		protected void DrawInventory()
		{
			if (Main.ShouldPVPDraw)
			{
				Main.DrawPVPIcons();
			}
			Main.inventoryScale = 0.85f;
			int num = 448;
			int num2 = 258;
			if ((Main.player[Main.myPlayer].chest != -1 || Main.npcShop > 0) && !Main.recBigList)
			{
				num2 += 168;
				Main.inventoryScale = 0.755f;
				num += 5;
			}
			new Microsoft.Xna.Framework.Color(150, 150, 150, 150);
			if (Main.mouseX >= num && (float)Main.mouseX <= (float)num + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num2 && (float)Main.mouseY <= (float)num2 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
			{
				Main.player[Main.myPlayer].mouseInterface = true;
				if (Main.mouseLeftRelease && Main.mouseLeft)
				{
					ItemSlot.LeftClick(ref Main.player[Main.myPlayer].trashItem, 6);
					Recipe.FindRecipes();
				}
				ItemSlot.MouseHover(ref Main.player[Main.myPlayer].trashItem, 6);
			}
			ItemSlot.Draw(Main.spriteBatch, ref Main.player[Main.myPlayer].trashItem, 6, new Vector2((float)num, (float)num2), default(Microsoft.Xna.Framework.Color));
			Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[4], new Vector2(40f, 0f), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			Main.inventoryScale = 0.85f;
			if (Main.mouseX > 20 && Main.mouseX < (int)(20f + 560f * Main.inventoryScale) && Main.mouseY > 20 && Main.mouseY < (int)(20f + 280f * Main.inventoryScale) && !PlayerInput.IgnoreMouseInterface)
			{
				Main.player[Main.myPlayer].mouseInterface = true;
			}
			for (int i = 0; i < 10; i++)
			{
				for (int j = 0; j < 5; j++)
				{
					int num3 = (int)(20f + (float)(i * 56) * Main.inventoryScale);
					int num4 = (int)(20f + (float)(j * 56) * Main.inventoryScale);
					int num5 = i + j * 10;
					new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
					if (Main.mouseX >= num3 && (float)Main.mouseX <= (float)num3 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num4 && (float)Main.mouseY <= (float)num4 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						ItemSlot.OverrideHover(Main.player[Main.myPlayer].inventory, 0, num5);
						if (Main.player[Main.myPlayer].inventoryChestStack[num5] && (Main.player[Main.myPlayer].inventory[num5].type == 0 || Main.player[Main.myPlayer].inventory[num5].stack == 0))
						{
							Main.player[Main.myPlayer].inventoryChestStack[num5] = false;
						}
						if (!Main.player[Main.myPlayer].inventoryChestStack[num5])
						{
							if (Main.mouseLeftRelease && Main.mouseLeft)
							{
								ItemSlot.LeftClick(Main.player[Main.myPlayer].inventory, 0, num5);
								Recipe.FindRecipes();
							}
							else
							{
								ItemSlot.RightClick(Main.player[Main.myPlayer].inventory, 0, num5);
							}
						}
						ItemSlot.MouseHover(Main.player[Main.myPlayer].inventory, 0, num5);
					}
					ItemSlot.Draw(Main.spriteBatch, Main.player[Main.myPlayer].inventory, 0, num5, new Vector2((float)num3, (float)num4), default(Microsoft.Xna.Framework.Color));
				}
			}
			if (!PlayerInput.UsingGamepad)
			{
				int num6 = 0;
				int num7 = 2;
				int num8 = 32;
				Player player = Main.player[Main.myPlayer];
				int num9 = player.InfoAccMechShowWires.ToInt() * 6 + player.rulerLine.ToInt() + player.rulerGrid.ToInt() + player.autoActuator.ToInt() + player.autoPaint.ToInt();
				if (num9 >= 8)
				{
					num8 = 2;
				}
				if (!Main.player[Main.myPlayer].hbLocked)
				{
					num6 = 1;
				}
				Main.spriteBatch.Draw(Main.HBLockTexture[num6], new Vector2((float)num7, (float)num8), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.HBLockTexture[num6].Width, Main.HBLockTexture[num6].Height)), Main.inventoryBack, 0f, default(Vector2), 0.9f, SpriteEffects.None, 0f);
				if (Main.mouseX > num7 && (float)Main.mouseX < (float)num7 + (float)Main.HBLockTexture[num6].Width * 0.9f && Main.mouseY > num8 && (float)Main.mouseY < (float)num8 + (float)Main.HBLockTexture[num6].Height * 0.9f)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
					if (!Main.player[Main.myPlayer].hbLocked)
					{
						this.MouseText(Lang.inter[5], 0, 0);
						Main.mouseText = true;
					}
					else
					{
						this.MouseText(Lang.inter[6], 0, 0);
						Main.mouseText = true;
					}
					if (Main.mouseLeft && Main.mouseLeftRelease)
					{
						Main.PlaySound(22, -1, -1, 1, 1f, 0f);
						if (!Main.player[Main.myPlayer].hbLocked)
						{
							Main.player[Main.myPlayer].hbLocked = true;
						}
						else
						{
							Main.player[Main.myPlayer].hbLocked = false;
						}
					}
				}
			}
			ItemSlot.DrawRadialDpad(Main.spriteBatch, new Vector2(20f) + new Vector2(56f * Main.inventoryScale * 10f, 56f * Main.inventoryScale * 5f) + new Vector2(26f, 70f));
			if (Main.mapEnabled)
			{
				bool flag = false;
				int num10 = Main.screenWidth - 440;
				int num11 = 40;
				if (Main.screenWidth < 940)
				{
					flag = true;
				}
				if (flag)
				{
					num10 = Main.screenWidth - 40;
					num11 = Main.screenHeight - 200;
				}
				for (int k = 0; k < 4; k++)
				{
					int num12 = num10 + k * 32;
					int num13 = num11;
					if (flag)
					{
						num12 = num10;
						num13 = num11 + k * 32;
					}
					int num14 = k;
					int num15 = 120;
					if (k > 0 && Main.mapStyle == k - 1)
					{
						num15 = 200;
					}
					if (Main.mouseX >= num12 && Main.mouseX <= num12 + 32 && Main.mouseY >= num13 && Main.mouseY <= num13 + 30 && !PlayerInput.IgnoreMouseInterface)
					{
						num15 = 255;
						num14 += 4;
						Main.player[Main.myPlayer].mouseInterface = true;
						if (Main.mouseLeft && Main.mouseLeftRelease)
						{
							if (k == 0)
							{
								Main.playerInventory = false;
								Main.player[Main.myPlayer].talkNPC = -1;
								Main.npcChatCornerItem = 0;
								Main.PlaySound(10, -1, -1, 1, 1f, 0f);
								float num16 = 2.5f;
								Main.mapFullscreenScale = num16;
								Main.mapFullscreen = true;
								Main.resetMapFull = true;
							}
							if (k == 1)
							{
								Main.mapStyle = 0;
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							}
							if (k == 2)
							{
								Main.mapStyle = 1;
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							}
							if (k == 3)
							{
								Main.mapStyle = 2;
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							}
						}
					}
					Main.spriteBatch.Draw(Main.mapIconTexture[num14], new Vector2((float)num12, (float)num13), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.mapIconTexture[num14].Width, Main.mapIconTexture[num14].Height)), new Microsoft.Xna.Framework.Color(num15, num15, num15, num15), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
			}
			if (Main.armorHide)
			{
				Main.armorAlpha -= 0.1f;
				if (Main.armorAlpha < 0f)
				{
					Main.armorAlpha = 0f;
				}
			}
			else
			{
				Main.armorAlpha += 0.025f;
				if (Main.armorAlpha > 1f)
				{
					Main.armorAlpha = 1f;
				}
			}
			new Microsoft.Xna.Framework.Color((int)((byte)((float)Main.mouseTextColor * Main.armorAlpha)), (int)((byte)((float)Main.mouseTextColor * Main.armorAlpha)), (int)((byte)((float)Main.mouseTextColor * Main.armorAlpha)), (int)((byte)((float)Main.mouseTextColor * Main.armorAlpha)));
			Main.armorHide = false;
			int num17 = Main.DrawPageIcons();
			if (num17 > -1)
			{
				Main.toolTip = new Item();
				switch (num17)
				{
				case 1:
					Main.hoverItemName = Lang.inter[80];
					break;
				case 2:
					Main.hoverItemName = Lang.inter[79];
					break;
				case 3:
					Main.hoverItemName = (Main.CaptureModeDisabled ? Lang.inter[115] : Lang.inter[81]);
					break;
				}
			}
			if (Main.EquipPage == 2)
			{
				Microsoft.Xna.Framework.Point value = new Microsoft.Xna.Framework.Point(Main.mouseX, Main.mouseY);
				Microsoft.Xna.Framework.Rectangle r = new Microsoft.Xna.Framework.Rectangle(0, 0, (int)((float)Main.inventoryBackTexture.Width * Main.inventoryScale), (int)((float)Main.inventoryBackTexture.Height * Main.inventoryScale));
				Item[] inv = Main.player[Main.myPlayer].miscEquips;
				int num18 = Main.screenWidth - 92;
				int num19 = Main.mH + 174;
				for (int l = 0; l < 2; l++)
				{
					if (l == 0)
					{
						inv = Main.player[Main.myPlayer].miscEquips;
					}
					else if (l == 1)
					{
						inv = Main.player[Main.myPlayer].miscDyes;
					}
					r.X = num18 + l * -47;
					for (int m = 0; m < 5; m++)
					{
						int context = 0;
						int num20 = -1;
						switch (m)
						{
						case 0:
							context = 19;
							num20 = 0;
							break;
						case 1:
							context = 20;
							num20 = 1;
							break;
						case 2:
							context = 18;
							break;
						case 3:
							context = 17;
							break;
						case 4:
							context = 16;
							break;
						}
						if (l == 1)
						{
							context = 12;
							num20 = -1;
						}
						r.Y = num19 + m * 47;
						Texture2D texture2D = Main.inventoryTickOnTexture;
						if (Main.player[Main.myPlayer].hideMisc[num20])
						{
							texture2D = Main.inventoryTickOffTexture;
						}
						Microsoft.Xna.Framework.Rectangle r2 = new Microsoft.Xna.Framework.Rectangle(r.Left + 34, r.Top - 2, texture2D.Width, texture2D.Height);
						int num21 = 0;
						bool flag2 = false;
						if (r2.Contains(value) && !PlayerInput.IgnoreMouseInterface)
						{
							Main.player[Main.myPlayer].mouseInterface = true;
							flag2 = true;
							if (Main.mouseLeft && Main.mouseLeftRelease)
							{
								if (num20 == 0)
								{
									Main.player[Main.myPlayer].TogglePet();
								}
								if (num20 == 1)
								{
									Main.player[Main.myPlayer].ToggleLight();
								}
								Main.mouseLeftRelease = false;
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								if (Main.netMode == 1)
								{
									NetMessage.SendData(4, -1, -1, Main.player[Main.myPlayer].name, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
								}
							}
							if (Main.player[Main.myPlayer].hideMisc[num20])
							{
								num21 = 2;
							}
							else
							{
								num21 = 1;
							}
						}
						if (r.Contains(value) && !flag2 && !PlayerInput.IgnoreMouseInterface)
						{
							Main.player[Main.myPlayer].mouseInterface = true;
							Main.armorHide = true;
							ItemSlot.Handle(inv, context, m);
						}
						ItemSlot.Draw(Main.spriteBatch, inv, context, m, r.TopLeft(), default(Microsoft.Xna.Framework.Color));
						if (num20 != -1)
						{
							Main.spriteBatch.Draw(texture2D, r2.TopLeft(), Microsoft.Xna.Framework.Color.White * 0.7f);
							if (num21 > 0)
							{
								Main.toolTip = new Item();
								Main.hoverItemName = Lang.inter[58 + num21];
							}
						}
					}
				}
				num19 += 247;
				num18 += 8;
				int num22 = -1;
				int num23 = 0;
				int num24 = 3;
				int num25 = 260;
				if (Main.screenHeight > 630 + num25 * (Main.mapStyle == 1).ToInt())
				{
					num24++;
				}
				if (Main.screenHeight > 680 + num25 * (Main.mapStyle == 1).ToInt())
				{
					num24++;
				}
				if (Main.screenHeight > 730 + num25 * (Main.mapStyle == 1).ToInt())
				{
					num24++;
				}
				int num26 = 46;
				for (int n = 0; n < 22; n++)
				{
					int num27 = Main.player[Main.myPlayer].buffType[n];
					if (num27 != 0)
					{
						int num28 = num23 / num24;
						int num29 = num23 % num24;
						Microsoft.Xna.Framework.Point point = new Microsoft.Xna.Framework.Point(num18 + num28 * -num26, num19 + num29 * num26);
						num22 = Main.DrawBuffIcon(num22, n, num27, point.X, point.Y);
						UILinkPointNavigator.SetPosition(9000 + num23, new Vector2((float)(point.X + 30), (float)(point.Y + 30)));
						num23++;
						if (Main.buffAlpha[n] < 0.65f)
						{
							Main.buffAlpha[n] = 0.65f;
						}
					}
				}
				UILinkPointNavigator.Shortcuts.BUFFS_DRAWN = num23;
				UILinkPointNavigator.Shortcuts.BUFFS_PER_COLUMN = num24;
				if (num22 >= 0)
				{
					int num30 = Main.player[Main.myPlayer].buffType[num22];
					if (num30 > 0)
					{
						Main.buffString = Main.buffTip[num30];
						if (num30 == 26 && Main.expertMode)
						{
							Main.buffString += Lang.misc[39];
						}
						if (num30 == 147)
						{
							Main.bannerMouseOver = true;
						}
						if (num30 == 94)
						{
							int num31 = (int)(Main.player[Main.myPlayer].manaSickReduction * 100f) + 1;
							Main.buffString = Main.buffString + num31 + "%";
						}
						if (Main.meleeBuff[num30])
						{
							this.MouseText(Main.buffName[num30], -10, 0);
						}
						else
						{
							this.MouseText(Main.buffName[num30], 0, 0);
						}
					}
				}
			}
			else if (Main.EquipPage == 1)
			{
				UILinkPointNavigator.Shortcuts.NPCS_LastHovered = -1;
				if (Main.mouseX > Main.screenWidth - 64 - 28 && Main.mouseX < (int)((float)(Main.screenWidth - 64 - 28) + 56f * Main.inventoryScale) && Main.mouseY > 174 + Main.mH && Main.mouseY < (int)((float)(174 + Main.mH) + 448f * Main.inventoryScale) && !PlayerInput.IgnoreMouseInterface)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				int num32 = 0;
				string text = "";
				int num33 = 0;
				int num34 = 0;
				for (int num35 = 0; num35 < Main.npcHeadTexture.Length; num35++)
				{
					bool flag3 = false;
					int num36 = 0;
					if (num35 == 0)
					{
						flag3 = true;
					}
					else if (num35 == 21)
					{
						flag3 = false;
					}
					else
					{
						for (int num37 = 0; num37 < 200; num37++)
						{
							if (Main.npc[num37].active && NPC.TypeToHeadIndex(Main.npc[num37].type) == num35)
							{
								flag3 = true;
								num36 = num37;
								break;
							}
						}
					}
					if (flag3)
					{
						int num38 = Main.screenWidth - 64 - 28 + num34;
						int num39 = (int)((float)(174 + Main.mH) + (float)(num32 * 56) * Main.inventoryScale) + num33;
						Microsoft.Xna.Framework.Color white = new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
						if (num39 > Main.screenHeight - 80)
						{
							num34 -= 48;
							num33 -= num39 - (174 + Main.mH);
							num38 = Main.screenWidth - 64 - 28 + num34;
							num39 = (int)((float)(174 + Main.mH) + (float)(num32 * 56) * Main.inventoryScale) + num33;
							if (UILinkPointNavigator.Shortcuts.NPCS_IconsPerColumn == 100)
							{
								UILinkPointNavigator.Shortcuts.NPCS_IconsPerColumn = num32;
							}
						}
						if (Main.mouseX >= num38 && (float)Main.mouseX <= (float)num38 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num39 && (float)Main.mouseY <= (float)num39 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
						{
							UILinkPointNavigator.Shortcuts.NPCS_LastHovered = num36;
							Main.mouseText = true;
							if (num35 == 0)
							{
								text = Lang.inter[8];
							}
							else if (num35 == 11)
							{
								text = Main.npc[num36].displayName;
							}
							else
							{
								text = Language.GetTextValue("Game.NPCTitle", Main.npc[num36].displayName, Main.npcName[Main.npc[num36].type]);
							}
							if (!PlayerInput.IgnoreMouseInterface)
							{
								Main.player[Main.myPlayer].mouseInterface = true;
								if (Main.mouseLeftRelease && Main.mouseLeft && !PlayerInput.UsingGamepadUI && Main.mouseItem.type == 0)
								{
									Main.PlaySound(12, -1, -1, 1, 1f, 0f);
									this.mouseNPC = num35;
									Main.mouseLeftRelease = false;
								}
							}
						}
						UILinkPointNavigator.SetPosition(600 + num32, new Vector2((float)num38, (float)num39) + Main.inventoryBackTexture.Size() * 0.75f);
						Texture2D texture = Main.inventoryBack11Texture;
						Microsoft.Xna.Framework.Color white2 = Main.inventoryBack;
						if (UILinkPointNavigator.CurrentPoint - 600 == num32)
						{
							texture = Main.inventoryBack14Texture;
							white2 = Microsoft.Xna.Framework.Color.White;
						}
						Main.spriteBatch.Draw(texture, new Vector2((float)num38, (float)num39), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), white2, 0f, default(Vector2), Main.inventoryScale, SpriteEffects.None, 0f);
						white = Microsoft.Xna.Framework.Color.White;
						int num40 = num35;
						float scale = 1f;
						float num41;
						if (Main.npcHeadTexture[num40].Width > Main.npcHeadTexture[num40].Height)
						{
							num41 = (float)Main.npcHeadTexture[num40].Width;
						}
						else
						{
							num41 = (float)Main.npcHeadTexture[num40].Height;
						}
						if (num41 > 36f)
						{
							scale = 36f / num41;
						}
						Main.spriteBatch.Draw(Main.npcHeadTexture[num40], new Vector2((float)num38 + 26f * Main.inventoryScale, (float)num39 + 26f * Main.inventoryScale), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.npcHeadTexture[num40].Width, Main.npcHeadTexture[num40].Height)), white, 0f, new Vector2((float)(Main.npcHeadTexture[num40].Width / 2), (float)(Main.npcHeadTexture[num40].Height / 2)), scale, SpriteEffects.None, 0f);
						num32++;
					}
					UILinkPointNavigator.Shortcuts.NPCS_IconsTotal = num32;
				}
				if (text != "" && Main.mouseItem.type == 0)
				{
					this.MouseText(text, 0, 0);
				}
			}
			else
			{
				int num42 = 4;
				if (Main.mouseX > Main.screenWidth - 64 - 28 && Main.mouseX < (int)((float)(Main.screenWidth - 64 - 28) + 56f * Main.inventoryScale) && Main.mouseY > 174 + Main.mH && Main.mouseY < (int)((float)(174 + Main.mH) + 448f * Main.inventoryScale) && !PlayerInput.IgnoreMouseInterface)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				float num43 = Main.inventoryScale;
				int num44 = 8 + Main.player[Main.myPlayer].extraAccessorySlots;
				bool flag4 = false;
				int num45 = num44 - 1;
				if (num44 == 8 && (Main.player[Main.myPlayer].armor[8].type > 0 || Main.player[Main.myPlayer].armor[18].type > 0 || Main.player[Main.myPlayer].dye[8].type > 0))
				{
					num44 = 9;
					flag4 = true;
					num45 = 7;
				}
				Microsoft.Xna.Framework.Color color = Main.inventoryBack;
				Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color(80, 80, 80, 80);
				for (int num46 = 0; num46 < num44; num46++)
				{
					bool flag5 = false;
					if (flag4 && num46 == num44 - 1 && Main.mouseItem.type > 0)
					{
						flag5 = true;
					}
					int num47 = Main.screenWidth - 64 - 28;
					int num48 = (int)((float)(174 + Main.mH) + (float)(num46 * 56) * Main.inventoryScale);
					new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
					if (num46 > 2)
					{
						num48 += num42;
					}
					if (num46 == num45)
					{
						Vector2 vector = new Vector2((float)(num47 - 10 - 47 - 47 - 14), (float)num48 + (float)Main.inventoryBackTexture.Height * 0.5f);
						Main.spriteBatch.Draw(Main.extraTexture[58], vector, null, Microsoft.Xna.Framework.Color.White, 0f, Main.extraTexture[58].Size() / 2f, Main.inventoryScale, SpriteEffects.None, 0f);
						Vector2 value2 = Main.fontMouseText.MeasureString(Main.player[Main.myPlayer].statDefense.ToString());
						ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, Main.fontMouseText, Main.player[Main.myPlayer].statDefense.ToString(), vector - value2 * 0.5f * Main.inventoryScale, Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, new Vector2(Main.inventoryScale), -1f, 2f);
						if (Utils.CenteredRectangle(vector, Main.extraTexture[58].Size()).Contains(new Microsoft.Xna.Framework.Point(Main.mouseX, Main.mouseY)) && !PlayerInput.IgnoreMouseInterface)
						{
							Main.player[Main.myPlayer].mouseInterface = true;
							string value3 = Main.player[Main.myPlayer].statDefense + " " + Lang.inter[10];
							if (!string.IsNullOrEmpty(value3))
							{
								Main.hoverItemName = value3;
							}
						}
						UILinkPointNavigator.SetPosition(1557, vector + Main.extraTexture[58].Size() * Main.inventoryScale / 4f);
					}
					int context2 = 8;
					if (num46 > 2)
					{
						context2 = 10;
					}
					Texture2D texture2D2 = Main.inventoryTickOnTexture;
					if (Main.player[Main.myPlayer].hideVisual[num46])
					{
						texture2D2 = Main.inventoryTickOffTexture;
					}
					int num49 = Main.screenWidth - 58;
					int num50 = (int)((float)(172 + Main.mH) + (float)(num46 * 56) * Main.inventoryScale);
					if (num46 > 2)
					{
						num50 += num42;
					}
					Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(num49, num50, texture2D2.Width, texture2D2.Height);
					int num51 = 0;
					if (num46 >= 3 && num46 < num44 && rectangle.Contains(new Microsoft.Xna.Framework.Point(Main.mouseX, Main.mouseY)) && !PlayerInput.IgnoreMouseInterface)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						if (Main.mouseLeft && Main.mouseLeftRelease)
						{
							Main.player[Main.myPlayer].hideVisual[num46] = !Main.player[Main.myPlayer].hideVisual[num46];
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(4, -1, -1, Main.player[Main.myPlayer].name, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
							}
						}
						if (Main.player[Main.myPlayer].hideVisual[num46])
						{
							num51 = 2;
						}
						else
						{
							num51 = 1;
						}
					}
					else if (Main.mouseX >= num47 && (float)Main.mouseX <= (float)num47 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num48 && (float)Main.mouseY <= (float)num48 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
					{
						Main.armorHide = true;
						Main.player[Main.myPlayer].mouseInterface = true;
						ItemSlot.OverrideHover(Main.player[Main.myPlayer].armor, context2, num46);
						if (!flag5 && Main.mouseLeftRelease && Main.mouseLeft)
						{
							ItemSlot.LeftClick(Main.player[Main.myPlayer].armor, context2, num46);
						}
						ItemSlot.MouseHover(Main.player[Main.myPlayer].armor, context2, num46);
					}
					if (flag4 && num46 == num44 - 1)
					{
						Main.inventoryBack = color2;
					}
					ItemSlot.Draw(Main.spriteBatch, Main.player[Main.myPlayer].armor, context2, num46, new Vector2((float)num47, (float)num48), default(Microsoft.Xna.Framework.Color));
					if (num46 > 2 && num46 < num44)
					{
						Main.spriteBatch.Draw(texture2D2, new Vector2((float)num49, (float)num50), Microsoft.Xna.Framework.Color.White * 0.7f);
						if (num51 > 0)
						{
							Main.toolTip = new Item();
							Main.hoverItemName = Lang.inter[58 + num51];
						}
					}
				}
				Main.inventoryBack = color;
				if (Main.mouseX > Main.screenWidth - 64 - 28 - 47 && Main.mouseX < (int)((float)(Main.screenWidth - 64 - 20 - 47) + 56f * Main.inventoryScale) && Main.mouseY > 174 + Main.mH && Main.mouseY < (int)((float)(174 + Main.mH) + 168f * Main.inventoryScale) && !PlayerInput.IgnoreMouseInterface)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				for (int num52 = 10; num52 < 10 + num44; num52++)
				{
					bool flag6 = false;
					if (flag4 && num52 == 10 + num44 - 1 && Main.mouseItem.type > 0)
					{
						flag6 = true;
					}
					int num53 = Main.screenWidth - 64 - 28 - 47;
					int num54 = (int)((float)(174 + Main.mH) + (float)((num52 - 10) * 56) * Main.inventoryScale);
					new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
					if (num52 > 12)
					{
						num54 += num42;
					}
					int context3 = 9;
					if (num52 > 12)
					{
						context3 = 11;
					}
					if (Main.mouseX >= num53 && (float)Main.mouseX <= (float)num53 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num54 && (float)Main.mouseY <= (float)num54 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						Main.armorHide = true;
						ItemSlot.OverrideHover(Main.player[Main.myPlayer].armor, context3, num52);
						if (!flag6)
						{
							if (Main.mouseLeftRelease && Main.mouseLeft)
							{
								ItemSlot.LeftClick(Main.player[Main.myPlayer].armor, context3, num52);
							}
							else
							{
								ItemSlot.RightClick(Main.player[Main.myPlayer].armor, context3, num52);
							}
						}
						ItemSlot.MouseHover(Main.player[Main.myPlayer].armor, context3, num52);
					}
					if (flag4 && num52 == num44 + 10 - 1)
					{
						Main.inventoryBack = color2;
					}
					ItemSlot.Draw(Main.spriteBatch, Main.player[Main.myPlayer].armor, context3, num52, new Vector2((float)num53, (float)num54), default(Microsoft.Xna.Framework.Color));
				}
				Main.inventoryBack = color;
				if (Main.mouseX > Main.screenWidth - 64 - 28 - 47 && Main.mouseX < (int)((float)(Main.screenWidth - 64 - 20 - 47) + 56f * Main.inventoryScale) && Main.mouseY > 174 + Main.mH && Main.mouseY < (int)((float)(174 + Main.mH) + 168f * Main.inventoryScale) && !PlayerInput.IgnoreMouseInterface)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				for (int num55 = 0; num55 < num44; num55++)
				{
					bool flag7 = false;
					if (flag4 && num55 == num44 - 1 && Main.mouseItem.type > 0)
					{
						flag7 = true;
					}
					int num56 = Main.screenWidth - 64 - 28 - 47 - 47;
					int num57 = (int)((float)(174 + Main.mH) + (float)(num55 * 56) * Main.inventoryScale);
					new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
					if (num55 > 2)
					{
						num57 += num42;
					}
					if (Main.mouseX >= num56 && (float)Main.mouseX <= (float)num56 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num57 && (float)Main.mouseY <= (float)num57 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						Main.armorHide = true;
						ItemSlot.OverrideHover(Main.player[Main.myPlayer].dye, 12, num55);
						if (!flag7)
						{
							if (Main.mouseRightRelease && Main.mouseRight)
							{
								ItemSlot.RightClick(Main.player[Main.myPlayer].dye, 12, num55);
							}
							else if (Main.mouseLeftRelease && Main.mouseLeft)
							{
								ItemSlot.LeftClick(Main.player[Main.myPlayer].dye, 12, num55);
							}
						}
						ItemSlot.MouseHover(Main.player[Main.myPlayer].dye, 12, num55);
					}
					if (flag4 && num55 == num44 - 1)
					{
						Main.inventoryBack = color2;
					}
					ItemSlot.Draw(Main.spriteBatch, Main.player[Main.myPlayer].dye, 12, num55, new Vector2((float)num56, (float)num57), default(Microsoft.Xna.Framework.Color));
				}
				Main.inventoryBack = color;
				Main.inventoryScale = num43;
			}
			int num58 = (Main.screenHeight - 600) / 2;
			int num59 = (int)((float)Main.screenHeight / 600f * 250f);
			if (Main.screenHeight < 700)
			{
				num58 = (Main.screenHeight - 508) / 2;
				num59 = (int)((float)Main.screenHeight / 600f * 200f);
			}
			else if (Main.screenHeight < 850)
			{
				num59 = (int)((float)Main.screenHeight / 600f * 225f);
			}
			if (Main.craftingHide)
			{
				Main.craftingAlpha -= 0.1f;
				if (Main.craftingAlpha < 0f)
				{
					Main.craftingAlpha = 0f;
				}
			}
			else
			{
				Main.craftingAlpha += 0.025f;
				if (Main.craftingAlpha > 1f)
				{
					Main.craftingAlpha = 1f;
				}
			}
			Microsoft.Xna.Framework.Color color3 = new Microsoft.Xna.Framework.Color((int)((byte)((float)Main.mouseTextColor * Main.craftingAlpha)), (int)((byte)((float)Main.mouseTextColor * Main.craftingAlpha)), (int)((byte)((float)Main.mouseTextColor * Main.craftingAlpha)), (int)((byte)((float)Main.mouseTextColor * Main.craftingAlpha)));
			Main.craftingHide = false;
			if (Main.InReforgeMenu)
			{
				if (Main.mouseReforge)
				{
					if (Main.reforgeScale < 1f)
					{
						Main.reforgeScale += 0.02f;
					}
				}
				else if (Main.reforgeScale > 1f)
				{
					Main.reforgeScale -= 0.02f;
				}
				if (Main.player[Main.myPlayer].chest != -1 || Main.npcShop != 0 || Main.player[Main.myPlayer].talkNPC == -1 || Main.InGuideCraftMenu)
				{
					Main.InReforgeMenu = false;
					Main.player[Main.myPlayer].dropItemCheck();
					Recipe.FindRecipes();
				}
				else
				{
					int num60 = 50;
					int num61 = 270;
					string text2 = Lang.inter[46] + ": ";
					if (Main.reforgeItem.type > 0)
					{
						int num62 = Main.reforgeItem.value;
						if (Main.player[Main.myPlayer].discount)
						{
							num62 = (int)((double)num62 * 0.8);
						}
						num62 /= 3;
						string text3 = "";
						int num63 = 0;
						int num64 = 0;
						int num65 = 0;
						int num66 = 0;
						int num67 = num62;
						if (num67 < 1)
						{
							num67 = 1;
						}
						if (num67 >= 1000000)
						{
							num63 = num67 / 1000000;
							num67 -= num63 * 1000000;
						}
						if (num67 >= 10000)
						{
							num64 = num67 / 10000;
							num67 -= num64 * 10000;
						}
						if (num67 >= 100)
						{
							num65 = num67 / 100;
							num67 -= num65 * 100;
						}
						if (num67 >= 1)
						{
							num66 = num67;
						}
						if (num63 > 0)
						{
							object obj = text3;
							text3 = string.Concat(new object[]
							{
								obj,
								"[c/",
								Colors.AlphaDarken(Colors.CoinPlatinum).Hex3(),
								":",
								num63,
								" ",
								Lang.inter[15],
								"] "
							});
						}
						if (num64 > 0)
						{
							object obj = text3;
							text3 = string.Concat(new object[]
							{
								obj,
								"[c/",
								Colors.AlphaDarken(Colors.CoinGold).Hex3(),
								":",
								num64,
								" ",
								Lang.inter[16],
								"] "
							});
						}
						if (num65 > 0)
						{
							object obj = text3;
							text3 = string.Concat(new object[]
							{
								obj,
								"[c/",
								Colors.AlphaDarken(Colors.CoinSilver).Hex3(),
								":",
								num65,
								" ",
								Lang.inter[17],
								"] "
							});
						}
						if (num66 > 0)
						{
							object obj = text3;
							text3 = string.Concat(new object[]
							{
								obj,
								"[c/",
								Colors.AlphaDarken(Colors.CoinCopper).Hex3(),
								":",
								num66,
								" ",
								Lang.inter[18],
								"] "
							});
						}
						ItemSlot.DrawSavings(Main.spriteBatch, (float)(num60 + 130), (float)this.invBottom, true);
						ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, Main.fontMouseText, text3, new Vector2((float)(num60 + 50) + Main.fontMouseText.MeasureString(text2).X, (float)num61), Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, Vector2.One, -1f, 2f);
						int num68 = num60 + 70;
						int num69 = num61 + 40;
						bool flag8 = Main.mouseX > num68 - 15 && Main.mouseX < num68 + 15 && Main.mouseY > num69 - 15 && Main.mouseY < num69 + 15 && !PlayerInput.IgnoreMouseInterface;
						Texture2D texture2D3 = Main.reforgeTexture[0];
						if (flag8)
						{
							texture2D3 = Main.reforgeTexture[1];
						}
						Main.spriteBatch.Draw(texture2D3, new Vector2((float)num68, (float)num69), null, Microsoft.Xna.Framework.Color.White, 0f, texture2D3.Size() / 2f, Main.reforgeScale, SpriteEffects.None, 0f);
						UILinkPointNavigator.SetPosition(304, new Vector2((float)num68, (float)num69) + texture2D3.Size() / 4f);
						if (flag8)
						{
							Main.hoverItemName = Lang.inter[19];
							if (!Main.mouseReforge)
							{
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							}
							Main.mouseReforge = true;
							Main.player[Main.myPlayer].mouseInterface = true;
							if (Main.mouseLeftRelease && Main.mouseLeft && Main.player[Main.myPlayer].BuyItem(num62, -1))
							{
								bool favorited = Main.reforgeItem.favorited;
								Main.reforgeItem.netDefaults(Main.reforgeItem.netID);
								Main.reforgeItem.Prefix(-2);
								Main.reforgeItem.position.X = Main.player[Main.myPlayer].position.X + (float)(Main.player[Main.myPlayer].width / 2) - (float)(Main.reforgeItem.width / 2);
								Main.reforgeItem.position.Y = Main.player[Main.myPlayer].position.Y + (float)(Main.player[Main.myPlayer].height / 2) - (float)(Main.reforgeItem.height / 2);
								Main.reforgeItem.favorited = favorited;
								ItemText.NewText(Main.reforgeItem, Main.reforgeItem.stack, true, false);
								Main.PlaySound(SoundID.Item37, -1, -1);
							}
						}
						else
						{
							Main.mouseReforge = false;
						}
					}
					else
					{
						text2 = Lang.inter[20];
					}
					ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, Main.fontMouseText, text2, new Vector2((float)(num60 + 50), (float)num61), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, Vector2.Zero, Vector2.One, -1f, 2f);
					if (Main.mouseX >= num60 && (float)Main.mouseX <= (float)num60 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num61 && (float)Main.mouseY <= (float)num61 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						Main.craftingHide = true;
						if (Main.mouseLeftRelease && Main.mouseLeft)
						{
							ItemSlot.LeftClick(ref Main.reforgeItem, 5);
							Recipe.FindRecipes();
						}
						else
						{
							ItemSlot.RightClick(ref Main.reforgeItem, 5);
						}
						ItemSlot.MouseHover(ref Main.reforgeItem, 5);
					}
					ItemSlot.Draw(Main.spriteBatch, ref Main.reforgeItem, 5, new Vector2((float)num60, (float)num61), default(Microsoft.Xna.Framework.Color));
				}
			}
			else if (Main.InGuideCraftMenu)
			{
				if (Main.player[Main.myPlayer].chest != -1 || Main.npcShop != 0 || Main.player[Main.myPlayer].talkNPC == -1 || Main.InReforgeMenu)
				{
					Main.InGuideCraftMenu = false;
					Main.player[Main.myPlayer].dropItemCheck();
					Recipe.FindRecipes();
				}
				else
				{
					int num70 = 73;
					int num71 = 331;
					num71 += num58;
					string text4;
					if (Main.guideItem.type > 0)
					{
						text4 = Lang.inter[21] + " " + Main.guideItem.name;
						Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[22], new Vector2((float)num70, (float)(num71 + 118)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						int num72 = Main.focusRecipe;
						int num73 = 0;
						int num74 = 0;
						while (num74 < Recipe.maxRequirements)
						{
							int num75 = (num74 + 1) * 26;
							if (Main.recipe[Main.availableRecipe[num72]].requiredTile[num74] == -1)
							{
								if (num74 == 0 && !Main.recipe[Main.availableRecipe[num72]].needWater && !Main.recipe[Main.availableRecipe[num72]].needHoney && !Main.recipe[Main.availableRecipe[num72]].needLava && !Main.recipe[Main.availableRecipe[num72]].needSnowBiome)
								{
									Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[23], new Vector2((float)num70, (float)(num71 + 118 + num75)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
									break;
								}
								break;
							}
							else
							{
								num73++;
								Main.spriteBatch.DrawString(Main.fontMouseText, Lang.mapLegend[MapHelper.TileToLookup(Main.recipe[Main.availableRecipe[num72]].requiredTile[num74], 0)], new Vector2((float)num70, (float)(num71 + 118 + num75)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
								num74++;
							}
						}
						if (Main.recipe[Main.availableRecipe[num72]].needWater)
						{
							int num76 = (num73 + 1) * 26;
							Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[53], new Vector2((float)num70, (float)(num71 + 118 + num76)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						}
						if (Main.recipe[Main.availableRecipe[num72]].needHoney)
						{
							int num77 = (num73 + 1) * 26;
							Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[58], new Vector2((float)num70, (float)(num71 + 118 + num77)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						}
						if (Main.recipe[Main.availableRecipe[num72]].needLava)
						{
							int num78 = (num73 + 1) * 26;
							Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[56], new Vector2((float)num70, (float)(num71 + 118 + num78)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						}
						if (Main.recipe[Main.availableRecipe[num72]].needSnowBiome)
						{
							int num79 = (num73 + 1) * 26;
							Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[123], new Vector2((float)num70, (float)(num71 + 118 + num79)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						}
					}
					else
					{
						text4 = Lang.inter[24];
					}
					Main.spriteBatch.DrawString(Main.fontMouseText, text4, new Vector2((float)(num70 + 50), (float)(num71 + 12)), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
					if (Main.mouseX >= num70 && (float)Main.mouseX <= (float)num70 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num71 && (float)Main.mouseY <= (float)num71 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						Main.craftingHide = true;
						if (Main.mouseLeftRelease && Main.mouseLeft)
						{
							ItemSlot.LeftClick(ref Main.guideItem, 7);
							Recipe.FindRecipes();
						}
						else
						{
							ItemSlot.RightClick(ref Main.guideItem, 7);
						}
						ItemSlot.MouseHover(ref Main.guideItem, 7);
					}
					ItemSlot.Draw(Main.spriteBatch, ref Main.guideItem, 7, new Vector2((float)num70, (float)num71), default(Microsoft.Xna.Framework.Color));
				}
			}
			if (!Main.InReforgeMenu)
			{
				UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeBig = -1;
				UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = -1;
				if (Main.numAvailableRecipes > 0)
				{
					Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[25], new Vector2(76f, (float)(414 + num58)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				for (int num80 = 0; num80 < Recipe.maxRecipes; num80++)
				{
					Main.inventoryScale = 100f / (Math.Abs(Main.availableRecipeY[num80]) + 100f);
					if ((double)Main.inventoryScale < 0.75)
					{
						Main.inventoryScale = 0.75f;
					}
					if (Main.recFastScroll)
					{
						Main.inventoryScale = 0.75f;
					}
					if (Main.availableRecipeY[num80] < (float)((num80 - Main.focusRecipe) * 65))
					{
						if (Main.availableRecipeY[num80] == 0f && !Main.recFastScroll)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
						}
						Main.availableRecipeY[num80] += 6.5f;
						if (Main.recFastScroll)
						{
							Main.availableRecipeY[num80] += 130000f;
						}
						if (Main.availableRecipeY[num80] > (float)((num80 - Main.focusRecipe) * 65))
						{
							Main.availableRecipeY[num80] = (float)((num80 - Main.focusRecipe) * 65);
						}
					}
					else if (Main.availableRecipeY[num80] > (float)((num80 - Main.focusRecipe) * 65))
					{
						if (Main.availableRecipeY[num80] == 0f && !Main.recFastScroll)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
						}
						Main.availableRecipeY[num80] -= 6.5f;
						if (Main.recFastScroll)
						{
							Main.availableRecipeY[num80] -= 130000f;
						}
						if (Main.availableRecipeY[num80] < (float)((num80 - Main.focusRecipe) * 65))
						{
							Main.availableRecipeY[num80] = (float)((num80 - Main.focusRecipe) * 65);
						}
					}
					else
					{
						Main.recFastScroll = false;
					}
					if (num80 < Main.numAvailableRecipes && Math.Abs(Main.availableRecipeY[num80]) <= (float)num59)
					{
						int num81 = (int)(46f - 26f * Main.inventoryScale);
						int num82 = (int)(410f + Main.availableRecipeY[num80] * Main.inventoryScale - 30f * Main.inventoryScale + (float)num58);
						double num83 = (double)(Main.inventoryBack.A + 50);
						double num84 = 255.0;
						if (Math.Abs(Main.availableRecipeY[num80]) > (float)num59 - 100f)
						{
							num83 = (double)(150f * (100f - (Math.Abs(Main.availableRecipeY[num80]) - ((float)num59 - 100f)))) * 0.01;
							num84 = (double)(255f * (100f - (Math.Abs(Main.availableRecipeY[num80]) - ((float)num59 - 100f)))) * 0.01;
						}
						new Microsoft.Xna.Framework.Color((int)((byte)num83), (int)((byte)num83), (int)((byte)num83), (int)((byte)num83));
						Microsoft.Xna.Framework.Color lightColor = new Microsoft.Xna.Framework.Color((int)((byte)num84), (int)((byte)num84), (int)((byte)num84), (int)((byte)num84));
						if (Main.mouseX >= num81 && (float)Main.mouseX <= (float)num81 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num82 && (float)Main.mouseY <= (float)num82 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
						{
							Main.player[Main.myPlayer].mouseInterface = true;
							if (Main.focusRecipe == num80 && Main.guideItem.type == 0)
							{
								if ((Main.mouseItem.type == 0 || (Main.mouseItem.IsTheSameAs(Main.recipe[Main.availableRecipe[num80]].createItem) && Main.mouseItem.stack + Main.recipe[Main.availableRecipe[num80]].createItem.stack <= Main.mouseItem.maxStack)) && !Main.player[Main.myPlayer].IsStackingItems())
								{
									if (Main.mouseLeftRelease && Main.mouseLeft)
									{
										Main.CraftItem(Main.recipe[Main.availableRecipe[num80]]);
									}
									else if (Main.stackSplit <= 1 && Main.mouseRight && (Main.mouseItem.stack < Main.mouseItem.maxStack || Main.mouseItem.type == 0))
									{
										if (Main.stackSplit == 0)
										{
											Main.stackSplit = 15;
										}
										else
										{
											Main.stackSplit = Main.stackDelay;
										}
										Main.CraftItem(Main.recipe[Main.availableRecipe[num80]]);
									}
								}
							}
							else if (Main.mouseLeftRelease && Main.mouseLeft)
							{
								Main.focusRecipe = num80;
							}
							Main.craftingHide = true;
							Main.hoverItemName = Main.recipe[Main.availableRecipe[num80]].createItem.name;
							Main.toolTip = Main.recipe[Main.availableRecipe[num80]].createItem.Clone();
							if (Main.recipe[Main.availableRecipe[num80]].createItem.stack > 1)
							{
								object obj = Main.hoverItemName;
								Main.hoverItemName = string.Concat(new object[]
								{
									obj,
									" (",
									Main.recipe[Main.availableRecipe[num80]].createItem.stack,
									")"
								});
							}
						}
						if (Main.numAvailableRecipes > 0)
						{
							num83 -= 50.0;
							if (num83 < 0.0)
							{
								num83 = 0.0;
							}
							if (num80 == Main.focusRecipe)
							{
								UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = 0;
							}
							else
							{
								UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = -1;
							}
							Microsoft.Xna.Framework.Color color4 = Main.inventoryBack;
							Main.inventoryBack = new Microsoft.Xna.Framework.Color((int)((byte)num83), (int)((byte)num83), (int)((byte)num83), (int)((byte)num83));
							ItemSlot.Draw(Main.spriteBatch, ref Main.recipe[Main.availableRecipe[num80]].createItem, 22, new Vector2((float)num81, (float)num82), lightColor);
							Main.inventoryBack = color4;
						}
					}
				}
				if (Main.numAvailableRecipes > 0)
				{
					UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeBig = -1;
					UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = -1;
					for (int num85 = 0; num85 < Recipe.maxRequirements; num85++)
					{
						if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num85].type == 0)
						{
							UILinkPointNavigator.Shortcuts.CRAFT_CurrentIngridientsCount = num85 + 1;
							break;
						}
						int num86 = 80 + num85 * 40;
						int num87 = 380 + num58;
						double num88 = (double)(Main.inventoryBack.A + 50);
						Microsoft.Xna.Framework.Color white3 = Microsoft.Xna.Framework.Color.White;
						Microsoft.Xna.Framework.Color white4 = Microsoft.Xna.Framework.Color.White;
						num88 = (double)((float)(Main.inventoryBack.A + 50) - Math.Abs(Main.availableRecipeY[Main.focusRecipe]) * 2f);
						double num89 = (double)(255f - Math.Abs(Main.availableRecipeY[Main.focusRecipe]) * 2f);
						if (num88 < 0.0)
						{
							num88 = 0.0;
						}
						if (num89 < 0.0)
						{
							num89 = 0.0;
						}
						white3.R = (byte)num88;
						white3.G = (byte)num88;
						white3.B = (byte)num88;
						white3.A = (byte)num88;
						white4.R = (byte)num89;
						white4.G = (byte)num89;
						white4.B = (byte)num89;
						white4.A = (byte)num89;
						Main.inventoryScale = 0.6f;
						if (num88 == 0.0)
						{
							break;
						}
						if (Main.mouseX >= num86 && (float)Main.mouseX <= (float)num86 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num87 && (float)Main.mouseY <= (float)num87 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
						{
							Main.craftingHide = true;
							Main.player[Main.myPlayer].mouseInterface = true;
							Main.hoverItemName = Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num85].name;
							Main.toolTip = Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num85].Clone();
							string name;
							if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].ProcessGroupsForText(Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num85].type, out name))
							{
								Main.toolTip.name = name;
							}
							if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].anyIronBar && Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num85].type == 22)
							{
								Main.toolTip.name = Lang.misc[37] + " " + Main.itemName[22];
							}
							else if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].anyWood && Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num85].type == 9)
							{
								Main.toolTip.name = Lang.misc[37] + " " + Main.itemName[9];
							}
							else if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].anySand && Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num85].type == 169)
							{
								Main.toolTip.name = Lang.misc[37] + " " + Main.itemName[169];
							}
							else if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].anyFragment && Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num85].type == 3458)
							{
								Main.toolTip.name = Lang.misc[37] + " " + Lang.misc[51];
							}
							else if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].anyPressurePlate && Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num85].type == 542)
							{
								Main.toolTip.name = Lang.misc[37] + " " + Lang.misc[38];
							}
							if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num85].stack > 1)
							{
								object obj = Main.hoverItemName;
								Main.hoverItemName = string.Concat(new object[]
								{
									obj,
									" (",
									Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num85].stack,
									")"
								});
							}
						}
						num88 -= 50.0;
						if (num88 < 0.0)
						{
							num88 = 0.0;
						}
						UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = 1 + num85;
						Microsoft.Xna.Framework.Color color5 = Main.inventoryBack;
						Main.inventoryBack = new Microsoft.Xna.Framework.Color((int)((byte)num88), (int)((byte)num88), (int)((byte)num88), (int)((byte)num88));
						ItemSlot.Draw(Main.spriteBatch, ref Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num85], 22, new Vector2((float)num86, (float)num87), default(Microsoft.Xna.Framework.Color));
						Main.inventoryBack = color5;
					}
				}
				if (Main.numAvailableRecipes == 0)
				{
					Main.recBigList = false;
				}
				else
				{
					int num90 = 94;
					int num91 = 450 + num58;
					if (Main.InGuideCraftMenu)
					{
						num91 -= 150;
					}
					bool flag9 = Main.mouseX > num90 - 15 && Main.mouseX < num90 + 15 && Main.mouseY > num91 - 15 && Main.mouseY < num91 + 15 && !PlayerInput.IgnoreMouseInterface;
					int num92 = Main.recBigList.ToInt() * 2 + flag9.ToInt();
					Main.spriteBatch.Draw(Main.craftToggleTexture[num92], new Vector2((float)num90, (float)num91), null, Microsoft.Xna.Framework.Color.White, 0f, Main.craftToggleTexture[num92].Size() / 2f, 1f, SpriteEffects.None, 0f);
					if (flag9)
					{
						this.MouseText(Language.GetTextValue("GameUI.CraftingWindow"), 0, 0);
						Main.player[Main.myPlayer].mouseInterface = true;
						if (Main.mouseLeft && Main.mouseLeftRelease)
						{
							if (!Main.recBigList)
							{
								Main.recBigList = true;
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							}
							else
							{
								Main.recBigList = false;
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							}
						}
					}
				}
			}
			if (Main.recBigList)
			{
				UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeBig = -1;
				UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = -1;
				int num93 = 42;
				if ((double)Main.inventoryScale < 0.75)
				{
					Main.inventoryScale = 0.75f;
				}
				int num94 = 340;
				int num95 = 310;
				int num96 = (Main.screenWidth - num95 - 280) / num93;
				int num97 = (Main.screenHeight - num94 - 20) / num93;
				UILinkPointNavigator.Shortcuts.CRAFT_IconsPerRow = num96;
				UILinkPointNavigator.Shortcuts.CRAFT_IconsPerColumn = num97;
				int num98 = 0;
				int num99 = 0;
				int num100 = num95;
				int num101 = num94;
				int num102 = num95 - 20;
				int num103 = num94 + 2;
				if (Main.recStart > Main.numAvailableRecipes - num96 * num97)
				{
					Main.recStart = Main.numAvailableRecipes - num96 * num97;
					if (Main.recStart < 0)
					{
						Main.recStart = 0;
					}
				}
				if (Main.recStart > 0)
				{
					if (Main.mouseX >= num102 && Main.mouseX <= num102 + Main.craftUpButtonTexture.Width && Main.mouseY >= num103 && Main.mouseY <= num103 + Main.craftUpButtonTexture.Height && !PlayerInput.IgnoreMouseInterface)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						if (Main.mouseLeftRelease && Main.mouseLeft)
						{
							Main.recStart -= num96;
							if (Main.recStart < 0)
							{
								Main.recStart = 0;
							}
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.mouseLeftRelease = false;
						}
					}
					Main.spriteBatch.Draw(Main.craftUpButtonTexture, new Vector2((float)num102, (float)num103), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.craftUpButtonTexture.Width, Main.craftUpButtonTexture.Height)), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				if (Main.recStart < Main.numAvailableRecipes - num96 * num97)
				{
					num103 += 20;
					if (Main.mouseX >= num102 && Main.mouseX <= num102 + Main.craftUpButtonTexture.Width && Main.mouseY >= num103 && Main.mouseY <= num103 + Main.craftUpButtonTexture.Height && !PlayerInput.IgnoreMouseInterface)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						if (Main.mouseLeftRelease && Main.mouseLeft)
						{
							Main.recStart += num96;
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							if (Main.recStart > Main.numAvailableRecipes - num96)
							{
								Main.recStart = Main.numAvailableRecipes - num96;
							}
							Main.mouseLeftRelease = false;
						}
					}
					Main.spriteBatch.Draw(Main.craftDownButtonTexture, new Vector2((float)num102, (float)num103), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.craftUpButtonTexture.Width, Main.craftUpButtonTexture.Height)), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				int num104 = Main.recStart;
				while (num104 < Recipe.maxRecipes && num104 < Main.numAvailableRecipes)
				{
					int num105 = num100;
					int num106 = num101;
					double num107 = (double)(Main.inventoryBack.A + 50);
					double num108 = 255.0;
					new Microsoft.Xna.Framework.Color((int)((byte)num107), (int)((byte)num107), (int)((byte)num107), (int)((byte)num107));
					new Microsoft.Xna.Framework.Color((int)((byte)num108), (int)((byte)num108), (int)((byte)num108), (int)((byte)num108));
					if (Main.mouseX >= num105 && (float)Main.mouseX <= (float)num105 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num106 && (float)Main.mouseY <= (float)num106 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						if (Main.mouseLeftRelease && Main.mouseLeft)
						{
							Main.focusRecipe = num104;
							Main.recFastScroll = true;
							Main.recBigList = false;
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.mouseLeftRelease = false;
							if (PlayerInput.UsingGamepadUI)
							{
								UILinkPointNavigator.ChangePage(9);
							}
						}
						Main.craftingHide = true;
						Main.hoverItemName = Main.recipe[Main.availableRecipe[num104]].createItem.name;
						Main.toolTip = Main.recipe[Main.availableRecipe[num104]].createItem.Clone();
						if (Main.recipe[Main.availableRecipe[num104]].createItem.stack > 1)
						{
							object obj = Main.hoverItemName;
							Main.hoverItemName = string.Concat(new object[]
							{
								obj,
								" (",
								Main.recipe[Main.availableRecipe[num104]].createItem.stack,
								")"
							});
						}
					}
					if (Main.numAvailableRecipes > 0)
					{
						num107 -= 50.0;
						if (num107 < 0.0)
						{
							num107 = 0.0;
						}
						UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeBig = num104 - Main.recStart;
						Microsoft.Xna.Framework.Color color6 = Main.inventoryBack;
						Main.inventoryBack = new Microsoft.Xna.Framework.Color((int)((byte)num107), (int)((byte)num107), (int)((byte)num107), (int)((byte)num107));
						ItemSlot.Draw(Main.spriteBatch, ref Main.recipe[Main.availableRecipe[num104]].createItem, 22, new Vector2((float)num105, (float)num106), default(Microsoft.Xna.Framework.Color));
						Main.inventoryBack = color6;
					}
					num100 += num93;
					num98++;
					if (num98 >= num96)
					{
						num100 = num95;
						num101 += num93;
						num98 = 0;
						num99++;
						if (num99 >= num97)
						{
							break;
						}
					}
					num104++;
				}
			}
			Vector2 vector2 = Main.fontMouseText.MeasureString("Coins");
			Vector2 vector3 = Main.fontMouseText.MeasureString(Lang.inter[26]);
			float num109 = vector2.X / vector3.X;
			Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[26], new Vector2(496f, 84f + (vector2.Y - vector2.Y * num109) / 2f), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 0.75f * num109, SpriteEffects.None, 0f);
			Main.inventoryScale = 0.6f;
			for (int num110 = 0; num110 < 4; num110++)
			{
				int num111 = 497;
				int num112 = (int)(85f + (float)(num110 * 56) * Main.inventoryScale + 20f);
				int slot = num110 + 50;
				new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
				if (Main.mouseX >= num111 && (float)Main.mouseX <= (float)num111 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num112 && (float)Main.mouseY <= (float)num112 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
					ItemSlot.OverrideHover(Main.player[Main.myPlayer].inventory, 1, slot);
					if (Main.mouseLeftRelease && Main.mouseLeft)
					{
						ItemSlot.LeftClick(Main.player[Main.myPlayer].inventory, 1, slot);
						Recipe.FindRecipes();
					}
					else
					{
						ItemSlot.RightClick(Main.player[Main.myPlayer].inventory, 1, slot);
					}
					ItemSlot.MouseHover(Main.player[Main.myPlayer].inventory, 1, slot);
				}
				ItemSlot.Draw(Main.spriteBatch, Main.player[Main.myPlayer].inventory, 1, slot, new Vector2((float)num111, (float)num112), default(Microsoft.Xna.Framework.Color));
			}
			Vector2 vector4 = Main.fontMouseText.MeasureString("Ammo");
			Vector2 vector5 = Main.fontMouseText.MeasureString(Lang.inter[27]);
			float num113 = vector4.X / vector5.X;
			Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[27], new Vector2(532f, 84f + (vector4.Y - vector4.Y * num113) / 2f), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 0.75f * num113, SpriteEffects.None, 0f);
			Main.inventoryScale = 0.6f;
			for (int num114 = 0; num114 < 4; num114++)
			{
				int num115 = 534;
				int num116 = (int)(85f + (float)(num114 * 56) * Main.inventoryScale + 20f);
				int slot2 = 54 + num114;
				new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
				if (Main.mouseX >= num115 && (float)Main.mouseX <= (float)num115 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num116 && (float)Main.mouseY <= (float)num116 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
					ItemSlot.OverrideHover(Main.player[Main.myPlayer].inventory, 2, slot2);
					if (Main.mouseLeftRelease && Main.mouseLeft)
					{
						ItemSlot.LeftClick(Main.player[Main.myPlayer].inventory, 2, slot2);
						Recipe.FindRecipes();
					}
					else
					{
						ItemSlot.RightClick(Main.player[Main.myPlayer].inventory, 2, slot2);
					}
					ItemSlot.MouseHover(Main.player[Main.myPlayer].inventory, 2, slot2);
				}
				ItemSlot.Draw(Main.spriteBatch, Main.player[Main.myPlayer].inventory, 2, slot2, new Vector2((float)num115, (float)num116), default(Microsoft.Xna.Framework.Color));
			}
			if (Main.npcShop > 0 && (!Main.playerInventory || Main.player[Main.myPlayer].talkNPC == -1))
			{
				Main.npcShop = 0;
			}
			if (Main.npcShop > 0 && !Main.recBigList)
			{
				Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontMouseText, Lang.inter[28], 504f, (float)this.invBottom, Microsoft.Xna.Framework.Color.White * ((float)Main.mouseTextColor / 255f), Microsoft.Xna.Framework.Color.Black, Vector2.Zero, 1f);
				ItemSlot.DrawSavings(Main.spriteBatch, 504f, (float)this.invBottom, false);
				Main.inventoryScale = 0.755f;
				if (Main.mouseX > 73 && Main.mouseX < (int)(73f + 560f * Main.inventoryScale) && Main.mouseY > this.invBottom && Main.mouseY < (int)((float)this.invBottom + 224f * Main.inventoryScale) && !PlayerInput.IgnoreMouseInterface)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				for (int num117 = 0; num117 < 10; num117++)
				{
					for (int num118 = 0; num118 < 4; num118++)
					{
						int num119 = (int)(73f + (float)(num117 * 56) * Main.inventoryScale);
						int num120 = (int)((float)this.invBottom + (float)(num118 * 56) * Main.inventoryScale);
						int slot3 = num117 + num118 * 10;
						new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
						if (Main.mouseX >= num119 && (float)Main.mouseX <= (float)num119 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num120 && (float)Main.mouseY <= (float)num120 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale && !PlayerInput.IgnoreMouseInterface)
						{
							Main.player[Main.myPlayer].mouseInterface = true;
							if (Main.mouseLeftRelease && Main.mouseLeft)
							{
								ItemSlot.LeftClick(this.shop[Main.npcShop].item, 15, slot3);
							}
							else
							{
								ItemSlot.RightClick(this.shop[Main.npcShop].item, 15, slot3);
							}
							ItemSlot.MouseHover(this.shop[Main.npcShop].item, 15, slot3);
						}
						ItemSlot.Draw(Main.spriteBatch, this.shop[Main.npcShop].item, 15, slot3, new Vector2((float)num119, (float)num120), default(Microsoft.Xna.Framework.Color));
					}
				}
			}
			if (Main.player[Main.myPlayer].chest > -1 && !Main.tileContainer[(int)Main.tile[Main.player[Main.myPlayer].chestX, Main.player[Main.myPlayer].chestY].type])
			{
				Main.player[Main.myPlayer].chest = -1;
				Recipe.FindRecipes();
			}
			int offsetDown = 0;
			if (!PlayerInput.UsingGamepad)
			{
				offsetDown = 9999;
			}
			UIVirtualKeyboard.OffsetDown = offsetDown;
			ChestUI.Draw(Main.spriteBatch);
			if (Main.player[Main.myPlayer].chest == -1 && Main.npcShop == 0)
			{
				int num121 = 0;
				int num122 = 498;
				int num123 = 244;
				int width = Main.chestStackTexture[num121].Width;
				int height = Main.chestStackTexture[num121].Height;
				UILinkPointNavigator.SetPosition(301, new Vector2((float)num122 + (float)width * 0.75f, (float)num123 + (float)height * 0.75f));
				if (Main.mouseX >= num122 && Main.mouseX <= num122 + width && Main.mouseY >= num123 && Main.mouseY <= num123 + height && !PlayerInput.IgnoreMouseInterface)
				{
					num121 = 1;
					if (!Main.allChestStackHover)
					{
						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
						Main.allChestStackHover = true;
					}
					if (Main.mouseLeft && Main.mouseLeftRelease)
					{
						Main.mouseLeftRelease = false;
						Main.player[Main.myPlayer].QuickStackAllChests();
						Recipe.FindRecipes();
					}
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				else if (Main.allChestStackHover)
				{
					Main.PlaySound(12, -1, -1, 1, 1f, 0f);
					Main.allChestStackHover = false;
				}
				Main.spriteBatch.Draw(Main.chestStackTexture[num121], new Vector2((float)num122, (float)num123), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chestStackTexture[num121].Width, Main.chestStackTexture[num121].Height)), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				if (!Main.mouseText && num121 == 1)
				{
					this.MouseText(Language.GetTextValue("GameUI.QuickStackToNearby"), 0, 0);
				}
			}
			if (Main.player[Main.myPlayer].chest == -1 && Main.npcShop == 0)
			{
				int num124 = 0;
				int num125 = 534;
				int num126 = 244;
				int num127 = 30;
				int num128 = 30;
				UILinkPointNavigator.SetPosition(302, new Vector2((float)num125 + (float)num127 * 0.75f, (float)num126 + (float)num128 * 0.75f));
				bool flag10 = false;
				if (Main.mouseX >= num125 && Main.mouseX <= num125 + num127 && Main.mouseY >= num126 && Main.mouseY <= num126 + num128 && !PlayerInput.IgnoreMouseInterface)
				{
					num124 = 1;
					flag10 = true;
					Main.player[Main.myPlayer].mouseInterface = true;
					if (Main.mouseLeft && Main.mouseLeftRelease)
					{
						Main.mouseLeftRelease = false;
						ItemSorting.SortInventory();
						Recipe.FindRecipes();
					}
				}
				if (flag10 != Main.inventorySortMouseOver)
				{
					Main.PlaySound(12, -1, -1, 1, 1f, 0f);
					Main.inventorySortMouseOver = flag10;
				}
				Texture2D texture2 = Main.inventorySortTexture[Main.inventorySortMouseOver ? 1 : 0];
				Main.spriteBatch.Draw(texture2, new Vector2((float)num125, (float)num126), null, Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				if (!Main.mouseText && num124 == 1)
				{
					this.MouseText(Language.GetTextValue("GameUI.SortInventory"), 0, 0);
				}
			}
		}

		public static void CraftItem(Recipe r)
		{
			int stack = Main.mouseItem.stack;
			Main.mouseItem = r.createItem.Clone();
			Main.mouseItem.stack += stack;
			if (stack <= 0)
			{
				Main.mouseItem.Prefix(-1);
			}
			Main.mouseItem.position.X = Main.player[Main.myPlayer].position.X + (float)(Main.player[Main.myPlayer].width / 2) - (float)(Main.mouseItem.width / 2);
			Main.mouseItem.position.Y = Main.player[Main.myPlayer].position.Y + (float)(Main.player[Main.myPlayer].height / 2) - (float)(Main.mouseItem.height / 2);
			ItemText.NewText(Main.mouseItem, r.createItem.stack, false, false);
			r.Create();
			if (Main.mouseItem.type > 0 || r.createItem.type > 0)
			{
				Main.PlaySound(7, -1, -1, 1, 1f, 0f);
			}
		}

		private static void DrawPVPIcons()
		{
			Main.inventoryScale = 0.6f;
			int num = (int)(52f * Main.inventoryScale);
			int num2 = 707 - num * 4 + Main.screenWidth - 800;
			int num3 = 114 + Main.mH + num * 2 + num / 2 - 12;
			if (Main.EquipPage == 2)
			{
				num2 += num + num / 2;
			}
			int num4 = Main.player[Main.myPlayer].hostile ? 2 : 0;
			if (Main.mouseX > num2 && Main.mouseX < num2 + 34 && Main.mouseY > num3 - 2 && Main.mouseY < num3 + 34 && !PlayerInput.IgnoreMouseInterface)
			{
				Main.player[Main.myPlayer].mouseInterface = true;
				if (Main.teamCooldown == 0)
				{
					num4++;
				}
				if (Main.mouseLeft && Main.mouseLeftRelease && Main.teamCooldown == 0)
				{
					Main.teamCooldown = Main.teamCooldownLen;
					Main.PlaySound(12, -1, -1, 1, 1f, 0f);
					Main.player[Main.myPlayer].hostile = !Main.player[Main.myPlayer].hostile;
					NetMessage.SendData(30, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
				}
			}
			Microsoft.Xna.Framework.Rectangle rectangle = Main.PVPTexture[0].Frame(4, 6, 0, 0);
			rectangle.Location = new Microsoft.Xna.Framework.Point(rectangle.Width * num4, rectangle.Height * Main.player[Main.myPlayer].team);
			Main.spriteBatch.Draw(Main.PVPTexture[0], new Vector2((float)(num2 - 10), (float)num3), new Microsoft.Xna.Framework.Rectangle?(rectangle), Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, Vector2.One, SpriteEffects.None, 0f);
			UILinkPointNavigator.SetPosition(1550, new Vector2((float)(num2 - 10), (float)num3) + rectangle.Size() * 0.75f);
			num3 += 60;
			num2 -= 10;
			rectangle = Main.PVPTexture[1].Frame(6, 1, 0, 0);
			Microsoft.Xna.Framework.Rectangle r = rectangle;
			for (int i = 0; i < 6; i++)
			{
				r.Location = new Microsoft.Xna.Framework.Point(num2 + i % 2 * 20, num3 + i / 2 * 20);
				rectangle.X = rectangle.Width * i;
				bool flag = false;
				if (r.Contains(Main.MouseScreen.ToPoint()) && !PlayerInput.IgnoreMouseInterface)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
					if (Main.teamCooldown == 0)
					{
						flag = true;
					}
					if (Main.mouseLeft && Main.mouseLeftRelease && Main.player[Main.myPlayer].team != i && Main.teamCooldown == 0)
					{
						if (!Main.player[Main.myPlayer].TeamChangeAllowed())
						{
							Main.NewText(Lang.misc[84], 255, 240, 20, false);
						}
						else
						{
							Main.teamCooldown = Main.teamCooldownLen;
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.player[Main.myPlayer].team = i;
							NetMessage.SendData(45, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
						}
					}
				}
				if (flag)
				{
					Main.spriteBatch.Draw(Main.PVPTexture[2], r.Location.ToVector2() + new Vector2(-2f), Microsoft.Xna.Framework.Color.White);
				}
				Main.spriteBatch.Draw(Main.PVPTexture[1], r.Location.ToVector2(), new Microsoft.Xna.Framework.Rectangle?(rectangle), Microsoft.Xna.Framework.Color.White);
				UILinkPointNavigator.SetPosition(1550 + i + 1, r.Location.ToVector2() + r.Size() * 0.75f);
			}
		}

		private static int DrawPageIcons()
		{
			int num = -1;
			Vector2 vector = new Vector2((float)(Main.screenWidth - 162), (float)(142 + Main.mH));
			vector.X += 82f;
			Texture2D texture2D = Main.EquipPageTexture[(Main.EquipPage == 2) ? 3 : 2];
			if (Collision.CheckAABBvAABBCollision(vector, texture2D.Size(), new Vector2((float)Main.mouseX, (float)Main.mouseY), Vector2.One) && (Main.mouseItem.stack < 1 || Main.mouseItem.dye > 0))
			{
				num = 2;
			}
			if (num == 2)
			{
				Main.spriteBatch.Draw(Main.EquipPageTexture[6], vector, null, Main.OurFavoriteColor, 0f, new Vector2(2f), 0.9f, SpriteEffects.None, 0f);
			}
			Main.spriteBatch.Draw(texture2D, vector, null, Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, 0.9f, SpriteEffects.None, 0f);
			UILinkPointNavigator.SetPosition(305, vector + texture2D.Size() * 0.75f);
			vector.X -= 48f;
			texture2D = Main.EquipPageTexture[(Main.EquipPage == 1) ? 5 : 4];
			if (Collision.CheckAABBvAABBCollision(vector, texture2D.Size(), new Vector2((float)Main.mouseX, (float)Main.mouseY), Vector2.One) && Main.mouseItem.stack < 1)
			{
				num = 1;
			}
			if (num == 1)
			{
				Main.spriteBatch.Draw(Main.EquipPageTexture[7], vector, null, Main.OurFavoriteColor, 0f, new Vector2(2f), 0.9f, SpriteEffects.None, 0f);
			}
			Main.spriteBatch.Draw(texture2D, vector, null, Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, 0.9f, SpriteEffects.None, 0f);
			UILinkPointNavigator.SetPosition(306, vector + texture2D.Size() * 0.75f);
			vector.X -= 48f;
			texture2D = Main.EquipPageTexture[(Main.EquipPage == 3) ? 10 : 8];
			if (Collision.CheckAABBvAABBCollision(vector, texture2D.Size(), new Vector2((float)Main.mouseX, (float)Main.mouseY), Vector2.One) && Main.mouseItem.stack < 1)
			{
				num = 3;
			}
			if (num == 3 && !Main.CaptureModeDisabled)
			{
				Main.spriteBatch.Draw(Main.EquipPageTexture[9], vector, null, Main.OurFavoriteColor, 0f, Vector2.Zero, 0.9f, SpriteEffects.None, 0f);
			}
			Main.spriteBatch.Draw(texture2D, vector, null, Main.CaptureModeDisabled ? Microsoft.Xna.Framework.Color.Red : Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, 0.9f, SpriteEffects.None, 0f);
			UILinkPointNavigator.SetPosition(307, vector + texture2D.Size() * 0.75f);
			if (num != -1)
			{
				Main.player[Main.myPlayer].mouseInterface = true;
				if (Main.mouseLeft && Main.mouseLeftRelease)
				{
					bool flag = true;
					if (num == 3)
					{
						if (Main.CaptureModeDisabled)
						{
							flag = false;
						}
						else if (PlayerInput.UsingGamepad)
						{
							CaptureInterface.QuickScreenshot();
						}
						else
						{
							CaptureManager.Instance.Active = true;
							Main.blockMouse = true;
						}
					}
					else if (Main.EquipPageSelected != num)
					{
						Main.EquipPageSelected = num;
					}
					else
					{
						Main.EquipPageSelected = 0;
					}
					if (flag)
					{
						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
					}
				}
			}
			ItemSlot.EquipPage(Main.mouseItem);
			if (Main.EquipPage == -1)
			{
				Main.EquipPage = Main.EquipPageSelected;
			}
			return num;
		}

		public void DrawMouseOver()
		{
			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)((float)Main.mouseX + Main.screenPosition.X), (int)((float)Main.mouseY + Main.screenPosition.Y), 1, 1);
			if (Main.player[Main.myPlayer].gravDir == -1f)
			{
				rectangle.Y = (int)Main.screenPosition.Y + Main.screenHeight - Main.mouseY;
			}
			this.GUIBarsMouseOverLife();
			this.GUIBarsMouseOverMana();
			IngameOptions.MouseOver();
			IngameFancyUI.MouseOver();
			if (!Main.mouseText)
			{
				for (int i = 0; i < 400; i++)
				{
					if (Main.item[i].active)
					{
						Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)((double)Main.item[i].position.X + (double)Main.item[i].width * 0.5 - (double)Main.itemTexture[Main.item[i].type].Width * 0.5), (int)(Main.item[i].position.Y + (float)Main.item[i].height - (float)Main.itemTexture[Main.item[i].type].Height), Main.itemTexture[Main.item[i].type].Width, Main.itemTexture[Main.item[i].type].Height);
						if (rectangle.Intersects(value))
						{
							Main.player[Main.myPlayer].showItemIcon = false;
							string text = Main.item[i].AffixName();
							if (Main.item[i].stack > 1)
							{
								object obj = text;
								text = string.Concat(new object[]
								{
									obj,
									" (",
									Main.item[i].stack,
									")"
								});
							}
							if (Main.item[i].owner < 255 && Main.showItemOwner)
							{
								text = text + " <" + Main.player[Main.item[i].owner].name + ">";
							}
							Main.rare = Main.item[i].rare;
							if (Main.item[i].expert)
							{
								Main.rare = -12;
							}
							this.MouseText(text, Main.rare, 0);
							Main.mouseText = true;
							break;
						}
					}
				}
			}
			for (int j = 0; j < 255; j++)
			{
				if (Main.player[j].active && Main.myPlayer != j && !Main.player[j].dead)
				{
					Microsoft.Xna.Framework.Rectangle value2 = new Microsoft.Xna.Framework.Rectangle((int)((double)Main.player[j].position.X + (double)Main.player[j].width * 0.5 - 16.0), (int)(Main.player[j].position.Y + (float)Main.player[j].height - 48f), 32, 48);
					if (!Main.mouseText && rectangle.Intersects(value2))
					{
						Main.player[Main.myPlayer].showItemIcon = false;
						int num = Main.player[j].statLife;
						if (num < 0)
						{
							num = 0;
						}
						string text2 = string.Concat(new object[]
						{
							Main.player[j].name,
							": ",
							num,
							"/",
							Main.player[j].statLifeMax2
						});
						if (Main.player[j].hostile)
						{
							text2 = text2 + " " + Language.GetTextValue("Game.PvPFlag");
						}
						this.MouseText(text2, 0, Main.player[j].difficulty);
						Main.mouseText = true;
					}
				}
			}
			Main.HoveringOverAnNPC = false;
			if (!Main.mouseText)
			{
				for (int k = 0; k < 200; k++)
				{
					if (Main.npc[k].active)
					{
						int type = Main.npc[k].type;
						this.LoadNPC(type);
						Microsoft.Xna.Framework.Rectangle value3 = new Microsoft.Xna.Framework.Rectangle((int)Main.npc[k].Bottom.X - Main.npc[k].frame.Width / 2, (int)Main.npc[k].Bottom.Y - Main.npc[k].frame.Height, Main.npc[k].frame.Width, Main.npc[k].frame.Height);
						if (Main.npc[k].type >= 87 && Main.npc[k].type <= 92)
						{
							value3 = new Microsoft.Xna.Framework.Rectangle((int)((double)Main.npc[k].position.X + (double)Main.npc[k].width * 0.5 - 32.0), (int)((double)Main.npc[k].position.Y + (double)Main.npc[k].height * 0.5 - 32.0), 64, 64);
						}
						bool flag = rectangle.Intersects(value3);
						bool flag2 = flag || (Main.SmartInteractShowingGenuine && Main.SmartInteractNPC == k);
						if (flag2 && ((Main.npc[k].type != 85 && Main.npc[k].type != 341 && Main.npc[k].aiStyle != 87) || Main.npc[k].ai[0] != 0f) && Main.npc[k].type != 488)
						{
							bool flag3 = Main.SmartInteractShowingGenuine && Main.SmartInteractNPC == k;
							if (Main.npc[k].townNPC || Main.npc[k].type == 105 || Main.npc[k].type == 106 || Main.npc[k].type == 123 || Main.npc[k].type == 354 || Main.npc[k].type == 376 || Main.npc[k].type == 579 || Main.npc[k].type == 453)
							{
								Microsoft.Xna.Framework.Rectangle rectangle2 = new Microsoft.Xna.Framework.Rectangle((int)(Main.player[Main.myPlayer].position.X + (float)(Main.player[Main.myPlayer].width / 2) - (float)(Player.tileRangeX * 16)), (int)(Main.player[Main.myPlayer].position.Y + (float)(Main.player[Main.myPlayer].height / 2) - (float)(Player.tileRangeY * 16)), Player.tileRangeX * 16 * 2, Player.tileRangeY * 16 * 2);
								Microsoft.Xna.Framework.Rectangle value4 = new Microsoft.Xna.Framework.Rectangle((int)Main.npc[k].position.X, (int)Main.npc[k].position.Y, Main.npc[k].width, Main.npc[k].height);
								if (rectangle2.Intersects(value4))
								{
									flag3 = true;
								}
							}
							if (Main.player[Main.myPlayer].ownedProjectileCounts[651] > 0)
							{
								flag3 = false;
							}
							if (flag3 && !Main.player[Main.myPlayer].dead)
							{
								Main.HoveringOverAnNPC = true;
								int num2 = -(Main.npc[k].width / 2 + 8);
								float num3 = Main.npc[k].position.Y - (float)Main.chatTexture.Height - (float)((int)Main.screenPosition.Y);
								SpriteEffects spriteEffects = SpriteEffects.None;
								if (Main.npc[k].spriteDirection == -1)
								{
									spriteEffects = SpriteEffects.FlipHorizontally;
									num2 = Main.npc[k].width / 2 + 8;
								}
								if (Main.player[Main.myPlayer].gravDir != 1f)
								{
									spriteEffects |= SpriteEffects.FlipVertically;
									num3 = (float)Main.screenHeight - num3 - (float)Main.chatTexture.Height;
								}
								Main.spriteBatch.Draw(Main.chatTexture, new Vector2(Main.npc[k].position.X + (float)(Main.npc[k].width / 2) - Main.screenPosition.X - (float)(Main.chatTexture.Width / 2) - (float)num2, num3), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chatTexture.Width, Main.chatTexture.Height)), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, spriteEffects, 0f);
								if (Main.mouseRight && Main.npcChatRelease)
								{
									Main.npcChatRelease = false;
									if (PlayerInput.UsingGamepad)
									{
										Main.player[Main.myPlayer].releaseInventory = false;
									}
									if (Main.player[Main.myPlayer].talkNPC != k)
									{
										Main.CancelHairWindow();
										Main.npcShop = 0;
										Main.InGuideCraftMenu = false;
										Main.player[Main.myPlayer].dropItemCheck();
										Main.npcChatCornerItem = 0;
										Main.player[Main.myPlayer].sign = -1;
										Main.editSign = false;
										Main.player[Main.myPlayer].talkNPC = k;
										Main.playerInventory = false;
										Main.player[Main.myPlayer].chest = -1;
										Recipe.FindRecipes();
										Main.npcChatText = Main.npc[k].GetChat();
										Main.PlaySound(24, -1, -1, 1, 1f, 0f);
									}
								}
							}
							if (flag)
							{
								Main.player[Main.myPlayer].showItemIcon = false;
								string text3 = Main.npc[k].displayName;
								int num4 = k;
								if (Main.npc[k].realLife >= 0)
								{
									num4 = Main.npc[k].realLife;
								}
								if (Main.npc[num4].lifeMax > 1 && !Main.npc[num4].dontTakeDamage)
								{
									object obj2 = text3;
									text3 = string.Concat(new object[]
									{
										obj2,
										": ",
										Main.npc[num4].life,
										"/",
										Main.npc[num4].lifeMax
									});
								}
								this.MouseText(text3, 0, 0);
								Main.mouseText = true;
								break;
							}
							if (flag2)
							{
								break;
							}
						}
					}
				}
			}
			if (!Main.mouseText && Main.signHover != -1 && Main.sign[Main.signHover] != null && !Main.player[Main.myPlayer].mouseInterface)
			{
				int num5;
				string[] array = Utils.WordwrapString(Main.sign[Main.signHover].text, Main.fontMouseText, 460, 10, out num5);
				num5++;
				float num6 = 0f;
				for (int l = 0; l < num5; l++)
				{
					float x = Main.fontMouseText.MeasureString(array[l]).X;
					if (num6 < x)
					{
						num6 = x;
					}
				}
				if (num6 > 460f)
				{
					num6 = 460f;
				}
				Vector2 vector = new Vector2((float)Main.mouseX, (float)Main.mouseY) + new Vector2(16f);
				if (vector.Y > (float)(Main.screenHeight - 30 * num5))
				{
					vector.Y = (float)(Main.screenHeight - 30 * num5);
				}
				if (vector.X > (float)Main.screenWidth - num6)
				{
					vector.X = (float)(Main.screenWidth - 460);
				}
				for (int m = 0; m < num5; m++)
				{
					Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontMouseText, array[m], vector.X, vector.Y + (float)(m * 30), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), Microsoft.Xna.Framework.Color.Black, Vector2.Zero, 1f);
				}
				Main.mouseText = true;
			}
		}

		private void GUIBarsMouseOverLife()
		{
			if (!Main.mouseText)
			{
				int num = 26 * Main.player[Main.myPlayer].statLifeMax2 / (int)Main.UIDisplay_LifePerHeart;
				int num2 = 0;
				if (Main.player[Main.myPlayer].statLifeMax2 > 200)
				{
					num = 260;
					num2 += 26;
				}
				if (Main.mouseX > 500 + Main.UI_ScreenAnchorX && Main.mouseX < 500 + num + Main.UI_ScreenAnchorX && Main.mouseY > 32 && Main.mouseY < 32 + Main.heartTexture.Height + num2)
				{
					Main.player[Main.myPlayer].showItemIcon = false;
					string cursorText = Main.player[Main.myPlayer].statLife + "/" + Main.player[Main.myPlayer].statLifeMax2;
					this.MouseText(cursorText, 0, 0);
					Main.mouseText = true;
				}
			}
		}

		private void GUIBarsMouseOverMana()
		{
			if (!Main.mouseText)
			{
				int num = 24;
				int num2 = 28 * Main.player[Main.myPlayer].statManaMax2 / Main.UIDisplay_ManaPerStar;
				if (Main.mouseX > 762 + Main.UI_ScreenAnchorX && Main.mouseX < 762 + num + Main.UI_ScreenAnchorX && Main.mouseY > 30 && Main.mouseY < 30 + num2)
				{
					Main.player[Main.myPlayer].showItemIcon = false;
					string cursorText = Main.player[Main.myPlayer].statMana + "/" + Main.player[Main.myPlayer].statManaMax2;
					this.MouseText(cursorText, 0, 0);
					Main.mouseText = true;
				}
			}
		}

		public void GUIBarsDraw()
		{
			if (Main.ignoreErrors)
			{
				try
				{
					this.GUIBarsDrawInner();
					return;
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
					return;
				}
			}
			this.GUIBarsDrawInner();
		}

		protected void GUIBarsDrawInner()
		{
			Main.UI_ScreenAnchorX = Main.screenWidth - 800;
			Main.DrawInterface_Resources_Life();
			Main.DrawInterface_Resources_Mana();
			Main.DrawInterface_Resources_Breath();
			Main.DrawInterface_Resources_ClearBuffs();
			if (!Main.ingameOptionsWindow && !Main.playerInventory && !Main.inFancyUI)
			{
				this.DrawInterface_Resources_Buffs();
			}
		}

		private static void DrawInterface_Resources_ClearBuffs()
		{
			Main.buffString = "";
			Main.bannerMouseOver = false;
			if (!Main.recBigList)
			{
				Main.recStart = 0;
			}
		}

		private static void DrawInterface_Resources_Life()
		{
			Main.UIDisplay_LifePerHeart = 20f;
			int num = Main.player[Main.myPlayer].statLifeMax / 20;
			int num2 = (Main.player[Main.myPlayer].statLifeMax - 400) / 5;
			if (num2 < 0)
			{
				num2 = 0;
			}
			if (num2 > 0)
			{
				num = Main.player[Main.myPlayer].statLifeMax / (20 + num2 / 4);
				Main.UIDisplay_LifePerHeart = (float)Main.player[Main.myPlayer].statLifeMax / 20f;
			}
			int num3 = Main.player[Main.myPlayer].statLifeMax2 - Main.player[Main.myPlayer].statLifeMax;
			Main.UIDisplay_LifePerHeart += (float)(num3 / num);
			int num4 = (int)((float)Main.player[Main.myPlayer].statLifeMax2 / Main.UIDisplay_LifePerHeart);
			if (num4 >= 10)
			{
				num4 = 10;
			}
			string text = string.Concat(new object[]
			{
				Lang.inter[0],
				" ",
				Main.player[Main.myPlayer].statLifeMax2,
				"/",
				Main.player[Main.myPlayer].statLifeMax2
			});
			Vector2 vector = Main.fontMouseText.MeasureString(text);
			if (!Main.player[Main.myPlayer].ghost)
			{
				Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[0], new Vector2((float)(500 + 13 * num4) - vector.X * 0.5f + (float)Main.UI_ScreenAnchorX, 6f), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				Main.spriteBatch.DrawString(Main.fontMouseText, Main.player[Main.myPlayer].statLife + "/" + Main.player[Main.myPlayer].statLifeMax2, new Vector2((float)(500 + 13 * num4) + vector.X * 0.5f + (float)Main.UI_ScreenAnchorX, 6f), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, new Vector2(Main.fontMouseText.MeasureString(Main.player[Main.myPlayer].statLife + "/" + Main.player[Main.myPlayer].statLifeMax2).X, 0f), 1f, SpriteEffects.None, 0f);
			}
			for (int i = 1; i < (int)((float)Main.player[Main.myPlayer].statLifeMax2 / Main.UIDisplay_LifePerHeart) + 1; i++)
			{
				float num5 = 1f;
				bool flag = false;
				int num6;
				if ((float)Main.player[Main.myPlayer].statLife >= (float)i * Main.UIDisplay_LifePerHeart)
				{
					num6 = 255;
					if ((float)Main.player[Main.myPlayer].statLife == (float)i * Main.UIDisplay_LifePerHeart)
					{
						flag = true;
					}
				}
				else
				{
					float num7 = ((float)Main.player[Main.myPlayer].statLife - (float)(i - 1) * Main.UIDisplay_LifePerHeart) / Main.UIDisplay_LifePerHeart;
					num6 = (int)(30f + 225f * num7);
					if (num6 < 30)
					{
						num6 = 30;
					}
					num5 = num7 / 4f + 0.75f;
					if ((double)num5 < 0.75)
					{
						num5 = 0.75f;
					}
					if (num7 > 0f)
					{
						flag = true;
					}
				}
				if (flag)
				{
					num5 += Main.cursorScale - 1f;
				}
				int num8 = 0;
				int num9 = 0;
				if (i > 10)
				{
					num8 -= 260;
					num9 += 26;
				}
				int a = (int)((double)((float)num6) * 0.9);
				if (!Main.player[Main.myPlayer].ghost)
				{
					if (num2 > 0)
					{
						num2--;
						Main.spriteBatch.Draw(Main.heart2Texture, new Vector2((float)(500 + 26 * (i - 1) + num8 + Main.UI_ScreenAnchorX + Main.heartTexture.Width / 2), 32f + ((float)Main.heartTexture.Height - (float)Main.heartTexture.Height * num5) / 2f + (float)num9 + (float)(Main.heartTexture.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.heartTexture.Width, Main.heartTexture.Height)), new Microsoft.Xna.Framework.Color(num6, num6, num6, a), 0f, new Vector2((float)(Main.heartTexture.Width / 2), (float)(Main.heartTexture.Height / 2)), num5, SpriteEffects.None, 0f);
					}
					else
					{
						Main.spriteBatch.Draw(Main.heartTexture, new Vector2((float)(500 + 26 * (i - 1) + num8 + Main.UI_ScreenAnchorX + Main.heartTexture.Width / 2), 32f + ((float)Main.heartTexture.Height - (float)Main.heartTexture.Height * num5) / 2f + (float)num9 + (float)(Main.heartTexture.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.heartTexture.Width, Main.heartTexture.Height)), new Microsoft.Xna.Framework.Color(num6, num6, num6, a), 0f, new Vector2((float)(Main.heartTexture.Width / 2), (float)(Main.heartTexture.Height / 2)), num5, SpriteEffects.None, 0f);
					}
				}
			}
		}

		private static void DrawInterface_Resources_Mana()
		{
			Main.UIDisplay_ManaPerStar = 20;
			if (Main.player[Main.myPlayer].statManaMax2 > 0)
			{
				int arg_30_0 = Main.player[Main.myPlayer].statManaMax2 / 20;
				Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[2], new Vector2((float)(750 + Main.UI_ScreenAnchorX), 6f), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				for (int i = 1; i < Main.player[Main.myPlayer].statManaMax2 / Main.UIDisplay_ManaPerStar + 1; i++)
				{
					bool flag = false;
					float num = 1f;
					int num2;
					if (Main.player[Main.myPlayer].statMana >= i * Main.UIDisplay_ManaPerStar)
					{
						num2 = 255;
						if (Main.player[Main.myPlayer].statMana == i * Main.UIDisplay_ManaPerStar)
						{
							flag = true;
						}
					}
					else
					{
						float num3 = (float)(Main.player[Main.myPlayer].statMana - (i - 1) * Main.UIDisplay_ManaPerStar) / (float)Main.UIDisplay_ManaPerStar;
						num2 = (int)(30f + 225f * num3);
						if (num2 < 30)
						{
							num2 = 30;
						}
						num = num3 / 4f + 0.75f;
						if ((double)num < 0.75)
						{
							num = 0.75f;
						}
						if (num3 > 0f)
						{
							flag = true;
						}
					}
					if (flag)
					{
						num += Main.cursorScale - 1f;
					}
					int a = (int)((double)((float)num2) * 0.9);
					Main.spriteBatch.Draw(Main.manaTexture, new Vector2((float)(775 + Main.UI_ScreenAnchorX), (float)(30 + Main.manaTexture.Height / 2) + ((float)Main.manaTexture.Height - (float)Main.manaTexture.Height * num) / 2f + (float)(28 * (i - 1))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.manaTexture.Width, Main.manaTexture.Height)), new Microsoft.Xna.Framework.Color(num2, num2, num2, a), 0f, new Vector2((float)(Main.manaTexture.Width / 2), (float)(Main.manaTexture.Height / 2)), num, SpriteEffects.None, 0f);
				}
			}
		}

		private void DrawInterface_Resources_Buffs()
		{
			Main.recBigList = false;
			int num = -1;
			int num2 = 11;
			for (int i = 0; i < 22; i++)
			{
				if (Main.player[Main.myPlayer].buffType[i] > 0)
				{
					int b = Main.player[Main.myPlayer].buffType[i];
					int x = 32 + i * 38;
					int num3 = 76;
					if (i >= num2)
					{
						x = 32 + (i - num2) * 38;
						num3 += 50;
					}
					num = Main.DrawBuffIcon(num, i, b, x, num3);
				}
				else
				{
					Main.buffAlpha[i] = 0.4f;
				}
			}
			if (num >= 0)
			{
				int num4 = Main.player[Main.myPlayer].buffType[num];
				if (num4 > 0)
				{
					Main.buffString = Main.buffTip[num4];
					if (num4 == 26 && Main.expertMode)
					{
						Main.buffString += Lang.misc[39];
					}
					if (num4 == 147)
					{
						Main.bannerMouseOver = true;
					}
					if (num4 == 94)
					{
						int num5 = (int)(Main.player[Main.myPlayer].manaSickReduction * 100f) + 1;
						Main.buffString = Main.buffString + num5 + "%";
					}
					if (Main.meleeBuff[num4])
					{
						this.MouseText(Main.buffName[num4], -10, 0);
						return;
					}
					this.MouseText(Main.buffName[num4], 0, 0);
				}
			}
		}

		private static int DrawBuffIcon(int drawBuffText, int i, int b, int x, int y)
		{
			if (b == 0)
			{
				return drawBuffText;
			}
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(Main.buffAlpha[i], Main.buffAlpha[i], Main.buffAlpha[i], Main.buffAlpha[i]);
			Main.spriteBatch.Draw(Main.buffTexture[b], new Vector2((float)x, (float)y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.buffTexture[b].Width, Main.buffTexture[b].Height)), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			if (!Main.vanityPet[b] && !Main.lightPet[b] && !Main.buffNoTimeDisplay[b] && (!Main.player[Main.myPlayer].honeyWet || b != 48) && (!Main.player[Main.myPlayer].wet || !Main.expertMode || b != 46) && Main.player[Main.myPlayer].buffTime[i] > 2)
			{
				string text = Lang.LocalizedDuration(new TimeSpan(0, 0, Main.player[Main.myPlayer].buffTime[i] / 60), true, false);
				Main.spriteBatch.DrawString(Main.fontItemStack, text, new Vector2((float)x, (float)(y + Main.buffTexture[b].Height)), color, 0f, default(Vector2), 0.8f, SpriteEffects.None, 0f);
			}
			if (Main.mouseX < x + Main.buffTexture[b].Width && Main.mouseY < y + Main.buffTexture[b].Height && Main.mouseX > x && Main.mouseY > y)
			{
				drawBuffText = i;
				Main.buffAlpha[i] += 0.1f;
				bool flag = Main.mouseRight && Main.mouseRightRelease;
				if (PlayerInput.UsingGamepad)
				{
					flag = (Main.mouseLeft && Main.mouseLeftRelease && Main.playerInventory);
					if (Main.playerInventory)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
					}
				}
				else
				{
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				if (flag)
				{
					Main.TryRemovingBuff(i, b);
				}
			}
			else
			{
				Main.buffAlpha[i] -= 0.05f;
			}
			if (Main.buffAlpha[i] > 1f)
			{
				Main.buffAlpha[i] = 1f;
			}
			else if ((double)Main.buffAlpha[i] < 0.4)
			{
				Main.buffAlpha[i] = 0.4f;
			}
			if (PlayerInput.UsingGamepad && !Main.playerInventory)
			{
				drawBuffText = -1;
			}
			return drawBuffText;
		}

		private static void TryRemovingBuff(int i, int b)
		{
			bool flag = false;
			if (!Main.debuff[b] && b != 60 && b != 151)
			{
				if (Main.player[Main.myPlayer].mount.Active && Main.player[Main.myPlayer].mount.CheckBuff(b))
				{
					Main.player[Main.myPlayer].mount.Dismount(Main.player[Main.myPlayer]);
					flag = true;
				}
				if (Main.player[Main.myPlayer].miscEquips[0].buffType == b && !Main.player[Main.myPlayer].hideMisc[0])
				{
					Main.player[Main.myPlayer].hideMisc[0] = true;
				}
				if (Main.player[Main.myPlayer].miscEquips[1].buffType == b && !Main.player[Main.myPlayer].hideMisc[1])
				{
					Main.player[Main.myPlayer].hideMisc[1] = true;
				}
				Main.PlaySound(12, -1, -1, 1, 1f, 0f);
				if (!flag)
				{
					Main.player[Main.myPlayer].DelBuff(i);
				}
			}
		}

		private static void DrawInterface_Resources_Breath()
		{
			bool flag = false;
			if (Main.player[Main.myPlayer].dead)
			{
				return;
			}
			if (Main.player[Main.myPlayer].lavaTime < Main.player[Main.myPlayer].lavaMax && Main.player[Main.myPlayer].lavaWet)
			{
				flag = true;
			}
			else if (Main.player[Main.myPlayer].lavaTime < Main.player[Main.myPlayer].lavaMax && Main.player[Main.myPlayer].breath == Main.player[Main.myPlayer].breathMax)
			{
				flag = true;
			}
			Vector2 value = Main.player[Main.myPlayer].Top + new Vector2(0f, Main.player[Main.myPlayer].gfxOffY) - Main.screenPosition;
			Vector2 zero = new Vector2(-125f, -100f);
			if (Main.ingameOptionsWindow || Main.InGameUI.IsVisible)
			{
				value = new Vector2((float)(Main.screenWidth / 2 - 125), (float)(Main.screenHeight / 2 + 236));
				if (Main.InGameUI.IsVisible)
				{
					value.Y = (float)(Main.screenHeight - 64);
				}
				zero = Vector2.Zero;
			}
			if (Main.playerInventory && Main.screenHeight < 1000)
			{
				zero.Y = (float)(Main.player[Main.myPlayer].height - 20);
			}
			if (Main.player[Main.myPlayer].breath < Main.player[Main.myPlayer].breathMax && !Main.player[Main.myPlayer].ghost && !flag)
			{
				int arg_1B4_0 = Main.player[Main.myPlayer].breathMax / 20;
				int num = 20;
				for (int i = 1; i < Main.player[Main.myPlayer].breathMax / num + 1; i++)
				{
					float num2 = 1f;
					int num3;
					if (Main.player[Main.myPlayer].breath >= i * num)
					{
						num3 = 255;
					}
					else
					{
						float num4 = (float)(Main.player[Main.myPlayer].breath - (i - 1) * num) / (float)num;
						num3 = (int)(30f + 225f * num4);
						if (num3 < 30)
						{
							num3 = 30;
						}
						num2 = num4 / 4f + 0.75f;
						if ((double)num2 < 0.75)
						{
							num2 = 0.75f;
						}
					}
					int num5 = 0;
					int num6 = 0;
					if (i > 10)
					{
						num5 -= 260;
						num6 += 26;
					}
					Main.spriteBatch.Draw(Main.bubbleTexture, value + zero + new Vector2((float)(26 * (i - 1) + num5), 32f + ((float)Main.bubbleTexture.Height - (float)Main.bubbleTexture.Height * num2) / 2f + (float)num6), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.bubbleTexture.Width, Main.bubbleTexture.Height)), new Microsoft.Xna.Framework.Color(num3, num3, num3, num3), 0f, default(Vector2), num2, SpriteEffects.None, 0f);
				}
			}
			if (Main.player[Main.myPlayer].lavaTime < Main.player[Main.myPlayer].lavaMax && !Main.player[Main.myPlayer].ghost && flag)
			{
				int num7 = Main.player[Main.myPlayer].lavaMax / 10;
				int arg_389_0 = Main.player[Main.myPlayer].breathMax / num7;
				for (int j = 1; j < Main.player[Main.myPlayer].lavaMax / num7 + 1; j++)
				{
					float num8 = 1f;
					int num9;
					if (Main.player[Main.myPlayer].lavaTime >= j * num7)
					{
						num9 = 255;
					}
					else
					{
						float num10 = (float)(Main.player[Main.myPlayer].lavaTime - (j - 1) * num7) / (float)num7;
						num9 = (int)(30f + 225f * num10);
						if (num9 < 30)
						{
							num9 = 30;
						}
						num8 = num10 / 4f + 0.75f;
						if ((double)num8 < 0.75)
						{
							num8 = 0.75f;
						}
					}
					int num11 = 0;
					int num12 = 0;
					if (j > 10)
					{
						num11 -= 260;
						num12 += 26;
					}
					Main.spriteBatch.Draw(Main.flameTexture, value + zero + new Vector2((float)(26 * (j - 1) + num11), 32f + ((float)Main.flameTexture.Height - (float)Main.flameTexture.Height * num8) / 2f + (float)num12), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.bubbleTexture.Width, Main.bubbleTexture.Height)), new Microsoft.Xna.Framework.Color(num9, num9, num9, num9), 0f, default(Vector2), num8, SpriteEffects.None, 0f);
				}
			}
		}

		protected void GUIHotbarDrawInner()
		{
			if (!Main.playerInventory && !Main.player[Main.myPlayer].ghost)
			{
				string text = Lang.inter[37];
				if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].name != null && Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].name != "")
				{
					text = Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].AffixName();
				}
				Vector2 vector = Main.fontMouseText.MeasureString(text) / 2f;
				Main.spriteBatch.DrawString(Main.fontMouseText, text, new Vector2(236f - vector.X, 0f), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				int num = 20;
				for (int i = 0; i < 10; i++)
				{
					if (i == Main.player[Main.myPlayer].selectedItem)
					{
						if (Main.hotbarScale[i] < 1f)
						{
							Main.hotbarScale[i] += 0.05f;
						}
					}
					else if ((double)Main.hotbarScale[i] > 0.75)
					{
						Main.hotbarScale[i] -= 0.05f;
					}
					float num2 = Main.hotbarScale[i];
					int num3 = (int)(20f + 22f * (1f - num2));
					int a = (int)(75f + 150f * num2);
					Microsoft.Xna.Framework.Color lightColor = new Microsoft.Xna.Framework.Color(255, 255, 255, a);
					if (!Main.player[Main.myPlayer].hbLocked && !PlayerInput.IgnoreMouseInterface && Main.mouseX >= num && (float)Main.mouseX <= (float)num + (float)Main.inventoryBackTexture.Width * Main.hotbarScale[i] && Main.mouseY >= num3 && (float)Main.mouseY <= (float)num3 + (float)Main.inventoryBackTexture.Height * Main.hotbarScale[i] && !Main.player[Main.myPlayer].channel)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						Main.player[Main.myPlayer].showItemIcon = false;
						if (Main.mouseLeft && !Main.player[Main.myPlayer].hbLocked && !Main.blockMouse)
						{
							Main.player[Main.myPlayer].changeItem = i;
						}
						Main.hoverItemName = Main.player[Main.myPlayer].inventory[i].AffixName();
						if (Main.player[Main.myPlayer].inventory[i].stack > 1)
						{
							object obj = Main.hoverItemName;
							Main.hoverItemName = string.Concat(new object[]
							{
								obj,
								" (",
								Main.player[Main.myPlayer].inventory[i].stack,
								")"
							});
						}
						Main.rare = Main.player[Main.myPlayer].inventory[i].rare;
					}
					float num4 = Main.inventoryScale;
					Main.inventoryScale = num2;
					ItemSlot.Draw(Main.spriteBatch, Main.player[Main.myPlayer].inventory, 13, i, new Vector2((float)num, (float)num3), lightColor);
					Main.inventoryScale = num4;
					num += (int)((float)Main.inventoryBackTexture.Width * Main.hotbarScale[i]) + 4;
				}
				int selectedItem = Main.player[Main.myPlayer].selectedItem;
				if (selectedItem >= 10 && (selectedItem != 58 || Main.mouseItem.type > 0))
				{
					float num5 = 1f;
					int num6 = (int)(20f + 22f * (1f - num5));
					int a2 = (int)(75f + 150f * num5);
					Microsoft.Xna.Framework.Color lightColor2 = new Microsoft.Xna.Framework.Color(255, 255, 255, a2);
					float num7 = Main.inventoryScale;
					Main.inventoryScale = num5;
					ItemSlot.Draw(Main.spriteBatch, Main.player[Main.myPlayer].inventory, 13, selectedItem, new Vector2((float)num, (float)num6), lightColor2);
					Main.inventoryScale = num7;
				}
			}
		}

		public static void OpenHairWindow()
		{
			Main.hBar = -1f;
			Main.lBar = -1f;
			Main.sBar = -1f;
			Main.playerInventory = false;
			Main.npcChatText = "";
			Main.oldHairStyle = Main.player[Main.myPlayer].hair;
			Main.oldHairColor = Main.player[Main.myPlayer].hairColor;
			Main.hairWindow = true;
			Main.PlaySound(10, -1, -1, 1, 1f, 0f);
		}

		public static void CancelHairWindow()
		{
			if (!Main.hairWindow)
			{
				return;
			}
			Main.player[Main.myPlayer].hair = Main.oldHairStyle;
			Main.player[Main.myPlayer].hairColor = Main.oldHairColor;
			Main.hairWindow = false;
			if (Main.player[Main.myPlayer].talkNPC > -1 && Main.npc[Main.player[Main.myPlayer].talkNPC].type == 353)
			{
				Main.player[Main.myPlayer].talkNPC = -1;
			}
			Main.PlaySound(11, -1, -1, 1, 1f, 0f);
		}

		public static void BuyHairWindow()
		{
			Main.PlaySound(18, -1, -1, 1, 1f, 0f);
			Main.hairWindow = false;
			Main.player[Main.myPlayer].talkNPC = -1;
			Main.npcChatCornerItem = 0;
			NetMessage.SendData(4, -1, -1, Main.player[Main.myPlayer].name, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
		}

		public static int UnlockedMaxHair()
		{
			int num = 123;
			if (NPC.downedMartians)
			{
				num += 10;
			}
			if (NPC.downedMartians && NPC.downedMoonlord)
			{
				num++;
			}
			return num;
		}

		protected void DrawHairWindow()
		{
			if (Main.npcChatText != "" || Main.playerInventory || Main.player[Main.myPlayer].chest != -1 || Main.npcShop != 0 || Main.player[Main.myPlayer].talkNPC == -1 || Main.InGuideCraftMenu)
			{
				Main.CancelHairWindow();
				return;
			}
			int num = Main.UnlockedMaxHair();
			int num2 = Main.screenHeight / 2 + 60;
			int num3 = Main.screenWidth / 2 - Main.hairStyleBackTexture.Width / 2;
			int num4 = num2 + 42;
			int num5 = num3 + 22;
			int num6 = num3 + 234;
			int num7 = num2 + 18;
			Main.selColor = Main.player[Main.myPlayer].hairColor;
			Main.spriteBatch.Draw(Main.hairStyleBackTexture, new Vector2((float)num3, (float)num2), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.hairStyleBackTexture.Width, Main.hairStyleBackTexture.Height)), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			bool flag = new Microsoft.Xna.Framework.Rectangle(num3, num2, Main.hairStyleBackTexture.Width, Main.hairStyleBackTexture.Height).Contains(Main.MouseScreen.ToPoint());
			if (flag)
			{
				int num8 = PlayerInput.ScrollWheelDelta / 120;
				num8 = -num8;
				int num9 = Math.Sign(num8);
				while (num8 != 0)
				{
					if (num8 < 0)
					{
						Main.hairStart -= 5;
						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
					}
					else
					{
						Main.hairStart += 5;
						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
					}
					num8 -= num9;
				}
			}
			if (Main.mouseX > num3 && Main.mouseX < num3 + Main.hairStyleBackTexture.Width && Main.mouseY > num2 && Main.mouseY < num2 + Main.hairStyleBackTexture.Height)
			{
				Main.player[Main.myPlayer].mouseInterface = true;
			}
			int num10 = num6 - 18;
			int num11 = num7 + 74;
			if (Main.hairStart > 1)
			{
				if (Main.mouseX >= num10 && Main.mouseX <= num10 + Main.craftUpButtonTexture.Width && Main.mouseY >= num11 && Main.mouseY <= num11 + Main.craftUpButtonTexture.Height)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
					if (Main.mouseLeftRelease && Main.mouseLeft)
					{
						Main.hairStart -= 15;
						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
					}
				}
				Main.spriteBatch.Draw(Main.scrollLeftButtonTexture, new Vector2((float)num10, (float)num11), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.craftUpButtonTexture.Width, Main.craftUpButtonTexture.Height)), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
			if (Main.hairStart + 15 < num)
			{
				num10 += 296;
				if (Main.mouseX >= num10 && Main.mouseX <= num10 + Main.craftUpButtonTexture.Width && Main.mouseY >= num11 && Main.mouseY <= num11 + Main.craftUpButtonTexture.Height)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
					if (Main.mouseLeftRelease && Main.mouseLeft)
					{
						Main.hairStart += 15;
						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
					}
				}
				Main.spriteBatch.Draw(Main.scrollRightButtonTexture, new Vector2((float)num10, (float)num11), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.craftUpButtonTexture.Width, Main.craftUpButtonTexture.Height)), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
			if (Main.hairStart + 15 >= num)
			{
				Main.hairStart = num - 15;
			}
			if (Main.hairStart < 0)
			{
				Main.hairStart = 0;
			}
			int num12 = 0;
			if (Main.oldHairStyle != Main.player[Main.myPlayer].hair)
			{
				if (Main.player[Main.myPlayer].hair > 51)
				{
					num12 += 50000;
				}
				else
				{
					num12 += 10000;
				}
			}
			if (Main.oldHairColor != Main.player[Main.myPlayer].hairColor)
			{
				num12 += 10000;
			}
			string text = "";
			int num13 = 0;
			int num14 = 0;
			int num15 = 0;
			int num16 = 0;
			int num17 = num12;
			if (num17 < 0)
			{
				num17 = 0;
			}
			num12 = num17;
			if (num17 >= 1000000)
			{
				num13 = num17 / 1000000;
				num17 -= num13 * 1000000;
			}
			if (num17 >= 10000)
			{
				num14 = num17 / 10000;
				num17 -= num14 * 10000;
			}
			if (num17 >= 100)
			{
				num15 = num17 / 100;
				num17 -= num15 * 100;
			}
			if (num17 >= 1)
			{
				num16 = num17;
			}
			if (num13 > 0)
			{
				object obj = text;
				text = string.Concat(new object[]
				{
					obj,
					num13,
					" ",
					Lang.inter[15],
					" "
				});
			}
			if (num14 > 0)
			{
				object obj = text;
				text = string.Concat(new object[]
				{
					obj,
					num14,
					" ",
					Lang.inter[16],
					" "
				});
			}
			if (num15 > 0)
			{
				object obj = text;
				text = string.Concat(new object[]
				{
					obj,
					num15,
					" ",
					Lang.inter[17],
					" "
				});
			}
			if (num16 > 0)
			{
				object obj = text;
				text = string.Concat(new object[]
				{
					obj,
					num16,
					" ",
					Lang.inter[18],
					" "
				});
			}
			string textValue = Language.GetTextValue("GameUI.BuyWithValue", text);
			if (num12 == 0)
			{
				textValue = Language.GetTextValue("GameUI.Buy");
			}
			int num18 = (int)((Main.mouseTextColor * 2 + 255) / 3);
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(num18, (int)((double)num18 / 1.1), num18 / 2, num18);
			float scale = 0.9f;
			string text2 = textValue;
			int num19 = num3 + 18;
			int num20 = num2 + 156;
			if (num12 > 0)
			{
				ItemSlot.DrawSavings(Main.spriteBatch, (float)num19, (float)(num20 - 70), true);
			}
			if (num12 > 0 && Main.mouseX > num19 && (float)Main.mouseX < (float)num19 + Main.fontMouseText.MeasureString(text2).X && Main.mouseY > num20 && (float)Main.mouseY < (float)num20 + Main.fontMouseText.MeasureString(text2).Y)
			{
				scale = 1.1f;
				if (!Main.npcChatFocus1)
				{
					Main.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
				Main.npcChatFocus1 = true;
				Main.player[Main.myPlayer].releaseUseItem = false;
			}
			else
			{
				if (Main.npcChatFocus1)
				{
					Main.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
				Main.npcChatFocus1 = false;
			}
			Vector2 vector = Main.fontMouseText.MeasureString(text2);
			vector *= 0.5f;
			UILinkPointNavigator.SetPosition(2603, new Vector2((float)num19, (float)num20) + vector);
			for (int i = 0; i < 5; i++)
			{
				int num21 = num19;
				int num22 = num20;
				Microsoft.Xna.Framework.Color color2 = Microsoft.Xna.Framework.Color.Black;
				if (i == 0)
				{
					num21 -= 2;
				}
				if (i == 1)
				{
					num21 += 2;
				}
				if (i == 2)
				{
					num22 -= 2;
				}
				if (i == 3)
				{
					num22 += 2;
				}
				if (i == 4)
				{
					if (num12 == 0)
					{
						color2 = new Microsoft.Xna.Framework.Color(100, 100, 100);
					}
					else
					{
						color2 = color;
					}
				}
				Main.spriteBatch.DrawString(Main.fontMouseText, text2, new Vector2((float)num21 + vector.X, (float)num22 + vector.Y), color2, 0f, vector, scale, SpriteEffects.None, 0f);
			}
			scale = 0.9f;
			string textValue2 = Language.GetTextValue("GameUI.Cancel");
			num19 += 130;
			if (Main.mouseX > num19 && (float)Main.mouseX < (float)num19 + Main.fontMouseText.MeasureString(textValue2).X && Main.mouseY > num20 && (float)Main.mouseY < (float)num20 + Main.fontMouseText.MeasureString(textValue2).Y)
			{
				scale = 1.1f;
				if (!Main.npcChatFocus2)
				{
					Main.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
				Main.npcChatFocus2 = true;
				Main.player[Main.myPlayer].releaseUseItem = false;
			}
			else
			{
				if (Main.npcChatFocus2)
				{
					Main.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
				Main.npcChatFocus2 = false;
			}
			vector = Main.fontMouseText.MeasureString(textValue2);
			vector *= 0.5f;
			UILinkPointNavigator.SetPosition(2604, new Vector2((float)num19, (float)num20) + vector);
			for (int j = 0; j < 5; j++)
			{
				int num23 = num19;
				int num24 = num20;
				Microsoft.Xna.Framework.Color color3 = Microsoft.Xna.Framework.Color.Black;
				if (j == 0)
				{
					num23 -= 2;
				}
				if (j == 1)
				{
					num23 += 2;
				}
				if (j == 2)
				{
					num24 -= 2;
				}
				if (j == 3)
				{
					num24 += 2;
				}
				if (j == 4)
				{
					color3 = color;
				}
				Main.spriteBatch.DrawString(Main.fontMouseText, textValue2, new Vector2((float)num23 + vector.X, (float)num24 + vector.Y), color3, 0f, vector, scale, SpriteEffects.None, 0f);
			}
			if (Main.mouseLeft && Main.mouseLeftRelease)
			{
				if (Main.npcChatFocus1)
				{
					if (Main.player[Main.myPlayer].BuyItem(num12, -1))
					{
						Main.BuyHairWindow();
						return;
					}
				}
				else if (Main.npcChatFocus2)
				{
					Main.CancelHairWindow();
					return;
				}
			}
			if (!Main.mouseLeft)
			{
				this.grabColorSlider = 0;
				Main.blockMouse = false;
			}
			int num25 = 167;
			Vector3 vector2 = Main.rgbToHsl(Main.selColor);
			float num26 = vector2.X;
			float num27 = vector2.Y;
			float num28 = vector2.Z;
			float num29 = (float)Main.selColor.A / 255f;
			if (Main.hBar == -1f || Main.sBar == -1f || Main.lBar == -1f || Main.aBar == -1f)
			{
				Main.hBar = num26;
				Main.sBar = num27;
				Main.lBar = num28;
				Main.aBar = (float)Main.selColor.A / 255f;
			}
			else
			{
				num26 = Main.hBar;
				num27 = Main.sBar;
				num28 = Main.lBar;
				Main.aBar = num29;
			}
			UILinkPointNavigator.SetPosition(2600, new Vector2((float)num5, (float)num4) + this.hueTexture.Size() / 2f);
			Main.spriteBatch.Draw(this.hueTexture, new Vector2((float)num5, (float)num4), Microsoft.Xna.Framework.Color.White);
			if ((Main.mouseX > num5 - 4 && Main.mouseX < num5 + this.hueTexture.Width + 4 && Main.mouseY > num4 - 4 && Main.mouseY < num4 + this.hueTexture.Height + 4) || this.grabColorSlider == 1)
			{
				Main.spriteBatch.Draw(Main.colorHighlightTexture, new Vector2((float)num5, (float)num4), Main.OurFavoriteColor);
			}
			Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num5 + (float)(this.hueTexture.Width - 2) * Main.hBar - (float)(Main.colorSliderTexture.Width / 2), (float)(num4 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
			if (((Main.mouseX > num5 - 4 && Main.mouseX < num5 + this.hueTexture.Width + 4 && Main.mouseY > num4 - 4 && Main.mouseY < num4 + this.hueTexture.Height + 4) || this.grabColorSlider == 1) && Main.mouseLeft && !Main.blockMouse)
			{
				this.grabColorSlider = 1;
				num26 = (float)(Main.mouseX - num5);
				num26 /= (float)this.hueTexture.Width;
				if (num26 < 0f)
				{
					num26 = 0f;
				}
				if (num26 > 1f)
				{
					num26 = 1f;
				}
				Main.hBar = num26;
			}
			num4 += 26;
			UILinkPointNavigator.SetPosition(2601, new Vector2((float)num5, (float)num4) + Main.colorBarTexture.Size() / 2f);
			Main.spriteBatch.Draw(Main.colorBarTexture, new Vector2((float)num5, (float)num4), Microsoft.Xna.Framework.Color.White);
			for (int k = 0; k <= num25; k++)
			{
				float saturation = (float)k / (float)num25;
				Microsoft.Xna.Framework.Color color4 = Main.hslToRgb(num26, saturation, num28);
				Main.spriteBatch.Draw(Main.colorBlipTexture, new Vector2((float)(num5 + k + 5), (float)(num4 + 4)), color4);
			}
			if ((Main.mouseX > num5 - 4 && Main.mouseX < num5 + this.hueTexture.Width + 4 && Main.mouseY > num4 - 4 && Main.mouseY < num4 + this.hueTexture.Height + 4) || this.grabColorSlider == 2)
			{
				Main.spriteBatch.Draw(Main.colorHighlightTexture, new Vector2((float)num5, (float)num4), Main.OurFavoriteColor);
			}
			Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num5 + (float)(this.hueTexture.Width - 2) * Main.sBar - (float)(Main.colorSliderTexture.Width / 2), (float)(num4 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
			if (((Main.mouseX > num5 - 4 && Main.mouseX < num5 + this.hueTexture.Width + 4 && Main.mouseY > num4 - 4 && Main.mouseY < num4 + this.hueTexture.Height + 4) || this.grabColorSlider == 2) && Main.mouseLeft && !Main.blockMouse)
			{
				this.grabColorSlider = 2;
				num27 = (float)(Main.mouseX - num5);
				num27 /= (float)this.hueTexture.Width;
				if (num27 < 0f)
				{
					num27 = 0f;
				}
				if (num27 > 1f)
				{
					num27 = 1f;
				}
				Main.sBar = num27;
			}
			num4 += 26;
			UILinkPointNavigator.SetPosition(2602, new Vector2((float)num5, (float)num4) + Main.colorBarTexture.Size() / 2f);
			Main.spriteBatch.Draw(Main.colorBarTexture, new Vector2((float)num5, (float)num4), Microsoft.Xna.Framework.Color.White);
			float num30 = 0.15f;
			for (int l = 0; l <= num25; l++)
			{
				float luminosity = (float)l / (float)num25;
				Microsoft.Xna.Framework.Color color5 = Main.hslToRgb(num26, num27, luminosity);
				Main.spriteBatch.Draw(Main.colorBlipTexture, new Vector2((float)(num5 + l + 5), (float)(num4 + 4)), color5);
			}
			if ((Main.mouseX > num5 - 4 && Main.mouseX < num5 + this.hueTexture.Width + 4 && Main.mouseY > num4 - 4 && Main.mouseY < num4 + this.hueTexture.Height + 4) || this.grabColorSlider == 3)
			{
				Main.spriteBatch.Draw(Main.colorHighlightTexture, new Vector2((float)num5, (float)num4), Main.OurFavoriteColor);
			}
			Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num5 + (float)(this.hueTexture.Width - 2) * ((Main.lBar - num30) / (1f - num30)) - (float)(Main.colorSliderTexture.Width / 2), (float)(num4 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
			if (((Main.mouseX > num5 - 4 && Main.mouseX < num5 + this.hueTexture.Width + 4 && Main.mouseY > num4 - 4 && Main.mouseY < num4 + this.hueTexture.Height + 4) || this.grabColorSlider == 3) && Main.mouseLeft && !Main.blockMouse)
			{
				this.grabColorSlider = 3;
				num28 = (float)(Main.mouseX - num5);
				num28 /= (float)this.hueTexture.Width;
				if (num28 < 0f)
				{
					num28 = 0f;
				}
				if (num28 > 1f)
				{
					num28 = 1f;
				}
				num28 = num28 * (1f - num30) + num30;
				Main.lBar = num28;
			}
			Main.selColor = Main.hslToRgb(Main.hBar, Main.sBar, Main.lBar);
			Main.player[Main.myPlayer].hairColor = Main.selColor;
			int num31 = num6;
			int num32 = num7;
			int arg_1102_0 = Main.hairStart;
			int num33 = 0;
			int num34 = 0;
			for (int m = 0; m < 15; m++)
			{
				int num35 = Main.hairStart + m;
				UILinkPointNavigator.SetPosition(2605 + m, new Vector2((float)num31, (float)num32) + Main.inventoryBackTexture.Size() * 0.75f);
				if (Main.player[Main.myPlayer].hair == num35)
				{
					Main.spriteBatch.Draw(Main.inventoryBack14Texture, new Vector2((float)num31, (float)num32), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				else
				{
					Main.spriteBatch.Draw(Main.inventoryBack8Texture, new Vector2((float)num31, (float)num32), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				if (Main.mouseX > num31 && Main.mouseX < num31 + Main.inventoryBackTexture.Width && Main.mouseY > num32 && Main.mouseY < num32 + Main.inventoryBackTexture.Height && Main.mouseLeft && Main.mouseLeftRelease)
				{
					Main.mouseLeftRelease = false;
					Main.player[Main.myPlayer].hair = num35;
					Main.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
				this.LoadHair(num35);
				float x = (float)(num31 + Main.inventoryBackTexture.Width / 2 - Main.playerHairTexture[num35].Width / 2);
				float y = (float)(num32 + 4);
				Main.spriteBatch.Draw(Main.playerTextures[num33, 0], new Vector2(x, y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.playerHairTexture[num35].Width, 56)), Main.player[Main.myPlayer].skinColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.playerTextures[num33, 1], new Vector2(x, y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.playerHairTexture[num35].Width, 56)), new Microsoft.Xna.Framework.Color(255, 255, 255, 255), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.playerTextures[num33, 2], new Vector2(x, y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.playerHairTexture[num35].Width, 56)), Main.player[Main.myPlayer].eyeColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.playerHairTexture[num35], new Vector2(x, y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.playerHairTexture[num35].Width, 56)), Main.selColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				num34++;
				num31 += 56;
				if (num34 >= 5)
				{
					num34 = 0;
					num31 = num6;
					num32 += 56;
				}
			}
		}

		public static void OpenClothesWindow()
		{
			Main.hBar = -1f;
			Main.lBar = -1f;
			Main.sBar = -1f;
			Main.playerInventory = false;
			Main.npcChatText = "";
			Main.clothesWindow = true;
			Main.PlaySound(10, -1, -1, 1, 1f, 0f);
			Main.selClothes = 0;
			Main.oldClothesColor[0] = Main.player[Main.myPlayer].shirtColor;
			Main.oldClothesColor[1] = Main.player[Main.myPlayer].underShirtColor;
			Main.oldClothesColor[2] = Main.player[Main.myPlayer].pantsColor;
			Main.oldClothesColor[3] = Main.player[Main.myPlayer].shoeColor;
			if (Main.dresserDummy == null)
			{
				Main.dresserDummy = new Player();
			}
			Main.oldClothesStyle = Main.player[Main.myPlayer].skinVariant;
		}

		public static void CancelClothesWindow(bool quiet = false)
		{
			if (!Main.clothesWindow)
			{
				return;
			}
			Main.clothesWindow = false;
			if (!quiet)
			{
				Main.PlaySound(11, -1, -1, 1, 1f, 0f);
			}
			Main.player[Main.myPlayer].shirtColor = Main.oldClothesColor[0];
			Main.player[Main.myPlayer].underShirtColor = Main.oldClothesColor[1];
			Main.player[Main.myPlayer].pantsColor = Main.oldClothesColor[2];
			Main.player[Main.myPlayer].shoeColor = Main.oldClothesColor[3];
			Main.dresserDummy.skinVariant = Main.oldClothesStyle;
			Main.dresserDummy.Male = Main.player[Main.myPlayer].Male;
			Main.player[Main.myPlayer].skinVariant = Main.dresserDummy.skinVariant;
		}

		public static void SaveClothesWindow()
		{
			Main.PlaySound(7, -1, -1, 1, 1f, 0f);
			Main.clothesWindow = false;
			NetMessage.SendData(4, -1, -1, Main.player[Main.myPlayer].name, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
		}

		protected void DrawClothesWindow()
		{
			if (Main.npcChatText != "" || Main.playerInventory || Main.player[Main.myPlayer].chest != -1 || Main.npcShop != 0 || Main.player[Main.myPlayer].talkNPC != -1 || Main.InGuideCraftMenu)
			{
				Main.CancelClothesWindow(false);
				return;
			}
			int num = (int)(((double)Main.player[Main.myPlayer].position.X + (double)Main.player[Main.myPlayer].width * 0.5) / 16.0);
			int num2 = (int)(((double)Main.player[Main.myPlayer].position.Y + (double)Main.player[Main.myPlayer].height * 0.5) / 16.0);
			if (num < Main.dresserX - 5 || num > Main.dresserX + 6 || num2 < Main.dresserY - 4 || num2 > Main.dresserY + 5 || !Main.tile[Main.dresserX, Main.dresserY].active())
			{
				Main.CancelClothesWindow(false);
				return;
			}
			int num3 = 477;
			int num4 = num3 / 2;
			num4 = 124;
			num3 = 511;
			num3 -= num3 / 2 - num4 - 26;
			int num5 = Main.screenHeight / 2 + 60;
			int num6 = Main.screenWidth / 2 - num3 / 2;
			int num7 = num5 + 32;
			int num8 = num6 + 22;
			num7 -= 16;
			int num9 = num6 + num3 - num4;
			int num10 = num5 + 18;
			if (Main.selClothes == 0)
			{
				Main.selColor = Main.player[Main.myPlayer].shirtColor;
			}
			if (Main.selClothes == 1)
			{
				Main.selColor = Main.player[Main.myPlayer].underShirtColor;
			}
			if (Main.selClothes == 2)
			{
				Main.selColor = Main.player[Main.myPlayer].pantsColor;
			}
			if (Main.selClothes == 3)
			{
				Main.selColor = Main.player[Main.myPlayer].shoeColor;
			}
			Utils.DrawInvBG(Main.spriteBatch, new Microsoft.Xna.Framework.Rectangle(num6, num5, num3, 133), default(Microsoft.Xna.Framework.Color));
			if (!PlayerInput.IgnoreMouseInterface && Main.mouseX > num6 && Main.mouseX < num6 + Main.clothesStyleBackTexture.Width && Main.mouseY > num5 && Main.mouseY < num5 + Main.clothesStyleBackTexture.Height)
			{
				Main.player[Main.myPlayer].mouseInterface = true;
			}
			Vector2 value = new Vector2((float)(num6 + num3 / 2 - 16), (float)(num5 + 66 + Main.dresserDummy.height / 2 - 20));
			value.Y += 18f;
			value.X += 58f;
			Microsoft.Xna.Framework.Rectangle r = new Microsoft.Xna.Framework.Rectangle((int)value.X - Main.dresserDummy.width / 2 - 15, (int)value.Y - Main.dresserDummy.height - 33, Main.dresserDummy.width + 30, Main.dresserDummy.height + 66);
			bool flag = r.Contains(Main.MouseScreen.ToPoint());
			int num11 = Main.selClothes;
			int num12 = (int)((Main.mouseTextColor * 2 + 255) / 3);
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(num12, (int)((double)num12 / 1.1), num12 / 2, num12);
			float num13 = 0.9f;
			string textValue = Language.GetTextValue("GameUI.Change");
			int num14 = num6 + num3 - num4 + 22;
			num14 = num6 + 22;
			int num15 = num5 + 94;
			bool flag2 = false;
			if (Main.oldClothesColor[0] != Main.player[Main.myPlayer].shirtColor || Main.oldClothesColor[1] != Main.player[Main.myPlayer].underShirtColor || Main.oldClothesColor[2] != Main.player[Main.myPlayer].pantsColor || Main.oldClothesColor[3] != Main.player[Main.myPlayer].shoeColor || Main.oldClothesStyle != Main.player[Main.myPlayer].skinVariant)
			{
				flag2 = true;
			}
			Vector2 value2 = Main.fontMouseText.MeasureString(textValue);
			UILinkPointNavigator.SetPosition(2803, new Vector2((float)num14, (float)num15) + value2 * num13 * 0.5f);
			if (flag2 && Main.mouseX > num14 && (float)Main.mouseX < (float)num14 + value2.X && Main.mouseY > num15 && (float)Main.mouseY < (float)num15 + value2.Y)
			{
				num13 = 1.1f;
				if (!Main.npcChatFocus1)
				{
					Main.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
				Main.npcChatFocus1 = true;
				Main.player[Main.myPlayer].releaseUseItem = false;
			}
			else
			{
				if (Main.npcChatFocus1)
				{
					Main.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
				Main.npcChatFocus1 = false;
			}
			for (int i = 0; i < 5; i++)
			{
				int num16 = num14;
				int num17 = num15;
				Microsoft.Xna.Framework.Color color2 = Microsoft.Xna.Framework.Color.Black;
				if (i == 0)
				{
					num16 -= 2;
				}
				if (i == 1)
				{
					num16 += 2;
				}
				if (i == 2)
				{
					num17 -= 2;
				}
				if (i == 3)
				{
					num17 += 2;
				}
				if (i == 4)
				{
					if (!flag2)
					{
						color2 = new Microsoft.Xna.Framework.Color(100, 100, 100);
					}
					else
					{
						color2 = color;
					}
				}
				Vector2 vector = Main.fontMouseText.MeasureString(textValue);
				vector *= 0.5f;
				Main.spriteBatch.DrawString(Main.fontMouseText, textValue, new Vector2((float)num16 + vector.X, (float)num17 + vector.Y), color2, 0f, vector, num13, SpriteEffects.None, 0f);
			}
			num13 = 0.9f;
			string textValue2 = Language.GetTextValue("GameUI.Cancel");
			num14 += 130;
			value2 = Main.fontMouseText.MeasureString(textValue2);
			UILinkPointNavigator.SetPosition(2804, new Vector2((float)num14, (float)num15) + value2 * num13 * 0.5f);
			if (Main.mouseX > num14 && (float)Main.mouseX < (float)num14 + value2.X && Main.mouseY > num15 && (float)Main.mouseY < (float)num15 + value2.Y)
			{
				num13 = 1.1f;
				if (!Main.npcChatFocus2)
				{
					Main.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
				Main.npcChatFocus2 = true;
				Main.player[Main.myPlayer].releaseUseItem = false;
			}
			else
			{
				if (Main.npcChatFocus2)
				{
					Main.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
				Main.npcChatFocus2 = false;
			}
			for (int j = 0; j < 5; j++)
			{
				int num18 = num14;
				int num19 = num15;
				Microsoft.Xna.Framework.Color color3 = Microsoft.Xna.Framework.Color.Black;
				if (j == 0)
				{
					num18 -= 2;
				}
				if (j == 1)
				{
					num18 += 2;
				}
				if (j == 2)
				{
					num19 -= 2;
				}
				if (j == 3)
				{
					num19 += 2;
				}
				if (j == 4)
				{
					color3 = color;
				}
				Vector2 vector2 = Main.fontMouseText.MeasureString(textValue2);
				vector2 *= 0.5f;
				Main.spriteBatch.DrawString(Main.fontMouseText, textValue2, new Vector2((float)num18 + vector2.X, (float)num19 + vector2.Y), color3, 0f, vector2, num13, SpriteEffects.None, 0f);
			}
			if (Main.mouseLeft && Main.mouseLeftRelease)
			{
				if (Main.npcChatFocus1)
				{
					Main.SaveClothesWindow();
					return;
				}
				if (Main.npcChatFocus2)
				{
					Main.CancelClothesWindow(false);
					return;
				}
			}
			if (!Main.mouseLeft)
			{
				this.grabColorSlider = 0;
				Main.blockMouse = false;
			}
			int num20 = 167;
			Vector3 vector3 = Main.rgbToHsl(Main.selColor);
			float num21 = vector3.X;
			float num22 = vector3.Y;
			float num23 = vector3.Z;
			if (Main.hBar == -1f || Main.sBar == -1f || Main.lBar == -1f)
			{
				Main.hBar = num21;
				Main.sBar = num22;
				Main.lBar = num23;
			}
			else
			{
				num21 = Main.hBar;
				num22 = Main.sBar;
				num23 = Main.lBar;
			}
			Main.spriteBatch.Draw(this.hueTexture, new Vector2((float)num8, (float)num7), Microsoft.Xna.Framework.Color.White);
			if ((Main.mouseX > num8 - 4 && Main.mouseX < num8 + this.hueTexture.Width + 4 && Main.mouseY > num7 - 4 && Main.mouseY < num7 + this.hueTexture.Height + 4) || this.grabColorSlider == 1)
			{
				Main.spriteBatch.Draw(Main.colorHighlightTexture, new Vector2((float)num8, (float)num7), Main.OurFavoriteColor);
			}
			Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num8 + (float)(this.hueTexture.Width - 2) * Main.hBar - (float)(Main.colorSliderTexture.Width / 2), (float)(num7 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
			if (((Main.mouseX > num8 - 4 && Main.mouseX < num8 + this.hueTexture.Width + 4 && Main.mouseY > num7 - 4 && Main.mouseY < num7 + this.hueTexture.Height + 4) || this.grabColorSlider == 1) && Main.mouseLeft && !Main.blockMouse)
			{
				this.grabColorSlider = 1;
				num21 = (float)(Main.mouseX - num8);
				num21 /= (float)this.hueTexture.Width;
				if (num21 < 0f)
				{
					num21 = 0f;
				}
				if (num21 > 1f)
				{
					num21 = 1f;
				}
				Main.hBar = num21;
			}
			UILinkPointNavigator.SetPosition(2800, new Vector2((float)num8, (float)num7) + this.hueTexture.Size() / 2f);
			num7 += 26;
			Main.spriteBatch.Draw(Main.colorBarTexture, new Vector2((float)num8, (float)num7), Microsoft.Xna.Framework.Color.White);
			for (int k = 0; k <= num20; k++)
			{
				float saturation = (float)k / (float)num20;
				Microsoft.Xna.Framework.Color color4 = Main.hslToRgb(num21, saturation, num23);
				Main.spriteBatch.Draw(Main.colorBlipTexture, new Vector2((float)(num8 + k + 5), (float)(num7 + 4)), color4);
			}
			if ((Main.mouseX > num8 - 4 && Main.mouseX < num8 + this.hueTexture.Width + 4 && Main.mouseY > num7 - 4 && Main.mouseY < num7 + this.hueTexture.Height + 4) || this.grabColorSlider == 2)
			{
				Main.spriteBatch.Draw(Main.colorHighlightTexture, new Vector2((float)num8, (float)num7), Main.OurFavoriteColor);
			}
			Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num8 + (float)(this.hueTexture.Width - 2) * Main.sBar - (float)(Main.colorSliderTexture.Width / 2), (float)(num7 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
			if (((Main.mouseX > num8 - 4 && Main.mouseX < num8 + this.hueTexture.Width + 4 && Main.mouseY > num7 - 4 && Main.mouseY < num7 + this.hueTexture.Height + 4) || this.grabColorSlider == 2) && Main.mouseLeft && !Main.blockMouse)
			{
				this.grabColorSlider = 2;
				num22 = (float)(Main.mouseX - num8);
				num22 /= (float)this.hueTexture.Width;
				if (num22 < 0f)
				{
					num22 = 0f;
				}
				if (num22 > 1f)
				{
					num22 = 1f;
				}
				Main.sBar = num22;
			}
			UILinkPointNavigator.SetPosition(2801, new Vector2((float)num8, (float)num7) + this.hueTexture.Size() / 2f);
			num7 += 26;
			Main.spriteBatch.Draw(Main.colorBarTexture, new Vector2((float)num8, (float)num7), Microsoft.Xna.Framework.Color.White);
			float num24 = 0.15f;
			for (int l = 0; l <= num20; l++)
			{
				float luminosity = (float)l / (float)num20;
				Microsoft.Xna.Framework.Color color5 = Main.hslToRgb(num21, num22, luminosity);
				Main.spriteBatch.Draw(Main.colorBlipTexture, new Vector2((float)(num8 + l + 5), (float)(num7 + 4)), color5);
			}
			if ((Main.mouseX > num8 - 4 && Main.mouseX < num8 + this.hueTexture.Width + 4 && Main.mouseY > num7 - 4 && Main.mouseY < num7 + this.hueTexture.Height + 4) || this.grabColorSlider == 3)
			{
				Main.spriteBatch.Draw(Main.colorHighlightTexture, new Vector2((float)num8, (float)num7), Main.OurFavoriteColor);
			}
			Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num8 + (float)(this.hueTexture.Width - 2) * ((Main.lBar - num24) / (1f - num24)) - (float)(Main.colorSliderTexture.Width / 2), (float)(num7 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
			if (((Main.mouseX > num8 - 4 && Main.mouseX < num8 + this.hueTexture.Width + 4 && Main.mouseY > num7 - 4 && Main.mouseY < num7 + this.hueTexture.Height + 4) || this.grabColorSlider == 3) && Main.mouseLeft && !Main.blockMouse)
			{
				this.grabColorSlider = 3;
				num23 = (float)(Main.mouseX - num8);
				num23 /= (float)this.hueTexture.Width;
				if (num23 < 0f)
				{
					num23 = 0f;
				}
				if (num23 > 1f)
				{
					num23 = 1f;
				}
				num23 = num23 * (1f - num24) + num24;
				Main.lBar = num23;
			}
			UILinkPointNavigator.SetPosition(2802, new Vector2((float)num8, (float)num7) + this.hueTexture.Size() / 2f);
			Main.selColor = Main.hslToRgb(Main.hBar, Main.sBar, Main.lBar);
			if (Main.selClothes == 0)
			{
				Main.player[Main.myPlayer].shirtColor = Main.selColor;
			}
			if (Main.selClothes == 1)
			{
				Main.player[Main.myPlayer].underShirtColor = Main.selColor;
			}
			if (Main.selClothes == 2)
			{
				Main.player[Main.myPlayer].pantsColor = Main.selColor;
			}
			if (Main.selClothes == 3)
			{
				Main.player[Main.myPlayer].shoeColor = Main.selColor;
			}
			int num25 = num9;
			int num26 = num10;
			num26 -= 8;
			for (int m = 0; m < 4; m++)
			{
				if (num11 == m)
				{
					Main.spriteBatch.Draw(Main.inventoryBack14Texture, new Vector2((float)num25, (float)num26), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				else
				{
					Main.spriteBatch.Draw(Main.inventoryBack8Texture, new Vector2((float)num25, (float)num26), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				if (Main.mouseX > num25 && Main.mouseX < num25 + Main.inventoryBackTexture.Width && Main.mouseY > num26 && Main.mouseY < num26 + Main.inventoryBackTexture.Height && Main.mouseLeft && Main.mouseLeftRelease)
				{
					Main.mouseLeftRelease = false;
					Main.selClothes = m;
					Main.PlaySound(12, -1, -1, 1, 1f, 0f);
					Main.hBar = -1f;
					Main.lBar = -1f;
					Main.sBar = -1f;
				}
				float x = (float)(num25 + Main.inventoryBackTexture.Width / 2 - Main.clothesTexture[m].Width / 2);
				float y = (float)(num26 + Main.inventoryBackTexture.Height / 2 - Main.clothesTexture[m].Height / 2);
				Microsoft.Xna.Framework.Color color6 = Microsoft.Xna.Framework.Color.White;
				if (m == 0)
				{
					color6 = Main.player[Main.myPlayer].shirtColor;
				}
				if (m == 1)
				{
					color6 = Main.player[Main.myPlayer].underShirtColor;
				}
				if (m == 2)
				{
					color6 = Main.player[Main.myPlayer].pantsColor;
				}
				if (m == 3)
				{
					color6 = Main.player[Main.myPlayer].shoeColor;
				}
				Main.spriteBatch.Draw(Main.clothesTexture[m], new Vector2(x, y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.clothesTexture[m].Width, Main.clothesTexture[m].Height)), color6, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				UILinkPointNavigator.SetPosition(2806 + m, new Vector2(x, y) + Main.clothesTexture[m].Size() * 0.75f);
				num25 += 56;
				if (m == 1)
				{
					num25 -= 112;
					num26 += 56;
				}
			}
			Main.dresserDummy.skinVariant = Main.player[Main.myPlayer].skinVariant;
			Main.dresserDummy.eyeColor = Main.player[Main.myPlayer].eyeColor;
			Main.dresserDummy.hairColor = Main.player[Main.myPlayer].hairColor;
			Main.dresserDummy.skinColor = Main.player[Main.myPlayer].skinColor;
			Main.dresserDummy.shirtColor = Main.player[Main.myPlayer].shirtColor;
			Main.dresserDummy.underShirtColor = Main.player[Main.myPlayer].underShirtColor;
			Main.dresserDummy.shoeColor = Main.player[Main.myPlayer].shoeColor;
			Main.dresserDummy.pantsColor = Main.player[Main.myPlayer].pantsColor;
			Main.dresserDummy.Bottom = Main.screenPosition + value;
			Main.dresserDummy.direction = -1;
			Main.dresserDummy.gravDir = 1f;
			Main.dresserDummy.PlayerFrame();
			Main.dresserDummy.socialIgnoreLight = true;
			Microsoft.Xna.Framework.Color c = new Microsoft.Xna.Framework.Color(46, 106, 98) * 0.6f;
			if (flag)
			{
				c = new Microsoft.Xna.Framework.Color(46, 106, 98) * 2f * 0.6f;
				if (Main.mouseLeft && Main.mouseLeftRelease)
				{
					Main.mouseLeftRelease = false;
					Main.PlaySound(12, -1, -1, 1, 1f, 0f);
					Main.CycleClothingStyle(Main.player[Main.myPlayer]);
				}
			}
			UILinkPointNavigator.SetPosition(2805, r.Center.ToVector2());
			Utils.DrawInvBG(Main.spriteBatch, r, c);
			this.DrawPlayer(Main.dresserDummy, Main.dresserDummy.position, Main.dresserDummy.fullRotation, Main.dresserDummy.fullRotationOrigin, 0f);
		}

		private void DrawInterface_Tests()
		{
		}

		private void SetupDrawInterfaceLayers()
		{
			if (!this._needToSetupDrawInterfaceLayers)
			{
				return;
			}
			this._needToSetupDrawInterfaceLayers = false;
			this._drawInterfaceLayers = new List<MethodSequenceListItem>();
			List<MethodSequenceListItem> arg_605_0 = this._drawInterfaceLayers;
			MethodSequenceListItem[] array = new MethodSequenceListItem[42];
			array[0] = new MethodSequenceListItem("Vanilla: Interface Logic 1", delegate
			{
				Main.DrawInterface_0_InterfaceLogic1();
				return true;
			}, null);
			array[1] = new MethodSequenceListItem("Vanilla: Emote Bubbles", delegate
			{
				Main.DrawInterface_1_EmoteBubbles();
				return true;
			}, null);
			array[2] = new MethodSequenceListItem("Vanilla: Smart Cursor Targets", delegate
			{
				Main.DrawInterface_2_SmartCursorTargets();
				return true;
			}, null);
			array[3] = new MethodSequenceListItem("Vanilla: Laser Ruler", delegate
			{
				Main.DrawInterface_3_LaserRuler();
				return true;
			}, null);
			array[4] = new MethodSequenceListItem("Vanilla: Ruler", delegate
			{
				Main.DrawInterface_4_Ruler();
				return true;
			}, null);
			array[5] = new MethodSequenceListItem("Vanilla: Gamepad Lock On", delegate
			{
				Main.DrawInterface_5_GamepadLockOn();
				return true;
			}, null);
			array[6] = new MethodSequenceListItem("Vanilla: Tile Grid Option", delegate
			{
				Main.DrawInterface_6_TileGridOption();
				return true;
			}, null);
			array[7] = new MethodSequenceListItem("Vanilla: Town NPC House Banners", delegate
			{
				this.DrawInterface_7_TownNPCHouseBanners();
				return true;
			}, null);
			array[8] = new MethodSequenceListItem("Vanilla: Hide UI Toggle", new Func<bool>(Main.DrawInterface_8_CheckF11UIHideToggle), null);
			array[9] = new MethodSequenceListItem("Vanilla: Wire Selection", delegate
			{
				Main.DrawInterface_9_WireSelection();
				return true;
			}, null);
			array[10] = new MethodSequenceListItem("Vanilla: Capture Manager Check", new Func<bool>(Main.DrawInterface_10_CheckCaptureManager), null);
			array[11] = new MethodSequenceListItem("Vanilla: Ingame Options", new Func<bool>(this.DrawInterface_11_IngameOptionsMenu), null);
			array[12] = new MethodSequenceListItem("Vanilla: Fancy UI", new Func<bool>(Main.DrawInterface_12_IngameFancyUI), null);
			array[13] = new MethodSequenceListItem("Vanilla: Achievement Complete Popups", delegate
			{
				Main.DrawInterface_13_AchievementCompletePopups();
				return true;
			}, null);
			array[14] = new MethodSequenceListItem("Vanilla: Entity Health Bars", delegate
			{
				this.DrawInterface_14_EntityHealthBars();
				return true;
			}, null);
			array[15] = new MethodSequenceListItem("Vanilla: Invasion Progress Bars", delegate
			{
				Main.DrawInterface_15_InvasionProgressBars();
				return true;
			}, null);
			array[16] = new MethodSequenceListItem("Vanilla: Map / Minimap", delegate
			{
				this.DrawInterface_16_MapOrMinimap();
				return true;
			}, null);
			array[17] = new MethodSequenceListItem("Vanilla: Diagnose Net", delegate
			{
				Main.DrawInterface_17_DiagnoseNet();
				return true;
			}, null);
			array[18] = new MethodSequenceListItem("Vanilla: Diagnose Video", delegate
			{
				Main.DrawInterface_18_DiagnoseVideo();
				return true;
			}, null);
			array[19] = new MethodSequenceListItem("Vanilla: Sign Tile Bubble", delegate
			{
				Main.DrawInterface_19_SignTileBubble();
				return true;
			}, null);
			array[20] = new MethodSequenceListItem("Vanilla: MP Player Names", delegate
			{
				Main.DrawInterface_20_MultiplayerPlayerNames();
				return true;
			}, null);
			array[21] = new MethodSequenceListItem("Vanilla: Hair Window", delegate
			{
				this.DrawInterface_21_HairWindow();
				return true;
			}, null);
			array[22] = new MethodSequenceListItem("Vanilla: Dresser Window", delegate
			{
				this.DrawInterface_22_DresserWindow();
				return true;
			}, null);
			array[23] = new MethodSequenceListItem("Vanilla: NPC / Sign Dialog", delegate
			{
				this.DrawInterface_23_NPCSignsDialog();
				return true;
			}, null);
			array[24] = new MethodSequenceListItem("Vanilla: Interface Logic 2", delegate
			{
				Main.DrawInterface_24_InterfaceLogic2();
				return true;
			}, null);
			array[25] = new MethodSequenceListItem("Vanilla: Resource Bars", delegate
			{
				this.DrawInterface_25_ResourceBars();
				return true;
			}, null);
			array[26] = new MethodSequenceListItem("Vanilla: Interface Logic 3", delegate
			{
				Main.DrawInterface_26_InterfaceLogic3();
				return true;
			}, null);
			array[27] = new MethodSequenceListItem("Vanilla: Inventory", delegate
			{
				this.DrawInterface_27_Inventory();
				return true;
			}, null);
			array[28] = new MethodSequenceListItem("Vanilla: Info Accessories Bar", delegate
			{
				this.DrawInterface_28_InfoAccs();
				return true;
			}, null);
			array[29] = new MethodSequenceListItem("Vanilla: Settings Button", delegate
			{
				Main.DrawInterface_29_SettingsButton();
				return true;
			}, null);
			array[30] = new MethodSequenceListItem("Vanilla: Hotbar", delegate
			{
				this.DrawInterface_30_Hotbar();
				return true;
			}, null);
			array[31] = new MethodSequenceListItem("Vanilla: Builder Accessories Bar", delegate
			{
				this.DrawInterface_31_BuilderAccToggles();
				return true;
			}, null);
			array[32] = new MethodSequenceListItem("Vanilla: Radial Hotbars", delegate
			{
				Main.DrawInterface_32_GamepadRadialHotbars();
				return true;
			}, null);
			array[33] = new MethodSequenceListItem("Vanilla: Mouse Text", delegate
			{
				this.DrawInterface_33_MouseText();
				return true;
			}, null);
			array[34] = new MethodSequenceListItem("Vanilla: Player Chat", delegate
			{
				this.DrawInterface_34_PlayerChat();
				return true;
			}, null);
			array[35] = new MethodSequenceListItem("Vanilla: Death Text", delegate
			{
				Main.DrawInterface_35_YouDied();
				return true;
			}, null);
			array[36] = new MethodSequenceListItem("Vanilla: Cursor", delegate
			{
				Main.DrawInterface_36_Cursor();
				return true;
			}, null);
			array[37] = new MethodSequenceListItem("Vanilla: Debug Stuff", delegate
			{
				Main.DrawInterface_37_DebugStuff();
				return true;
			}, null);
			array[38] = new MethodSequenceListItem("Vanilla: Mouse Item / NPC Head", delegate
			{
				this.DrawInterface_38_MouseCarriedObject();
				return true;
			}, null);
			array[39] = new MethodSequenceListItem("Vanilla: Mouse Over", delegate
			{
				this.DrawInterface_39_MouseOver();
				return true;
			}, null);
			array[40] = new MethodSequenceListItem("Vanilla: Interact Item Icon", delegate
			{
				this.DrawInterface_40_InteractItemIcon();
				return true;
			}, null);
			array[41] = new MethodSequenceListItem("Vanilla: Interface Logic 4", delegate
			{
				Main.DrawInterface_41_InterfaceLogic4();
				return true;
			}, null);
			arg_605_0.AddRange(array);
		}

		protected void DrawInterface(GameTime gameTime)
		{
			Main._drawInterfaceGameTime = gameTime;
			if (this._needToSetupDrawInterfaceLayers)
			{
				this.SetupDrawInterfaceLayers();
			}
			List<MethodSequenceListItem> list = new List<MethodSequenceListItem>(this._drawInterfaceLayers);
			foreach (MethodSequenceListItem current in list)
			{
				current.Skip = false;
			}
			MethodSequenceListItem.ExecuteSequence(list);
		}

		private static void DrawInterface_41_InterfaceLogic4()
		{
			if (Main.mouseRight)
			{
				Main.npcChatRelease = false;
			}
			else
			{
				Main.npcChatRelease = true;
			}
			Main.cursorOverride = -1;
			Main._MouseOversCanClear = true;
		}

		private void DrawInterface_40_InteractItemIcon()
		{
			int num = Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type;
			if (Main.player[Main.myPlayer].showItemIcon2 != 0)
			{
				num = Main.player[Main.myPlayer].showItemIcon2;
			}
			bool flag = Main.player[Main.myPlayer].showItemIcon && (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type > 0 || Main.player[Main.myPlayer].showItemIcon2 != 0);
			Main.ItemIconCacheVerification();
			bool flag2 = Main._itemIconCacheTime > 0 && Main.mouseItem.type < 1;
			bool flag3 = flag || flag2;
			if (flag3)
			{
				int itemIconCacheSelectedItemID = Main._itemIconCacheSelectedItemID;
				if (!flag)
				{
					Utils.Swap<int>(ref itemIconCacheSelectedItemID, ref Main.player[Main.myPlayer].showItemIcon2);
				}
				Microsoft.Xna.Framework.Color color = Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].GetAlpha(Microsoft.Xna.Framework.Color.White);
				Microsoft.Xna.Framework.Color color2 = Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].GetColor(Microsoft.Xna.Framework.Color.White);
				if (Main.player[Main.myPlayer].showItemIcon2 != 0)
				{
					color = Microsoft.Xna.Framework.Color.White;
					color2 = default(Microsoft.Xna.Framework.Color);
				}
				if (Main.player[Main.myPlayer].showItemIcon2 == 269)
				{
					color = Main.player[Main.myPlayer].shirtColor;
				}
				float scale = Main.cursorScale;
				ItemSlot.GetItemLight(ref color, num, false);
				SpriteEffects effects = SpriteEffects.None;
				if ((Main.player[Main.myPlayer].showItemIcon2 == 928 || Main.player[Main.myPlayer].showItemIcon2 == 1337 || Main.player[Main.myPlayer].showItemIcon2 == 3369) && Main.player[Main.myPlayer].showItemIconR)
				{
					effects = SpriteEffects.FlipHorizontally;
				}
				if (num > 0)
				{
					Main.spriteBatch.Draw(Main.itemTexture[num], new Vector2((float)(Main.mouseX + 10), (float)(Main.mouseY + 10)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[num].Width, Main.itemTexture[num].Height)), color, 0f, default(Vector2), scale, effects, 0f);
				}
				if (Main.player[Main.myPlayer].showItemIconText != "")
				{
					this.MouseText(Main.player[Main.myPlayer].showItemIconText, 0, 0);
				}
				if (Main.player[Main.myPlayer].showItemIcon2 == 0 && Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].color != default(Microsoft.Xna.Framework.Color))
				{
					Main.spriteBatch.Draw(Main.itemTexture[Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type], new Vector2((float)(Main.mouseX + 10), (float)(Main.mouseY + 10)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type].Width, Main.itemTexture[Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type].Height)), color2, 0f, default(Vector2), scale, SpriteEffects.None, 0f);
				}
				if (!flag)
				{
					Utils.Swap<int>(ref itemIconCacheSelectedItemID, ref Main.player[Main.myPlayer].showItemIcon2);
				}
			}
		}

		private void DrawInterface_39_MouseOver()
		{
			if (Main.ignoreErrors)
			{
				try
				{
					this.DrawMouseOver();
					return;
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
					return;
				}
			}
			this.DrawMouseOver();
		}

		private void DrawInterface_38_MouseCarriedObject()
		{
			if (Main.mouseItem.type > 0 && Main.mouseItem.stack > 0)
			{
				this.mouseNPC = -1;
				Main.player[Main.myPlayer].showItemIcon = false;
				Main.player[Main.myPlayer].showItemIcon2 = 0;
				Main.mouseText = true;
				float num = Main.inventoryScale;
				Main.inventoryScale = Main.cursorScale;
				ItemSlot.Draw(Main.spriteBatch, ref Main.mouseItem, 21, new Vector2((float)Main.mouseX, (float)Main.mouseY), default(Microsoft.Xna.Framework.Color));
				Main.inventoryScale = num;
				return;
			}
			if (this.mouseNPC > -1)
			{
				float num2 = 1f;
				num2 *= Main.cursorScale;
				Main.spriteBatch.Draw(Main.npcHeadTexture[this.mouseNPC], new Vector2((float)Main.mouseX + 26f * num2 - (float)Main.npcHeadTexture[this.mouseNPC].Width * 0.5f * num2, (float)Main.mouseY + 26f * num2 - (float)Main.npcHeadTexture[this.mouseNPC].Height * 0.5f * num2), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.npcHeadTexture[this.mouseNPC].Width, Main.npcHeadTexture[this.mouseNPC].Height)), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), num2, SpriteEffects.None, 0f);
				if (!PlayerInput.IgnoreMouseInterface)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
					Main.mouseText = false;
					if (Main.mouseRight && Main.mouseRightRelease)
					{
						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
						this.mouseNPC = -1;
					}
					if (Main.mouseLeft && Main.mouseLeftRelease)
					{
						if (this.mouseNPC == 0)
						{
							int x = (int)(((float)Main.mouseX + Main.screenPosition.X) / 16f);
							int y = (int)(((float)Main.mouseY + Main.screenPosition.Y) / 16f);
							if (Main.player[Main.myPlayer].gravDir == -1f)
							{
								y = (int)((Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY) / 16f);
							}
							int n = -1;
							if (WorldGen.MoveNPC(x, y, n))
							{
								Main.NewText(Lang.inter[39], 255, 240, 20, false);
								return;
							}
						}
						else
						{
							int num3 = 0;
							for (int i = 0; i < 200; i++)
							{
								if (Main.npc[i].active && Main.npc[i].type == NPC.HeadIndexToType(this.mouseNPC))
								{
									num3 = i;
									break;
								}
							}
							if (num3 >= 0)
							{
								int x2 = (int)(((float)Main.mouseX + Main.screenPosition.X) / 16f);
								int y2 = (int)(((float)Main.mouseY + Main.screenPosition.Y) / 16f);
								if (WorldGen.MoveNPC(x2, y2, num3))
								{
									this.mouseNPC = -1;
									WorldGen.moveRoom(x2, y2, num3);
									Main.PlaySound(12, -1, -1, 1, 1f, 0f);
									return;
								}
							}
							else
							{
								this.mouseNPC = 0;
							}
						}
					}
				}
			}
		}

		private static void DrawInterface_37_DebugStuff()
		{
		}

		private static void DrawInterface_36_Cursor()
		{
			if (Main.cursorOverride != -1)
			{
				Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color((int)((float)Main.cursorColor.R * 0.2f), (int)((float)Main.cursorColor.G * 0.2f), (int)((float)Main.cursorColor.B * 0.2f), (int)((float)Main.cursorColor.A * 0.5f));
				Microsoft.Xna.Framework.Color white = Main.cursorColor;
				bool flag = true;
				bool flag2 = true;
				float rotation = 0f;
				Vector2 value = default(Vector2);
				float num = 1f;
				if (Main.cursorOverride == 2)
				{
					flag = false;
					white = Microsoft.Xna.Framework.Color.White;
					num = 0.7f;
					value = new Vector2(0.1f);
				}
				switch (Main.cursorOverride)
				{
				case 2:
					flag = false;
					white = Microsoft.Xna.Framework.Color.White;
					num = 0.7f;
					value = new Vector2(0.1f);
					break;
				case 3:
				case 6:
				case 7:
				case 8:
				case 9:
				case 10:
					flag = false;
					white = Microsoft.Xna.Framework.Color.White;
					break;
				}
				if (flag)
				{
					Main.spriteBatch.Draw(Main.cursorTextures[Main.cursorOverride], new Vector2((float)(Main.mouseX + 1), (float)(Main.mouseY + 1)), null, color, rotation, value * Main.cursorTextures[Main.cursorOverride].Size(), Main.cursorScale * 1.1f * num, SpriteEffects.None, 0f);
				}
				if (flag2)
				{
					Main.spriteBatch.Draw(Main.cursorTextures[Main.cursorOverride], new Vector2((float)Main.mouseX, (float)Main.mouseY), null, white, rotation, value * Main.cursorTextures[Main.cursorOverride].Size(), Main.cursorScale * num, SpriteEffects.None, 0f);
					return;
				}
			}
			else
			{
				if (Main.SmartCursorEnabled)
				{
					Vector2 bonus = Main.DrawThickCursor(true);
					Main.DrawCursor(bonus, true);
					return;
				}
				Vector2 bonus2 = Main.DrawThickCursor(false);
				Main.DrawCursor(bonus2, false);
			}
		}

		private static void DrawInterface_35_YouDied()
		{
			if (Main.player[Main.myPlayer].dead)
			{
				string text = Lang.inter[38];
				Main.spriteBatch.DrawString(Main.fontDeathText, text, new Vector2((float)(Main.screenWidth / 2) - Main.fontDeathText.MeasureString(text).X / 2f, (float)(Main.screenHeight / 2 - 20)), Main.player[Main.myPlayer].GetDeathAlpha(Microsoft.Xna.Framework.Color.Transparent), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				if (Main.player[Main.myPlayer].lostCoins > 0)
				{
					string textValue = Language.GetTextValue("Game.DroppedCoins", Main.player[Main.myPlayer].lostCoinString);
					Main.spriteBatch.DrawString(Main.fontMouseText, textValue, new Vector2((float)(Main.screenWidth / 2) - Main.fontMouseText.MeasureString(textValue).X / 2f, (float)(Main.screenHeight / 2 + 30)), Main.player[Main.myPlayer].GetDeathAlpha(Microsoft.Xna.Framework.Color.Transparent), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
			}
		}

		private void DrawInterface_34_PlayerChat()
		{
			if (Main.ignoreErrors)
			{
				try
				{
					this.DrawPlayerChat();
					return;
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
					return;
				}
			}
			this.DrawPlayerChat();
		}

		private void DrawInterface_33_MouseText()
		{
			if (Main.mouseItem.stack <= 0)
			{
				Main.mouseItem.type = 0;
			}
			if (Main.hoverItemName != null && Main.hoverItemName != "" && Main.mouseItem.type == 0)
			{
				Main.player[Main.myPlayer].showItemIcon = false;
				this.MouseText(Main.hoverItemName, Main.rare, 0);
				Main.mouseText = true;
			}
		}

		private static void DrawInterface_32_GamepadRadialHotbars()
		{
			ItemSlot.DrawRadialCircular(Main.spriteBatch, new Vector2((float)Main.screenWidth, (float)Main.screenHeight) / 2f);
			ItemSlot.DrawRadialQuicks(Main.spriteBatch, new Vector2((float)Main.screenWidth, (float)Main.screenHeight) / 2f);
		}

		private void DrawInterface_31_BuilderAccToggles()
		{
			this.DrawBuilderAccToggles(new Vector2(10f, 77f));
		}

		private static void DrawInterface_29_SettingsButton()
		{
			if (Main.playerInventory || Main.player[Main.myPlayer].ghost)
			{
				string text = Lang.inter[62];
				Vector2 vector = Main.fontMouseText.MeasureString("Settings");
				Vector2 vector2 = Main.fontMouseText.MeasureString(Lang.inter[62]);
				Vector2 vector3 = Main.fontDeathText.MeasureString(text);
				int num = Main.screenWidth - 110;
				int num2 = Main.screenHeight - 20;
				if (Main.screenHeight < 650 || (Main.screenHeight < 900 && Main.mapStyle == 1))
				{
					num -= 140;
				}
				float num3 = vector.X / vector2.X;
				if (Main.mouseExit)
				{
					if ((double)Main.exitScale < 0.96)
					{
						Main.exitScale += 0.02f;
					}
				}
				else if ((double)Main.exitScale > 0.8)
				{
					Main.exitScale -= 0.02f;
				}
				UILinkPointNavigator.SetPosition(308, new Vector2((float)num, (float)num2));
				for (int i = 0; i < 5; i++)
				{
					int num4 = 0;
					int num5 = 0;
					Microsoft.Xna.Framework.Color color = Microsoft.Xna.Framework.Color.Black;
					if (i == 0)
					{
						num4 = -2;
					}
					if (i == 1)
					{
						num4 = 2;
					}
					if (i == 2)
					{
						num5 = -2;
					}
					if (i == 3)
					{
						num5 = 2;
					}
					if (i == 4)
					{
						color = Microsoft.Xna.Framework.Color.White;
					}
					Main.spriteBatch.DrawString(Main.fontDeathText, text, new Vector2((float)(num + num4), (float)(num2 + num5)), color, 0f, new Vector2(vector3.X / 2f, vector3.Y / 2f), (Main.exitScale - 0.2f) * num3, SpriteEffects.None, 0f);
				}
				if ((float)Main.mouseX > (float)num - vector3.X / 2f && (float)Main.mouseX < (float)num + vector3.X / 2f && (float)Main.mouseY > (float)num2 - vector3.Y / 2f && (float)Main.mouseY < (float)num2 + vector3.Y / 2f - 10f)
				{
					if (!PlayerInput.IgnoreMouseInterface)
					{
						if (!Main.mouseExit)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
						}
						Main.mouseExit = true;
						Main.player[Main.myPlayer].mouseInterface = true;
						if (Main.mouseLeftRelease && Main.mouseLeft)
						{
							Main.mouseExit = false;
							Main.exitScale = 0.8f;
							IngameOptions.Open();
							return;
						}
					}
				}
				else
				{
					Main.mouseExit = false;
				}
			}
		}

		private void DrawInterface_28_InfoAccs()
		{
			this.DrawInfoAccs();
		}

		private void DrawInterface_27_Inventory()
		{
			if (Main.playerInventory)
			{
				if (Main.ignoreErrors)
				{
					try
					{
						this.DrawInventory();
						return;
					}
					catch (Exception e)
					{
						TimeLogger.DrawException(e);
						return;
					}
				}
				this.DrawInventory();
				return;
			}
			Main.recFastScroll = true;
			this.mouseNPC = -1;
			Main.EquipPage = 0;
		}

		private static void DrawInterface_26_InterfaceLogic3()
		{
			if (Main.player[Main.myPlayer].dead)
			{
				Main.playerInventory = false;
			}
			if (!Main.playerInventory)
			{
				Main.player[Main.myPlayer].chest = -1;
				if (Main.InGuideCraftMenu)
				{
					Main.InGuideCraftMenu = false;
				}
				Recipe.FindRecipes();
				Main.InReforgeMenu = false;
			}
			Main.hoverItemName = "";
		}

		private void DrawInterface_25_ResourceBars()
		{
			this.GUIBarsDraw();
		}

		private static void DrawInterface_24_InterfaceLogic2()
		{
			Main.invAlpha += Main.invDir * 0.2f;
			if (Main.invAlpha > 240f)
			{
				Main.invAlpha = 240f;
				Main.invDir = -1f;
			}
			if (Main.invAlpha < 180f)
			{
				Main.invAlpha = 180f;
				Main.invDir = 1f;
			}
			Main.inventoryBack = new Microsoft.Xna.Framework.Color((int)((byte)Main.invAlpha), (int)((byte)Main.invAlpha), (int)((byte)Main.invAlpha), (int)((byte)Main.invAlpha));
			Main.mouseText = false;
			Main.rare = 0;
		}

		private void DrawInterface_23_NPCSignsDialog()
		{
			this.GUIChatDraw();
		}

		private void DrawInterface_22_DresserWindow()
		{
			if (Main.clothesWindow)
			{
				this.DrawClothesWindow();
			}
		}

		private void DrawInterface_21_HairWindow()
		{
			if (Main.hairWindow)
			{
				this.DrawHairWindow();
			}
		}

		private static void DrawInterface_20_MultiplayerPlayerNames()
		{
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active && Main.myPlayer != i && !Main.player[i].dead)
				{
					new Microsoft.Xna.Framework.Rectangle((int)((double)Main.player[i].position.X + (double)Main.player[i].width * 0.5 - 16.0), (int)(Main.player[i].position.Y + (float)Main.player[i].height - 48f), 32, 48);
					if (Main.player[Main.myPlayer].team > 0 && Main.player[Main.myPlayer].team == Main.player[i].team)
					{
						new Microsoft.Xna.Framework.Rectangle((int)Main.screenPosition.X, (int)Main.screenPosition.Y, Main.screenWidth, Main.screenHeight);
						string text = Main.player[i].name;
						if (Main.player[i].statLife < Main.player[i].statLifeMax2)
						{
							object obj = text;
							text = string.Concat(new object[]
							{
								obj,
								": ",
								Main.player[i].statLife,
								"/",
								Main.player[i].statLifeMax2
							});
						}
						Vector2 position = Main.fontMouseText.MeasureString(text);
						float num = 0f;
						if (Main.player[i].chatOverhead.timeLeft > 0)
						{
							num = -position.Y;
						}
						float num2 = 0f;
						float num3 = (float)Main.mouseTextColor / 255f;
						Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color((int)((byte)((float)Main.teamColor[Main.player[i].team].R * num3)), (int)((byte)((float)Main.teamColor[Main.player[i].team].G * num3)), (int)((byte)((float)Main.teamColor[Main.player[i].team].B * num3)), (int)Main.mouseTextColor);
						Vector2 vector = new Vector2((float)(Main.screenWidth / 2) + Main.screenPosition.X, (float)(Main.screenHeight / 2) + Main.screenPosition.Y);
						float num4 = Main.player[i].position.X + (float)(Main.player[i].width / 2) - vector.X;
						float num5 = Main.player[i].position.Y - position.Y - 2f + num - vector.Y;
						float num6 = (float)Math.Sqrt((double)(num4 * num4 + num5 * num5));
						int num7 = Main.screenHeight;
						if (Main.screenHeight > Main.screenWidth)
						{
							num7 = Main.screenWidth;
						}
						num7 = num7 / 2 - 30;
						if (num7 < 100)
						{
							num7 = 100;
						}
						if (num6 < (float)num7)
						{
							position.X = Main.player[i].position.X + (float)(Main.player[i].width / 2) - position.X / 2f - Main.screenPosition.X;
							position.Y = Main.player[i].position.Y - position.Y - 2f + num - Main.screenPosition.Y;
						}
						else
						{
							num2 = num6;
							num6 = (float)num7 / num6;
							position.X = (float)(Main.screenWidth / 2) + num4 * num6 - position.X / 2f;
							position.Y = (float)(Main.screenHeight / 2) + num5 * num6;
						}
						if (Main.player[Main.myPlayer].gravDir == -1f)
						{
							position.Y = (float)Main.screenHeight - position.Y;
						}
						if (num2 > 0f)
						{
							string textValue = Language.GetTextValue("GameUI.PlayerDistance", (int)(num2 / 16f * 2f));
							Vector2 position2 = Main.fontMouseText.MeasureString(textValue);
							position2.X = position.X + Main.fontMouseText.MeasureString(text).X / 2f - position2.X / 2f;
							position2.Y = position.Y + Main.fontMouseText.MeasureString(text).Y / 2f - position2.Y / 2f - 20f;
							Main.spriteBatch.DrawString(Main.fontMouseText, textValue, new Vector2(position2.X - 2f, position2.Y), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							Main.spriteBatch.DrawString(Main.fontMouseText, textValue, new Vector2(position2.X + 2f, position2.Y), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							Main.spriteBatch.DrawString(Main.fontMouseText, textValue, new Vector2(position2.X, position2.Y - 2f), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							Main.spriteBatch.DrawString(Main.fontMouseText, textValue, new Vector2(position2.X, position2.Y + 2f), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							Main.spriteBatch.DrawString(Main.fontMouseText, textValue, position2, color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						}
						Main.spriteBatch.DrawString(Main.fontMouseText, text, new Vector2(position.X - 2f, position.Y), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						Main.spriteBatch.DrawString(Main.fontMouseText, text, new Vector2(position.X + 2f, position.Y), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						Main.spriteBatch.DrawString(Main.fontMouseText, text, new Vector2(position.X, position.Y - 2f), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						Main.spriteBatch.DrawString(Main.fontMouseText, text, new Vector2(position.X, position.Y + 2f), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						Main.spriteBatch.DrawString(Main.fontMouseText, text, position, color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
				}
			}
		}

		private static void DrawInterface_19_SignTileBubble()
		{
			if (Main.signBubble)
			{
				int num = (int)((float)Main.signX - Main.screenPosition.X);
				int num2 = (int)((float)Main.signY - Main.screenPosition.Y);
				if (Main.player[Main.myPlayer].gravDir == -1f)
				{
					num2 = Main.screenHeight - (int)((float)Main.signY - Main.screenPosition.Y) - 32;
				}
				SpriteEffects effects = SpriteEffects.None;
				if ((float)Main.signX > Main.player[Main.myPlayer].position.X + (float)Main.player[Main.myPlayer].width)
				{
					effects = SpriteEffects.FlipHorizontally;
					num += -8 - Main.chat2Texture.Width;
				}
				else
				{
					num += 8;
				}
				num2 -= 22;
				Main.spriteBatch.Draw(Main.chat2Texture, new Vector2((float)num, (float)num2), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chat2Texture.Width, Main.chat2Texture.Height)), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, effects, 0f);
				Main.signBubble = false;
			}
		}

		private static void DrawInterface_18_DiagnoseVideo()
		{
			if (Main.drawDiag)
			{
				if (PlayerInput.UsingGamepad)
				{
					for (int i = 0; i < 2; i++)
					{
						string text = "";
						int num = 20;
						int num2 = 160;
						num2 += i * 16;
						if (i == 0)
						{
							text = "Gamepad Left Thumbstick  : " + string.Format("{0,-10} ,   {1,-10}", PlayerInput.GamepadThumbstickLeft.X.ToString("P2"), PlayerInput.GamepadThumbstickLeft.Y.ToString("P2"));
						}
						if (i == 1)
						{
							text = "Gamepad Right Thumbstick: " + string.Format("{0,-10} ,   {1,-10}", PlayerInput.GamepadThumbstickRight.X.ToString("P2"), PlayerInput.GamepadThumbstickRight.Y.ToString("P2"));
						}
						Main.spriteBatch.DrawString(Main.fontMouseText, text, new Vector2((float)num, (float)num2), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
				}
				for (int j = 0; j < 7; j++)
				{
					string text2 = "";
					int num3 = 20;
					int num4 = 220;
					num4 += j * 16;
					if (j == 0)
					{
						text2 = "Solid Tiles:";
					}
					if (j == 1)
					{
						text2 = "Misc. Tiles:";
					}
					if (j == 2)
					{
						text2 = "Walls Tiles:";
					}
					if (j == 3)
					{
						text2 = "Background Tiles:";
					}
					if (j == 4)
					{
						text2 = "Water Tiles:";
					}
					if (j == 5)
					{
						text2 = "Black Tiles:";
					}
					if (j == 6)
					{
						text2 = "Total Render:";
					}
					Main.spriteBatch.DrawString(Main.fontMouseText, text2, new Vector2((float)num3, (float)num4), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				for (int k = 0; k < 7; k++)
				{
					int num5 = 180;
					int num6 = 220;
					num6 += k * 16;
					float drawTotal;
					if (k == 6)
					{
						drawTotal = TimeLogger.GetDrawTotal();
					}
					else
					{
						drawTotal = TimeLogger.GetDrawTime(k);
					}
					string text3 = string.Format("{0:F2}ms", drawTotal);
					Main.spriteBatch.DrawString(Main.fontMouseText, text3, new Vector2((float)num5, (float)num6), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				for (int l = 0; l < 6; l++)
				{
					string text4 = "";
					int num7 = 20;
					int num8 = 346;
					num8 += l * 16;
					if (l == 0)
					{
						text4 = "Lighting Init:";
					}
					if (l == 1)
					{
						text4 = "Lighting Phase #1:";
					}
					if (l == 2)
					{
						text4 = "Lighting Phase #2:";
					}
					if (l == 3)
					{
						text4 = "Lighting Phase #3";
					}
					if (l == 4)
					{
						text4 = "Lighting Phase #4";
					}
					if (l == 5)
					{
						text4 = "Total Lighting:";
					}
					Main.spriteBatch.DrawString(Main.fontMouseText, text4, new Vector2((float)num7, (float)num8), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				for (int m = 0; m < 6; m++)
				{
					int num9 = 180;
					int num10 = 346;
					num10 += m * 16;
					float num11;
					if (m == 5)
					{
						num11 = TimeLogger.GetLightingTotal();
					}
					else
					{
						num11 = TimeLogger.GetLightingTime(m);
					}
					string text5 = string.Format("{0:F2}ms", num11);
					Main.spriteBatch.DrawString(Main.fontMouseText, text5, new Vector2((float)num9, (float)num10), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				int num12 = 5;
				for (int n = 0; n < num12; n++)
				{
					int num13 = 20;
					int num14 = 456;
					num14 += n * 16;
					string text6 = "Render #" + n + ":";
					Main.spriteBatch.DrawString(Main.fontMouseText, text6, new Vector2((float)num13, (float)num14), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				for (int num15 = 0; num15 < num12; num15++)
				{
					int num16 = 180;
					int num17 = 456;
					num17 += num15 * 16;
					string text7 = string.Format("{0:F2}ms", TimeLogger.GetRenderTime(num15));
					Main.spriteBatch.DrawString(Main.fontMouseText, text7, new Vector2((float)num16, (float)num17), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				for (int num18 = 0; num18 < num12; num18++)
				{
					int num19 = 230;
					int num20 = 456;
					num20 += num18 * 16;
					num19 += 10;
					string text8 = string.Format("{0:F2}ms", TimeLogger.GetRenderMax(num18));
					Main.spriteBatch.DrawString(Main.fontMouseText, text8, new Vector2((float)num19, (float)num20), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				int num21 = 20;
				int num22 = 456 + 16 * num12 + 16;
				string text9 = "Update:";
				Main.spriteBatch.DrawString(Main.fontMouseText, text9, new Vector2((float)num21, (float)num22), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				num21 = 180;
				text9 = string.Format("{0:F2}ms", Main.upTimer);
				Main.spriteBatch.DrawString(Main.fontMouseText, text9, new Vector2((float)num21, (float)num22), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				num21 = 240;
				text9 = string.Format("{0:F2}ms", Main.upTimerMax);
				Main.spriteBatch.DrawString(Main.fontMouseText, text9, new Vector2((float)num21, (float)num22), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
		}

		private static void DrawInterface_17_DiagnoseNet()
		{
			if (Main.netDiag)
			{
				for (int i = 0; i < 4; i++)
				{
					string text = "";
					int num = 20;
					int num2 = 220;
					if (i == 0)
					{
						text = "RX Msgs: " + string.Format("{0:0,0}", Main.rxMsg);
						num2 += i * 20;
					}
					else if (i == 1)
					{
						text = "RX Bytes: " + string.Format("{0:0,0}", Main.rxData);
						num2 += i * 20;
					}
					else if (i == 2)
					{
						text = "TX Msgs: " + string.Format("{0:0,0}", Main.txMsg);
						num2 += i * 20;
					}
					else if (i == 3)
					{
						text = "TX Bytes: " + string.Format("{0:0,0}", Main.txData);
						num2 += i * 20;
					}
					Main.spriteBatch.DrawString(Main.fontMouseText, text, new Vector2((float)num, (float)num2), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				for (int j = 0; j < Main.maxMsg; j++)
				{
					float scale = 0.7f;
					int num3 = 200;
					int num4 = 120;
					int num5 = j / 50;
					num3 += num5 * 400;
					num4 += (j - num5 * 50) * 13;
					string text2 = j + ": ";
					Main.spriteBatch.DrawString(Main.fontMouseText, text2, new Vector2((float)num3, (float)num4), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), scale, SpriteEffects.None, 0f);
					num3 += 30;
					text2 = "rx:" + string.Format("{0:0,0}", Main.rxMsgType[j]);
					Main.spriteBatch.DrawString(Main.fontMouseText, text2, new Vector2((float)num3, (float)num4), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), scale, SpriteEffects.None, 0f);
					num3 += 70;
					text2 = string.Format("{0:0,0}", Main.rxDataType[j]);
					Main.spriteBatch.DrawString(Main.fontMouseText, text2, new Vector2((float)num3, (float)num4), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), scale, SpriteEffects.None, 0f);
					num3 += 70;
					text2 = j + ": ";
					Main.spriteBatch.DrawString(Main.fontMouseText, text2, new Vector2((float)num3, (float)num4), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), scale, SpriteEffects.None, 0f);
					num3 += 30;
					text2 = "tx:" + string.Format("{0:0,0}", Main.txMsgType[j]);
					Main.spriteBatch.DrawString(Main.fontMouseText, text2, new Vector2((float)num3, (float)num4), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), scale, SpriteEffects.None, 0f);
					num3 += 70;
					text2 = string.Format("{0:0,0}", Main.txDataType[j]);
					Main.spriteBatch.DrawString(Main.fontMouseText, text2, new Vector2((float)num3, (float)num4), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), scale, SpriteEffects.None, 0f);
				}
			}
		}

		private void DrawInterface_16_MapOrMinimap()
		{
			Main.mH = 0;
			if (Main.mapEnabled)
			{
				if (!Main.mapFullscreen && Main.mapStyle == 1)
				{
					Main.mH = 256;
					if (Main.ignoreErrors)
					{
						try
						{
							this.DrawMap();
							goto IL_44;
						}
						catch (Exception e)
						{
							TimeLogger.DrawException(e);
							goto IL_44;
						}
					}
					this.DrawMap();
				}
				IL_44:
				if (Main.mH + 600 > Main.screenHeight)
				{
					Main.mH = Main.screenHeight - 600;
				}
			}
		}

		private static void DrawInterface_15_InvasionProgressBars()
		{
			Main.DrawInvasionProgress();
		}

		private void DrawInterface_14_EntityHealthBars()
		{
			if (Main.HealthBarDrawSettings != 0)
			{
				bool flag = false;
				for (int i = 199; i >= 0; i--)
				{
					if (Main.npc[i].active && Main.npc[i].type > 0)
					{
						Main.npc[i].position += Main.npc[i].visualOffset;
						if (Main.npc[i].life != Main.npc[i].lifeMax && !Main.npc[i].dontTakeDamage)
						{
							float scale = 1f;
							int type = Main.npc[i].type;
							if (type == 4)
							{
								scale = 1.5f;
							}
							if (type == 35)
							{
								scale = 1.5f;
							}
							if (type == 36)
							{
								scale = 1.5f;
							}
							if (type == 50)
							{
								scale = 1.5f;
							}
							if (type == 113)
							{
								scale = 1.5f;
							}
							if (type == 114)
							{
								scale = 1.5f;
							}
							if (type == 125)
							{
								scale = 1.5f;
							}
							if (type == 126)
							{
								scale = 1.5f;
							}
							if (type == 127)
							{
								scale = 1.5f;
							}
							if (type == 128)
							{
								scale = 1.5f;
							}
							if (type == 129)
							{
								scale = 1.5f;
							}
							if (type == 130)
							{
								scale = 1.5f;
							}
							if (type == 131)
							{
								scale = 1.5f;
							}
							if (type == 222)
							{
								scale = 1.5f;
							}
							if (type >= 245 && type <= 249)
							{
								scale = 1.5f;
							}
							if (type == 262)
							{
								scale = 1.5f;
							}
							if (type == 266)
							{
								scale = 1.5f;
							}
							if (type == 564 || type == 565 || type == 551 || type == 576 || type == 577)
							{
								scale = 1.5f;
							}
							if (type == 87)
							{
								scale = 1.5f;
							}
							if (type == 510 || type == 454)
							{
								scale = 1.5f;
							}
							if (type == 439 || type == 370)
							{
								scale = 1.5f;
							}
							if ((!Main.expertMode || type != 266) && ((type != 439 && type != 440) || Main.npc[i].ai[0] != 5f))
							{
								if (type >= 134 && type <= 136)
								{
									scale = 1.5f;
									if (!flag)
									{
										flag = true;
										Vector2 value = default(Vector2);
										float num = 999999f;
										for (int j = 0; j < 200; j++)
										{
											if (Main.npc[j].active && Main.npc[j].type >= 134 && Main.npc[j].type <= 136)
											{
												Vector2 vector = Main.player[Main.myPlayer].Center - Main.npc[j].Center;
												if (vector.Length() < num && Collision.CanHit(Main.player[Main.myPlayer].Center, 1, 1, Main.npc[j].Center, 1, 1))
												{
													num = vector.Length();
													value = Main.npc[j].position;
												}
											}
										}
										if (num < (float)Main.screenWidth)
										{
											if (Main.destroyerHB.X < 100f && Main.destroyerHB.Y < 100f)
											{
												Main.destroyerHB = value;
											}
											else
											{
												Main.destroyerHB = (Main.destroyerHB * 49f + value) / 50f;
											}
											value = Main.destroyerHB;
											int num2 = i;
											if (type != 134 && Main.npc[i].realLife != -1)
											{
												num2 = Main.npc[i].realLife;
											}
											float num3 = Lighting.Brightness((int)((Main.npc[i].position.X + (float)(Main.npc[i].width / 2)) / 16f), (int)((Main.npc[i].position.Y + (float)(Main.npc[i].height / 2) + Main.npc[i].gfxOffY) / 16f));
											num3 = (num3 + 1f) / 2f;
											this.DrawHealthBar(value.X + (float)(Main.npc[i].width / 2), value.Y + (float)(Main.npc[i].height / 2), Main.npc[num2].life, Main.npc[num2].lifeMax, num3, scale);
										}
										else
										{
											Main.destroyerHB = new Vector2(0f, 0f);
										}
									}
								}
								else if (type == 7)
								{
									Vector2 value2 = Main.npc[i].position;
									int num4 = -1;
									for (int k = 0; k < 200; k++)
									{
										if (Main.npc[k].active && Main.npc[k].type == 9)
										{
											num4 = k;
										}
									}
									if (num4 >= 0)
									{
										value2 += Main.npc[num4].position;
										value2 /= 2f;
										this.DrawHealthBar(value2.X + (float)(Main.npc[i].width / 2), value2.Y + (float)(Main.npc[i].height / 2), Main.npc[i].life, Main.npc[i].lifeMax, Lighting.Brightness((int)((Main.npc[i].position.X + (float)(Main.npc[i].width / 2)) / 16f), (int)((Main.npc[i].position.Y + (float)(Main.npc[i].height / 2) + Main.npc[i].gfxOffY) / 16f)), scale);
									}
								}
								else if (type != 8 && type != 9)
								{
									if (type == 95)
									{
										Vector2 value3 = Main.npc[i].position;
										int num5 = -1;
										for (int l = 0; l < 200; l++)
										{
											if (Main.npc[l].active && Main.npc[l].type == 97)
											{
												num5 = l;
											}
										}
										if (num5 >= 0)
										{
											value3 += Main.npc[num5].position;
											value3 /= 2f;
											this.DrawHealthBar(value3.X + (float)(Main.npc[i].width / 2), value3.Y + (float)(Main.npc[i].height / 2), Main.npc[i].life, Main.npc[i].lifeMax, Lighting.Brightness((int)((Main.npc[i].position.X + (float)(Main.npc[i].width / 2)) / 16f), (int)((Main.npc[i].position.Y + (float)(Main.npc[i].height / 2) + Main.npc[i].gfxOffY) / 16f)), scale);
										}
									}
									else if (type != 96 && type != 97)
									{
										if (type == 10)
										{
											Vector2 value4 = Main.npc[i].position;
											int num6 = -1;
											for (int m = 0; m < 200; m++)
											{
												if (Main.npc[m].active && Main.npc[m].type == 12)
												{
													num6 = m;
												}
											}
											if (num6 >= 0)
											{
												value4 += Main.npc[num6].position;
												value4 /= 2f;
												this.DrawHealthBar(value4.X + (float)(Main.npc[i].width / 2), value4.Y + (float)(Main.npc[i].height / 2), Main.npc[i].life, Main.npc[i].lifeMax, Lighting.Brightness((int)((Main.npc[i].position.X + (float)(Main.npc[i].width / 2)) / 16f), (int)((Main.npc[i].position.Y + (float)(Main.npc[i].height / 2) + Main.npc[i].gfxOffY) / 16f)), scale);
											}
										}
										else if (type != 11 && type != 12)
										{
											if (type == 87)
											{
												Vector2 value5 = Main.npc[i].position;
												int num7 = -1;
												for (int n = 0; n < 200; n++)
												{
													if (Main.npc[n].active && Main.npc[n].type == 92)
													{
														num7 = n;
													}
												}
												if (num7 >= 0)
												{
													value5 += Main.npc[num7].position;
													value5 /= 2f;
													this.DrawHealthBar(value5.X + (float)(Main.npc[i].width / 2), value5.Y + (float)(Main.npc[i].height / 2), Main.npc[i].life, Main.npc[i].lifeMax, Lighting.Brightness((int)((Main.npc[i].position.X + (float)(Main.npc[i].width / 2)) / 16f), (int)((Main.npc[i].position.Y + (float)(Main.npc[i].height / 2) + Main.npc[i].gfxOffY) / 16f)), scale);
												}
											}
											else if (type == 412)
											{
												Vector2 value6 = Main.npc[i].position;
												int num8 = i;
												while (num8 > 0 && num8 < 200 && Main.npc[num8].ai[0] > 0f)
												{
													num8 = (int)Main.npc[num8].ai[0];
												}
												if (num8 >= 0)
												{
													value6 += Main.npc[num8].position;
													value6 /= 2f;
													this.DrawHealthBar(value6.X + (float)(Main.npc[i].width / 2), value6.Y + (float)(Main.npc[i].height / 2), Main.npc[i].life, Main.npc[i].lifeMax, Lighting.Brightness((int)((Main.npc[i].position.X + (float)(Main.npc[i].width / 2)) / 16f), (int)((Main.npc[i].position.Y + (float)(Main.npc[i].height / 2) + Main.npc[i].gfxOffY) / 16f)), scale);
												}
											}
											else if (type != 414 && type != 413 && (type < 88 || type > 92))
											{
												if (type == 39)
												{
													Vector2 value7 = Main.npc[i].position;
													int num9 = -1;
													for (int num10 = 0; num10 < 200; num10++)
													{
														if (Main.npc[num10].active && Main.npc[num10].type == 41)
														{
															num9 = num10;
														}
													}
													if (num9 >= 0)
													{
														value7 += Main.npc[num9].position;
														value7 /= 2f;
														this.DrawHealthBar(value7.X + (float)(Main.npc[i].width / 2), value7.Y + (float)(Main.npc[i].height / 2), Main.npc[i].life, Main.npc[i].lifeMax, Lighting.Brightness((int)((Main.npc[i].position.X + (float)(Main.npc[i].width / 2)) / 16f), (int)((Main.npc[i].position.Y + (float)(Main.npc[i].height / 2) + Main.npc[i].gfxOffY) / 16f)), scale);
													}
												}
												else if (type != 40 && type != 41)
												{
													if (type == 98)
													{
														Vector2 value8 = Main.npc[i].position;
														int num11 = -1;
														for (int num12 = 0; num12 < 200; num12++)
														{
															if (Main.npc[num12].active && Main.npc[num12].type == 100)
															{
																num11 = num12;
															}
														}
														if (num11 >= 0)
														{
															value8 += Main.npc[num11].position;
															value8 /= 2f;
															this.DrawHealthBar(value8.X + (float)(Main.npc[i].width / 2), value8.Y + (float)(Main.npc[i].height / 2), Main.npc[i].life, Main.npc[i].lifeMax, Lighting.Brightness((int)((Main.npc[i].position.X + (float)(Main.npc[i].width / 2)) / 16f), (int)((Main.npc[i].position.Y + (float)(Main.npc[i].height / 2) + Main.npc[i].gfxOffY) / 16f)), scale);
														}
													}
													else if (type != 99 && type != 100)
													{
														if (type == 454)
														{
															Vector2 value9 = Main.npc[i].position;
															int num13 = -1;
															for (int num14 = 0; num14 < 200; num14++)
															{
																if (Main.npc[num14].active && Main.npc[num14].type == 459)
																{
																	num13 = num14;
																}
															}
															if (num13 >= 0)
															{
																value9 += Main.npc[num13].position;
																value9 /= 2f;
																this.DrawHealthBar(value9.X + (float)(Main.npc[i].width / 2), value9.Y + (float)(Main.npc[i].height / 2), Main.npc[i].life, Main.npc[i].lifeMax, Lighting.Brightness((int)((Main.npc[i].position.X + (float)(Main.npc[i].width / 2)) / 16f), (int)((Main.npc[i].position.Y + (float)(Main.npc[i].height / 2) + Main.npc[i].gfxOffY) / 16f)), scale);
															}
														}
														else if (type < 455 || type > 459)
														{
															if (type == 510)
															{
																Vector2 value10 = Main.npc[i].position;
																int num15 = -1;
																for (int num16 = 0; num16 < 200; num16++)
																{
																	if (Main.npc[num16].active && Main.npc[num16].type == 512)
																	{
																		num15 = num16;
																	}
																}
																if (num15 >= 0)
																{
																	value10 += Main.npc[num15].position;
																	value10 /= 2f;
																	this.DrawHealthBar(value10.X + (float)(Main.npc[i].width / 2), value10.Y + (float)(Main.npc[i].height / 2), Main.npc[i].life, Main.npc[i].lifeMax, Lighting.Brightness((int)((Main.npc[i].position.X + (float)(Main.npc[i].width / 2)) / 16f), (int)((Main.npc[i].position.Y + (float)(Main.npc[i].height / 2) + Main.npc[i].gfxOffY) / 16f)), scale);
																}
															}
															else if (type != 511 && type != 512)
															{
																if (type == 513)
																{
																	Vector2 value11 = Main.npc[i].position;
																	int num17 = -1;
																	for (int num18 = 0; num18 < 200; num18++)
																	{
																		if (Main.npc[num18].active && Main.npc[num18].type == 515)
																		{
																			num17 = num18;
																		}
																	}
																	if (num17 >= 0)
																	{
																		value11 += Main.npc[num17].position;
																		value11 /= 2f;
																		this.DrawHealthBar(value11.X + (float)(Main.npc[i].width / 2), value11.Y + (float)(Main.npc[i].height / 2), Main.npc[i].life, Main.npc[i].lifeMax, Lighting.Brightness((int)((Main.npc[i].position.X + (float)(Main.npc[i].width / 2)) / 16f), (int)((Main.npc[i].position.Y + (float)(Main.npc[i].height / 2) + Main.npc[i].gfxOffY) / 16f)), scale);
																	}
																}
																else if (type != 514 && type != 515)
																{
																	if (type == 117)
																	{
																		Vector2 value12 = Main.npc[i].position;
																		int num19 = -1;
																		for (int num20 = 0; num20 < 200; num20++)
																		{
																			if (Main.npc[num20].active && Main.npc[num20].type == 119)
																			{
																				num19 = num20;
																			}
																		}
																		if (num19 >= 0)
																		{
																			value12 += Main.npc[num19].position;
																			value12 /= 2f;
																			this.DrawHealthBar(value12.X + (float)(Main.npc[i].width / 2), value12.Y + (float)(Main.npc[i].height / 2), Main.npc[i].life, Main.npc[i].lifeMax, Lighting.Brightness((int)((Main.npc[i].position.X + (float)(Main.npc[i].width / 2)) / 16f), (int)((Main.npc[i].position.Y + (float)(Main.npc[i].height / 2) + Main.npc[i].gfxOffY) / 16f)), scale);
																		}
																	}
																	else if (type != 118 && type != 119)
																	{
																		if (Main.HealthBarDrawSettings == 1)
																		{
																			float num21 = 10f;
																			num21 += Main.NPCAddHeight(i);
																			this.DrawHealthBar(Main.npc[i].position.X + (float)(Main.npc[i].width / 2), Main.npc[i].position.Y + (float)Main.npc[i].height + num21 + Main.npc[i].gfxOffY, Main.npc[i].life, Main.npc[i].lifeMax, Lighting.Brightness((int)((Main.npc[i].position.X + (float)(Main.npc[i].width / 2)) / 16f), (int)((Main.npc[i].position.Y + (float)(Main.npc[i].height / 2) + Main.npc[i].gfxOffY) / 16f)), scale);
																		}
																		else if (Main.HealthBarDrawSettings == 2)
																		{
																			float num22 = -24f;
																			num22 -= Main.NPCAddHeight(i) / 2f;
																			this.DrawHealthBar(Main.npc[i].position.X + (float)(Main.npc[i].width / 2), Main.npc[i].position.Y + num22 + Main.npc[i].gfxOffY, Main.npc[i].life, Main.npc[i].lifeMax, Lighting.Brightness((int)((Main.npc[i].position.X + (float)(Main.npc[i].width / 2)) / 16f), (int)((Main.npc[i].position.Y + (float)(Main.npc[i].height / 2) + Main.npc[i].gfxOffY) / 16f)), scale);
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						else if (!Main.npc[i].dontTakeDamage && Main.npc[i].nameOver > 0f && PlayerInput.UsingGamepad)
						{
							Vector2 stringSize = ChatManager.GetStringSize(Main.fontMouseText, Main.npc[i].displayName, Vector2.One, -1f);
							Vector2 vector2 = Main.npc[i].Bottom - Main.screenPosition + new Vector2(0f, 10f);
							int num23;
							Vector2 value13;
							if (NPC.GetNPCLocation(i, true, true, out num23, out value13))
							{
								vector2 = value13 - Main.screenPosition + new Vector2(0f, (float)(10 + Main.npc[i].height / 2));
								if (Main.player[Main.myPlayer].gravDir == -1f)
								{
									vector2 = Main.ReverseGravitySupport(vector2, (float)(-(float)Main.npc[i].height - 20));
								}
								Vector2 origin = stringSize * new Vector2(0.5f, 0f);
								ChatManager.DrawColorCodedStringShadow(Main.spriteBatch, Main.fontMouseText, Main.npc[i].displayName, vector2, Microsoft.Xna.Framework.Color.Black * Main.npc[i].nameOver * 0.5f, 0f, origin, Vector2.One, -1f, 2f);
								ChatManager.DrawColorCodedString(Main.spriteBatch, Main.fontMouseText, Main.npc[i].displayName, vector2, Microsoft.Xna.Framework.Color.White * Main.npc[i].nameOver, 0f, origin, Vector2.One, -1f, false);
							}
						}
						if (Main.npc[i].type == 548 && !Main.npc[i].dontTakeDamageFromHostiles && DD2Event.TimeLeftBetweenWaves > 0 && !Main.hideUI)
						{
							Vector2 position = Main.npc[i].Bottom - Main.screenPosition + new Vector2(0f, -100f);
							int timeLeftBetweenWaves = DD2Event.TimeLeftBetweenWaves;
							int num24 = timeLeftBetweenWaves / 60;
							string text = string.Format("{0}", num24);
							SpriteFont spriteFont = Main.fontMouseText;
							float scaleFactor = 1f;
							Vector2 origin2 = spriteFont.MeasureString(text) * scaleFactor * new Vector2(0.5f, 0.5f);
							ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, spriteFont, text, position, Microsoft.Xna.Framework.Color.White, 0f, origin2, Vector2.One * scaleFactor, -1f, 2f);
						}
						Main.npc[i].position -= Main.npc[i].visualOffset;
					}
				}
				for (int num25 = 0; num25 < 255; num25++)
				{
					if (num25 != Main.myPlayer && Main.player[num25].active && !Main.player[num25].ghost && !Main.player[num25].dead && Main.player[num25].statLife != Main.player[num25].statLifeMax2)
					{
						if (Main.HealthBarDrawSettings == 1)
						{
							int num26 = 10;
							this.DrawHealthBar(Main.player[num25].position.X + (float)(Main.player[num25].width / 2), Main.player[num25].position.Y + (float)Main.player[num25].height + (float)num26 + Main.player[num25].gfxOffY, Main.player[num25].statLife, Main.player[num25].statLifeMax2, Lighting.Brightness((int)((Main.player[num25].position.X + (float)(Main.player[num25].width / 2)) / 16f), (int)((Main.player[num25].position.Y + (float)(Main.player[num25].height / 2) + Main.player[num25].gfxOffY) / 16f)), 1f);
						}
						else if (Main.HealthBarDrawSettings == 2)
						{
							int num27 = -20;
							this.DrawHealthBar(Main.player[num25].position.X + (float)(Main.player[num25].width / 2), Main.player[num25].position.Y + (float)num27 + Main.player[num25].gfxOffY, Main.player[num25].statLife, Main.player[num25].statLifeMax2, Lighting.Brightness((int)((Main.player[num25].position.X + (float)(Main.player[num25].width / 2)) / 16f), (int)((Main.player[num25].position.Y + (float)(Main.player[num25].height / 2) + Main.player[num25].gfxOffY) / 16f)), 1f);
						}
					}
				}
			}
		}

		private static void DrawInterface_13_AchievementCompletePopups()
		{
			AchievementCompleteUI.Draw(Main.spriteBatch);
		}

		private static bool DrawInterface_12_IngameFancyUI()
		{
			Main.InGameUI.Draw(Main.spriteBatch, Main._drawInterfaceGameTime);
			bool result = true;
			if (Main.inFancyUI && !IngameFancyUI.Draw(Main.spriteBatch, Main._drawInterfaceGameTime))
			{
				result = false;
			}
			return result;
		}

		private bool DrawInterface_11_IngameOptionsMenu()
		{
			bool result = true;
			if (Main.ingameOptionsWindow)
			{
				IngameOptions.Draw(this, Main.spriteBatch);
				result = false;
			}
			return result;
		}

		private static bool DrawInterface_8_CheckF11UIHideToggle()
		{
			bool result = true;
			if (Main.hideUI)
			{
				Main.maxQ = true;
				result = false;
			}
			return result;
		}

		private static bool DrawInterface_10_CheckCaptureManager()
		{
			bool result = true;
			CaptureManager.Instance.Update();
			if (CaptureManager.Instance.Active)
			{
				CaptureManager.Instance.Draw(Main.spriteBatch);
				result = false;
			}
			return result;
		}

		private static void DrawInterface_9_WireSelection()
		{
			WiresUI.HandleWiresUI(Main.spriteBatch);
		}

		private static void DrawInterface_0_InterfaceLogic1()
		{
			if (Main.player[Main.myPlayer].selectedItem == 58 && Main.player[Main.myPlayer].itemAnimation > 0)
			{
				Main.mouseLeftRelease = false;
			}
		}

		private void DrawInterface_7_TownNPCHouseBanners()
		{
			if (Main.EquipPage == 1 || UILinkPointNavigator.Shortcuts.NPCS_IconsDisplay)
			{
				if (Main.ignoreErrors)
				{
					try
					{
						this.DrawNPCHouse();
						return;
					}
					catch (Exception e)
					{
						TimeLogger.DrawException(e);
						return;
					}
				}
				this.DrawNPCHouse();
			}
		}

		private static void DrawInterface_6_TileGridOption()
		{
			if (((PlayerInput.UsingGamepad && !Main.SmartCursorEnabled && !PlayerInput.UsingGamepadUI) || (Main.MouseShowBuildingGrid && !Main.SmartCursorEnabled)) && !Main.player[Main.myPlayer].dead && !PlayerInput.CursorIsBusy)
			{
				float num = Main.player[Main.myPlayer].velocity.Length();
				float num2 = 6f;
				float num3 = MathHelper.Lerp(0f, 0.7f, MathHelper.Clamp(1f - num / num2, 0f, 1f));
				Main.MouseBuildingGridAlpha = MathHelper.Lerp(Main.MouseBuildingGridAlpha, num3, 0.2f);
				num3 = Main.MouseBuildingGridAlpha;
				if (num3 > 0f)
				{
					Vector2 value = Main.MouseWorld.ToTileCoordinates().ToVector2();
					Vector2 vector = value * 16f;
					new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
					bool arg_E6_0 = Main.drawToScreen;
					vector -= Main.screenPosition;
					vector += new Vector2(8f);
					if (Main.player[Main.myPlayer].gravDir == -1f)
					{
						vector.Y = (float)Main.screenHeight - vector.Y;
					}
					Texture2D texture2D = Main.cursorRadialTexture;
					Main.spriteBatch.Draw(texture2D, vector, null, Microsoft.Xna.Framework.Color.White * 0.5f * num3, 0f, texture2D.Size() / 2f, 1f, SpriteEffects.None, 0f);
					return;
				}
			}
			else
			{
				Main.MouseBuildingGridAlpha = MathHelper.Clamp(Main.MouseBuildingGridAlpha - 0.05f, 0f, 1f);
			}
		}

		private static void DrawInterface_5_GamepadLockOn()
		{
			LockOnHelper.Draw(Main.spriteBatch);
		}

		private static void DrawInterface_4_Ruler()
		{
			if (Main.player[Main.myPlayer].rulerLine && Main.player[Main.myPlayer].builderAccStatus[0] == 0)
			{
				float num = Main.player[Main.myPlayer].velocity.Length();
				float num2 = 6f;
				float num3 = 2f;
				if (num <= num2)
				{
					float scale = 1f;
					if (num >= num3)
					{
						scale = 1f - (num - num3) / num2;
					}
					int num4 = 1;
					if ((float)Main.mouseX + Main.screenPosition.X < Main.player[Main.myPlayer].Center.X)
					{
						num4 = -1;
					}
					int num5 = (int)(Main.player[Main.myPlayer].position.X + (float)(Main.player[Main.myPlayer].width / 2) + (float)(num4 * 4)) / 16;
					int num6 = (int)(Main.player[Main.myPlayer].position.Y + (float)Main.player[Main.myPlayer].height - 2f) / 16;
					if (Main.player[Main.myPlayer].gravDir == -1f)
					{
						num6--;
					}
					num5 += num4;
					Vector2 value = Main.MouseWorld;
					if (Main.player[Main.myPlayer].gravDir == -1f)
					{
						value.Y += 16f;
					}
					value /= 16f;
					new Vector2((float)num5, (float)num6);
					int num7 = (int)value.X - num5;
					int num8 = (int)value.Y - num6;
					int num9 = Math.Abs(num7) + 1;
					int num10 = Math.Abs(num8) + 1;
					if (num7 != 0 || num8 != 0)
					{
						Texture2D texture = Main.extraTexture[2];
						Microsoft.Xna.Framework.Rectangle value2 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
						int num11 = num5;
						int num12 = num6;
						if (Main.player[Main.myPlayer].gravDir == -1f)
						{
							num12--;
						}
						float r = 0.24f;
						float g = 0.8f;
						float b = 0.9f;
						float a = 1f;
						float scale2 = 0.8f;
						Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(r, g, b, a) * scale2 * scale;
						Main.spriteBatch.Draw(texture, Main.ReverseGravitySupport(new Vector2((float)num11, (float)num12) * 16f - Main.screenPosition, 16f), new Microsoft.Xna.Framework.Rectangle?(value2), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						if (num7 != 0)
						{
							int num13 = Math.Sign(num7);
							value2.Y = ((num13 == 1) ? 16 : 32);
							while (num7 != 0)
							{
								num7 -= num13;
								num11 += num13;
								if (num7 == 0)
								{
									value2.Y = 0;
								}
								color = new Microsoft.Xna.Framework.Color(r, g, b, a) * scale2 * scale;
								Main.spriteBatch.Draw(texture, Main.ReverseGravitySupport(new Vector2((float)num11, (float)num12) * 16f - Main.screenPosition, 16f), new Microsoft.Xna.Framework.Rectangle?(value2), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
							}
						}
						if (num8 != 0)
						{
							int num14 = Math.Sign(num8);
							value2.Y = ((num14 == 1) ? 48 : 64);
							while (num8 != 0)
							{
								num8 -= num14;
								num12 += num14;
								if (num8 == 0)
								{
									value2.Y = 0;
								}
								color = new Microsoft.Xna.Framework.Color(r, g, b, a) * scale2 * scale;
								Main.spriteBatch.Draw(texture, Main.ReverseGravitySupport(new Vector2((float)num11, (float)num12) * 16f - Main.screenPosition, 16f), new Microsoft.Xna.Framework.Rectangle?(value2), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
							}
						}
						Utils.DrawBorderString(Main.spriteBatch, num9.ToString() + "x" + num10.ToString(), new Vector2((float)(Main.mouseX + 16), (float)Main.mouseY), new Microsoft.Xna.Framework.Color(r, g, b, a), 1f, 0f, 0.8f, -1);
					}
				}
			}
		}

		private static void DrawInterface_3_LaserRuler()
		{
			if (Main.player[Main.myPlayer].rulerGrid && Main.player[Main.myPlayer].builderAccStatus[1] == 0)
			{
				float num = Main.player[Main.myPlayer].velocity.Length();
				num = Vector2.Distance(Main.player[Main.myPlayer].position, Main.player[Main.myPlayer].shadowPos[2]);
				float num2 = 6f;
				Texture2D texture = Main.extraTexture[68];
				float scale = MathHelper.Lerp(0.2f, 0.7f, MathHelper.Clamp(1f - num / num2, 0f, 1f));
				Vector2 vector = Main.screenPosition;
				vector += new Vector2(-50f);
				vector = vector.ToTileCoordinates().ToVector2() * 16f;
				int num3 = (Main.screenWidth + 100) / 16;
				int num4 = (Main.screenHeight + 100) / 16;
				Microsoft.Xna.Framework.Point point = Main.MouseWorld.ToTileCoordinates();
				point.X -= (int)vector.X / 16;
				point.Y -= (int)vector.Y / 16;
				Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(0.24f, 0.8f, 0.9f, 0.5f) * 0.4f * scale;
				Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color(1f, 0.8f, 0.9f, 0.5f) * 0.5f * scale;
				Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle(0, 18, 18, 18);
				vector -= Vector2.One;
				for (int i = 0; i < num3; i++)
				{
					for (int j = 0; j < num4; j++)
					{
						Microsoft.Xna.Framework.Color color3 = color;
						Vector2 zero = Vector2.Zero;
						if (i != point.X && j != point.Y)
						{
							if (i != point.X + 1)
							{
								value.X = 0;
								value.Width = 16;
							}
							else
							{
								value.X = 2;
								value.Width = 14;
								zero.X = 2f;
							}
							if (j != point.Y + 1)
							{
								value.Y = 18;
								value.Height = 16;
							}
							else
							{
								value.Y = 2;
								value.Height = 14;
								zero.Y = 2f;
							}
							Main.spriteBatch.Draw(texture, Main.ReverseGravitySupport(new Vector2((float)i, (float)j) * 16f - Main.screenPosition + vector + zero, 16f), new Microsoft.Xna.Framework.Rectangle?(value), color3, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						}
					}
				}
				value = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 18);
				for (int k = 0; k < num3; k++)
				{
					if (k == point.X)
					{
						Main.spriteBatch.Draw(texture, Main.ReverseGravitySupport(new Vector2((float)k, (float)point.Y) * 16f - Main.screenPosition + vector, 16f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16)), color2, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
					}
					else
					{
						Main.spriteBatch.Draw(texture, Main.ReverseGravitySupport(new Vector2((float)k, (float)point.Y) * 16f - Main.screenPosition + vector, 16f), new Microsoft.Xna.Framework.Rectangle?(value), color2, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
					}
				}
				value = new Microsoft.Xna.Framework.Rectangle(0, 0, 18, 16);
				for (int l = 0; l < num4; l++)
				{
					if (l != point.Y)
					{
						Main.spriteBatch.Draw(texture, Main.ReverseGravitySupport(new Vector2((float)point.X, (float)l) * 16f - Main.screenPosition + vector, 16f), new Microsoft.Xna.Framework.Rectangle?(value), color2, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
					}
				}
			}
		}

		private static void DrawInterface_2_SmartCursorTargets()
		{
			Main.DrawSmartCursor();
		}

		private static void DrawInterface_1_EmoteBubbles()
		{
			EmoteBubble.DrawAll(Main.spriteBatch);
		}

		private static void MouseOversTryToClear()
		{
			if (!Main._MouseOversCanClear)
			{
				return;
			}
			Main._MouseOversCanClear = false;
			Main.MouseOversClear();
		}

		private static void MouseOversClear()
		{
			Main.player[Main.myPlayer].showItemIcon = false;
			Main.player[Main.myPlayer].showItemIcon2 = 0;
			Main.player[Main.myPlayer].showItemIconText = string.Empty;
			Main.signHover = -1;
		}

		public static void ItemIconCacheUpdate(int selectedItemID)
		{
			Main._itemIconCacheScreenPosition = Main.MouseScreen;
			Main._itemIconCacheSelectedItemID = selectedItemID;
			Main._itemIconCacheTime = 10;
		}

		public static void ItemIconCacheVerification()
		{
			if (Main._itemIconCacheTime > 0)
			{
				float num = Vector2.Distance(Main._itemIconCacheScreenPosition, Main.MouseScreen);
				if (num != 0f)
				{
					Main._itemIconCacheTime--;
				}
				if (num > 4f)
				{
					Main._itemIconCacheTime = 0;
				}
				if (Main._itemIconCacheSelectedItemID != Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type)
				{
					Main._itemIconCacheTime = 0;
				}
			}
		}

		public static void DrawWallOfFish()
		{
			List<int> list = new List<int>();
			for (int i = 2297; i <= 2321; i++)
			{
				list.Add(i);
			}
			for (int j = 2450; j <= 2488; j++)
			{
				list.Add(j);
			}
			for (int k = 0; k < 5; k++)
			{
				float num = 10f;
				Vector2 vector = new Vector2((float)Main.screenWidth / num * (Main.GlobalTime % num), -100f);
				vector.X += (float)(14 * k);
				vector.Y += (float)(k % 2 * 14);
				int num2 = 30 * k;
				while (vector.Y < (float)(Main.screenHeight + 100))
				{
					if (++num2 >= list.Count)
					{
						num2 = 0;
					}
					vector.Y += 26f;
					Texture2D texture2D = Main.itemTexture[list[num2]];
					Microsoft.Xna.Framework.Point point = (vector + Main.screenPosition).ToTileCoordinates();
					Main.spriteBatch.Draw(texture2D, vector, null, Lighting.GetColor(point.X, point.Y), 0.7853982f, texture2D.Size() / 2f, 1f, SpriteEffects.None, 0f);
				}
			}
		}

		private static void DrawSmartCursor()
		{
			if (Main.SmartCursorShowing && !Main.player[Main.myPlayer].dead)
			{
				Vector2 vector = new Vector2((float)Main.SmartCursorX, (float)Main.SmartCursorY) * 16f;
				new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
				bool arg_52_0 = Main.drawToScreen;
				vector -= Main.screenPosition;
				if (Main.player[Main.myPlayer].gravDir == -1f)
				{
					vector.Y = (float)Main.screenHeight - vector.Y - 16f;
				}
				Microsoft.Xna.Framework.Color newColor = Lighting.GetColor(Main.SmartCursorX, Main.SmartCursorY) * 1f;
				Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1);
				float r = 1f;
				float g = 0.9f;
				float b = 0.1f;
				float a = 1f;
				float scale = 0.6f;
				Main.spriteBatch.Draw(Main.magicPixel, vector, new Microsoft.Xna.Framework.Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, 8f, SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.magicPixel, vector + Vector2.UnitX * 8f, new Microsoft.Xna.Framework.Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, 8f, SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.magicPixel, vector + Vector2.UnitY * 8f, new Microsoft.Xna.Framework.Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, 8f, SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.magicPixel, vector + Vector2.One * 8f, new Microsoft.Xna.Framework.Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, 8f, SpriteEffects.None, 0f);
				b = 0.3f;
				g = 0.95f;
				scale = (a = 1f);
				Main.spriteBatch.Draw(Main.magicPixel, vector + Vector2.UnitX * -2f, new Microsoft.Xna.Framework.Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, new Vector2(2f, 16f), SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.magicPixel, vector + Vector2.UnitX * 16f, new Microsoft.Xna.Framework.Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, new Vector2(2f, 16f), SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.magicPixel, vector + Vector2.UnitY * -2f, new Microsoft.Xna.Framework.Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, new Vector2(16f, 2f), SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.magicPixel, vector + Vector2.UnitY * 16f, new Microsoft.Xna.Framework.Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, new Vector2(16f, 2f), SpriteEffects.None, 0f);
			}
		}

		private static void DrawSmartInteract()
		{
			if (Main.SmartInteractShowingGenuine && Main.SmartInteractNPC == -1 && !Main.player[Main.myPlayer].dead)
			{
				Vector2 vector = new Vector2((float)Main.SmartInteractX, (float)Main.SmartInteractY) * 16f;
				new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
				bool arg_5D_0 = Main.drawToScreen;
				vector -= Main.screenPosition;
				if (Main.player[Main.myPlayer].gravDir == -1f)
				{
					vector.Y = (float)Main.screenHeight - vector.Y - 16f;
				}
				Microsoft.Xna.Framework.Color newColor = Lighting.GetColor(Main.SmartInteractX, Main.SmartInteractY) * 1f;
				Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1);
				float r = 0.1f;
				float g = 0.9f;
				float b = 1f;
				float a = 1f;
				float scale = 0.6f;
				Main.spriteBatch.Draw(Main.magicPixel, vector, new Microsoft.Xna.Framework.Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, 8f, SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.magicPixel, vector + Vector2.UnitX * 8f, new Microsoft.Xna.Framework.Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, 8f, SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.magicPixel, vector + Vector2.UnitY * 8f, new Microsoft.Xna.Framework.Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, 8f, SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.magicPixel, vector + Vector2.One * 8f, new Microsoft.Xna.Framework.Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, 8f, SpriteEffects.None, 0f);
				r = 0.3f;
				g = 0.95f;
				scale = (a = 1f);
				Main.spriteBatch.Draw(Main.magicPixel, vector + Vector2.UnitX * -2f, new Microsoft.Xna.Framework.Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, new Vector2(2f, 16f), SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.magicPixel, vector + Vector2.UnitX * 16f, new Microsoft.Xna.Framework.Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, new Vector2(2f, 16f), SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.magicPixel, vector + Vector2.UnitY * -2f, new Microsoft.Xna.Framework.Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, new Vector2(16f, 2f), SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.magicPixel, vector + Vector2.UnitY * 16f, new Microsoft.Xna.Framework.Rectangle?(value), Main.buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, new Vector2(16f, 2f), SpriteEffects.None, 0f);
			}
		}

		private void DrawInterface_30_Hotbar()
		{
			if (Main.ignoreErrors)
			{
				try
				{
					this.GUIHotbarDrawInner();
					return;
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
					return;
				}
			}
			this.GUIHotbarDrawInner();
		}

		public void GUIChatDraw()
		{
			if (Main.ignoreErrors)
			{
				try
				{
					if ((Main.npcChatText != "" || Main.player[Main.myPlayer].sign != -1) && !Main.editChest)
					{
						this.GUIChatDrawInner();
					}
					return;
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
					return;
				}
			}
			if ((Main.npcChatText != "" || Main.player[Main.myPlayer].sign != -1) && !Main.editChest)
			{
				this.GUIChatDrawInner();
			}
		}

		private void DrawInfoAccs()
		{
			if ((Main.npcChatText == null || Main.npcChatText == "") && Main.player[Main.myPlayer].sign < 0)
			{
				bool flag = false;
				bool flag2 = false;
				bool flag3 = false;
				bool flag4 = false;
				bool flag5 = false;
				bool flag6 = false;
				bool flag7 = false;
				bool flag8 = false;
				bool flag9 = false;
				bool flag10 = false;
				bool flag11 = false;
				bool flag12 = false;
				int num = -1;
				int num2 = -10;
				int num3 = 0;
				string text = "";
				for (int i = 0; i < 12; i++)
				{
					string text2 = "";
					string text3 = "";
					if (Main.player[Main.myPlayer].accWatch > 0 && !flag && (!Main.player[Main.myPlayer].hideInfo[0] || Main.playerInventory))
					{
						num = 0;
						text3 = Lang.inter[95];
						string text4 = "AM";
						double num4 = Main.time;
						if (!Main.dayTime)
						{
							num4 += 54000.0;
						}
						num4 = num4 / 86400.0 * 24.0;
						double num5 = 7.5;
						num4 = num4 - num5 - 12.0;
						if (num4 < 0.0)
						{
							num4 += 24.0;
						}
						if (num4 >= 12.0)
						{
							text4 = "PM";
						}
						int num6 = (int)num4;
						double num7 = num4 - (double)num6;
						num7 = (double)((int)(num7 * 60.0));
						string text5 = string.Concat(num7);
						if (num7 < 10.0)
						{
							text5 = "0" + text5;
						}
						if (num6 > 12)
						{
							num6 -= 12;
						}
						if (num6 == 0)
						{
							num6 = 12;
						}
						if (Main.player[Main.myPlayer].accWatch == 1)
						{
							text5 = "00";
						}
						else if (Main.player[Main.myPlayer].accWatch == 2)
						{
							if (num7 < 30.0)
							{
								text5 = "00";
							}
							else
							{
								text5 = "30";
							}
						}
						text2 = string.Concat(new object[]
						{
							num6,
							":",
							text5,
							" ",
							text4
						});
						flag = true;
					}
					else if (Main.player[Main.myPlayer].accWeatherRadio && !flag5 && (!Main.player[Main.myPlayer].hideInfo[1] || Main.playerInventory))
					{
						num = 1;
						text3 = Lang.inter[96];
						string textValue;
						if ((double)Main.maxRaining > 0.6)
						{
							textValue = Language.GetTextValue("GameUI.HeavyRain");
						}
						else if ((double)Main.maxRaining >= 0.2)
						{
							textValue = Language.GetTextValue("GameUI.Rain");
						}
						else if (Main.maxRaining > 0f)
						{
							textValue = Language.GetTextValue("GameUI.LightRain");
						}
						else if (Main.cloudBGActive > 0f)
						{
							textValue = Language.GetTextValue("GameUI.Overcast");
						}
						else if (Main.numClouds > 120)
						{
							textValue = Language.GetTextValue("GameUI.MostlyCloudy");
						}
						else if (Main.numClouds > 80)
						{
							textValue = Language.GetTextValue("GameUI.Cloudy");
						}
						else if (Main.numClouds > 20)
						{
							textValue = Language.GetTextValue("GameUI.PartlyCloudy");
						}
						else
						{
							textValue = Language.GetTextValue("GameUI.Clear");
						}
						text2 = textValue;
						int num8 = (int)(Main.windSpeed * 100f);
						if (num8 < 0)
						{
							text2 += Language.GetTextValue("GameUI.WestWind", Math.Abs(num8));
						}
						else if (num8 > 0)
						{
							text2 += Language.GetTextValue("GameUI.EastWind", num8);
						}
						flag5 = true;
					}
					else if (Main.player[Main.myPlayer].accCalendar && !flag8 && (!Main.player[Main.myPlayer].hideInfo[7] || Main.playerInventory))
					{
						if (Main.bloodMoon && !Main.dayTime)
						{
							num = 8;
						}
						else if (Main.eclipse && Main.dayTime)
						{
							num = 8;
						}
						else
						{
							num = 7;
						}
						text3 = Lang.inter[102];
						if (Main.moonPhase == 0)
						{
							text2 = Language.GetTextValue("GameUI.FullMoon");
						}
						else if (Main.moonPhase == 1)
						{
							text2 = Language.GetTextValue("GameUI.WaningGibbous");
						}
						else if (Main.moonPhase == 2)
						{
							text2 = Language.GetTextValue("GameUI.ThirdQuarter");
						}
						else if (Main.moonPhase == 3)
						{
							text2 = Language.GetTextValue("GameUI.WaningCrescent");
						}
						else if (Main.moonPhase == 4)
						{
							text2 = Language.GetTextValue("GameUI.NewMoon");
						}
						else if (Main.moonPhase == 5)
						{
							text2 = Language.GetTextValue("GameUI.WaxingCrescent");
						}
						else if (Main.moonPhase == 6)
						{
							text2 = Language.GetTextValue("GameUI.FirstQuarter");
						}
						else if (Main.moonPhase == 7)
						{
							text2 = Language.GetTextValue("GameUI.WaxingGibbous");
						}
						flag8 = true;
					}
					else if (Main.player[Main.myPlayer].accFishFinder && !flag4 && (!Main.player[Main.myPlayer].hideInfo[2] || Main.playerInventory))
					{
						bool flag13 = false;
						num = 2;
						text3 = Lang.inter[97];
						for (int j = 0; j < 1000; j++)
						{
							if (Main.projectile[j].active && Main.projectile[j].owner == Main.myPlayer && Main.projectile[j].bobber)
							{
								flag13 = true;
								break;
							}
						}
						if (flag13)
						{
							text2 = Main.player[Main.myPlayer].displayedFishingInfo;
						}
						else
						{
							int num9 = Main.player[Main.myPlayer].FishingLevel();
							if (num9 == -1)
							{
								text2 = Language.GetTextValue("GameUI.FishingWarning");
							}
							else
							{
								text2 = (Main.player[Main.myPlayer].displayedFishingInfo = Language.GetTextValue("GameUI.FishingPower", num9));
							}
						}
						flag4 = true;
					}
					else if (Main.player[Main.myPlayer].accOreFinder && !flag10 && (!Main.player[Main.myPlayer].hideInfo[10] || Main.playerInventory))
					{
						num = 10;
						text3 = Lang.inter[104];
						if (Main.player[Main.myPlayer].bestOre <= 0)
						{
							text2 = Language.GetTextValue("GameUI.NoTreasureNearby");
						}
						else
						{
							text2 = Language.GetTextValue("GameUI.OreDetected", Lang.mapLegend[MapHelper.TileToLookup(Main.player[Main.myPlayer].bestOre, 0)]);
						}
						flag10 = true;
					}
					else if (Main.player[Main.myPlayer].accCritterGuide && !flag11 && (!Main.player[Main.myPlayer].hideInfo[11] || Main.playerInventory))
					{
						flag11 = true;
						num = 11;
						text3 = Lang.inter[105];
						int num10 = 1300;
						int num11 = 0;
						int num12 = -1;
						if (Main.player[Main.myPlayer].accCritterGuideCounter <= 0)
						{
							Main.player[Main.myPlayer].accCritterGuideCounter = 15;
							for (int k = 0; k < 200; k++)
							{
								if (Main.npc[k].active && Main.npc[k].rarity > num11)
								{
									num11 = Main.npc[k].rarity;
									if ((Main.npc[k].Center - Main.player[Main.myPlayer].Center).Length() < (float)num10)
									{
										num12 = k;
									}
								}
							}
							Main.player[Main.myPlayer].accCritterGuideNumber = (byte)num12;
						}
						else
						{
							Player expr_774 = Main.player[Main.myPlayer];
							expr_774.accCritterGuideCounter -= 1;
							num12 = (int)Main.player[Main.myPlayer].accCritterGuideNumber;
						}
						if (num12 >= 0 && num12 < 200 && Main.npc[num12].active && Main.npc[num12].rarity > 0)
						{
							text2 = Main.npc[num12].displayName;
						}
						else
						{
							text2 = Language.GetTextValue("GameUI.NoRareCreatures");
						}
					}
					else if (Main.player[Main.myPlayer].accThirdEye && !flag6 && (!Main.player[Main.myPlayer].hideInfo[5] || Main.playerInventory))
					{
						flag6 = true;
						num = 5;
						text3 = Lang.inter[100];
						int num13 = 2000;
						if (Main.player[Main.myPlayer].accThirdEyeCounter == 0)
						{
							Main.player[Main.myPlayer].accThirdEyeNumber = 0;
							Main.player[Main.myPlayer].accThirdEyeCounter = 15;
							for (int l = 0; l < 200; l++)
							{
								if (Main.npc[l].active && !Main.npc[l].friendly && Main.npc[l].damage > 0 && Main.npc[l].lifeMax > 5 && !Main.npc[l].dontCountMe)
								{
									int arg_8D7_0 = Main.npc[l].type;
									if ((Main.npc[l].Center - Main.player[Main.myPlayer].Center).Length() < (float)num13)
									{
										Player expr_913 = Main.player[Main.myPlayer];
										expr_913.accThirdEyeNumber += 1;
									}
								}
							}
						}
						else
						{
							Player expr_940 = Main.player[Main.myPlayer];
							expr_940.accThirdEyeCounter -= 1;
						}
						if (Main.player[Main.myPlayer].accThirdEyeNumber == 0)
						{
							text2 = Language.GetTextValue("GameUI.NoEnemiesNearby");
						}
						else if (Main.player[Main.myPlayer].accThirdEyeNumber == 1)
						{
							text2 = Language.GetTextValue("GameUI.OneEnemyNearby");
						}
						else
						{
							text2 = Language.GetTextValue("GameUI.EnemiesNearby", Main.player[Main.myPlayer].accThirdEyeNumber);
						}
					}
					else if (Main.player[Main.myPlayer].accJarOfSouls && !flag7 && (!Main.player[Main.myPlayer].hideInfo[6] || Main.playerInventory))
					{
						flag7 = true;
						num = 6;
						text3 = Lang.inter[101];
						int lastCreatureHit = Main.player[Main.myPlayer].lastCreatureHit;
						if (lastCreatureHit <= 0)
						{
							text2 = Language.GetTextValue("GameUI.NoKillCount");
						}
						else
						{
							text2 = Lang.npcName(Item.BannerToNPC(lastCreatureHit), false) + ": " + NPC.killCount[lastCreatureHit];
						}
					}
					else if (Main.player[Main.myPlayer].accDreamCatcher && !flag12 && (!Main.player[Main.myPlayer].hideInfo[12] || Main.playerInventory))
					{
						num = 12;
						text3 = Lang.inter[106];
						Main.player[Main.myPlayer].checkDPSTime();
						int dPS = Main.player[Main.myPlayer].getDPS();
						flag12 = true;
						if (dPS == 0)
						{
							text2 = Language.GetTextValue("GameUI.NoDPS");
						}
						else
						{
							text2 = Language.GetTextValue("GameUI.DPS", Main.player[Main.myPlayer].getDPS());
						}
					}
					else if (Main.player[Main.myPlayer].accStopwatch && !flag9 && (!Main.player[Main.myPlayer].hideInfo[9] || Main.playerInventory))
					{
						num = 9;
						text3 = Lang.inter[103];
						int num14 = (int)(1f + Main.player[Main.myPlayer].velocity.Length() * 6f);
						if (num14 > Main.player[Main.myPlayer].speedSlice.Length)
						{
							num14 = Main.player[Main.myPlayer].speedSlice.Length;
						}
						float num15 = 0f;
						for (int m = num14 - 1; m > 0; m--)
						{
							Main.player[Main.myPlayer].speedSlice[m] = Main.player[Main.myPlayer].speedSlice[m - 1];
						}
						Main.player[Main.myPlayer].speedSlice[0] = Main.player[Main.myPlayer].velocity.Length();
						for (int n = 0; n < Main.player[Main.myPlayer].speedSlice.Length; n++)
						{
							if (n < num14)
							{
								num15 += Main.player[Main.myPlayer].speedSlice[n];
							}
							else
							{
								Main.player[Main.myPlayer].speedSlice[n] = num15 / (float)num14;
							}
						}
						num15 /= (float)num14;
						int num16 = 42240;
						int num17 = 216000;
						float num18 = num15 * (float)num17 / (float)num16;
						if (!Main.player[Main.myPlayer].merman && !Main.player[Main.myPlayer].ignoreWater)
						{
							if (Main.player[Main.myPlayer].honeyWet)
							{
								num18 /= 4f;
							}
							else if (Main.player[Main.myPlayer].wet)
							{
								num18 /= 2f;
							}
						}
						text2 = Language.GetTextValue("GameUI.Speed", Math.Round((double)num18));
						flag9 = true;
					}
					else if (Main.player[Main.myPlayer].accCompass > 0 && !flag3 && (!Main.player[Main.myPlayer].hideInfo[3] || Main.playerInventory))
					{
						num = 3;
						text3 = Lang.inter[98];
						int num19 = (int)((Main.player[Main.myPlayer].position.X + (float)(Main.player[Main.myPlayer].width / 2)) * 2f / 16f - (float)Main.maxTilesX);
						if (num19 > 0)
						{
							text2 = Language.GetTextValue("GameUI.CompassEast", num19);
						}
						else if (num19 < 0)
						{
							text2 = Language.GetTextValue("GameUI.CompassWest", -num19);
						}
						else
						{
							text2 = Language.GetTextValue("GameUI.CompassCenter");
						}
						flag3 = true;
					}
					else if (Main.player[Main.myPlayer].accDepthMeter > 0 && !flag2 && (!Main.player[Main.myPlayer].hideInfo[4] || Main.playerInventory))
					{
						num = 4;
						text3 = Lang.inter[99];
						int num20 = (int)((double)((Main.player[Main.myPlayer].position.Y + (float)Main.player[Main.myPlayer].height) * 2f / 16f) - Main.worldSurface * 2.0);
						float num21 = (float)(Main.maxTilesX / 4200);
						num21 *= num21;
						int num22 = 1080;
						float num23 = (float)((double)((Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16f - (65f + 10f * num21)) / (Main.worldSurface / 5.0));
						string textValue2;
						if (Main.player[Main.myPlayer].position.Y > (float)((Main.maxTilesY - 204) * 16))
						{
							textValue2 = Language.GetTextValue("GameUI.LayerUnderworld");
						}
						else if ((double)Main.player[Main.myPlayer].position.Y > Main.rockLayer * 16.0 + (double)(num22 / 2) + 16.0)
						{
							textValue2 = Language.GetTextValue("GameUI.LayerCaverns");
						}
						else if (num20 > 0)
						{
							textValue2 = Language.GetTextValue("GameUI.LayerUnderground");
						}
						else if (num23 >= 1f)
						{
							textValue2 = Language.GetTextValue("GameUI.LayerSurface");
						}
						else
						{
							textValue2 = Language.GetTextValue("GameUI.LayerSpace");
						}
						num20 = Math.Abs(num20);
						string textValue3;
						if (num20 == 0)
						{
							textValue3 = Language.GetTextValue("GameUI.DepthLevel");
						}
						else
						{
							textValue3 = Language.GetTextValue("GameUI.Depth", num20);
						}
						text2 = textValue3 + " " + textValue2;
						flag2 = true;
					}
					if (text2 != "")
					{
						int num24;
						int num25;
						if (!Main.playerInventory)
						{
							num24 = Main.screenWidth - 280;
							num25 = -32;
							if (Main.mapStyle == 1 && Main.mapEnabled)
							{
								num25 += 254;
							}
						}
						else
						{
							bool shouldDrawInfoIconsHorizontally = Main.ShouldDrawInfoIconsHorizontally;
							if (shouldDrawInfoIconsHorizontally)
							{
								num24 = Main.screenWidth - 280 + 20 * num3 - 10;
								num25 = 94;
								if (Main.mapStyle == 1 && Main.mapEnabled)
								{
									num25 += 254;
								}
							}
							else
							{
								int num26 = (int)(52f * Main.inventoryScale);
								num24 = 697 - num26 * 4 + Main.screenWidth - 800 + 20 * (num3 % 2);
								num25 = 114 + Main.mH + num26 * 7 + num26 / 2 + 20 * (num3 / 2) + 8 * (num3 / 4) - 20;
								if (Main.EquipPage == 2)
								{
									num24 += num26 + num26 / 2;
									num25 -= num26;
								}
							}
						}
						if (num >= 0)
						{
							num3++;
							int num27 = 22;
							if (Main.screenHeight < 650)
							{
								num27 = 20;
							}
							Vector2 vector = new Vector2((float)num24, (float)(num25 + 74 + num27 * i + 52));
							int num28 = num;
							if (num28 == 8)
							{
								num28 = 7;
							}
							Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
							bool flag14 = false;
							if (Main.playerInventory)
							{
								vector = new Vector2((float)num24, (float)num25);
								if ((float)Main.mouseX >= vector.X && (float)Main.mouseY >= vector.Y && (float)Main.mouseX <= vector.X + (float)this.infoIconTexture[num].Width && (float)Main.mouseY <= vector.Y + (float)this.infoIconTexture[num].Height && !PlayerInput.IgnoreMouseInterface)
								{
									flag14 = true;
									Main.player[Main.myPlayer].mouseInterface = true;
									if (Main.mouseLeft && Main.mouseLeftRelease)
									{
										Main.PlaySound(12, -1, -1, 1, 1f, 0f);
										Main.mouseLeftRelease = false;
										Main.player[Main.myPlayer].hideInfo[num28] = !Main.player[Main.myPlayer].hideInfo[num28];
									}
									if (!Main.mouseText)
									{
										text = text3;
										Main.mouseText = true;
									}
								}
								if (Main.player[Main.myPlayer].hideInfo[num28])
								{
									white = new Microsoft.Xna.Framework.Color(80, 80, 80, 70);
								}
							}
							else if ((float)Main.mouseX >= vector.X && (float)Main.mouseY >= vector.Y && (float)Main.mouseX <= vector.X + (float)this.infoIconTexture[num].Width && (float)Main.mouseY <= vector.Y + (float)this.infoIconTexture[num].Height && !Main.mouseText && Lang.lang <= 1)
							{
								num2 = i;
								text = text3;
								Main.mouseText = true;
							}
							UILinkPointNavigator.SetPosition(1558 + num3 - 1, vector + this.infoIconTexture[num].Size() * 0.75f);
							Main.spriteBatch.Draw(this.infoIconTexture[num], vector, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, this.infoIconTexture[num].Width, this.infoIconTexture[num].Height)), white, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							if (flag14)
							{
								Main.spriteBatch.Draw(this.infoIconTexture[13], vector - Vector2.One * 2f, null, Main.OurFavoriteColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
							num24 += 20;
						}
						UILinkPointNavigator.Shortcuts.INFOACCCOUNT = num3;
						if (!Main.playerInventory)
						{
							for (int num29 = 0; num29 < 5; num29++)
							{
								int num30 = 0;
								int num31 = 0;
								Microsoft.Xna.Framework.Color black = Microsoft.Xna.Framework.Color.Black;
								if (num29 == 0)
								{
									num30 = -2;
								}
								if (num29 == 1)
								{
									num30 = 2;
								}
								if (num29 == 2)
								{
									num31 = -2;
								}
								if (num29 == 3)
								{
									num31 = 2;
								}
								if (num29 == 4)
								{
									black = new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
								}
								if (i > num2 && i < num2 + 2)
								{
									black = new Microsoft.Xna.Framework.Color((int)(black.R / 3), (int)(black.G / 3), (int)(black.B / 3), (int)(black.A / 3));
								}
								int num32 = 22;
								if (Main.screenHeight < 650)
								{
									num32 = 20;
								}
								Main.spriteBatch.DrawString(Main.fontMouseText, text2, new Vector2((float)(num24 + num30), (float)(num25 + 74 + num32 * i + num31 + 48)), black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
						}
					}
				}
				if (!string.IsNullOrEmpty(text))
				{
					if (Main.playerInventory)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
					}
					this.MouseText(text, 0, 0);
				}
			}
		}

		private void DrawBuilderAccToggles(Vector2 start)
		{
			if ((!Main.playerInventory && !string.IsNullOrEmpty(Main.npcChatText)) || Main.player[Main.myPlayer].sign >= 0)
			{
				return;
			}
			int num = 0;
			Player player = Main.player[Main.myPlayer];
			int[] builderAccStatus = Main.player[Main.myPlayer].builderAccStatus;
			int num2 = player.InfoAccMechShowWires.ToInt() * 6 + player.rulerLine.ToInt() + player.rulerGrid.ToInt() + player.autoActuator.ToInt() + player.autoPaint.ToInt();
			int i = 0;
			while (i < builderAccStatus.Length)
			{
				int num3 = i - 2;
				if (i == 0)
				{
					num3 = 8;
				}
				else if (i == 1)
				{
					num3 = 9;
				}
				Texture2D texture = Main.builderAccTexture;
				Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(0, 16, 14, 14);
				Microsoft.Xna.Framework.Color color = Microsoft.Xna.Framework.Color.White;
				Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color(127, 127, 127);
				Vector2 vector = start + new Vector2(0f, (float)(num * 24));
				if (num2 > 8)
				{
					vector.Y -= 44f;
				}
				bool flag = Utils.CenteredRectangle(vector, new Vector2(14f)).Contains(Main.MouseScreen.ToPoint()) && !PlayerInput.IgnoreMouseInterface;
				bool flag2 = flag && Main.mouseLeft && Main.mouseLeftRelease;
				switch (num3)
				{
				case 0:
					if (player.rulerLine)
					{
						rectangle.X = num3 * 16;
						color = ((builderAccStatus[num3] == 0) ? color : color2);
						if (flag)
						{
							player.mouseInterface = true;
							this.MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.RulerOn") : Language.GetTextValue("GameUI.RulerOff"), 0, 0);
							Main.mouseText = true;
						}
						if (flag2)
						{
							builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.mouseLeftRelease = false;
							goto IL_5F2;
						}
						goto IL_5F2;
					}
					break;
				case 1:
					if (player.rulerGrid)
					{
						rectangle.X = num3 * 16;
						color = ((builderAccStatus[num3] == 0) ? color : color2);
						if (flag)
						{
							player.mouseInterface = true;
							this.MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.MechanicalRulerOn") : Language.GetTextValue("GameUI.MechanicalRulerOff"), 0, 0);
							Main.mouseText = true;
						}
						if (flag2)
						{
							builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.mouseLeftRelease = false;
							goto IL_5F2;
						}
						goto IL_5F2;
					}
					break;
				case 2:
					if (player.autoActuator)
					{
						rectangle.X = num3 * 16;
						color = ((builderAccStatus[num3] == 0) ? color : color2);
						if (flag)
						{
							player.mouseInterface = true;
							this.MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.ActuationDeviceOn") : Language.GetTextValue("GameUI.ActuationDeviceOff"), 0, 0);
							Main.mouseText = true;
						}
						if (flag2)
						{
							builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.mouseLeftRelease = false;
							goto IL_5F2;
						}
						goto IL_5F2;
					}
					break;
				case 3:
					if (player.autoPaint)
					{
						rectangle.X = num3 * 16;
						color = ((builderAccStatus[num3] == 0) ? color : color2);
						if (flag)
						{
							player.mouseInterface = true;
							this.MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.PaintSprayerOn") : Language.GetTextValue("GameUI.PaintSprayerOff"), 0, 0);
							Main.mouseText = true;
						}
						if (flag2)
						{
							builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.mouseLeftRelease = false;
							goto IL_5F2;
						}
						goto IL_5F2;
					}
					break;
				case 4:
				case 5:
				case 6:
				case 7:
				case 9:
					if (player.InfoAccMechShowWires)
					{
						rectangle.X = num3 * 16;
						color = ((builderAccStatus[num3] == 0) ? color : ((builderAccStatus[num3] == 1) ? color2 : ((builderAccStatus[num3] == 2) ? color2.MultiplyRGBA(new Microsoft.Xna.Framework.Color(0.66f, 0.66f, 0.66f, 0.66f)) : color2.MultiplyRGBA(new Microsoft.Xna.Framework.Color(0.33f, 0.33f, 0.33f, 0.33f)))));
						if (flag)
						{
							player.mouseInterface = true;
							string arg = "";
							switch (num3)
							{
							case 4:
								arg = Language.GetTextValue("Game.RedWires");
								break;
							case 5:
								arg = Language.GetTextValue("Game.BlueWires");
								break;
							case 6:
								arg = Language.GetTextValue("Game.GreenWires");
								break;
							case 7:
								arg = Language.GetTextValue("Game.YellowWires");
								break;
							case 9:
								arg = Language.GetTextValue("Game.Actuators");
								break;
							}
							string arg2 = "";
							switch (builderAccStatus[num3])
							{
							case 0:
								arg2 = Language.GetTextValue("GameUI.Bright");
								break;
							case 1:
								arg2 = Language.GetTextValue("GameUI.Normal");
								break;
							case 2:
								arg2 = Language.GetTextValue("GameUI.Faded");
								break;
							case 3:
								arg2 = Language.GetTextValue("GameUI.Hidden");
								break;
							}
							this.MouseText(string.Format("{0}: {1}", arg, arg2), 0, 0);
							Main.mouseText = true;
						}
						if (flag2)
						{
							builderAccStatus[num3]++;
							if (builderAccStatus[num3] >= 3)
							{
								builderAccStatus[num3] = 0;
							}
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.mouseLeftRelease = false;
							goto IL_5F2;
						}
						goto IL_5F2;
					}
					break;
				case 8:
					if (player.InfoAccMechShowWires)
					{
						rectangle.X = num3 * 16;
						color = ((builderAccStatus[num3] == 0) ? color : color2);
						if (flag)
						{
							player.mouseInterface = true;
							this.MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.WireModeForced") : Language.GetTextValue("GameUI.WireModeNormal"), 0, 0);
							Main.mouseText = true;
						}
						if (flag2)
						{
							builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.mouseLeftRelease = false;
							goto IL_5F2;
						}
						goto IL_5F2;
					}
					break;
				case 10:
					goto IL_5F2;
				case 11:
					break;
				default:
					goto IL_5F2;
				}
				IL_6A2:
				i++;
				continue;
				IL_5F2:
				Main.spriteBatch.Draw(texture, vector, new Microsoft.Xna.Framework.Rectangle?(rectangle), color, 0f, rectangle.Size() / 2f, 1f, SpriteEffects.None, 0f);
				if (flag)
				{
					Main.spriteBatch.Draw(this.infoIconTexture[13], vector, null, Main.OurFavoriteColor, 0f, this.infoIconTexture[13].Size() / 2f, 1f, SpriteEffects.None, 0f);
				}
				UILinkPointNavigator.SetPosition(4000 + num, vector + rectangle.Size() * 0.3f);
				num++;
				goto IL_6A2;
			}
			UILinkPointNavigator.Shortcuts.BUILDERACCCOUNT = num;
		}

		public static void CheckInvasionProgressDisplay()
		{
			if (Main.invasionProgressMode != 2)
			{
				Main.invasionProgressNearInvasion = false;
				return;
			}
			bool flag = false;
			Player player = Main.player[Main.myPlayer];
			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)Main.screenPosition.X, (int)Main.screenPosition.Y, Main.screenWidth, Main.screenHeight);
			int num = 5000;
			int num2 = 0;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active)
				{
					num2 = 0;
					int type = Main.npc[i].type;
					if (type <= 216)
					{
						if (type <= 111)
						{
							switch (type)
							{
							case 26:
							case 27:
							case 28:
							case 29:
								break;
							default:
								if (type != 111)
								{
									goto IL_2C6;
								}
								break;
							}
							num2 = 4;
						}
						else
						{
							switch (type)
							{
							case 143:
							case 144:
							case 145:
								num2 = 5;
								break;
							default:
								switch (type)
								{
								case 212:
								case 213:
								case 214:
								case 215:
								case 216:
									goto IL_2B9;
								}
								break;
							}
						}
					}
					else if (type <= 395)
					{
						switch (type)
						{
						case 305:
						case 306:
						case 307:
						case 308:
						case 309:
						case 310:
						case 311:
						case 312:
						case 313:
						case 314:
						case 315:
						case 325:
						case 326:
						case 327:
						case 329:
						case 330:
							num2 = 2;
							break;
						case 316:
						case 317:
						case 318:
						case 319:
						case 320:
						case 321:
						case 322:
						case 323:
						case 324:
						case 328:
						case 331:
						case 332:
						case 333:
						case 334:
						case 335:
						case 336:
						case 337:
							break;
						case 338:
						case 339:
						case 340:
						case 341:
						case 342:
						case 343:
						case 344:
						case 345:
						case 346:
						case 347:
						case 348:
						case 349:
						case 350:
							num2 = 1;
							break;
						default:
							switch (type)
							{
							case 381:
							case 382:
							case 383:
							case 385:
							case 386:
							case 388:
							case 389:
							case 390:
							case 391:
							case 395:
								num2 = 7;
								break;
							}
							break;
						}
					}
					else
					{
						if (type == 491)
						{
							goto IL_2B9;
						}
						switch (type)
						{
						case 548:
						case 549:
						case 551:
						case 552:
						case 553:
						case 554:
						case 555:
						case 556:
						case 557:
						case 558:
						case 559:
						case 560:
						case 561:
						case 562:
						case 563:
						case 564:
						case 565:
						case 568:
						case 569:
						case 570:
						case 571:
						case 572:
						case 573:
						case 574:
						case 575:
						case 576:
						case 577:
						case 578:
							num2 = 3;
							break;
						}
					}
					IL_2C6:
					if (num2 == 0 || (num2 == 1 && ((double)player.position.Y > Main.worldSurface * 16.0 || Main.dayTime || !Main.snowMoon)) || (num2 == 2 && ((double)player.position.Y > Main.worldSurface * 16.0 || Main.dayTime || !Main.pumpkinMoon)) || (num2 == 3 && !DD2Event.Ongoing) || (num2 > 3 && ((double)player.position.Y > Main.worldSurface * 16.0 || Main.invasionType != num2 - 3)))
					{
						goto IL_3E3;
					}
					Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)(Main.npc[i].position.X + (float)(Main.npc[i].width / 2)) - num, (int)(Main.npc[i].position.Y + (float)(Main.npc[i].height / 2)) - num, num * 2, num * 2);
					if (rectangle.Intersects(value))
					{
						flag = true;
						break;
					}
					goto IL_3E3;
					IL_2B9:
					num2 = 6;
					goto IL_2C6;
				}
				IL_3E3:;
			}
			Main.invasionProgressNearInvasion = flag;
			if (flag && Main.invasionProgressIcon == 0)
			{
				int waveNumber = NPC.waveNumber;
				if (Main.snowMoon)
				{
					int[] array = new int[]
					{
						0,
						25,
						15,
						10,
						30,
						100,
						160,
						180,
						200,
						250,
						300,
						375,
						450,
						525,
						675,
						850,
						1025,
						1325,
						1550,
						2000,
						0
					};
					int progressMax = array[waveNumber];
					Main.ReportInvasionProgress((int)NPC.waveKills, progressMax, 1, waveNumber);
					return;
				}
				if (Main.pumpkinMoon)
				{
					int[] array2 = new int[]
					{
						0,
						25,
						40,
						50,
						80,
						100,
						160,
						180,
						200,
						250,
						300,
						375,
						450,
						525,
						675,
						0
					};
					int progressMax2 = array2[waveNumber];
					Main.ReportInvasionProgress((int)NPC.waveKills, progressMax2, 2, waveNumber);
					return;
				}
				if (DD2Event.Ongoing)
				{
					DD2Event.ReportEventProgress();
					return;
				}
				int progressMax3 = 1;
				if (Main.invasionType != 0 && Main.invasionSizeStart != 0)
				{
					progressMax3 = Main.invasionSizeStart;
				}
				Main.ReportInvasionProgress(Main.invasionSizeStart - Main.invasionSize, progressMax3, num2, 0);
			}
		}

		public static void SyncAnInvasion(int toWho)
		{
			int waveNumber = NPC.waveNumber;
			if (Main.snowMoon)
			{
				int[] array = new int[]
				{
					0,
					25,
					15,
					10,
					30,
					100,
					160,
					180,
					200,
					250,
					300,
					375,
					450,
					525,
					675,
					850,
					1025,
					1325,
					1550,
					2000,
					0
				};
				int num = array[waveNumber];
				NetMessage.SendData(78, toWho, -1, "", (int)NPC.waveKills, (float)num, 1f, (float)waveNumber, 0, 0, 0);
				return;
			}
			if (Main.pumpkinMoon)
			{
				int[] array2 = new int[]
				{
					0,
					25,
					40,
					50,
					80,
					100,
					160,
					180,
					200,
					250,
					300,
					375,
					450,
					525,
					675,
					0
				};
				int num2 = array2[waveNumber];
				NetMessage.SendData(78, toWho, -1, "", (int)NPC.waveKills, (float)num2, 2f, (float)waveNumber, 0, 0, 0);
				return;
			}
			if (DD2Event.Ongoing)
			{
				DD2Event.SyncInvasionProgress(toWho);
				return;
			}
			if (Main.invasionType > 0)
			{
				int num3 = 1;
				if (Main.invasionType != 0 && Main.invasionSizeStart != 0)
				{
					num3 = Main.invasionSizeStart;
				}
				NetMessage.SendData(78, toWho, -1, "", Main.invasionSizeStart - Main.invasionSize, (float)num3, (float)(Main.invasionType + 3), 0f, 0, 0, 0);
			}
		}

		public static void ReportInvasionProgress(int progress, int progressMax, int icon, int progressWave)
		{
			Main.invasionProgress = progress;
			Main.invasionProgressMax = progressMax;
			Main.invasionProgressIcon = icon;
			Main.invasionProgressWave = progressWave;
			Main.invasionProgressDisplayLeft = 160;
		}

		public static void DrawInvasionProgress()
		{
			if (Main.invasionProgress == -1)
			{
				return;
			}
			if (Main.invasionProgressMode == 2 && Main.invasionProgressNearInvasion && Main.invasionProgressDisplayLeft < 160)
			{
				Main.invasionProgressDisplayLeft = 160;
			}
			if (!Main.gamePaused && Main.invasionProgressDisplayLeft > 0)
			{
				Main.invasionProgressDisplayLeft--;
			}
			if (Main.invasionProgressDisplayLeft > 0)
			{
				Main.invasionProgressAlpha += 0.05f;
			}
			else
			{
				Main.invasionProgressAlpha -= 0.05f;
			}
			if (Main.invasionProgressAlpha < 0f)
			{
				Main.invasionProgressAlpha = 0f;
			}
			if (Main.invasionProgressAlpha > 1f)
			{
				Main.invasionProgressAlpha = 1f;
			}
			if (Main.invasionProgressAlpha <= 0f)
			{
				return;
			}
			float num = 0.5f + Main.invasionProgressAlpha * 0.5f;
			Texture2D texture2D = Main.extraTexture[9];
			string text = "";
			Microsoft.Xna.Framework.Color c = Microsoft.Xna.Framework.Color.White;
			if (Main.invasionProgressIcon == 1)
			{
				texture2D = Main.extraTexture[8];
				text = Lang.inter[83];
				c = new Microsoft.Xna.Framework.Color(64, 109, 164) * 0.5f;
			}
			else if (Main.invasionProgressIcon == 2)
			{
				texture2D = Main.extraTexture[12];
				text = Lang.inter[84];
				c = new Microsoft.Xna.Framework.Color(112, 86, 114) * 0.5f;
			}
			else if (Main.invasionProgressIcon == 3)
			{
				texture2D = Main.extraTexture[79];
				text = Language.GetTextValue("DungeonDefenders2.InvasionProgressTitle");
				c = new Microsoft.Xna.Framework.Color(88, 0, 160) * 0.5f;
			}
			else if (Main.invasionProgressIcon == 7)
			{
				texture2D = Main.extraTexture[10];
				text = Lang.inter[85];
				c = new Microsoft.Xna.Framework.Color(165, 160, 155) * 0.5f;
			}
			else if (Main.invasionProgressIcon == 6)
			{
				texture2D = Main.extraTexture[11];
				text = Lang.inter[86];
				c = new Microsoft.Xna.Framework.Color(148, 122, 72) * 0.5f;
			}
			else if (Main.invasionProgressIcon == 5)
			{
				texture2D = Main.extraTexture[7];
				text = Lang.inter[87];
				c = new Microsoft.Xna.Framework.Color(173, 135, 140) * 0.5f;
			}
			else if (Main.invasionProgressIcon == 4)
			{
				texture2D = Main.extraTexture[9];
				text = Lang.inter[88];
				c = new Microsoft.Xna.Framework.Color(94, 72, 131) * 0.5f;
			}
			if (Main.invasionProgressWave > 0)
			{
				int num2 = (int)(200f * num);
				int num3 = (int)(45f * num);
				Vector2 vector = new Vector2((float)(Main.screenWidth - 120), (float)(Main.screenHeight - 40));
				Microsoft.Xna.Framework.Rectangle r = new Microsoft.Xna.Framework.Rectangle((int)vector.X - num2 / 2, (int)vector.Y - num3 / 2, num2, num3);
				Utils.DrawInvBG(Main.spriteBatch, r, new Microsoft.Xna.Framework.Color(63, 65, 151, 255) * 0.785f);
				string text2;
				if (Main.invasionProgressMax == 0)
				{
					text2 = Language.GetTextValue("Game.InvasionPoints", Main.invasionProgress);
				}
				else
				{
					text2 = (int)((float)Main.invasionProgress * 100f / (float)Main.invasionProgressMax) + "%";
				}
				text2 = Language.GetTextValue("Game.WaveMessage", Main.invasionProgressWave, text2);
				Texture2D texture2D2 = Main.colorBarTexture;
				Texture2D arg_34D_0 = Main.colorBlipTexture;
				float num4 = MathHelper.Clamp((float)Main.invasionProgress / (float)Main.invasionProgressMax, 0f, 1f);
				if (Main.invasionProgressMax == 0)
				{
					num4 = 1f;
				}
				float num5 = 169f * num;
				float num6 = 8f * num;
				Vector2 vector2 = vector + Vector2.UnitY * num6 + Vector2.UnitX * 1f;
				Utils.DrawBorderString(Main.spriteBatch, text2, vector2, Microsoft.Xna.Framework.Color.White * Main.invasionProgressAlpha, num, 0.5f, 1f, -1);
				Main.spriteBatch.Draw(texture2D2, vector, null, Microsoft.Xna.Framework.Color.White * Main.invasionProgressAlpha, 0f, new Vector2((float)(texture2D2.Width / 2), 0f), num, SpriteEffects.None, 0f);
				vector2 += Vector2.UnitX * (num4 - 0.5f) * num5;
				Main.spriteBatch.Draw(Main.magicPixel, vector2, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), new Microsoft.Xna.Framework.Color(255, 241, 51) * Main.invasionProgressAlpha, 0f, new Vector2(1f, 0.5f), new Vector2(num5 * num4, num6), SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.magicPixel, vector2, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), new Microsoft.Xna.Framework.Color(255, 165, 0, 127) * Main.invasionProgressAlpha, 0f, new Vector2(1f, 0.5f), new Vector2(2f, num6), SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.magicPixel, vector2, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), Microsoft.Xna.Framework.Color.Black * Main.invasionProgressAlpha, 0f, new Vector2(0f, 0.5f), new Vector2(num5 * (1f - num4), num6), SpriteEffects.None, 0f);
			}
			else
			{
				int num7 = (int)(200f * num);
				int num8 = (int)(45f * num);
				Vector2 vector3 = new Vector2((float)(Main.screenWidth - 120), (float)(Main.screenHeight - 40));
				Microsoft.Xna.Framework.Rectangle r2 = new Microsoft.Xna.Framework.Rectangle((int)vector3.X - num7 / 2, (int)vector3.Y - num8 / 2, num7, num8);
				Utils.DrawInvBG(Main.spriteBatch, r2, new Microsoft.Xna.Framework.Color(63, 65, 151, 255) * 0.785f);
				string text3;
				if (Main.invasionProgressMax == 0)
				{
					text3 = Main.invasionProgress.ToString();
				}
				else
				{
					text3 = ((int)((float)Main.invasionProgress * 100f / (float)Main.invasionProgressMax)).ToString() + "%";
				}
				text3 = Language.GetTextValue("Game.WaveCleared", text3);
				Texture2D texture2D3 = Main.colorBarTexture;
				Texture2D arg_642_0 = Main.colorBlipTexture;
				if (Main.invasionProgressMax != 0)
				{
					Main.spriteBatch.Draw(texture2D3, vector3, null, Microsoft.Xna.Framework.Color.White * Main.invasionProgressAlpha, 0f, new Vector2((float)(texture2D3.Width / 2), 0f), num, SpriteEffects.None, 0f);
					float num9 = MathHelper.Clamp((float)Main.invasionProgress / (float)Main.invasionProgressMax, 0f, 1f);
					float num10 = 169f * num;
					float num11 = 8f * num;
					Vector2 vector4 = vector3 + Vector2.UnitY * num11 + Vector2.UnitX * 1f;
					Utils.DrawBorderString(Main.spriteBatch, text3, vector4, Microsoft.Xna.Framework.Color.White * Main.invasionProgressAlpha, num, 0.5f, 1f, -1);
					vector4 += Vector2.UnitX * (num9 - 0.5f) * num10;
					Main.spriteBatch.Draw(Main.magicPixel, vector4, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), new Microsoft.Xna.Framework.Color(255, 241, 51) * Main.invasionProgressAlpha, 0f, new Vector2(1f, 0.5f), new Vector2(num10 * num9, num11), SpriteEffects.None, 0f);
					Main.spriteBatch.Draw(Main.magicPixel, vector4, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), new Microsoft.Xna.Framework.Color(255, 165, 0, 127) * Main.invasionProgressAlpha, 0f, new Vector2(1f, 0.5f), new Vector2(2f, num11), SpriteEffects.None, 0f);
					Main.spriteBatch.Draw(Main.magicPixel, vector4, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), Microsoft.Xna.Framework.Color.Black * Main.invasionProgressAlpha, 0f, new Vector2(0f, 0.5f), new Vector2(num10 * (1f - num9), num11), SpriteEffects.None, 0f);
				}
			}
			Vector2 center = new Vector2((float)(Main.screenWidth - 120), (float)(Main.screenHeight - 80));
			Vector2 value = Main.fontItemStack.MeasureString(text);
			Microsoft.Xna.Framework.Rectangle r3 = Utils.CenteredRectangle(center, (value + new Vector2((float)(texture2D.Width + 20), 10f)) * num);
			Utils.DrawInvBG(Main.spriteBatch, r3, c);
			Main.spriteBatch.Draw(texture2D, r3.Left() + Vector2.UnitX * num * 8f, null, Microsoft.Xna.Framework.Color.White * Main.invasionProgressAlpha, 0f, new Vector2(0f, (float)(texture2D.Height / 2)), num * 0.8f, SpriteEffects.None, 0f);
			Utils.DrawBorderString(Main.spriteBatch, text, r3.Right() + Vector2.UnitX * num * -8f, Microsoft.Xna.Framework.Color.White * Main.invasionProgressAlpha, num * 0.9f, 1f, 0.4f, -1);
		}

		protected void QuitGame()
		{
			Main.SaveSettings();
#if CLIENT
			SocialAPI.Shutdown();
#endif
			base.Exit();
#if MAC
            SDL.SDL_DestroyWindow(base.Window.Handle);
#endif
        }

		protected Microsoft.Xna.Framework.Color randColor()
		{
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			while (num + num3 + num2 <= 150)
			{
				num = Main.rand.Next(256);
				num2 = Main.rand.Next(256);
				num3 = Main.rand.Next(256);
			}
			return new Microsoft.Xna.Framework.Color(num, num2, num3, 255);
		}

		public static Microsoft.Xna.Framework.Color hslToRgb(float Hue, float Saturation, float Luminosity)
		{
			byte r;
			byte g;
			byte b;
			if (Saturation == 0f)
			{
				r = (byte)Math.Round((double)Luminosity * 255.0);
				g = (byte)Math.Round((double)Luminosity * 255.0);
				b = (byte)Math.Round((double)Luminosity * 255.0);
			}
			else
			{
				double num = (double)Hue;
				double num2;
				if ((double)Luminosity < 0.5)
				{
					num2 = (double)Luminosity * (1.0 + (double)Saturation);
				}
				else
				{
					num2 = (double)(Luminosity + Saturation - Luminosity * Saturation);
				}
				double t = 2.0 * (double)Luminosity - num2;
				double num3 = num + 0.33333333333333331;
				double num4 = num;
				double num5 = num - 0.33333333333333331;
				num3 = Main.hue2rgb(num3, t, num2);
				num4 = Main.hue2rgb(num4, t, num2);
				num5 = Main.hue2rgb(num5, t, num2);
				r = (byte)Math.Round(num3 * 255.0);
				g = (byte)Math.Round(num4 * 255.0);
				b = (byte)Math.Round(num5 * 255.0);
			}
			return new Microsoft.Xna.Framework.Color((int)r, (int)g, (int)b);
		}

		public static double hue2rgb(double c, double t1, double t2)
		{
			if (c < 0.0)
			{
				c += 1.0;
			}
			if (c > 1.0)
			{
				c -= 1.0;
			}
			if (6.0 * c < 1.0)
			{
				return t1 + (t2 - t1) * 6.0 * c;
			}
			if (2.0 * c < 1.0)
			{
				return t2;
			}
			if (3.0 * c < 2.0)
			{
				return t1 + (t2 - t1) * (0.66666666666666663 - c) * 6.0;
			}
			return t1;
		}

		public static Vector3 rgbToHsl(Microsoft.Xna.Framework.Color newColor)
		{
			float num = (float)newColor.R;
			float num2 = (float)newColor.G;
			float num3 = (float)newColor.B;
			num /= 255f;
			num2 /= 255f;
			num3 /= 255f;
			float num4 = Math.Max(num, num2);
			num4 = Math.Max(num4, num3);
			float num5 = Math.Min(num, num2);
			num5 = Math.Min(num5, num3);
			float num6 = 0f;
			float num7 = (num4 + num5) / 2f;
			float y;
			if (num4 == num5)
			{
				y = (num6 = 0f);
			}
			else
			{
				float num8 = num4 - num5;
				y = (((double)num7 > 0.5) ? (num8 / (2f - num4 - num5)) : (num8 / (num4 + num5)));
				if (num4 == num)
				{
					num6 = (num2 - num3) / num8 + (float)((num2 < num3) ? 6 : 0);
				}
				if (num4 == num2)
				{
					num6 = (num3 - num) / num8 + 2f;
				}
				if (num4 == num3)
				{
					num6 = (num - num2) / num8 + 4f;
				}
				num6 /= 6f;
			}
			return new Vector3(num6, y, num7);
		}

		public static void DrawCursor(Vector2 bonus, bool smart = false)
		{
			if (Main.player[Main.myPlayer].dead)
			{
				Main.SmartInteractShowingGenuine = false;
				Main.SmartInteractShowingFake = false;
				Main.SmartInteractNPC = -1;
				Main.SmartInteractNPCsNearby.Clear();
				Main.SmartInteractTileCoords.Clear();
				Main.SmartInteractTileCoordsSelected.Clear();
				Main.TileInteractionLX = (Main.TileInteractionHX = (Main.TileInteractionLY = (Main.TileInteractionHY = -1)));
			}
			bool flag = UILinkPointNavigator.Available && !PlayerInput.InBuildingMode;
			Microsoft.Xna.Framework.Color color = Main.cursorColor;
			if (!PlayerInput.UsingGamepad)
			{
				int num = smart.ToInt();
				Main.spriteBatch.Draw(Main.cursorTextures[num], new Vector2((float)Main.mouseX, (float)Main.mouseY) + bonus + Vector2.One, null, new Microsoft.Xna.Framework.Color((int)((float)color.R * 0.2f), (int)((float)color.G * 0.2f), (int)((float)color.B * 0.2f), (int)((float)color.A * 0.5f)), 0f, default(Vector2), Main.cursorScale * 1.1f, SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.cursorTextures[num], new Vector2((float)Main.mouseX, (float)Main.mouseY) + bonus, null, color, 0f, default(Vector2), Main.cursorScale, SpriteEffects.None, 0f);
				return;
			}
			if (Main.player[Main.myPlayer].dead && !Main.player[Main.myPlayer].ghost && !Main.gameMenu)
			{
				return;
			}
			if (PlayerInput.InvisibleGamepadInMenus)
			{
				return;
			}
			if (smart && !flag)
			{
				color = Microsoft.Xna.Framework.Color.White * Main.GamepadCursorAlpha;
				int num2 = 13;
				int frameX = 0;
				Main.spriteBatch.Draw(Main.cursorTextures[num2], new Vector2((float)Main.mouseX, (float)Main.mouseY) + bonus, new Microsoft.Xna.Framework.Rectangle?(Main.cursorTextures[num2].Frame(2, 1, frameX, 0)), color, 0f, Main.cursorTextures[num2].Frame(2, 1, frameX, 0).Size() / 2f, Main.cursorScale, SpriteEffects.None, 0f);
				return;
			}
			color = Microsoft.Xna.Framework.Color.White;
			int num3 = 15;
			Main.spriteBatch.Draw(Main.cursorTextures[num3], new Vector2((float)Main.mouseX, (float)Main.mouseY) + bonus, null, color, 0f, Main.cursorTextures[num3].Size() / 2f, Main.cursorScale, SpriteEffects.None, 0f);
		}

		public static Vector2 DrawThickCursor(bool smart = false)
		{
			if (!Main.ThickMouse)
			{
				return Vector2.Zero;
			}
			if (PlayerInput.UsingGamepad && PlayerInput.InvisibleGamepadInMenus)
			{
				return Vector2.Zero;
			}
			if (PlayerInput.UsingGamepad && Main.player[Main.myPlayer].dead && !Main.player[Main.myPlayer].ghost && !Main.gameMenu)
			{
				return Vector2.Zero;
			}
			bool flag = UILinkPointNavigator.Available && !PlayerInput.InBuildingMode;
			Microsoft.Xna.Framework.Color color = Main.MouseBorderColor;
			int num = 11;
			num += smart.ToInt();
			for (int i = 0; i < 4; i++)
			{
				Vector2 vector = Vector2.Zero;
				switch (i)
				{
				case 0:
					vector = new Vector2(0f, 1f);
					break;
				case 1:
					vector = new Vector2(1f, 0f);
					break;
				case 2:
					vector = new Vector2(0f, -1f);
					break;
				case 3:
					vector = new Vector2(-1f, 0f);
					break;
				}
				vector *= 1f;
				vector += Vector2.One * 2f;
				Vector2 origin = new Vector2(2f);
				Microsoft.Xna.Framework.Rectangle? sourceRectangle = null;
				float scale = Main.cursorScale * 1.1f;
				if (PlayerInput.UsingGamepad)
				{
					if (smart && !flag)
					{
						num = 13;
						int frameX = 0;
						vector = Vector2.One;
						sourceRectangle = new Microsoft.Xna.Framework.Rectangle?(Main.cursorTextures[num].Frame(2, 1, frameX, 0));
						origin = Main.cursorTextures[num].Frame(2, 1, frameX, 0).Size() / 2f;
						color *= Main.GamepadCursorAlpha;
					}
					else
					{
						num = 15;
						vector = Vector2.One;
						origin = Main.cursorTextures[num].Size() / 2f;
					}
				}
				Main.spriteBatch.Draw(Main.cursorTextures[num], new Vector2((float)Main.mouseX, (float)Main.mouseY) + vector, sourceRectangle, color, 0f, origin, scale, SpriteEffects.None, 0f);
			}
			return new Vector2(2f);
		}

		private void OnCharacterNamed(string text)
		{
			Main.PendingPlayer.name = text.Trim();
			PlayerFileData.CreateAndSave(Main.PendingPlayer);
			Main.LoadPlayers();
			Main.menuMode = 1;
		}

		private void OnSeedSelected(string text)
		{
			text = text.Trim();
			if (text.Length == 0)
			{
				Main.ActiveWorldFileData.SetSeedToRandom();
			}
			else
			{
				Main.ActiveWorldFileData.SetSeed(text);
			}
			Main.menuMode = 10;
			WorldGen.CreateNewWorld(null);
		}

		private void OnWorldNamed(string text)
		{
			Main.menuMode = 10;
			Main.worldName = text.Trim();
			Main.ActiveWorldFileData = WorldFile.CreateMetadata(Main.worldName, SocialAPI.Cloud != null && SocialAPI.Cloud.EnabledByDefault, Main.expertMode);
			if (Main.UseSeedUI)
			{
				Main.menuMode = 5000;
				return;
			}
			WorldGen.CreateNewWorld(null);
		}

		private static Action CreateGoToMenuEvent(int menu)
		{
			return delegate
			{
				Main.menuMode = menu;
				UILinkPointNavigator.Shortcuts.FANCYUI_SPECIAL_INSTRUCTIONS = 0;
			};
		}

		protected void DrawMenu(GameTime gameTime)
		{
			if (!Main.IsEngineLoaded)
			{
				Main.IsEngineLoaded = true;
				if (Main.OnEngineLoad != null)
				{
					Main.OnEngineLoad();
				}
			}
			GamepadMainMenuHandler.Update();
			GamepadMainMenuHandler.MenuItemPositions.Clear();
			int num = Main.menuMode;
			if (Main.menuMode <= 1 && Main.slimeRain)
			{
				Main.StopSlimeRain(true);
			}
			Main.render = false;
			Star.UpdateStars();
			Cloud.UpdateClouds();
			Main.holyTiles = 0;
			Main.evilTiles = 0;
			Main.shroomTiles = 0;
			Main.bloodTiles = 0;
			Main.bloodTiles = 0;
			Main.jungleTiles = 0;
			Main.drawingPlayerChat = false;
			for (int i = 0; i < Main.numChatLines; i++)
			{
				Main.chatLine[i] = new ChatLine();
			}
			this.DrawFPS();
			Main.screenLastPosition = Main.screenPosition;
			Main.screenPosition.Y = (float)(Main.worldSurface * 16.0 - (double)Main.screenHeight);
			if (Main.grabSky)
			{
				Main.screenPosition.X = Main.screenPosition.X + (float)(Main.mouseX - Main.screenWidth / 2) * 0.02f;
			}
			else
			{
				Main.screenPosition.X = Main.screenPosition.X + 2f;
			}
			if (Main.screenPosition.X > 2.14748352E+09f)
			{
				Main.screenPosition.X = 0f;
			}
			if (Main.screenPosition.X < -2.14748352E+09f)
			{
				Main.screenPosition.X = 0f;
			}
			Main.background = 0;
			byte b = (byte)((255 + Main.tileColor.R * 2) / 3);
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, 255);
			this.logoRotation += this.logoRotationSpeed * 3E-05f;
			if ((double)this.logoRotation > 0.1)
			{
				this.logoRotationDirection = -1f;
			}
			else if ((double)this.logoRotation < -0.1)
			{
				this.logoRotationDirection = 1f;
			}
			if (this.logoRotationSpeed < 20f & this.logoRotationDirection == 1f)
			{
				this.logoRotationSpeed += 1f;
			}
			else if (this.logoRotationSpeed > -20f & this.logoRotationDirection == -1f)
			{
				this.logoRotationSpeed -= 1f;
			}
			this.logoScale += this.logoScaleSpeed * 1E-05f;
			if ((double)this.logoScale > 1.1)
			{
				this.logoScaleDirection = -1f;
			}
			else if ((double)this.logoScale < 0.9)
			{
				this.logoScaleDirection = 1f;
			}
			if (this.logoScaleSpeed < 50f & this.logoScaleDirection == 1f)
			{
				this.logoScaleSpeed += 1f;
			}
			else if (this.logoScaleSpeed > -50f & this.logoScaleDirection == -1f)
			{
				this.logoScaleSpeed -= 1f;
			}
			Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color((int)((byte)((float)color.R * ((float)Main.LogoA / 255f))), (int)((byte)((float)color.G * ((float)Main.LogoA / 255f))), (int)((byte)((float)color.B * ((float)Main.LogoA / 255f))), (int)((byte)((float)color.A * ((float)Main.LogoA / 255f))));
			Microsoft.Xna.Framework.Color color3 = new Microsoft.Xna.Framework.Color((int)((byte)((float)color.R * ((float)Main.LogoB / 255f))), (int)((byte)((float)color.G * ((float)Main.LogoB / 255f))), (int)((byte)((float)color.B * ((float)Main.LogoB / 255f))), (int)((byte)((float)color.A * ((float)Main.LogoB / 255f))));
			Main.spriteBatch.Draw(Main.logoTexture, new Vector2((float)(Main.screenWidth / 2), 100f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.logoTexture.Width, Main.logoTexture.Height)), color2, this.logoRotation, new Vector2((float)(Main.logoTexture.Width / 2), (float)(Main.logoTexture.Height / 2)), this.logoScale, SpriteEffects.None, 0f);
			Main.spriteBatch.Draw(Main.logo2Texture, new Vector2((float)(Main.screenWidth / 2), 100f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.logoTexture.Width, Main.logoTexture.Height)), color3, this.logoRotation, new Vector2((float)(Main.logoTexture.Width / 2), (float)(Main.logoTexture.Height / 2)), this.logoScale, SpriteEffects.None, 0f);
			if (Main.dayTime)
			{
				Main.LogoA += 2;
				if (Main.LogoA > 255)
				{
					Main.LogoA = 255;
				}
				Main.LogoB--;
				if (Main.LogoB < 0)
				{
					Main.LogoB = 0;
				}
			}
			else
			{
				Main.LogoB += 2;
				if (Main.LogoB > 255)
				{
					Main.LogoB = 255;
				}
				Main.LogoA--;
				if (Main.LogoA < 0)
				{
					Main.LogoA = 0;
					Main.LogoT = true;
				}
			}
			int num2 = 250;
			int num3 = Main.screenWidth / 2;
			int num4 = 80;
			int num5 = 0;
			int num6 = Main.menuMode;
			int num7 = 0;
			int num8 = 0;
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			int num9 = 0;
			bool[] array = new bool[Main.maxMenuItems];
			bool[] array2 = new bool[Main.maxMenuItems];
			bool[] array3 = new bool[Main.maxMenuItems];
			int[] array4 = new int[Main.maxMenuItems];
			int[] array5 = new int[Main.maxMenuItems];
			byte[] array6 = new byte[Main.maxMenuItems];
			float[] array7 = new float[Main.maxMenuItems];
			bool[] array8 = new bool[Main.maxMenuItems];
			bool flag4 = false;
			bool flag5 = UILinkPointNavigator.Shortcuts.BackButtonInUse && !UILinkPointNavigator.Shortcuts.BackButtonLock;
			for (int j = 0; j < Main.maxMenuItems; j++)
			{
				array[j] = false;
				array2[j] = false;
				array4[j] = 0;
				array5[j] = 0;
				array7[j] = 1f;
			}
			string[] array9 = new string[Main.maxMenuItems];
			if (Main.menuMode == -1)
			{
				Main.menuMode = 0;
			}
			bool loadedEverything = Program.LoadedEverything;
			if (loadedEverything)
			{
				GamepadMainMenuHandler.CanRun = true;
			}
			if (!loadedEverything)
			{
				array[0] = true;
				array9[0] = string.Format("   {0}  {1,-10}", Language.GetTextValue("UI.LoadingCode"), Program.LoadedPercentage.ToString("P0"));
				num5 = 1;
			}
			else if (Main.menuMode == 1212)
			{
				if (this.focusMenu == 2)
				{
					array9[0] = "Wählen Sie die Sprache";
				}
				else if (this.focusMenu == 3)
				{
					array9[0] = "Selezionare la lingua";
				}
				else if (this.focusMenu == 4)
				{
					array9[0] = "Sélectionnez la langue";
				}
				else if (this.focusMenu == 5)
				{
					array9[0] = "Seleccione el idioma";
				}
				else
				{
					array9[0] = "Select language";
				}
				num4 = 50;
				num2 = 200;
				array4[1] = 25;
				array4[2] = 25;
				array4[3] = 25;
				array4[4] = 25;
				array4[5] = 25;
				array[0] = true;
				array9[1] = "English";
				array9[2] = "Deutsch";
				array9[3] = "Italiano";
				array9[4] = "Française";
				array9[5] = "Español";
				num5 = 6;
				if (this.selectedMenu >= 1)
				{
					Lang.lang = this.selectedMenu;
					Lang.setLang(false);
					Main.menuMode = 0;
					Main.PlaySound(10, -1, -1, 1, 1f, 0f);
					Main.SaveSettings();
				}
			}
			else if (Main.menuMode == 1213)
			{
				if (this.focusMenu == 1)
				{
					array9[0] = "Select language";
				}
				else if (this.focusMenu == 2)
				{
					array9[0] = "Wählen Sie die Sprache";
				}
				else if (this.focusMenu == 3)
				{
					array9[0] = "Selezionare la lingua";
				}
				else if (this.focusMenu == 4)
				{
					array9[0] = "Sélectionnez la langue";
				}
				else if (this.focusMenu == 5)
				{
					array9[0] = "Seleccione el idioma";
				}
				else
				{
					array9[0] = Lang.menu[102];
				}
				num4 = 48;
				num2 = 180;
				array4[1] = 25;
				array4[2] = 25;
				array4[3] = 25;
				array4[4] = 25;
				array4[5] = 25;
				array4[6] = 50;
				array[0] = true;
				array9[1] = "English";
				array9[2] = "Deutsch";
				array9[3] = "Italiano";
				array9[4] = "Française";
				array9[5] = "Español";
				array9[6] = Lang.menu[5];
				num5 = 7;
				if (this.selectedMenu == 6 || flag5)
				{
					flag5 = false;
					Main.menuMode = 11;
					Main.PlaySound(11, -1, -1, 1, 1f, 0f);
				}
				else if (this.selectedMenu >= 1)
				{
					Lang.lang = this.selectedMenu;
					Lang.setLang(false);
					Main.PlaySound(12, -1, -1, 1, 1f, 0f);
					Main.SaveSettings();
				}
			}
			else if (Main.netMode == 2)
			{
				bool flag6 = true;
				for (int k = 0; k < 8; k++)
				{
					if (k < 255)
					{
						try
						{
							array9[k] = Netplay.Clients[k].StatusText;
							if (Netplay.Clients[k].IsActive && Main.showSpam)
							{
								string[] array10;
								string[] expr_90A = array10 = array9;
								IntPtr intPtr;
								int expr_90F = (int)(intPtr = (IntPtr)k);
								object obj = array10[(int)intPtr];
								expr_90A[expr_90F] = string.Concat(new object[]
								{
									obj,
									" (",
									NetMessage.buffer[k].spamCount,
									")"
								});
							}
						}
						catch
						{
							array9[k] = "";
						}
						array[k] = true;
						if (array9[k] != "" && array9[k] != null)
						{
							flag6 = false;
						}
					}
				}
				if (flag6)
				{
					array9[0] = Lang.menu[0];
					array9[1] = Lang.menu[1] + Netplay.ListenPort + ".";
				}
				num5 = 11;
				array9[9] = Main.statusText;
				array[9] = true;
				num2 = 170;
				num4 = 30;
				array4[10] = 20;
				array4[10] = 40;
				array9[10] = Lang.menu[2];
				if (this.selectedMenu == 10 || flag5)
				{
					flag5 = false;
					Netplay.disconnect = true;
					Main.PlaySound(11, -1, -1, 1, 1f, 0f);
				}
			}
			else if (Main.menuMode == 31)
			{
				string serverPassword = Netplay.ServerPassword;
				PlayerInput.WritingText = true;
				flag5 = false;
				Netplay.ServerPassword = Main.GetInputText(Netplay.ServerPassword);
				if (serverPassword != Netplay.ServerPassword)
				{
					Main.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
				array9[0] = Lang.menu[3];
				this.textBlinkerCount++;
				if (this.textBlinkerCount >= 20)
				{
					if (this.textBlinkerState == 0)
					{
						this.textBlinkerState = 1;
					}
					else
					{
						this.textBlinkerState = 0;
					}
					this.textBlinkerCount = 0;
				}
				array9[1] = Netplay.ServerPassword;
				if (Main.HidePassword)
				{
					array9[1] = "";
					for (int l = 0; l < Netplay.ServerPassword.Length; l++)
					{
						string[] array10;
						(array10 = array9)[1] = array10[1] + "*";
					}
				}
				if (this.textBlinkerState == 1)
				{
					string[] array10;
					(array10 = array9)[1] = array10[1] + "|";
					array5[1] = 1;
				}
				else
				{
					string[] array10;
					(array10 = array9)[1] = array10[1] + " ";
				}
				array[0] = true;
				array[1] = true;
				array4[1] = -20;
				array4[2] = 20;
				array9[2] = Lang.menu[4];
				array9[3] = Lang.menu[5];
				num5 = 4;
				if (this.selectedMenu == 3 || flag5)
				{
					flag5 = false;
					Main.PlaySound(11, -1, -1, 1, 1f, 0f);
					Main.menuMode = 0;
					Netplay.disconnect = true;
					Netplay.ServerPassword = "";
				}
				else if (this.selectedMenu == 2 || Main.inputTextEnter)
				{
					NetMessage.SendData(38, -1, -1, Netplay.ServerPassword, 0, 0f, 0f, 0f, 0, 0, 0);
					Main.menuMode = 14;
				}
			}
			else
			{
				if (Main.netMode == 1 || Main.menuMode == 14)
				{
					num5 = 2;
					array9[0] = Main.statusText;
					array[0] = true;
					num2 = 300;
					array9[1] = Lang.menu[6];
					if (this.selectedMenu != 1 && !flag5)
					{
						goto IL_5075;
					}
					flag5 = false;
					Netplay.disconnect = true;
					Netplay.Connection.Socket.Close();
					Main.PlaySound(11, -1, -1, 1, 1f, 0f);
					Main.menuMode = 0;
					Main.netMode = 0;
					try
					{
						this.tServer.Kill();
						goto IL_5075;
					}
					catch
					{
						goto IL_5075;
					}
				}
				if (Main.menuMode == 882)
				{
					num5 = 2;
					array[0] = true;
					num2 = 300;
					array9[0] = Main.statusText;
					array9[1] = Lang.menu[6];
					if (this.selectedMenu == 1 || flag5)
					{
						flag5 = false;
						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
						Main.menuMode = 0;
						Main.netMode = 0;
						if (SocialAPI.Network != null)
						{
							SocialAPI.Network.CancelJoin();
						}
					}
				}
				else if (Main.menuMode == 30)
				{
					string serverPassword2 = Netplay.ServerPassword;
					PlayerInput.WritingText = true;
					flag5 = false;
					Netplay.ServerPassword = Main.GetInputText(Netplay.ServerPassword);
					if (serverPassword2 != Netplay.ServerPassword)
					{
						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
					}
					array9[0] = Lang.menu[7];
					this.textBlinkerCount++;
					if (this.textBlinkerCount >= 20)
					{
						if (this.textBlinkerState == 0)
						{
							this.textBlinkerState = 1;
						}
						else
						{
							this.textBlinkerState = 0;
						}
						this.textBlinkerCount = 0;
					}
					array9[1] = Netplay.ServerPassword;
					if (Main.HidePassword)
					{
						array9[1] = "";
						for (int m = 0; m < Netplay.ServerPassword.Length; m++)
						{
							string[] array10;
							(array10 = array9)[1] = array10[1] + "*";
						}
					}
					if (this.textBlinkerState == 1)
					{
						string[] array10;
						(array10 = array9)[1] = array10[1] + "|";
						array5[1] = 1;
					}
					else
					{
						string[] array10;
						(array10 = array9)[1] = array10[1] + " ";
					}
					array[0] = true;
					array[1] = true;
					array4[1] = -20;
					array4[2] = 20;
					array9[2] = Lang.menu[4];
					array9[3] = Lang.menu[5];
					num5 = 4;
					if (this.selectedMenu == 3 || flag5)
					{
						flag5 = false;
						if (SocialAPI.Network != null)
						{
							Main.menuMode = 889;
						}
						else
						{
							Main.menuMode = 6;
						}
						Netplay.ServerPassword = "";
					}
					else if (this.selectedMenu == 2 || Main.inputTextEnter || Main.autoPass)
					{
						string text = string.Concat(new object[]
						{
							"-autoshutdown -password \"",
							Netplay.ServerPassword,
							"\" -lang ",
							Lang.lang
						});
#if LINUX
						if (IntPtr.Size == 8)
						{
							text += " -x64";
						}
						else
						{
							text += " -x86";
						}
#endif
						if (Main.ActiveWorldFileData.IsCloudSave)
						{
							text = text + " -cloudworld \"" + Main.worldPathName + "\"";
						}
						else
						{
							text = text + " -world \"" + Main.worldPathName + "\"";
						}
#if WINDOWS
						this.tServer.StartInfo.FileName = "TerrariaServer.exe";
#else
						this.tServer.StartInfo.FileName = "TerrariaServer";
#endif
						this.tServer.StartInfo.Arguments = text;
						if (Main.libPath != "")
						{
							ProcessStartInfo expr_F4F = this.tServer.StartInfo;
							expr_F4F.Arguments = expr_F4F.Arguments + " -loadlib " + Main.libPath;
						}
						this.tServer.StartInfo.UseShellExecute = false;
						this.tServer.StartInfo.CreateNoWindow = true;
						if (SocialAPI.Network != null)
						{
							SocialAPI.Network.LaunchLocalServer(this.tServer, Main.MenuServerMode);
						}
						else
						{
							this.tServer.Start();
						}
						Netplay.SetRemoteIP("127.0.0.1");
						Main.autoPass = true;
						Main.statusText = Lang.menu[8];
						Netplay.StartTcpClient();
						Main.menuMode = 10;
					}
				}
				else if (Main.menuMode == 889)
				{
					num2 = 200;
					num4 = 60;
					array4[1] = 30;
					array4[2] = 30;
					array4[3] = 30;
					array4[4] = 70;
					array4[5] = 70;
					num5 = 6;
					array9[0] = Lang.menu[135];
					array9[4] = Lang.menu[144];
					array9[5] = Lang.menu[5];
					array[0] = true;
					if (!Main.MenuServerMode.HasFlag(ServerMode.Lobby))
					{
						Main.MenuServerMode = ServerMode.None;
						array[2] = true;
						array[3] = true;
						array9[1] = Lang.menu[136];
						array9[2] = "";
						array9[3] = "";
					}
					else
					{
						array9[1] = Lang.menu[137];
						if (Main.MenuServerMode.HasFlag(ServerMode.FriendsCanJoin))
						{
							array9[2] = Lang.menu[139];
							if (Main.MenuServerMode.HasFlag(ServerMode.FriendsOfFriends))
							{
								array9[3] = Lang.menu[143];
							}
							else
							{
								array9[3] = Lang.menu[142];
							}
						}
						else
						{
							array9[2] = Lang.menu[138];
							if (Main.MenuServerMode.HasFlag(ServerMode.FriendsOfFriends))
							{
								array9[3] = Lang.menu[141];
							}
							else
							{
								array9[3] = Lang.menu[140];
							}
						}
					}
					if (flag5)
					{
						flag5 = false;
						this.selectedMenu = 5;
					}
					switch (this.selectedMenu)
					{
					case 1:
						Main.MenuServerMode ^= ServerMode.Lobby;
						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
						break;
					case 2:
						Main.MenuServerMode ^= ServerMode.FriendsCanJoin;
						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
						break;
					case 3:
						Main.MenuServerMode ^= ServerMode.FriendsOfFriends;
						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
						break;
					case 4:
						Main.clrInput();
						Netplay.ServerPassword = "";
						Main.GetInputText("");
						Main.autoPass = false;
						Main.menuMode = 30;
						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
						break;
					case 5:
						Main.menuMode = 6;
						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
						break;
					}
				}
				else if (Main.menuMode == 15)
				{
					num5 = 2;
					array9[0] = Main.statusText;
					array[0] = true;
					num2 = 80;
					num4 = 400;
					array9[1] = Lang.menu[5];
					if (this.selectedMenu == 1 || flag5)
					{
						flag5 = false;
						Netplay.disconnect = true;
						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
						Main.menuMode = 0;
						Main.netMode = 0;
					}
				}
				else if (Main.menuMode == 200)
				{
					num5 = 3;
					array9[0] = Lang.menu[9];
					array[0] = true;
					num2 -= 30;
					array4[1] = 70;
					array4[2] = 50;
					array9[1] = Lang.menu[10];
					array9[2] = Lang.menu[6];
					if (this.selectedMenu == 1)
					{
						if (FileUtilities.Exists(Main.worldPathName + ".bak", Main.ActiveWorldFileData.IsCloudSave))
						{
							FileUtilities.Move(Main.worldPathName + ".bak", Main.worldPathName, Main.ActiveWorldFileData.IsCloudSave, true);
							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
							WorldGen.playWorld();
							Main.menuMode = 10;
						}
						else
						{
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
							Main.menuMode = 0;
							Main.netMode = 0;
						}
					}
					if (this.selectedMenu == 2 || flag5)
					{
						flag5 = false;
						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
						Main.menuMode = 0;
						Main.netMode = 0;
					}
				}
				else if (Main.menuMode == 201)
				{
					num5 = 3;
					array9[0] = Lang.menu[9];
					array[0] = true;
					array[1] = true;
					num2 -= 30;
					array4[1] = -30;
					array4[2] = 50;
					array9[1] = Lang.menu[11];
					array9[2] = Lang.menu[5];
					if (this.selectedMenu == 2 || flag5)
					{
						flag5 = false;
						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
						Main.menuMode = 0;
						Main.netMode = 0;
					}
				}
				else if (Main.menuMode == 10)
				{
					num5 = 1;
					array9[0] = Main.statusText;
					array[0] = true;
					num2 = 300;
				}
				else if (Main.menuMode == 100)
				{
					num5 = 1;
					array9[0] = Main.statusText;
					array[0] = true;
					num2 = 300;
				}
				else if (Main.menuMode == 0)
				{
					Main._blockFancyUIWhileLoading = false;
					Main._pendingCharacterSelect = null;
					DD2Event.Ongoing = false;
					Main.eclipse = false;
					Main.pumpkinMoon = false;
					Main.snowMoon = false;
					Main.ServerSideCharacter = false;
					Main.menuMultiplayer = false;
					Main.menuServer = false;
					Main.netMode = 0;
					for (int n = 0; n < 12; n++)
					{
						string text2 = "";
						switch (n)
						{
						case 0:
							text2 = "Solar";
							break;
						case 1:
							text2 = "Vortex";
							break;
						case 2:
							text2 = "Nebula";
							break;
						case 3:
							text2 = "Stardust";
							break;
						case 4:
							text2 = "MoonLord";
							break;
						case 5:
							text2 = "MonolithSolar";
							break;
						case 6:
							text2 = "MonolithVortex";
							break;
						case 7:
							text2 = "MonolithNebula";
							break;
						case 8:
							text2 = "MonolithStardust";
							break;
						case 9:
							text2 = "Blizzard";
							break;
						case 10:
							text2 = "HeatDistortion";
							break;
						case 11:
							text2 = "Sandstorm";
							break;
						}
						if (SkyManager.Instance[text2] != null && SkyManager.Instance[text2].IsActive())
						{
							SkyManager.Instance.Deactivate(text2, new object[0]);
						}
						if (Filters.Scene[text2].IsActive())
						{
							Filters.Scene[text2].Deactivate(new object[0]);
						}
					}
					if (Filters.Scene["BloodMoon"].IsActive())
					{
						Filters.Scene["BloodMoon"].Deactivate(new object[0]);
					}
					if (SkyManager.Instance["Martian"].IsActive())
					{
						SkyManager.Instance["Martian"].Deactivate(new object[0]);
					}
					if (SkyManager.Instance["Slime"].IsActive())
					{
						SkyManager.Instance["Slime"].Deactivate(new object[0]);
					}
					int num10 = 0;
					num5 = 5;
					num4 = 60;
					array9[num10] = Lang.menu[12];
					if (this.selectedMenu == num10)
					{
						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
						Main.menuMode = 1;
					}
					num10++;
					array9[num10] = Lang.menu[13];
					if (this.selectedMenu == num10)
					{
						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
						Main.menuMode = 12;
					}
					num10++;
					array9[num10] = Lang.menu[131];
					if (this.selectedMenu == num10)
					{
						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
						Main.MenuUI.SetState(Main.AchievementsMenu);
						Main.menuMode = 888;
					}
					num10++;
					array9[num10] = Lang.menu[14];
					if (this.selectedMenu == num10)
					{
						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
						Main.menuMode = 11;
					}
					num10++;
					array9[num10] = Lang.menu[15];
					if (this.selectedMenu == num10)
					{
						this.QuitGame();
					}
					num10++;
				}
				else if (Main.menuMode == 1)
				{
					Main.MenuUI.SetState(Main._characterSelectMenu);
					Main.menuMode = 888;
				}
				else if (Main.menuMode == 2)
				{
					flag4 = true;
					if (this.selectedMenu == 0)
					{
						Main.menuMode = 17;
						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
						Main.selColor = Main.PendingPlayer.hairColor;
					}
					if (this.selectedMenu == 1)
					{
						Main.menuMode = 18;
						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
						Main.selColor = Main.PendingPlayer.eyeColor;
					}
					if (this.selectedMenu == 2)
					{
						Main.menuMode = 19;
						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
						Main.selColor = Main.PendingPlayer.skinColor;
					}
					if (this.selectedMenu == 3)
					{
						Main.menuMode = 20;
						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
					}
					array9[0] = Lang.menu[18];
					array9[1] = Lang.menu[19];
					array9[2] = Lang.menu[20];
					array9[3] = Lang.menu[21];
					num2 = 220;
					for (int num11 = 0; num11 < 9; num11++)
					{
						if (num11 < 6)
						{
							array7[num11] = 0.75f;
						}
						else
						{
							array7[num11] = 0.9f;
						}
					}
					num4 = 38;
					array4[6] = 6;
					array4[7] = 12;
					array4[8] = 18;
					num7 = Main.screenWidth / 2 - 16;
					num8 = 176;
					if (Main.PendingPlayer.Male)
					{
						array9[4] = Lang.menu[22];
					}
					else
					{
						array9[4] = Lang.menu[23];
					}
					if (this.selectedMenu == 4)
					{
						if (Main.PendingPlayer.Male)
						{
							Main.PlaySound(20, -1, -1, 1, 1f, 0f);
							Main.PendingPlayer.Male = false;
						}
						else
						{
							Main.PlaySound(1, -1, -1, 1, 1f, 0f);
							Main.PendingPlayer.Male = true;
						}
					}
					if (Main.PendingPlayer.difficulty == 2)
					{
						array9[5] = Lang.menu[24];
						array6[5] = Main.PendingPlayer.difficulty;
					}
					else if (Main.PendingPlayer.difficulty == 1)
					{
						array9[5] = Lang.menu[25];
						array6[5] = Main.PendingPlayer.difficulty;
					}
					else
					{
						array9[5] = Lang.menu[26];
					}
					if (this.selectedMenu == 5)
					{
						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
						Main.menuMode = 222;
					}
					if (this.selectedMenu == 7)
					{
						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
						Main.PendingPlayer.hair = Main.rand.Next(51);
						Main.PendingPlayer.eyeColor = this.randColor();
						while ((int)(Main.PendingPlayer.eyeColor.R + Main.PendingPlayer.eyeColor.G + Main.PendingPlayer.eyeColor.B) > 300)
						{
							Main.PendingPlayer.eyeColor = this.randColor();
						}
						Main.PendingPlayer.hairColor = this.randColor();
						Main.PendingPlayer.pantsColor = this.randColor();
						Main.PendingPlayer.shirtColor = this.randColor();
						Main.PendingPlayer.shoeColor = this.randColor();
						Main.PendingPlayer.skinColor = this.randColor();
						float num12 = (float)Main.rand.Next(60, 120) * 0.01f;
						if (num12 > 1f)
						{
							num12 = 1f;
						}
						Main.PendingPlayer.skinColor.R = (byte)((float)Main.rand.Next(240, 255) * num12);
						Main.PendingPlayer.skinColor.G = (byte)((float)Main.rand.Next(110, 140) * num12);
						Main.PendingPlayer.skinColor.B = (byte)((float)Main.rand.Next(75, 110) * num12);
						Main.PendingPlayer.underShirtColor = this.randColor();
						int num13 = Main.PendingPlayer.hair + 1;
						if (num13 == 5 || num13 == 6 || num13 == 7 || num13 == 10 || num13 == 12 || num13 == 19 || num13 == 22 || num13 == 23 || num13 == 26 || num13 == 27 || num13 == 30 || num13 == 33)
						{
							Main.PendingPlayer.Male = false;
						}
						else
						{
							Main.PendingPlayer.Male = true;
						}
						Main.PendingPlayer.skinVariant = Main.rand.Next(10);
					}
					array9[7] = Lang.menu[27];
					array9[6] = Lang.menu[28];
					array9[8] = Lang.menu[5];
					num5 = 9;
					if (this.selectedMenu == 8 || flag5)
					{
						flag5 = false;
						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
						Main.menuMode = 1;
					}
					else if (this.selectedMenu == 6)
					{
						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
						Main.PendingPlayer.name = "";
						Main.menuMode = 3;
						Main.clrInput();
					}
				}
				else if (Main.menuMode == 222)
				{
					if (this.focusMenu == 3)
					{
						array9[0] = Lang.menu[29];
					}
					else if (this.focusMenu == 2)
					{
						array9[0] = Lang.menu[30];
					}
					else if (this.focusMenu == 1)
					{
						array9[0] = Lang.menu[31];
					}
					else
					{
						array9[0] = Lang.menu[32];
					}
					num4 = 50;
					array4[1] = 25;
					array4[2] = 25;
					array4[3] = 25;
					array[0] = true;
					array9[1] = Lang.menu[26];
					array9[2] = Lang.menu[25];
					array6[2] = 1;
					array9[3] = Lang.menu[24];
					array6[3] = 2;
					num5 = 4;
					if (this.selectedMenu == 1)
					{
						Main.PendingPlayer.difficulty = 0;
						Main.menuMode = 2;
					}
					else if (this.selectedMenu == 2)
					{
						Main.menuMode = 2;
						Main.PendingPlayer.difficulty = 1;
					}
					else if (this.selectedMenu == 3)
					{
						Main.PendingPlayer.difficulty = 2;
						Main.menuMode = 2;
					}
				}
				else if (Main.menuMode == 20)
				{
					flag4 = true;
					if (this.selectedMenu == 0)
					{
						Main.menuMode = 21;
						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
						Main.selColor = Main.PendingPlayer.shirtColor;
					}
					if (this.selectedMenu == 1)
					{
						Main.menuMode = 22;
						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
						Main.selColor = Main.PendingPlayer.underShirtColor;
					}
					if (this.selectedMenu == 2)
					{
						Main.menuMode = 23;
						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
						Main.selColor = Main.PendingPlayer.pantsColor;
					}
					if (this.selectedMenu == 3)
					{
						Main.selColor = Main.PendingPlayer.shoeColor;
						Main.menuMode = 24;
						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
					}
					if (this.selectedMenu == 5 || flag5)
					{
						flag5 = false;
						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
						Main.menuMode = 2;
					}
					if (this.selectedMenu == 4)
					{
						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
						Main.CycleClothingStyle(Main.PendingPlayer);
					}
					num7 = Main.screenWidth / 2 - 16;
					num8 = 210;
					num2 = 260;
					num4 = 50;
					num5 = 6;
					array9[0] = Lang.menu[33];
					array9[1] = Lang.menu[34];
					array9[2] = Lang.menu[35];
					array9[3] = Lang.menu[36];
					array9[4] = Lang.menu[127];
					array9[5] = Lang.menu[5];
					array4[5] = 20;
				}
				else if (Main.menuMode == 17)
				{
					flag4 = true;
					num7 = Main.screenWidth / 2 - 16;
					num8 = 210;
					flag = true;
					num9 = 390;
					num2 = 260;
					num4 = 60;
					Main.PendingPlayer.hairColor = Main.selColor;
					num5 = 3;
					array9[0] = Lang.menu[37] + " " + (Main.PendingPlayer.hair + 1);
					array9[1] = Lang.menu[38];
					array[1] = true;
					array4[2] = 150;
					array4[1] = 10;
					array9[2] = Lang.menu[5];
					int num14 = 51;
					if (this.focusMenu == 0)
					{
						UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 9;
					}
					if (this.selectedMenu == 0)
					{
						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
						Main.PendingPlayer.hair++;
						if (Main.PendingPlayer.hair >= num14)
						{
							Main.PendingPlayer.hair = 0;
						}
					}
					else if (this.selectedMenu2 == 0)
					{
						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
						Main.PendingPlayer.hair--;
						if (Main.PendingPlayer.hair < 0)
						{
							Main.PendingPlayer.hair = num14 - 1;
						}
					}
					if (this.selectedMenu == 2 || flag5)
					{
						flag5 = false;
						Main.menuMode = 2;
						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
					}
				}
				else if (Main.menuMode == 18)
				{
					flag4 = true;
					num7 = Main.screenWidth / 2 - 16;
					num8 = 210;
					flag = true;
					num9 = 370;
					num2 = 240;
					num4 = 60;
					Main.PendingPlayer.eyeColor = Main.selColor;
					num5 = 3;
					array9[0] = "";
					array9[1] = Lang.menu[39];
					array[1] = true;
					array4[2] = 170;
					array4[1] = 10;
					array9[2] = Lang.menu[5];
					if (this.selectedMenu == 2 || flag5)
					{
						flag5 = false;
						Main.menuMode = 2;
						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
					}
				}
				else if (Main.menuMode == 19)
				{
					flag4 = true;
					num7 = Main.screenWidth / 2 - 16;
					num8 = 210;
					flag = true;
					num9 = 370;
					num2 = 240;
					num4 = 60;
					Main.PendingPlayer.skinColor = Main.selColor;
					num5 = 3;
					array9[0] = "";
					array9[1] = Lang.menu[40];
					array[1] = true;
					array4[2] = 170;
					array4[1] = 10;
					array9[2] = Lang.menu[5];
					if (this.selectedMenu == 2 || flag5)
					{
						flag5 = false;
						Main.menuMode = 2;
						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
					}
				}
				else if (Main.menuMode == 21)
				{
					flag4 = true;
					num7 = Main.screenWidth / 2 - 16;
					num8 = 210;
					flag = true;
					num9 = 370;
					num2 = 240;
					num4 = 60;
					Main.PendingPlayer.shirtColor = Main.selColor;
					num5 = 3;
					array9[0] = "";
					array9[1] = Lang.menu[41];
					array[1] = true;
					array4[2] = 170;
					array4[1] = 10;
					array9[2] = Lang.menu[5];
					if (this.selectedMenu == 2 || flag5)
					{
						flag5 = false;
						Main.menuMode = 20;
						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
					}
				}
				else if (Main.menuMode == 22)
				{
					flag4 = true;
					num7 = Main.screenWidth / 2 - 16;
					num8 = 210;
					flag = true;
					num9 = 370;
					num2 = 240;
					num4 = 60;
					Main.PendingPlayer.underShirtColor = Main.selColor;
					num5 = 3;
					array9[0] = "";
					array9[1] = Lang.menu[42];
					array[1] = true;
					array4[2] = 170;
					array4[1] = 10;
					array9[2] = Lang.menu[5];
					if (this.selectedMenu == 2 || flag5)
					{
						flag5 = false;
						Main.menuMode = 20;
						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
					}
				}
				else if (Main.menuMode == 23)
				{
					flag4 = true;
					num7 = Main.screenWidth / 2 - 16;
					num8 = 210;
					flag = true;
					num9 = 370;
					num2 = 240;
					num4 = 60;
					Main.PendingPlayer.pantsColor = Main.selColor;
					num5 = 3;
					array9[0] = "";
					array9[1] = Lang.menu[43];
					array[1] = true;
					array4[2] = 170;
					array4[1] = 10;
					array9[2] = Lang.menu[5];
					if (this.selectedMenu == 2 || flag5)
					{
						flag5 = false;
						Main.menuMode = 20;
						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
					}
				}
				else if (Main.menuMode == 24)
				{
					flag4 = true;
					num7 = Main.screenWidth / 2 - 16;
					num8 = 210;
					flag = true;
					num9 = 370;
					num2 = 240;
					num4 = 60;
					Main.PendingPlayer.shoeColor = Main.selColor;
					num5 = 3;
					array9[0] = "";
					array9[1] = Lang.menu[44];
					array[1] = true;
					array4[2] = 170;
					array4[1] = 10;
					array9[2] = Lang.menu[5];
					if (this.selectedMenu == 2 || flag5)
					{
						flag5 = false;
						Main.menuMode = 20;
						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
					}
				}
				else if (Main.menuMode == 3)
				{
					Main.MenuUI.SetState(new UIVirtualKeyboard(Lang.menu[45], "", new UIVirtualKeyboard.KeyboardSubmitEvent(this.OnCharacterNamed), Main.CreateGoToMenuEvent(2), 0, false));
					Main.menuMode = 888;
				}
				else if (Main.menuMode != 4)
				{
					if (Main.menuMode == 5)
					{
						array9[0] = Lang.menu[46] + " " + Main.PlayerList[Main.selectedPlayer].Player.name + "?";
						array[0] = true;
						array9[1] = Lang.menu[104];
						array9[2] = Lang.menu[105];
						num5 = 3;
						if (this.selectedMenu == 1)
						{
							Main.ErasePlayer(Main.selectedPlayer);
							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.menuMode = 1;
						}
						else if (this.selectedMenu == 2 || flag5)
						{
							flag5 = false;
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
							Main.menuMode = 1;
						}
					}
					else if (Main.menuMode == 6)
					{
						Main.MenuUI.SetState(Main._worldSelectMenu);
						Main.menuMode = 888;
					}
					else if (Main.menuMode == -7)
					{
						num2 = 200;
						num4 = 60;
						array4[2] = 30;
						array4[3] = 30;
						array6[3] = 2;
						array4[4] = 70;
						if (this.focusMenu == 2)
						{
							array9[0] = Language.GetTextValue("UI.NormalDescriptionFlavor");
							array9[1] = Language.GetTextValue("UI.NormalDescription");
						}
						else if (this.focusMenu == 3)
						{
							array9[0] = Language.GetTextValue("UI.ExpertDescriptionFlavor");
							array9[1] = Language.GetTextValue("UI.ExpertDescription");
						}
						else
						{
							array9[0] = Lang.menu[32];
						}
						array[0] = true;
						array[1] = true;
						array9[2] = Language.GetTextValue("UI.Normal");
						array9[3] = Language.GetTextValue("UI.Expert");
						array9[4] = Language.GetTextValue("UI.Back");
						num5 = 5;
						if (this.selectedMenu == 2)
						{
							Main.expertMode = false;
							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.menuMode = 7;
							if (Main.SettingsUnlock_WorldEvil)
							{
								Main.menuMode = -71;
							}
						}
						else if (this.selectedMenu == 3)
						{
							Main.expertMode = true;
							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.menuMode = 7;
							if (Main.SettingsUnlock_WorldEvil)
							{
								Main.menuMode = -71;
							}
						}
						else if (this.selectedMenu == 4 || flag5)
						{
							flag5 = false;
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
							Main.menuMode = 16;
						}
						Main.clrInput();
					}
					else if (Main.menuMode == -71)
					{
						num2 = 200;
						num4 = 60;
						array4[1] = 30;
						array4[2] = 30;
						array4[3] = 30;
						array4[4] = 70;
						num5 = 5;
						int num15 = 0;
						array9[num15] = Lang.misc[100];
						array[num15] = true;
						num15++;
						array9[num15] = Lang.misc[101];
						if (this.selectedMenu == num15)
						{
							WorldGen.WorldGenParam_Evil = 0;
							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.menuMode = 7;
						}
						num15++;
						array9[num15] = Lang.misc[102];
						if (this.selectedMenu == num15)
						{
							WorldGen.WorldGenParam_Evil = 1;
							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.menuMode = 7;
						}
						num15++;
						array9[num15] = Lang.misc[103];
						if (this.selectedMenu == num15)
						{
							WorldGen.WorldGenParam_Evil = -1;
							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.menuMode = 7;
						}
						num15++;
						array9[num15] = Language.GetTextValue("UI.Back");
						if (this.selectedMenu == num15 || flag5)
						{
							flag5 = false;
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
							Main.menuMode = -7;
						}
						num15++;
						Main.clrInput();
					}
					else if (Main.menuMode == 7)
					{
						Main.MenuUI.SetState(new UIVirtualKeyboard(Lang.menu[48], "", new UIVirtualKeyboard.KeyboardSubmitEvent(this.OnWorldNamed), Main.CreateGoToMenuEvent(-7), 0, false));
						Main.menuMode = 888;
					}
					else if (Main.menuMode == 5000)
					{
						Main.MenuUI.SetState(new UIVirtualKeyboard(Language.GetTextValue("UI.EnterSeed"), "", new UIVirtualKeyboard.KeyboardSubmitEvent(this.OnSeedSelected), Main.CreateGoToMenuEvent(7), 0, true));
						Main.menuMode = 888;
					}
					else if (Main.menuMode == 8)
					{
						num2 = 180;
						num4 = 40;
						num5 = 8;
						array4[7] += 30;
						for (int num16 = 0; num16 < num5; num16++)
						{
							array7[num16] = 0.8f;
						}
						array9[7] = Lang.menu[5];
						for (int num17 = 0; num17 < 7; num17++)
						{
							if (num17 < Main.WorldList.Count)
							{
								array9[num17] = Main.WorldList[num17 + Main.menuSkip].Name;
								if (Main.WorldList[num17 + Main.menuSkip].IsExpertMode)
								{
									array6[num17] = 2;
								}
							}
							else
							{
								array9[num17] = null;
							}
						}
						if (Main.WorldList.Count > 7 + Main.menuSkip)
						{
							array9[6] = Language.GetTextValue("UI.More");
							array9[6] = "▼";
							array7[6] = 0.6f;
							array4[6] += 8;
							this.menuWide[6] = true;
						}
						if (Main.menuSkip > 0)
						{
							array9[0] = "▲";
							array7[0] = 0.6f;
							array4[0] += 8;
							this.menuWide[0] = true;
						}
						if (this.selectedMenu == 0 && Main.menuSkip > 0)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.menuSkip -= 5;
							if (Main.menuSkip < 0)
							{
								Main.menuSkip = 0;
							}
						}
						else if (this.selectedMenu == 6 && Main.menuSkip < Main.WorldList.Count - 7)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.menuSkip += 5;
							if (Main.menuSkip >= Main.PlayerList.Count - 7)
							{
								Main.menuSkip = Main.WorldList.Count - 7;
							}
						}
						else if (this.selectedMenu == 7 || flag5)
						{
							flag5 = false;
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
							Main.menuMode = 6;
						}
						else if (this.selectedMenu >= 0)
						{
							Main.selectedWorld = this.selectedMenu + Main.menuSkip;
							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.menuMode = 9;
						}
					}
					else if (Main.menuMode == 9)
					{
						array9[0] = Lang.menu[46] + " " + Main.WorldList[Main.selectedWorld].Name + "?";
						array[0] = true;
						array9[1] = Lang.menu[104];
						array9[2] = Lang.menu[105];
						num5 = 3;
						if (this.selectedMenu == 1)
						{
							Main.EraseWorld(Main.selectedWorld);
							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.menuMode = 6;
						}
						else if (this.selectedMenu == 2 || flag5)
						{
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
							Main.menuMode = 6;
						}
					}
					else if (Main.menuMode == 11)
					{
						num2 = 210;
						num4 = 37;
						num5 = 8;
						array4[num5 - 1] = 8;
						for (int num18 = 0; num18 < num5; num18++)
						{
							array7[num18] = 0.75f;
						}
						int num19 = 0;
						array9[num19] = Lang.menu[114];
						if (this.selectedMenu == num19)
						{
							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.menuMode = 112;
						}
						num19++;
						array9[num19] = Lang.menu[210];
						if (this.selectedMenu == num19)
						{
							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.menuMode = 1112;
						}
						num19++;
						array9[num19] = Lang.menu[63];
						if (this.selectedMenu == num19)
						{
							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.menuMode = 1111;
						}
						num19++;
						array9[num19] = Lang.menu[65];
						if (this.selectedMenu == num19)
						{
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
							Main.menuMode = 26;
						}
						num19++;
						array9[num19] = Lang.menu[218];
						if (this.selectedMenu == num19)
						{
							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.menuMode = 1125;
						}
						num19++;
						array9[num19] = Lang.menu[219];
						if (this.selectedMenu == num19)
						{
							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.menuMode = 1127;
						}
						num19++;
						array9[num19] = Lang.menu[103];
						if (this.selectedMenu == num19)
						{
							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.menuMode = 1213;
						}
						num19++;
						array9[num19] = Lang.menu[5];
						if (this.selectedMenu == num19 || flag5)
						{
							flag5 = false;
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
							Main.menuMode = 0;
							Main.SaveSettings();
						}
					}
					else if (Main.menuMode == 112)
					{
						num2 = 250;
						num4 = 52;
						num5 = 5;
						array4[num5 - 1] = 18;
						for (int num20 = 0; num20 < num5; num20++)
						{
							array7[num20] = 0.78f;
						}
						int num21 = 0;
						if (Main.autoSave)
						{
							array9[num21] = Lang.menu[67];
						}
						else
						{
							array9[num21] = Lang.menu[68];
						}
						if (this.selectedMenu == num21)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							if (Main.autoSave)
							{
								Main.autoSave = false;
							}
							else
							{
								Main.autoSave = true;
							}
						}
						num21++;
						if (Main.autoPause)
						{
							array9[num21] = Lang.menu[69];
						}
						else
						{
							array9[num21] = Lang.menu[70];
						}
						if (this.selectedMenu == num21)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							if (Main.autoPause)
							{
								Main.autoPause = false;
							}
							else
							{
								Main.autoPause = true;
							}
						}
						num21++;
						if (Main.mapEnabled)
						{
							array9[num21] = Lang.menu[112];
						}
						else
						{
							array9[num21] = Lang.menu[113];
						}
						if (this.selectedMenu == num21)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							if (Main.mapEnabled)
							{
								Main.mapEnabled = false;
							}
							else
							{
								Main.mapEnabled = true;
							}
						}
						num21++;
						array9[num21] = (Main.HidePassword ? Lang.menu[212] : Lang.menu[211]);
						if (this.selectedMenu == num21)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.HidePassword = !Main.HidePassword;
						}
						num21++;
						array9[num21] = Lang.menu[5];
						if (this.selectedMenu == num21 || flag5)
						{
							flag5 = false;
							Main.menuMode = 11;
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
						}
					}
					else if (Main.menuMode == 1112)
					{
						num2 = 210;
						num4 = 42;
						num5 = 7;
						array4[num5 - 1] = 18;
						for (int num22 = 0; num22 < num5; num22++)
						{
							array7[num22] = 0.75f;
						}
						int num23 = 0;
						if (Main.showItemText)
						{
							array9[num23] = Lang.menu[71];
						}
						else
						{
							array9[num23] = Lang.menu[72];
						}
						if (this.selectedMenu == num23)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							if (Main.showItemText)
							{
								Main.showItemText = false;
							}
							else
							{
								Main.showItemText = true;
							}
						}
						num23++;
						array9[num23] = Lang.menu[123] + " " + Lang.menu[124 + Main.invasionProgressMode];
						if (this.selectedMenu == num23)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.invasionProgressMode++;
							if (Main.invasionProgressMode >= 3)
							{
								Main.invasionProgressMode = 0;
							}
						}
						num23++;
						array9[num23] = (Main.placementPreview ? Lang.menu[128] : Lang.menu[129]);
						if (this.selectedMenu == num23)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.placementPreview = !Main.placementPreview;
						}
						num23++;
						array9[num23] = (ItemSlot.Options.HighlightNewItems ? Lang.inter[117] : Lang.inter[116]);
						if (this.selectedMenu == num23)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							ItemSlot.Options.HighlightNewItems = !ItemSlot.Options.HighlightNewItems;
						}
						num23++;
						array9[num23] = (Main.MouseShowBuildingGrid ? Lang.menu[229] : Lang.menu[230]);
						if (this.selectedMenu == num23)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.MouseShowBuildingGrid = !Main.MouseShowBuildingGrid;
						}
						num23++;
						array9[num23] = (Main.GamepadDisableInstructionsDisplay ? Lang.menu[241] : Lang.menu[242]);
						if (this.selectedMenu == num23)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.GamepadDisableInstructionsDisplay = !Main.GamepadDisableInstructionsDisplay;
						}
						num23++;
						array9[num23] = Lang.menu[5];
						if (this.selectedMenu == num23 || flag5)
						{
							flag5 = false;
							Main.menuMode = 11;
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
						}
					}
					else if (Main.menuMode == 1111)
					{
						num2 = 186;
						num4 = 32;
						for (int num24 = 0; num24 < 11; num24++)
						{
							array7[num24] = 0.6f;
						}
						array4[11] = 8;
						num5 = 12;
						if (Main.graphics.IsFullScreen)
						{
							array9[0] = Lang.menu[49];
						}
						else
						{
							array9[0] = Lang.menu[50];
						}
						Main.bgScroll = (int)Math.Round((double)((1f - Main.caveParallax) * 500f));
						array9[1] = Lang.menu[51];
						array9[2] = Lang.menu[52];
						array9[3] = Lang.menu[247 + Main.FrameSkipMode];
						if (Lighting.lightMode == 0)
						{
							array9[4] = Lang.menu[55];
						}
						else if (Lighting.lightMode == 1)
						{
							array9[4] = Lang.menu[56];
						}
						else if (Lighting.lightMode == 2)
						{
							array9[4] = Lang.menu[57];
						}
						else if (Lighting.lightMode == 3)
						{
							array9[4] = Lang.menu[58];
						}
						if (Lighting.LightingThreads == 0)
						{
							array9[5] = Lang.menu[116] + " " + Lang.menu[117];
						}
						else
						{
							array9[5] = Lang.menu[116] + " " + (Lighting.LightingThreads + 1);
						}
						if (Main.qaStyle == 0)
						{
							array9[6] = Lang.menu[59];
						}
						else if (Main.qaStyle == 1)
						{
							array9[6] = Lang.menu[60];
						}
						else if (Main.qaStyle == 2)
						{
							array9[6] = Lang.menu[61];
						}
						else
						{
							array9[6] = Lang.menu[62];
						}
						if (Main.BackgroundEnabled)
						{
							array9[7] = Lang.menu[100];
						}
						else
						{
							array9[7] = Lang.menu[101];
						}
						array9[10] = Language.GetTextValue("UI.Effects");
						array9[11] = Lang.menu[5];
						if (this.selectedMenu == 7)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							if (Main.BackgroundEnabled)
							{
								Main.BackgroundEnabled = false;
							}
							else
							{
								Main.BackgroundEnabled = true;
							}
						}
						if (this.selectedMenu == 11 || flag5)
						{
							flag5 = false;
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
							Main.SaveSettings();
							Main.menuMode = 11;
						}
						array9[9] = (Main.SettingsEnabled_MinersWobble ? Lang.menu[250] : Lang.menu[251]);
						if (this.selectedMenu == 9)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.SettingsEnabled_MinersWobble = !Main.SettingsEnabled_MinersWobble;
						}
						array9[8] = (ChildSafety.Disabled ? Lang.menu[132] : Lang.menu[133]);
						if (this.selectedMenu == 8)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							ChildSafety.Disabled = !ChildSafety.Disabled;
						}
						if (this.selectedMenu == 6)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.qaStyle++;
							if (Main.qaStyle > 3)
							{
								Main.qaStyle = 0;
							}
						}
						if (this.selectedMenu == 5)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Lighting.LightingThreads++;
							if (Lighting.LightingThreads > Environment.ProcessorCount - 1)
							{
								Lighting.LightingThreads = 0;
							}
						}
						if (this.selectedMenu == 4)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Lighting.lightMode++;
							if (Lighting.lightMode >= 4)
							{
								Lighting.lightMode = 0;
							}
						}
						if (this.selectedMenu == 3)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.FrameSkipMode++;
							if (Main.FrameSkipMode < 0 || Main.FrameSkipMode > 2)
							{
								Main.FrameSkipMode = 0;
							}
						}
						if (this.selectedMenu == 2)
						{
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
							Main.menuMode = 28;
						}
						if (this.selectedMenu == 10)
						{
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
							Main.menuMode = 2008;
						}
						if (this.selectedMenu == 1)
						{
							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.menuMode = 111;
						}
						if (this.selectedMenu == 0)
						{
							Main.ToggleFullScreen();
						}
					}
					else if (Main.menuMode == 2008)
					{
						num2 = 240;
						num4 = 60;
						num5 = 6;
						array9[0] = "";
						array9[1] = Language.GetTextValue("UI.Effects");
						array[1] = true;
						array4[1] = 10;
						array9[2] = Language.GetTextValue("GameUI.StormEffects", Main.UseStormEffects ? Language.GetTextValue("GameUI.Enabled") : Language.GetTextValue("GameUI.Disabled"));
						array7[2] = 0.8f;
						array9[3] = Language.GetTextValue("GameUI.HeatDistortion", Main.UseHeatDistortion ? Language.GetTextValue("GameUI.Enabled") : Language.GetTextValue("GameUI.Disabled"));
						array7[3] = 0.8f;
						string textValue;
						switch (Main.WaveQuality)
						{
						case 1:
							textValue = Language.GetTextValue("GameUI.QualityLow");
							break;
						case 2:
							textValue = Language.GetTextValue("GameUI.QualityMedium");
							break;
						case 3:
							textValue = Language.GetTextValue("GameUI.QualityHigh");
							break;
						default:
							textValue = Language.GetTextValue("GameUI.QualityOff");
							break;
						}
						array9[4] = Language.GetTextValue("GameUI.WaveQuality", textValue);
						array7[4] = 0.8f;
						array9[5] = Lang.menu[5];
						if (this.selectedMenu == 2)
						{
							Main.UseStormEffects = !Main.UseStormEffects;
						}
						if (this.selectedMenu == 3)
						{
							Main.UseHeatDistortion = !Main.UseHeatDistortion;
						}
						if (this.selectedMenu == 4)
						{
							Main.WaveQuality = (Main.WaveQuality + 1) % 4;
						}
						if (this.selectedMenu == 5 || flag5)
						{
							flag5 = false;
							Main.menuMode = 1111;
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
						}
					}
					else if (Main.menuMode == 111)
					{
						for (int num25 = 0; num25 < 9; num25++)
						{
							array7[num25] = 0.85f;
						}
#if WINDOWS
						bool flag7 = true;
						Form form = (Form)Control.FromHandle(Main.instance.Window.Handle);
						System.Drawing.Rectangle bounds = Screen.FromPoint(form.Location).Bounds;
						if (bounds.Width > Main.maxScreenW || bounds.Height > Main.maxScreenH)
						{
							flag7 = false;
						}
#else
						bool flag7 = false;
#endif
						num2 = 210;
						num4 = 55;
						int num26 = 0;
						array9[num26] = string.Concat(new object[]
						{
							Lang.menu[73],
							": ",
							Main.PendingResolutionWidth,
							"x",
							Main.PendingResolutionHeight
						});
						if (this.selectedMenu == num26)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							int num27 = 0;
							for (int num28 = 0; num28 < Main.numDisplayModes; num28++)
							{
								if (Main.displayWidth[num28] == Main.PendingResolutionWidth && Main.displayHeight[num28] == Main.PendingResolutionHeight)
								{
									num27 = num28;
									break;
								}
							}
							num27 = (num27 + 1) % Main.numDisplayModes;
							Main.PendingResolutionWidth = Main.displayWidth[num27];
							Main.PendingResolutionHeight = Main.displayHeight[num27];
						}
						num26++;
						if (flag7)
						{
							array9[num26] = Lang.menu[Main.PendingBorderlessState ? 245 : 246];
							if (this.selectedMenu == num26)
							{
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								Main.PendingBorderlessState = !Main.PendingBorderlessState;
							}
							num26++;
						}
						array4[num26] = 100;
						array9[num26] = Lang.menu[134];
						if (this.selectedMenu == num26)
						{
							if (Main.graphics.IsFullScreen || Main.PendingBorderlessState != Main.screenBorderless)
							{
								Main.screenBorderless = Main.PendingBorderlessState;
								Main.SetResolution(Main.PendingResolutionWidth, Main.PendingResolutionHeight);
							}
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
							Main.menuMode = 1111;
						}
						num26++;
						array9[num26] = Lang.menu[5];
						array4[num26] = 100;
						if (this.selectedMenu == num26 || flag5)
						{
							flag5 = false;
							Main.PendingResolutionWidth = Main.graphics.PreferredBackBufferWidth;
							Main.PendingResolutionHeight = Main.graphics.PreferredBackBufferHeight;
							Main.PendingBorderlessState = Main.screenBorderless;
							Main.menuMode = 1111;
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
						}
						num26++;
						num5 = num26;
					}
					else if (Main.menuMode == 1125)
					{
						num2 = 232;
						num4 = 38;
						num5 = 7;
						array4[num5 - 1] = 18;
						for (int num29 = 0; num29 < num5; num29++)
						{
							array7[num29] = 0.73f;
						}
						int num30 = 0;
						array9[num30] = Lang.menu[64];
						if (this.selectedMenu == num30)
						{
							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.selColor = Main.mouseColor;
							Main.menuMode = 25;
						}
						num30++;
						array9[num30] = Lang.menu[217];
						if (this.selectedMenu == num30)
						{
							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.selColor = Main.MouseBorderColor;
							Main.menuMode = 252;
						}
						num30++;
						array9[num30] = (Main.cSmartCursorToggle ? Lang.menu[121] : Lang.menu[122]);
						if (this.selectedMenu == num30)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.cSmartCursorToggle = !Main.cSmartCursorToggle;
						}
						num30++;
						array9[num30] = (Player.SmartCursorSettings.SmartAxeAfterPickaxe ? Lang.menu[214] : Lang.menu[213]);
						if (this.selectedMenu == num30)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Player.SmartCursorSettings.SmartAxeAfterPickaxe = !Player.SmartCursorSettings.SmartAxeAfterPickaxe;
						}
						num30++;
						array9[num30] = (Player.SmartCursorSettings.SmartBlocksEnabled ? Lang.menu[215] : Lang.menu[216]);
						if (this.selectedMenu == num30)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Player.SmartCursorSettings.SmartBlocksEnabled = !Player.SmartCursorSettings.SmartBlocksEnabled;
						}
						num30++;
						switch (LockOnHelper.UseMode)
						{
						case LockOnHelper.LockOnMode.FocusTarget:
							array9[num30] = Lang.menu[232];
							break;
						case LockOnHelper.LockOnMode.TargetClosest:
							array9[num30] = Lang.menu[233];
							break;
						case LockOnHelper.LockOnMode.ThreeDS:
							array9[num30] = Lang.menu[234];
							break;
						}
						if (this.selectedMenu == num30)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							LockOnHelper.CycleUseModes();
						}
						num30++;
						array9[num30] = Lang.menu[5];
						if (this.selectedMenu == num30 || flag5)
						{
							flag5 = false;
							Main.menuMode = 11;
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
						}
					}
					else if (Main.menuMode == 25)
					{
						flag = true;
						num9 = 320;
						num2 = 200;
						num4 = 10;
						Main.mouseColor = Main.selColor;
						num5 = 3;
						array9[0] = "";
						array9[1] = Lang.menu[64];
						array[1] = true;
						array4[2] = 250;
						array4[1] = 10;
						array9[2] = Lang.menu[5];
						if (this.selectedMenu == 2 || flag5)
						{
							flag5 = false;
							Main.menuMode = 1125;
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
						}
					}
					else if (Main.menuMode == 252)
					{
						flag = true;
						num9 = 320;
						num2 = 200;
						num4 = 10;
						Main.MouseBorderColor = Main.selColor;
						num5 = 3;
						array9[0] = "";
						array9[1] = Lang.menu[217];
						array[1] = true;
						array4[2] = 250;
						array4[1] = 10;
						array9[2] = Lang.menu[5];
						if (this.selectedMenu == 2 || flag5)
						{
							flag5 = false;
							Main.menuMode = 1125;
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
						}
					}
					else if (Main.menuMode == 26)
					{
						flag2 = true;
						num2 = 200;
						num4 = 10;
						num5 = 3;
						array9[0] = "";
						array9[1] = Lang.menu[65];
						array[1] = true;
						array4[2] = 250;
						array4[1] = 10;
						array9[2] = Lang.menu[5];
						if (this.selectedMenu == 2 || flag5)
						{
							flag5 = false;
							Main.menuMode = 11;
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
						}
					}
					else if (Main.menuMode == 28)
					{
						Main.caveParallax = 1f - (float)Main.bgScroll / 500f;
						flag3 = true;
						num2 = 240;
						num4 = 60;
						num5 = 3;
						array9[0] = "";
						array9[1] = Lang.menu[52];
						array[1] = true;
						array4[2] = 170;
						array4[1] = 10;
						array9[2] = Lang.menu[5];
						if (this.selectedMenu == 2 || flag5)
						{
							flag5 = false;
							Main.menuMode = 1111;
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
						}
					}
					else if (Main.menuMode == 272727)
					{
						num2 = 200;
						num4 = 30;
						num5 = 14;
						string[] array11 = new string[12];
						array11[0] = Main.cMapStyle;
						array11[1] = Main.cMapFull;
						array11[2] = Main.cMapZoomIn;
						array11[3] = Main.cMapZoomOut;
						array11[4] = Main.cMapAlphaUp;
						array11[5] = Main.cMapAlphaDown;
						if (Main.setKey >= 0)
						{
							array11[Main.setKey] = "_";
						}
						array9[0] = Lang.menu[106] + array11[0];
						array9[1] = Lang.menu[107] + array11[1];
						array9[2] = Lang.menu[108] + array11[2];
						array9[3] = Lang.menu[109] + array11[3];
						array9[4] = Lang.menu[110] + array11[4];
						array9[5] = Lang.menu[111] + array11[5];
						for (int num31 = 0; num31 < 6; num31++)
						{
							array8[num31] = true;
							array7[num31] = 0.55f;
							array5[num31] = -140;
						}
						array7[6] = 0.8f;
						array7[6] = 0.8f;
						array4[6] = 6;
						array9[6] = Lang.menu[86];
						array4[7] = 16;
						array9[7] = Lang.menu[5];
						if (this.selectedMenu == 7 || flag5)
						{
							flag5 = false;
							Main.menuMode = 11;
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
						}
						else if (this.selectedMenu == 6)
						{
							Main.cMapStyle = "Tab";
							Main.cMapFull = "M";
							Main.cMapZoomIn = "Add";
							Main.cMapZoomOut = "Subtract";
							Main.cMapAlphaUp = "PageUp";
							Main.cMapAlphaDown = "PageDown";
							Main.setKey = -1;
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
						}
						else if (this.selectedMenu >= 0)
						{
							Main.setKey = this.selectedMenu;
						}
						if (Main.setKey >= 0)
						{
							Microsoft.Xna.Framework.Input.Keys[] pressedKeys = Main.keyState.GetPressedKeys();
							if (pressedKeys.Length > 0)
							{
								string a = string.Concat(pressedKeys[0]);
								if (a != "None")
								{
									if (Main.setKey == 0)
									{
										Main.cMapStyle = a;
									}
									if (Main.setKey == 1)
									{
										Main.cMapFull = a;
									}
									if (Main.setKey == 2)
									{
										Main.cMapZoomIn = a;
									}
									if (Main.setKey == 3)
									{
										Main.cMapZoomOut = a;
									}
									if (Main.setKey == 4)
									{
										Main.cMapAlphaUp = a;
									}
									if (Main.setKey == 5)
									{
										Main.cMapAlphaDown = a;
									}
									Main.setKey = -1;
								}
							}
						}
					}
					else if (Main.menuMode == 27)
					{
						num2 = 176;
						num4 = 22;
						num5 = 16;
						string[] array12 = new string[]
						{
							Main.cUp,
							Main.cDown,
							Main.cLeft,
							Main.cRight,
							Main.cJump,
							Main.cThrowItem,
							Main.cInv,
							Main.cHeal,
							Main.cMana,
							Main.cBuff,
							Main.cHook,
							Main.cTorch,
							Main.cSmart,
							Main.cMount
						};
						if (Main.setKey >= 0)
						{
							array12[Main.setKey] = "_";
						}
						array9[0] = Lang.menu[74] + array12[0];
						array9[1] = Lang.menu[75] + array12[1];
						array9[2] = Lang.menu[76] + array12[2];
						array9[3] = Lang.menu[77] + array12[3];
						array9[4] = Lang.menu[78] + array12[4];
						array9[5] = Lang.menu[79] + array12[5];
						array9[6] = Lang.menu[80] + array12[6];
						array9[7] = Lang.menu[81] + array12[7];
						array9[8] = Lang.menu[82] + array12[8];
						array9[9] = Lang.menu[83] + array12[9];
						array9[10] = Lang.menu[84] + array12[10];
						array9[11] = Lang.menu[85] + array12[11];
						array9[12] = Lang.menu[120] + array12[12];
						array9[13] = Lang.menu[130] + array12[13];
						for (int num32 = 0; num32 < 14; num32++)
						{
							array8[num32] = true;
							array7[num32] = 0.45f;
							array5[num32] = -80;
						}
						array7[14] = 0.8f;
						array4[14] = 6;
						array9[14] = Lang.menu[86];
						array7[15] = 0.8f;
						array4[15] = 16;
						array9[15] = Lang.menu[5];
						if (this.selectedMenu == 15 || flag5)
						{
							flag5 = false;
							Main.menuMode = 11;
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
						}
						else if (this.selectedMenu == 14)
						{
							Main.ResetKeyBindings();
							Main.setKey = -1;
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
						}
						else if (this.selectedMenu >= 0)
						{
							Main.setKey = this.selectedMenu;
						}
						if (Main.setKey >= 0)
						{
							Microsoft.Xna.Framework.Input.Keys[] pressedKeys2 = Main.keyState.GetPressedKeys();
							if (pressedKeys2.Length > 0)
							{
								string a2 = string.Concat(pressedKeys2[0]);
								if (a2 != "None")
								{
									if (Main.setKey == 0)
									{
										Main.cUp = a2;
									}
									if (Main.setKey == 1)
									{
										Main.cDown = a2;
									}
									if (Main.setKey == 2)
									{
										Main.cLeft = a2;
									}
									if (Main.setKey == 3)
									{
										Main.cRight = a2;
									}
									if (Main.setKey == 4)
									{
										Main.cJump = a2;
									}
									if (Main.setKey == 5)
									{
										Main.cThrowItem = a2;
									}
									if (Main.setKey == 6)
									{
										Main.cInv = a2;
									}
									if (Main.setKey == 7)
									{
										Main.cHeal = a2;
									}
									if (Main.setKey == 8)
									{
										Main.cMana = a2;
									}
									if (Main.setKey == 9)
									{
										Main.cBuff = a2;
									}
									if (Main.setKey == 10)
									{
										Main.cHook = a2;
									}
									if (Main.setKey == 11)
									{
										Main.cTorch = a2;
									}
									if (Main.setKey == 12)
									{
										Main.cSmart = a2;
									}
									if (Main.setKey == 13)
									{
										Main.cMount = a2;
									}
									Main.setKey = -1;
								}
							}
						}
					}
					else if (Main.menuMode == 1127)
					{
						num2 = 250;
						num4 = 52;
						num5 = 5;
						array4[num5 - 1] = 18;
						for (int num33 = 0; num33 < num5; num33++)
						{
							array7[num33] = 0.78f;
						}
						int num34 = 0;
						array9[num34] = (Main.ReversedUpDownArmorSetBonuses ? Lang.menu[220] : Lang.menu[221]);
						if (this.selectedMenu == num34)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.ReversedUpDownArmorSetBonuses = !Main.ReversedUpDownArmorSetBonuses;
						}
						num34++;
						array9[num34] = (Player.SmartCursorSettings.SmartWallReplacement ? Lang.menu[226] : Lang.menu[225]);
						if (this.selectedMenu == num34)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Player.SmartCursorSettings.SmartWallReplacement = !Player.SmartCursorSettings.SmartWallReplacement;
						}
						num34++;
						array9[num34] = (ItemSlot.Options.DisableLeftShiftTrashCan ? Lang.menu[224] : Lang.menu[223]);
						if (this.selectedMenu == num34)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							ItemSlot.Options.DisableLeftShiftTrashCan = !ItemSlot.Options.DisableLeftShiftTrashCan;
						}
						num34++;
						array9[num34] = Lang.menu[222];
						if (this.selectedMenu == num34)
						{
							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.MenuUI.SetState(Main.ManageControlsMenu);
							Main.menuMode = 888;
						}
						num34++;
						array9[num34] = Lang.menu[5];
						if (this.selectedMenu == num34 || flag5)
						{
							flag5 = false;
							Main.menuMode = 11;
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
						}
					}
					else if (Main.menuMode == 12)
					{
						int num35 = (SocialAPI.Network != null) ? 1 : 0;
						Main.menuServer = false;
						array9[0] = Lang.menu[(SocialAPI.Network != null) ? 146 : 87];
						array9[1] = Lang.menu[145];
						array9[1 + num35] = Lang.menu[88];
						array9[2 + num35] = Lang.menu[5];
						if (this.selectedMenu == 0)
						{
							Main.LoadPlayers();
							Main.menuMultiplayer = true;
							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.menuMode = 1;
						}
						else if (this.selectedMenu == 1 + num35)
						{
							Main.LoadPlayers();
							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
							Main.menuMode = 1;
							Main.menuMultiplayer = true;
							Main.menuServer = true;
						}
						else if (this.selectedMenu == 1)
						{
							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
							SocialAPI.Friends.OpenJoinInterface();
						}
						else if (this.selectedMenu == 2 + num35 || flag5)
						{
							flag5 = false;
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
							Main.menuMode = 0;
						}
						num5 = 3 + num35;
					}
					else if (Main.menuMode == 13)
					{
						string a3 = Main.getIP;
						PlayerInput.WritingText = true;
						flag5 = false;
						Main.getIP = Main.GetInputText(Main.getIP);
						if (a3 != Main.getIP)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
						}
						array9[0] = Lang.menu[89];
						array2[9] = true;
						if (Main.getIP != "")
						{
							if (Main.getIP.Substring(0, 1) == " ")
							{
								Main.getIP = "";
							}
							for (int num36 = 0; num36 < Main.getIP.Length; num36++)
							{
								if (Main.getIP != " ")
								{
									array2[9] = false;
								}
							}
						}
						this.textBlinkerCount++;
						if (this.textBlinkerCount >= 20)
						{
							if (this.textBlinkerState == 0)
							{
								this.textBlinkerState = 1;
							}
							else
							{
								this.textBlinkerState = 0;
							}
							this.textBlinkerCount = 0;
						}
						array9[1] = Main.getIP;
						if (this.textBlinkerState == 1)
						{
							string[] array10;
							(array10 = array9)[1] = array10[1] + "|";
							array5[1] = 1;
						}
						else
						{
							string[] array10;
							(array10 = array9)[1] = array10[1] + " ";
						}
						array[0] = true;
						array[1] = true;
						array4[9] = 44;
						array4[10] = 64;
						array9[9] = Lang.menu[4];
						array9[10] = Lang.menu[5];
						num5 = 11;
						num2 = 180;
						num4 = 30;
						array4[1] = 19;
						for (int num37 = 2; num37 < 9; num37++)
						{
							int num38 = num37 - 2;
							if (Main.recentWorld[num38] != null && Main.recentWorld[num38] != "")
							{
								array9[num37] = string.Concat(new object[]
								{
									Main.recentWorld[num38],
									" (",
									Main.recentIP[num38],
									":",
									Main.recentPort[num38],
									")"
								});
							}
							else
							{
								array9[num37] = "";
								array[num37] = true;
							}
							array7[num37] = 0.6f;
							array4[num37] = 40;
						}
						if (this.selectedMenu >= 2 && this.selectedMenu < 9)
						{
							Main.autoPass = false;
							int num39 = this.selectedMenu - 2;
							Netplay.ListenPort = Main.recentPort[num39];
							Main.getIP = Main.recentIP[num39];
							if (Netplay.SetRemoteIP(Main.getIP))
							{
								Main.menuMode = 10;
								Netplay.StartTcpClient();
							}
						}
						if (this.selectedMenu == 10 || flag5)
						{
							flag5 = false;
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
							Main.menuMode = 1;
						}
						if (this.selectedMenu == 9 || (!array2[2] && Main.inputTextEnter))
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.menuMode = 131;
							Main.clrInput();
						}
					}
					else if (Main.menuMode == 131)
					{
						int num40 = 7777;
						PlayerInput.WritingText = true;
						flag5 = false;
						string a4 = Main.getPort;
						Main.getPort = Main.GetInputText(Main.getPort);
						if (a4 != Main.getPort)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
						}
						array9[0] = Lang.menu[90];
						array2[2] = true;
						if (Main.getPort != "")
						{
							bool flag8 = false;
							try
							{
								num40 = Convert.ToInt32(Main.getPort);
								if (num40 > 0 && num40 <= 65535)
								{
									flag8 = true;
								}
							}
							catch
							{
							}
							if (flag8)
							{
								array2[2] = false;
							}
						}
						this.textBlinkerCount++;
						if (this.textBlinkerCount >= 20)
						{
							if (this.textBlinkerState == 0)
							{
								this.textBlinkerState = 1;
							}
							else
							{
								this.textBlinkerState = 0;
							}
							this.textBlinkerCount = 0;
						}
						array9[1] = Main.getPort;
						if (this.textBlinkerState == 1)
						{
							string[] array10;
							(array10 = array9)[1] = array10[1] + "|";
							array5[1] = 1;
						}
						else
						{
							string[] array10;
							(array10 = array9)[1] = array10[1] + " ";
						}
						array[0] = true;
						array[1] = true;
						array4[1] = -20;
						array4[2] = 20;
						array9[2] = Lang.menu[4];
						array9[3] = Lang.menu[5];
						num5 = 4;
						if (this.selectedMenu == 3 || flag5)
						{
							flag5 = false;
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
							Main.menuMode = 1;
						}
						if (this.selectedMenu == 2 || (!array2[2] && Main.inputTextEnter))
						{
							Netplay.ListenPort = num40;
							Main.autoPass = false;
							if (Netplay.SetRemoteIP(Main.getIP))
							{
								Main.menuMode = 10;
								Netplay.StartTcpClient();
							}
						}
					}
					else if (Main.menuMode == 16)
					{
						num2 = 200;
						num4 = 60;
						array4[1] = 30;
						array4[2] = 30;
						array4[3] = 30;
						array4[4] = 70;
						array9[0] = Lang.menu[91];
						array[0] = true;
						array9[1] = Lang.menu[92];
						array9[2] = Lang.menu[93];
						array9[3] = Lang.menu[94];
						array9[4] = Lang.menu[5];
						num5 = 5;
						if (this.selectedMenu == 4 || flag5)
						{
							flag5 = false;
							Main.menuMode = 6;
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
						}
						else if (this.selectedMenu > 0)
						{
							if (this.selectedMenu == 1)
							{
								Main.maxTilesX = 4200;
								Main.maxTilesY = 1200;
							}
							else if (this.selectedMenu == 2)
							{
								Main.maxTilesX = 6400;
								Main.maxTilesY = 1800;
							}
							else
							{
								Main.maxTilesX = 8400;
								Main.maxTilesY = 2400;
							}
							Main.clrInput();
							Main.menuMode = -7;
							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
							WorldGen.setWorldSize();
						}
					}
				}
			}
			IL_5075:
			if (Main.menuMode == 888)
			{
				if (!Main._blockFancyUIWhileLoading)
				{
					Main.MenuUI.Draw(Main.spriteBatch, gameTime);
				}
			}
			else
			{
				Main.MenuUI.SetState(null);
			}
			if (UILinkPointNavigator.Shortcuts.BackButtonInUse && !flag5)
			{
				UILinkPointNavigator.Shortcuts.BackButtonLock = true;
			}
			int num41 = this.focusMenu;
			if (Main.menuMode != num6)
			{
				Main.blockMouse = true;
				Main.menuSkip = 0;
				num5 = 0;
				if (PlayerInput.UsingGamepad && Main.InvisibleCursorForGamepad)
				{
					num41 = (this.focusMenu = -1);
					Main.mouseX = (Main.mouseY = (PlayerInput.MouseX = (PlayerInput.MouseY = 0)));
				}
				for (int num42 = 0; num42 < Main.maxMenuItems; num42++)
				{
					this.menuItemScale[num42] = 0.8f;
				}
			}
			if (!Main.mouseLeft)
			{
				Main.blockMouse = true;
			}
			this.selectedMenu = -1;
			this.selectedMenu2 = -1;
			this.focusMenu = -1;
			if (!flag)
			{
				this.grabColorSlider = 0;
				Main.hBar = -1f;
				Main.sBar = -1f;
				Main.lBar = -1f;
				Main.aBar = -1f;
			}
			if (flag)
			{
				if (!Main.mouseLeft)
				{
					this.grabColorSlider = 0;
					Main.blockMouse = false;
				}
				int num43 = num9;
				int num44 = Main.screenWidth / 2 - this.hueTexture.Width / 2;
				int num45 = 167;
				Vector3 vector = Main.rgbToHsl(Main.selColor);
				float num46 = vector.X;
				float num47 = vector.Y;
				float num48 = vector.Z;
				float num49 = (float)Main.selColor.A / 255f;
				if (Main.hBar == -1f || Main.sBar == -1f || Main.lBar == -1f || Main.aBar == -1f)
				{
					Main.hBar = num46;
					Main.sBar = num47;
					Main.lBar = num48;
					Main.aBar = num49;
				}
				else
				{
					num46 = Main.hBar;
					num47 = Main.sBar;
					num48 = Main.lBar;
					num49 = Main.aBar;
				}
				Main.spriteBatch.Draw(this.hueTexture, new Vector2((float)num44, (float)num43), Microsoft.Xna.Framework.Color.White);
				if ((Main.mouseX > num44 - 4 && Main.mouseX < num44 + this.hueTexture.Width + 4 && Main.mouseY > num43 - 4 && Main.mouseY < num43 + this.hueTexture.Height + 4 && this.grabColorSlider == 0) || this.grabColorSlider == 1)
				{
					Main.spriteBatch.Draw(Main.colorHighlightTexture, new Vector2((float)num44, (float)num43), Main.OurFavoriteColor);
				}
				Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num44 + (float)(this.hueTexture.Width - 2) * Main.hBar - (float)(Main.colorSliderTexture.Width / 2), (float)(num43 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
				if ((Main.mouseX > num44 - 4 && Main.mouseX < num44 + this.hueTexture.Width + 4 && Main.mouseY > num43 - 4 && Main.mouseY < num43 + this.hueTexture.Height + 4 && this.grabColorSlider == 0) || this.grabColorSlider == 1)
				{
					UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 5;
					if (Main.mouseLeft && !Main.blockMouse)
					{
						this.grabColorSlider = 1;
						num46 = (float)(Main.mouseX - num44);
						num46 /= (float)this.hueTexture.Width;
						if (num46 < 0f)
						{
							num46 = 0f;
						}
						if (num46 > 1f)
						{
							num46 = 1f;
						}
						Main.hBar = num46;
					}
				}
				GamepadMainMenuHandler.MenuItemPositions.Add(new Vector2((float)num44, (float)num43) + Main.colorBarTexture.Size() / 2f);
				num43 += 26;
				Main.spriteBatch.Draw(Main.colorBarTexture, new Vector2((float)num44, (float)num43), Microsoft.Xna.Framework.Color.White);
				for (int num50 = 0; num50 <= num45; num50++)
				{
					float saturation = (float)num50 / (float)num45;
					Microsoft.Xna.Framework.Color color4 = Main.hslToRgb(num46, saturation, num48);
					Main.spriteBatch.Draw(Main.colorBlipTexture, new Vector2((float)(num44 + num50 + 5), (float)(num43 + 4)), color4);
				}
				if ((Main.mouseX > num44 - 4 && Main.mouseX < num44 + this.hueTexture.Width + 4 && Main.mouseY > num43 - 4 && Main.mouseY < num43 + this.hueTexture.Height + 4 && this.grabColorSlider == 0) || this.grabColorSlider == 2)
				{
					Main.spriteBatch.Draw(Main.colorHighlightTexture, new Vector2((float)num44, (float)num43), Main.OurFavoriteColor);
				}
				Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num44 + (float)(this.hueTexture.Width - 2) * Main.sBar - (float)(Main.colorSliderTexture.Width / 2), (float)(num43 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
				if ((Main.mouseX > num44 - 4 && Main.mouseX < num44 + this.hueTexture.Width + 4 && Main.mouseY > num43 - 4 && Main.mouseY < num43 + this.hueTexture.Height + 4 && this.grabColorSlider == 0) || this.grabColorSlider == 2)
				{
					UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 6;
					if (Main.mouseLeft && !Main.blockMouse)
					{
						this.grabColorSlider = 2;
						num47 = (float)(Main.mouseX - num44);
						num47 /= (float)this.hueTexture.Width;
						if (num47 < 0f)
						{
							num47 = 0f;
						}
						if (num47 > 1f)
						{
							num47 = 1f;
						}
						Main.sBar = num47;
					}
				}
				GamepadMainMenuHandler.MenuItemPositions.Add(new Vector2((float)num44, (float)num43) + Main.colorBarTexture.Size() / 2f);
				num43 += 26;
				Main.spriteBatch.Draw(Main.colorBarTexture, new Vector2((float)num44, (float)num43), Microsoft.Xna.Framework.Color.White);
				float num51 = 0.15f;
				if (Main.menuMode == 252)
				{
					num51 = 0f;
				}
				for (int num52 = 0; num52 <= num45; num52++)
				{
					float luminosity = (float)num52 / (float)num45;
					Microsoft.Xna.Framework.Color color5 = Main.hslToRgb(num46, num47, luminosity);
					Main.spriteBatch.Draw(Main.colorBlipTexture, new Vector2((float)(num44 + num52 + 5), (float)(num43 + 4)), color5);
				}
				if ((Main.mouseX > num44 - 4 && Main.mouseX < num44 + this.hueTexture.Width + 4 && Main.mouseY > num43 - 4 && Main.mouseY < num43 + this.hueTexture.Height + 4 && this.grabColorSlider == 0) || this.grabColorSlider == 3)
				{
					Main.spriteBatch.Draw(Main.colorHighlightTexture, new Vector2((float)num44, (float)num43), Main.OurFavoriteColor);
				}
				Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num44 + (float)(this.hueTexture.Width - 2) * ((Main.lBar - num51) / (1f - num51)) - (float)(Main.colorSliderTexture.Width / 2), (float)(num43 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
				if ((Main.mouseX > num44 - 4 && Main.mouseX < num44 + this.hueTexture.Width + 4 && Main.mouseY > num43 - 4 && Main.mouseY < num43 + this.hueTexture.Height + 4 && this.grabColorSlider == 0) || this.grabColorSlider == 3)
				{
					UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 7;
					if (Main.mouseLeft && !Main.blockMouse)
					{
						this.grabColorSlider = 3;
						num48 = (float)(Main.mouseX - num44);
						num48 /= (float)this.hueTexture.Width;
						if (num48 < 0f)
						{
							num48 = 0f;
						}
						if (num48 > 1f)
						{
							num48 = 1f;
						}
						num48 = num48 * (1f - num51) + num51;
						Main.lBar = num48;
					}
				}
				GamepadMainMenuHandler.MenuItemPositions.Add(new Vector2((float)num44, (float)num43) + Main.colorBarTexture.Size() / 2f);
				bool flag9 = false;
				if (Main.menuMode == 252)
				{
					num43 += 26;
					flag9 = true;
					Main.spriteBatch.Draw(Main.colorBarTexture, new Vector2((float)num44, (float)num43), Microsoft.Xna.Framework.Color.White);
					Microsoft.Xna.Framework.Color value = Main.hslToRgb(num46, num47, num48);
					for (int num53 = 0; num53 <= num45; num53++)
					{
						float scale = (float)num53 / (float)num45;
						Microsoft.Xna.Framework.Color color6 = value * scale;
						Main.spriteBatch.Draw(Main.colorBlipTexture, new Vector2((float)(num44 + num53 + 5), (float)(num43 + 4)), color6);
					}
					if ((Main.mouseX > num44 - 4 && Main.mouseX < num44 + this.hueTexture.Width + 4 && Main.mouseY > num43 - 4 && Main.mouseY < num43 + this.hueTexture.Height + 4 && this.grabColorSlider == 0) || this.grabColorSlider == 4)
					{
						Main.spriteBatch.Draw(Main.colorHighlightTexture, new Vector2((float)num44, (float)num43), Main.OurFavoriteColor);
					}
					Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num44 + (float)(this.hueTexture.Width - 2) * Main.aBar - (float)(Main.colorSliderTexture.Width / 2), (float)(num43 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
					if ((Main.mouseX > num44 - 4 && Main.mouseX < num44 + this.hueTexture.Width + 4 && Main.mouseY > num43 - 4 && Main.mouseY < num43 + this.hueTexture.Height + 4 && this.grabColorSlider == 0) || this.grabColorSlider == 4)
					{
						UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 8;
						if (Main.mouseLeft && !Main.blockMouse)
						{
							this.grabColorSlider = 4;
							num49 = (float)(Main.mouseX - num44);
							num49 /= (float)this.hueTexture.Width;
							if (num49 < 0f)
							{
								num49 = 0f;
							}
							if (num49 > 1f)
							{
								num49 = 1f;
							}
							Main.aBar = num49;
						}
					}
					GamepadMainMenuHandler.MenuItemPositions.Add(new Vector2((float)num44, (float)num43) + Main.colorBarTexture.Size() / 2f);
				}
				Main.selColor = Main.hslToRgb(Main.hBar, Main.sBar, Main.lBar);
				if (flag9)
				{
					Main.selColor.A = (byte)(Main.aBar * 255f);
				}
			}
			else if (flag)
			{
				string text3 = "";
				for (int num54 = 0; num54 < 6; num54++)
				{
					int num55 = num9;
					int num56 = 370 + Main.screenWidth / 2 - 400;
					if (num54 == 0)
					{
						text3 = Lang.menu[95];
					}
					if (num54 == 1)
					{
						text3 = Lang.menu[96];
						num55 += 30;
					}
					if (num54 == 2)
					{
						text3 = Lang.menu[97];
						num55 += 60;
					}
					if (num54 == 3)
					{
						text3 = string.Concat(Main.selColor.R);
						num56 += 90;
					}
					if (num54 == 4)
					{
						text3 = string.Concat(Main.selColor.G);
						num56 += 90;
						num55 += 30;
					}
					if (num54 == 5)
					{
						text3 = string.Concat(Main.selColor.B);
						num56 += 90;
						num55 += 60;
					}
					for (int num57 = 0; num57 < 5; num57++)
					{
						Microsoft.Xna.Framework.Color color7 = Microsoft.Xna.Framework.Color.Black;
						if (num57 == 4)
						{
							color7 = color;
							color7.R = (byte)((255 + color7.R) / 2);
							color7.G = (byte)((255 + color7.R) / 2);
							color7.B = (byte)((255 + color7.R) / 2);
						}
						int num58 = 255;
						int num59 = (int)color7.R - (255 - num58);
						if (num59 < 0)
						{
							num59 = 0;
						}
						color7 = new Microsoft.Xna.Framework.Color((int)((byte)num59), (int)((byte)num59), (int)((byte)num59), (int)((byte)num58));
						int num60 = 0;
						int num61 = 0;
						if (num57 == 0)
						{
							num60 = -2;
						}
						if (num57 == 1)
						{
							num60 = 2;
						}
						if (num57 == 2)
						{
							num61 = -2;
						}
						if (num57 == 3)
						{
							num61 = 2;
						}
						Main.spriteBatch.DrawString(Main.fontDeathText, text3, new Vector2((float)(num56 + num60), (float)(num55 + num61)), color7, 0f, default(Vector2), 0.5f, SpriteEffects.None, 0f);
					}
				}
				bool flag10 = false;
				for (int num62 = 0; num62 < 2; num62++)
				{
					for (int num63 = 0; num63 < 3; num63++)
					{
						int num64 = num9 + num63 * 30 - 12;
						int num65 = 360 + Main.screenWidth / 2 - 400;
						float scale2 = 0.9f;
						if (num62 == 0)
						{
							num65 -= 70;
							num64 += 2;
						}
						else
						{
							num65 -= 40;
						}
						text3 = "-";
						if (num62 == 1)
						{
							text3 = "+";
						}
						Vector2 vector2 = new Vector2(24f, 24f);
						int num66 = 142;
						if (Main.mouseX > num65 && (float)Main.mouseX < (float)num65 + vector2.X && Main.mouseY > num64 + 13 && (float)Main.mouseY < (float)(num64 + 13) + vector2.Y)
						{
							if (Main.focusColor != (num62 + 1) * (num63 + 10))
							{
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							}
							Main.focusColor = (num62 + 1) * (num63 + 10);
							flag10 = true;
							num66 = 255;
							if (Main.mouseLeft)
							{
								if (Main.colorDelay <= 1)
								{
									if (Main.colorDelay == 0)
									{
										Main.colorDelay = 40;
									}
									else
									{
										Main.colorDelay = 3;
									}
									int num67 = num62;
									if (num62 == 0)
									{
										num67 = -1;
										if (Main.selColor.R + Main.selColor.G + Main.selColor.B <= 150)
										{
											num67 = 0;
										}
									}
									if (num63 == 0 && (int)Main.selColor.R + num67 >= 0 && (int)Main.selColor.R + num67 <= 255)
									{
										Main.selColor.R = (byte)((int)Main.selColor.R + num67);
									}
									if (num63 == 1 && (int)Main.selColor.G + num67 >= 0 && (int)Main.selColor.G + num67 <= 255)
									{
										Main.selColor.G = (byte)((int)Main.selColor.G + num67);
									}
									if (num63 == 2 && (int)Main.selColor.B + num67 >= 0 && (int)Main.selColor.B + num67 <= 255)
									{
										Main.selColor.B = (byte)((int)Main.selColor.B + num67);
									}
								}
								Main.colorDelay--;
							}
							else
							{
								Main.colorDelay = 0;
							}
						}
						for (int num68 = 0; num68 < 5; num68++)
						{
							Microsoft.Xna.Framework.Color color8 = Microsoft.Xna.Framework.Color.Black;
							if (num68 == 4)
							{
								color8 = color;
								color8.R = (byte)((255 + color8.R) / 2);
								color8.G = (byte)((255 + color8.R) / 2);
								color8.B = (byte)((255 + color8.R) / 2);
							}
							int num69 = (int)color8.R - (255 - num66);
							if (num69 < 0)
							{
								num69 = 0;
							}
							color8 = new Microsoft.Xna.Framework.Color((int)((byte)num69), (int)((byte)num69), (int)((byte)num69), (int)((byte)num66));
							int num70 = 0;
							int num71 = 0;
							if (num68 == 0)
							{
								num70 = -2;
							}
							if (num68 == 1)
							{
								num70 = 2;
							}
							if (num68 == 2)
							{
								num71 = -2;
							}
							if (num68 == 3)
							{
								num71 = 2;
							}
							Main.spriteBatch.DrawString(Main.fontDeathText, text3, new Vector2((float)(num65 + num70), (float)(num64 + num71)), color8, 0f, default(Vector2), scale2, SpriteEffects.None, 0f);
						}
					}
				}
				if (!flag10)
				{
					Main.focusColor = 0;
					Main.colorDelay = 0;
				}
			}
			if (flag2)
			{
				int num72 = 320;
				string text4 = "";
				for (int num73 = 0; num73 < 6; num73++)
				{
					int num74 = num72;
					int num75 = 370 + Main.screenWidth / 2 - 400;
					switch (num73)
					{
					case 0:
						text4 = Lang.menu[98];
						break;
					case 1:
						text4 = Lang.menu[99];
						num74 += 30;
						break;
					case 2:
						text4 = Lang.menu[119];
						num74 += 60;
						break;
					case 3:
						text4 = Math.Round((double)(Main.soundVolume * 100f)) + "%";
						num75 += 90;
						break;
					case 4:
						text4 = Math.Round((double)(Main.musicVolume * 100f)) + "%";
						num75 += 90;
						num74 += 30;
						break;
					case 5:
						text4 = Math.Round((double)(Main.ambientVolume * 100f)) + "%";
						num75 += 90;
						num74 += 60;
						break;
					}
					Microsoft.Xna.Framework.Color textColor = color;
					textColor.R = (byte)((255 + textColor.R) / 2);
					textColor.G = (byte)((255 + textColor.R) / 2);
					textColor.B = (byte)((255 + textColor.R) / 2);
					int num76 = 255;
					int num77 = (int)textColor.R - (255 - num76);
					if (num77 < 0)
					{
						num77 = 0;
					}
					textColor = new Microsoft.Xna.Framework.Color((int)((byte)num77), (int)((byte)num77), (int)((byte)num77), (int)((byte)num76));
					Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontDeathText, text4, (float)num75, (float)num74, textColor, Microsoft.Xna.Framework.Color.Black, Vector2.Zero, 0.5f);
				}
				IngameOptions.rightHover = -1;
				if (!Main.mouseLeft)
				{
					IngameOptions.rightLock = -1;
				}
				IngameOptions.valuePosition = new Vector2((float)(Main.screenWidth / 2 - 40), (float)(num72 - 18 + 30));
				GamepadMainMenuHandler.MenuItemPositions.Add(IngameOptions.valuePosition - Main.colorBarTexture.Size() * new Vector2(0.5f, 0f));
				float num78 = IngameOptions.DrawValueBar(Main.spriteBatch, 1f, Main.soundVolume, 0);
				if (IngameOptions.inBar || IngameOptions.rightLock == 2)
				{
					UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 3;
					IngameOptions.rightHover = 2;
					if (Main.mouseLeft && IngameOptions.rightLock == 2)
					{
						Main.soundVolume = num78;
					}
				}
				IngameOptions.valuePosition = new Vector2((float)(Main.screenWidth / 2 - 40), (float)(num72 - 18 + 60));
				GamepadMainMenuHandler.MenuItemPositions.Add(IngameOptions.valuePosition - Main.colorBarTexture.Size() * new Vector2(0.5f, 0f));
				float num79 = IngameOptions.DrawValueBar(Main.spriteBatch, 1f, Main.musicVolume, 0);
				if (IngameOptions.inBar || IngameOptions.rightLock == 3)
				{
					UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 2;
					IngameOptions.rightHover = 3;
					if (Main.mouseLeft && IngameOptions.rightLock == 3)
					{
						Main.musicVolume = num79;
					}
				}
				IngameOptions.valuePosition = new Vector2((float)(Main.screenWidth / 2 - 40), (float)(num72 - 18 + 90));
				GamepadMainMenuHandler.MenuItemPositions.Add(IngameOptions.valuePosition - Main.colorBarTexture.Size() * new Vector2(0.5f, 0f));
				float num80 = IngameOptions.DrawValueBar(Main.spriteBatch, 1f, Main.ambientVolume, 0);
				if (IngameOptions.inBar || IngameOptions.rightLock == 4)
				{
					UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 4;
					IngameOptions.rightHover = 4;
					if (Main.mouseLeft && IngameOptions.rightLock == 4)
					{
						Main.ambientVolume = num80;
					}
				}
				if (IngameOptions.rightHover != -1)
				{
					IngameOptions.rightLock = IngameOptions.rightHover;
				}
			}
			if (flag3)
			{
				int num81 = 400;
				string text5 = "";
				for (int num82 = 0; num82 < 4; num82++)
				{
					int num83 = num81;
					int num84 = 370 + Main.screenWidth / 2 - 400;
					if (num82 == 0)
					{
						text5 = Lang.menu[52] + ": " + Main.bgScroll;
					}
					for (int num85 = 0; num85 < 5; num85++)
					{
						Microsoft.Xna.Framework.Color color9 = Microsoft.Xna.Framework.Color.Black;
						if (num85 == 4)
						{
							color9 = color;
							color9.R = (byte)((255 + color9.R) / 2);
							color9.G = (byte)((255 + color9.R) / 2);
							color9.B = (byte)((255 + color9.R) / 2);
						}
						int num86 = 255;
						int num87 = (int)color9.R - (255 - num86);
						if (num87 < 0)
						{
							num87 = 0;
						}
						color9 = new Microsoft.Xna.Framework.Color((int)((byte)num87), (int)((byte)num87), (int)((byte)num87), (int)((byte)num86));
						int num88 = 0;
						int num89 = 0;
						if (num85 == 0)
						{
							num88 = -2;
						}
						if (num85 == 1)
						{
							num88 = 2;
						}
						if (num85 == 2)
						{
							num89 = -2;
						}
						if (num85 == 3)
						{
							num89 = 2;
						}
						Main.spriteBatch.DrawString(Main.fontDeathText, text5, new Vector2((float)(num84 + num88), (float)(num83 + num89)), color9, 0f, default(Vector2), 0.5f, SpriteEffects.None, 0f);
					}
				}
				IngameOptions.rightHover = -1;
				if (!Main.mouseLeft)
				{
					IngameOptions.rightLock = -1;
				}
				IngameOptions.valuePosition = new Vector2((float)(Main.screenWidth / 2 - 40), (float)(num81 + 12));
				GamepadMainMenuHandler.MenuItemPositions.Add(IngameOptions.valuePosition - Main.colorBarTexture.Size() * new Vector2(0.5f, 0f));
				float num90 = IngameOptions.DrawValueBar(Main.spriteBatch, 1f, (float)Main.bgScroll / 100f, 0);
				if (IngameOptions.inBar || IngameOptions.rightLock == 2)
				{
					UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 1;
					IngameOptions.rightHover = 2;
					if (Main.mouseLeft && IngameOptions.rightLock == 2)
					{
						Main.bgScroll = (int)(num90 * 100f);
						Main.caveParallax = 1f - (float)Main.bgScroll / 500f;
					}
				}
				if (IngameOptions.rightHover != -1)
				{
					IngameOptions.rightLock = IngameOptions.rightHover;
				}
			}
			for (int num91 = 0; num91 < num5; num91++)
			{
				if (array9[num91] != null)
				{
					Vector2 origin = Main.fontDeathText.MeasureString(array9[num91]);
					origin.X *= 0.5f;
					origin.Y *= 0.5f;
					for (int num92 = 0; num92 < 5; num92++)
					{
						Microsoft.Xna.Framework.Color color10 = Microsoft.Xna.Framework.Color.Black;
						if (num92 == 4)
						{
							switch (array6[num91])
							{
							case 0:
								color10 = color;
								break;
							case 1:
								color10 = Main.mcColor;
								break;
							case 2:
								color10 = Main.hcColor;
								break;
							case 3:
								color10 = Main.highVersionColor;
								break;
							case 4:
							case 5:
							case 6:
								color10 = Main.errorColor;
								break;
							default:
								color10 = color;
								break;
							}
							color10.R = (byte)((255 + color10.R) / 2);
							color10.G = (byte)((255 + color10.G) / 2);
							color10.B = (byte)((255 + color10.B) / 2);
						}
						int num93 = (int)(255f * (this.menuItemScale[num91] * 2f - 1f));
						if (array[num91])
						{
							num93 = 255;
						}
						int num94 = (int)color10.R - (255 - num93);
						if (num94 < 0)
						{
							num94 = 0;
						}
						int num95 = (int)color10.G - (255 - num93);
						if (num95 < 0)
						{
							num95 = 0;
						}
						int num96 = (int)color10.B - (255 - num93);
						if (num96 < 0)
						{
							num96 = 0;
						}
						if (num41 == num91 && num92 == 4)
						{
							float num97 = (float)num93 / 255f;
							num94 = (int)((float)num94 * (1f - num97) + 255f * num97);
							num95 = (int)((float)num95 * (1f - num97) + 215f * num97);
							num96 = (int)((float)num96 * (1f - num97) + 0f * num97);
						}
						color10 = new Microsoft.Xna.Framework.Color((int)((byte)num94), (int)((byte)num95), (int)((byte)num96), (int)((byte)num93));
						if (array3[num91])
						{
							if (num92 == 4)
							{
								color10.R = (byte)((int)(color10.R * Main.mouseTextColor) / 300);
								color10.G = (byte)((int)(color10.G * Main.mouseTextColor) / 300);
								color10.B = (byte)((int)(color10.B * Main.mouseTextColor) / 300);
								color10.A = (byte)((int)(color10.A * Main.mouseTextColor) / 300);
							}
							else
							{
								color10.A -= (byte)(Main.mouseTextColor / 5);
							}
						}
						int num98 = 0;
						int num99 = 0;
						if (num92 == 0)
						{
							num98 = -2;
						}
						if (num92 == 1)
						{
							num98 = 2;
						}
						if (num92 == 2)
						{
							num99 = -2;
						}
						if (num92 == 3)
						{
							num99 = 2;
						}
						float num100 = this.menuItemScale[num91];
						if (Main.menuMode == 15 && num91 == 0)
						{
							num100 *= 0.35f;
						}
						else if (Main.netMode == 2)
						{
							num100 *= 0.5f;
						}
						num100 *= array7[num91];
						if (!array8[num91])
						{
							Main.spriteBatch.DrawString(Main.fontDeathText, array9[num91], new Vector2((float)(num3 + num98 + array5[num91]), (float)(num2 + num4 * num91 + num99) + origin.Y * array7[num91] + (float)array4[num91]), color10, 0f, origin, num100, SpriteEffects.None, 0f);
						}
						else
						{
							Main.spriteBatch.DrawString(Main.fontDeathText, array9[num91], new Vector2((float)(num3 + num98 + array5[num91]), (float)(num2 + num4 * num91 + num99) + origin.Y * array7[num91] + (float)array4[num91]), color10, 0f, new Vector2(0f, origin.Y), num100, SpriteEffects.None, 0f);
						}
					}
					if (!array[num91] && !array2[num91])
					{
						GamepadMainMenuHandler.MenuItemPositions.Add(new Vector2((float)(num3 + array5[num91]), (float)(num2 + num4 * num91) + origin.Y * array7[num91] + (float)array4[num91]));
					}
					if (!array8[num91])
					{
						int num101 = 0;
						if (this.menuWide[num91])
						{
							num101 = 14;
						}
						this.menuWide[num91] = false;
						if ((float)Main.mouseX > (float)num3 - (float)(array9[num91].Length * 10) * array7[num91] + (float)array5[num91] - (float)num101 && (float)Main.mouseX < (float)num3 + (float)(array9[num91].Length * 10) * array7[num91] + (float)array5[num91] + (float)num101 && Main.mouseY > num2 + num4 * num91 + array4[num91] && (float)Main.mouseY < (float)(num2 + num4 * num91 + array4[num91]) + 50f * array7[num91] && Main.hasFocus)
						{
							this.focusMenu = num91;
							if (array[num91] || array2[num91])
							{
								this.focusMenu = -1;
							}
							else
							{
								if (num41 != this.focusMenu)
								{
									Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								}
								if (Main.mouseLeftRelease && Main.mouseLeft)
								{
									this.selectedMenu = num91;
								}
								if (Main.mouseRightRelease && Main.mouseRight)
								{
									this.selectedMenu2 = num91;
								}
							}
						}
					}
					else if (Main.mouseX > num3 + array5[num91] && (float)Main.mouseX < (float)num3 + (float)(array9[num91].Length * 20) * array7[num91] + (float)array5[num91] && Main.mouseY > num2 + num4 * num91 + array4[num91] && (float)Main.mouseY < (float)(num2 + num4 * num91 + array4[num91]) + 50f * array7[num91] && Main.hasFocus)
					{
						this.focusMenu = num91;
						if (array[num91] || array2[num91])
						{
							this.focusMenu = -1;
						}
						else
						{
							if (num41 != this.focusMenu)
							{
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							}
							if (Main.mouseLeftRelease && Main.mouseLeft)
							{
								this.selectedMenu = num91;
							}
							if (Main.mouseRightRelease && Main.mouseRight)
							{
								this.selectedMenu2 = num91;
							}
						}
					}
				}
			}
			if (GamepadMainMenuHandler.MenuItemPositions.Count == 0)
			{
				Vector2 value2 = new Vector2((float)Math.Cos((double)(Main.GlobalTime * 6.28318548f)), (float)Math.Sin((double)(Main.GlobalTime * 6.28318548f * 2f))) * new Vector2(30f, 15f) + Vector2.UnitY * 20f;
				UILinkPointNavigator.SetPosition(2000, new Vector2((float)Main.screenWidth, (float)Main.screenHeight) / 2f + value2);
			}
			for (int num102 = 0; num102 < Main.maxMenuItems; num102++)
			{
				if (num102 == this.focusMenu)
				{
					if (this.menuItemScale[num102] < 1f)
					{
						this.menuItemScale[num102] += 0.02f;
					}
					if (this.menuItemScale[num102] > 1f)
					{
						this.menuItemScale[num102] = 1f;
					}
				}
				else if ((double)this.menuItemScale[num102] > 0.8)
				{
					this.menuItemScale[num102] -= 0.02f;
				}
			}
			if (flag4)
			{
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
				Player pendingPlayer = Main.PendingPlayer;
				pendingPlayer.PlayerFrame();
				pendingPlayer.position.X = (float)num7 + Main.screenPosition.X;
				pendingPlayer.position.Y = (float)num8 + Main.screenPosition.Y;
				this.DrawPlayer(pendingPlayer, pendingPlayer.position, 0f, Vector2.Zero, 0f);
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
			}
			for (int num103 = 0; num103 < 5; num103++)
			{
				Microsoft.Xna.Framework.Color color11 = Microsoft.Xna.Framework.Color.Black;
				if (num103 == 4)
				{
					color11 = color;
					color11.R = (byte)((255 + color11.R) / 2);
					color11.G = (byte)((255 + color11.R) / 2);
					color11.B = (byte)((255 + color11.R) / 2);
				}
				color11.A = (byte)((float)color11.A * 0.3f);
				int num104 = 0;
				int num105 = 0;
				if (num103 == 0)
				{
					num104 = -2;
				}
				if (num103 == 1)
				{
					num104 = 2;
				}
				if (num103 == 2)
				{
					num105 = -2;
				}
				if (num103 == 3)
				{
					num105 = 2;
				}
				string text6 = "Copyright © 2016 Re-Logic";
				Vector2 origin2 = Main.fontMouseText.MeasureString(text6);
				origin2.X *= 0.5f;
				origin2.Y *= 0.5f;
				Main.spriteBatch.DrawString(Main.fontMouseText, text6, new Vector2((float)Main.screenWidth - origin2.X + (float)num104 - 10f, (float)Main.screenHeight - origin2.Y + (float)num105 - 2f), color11, 0f, origin2, 1f, SpriteEffects.None, 0f);
			}
			for (int num106 = 0; num106 < 5; num106++)
			{
				Microsoft.Xna.Framework.Color color12 = Microsoft.Xna.Framework.Color.Black;
				if (num106 == 4)
				{
					color12 = color;
					color12.R = (byte)((255 + color12.R) / 2);
					color12.G = (byte)((255 + color12.R) / 2);
					color12.B = (byte)((255 + color12.R) / 2);
				}
				color12.A = (byte)((float)color12.A * 0.3f);
				int num107 = 0;
				int num108 = 0;
				if (num106 == 0)
				{
					num107 = -2;
				}
				if (num106 == 1)
				{
					num107 = 2;
				}
				if (num106 == 2)
				{
					num108 = -2;
				}
				if (num106 == 3)
				{
					num108 = 2;
				}
				Vector2 origin3 = Main.fontMouseText.MeasureString(Main.versionNumber);
				origin3.X *= 0.5f;
				origin3.Y *= 0.5f;
				Main.spriteBatch.DrawString(Main.fontMouseText, Main.versionNumber, new Vector2(origin3.X + (float)num107 + 10f, (float)Main.screenHeight - origin3.Y + (float)num108 - 2f), color12, 0f, origin3, 1f, SpriteEffects.None, 0f);
			}
			Vector2 bonus = Main.DrawThickCursor(false);
			Main.DrawCursor(bonus, false);
			if (Main.fadeCounter > 0)
			{
				Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
				Main.fadeCounter--;
				float num109 = (float)Main.fadeCounter / 75f * 255f;
				byte b2 = (byte)num109;
				white = new Microsoft.Xna.Framework.Color((int)b2, (int)b2, (int)b2, (int)b2);
				Main.spriteBatch.Draw(Main.fadeTexture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), white);
			}
			Main.spriteBatch.End();
			if (Main.mouseLeft)
			{
				Main.mouseLeftRelease = false;
			}
			else
			{
				Main.mouseLeftRelease = true;
			}
			if (Main.mouseRight)
			{
				Main.mouseRightRelease = false;
			}
			else
			{
				Main.mouseRightRelease = true;
			}
			if (Main.menuMode == num)
			{
				GamepadMainMenuHandler.LastDrew = num;
			}
		}

		private static void CycleClothingStyle(Player plr)
		{
			if (plr.Male)
			{
				int num = 0;
				int[] variantOrderMale = PlayerVariantID.Sets.VariantOrderMale;
				for (int i = 0; i < variantOrderMale.Length; i++)
				{
					if (variantOrderMale[i] == plr.skinVariant)
					{
						num = i;
						break;
					}
				}
				if (num == variantOrderMale.Length - 1)
				{
					plr.skinVariant = variantOrderMale[0];
					return;
				}
				plr.skinVariant = variantOrderMale[num + 1];
				return;
			}
			else
			{
				int num2 = 0;
				int[] variantOrderFemale = PlayerVariantID.Sets.VariantOrderFemale;
				for (int j = 0; j < variantOrderFemale.Length; j++)
				{
					if (variantOrderFemale[j] == plr.skinVariant)
					{
						num2 = j;
						break;
					}
				}
				if (num2 == variantOrderFemale.Length - 1)
				{
					plr.skinVariant = variantOrderFemale[0];
					return;
				}
				plr.skinVariant = variantOrderFemale[num2 + 1];
				return;
			}
		}

		public static void ResetKeyBindings()
		{
			Main.cUp = "W";
			Main.cDown = "S";
			Main.cLeft = "A";
			Main.cRight = "D";
			Main.cJump = "Space";
			Main.cThrowItem = "T";
			Main.cInv = "Escape";
			Main.cHeal = "H";
			Main.cMana = "J";
			Main.cBuff = "B";
			Main.cHook = "E";
			Main.cTorch = "LeftShift";
			Main.cSmart = "LeftControl";
			Main.cMount = "R";
		}

		public static void CursorColor()
		{
			Main.cursorAlpha += (float)Main.cursorColorDirection * 0.015f;
			if (Main.cursorAlpha >= 1f)
			{
				Main.cursorAlpha = 1f;
				Main.cursorColorDirection = -1;
			}
			if ((double)Main.cursorAlpha <= 0.6)
			{
				Main.cursorAlpha = 0.6f;
				Main.cursorColorDirection = 1;
			}
			float num = Main.cursorAlpha * 0.3f + 0.7f;
			byte r = (byte)((float)Main.mouseColor.R * Main.cursorAlpha);
			byte g = (byte)((float)Main.mouseColor.G * Main.cursorAlpha);
			byte b = (byte)((float)Main.mouseColor.B * Main.cursorAlpha);
			byte a = (byte)(255f * num);
			Main.cursorColor = new Microsoft.Xna.Framework.Color((int)r, (int)g, (int)b, (int)a);
			Main.cursorScale = Main.cursorAlpha * 0.3f + 0.7f + 0.1f;
		}

		protected void DrawSplash(GameTime gameTime)
		{
			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Black);
			base.Draw(gameTime);
			Main.spriteBatch.Begin();
			this.splashCounter++;
			Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
			byte b = 0;
			if (this.splashCounter <= 75)
			{
				float num = (float)this.splashCounter / 75f * 255f;
				b = (byte)num;
			}
			else if (this.splashCounter <= 125)
			{
				b = 255;
			}
			else if (this.splashCounter <= 200)
			{
				int num2 = 125 - this.splashCounter;
				float num3 = (float)num2 / 75f * 255f;
				b = (byte)num3;
			}
			else
			{
				Main.showSplash = false;
				Main.fadeCounter = 75;
			}
			white = new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, (int)b);
			Main.spriteBatch.Draw(Main.loTexture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), white);
			Main.spriteBatch.End();
		}

		protected void DrawUnderworldBackground(bool flat)
		{
			if (Main.screenPosition.Y + (float)Main.screenHeight < (float)(Main.maxTilesY - 220) * 16f)
			{
				return;
			}
			Vector2 value = Main.screenPosition + new Vector2((float)(Main.screenWidth >> 1), (float)(Main.screenHeight >> 1));
			for (int i = 4; i >= 0; i--)
			{
				Texture2D texture2D = Main.underworldTexture[i];
				Vector2 vector = new Vector2((float)texture2D.Width, (float)texture2D.Height) * 0.5f;
				float num = flat ? 1f : ((float)(i * 2) + 3f);
				Vector2 value2 = new Vector2(1f / num);
				Microsoft.Xna.Framework.Rectangle value3 = new Microsoft.Xna.Framework.Rectangle(0, 0, texture2D.Width, texture2D.Height);
				float num2 = 1.3f;
				Vector2 zero = Vector2.Zero;
				switch (i)
				{
				case 1:
				{
					int num3 = (int)(Main.GlobalTime * 8f) % 4;
					value3 = new Microsoft.Xna.Framework.Rectangle((num3 >> 1) * (texture2D.Width >> 1), num3 % 2 * (texture2D.Height >> 1), texture2D.Width >> 1, texture2D.Height >> 1);
					vector *= 0.5f;
					zero.Y += 75f;
					break;
				}
				case 2:
					zero.Y += 75f;
					break;
				case 3:
					zero.Y += 75f;
					break;
				case 4:
					num2 = 0.5f;
					zero.Y -= 25f;
					break;
				}
				if (flat)
				{
					num2 *= 1.5f;
				}
				vector *= num2;
				if (flat)
				{
					zero.Y += (float)(Main.underworldTexture[0].Height >> 1) * 1.3f - vector.Y;
				}
				float num4 = num2 * (float)value3.Width;
				float num5 = value.X * value2.X - vector.X + zero.X - (float)(Main.screenWidth >> 1);
				int num6 = (int)(num5 / num4);
				for (int j = num6 - 2; j < num6 + 4 + (int)((float)Main.screenWidth / num4); j++)
				{
					Vector2 value4 = new Vector2((float)j * num2 * ((float)value3.Width / value2.X), (float)(Main.maxTilesY - 200) * 16f) + vector;
					Vector2 position = (value4 - value) * value2 + value - Main.screenPosition - vector + zero;
					Main.spriteBatch.Draw(texture2D, position, new Microsoft.Xna.Framework.Rectangle?(value3), Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, num2, SpriteEffects.None, 0f);
					if (i == 0)
					{
						int num7 = (int)(position.Y + (float)value3.Height * num2);
						Main.spriteBatch.Draw(Main.blackTileTexture, new Microsoft.Xna.Framework.Rectangle((int)position.X, num7, (int)((float)value3.Width * num2), Math.Max(0, Main.screenHeight - num7)), new Microsoft.Xna.Framework.Color(11, 3, 7));
					}
				}
			}
		}

		protected void DrawBackground()
		{
			if (!Main.BackgroundEnabled)
			{
				this.OldDrawBackground();
				return;
			}
			Microsoft.Xna.Framework.Color[] array = new Microsoft.Xna.Framework.Color[9];
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			double num = (double)(Main.maxTilesY - 330);
			double num2 = (double)((int)((num - Main.worldSurface) / 6.0) * 6);
			num = Main.worldSurface + num2 - 5.0;
			int num3 = (int)(255f * (1f - Main.gfxQuality) + 140f * Main.gfxQuality);
			int num4 = (int)(200f * (1f - Main.gfxQuality) + 40f * Main.gfxQuality);
			int num5 = 128;
			Vector2 value = Main.drawToScreen ? Vector2.Zero : new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
			Vector3 vector = new Vector3(0.9f);
			float num6 = MathHelper.Clamp((Main.screenPosition.Y - (float)Main.worldSurface * 16f) / 300f, 0f, 1f);
			Lighting.brightness = Lighting.defBrightness * (1f - num6) + 1f * num6;
			float num7 = (float)((double)(Main.screenPosition.Y - (float)(Main.screenHeight / 2) + 200f) - Main.rockLayer * 16.0) / 300f;
			num7 = MathHelper.Clamp(num7, 0f, 1f);
			int num8 = (int)((Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f);
			int num9;
			if (num8 <= Main.caveBackX[0])
			{
				num9 = Main.caveBackStyle[0];
			}
			else if (num8 <= Main.treeX[1])
			{
				num9 = Main.caveBackStyle[1];
			}
			else if (num8 <= Main.treeX[2])
			{
				num9 = Main.caveBackStyle[2];
			}
			else
			{
				num9 = Main.caveBackStyle[3];
			}
			num9 += 3;
			if (Main.snowTiles > 300 && (Main.screenPosition.Y + (float)Main.screenHeight) / 16f < (float)(Main.maxTilesY - 250))
			{
				num9 = 1;
			}
			if (Main.jungleTiles > 80)
			{
				if (num9 == 1)
				{
					if (Main.jungleTiles > Main.snowTiles)
					{
						num9 = 11;
					}
				}
				else
				{
					num9 = 11;
				}
			}
			if ((double)(Main.screenPosition.Y / 16f) > Main.rockLayer + 60.0 && (double)(Main.screenPosition.Y / 16f) < num - 60.0)
			{
				if (Main.player[Main.myPlayer].ZoneSnow)
				{
					if (Main.player[Main.myPlayer].ZoneCorrupt)
					{
						num9 = 15;
					}
					else if (Main.player[Main.myPlayer].ZoneCrimson)
					{
						num9 = 16;
					}
					else if (Main.player[Main.myPlayer].ZoneHoly)
					{
						num9 = 17;
					}
				}
				else if (Main.player[Main.myPlayer].ZoneCorrupt)
				{
					num9 = 12;
				}
				else if (Main.player[Main.myPlayer].ZoneCrimson)
				{
					num9 = 13;
				}
				else if (Main.player[Main.myPlayer].ZoneHoly)
				{
					num9 = 14;
				}
			}
			if (Main.shroomTiles > 200)
			{
				num9 = 2;
			}
			if (num9 != Main.ugBack)
			{
				Main.oldUgBack = Main.ugBack;
				Main.ugBack = num9;
				Main.ugBackTransition = 1f;
			}
			if (Main.ugBackTransition > 0f)
			{
				Main.ugBackTransition -= 0.25f;
			}
			if (Main.ugBackTransition < 0f)
			{
				Main.ugBackTransition = 0f;
			}
			int[] array2 = new int[7];
			int[] array3 = new int[7];
			for (int i = 0; i < 2; i++)
			{
				int num10 = Main.ugBack;
				if (i == 1)
				{
					num10 = Main.oldUgBack;
				}
				int[] array4 = new int[7];
				if (num10 == 0)
				{
					array4[0] = 1;
					array4[1] = 2;
					array4[2] = 4;
					array4[3] = 3;
					array4[4] = 6;
					array4[5] = 5;
				}
				else if (num10 == 1)
				{
					if (Main.iceBackStyle == 0)
					{
						array4[1] = 33;
						array4[3] = 32;
						array4[0] = 40;
						array4[2] = 34;
					}
					else if (Main.iceBackStyle == 1)
					{
						array4[1] = 118;
						array4[3] = 117;
						array4[0] = 160;
						array4[2] = 161;
					}
					else if (Main.iceBackStyle == 2)
					{
						array4[1] = 165;
						array4[3] = 167;
						array4[0] = 164;
						array4[2] = 166;
					}
					else
					{
						array4[1] = 120;
						array4[3] = 119;
						array4[0] = 162;
						array4[2] = 163;
					}
					array4[4] = array4[3];
				}
				else if (num10 == 2)
				{
					array4[0] = 62;
					array4[1] = 63;
					array4[2] = 64;
					array4[3] = 65;
					array4[4] = 143 + Main.hellBackStyle;
				}
				else if (num10 == 3)
				{
					array4[0] = 66;
					array4[1] = 67;
					array4[2] = 68;
					array4[3] = 69;
					array4[4] = 128 + Main.hellBackStyle;
				}
				else if (num10 == 4)
				{
					array4[0] = 70;
					array4[1] = 71;
					array4[2] = 68;
					array4[3] = 72;
					array4[4] = 128 + Main.hellBackStyle;
				}
				else if (num10 == 5)
				{
					array4[0] = 73;
					array4[1] = 74;
					array4[2] = 75;
					array4[3] = 76;
					array4[4] = 131 + Main.hellBackStyle;
				}
				else if (num10 == 6)
				{
					array4[0] = 77;
					array4[1] = 78;
					array4[2] = 79;
					array4[3] = 80;
					array4[4] = 134 + Main.hellBackStyle;
				}
				else if (num10 == 7)
				{
					array4[0] = 77;
					array4[1] = 81;
					array4[2] = 79;
					array4[3] = 82;
					array4[4] = 134 + Main.hellBackStyle;
				}
				else if (num10 == 8)
				{
					array4[0] = 83;
					array4[1] = 84;
					array4[2] = 85;
					array4[3] = 86;
					array4[4] = 137 + Main.hellBackStyle;
				}
				else if (num10 == 9)
				{
					array4[0] = 83;
					array4[1] = 87;
					array4[2] = 88;
					array4[3] = 89;
					array4[4] = 137 + Main.hellBackStyle;
				}
				else if (num10 == 10)
				{
					array4[0] = 121;
					array4[1] = 122;
					array4[2] = 123;
					array4[3] = 124;
					array4[4] = 140 + Main.hellBackStyle;
				}
				else if (num10 == 11)
				{
					if (Main.jungleBackStyle == 0)
					{
						array4[0] = 153;
						array4[1] = 147;
						array4[2] = 148;
						array4[3] = 149;
						array4[4] = 150 + Main.hellBackStyle;
					}
					else
					{
						array4[0] = 146;
						array4[1] = 154;
						array4[2] = 155;
						array4[3] = 156;
						array4[4] = 157 + Main.hellBackStyle;
					}
				}
				else if (num10 >= 12 && num10 <= 14)
				{
					array4[0] = 66;
					array4[1] = 67;
					array4[2] = 68;
					array4[4] = 128 + Main.hellBackStyle;
					if (num10 == 12)
					{
						array4[3] = 193 + Main.worldID % 4;
					}
					else if (num10 == 13)
					{
						array4[3] = 188 + Main.worldID % 5;
					}
					else if (num10 == 14)
					{
						array4[3] = 197 + Main.worldID % 3;
					}
				}
				else if (num10 >= 15 && num10 <= 17)
				{
					array4[0] = 40;
					array4[1] = 33;
					array4[2] = 34;
					array4[4] = 128 + Main.hellBackStyle;
					if (num10 == 15)
					{
						array4[3] = 200;
					}
					else if (num10 == 16)
					{
						array4[3] = 201 + Main.worldID % 2;
					}
					else if (num10 == 17)
					{
						array4[3] = 203 + Main.worldID % 4;
					}
				}
				if (Main.hellBackStyle == 0)
				{
					array4[5] = 125;
				}
				if (Main.hellBackStyle == 1)
				{
					array4[5] = 126;
				}
				if (Main.hellBackStyle == 2)
				{
					array4[5] = 127;
				}
				array4[6] = 185 + Main.hellBackStyle;
				this.LoadBackground(array4[0]);
				this.LoadBackground(array4[1]);
				this.LoadBackground(array4[2]);
				this.LoadBackground(array4[3]);
				this.LoadBackground(array4[4]);
				this.LoadBackground(array4[5]);
				this.LoadBackground(array4[6]);
				if (i == 0)
				{
					for (int j = 0; j < 7; j++)
					{
						array2[j] = array4[j];
					}
				}
				else
				{
					for (int k = 0; k < 7; k++)
					{
						array3[k] = array4[k];
					}
				}
			}
			Lighting.defBrightness = 1.2f - 0.2f * num7;
			float x = vector.X;
			float y = vector.Y;
			float z = vector.Z;
			this.bgParallax = (double)Main.caveParallax;
			this.bgStart = (int)(-Math.IEEERemainder((double)num5 + (double)Main.screenPosition.X * this.bgParallax, (double)num5) - (double)(num5 / 2)) - (int)value.X;
			this.bgLoops = Main.screenWidth / num5 + 2;
			this.bgTop = (int)((float)((int)Main.worldSurface * 16 - 16) - Main.screenPosition.Y + 16f);
			for (int l = 0; l < this.bgLoops; l++)
			{
				for (int m = 0; m < num5 / 16; m++)
				{
					float num11 = (float)this.bgStart + Main.screenPosition.X;
					num11 = -(float)Math.IEEERemainder((double)num11, 16.0);
					num11 = (float)Math.Round((double)num11);
					int num12 = (int)num11;
					if (num12 == -8)
					{
						num12 = 8;
					}
					float num13 = (float)(this.bgStart + num5 * l + m * 16 + 8);
					float num14 = (float)this.bgTop;
					Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)((num13 + Main.screenPosition.X) / 16f), (int)((Main.screenPosition.Y + num14) / 16f));
					color.R = (byte)((float)color.R * x);
					color.G = (byte)((float)color.G * y);
					color.B = (byte)((float)color.B * z);
					Main.spriteBatch.Draw(Main.backgroundTexture[array2[0]], new Vector2((float)(this.bgStart + num5 * l + 16 * m + num12), (float)this.bgTop) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * m + num12 + 16, 0, 16, 16)), color);
					if (Main.ugBackTransition > 0f)
					{
						Microsoft.Xna.Framework.Color color2 = color;
						color2.R = (byte)((float)color2.R * Main.ugBackTransition);
						color2.G = (byte)((float)color2.G * Main.ugBackTransition);
						color2.B = (byte)((float)color2.B * Main.ugBackTransition);
						color2.A = (byte)((float)color2.A * Main.ugBackTransition);
						Main.spriteBatch.Draw(Main.backgroundTexture[array3[0]], new Vector2((float)(this.bgStart + num5 * l + 16 * m + num12), (float)this.bgTop) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * m + num12 + 16, 0, 16, 16)), color2);
					}
				}
			}
			bool flag = false;
			bool flag2 = false;
			this.bgTop = (int)((float)((int)Main.worldSurface * 16) - Main.screenPosition.Y + 16f);
			if (Main.worldSurface * 16.0 <= (double)(Main.screenPosition.Y + (float)Main.screenHeight + (float)Main.offScreenRange))
			{
				this.bgParallax = (double)Main.caveParallax;
				this.bgStart = (int)(-Math.IEEERemainder((double)num5 + (double)Main.screenPosition.X * this.bgParallax, (double)num5) - (double)(num5 / 2)) - (int)value.X;
				this.bgLoops = (Main.screenWidth + (int)value.X * 2) / num5 + 2;
				if (Main.worldSurface * 16.0 < (double)(Main.screenPosition.Y - 16f))
				{
					this.bgStartY = (int)(Math.IEEERemainder((double)this.bgTop, (double)Main.backgroundHeight[2]) - (double)Main.backgroundHeight[2]);
					this.bgLoopsY = (Main.screenHeight - this.bgStartY + (int)value.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				else
				{
					this.bgStartY = this.bgTop;
					this.bgLoopsY = (Main.screenHeight - this.bgTop + (int)value.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				if (Main.rockLayer * 16.0 < (double)(Main.screenPosition.Y + 600f))
				{
					this.bgLoopsY = (int)(Main.rockLayer * 16.0 - (double)Main.screenPosition.Y + 600.0 - (double)this.bgStartY) / Main.backgroundHeight[2];
					flag2 = true;
				}
				float num15 = (float)this.bgStart + Main.screenPosition.X;
				num15 = -(float)Math.IEEERemainder((double)num15, 16.0);
				num15 = (float)Math.Round((double)num15);
				int num16 = (int)num15;
				if (num16 == -8)
				{
					num16 = 8;
				}
				for (int n = 0; n < this.bgLoops; n++)
				{
					for (int num17 = 0; num17 < this.bgLoopsY; num17++)
					{
						for (int num18 = 0; num18 < num5 / 16; num18++)
						{
							for (int num19 = 0; num19 < 6; num19++)
							{
								float num20 = (float)(this.bgStartY + num17 * 96 + num19 * 16 + 8);
								float num21 = (float)(this.bgStart + num5 * n + num18 * 16 + 8);
								int num22 = (int)((num21 + Main.screenPosition.X) / 16f);
								int num23 = (int)((num20 + Main.screenPosition.Y) / 16f);
								Microsoft.Xna.Framework.Color color3 = Lighting.GetColor(num22, num23);
								if (Main.tile[num22, num23] == null)
								{
									Main.tile[num22, num23] = new Tile();
								}
								if (color3.R > 0 || color3.G > 0 || color3.B > 0)
								{
									if (!Main.drawToScreen)
									{
										VertexColors colors;
										Lighting.GetColor4Slice_New(num22, num23, out colors, 1f);
										Main.tileBatch.Draw(Main.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num5 * n + 16 * num18 + num16), (float)(this.bgStartY + Main.backgroundHeight[array3[1]] * num17 + 16 * num19)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num18 + num16 + 16, 16 * num19, 16, 16)), colors, Vector2.Zero, 1f, SpriteEffects.None);
									}
									else
									{
										if (((int)color3.R > num3 || (double)color3.G > (double)num3 * 1.1 || (double)color3.B > (double)num3 * 1.2) && !Main.tile[num22, num23].active() && Main.wallLight[(int)Main.tile[num22, num23].wall] && Main.ugBackTransition == 0f)
										{
											Lighting.GetColor9Slice(num22, num23, ref array);
											try
											{
												for (int num24 = 0; num24 < 9; num24++)
												{
													int num25 = 0;
													int num26 = 0;
													int width = 4;
													int height = 4;
													Microsoft.Xna.Framework.Color color4 = color3;
													Microsoft.Xna.Framework.Color color5 = color3;
													switch (num24)
													{
													case 0:
														if (!Main.tile[num22 - 1, num23 - 1].active())
														{
															color5 = array[num24];
														}
														break;
													case 1:
														width = 8;
														num25 = 4;
														if (!Main.tile[num22, num23 - 1].active())
														{
															color5 = array[num24];
														}
														break;
													case 2:
														num25 = 12;
														if (!Main.tile[num22 + 1, num23 - 1].active())
														{
															color5 = array[num24];
														}
														break;
													case 3:
														height = 8;
														num26 = 4;
														if (!Main.tile[num22 - 1, num23].active())
														{
															color5 = array[num24];
														}
														break;
													case 4:
														width = 8;
														height = 8;
														num25 = 4;
														num26 = 4;
														break;
													case 5:
														num25 = 12;
														num26 = 4;
														height = 8;
														if (!Main.tile[num22 + 1, num23].active())
														{
															color5 = array[num24];
														}
														break;
													case 6:
														num26 = 12;
														if (!Main.tile[num22 - 1, num23 + 1].active())
														{
															color5 = array[num24];
														}
														break;
													case 7:
														width = 8;
														height = 4;
														num25 = 4;
														num26 = 12;
														if (!Main.tile[num22, num23 + 1].active())
														{
															color5 = array[num24];
														}
														break;
													case 8:
														num25 = 12;
														num26 = 12;
														if (!Main.tile[num22 + 1, num23 + 1].active())
														{
															color5 = array[num24];
														}
														break;
													}
													color4.R = (byte)((color3.R + color5.R) / 2);
													color4.G = (byte)((color3.G + color5.G) / 2);
													color4.B = (byte)((color3.B + color5.B) / 2);
													color4.R = (byte)((float)color4.R * x);
													color4.G = (byte)((float)color4.G * y);
													color4.B = (byte)((float)color4.B * z);
													Main.spriteBatch.Draw(Main.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num5 * n + 16 * num18 + num25 + num16), (float)(this.bgStartY + Main.backgroundHeight[array2[1]] * num17 + 16 * num19 + num26)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num18 + num25 + num16 + 16, 16 * num19 + num26, width, height)), color4);
													if (Main.ugBackTransition > 0f)
													{
														Microsoft.Xna.Framework.Color color6 = color4;
														color6.R = (byte)((float)color6.R * Main.ugBackTransition);
														color6.G = (byte)((float)color6.G * Main.ugBackTransition);
														color6.B = (byte)((float)color6.B * Main.ugBackTransition);
														color6.A = (byte)((float)color6.A * Main.ugBackTransition);
														Main.spriteBatch.Draw(Main.backgroundTexture[array3[1]], new Vector2((float)(this.bgStart + num5 * n + 16 * num18 + num25 + num16), (float)(this.bgStartY + Main.backgroundHeight[array3[1]] * num17 + 16 * num19 + num26)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num18 + num25 + num16 + 16, 16 * num19 + num26, width, height)), color6);
													}
												}
												goto IL_1879;
											}
											catch
											{
												color3.R = (byte)((float)color3.R * x);
												color3.G = (byte)((float)color3.G * y);
												color3.B = (byte)((float)color3.B * z);
												Main.spriteBatch.Draw(Main.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num5 * n + 16 * num18 + num16), (float)(this.bgStartY + Main.backgroundHeight[array2[1]] * num17 + 16 * num19)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num18 + num16 + 16, 16 * num19, 16, 16)), color3);
												goto IL_1879;
											}
										}
										if (((int)color3.R > num4 || (double)color3.G > (double)num4 * 1.1 || (double)color3.B > (double)num4 * 1.2) && Main.ugBackTransition == 0f)
										{
											Lighting.GetColor4Slice(num22, num23, ref array);
											for (int num27 = 0; num27 < 4; num27++)
											{
												int num28 = 0;
												int num29 = 0;
												Microsoft.Xna.Framework.Color color7 = color3;
												Microsoft.Xna.Framework.Color color8 = array[num27];
												switch (num27)
												{
												case 1:
													num28 = 8;
													break;
												case 2:
													num29 = 8;
													break;
												case 3:
													num28 = 8;
													num29 = 8;
													break;
												}
												color7.R = (byte)((color3.R + color8.R) / 2);
												color7.G = (byte)((color3.G + color8.G) / 2);
												color7.B = (byte)((color3.B + color8.B) / 2);
												color7.R = (byte)((float)color7.R * x);
												color7.G = (byte)((float)color7.G * y);
												color7.B = (byte)((float)color7.B * z);
												Main.spriteBatch.Draw(Main.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num5 * n + 16 * num18 + num28 + num16), (float)(this.bgStartY + Main.backgroundHeight[array2[1]] * num17 + 16 * num19 + num29)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num18 + num28 + num16 + 16, 16 * num19 + num29, 8, 8)), color7);
												if (Main.ugBackTransition > 0f)
												{
													Microsoft.Xna.Framework.Color color9 = color7;
													color9.R = (byte)((float)color9.R * Main.ugBackTransition);
													color9.G = (byte)((float)color9.G * Main.ugBackTransition);
													color9.B = (byte)((float)color9.B * Main.ugBackTransition);
													color9.A = (byte)((float)color9.A * Main.ugBackTransition);
													Main.spriteBatch.Draw(Main.backgroundTexture[array3[1]], new Vector2((float)(this.bgStart + num5 * n + 16 * num18 + num28 + num16), (float)(this.bgStartY + Main.backgroundHeight[array3[1]] * num17 + 16 * num19 + num29)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num18 + num28 + num16 + 16, 16 * num19 + num29, 8, 8)), color9);
												}
											}
										}
										else
										{
											color3.R = (byte)((float)color3.R * x);
											color3.G = (byte)((float)color3.G * y);
											color3.B = (byte)((float)color3.B * z);
											Main.spriteBatch.Draw(Main.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num5 * n + 16 * num18 + num16), (float)(this.bgStartY + Main.backgroundHeight[array2[1]] * num17 + 16 * num19)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num18 + num16 + 16, 16 * num19, 16, 16)), color3);
											if (Main.ugBackTransition > 0f)
											{
												Microsoft.Xna.Framework.Color color10 = color3;
												color10.R = (byte)((float)color10.R * Main.ugBackTransition);
												color10.G = (byte)((float)color10.G * Main.ugBackTransition);
												color10.B = (byte)((float)color10.B * Main.ugBackTransition);
												color10.A = (byte)((float)color10.A * Main.ugBackTransition);
												Main.spriteBatch.Draw(Main.backgroundTexture[array3[1]], new Vector2((float)(this.bgStart + num5 * n + 16 * num18 + num16), (float)(this.bgStartY + Main.backgroundHeight[array3[1]] * num17 + 16 * num19)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num18 + num16 + 16, 16 * num19, 16, 16)), color10);
											}
										}
									}
								}
								else
								{
									color3.R = (byte)((float)color3.R * x);
									color3.G = (byte)((float)color3.G * y);
									color3.B = (byte)((float)color3.B * z);
									Main.spriteBatch.Draw(Main.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num5 * n + 16 * num18 + num16), (float)(this.bgStartY + Main.backgroundHeight[array2[1]] * num17 + 16 * num19)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num18 + num16 + 16, 16 * num19, 16, 16)), color3);
								}
								IL_1879:;
							}
						}
					}
				}
				if (Main.ugBackTransition > 0f)
				{
					for (int num30 = 0; num30 < this.bgLoops; num30++)
					{
						for (int num31 = 0; num31 < this.bgLoopsY; num31++)
						{
							for (int num32 = 0; num32 < num5 / 16; num32++)
							{
								for (int num33 = 0; num33 < 6; num33++)
								{
									float num34 = (float)(this.bgStartY + num31 * 96 + num33 * 16 + 8);
									float num35 = (float)(this.bgStart + num5 * num30 + num32 * 16 + 8);
									int num36 = (int)((num35 + Main.screenPosition.X) / 16f);
									int num37 = (int)((num34 + Main.screenPosition.Y) / 16f);
									Microsoft.Xna.Framework.Color color11 = Lighting.GetColor(num36, num37);
									if (Main.tile[num36, num37] == null)
									{
										Main.tile[num36, num37] = new Tile();
									}
									if (color11.R > 0 || color11.G > 0 || color11.B > 0)
									{
										VertexColors colors2;
										Lighting.GetColor4Slice_New(num36, num37, out colors2, Main.ugBackTransition);
										byte a = (byte)(255f * Main.ugBackTransition);
										colors2.BottomLeftColor.A = a;
										colors2.BottomRightColor.A = a;
										colors2.TopLeftColor.A = a;
										colors2.TopRightColor.A = a;
										Main.tileBatch.Draw(Main.backgroundTexture[array3[1]], new Vector2((float)(this.bgStart + num5 * num30 + 16 * num32 + num16), (float)(this.bgStartY + Main.backgroundHeight[array3[1]] * num31 + 16 * num33)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num32 + num16 + 16, 16 * num33, 16, 16)), colors2, Vector2.Zero, 1f, SpriteEffects.None);
									}
								}
							}
						}
					}
				}
				if (flag2)
				{
					this.bgParallax = (double)Main.caveParallax;
					this.bgStart = (int)(-Math.IEEERemainder((double)num5 + (double)Main.screenPosition.X * this.bgParallax, (double)num5) - (double)(num5 / 2)) - (int)value.X;
					this.bgLoops = (Main.screenWidth + (int)value.X * 2) / num5 + 2;
					this.bgTop = this.bgStartY + this.bgLoopsY * Main.backgroundHeight[2];
					if (this.bgTop > -32)
					{
						for (int num38 = 0; num38 < this.bgLoops; num38++)
						{
							for (int num39 = 0; num39 < num5 / 16; num39++)
							{
								float num40 = (float)(this.bgStart + num5 * num38 + num39 * 16 + 8);
								float num41 = (float)this.bgTop;
								Microsoft.Xna.Framework.Color color12 = Lighting.GetColor((int)((num40 + Main.screenPosition.X) / 16f), (int)((Main.screenPosition.Y + num41) / 16f));
								color12.R = (byte)((float)color12.R * x);
								color12.G = (byte)((float)color12.G * y);
								color12.B = (byte)((float)color12.B * z);
								Main.spriteBatch.Draw(Main.backgroundTexture[array2[2]], new Vector2((float)(this.bgStart + num5 * num38 + 16 * num39 + num16), (float)this.bgTop) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num39 + num16 + 16, 0, 16, 16)), color12);
								if (Main.ugBackTransition > 0f)
								{
									Microsoft.Xna.Framework.Color color13 = color12;
									color13.R = (byte)((float)color13.R * Main.ugBackTransition);
									color13.G = (byte)((float)color13.G * Main.ugBackTransition);
									color13.B = (byte)((float)color13.B * Main.ugBackTransition);
									color13.A = (byte)((float)color13.A * Main.ugBackTransition);
									Main.spriteBatch.Draw(Main.backgroundTexture[array3[2]], new Vector2((float)(this.bgStart + num5 * num38 + 16 * num39 + num16), (float)this.bgTop) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num39 + num16 + 16, 0, 16, 16)), color13);
								}
							}
						}
					}
				}
			}
			this.bgTop = (int)((float)((int)Main.rockLayer * 16) - Main.screenPosition.Y + 16f + 600f - 8f);
			if (Main.rockLayer * 16.0 <= (double)(Main.screenPosition.Y + 600f))
			{
				this.bgParallax = (double)Main.caveParallax;
				this.bgStart = (int)(-Math.IEEERemainder((double)num5 + (double)Main.screenPosition.X * this.bgParallax, (double)num5) - (double)(num5 / 2)) - (int)value.X;
				this.bgLoops = (Main.screenWidth + (int)value.X * 2) / num5 + 2;
				if (Main.rockLayer * 16.0 + (double)Main.screenHeight < (double)(Main.screenPosition.Y - 16f))
				{
					this.bgStartY = (int)(Math.IEEERemainder((double)this.bgTop, (double)Main.backgroundHeight[3]) - (double)Main.backgroundHeight[3]);
					this.bgLoopsY = (Main.screenHeight - this.bgStartY + (int)value.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				else
				{
					this.bgStartY = this.bgTop;
					this.bgLoopsY = (Main.screenHeight - this.bgTop + (int)value.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				if (num * 16.0 < (double)(Main.screenPosition.Y + 600f))
				{
					this.bgLoopsY = (int)(num * 16.0 - (double)Main.screenPosition.Y + 600.0 - (double)this.bgStartY) / Main.backgroundHeight[2];
					flag = true;
				}
				float num42 = (float)this.bgStart + Main.screenPosition.X;
				num42 = -(float)Math.IEEERemainder((double)num42, 16.0);
				num42 = (float)Math.Round((double)num42);
				int num43 = (int)num42;
				if (num43 == -8)
				{
					num43 = 8;
				}
				for (int num44 = 0; num44 < this.bgLoops; num44++)
				{
					for (int num45 = 0; num45 < this.bgLoopsY; num45++)
					{
						for (int num46 = 0; num46 < num5 / 16; num46++)
						{
							for (int num47 = 0; num47 < 6; num47++)
							{
								float num48 = (float)(this.bgStartY + num45 * 96 + num47 * 16 + 8);
								float num49 = (float)(this.bgStart + num5 * num44 + num46 * 16 + 8);
								int num50 = (int)((num49 + Main.screenPosition.X) / 16f);
								int num51 = (int)((num48 + Main.screenPosition.Y) / 16f);
								Microsoft.Xna.Framework.Color color14 = Lighting.GetColor(num50, num51);
								if (Main.tile[num50, num51] == null)
								{
									Main.tile[num50, num51] = new Tile();
								}
								bool flag3 = false;
								if (Main.caveParallax != 0f)
								{
									if (Main.tile[num50 - 1, num51] == null)
									{
										Main.tile[num50 - 1, num51] = new Tile();
									}
									if (Main.tile[num50 + 1, num51] == null)
									{
										Main.tile[num50 + 1, num51] = new Tile();
									}
									if (Main.wallLight[(int)Main.tile[num50, num51].wall] || Main.wallLight[(int)Main.tile[num50 - 1, num51].wall] || Main.wallLight[(int)Main.tile[num50 + 1, num51].wall])
									{
										flag3 = true;
									}
								}
								else if (Main.wallLight[(int)Main.tile[num50, num51].wall])
								{
									flag3 = true;
								}
								if ((flag3 || color14.R == 0 || color14.G == 0 || color14.B == 0) && (color14.R > 0 || color14.G > 0 || color14.B > 0) && (Main.wallLight[(int)Main.tile[num50, num51].wall] || Main.caveParallax != 0f))
								{
									if (Lighting.lightMode < 2 && color14.R < 230 && color14.G < 230 && color14.B < 230 && Main.ugBackTransition == 0f)
									{
										if (((int)color14.R > num3 || (double)color14.G > (double)num3 * 1.1 || (double)color14.B > (double)num3 * 1.2) && !Main.tile[num50, num51].active())
										{
											Lighting.GetColor9Slice(num50, num51, ref array);
											for (int num52 = 0; num52 < 9; num52++)
											{
												int num53 = 0;
												int num54 = 0;
												int width2 = 4;
												int height2 = 4;
												Microsoft.Xna.Framework.Color color15 = color14;
												Microsoft.Xna.Framework.Color color16 = color14;
												switch (num52)
												{
												case 0:
													if (!Main.tile[num50 - 1, num51 - 1].active())
													{
														color16 = array[num52];
													}
													break;
												case 1:
													width2 = 8;
													num53 = 4;
													if (!Main.tile[num50, num51 - 1].active())
													{
														color16 = array[num52];
													}
													break;
												case 2:
													num53 = 12;
													if (!Main.tile[num50 + 1, num51 - 1].active())
													{
														color16 = array[num52];
													}
													break;
												case 3:
													height2 = 8;
													num54 = 4;
													if (!Main.tile[num50 - 1, num51].active())
													{
														color16 = array[num52];
													}
													break;
												case 4:
													width2 = 8;
													height2 = 8;
													num53 = 4;
													num54 = 4;
													break;
												case 5:
													num53 = 12;
													num54 = 4;
													height2 = 8;
													if (!Main.tile[num50 + 1, num51].active())
													{
														color16 = array[num52];
													}
													break;
												case 6:
													num54 = 12;
													if (!Main.tile[num50 - 1, num51 + 1].active())
													{
														color16 = array[num52];
													}
													break;
												case 7:
													width2 = 8;
													height2 = 4;
													num53 = 4;
													num54 = 12;
													if (!Main.tile[num50, num51 + 1].active())
													{
														color16 = array[num52];
													}
													break;
												case 8:
													num53 = 12;
													num54 = 12;
													if (!Main.tile[num50 + 1, num51 + 1].active())
													{
														color16 = array[num52];
													}
													break;
												}
												color15.R = (byte)((color14.R + color16.R) / 2);
												color15.G = (byte)((color14.G + color16.G) / 2);
												color15.B = (byte)((color14.B + color16.B) / 2);
												color15.R = (byte)((float)color15.R * x);
												color15.G = (byte)((float)color15.G * y);
												color15.B = (byte)((float)color15.B * z);
												Main.spriteBatch.Draw(Main.backgroundTexture[array2[3]], new Vector2((float)(this.bgStart + num5 * num44 + 16 * num46 + num53 + num43), (float)(this.bgStartY + Main.backgroundHeight[array2[3]] * num45 + 16 * num47 + num54)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num46 + num53 + num43 + 16, 16 * num47 + num54, width2, height2)), color15);
												if (Main.ugBackTransition > 0f)
												{
													Microsoft.Xna.Framework.Color color17 = color15;
													color17.R = (byte)((float)color17.R * Main.ugBackTransition);
													color17.G = (byte)((float)color17.G * Main.ugBackTransition);
													color17.B = (byte)((float)color17.B * Main.ugBackTransition);
													color17.A = (byte)((float)color17.A * Main.ugBackTransition);
													Main.spriteBatch.Draw(Main.backgroundTexture[array3[3]], new Vector2((float)(this.bgStart + num5 * num44 + 16 * num46 + num53 + num43), (float)(this.bgStartY + Main.backgroundHeight[array3[3]] * num45 + 16 * num47 + num54)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num46 + num53 + num43 + 16, 16 * num47 + num54, width2, height2)), color17);
												}
											}
										}
										else if ((int)color14.R > num4 || (double)color14.G > (double)num4 * 1.1 || (double)color14.B > (double)num4 * 1.2)
										{
											Lighting.GetColor4Slice(num50, num51, ref array);
											for (int num55 = 0; num55 < 4; num55++)
											{
												int num56 = 0;
												int num57 = 0;
												Microsoft.Xna.Framework.Color color18 = color14;
												Microsoft.Xna.Framework.Color color19 = array[num55];
												switch (num55)
												{
												case 1:
													num56 = 8;
													break;
												case 2:
													num57 = 8;
													break;
												case 3:
													num56 = 8;
													num57 = 8;
													break;
												}
												color18.R = (byte)((color14.R + color19.R) / 2);
												color18.G = (byte)((color14.G + color19.G) / 2);
												color18.B = (byte)((color14.B + color19.B) / 2);
												color18.R = (byte)((float)color18.R * x);
												color18.G = (byte)((float)color18.G * y);
												color18.B = (byte)((float)color18.B * z);
												Main.spriteBatch.Draw(Main.backgroundTexture[array2[3]], new Vector2((float)(this.bgStart + num5 * num44 + 16 * num46 + num56 + num43), (float)(this.bgStartY + Main.backgroundHeight[array2[3]] * num45 + 16 * num47 + num57)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num46 + num56 + num43 + 16, 16 * num47 + num57, 8, 8)), color18);
												if (Main.ugBackTransition > 0f)
												{
													Microsoft.Xna.Framework.Color color20 = color18;
													color20.R = (byte)((float)color20.R * Main.ugBackTransition);
													color20.G = (byte)((float)color20.G * Main.ugBackTransition);
													color20.B = (byte)((float)color20.B * Main.ugBackTransition);
													color20.A = (byte)((float)color20.A * Main.ugBackTransition);
													Main.spriteBatch.Draw(Main.backgroundTexture[array3[3]], new Vector2((float)(this.bgStart + num5 * num44 + 16 * num46 + num56 + num43), (float)(this.bgStartY + Main.backgroundHeight[array3[3]] * num45 + 16 * num47 + num57)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num46 + num56 + num43 + 16, 16 * num47 + num57, 8, 8)), color20);
												}
											}
										}
										else
										{
											color14.R = (byte)((float)color14.R * x);
											color14.G = (byte)((float)color14.G * y);
											color14.B = (byte)((float)color14.B * z);
											Main.spriteBatch.Draw(Main.backgroundTexture[array2[3]], new Vector2((float)(this.bgStart + num5 * num44 + 16 * num46 + num43), (float)(this.bgStartY + Main.backgroundHeight[array2[3]] * num45 + 16 * num47)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num46 + num43 + 16, 16 * num47, 16, 16)), color14);
											if (Main.ugBackTransition > 0f)
											{
												Microsoft.Xna.Framework.Color color21 = color14;
												color21.R = (byte)((float)color21.R * Main.ugBackTransition);
												color21.G = (byte)((float)color21.G * Main.ugBackTransition);
												color21.B = (byte)((float)color21.B * Main.ugBackTransition);
												color21.A = (byte)((float)color21.A * Main.ugBackTransition);
												Main.spriteBatch.Draw(Main.backgroundTexture[array3[3]], new Vector2((float)(this.bgStart + num5 * num44 + 16 * num46 + num43), (float)(this.bgStartY + Main.backgroundHeight[array3[3]] * num45 + 16 * num47)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num46 + num43 + 16, 16 * num47, 16, 16)), color21);
											}
										}
									}
									else
									{
										color14.R = (byte)((float)color14.R * x);
										color14.G = (byte)((float)color14.G * y);
										color14.B = (byte)((float)color14.B * z);
										Main.spriteBatch.Draw(Main.backgroundTexture[array2[3]], new Vector2((float)(this.bgStart + num5 * num44 + 16 * num46 + num43), (float)(this.bgStartY + Main.backgroundHeight[array2[3]] * num45 + 16 * num47)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num46 + num43 + 16, 16 * num47, 16, 16)), color14);
										if (Main.ugBackTransition > 0f)
										{
											Microsoft.Xna.Framework.Color color22 = color14;
											color22.R = (byte)((float)color22.R * Main.ugBackTransition);
											color22.G = (byte)((float)color22.G * Main.ugBackTransition);
											color22.B = (byte)((float)color22.B * Main.ugBackTransition);
											color22.A = (byte)((float)color22.A * Main.ugBackTransition);
											Main.spriteBatch.Draw(Main.backgroundTexture[array3[3]], new Vector2((float)(this.bgStart + num5 * num44 + 16 * num46 + num43), (float)(this.bgStartY + Main.backgroundHeight[array3[3]] * num45 + 16 * num47)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num46 + num43 + 16, 16 * num47, 16, 16)), color22);
										}
									}
								}
							}
						}
					}
				}
				num5 = 128;
				if (flag)
				{
					this.bgParallax = (double)Main.caveParallax;
					this.bgStart = (int)(-Math.IEEERemainder((double)num5 + (double)Main.screenPosition.X * this.bgParallax, (double)num5) - (double)(num5 / 2)) - (int)value.X;
					this.bgLoops = (Main.screenWidth + (int)value.X * 2) / num5 + 2;
					this.bgTop = this.bgStartY + this.bgLoopsY * Main.backgroundHeight[2];
					for (int num58 = 0; num58 < this.bgLoops; num58++)
					{
						for (int num59 = 0; num59 < num5 / 16; num59++)
						{
							float num60 = (float)(this.bgStart + num5 * num58 + num59 * 16 + 8);
							float num61 = (float)this.bgTop;
							Microsoft.Xna.Framework.Color color23 = Lighting.GetColor((int)((num60 + Main.screenPosition.X) / 16f), (int)((Main.screenPosition.Y + num61) / 16f));
							color23.R = (byte)((float)color23.R * x);
							color23.G = (byte)((float)color23.G * y);
							color23.B = (byte)((float)color23.B * z);
							Main.spriteBatch.Draw(Main.backgroundTexture[array2[4]], new Vector2((float)(this.bgStart + num5 * num58 + 16 * num59 + num43), (float)this.bgTop) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num59 + num43 + 16, Main.magmaBGFrame * 16, 16, 16)), color23);
							if (Main.ugBackTransition > 0f)
							{
								Microsoft.Xna.Framework.Color color24 = color23;
								color24.R = (byte)((float)color24.R * Main.ugBackTransition);
								color24.G = (byte)((float)color24.G * Main.ugBackTransition);
								color24.B = (byte)((float)color24.B * Main.ugBackTransition);
								color24.A = (byte)((float)color24.A * Main.ugBackTransition);
								Main.spriteBatch.Draw(Main.backgroundTexture[array3[4]], new Vector2((float)(this.bgStart + num5 * num58 + 16 * num59 + num43), (float)this.bgTop) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num59 + num43 + 16, Main.magmaBGFrame * 16, 16, 16)), color24);
							}
						}
					}
				}
			}
			this.bgTop = (int)((float)((int)num * 16) - Main.screenPosition.Y + 16f + 600f) - 8;
			bool flag4 = false;
			if (num * 16.0 <= (double)(Main.screenPosition.Y + 600f))
			{
				this.bgStart = (int)(-Math.IEEERemainder((double)num5 + (double)Main.screenPosition.X * this.bgParallax, (double)num5) - (double)(num5 / 2)) - (int)value.X;
				this.bgLoops = (Main.screenWidth + (int)value.X * 2) / num5 + 2;
				if (num * 16.0 + (double)Main.screenHeight < (double)(Main.screenPosition.Y - 16f))
				{
					this.bgStartY = (int)(Math.IEEERemainder((double)this.bgTop, (double)Main.backgroundHeight[2]) - (double)Main.backgroundHeight[2]);
					this.bgLoopsY = (Main.screenHeight - this.bgStartY + (int)value.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				else
				{
					this.bgStartY = this.bgTop;
					this.bgLoopsY = (Main.screenHeight - this.bgTop + (int)value.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				if ((float)(Main.maxTilesY - 200) * 16f < Main.screenPosition.Y + (float)Main.screenHeight)
				{
					this.bgLoopsY = (int)Math.Ceiling((double)(((float)(Main.maxTilesY - 200) * 16f - Main.screenPosition.Y - (float)this.bgStartY) / (float)Main.backgroundHeight[2]));
					flag4 = true;
				}
				num3 = (int)((double)num3 * 1.5);
				num4 = (int)((double)num4 * 1.5);
				float num62 = (float)this.bgStart + Main.screenPosition.X;
				num62 = -(float)Math.IEEERemainder((double)num62, 16.0);
				num62 = (float)Math.Round((double)num62);
				int num63 = (int)num62;
				if (num63 == -8)
				{
					num63 = 8;
				}
				for (int num64 = 0; num64 < this.bgLoops; num64++)
				{
					for (int num65 = 0; num65 < this.bgLoopsY; num65++)
					{
						for (int num66 = 0; num66 < num5 / 16; num66++)
						{
							for (int num67 = 0; num67 < 6; num67++)
							{
								float num68 = (float)(this.bgStartY + num65 * 96 + num67 * 16 + 8);
								float num69 = (float)(this.bgStart + num5 * num64 + num66 * 16 + 8);
								int num70 = (int)((num69 + Main.screenPosition.X) / 16f);
								int num71 = (int)((num68 + Main.screenPosition.Y) / 16f);
								Microsoft.Xna.Framework.Color color25 = Lighting.GetColor(num70, num71);
								if (Main.tile[num70, num71] == null)
								{
									Main.tile[num70, num71] = new Tile();
								}
								bool flag5 = false;
								if (Main.caveParallax != 0f)
								{
									if (Main.tile[num70 - 1, num71] == null)
									{
										Main.tile[num70 - 1, num71] = new Tile();
									}
									if (Main.tile[num70 + 1, num71] == null)
									{
										Main.tile[num70 + 1, num71] = new Tile();
									}
									if (Main.wallLight[(int)Main.tile[num70, num71].wall] || Main.wallLight[(int)Main.tile[num70 - 1, num71].wall] || Main.wallLight[(int)Main.tile[num70 + 1, num71].wall])
									{
										flag5 = true;
									}
								}
								else if (Main.wallLight[(int)Main.tile[num70, num71].wall])
								{
									flag5 = true;
								}
								if ((flag5 || color25.R == 0 || color25.G == 0 || color25.B == 0) && (color25.R > 0 || color25.G > 0 || color25.B > 0 || num71 > Main.maxTilesY - 300) && (Main.wallLight[(int)Main.tile[num70, num71].wall] || Main.caveParallax != 0f))
								{
									if (Lighting.lightMode < 2 && color25.R < 230 && color25.G < 230 && color25.B < 230)
									{
										if (((int)color25.R > num3 || (double)color25.G > (double)num3 * 1.1 || (double)color25.B > (double)num3 * 1.2) && !Main.tile[num70, num71].active())
										{
											Lighting.GetColor9Slice(num70, num71, ref array);
											for (int num72 = 0; num72 < 9; num72++)
											{
												int num73 = 0;
												int num74 = 0;
												int width3 = 4;
												int height3 = 4;
												Microsoft.Xna.Framework.Color color26 = color25;
												Microsoft.Xna.Framework.Color color27 = color25;
												switch (num72)
												{
												case 0:
													if (!Main.tile[num70 - 1, num71 - 1].active())
													{
														color27 = array[num72];
													}
													break;
												case 1:
													width3 = 8;
													num73 = 4;
													if (!Main.tile[num70, num71 - 1].active())
													{
														color27 = array[num72];
													}
													break;
												case 2:
													num73 = 12;
													if (!Main.tile[num70 + 1, num71 - 1].active())
													{
														color27 = array[num72];
													}
													break;
												case 3:
													height3 = 8;
													num74 = 4;
													if (!Main.tile[num70 - 1, num71].active())
													{
														color27 = array[num72];
													}
													break;
												case 4:
													width3 = 8;
													height3 = 8;
													num73 = 4;
													num74 = 4;
													break;
												case 5:
													num73 = 12;
													num74 = 4;
													height3 = 8;
													if (!Main.tile[num70 + 1, num71].active())
													{
														color27 = array[num72];
													}
													break;
												case 6:
													num74 = 12;
													if (!Main.tile[num70 - 1, num71 + 1].active())
													{
														color27 = array[num72];
													}
													break;
												case 7:
													width3 = 8;
													height3 = 4;
													num73 = 4;
													num74 = 12;
													if (!Main.tile[num70, num71 + 1].active())
													{
														color27 = array[num72];
													}
													break;
												case 8:
													num73 = 12;
													num74 = 12;
													if (!Main.tile[num70 + 1, num71 + 1].active())
													{
														color27 = array[num72];
													}
													break;
												}
												color26.R = (byte)((color25.R + color27.R) / 2);
												color26.G = (byte)((color25.G + color27.G) / 2);
												color26.B = (byte)((color25.B + color27.B) / 2);
												color26.R = (byte)((float)color26.R * x);
												color26.G = (byte)((float)color26.G * y);
												color26.B = (byte)((float)color26.B * z);
												Main.spriteBatch.Draw(Main.backgroundTexture[array2[5]], new Vector2((float)(this.bgStart + num5 * num64 + 16 * num66 + num73 + num63), (float)(this.bgStartY + Main.backgroundHeight[2] * num65 + 16 * num67 + num74)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num66 + num73 + num63 + 16, 16 * num67 + Main.backgroundHeight[2] * Main.magmaBGFrame + num74, width3, height3)), color26, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
											}
										}
										else if ((int)color25.R > num4 || (double)color25.G > (double)num4 * 1.1 || (double)color25.B > (double)num4 * 1.2)
										{
											Lighting.GetColor4Slice(num70, num71, ref array);
											for (int num75 = 0; num75 < 4; num75++)
											{
												int num76 = 0;
												int num77 = 0;
												Microsoft.Xna.Framework.Color color28 = color25;
												Microsoft.Xna.Framework.Color color29 = array[num75];
												switch (num75)
												{
												case 1:
													num76 = 8;
													break;
												case 2:
													num77 = 8;
													break;
												case 3:
													num76 = 8;
													num77 = 8;
													break;
												}
												color28.R = (byte)((color25.R + color29.R) / 2);
												color28.G = (byte)((color25.G + color29.G) / 2);
												color28.B = (byte)((color25.B + color29.B) / 2);
												color28.R = (byte)((float)color28.R * x);
												color28.G = (byte)((float)color28.G * y);
												color28.B = (byte)((float)color28.B * z);
												Main.spriteBatch.Draw(Main.backgroundTexture[array2[5]], new Vector2((float)(this.bgStart + num5 * num64 + 16 * num66 + num76 + num63), (float)(this.bgStartY + Main.backgroundHeight[2] * num65 + 16 * num67 + num77)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num66 + num76 + num63 + 16, 16 * num67 + Main.backgroundHeight[2] * Main.magmaBGFrame + num77, 8, 8)), color28, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
											}
										}
										else
										{
											color25.R = (byte)((float)color25.R * x);
											color25.G = (byte)((float)color25.G * y);
											color25.B = (byte)((float)color25.B * z);
											Main.spriteBatch.Draw(Main.backgroundTexture[array2[5]], new Vector2((float)(this.bgStart + num5 * num64 + 16 * num66 + num63), (float)(this.bgStartY + Main.backgroundHeight[2] * num65 + 16 * num67)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num66 + num63 + 16, 16 * num67 + Main.backgroundHeight[2] * Main.magmaBGFrame, 16, 16)), color25, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
										}
									}
									else
									{
										color25.R = (byte)((float)color25.R * x);
										color25.G = (byte)((float)color25.G * y);
										color25.B = (byte)((float)color25.B * z);
										Main.spriteBatch.Draw(Main.backgroundTexture[array2[5]], new Vector2((float)(this.bgStart + num5 * num64 + 16 * num66 + num63), (float)(this.bgStartY + Main.backgroundHeight[2] * num65 + 16 * num67)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num66 + num63 + 16, 16 * num67 + Main.backgroundHeight[2] * Main.magmaBGFrame, 16, 16)), color25, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
									}
								}
							}
						}
					}
				}
				if (flag4)
				{
					this.bgParallax = (double)Main.caveParallax;
					this.bgStart = (int)(-Math.IEEERemainder((double)num5 + (double)Main.screenPosition.X * this.bgParallax, (double)num5) - (double)(num5 / 2)) - (int)value.X;
					this.bgLoops = (Main.screenWidth + (int)value.X * 2) / num5 + 2;
					this.bgTop = this.bgStartY + this.bgLoopsY * Main.backgroundHeight[2];
					for (int num78 = 0; num78 < this.bgLoops; num78++)
					{
						for (int num79 = 0; num79 < num5 / 16; num79++)
						{
							float num80 = (float)(this.bgStart + num5 * num78 + num79 * 16 + 8);
							float num81 = (float)this.bgTop;
							Microsoft.Xna.Framework.Color color30 = Lighting.GetColor((int)((num80 + Main.screenPosition.X) / 16f), (int)((Main.screenPosition.Y + num81) / 16f));
							color30.R = (byte)((float)color30.R * x);
							color30.G = (byte)((float)color30.G * y);
							color30.B = (byte)((float)color30.B * z);
							Main.spriteBatch.Draw(Main.backgroundTexture[array2[6]], new Vector2((float)(this.bgStart + num5 * num78 + 16 * num79 + num63), (float)this.bgTop) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num79 + num63 + 16, Main.magmaBGFrame * 16, 16, 16)), color30);
							if (Main.ugBackTransition > 0f)
							{
								Microsoft.Xna.Framework.Color color31 = color30;
								color31.R = (byte)((float)color31.R * Main.ugBackTransition);
								color31.G = (byte)((float)color31.G * Main.ugBackTransition);
								color31.B = (byte)((float)color31.B * Main.ugBackTransition);
								color31.A = (byte)((float)color31.A * Main.ugBackTransition);
								Main.spriteBatch.Draw(Main.backgroundTexture[array3[6]], new Vector2((float)(this.bgStart + num5 * num78 + 16 * num79 + num63), (float)this.bgTop) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num79 + num63 + 16, Main.magmaBGFrame * 16, 16, 16)), color31);
							}
						}
					}
				}
			}
			Lighting.brightness = Lighting.defBrightness;
			TimeLogger.DrawTime(3, stopwatch.Elapsed.TotalMilliseconds);
		}

		protected void OldDrawBackground()
		{
			Microsoft.Xna.Framework.Color[] array = new Microsoft.Xna.Framework.Color[9];
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			int num = (int)(255f * (1f - Main.gfxQuality) + 140f * Main.gfxQuality);
			int num2 = (int)(200f * (1f - Main.gfxQuality) + 40f * Main.gfxQuality);
			int num3 = 128;
			Vector2 zero = new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
			if (Main.drawToScreen)
			{
				zero = Vector2.Zero;
			}
			float num4 = 0.9f;
			float num5 = num4;
			float num6 = num4;
			float num7 = num4;
			float num8 = 0f;
			if (Main.bloodTiles > Main.evilTiles && Main.bloodTiles > Main.holyTiles)
			{
				num8 = (float)Main.bloodTiles;
			}
			else if (Main.holyTiles > Main.evilTiles)
			{
				num8 = (float)Main.holyTiles;
			}
			else if (Main.evilTiles > Main.holyTiles)
			{
				num8 = (float)Main.evilTiles;
			}
			num8 = MathHelper.Clamp(num8 / 800f, 0f, 1f);
			float num9 = (float)((double)Main.screenPosition.Y - Main.worldSurface * 16.0) / 300f;
			if (num9 < 0f)
			{
				num9 = 0f;
			}
			else if (num9 > 1f)
			{
				num9 = 1f;
			}
			float num10 = 1f * (1f - num9) + num5 * num9;
			Lighting.brightness = Lighting.defBrightness * (1f - num9) + 1f * num9;
			float num11 = (float)((double)(Main.screenPosition.Y - (float)(Main.screenHeight / 2) + 200f) - Main.rockLayer * 16.0) / 300f;
			num11 = MathHelper.Clamp(num11, 0f, 1f);
			if (Main.bloodTiles > Main.evilTiles && Main.bloodTiles > Main.holyTiles)
			{
				num5 = 1f * num8 + num5 * (1f - num8);
				num6 = 0.55f * num8 + num6 * (1f - num8);
				num7 = 0.5f * num8 + num7 * (1f - num8);
			}
			else if (Main.evilTiles > 0)
			{
				num5 = 0.8f * num8 + num5 * (1f - num8);
				num6 = 0.75f * num8 + num6 * (1f - num8);
				num7 = 1.1f * num8 + num7 * (1f - num8);
			}
			else if (Main.holyTiles > 0)
			{
				num5 = 1f * num8 + num5 * (1f - num8);
				num6 = 0.7f * num8 + num6 * (1f - num8);
				num7 = 0.9f * num8 + num7 * (1f - num8);
			}
			num5 = 1f * (num10 - num11) + num5 * num11;
			num6 = 1f * (num10 - num11) + num6 * num11;
			num7 = 1f * (num10 - num11) + num7 * num11;
			int num12 = (int)((Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f);
			int num13;
			if (num12 <= Main.caveBackX[0])
			{
				num13 = Main.caveBackStyle[0];
			}
			else if (num12 <= Main.treeX[1])
			{
				num13 = Main.caveBackStyle[1];
			}
			else if (num12 <= Main.treeX[2])
			{
				num13 = Main.caveBackStyle[2];
			}
			else
			{
				num13 = Main.caveBackStyle[3];
			}
			num13 += 3;
			if (Main.snowTiles > 300 && (Main.screenPosition.Y + (float)Main.screenHeight) / 16f < (float)(Main.maxTilesY - 250))
			{
				num13 = 1;
			}
			if (Main.jungleTiles > 80)
			{
				if (num13 == 1)
				{
					if (Main.jungleTiles > Main.snowTiles)
					{
						num13 = 11;
					}
				}
				else
				{
					num13 = 11;
				}
			}
			if (Main.shroomTiles > 200)
			{
				num13 = 2;
			}
			if (num13 != Main.ugBack)
			{
				Main.oldUgBack = Main.ugBack;
				Main.ugBack = num13;
				Main.ugBackTransition = 1f;
			}
			if (Main.ugBackTransition > 0f)
			{
				Main.ugBackTransition -= 0.25f;
			}
			if (Main.ugBackTransition < 0f)
			{
				Main.ugBackTransition = 0f;
			}
			int[] array2 = new int[6];
			int[] array3 = new int[6];
			for (int i = 0; i < 2; i++)
			{
				int num14 = Main.ugBack;
				if (i == 1)
				{
					num14 = Main.oldUgBack;
				}
				int[] array4 = new int[6];
				if (num14 == 0)
				{
					array4[0] = 1;
					array4[1] = 2;
					array4[2] = 4;
					array4[3] = 3;
					array4[4] = 6;
					array4[5] = 5;
				}
				else if (num14 == 1)
				{
					if (Main.iceBackStyle == 0)
					{
						array4[1] = 33;
						array4[3] = 32;
						array4[0] = 40;
						array4[2] = 34;
					}
					else if (Main.iceBackStyle == 1)
					{
						array4[1] = 118;
						array4[3] = 117;
						array4[0] = 160;
						array4[2] = 161;
					}
					else if (Main.iceBackStyle == 2)
					{
						array4[1] = 165;
						array4[3] = 167;
						array4[0] = 164;
						array4[2] = 166;
					}
					else
					{
						array4[1] = 120;
						array4[3] = 119;
						array4[0] = 162;
						array4[2] = 163;
					}
					array4[4] = array4[3];
				}
				else if (num14 == 2)
				{
					array4[0] = 62;
					array4[1] = 63;
					array4[2] = 64;
					array4[3] = 65;
					array4[4] = 143 + Main.hellBackStyle;
				}
				else if (num14 == 3)
				{
					array4[0] = 66;
					array4[1] = 67;
					array4[2] = 68;
					array4[3] = 69;
					array4[4] = 128 + Main.hellBackStyle;
				}
				else if (num14 == 4)
				{
					array4[0] = 70;
					array4[1] = 71;
					array4[2] = 68;
					array4[3] = 72;
					array4[4] = 128 + Main.hellBackStyle;
				}
				else if (num14 == 5)
				{
					array4[0] = 73;
					array4[1] = 74;
					array4[2] = 75;
					array4[3] = 76;
					array4[4] = 131 + Main.hellBackStyle;
				}
				else if (num14 == 6)
				{
					array4[0] = 77;
					array4[1] = 78;
					array4[2] = 79;
					array4[3] = 80;
					array4[4] = 134 + Main.hellBackStyle;
				}
				else if (num14 == 7)
				{
					array4[0] = 77;
					array4[1] = 81;
					array4[2] = 79;
					array4[3] = 82;
					array4[4] = 134 + Main.hellBackStyle;
				}
				else if (num14 == 8)
				{
					array4[0] = 83;
					array4[1] = 84;
					array4[2] = 85;
					array4[3] = 86;
					array4[4] = 137 + Main.hellBackStyle;
				}
				else if (num14 == 9)
				{
					array4[0] = 83;
					array4[1] = 87;
					array4[2] = 88;
					array4[3] = 89;
					array4[4] = 137 + Main.hellBackStyle;
				}
				else if (num14 == 10)
				{
					array4[0] = 121;
					array4[1] = 122;
					array4[2] = 123;
					array4[3] = 124;
					array4[4] = 140 + Main.hellBackStyle;
				}
				else if (num14 == 11)
				{
					if (Main.jungleBackStyle == 0)
					{
						array4[0] = 153;
						array4[1] = 147;
						array4[2] = 148;
						array4[3] = 149;
						array4[4] = 150 + Main.hellBackStyle;
					}
					else
					{
						array4[0] = 146;
						array4[1] = 154;
						array4[2] = 155;
						array4[3] = 156;
						array4[4] = 157 + Main.hellBackStyle;
					}
				}
				if (Main.hellBackStyle == 0)
				{
					array4[5] = 125;
				}
				if (Main.hellBackStyle == 1)
				{
					array4[5] = 126;
				}
				if (Main.hellBackStyle == 2)
				{
					array4[5] = 127;
				}
				this.LoadBackground(array4[0]);
				this.LoadBackground(array4[1]);
				this.LoadBackground(array4[2]);
				this.LoadBackground(array4[3]);
				this.LoadBackground(array4[4]);
				this.LoadBackground(array4[5]);
				if (i == 0)
				{
					for (int j = 0; j < 6; j++)
					{
						array2[j] = array4[j];
					}
				}
				else
				{
					for (int k = 0; k < 6; k++)
					{
						array3[k] = array4[k];
					}
				}
			}
			Lighting.defBrightness = 1.2f * (1f - num11) + 1f * num11;
			this.bgParallax = (double)Main.caveParallax;
			this.bgStart = (int)(-Math.IEEERemainder((double)num3 + (double)Main.screenPosition.X * this.bgParallax, (double)num3) - (double)(num3 / 2)) - (int)zero.X;
			this.bgLoops = Main.screenWidth / num3 + 2;
			this.bgTop = (int)((float)((int)Main.worldSurface * 16 - 16) - Main.screenPosition.Y + 16f);
			for (int l = 0; l < this.bgLoops; l++)
			{
				for (int m = 0; m < num3 / 16; m++)
				{
					float num15 = (float)this.bgStart + Main.screenPosition.X;
					num15 = -(float)Math.IEEERemainder((double)num15, 16.0);
					num15 = (float)Math.Round((double)num15);
					int num16 = (int)num15;
					if (num16 == -8)
					{
						num16 = 8;
					}
					float num17 = (float)(this.bgStart + num3 * l + m * 16 + 8);
					float num18 = (float)this.bgTop;
					Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)((num17 + Main.screenPosition.X) / 16f), (int)((Main.screenPosition.Y + num18) / 16f));
					color.R = (byte)((float)color.R * num5);
					color.G = (byte)((float)color.G * num6);
					color.B = (byte)((float)color.B * num7);
					Main.spriteBatch.Draw(Main.backgroundTexture[array2[0]], new Vector2((float)(this.bgStart + num3 * l + 16 * m + num16), (float)this.bgTop) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * m + num16 + 16, 0, 16, 16)), color);
					if (Main.ugBackTransition > 0f)
					{
						Microsoft.Xna.Framework.Color color2 = color;
						color2.R = (byte)((float)color2.R * Main.ugBackTransition);
						color2.G = (byte)((float)color2.G * Main.ugBackTransition);
						color2.B = (byte)((float)color2.B * Main.ugBackTransition);
						color2.A = (byte)((float)color2.A * Main.ugBackTransition);
						Main.spriteBatch.Draw(Main.backgroundTexture[array3[0]], new Vector2((float)(this.bgStart + num3 * l + 16 * m + num16), (float)this.bgTop) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * m + num16 + 16, 0, 16, 16)), color2);
					}
				}
			}
			double num19 = (double)(Main.maxTilesY - 230);
			double num20 = (double)((int)((num19 - Main.worldSurface) / 6.0) * 6);
			num19 = Main.worldSurface + num20 - 5.0;
			bool flag = false;
			bool flag2 = false;
			this.bgTop = (int)((float)((int)Main.worldSurface * 16) - Main.screenPosition.Y + 16f);
			if (Main.worldSurface * 16.0 <= (double)(Main.screenPosition.Y + (float)Main.screenHeight + (float)Main.offScreenRange))
			{
				this.bgParallax = (double)Main.caveParallax;
				this.bgStart = (int)(-Math.IEEERemainder((double)num3 + (double)Main.screenPosition.X * this.bgParallax, (double)num3) - (double)(num3 / 2)) - (int)zero.X;
				this.bgLoops = (Main.screenWidth + (int)zero.X * 2) / num3 + 2;
				if (Main.worldSurface * 16.0 < (double)(Main.screenPosition.Y - 16f))
				{
					this.bgStartY = (int)(Math.IEEERemainder((double)this.bgTop, (double)Main.backgroundHeight[2]) - (double)Main.backgroundHeight[2]);
					this.bgLoopsY = (Main.screenHeight - this.bgStartY + (int)zero.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				else
				{
					this.bgStartY = this.bgTop;
					this.bgLoopsY = (Main.screenHeight - this.bgTop + (int)zero.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				if (Main.rockLayer * 16.0 < (double)(Main.screenPosition.Y + 600f))
				{
					this.bgLoopsY = (int)(Main.rockLayer * 16.0 - (double)Main.screenPosition.Y + 600.0 - (double)this.bgStartY) / Main.backgroundHeight[2];
					flag2 = true;
				}
				float num21 = (float)this.bgStart + Main.screenPosition.X;
				num21 = -(float)Math.IEEERemainder((double)num21, 16.0);
				num21 = (float)Math.Round((double)num21);
				int num22 = (int)num21;
				if (num22 == -8)
				{
					num22 = 8;
				}
				for (int n = 0; n < this.bgLoops; n++)
				{
					for (int num23 = 0; num23 < this.bgLoopsY; num23++)
					{
						for (int num24 = 0; num24 < num3 / 16; num24++)
						{
							for (int num25 = 0; num25 < 6; num25++)
							{
								float num26 = (float)(this.bgStartY + num23 * 96 + num25 * 16 + 8);
								float num27 = (float)(this.bgStart + num3 * n + num24 * 16 + 8);
								int num28 = (int)((num27 + Main.screenPosition.X) / 16f);
								int num29 = (int)((num26 + Main.screenPosition.Y) / 16f);
								Microsoft.Xna.Framework.Color color3 = Lighting.GetColor(num28, num29);
								if (Main.tile[num28, num29] == null)
								{
									Main.tile[num28, num29] = new Tile();
								}
								if (color3.R > 0 || color3.G > 0 || color3.B > 0)
								{
									if (!Main.drawToScreen)
									{
										VertexColors colors;
										Lighting.GetColor4Slice_New(num28, num29, out colors, 1f);
										Main.tileBatch.Draw(Main.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num3 * n + 16 * num24 + num22), (float)(this.bgStartY + Main.backgroundHeight[array3[1]] * num23 + 16 * num25)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num24 + num22 + 16, 16 * num25, 16, 16)), colors, Vector2.Zero, 1f, SpriteEffects.None);
									}
									else
									{
										if (((int)color3.R > num || (double)color3.G > (double)num * 1.1 || (double)color3.B > (double)num * 1.2) && !Main.tile[num28, num29].active() && Main.wallLight[(int)Main.tile[num28, num29].wall] && Main.ugBackTransition == 0f)
										{
											Lighting.GetColor9Slice(num28, num29, ref array);
											try
											{
												for (int num30 = 0; num30 < 9; num30++)
												{
													int num31 = 0;
													int num32 = 0;
													int width = 4;
													int height = 4;
													Microsoft.Xna.Framework.Color color4 = color3;
													Microsoft.Xna.Framework.Color color5 = color3;
													switch (num30)
													{
													case 0:
														if (!Main.tile[num28 - 1, num29 - 1].active())
														{
															color5 = array[num30];
														}
														break;
													case 1:
														width = 8;
														num31 = 4;
														if (!Main.tile[num28, num29 - 1].active())
														{
															color5 = array[num30];
														}
														break;
													case 2:
														num31 = 12;
														if (!Main.tile[num28 + 1, num29 - 1].active())
														{
															color5 = array[num30];
														}
														break;
													case 3:
														height = 8;
														num32 = 4;
														if (!Main.tile[num28 - 1, num29].active())
														{
															color5 = array[num30];
														}
														break;
													case 4:
														width = 8;
														height = 8;
														num31 = 4;
														num32 = 4;
														break;
													case 5:
														num31 = 12;
														num32 = 4;
														height = 8;
														if (!Main.tile[num28 + 1, num29].active())
														{
															color5 = array[num30];
														}
														break;
													case 6:
														num32 = 12;
														if (!Main.tile[num28 - 1, num29 + 1].active())
														{
															color5 = array[num30];
														}
														break;
													case 7:
														width = 8;
														height = 4;
														num31 = 4;
														num32 = 12;
														if (!Main.tile[num28, num29 + 1].active())
														{
															color5 = array[num30];
														}
														break;
													case 8:
														num31 = 12;
														num32 = 12;
														if (!Main.tile[num28 + 1, num29 + 1].active())
														{
															color5 = array[num30];
														}
														break;
													}
													color4.R = (byte)((color3.R + color5.R) / 2);
													color4.G = (byte)((color3.G + color5.G) / 2);
													color4.B = (byte)((color3.B + color5.B) / 2);
													color4.R = (byte)((float)color4.R * num5);
													color4.G = (byte)((float)color4.G * num6);
													color4.B = (byte)((float)color4.B * num7);
													Main.spriteBatch.Draw(Main.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num3 * n + 16 * num24 + num31 + num22), (float)(this.bgStartY + Main.backgroundHeight[array2[1]] * num23 + 16 * num25 + num32)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num24 + num31 + num22 + 16, 16 * num25 + num32, width, height)), color4);
													if (Main.ugBackTransition > 0f)
													{
														Microsoft.Xna.Framework.Color color6 = color4;
														color6.R = (byte)((float)color6.R * Main.ugBackTransition);
														color6.G = (byte)((float)color6.G * Main.ugBackTransition);
														color6.B = (byte)((float)color6.B * Main.ugBackTransition);
														color6.A = (byte)((float)color6.A * Main.ugBackTransition);
														Main.spriteBatch.Draw(Main.backgroundTexture[array3[1]], new Vector2((float)(this.bgStart + num3 * n + 16 * num24 + num31 + num22), (float)(this.bgStartY + Main.backgroundHeight[array3[1]] * num23 + 16 * num25 + num32)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num24 + num31 + num22 + 16, 16 * num25 + num32, width, height)), color6);
													}
												}
												goto IL_182C;
											}
											catch
											{
												color3.R = (byte)((float)color3.R * num5);
												color3.G = (byte)((float)color3.G * num6);
												color3.B = (byte)((float)color3.B * num7);
												Main.spriteBatch.Draw(Main.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num3 * n + 16 * num24 + num22), (float)(this.bgStartY + Main.backgroundHeight[array2[1]] * num23 + 16 * num25)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num24 + num22 + 16, 16 * num25, 16, 16)), color3);
												goto IL_182C;
											}
										}
										if (((int)color3.R > num2 || (double)color3.G > (double)num2 * 1.1 || (double)color3.B > (double)num2 * 1.2) && Main.ugBackTransition == 0f)
										{
											Lighting.GetColor4Slice(num28, num29, ref array);
											for (int num33 = 0; num33 < 4; num33++)
											{
												int num34 = 0;
												int num35 = 0;
												Microsoft.Xna.Framework.Color color7 = color3;
												Microsoft.Xna.Framework.Color color8 = array[num33];
												switch (num33)
												{
												case 1:
													num34 = 8;
													break;
												case 2:
													num35 = 8;
													break;
												case 3:
													num34 = 8;
													num35 = 8;
													break;
												}
												color7.R = (byte)((color3.R + color8.R) / 2);
												color7.G = (byte)((color3.G + color8.G) / 2);
												color7.B = (byte)((color3.B + color8.B) / 2);
												color7.R = (byte)((float)color7.R * num5);
												color7.G = (byte)((float)color7.G * num6);
												color7.B = (byte)((float)color7.B * num7);
												Main.spriteBatch.Draw(Main.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num3 * n + 16 * num24 + num34 + num22), (float)(this.bgStartY + Main.backgroundHeight[array2[1]] * num23 + 16 * num25 + num35)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num24 + num34 + num22 + 16, 16 * num25 + num35, 8, 8)), color7);
												if (Main.ugBackTransition > 0f)
												{
													Microsoft.Xna.Framework.Color color9 = color7;
													color9.R = (byte)((float)color9.R * Main.ugBackTransition);
													color9.G = (byte)((float)color9.G * Main.ugBackTransition);
													color9.B = (byte)((float)color9.B * Main.ugBackTransition);
													color9.A = (byte)((float)color9.A * Main.ugBackTransition);
													Main.spriteBatch.Draw(Main.backgroundTexture[array3[1]], new Vector2((float)(this.bgStart + num3 * n + 16 * num24 + num34 + num22), (float)(this.bgStartY + Main.backgroundHeight[array3[1]] * num23 + 16 * num25 + num35)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num24 + num34 + num22 + 16, 16 * num25 + num35, 8, 8)), color9);
												}
											}
										}
										else
										{
											color3.R = (byte)((float)color3.R * num5);
											color3.G = (byte)((float)color3.G * num6);
											color3.B = (byte)((float)color3.B * num7);
											Main.spriteBatch.Draw(Main.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num3 * n + 16 * num24 + num22), (float)(this.bgStartY + Main.backgroundHeight[array2[1]] * num23 + 16 * num25)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num24 + num22 + 16, 16 * num25, 16, 16)), color3);
											if (Main.ugBackTransition > 0f)
											{
												Microsoft.Xna.Framework.Color color10 = color3;
												color10.R = (byte)((float)color10.R * Main.ugBackTransition);
												color10.G = (byte)((float)color10.G * Main.ugBackTransition);
												color10.B = (byte)((float)color10.B * Main.ugBackTransition);
												color10.A = (byte)((float)color10.A * Main.ugBackTransition);
												Main.spriteBatch.Draw(Main.backgroundTexture[array3[1]], new Vector2((float)(this.bgStart + num3 * n + 16 * num24 + num22), (float)(this.bgStartY + Main.backgroundHeight[array3[1]] * num23 + 16 * num25)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num24 + num22 + 16, 16 * num25, 16, 16)), color10);
											}
										}
									}
								}
								else
								{
									color3.R = (byte)((float)color3.R * num5);
									color3.G = (byte)((float)color3.G * num6);
									color3.B = (byte)((float)color3.B * num7);
									Main.spriteBatch.Draw(Main.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num3 * n + 16 * num24 + num22), (float)(this.bgStartY + Main.backgroundHeight[array2[1]] * num23 + 16 * num25)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num24 + num22 + 16, 16 * num25, 16, 16)), color3);
								}
								IL_182C:;
							}
						}
					}
				}
				if (Main.ugBackTransition > 0f)
				{
					for (int num36 = 0; num36 < this.bgLoops; num36++)
					{
						for (int num37 = 0; num37 < this.bgLoopsY; num37++)
						{
							for (int num38 = 0; num38 < num3 / 16; num38++)
							{
								for (int num39 = 0; num39 < 6; num39++)
								{
									float num40 = (float)(this.bgStartY + num37 * 96 + num39 * 16 + 8);
									float num41 = (float)(this.bgStart + num3 * num36 + num38 * 16 + 8);
									int num42 = (int)((num41 + Main.screenPosition.X) / 16f);
									int num43 = (int)((num40 + Main.screenPosition.Y) / 16f);
									Microsoft.Xna.Framework.Color color11 = Lighting.GetColor(num42, num43);
									if (Main.tile[num42, num43] == null)
									{
										Main.tile[num42, num43] = new Tile();
									}
									if (color11.R > 0 || color11.G > 0 || color11.B > 0)
									{
										VertexColors colors2;
										Lighting.GetColor4Slice_New(num42, num43, out colors2, Main.ugBackTransition);
										byte a = (byte)(255f * Main.ugBackTransition);
										colors2.BottomLeftColor.A = a;
										colors2.BottomRightColor.A = a;
										colors2.TopLeftColor.A = a;
										colors2.TopRightColor.A = a;
										Main.tileBatch.Draw(Main.backgroundTexture[array3[1]], new Vector2((float)(this.bgStart + num3 * num36 + 16 * num38 + num22), (float)(this.bgStartY + Main.backgroundHeight[array3[1]] * num37 + 16 * num39)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num38 + num22 + 16, 16 * num39, 16, 16)), colors2, Vector2.Zero, 1f, SpriteEffects.None);
									}
								}
							}
						}
					}
				}
				if (flag2)
				{
					this.bgParallax = (double)Main.caveParallax;
					this.bgStart = (int)(-Math.IEEERemainder((double)num3 + (double)Main.screenPosition.X * this.bgParallax, (double)num3) - (double)(num3 / 2)) - (int)zero.X;
					this.bgLoops = (Main.screenWidth + (int)zero.X * 2) / num3 + 2;
					this.bgTop = this.bgStartY + this.bgLoopsY * Main.backgroundHeight[2];
					if (this.bgTop > -32)
					{
						for (int num44 = 0; num44 < this.bgLoops; num44++)
						{
							for (int num45 = 0; num45 < num3 / 16; num45++)
							{
								float num46 = (float)(this.bgStart + num3 * num44 + num45 * 16 + 8);
								float num47 = (float)this.bgTop;
								Microsoft.Xna.Framework.Color color12 = Lighting.GetColor((int)((num46 + Main.screenPosition.X) / 16f), (int)((Main.screenPosition.Y + num47) / 16f));
								color12.R = (byte)((float)color12.R * num5);
								color12.G = (byte)((float)color12.G * num6);
								color12.B = (byte)((float)color12.B * num7);
								Main.spriteBatch.Draw(Main.backgroundTexture[array2[2]], new Vector2((float)(this.bgStart + num3 * num44 + 16 * num45 + num22), (float)this.bgTop) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num45 + num22 + 16, 0, 16, 16)), color12);
								if (Main.ugBackTransition > 0f)
								{
									Microsoft.Xna.Framework.Color color13 = color12;
									color13.R = (byte)((float)color13.R * Main.ugBackTransition);
									color13.G = (byte)((float)color13.G * Main.ugBackTransition);
									color13.B = (byte)((float)color13.B * Main.ugBackTransition);
									color13.A = (byte)((float)color13.A * Main.ugBackTransition);
									Main.spriteBatch.Draw(Main.backgroundTexture[array3[2]], new Vector2((float)(this.bgStart + num3 * num44 + 16 * num45 + num22), (float)this.bgTop) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num45 + num22 + 16, 0, 16, 16)), color13);
								}
							}
						}
					}
				}
			}
			this.bgTop = (int)((float)((int)Main.rockLayer * 16) - Main.screenPosition.Y + 16f + 600f - 8f);
			if (Main.rockLayer * 16.0 <= (double)(Main.screenPosition.Y + 600f))
			{
				this.bgParallax = (double)Main.caveParallax;
				this.bgStart = (int)(-Math.IEEERemainder((double)num3 + (double)Main.screenPosition.X * this.bgParallax, (double)num3) - (double)(num3 / 2)) - (int)zero.X;
				this.bgLoops = (Main.screenWidth + (int)zero.X * 2) / num3 + 2;
				if (Main.rockLayer * 16.0 + (double)Main.screenHeight < (double)(Main.screenPosition.Y - 16f))
				{
					this.bgStartY = (int)(Math.IEEERemainder((double)this.bgTop, (double)Main.backgroundHeight[3]) - (double)Main.backgroundHeight[3]);
					this.bgLoopsY = (Main.screenHeight - this.bgStartY + (int)zero.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				else
				{
					this.bgStartY = this.bgTop;
					this.bgLoopsY = (Main.screenHeight - this.bgTop + (int)zero.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				if (num19 * 16.0 < (double)(Main.screenPosition.Y + 600f))
				{
					this.bgLoopsY = (int)(num19 * 16.0 - (double)Main.screenPosition.Y + 600.0 - (double)this.bgStartY) / Main.backgroundHeight[2];
					flag = true;
				}
				float num48 = (float)this.bgStart + Main.screenPosition.X;
				num48 = -(float)Math.IEEERemainder((double)num48, 16.0);
				num48 = (float)Math.Round((double)num48);
				int num49 = (int)num48;
				if (num49 == -8)
				{
					num49 = 8;
				}
				for (int num50 = 0; num50 < this.bgLoops; num50++)
				{
					for (int num51 = 0; num51 < this.bgLoopsY; num51++)
					{
						for (int num52 = 0; num52 < num3 / 16; num52++)
						{
							for (int num53 = 0; num53 < 6; num53++)
							{
								float num54 = (float)(this.bgStartY + num51 * 96 + num53 * 16 + 8);
								float num55 = (float)(this.bgStart + num3 * num50 + num52 * 16 + 8);
								int num56 = (int)((num55 + Main.screenPosition.X) / 16f);
								int num57 = (int)((num54 + Main.screenPosition.Y) / 16f);
								Microsoft.Xna.Framework.Color color14 = Lighting.GetColor(num56, num57);
								if (Main.tile[num56, num57] == null)
								{
									Main.tile[num56, num57] = new Tile();
								}
								bool flag3 = false;
								if (Main.caveParallax != 0f)
								{
									if (Main.tile[num56 - 1, num57] == null)
									{
										Main.tile[num56 - 1, num57] = new Tile();
									}
									if (Main.tile[num56 + 1, num57] == null)
									{
										Main.tile[num56 + 1, num57] = new Tile();
									}
									if (Main.wallLight[(int)Main.tile[num56, num57].wall] || Main.wallLight[(int)Main.tile[num56 - 1, num57].wall] || Main.wallLight[(int)Main.tile[num56 + 1, num57].wall])
									{
										flag3 = true;
									}
								}
								else if (Main.wallLight[(int)Main.tile[num56, num57].wall])
								{
									flag3 = true;
								}
								if ((flag3 || color14.R == 0 || color14.G == 0 || color14.B == 0) && (color14.R > 0 || color14.G > 0 || color14.B > 0) && (Main.wallLight[(int)Main.tile[num56, num57].wall] || Main.caveParallax != 0f))
								{
									if (Lighting.lightMode < 2 && color14.R < 230 && color14.G < 230 && color14.B < 230 && Main.ugBackTransition == 0f)
									{
										if (((int)color14.R > num || (double)color14.G > (double)num * 1.1 || (double)color14.B > (double)num * 1.2) && !Main.tile[num56, num57].active())
										{
											Lighting.GetColor9Slice(num56, num57, ref array);
											for (int num58 = 0; num58 < 9; num58++)
											{
												int num59 = 0;
												int num60 = 0;
												int width2 = 4;
												int height2 = 4;
												Microsoft.Xna.Framework.Color color15 = color14;
												Microsoft.Xna.Framework.Color color16 = color14;
												switch (num58)
												{
												case 0:
													if (!Main.tile[num56 - 1, num57 - 1].active())
													{
														color16 = array[num58];
													}
													break;
												case 1:
													width2 = 8;
													num59 = 4;
													if (!Main.tile[num56, num57 - 1].active())
													{
														color16 = array[num58];
													}
													break;
												case 2:
													num59 = 12;
													if (!Main.tile[num56 + 1, num57 - 1].active())
													{
														color16 = array[num58];
													}
													break;
												case 3:
													height2 = 8;
													num60 = 4;
													if (!Main.tile[num56 - 1, num57].active())
													{
														color16 = array[num58];
													}
													break;
												case 4:
													width2 = 8;
													height2 = 8;
													num59 = 4;
													num60 = 4;
													break;
												case 5:
													num59 = 12;
													num60 = 4;
													height2 = 8;
													if (!Main.tile[num56 + 1, num57].active())
													{
														color16 = array[num58];
													}
													break;
												case 6:
													num60 = 12;
													if (!Main.tile[num56 - 1, num57 + 1].active())
													{
														color16 = array[num58];
													}
													break;
												case 7:
													width2 = 8;
													height2 = 4;
													num59 = 4;
													num60 = 12;
													if (!Main.tile[num56, num57 + 1].active())
													{
														color16 = array[num58];
													}
													break;
												case 8:
													num59 = 12;
													num60 = 12;
													if (!Main.tile[num56 + 1, num57 + 1].active())
													{
														color16 = array[num58];
													}
													break;
												}
												color15.R = (byte)((color14.R + color16.R) / 2);
												color15.G = (byte)((color14.G + color16.G) / 2);
												color15.B = (byte)((color14.B + color16.B) / 2);
												color15.R = (byte)((float)color15.R * num5);
												color15.G = (byte)((float)color15.G * num6);
												color15.B = (byte)((float)color15.B * num7);
												Main.spriteBatch.Draw(Main.backgroundTexture[array2[3]], new Vector2((float)(this.bgStart + num3 * num50 + 16 * num52 + num59 + num49), (float)(this.bgStartY + Main.backgroundHeight[array2[3]] * num51 + 16 * num53 + num60)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num52 + num59 + num49 + 16, 16 * num53 + num60, width2, height2)), color15);
												if (Main.ugBackTransition > 0f)
												{
													Microsoft.Xna.Framework.Color color17 = color15;
													color17.R = (byte)((float)color17.R * Main.ugBackTransition);
													color17.G = (byte)((float)color17.G * Main.ugBackTransition);
													color17.B = (byte)((float)color17.B * Main.ugBackTransition);
													color17.A = (byte)((float)color17.A * Main.ugBackTransition);
													Main.spriteBatch.Draw(Main.backgroundTexture[array3[3]], new Vector2((float)(this.bgStart + num3 * num50 + 16 * num52 + num59 + num49), (float)(this.bgStartY + Main.backgroundHeight[array3[3]] * num51 + 16 * num53 + num60)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num52 + num59 + num49 + 16, 16 * num53 + num60, width2, height2)), color17);
												}
											}
										}
										else if ((int)color14.R > num2 || (double)color14.G > (double)num2 * 1.1 || (double)color14.B > (double)num2 * 1.2)
										{
											Lighting.GetColor4Slice(num56, num57, ref array);
											for (int num61 = 0; num61 < 4; num61++)
											{
												int num62 = 0;
												int num63 = 0;
												Microsoft.Xna.Framework.Color color18 = color14;
												Microsoft.Xna.Framework.Color color19 = array[num61];
												switch (num61)
												{
												case 1:
													num62 = 8;
													break;
												case 2:
													num63 = 8;
													break;
												case 3:
													num62 = 8;
													num63 = 8;
													break;
												}
												color18.R = (byte)((color14.R + color19.R) / 2);
												color18.G = (byte)((color14.G + color19.G) / 2);
												color18.B = (byte)((color14.B + color19.B) / 2);
												color18.R = (byte)((float)color18.R * num5);
												color18.G = (byte)((float)color18.G * num6);
												color18.B = (byte)((float)color18.B * num7);
												Main.spriteBatch.Draw(Main.backgroundTexture[array2[3]], new Vector2((float)(this.bgStart + num3 * num50 + 16 * num52 + num62 + num49), (float)(this.bgStartY + Main.backgroundHeight[array2[3]] * num51 + 16 * num53 + num63)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num52 + num62 + num49 + 16, 16 * num53 + num63, 8, 8)), color18);
												if (Main.ugBackTransition > 0f)
												{
													Microsoft.Xna.Framework.Color color20 = color18;
													color20.R = (byte)((float)color20.R * Main.ugBackTransition);
													color20.G = (byte)((float)color20.G * Main.ugBackTransition);
													color20.B = (byte)((float)color20.B * Main.ugBackTransition);
													color20.A = (byte)((float)color20.A * Main.ugBackTransition);
													Main.spriteBatch.Draw(Main.backgroundTexture[array3[3]], new Vector2((float)(this.bgStart + num3 * num50 + 16 * num52 + num62 + num49), (float)(this.bgStartY + Main.backgroundHeight[array3[3]] * num51 + 16 * num53 + num63)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num52 + num62 + num49 + 16, 16 * num53 + num63, 8, 8)), color20);
												}
											}
										}
										else
										{
											color14.R = (byte)((float)color14.R * num5);
											color14.G = (byte)((float)color14.G * num6);
											color14.B = (byte)((float)color14.B * num7);
											Main.spriteBatch.Draw(Main.backgroundTexture[array2[3]], new Vector2((float)(this.bgStart + num3 * num50 + 16 * num52 + num49), (float)(this.bgStartY + Main.backgroundHeight[array2[3]] * num51 + 16 * num53)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num52 + num49 + 16, 16 * num53, 16, 16)), color14);
											if (Main.ugBackTransition > 0f)
											{
												Microsoft.Xna.Framework.Color color21 = color14;
												color21.R = (byte)((float)color21.R * Main.ugBackTransition);
												color21.G = (byte)((float)color21.G * Main.ugBackTransition);
												color21.B = (byte)((float)color21.B * Main.ugBackTransition);
												color21.A = (byte)((float)color21.A * Main.ugBackTransition);
												Main.spriteBatch.Draw(Main.backgroundTexture[array3[3]], new Vector2((float)(this.bgStart + num3 * num50 + 16 * num52 + num49), (float)(this.bgStartY + Main.backgroundHeight[array3[3]] * num51 + 16 * num53)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num52 + num49 + 16, 16 * num53, 16, 16)), color21);
											}
										}
									}
									else
									{
										color14.R = (byte)((float)color14.R * num5);
										color14.G = (byte)((float)color14.G * num6);
										color14.B = (byte)((float)color14.B * num7);
										Main.spriteBatch.Draw(Main.backgroundTexture[array2[3]], new Vector2((float)(this.bgStart + num3 * num50 + 16 * num52 + num49), (float)(this.bgStartY + Main.backgroundHeight[array2[3]] * num51 + 16 * num53)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num52 + num49 + 16, 16 * num53, 16, 16)), color14);
										if (Main.ugBackTransition > 0f)
										{
											Microsoft.Xna.Framework.Color color22 = color14;
											color22.R = (byte)((float)color22.R * Main.ugBackTransition);
											color22.G = (byte)((float)color22.G * Main.ugBackTransition);
											color22.B = (byte)((float)color22.B * Main.ugBackTransition);
											color22.A = (byte)((float)color22.A * Main.ugBackTransition);
											Main.spriteBatch.Draw(Main.backgroundTexture[array3[3]], new Vector2((float)(this.bgStart + num3 * num50 + 16 * num52 + num49), (float)(this.bgStartY + Main.backgroundHeight[array3[3]] * num51 + 16 * num53)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num52 + num49 + 16, 16 * num53, 16, 16)), color22);
										}
									}
								}
							}
						}
					}
				}
				num3 = 128;
				if (flag)
				{
					this.bgParallax = (double)Main.caveParallax;
					this.bgStart = (int)(-Math.IEEERemainder((double)num3 + (double)Main.screenPosition.X * this.bgParallax, (double)num3) - (double)(num3 / 2)) - (int)zero.X;
					this.bgLoops = (Main.screenWidth + (int)zero.X * 2) / num3 + 2;
					this.bgTop = this.bgStartY + this.bgLoopsY * Main.backgroundHeight[2];
					for (int num64 = 0; num64 < this.bgLoops; num64++)
					{
						for (int num65 = 0; num65 < num3 / 16; num65++)
						{
							float num66 = (float)(this.bgStart + num3 * num64 + num65 * 16 + 8);
							float num67 = (float)this.bgTop;
							Microsoft.Xna.Framework.Color color23 = Lighting.GetColor((int)((num66 + Main.screenPosition.X) / 16f), (int)((Main.screenPosition.Y + num67) / 16f));
							color23.R = (byte)((float)color23.R * num5);
							color23.G = (byte)((float)color23.G * num6);
							color23.B = (byte)((float)color23.B * num7);
							Main.spriteBatch.Draw(Main.backgroundTexture[array2[4]], new Vector2((float)(this.bgStart + num3 * num64 + 16 * num65 + num49), (float)this.bgTop) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num65 + num49 + 16, Main.magmaBGFrame * 16, 16, 16)), color23);
							if (Main.ugBackTransition > 0f)
							{
								Microsoft.Xna.Framework.Color color24 = color23;
								color24.R = (byte)((float)color24.R * Main.ugBackTransition);
								color24.G = (byte)((float)color24.G * Main.ugBackTransition);
								color24.B = (byte)((float)color24.B * Main.ugBackTransition);
								color24.A = (byte)((float)color24.A * Main.ugBackTransition);
								Main.spriteBatch.Draw(Main.backgroundTexture[array3[4]], new Vector2((float)(this.bgStart + num3 * num64 + 16 * num65 + num49), (float)this.bgTop) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num65 + num49 + 16, Main.magmaBGFrame * 16, 16, 16)), color24);
							}
						}
					}
				}
			}
			this.bgTop = (int)((float)((int)num19 * 16) - Main.screenPosition.Y + 16f + 600f) - 8;
			if (num19 * 16.0 <= (double)(Main.screenPosition.Y + 600f))
			{
				this.bgStart = (int)(-Math.IEEERemainder((double)num3 + (double)Main.screenPosition.X * this.bgParallax, (double)num3) - (double)(num3 / 2)) - (int)zero.X;
				this.bgLoops = (Main.screenWidth + (int)zero.X * 2) / num3 + 2;
				if (num19 * 16.0 + (double)Main.screenHeight < (double)(Main.screenPosition.Y - 16f))
				{
					this.bgStartY = (int)(Math.IEEERemainder((double)this.bgTop, (double)Main.backgroundHeight[2]) - (double)Main.backgroundHeight[2]);
					this.bgLoopsY = (Main.screenHeight - this.bgStartY + (int)zero.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				else
				{
					this.bgStartY = this.bgTop;
					this.bgLoopsY = (Main.screenHeight - this.bgTop + (int)zero.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				num = (int)((double)num * 1.5);
				num2 = (int)((double)num2 * 1.5);
				float num68 = (float)this.bgStart + Main.screenPosition.X;
				num68 = -(float)Math.IEEERemainder((double)num68, 16.0);
				num68 = (float)Math.Round((double)num68);
				int num69 = (int)num68;
				if (num69 == -8)
				{
					num69 = 8;
				}
				for (int num70 = 0; num70 < this.bgLoops; num70++)
				{
					for (int num71 = 0; num71 < this.bgLoopsY; num71++)
					{
						for (int num72 = 0; num72 < num3 / 16; num72++)
						{
							for (int num73 = 0; num73 < 6; num73++)
							{
								float num74 = (float)(this.bgStartY + num71 * 96 + num73 * 16 + 8);
								float num75 = (float)(this.bgStart + num3 * num70 + num72 * 16 + 8);
								int num76 = (int)((num75 + Main.screenPosition.X) / 16f);
								int num77 = (int)((num74 + Main.screenPosition.Y) / 16f);
								Microsoft.Xna.Framework.Color color25 = Lighting.GetColor(num76, num77);
								if (Main.tile[num76, num77] == null)
								{
									Main.tile[num76, num77] = new Tile();
								}
								bool flag4 = false;
								if (Main.caveParallax != 0f)
								{
									if (Main.tile[num76 - 1, num77] == null)
									{
										Main.tile[num76 - 1, num77] = new Tile();
									}
									if (Main.tile[num76 + 1, num77] == null)
									{
										Main.tile[num76 + 1, num77] = new Tile();
									}
									if (Main.wallLight[(int)Main.tile[num76, num77].wall] || Main.wallLight[(int)Main.tile[num76 - 1, num77].wall] || Main.wallLight[(int)Main.tile[num76 + 1, num77].wall])
									{
										flag4 = true;
									}
								}
								else if (Main.wallLight[(int)Main.tile[num76, num77].wall])
								{
									flag4 = true;
								}
								if ((flag4 || color25.R == 0 || color25.G == 0 || color25.B == 0) && (color25.R > 0 || color25.G > 0 || color25.B > 0) && (Main.wallLight[(int)Main.tile[num76, num77].wall] || Main.caveParallax != 0f))
								{
									if (Lighting.lightMode < 2 && color25.R < 230 && color25.G < 230 && color25.B < 230)
									{
										if (((int)color25.R > num || (double)color25.G > (double)num * 1.1 || (double)color25.B > (double)num * 1.2) && !Main.tile[num76, num77].active())
										{
											Lighting.GetColor9Slice(num76, num77, ref array);
											for (int num78 = 0; num78 < 9; num78++)
											{
												int num79 = 0;
												int num80 = 0;
												int width3 = 4;
												int height3 = 4;
												Microsoft.Xna.Framework.Color color26 = color25;
												Microsoft.Xna.Framework.Color color27 = color25;
												switch (num78)
												{
												case 0:
													if (!Main.tile[num76 - 1, num77 - 1].active())
													{
														color27 = array[num78];
													}
													break;
												case 1:
													width3 = 8;
													num79 = 4;
													if (!Main.tile[num76, num77 - 1].active())
													{
														color27 = array[num78];
													}
													break;
												case 2:
													num79 = 12;
													if (!Main.tile[num76 + 1, num77 - 1].active())
													{
														color27 = array[num78];
													}
													break;
												case 3:
													height3 = 8;
													num80 = 4;
													if (!Main.tile[num76 - 1, num77].active())
													{
														color27 = array[num78];
													}
													break;
												case 4:
													width3 = 8;
													height3 = 8;
													num79 = 4;
													num80 = 4;
													break;
												case 5:
													num79 = 12;
													num80 = 4;
													height3 = 8;
													if (!Main.tile[num76 + 1, num77].active())
													{
														color27 = array[num78];
													}
													break;
												case 6:
													num80 = 12;
													if (!Main.tile[num76 - 1, num77 + 1].active())
													{
														color27 = array[num78];
													}
													break;
												case 7:
													width3 = 8;
													height3 = 4;
													num79 = 4;
													num80 = 12;
													if (!Main.tile[num76, num77 + 1].active())
													{
														color27 = array[num78];
													}
													break;
												case 8:
													num79 = 12;
													num80 = 12;
													if (!Main.tile[num76 + 1, num77 + 1].active())
													{
														color27 = array[num78];
													}
													break;
												}
												color26.R = (byte)((color25.R + color27.R) / 2);
												color26.G = (byte)((color25.G + color27.G) / 2);
												color26.B = (byte)((color25.B + color27.B) / 2);
												color26.R = (byte)((float)color26.R * num5);
												color26.G = (byte)((float)color26.G * num6);
												color26.B = (byte)((float)color26.B * num7);
												Main.spriteBatch.Draw(Main.backgroundTexture[array2[5]], new Vector2((float)(this.bgStart + num3 * num70 + 16 * num72 + num79 + num69), (float)(this.bgStartY + Main.backgroundHeight[2] * num71 + 16 * num73 + num80)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num72 + num79 + num69 + 16, 16 * num73 + Main.backgroundHeight[2] * Main.magmaBGFrame + num80, width3, height3)), color26, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
											}
										}
										else if ((int)color25.R > num2 || (double)color25.G > (double)num2 * 1.1 || (double)color25.B > (double)num2 * 1.2)
										{
											Lighting.GetColor4Slice(num76, num77, ref array);
											for (int num81 = 0; num81 < 4; num81++)
											{
												int num82 = 0;
												int num83 = 0;
												Microsoft.Xna.Framework.Color color28 = color25;
												Microsoft.Xna.Framework.Color color29 = array[num81];
												switch (num81)
												{
												case 1:
													num82 = 8;
													break;
												case 2:
													num83 = 8;
													break;
												case 3:
													num82 = 8;
													num83 = 8;
													break;
												}
												color28.R = (byte)((color25.R + color29.R) / 2);
												color28.G = (byte)((color25.G + color29.G) / 2);
												color28.B = (byte)((color25.B + color29.B) / 2);
												color28.R = (byte)((float)color28.R * num5);
												color28.G = (byte)((float)color28.G * num6);
												color28.B = (byte)((float)color28.B * num7);
												Main.spriteBatch.Draw(Main.backgroundTexture[array2[5]], new Vector2((float)(this.bgStart + num3 * num70 + 16 * num72 + num82 + num69), (float)(this.bgStartY + Main.backgroundHeight[2] * num71 + 16 * num73 + num83)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num72 + num82 + num69 + 16, 16 * num73 + Main.backgroundHeight[2] * Main.magmaBGFrame + num83, 8, 8)), color28, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
											}
										}
										else
										{
											color25.R = (byte)((float)color25.R * num5);
											color25.G = (byte)((float)color25.G * num6);
											color25.B = (byte)((float)color25.B * num7);
											Main.spriteBatch.Draw(Main.backgroundTexture[array2[5]], new Vector2((float)(this.bgStart + num3 * num70 + 16 * num72 + num69), (float)(this.bgStartY + Main.backgroundHeight[2] * num71 + 16 * num73)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num72 + num69 + 16, 16 * num73 + Main.backgroundHeight[2] * Main.magmaBGFrame, 16, 16)), color25, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
										}
									}
									else
									{
										color25.R = (byte)((float)color25.R * num5);
										color25.G = (byte)((float)color25.G * num6);
										color25.B = (byte)((float)color25.B * num7);
										Main.spriteBatch.Draw(Main.backgroundTexture[array2[5]], new Vector2((float)(this.bgStart + num3 * num70 + 16 * num72 + num69), (float)(this.bgStartY + Main.backgroundHeight[2] * num71 + 16 * num73)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num72 + num69 + 16, 16 * num73 + Main.backgroundHeight[2] * Main.magmaBGFrame, 16, 16)), color25, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
									}
								}
							}
						}
					}
				}
			}
			Lighting.brightness = Lighting.defBrightness;
			TimeLogger.DrawTime(3, stopwatch.Elapsed.TotalMilliseconds);
		}

		protected void RenderBackground()
		{
			if (Main.drawToScreen)
			{
				return;
			}
			base.GraphicsDevice.SetRenderTarget(this.backWaterTarget);
			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
			Main.spriteBatch.Begin();
			Main.tileBatch.Begin();
			try
			{
				this.drawWaters(true, -1, true);
			}
			catch
			{
			}
			Main.tileBatch.End();
			Main.spriteBatch.End();
			base.GraphicsDevice.SetRenderTarget(null);
			base.GraphicsDevice.SetRenderTarget(this.backgroundTarget);
			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
			Main.spriteBatch.Begin();
			Main.tileBatch.Begin();
			if (Main.ignoreErrors)
			{
				try
				{
					this.DrawBackground();
					goto IL_BE;
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
					goto IL_BE;
				}
			}
			this.DrawBackground();
			IL_BE:
			TimeLogger.DetailedDrawReset();
			Main.spriteBatch.End();
			Main.tileBatch.End();
			TimeLogger.DetailedDrawTime(33);
			base.GraphicsDevice.SetRenderTarget(null);
		}

		protected void DrawToMap()
		{
			if (!Main.mapEnabled)
			{
				return;
			}
			int num = Main.maxTilesX / Main.textureMaxWidth;
			int num2 = Main.maxTilesY / Main.textureMaxHeight;
			for (int i = 0; i <= num; i++)
			{
				for (int j = 0; j <= num2; j++)
				{
					if (!this.checkMap(i, j))
					{
						return;
					}
				}
			}
			if (Main.clearMap)
			{
				for (int k = 0; k <= num; k++)
				{
					for (int l = 0; l <= num2; l++)
					{
						base.GraphicsDevice.SetRenderTarget(this.mapTarget[k, l]);
						base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
						base.GraphicsDevice.SetRenderTarget(null);
					}
				}
				Main.clearMap = false;
			}
			int num3 = -1;
			int num4 = -1;
			bool flag = false;
			int num5 = 0;
			int num6 = Main.mapMinY;
			int num7 = Main.mapMinY;
			int num8 = Main.mapMaxY;
			int num9 = Main.mapMaxY;
			int num10 = 1;
			if (Main.mapMinY / Main.textureMaxHeight != Main.mapMaxY / Main.textureMaxHeight)
			{
				num8 = Main.textureMaxHeight;
				num7 = Main.textureMaxHeight;
				num10 = 2;
			}
			for (int m = 0; m < num10; m++)
			{
				if (m == 0)
				{
					Main.mapMinY = num6;
					Main.mapMaxY = num8;
				}
				else if (m == 1)
				{
					Main.mapMinY = num7;
					Main.mapMaxY = num9;
				}
				for (int n = Main.mapMinX; n < Main.mapMaxX; n++)
				{
					for (int num11 = Main.mapMinY; num11 < Main.mapMaxY; num11++)
					{
						MapTile mapTile = Main.Map[n, num11];
						if (mapTile.IsChanged && !this.mapTarget[n / Main.textureMaxWidth, num11 / Main.textureMaxHeight].IsContentLost)
						{
							num5++;
							if (num5 < Main.maxMapUpdates)
							{
								if (Main.loadMap)
								{
									Main.loadMapLastX = n;
								}
								Main.Map.ConsumeUpdate(n, num11);
								int num12 = n / Main.textureMaxWidth;
								int num13 = num11 / Main.textureMaxHeight;
								if (num12 != num3 || num13 != num4)
								{
									num3 = num12;
									num4 = num13;
									if (flag)
									{
										Main.spriteBatch.End();
										base.GraphicsDevice.SetRenderTarget(null);
									}
									flag = true;
									base.GraphicsDevice.SetRenderTarget(this.mapTarget[num12, num13]);
									Main.spriteBatch.Begin();
								}
								int num14 = n - num12 * Main.textureMaxWidth;
								int num15 = num11 - num13 * Main.textureMaxHeight;
								Microsoft.Xna.Framework.Color mapTileXnaColor = MapHelper.GetMapTileXnaColor(ref mapTile);
								int num16 = 1;
								int num17 = 1;
								int num18 = num11 + 1;
								while (num18 < Main.mapMaxY)
								{
									MapTile mapTile3;
									MapTile mapTile2 = mapTile3 = Main.Map[n, num18];
									if (!mapTile3.IsChanged || !mapTile.Equals(ref mapTile2) || num18 / Main.textureMaxHeight != num13)
									{
										break;
									}
									Main.Map.ConsumeUpdate(n, num18);
									num16++;
									num18++;
									num11++;
								}
								if (num16 == 1)
								{
									for (num18 = n + 1; num18 < Main.mapMaxX; num18++)
									{
										MapTile mapTile4;
										MapTile mapTile2 = mapTile4 = Main.Map[num18, num11];
										if (!mapTile4.IsChanged || !mapTile.Equals(ref mapTile2) || num18 / Main.textureMaxWidth != num12)
										{
											break;
										}
										Main.Map.ConsumeUpdate(num18, num11);
										num17++;
									}
								}
								Main.spriteBatch.Draw(Main.magicPixel, new Vector2((float)num14, (float)num15), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, num17, num16)), mapTileXnaColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
						}
					}
				}
			}
			for (int num19 = 0; num19 < MapHelper.numUpdateTile; num19++)
			{
				int num20 = (int)MapHelper.updateTileX[num19];
				int num21 = (int)MapHelper.updateTileY[num19];
				MapTile mapTile5 = Main.Map[num20, num21];
				if (mapTile5.IsChanged)
				{
					Main.Map.ConsumeUpdate(num20, num21);
					int num22 = num20 / Main.textureMaxWidth;
					int num23 = num21 / Main.textureMaxHeight;
					if (num22 != num3 || num23 != num4)
					{
						num3 = num22;
						num4 = num23;
						if (flag)
						{
							Main.spriteBatch.End();
							base.GraphicsDevice.SetRenderTarget(null);
						}
						flag = true;
						base.GraphicsDevice.SetRenderTarget(this.mapTarget[num22, num23]);
						Main.spriteBatch.Begin();
					}
					int num24 = num20 - num22 * Main.textureMaxWidth;
					int num25 = num21 - num23 * Main.textureMaxHeight;
					Microsoft.Xna.Framework.Color mapTileXnaColor2 = MapHelper.GetMapTileXnaColor(ref mapTile5);
					Main.spriteBatch.Draw(Main.magicPixel, new Vector2((float)num24, (float)num25), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), mapTileXnaColor2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
			}
			MapHelper.numUpdateTile = 0;
			if (flag)
			{
				Main.spriteBatch.End();
				base.GraphicsDevice.SetRenderTarget(null);
			}
			Main.mapReady = true;
			Main.loadMapLastX = 0;
			Main.loadMap = false;
			Main.loadMapLock = false;
		}

		protected void DrawToMap_Section(int secX, int secY)
		{
			Stopwatch stopwatch = Stopwatch.StartNew();
			Microsoft.Xna.Framework.Color[] mapColorCacheArray = Main._mapColorCacheArray;
			int num = secX * 200;
			int num2 = num + 200;
			int num3 = secY * 150;
			int num4 = num3 + 150;
			int num5 = num / Main.textureMaxWidth;
			int num6 = num3 / Main.textureMaxHeight;
			int num7 = num % Main.textureMaxWidth;
			int num8 = num3 % Main.textureMaxHeight;
			if (!this.checkMap(num5, num6))
			{
				return;
			}
			int num9 = 0;
			Microsoft.Xna.Framework.Color arg_6A_0 = Microsoft.Xna.Framework.Color.Transparent;
			for (int i = num3; i < num4; i++)
			{
				for (int j = num; j < num2; j++)
				{
					MapTile mapTile = Main.Map[j, i];
					mapColorCacheArray[num9] = MapHelper.GetMapTileXnaColor(ref mapTile);
					num9++;
				}
			}
			try
			{
				base.GraphicsDevice.SetRenderTarget(this.mapTarget[num5, num6]);
			}
			catch (ObjectDisposedException)
			{
				Main.initMap[num5, num6] = false;
				return;
			}
			Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
			double totalMilliseconds = stopwatch.Elapsed.TotalMilliseconds;
			this.mapSectionTexture.SetData<Microsoft.Xna.Framework.Color>(mapColorCacheArray, 0, mapColorCacheArray.Length);
			double arg_128_0 = stopwatch.Elapsed.TotalMilliseconds;
			totalMilliseconds = stopwatch.Elapsed.TotalMilliseconds;
			Main.spriteBatch.Draw(this.mapSectionTexture, new Vector2((float)num7, (float)num8), Microsoft.Xna.Framework.Color.White);
			Main.spriteBatch.End();
			base.GraphicsDevice.SetRenderTarget(null);
			double arg_17F_0 = stopwatch.Elapsed.TotalMilliseconds;
			stopwatch.Stop();
		}

		public static string ValueToCoins(int value)
		{
			int i = value;
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			while (i >= 1000000)
			{
				i -= 1000000;
				num++;
			}
			while (i >= 10000)
			{
				i -= 10000;
				num2++;
			}
			while (i >= 100)
			{
				i -= 100;
				num3++;
			}
			int num4 = i;
			string text = "";
			if (num > 0)
			{
				text += string.Format("{0} {1} ", num, Language.GetTextValue("Currency.Platinum").ToLower());
			}
			if (num2 > 0)
			{
				text += string.Format("{0} {1} ", num2, Language.GetTextValue("Currency.Gold").ToLower());
			}
			if (num3 > 0)
			{
				text += string.Format("{0} {1} ", num3, Language.GetTextValue("Currency.Silver").ToLower());
			}
			if (num4 > 0)
			{
				text += string.Format("{0} {1} ", num4, Language.GetTextValue("Currency.Copper").ToLower());
			}
			if (text.Length > 0)
			{
				text = text.Substring(0, text.Length - 1);
			}
			return text;
		}

		protected void DrawMap()
		{
			string text = "";
			if (!Main.mapEnabled)
			{
				return;
			}
			if (!Main.mapReady)
			{
				return;
			}
			float num = 0f;
			float num2 = 0f;
			float num3 = num;
			float num4 = num2;
			byte b = 255;
			int arg_40_0 = Main.maxTilesX / Main.textureMaxWidth;
			int num5 = Main.maxTilesY / Main.textureMaxHeight;
			float num6 = (float)Lighting.offScreenTiles;
			float num7 = (float)Lighting.offScreenTiles;
			float num8 = (float)(Main.maxTilesX - Lighting.offScreenTiles - 1);
			float num9 = (float)(Main.maxTilesY - Lighting.offScreenTiles - 42);
			float num10 = 0f;
			float num11 = 0f;
			num6 = 10f;
			num7 = 10f;
			num8 = (float)(Main.maxTilesX - 10);
			num9 = (float)(Main.maxTilesY - 10);
			for (int i = 0; i < this.mapTarget.GetLength(0); i++)
			{
				for (int j = 0; j < this.mapTarget.GetLength(1); j++)
				{
					if (this.mapTarget[i, j] != null)
					{
						if (this.mapTarget[i, j].IsContentLost && !Main.mapWasContentLost[i, j])
						{
							Main.mapWasContentLost[i, j] = true;
							Main.refreshMap = true;
							Main.clearMap = true;
						}
						else if (!this.mapTarget[i, j].IsContentLost && Main.mapWasContentLost[i, j])
						{
							Main.mapWasContentLost[i, j] = false;
						}
					}
				}
			}
			num = 200f;
			num2 = 300f;
			float num12 = 0f;
			float num13 = 0f;
			float num14 = num8 - 1f;
			float num15 = num9 - 1f;
			float num16;
			if (Main.mapFullscreen)
			{
				num16 = Main.mapFullscreenScale;
			}
			else if (Main.mapStyle == 1)
			{
				num16 = Main.mapMinimapScale;
			}
			else
			{
				num16 = Main.mapOverlayScale;
			}
			bool flag = false;
			if (!Main.mapFullscreen && num16 > 1f)
			{
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
				flag = true;
			}
			if (Main.mapFullscreen)
			{
				if (Main.mouseLeft && base.IsActive && !CaptureManager.Instance.UsingMap)
				{
					if (Main.mouseLeftRelease)
					{
						Main.grabMapX = (float)Main.mouseX;
						Main.grabMapY = (float)Main.mouseY;
					}
					else
					{
						float num17 = (float)Main.mouseX - Main.grabMapX;
						float num18 = (float)Main.mouseY - Main.grabMapY;
						Main.grabMapX = (float)Main.mouseX;
						Main.grabMapY = (float)Main.mouseY;
						num17 *= 0.06255f;
						num18 *= 0.06255f;
						Main.mapFullscreenPos.X = Main.mapFullscreenPos.X - num17 * (16f / Main.mapFullscreenScale);
						Main.mapFullscreenPos.Y = Main.mapFullscreenPos.Y - num18 * (16f / Main.mapFullscreenScale);
					}
				}
				Main.player[Main.myPlayer].mouseInterface = true;
				float num19 = (float)Main.screenWidth / (float)Main.maxTilesX * 0.8f;
				if (Main.mapFullscreenScale < num19)
				{
					Main.mapFullscreenScale = num19;
				}
				if (Main.mapFullscreenScale > 16f)
				{
					Main.mapFullscreenScale = 16f;
				}
				num16 = Main.mapFullscreenScale;
				b = 255;
				if (Main.mapFullscreenPos.X < num6)
				{
					Main.mapFullscreenPos.X = num6;
				}
				if (Main.mapFullscreenPos.X > num8)
				{
					Main.mapFullscreenPos.X = num8;
				}
				if (Main.mapFullscreenPos.Y < num7)
				{
					Main.mapFullscreenPos.Y = num7;
				}
				if (Main.mapFullscreenPos.Y > num9)
				{
					Main.mapFullscreenPos.Y = num9;
				}
				float num20 = Main.mapFullscreenPos.X;
				float num21 = Main.mapFullscreenPos.Y;
				if (Main.resetMapFull)
				{
					Main.resetMapFull = false;
					num20 = (Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f;
					num21 = (Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16f;
					Main.mapFullscreenPos.X = num20;
					Main.mapFullscreenPos.Y = num21;
				}
				num20 *= num16;
				num21 *= num16;
				num = -num20 + (float)(Main.screenWidth / 2);
				num2 = -num21 + (float)(Main.screenHeight / 2);
				num += num6 * num16;
				num2 += num7 * num16;
				float num22 = (float)(Main.maxTilesX / 840);
				num22 *= Main.mapFullscreenScale;
				float num23 = num;
				float num24 = num2;
				float num25 = (float)Main.mapTexture.Width;
				float num26 = (float)Main.mapTexture.Height;
				if (Main.maxTilesX == 8400)
				{
					num22 *= 0.999f;
					num23 -= 40.6f * num22;
					num24 = num2 - 5f * num22;
					num25 -= 8.045f;
					num25 *= num22;
					num26 += 0.12f;
					num26 *= num22;
					if ((double)num22 < 1.2)
					{
						num26 += 1f;
					}
				}
				else if (Main.maxTilesX == 6400)
				{
					num22 *= 1.09f;
					num23 -= 38.8f * num22;
					num24 = num2 - 3.85f * num22;
					num25 -= 13.6f;
					num25 *= num22;
					num26 -= 6.92f;
					num26 *= num22;
					if ((double)num22 < 1.2)
					{
						num26 += 2f;
					}
				}
				else if (Main.maxTilesX == 6300)
				{
					num22 *= 1.09f;
					num23 -= 39.8f * num22;
					num24 = num2 - 4.08f * num22;
					num25 -= 26.69f;
					num25 *= num22;
					num26 -= 6.92f;
					num26 *= num22;
					if ((double)num22 < 1.2)
					{
						num26 += 2f;
					}
				}
				else if (Main.maxTilesX == 4200)
				{
					num22 *= 0.998f;
					num23 -= 37.3f * num22;
					num24 -= 1.7f * num22;
					num25 -= 16f;
					num25 *= num22;
					num26 -= 8.31f;
					num26 *= num22;
				}
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
				flag = true;
				if (Main.screenPosition.Y > (float)((Main.maxTilesY - 232) * 16))
				{
					Main.spriteBatch.Draw(this.mapBG3Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Microsoft.Xna.Framework.Color.White);
				}
				else if (Main.player[Main.myPlayer].ZoneDungeon)
				{
					Main.spriteBatch.Draw(this.mapBG5Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Microsoft.Xna.Framework.Color.White);
				}
				else if (Main.tile[(int)(Main.player[Main.myPlayer].Center.X / 16f), (int)(Main.player[Main.myPlayer].Center.Y / 16f)].wall == 87)
				{
					Main.spriteBatch.Draw(this.mapBG14Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Microsoft.Xna.Framework.Color.White);
				}
				else if ((double)Main.screenPosition.Y > Main.worldSurface * 16.0)
				{
					if (Main.player[Main.myPlayer].ZoneSnow)
					{
						Main.spriteBatch.Draw(this.mapBG4Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Microsoft.Xna.Framework.Color.White);
					}
					else if (Main.player[Main.myPlayer].ZoneJungle)
					{
						Main.spriteBatch.Draw(this.mapBG13Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Main.bgColor);
					}
					else if (Main.sandTiles > 1000)
					{
						Main.spriteBatch.Draw(this.mapBG15Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Main.bgColor);
					}
					else
					{
						Main.spriteBatch.Draw(this.mapBG2Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Microsoft.Xna.Framework.Color.White);
					}
				}
				else
				{
					int num27 = (int)((Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f);
					if (Main.player[Main.myPlayer].ZoneCorrupt)
					{
						Main.spriteBatch.Draw(this.mapBG6Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Main.bgColor);
					}
					else if (Main.player[Main.myPlayer].ZoneCrimson)
					{
						Main.spriteBatch.Draw(this.mapBG7Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Main.bgColor);
					}
					else if (Main.player[Main.myPlayer].ZoneHoly)
					{
						Main.spriteBatch.Draw(this.mapBG8Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Main.bgColor);
					}
					else if ((double)(Main.screenPosition.Y / 16f) < Main.worldSurface + 10.0 && (num27 < 380 || num27 > Main.maxTilesX - 380))
					{
						Main.spriteBatch.Draw(this.mapBG11Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Main.bgColor);
					}
					else if (Main.player[Main.myPlayer].ZoneSnow)
					{
						Main.spriteBatch.Draw(this.mapBG12Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Main.bgColor);
					}
					else if (Main.player[Main.myPlayer].ZoneJungle)
					{
						Main.spriteBatch.Draw(this.mapBG9Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Main.bgColor);
					}
					else if (Main.sandTiles > 1000)
					{
						Main.spriteBatch.Draw(this.mapBG10Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Main.bgColor);
					}
					else
					{
						Main.spriteBatch.Draw(this.mapBG1Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Main.bgColor);
					}
				}
				Microsoft.Xna.Framework.Rectangle destinationRectangle = new Microsoft.Xna.Framework.Rectangle((int)num23, (int)num24, (int)num25, (int)num26);
				Main.spriteBatch.Draw(Main.mapTexture, destinationRectangle, Microsoft.Xna.Framework.Color.White);
				if (num16 < 1f)
				{
					Main.spriteBatch.End();
					Main.spriteBatch.Begin();
					flag = false;
				}
			}
			else if (Main.mapStyle == 1)
			{
				Main.miniMapWidth = 240;
				Main.miniMapHeight = 240;
				Main.miniMapX = Main.screenWidth - Main.miniMapWidth - 52;
				Main.miniMapY = 90;
				float arg_AE9_0 = (float)Main.miniMapHeight / (float)Main.maxTilesY;
				if ((double)Main.mapMinimapScale < 0.2)
				{
					Main.mapMinimapScale = 0.2f;
				}
				if (Main.mapMinimapScale > 3f)
				{
					Main.mapMinimapScale = 3f;
				}
				if ((double)Main.mapMinimapAlpha < 0.01)
				{
					Main.mapMinimapAlpha = 0.01f;
				}
				if (Main.mapMinimapAlpha > 1f)
				{
					Main.mapMinimapAlpha = 1f;
				}
				num16 = Main.mapMinimapScale;
				b = (byte)(255f * Main.mapMinimapAlpha);
				num = (float)Main.miniMapX;
				num2 = (float)Main.miniMapY;
				num3 = num;
				num4 = num2;
				float num28 = (Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f;
				float num29 = (Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16f;
				num10 = -(num28 - (float)((int)((Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f))) * num16;
				num11 = -(num29 - (float)((int)((Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16f))) * num16;
				num14 = (float)Main.miniMapWidth / num16;
				num15 = (float)Main.miniMapHeight / num16;
				num12 = (float)((int)num28) - num14 / 2f;
				num13 = (float)((int)num29) - num15 / 2f;
				float num30 = (float)Main.maxTilesY + num13;
				num30 *= num16;
				float x = num3 - 6f;
				float y = num4 - 6f;
				Main.spriteBatch.Draw(Main.miniMapFrame2Texture, new Vector2(x, y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.miniMapFrame2Texture.Width, Main.miniMapFrame2Texture.Height)), new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, (int)b), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
			else if (Main.mapStyle == 2)
			{
				float num31 = (float)Main.screenWidth / (float)Main.maxTilesX;
				if (Main.mapOverlayScale < num31)
				{
					Main.mapOverlayScale = num31;
				}
				if (Main.mapOverlayScale > 16f)
				{
					Main.mapOverlayScale = 16f;
				}
				if ((double)Main.mapOverlayAlpha < 0.01)
				{
					Main.mapOverlayAlpha = 0.01f;
				}
				if (Main.mapOverlayAlpha > 1f)
				{
					Main.mapOverlayAlpha = 1f;
				}
				num16 = Main.mapOverlayScale;
				b = (byte)(255f * Main.mapOverlayAlpha);
				int arg_D3A_0 = Main.maxTilesX;
				int arg_D40_0 = Main.maxTilesY;
				float num32 = (Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f;
				float num33 = (Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16f;
				num32 *= num16;
				num33 *= num16;
				num = -num32 + (float)(Main.screenWidth / 2);
				num2 = -num33 + (float)(Main.screenHeight / 2);
				num += num6 * num16;
				num2 += num7 * num16;
			}
			if (Main.mapStyle == 1 && !Main.mapFullscreen)
			{
				if (num12 < num6)
				{
					num -= (num12 - num6) * num16;
				}
				if (num13 < num7)
				{
					num2 -= (num13 - num7) * num16;
				}
			}
			num14 = num12 + num14;
			num15 = num13 + num15;
			if (num12 > num6)
			{
				num6 = num12;
			}
			if (num13 > num7)
			{
				num7 = num13;
			}
			if (num14 < num8)
			{
				num8 = num14;
			}
			if (num15 < num9)
			{
				num9 = num15;
			}
			float num34 = (float)Main.textureMaxWidth * num16;
			float num35 = (float)Main.textureMaxHeight * num16;
			float num36 = num;
			float num37 = 0f;
			for (int k = 0; k <= 4; k++)
			{
				if ((float)((k + 1) * Main.textureMaxWidth) > num6 && (float)(k * Main.textureMaxWidth) < num6 + num8)
				{
					for (int l = 0; l <= num5; l++)
					{
						if ((float)((l + 1) * Main.textureMaxHeight) > num7 && (float)(l * Main.textureMaxHeight) < num7 + num9)
						{
							float num38 = num + (float)((int)((float)k * num34));
							float num39 = num2 + (float)((int)((float)l * num35));
							float num40 = (float)(k * Main.textureMaxWidth);
							float num41 = (float)(l * Main.textureMaxHeight);
							float num42 = 0f;
							float num43 = 0f;
							if (num40 < num6)
							{
								num42 = num6 - num40;
							}
							else
							{
								num38 -= num6 * num16;
							}
							if (num41 < num7)
							{
								num43 = num7 - num41;
								num39 = num2;
							}
							else
							{
								num39 -= num7 * num16;
							}
							num38 = num36;
							float num44 = (float)Main.textureMaxWidth;
							float num45 = (float)Main.textureMaxHeight;
							float num46 = (float)((k + 1) * Main.textureMaxWidth);
							float num47 = (float)((l + 1) * Main.textureMaxHeight);
							if (num46 >= num8)
							{
								num44 -= num46 - num8;
							}
							if (num47 >= num9)
							{
								num45 -= num47 - num9;
							}
							num38 += num10;
							num39 += num11;
							if (num44 > num42)
							{
								Main.spriteBatch.Draw(this.mapTarget[k, l], new Vector2(num38, num39), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num42, (int)num43, (int)num44 - (int)num42, (int)num45 - (int)num43)), new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, (int)b), 0f, default(Vector2), num16, SpriteEffects.None, 0f);
							}
							num37 = (float)((int)num44 - (int)num42) * num16;
						}
						if (l == num5)
						{
							num36 += num37;
						}
					}
				}
			}
			if (flag)
			{
				Main.spriteBatch.End();
				Main.spriteBatch.Begin();
			}
			if (!Main.mapFullscreen)
			{
				if (Main.mapStyle == 2)
				{
					float num48 = (num16 * 0.2f * 2f + 1f) / 3f;
					if (num48 > 1f)
					{
						num48 = 1f;
					}
					if (num16 < 10f)
					{
						for (int m = 0; m < 200; m++)
						{
							if (Main.npc[m].active && Main.npc[m].townNPC)
							{
								int num49 = NPC.TypeToHeadIndex(Main.npc[m].type);
								if (num49 > 0)
								{
									SpriteEffects effects = SpriteEffects.None;
									if (Main.npc[m].direction > 0)
									{
										effects = SpriteEffects.FlipHorizontally;
									}
									float num50 = (Main.npc[m].position.X + (float)(Main.npc[m].width / 2)) / 16f * num16;
									float num51 = (Main.npc[m].position.Y + (float)(Main.npc[m].height / 2)) / 16f * num16;
									num50 += num;
									num51 += num2;
									num50 -= 10f * num16;
									num51 -= 10f * num16;
									Main.spriteBatch.Draw(Main.npcHeadTexture[num49], new Vector2(num50, num51), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.npcHeadTexture[num49].Width, Main.npcHeadTexture[num49].Height)), new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, (int)b), 0f, new Vector2((float)(Main.npcHeadTexture[num49].Width / 2), (float)(Main.npcHeadTexture[num49].Height / 2)), num48, effects, 0f);
								}
							}
							if (Main.npc[m].active && Main.npc[m].GetBossHeadTextureIndex() != -1)
							{
								float bossHeadRotation = Main.npc[m].GetBossHeadRotation();
								SpriteEffects bossHeadSpriteEffects = Main.npc[m].GetBossHeadSpriteEffects();
								Vector2 vector = Main.npc[m].Center + new Vector2(0f, Main.npc[m].gfxOffY);
								if (Main.npc[m].type == 134)
								{
									Vector2 vector2 = Main.npc[m].Center;
									int num52 = 1;
									int num53 = (int)Main.npc[m].ai[0];
									while (num52 < 15 && Main.npc[num53].active && Main.npc[num53].type >= 134 && Main.npc[num53].type <= 136)
									{
										num52++;
										vector2 += Main.npc[num53].Center;
										num53 = (int)Main.npc[num53].ai[0];
									}
									vector2 /= (float)num52;
									vector = vector2;
								}
								int bossHeadTextureIndex = Main.npc[m].GetBossHeadTextureIndex();
								float num54 = vector.X / 16f * num16;
								float num55 = vector.Y / 16f * num16;
								num54 += num;
								num55 += num2;
								num54 -= 10f * num16;
								num55 -= 10f * num16;
								Main.spriteBatch.Draw(Main.npcHeadBossTexture[bossHeadTextureIndex], new Vector2(num54, num55), null, new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, (int)b), bossHeadRotation, Main.npcHeadBossTexture[bossHeadTextureIndex].Size() / 2f, num48, bossHeadSpriteEffects, 0f);
							}
						}
						Main.spriteBatch.End();
						Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
						for (int n = 0; n < 255; n++)
						{
							if (Main.player[n].active && !Main.player[n].dead && n != Main.myPlayer && ((!Main.player[Main.myPlayer].hostile && !Main.player[n].hostile) || (Main.player[Main.myPlayer].team == Main.player[n].team && Main.player[n].team != 0) || n == Main.myPlayer))
							{
								float num56 = (Main.player[n].position.X + (float)(Main.player[n].width / 2)) / 16f * num16;
								float num57 = Main.player[n].position.Y / 16f * num16;
								num56 += num;
								num57 += num2;
								num56 -= 6f;
								num57 -= 2f;
								num57 -= 2f - num16 / 5f * 2f;
								num56 -= 10f * num16;
								num57 -= 10f * num16;
								this.DrawPlayerHead(Main.player[n], num56, num57, (float)b / 255f, num48);
							}
						}
						Main.spriteBatch.End();
						Main.spriteBatch.Begin();
					}
				}
				if (Main.mapStyle == 1)
				{
					float num58 = num3 - 6f;
					float num59 = num4 - 6f;
					float num60 = (num16 * 0.25f * 2f + 1f) / 3f;
					if (num60 > 1f)
					{
						num60 = 1f;
					}
					for (int num61 = 0; num61 < 200; num61++)
					{
						if (Main.npc[num61].active && Main.npc[num61].townNPC)
						{
							int num62 = NPC.TypeToHeadIndex(Main.npc[num61].type);
							if (num62 > 0)
							{
								SpriteEffects effects2 = SpriteEffects.None;
								if (Main.npc[num61].direction > 0)
								{
									effects2 = SpriteEffects.FlipHorizontally;
								}
								float num63 = ((Main.npc[num61].position.X + (float)(Main.npc[num61].width / 2)) / 16f - num12) * num16;
								float num64 = ((Main.npc[num61].position.Y + Main.npc[num61].gfxOffY + (float)(Main.npc[num61].height / 2)) / 16f - num13) * num16;
								num63 += num3;
								num64 += num4;
								num64 -= 2f * num16 / 5f;
								if (num63 > (float)(Main.miniMapX + 12) && num63 < (float)(Main.miniMapX + Main.miniMapWidth - 16) && num64 > (float)(Main.miniMapY + 10) && num64 < (float)(Main.miniMapY + Main.miniMapHeight - 14))
								{
									Main.spriteBatch.Draw(Main.npcHeadTexture[num62], new Vector2(num63 + num10, num64 + num11), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.npcHeadTexture[num62].Width, Main.npcHeadTexture[num62].Height)), new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, (int)b), 0f, new Vector2((float)(Main.npcHeadTexture[num62].Width / 2), (float)(Main.npcHeadTexture[num62].Height / 2)), num60, effects2, 0f);
									float num65 = num63 - (float)(Main.npcHeadTexture[num62].Width / 2) * num60;
									float num66 = num64 - (float)(Main.npcHeadTexture[num62].Height / 2) * num60;
									float num67 = num65 + (float)Main.npcHeadTexture[num62].Width * num60;
									float num68 = num66 + (float)Main.npcHeadTexture[num62].Height * num60;
									if ((float)Main.mouseX >= num65 && (float)Main.mouseX <= num67 && (float)Main.mouseY >= num66 && (float)Main.mouseY <= num68)
									{
										string text2;
										if (num62 == 11)
										{
											text2 = Main.npc[num61].displayName;
										}
										else
										{
											text2 = Language.GetTextValue("Game.NPCTitle", Main.npc[num61].displayName, Main.npcName[Main.npc[num61].type]);
										}
										text = text2;
									}
								}
							}
						}
						if (Main.npc[num61].active && Main.npc[num61].GetBossHeadTextureIndex() != -1)
						{
							float bossHeadRotation2 = Main.npc[num61].GetBossHeadRotation();
							SpriteEffects bossHeadSpriteEffects2 = Main.npc[num61].GetBossHeadSpriteEffects();
							Vector2 vector3 = Main.npc[num61].Center + new Vector2(0f, Main.npc[num61].gfxOffY);
							if (Main.npc[num61].type == 134)
							{
								Vector2 vector4 = Main.npc[num61].Center;
								int num69 = 1;
								int num70 = (int)Main.npc[num61].ai[0];
								while (num69 < 15 && Main.npc[num70].active && Main.npc[num70].type >= 134 && Main.npc[num70].type <= 136)
								{
									num69++;
									vector4 += Main.npc[num70].Center;
									num70 = (int)Main.npc[num70].ai[0];
								}
								vector4 /= (float)num69;
								vector3 = vector4;
							}
							int bossHeadTextureIndex2 = Main.npc[num61].GetBossHeadTextureIndex();
							float num71 = (vector3.X / 16f - num12) * num16;
							float num72 = (vector3.Y / 16f - num13) * num16;
							num71 += num3;
							num72 += num4;
							num72 -= 2f * num16 / 5f;
							if (num71 > (float)(Main.miniMapX + 12) && num71 < (float)(Main.miniMapX + Main.miniMapWidth - 16) && num72 > (float)(Main.miniMapY + 10) && num72 < (float)(Main.miniMapY + Main.miniMapHeight - 14))
							{
								Main.spriteBatch.Draw(Main.npcHeadBossTexture[bossHeadTextureIndex2], new Vector2(num71 + num10, num72 + num11), null, new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, (int)b), bossHeadRotation2, Main.npcHeadBossTexture[bossHeadTextureIndex2].Size() / 2f, num60, bossHeadSpriteEffects2, 0f);
								float num73 = num71 - (float)(Main.npcHeadBossTexture[bossHeadTextureIndex2].Width / 2) * num60;
								float num74 = num72 - (float)(Main.npcHeadBossTexture[bossHeadTextureIndex2].Height / 2) * num60;
								float num75 = num73 + (float)Main.npcHeadBossTexture[bossHeadTextureIndex2].Width * num60;
								float num76 = num74 + (float)Main.npcHeadBossTexture[bossHeadTextureIndex2].Height * num60;
								if ((float)Main.mouseX >= num73 && (float)Main.mouseX <= num75 && (float)Main.mouseY >= num74 && (float)Main.mouseY <= num76)
								{
									text = Main.npc[num61].displayName;
								}
							}
						}
					}
					Main.spriteBatch.End();
					Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
					for (int num77 = 0; num77 < 255; num77++)
					{
						if (Main.player[num77].active && ((!Main.player[Main.myPlayer].hostile && !Main.player[num77].hostile) || (Main.player[Main.myPlayer].team == Main.player[num77].team && Main.player[num77].team != 0) || num77 == Main.myPlayer))
						{
							float num78 = ((Main.player[num77].position.X + (float)(Main.player[num77].width / 2)) / 16f - num12) * num16;
							float num79 = ((Main.player[num77].position.Y + Main.player[num77].gfxOffY + (float)(Main.player[num77].height / 2)) / 16f - num13) * num16;
							num78 += num3;
							num79 += num4;
							num78 -= 6f;
							num79 -= 6f;
							num79 -= 2f - num16 / 5f * 2f;
							num78 += num10;
							num79 += num11;
							if (Main.screenPosition.X != Main.leftWorld + 640f + 16f && Main.screenPosition.X + (float)Main.screenWidth != Main.rightWorld - 640f - 32f && Main.screenPosition.Y != Main.topWorld + 640f + 16f && Main.screenPosition.Y + (float)Main.screenHeight <= Main.bottomWorld - 640f - 32f && num77 == Main.myPlayer && Main.zoomX == 0f && Main.zoomY == 0f)
							{
								num78 = num3 + (float)(Main.miniMapWidth / 2);
								num79 = num4 + (float)(Main.miniMapHeight / 2);
								num79 -= 3f;
								num78 -= 4f;
							}
							if (!Main.player[num77].dead && num78 > (float)(Main.miniMapX + 6) && num78 < (float)(Main.miniMapX + Main.miniMapWidth - 16) && num79 > (float)(Main.miniMapY + 6) && num79 < (float)(Main.miniMapY + Main.miniMapHeight - 14))
							{
								this.DrawPlayerHead(Main.player[num77], num78, num79, (float)b / 255f, num60);
								if (num77 != Main.myPlayer)
								{
									float num80 = num78 + 4f - 14f * num60;
									float num81 = num79 + 2f - 14f * num60;
									float num82 = num80 + 28f * num60;
									float num83 = num81 + 28f * num60;
									if ((float)Main.mouseX >= num80 && (float)Main.mouseX <= num82 && (float)Main.mouseY >= num81 && (float)Main.mouseY <= num83)
									{
										text = Main.player[num77].name;
									}
								}
							}
							if (Main.player[num77].showLastDeath)
							{
								num78 = (Main.player[num77].lastDeathPostion.X / 16f - num12) * num16;
								num79 = (Main.player[num77].lastDeathPostion.Y / 16f - num13) * num16;
								num78 += num3;
								num79 += num4;
								num79 -= 2f - num16 / 5f * 2f;
								num78 += num10;
								num79 += num11;
								if (num78 > (float)(Main.miniMapX + 8) && num78 < (float)(Main.miniMapX + Main.miniMapWidth - 18) && num79 > (float)(Main.miniMapY + 8) && num79 < (float)(Main.miniMapY + Main.miniMapHeight - 16))
								{
									Main.spriteBatch.Draw(this.mapDeathTexture, new Vector2(num78, num79), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, this.mapDeathTexture.Width, this.mapDeathTexture.Height)), Microsoft.Xna.Framework.Color.White, 0f, new Vector2((float)this.mapDeathTexture.Width * 0.5f, (float)this.mapDeathTexture.Height * 0.5f), num60, SpriteEffects.None, 0f);
									float num84 = num78 + 4f - 14f * num60;
									float num85 = num79 + 2f - 14f * num60;
									num84 -= 4f;
									num85 -= 4f;
									float num86 = num84 + 28f * num60;
									float num87 = num85 + 28f * num60;
									if ((float)Main.mouseX >= num84 && (float)Main.mouseX <= num86 && (float)Main.mouseY >= num85 && (float)Main.mouseY <= num87)
									{
										TimeSpan timeSpan = DateTime.Now - Main.player[num77].lastDeathTime;
										text = Language.GetTextValue("Game.PlayerDeathTime", Main.player[num77].name, Lang.LocalizedDuration(timeSpan, false, false));
									}
								}
							}
						}
					}
					Main.spriteBatch.End();
					Main.spriteBatch.Begin();
					Main.spriteBatch.Draw(Main.miniMapFrameTexture, new Vector2(num58, num59), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.miniMapFrameTexture.Width, Main.miniMapFrameTexture.Height)), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					for (int num88 = 0; num88 < 3; num88++)
					{
						float num89 = num58 + 148f + (float)(num88 * 26);
						float num90 = num59 + 234f;
						if ((float)Main.mouseX > num89 && (float)Main.mouseX < num89 + 22f && (float)Main.mouseY > num90 && (float)Main.mouseY < num90 + 22f)
						{
							Main.spriteBatch.Draw(Main.miniMapButtonTexture[num88], new Vector2(num89, num90), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.miniMapButtonTexture[num88].Width, Main.miniMapButtonTexture[num88].Height)), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							if (!PlayerInput.IgnoreMouseInterface)
							{
								Main.player[Main.myPlayer].mouseInterface = true;
								if (Main.mouseLeft)
								{
									if (Main.mouseLeftRelease)
									{
										Main.PlaySound(12, -1, -1, 1, 1f, 0f);
									}
									if (num88 == 0)
									{
										Main.mapMinimapScale = 1.25f;
									}
									else if (num88 == 1)
									{
										Main.mapMinimapScale *= 0.975f;
									}
									else if (num88 == 2)
									{
										Main.mapMinimapScale *= 1.025f;
									}
								}
							}
						}
					}
				}
			}
			if (Main.mapFullscreen)
			{
				int num91 = (int)((-num + (float)Main.mouseX) / num16 + num6);
				int num92 = (int)((-num2 + (float)Main.mouseY) / num16 + num7);
				bool flag2 = false;
				if ((float)num91 < num6)
				{
					flag2 = true;
				}
				if ((float)num91 >= num8)
				{
					flag2 = true;
				}
				if ((float)num92 < num7)
				{
					flag2 = true;
				}
				if ((float)num92 >= num9)
				{
					flag2 = true;
				}
				if (!flag2 && Main.Map[num91, num92].Light > 40)
				{
					int type = (int)Main.Map[num91, num92].Type;
					int num93 = (int)MapHelper.tileLookup[21];
					int num94 = (int)MapHelper.tileLookup[441];
					int num95 = MapHelper.tileOptionCounts[21];
					int num96 = (int)MapHelper.tileLookup[88];
					int num97 = MapHelper.tileOptionCounts[88];
					if (type >= num93 && type < num93 + num95)
					{
						Tile tile = Main.tile[num91, num92];
						if (tile == null)
						{
							tile = new Tile();
							Main.tile[num91, num92] = tile;
						}
						int num98 = num91;
						int num99 = num92;
						if (tile.frameX % 36 != 0)
						{
							num98--;
						}
						if (tile.frameY % 36 != 0)
						{
							num99--;
						}
						int num100 = Chest.FindChest(num98, num99);
						if (num100 < 0)
						{
							text = Lang.chestType[0];
						}
						else if (Main.chest[num100].name != "")
						{
							text = Lang.chestType[(int)(tile.frameX / 36)] + ": " + Main.chest[num100].name;
						}
						else
						{
							text = Lang.chestType[(int)(tile.frameX / 36)];
						}
					}
					else if (type >= num94 && type < num94 + num95)
					{
						Tile tile2 = Main.tile[num91, num92];
						if (tile2 == null)
						{
							tile2 = new Tile();
							Main.tile[num91, num92] = tile2;
						}
						int num101 = num91;
						int num102 = num92;
						if (tile2.frameX % 36 != 0)
						{
							num101--;
						}
						if (tile2.frameY % 36 != 0)
						{
							num102--;
						}
						text = Lang.chestType[(int)(tile2.frameX / 36)];
					}
					else if (type >= num96 && type < num96 + num97)
					{
						Tile tile3 = Main.tile[num91, num92];
						if (tile3 == null)
						{
							tile3 = new Tile();
							Main.tile[num91, num92] = tile3;
						}
						int num103 = num91;
						int num104 = num92;
						num103 -= (int)(tile3.frameX % 54 / 18);
						if (tile3.frameY % 36 != 0)
						{
							num104--;
						}
						int num105 = Chest.FindChest(num103, num104);
						if (num105 < 0)
						{
							text = Lang.dresserType[0];
						}
						else if (Main.chest[num105].name != "")
						{
							text = Lang.dresserType[(int)(tile3.frameX / 54)] + ": " + Main.chest[num105].name;
						}
						else
						{
							text = Lang.dresserType[(int)(tile3.frameX / 54)];
						}
					}
					else
					{
						text = Lang.mapLegend[type];
					}
				}
				float num106 = (num16 * 0.25f * 2f + 1f) / 3f;
				if (num106 > 1f)
				{
				}
				num106 = 1f;
				for (int num107 = 0; num107 < 200; num107++)
				{
					if (Main.npc[num107].active && Main.npc[num107].townNPC)
					{
						int num108 = NPC.TypeToHeadIndex(Main.npc[num107].type);
						if (num108 > 0)
						{
							SpriteEffects effects3 = SpriteEffects.None;
							if (Main.npc[num107].direction > 0)
							{
								effects3 = SpriteEffects.FlipHorizontally;
							}
							float num109 = (Main.npc[num107].position.X + (float)(Main.npc[num107].width / 2)) / 16f * num16;
							float num110 = (Main.npc[num107].position.Y + Main.npc[num107].gfxOffY + (float)(Main.npc[num107].height / 2)) / 16f * num16;
							num109 += num;
							num110 += num2;
							num109 -= 10f * num16;
							num110 -= 10f * num16;
							Main.spriteBatch.Draw(Main.npcHeadTexture[num108], new Vector2(num109, num110), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.npcHeadTexture[num108].Width, Main.npcHeadTexture[num108].Height)), new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, (int)b), 0f, new Vector2((float)(Main.npcHeadTexture[num108].Width / 2), (float)(Main.npcHeadTexture[num108].Height / 2)), num106, effects3, 0f);
							float num111 = num109 - (float)(Main.npcHeadTexture[num108].Width / 2) * num106;
							float num112 = num110 - (float)(Main.npcHeadTexture[num108].Height / 2) * num106;
							float num113 = num111 + (float)Main.npcHeadTexture[num108].Width * num106;
							float num114 = num112 + (float)Main.npcHeadTexture[num108].Height * num106;
							if ((float)Main.mouseX >= num111 && (float)Main.mouseX <= num113 && (float)Main.mouseY >= num112 && (float)Main.mouseY <= num114)
							{
								string text3;
								if (num108 == 11)
								{
									text3 = Main.npc[num107].displayName;
								}
								else
								{
									text3 = Language.GetTextValue("Game.NPCTitle", Main.npc[num107].displayName, Main.npcName[Main.npc[num107].type]);
								}
								text = text3;
							}
						}
					}
					if (Main.npc[num107].active && Main.npc[num107].GetBossHeadTextureIndex() != -1)
					{
						float bossHeadRotation3 = Main.npc[num107].GetBossHeadRotation();
						SpriteEffects bossHeadSpriteEffects3 = Main.npc[num107].GetBossHeadSpriteEffects();
						Vector2 vector5 = Main.npc[num107].Center + new Vector2(0f, Main.npc[num107].gfxOffY);
						if (Main.npc[num107].type == 134)
						{
							Vector2 vector6 = Main.npc[num107].Center;
							int num115 = 1;
							int num116 = (int)Main.npc[num107].ai[0];
							while (num115 < 15 && Main.npc[num116].active && Main.npc[num116].type >= 134 && Main.npc[num116].type <= 136)
							{
								num115++;
								vector6 += Main.npc[num116].Center;
								num116 = (int)Main.npc[num116].ai[0];
							}
							vector6 /= (float)num115;
							vector5 = vector6;
						}
						int bossHeadTextureIndex3 = Main.npc[num107].GetBossHeadTextureIndex();
						float num117 = vector5.X / 16f * num16;
						float num118 = vector5.Y / 16f * num16;
						num117 += num;
						num118 += num2;
						num117 -= 10f * num16;
						num118 -= 10f * num16;
						Main.spriteBatch.Draw(Main.npcHeadBossTexture[bossHeadTextureIndex3], new Vector2(num117, num118), null, new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, (int)b), bossHeadRotation3, Main.npcHeadBossTexture[bossHeadTextureIndex3].Size() / 2f, num106, bossHeadSpriteEffects3, 0f);
						float num119 = num117 - (float)(Main.npcHeadBossTexture[bossHeadTextureIndex3].Width / 2) * num106;
						float num120 = num118 - (float)(Main.npcHeadBossTexture[bossHeadTextureIndex3].Height / 2) * num106;
						float num121 = num119 + (float)Main.npcHeadBossTexture[bossHeadTextureIndex3].Width * num106;
						float num122 = num120 + (float)Main.npcHeadBossTexture[bossHeadTextureIndex3].Height * num106;
						if ((float)Main.mouseX >= num119 && (float)Main.mouseX <= num121 && (float)Main.mouseY >= num120 && (float)Main.mouseY <= num122)
						{
							text = Main.npc[num107].displayName;
						}
					}
				}
				bool flag3 = false;
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
				for (int num123 = 0; num123 < 255; num123++)
				{
					if (Main.player[num123].active && ((!Main.player[Main.myPlayer].hostile && !Main.player[num123].hostile) || (Main.player[Main.myPlayer].team == Main.player[num123].team && Main.player[num123].team != 0) || num123 == Main.myPlayer) && Main.player[num123].showLastDeath)
					{
						float num124 = (Main.player[num123].lastDeathPostion.X / 16f - num12) * num16;
						float num125 = (Main.player[num123].lastDeathPostion.Y / 16f - num13) * num16;
						num124 += num;
						num125 += num2;
						num125 -= 2f - num16 / 5f * 2f;
						num124 -= 10f * num16;
						num125 -= 10f * num16;
						Main.spriteBatch.Draw(this.mapDeathTexture, new Vector2(num124, num125), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, this.mapDeathTexture.Width, this.mapDeathTexture.Height)), Microsoft.Xna.Framework.Color.White, 0f, new Vector2((float)this.mapDeathTexture.Width * 0.5f, (float)this.mapDeathTexture.Height * 0.5f), num106, SpriteEffects.None, 0f);
						float num126 = num124 + 4f - 14f * num106;
						float num127 = num125 + 2f - 14f * num106;
						float num128 = num126 + 28f * num106;
						float num129 = num127 + 28f * num106;
						if ((float)Main.mouseX >= num126 && (float)Main.mouseX <= num128 && (float)Main.mouseY >= num127 && (float)Main.mouseY <= num129)
						{
							TimeSpan timeSpan2 = DateTime.Now - Main.player[num123].lastDeathTime;
							text = Language.GetTextValue("Game.PlayerDeathTime", Main.player[num123].name, Lang.LocalizedDuration(timeSpan2, false, false));
						}
					}
				}
				for (int num130 = 0; num130 < 255; num130++)
				{
					if (Main.player[num130].active && ((!Main.player[Main.myPlayer].hostile && !Main.player[num130].hostile) || (Main.player[Main.myPlayer].team == Main.player[num130].team && Main.player[num130].team != 0) || num130 == Main.myPlayer))
					{
						float num131 = ((Main.player[num130].position.X + (float)(Main.player[num130].width / 2)) / 16f - num12) * num16;
						float num132 = ((Main.player[num130].position.Y + Main.player[num130].gfxOffY + (float)(Main.player[num130].height / 2)) / 16f - num13) * num16;
						num131 += num;
						num132 += num2;
						num131 -= 6f;
						num132 -= 2f;
						num132 -= 2f - num16 / 5f * 2f;
						num131 -= 10f * num16;
						num132 -= 10f * num16;
						float num133 = num131 + 4f - 14f * num106;
						float num134 = num132 + 2f - 14f * num106;
						float num135 = num133 + 28f * num106;
						float num136 = num134 + 28f * num106;
						if (!Main.player[num130].dead)
						{
							this.DrawPlayerHead(Main.player[num130], num131, num132, (float)b / 255f, num106);
							if ((float)Main.mouseX >= num133 && (float)Main.mouseX <= num135 && (float)Main.mouseY >= num134 && (float)Main.mouseY <= num136)
							{
								text = Main.player[num130].name;
								if (num130 != Main.myPlayer && Main.player[Main.myPlayer].team > 0 && Main.player[Main.myPlayer].team == Main.player[num130].team && Main.netMode == 1 && Main.player[Main.myPlayer].HasUnityPotion())
								{
									flag3 = true;
									if (!this.unityMouseOver)
									{
										Main.PlaySound(12, -1, -1, 1, 1f, 0f);
									}
									this.unityMouseOver = true;
									this.DrawPlayerHead(Main.player[num130], num131, num132, 2f, num106 + 0.5f);
									text = Language.GetTextValue("Game.TeleportTo", Main.player[num130].name);
									if (Main.mouseLeft && Main.mouseLeftRelease)
									{
										Main.mouseLeftRelease = false;
										Main.mapFullscreen = false;
										Main.player[Main.myPlayer].UnityTeleport(Main.player[num130].position);
										Main.player[Main.myPlayer].TakeUnityPotion();
									}
								}
							}
						}
					}
				}
				if (!flag3 && this.unityMouseOver)
				{
					this.unityMouseOver = false;
				}
				Main.spriteBatch.End();
				Main.spriteBatch.Begin();
				int num137 = 10;
				int num138 = Main.screenHeight - 40;
				int num139 = 0;
				int num140 = 130;
				if (Main.mouseX >= num137 && Main.mouseX <= num137 + 32 && Main.mouseY >= num138 && Main.mouseY <= num138 + 30)
				{
					num140 = 255;
					num139 += 4;
					Main.player[Main.myPlayer].mouseInterface = true;
					if (Main.mouseLeft && Main.mouseLeftRelease)
					{
						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
						Main.mapFullscreen = false;
					}
				}
				Main.spriteBatch.Draw(Main.mapIconTexture[num139], new Vector2((float)num137, (float)num138), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.mapIconTexture[num139].Width, Main.mapIconTexture[num139].Height)), new Microsoft.Xna.Framework.Color(num140, num140, num140, num140), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				Vector2 bonus = Main.DrawThickCursor(false);
				Main.DrawCursor(bonus, false);
			}
			if (text != "")
			{
				this.MouseText(text, 0, 0);
			}
			TimeLogger.DetailedDrawTime(9);
		}

		public void DrawItems()
		{
			for (int i = 0; i < 400; i++)
			{
				if (Main.item[i].active && Main.item[i].type > 0)
				{
					this.DrawItem(Main.item[i], i);
				}
			}
		}

		public void DrawSimpleSurfaceBackground()
		{
			float num = (float)Main.worldSurface * 16f;
			float num2 = Math.Min(Main.screenPosition.Y + (float)Main.screenHeight, num) - Main.screenPosition.Y;
			float y = Main.screenPosition.Y;
			float num3 = Main.screenPosition.Y + num2;
			Vector4 value = Main.bgColor.ToVector4();
			Vector4 value2 = new Microsoft.Xna.Framework.Color(53, 43, 243).ToVector4() * value;
			Vector4 value3 = new Microsoft.Xna.Framework.Color(132, 170, 248).ToVector4() * value;
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(Vector4.Lerp(value2, value3, y / num));
			Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color(Vector4.Lerp(value2, value3, num3 / num));
			VertexColors colors;
			colors.TopLeftColor = color;
			colors.TopRightColor = color;
			colors.BottomLeftColor = color2;
			colors.BottomRightColor = color2;
			Main.tileBatch.Draw(Main.blackTileTexture, new Vector4(0f, 0f, (float)Main.screenWidth, num2), colors);
			float num4 = (float)Main.screenHeight - num2;
			if (num4 > 0f)
			{
				colors.TopLeftColor = Microsoft.Xna.Framework.Color.Black;
				colors.TopRightColor = Microsoft.Xna.Framework.Color.Black;
				colors.BottomLeftColor = Microsoft.Xna.Framework.Color.Black;
				colors.BottomRightColor = Microsoft.Xna.Framework.Color.Black;
				Main.tileBatch.Draw(Main.blackTileTexture, new Vector4(0f, num2, (float)Main.screenWidth, num4), colors);
			}
		}

		public void DrawCapture(Microsoft.Xna.Framework.Rectangle area, CaptureSettings settings)
		{
			float[] array = Main.bgAlpha;
			Main.bgAlpha = new float[array.Length];
			for (int i = 0; i < Main.bgAlpha.Length; i++)
			{
				Main.bgAlpha[i] = 0f;
			}
			Main.bgAlpha[settings.Biome.BackgroundIndex] = 1f;
			float[] array2 = Main.bgAlpha2;
			Main.bgAlpha2 = new float[array2.Length];
			for (int j = 0; j < Main.bgAlpha2.Length; j++)
			{
				Main.bgAlpha2[j] = 0f;
			}
			Main.bgAlpha2[settings.Biome.BackgroundIndex2] = 1f;
			if (settings.Biome.BackgroundIndex2 == 6)
			{
				Main.bgAlpha2[0] = 1f;
			}
			int num = Main.holyTiles;
			Main.holyTiles = ((settings.Biome.BackgroundIndex == 6) ? 400 : 0);
			int num2 = Main.offScreenRange;
			Main.offScreenRange = 0;
			Main.Transform = Matrix.CreateScale(1f, 1f, 1f) * Matrix.CreateRotationZ(0f) * Matrix.CreateTranslation(new Vector3(0f, 0f, 0f));
			this.Rasterizer = RasterizerState.CullCounterClockwise;
			bool captureEntities = settings.CaptureEntities;
			bool captureBackground = settings.CaptureBackground;
			CaptureBiome biome = settings.Biome;
			Vector2 vector = Main.screenPosition;
			int num3 = Main.screenWidth;
			int num4 = Main.screenHeight;
			float num5 = Main.cloudAlpha;
			bool captureMech = settings.CaptureMech;
			Main.screenWidth = area.Width << 4;
			Main.screenHeight = area.Height << 4;
			Main.screenPosition = new Vector2((float)(area.X * 16), (float)(area.Y * 16));
			Main.cloudAlpha = 0f;
			int x = area.X;
			int y = area.Y;
			int num6 = area.X + Main.screenWidth / 16;
			int num7 = area.Y + Main.screenHeight / 16;
			Main.bgColor = Microsoft.Xna.Framework.Color.White;
			double arg_1F9_0 = Main.time / 54000.0;
			int arg_1FF_0 = Main.screenWidth;
			int arg_20A_0 = Main.sunTexture.Width;
			int arg_215_0 = Main.sunTexture.Width;
			Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
			double arg_22C_0 = Main.time / 54000.0;
			double arg_23C_0 = Main.time / 32400.0;
			int arg_242_0 = Main.screenWidth;
			int arg_253_0 = Main.moonTexture[Main.moonType].Width;
			int arg_264_0 = Main.moonTexture[Main.moonType].Width;
			Microsoft.Xna.Framework.Color white2 = Microsoft.Xna.Framework.Color.White;
			double arg_27B_0 = Main.time / 32400.0;
			if (Main.dayTime)
			{
				if (Main.time < 27000.0)
				{
					double num8 = Math.Pow(1.0 - Main.time / 54000.0 * 2.0, 2.0);
				}
				else
				{
					double num8 = Math.Pow((Main.time / 54000.0 - 0.5) * 2.0, 2.0);
				}
			}
			else if (Main.time < 16200.0)
			{
				double num9 = Math.Pow(1.0 - Main.time / 32400.0 * 2.0, 2.0);
			}
			else
			{
				double num9 = Math.Pow((Main.time / 32400.0 - 0.5) * 2.0, 2.0);
			}
			if (Main.dayTime)
			{
				if (Main.time < 13500.0)
				{
					float num10 = (float)(Main.time / 13500.0);
					white.R = (byte)(num10 * 200f + 55f);
					white.G = (byte)(num10 * 180f + 75f);
					white.B = (byte)(num10 * 250f + 5f);
					Main.bgColor.R = (byte)(num10 * 230f + 25f);
					Main.bgColor.G = (byte)(num10 * 220f + 35f);
					Main.bgColor.B = (byte)(num10 * 220f + 35f);
				}
				if (Main.time > 45900.0)
				{
					float num10 = (float)(1.0 - (Main.time / 54000.0 - 0.85) * 6.666666666666667);
					white.R = (byte)(num10 * 120f + 55f);
					white.G = (byte)(num10 * 100f + 25f);
					white.B = (byte)(num10 * 120f + 55f);
					Main.bgColor.R = (byte)(num10 * 200f + 35f);
					Main.bgColor.G = (byte)(num10 * 85f + 35f);
					Main.bgColor.B = (byte)(num10 * 135f + 35f);
				}
				else if (Main.time > 37800.0)
				{
					float num10 = (float)(1.0 - (Main.time / 54000.0 - 0.7) * 6.666666666666667);
					white.R = (byte)(num10 * 80f + 175f);
					white.G = (byte)(num10 * 130f + 125f);
					white.B = (byte)(num10 * 100f + 155f);
					Main.bgColor.R = (byte)(num10 * 20f + 235f);
					Main.bgColor.G = (byte)(num10 * 135f + 120f);
					Main.bgColor.B = (byte)(num10 * 85f + 170f);
				}
			}
			if (!Main.dayTime)
			{
				if (Main.bloodMoon)
				{
					if (Main.time < 16200.0)
					{
						float num10 = (float)(1.0 - Main.time / 16200.0);
						white2.R = (byte)(num10 * 10f + 205f);
						white2.G = (byte)(num10 * 170f + 55f);
						white2.B = (byte)(num10 * 200f + 55f);
						Main.bgColor.R = (byte)(40f - num10 * 40f + 35f);
						Main.bgColor.G = (byte)(num10 * 20f + 15f);
						Main.bgColor.B = (byte)(num10 * 20f + 15f);
					}
					else if (Main.time >= 16200.0)
					{
						float num10 = (float)((Main.time / 32400.0 - 0.5) * 2.0);
						white2.R = (byte)(num10 * 50f + 205f);
						white2.G = (byte)(num10 * 100f + 155f);
						white2.B = (byte)(num10 * 100f + 155f);
						white2.R = (byte)(num10 * 10f + 205f);
						white2.G = (byte)(num10 * 170f + 55f);
						white2.B = (byte)(num10 * 200f + 55f);
						Main.bgColor.R = (byte)(40f - num10 * 40f + 35f);
						Main.bgColor.G = (byte)(num10 * 20f + 15f);
						Main.bgColor.B = (byte)(num10 * 20f + 15f);
					}
				}
				else if (Main.time < 16200.0)
				{
					float num10 = (float)(1.0 - Main.time / 16200.0);
					white2.R = (byte)(num10 * 10f + 205f);
					white2.G = (byte)(num10 * 70f + 155f);
					white2.B = (byte)(num10 * 100f + 155f);
					Main.bgColor.R = (byte)(num10 * 30f + 5f);
					Main.bgColor.G = (byte)(num10 * 30f + 5f);
					Main.bgColor.B = (byte)(num10 * 30f + 5f);
				}
				else if (Main.time >= 16200.0)
				{
					float num10 = (float)((Main.time / 32400.0 - 0.5) * 2.0);
					white2.R = (byte)(num10 * 50f + 205f);
					white2.G = (byte)(num10 * 100f + 155f);
					white2.B = (byte)(num10 * 100f + 155f);
					Main.bgColor.R = (byte)(num10 * 20f + 5f);
					Main.bgColor.G = (byte)(num10 * 30f + 5f);
					Main.bgColor.B = (byte)(num10 * 30f + 5f);
				}
			}
			if (Main.gameMenu)
			{
				Main.bgDelay = 1000;
			}
			if (biome.TileColor == CaptureBiome.TileColorStyle.Corrupt)
			{
				float num11 = 1f;
				int num12 = (int)Main.bgColor.R;
				int num13 = (int)Main.bgColor.G;
				int num14 = (int)Main.bgColor.B;
				num12 -= (int)(100f * num11 * ((float)Main.bgColor.R / 255f));
				num13 -= (int)(140f * num11 * ((float)Main.bgColor.G / 255f));
				num14 -= (int)(80f * num11 * ((float)Main.bgColor.B / 255f));
				if (num12 < 15)
				{
					num12 = 15;
				}
				if (num13 < 15)
				{
					num13 = 15;
				}
				if (num14 < 15)
				{
					num14 = 15;
				}
				Main.bgColor.R = (byte)num12;
				Main.bgColor.G = (byte)num13;
				Main.bgColor.B = (byte)num14;
				num12 = (int)white.R;
				num13 = (int)white.G;
				num14 = (int)white.B;
				num12 -= (int)(100f * num11 * ((float)white.R / 255f));
				num13 -= (int)(100f * num11 * ((float)white.G / 255f));
				num14 -= (int)(0f * num11 * ((float)white.B / 255f));
				if (num12 < 15)
				{
					num12 = 15;
				}
				if (num13 < 15)
				{
					num13 = 15;
				}
				if (num14 < 15)
				{
					num14 = 15;
				}
				white.R = (byte)num12;
				white.G = (byte)num13;
				white.B = (byte)num14;
				num12 = (int)white2.R;
				num13 = (int)white2.G;
				num14 = (int)white2.B;
				num12 -= (int)(140f * num11 * ((float)white2.R / 255f));
				num13 -= (int)(190f * num11 * ((float)white2.G / 255f));
				num14 -= (int)(170f * num11 * ((float)white2.B / 255f));
				if (num12 < 15)
				{
					num12 = 15;
				}
				if (num13 < 15)
				{
					num13 = 15;
				}
				if (num14 < 15)
				{
					num14 = 15;
				}
				white2.R = (byte)num12;
				white2.G = (byte)num13;
				white2.B = (byte)num14;
			}
			if (biome.TileColor == CaptureBiome.TileColorStyle.Crimson)
			{
				float num15 = 1f;
				int num16 = (int)Main.bgColor.R;
				int num17 = (int)Main.bgColor.G;
				int num18 = (int)Main.bgColor.B;
				num16 -= (int)(70f * num15 * ((float)Main.bgColor.G / 255f));
				num17 -= (int)(110f * num15 * ((float)Main.bgColor.G / 255f));
				num18 -= (int)(150f * num15 * ((float)Main.bgColor.B / 255f));
				if (num16 < 15)
				{
					num16 = 15;
				}
				if (num17 < 15)
				{
					num17 = 15;
				}
				if (num18 < 15)
				{
					num18 = 15;
				}
				Main.bgColor.R = (byte)num16;
				Main.bgColor.G = (byte)num17;
				Main.bgColor.B = (byte)num18;
				num16 = (int)white.R;
				num17 = (int)white.G;
				num18 = (int)white.B;
				num17 -= (int)(90f * num15 * ((float)white.G / 255f));
				num18 -= (int)(110f * num15 * ((float)white.B / 255f));
				if (num16 < 15)
				{
					num16 = 15;
				}
				if (num17 < 15)
				{
					num17 = 15;
				}
				if (num18 < 15)
				{
					num18 = 15;
				}
				white.R = (byte)num16;
				white.G = (byte)num17;
				white.B = (byte)num18;
				num16 = (int)white2.R;
				num17 = (int)white2.G;
				num18 = (int)white2.B;
				num16 -= (int)(100f * num15 * ((float)white2.R / 255f));
				num17 -= (int)(120f * num15 * ((float)white2.G / 255f));
				num18 -= (int)(180f * num15 * ((float)white2.B / 255f));
				if (num16 < 15)
				{
					num16 = 15;
				}
				if (num17 < 15)
				{
					num17 = 15;
				}
				if (num18 < 15)
				{
					num18 = 15;
				}
				white2.R = (byte)num16;
				white2.G = (byte)num17;
				white2.B = (byte)num18;
			}
			if (biome.TileColor == CaptureBiome.TileColorStyle.Jungle)
			{
				float num19 = 1f;
				int num20 = (int)Main.bgColor.R;
				int num21 = (int)Main.bgColor.G;
				int num22 = (int)Main.bgColor.B;
				num20 -= (int)(40f * num19 * ((float)Main.bgColor.R / 255f));
				num22 -= (int)(70f * num19 * ((float)Main.bgColor.B / 255f));
				if (num21 > 255)
				{
					num21 = 255;
				}
				if (num21 < 15)
				{
					num21 = 15;
				}
				if (num20 > 255)
				{
					num20 = 255;
				}
				if (num20 < 15)
				{
					num20 = 15;
				}
				if (num22 < 15)
				{
					num22 = 15;
				}
				Main.bgColor.R = (byte)num20;
				Main.bgColor.G = (byte)num21;
				Main.bgColor.B = (byte)num22;
				num20 = (int)white.R;
				num21 = (int)white.G;
				num22 = (int)white.B;
				num20 -= (int)(30f * num19 * ((float)white.R / 255f));
				num22 -= (int)(10f * num19 * ((float)white.B / 255f));
				if (num20 < 15)
				{
					num20 = 15;
				}
				if (num21 < 15)
				{
					num21 = 15;
				}
				if (num22 < 15)
				{
					num22 = 15;
				}
				white.R = (byte)num20;
				white.G = (byte)num21;
				white.B = (byte)num22;
				num20 = (int)white2.R;
				num21 = (int)white2.G;
				num22 = (int)white2.B;
				num21 -= (int)(140f * num19 * ((float)white2.R / 255f));
				num20 -= (int)(170f * num19 * ((float)white2.G / 255f));
				num22 -= (int)(190f * num19 * ((float)white2.B / 255f));
				if (num20 < 15)
				{
					num20 = 15;
				}
				if (num21 < 15)
				{
					num21 = 15;
				}
				if (num22 < 15)
				{
					num22 = 15;
				}
				white2.R = (byte)num20;
				white2.G = (byte)num21;
				white2.B = (byte)num22;
			}
			if (biome.TileColor == CaptureBiome.TileColorStyle.Mushroom)
			{
				float num23 = 1f;
				int num24 = (int)Main.bgColor.R;
				int num25 = (int)Main.bgColor.G;
				int num26 = (int)Main.bgColor.B;
				num25 -= (int)(250f * num23 * ((float)Main.bgColor.G / 255f));
				num24 -= (int)(250f * num23 * ((float)Main.bgColor.R / 255f));
				num26 -= (int)(250f * num23 * ((float)Main.bgColor.B / 255f));
				if (num25 < 15)
				{
					num25 = 15;
				}
				if (num24 < 15)
				{
					num24 = 15;
				}
				if (num26 < 15)
				{
					num26 = 15;
				}
				Main.bgColor.R = (byte)num24;
				Main.bgColor.G = (byte)num25;
				Main.bgColor.B = (byte)num26;
				num24 = (int)white.R;
				num25 = (int)white.G;
				num26 = (int)white.B;
				num25 -= (int)(10f * num23 * ((float)white.G / 255f));
				num24 -= (int)(30f * num23 * ((float)white.R / 255f));
				num26 -= (int)(10f * num23 * ((float)white.B / 255f));
				if (num24 < 15)
				{
					num24 = 15;
				}
				if (num25 < 15)
				{
					num25 = 15;
				}
				if (num26 < 15)
				{
					num26 = 15;
				}
				white.R = (byte)num24;
				white.G = (byte)num25;
				white.B = (byte)num26;
				num24 = (int)white2.R;
				num25 = (int)white2.G;
				num26 = (int)white2.B;
				num25 -= (int)(140f * num23 * ((float)white2.R / 255f));
				num24 -= (int)(170f * num23 * ((float)white2.G / 255f));
				num26 -= (int)(190f * num23 * ((float)white2.B / 255f));
				if (num24 < 15)
				{
					num24 = 15;
				}
				if (num25 < 15)
				{
					num25 = 15;
				}
				if (num26 < 15)
				{
					num26 = 15;
				}
				white2.R = (byte)num24;
				white2.G = (byte)num25;
				white2.B = (byte)num26;
			}
			if (Lighting.lightMode < 2)
			{
				if (Main.bgColor.R < 10)
				{
					Main.bgColor.R = 10;
				}
				if (Main.bgColor.G < 10)
				{
					Main.bgColor.G = 10;
				}
				if (Main.bgColor.B < 10)
				{
					Main.bgColor.B = 10;
				}
			}
			else
			{
				if (Main.bgColor.R < 15)
				{
					Main.bgColor.R = 15;
				}
				if (Main.bgColor.G < 15)
				{
					Main.bgColor.G = 15;
				}
				if (Main.bgColor.B < 15)
				{
					Main.bgColor.B = 15;
				}
			}
			Main.tileColor.A = 255;
			Main.tileColor.R = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.R * 7) / 10);
			Main.tileColor.G = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.G * 7) / 10);
			Main.tileColor.B = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.B * 7) / 10);
			Main.backColor = Main.bgColor;
			Main.trueBackColor = Main.backColor;
			Lighting.Initialize(true);
			Main.renderCount = 99;
			for (int k = 0; k < 3; k++)
			{
				Lighting.LightTiles(x, num6, y, num7);
			}
			if ((float)(settings.Area.X * 16) <= vector.X - 16f || (float)(settings.Area.Y * 16) <= vector.Y - 16f || (float)((settings.Area.X + settings.Area.Width) * 16) >= vector.X + (float)num3 + 16f || (float)((settings.Area.Y + settings.Area.Height) * 16) >= vector.Y + (float)num4 + 16f)
			{
				for (int l = 0; l < Main.dust.Length; l++)
				{
					if (Main.dust[l].active && Main.dust[l].type == 76)
					{
						Main.dust[l].active = false;
					}
				}
			}
			Vector2 value = Main.drawToScreen ? Vector2.Zero : new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
			int num27 = (int)((Main.screenPosition.X - value.X) / 16f - 1f);
			int num28 = (int)((Main.screenPosition.X + (float)Main.screenWidth + value.X) / 16f) + 2;
			int num29 = (int)((Main.screenPosition.Y - value.Y) / 16f - 1f);
			int num30 = (int)((Main.screenPosition.Y + (float)Main.screenHeight + value.Y) / 16f) + 5;
			value -= Main.screenPosition;
			num27 = Math.Max(num27, 5) - 2;
			num29 = Math.Max(num29, 5);
			num28 = Math.Min(num28, Main.maxTilesX - 5) + 2;
			num30 = Math.Min(num30, Main.maxTilesY - 5) + 4;
			Microsoft.Xna.Framework.Rectangle drawArea = new Microsoft.Xna.Framework.Rectangle(num27, num29, num28 - num27, num30 - num29);
			LiquidRenderer.Instance.PrepareDraw(drawArea);
			WorldGen.SectionTileFrameWithCheck(x, y, num6, num7);
			if (captureBackground)
			{
				Matrix matrix = Main.Transform;
				int num31 = Main.screenHeight;
				int num32 = Main.screenWidth;
				Vector2 vector2 = Main.screenPosition;
				bool flag = Main.mapFullscreen;
				Main.mapFullscreen = false;
				float num33 = this.scAdj;
				Vector2 value2 = new Vector2((float)num3, (float)num4);
				Vector2 value3 = new Vector2((float)(settings.Area.Width * 16), (float)(settings.Area.Height * 16));
				Vector2 value4 = value3 / value2;
				value4.X = Math.Max(1f, value4.X);
				value4.Y = Math.Max(1f, value4.Y);
				Vector2[] array3 = new Vector2[Main.numClouds];
				for (int m = 0; m < Main.numClouds; m++)
				{
					array3[m] = Main.cloud[m].position;
					Main.cloud[m].position *= value4;
				}
				if ((float)(settings.Area.Height * 16) >= 2000f || (float)(settings.Area.Width * 16) >= 2000f)
				{
					this.scAdj = 0f;
					float num34 = 2500f;
					float num35 = MathHelper.Clamp((float)settings.Area.Height * 16f / num34, 1f, 2f);
					Main.screenWidth = settings.Area.Width * 16;
					Main.screenHeight = Math.Min(2048, settings.Area.Height * 16);
					Main.screenPosition.X = (float)(settings.Area.X * 16);
					Main.screenPosition.Y = (float)(settings.Area.Y * 16);
					Main.screenPosition.Y = Main.screenPosition.Y + Math.Max(0f, Math.Min((float)settings.Area.Height, (float)Main.worldSurface) * 16f - num34 * num35);
					matrix *= Matrix.CreateScale(num35);
					matrix.Translation += new Vector3((float)((settings.Area.X - area.X) * 16), (float)((settings.Area.Y - area.Y) * 16), 0f);
					matrix.Translation += new Vector3(0f, Math.Max(0f, Math.Min((float)settings.Area.Height, (float)Main.worldSurface) * 16f - num34 * num35) / num35, 0f);
				}
				else if ((float)(settings.Area.X * 16) > vector.X - 16f && (float)(settings.Area.Y * 16) > vector.Y - 16f && (float)((settings.Area.X + settings.Area.Width) * 16) < vector.X + (float)num3 + 16f && (float)((settings.Area.Y + settings.Area.Height) * 16) < vector.Y + (float)num4 + 16f)
				{
					Main.screenPosition = vector;
					Main.screenWidth = num3;
					Main.screenHeight = num4;
					matrix.Translation += new Vector3(vector.X - (float)area.X * 16f, vector.Y - (float)area.Y * 16f, 0f);
				}
				Main.tileBatch.Begin();
				this.DrawSimpleSurfaceBackground();
				Main.tileBatch.End();
				Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.AnisotropicClamp, DepthStencilState.Default, RasterizerState.CullNone, null, matrix);
				this.DrawSurfaceBG();
				Main.spriteBatch.End();
				for (int n = 0; n < Main.numClouds; n++)
				{
					Main.cloud[n].position = array3[n];
				}
				this.scAdj = num33;
				Main.mapFullscreen = flag;
				Main.screenWidth = num32;
				Main.screenHeight = num31;
				Main.screenPosition = vector2;
			}
			if (captureBackground)
			{
				Main.spriteBatch.Begin();
				this.DrawUnderworldBackground(true);
				Main.spriteBatch.End();
			}
			if (captureEntities)
			{
				Main.spriteBatch.Begin();
				this.CacheNPCDraws();
				this.CacheProjDraws();
				this.DrawCachedNPCs(this.DrawCacheNPCsMoonMoon, true);
				Main.spriteBatch.End();
			}
			Main.tileBatch.Begin();
			Main.spriteBatch.Begin();
			this.DrawBlack(true);
			Main.tileBatch.End();
			Main.spriteBatch.End();
			Main.tileBatch.Begin();
			Main.spriteBatch.Begin();
			if (biome == null)
			{
				this.drawWaters(true, -1, true);
			}
			else
			{
				this.drawWaters(true, Main.bloodMoon ? 9 : biome.WaterStyle, false);
			}
			Main.tileBatch.End();
			Main.spriteBatch.End();
			if (captureBackground)
			{
				Main.tileBatch.Begin();
				Main.spriteBatch.Begin();
				this.DrawBackground();
				Main.tileBatch.End();
				Main.spriteBatch.End();
			}
			Main.tileBatch.Begin();
			Main.spriteBatch.Begin();
			this.DrawWalls();
			Main.tileBatch.End();
			Main.spriteBatch.End();
			if (captureEntities)
			{
				Main.spriteBatch.Begin();
				this.DrawWoF();
				Main.spriteBatch.End();
			}
			if (captureEntities)
			{
				Main.spriteBatch.Begin();
				this.DrawRain();
				Main.spriteBatch.End();
			}
			if (Main.drawBackGore && captureEntities)
			{
				Main.spriteBatch.Begin();
				this.DrawGoreBehind();
				Main.spriteBatch.End();
				Main.drawBackGore = true;
			}
			if (captureEntities)
			{
				Main.spriteBatch.Begin();
				MoonlordDeathDrama.DrawPieces(Main.spriteBatch);
				MoonlordDeathDrama.DrawExplosions(Main.spriteBatch);
				Main.spriteBatch.End();
			}
			Main.tileBatch.Begin();
			Main.spriteBatch.Begin();
			if (biome == null)
			{
				this.DrawTiles(true, -1);
			}
			else
			{
				this.DrawTiles(true, biome.WaterStyle);
			}
			Main.tileBatch.End();
			Main.spriteBatch.End();
			Main.tileBatch.Begin();
			Main.spriteBatch.Begin();
			this.DrawCachedNPCs(this.DrawCacheNPCsBehindNonSolidTiles, true);
			if (biome == null)
			{
				this.DrawTiles(false, -1);
			}
			else
			{
				this.DrawTiles(false, Main.bloodMoon ? 9 : biome.WaterStyle);
			}
			Main.tileBatch.End();
			Main.spriteBatch.End();
			if (captureEntities)
			{
				Main.spriteBatch.Begin();
				this.waterfallManager.FindWaterfalls(false);
				this.waterfallManager.Draw(Main.spriteBatch);
				Main.spriteBatch.End();
				this.DrawPlayers();
				this.DrawCachedProjs(this.DrawCacheProjsBehindNPCsAndTiles, true);
				Main.spriteBatch.Begin();
				this.DrawNPCs(true);
				Main.spriteBatch.End();
				this.DrawCachedProjs(this.DrawCacheProjsBehindNPCs, true);
				Main.spriteBatch.Begin();
				this.DrawNPCs(false);
				Main.spriteBatch.End();
				Main.spriteBatch.Begin();
				this.DrawCachedNPCs(this.DrawCacheNPCProjectiles, false);
				Main.spriteBatch.End();
				Main.spriteBatch.Begin();
				this.DrawItems();
				Main.spriteBatch.End();
				this.DrawProjectiles();
				this.DrawDust();
				Main.spriteBatch.Begin();
				this.DrawGore();
				Main.spriteBatch.End();
			}
			Main.tileBatch.Begin();
			Main.spriteBatch.Begin();
			if (biome == null)
			{
				this.drawWaters(false, -1, true);
			}
			else
			{
				this.drawWaters(false, biome.WaterStyle, false);
			}
			if (captureMech)
			{
				this.DrawWires();
			}
			Main.tileBatch.End();
			Main.spriteBatch.End();
			this.DrawCachedProjs(this.DrawCacheProjsOverWiresUI, true);
			if (Main.mapEnabled)
			{
				Main.spriteBatch.Begin();
				for (int num36 = area.X; num36 < area.X + area.Width; num36++)
				{
					for (int num37 = area.Y; num37 < area.Y + area.Height; num37++)
					{
						if (!Main.Map.IsRevealed(num36, num37))
						{
							Main.spriteBatch.Draw(Main.blackTileTexture, new Vector2((float)num36 * 16f, (float)num37 * 16f) - Main.screenPosition, Microsoft.Xna.Framework.Color.Black);
						}
					}
				}
				Main.spriteBatch.End();
			}
			Main.renderCount = 99;
			Main.screenWidth = num3;
			Main.screenHeight = num4;
			Main.screenPosition = vector;
			Lighting.Initialize(true);
			Main.offScreenRange = num2;
			Main.cloudAlpha = num5;
			Main.bgAlpha = array;
			Main.bgAlpha2 = array2;
			Main.holyTiles = num;
		}

		public void RenderFrameBuffers()
		{
			Main.spriteBatch.Begin();
			Main.spriteBatch.Draw(this.blackTarget, Vector2.Zero, Microsoft.Xna.Framework.Color.White);
			Main.spriteBatch.Draw(this.backWaterTarget, Vector2.Zero, Microsoft.Xna.Framework.Color.White);
			Main.spriteBatch.Draw(this.wallTarget, Vector2.Zero, Microsoft.Xna.Framework.Color.White);
			Main.spriteBatch.Draw(this.tileTarget, Vector2.Zero, Microsoft.Xna.Framework.Color.White);
			Main.spriteBatch.Draw(this.tile2Target, Vector2.Zero, Microsoft.Xna.Framework.Color.White);
			Main.spriteBatch.Draw(Main.waterTarget, Vector2.Zero, Microsoft.Xna.Framework.Color.White);
			Main.spriteBatch.End();
		}

		protected void RenderTiles()
		{
			if (Main.drawToScreen)
			{
				return;
			}
			this.RenderBlack();
			base.GraphicsDevice.SetRenderTarget(this.tileTarget);
			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
			Main.spriteBatch.Begin();
			if (Main.ignoreErrors)
			{
				try
				{
					this.DrawTiles(true, -1);
					goto IL_5B;
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
					goto IL_5B;
				}
			}
			this.DrawTiles(true, -1);
			IL_5B:
			TimeLogger.DetailedDrawReset();
			Main.spriteBatch.End();
			TimeLogger.DetailedDrawTime(28);
			base.GraphicsDevice.SetRenderTarget(null);
		}

		protected void RenderTiles2()
		{
			if (Main.drawToScreen)
			{
				return;
			}
			base.GraphicsDevice.SetRenderTarget(this.tile2Target);
			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
			Main.spriteBatch.Begin();
			if (Main.ignoreErrors)
			{
				try
				{
					this.DrawTiles(false, -1);
					goto IL_55;
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
					goto IL_55;
				}
			}
			this.DrawTiles(false, -1);
			IL_55:
			TimeLogger.DetailedDrawReset();
			Main.spriteBatch.End();
			TimeLogger.DetailedDrawTime(29);
			base.GraphicsDevice.SetRenderTarget(null);
		}

		protected void RenderWater()
		{
			if (Main.drawToScreen)
			{
				return;
			}
			base.GraphicsDevice.SetRenderTarget(Main.waterTarget);
			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
			Main.spriteBatch.Begin();
			try
			{
				this.drawWaters(false, -1, true);
			}
			catch
			{
			}
			TimeLogger.DetailedDrawReset();
			Main.spriteBatch.End();
			TimeLogger.DetailedDrawTime(31);
			base.GraphicsDevice.SetRenderTarget(null);
		}

		protected void drawWaters(bool bg = false, int styleOverride = -1, bool allowUpdate = true)
		{
			if (!bg)
			{
				if (Main.bgStyle == 1)
				{
					Main.waterStyle = 2;
				}
				else if (Main.bgStyle == 5)
				{
					if (Main.evilTiles > Main.holyTiles)
					{
						if (Main.bloodTiles > Main.evilTiles)
						{
							Main.waterStyle = 10;
						}
						else
						{
							Main.waterStyle = 2;
						}
					}
					else if (Main.bloodTiles > Main.holyTiles)
					{
						Main.waterStyle = 10;
					}
					else
					{
						Main.waterStyle = 4;
					}
				}
				else if (Main.bgStyle == 5 && Main.bloodTiles > Main.holyTiles)
				{
					Main.waterStyle = 10;
				}
				else if (Main.bgStyle == 3)
				{
					Main.waterStyle = 3;
				}
				else if (Main.bgStyle == 8)
				{
					Main.waterStyle = 10;
				}
				else if (Main.bgStyle == 6)
				{
					Main.waterStyle = 4;
				}
				else if (Main.bgStyle == 7)
				{
					Main.waterStyle = 5;
				}
				else if (Main.bgStyle == 2)
				{
					Main.waterStyle = 6;
				}
				else if ((double)(Main.screenPosition.Y / 16f) > Main.rockLayer + 40.0)
				{
					if (Main.shroomTiles > 300)
					{
						Main.waterStyle = 7;
					}
					else
					{
						Main.waterStyle = 8;
					}
				}
				else if ((double)(Main.screenPosition.Y / 16f) > Main.worldSurface)
				{
					Main.waterStyle = 7;
				}
				else
				{
					Main.waterStyle = 0;
				}
				if (Main.bgStyle != 4 && Main.bloodMoon && !Main.dayTime)
				{
					Main.waterStyle = 9;
				}
				if (Main.fountainColor >= 0)
				{
					Main.waterStyle = Main.fountainColor;
				}
				if (Main.waterStyle == 0)
				{
					Main.liquidAlpha[2] -= 0.2f;
					if (Main.liquidAlpha[2] < 0f)
					{
						Main.liquidAlpha[2] = 0f;
					}
					Main.liquidAlpha[3] -= 0.2f;
					if (Main.liquidAlpha[3] < 0f)
					{
						Main.liquidAlpha[3] = 0f;
					}
					Main.liquidAlpha[4] -= 0.2f;
					if (Main.liquidAlpha[4] < 0f)
					{
						Main.liquidAlpha[4] = 0f;
					}
					Main.liquidAlpha[5] -= 0.2f;
					if (Main.liquidAlpha[5] < 0f)
					{
						Main.liquidAlpha[5] = 0f;
					}
					Main.liquidAlpha[6] -= 0.2f;
					if (Main.liquidAlpha[6] < 0f)
					{
						Main.liquidAlpha[6] = 0f;
					}
					Main.liquidAlpha[7] -= 0.2f;
					if (Main.liquidAlpha[7] < 0f)
					{
						Main.liquidAlpha[7] = 0f;
					}
					Main.liquidAlpha[8] -= 0.2f;
					if (Main.liquidAlpha[8] < 0f)
					{
						Main.liquidAlpha[8] = 0f;
					}
					Main.liquidAlpha[9] -= 0.2f;
					if (Main.liquidAlpha[9] < 0f)
					{
						Main.liquidAlpha[9] = 0f;
					}
					Main.liquidAlpha[10] -= 0.2f;
					if (Main.liquidAlpha[10] < 0f)
					{
						Main.liquidAlpha[10] = 0f;
					}
					Main.liquidAlpha[0] += 0.2f;
					if (Main.liquidAlpha[0] > 1f)
					{
						Main.liquidAlpha[0] = 1f;
					}
				}
				if (Main.waterStyle == 2)
				{
					Main.liquidAlpha[0] -= 0.2f;
					if (Main.liquidAlpha[0] < 0f)
					{
						Main.liquidAlpha[0] = 0f;
					}
					Main.liquidAlpha[3] -= 0.2f;
					if (Main.liquidAlpha[3] < 0f)
					{
						Main.liquidAlpha[3] = 0f;
					}
					Main.liquidAlpha[4] -= 0.2f;
					if (Main.liquidAlpha[4] < 0f)
					{
						Main.liquidAlpha[4] = 0f;
					}
					Main.liquidAlpha[5] -= 0.2f;
					if (Main.liquidAlpha[5] < 0f)
					{
						Main.liquidAlpha[5] = 0f;
					}
					Main.liquidAlpha[6] -= 0.2f;
					if (Main.liquidAlpha[6] < 0f)
					{
						Main.liquidAlpha[6] = 0f;
					}
					Main.liquidAlpha[7] -= 0.2f;
					if (Main.liquidAlpha[7] < 0f)
					{
						Main.liquidAlpha[7] = 0f;
					}
					Main.liquidAlpha[8] -= 0.2f;
					if (Main.liquidAlpha[8] < 0f)
					{
						Main.liquidAlpha[8] = 0f;
					}
					Main.liquidAlpha[9] -= 0.2f;
					if (Main.liquidAlpha[9] < 0f)
					{
						Main.liquidAlpha[9] = 0f;
					}
					Main.liquidAlpha[10] -= 0.2f;
					if (Main.liquidAlpha[10] < 0f)
					{
						Main.liquidAlpha[10] = 0f;
					}
					Main.liquidAlpha[2] += 0.2f;
					if (Main.liquidAlpha[2] > 1f)
					{
						Main.liquidAlpha[2] = 1f;
					}
				}
				if (Main.waterStyle == 3)
				{
					Main.liquidAlpha[0] -= 0.2f;
					if (Main.liquidAlpha[0] < 0f)
					{
						Main.liquidAlpha[0] = 0f;
					}
					Main.liquidAlpha[2] -= 0.2f;
					if (Main.liquidAlpha[2] < 0f)
					{
						Main.liquidAlpha[2] = 0f;
					}
					Main.liquidAlpha[4] -= 0.2f;
					if (Main.liquidAlpha[4] < 0f)
					{
						Main.liquidAlpha[4] = 0f;
					}
					Main.liquidAlpha[5] -= 0.2f;
					if (Main.liquidAlpha[5] < 0f)
					{
						Main.liquidAlpha[5] = 0f;
					}
					Main.liquidAlpha[6] -= 0.2f;
					if (Main.liquidAlpha[6] < 0f)
					{
						Main.liquidAlpha[6] = 0f;
					}
					Main.liquidAlpha[7] -= 0.2f;
					if (Main.liquidAlpha[7] < 0f)
					{
						Main.liquidAlpha[7] = 0f;
					}
					Main.liquidAlpha[8] -= 0.2f;
					if (Main.liquidAlpha[8] < 0f)
					{
						Main.liquidAlpha[8] = 0f;
					}
					Main.liquidAlpha[9] -= 0.2f;
					if (Main.liquidAlpha[9] < 0f)
					{
						Main.liquidAlpha[9] = 0f;
					}
					Main.liquidAlpha[10] -= 0.2f;
					if (Main.liquidAlpha[10] < 0f)
					{
						Main.liquidAlpha[10] = 0f;
					}
					Main.liquidAlpha[3] += 0.2f;
					if (Main.liquidAlpha[3] > 1f)
					{
						Main.liquidAlpha[3] = 1f;
					}
				}
				if (Main.waterStyle == 4)
				{
					Main.liquidAlpha[0] -= 0.2f;
					if (Main.liquidAlpha[0] < 0f)
					{
						Main.liquidAlpha[0] = 0f;
					}
					Main.liquidAlpha[2] -= 0.2f;
					if (Main.liquidAlpha[2] < 0f)
					{
						Main.liquidAlpha[2] = 0f;
					}
					Main.liquidAlpha[3] -= 0.2f;
					if (Main.liquidAlpha[3] < 0f)
					{
						Main.liquidAlpha[3] = 0f;
					}
					Main.liquidAlpha[5] -= 0.2f;
					if (Main.liquidAlpha[5] < 0f)
					{
						Main.liquidAlpha[5] = 0f;
					}
					Main.liquidAlpha[6] -= 0.2f;
					if (Main.liquidAlpha[6] < 0f)
					{
						Main.liquidAlpha[6] = 0f;
					}
					Main.liquidAlpha[7] -= 0.2f;
					if (Main.liquidAlpha[7] < 0f)
					{
						Main.liquidAlpha[7] = 0f;
					}
					Main.liquidAlpha[8] -= 0.2f;
					if (Main.liquidAlpha[8] < 0f)
					{
						Main.liquidAlpha[8] = 0f;
					}
					Main.liquidAlpha[9] -= 0.2f;
					if (Main.liquidAlpha[9] < 0f)
					{
						Main.liquidAlpha[9] = 0f;
					}
					Main.liquidAlpha[10] -= 0.2f;
					if (Main.liquidAlpha[10] < 0f)
					{
						Main.liquidAlpha[10] = 0f;
					}
					Main.liquidAlpha[4] += 0.2f;
					if (Main.liquidAlpha[4] > 1f)
					{
						Main.liquidAlpha[4] = 1f;
					}
				}
				if (Main.waterStyle == 5)
				{
					Main.liquidAlpha[0] -= 0.2f;
					if (Main.liquidAlpha[0] < 0f)
					{
						Main.liquidAlpha[0] = 0f;
					}
					Main.liquidAlpha[2] -= 0.2f;
					if (Main.liquidAlpha[2] < 0f)
					{
						Main.liquidAlpha[2] = 0f;
					}
					Main.liquidAlpha[3] -= 0.2f;
					if (Main.liquidAlpha[3] < 0f)
					{
						Main.liquidAlpha[3] = 0f;
					}
					Main.liquidAlpha[4] -= 0.2f;
					if (Main.liquidAlpha[4] < 0f)
					{
						Main.liquidAlpha[4] = 0f;
					}
					Main.liquidAlpha[6] -= 0.2f;
					if (Main.liquidAlpha[6] < 0f)
					{
						Main.liquidAlpha[6] = 0f;
					}
					Main.liquidAlpha[7] -= 0.2f;
					if (Main.liquidAlpha[7] < 0f)
					{
						Main.liquidAlpha[7] = 0f;
					}
					Main.liquidAlpha[8] -= 0.2f;
					if (Main.liquidAlpha[8] < 0f)
					{
						Main.liquidAlpha[8] = 0f;
					}
					Main.liquidAlpha[9] -= 0.2f;
					if (Main.liquidAlpha[9] < 0f)
					{
						Main.liquidAlpha[9] = 0f;
					}
					Main.liquidAlpha[10] -= 0.2f;
					if (Main.liquidAlpha[10] < 0f)
					{
						Main.liquidAlpha[10] = 0f;
					}
					Main.liquidAlpha[5] += 0.2f;
					if (Main.liquidAlpha[5] > 1f)
					{
						Main.liquidAlpha[5] = 1f;
					}
				}
				if (Main.waterStyle == 6)
				{
					Main.liquidAlpha[0] -= 0.2f;
					if (Main.liquidAlpha[0] < 0f)
					{
						Main.liquidAlpha[0] = 0f;
					}
					Main.liquidAlpha[2] -= 0.2f;
					if (Main.liquidAlpha[2] < 0f)
					{
						Main.liquidAlpha[2] = 0f;
					}
					Main.liquidAlpha[3] -= 0.2f;
					if (Main.liquidAlpha[3] < 0f)
					{
						Main.liquidAlpha[3] = 0f;
					}
					Main.liquidAlpha[4] -= 0.2f;
					if (Main.liquidAlpha[4] < 0f)
					{
						Main.liquidAlpha[4] = 0f;
					}
					Main.liquidAlpha[5] -= 0.2f;
					if (Main.liquidAlpha[5] < 0f)
					{
						Main.liquidAlpha[5] = 0f;
					}
					Main.liquidAlpha[7] -= 0.2f;
					if (Main.liquidAlpha[7] < 0f)
					{
						Main.liquidAlpha[7] = 0f;
					}
					Main.liquidAlpha[8] -= 0.2f;
					if (Main.liquidAlpha[8] < 0f)
					{
						Main.liquidAlpha[8] = 0f;
					}
					Main.liquidAlpha[9] -= 0.2f;
					if (Main.liquidAlpha[9] < 0f)
					{
						Main.liquidAlpha[9] = 0f;
					}
					Main.liquidAlpha[10] -= 0.2f;
					if (Main.liquidAlpha[10] < 0f)
					{
						Main.liquidAlpha[10] = 0f;
					}
					Main.liquidAlpha[6] += 0.2f;
					if (Main.liquidAlpha[6] > 1f)
					{
						Main.liquidAlpha[6] = 1f;
					}
				}
				if (Main.waterStyle == 7)
				{
					Main.liquidAlpha[0] -= 0.2f;
					if (Main.liquidAlpha[0] < 0f)
					{
						Main.liquidAlpha[0] = 0f;
					}
					Main.liquidAlpha[2] -= 0.2f;
					if (Main.liquidAlpha[2] < 0f)
					{
						Main.liquidAlpha[2] = 0f;
					}
					Main.liquidAlpha[3] -= 0.2f;
					if (Main.liquidAlpha[3] < 0f)
					{
						Main.liquidAlpha[3] = 0f;
					}
					Main.liquidAlpha[4] -= 0.2f;
					if (Main.liquidAlpha[4] < 0f)
					{
						Main.liquidAlpha[4] = 0f;
					}
					Main.liquidAlpha[5] -= 0.2f;
					if (Main.liquidAlpha[5] < 0f)
					{
						Main.liquidAlpha[5] = 0f;
					}
					Main.liquidAlpha[6] -= 0.2f;
					if (Main.liquidAlpha[6] < 0f)
					{
						Main.liquidAlpha[6] = 0f;
					}
					Main.liquidAlpha[8] -= 0.2f;
					if (Main.liquidAlpha[8] < 0f)
					{
						Main.liquidAlpha[8] = 0f;
					}
					Main.liquidAlpha[9] -= 0.2f;
					if (Main.liquidAlpha[9] < 0f)
					{
						Main.liquidAlpha[9] = 0f;
					}
					Main.liquidAlpha[10] -= 0.2f;
					if (Main.liquidAlpha[10] < 0f)
					{
						Main.liquidAlpha[10] = 0f;
					}
					Main.liquidAlpha[7] += 0.2f;
					if (Main.liquidAlpha[7] > 1f)
					{
						Main.liquidAlpha[7] = 1f;
					}
				}
				if (Main.waterStyle == 8)
				{
					Main.liquidAlpha[0] -= 0.2f;
					if (Main.liquidAlpha[0] < 0f)
					{
						Main.liquidAlpha[0] = 0f;
					}
					Main.liquidAlpha[2] -= 0.2f;
					if (Main.liquidAlpha[2] < 0f)
					{
						Main.liquidAlpha[2] = 0f;
					}
					Main.liquidAlpha[3] -= 0.2f;
					if (Main.liquidAlpha[3] < 0f)
					{
						Main.liquidAlpha[3] = 0f;
					}
					Main.liquidAlpha[4] -= 0.2f;
					if (Main.liquidAlpha[4] < 0f)
					{
						Main.liquidAlpha[4] = 0f;
					}
					Main.liquidAlpha[5] -= 0.2f;
					if (Main.liquidAlpha[5] < 0f)
					{
						Main.liquidAlpha[5] = 0f;
					}
					Main.liquidAlpha[6] -= 0.2f;
					if (Main.liquidAlpha[6] < 0f)
					{
						Main.liquidAlpha[6] = 0f;
					}
					Main.liquidAlpha[7] -= 0.2f;
					if (Main.liquidAlpha[7] < 0f)
					{
						Main.liquidAlpha[7] = 0f;
					}
					Main.liquidAlpha[9] -= 0.2f;
					if (Main.liquidAlpha[9] < 0f)
					{
						Main.liquidAlpha[9] = 0f;
					}
					Main.liquidAlpha[10] -= 0.2f;
					if (Main.liquidAlpha[10] < 0f)
					{
						Main.liquidAlpha[10] = 0f;
					}
					Main.liquidAlpha[8] += 0.2f;
					if (Main.liquidAlpha[8] > 1f)
					{
						Main.liquidAlpha[8] = 1f;
					}
				}
				if (Main.waterStyle == 9)
				{
					Main.liquidAlpha[0] -= 0.2f;
					if (Main.liquidAlpha[0] < 0f)
					{
						Main.liquidAlpha[0] = 0f;
					}
					Main.liquidAlpha[2] -= 0.2f;
					if (Main.liquidAlpha[2] < 0f)
					{
						Main.liquidAlpha[2] = 0f;
					}
					Main.liquidAlpha[3] -= 0.2f;
					if (Main.liquidAlpha[3] < 0f)
					{
						Main.liquidAlpha[3] = 0f;
					}
					Main.liquidAlpha[4] -= 0.2f;
					if (Main.liquidAlpha[4] < 0f)
					{
						Main.liquidAlpha[4] = 0f;
					}
					Main.liquidAlpha[5] -= 0.2f;
					if (Main.liquidAlpha[5] < 0f)
					{
						Main.liquidAlpha[5] = 0f;
					}
					Main.liquidAlpha[6] -= 0.2f;
					if (Main.liquidAlpha[6] < 0f)
					{
						Main.liquidAlpha[6] = 0f;
					}
					Main.liquidAlpha[7] -= 0.2f;
					if (Main.liquidAlpha[7] < 0f)
					{
						Main.liquidAlpha[7] = 0f;
					}
					Main.liquidAlpha[8] -= 0.2f;
					if (Main.liquidAlpha[8] < 0f)
					{
						Main.liquidAlpha[8] = 0f;
					}
					Main.liquidAlpha[10] -= 0.2f;
					if (Main.liquidAlpha[10] < 0f)
					{
						Main.liquidAlpha[10] = 0f;
					}
					Main.liquidAlpha[9] += 0.2f;
					if (Main.liquidAlpha[9] > 1f)
					{
						Main.liquidAlpha[9] = 1f;
					}
				}
				if (Main.waterStyle == 10)
				{
					Main.liquidAlpha[0] -= 0.2f;
					if (Main.liquidAlpha[0] < 0f)
					{
						Main.liquidAlpha[0] = 0f;
					}
					Main.liquidAlpha[2] -= 0.2f;
					if (Main.liquidAlpha[2] < 0f)
					{
						Main.liquidAlpha[2] = 0f;
					}
					Main.liquidAlpha[3] -= 0.2f;
					if (Main.liquidAlpha[3] < 0f)
					{
						Main.liquidAlpha[3] = 0f;
					}
					Main.liquidAlpha[4] -= 0.2f;
					if (Main.liquidAlpha[4] < 0f)
					{
						Main.liquidAlpha[4] = 0f;
					}
					Main.liquidAlpha[5] -= 0.2f;
					if (Main.liquidAlpha[5] < 0f)
					{
						Main.liquidAlpha[5] = 0f;
					}
					Main.liquidAlpha[6] -= 0.2f;
					if (Main.liquidAlpha[6] < 0f)
					{
						Main.liquidAlpha[6] = 0f;
					}
					Main.liquidAlpha[7] -= 0.2f;
					if (Main.liquidAlpha[7] < 0f)
					{
						Main.liquidAlpha[7] = 0f;
					}
					Main.liquidAlpha[8] -= 0.2f;
					if (Main.liquidAlpha[8] < 0f)
					{
						Main.liquidAlpha[8] = 0f;
					}
					Main.liquidAlpha[9] -= 0.2f;
					if (Main.liquidAlpha[9] < 0f)
					{
						Main.liquidAlpha[9] = 0f;
					}
					Main.liquidAlpha[10] += 0.2f;
					if (Main.liquidAlpha[10] > 1f)
					{
						Main.liquidAlpha[10] = 1f;
					}
				}
			}
			Main.drewLava = false;
			if (!Main.drawToScreen)
			{
				if ((!bg ^ styleOverride != -1) && allowUpdate)
				{
					Vector2 value = Main.drawToScreen ? Vector2.Zero : new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
					int num = (int)((Main.screenPosition.X - value.X) / 16f - 1f);
					int num2 = (int)((Main.screenPosition.X + (float)Main.screenWidth + value.X) / 16f) + 2;
					int num3 = (int)((Main.screenPosition.Y - value.Y) / 16f - 1f);
					int num4 = (int)((Main.screenPosition.Y + (float)Main.screenHeight + value.Y) / 16f) + 5;
					value -= Main.screenPosition;
					num = Math.Max(num, 5) - 2;
					num3 = Math.Max(num3, 5);
					num2 = Math.Min(num2, Main.maxTilesX - 5) + 2;
					num4 = Math.Min(num4, Main.maxTilesY - 5) + 4;
					Microsoft.Xna.Framework.Rectangle drawArea = new Microsoft.Xna.Framework.Rectangle(num, num3, num2 - num, num4 - num3);
					LiquidRenderer.Instance.PrepareDraw(drawArea);
				}
				if (styleOverride != -1)
				{
					this.DrawWater(bg, styleOverride, 1f);
					return;
				}
				for (int i = 0; i < 11; i++)
				{
					if (i != 1 && Main.liquidAlpha[i] > 0f)
					{
						this.DrawWater(bg, i, Main.liquidAlpha[i]);
					}
				}
				return;
			}
			else
			{
				if (styleOverride != -1)
				{
					this.DrawWater(bg, styleOverride, 1f);
					return;
				}
				if (Main.liquidAlpha[0] > 0f)
				{
					if (bg)
					{
						this.DrawWater(bg, 0, 1f);
					}
					else
					{
						this.DrawWater(bg, 0, Main.liquidAlpha[0]);
					}
				}
				if (Main.liquidAlpha[2] > 0f)
				{
					if (bg)
					{
						if (Main.waterStyle < 2)
						{
							this.DrawWater(bg, 2, Main.liquidAlpha[2]);
						}
						else
						{
							this.DrawWater(bg, 2, 1f);
						}
					}
					else
					{
						this.DrawWater(bg, 2, Main.liquidAlpha[2]);
					}
				}
				if (Main.liquidAlpha[3] > 0f)
				{
					if (bg)
					{
						if (Main.waterStyle < 3)
						{
							this.DrawWater(bg, 3, Main.liquidAlpha[3]);
						}
						else
						{
							this.DrawWater(bg, 3, 1f);
						}
					}
					else
					{
						this.DrawWater(bg, 3, Main.liquidAlpha[3]);
					}
				}
				if (Main.liquidAlpha[4] > 0f)
				{
					if (bg)
					{
						if (Main.waterStyle < 4)
						{
							this.DrawWater(bg, 4, Main.liquidAlpha[4]);
						}
						else
						{
							this.DrawWater(bg, 4, 1f);
						}
					}
					else
					{
						this.DrawWater(bg, 4, Main.liquidAlpha[4]);
					}
				}
				if (Main.liquidAlpha[5] > 0f)
				{
					if (bg)
					{
						if (Main.waterStyle < 5)
						{
							this.DrawWater(bg, 5, Main.liquidAlpha[5]);
						}
						else
						{
							this.DrawWater(bg, 5, 1f);
						}
					}
					else
					{
						this.DrawWater(bg, 5, Main.liquidAlpha[5]);
					}
				}
				if (Main.liquidAlpha[6] > 0f)
				{
					if (bg)
					{
						if (Main.waterStyle < 6)
						{
							this.DrawWater(bg, 6, Main.liquidAlpha[6]);
						}
						else
						{
							this.DrawWater(bg, 6, 1f);
						}
					}
					else
					{
						this.DrawWater(bg, 6, Main.liquidAlpha[6]);
					}
				}
				if (Main.liquidAlpha[7] > 0f)
				{
					if (bg)
					{
						if (Main.waterStyle < 7)
						{
							this.DrawWater(bg, 7, Main.liquidAlpha[7]);
						}
						else
						{
							this.DrawWater(bg, 7, 1f);
						}
					}
					else
					{
						this.DrawWater(bg, 7, Main.liquidAlpha[7]);
					}
				}
				if (Main.liquidAlpha[8] > 0f)
				{
					if (bg)
					{
						if (Main.waterStyle < 8)
						{
							this.DrawWater(bg, 8, Main.liquidAlpha[8]);
						}
						else
						{
							this.DrawWater(bg, 8, 1f);
						}
					}
					else
					{
						this.DrawWater(bg, 8, Main.liquidAlpha[8]);
					}
				}
				if (Main.liquidAlpha[9] > 0f)
				{
					if (bg)
					{
						if (Main.waterStyle < 9)
						{
							this.DrawWater(bg, 9, Main.liquidAlpha[9]);
						}
						else
						{
							this.DrawWater(bg, 9, 1f);
						}
					}
					else
					{
						this.DrawWater(bg, 9, Main.liquidAlpha[9]);
					}
				}
				if (Main.liquidAlpha[10] > 0f)
				{
					if (bg)
					{
						if (Main.waterStyle < 10)
						{
							this.DrawWater(bg, 10, Main.liquidAlpha[10]);
							return;
						}
						this.DrawWater(bg, 10, 1f);
						return;
					}
					else
					{
						this.DrawWater(bg, 10, Main.liquidAlpha[10]);
					}
				}
				return;
			}
		}

		protected void DrawWater(bool bg = false, int Style = 0, float Alpha = 1f)
		{
			if (Main.drawToScreen)
			{
				this.oldDrawWater(bg, Style, Alpha);
				return;
			}
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			Vector2 drawOffset = (Main.drawToScreen ? Vector2.Zero : new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange)) - Main.screenPosition;
			LiquidRenderer.Instance.Draw(Main.spriteBatch, drawOffset, Style, Alpha, bg);
			if (!bg)
			{
				TimeLogger.DrawTime(4, stopwatch.Elapsed.TotalMilliseconds);
			}
		}

		public void oldDrawWater(bool bg = false, int Style = 0, float Alpha = 1f)
		{
			float num = 0f;
			float num2 = 99999f;
			float num3 = 99999f;
			int num4 = -1;
			int num5 = -1;
			Vector2 zero = new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
			if (Main.drawToScreen)
			{
				zero = Vector2.Zero;
			}
			int num6 = (int)(255f * (1f - Main.gfxQuality) + 40f * Main.gfxQuality);
			float arg_5D_0 = Main.gfxQuality;
			float arg_63_0 = Main.gfxQuality;
			int num7 = (int)((Main.screenPosition.X - zero.X) / 16f - 1f);
			int num8 = (int)((Main.screenPosition.X + (float)Main.screenWidth + zero.X) / 16f) + 2;
			int num9 = (int)((Main.screenPosition.Y - zero.Y) / 16f - 1f);
			int num10 = (int)((Main.screenPosition.Y + (float)Main.screenHeight + zero.Y) / 16f) + 5;
			if (num7 < 5)
			{
				num7 = 5;
			}
			if (num8 > Main.maxTilesX - 5)
			{
				num8 = Main.maxTilesX - 5;
			}
			if (num9 < 5)
			{
				num9 = 5;
			}
			if (num10 > Main.maxTilesY - 5)
			{
				num10 = Main.maxTilesY - 5;
			}
			for (int i = num9; i < num10 + 4; i++)
			{
				for (int j = num7 - 2; j < num8 + 2; j++)
				{
					if (Main.tile[j, i] == null)
					{
						Main.tile[j, i] = new Tile();
					}
					if (Main.tile[j, i].liquid > 0 && (!Main.tile[j, i].nactive() || !Main.tileSolid[(int)Main.tile[j, i].type] || Main.tileSolidTop[(int)Main.tile[j, i].type]) && (Lighting.Brightness(j, i) > 0f || bg))
					{
						Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
						float num11 = (float)(256 - (int)Main.tile[j, i].liquid);
						num11 /= 32f;
						int num12 = 0;
						if (Main.tile[j, i].lava())
						{
							if (Main.drewLava)
							{
								goto IL_E80;
							}
							float num13 = Math.Abs((float)(j * 16 + 8) - (Main.screenPosition.X + (float)(Main.screenWidth / 2)));
							float num14 = Math.Abs((float)(i * 16 + 8) - (Main.screenPosition.Y + (float)(Main.screenHeight / 2)));
							if (num13 < (float)(Main.screenWidth * 2) && num14 < (float)(Main.screenHeight * 2))
							{
								float num15 = (float)Math.Sqrt((double)(num13 * num13 + num14 * num14));
								float num16 = 1f - num15 / ((float)Main.screenWidth * 0.75f);
								if (num16 > 0f)
								{
									num += num16;
								}
							}
							if (num13 < num2)
							{
								num2 = num13;
								num4 = j * 16 + 8;
							}
							if (num14 < num3)
							{
								num3 = num13;
								num5 = i * 16 + 8;
							}
							num12 = 1;
						}
						else if (Main.tile[j, i].honey())
						{
							num12 = 11;
						}
						if (num12 == 0)
						{
							num12 = Style;
						}
						if ((num12 != 1 && num12 != 11) || !Main.drewLava)
						{
							float num17 = 0.5f;
							if (bg)
							{
								num17 = 1f;
							}
							if (num12 != 1 && num12 != 11)
							{
								num17 *= Alpha;
							}
							Vector2 value = new Vector2((float)(j * 16), (float)(i * 16 + (int)num11 * 2));
							Microsoft.Xna.Framework.Rectangle value2 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16 - (int)num11 * 2);
							if (Main.tile[j, i + 1].liquid < 245 && (!Main.tile[j, i + 1].nactive() || !Main.tileSolid[(int)Main.tile[j, i + 1].type] || Main.tileSolidTop[(int)Main.tile[j, i + 1].type]))
							{
								float num18 = (float)(256 - (int)Main.tile[j, i + 1].liquid);
								num18 /= 32f;
								num17 = 0.5f * (8f - num11) / 4f;
								if ((double)num17 > 0.55)
								{
									num17 = 0.55f;
								}
								if ((double)num17 < 0.35)
								{
									num17 = 0.35f;
								}
								float num19 = num11 / 2f;
								if (Main.tile[j, i + 1].liquid < 200)
								{
									if (bg)
									{
										goto IL_E80;
									}
									if (Main.tile[j, i - 1].liquid > 0 && Main.tile[j, i - 1].liquid > 0)
									{
										value2 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 16);
										num17 = 0.5f;
									}
									else if (Main.tile[j, i - 1].liquid > 0)
									{
										value = new Vector2((float)(j * 16), (float)(i * 16 + 4));
										value2 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 12);
										num17 = 0.5f;
									}
									else if (Main.tile[j, i + 1].liquid > 0)
									{
										value = new Vector2((float)(j * 16), (float)(i * 16 + (int)num11 * 2 + (int)num18 * 2));
										value2 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 16 - (int)num11 * 2);
									}
									else
									{
										value = new Vector2((float)(j * 16 + (int)num19), (float)(i * 16 + (int)num19 * 2 + (int)num18 * 2));
										value2 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16 - (int)num19 * 2, 16 - (int)num19 * 2);
									}
								}
								else
								{
									num17 = 0.5f;
									value2 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 16 - (int)num11 * 2 + (int)num18 * 2);
								}
							}
							else if (Main.tile[j, i - 1].liquid > 32)
							{
								value2 = new Microsoft.Xna.Framework.Rectangle(0, 4, value2.Width, value2.Height);
							}
							else if (num11 < 1f && Main.tile[j, i - 1].nactive() && Main.tileSolid[(int)Main.tile[j, i - 1].type] && !Main.tileSolidTop[(int)Main.tile[j, i - 1].type])
							{
								value = new Vector2((float)(j * 16), (float)(i * 16));
								value2 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 16);
							}
							else
							{
								bool flag = true;
								int num20 = i + 1;
								while (num20 < i + 6 && (!Main.tile[j, num20].nactive() || !Main.tileSolid[(int)Main.tile[j, num20].type] || Main.tileSolidTop[(int)Main.tile[j, num20].type]))
								{
									if (Main.tile[j, num20].liquid < 200)
									{
										flag = false;
										break;
									}
									num20++;
								}
								if (!flag)
								{
									num17 = 0.5f;
									value2 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 16);
								}
								else if (Main.tile[j, i - 1].liquid > 0)
								{
									value2 = new Microsoft.Xna.Framework.Rectangle(0, 2, value2.Width, value2.Height);
								}
							}
							if ((color.R > 20 || color.B > 20 || color.G > 20) && value2.Y < 4)
							{
								int num21 = (int)color.R;
								if ((int)color.G > num21)
								{
									num21 = (int)color.G;
								}
								if ((int)color.B > num21)
								{
									num21 = (int)color.B;
								}
								num21 /= 30;
								if (Main.rand.Next(20000) < num21)
								{
									Microsoft.Xna.Framework.Color newColor = new Microsoft.Xna.Framework.Color(255, 255, 255);
									if (Main.tile[j, i].honey())
									{
										newColor = new Microsoft.Xna.Framework.Color(255, 255, 50);
									}
									int num22 = Dust.NewDust(new Vector2((float)(j * 16), value.Y - 2f), 16, 8, 43, 0f, 0f, 254, newColor, 0.75f);
									Main.dust[num22].velocity *= 0f;
								}
							}
							if (Main.tile[j, i].honey())
							{
								num17 *= 1.6f;
								if (num17 > 1f)
								{
									num17 = 1f;
								}
							}
							if (Main.tile[j, i].lava())
							{
								num17 *= 1.8f;
								if (num17 > 1f)
								{
									num17 = 1f;
								}
								if (base.IsActive && !Main.gamePaused && Dust.lavaBubbles < 200)
								{
									if (Main.tile[j, i].liquid > 200 && Main.rand.Next(700) == 0)
									{
										Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 35, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
									}
									if (value2.Y == 0 && Main.rand.Next(350) == 0)
									{
										int num23 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16) + num11 * 2f - 8f), 16, 8, 35, 0f, 0f, 50, default(Microsoft.Xna.Framework.Color), 1.5f);
										Main.dust[num23].velocity *= 0.8f;
										Dust expr_9CA_cp_0 = Main.dust[num23];
										expr_9CA_cp_0.velocity.X = expr_9CA_cp_0.velocity.X * 2f;
										Dust expr_9E8_cp_0 = Main.dust[num23];
										expr_9E8_cp_0.velocity.Y = expr_9E8_cp_0.velocity.Y - (float)Main.rand.Next(1, 7) * 0.1f;
										if (Main.rand.Next(10) == 0)
										{
											Dust expr_A22_cp_0 = Main.dust[num23];
											expr_A22_cp_0.velocity.Y = expr_A22_cp_0.velocity.Y * (float)Main.rand.Next(2, 5);
										}
										Main.dust[num23].noGravity = true;
									}
								}
							}
							float num24 = (float)color.R * num17;
							float num25 = (float)color.G * num17;
							float num26 = (float)color.B * num17;
							float num27 = (float)color.A * num17;
							color = new Microsoft.Xna.Framework.Color((int)((byte)num24), (int)((byte)num25), (int)((byte)num26), (int)((byte)num27));
							if (Lighting.lightMode < 2 && !bg)
							{
								Microsoft.Xna.Framework.Color color2 = color;
								if (num12 != 1 && ((double)color2.R > (double)num6 * 0.6 || (double)color2.G > (double)num6 * 0.65 || (double)color2.B > (double)num6 * 0.7))
								{
									for (int k = 0; k < 4; k++)
									{
										int num28 = 0;
										int num29 = 0;
										int width = 8;
										int height = 8;
										Microsoft.Xna.Framework.Color color3 = color2;
										Microsoft.Xna.Framework.Color color4 = Lighting.GetColor(j, i);
										if (k == 0)
										{
											color4 = Lighting.GetColor(j - 1, i - 1);
											if (value2.Height < 8)
											{
												height = value2.Height;
											}
										}
										if (k == 1)
										{
											color4 = Lighting.GetColor(j + 1, i - 1);
											num28 = 8;
											if (value2.Height < 8)
											{
												height = value2.Height;
											}
										}
										if (k == 2)
										{
											color4 = Lighting.GetColor(j - 1, i + 1);
											num29 = 8;
											height = 8 - (16 - value2.Height);
										}
										if (k == 3)
										{
											color4 = Lighting.GetColor(j + 1, i + 1);
											num28 = 8;
											num29 = 8;
											height = 8 - (16 - value2.Height);
										}
										num24 = (float)color4.R * num17;
										num25 = (float)color4.G * num17;
										num26 = (float)color4.B * num17;
										num27 = (float)color4.A * num17;
										color4 = new Microsoft.Xna.Framework.Color((int)((byte)num24), (int)((byte)num25), (int)((byte)num26), (int)((byte)num27));
										color3.R = (byte)((color2.R * 3 + color4.R * 2) / 5);
										color3.G = (byte)((color2.G * 3 + color4.G * 2) / 5);
										color3.B = (byte)((color2.B * 3 + color4.B * 2) / 5);
										color3.A = (byte)((color2.A * 3 + color4.A * 2) / 5);
										Main.spriteBatch.Draw(Main.liquidTexture[num12], value - Main.screenPosition + new Vector2((float)num28, (float)num29) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(value2.X + num28, value2.Y + num29, width, height)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
									}
								}
								else
								{
									Main.spriteBatch.Draw(Main.liquidTexture[num12], value - Main.screenPosition + zero, new Microsoft.Xna.Framework.Rectangle?(value2), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
								}
							}
							else
							{
								if (value2.Y < 4)
								{
									value2.X += (int)(Main.wFrame * 18f);
								}
								Main.spriteBatch.Draw(Main.liquidTexture[num12], value - Main.screenPosition + zero, new Microsoft.Xna.Framework.Rectangle?(value2), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
							if (Main.tile[j, i + 1].halfBrick())
							{
								color = Lighting.GetColor(j, i + 1);
								num24 = (float)color.R * num17;
								num25 = (float)color.G * num17;
								num26 = (float)color.B * num17;
								num27 = (float)color.A * num17;
								color = new Microsoft.Xna.Framework.Color((int)((byte)num24), (int)((byte)num25), (int)((byte)num26), (int)((byte)num27));
								value = new Vector2((float)(j * 16), (float)(i * 16 + 16));
								Main.spriteBatch.Draw(Main.liquidTexture[num12], value - Main.screenPosition + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 8)), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
						}
					}
					IL_E80:;
				}
			}
			if (!Main.drewLava)
			{
				Main.ambientLavaX = (float)num4;
				Main.ambientLavaY = (float)num5;
				Main.ambientLavaStrength = num;
			}
			Main.drewLava = true;
		}

		protected bool FullTile(int x, int y)
		{
			if (Main.tile[x - 1, y] == null || Main.tile[x - 1, y].blockType() != 0 || Main.tile[x + 1, y] == null || Main.tile[x + 1, y].blockType() != 0)
			{
				return false;
			}
			Tile tile = Main.tile[x, y];
			if (tile == null)
			{
				return false;
			}
			if (tile.active())
			{
				if ((int)tile.type < TileID.Sets.DrawsWalls.Length && TileID.Sets.DrawsWalls[(int)tile.type])
				{
					return false;
				}
				if (Main.tileSolid[(int)tile.type] && !Main.tileSolidTop[(int)tile.type])
				{
					int frameX = (int)tile.frameX;
					int frameY = (int)tile.frameY;
					if (Main.tileLargeFrames[(int)tile.type] == 1)
					{
						if (frameY == 18 || frameY == 108)
						{
							if (frameX >= 18 && frameX <= 54)
							{
								return true;
							}
							if (frameX >= 108 && frameX <= 144)
							{
								return true;
							}
						}
					}
					else if (frameY == 18)
					{
						if (frameX >= 18 && frameX <= 54)
						{
							return true;
						}
						if (frameX >= 108 && frameX <= 144)
						{
							return true;
						}
					}
					else if (frameY >= 90 && frameY <= 196)
					{
						if (frameX <= 70)
						{
							return true;
						}
						if (frameX >= 144 && frameX <= 232)
						{
							return true;
						}
					}
				}
			}
			return false;
		}

		protected void DrawBlack(bool force = false)
		{
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			Vector2 value = Main.drawToScreen ? Vector2.Zero : new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
			int num = (int)((Main.tileColor.R + Main.tileColor.G + Main.tileColor.B) / 3);
			float num2 = (float)((double)num * 0.4) / 255f;
			if (Lighting.lightMode == 2)
			{
				num2 = (float)(Main.tileColor.R - 55) / 255f;
				if (num2 < 0f)
				{
					num2 = 0f;
				}
			}
			else if (Lighting.lightMode == 3)
			{
				num2 = (float)(num - 55) / 255f;
				if (num2 < 0f)
				{
					num2 = 0f;
				}
			}
			int num3 = Main.offScreenRange / 16;
			int num4 = (int)((Main.screenPosition.X - value.X) / 16f - 1f) - num3;
			int num5 = (int)((Main.screenPosition.X + (float)Main.screenWidth + value.X) / 16f) + 2 + num3;
			int num6 = (int)((Main.screenPosition.Y - value.Y) / 16f - 1f) - num3;
			int num7 = (int)((Main.screenPosition.Y + (float)Main.screenHeight + value.Y) / 16f) + 5 + num3;
			if (num4 < 0)
			{
				num4 = num3;
			}
			if (num5 > Main.maxTilesX)
			{
				num5 = Main.maxTilesX - num3;
			}
			if (num6 < 0)
			{
				num6 = num3;
			}
			if (num7 > Main.maxTilesY)
			{
				num7 = Main.maxTilesY - num3;
			}
			if (!force)
			{
				if (num6 < Main.maxTilesY / 2)
				{
					num7 = Math.Min(num7, (int)Main.worldSurface + 1);
					num6 = Math.Min(num6, (int)Main.worldSurface + 1);
				}
				else
				{
					num7 = Math.Max(num7, Main.maxTilesY - 200);
					num6 = Math.Max(num6, Main.maxTilesY - 200);
				}
			}
			for (int i = num6; i < num7; i++)
			{
				bool flag = i >= Main.maxTilesY - 200;
				if (flag)
				{
					num2 = 0.2f;
				}
				for (int j = num4; j < num5; j++)
				{
					int num8 = j;
					while (j < num5)
					{
						if (Main.tile[j, i] == null)
						{
							Main.tile[j, i] = new Tile();
						}
						Tile tile = Main.tile[j, i];
						float num9 = Lighting.Brightness(j, i);
						num9 = (float)Math.Floor((double)(num9 * 255f)) / 255f;
						byte b = tile.liquid;
						if (j == 3169)
						{
						}
						bool flag2 = num9 <= num2 && ((!flag && b < 250) || WorldGen.SolidTile(tile) || (b >= 200 && num9 == 0f));
						flag2 = (flag2 && (!WallID.Sets.Transparent[(int)tile.wall] || (Main.tile[j, i].active() && Main.tileBlockLight[(int)tile.type])));
						flag2 = (flag2 && (Main.drawToScreen || !LiquidRenderer.Instance.HasFullWater(j, i) || tile.wall != 0 || tile.halfBrick() || (double)i <= Main.worldSurface));
						if (!flag2)
						{
							break;
						}
						j++;
					}
					if (j - num8 > 0)
					{
						Main.spriteBatch.Draw(Main.blackTileTexture, new Vector2((float)(num8 << 4), (float)(i << 4)) - Main.screenPosition + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, j - num8 << 4, 16)), Microsoft.Xna.Framework.Color.Black);
					}
				}
			}
			TimeLogger.DrawTime(5, stopwatch.Elapsed.TotalMilliseconds);
		}

		protected void RenderBlack()
		{
			if (Main.drawToScreen)
			{
				return;
			}
			base.GraphicsDevice.SetRenderTarget(this.blackTarget);
			base.GraphicsDevice.DepthStencilState = new DepthStencilState
			{
				DepthBufferEnable = true
			};
			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
			Main.spriteBatch.Begin();
			this.DrawBlack(false);
			TimeLogger.DetailedDrawReset();
			Main.spriteBatch.End();
			TimeLogger.DetailedDrawTime(30);
			base.GraphicsDevice.SetRenderTarget(null);
		}

		protected void DrawWalls()
		{
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			int num = (int)(120f * (1f - Main.gfxQuality) + 40f * Main.gfxQuality);
			Vector2 zero = new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
			if (Main.drawToScreen)
			{
				zero = Vector2.Zero;
			}
			int num2 = (int)((Main.screenPosition.X - zero.X) / 16f - 1f);
			int num3 = (int)((Main.screenPosition.X + (float)Main.screenWidth + zero.X) / 16f) + 2;
			int num4 = (int)((Main.screenPosition.Y - zero.Y) / 16f - 1f);
			int num5 = (int)((Main.screenPosition.Y + (float)Main.screenHeight + zero.Y) / 16f) + 5;
			int num6 = Main.offScreenRange / 16;
			int num7 = Main.offScreenRange / 16;
			if (num2 - num6 < 0)
			{
				num2 = num6;
			}
			if (num3 + num6 > Main.maxTilesX)
			{
				num3 = Main.maxTilesX - num6;
			}
			if (num4 - num7 < 0)
			{
				num4 = num7;
			}
			if (num5 + num7 > Main.maxTilesY)
			{
				num5 = Main.maxTilesY - num7;
			}
			int num8 = Main.maxTilesY - 200;
			for (int i = num4 - num7; i < num5 + num7; i++)
			{
				for (int j = num2 - num6; j < num3 + num6; j++)
				{
					Tile tile = Main.tile[j, i];
					if (tile == null)
					{
						tile = new Tile();
						Main.tile[j, i] = tile;
					}
					byte wall = tile.wall;
					if (wall > 0 && !this.FullTile(j, i))
					{
						Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
						if (color.R != 0 || color.G != 0 || color.B != 0 || i >= num8)
						{
							this.LoadWall((int)wall);
							int num9 = (int)(Main.wallFrame[(int)wall] * 180);
							if (Lighting.lightMode < 2 && !Main.wallLight[(int)wall] && (tile.wall < 88 || tile.wall > 93) && !WorldGen.SolidTile(tile))
							{
								Texture2D texture;
								if (Main.canDrawColorWall(j, i))
								{
									texture = Main.wallAltTexture[(int)tile.wall, (int)tile.wallColor()];
								}
								else
								{
									texture = Main.wallTexture[(int)tile.wall];
								}
								VertexColors colors;
								if (tile.wall == 44)
								{
									Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color((int)((byte)Main.DiscoR), (int)((byte)Main.DiscoG), (int)((byte)Main.DiscoB));
									colors.BottomLeftColor = color2;
									colors.BottomRightColor = color2;
									colors.TopLeftColor = color2;
									colors.TopRightColor = color2;
								}
								else
								{
									Lighting.GetColor4Slice_New(j, i, out colors, 1f);
								}
								Main.tileBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X - 8), (float)(i * 16 - (int)Main.screenPosition.Y - 8)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(tile.wallFrameX(), tile.wallFrameY() + num9, 32, 32)), colors, Vector2.Zero, 1f, SpriteEffects.None);
							}
							else if (tile.wall == 44)
							{
								Microsoft.Xna.Framework.Color color3 = default(Microsoft.Xna.Framework.Color);
								color3.R = (byte)Main.DiscoR;
								color3.G = (byte)Main.DiscoG;
								color3.B = (byte)Main.DiscoB;
								color3.A = 255;
								Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle(tile.wallFrameX(), tile.wallFrameY() + num9, 32, 32);
								Main.spriteBatch.Draw(Main.wallTexture[(int)tile.wall], new Vector2((float)(j * 16 - (int)Main.screenPosition.X - 8), (float)(i * 16 - (int)Main.screenPosition.Y - 8)) + zero, new Microsoft.Xna.Framework.Rectangle?(value), color3, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
							}
							else
							{
								Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle(tile.wallFrameX(), tile.wallFrameY() + num9, 32, 32);
								if (Main.canDrawColorWall(j, i))
								{
									Main.spriteBatch.Draw(Main.wallAltTexture[(int)tile.wall, (int)tile.wallColor()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X - 8), (float)(i * 16 - (int)Main.screenPosition.Y - 8)) + zero, new Microsoft.Xna.Framework.Rectangle?(value), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
								}
								else
								{
									Main.spriteBatch.Draw(Main.wallTexture[(int)tile.wall], new Vector2((float)(j * 16 - (int)Main.screenPosition.X - 8), (float)(i * 16 - (int)Main.screenPosition.Y - 8)) + zero, new Microsoft.Xna.Framework.Rectangle?(value), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
								}
							}
							if ((double)color.R > (double)num * 0.4 || (double)color.G > (double)num * 0.35 || (double)color.B > (double)num * 0.3)
							{
								bool flag = Main.tile[j - 1, i].wall > 0 && Main.wallBlend[(int)Main.tile[j - 1, i].wall] != Main.wallBlend[(int)tile.wall];
								bool flag2 = Main.tile[j + 1, i].wall > 0 && Main.wallBlend[(int)Main.tile[j + 1, i].wall] != Main.wallBlend[(int)tile.wall];
								bool flag3 = Main.tile[j, i - 1].wall > 0 && Main.wallBlend[(int)Main.tile[j, i - 1].wall] != Main.wallBlend[(int)tile.wall];
								bool flag4 = Main.tile[j, i + 1].wall > 0 && Main.wallBlend[(int)Main.tile[j, i + 1].wall] != Main.wallBlend[(int)tile.wall];
								if (flag)
								{
									Main.spriteBatch.Draw(Main.wallOutlineTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 2, 16)), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
								}
								if (flag2)
								{
									Main.spriteBatch.Draw(Main.wallOutlineTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X + 14), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(14, 0, 2, 16)), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
								}
								if (flag3)
								{
									Main.spriteBatch.Draw(Main.wallOutlineTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 2)), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
								}
								if (flag4)
								{
									Main.spriteBatch.Draw(Main.wallOutlineTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y + 14)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 14, 16, 2)), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
								}
							}
						}
					}
				}
			}
			this.DrawTileCracks(2);
			TimeLogger.DrawTime(2, stopwatch.Elapsed.TotalMilliseconds);
		}

		protected void RenderWalls()
		{
			if (Main.drawToScreen)
			{
				return;
			}
			base.GraphicsDevice.SetRenderTarget(this.wallTarget);
			base.GraphicsDevice.DepthStencilState = new DepthStencilState
			{
				DepthBufferEnable = true
			};
			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
			Main.spriteBatch.Begin(SpriteSortMode.Texture, BlendState.AlphaBlend);
#if WINDOWS
			Main.tileBatch.Begin();
#else
			Main.tileBatch.Begin(SpriteSortMode.Texture, BlendState.AlphaBlend);
#endif
			if (Main.ignoreErrors)
			{
				try
				{
					this.DrawWalls();
					goto IL_7A;
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
					goto IL_7A;
				}
			}
			this.DrawWalls();
			IL_7A:
			TimeLogger.DetailedDrawReset();
			Main.tileBatch.End();
			Main.spriteBatch.End();
			TimeLogger.DetailedDrawTime(32);
			base.GraphicsDevice.SetRenderTarget(null);
		}

		protected void ReleaseTargets()
		{
			try
			{
				if (!Main.dedServ)
				{
					Main.offScreenRange = 0;
					Main.targetSet = false;
					if (Main.waterTarget != null)
					{
						Main.waterTarget.Dispose();
					}
					if (this.backWaterTarget != null)
					{
						this.backWaterTarget.Dispose();
					}
					if (this.blackTarget != null)
					{
						this.blackTarget.Dispose();
					}
					if (this.tileTarget != null)
					{
						this.tileTarget.Dispose();
					}
					if (this.tile2Target != null)
					{
						this.tile2Target.Dispose();
					}
					if (this.wallTarget != null)
					{
						this.wallTarget.Dispose();
					}
					if (Main.screenTarget != null)
					{
						Main.screenTarget.Dispose();
					}
					if (Main.screenTargetSwap != null)
					{
						Main.screenTargetSwap.Dispose();
					}
					if (this.backgroundTarget != null)
					{
						this.backgroundTarget.Dispose();
					}
					if (Main.OnRenderTargetsReleased != null)
					{
						Main.OnRenderTargetsReleased();
					}
				}
			}
			catch
			{
			}
		}

		protected bool checkMap(int i, int j)
		{
			if (this.mapTarget[i, j] == null || this.mapTarget[i, j].IsDisposed)
			{
				Main.initMap[i, j] = false;
			}
			if (!Main.initMap[i, j])
			{
				try
				{
					int width = Main.textureMaxWidth;
					int height = Main.textureMaxHeight;
					if (i == Main.mapTargetX - 1)
					{
						width = 400;
					}
					if (j == Main.mapTargetY - 1)
					{
						height = 600;
					}
					this.mapTarget[i, j] = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth16, 0, RenderTargetUsage.PreserveContents);
				}
				catch
				{
					Main.mapEnabled = false;
					for (int k = 0; k < Main.mapTargetX; k++)
					{
						for (int l = 0; l < Main.mapTargetY; l++)
						{
							try
							{
								Main.initMap[k, l] = false;
								this.mapTarget[k, l].Dispose();
							}
							catch
							{
							}
						}
					}
					return false;
				}
				Main.initMap[i, j] = true;
				return true;
			}
			return true;
		}

		protected void InitMap()
		{
			int num = Main.mapTargetX;
			int num2 = Main.mapTargetY;
			if (Main.mapEnabled)
			{
				try
				{
					for (int i = 0; i < num; i++)
					{
						for (int j = 0; j < num2; j++)
						{
							this.mapTarget[i, j] = new RenderTarget2D(base.GraphicsDevice, Main.textureMaxWidth, Main.textureMaxHeight, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
						}
					}
					Main.mapInit = true;
				}
				catch
				{
					Main.mapEnabled = false;
					for (int k = 0; k < num; k++)
					{
						for (int l = 0; l < num2; l++)
						{
							try
							{
								if (this.mapTarget[k, l] != null)
								{
									this.mapTarget[k, l].Dispose();
								}
							}
							catch
							{
							}
						}
					}
				}
			}
		}

		protected void InitTargets()
		{
			this.UpdateDisplaySettings();
			this.InitTargets(base.GraphicsDevice.PresentationParameters.BackBufferWidth, base.GraphicsDevice.PresentationParameters.BackBufferHeight);
		}

		protected void EnsureRenderTargetContent()
		{
			if (Main.waterTarget == null || Main.waterTarget.IsContentLost || this.backWaterTarget == null || this.backWaterTarget.IsContentLost || this.blackTarget == null || this.blackTarget.IsContentLost || this.tileTarget == null || this.tileTarget.IsContentLost || this.tile2Target == null || this.tile2Target.IsContentLost || this.wallTarget == null || this.wallTarget.IsContentLost || this.backgroundTarget == null || this.backgroundTarget.IsContentLost || Main.screenTarget == null || Main.screenTarget.IsContentLost || Main.screenTargetSwap == null || Main.screenTargetSwap.IsContentLost)
			{
				this.InitTargets();
			}
		}

		protected void InitTargets(int width, int height)
		{
			this.ReleaseTargets();
			Main.offScreenRange = 192;
			if (width + Main.offScreenRange * 2 > Main._renderTargetMaxSize)
			{
				Main.offScreenRange = (Main._renderTargetMaxSize - width) / 2;
			}
			width += Main.offScreenRange * 2;
			height += Main.offScreenRange * 2;
			try
			{
				if (!Main.dedServ)
				{
					Main.targetSet = true;
					Main.waterTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
					this.backWaterTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
					this.blackTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
					this.tileTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
					this.tile2Target = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
					this.wallTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
					this.backgroundTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
					Main.screenTarget = new RenderTarget2D(base.GraphicsDevice, base.GraphicsDevice.PresentationParameters.BackBufferWidth, base.GraphicsDevice.PresentationParameters.BackBufferHeight, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
					Main.screenTargetSwap = new RenderTarget2D(base.GraphicsDevice, base.GraphicsDevice.PresentationParameters.BackBufferWidth, base.GraphicsDevice.PresentationParameters.BackBufferHeight, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
					if (Main.OnRenderTargetsInitialized != null)
					{
						Main.OnRenderTargetsInitialized(base.GraphicsDevice.PresentationParameters.BackBufferWidth, base.GraphicsDevice.PresentationParameters.BackBufferHeight);
					}
				}
			}
			catch
			{
				Lighting.lightMode = 2;
				Main.mapEnabled = false;
				Main.SaveSettings();
				try
				{
					this.ReleaseTargets();
				}
				catch
				{
				}
			}
		}

		protected void DrawWires()
		{
			Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
			Vector2 zero = Vector2.Zero;
			this.DrawWiresSpecialTiles.Clear();
			bool flag = !WiresUI.Settings.HideWires;
			float scale = 1f;
			if (WiresUI.Settings.HideWires)
			{
				scale = 0.5f;
			}
			int num = 1;
			int num2 = 1;
			int num3 = 1;
			int num4 = 1;
			int num5 = 1;
			if (Main.player[Main.myPlayer].InfoAccMechShowWires)
			{
				int[] builderAccStatus = Main.player[Main.myPlayer].builderAccStatus;
				num = builderAccStatus[4];
				num2 = builderAccStatus[5];
				num3 = builderAccStatus[6];
				num4 = builderAccStatus[7];
				num5 = builderAccStatus[9];
			}
			float arg_91_0 = Main.gfxQuality;
			float arg_97_0 = Main.gfxQuality;
			Vector2 zero2 = Vector2.Zero;
			if (Main.drawToScreen)
			{
				zero2 = Vector2.Zero;
			}
			int num6 = (int)((Main.screenPosition.X - zero2.X) / 16f - 1f);
			int num7 = (int)((Main.screenPosition.X + (float)Main.screenWidth + zero2.X) / 16f) + 2;
			int num8 = (int)((Main.screenPosition.Y - zero2.Y) / 16f - 1f);
			int num9 = (int)((Main.screenPosition.Y + (float)Main.screenHeight + zero2.Y) / 16f) + 5;
			if (num6 < 0)
			{
				num6 = 0;
			}
			if (num7 > Main.maxTilesX)
			{
				num7 = Main.maxTilesX;
			}
			if (num8 < 0)
			{
				num8 = 0;
			}
			if (num9 > Main.maxTilesY)
			{
				num9 = Main.maxTilesY;
			}
			for (int i = num8; i < num9; i++)
			{
				for (int j = num6; j < num7; j++)
				{
					bool flag2 = false;
					bool flag3 = false;
					bool flag4 = false;
					bool flag5 = false;
					float num10 = 0f;
					Tile tile = Main.tile[j, i];
					if (flag)
					{
						int num11 = 0;
						if (tile.active())
						{
							if (tile.type == 424)
							{
								switch (tile.frameX / 18)
								{
								case 0:
									num11 += 72;
									break;
								case 1:
									num11 += 144;
									break;
								case 2:
									num11 += 216;
									break;
								}
							}
							else if (tile.type == 445)
							{
								num11 += 72;
							}
						}
						if (tile.wire())
						{
							num10 += 1f;
							int num12 = 0;
							if (Main.tile[j, i - 1].wire())
							{
								num12 += 18;
								flag4 = true;
							}
							if (Main.tile[j + 1, i].wire())
							{
								num12 += 36;
								flag3 = true;
							}
							if (Main.tile[j, i + 1].wire())
							{
								num12 += 72;
								flag5 = true;
							}
							if (Main.tile[j - 1, i].wire())
							{
								num12 += 144;
								flag2 = true;
							}
							value.Y = num11;
							value.X = num12;
							Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
							switch (num)
							{
							case 0:
								color = Microsoft.Xna.Framework.Color.White;
								break;
							case 2:
								color *= 0.5f;
								break;
							case 3:
								color = Microsoft.Xna.Framework.Color.Transparent;
								break;
							}
							if (color == Microsoft.Xna.Framework.Color.Transparent)
							{
								num10 -= 1f;
							}
							else
							{
								Main.spriteBatch.Draw(Main.wireTextureNew, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Microsoft.Xna.Framework.Rectangle?(value), color, 0f, zero, 1f, SpriteEffects.None, 0f);
							}
						}
						if (tile.wire2())
						{
							bool flag10;
							bool flag9;
							bool flag8;
							bool flag7;
							bool flag6 = flag7 = (flag8 = (flag9 = (flag10 = false)));
							num10 += 1f;
							int num13 = 0;
							if (Main.tile[j, i - 1].wire2())
							{
								num13 += 18;
								flag8 = true;
								if (flag4)
								{
									flag10 = true;
								}
							}
							if (Main.tile[j + 1, i].wire2())
							{
								num13 += 36;
								flag6 = true;
								if (flag3)
								{
									flag10 = true;
								}
							}
							if (Main.tile[j, i + 1].wire2())
							{
								num13 += 72;
								flag9 = true;
								if (flag5)
								{
									flag10 = true;
								}
							}
							if (Main.tile[j - 1, i].wire2())
							{
								num13 += 144;
								flag7 = true;
								if (flag2)
								{
									flag10 = true;
								}
							}
							if (num10 > 1f)
							{
								flag10 = true;
							}
							value.Y = num11 + 18;
							value.X = num13;
							Microsoft.Xna.Framework.Color color2 = Lighting.GetColor(j, i);
							switch (num2)
							{
							case 0:
								color2 = Microsoft.Xna.Framework.Color.White;
								break;
							case 2:
								color2 *= 0.5f;
								break;
							case 3:
								color2 = Microsoft.Xna.Framework.Color.Transparent;
								break;
							}
							if (color2 == Microsoft.Xna.Framework.Color.Transparent)
							{
								num10 -= 1f;
							}
							else
							{
								Main.spriteBatch.Draw(Main.wireTextureNew, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Microsoft.Xna.Framework.Rectangle?(value), color2 * (1f / num10), 0f, zero, 1f, SpriteEffects.None, 0f);
								if (flag8)
								{
									if (flag10 && !flag4)
									{
										Main.spriteBatch.Draw(Main.wireTextureNew, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(18, value.Y, 16, 6)), color2, 0f, zero, 1f, SpriteEffects.None, 0f);
									}
									flag4 = true;
								}
								if (flag9)
								{
									if (flag10 && !flag5)
									{
										Main.spriteBatch.Draw(Main.wireTextureNew, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2 + new Vector2(0f, 10f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(72, value.Y + 10, 16, 6)), color2, 0f, zero, 1f, SpriteEffects.None, 0f);
									}
									flag5 = true;
								}
								if (flag6)
								{
									if (flag10 && !flag3)
									{
										Main.spriteBatch.Draw(Main.wireTextureNew, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2 + new Vector2(10f, 0f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(46, value.Y, 6, 16)), color2, 0f, zero, 1f, SpriteEffects.None, 0f);
									}
									flag3 = true;
								}
								if (flag7)
								{
									if (flag10 && !flag2)
									{
										Main.spriteBatch.Draw(Main.wireTextureNew, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(144, value.Y, 6, 16)), color2, 0f, zero, 1f, SpriteEffects.None, 0f);
									}
									flag2 = true;
								}
							}
						}
						if (tile.wire3())
						{
							bool flag10;
							bool flag9;
							bool flag8;
							bool flag7;
							bool flag6 = flag7 = (flag8 = (flag9 = (flag10 = false)));
							num10 += 1f;
							int num14 = 0;
							if (Main.tile[j, i - 1].wire3())
							{
								num14 += 18;
								flag8 = true;
								if (flag4)
								{
									flag10 = true;
								}
							}
							if (Main.tile[j + 1, i].wire3())
							{
								num14 += 36;
								flag6 = true;
								if (flag3)
								{
									flag10 = true;
								}
							}
							if (Main.tile[j, i + 1].wire3())
							{
								num14 += 72;
								flag9 = true;
								if (flag5)
								{
									flag10 = true;
								}
							}
							if (Main.tile[j - 1, i].wire3())
							{
								num14 += 144;
								flag7 = true;
								if (flag2)
								{
									flag10 = true;
								}
							}
							if (num10 > 1f)
							{
								flag10 = true;
							}
							value.Y = num11 + 36;
							value.X = num14;
							Microsoft.Xna.Framework.Color color3 = Lighting.GetColor(j, i);
							switch (num3)
							{
							case 0:
								color3 = Microsoft.Xna.Framework.Color.White;
								break;
							case 2:
								color3 *= 0.5f;
								break;
							case 3:
								color3 = Microsoft.Xna.Framework.Color.Transparent;
								break;
							}
							if (color3 == Microsoft.Xna.Framework.Color.Transparent)
							{
								num10 -= 1f;
							}
							else
							{
								Main.spriteBatch.Draw(Main.wireTextureNew, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Microsoft.Xna.Framework.Rectangle?(value), color3 * (1f / num10), 0f, zero, 1f, SpriteEffects.None, 0f);
								if (flag8)
								{
									if (flag10 && !flag4)
									{
										Main.spriteBatch.Draw(Main.wireTextureNew, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(18, value.Y, 16, 6)), color3, 0f, zero, 1f, SpriteEffects.None, 0f);
									}
									flag4 = true;
								}
								if (flag9)
								{
									if (flag10 && !flag5)
									{
										Main.spriteBatch.Draw(Main.wireTextureNew, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2 + new Vector2(0f, 10f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(72, value.Y + 10, 16, 6)), color3, 0f, zero, 1f, SpriteEffects.None, 0f);
									}
									flag5 = true;
								}
								if (flag6)
								{
									if (flag10 && !flag3)
									{
										Main.spriteBatch.Draw(Main.wireTextureNew, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2 + new Vector2(10f, 0f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(46, value.Y, 6, 16)), color3, 0f, zero, 1f, SpriteEffects.None, 0f);
									}
									flag3 = true;
								}
								if (flag7)
								{
									if (flag10 && !flag2)
									{
										Main.spriteBatch.Draw(Main.wireTextureNew, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(144, value.Y, 6, 16)), color3, 0f, zero, 1f, SpriteEffects.None, 0f);
									}
									flag2 = true;
								}
							}
						}
						if (tile.wire4())
						{
							bool flag10;
							bool flag9;
							bool flag8;
							bool flag7;
							bool flag6 = flag7 = (flag8 = (flag9 = (flag10 = false)));
							num10 += 1f;
							int num15 = 0;
							if (Main.tile[j, i - 1].wire4())
							{
								num15 += 18;
								flag8 = true;
								if (flag4)
								{
									flag10 = true;
								}
							}
							if (Main.tile[j + 1, i].wire4())
							{
								num15 += 36;
								flag6 = true;
								if (flag3)
								{
									flag10 = true;
								}
							}
							if (Main.tile[j, i + 1].wire4())
							{
								num15 += 72;
								flag9 = true;
								if (flag5)
								{
									flag10 = true;
								}
							}
							if (Main.tile[j - 1, i].wire4())
							{
								num15 += 144;
								flag7 = true;
								if (flag2)
								{
									flag10 = true;
								}
							}
							if (num10 > 1f)
							{
								flag10 = true;
							}
							value.Y = num11 + 54;
							value.X = num15;
							Microsoft.Xna.Framework.Color color4 = Lighting.GetColor(j, i);
							switch (num4)
							{
							case 0:
								color4 = Microsoft.Xna.Framework.Color.White;
								break;
							case 2:
								color4 *= 0.5f;
								break;
							case 3:
								color4 = Microsoft.Xna.Framework.Color.Transparent;
								break;
							}
							if (color4 == Microsoft.Xna.Framework.Color.Transparent)
							{
								num10 -= 1f;
							}
							else
							{
								Main.spriteBatch.Draw(Main.wireTextureNew, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Microsoft.Xna.Framework.Rectangle?(value), color4 * (1f / num10), 0f, zero, 1f, SpriteEffects.None, 0f);
								if (flag8)
								{
									if (flag10 && !flag4)
									{
										Main.spriteBatch.Draw(Main.wireTextureNew, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(18, value.Y, 16, 6)), color4, 0f, zero, 1f, SpriteEffects.None, 0f);
									}
								}
								if (flag9)
								{
									if (flag10 && !flag5)
									{
										Main.spriteBatch.Draw(Main.wireTextureNew, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2 + new Vector2(0f, 10f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(72, value.Y + 10, 16, 6)), color4, 0f, zero, 1f, SpriteEffects.None, 0f);
									}
								}
								if (flag6)
								{
									if (flag10 && !flag3)
									{
										Main.spriteBatch.Draw(Main.wireTextureNew, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2 + new Vector2(10f, 0f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(46, value.Y, 6, 16)), color4, 0f, zero, 1f, SpriteEffects.None, 0f);
									}
								}
								if (flag7)
								{
									if (flag10 && !flag2)
									{
										Main.spriteBatch.Draw(Main.wireTextureNew, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(144, value.Y, 6, 16)), color4, 0f, zero, 1f, SpriteEffects.None, 0f);
									}
								}
							}
						}
					}
					if (Main.tile[j, i].actuator() && (Lighting.Brightness(j, i) > 0f || num5 == 0))
					{
						Microsoft.Xna.Framework.Color value2 = Lighting.GetColor(j, i);
						switch (num5)
						{
						case 0:
							value2 = Microsoft.Xna.Framework.Color.White;
							break;
						case 2:
							value2 *= 0.5f;
							break;
						case 3:
							value2 = Microsoft.Xna.Framework.Color.Transparent;
							break;
						}
						Main.spriteBatch.Draw(Main.actuatorTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.actuatorTexture.Width, Main.actuatorTexture.Height)), value2 * scale, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
					if (tile.active())
					{
						ushort type = tile.type;
						if (type == 423 && tile.frameY == 36)
						{
							this.DrawWiresSpecialTiles.Add(Tuple.Create<int, int, ushort>(j, i, tile.type));
						}
					}
				}
			}
			for (int k = 0; k < this.DrawWiresSpecialTiles.Count; k++)
			{
				Tuple<int, int, ushort> tuple = this.DrawWiresSpecialTiles[k];
				ushort item = tuple.Item3;
				if (item == 423)
				{
					Vector2 start = new Vector2((float)(tuple.Item1 * 16 - 32 - 1), (float)(tuple.Item2 * 16 - 160 - 1)) + zero2;
					Vector2 end = new Vector2((float)(tuple.Item1 * 16 + 48 + 1), (float)(tuple.Item2 * 16 + 1)) + zero2;
					Utils.DrawRectangle(Main.spriteBatch, start, end, Microsoft.Xna.Framework.Color.LightSeaGreen, Microsoft.Xna.Framework.Color.LightSeaGreen, 2f);
				}
			}
			TimeLogger.DetailedDrawTime(34);
		}

		protected void DrawWiresOld()
		{
			float arg_05_0 = Main.gfxQuality;
			float arg_0B_0 = Main.gfxQuality;
			Vector2 zero = new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
			if (Main.drawToScreen)
			{
				zero = Vector2.Zero;
			}
			int num = (int)((Main.screenPosition.X - zero.X) / 16f - 1f);
			int num2 = (int)((Main.screenPosition.X + (float)Main.screenWidth + zero.X) / 16f) + 2;
			int num3 = (int)((Main.screenPosition.Y - zero.Y) / 16f - 1f);
			int num4 = (int)((Main.screenPosition.Y + (float)Main.screenHeight + zero.Y) / 16f) + 5;
			if (num < 0)
			{
				num = 0;
			}
			if (num2 > Main.maxTilesX)
			{
				num2 = Main.maxTilesX;
			}
			if (num3 < 0)
			{
				num3 = 0;
			}
			if (num4 > Main.maxTilesY)
			{
				num4 = Main.maxTilesY;
			}
			for (int i = num3; i < num4; i++)
			{
				for (int j = num; j < num2; j++)
				{
					if (Main.tile[j, i].wire() && Lighting.Brightness(j, i) > 0f)
					{
						Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
						bool flag = Main.tile[j, i - 1].wire();
						bool flag2 = Main.tile[j, i + 1].wire();
						bool flag3 = Main.tile[j - 1, i].wire();
						bool flag4 = Main.tile[j + 1, i].wire();
						if (flag)
						{
							if (flag2)
							{
								if (flag3)
								{
									if (flag4)
									{
										value = new Microsoft.Xna.Framework.Rectangle(18, 18, 16, 16);
									}
									else
									{
										value = new Microsoft.Xna.Framework.Rectangle(54, 0, 16, 16);
									}
								}
								else if (flag4)
								{
									value = new Microsoft.Xna.Framework.Rectangle(36, 0, 16, 16);
								}
								else
								{
									value = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
								}
							}
							else if (flag3)
							{
								if (flag4)
								{
									value = new Microsoft.Xna.Framework.Rectangle(0, 18, 16, 16);
								}
								else
								{
									value = new Microsoft.Xna.Framework.Rectangle(54, 18, 16, 16);
								}
							}
							else if (flag4)
							{
								value = new Microsoft.Xna.Framework.Rectangle(36, 18, 16, 16);
							}
							else
							{
								value = new Microsoft.Xna.Framework.Rectangle(36, 36, 16, 16);
							}
						}
						else if (flag2)
						{
							if (flag3)
							{
								if (flag4)
								{
									value = new Microsoft.Xna.Framework.Rectangle(72, 0, 16, 16);
								}
								else
								{
									value = new Microsoft.Xna.Framework.Rectangle(72, 18, 16, 16);
								}
							}
							else if (flag4)
							{
								value = new Microsoft.Xna.Framework.Rectangle(0, 36, 16, 16);
							}
							else
							{
								value = new Microsoft.Xna.Framework.Rectangle(18, 36, 16, 16);
							}
						}
						else if (flag3)
						{
							if (flag4)
							{
								value = new Microsoft.Xna.Framework.Rectangle(18, 0, 16, 16);
							}
							else
							{
								value = new Microsoft.Xna.Framework.Rectangle(54, 36, 16, 16);
							}
						}
						else if (flag4)
						{
							value = new Microsoft.Xna.Framework.Rectangle(72, 36, 16, 16);
						}
						else
						{
							value = new Microsoft.Xna.Framework.Rectangle(0, 54, 16, 16);
						}
						Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
						Main.spriteBatch.Draw(Main.wireTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(value), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
					if (Main.tile[j, i].wire2() && Lighting.Brightness(j, i) > 0f)
					{
						Microsoft.Xna.Framework.Rectangle value2 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
						bool flag5 = Main.tile[j, i - 1].wire2();
						bool flag6 = Main.tile[j, i + 1].wire2();
						bool flag7 = Main.tile[j - 1, i].wire2();
						bool flag8 = Main.tile[j + 1, i].wire2();
						if (flag5)
						{
							if (flag6)
							{
								if (flag7)
								{
									if (flag8)
									{
										value2 = new Microsoft.Xna.Framework.Rectangle(18, 18, 16, 16);
									}
									else
									{
										value2 = new Microsoft.Xna.Framework.Rectangle(54, 0, 16, 16);
									}
								}
								else if (flag8)
								{
									value2 = new Microsoft.Xna.Framework.Rectangle(36, 0, 16, 16);
								}
								else
								{
									value2 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
								}
							}
							else if (flag7)
							{
								if (flag8)
								{
									value2 = new Microsoft.Xna.Framework.Rectangle(0, 18, 16, 16);
								}
								else
								{
									value2 = new Microsoft.Xna.Framework.Rectangle(54, 18, 16, 16);
								}
							}
							else if (flag8)
							{
								value2 = new Microsoft.Xna.Framework.Rectangle(36, 18, 16, 16);
							}
							else
							{
								value2 = new Microsoft.Xna.Framework.Rectangle(36, 36, 16, 16);
							}
						}
						else if (flag6)
						{
							if (flag7)
							{
								if (flag8)
								{
									value2 = new Microsoft.Xna.Framework.Rectangle(72, 0, 16, 16);
								}
								else
								{
									value2 = new Microsoft.Xna.Framework.Rectangle(72, 18, 16, 16);
								}
							}
							else if (flag8)
							{
								value2 = new Microsoft.Xna.Framework.Rectangle(0, 36, 16, 16);
							}
							else
							{
								value2 = new Microsoft.Xna.Framework.Rectangle(18, 36, 16, 16);
							}
						}
						else if (flag7)
						{
							if (flag8)
							{
								value2 = new Microsoft.Xna.Framework.Rectangle(18, 0, 16, 16);
							}
							else
							{
								value2 = new Microsoft.Xna.Framework.Rectangle(54, 36, 16, 16);
							}
						}
						else if (flag8)
						{
							value2 = new Microsoft.Xna.Framework.Rectangle(72, 36, 16, 16);
						}
						else
						{
							value2 = new Microsoft.Xna.Framework.Rectangle(0, 54, 16, 16);
						}
						Microsoft.Xna.Framework.Color color2 = Lighting.GetColor(j, i);
						int num5 = 1;
						if (Main.tile[j, i].wire())
						{
							num5++;
						}
						float num6 = 1f / (float)num5;
						byte r = (byte)((float)color2.R * num6);
						byte g = (byte)((float)color2.G * num6);
						byte b = (byte)((float)color2.B * num6);
						byte a = (byte)((float)color2.A * num6);
						color2 = new Microsoft.Xna.Framework.Color((int)r, (int)g, (int)b, (int)a);
						Main.spriteBatch.Draw(Main.wire2Texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(value2), color2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
					if (Main.tile[j, i].wire3() && Lighting.Brightness(j, i) > 0f)
					{
						Microsoft.Xna.Framework.Rectangle value3 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
						bool flag9 = Main.tile[j, i - 1].wire3();
						bool flag10 = Main.tile[j, i + 1].wire3();
						bool flag11 = Main.tile[j - 1, i].wire3();
						bool flag12 = Main.tile[j + 1, i].wire3();
						if (flag9)
						{
							if (flag10)
							{
								if (flag11)
								{
									if (flag12)
									{
										value3 = new Microsoft.Xna.Framework.Rectangle(18, 18, 16, 16);
									}
									else
									{
										value3 = new Microsoft.Xna.Framework.Rectangle(54, 0, 16, 16);
									}
								}
								else if (flag12)
								{
									value3 = new Microsoft.Xna.Framework.Rectangle(36, 0, 16, 16);
								}
								else
								{
									value3 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
								}
							}
							else if (flag11)
							{
								if (flag12)
								{
									value3 = new Microsoft.Xna.Framework.Rectangle(0, 18, 16, 16);
								}
								else
								{
									value3 = new Microsoft.Xna.Framework.Rectangle(54, 18, 16, 16);
								}
							}
							else if (flag12)
							{
								value3 = new Microsoft.Xna.Framework.Rectangle(36, 18, 16, 16);
							}
							else
							{
								value3 = new Microsoft.Xna.Framework.Rectangle(36, 36, 16, 16);
							}
						}
						else if (flag10)
						{
							if (flag11)
							{
								if (flag12)
								{
									value3 = new Microsoft.Xna.Framework.Rectangle(72, 0, 16, 16);
								}
								else
								{
									value3 = new Microsoft.Xna.Framework.Rectangle(72, 18, 16, 16);
								}
							}
							else if (flag12)
							{
								value3 = new Microsoft.Xna.Framework.Rectangle(0, 36, 16, 16);
							}
							else
							{
								value3 = new Microsoft.Xna.Framework.Rectangle(18, 36, 16, 16);
							}
						}
						else if (flag11)
						{
							if (flag12)
							{
								value3 = new Microsoft.Xna.Framework.Rectangle(18, 0, 16, 16);
							}
							else
							{
								value3 = new Microsoft.Xna.Framework.Rectangle(54, 36, 16, 16);
							}
						}
						else if (flag12)
						{
							value3 = new Microsoft.Xna.Framework.Rectangle(72, 36, 16, 16);
						}
						else
						{
							value3 = new Microsoft.Xna.Framework.Rectangle(0, 54, 16, 16);
						}
						Microsoft.Xna.Framework.Color color3 = Lighting.GetColor(j, i);
						int num7 = 1;
						if (Main.tile[j, i].wire())
						{
							num7++;
						}
						if (Main.tile[j, i].wire2())
						{
							num7++;
						}
						float num8 = 1f / (float)num7;
						byte r2 = (byte)((float)color3.R * num8);
						byte g2 = (byte)((float)color3.G * num8);
						byte b2 = (byte)((float)color3.B * num8);
						byte a2 = (byte)((float)color3.A * num8);
						color3 = new Microsoft.Xna.Framework.Color((int)r2, (int)g2, (int)b2, (int)a2);
						Main.spriteBatch.Draw(Main.wire3Texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(value3), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
					if (Main.tile[j, i].wire4() && Lighting.Brightness(j, i) > 0f)
					{
						Microsoft.Xna.Framework.Rectangle value4 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
						bool flag13 = Main.tile[j, i - 1].wire4();
						bool flag14 = Main.tile[j, i + 1].wire4();
						bool flag15 = Main.tile[j - 1, i].wire4();
						bool flag16 = Main.tile[j + 1, i].wire4();
						if (flag13)
						{
							if (flag14)
							{
								if (flag15)
								{
									if (flag16)
									{
										value4 = new Microsoft.Xna.Framework.Rectangle(18, 18, 16, 16);
									}
									else
									{
										value4 = new Microsoft.Xna.Framework.Rectangle(54, 0, 16, 16);
									}
								}
								else if (flag16)
								{
									value4 = new Microsoft.Xna.Framework.Rectangle(36, 0, 16, 16);
								}
								else
								{
									value4 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
								}
							}
							else if (flag15)
							{
								if (flag16)
								{
									value4 = new Microsoft.Xna.Framework.Rectangle(0, 18, 16, 16);
								}
								else
								{
									value4 = new Microsoft.Xna.Framework.Rectangle(54, 18, 16, 16);
								}
							}
							else if (flag16)
							{
								value4 = new Microsoft.Xna.Framework.Rectangle(36, 18, 16, 16);
							}
							else
							{
								value4 = new Microsoft.Xna.Framework.Rectangle(36, 36, 16, 16);
							}
						}
						else if (flag14)
						{
							if (flag15)
							{
								if (flag16)
								{
									value4 = new Microsoft.Xna.Framework.Rectangle(72, 0, 16, 16);
								}
								else
								{
									value4 = new Microsoft.Xna.Framework.Rectangle(72, 18, 16, 16);
								}
							}
							else if (flag16)
							{
								value4 = new Microsoft.Xna.Framework.Rectangle(0, 36, 16, 16);
							}
							else
							{
								value4 = new Microsoft.Xna.Framework.Rectangle(18, 36, 16, 16);
							}
						}
						else if (flag15)
						{
							if (flag16)
							{
								value4 = new Microsoft.Xna.Framework.Rectangle(18, 0, 16, 16);
							}
							else
							{
								value4 = new Microsoft.Xna.Framework.Rectangle(54, 36, 16, 16);
							}
						}
						else if (flag16)
						{
							value4 = new Microsoft.Xna.Framework.Rectangle(72, 36, 16, 16);
						}
						else
						{
							value4 = new Microsoft.Xna.Framework.Rectangle(0, 54, 16, 16);
						}
						Microsoft.Xna.Framework.Color color4 = Lighting.GetColor(j, i);
						int num9 = 1;
						if (Main.tile[j, i].wire())
						{
							num9++;
						}
						if (Main.tile[j, i].wire2())
						{
							num9++;
						}
						if (Main.tile[j, i].wire3())
						{
							num9++;
						}
						float num10 = 1f / (float)num9;
						byte r3 = (byte)((float)color4.R * num10);
						byte g3 = (byte)((float)color4.G * num10);
						byte b3 = (byte)((float)color4.B * num10);
						byte a3 = (byte)((float)color4.A * num10);
						color4 = new Microsoft.Xna.Framework.Color((int)r3, (int)g3, (int)b3, (int)a3);
						Main.spriteBatch.Draw(Main.wire4Texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(value4), color4, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
					if (Main.tile[j, i].actuator() && Lighting.Brightness(j, i) > 0f)
					{
						Microsoft.Xna.Framework.Color color5 = Lighting.GetColor(j, i);
						Main.spriteBatch.Draw(Main.actuatorTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.actuatorTexture.Width, Main.actuatorTexture.Height)), color5, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
				}
			}
			TimeLogger.DetailedDrawTime(34);
		}

		public static int GetTreeStyle(int X)
		{
			int num;
			if (X <= Main.treeX[0])
			{
				num = Main.treeStyle[0];
			}
			else if (X <= Main.treeX[1])
			{
				num = Main.treeStyle[1];
			}
			else if (X <= Main.treeX[2])
			{
				num = Main.treeStyle[2];
			}
			else
			{
				num = Main.treeStyle[3];
			}
			if (num == 0)
			{
				return 0;
			}
			if (num == 5)
			{
				return 10;
			}
			return 5 + num;
		}

		protected void lookForColorTiles()
		{
			int num = (int)(Main.screenPosition.X / 16f - 2f);
			int num2 = (int)((Main.screenPosition.X + (float)Main.screenWidth) / 16f) + 3;
			int num3 = (int)(Main.screenPosition.Y / 16f - 2f);
			int num4 = (int)((Main.screenPosition.Y + (float)Main.screenHeight) / 16f) + 3;
			if (num < 1)
			{
				num = 1;
			}
			if (num2 > Main.maxTilesX - 2)
			{
				num2 = Main.maxTilesX - 2;
			}
			if (num3 < 1)
			{
				num3 = 1;
			}
			if (num4 > Main.maxTilesY - 2)
			{
				num4 = Main.maxTilesY - 2;
			}
			for (int i = num; i < num2; i++)
			{
				if (i > 0)
				{
					for (int j = num3; j < num4; j++)
					{
						if (Main.tile[i, j] != null)
						{
							int treeVariant = Main.GetTreeVariant(i, j);
							if (treeVariant != -1)
							{
								this.woodColorCheck(treeVariant, (int)Main.tile[i, j].color());
							}
							if (Main.tile[i, j].active() && Main.tile[i, j].color() > 0)
							{
								this.tileColorCheck((int)Main.tile[i, j].type, (int)Main.tile[i, j].color());
							}
							if (Main.tile[i, j].wall > 0 && Main.tile[i, j].wallColor() > 0)
							{
								this.wallColorCheck((int)Main.tile[i, j].wall, (int)Main.tile[i, j].wallColor());
							}
						}
					}
				}
			}
			for (int k = 0; k < Main.numTreeStyles; k++)
			{
				for (int l = 0; l < Main.numTileColors; l++)
				{
					if (Main.checkTreeAlt[k, l])
					{
						this.treeColorCheck(k, l);
						Main.checkTreeAlt[k, l] = false;
					}
				}
			}
		}

		protected static int GetTreeVariant(int x, int y)
		{
			if (Main.tile[x, y] == null || !Main.tile[x, y].active())
			{
				return -1;
			}
			int type = (int)Main.tile[x, y].type;
			int num = type;
			if (num <= 70)
			{
				if (num == 23)
				{
					return 0;
				}
				if (num != 60)
				{
					if (num == 70)
					{
						return 6;
					}
				}
				else
				{
					if ((double)y <= Main.worldSurface)
					{
						return 1;
					}
					return 5;
				}
			}
			else
			{
				if (num == 109)
				{
					return 2;
				}
				if (num == 147)
				{
					return 3;
				}
				if (num == 199)
				{
					return 4;
				}
			}
			return -1;
		}

		protected void woodColorCheck(int t, int c)
		{
			this.LoadTiles(5);
			if (c >= Main.numTileColors)
			{
				return;
			}
			bool flag = false;
			if (Main.woodAltTexture[t, c] == null)
			{
				Main.woodAltTexture[t, c] = new RenderTarget2D(base.GraphicsDevice, Main.woodTexture[t].Width, Main.woodTexture[t].Height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
				flag = true;
			}
			if (Main.woodAltTexture[t, c].IsContentLost)
			{
				flag = true;
			}
			if (flag)
			{
				base.GraphicsDevice.SetRenderTarget(Main.woodAltTexture[t, c]);
				base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
				Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
				if (c >= 28)
				{
					int index = 40 + c - 28;
					Main.tileShader.CurrentTechnique.Passes[index].Apply();
				}
				else if (c > 0 && c < 13)
				{
					int index2 = c + 27;
					Main.tileShader.CurrentTechnique.Passes[index2].Apply();
				}
				else
				{
					Main.tileShader.CurrentTechnique.Passes[c].Apply();
				}
				Main.spriteBatch.Draw(Main.woodTexture[t], new Microsoft.Xna.Framework.Rectangle(0, 0, Main.woodTexture[t].Width, Main.woodTexture[t].Height), Microsoft.Xna.Framework.Color.White);
				Main.spriteBatch.End();
				base.GraphicsDevice.SetRenderTarget(null);
			}
		}

		protected void tileColorCheck(int t, int c)
		{
			this.LoadTiles(t);
			if (c >= Main.numTileColors)
			{
				return;
			}
			if (!Main.tileAltTextureInit[t, c])
			{
				Main.tileAltTexture[t, c] = new RenderTarget2D(base.GraphicsDevice, Main.tileTexture[t].Width, Main.tileTexture[t].Height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
				Main.tileAltTextureInit[t, c] = true;
			}
			if (Main.tileAltTexture[t, c].IsContentLost)
			{
				Main.tileAltTextureDrawn[t, c] = false;
			}
			if (!Main.tileAltTextureDrawn[t, c])
			{
				base.GraphicsDevice.SetRenderTarget(Main.tileAltTexture[t, c]);
				base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
				Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
				if (c >= 28)
				{
					int index = 40 + c - 28;
					Main.tileShader.CurrentTechnique.Passes[index].Apply();
				}
				else if (c > 0 && c < 13 && (t == 0 || t == 2 || t == 5 || t == 23 || t == 59 || t == 60 || t == 70 || t == 109 || t == 199))
				{
					int index2 = c + 27;
					Main.tileShader.CurrentTechnique.Passes[index2].Apply();
				}
				else
				{
					Main.tileShader.CurrentTechnique.Passes[c].Apply();
				}
				Main.spriteBatch.Draw(Main.tileTexture[t], new Microsoft.Xna.Framework.Rectangle(0, 0, Main.tileTexture[t].Width, Main.tileTexture[t].Height), Microsoft.Xna.Framework.Color.White);
				Main.spriteBatch.End();
				base.GraphicsDevice.SetRenderTarget(null);
				Main.tileAltTextureDrawn[t, c] = true;
			}
		}

		protected void treeColorCheck(int t, int c)
		{
			if (!Main.treeAltTextureInit[t, c])
			{
				Main.treeTopAltTexture[t, c] = new RenderTarget2D(base.GraphicsDevice, Main.treeTopTexture[t].Width, Main.treeTopTexture[t].Height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
				Main.treeBranchAltTexture[t, c] = new RenderTarget2D(base.GraphicsDevice, Main.treeBranchTexture[t].Width, Main.treeBranchTexture[t].Height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
				Main.treeAltTextureInit[t, c] = true;
			}
			if (Main.treeTopAltTexture[t, c].IsContentLost || Main.treeBranchAltTexture[t, c].IsContentLost)
			{
				Main.treeAltTextureDrawn[t, c] = false;
			}
			if (!Main.treeAltTextureDrawn[t, c])
			{
				base.GraphicsDevice.SetRenderTarget(Main.treeTopAltTexture[t, c]);
				base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
				Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
				if (c >= 28)
				{
					int index = 40 + c - 28;
					Main.tileShader.CurrentTechnique.Passes[index].Apply();
				}
				else if (c > 0 && c < 13)
				{
					int index2 = c + 27;
					Main.tileShader.CurrentTechnique.Passes[index2].Apply();
				}
				else
				{
					Main.tileShader.CurrentTechnique.Passes[c].Apply();
				}
				Main.spriteBatch.Draw(Main.treeTopTexture[t], new Microsoft.Xna.Framework.Rectangle(0, 0, Main.treeTopTexture[t].Width, Main.treeTopTexture[t].Height), Microsoft.Xna.Framework.Color.White);
				Main.spriteBatch.End();
				base.GraphicsDevice.SetRenderTarget(null);
				base.GraphicsDevice.SetRenderTarget(Main.treeBranchAltTexture[t, c]);
				base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
				Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
				if (c >= 28)
				{
					int index3 = 40 + c - 28;
					Main.tileShader.CurrentTechnique.Passes[index3].Apply();
				}
				else if (c > 0 && c < 13)
				{
					int index4 = c + 27;
					Main.tileShader.CurrentTechnique.Passes[index4].Apply();
				}
				else
				{
					Main.tileShader.CurrentTechnique.Passes[c].Apply();
				}
				Main.spriteBatch.Draw(Main.treeBranchTexture[t], new Microsoft.Xna.Framework.Rectangle(0, 0, Main.treeBranchTexture[t].Width, Main.treeBranchTexture[t].Height), Microsoft.Xna.Framework.Color.White);
				Main.spriteBatch.End();
				base.GraphicsDevice.SetRenderTarget(null);
				Main.treeAltTextureDrawn[t, c] = true;
			}
		}

		protected void wallColorCheck(int t, int c)
		{
			this.LoadWall(t);
			if (!Main.wallAltTextureInit[t, c])
			{
				Main.wallAltTexture[t, c] = new RenderTarget2D(base.GraphicsDevice, Main.wallTexture[t].Width, Main.wallTexture[t].Height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
				Main.wallAltTextureInit[t, c] = true;
			}
			if (Main.wallAltTexture[t, c].IsContentLost)
			{
				Main.wallAltTextureDrawn[t, c] = false;
			}
			if (!Main.wallAltTextureDrawn[t, c])
			{
				base.GraphicsDevice.SetRenderTarget(Main.wallAltTexture[t, c]);
				base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
				Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
				if (c == 30)
				{
					Main.tileShader.CurrentTechnique.Passes[43].Apply();
				}
				else if (c >= 28)
				{
					int index = 40 + c - 28;
					Main.tileShader.CurrentTechnique.Passes[index].Apply();
				}
				else
				{
					Main.tileShader.CurrentTechnique.Passes[c].Apply();
				}
				Main.spriteBatch.Draw(Main.wallTexture[t], new Microsoft.Xna.Framework.Rectangle(0, 0, Main.wallTexture[t].Width, Main.wallTexture[t].Height), Microsoft.Xna.Framework.Color.White);
				Main.spriteBatch.End();
				base.GraphicsDevice.SetRenderTarget(null);
				Main.wallAltTextureDrawn[t, c] = true;
			}
		}

		public void UpdateWeather(GameTime gameTime)
		{
			Main.cloudLimit = 200;
			if (Main.windSpeed < Main.windSpeedSet)
			{
				Main.windSpeed += 0.001f * (float)Main.dayRate;
				if (Main.windSpeed > Main.windSpeedSet)
				{
					Main.windSpeed = Main.windSpeedSet;
				}
			}
			else if (Main.windSpeed > Main.windSpeedSet)
			{
				Main.windSpeed -= 0.001f * (float)Main.dayRate;
				if (Main.windSpeed < Main.windSpeedSet)
				{
					Main.windSpeed = Main.windSpeedSet;
				}
			}
			if (Main.netMode == 1)
			{
				return;
			}
			if (Main.netMode != 2 && Main.gameMenu)
			{
				return;
			}
			Main.windSpeedSpeed += (float)Main.rand.Next(-10, 11) * 0.0001f;
			if (!Main.dayTime)
			{
				Main.windSpeedSpeed += (float)Main.rand.Next(-10, 11) * 0.0002f;
			}
			if ((double)Main.windSpeedSpeed < -0.002)
			{
				Main.windSpeedSpeed = -0.002f;
			}
			if ((double)Main.windSpeedSpeed > 0.002)
			{
				Main.windSpeedSpeed = 0.002f;
			}
			Main.windSpeedTemp += Main.windSpeedSpeed;
			if (Main.raining)
			{
				Main.windSpeedTemp += Main.windSpeedSpeed * 2f;
			}
			float num = 0.3f + 0.5f * Main.cloudAlpha;
			if (Main.windSpeedTemp < -num)
			{
				Main.windSpeedTemp = -num;
			}
			if (Main.windSpeedTemp > num)
			{
				Main.windSpeedTemp = num;
			}
			if (Main.rand.Next(60) == 0)
			{
				Main.numCloudsTemp += Main.rand.Next(-1, 2);
			}
			if ((float)Main.rand.Next(1000) < 50f * Main.cloudBGAlpha)
			{
				Main.numCloudsTemp++;
			}
			if ((float)Main.rand.Next(1000) < 25f * (1f - Main.cloudBGAlpha))
			{
				Main.numCloudsTemp--;
			}
			if ((float)Main.rand.Next(1000) < 200f * Main.cloudAlpha && Main.numCloudsTemp < Main.cloudLimit / 2)
			{
				Main.numCloudsTemp++;
			}
			if ((float)Main.rand.Next(1000) < 50f * Main.cloudAlpha)
			{
				Main.numCloudsTemp++;
			}
			if (Main.numCloudsTemp > Main.cloudLimit / 4 && Main.rand.Next(100) == 0)
			{
				Main.numCloudsTemp -= Main.rand.Next(1, 3);
			}
			if (Main.numCloudsTemp < Main.cloudLimit / 4 && Main.rand.Next(100) == 0)
			{
				Main.numCloudsTemp += Main.rand.Next(1, 3);
			}
			if (Main.cloudBGActive <= 0f && Main.numCloudsTemp > Main.cloudLimit / 2 && Main.cloudAlpha == 0f)
			{
				Main.numCloudsTemp = Main.cloudLimit / 2;
			}
			if (Main.numCloudsTemp < 0)
			{
				Main.numCloudsTemp = 0;
			}
			if (Main.numCloudsTemp > Main.cloudLimit)
			{
				Main.numCloudsTemp = Main.cloudLimit;
			}
			Main.weatherCounter -= Main.dayRate;
			if (Main.weatherCounter <= 0)
			{
				Main.numClouds = Main.numCloudsTemp;
				Main.windSpeedSet = Main.windSpeedTemp;
				Main.weatherCounter = Main.rand.Next(3600, 18000);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
				}
			}
		}

		public void LoadBackground(int i)
		{
			if (i >= 0 && !Main.backgroundLoaded[i])
			{
				Main.backgroundTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Background_",
					i
				}));
				Main.backgroundWidth[i] = Main.backgroundTexture[i].Width;
				Main.backgroundHeight[i] = Main.backgroundTexture[i].Height;
				Main.backgroundLoaded[i] = true;
			}
		}

		protected void LoadNPC(int i)
		{
			if (!Main.NPCLoaded[i] || Main.npcTexture[i] == null)
			{
				Main.npcTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"NPC_",
					i
				}));
				Main.NPCLoaded[i] = true;
			}
		}

		protected void LoadProjectile(int i)
		{
			if (!Main.projectileLoaded[i])
			{
				Main.projectileTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Projectile_",
					i
				}));
				Main.projectileLoaded[i] = true;
			}
		}

		protected void LoadGore(int i)
		{
			if (!Main.goreLoaded[i])
			{
				Main.goreTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Gore_",
					i
				}));
				Main.goreLoaded[i] = true;
			}
		}

		protected void LoadWall(int i)
		{
			if (!Main.wallLoaded[i])
			{
				Main.wallTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Wall_",
					i
				}));
				Main.wallLoaded[i] = true;
			}
		}

		protected void LoadTiles(int i)
		{
			if (!Main.tileSetsLoaded[i])
			{
				Main.tileTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Tiles_",
					i
				}));
				Main.tileSetsLoaded[i] = true;
			}
		}

		protected void LoadItemFlames(int i)
		{
			if (!Main.itemFlameLoaded[i])
			{
				try
				{
					Main.itemFlameTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
					{
						"Images",
						Path.DirectorySeparatorChar,
						"ItemFlame_",
						i
					}));
				}
				catch
				{
				}
				Main.itemFlameLoaded[i] = true;
			}
		}

		protected void LoadWings(int i)
		{
			if (!Main.wingsLoaded[i])
			{
				Main.wingsTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Wings_",
					i
				}));
				Main.wingsLoaded[i] = true;
			}
		}

		protected void LoadHair(int i)
		{
			if (!Main.hairLoaded[i])
			{
				Main.playerHairTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Player_Hair_",
					i + 1
				}));
				Main.playerHairAltTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Player_HairAlt_",
					i + 1
				}));
				Main.hairLoaded[i] = true;
			}
		}

		protected void LoadArmorHead(int i)
		{
			if (!Main.armorHeadLoaded[i])
			{
				Main.armorHeadTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Armor_Head_",
					i
				}));
				Main.armorHeadLoaded[i] = true;
			}
		}

		protected void LoadArmorBody(int i)
		{
			if (!Main.armorBodyLoaded[i])
			{
				Main.femaleBodyTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Female_Body_",
					i
				}));
				Main.armorBodyTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Armor_Body_",
					i
				}));
				Main.armorArmTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Armor_Arm_",
					i
				}));
				Main.armorBodyLoaded[i] = true;
			}
		}

		protected void LoadArmorLegs(int i)
		{
			if (!Main.armorLegsLoaded[i])
			{
				Main.armorLegTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Armor_Legs_",
					i
				}));
				Main.armorLegsLoaded[i] = true;
			}
		}

		protected void LoadAccHandsOn(int i)
		{
			if (!Main.accHandsOnLoaded[i])
			{
				Main.accHandsOnTexture[i] = this.OurLoad<Texture2D>("Images/Acc_HandsOn_" + i);
				Main.accHandsOnLoaded[i] = true;
			}
		}

		protected void LoadAccHandsOff(int i)
		{
			if (!Main.accHandsOffLoaded[i])
			{
				Main.accHandsOffTexture[i] = this.OurLoad<Texture2D>("Images/Acc_HandsOff_" + i);
				Main.accHandsOffLoaded[i] = true;
			}
		}

		protected void LoadAccBack(int i)
		{
			if (!Main.accBackLoaded[i])
			{
				Main.accBackTexture[i] = this.OurLoad<Texture2D>("Images/Acc_Back_" + i);
				Main.accBackLoaded[i] = true;
			}
		}

		protected void LoadAccFront(int i)
		{
			if (!Main.accFrontLoaded[i])
			{
				Main.accFrontTexture[i] = this.OurLoad<Texture2D>("Images/Acc_Front_" + i);
				Main.accFrontLoaded[i] = true;
			}
		}

		protected void LoadAccShoes(int i)
		{
			if (!Main.accShoesLoaded[i])
			{
				Main.accShoesTexture[i] = this.OurLoad<Texture2D>("Images/Acc_Shoes_" + i);
				Main.accShoesLoaded[i] = true;
			}
		}

		protected void LoadAccWaist(int i)
		{
			if (!Main.accWaistLoaded[i])
			{
				Main.accWaistTexture[i] = this.OurLoad<Texture2D>("Images/Acc_Waist_" + i);
				Main.accWaistLoaded[i] = true;
			}
		}

		protected void LoadAccShield(int i)
		{
			if (!Main.accShieldLoaded[i])
			{
				Main.accShieldTexture[i] = this.OurLoad<Texture2D>("Images/Acc_Shield_" + i);
				Main.accShieldLoaded[i] = true;
			}
		}

		protected void LoadAccNeck(int i)
		{
			if (!Main.accNeckLoaded[i])
			{
				Main.accNeckTexture[i] = this.OurLoad<Texture2D>("Images/Acc_Neck_" + i);
				Main.accNeckLoaded[i] = true;
			}
		}

		protected void LoadAccFace(int i)
		{
			if (!Main.accFaceLoaded[i])
			{
				Main.accFaceTexture[i] = this.OurLoad<Texture2D>("Images/Acc_Face_" + i);
				Main.accFaceLoaded[i] = true;
			}
		}

		protected void LoadAccBalloon(int i)
		{
			if (!Main.accballoonLoaded[i])
			{
				Main.accBalloonTexture[i] = this.OurLoad<Texture2D>("Images/Acc_Balloon_" + i);
				Main.accballoonLoaded[i] = true;
			}
		}

		protected void LoadFlameRing()
		{
			if (!Main.flameRingLoaded)
			{
				this.flameRingTexture = this.OurLoad<Texture2D>("Images/FlameRing");
				Main.flameRingLoaded = true;
			}
		}

		protected void DrawSurfaceBG()
		{
			float scale = SkyManager.Instance.ProcessCloudAlpha();
			if (!Main.mapFullscreen && (double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
			{
				for (int i = 0; i < 200; i++)
				{
					if (Main.cloud[i].active && Main.cloud[i].scale < 1f)
					{
						Microsoft.Xna.Framework.Color value = Main.cloud[i].cloudColor(Main.bgColor);
						float num = Main.cloud[i].scale * 0.8f;
						float num2 = (Main.cloud[i].scale + 1f) / 2f * 0.9f;
						value.R = (byte)((float)value.R * num);
						value.G = (byte)((float)value.G * num2);
						Main.atmo = 1f;
						float num3 = Main.cloud[i].position.Y * ((float)Main.screenHeight / 600f);
						num3 = Main.cloud[i].position.Y + (float)((int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 750.0 + 830.0)) + (float)((int)this.scAdj);
						Main.spriteBatch.Draw(Main.cloudTexture[Main.cloud[i].type], new Vector2(Main.cloud[i].position.X + (float)Main.cloudTexture[Main.cloud[i].type].Width * 0.5f, num3 + (float)Main.cloudTexture[Main.cloud[i].type].Height * 0.5f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.cloudTexture[Main.cloud[i].type].Width, Main.cloudTexture[Main.cloud[i].type].Height)), value * scale, Main.cloud[i].rotation, new Vector2((float)Main.cloudTexture[Main.cloud[i].type].Width * 0.5f, (float)Main.cloudTexture[Main.cloud[i].type].Height * 0.5f), Main.cloud[i].scale, Main.cloud[i].spriteDir, 0f);
					}
				}
			}
			if (Main.invasionType == 4 && !SkyManager.Instance["Martian"].IsActive())
			{
				SkyManager.Instance.Activate("Martian", default(Vector2), new object[0]);
			}
			else if (Main.invasionType != 4 && SkyManager.Instance["Martian"].IsActive())
			{
				SkyManager.Instance.Deactivate("Martian", new object[0]);
			}
			SkyManager.Instance.ResetDepthTracker();
			Main.atmo = 1f;
			Main.bgScale *= 2f;
			this.bgParallax = 0.15;
			if (Main.atmo < 1f)
			{
				Main.backColor.R = (byte)((float)Main.backColor.R * Main.atmo);
				Main.backColor.G = (byte)((float)Main.backColor.G * Main.atmo);
				Main.backColor.B = (byte)((float)Main.backColor.B * Main.atmo);
				Main.backColor.A = (byte)((float)Main.backColor.A * Main.atmo);
			}
			if (!Main.mapFullscreen && (double)(Main.screenPosition.Y / 16f) <= Main.worldSurface + 10.0)
			{
				if (Main.BackgroundEnabled)
				{
					if (Main.cloudBGActive > 0f)
					{
						Main.cloudBGAlpha += 0.0005f * (float)Main.dayRate;
						if (Main.cloudBGAlpha > 1f)
						{
							Main.cloudBGAlpha = 1f;
						}
					}
					else
					{
						Main.cloudBGAlpha -= 0.0005f * (float)Main.dayRate;
						if (Main.cloudBGAlpha < 0f)
						{
							Main.cloudBGAlpha = 0f;
						}
					}
					if (Main.cloudBGAlpha > 0f)
					{
						this.LoadBackground(Main.cloudBG[0]);
						this.LoadBackground(Main.cloudBG[1]);
						Main.bgScale *= 2f;
						this.bgParallax = 0.15;
						float num4 = Main.cloudBGAlpha;
						if (num4 > 1f)
						{
							num4 = 1f;
						}
						Main.bgScale = 1.65f;
						this.bgParallax = 0.090000003576278687;
						if (base.IsActive)
						{
							Main.cloudBGX[0] += Main.windSpeed * (float)this.bgParallax * 5f * (float)Main.dayRate;
						}
						if (Main.cloudBGX[0] > (float)Main.backgroundWidth[Main.cloudBG[0]] * Main.bgScale)
						{
							Main.cloudBGX[0] -= (float)Main.backgroundWidth[Main.cloudBG[0]] * Main.bgScale;
						}
						if (Main.cloudBGX[0] < (float)(-(float)Main.backgroundWidth[Main.cloudBG[0]]) * Main.bgScale)
						{
							Main.cloudBGX[0] += (float)Main.backgroundWidth[Main.cloudBG[0]] * Main.bgScale;
						}
						Main.bgW = (int)((float)Main.backgroundWidth[Main.cloudBG[0]] * Main.bgScale);
						this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 900.0 + 600.0) + (int)this.scAdj;
						if (Main.gameMenu)
						{
							this.bgTop = -150;
						}
						this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2) - (double)Main.bgW);
						this.bgStart += (int)Main.cloudBGX[0];
						this.bgLoops = Main.screenWidth / Main.bgW + 2 + 2;
						Main.backColor = Main.trueBackColor;
						Main.backColor.R = (byte)((float)Main.backColor.R * num4);
						Main.backColor.G = (byte)((float)Main.backColor.G * num4);
						Main.backColor.B = (byte)((float)Main.backColor.B * num4);
						Main.backColor.A = (byte)((float)Main.backColor.A * num4);
						SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
						for (int j = 0; j < this.bgLoops; j++)
						{
							Main.spriteBatch.Draw(Main.backgroundTexture[Main.cloudBG[0]], new Vector2((float)(this.bgStart + Main.bgW * j), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.cloudBG[0]], Main.backgroundHeight[Main.cloudBG[0]])), Main.backColor * scale, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
						}
						num4 = Main.cloudBGAlpha * 1.5f;
						if (num4 > 1f)
						{
							num4 = 1f;
						}
						Main.backColor = Main.trueBackColor;
						Main.backColor.R = (byte)((float)Main.backColor.R * num4);
						Main.backColor.G = (byte)((float)Main.backColor.G * num4);
						Main.backColor.B = (byte)((float)Main.backColor.B * num4);
						Main.backColor.A = (byte)((float)Main.backColor.A * num4);
						Main.bgScale = 1.85f;
						this.bgParallax = 0.12;
						if (base.IsActive)
						{
							Main.cloudBGX[1] += Main.windSpeed * (float)this.bgParallax * 5f * (float)Main.dayRate;
						}
						if (Main.cloudBGX[1] > (float)Main.backgroundWidth[Main.cloudBG[1]] * Main.bgScale)
						{
							Main.cloudBGX[1] -= (float)Main.backgroundWidth[Main.cloudBG[1]] * Main.bgScale;
						}
						if (Main.cloudBGX[1] < (float)(-(float)Main.backgroundWidth[Main.cloudBG[1]]) * Main.bgScale)
						{
							Main.cloudBGX[1] += (float)Main.backgroundWidth[Main.cloudBG[1]] * Main.bgScale;
						}
						Main.bgW = (int)((float)Main.backgroundWidth[Main.cloudBG[1]] * Main.bgScale);
						this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1100.0 + 750.0) + (int)this.scAdj;
						if (Main.gameMenu)
						{
							this.bgTop = -50;
						}
						this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2) - (double)Main.bgW);
						this.bgStart += (int)Main.cloudBGX[1];
						this.bgLoops = Main.screenWidth / Main.bgW + 2 + 2;
						SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
						for (int k = 0; k < this.bgLoops; k++)
						{
							Main.spriteBatch.Draw(Main.backgroundTexture[Main.cloudBG[1]], new Vector2((float)(this.bgStart + Main.bgW * k), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.cloudBG[1]], Main.backgroundHeight[Main.cloudBG[1]])), Main.backColor * scale, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
						}
					}
					this.LoadBackground(Main.treeMntBG[0]);
					this.LoadBackground(Main.treeMntBG[1]);
					Main.bgScale = 1f;
					this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1300.0 + 1090.0) + (int)this.scAdj;
					Main.bgScale *= 2f;
					this.bgParallax = 0.15;
					Main.bgW = (int)((float)Main.backgroundWidth[Main.treeMntBG[0]] * Main.bgScale);
					SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
					this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
					if (Main.bgW == 0)
					{
						Main.bgW = 1024;
					}
					this.bgLoops = Main.screenWidth / Main.bgW + 2;
					if (Main.gameMenu)
					{
						this.bgTop = 100;
					}
					if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
					{
						Main.backColor = Main.trueBackColor;
						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[0]);
						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[0]);
						Main.backColor.B = (byte)((float)Main.backColor.B * Main.bgAlpha2[0]);
						Main.backColor.A = (byte)((float)Main.backColor.A * Main.bgAlpha2[0]);
						if (Main.bgAlpha2[0] > 0f)
						{
							if (Main.treeMntBG[0] == 93 || (Main.treeMntBG[0] >= 168 && Main.treeMntBG[0] <= 170))
							{
								this.bgTop -= 50;
							}
							if (Main.treeMntBG[0] == 171)
							{
								this.bgTop -= 100;
							}
							if (Main.treeMntBG[0] == 176)
							{
								this.bgTop += 250;
							}
							if (Main.treeMntBG[0] == 179)
							{
								this.bgTop -= 100;
							}
							for (int l = 0; l < this.bgLoops; l++)
							{
								Main.spriteBatch.Draw(Main.backgroundTexture[Main.treeMntBG[0]], new Vector2((float)(this.bgStart + Main.bgW * l), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.treeMntBG[0]], Main.backgroundHeight[Main.treeMntBG[0]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
							}
							if (Main.treeMntBG[0] == 93 || (Main.treeMntBG[0] >= 168 && Main.treeMntBG[0] <= 170))
							{
								this.bgTop += 50;
							}
							if (Main.treeMntBG[0] == 171)
							{
								this.bgTop += 100;
							}
							if (Main.treeMntBG[0] == 176)
							{
								this.bgTop -= 250;
							}
							if (Main.treeMntBG[0] == 179)
							{
								this.bgTop += 100;
							}
						}
						Main.backColor = Main.trueBackColor;
						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[1]);
						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[1]);
						Main.backColor.B = (byte)((float)Main.backColor.B * Main.bgAlpha2[1]);
						Main.backColor.A = (byte)((float)Main.backColor.A * Main.bgAlpha2[1]);
						if (Main.bgAlpha2[1] > 0f)
						{
							this.LoadBackground(23);
							for (int m = 0; m < this.bgLoops; m++)
							{
								Main.spriteBatch.Draw(Main.backgroundTexture[23], new Vector2((float)(this.bgStart + Main.bgW * m), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[23], Main.backgroundHeight[23])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
							}
						}
						Main.backColor = Main.trueBackColor;
						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[2]);
						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[2]);
						Main.backColor.B = (byte)((float)Main.backColor.B * Main.bgAlpha2[2]);
						Main.backColor.A = (byte)((float)Main.backColor.A * Main.bgAlpha2[2]);
						if (Main.bgAlpha2[2] > 0f)
						{
							this.LoadBackground(24);
							for (int n = 0; n < this.bgLoops; n++)
							{
								Main.spriteBatch.Draw(Main.backgroundTexture[24], new Vector2((float)(this.bgStart + Main.bgW * n), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[24], Main.backgroundHeight[24])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
							}
						}
						Main.backColor = Main.trueBackColor;
						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[4]);
						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[4]);
						Main.backColor.B = (byte)((float)Main.backColor.B * Main.bgAlpha2[4]);
						Main.backColor.A = (byte)((float)Main.backColor.A * Main.bgAlpha2[4]);
						if (Main.bgAlpha2[4] > 0f)
						{
							this.LoadBackground(Main.snowMntBG[0]);
							for (int num5 = 0; num5 < this.bgLoops; num5++)
							{
								Main.spriteBatch.Draw(Main.backgroundTexture[Main.snowMntBG[0]], new Vector2((float)(this.bgStart + Main.bgW * num5), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.snowMntBG[0]], Main.backgroundHeight[Main.snowMntBG[0]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
							}
						}
						Main.backColor = Main.trueBackColor;
						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[5]);
						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[5]);
						Main.backColor.B = (byte)((float)Main.backColor.B * Main.bgAlpha2[5]);
						Main.backColor.A = (byte)((float)Main.backColor.A * Main.bgAlpha2[5]);
						if (Main.bgAlpha2[5] > 0f)
						{
							this.LoadBackground(24);
							for (int num6 = 0; num6 < this.bgLoops; num6++)
							{
								Main.spriteBatch.Draw(Main.backgroundTexture[24], new Vector2((float)(this.bgStart + Main.bgW * num6), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[24], Main.backgroundHeight[24])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
							}
						}
						SkyManager.Instance.DrawToDepth(Main.spriteBatch, 5f);
					}
				}
				this.cTop = (float)(this.bgTop - 50);
				if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
				{
					for (int num7 = 0; num7 < 200; num7++)
					{
						if (Main.cloud[num7].active && (double)Main.cloud[num7].scale < 1.15 && Main.cloud[num7].scale >= 1f)
						{
							Microsoft.Xna.Framework.Color value2 = Main.cloud[num7].cloudColor(Main.bgColor);
							if (Main.atmo < 1f)
							{
								value2.R = (byte)((float)value2.R * Main.atmo);
								value2.G = (byte)((float)value2.G * Main.atmo);
								value2.B = (byte)((float)value2.B * Main.atmo);
								value2.A = (byte)((float)value2.A * Main.atmo);
							}
							float num8 = Main.cloud[num7].position.Y * ((float)Main.screenHeight / 600f);
							float num9 = (float)((double)(Main.screenPosition.Y / 16f - 24f) / Main.worldSurface);
							if (num9 < 0f)
							{
								num9 = 0f;
							}
							if (num9 > 1f)
							{
							}
							if (Main.gameMenu)
							{
							}
							Main.spriteBatch.Draw(Main.cloudTexture[Main.cloud[num7].type], new Vector2(Main.cloud[num7].position.X + (float)Main.cloudTexture[Main.cloud[num7].type].Width * 0.5f, num8 + (float)Main.cloudTexture[Main.cloud[num7].type].Height * 0.5f + this.cTop + 200f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.cloudTexture[Main.cloud[num7].type].Width, Main.cloudTexture[Main.cloud[num7].type].Height)), value2 * scale, Main.cloud[num7].rotation, new Vector2((float)Main.cloudTexture[Main.cloud[num7].type].Width * 0.5f, (float)Main.cloudTexture[Main.cloud[num7].type].Height * 0.5f), Main.cloud[num7].scale, Main.cloud[num7].spriteDir, 0f);
						}
					}
				}
				if (Main.holyTiles > 0 && Main.BackgroundEnabled)
				{
					this.bgParallax = 0.17;
					Main.bgScale = 1.1f;
					Main.bgScale *= 2f;
					Main.bgW = (int)((double)(3500f * Main.bgScale) * 1.05);
					this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
					this.bgLoops = Main.screenWidth / Main.bgW + 2;
					this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1400.0 + 900.0) + (int)this.scAdj;
					if (Main.gameMenu)
					{
						this.bgTop = 230;
						this.bgStart -= 500;
					}
					SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
					Microsoft.Xna.Framework.Color color = Main.trueBackColor;
					float num10 = (float)Main.holyTiles / 400f;
					if (num10 > 0.5f)
					{
						num10 = 0.5f;
					}
					color.R = (byte)((float)color.R * num10);
					color.G = (byte)((float)color.G * num10);
					color.B = (byte)((float)color.B * num10);
					color.A = (byte)((float)color.A * num10 * 0.8f);
					if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
					{
						this.LoadBackground(18);
						this.LoadBackground(19);
						for (int num11 = 0; num11 < this.bgLoops; num11++)
						{
							Main.spriteBatch.Draw(Main.backgroundTexture[18], new Vector2((float)(this.bgStart + Main.bgW * num11), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[18], Main.backgroundHeight[18])), color, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
							Main.spriteBatch.Draw(Main.backgroundTexture[19], new Vector2((float)(this.bgStart + Main.bgW * num11 + 1700), (float)(this.bgTop + 100)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[19], Main.backgroundHeight[19])), color, 0f, default(Vector2), Main.bgScale * 0.9f, SpriteEffects.None, 0f);
						}
					}
				}
				if (Main.treeMntBG[1] > -1)
				{
					this.LoadBackground(Main.treeMntBG[1]);
					this.bgParallax = 0.2;
					Main.bgScale = 1.15f;
					Main.bgScale *= 2f;
					Main.bgW = (int)((float)Main.backgroundWidth[Main.treeMntBG[1]] * Main.bgScale);
					this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
					this.bgLoops = Main.screenWidth / Main.bgW + 2;
					this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1400.0 + 1260.0) + (int)this.scAdj;
				}
				if (Main.BackgroundEnabled)
				{
					if (Main.gameMenu)
					{
						this.bgTop = 230;
						this.bgStart -= 500;
					}
					SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
					if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
					{
						Main.backColor = Main.trueBackColor;
						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[0]);
						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[0]);
						Main.backColor.B = (byte)((float)Main.backColor.B * Main.bgAlpha2[0]);
						Main.backColor.A = (byte)((float)Main.backColor.A * Main.bgAlpha2[0]);
						if (Main.bgAlpha2[0] > 0f && Main.treeMntBG[1] > -1)
						{
							if (Main.treeMntBG[1] == 172)
							{
								this.bgTop += 130;
							}
							if (Main.treeMntBG[1] == 177)
							{
								this.bgTop += 200;
							}
							if (Main.treeMntBG[1] >= 180 && Main.treeMntBG[1] <= 183)
							{
								this.bgTop -= 350;
							}
							for (int num12 = 0; num12 < this.bgLoops; num12++)
							{
								Main.spriteBatch.Draw(Main.backgroundTexture[Main.treeMntBG[1]], new Vector2((float)(this.bgStart + Main.bgW * num12), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.treeMntBG[1]], Main.backgroundHeight[Main.treeMntBG[1]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
							}
							if (Main.treeMntBG[1] == 172)
							{
								this.bgTop -= 130;
							}
							if (Main.treeMntBG[1] == 177)
							{
								this.bgTop -= 200;
							}
							if (Main.treeMntBG[1] >= 180 && Main.treeMntBG[1] <= 183)
							{
								this.bgTop += 350;
							}
						}
						Main.backColor = Main.trueBackColor;
						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[1]);
						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[1]);
						Main.backColor.B = (byte)((float)Main.backColor.B * Main.bgAlpha2[1]);
						Main.backColor.A = (byte)((float)Main.backColor.A * Main.bgAlpha2[1]);
						if (Main.bgAlpha2[1] > 0f)
						{
							this.LoadBackground(22);
							for (int num13 = 0; num13 < this.bgLoops; num13++)
							{
								Main.spriteBatch.Draw(Main.backgroundTexture[22], new Vector2((float)(this.bgStart + Main.bgW * num13), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[22], Main.backgroundHeight[22])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
							}
						}
						Main.backColor = Main.trueBackColor;
						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[2]);
						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[2]);
						Main.backColor.B = (byte)((float)Main.backColor.B * Main.bgAlpha2[2]);
						Main.backColor.A = (byte)((float)Main.backColor.A * Main.bgAlpha2[2]);
						if (Main.bgAlpha2[2] > 0f)
						{
							this.LoadBackground(25);
							for (int num14 = 0; num14 < this.bgLoops; num14++)
							{
								Main.spriteBatch.Draw(Main.backgroundTexture[25], new Vector2((float)(this.bgStart + Main.bgW * num14), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[25], Main.backgroundHeight[25])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
							}
						}
						Main.backColor = Main.trueBackColor;
						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[3]);
						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[3]);
						Main.backColor.B = (byte)((float)Main.backColor.B * Main.bgAlpha2[3]);
						Main.backColor.A = (byte)((float)Main.backColor.A * Main.bgAlpha2[3]);
						if (Main.bgAlpha2[3] > 0f)
						{
							this.LoadBackground(Main.oceanBG);
							for (int num15 = 0; num15 < this.bgLoops; num15++)
							{
								Main.spriteBatch.Draw(Main.backgroundTexture[Main.oceanBG], new Vector2((float)(this.bgStart + Main.bgW * num15), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.oceanBG], Main.backgroundHeight[Main.oceanBG])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
							}
						}
						Main.backColor = Main.trueBackColor;
						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[4]);
						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[4]);
						Main.backColor.B = (byte)((float)Main.backColor.B * Main.bgAlpha2[4]);
						Main.backColor.A = (byte)((float)Main.backColor.A * Main.bgAlpha2[4]);
						if (Main.bgAlpha2[4] > 0f)
						{
							this.LoadBackground(Main.snowMntBG[1]);
							for (int num16 = 0; num16 < this.bgLoops; num16++)
							{
								Main.spriteBatch.Draw(Main.backgroundTexture[Main.snowMntBG[1]], new Vector2((float)(this.bgStart + Main.bgW * num16), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.snowMntBG[1]], Main.backgroundHeight[Main.snowMntBG[1]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
							}
						}
						Main.backColor = Main.trueBackColor;
						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[5]);
						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[5]);
						Main.backColor.B = (byte)((float)Main.backColor.B * Main.bgAlpha2[5]);
						Main.backColor.A = (byte)((float)Main.backColor.A * Main.bgAlpha2[5]);
						if (Main.bgAlpha2[5] > 0f)
						{
							this.LoadBackground(42);
							for (int num17 = 0; num17 < this.bgLoops; num17++)
							{
								Main.spriteBatch.Draw(Main.backgroundTexture[42], new Vector2((float)(this.bgStart + Main.bgW * num17), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[42], Main.backgroundHeight[42])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
							}
						}
					}
				}
				this.cTop = (float)this.bgTop * 1.01f - 150f;
				if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
				{
					for (int num18 = 0; num18 < 200; num18++)
					{
						if (Main.cloud[num18].active && Main.cloud[num18].scale >= 1.15f)
						{
							Microsoft.Xna.Framework.Color value3 = Main.cloud[num18].cloudColor(Main.bgColor);
							if (Main.atmo < 1f)
							{
								value3.R = (byte)((float)value3.R * Main.atmo);
								value3.G = (byte)((float)value3.G * Main.atmo);
								value3.B = (byte)((float)value3.B * Main.atmo);
								value3.A = (byte)((float)value3.A * Main.atmo);
							}
							float num19 = Main.cloud[num18].position.Y * ((float)Main.screenHeight / 600f) - 100f;
							float num20 = (float)((double)(Main.screenPosition.Y / 16f - 24f) / Main.worldSurface);
							if (num20 < 0f)
							{
								num20 = 0f;
							}
							if (num20 > 1f)
							{
							}
							if (Main.gameMenu)
							{
							}
							Main.spriteBatch.Draw(Main.cloudTexture[Main.cloud[num18].type], new Vector2(Main.cloud[num18].position.X + (float)Main.cloudTexture[Main.cloud[num18].type].Width * 0.5f, num19 + (float)Main.cloudTexture[Main.cloud[num18].type].Height * 0.5f + this.cTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.cloudTexture[Main.cloud[num18].type].Width, Main.cloudTexture[Main.cloud[num18].type].Height)), value3 * scale, Main.cloud[num18].rotation, new Vector2((float)Main.cloudTexture[Main.cloud[num18].type].Width * 0.5f, (float)Main.cloudTexture[Main.cloud[num18].type].Height * 0.5f), Main.cloud[num18].scale, Main.cloud[num18].spriteDir, 0f);
						}
					}
				}
			}
			if (!Main.mapFullscreen)
			{
				for (int num21 = 0; num21 < 10; num21++)
				{
					if (Main.bgStyle == num21)
					{
						Main.bgAlpha[num21] += Main.tranSpeed;
						if (Main.bgAlpha[num21] > 1f)
						{
							Main.bgAlpha[num21] = 1f;
						}
					}
					else
					{
						Main.bgAlpha[num21] -= Main.tranSpeed;
						if (Main.bgAlpha[num21] < 0f)
						{
							Main.bgAlpha[num21] = 0f;
						}
					}
					if (Main.BackgroundEnabled)
					{
						Main.backColor = Main.trueBackColor;
						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha[num21]);
						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha[num21]);
						Main.backColor.B = (byte)((float)Main.backColor.B * Main.bgAlpha[num21]);
						Main.backColor.A = (byte)((float)Main.backColor.A * Main.bgAlpha[num21]);
						if (Main.bgAlpha[num21] > 0f && num21 == 3)
						{
							this.LoadBackground(Main.jungleBG[0]);
							Main.bgScale = 1.25f;
							Main.bgScale *= 2f;
							Main.bgW = (int)((float)Main.backgroundWidth[Main.jungleBG[0]] * Main.bgScale);
							this.bgParallax = 0.4;
							SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1800.0 + 1660.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 320;
							}
							if (Main.jungleBG[0] == 59)
							{
								this.bgTop -= 200;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num22 = 0; num22 < this.bgLoops; num22++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[Main.jungleBG[0]], new Vector2((float)(this.bgStart + Main.bgW * num22), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.jungleBG[0]], Main.backgroundHeight[Main.jungleBG[0]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
							this.LoadBackground(Main.jungleBG[1]);
							Main.bgScale = 1.31f;
							Main.bgScale *= 2f;
							Main.bgW = (int)((float)Main.backgroundWidth[Main.jungleBG[1]] * Main.bgScale);
							this.bgParallax = 0.43;
							SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1950.0 + 1840.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 400;
								this.bgStart -= 80;
							}
							if (Main.jungleBG[1] == 60)
							{
								this.bgTop -= 175;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num23 = 0; num23 < this.bgLoops; num23++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[Main.jungleBG[1]], new Vector2((float)(this.bgStart + Main.bgW * num23), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.jungleBG[1]], Main.backgroundHeight[Main.jungleBG[1]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.FlipHorizontally, 0f);
								}
							}
							Main.bgScale = 1.34f;
							Main.bgScale *= 2f;
							this.LoadBackground(Main.jungleBG[2]);
							Main.bgW = (int)((float)Main.backgroundWidth[Main.jungleBG[2]] * Main.bgScale);
							this.bgParallax = 0.49;
							SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 2100.0 + 2060.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 480;
								this.bgStart -= 120;
							}
							if (Main.jungleBG[2] == 61)
							{
								this.bgTop -= 150;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num24 = 0; num24 < this.bgLoops; num24++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[Main.jungleBG[2]], new Vector2((float)(this.bgStart + Main.bgW * num24), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.jungleBG[2]], Main.backgroundHeight[Main.jungleBG[2]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
						}
						if (Main.bgAlpha[num21] > 0f && num21 == 2)
						{
							this.LoadBackground(Main.desertBG[0]);
							Main.bgScale = 1.25f;
							Main.bgScale *= 2f;
							Main.bgW = (int)((float)Main.backgroundWidth[Main.desertBG[0]] * Main.bgScale);
							this.bgParallax = 0.37;
							SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1800.0 + 1750.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 320;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num25 = 0; num25 < this.bgLoops; num25++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[Main.desertBG[0]], new Vector2((float)(this.bgStart + Main.bgW * num25), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.desertBG[0]], Main.backgroundHeight[Main.desertBG[0]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
							Main.bgScale = 1.34f;
							Main.bgScale *= 2f;
							this.LoadBackground(Main.desertBG[1]);
							Main.bgW = (int)((float)Main.backgroundWidth[Main.desertBG[1]] * Main.bgScale);
							this.bgParallax = 0.49;
							SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 2100.0 + 2150.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 480;
								this.bgStart -= 120;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num26 = 0; num26 < this.bgLoops; num26++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[Main.desertBG[1]], new Vector2((float)(this.bgStart + Main.bgW * num26), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.desertBG[1]], Main.backgroundHeight[Main.desertBG[1]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
						}
						if (Main.bgAlpha[num21] > 0f && num21 == 5)
						{
							this.LoadBackground(26);
							Main.bgScale = 1.25f;
							Main.bgScale *= 2f;
							Main.bgW = (int)((float)Main.backgroundWidth[26] * Main.bgScale);
							this.bgParallax = 0.37;
							SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1800.0 + 1750.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 320;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num27 = 0; num27 < this.bgLoops; num27++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[26], new Vector2((float)(this.bgStart + Main.bgW * num27), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[26], Main.backgroundHeight[26])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
							Main.bgScale = 1.34f;
							Main.bgScale *= 2f;
							this.LoadBackground(27);
							Main.bgW = (int)((float)Main.backgroundWidth[27] * Main.bgScale);
							this.bgParallax = 0.49;
							SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 2100.0 + 2150.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 480;
								this.bgStart -= 120;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num28 = 0; num28 < this.bgLoops; num28++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[27], new Vector2((float)(this.bgStart + Main.bgW * num28), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[27], Main.backgroundHeight[27])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
						}
						if (Main.bgAlpha[num21] > 0f && num21 == 1)
						{
							Main.bgScale = 1.25f;
							Main.bgScale *= 2f;
							this.LoadBackground(Main.corruptBG[0]);
							Main.bgW = (int)((float)Main.backgroundWidth[Main.corruptBG[0]] * Main.bgScale);
							this.bgParallax = 0.4;
							SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1800.0 + 1500.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 320;
							}
							if (Main.corruptBG[0] == 56)
							{
								this.bgTop -= 100;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num29 = 0; num29 < this.bgLoops; num29++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[Main.corruptBG[0]], new Vector2((float)(this.bgStart + Main.bgW * num29), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.corruptBG[0]], Main.backgroundHeight[Main.corruptBG[0]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
							Main.bgScale = 1.31f;
							Main.bgScale *= 2f;
							this.LoadBackground(Main.corruptBG[1]);
							Main.bgW = (int)((float)Main.backgroundWidth[Main.corruptBG[1]] * Main.bgScale);
							this.bgParallax = 0.43;
							SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1950.0 + 1750.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 400;
								this.bgStart -= 80;
							}
							if (Main.corruptBG[0] == 56)
							{
								this.bgTop -= 100;
							}
							if (Main.bgW == 0)
							{
								Main.bgW = 1;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								try
								{
									for (int num30 = 0; num30 < this.bgLoops; num30++)
									{
										Main.spriteBatch.Draw(Main.backgroundTexture[Main.corruptBG[1]], new Vector2((float)(this.bgStart + Main.bgW * num30), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.corruptBG[1]], Main.backgroundHeight[Main.corruptBG[1]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.FlipHorizontally, 0f);
									}
								}
								catch
								{
									this.LoadBackground(Main.corruptBG[1]);
								}
							}
							Main.bgScale = 1.34f;
							Main.bgScale *= 2f;
							this.LoadBackground(Main.corruptBG[2]);
							Main.bgW = (int)((float)Main.backgroundWidth[Main.corruptBG[2]] * Main.bgScale);
							if (Main.bgW == 0)
							{
								Main.bgW = 150;
							}
							this.bgParallax = 0.49;
							SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 2100.0 + 2000.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 480;
								this.bgStart -= 120;
							}
							if (Main.corruptBG[0] == 56)
							{
								this.bgTop -= 100;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num31 = 0; num31 < this.bgLoops; num31++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[Main.corruptBG[2]], new Vector2((float)(this.bgStart + Main.bgW * num31), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.corruptBG[2]], Main.backgroundHeight[Main.corruptBG[2]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
						}
						if (Main.bgAlpha[num21] > 0f && num21 == 6)
						{
							Main.bgScale = 1.25f;
							Main.bgScale *= 2f;
							this.LoadBackground(Main.hallowBG[0]);
							Main.bgW = (int)((float)Main.backgroundWidth[Main.hallowBG[0]] * Main.bgScale);
							this.bgParallax = 0.4;
							SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1.2f / (float)this.bgParallax);
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1800.0 + 1500.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 320;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num32 = 0; num32 < this.bgLoops; num32++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[Main.hallowBG[0]], new Vector2((float)(this.bgStart + Main.bgW * num32), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.hallowBG[0]], Main.backgroundHeight[Main.hallowBG[0]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
							Main.bgScale = 1.31f;
							Main.bgScale *= 2f;
							this.LoadBackground(Main.hallowBG[1]);
							Main.bgW = (int)((float)Main.backgroundWidth[Main.hallowBG[1]] * Main.bgScale);
							this.bgParallax = 0.43;
							SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1950.0 + 1750.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 400;
								this.bgStart -= 80;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num33 = 0; num33 < this.bgLoops; num33++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[Main.hallowBG[1]], new Vector2((float)(this.bgStart + Main.bgW * num33), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.hallowBG[1]], Main.backgroundHeight[Main.hallowBG[1]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
							Main.bgScale = 1.34f;
							Main.bgScale *= 2f;
							this.LoadBackground(Main.hallowBG[2]);
							Main.bgW = (int)((float)Main.backgroundWidth[Main.hallowBG[2]] * Main.bgScale);
							this.bgParallax = 0.49;
							SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 2100.0 + 2000.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 480;
								this.bgStart -= 120;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num34 = 0; num34 < this.bgLoops; num34++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[Main.hallowBG[2]], new Vector2((float)(this.bgStart + Main.bgW * num34), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.hallowBG[2]], Main.backgroundHeight[Main.hallowBG[2]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
						}
						if (Main.bgAlpha[num21] > 0f && num21 == 0)
						{
							Main.bgScale = 1.25f;
							Main.bgScale *= 2f;
							this.bgParallax = 0.4;
							if (Main.treeBG[0] == 91)
							{
								this.bgParallax = 0.27000001072883606;
								Main.bgScale = 1.2f;
								Main.bgScale *= 2f;
							}
							if (Main.treeBG[0] == 173)
							{
								this.bgParallax = 0.25;
								Main.bgScale = 1.3f;
								Main.bgScale *= 2f;
							}
							if (Main.treeBG[0] == 178)
							{
								this.bgParallax = 0.30000001192092896;
								Main.bgScale = 1.2f;
								Main.bgScale *= 2f;
							}
							if (Main.treeBG[0] == 184)
							{
								this.bgParallax = 0.25;
								Main.bgScale = 1.2f;
								Main.bgScale *= 2f;
							}
							SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
							if (Main.treeBG[0] >= 0)
							{
								this.LoadBackground(Main.treeBG[0]);
								Main.bgW = (int)((float)Main.backgroundWidth[Main.treeBG[0]] * Main.bgScale);
								this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
								this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1800.0 + 1500.0) + (int)this.scAdj;
								if (Main.treeBG[0] == 91)
								{
									this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1600.0 + 1400.0) + (int)this.scAdj;
								}
								if (Main.treeBG[0] == 173)
								{
									this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1600.0 + 1400.0) + (int)this.scAdj;
								}
								if (Main.treeBG[0] == 184)
								{
									this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1600.0 + 1400.0) + (int)this.scAdj;
								}
								if (Main.gameMenu)
								{
									this.bgTop = 320;
								}
								if (Main.treeBG[0] == 50)
								{
									this.bgTop -= 50;
								}
								if (Main.treeBG[0] == 53)
								{
									this.bgTop -= 100;
								}
								if (Main.treeBG[0] == 91)
								{
									this.bgTop += 200;
								}
								if (Main.treeBG[0] == 173)
								{
									this.bgTop += 200;
								}
								if (Main.treeBG[0] == 178)
								{
									this.bgTop += 75;
								}
								this.bgLoops = Main.screenWidth / Main.bgW + 2;
								if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
								{
									for (int num35 = 0; num35 < this.bgLoops; num35++)
									{
										if (Main.backgroundTexture[Main.treeBG[0]] != null)
										{
											Main.spriteBatch.Draw(Main.backgroundTexture[Main.treeBG[0]], new Vector2((float)(this.bgStart + Main.bgW * num35), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.treeBG[0]], Main.backgroundHeight[Main.treeBG[0]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
										}
									}
								}
							}
							if (Main.treeBG[1] >= 0)
							{
								this.LoadBackground(Main.treeBG[1]);
								Main.bgScale = 1.31f;
								Main.bgScale *= 2f;
								Main.bgW = (int)((float)Main.backgroundWidth[Main.treeBG[1]] * Main.bgScale);
								this.bgParallax = 0.43;
								SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
								this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
								this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1950.0 + 1750.0) + (int)this.scAdj;
								if (Main.gameMenu)
								{
									this.bgTop = 400;
									this.bgStart -= 80;
								}
								if (Main.treeBG[1] == 51)
								{
									this.bgTop -= 50;
								}
								if (Main.treeBG[1] == 54)
								{
									this.bgTop -= 100;
								}
								this.bgLoops = Main.screenWidth / Main.bgW + 2;
								if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
								{
									for (int num36 = 0; num36 < this.bgLoops; num36++)
									{
										Main.spriteBatch.Draw(Main.backgroundTexture[Main.treeBG[1]], new Vector2((float)(this.bgStart + Main.bgW * num36), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.treeBG[1]], Main.backgroundHeight[Main.treeBG[1]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.FlipHorizontally, 0f);
									}
								}
							}
							if (Main.treeBG[2] >= 0)
							{
								this.LoadBackground(Main.treeBG[2]);
								Main.bgScale = 1.34f;
								Main.bgScale *= 2f;
								this.bgParallax = 0.49;
								SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
								if (Main.treeBG[0] == 91)
								{
									Main.bgScale = 1.3f;
									Main.bgScale *= 2f;
									this.bgParallax = 0.42;
								}
								Main.bgW = (int)((float)Main.backgroundWidth[Main.treeBG[2]] * Main.bgScale);
								this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
								this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 2100.0 + 2000.0) + (int)this.scAdj;
								if (Main.gameMenu)
								{
									this.bgTop = 480;
									this.bgStart -= 120;
								}
								if (Main.treeBG[2] == 52)
								{
									this.bgTop -= 50;
								}
								if (Main.treeBG[2] == 55)
								{
									this.bgTop -= 100;
								}
								if (Main.treeBG[2] == 92)
								{
									this.bgTop += 150;
								}
								this.bgLoops = Main.screenWidth / Main.bgW + 2;
								if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
								{
									for (int num37 = 0; num37 < this.bgLoops; num37++)
									{
										Main.spriteBatch.Draw(Main.backgroundTexture[Main.treeBG[2]], new Vector2((float)(this.bgStart + Main.bgW * num37), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.treeBG[2]], Main.backgroundHeight[Main.treeBG[2]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
									}
								}
							}
						}
						if (Main.bgAlpha[num21] > 0f && num21 == 7)
						{
							if (Main.snowBG[0] >= 0)
							{
								Main.bgScale = 1.25f;
								Main.bgScale *= 2f;
								this.LoadBackground(Main.snowBG[0]);
								Main.bgW = (int)((float)Main.backgroundWidth[Main.snowBG[0]] * Main.bgScale);
								this.bgParallax = 0.4;
								SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
								this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
								this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1800.0 + 1500.0) + (int)this.scAdj;
								if (Main.gameMenu)
								{
									this.bgTop = 320;
								}
								this.bgLoops = Main.screenWidth / Main.bgW + 2;
								if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
								{
									for (int num38 = 0; num38 < this.bgLoops; num38++)
									{
										Main.spriteBatch.Draw(Main.backgroundTexture[Main.snowBG[0]], new Vector2((float)(this.bgStart + Main.bgW * num38), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.snowBG[0]], Main.backgroundHeight[Main.snowBG[0]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
									}
								}
							}
							if (Main.snowBG[1] >= 0)
							{
								Main.bgScale = 1.31f;
								Main.bgScale *= 2f;
								this.LoadBackground(Main.snowBG[1]);
								Main.bgW = (int)((float)Main.backgroundWidth[Main.snowBG[1]] * Main.bgScale);
								this.bgParallax = 0.43;
								SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
								this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
								this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1950.0 + 1750.0) + (int)this.scAdj;
								if (Main.gameMenu)
								{
									this.bgTop = 400;
									this.bgStart -= 80;
								}
								this.bgLoops = Main.screenWidth / Main.bgW + 2;
								if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
								{
									for (int num39 = 0; num39 < this.bgLoops; num39++)
									{
										Main.spriteBatch.Draw(Main.backgroundTexture[Main.snowBG[1]], new Vector2((float)(this.bgStart + Main.bgW * num39), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.snowBG[1]], Main.backgroundHeight[Main.snowBG[1]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
									}
								}
							}
							if (Main.snowBG[2] >= 0)
							{
								Main.bgScale = 1.34f;
								Main.bgScale *= 2f;
								this.LoadBackground(Main.snowBG[2]);
								Main.bgW = (int)((float)Main.backgroundWidth[Main.snowBG[2]] * Main.bgScale);
								this.bgParallax = 0.49;
								SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
								this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
								this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 2100.0 + 2000.0) + (int)this.scAdj;
								if (Main.gameMenu)
								{
									this.bgTop = 480;
									this.bgStart -= 120;
								}
								this.bgLoops = Main.screenWidth / Main.bgW + 2;
								if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
								{
									for (int num40 = 0; num40 < this.bgLoops; num40++)
									{
										Main.spriteBatch.Draw(Main.backgroundTexture[Main.snowBG[2]], new Vector2((float)(this.bgStart + Main.bgW * num40), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.snowBG[2]], Main.backgroundHeight[Main.snowBG[2]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
									}
								}
							}
						}
						if (Main.bgAlpha[num21] > 0f && num21 == 8)
						{
							Main.bgScale = 1.25f;
							Main.bgScale *= 2f;
							this.LoadBackground(Main.crimsonBG[0]);
							Main.bgW = (int)((float)Main.backgroundWidth[Main.crimsonBG[0]] * Main.bgScale);
							this.bgParallax = 0.4;
							SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1800.0 + 1500.0) + (int)this.scAdj;
							if (Main.crimsonBG[0] == 105)
							{
								this.bgTop += 50;
							}
							if (Main.crimsonBG[0] == 174)
							{
								this.bgTop -= 350;
							}
							if (Main.gameMenu)
							{
								this.bgTop = 320;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num41 = 0; num41 < this.bgLoops; num41++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[Main.crimsonBG[0]], new Vector2((float)(this.bgStart + Main.bgW * num41), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.crimsonBG[0]], Main.backgroundHeight[Main.crimsonBG[0]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
							Main.bgScale = 1.31f;
							Main.bgScale *= 2f;
							if (Main.crimsonBG[1] > -1)
							{
								this.LoadBackground(Main.crimsonBG[1]);
								Main.bgW = (int)((float)Main.backgroundWidth[Main.crimsonBG[1]] * Main.bgScale);
								this.bgParallax = 0.43;
								SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
								this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
								this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1950.0 + 1750.0) + (int)this.scAdj;
								if (Main.gameMenu)
								{
									this.bgTop = 400;
									this.bgStart -= 80;
								}
								this.bgLoops = Main.screenWidth / Main.bgW + 2;
								if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
								{
									for (int num42 = 0; num42 < this.bgLoops; num42++)
									{
										Main.spriteBatch.Draw(Main.backgroundTexture[Main.crimsonBG[1]], new Vector2((float)(this.bgStart + Main.bgW * num42), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.crimsonBG[1]], Main.backgroundHeight[Main.crimsonBG[1]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
									}
								}
							}
							Main.bgScale = 1.34f;
							Main.bgScale *= 2f;
							this.LoadBackground(Main.crimsonBG[2]);
							Main.bgW = (int)((float)Main.backgroundWidth[Main.crimsonBG[2]] * Main.bgScale);
							this.bgParallax = 0.49;
							SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 2100.0 + 2000.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 480;
								this.bgStart -= 120;
							}
							if (Main.crimsonBG[2] == 175)
							{
								this.bgStart -= 1000;
								this.bgTop -= 400;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num43 = 0; num43 < this.bgLoops; num43++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[Main.crimsonBG[2]], new Vector2((float)(this.bgStart + Main.bgW * num43), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[Main.crimsonBG[2]], Main.backgroundHeight[Main.crimsonBG[2]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
						}
						if (Main.bgAlpha[num21] > 0f && num21 == 9)
						{
							float num44 = (float)Main.backColor.A / 255f;
							Microsoft.Xna.Framework.Color color2 = Main.backColor;
							float num45 = (float)Main.rand.Next(28, 42) * 0.001f;
							num45 += (float)(270 - (int)Main.mouseTextColor) / 5000f;
							float num46 = 0.1f;
							float num47 = 0.15f + num45 / 2f;
							float num48 = 0.3f + num45;
							num46 *= 255f;
							num47 *= 255f;
							num48 *= 255f;
							num46 *= 0.33f * num44;
							num47 *= 0.33f * num44;
							num48 *= 0.33f * num44;
							if (num46 > 255f)
							{
								num46 = 255f;
							}
							if (num47 > 255f)
							{
								num47 = 255f;
							}
							if (num48 > 255f)
							{
								num48 = 255f;
							}
							if (num46 > (float)color2.R)
							{
								color2.R = (byte)num46;
							}
							if (num47 > (float)color2.G)
							{
								color2.G = (byte)num47;
							}
							if (num48 > (float)color2.B)
							{
								color2.B = (byte)num48;
							}
							Main.bgScale = 1.25f;
							Main.bgScale *= 2f;
							this.LoadBackground(46);
							Main.bgW = (int)((float)Main.backgroundWidth[46] * Main.bgScale);
							this.bgParallax = 0.4;
							SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1800.0 + 1400.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 320;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num49 = 0; num49 < this.bgLoops; num49++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[46], new Vector2((float)(this.bgStart + Main.bgW * num49), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[46], Main.backgroundHeight[46])), color2, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
							color2 = Main.backColor;
							num45 = (float)Main.rand.Next(28, 42) * 0.001f;
							num45 += (float)(270 - (int)Main.mouseTextColor) / 5000f;
							num46 = 0.1f;
							num47 = 0.175f + num45 / 2f;
							num48 = 0.3f + num45;
							num46 *= 255f;
							num47 *= 255f;
							num48 *= 255f;
							num46 *= 0.5f * num44;
							num47 *= 0.5f * num44;
							num48 *= 0.5f * num44;
							if (num46 > 255f)
							{
								num46 = 255f;
							}
							if (num47 > 255f)
							{
								num47 = 255f;
							}
							if (num48 > 255f)
							{
								num48 = 255f;
							}
							if (num46 > (float)color2.R)
							{
								color2.R = (byte)num46;
							}
							if (num47 > (float)color2.G)
							{
								color2.G = (byte)num47;
							}
							if (num48 > (float)color2.B)
							{
								color2.B = (byte)num48;
							}
							Main.bgScale = 1.32f;
							Main.bgScale *= 2f;
							this.LoadBackground(47);
							Main.bgW = (int)((float)Main.backgroundWidth[47] * Main.bgScale);
							this.bgParallax = 0.43;
							SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1950.0 + 1675.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 400;
								this.bgStart -= 80;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num50 = 0; num50 < this.bgLoops; num50++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[47], new Vector2((float)(this.bgStart + Main.bgW * num50), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[47], Main.backgroundHeight[47])), color2, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
							color2 = Main.backColor;
							num45 = (float)Main.rand.Next(28, 42) * 0.001f;
							num45 += (float)(270 - (int)Main.mouseTextColor) / 3000f;
							num46 = 0.125f;
							num47 = 0.2f + num45 / 2f;
							num48 = 0.3f + num45;
							num46 *= 255f * num44 * 0.75f;
							num47 *= 255f * num44 * 0.75f;
							num48 *= 255f * num44 * 0.75f;
							if (num46 > 255f)
							{
								num46 = 255f;
							}
							if (num47 > 255f)
							{
								num47 = 255f;
							}
							if (num48 > 255f)
							{
								num48 = 255f;
							}
							if (num46 > (float)color2.R)
							{
								color2.R = (byte)num46;
							}
							if (num47 > (float)color2.G)
							{
								color2.G = (byte)num47;
							}
							if (num48 > (float)color2.B)
							{
								color2.B = (byte)num48;
							}
							Main.bgScale = 1.36f;
							Main.bgScale *= 2f;
							this.LoadBackground(48);
							Main.bgW = (int)((float)Main.backgroundWidth[48] * Main.bgScale);
							this.bgParallax = 0.49;
							SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f / (float)this.bgParallax);
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 2100.0 + 1950.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 480;
								this.bgStart -= 120;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num51 = 0; num51 < this.bgLoops; num51++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[48], new Vector2((float)(this.bgStart + Main.bgW * num51), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[48], Main.backgroundHeight[48])), color2, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
							SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f);
						}
					}
				}
			}
			if (!Main.mapFullscreen && Main.cloudAlpha > 0f && (double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
			{
				this.bgParallax = 0.1;
				this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.backgroundWidth[Main.background]) - (double)(Main.backgroundWidth[Main.background] / 2));
				this.bgLoops = Main.screenWidth / Main.backgroundWidth[Main.background] + 2;
				this.bgStartY = 0;
				this.bgLoopsY = 0;
				this.bgTop = (int)((double)(-(double)Main.screenPosition.Y) / (Main.worldSurface * 16.0 - 600.0) * 200.0);
				for (int num52 = 0; num52 < this.bgLoops; num52++)
				{
					Microsoft.Xna.Framework.Color color3 = Main.bgColor;
					this.bgStart = 0;
					float num53 = Main.cloudAlpha;
					color3.R = (byte)((float)color3.R * num53);
					color3.G = (byte)((float)color3.G * num53);
					color3.B = (byte)((float)color3.B * num53);
					color3.A = (byte)((float)color3.A * num53);
					Main.spriteBatch.Draw(Main.backgroundTexture[49], new Microsoft.Xna.Framework.Rectangle(this.bgStart + Main.backgroundWidth[49] * num52, this.bgTop, Main.backgroundWidth[49], Main.backgroundHeight[49]), color3);
				}
			}
			if (!Main.mapFullscreen)
			{
				SkyManager.Instance.DrawRemainingDepth(Main.spriteBatch);
			}
			float num54 = (float)(Main.worldSurface + 2.0) * 16f - Main.screenPosition.Y;
			float num55 = (float)Main.maxTilesY * 16f - (Main.screenPosition.Y + (float)Main.screenHeight);
			num54 = MathHelper.Clamp(num54, 0f, (float)Main.screenHeight);
			num55 = MathHelper.Clamp(num55, 0f, (float)Main.screenHeight);
			if (num55 - num54 > 0f)
			{
				Main.spriteBatch.Draw(Main.blackTileTexture, new Microsoft.Xna.Framework.Rectangle(0, (int)num54, Main.screenWidth, (int)(num55 - num54)), Microsoft.Xna.Framework.Color.Black);
			}
		}

		private void DrawTileCracks(int crackType)
		{
			Vector2 zero = new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
			if (Main.drawToScreen)
			{
				zero = Vector2.Zero;
			}
			for (int i = 0; i < Main.player[Main.myPlayer].hitTile.data.Length; i++)
			{
				if (Main.player[Main.myPlayer].hitTile.data[i].type == crackType)
				{
					int damage = Main.player[Main.myPlayer].hitTile.data[i].damage;
					if (damage >= 20)
					{
						int x = Main.player[Main.myPlayer].hitTile.data[i].X;
						int y = Main.player[Main.myPlayer].hitTile.data[i].Y;
						if (WorldGen.InWorld(x, y, 0))
						{
							bool flag = Main.tile[x, y] != null;
							if (flag && crackType == 1)
							{
								flag = (flag && Main.tile[x, y].active());
							}
							if (flag && crackType == 2)
							{
								flag = (flag && Main.tile[x, y].wall != 0);
							}
							if (flag)
							{
								bool flag2 = false;
								bool flag3 = false;
								if (Main.tile[x, y].type == 10)
								{
									flag2 = false;
								}
								else if (Main.tileSolid[(int)Main.tile[x, y].type] && !Main.tileSolidTop[(int)Main.tile[x, y].type])
								{
									flag2 = true;
								}
								else if (Main.tile[x, y].type == 5)
								{
									flag3 = true;
									int num = (int)(Main.tile[x, y].frameX / 22);
									int num2 = (int)(Main.tile[x, y].frameY / 22);
									if (num2 < 9)
									{
										flag2 = (((num != 1 && num != 2) || num2 < 6 || num2 > 8) && (num != 3 || num2 > 2) && (num != 4 || num2 < 3 || num2 > 5) && (num != 5 || num2 < 6 || num2 > 8));
									}
								}
								else if (Main.tile[x, y].type == 72)
								{
									flag3 = true;
									if (Main.tile[x, y].frameX <= 34)
									{
										flag2 = true;
									}
								}
								if (flag2 && Main.tile[x, y].slope() == 0 && !Main.tile[x, y].halfBrick())
								{
									int num3 = 0;
									if (damage >= 80)
									{
										num3 = 3;
									}
									else if (damage >= 60)
									{
										num3 = 2;
									}
									else if (damage >= 40)
									{
										num3 = 1;
									}
									else if (damage >= 20)
									{
										num3 = 0;
									}
									Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle(Main.player[Main.myPlayer].hitTile.data[i].crackStyle * 18, num3 * 18, 16, 16);
									if (flag3)
									{
										value.X = (4 + Main.player[Main.myPlayer].hitTile.data[i].crackStyle / 2) * 18;
									}
									Main.spriteBatch.Draw(Main.tileCrackTexture, new Vector2((float)(x * 16 - (int)Main.screenPosition.X), (float)(y * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(value), Lighting.GetColor(x, y), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
								}
							}
						}
					}
				}
			}
		}

		private static void CheckMonoliths()
		{
#if CLIENT
			bool flag = Main.player[Main.myPlayer].ZoneTowerVortex || Main.player[Main.myPlayer].ZoneTowerNebula || Main.player[Main.myPlayer].ZoneTowerStardust || Main.player[Main.myPlayer].ZoneTowerSolar;
			for (int i = 0; i < Main.MonolithFilterNames.Length; i++)
			{
				if (!flag && i == Main.monolithType)
				{
					if (!Filters.Scene[Main.MonolithFilterNames[Main.monolithType]].IsActive())
					{
						Filters.Scene.Activate(Main.MonolithFilterNames[Main.monolithType], default(Vector2), new object[0]);
					}
					if (!SkyManager.Instance[Main.MonolithSkyNames[i]].IsActive())
					{
						SkyManager.Instance.Activate(Main.MonolithSkyNames[i], default(Vector2), new object[0]);
					}
				}
				else
				{
					if (Filters.Scene[Main.MonolithFilterNames[i]].IsActive())
					{
						Filters.Scene.Deactivate(Main.MonolithFilterNames[i], new object[0]);
					}
					if (SkyManager.Instance[Main.MonolithSkyNames[i]].IsActive())
					{
						SkyManager.Instance.Deactivate(Main.MonolithSkyNames[i], new object[0]);
					}
				}
			}
#endif
		}

		private void GraphicsDeviceLost(object sender, EventArgs evt)
		{
		}

		protected override void Draw(GameTime gameTime)
		{
			if (Main.IsGraphicsDeviceAvailable)
			{
				this.EnsureRenderTargetContent();
				this.DoDraw(gameTime);
				if (Main.OnPostDraw != null)
				{
					Main.OnPostDraw(gameTime);
				}
			}
		}

		private void DoDraw(GameTime gameTime)
		{
			if (Main._drawCycleCounter == 0uL)
			{
				Main._tileFrameSeed = Utils.RandomNextSeed(Main._tileFrameSeed);
			}
			Main._drawCycleCounter = (Main._drawCycleCounter + 1uL) % 5uL;
			Main.MenuUI.IsVisible = (Main.gameMenu && Main.menuMode == 888);
			Main.InGameUI.IsVisible = (!Main.gameMenu && Main.InGameUI.CurrentState != null);
			PlayerInput.UpdateMainMouse();
			CaptureManager.Instance.DrawTick();
			TimeLogger.NewDrawFrame();
			if (!Main.gameMenu)
			{
				this.lookForColorTiles();
			}
			TimeLogger.DetailedDrawTime(0);
			if (Main.loadMap)
			{
				Main.refreshMap = false;
				this.DrawToMap();
				TimeLogger.DetailedDrawTime(1);
			}
			if (Lighting.lightMode >= 2)
			{
				Main.drawToScreen = true;
			}
			else
			{
				Main.drawToScreen = false;
			}
			if (Main.drawToScreen && Main.targetSet)
			{
				this.ReleaseTargets();
			}
			if (!Main.drawToScreen && !Main.targetSet)
			{
				this.InitTargets();
			}
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			Main.fpsCount++;
			if (!base.IsActive)
			{
				Main.maxQ = true;
			}
#if CLIENT
			this.UpdateDisplaySettings();
#endif
			if (Main.OnPreDraw != null)
			{
				Main.OnPreDraw(gameTime);
			}
			Main.drawTime++;
			Main.screenLastPosition = Main.screenPosition;
			if (Main.stackSplit == 0)
			{
				Main.stackCounter = 0;
				Main.stackDelay = 7;
				Main.superFastStack = 0;
			}
			else
			{
				Main.stackCounter++;
				int num = 30;
				if (num == 7)
				{
					num = 30;
				}
				else if (Main.stackDelay == 6)
				{
					num = 25;
				}
				else if (Main.stackDelay == 5)
				{
					num = 20;
				}
				else if (Main.stackDelay == 4)
				{
					num = 15;
				}
				else if (Main.stackDelay == 3)
				{
					num = 10;
				}
				else
				{
					num = 5;
				}
				if (Main.stackCounter >= num)
				{
					Main.stackDelay--;
					if (Main.stackDelay < 2)
					{
						Main.stackDelay = 2;
						Main.superFastStack++;
					}
					Main.stackCounter = 0;
				}
			}
			if (Main.myPlayer >= 0)
			{
				Main.player[Main.myPlayer].lastMouseInterface = Main.player[Main.myPlayer].mouseInterface;
				Main.player[Main.myPlayer].mouseInterface = false;
			}
			if (Main.mapTime > 0)
			{
				Main.mapTime--;
			}
			if (Main.gameMenu)
			{
				Main.mapTime = Main.mapTimeMax;
			}
			Main.toolTip = new Item();
			Vector3 value = new Vector3(1f, 1f, 1f);
			Vector3 vector = Vector3.One / value;
			if (!Main.gameMenu && Main.netMode != 2)
			{
				int num2 = 21;
				if (Main.cameraX != 0f && !Main.player[Main.myPlayer].pulley)
				{
					Main.cameraX = 0f;
				}
				if (Main.cameraX > 0f)
				{
					Main.cameraX -= 1f;
					if (Main.cameraX < 0f)
					{
						Main.cameraX = 0f;
					}
				}
				if (Main.cameraX < 0f)
				{
					Main.cameraX += 1f;
					if (Main.cameraX > 0f)
					{
						Main.cameraX = 0f;
					}
				}
				Vector2 value2 = Main.screenPosition;
				Main.screenPosition.X = Main.player[Main.myPlayer].position.X + (float)Main.player[Main.myPlayer].width * 0.5f - (float)Main.screenWidth * 0.5f * vector.X + Main.cameraX;
				Main.screenPosition.Y = Main.player[Main.myPlayer].position.Y + (float)Main.player[Main.myPlayer].height - (float)num2 - (float)Main.screenHeight * 0.5f * vector.Y + Main.player[Main.myPlayer].gfxOffY;
				float num3 = 0f;
				float num4 = 0f;
				float num5 = 24f;
				if ((Main.player[Main.myPlayer].noThrow <= 0 && !Main.player[Main.myPlayer].lastMouseInterface) || Main.zoomX != 0f || Main.zoomY != 0f)
				{
					if (PlayerInput.UsingGamepad)
					{
						Player player = Main.player[Main.myPlayer];
						if (PlayerInput.GamepadThumbstickRight.Length() != 0f || !Main.SmartCursorEnabled)
						{
							float num6 = -1f;
							if (player.inventory[player.selectedItem].type == 1254 && player.scope)
							{
								num6 = 0.8f;
							}
							else if (player.inventory[player.selectedItem].type == 1254)
							{
								num6 = 0.6666667f;
							}
							else if (player.inventory[player.selectedItem].type == 1299)
							{
								num6 = 0.6666667f;
							}
							else if (player.scope)
							{
								num6 = 0.5f;
							}
							Vector2 vector2 = (Main.MouseScreen - new Vector2((float)Main.screenWidth, (float)Main.screenHeight) / 2f) / (new Vector2((float)Main.screenWidth, (float)Main.screenHeight) / 2f);
							Vector2 vector3 = vector2;
							num5 = 48f;
							if (vector3 != Vector2.Zero && num6 != -1f)
							{
								Vector2 value3 = new Vector2((float)Main.screenWidth, (float)Main.screenHeight) * 0.5f;
								Vector2 vector4 = value3 * vector3 * num6;
								num3 = vector4.X;
								num4 = vector4.Y;
							}
						}
					}
					else if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type == 1254 && Main.player[Main.myPlayer].scope && Main.mouseRight)
					{
						int num7 = Main.mouseX;
						int num8 = Main.mouseY;
						if (num7 > Main.screenWidth)
						{
							num7 = Main.screenWidth;
						}
						if (num7 < 0)
						{
							num7 = 0;
						}
						if (num8 > Main.screenHeight)
						{
							num8 = Main.screenHeight;
						}
						if (num8 < 0)
						{
							num8 = 0;
						}
						num3 = (float)(num7 - Main.screenWidth / 2) / 1.25f;
						num4 = (float)(num8 - Main.screenHeight / 2) / 1.25f;
					}
					else if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type == 1254 && Main.mouseRight)
					{
						int num9 = Main.mouseX;
						int num10 = Main.mouseY;
						if (num9 > Main.screenWidth)
						{
							num9 = Main.screenWidth;
						}
						if (num9 < 0)
						{
							num9 = 0;
						}
						if (num10 > Main.screenHeight)
						{
							num10 = Main.screenHeight;
						}
						if (num10 < 0)
						{
							num10 = 0;
						}
						num3 = (float)(num9 - Main.screenWidth / 2) / 1.5f;
						num4 = (float)(num10 - Main.screenHeight / 2) / 1.5f;
					}
					else if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type == 1299 && Main.player[Main.myPlayer].selectedItem != 58)
					{
						int num11 = Main.mouseX;
						int num12 = Main.mouseY;
						if (num11 > Main.screenWidth)
						{
							num11 = Main.screenWidth;
						}
						if (num11 < 0)
						{
							num11 = 0;
						}
						if (num12 > Main.screenHeight)
						{
							num12 = Main.screenHeight;
						}
						if (num12 < 0)
						{
							num12 = 0;
						}
						num3 = (float)(num11 - Main.screenWidth / 2) / 1.5f;
						num4 = (float)(num12 - Main.screenHeight / 2) / 1.5f;
					}
					else if (Main.player[Main.myPlayer].scope && Main.mouseRight)
					{
						int num13 = Main.mouseX;
						int num14 = Main.mouseY;
						if (num13 > Main.screenWidth)
						{
							num13 = Main.screenWidth;
						}
						if (num13 < 0)
						{
							num13 = 0;
						}
						if (num14 > Main.screenHeight)
						{
							num14 = Main.screenHeight;
						}
						if (num14 < 0)
						{
							num14 = 0;
						}
						num3 = (float)(num13 - Main.screenWidth / 2) / 2f;
						num4 = (float)(num14 - Main.screenHeight / 2) / 2f;
					}
				}
				if (float.IsNaN(Main.zoomX))
				{
					Main.zoomX = 0f;
				}
				if (float.IsNaN(Main.zoomY))
				{
					Main.zoomY = 0f;
				}
				float num15 = num3 - Main.zoomX;
				float num16 = num4 - Main.zoomY;
				float num17 = (float)Math.Sqrt((double)(num15 * num15 + num16 * num16));
				num17 = (float)Math.Sqrt((double)(num15 * num15 + num16 * num16));
				if (num17 < num5)
				{
					Main.zoomX = num3;
					Main.zoomY = num4;
				}
				else
				{
					num17 = num5 / num17;
					num15 *= num17;
					num16 *= num17;
					Main.zoomX += num15;
					Main.zoomY += num16;
				}
				Main.screenPosition.X = Main.screenPosition.X + Main.zoomX;
				Main.screenPosition.Y = Main.screenPosition.Y + Main.zoomY * Main.player[Main.myPlayer].gravDir;
				if (Main.cameraLerp > 0f)
				{
					float num18 = Vector2.Distance(value2, Main.screenPosition) - Main.player[Main.myPlayer].velocity.Length();
					if (num18 < 0.25f || (Main.cameraGamePadLerp && !PlayerInput.UsingGamepad))
					{
						Main.cameraLerp = 0f;
						Main.cameraGamePadLerp = false;
					}
					else
					{
						Main.screenPosition = Vector2.Lerp(value2, Main.screenPosition, Main.cameraLerp);
					}
				}
				Main.screenPosition.X = (float)((int)Main.screenPosition.X);
				Main.screenPosition.Y = (float)((int)Main.screenPosition.Y);
			}
			if (!Main.gameMenu && Main.netMode != 2)
			{
				if (Main.screenPosition.X < Main.leftWorld + 640f + 16f)
				{
					Main.screenPosition.X = Main.leftWorld + 640f + 16f;
				}
				else if (Main.screenPosition.X + (float)Main.screenWidth > Main.rightWorld - 640f - 32f)
				{
					Main.screenPosition.X = Main.rightWorld - (float)Main.screenWidth - 640f - 32f;
				}
				if (Main.screenPosition.Y < Main.topWorld + 640f + 16f)
				{
					Main.screenPosition.Y = Main.topWorld + 640f + 16f;
				}
				else if (Main.screenPosition.Y + (float)Main.screenHeight > Main.bottomWorld - 640f - 32f)
				{
					Main.screenPosition.Y = Main.bottomWorld - (float)Main.screenHeight - 640f - 32f;
				}
			}
			Main.CheckMonoliths();
			if (Main.showSplash)
			{
				this.DrawSplash(gameTime);
				TimeLogger.SplashDrawTime(stopwatch.Elapsed.TotalMilliseconds);
				TimeLogger.EndDrawFrame();
				return;
			}
			Main.sunCircle += 0.01f;
			if ((double)Main.sunCircle > 6.285)
			{
				Main.sunCircle -= 6.285f;
			}
			TimeLogger.DetailedDrawReset();
			if (!Main.gameMenu)
			{
				this.waterfallManager.FindWaterfalls(false);
				TimeLogger.DetailedDrawTime(2);
				if (Main.renderNow)
				{
					Main.screenLastPosition = Main.screenPosition;
					Main.renderNow = false;
					Main.renderCount = 99;
					this.Draw(gameTime);
					Lighting.LightTiles(this.firstTileX, this.lastTileX, this.firstTileY, this.lastTileY);
					Lighting.LightTiles(this.firstTileX, this.lastTileX, this.firstTileY, this.lastTileY);
					this.RenderTiles();
					Main.sceneTilePos.X = Main.screenPosition.X - (float)Main.offScreenRange;
					Main.sceneTilePos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					this.RenderBackground();
					Main.sceneBackgroundPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
					Main.sceneBackgroundPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					this.RenderWalls();
					Main.sceneWallPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
					Main.sceneWallPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					this.RenderTiles2();
					Main.sceneTile2Pos.X = Main.screenPosition.X - (float)Main.offScreenRange;
					Main.sceneTile2Pos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					this.RenderWater();
					Main.sceneWaterPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
					Main.sceneWaterPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					Main.renderCount = 99;
				}
				else
				{
					if (Main.renderCount == 3)
					{
						this.RenderTiles();
						Main.sceneTilePos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneTilePos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Main.renderCount == 3)
					{
						this.RenderTiles2();
						Main.sceneTile2Pos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneTile2Pos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Main.renderCount == 3)
					{
						this.RenderWalls();
						Main.sceneWallPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneWallPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Main.renderCount == 2)
					{
						this.RenderBackground();
						Main.sceneBackgroundPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneBackgroundPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Main.renderCount == 1)
					{
						this.RenderWater();
						Main.sceneWaterPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneWaterPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
				}
				if (Main.render && !Main.gameMenu)
				{
					if (Math.Abs(Main.sceneTilePos.X - (Main.screenPosition.X - (float)Main.offScreenRange)) > (float)Main.offScreenRange || Math.Abs(Main.sceneTilePos.Y - (Main.screenPosition.Y - (float)Main.offScreenRange)) > (float)Main.offScreenRange)
					{
						this.RenderTiles();
						Main.sceneTilePos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneTilePos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Math.Abs(Main.sceneTile2Pos.X - (Main.screenPosition.X - (float)Main.offScreenRange)) > (float)Main.offScreenRange || Math.Abs(Main.sceneTile2Pos.Y - (Main.screenPosition.Y - (float)Main.offScreenRange)) > (float)Main.offScreenRange)
					{
						this.RenderTiles2();
						Main.sceneTile2Pos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneTile2Pos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Math.Abs(Main.sceneBackgroundPos.X - (Main.screenPosition.X - (float)Main.offScreenRange)) > (float)Main.offScreenRange || Math.Abs(Main.sceneBackgroundPos.Y - (Main.screenPosition.Y - (float)Main.offScreenRange)) > (float)Main.offScreenRange)
					{
						this.RenderBackground();
						Main.sceneBackgroundPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneBackgroundPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Math.Abs(Main.sceneWallPos.X - (Main.screenPosition.X - (float)Main.offScreenRange)) > (float)Main.offScreenRange || Math.Abs(Main.sceneWallPos.Y - (Main.screenPosition.Y - (float)Main.offScreenRange)) > (float)Main.offScreenRange)
					{
						this.RenderWalls();
						Main.sceneWallPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneWallPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Math.Abs(Main.sceneWaterPos.X - (Main.screenPosition.X - (float)Main.offScreenRange)) > (float)Main.offScreenRange || Math.Abs(Main.sceneWaterPos.Y - (Main.screenPosition.Y - (float)Main.offScreenRange)) > (float)Main.offScreenRange)
					{
						this.RenderWater();
						Main.sceneWaterPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneWaterPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
				}
			}
			if (!Main.loadMap)
			{
				if (!Main.gameMenu)
				{
					TimeLogger.DetailedDrawReset();
					Stopwatch stopwatch2 = new Stopwatch();
					stopwatch2.Start();
					int num19 = 0;
					int secX;
					int secY;
					while (stopwatch2.ElapsedMilliseconds < 5L && Main.sectionManager.GetNextMapDraw(Main.player[Main.myPlayer].position, out secX, out secY))
					{
						this.DrawToMap_Section(secX, secY);
						num19++;
					}
					TimeLogger.DetailedDrawTime(3);
				}
				if (Main.updateMap)
				{
					if (base.IsActive || Main.netMode == 1)
					{
						if (Main.refreshMap)
						{
							Main.refreshMap = false;
							Main.sectionManager.ClearMapDraw();
						}
						this.DrawToMap();
						Main.updateMap = false;
					}
					else if (MapHelper.numUpdateTile > 0)
					{
						this.DrawToMap();
					}
					TimeLogger.DetailedDrawTime(4);
				}
			}
			this.bgParallax = 0.1;
			this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.backgroundWidth[Main.background]) - (double)(Main.backgroundWidth[Main.background] / 2));
			this.bgLoops = Main.screenWidth / Main.backgroundWidth[Main.background] + 2;
			this.bgStartY = 0;
			this.bgLoopsY = 0;
			this.bgTop = (int)((double)(-(double)Main.screenPosition.Y) / (Main.worldSurface * 16.0 - 600.0) * 200.0);
			Main.bgColor = Microsoft.Xna.Framework.Color.White;
			if (Main.gameMenu || Main.netMode == 2)
			{
				this.bgTop = -200;
			}
			int num20 = (int)(Main.time / 54000.0 * (double)(Main.screenWidth + Main.sunTexture.Width * 2)) - Main.sunTexture.Width;
			int num21 = 0;
			Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
			float num22 = 1f;
			float rotation = (float)(Main.time / 54000.0) * 2f - 7.3f;
			int num23 = (int)(Main.time / 32400.0 * (double)(Main.screenWidth + Main.moonTexture[Main.moonType].Width * 2)) - Main.moonTexture[Main.moonType].Width;
			int num24 = 0;
			Microsoft.Xna.Framework.Color white2 = Microsoft.Xna.Framework.Color.White;
			float num25 = 1f;
			float rotation2 = (float)(Main.time / 32400.0) * 2f - 7.3f;
			if (Main.dayTime)
			{
				double num26;
				if (Main.time < 27000.0)
				{
					num26 = Math.Pow(1.0 - Main.time / 54000.0 * 2.0, 2.0);
					num21 = (int)((double)this.bgTop + num26 * 250.0 + 180.0);
				}
				else
				{
					num26 = Math.Pow((Main.time / 54000.0 - 0.5) * 2.0, 2.0);
					num21 = (int)((double)this.bgTop + num26 * 250.0 + 180.0);
				}
				num22 = (float)(1.2 - num26 * 0.4);
			}
			else
			{
				double num27;
				if (Main.time < 16200.0)
				{
					num27 = Math.Pow(1.0 - Main.time / 32400.0 * 2.0, 2.0);
					num24 = (int)((double)this.bgTop + num27 * 250.0 + 180.0);
				}
				else
				{
					num27 = Math.Pow((Main.time / 32400.0 - 0.5) * 2.0, 2.0);
					num24 = (int)((double)this.bgTop + num27 * 250.0 + 180.0);
				}
				num25 = (float)(1.2 - num27 * 0.4);
			}
			if (Main.dayTime)
			{
				if (Main.time < 13500.0)
				{
					float num28 = (float)(Main.time / 13500.0);
					white.R = (byte)(num28 * 200f + 55f);
					white.G = (byte)(num28 * 180f + 75f);
					white.B = (byte)(num28 * 250f + 5f);
					Main.bgColor.R = (byte)(num28 * 230f + 25f);
					Main.bgColor.G = (byte)(num28 * 220f + 35f);
					Main.bgColor.B = (byte)(num28 * 220f + 35f);
				}
				if (Main.time > 45900.0)
				{
					float num28 = (float)(1.0 - (Main.time / 54000.0 - 0.85) * 6.666666666666667);
					white.R = (byte)(num28 * 120f + 55f);
					white.G = (byte)(num28 * 100f + 25f);
					white.B = (byte)(num28 * 120f + 55f);
					Main.bgColor.R = (byte)(num28 * 200f + 35f);
					Main.bgColor.G = (byte)(num28 * 85f + 35f);
					Main.bgColor.B = (byte)(num28 * 135f + 35f);
				}
				else if (Main.time > 37800.0)
				{
					float num28 = (float)(1.0 - (Main.time / 54000.0 - 0.7) * 6.666666666666667);
					white.R = (byte)(num28 * 80f + 175f);
					white.G = (byte)(num28 * 130f + 125f);
					white.B = (byte)(num28 * 100f + 155f);
					Main.bgColor.R = (byte)(num28 * 20f + 235f);
					Main.bgColor.G = (byte)(num28 * 135f + 120f);
					Main.bgColor.B = (byte)(num28 * 85f + 170f);
				}
			}
			if (!Main.dayTime)
			{
				if (Main.bloodMoon)
				{
					if (Main.time < 16200.0)
					{
						float num28 = (float)(1.0 - Main.time / 16200.0);
						white2.R = (byte)(num28 * 10f + 205f);
						white2.G = (byte)(num28 * 170f + 55f);
						white2.B = (byte)(num28 * 200f + 55f);
						Main.bgColor.R = (byte)(40f - num28 * 40f + 35f);
						Main.bgColor.G = (byte)(num28 * 20f + 15f);
						Main.bgColor.B = (byte)(num28 * 20f + 15f);
					}
					else if (Main.time >= 16200.0)
					{
						float num28 = (float)((Main.time / 32400.0 - 0.5) * 2.0);
						white2.R = (byte)(num28 * 50f + 205f);
						white2.G = (byte)(num28 * 100f + 155f);
						white2.B = (byte)(num28 * 100f + 155f);
						white2.R = (byte)(num28 * 10f + 205f);
						white2.G = (byte)(num28 * 170f + 55f);
						white2.B = (byte)(num28 * 200f + 55f);
						Main.bgColor.R = (byte)(40f - num28 * 40f + 35f);
						Main.bgColor.G = (byte)(num28 * 20f + 15f);
						Main.bgColor.B = (byte)(num28 * 20f + 15f);
					}
				}
				else if (Main.time < 16200.0)
				{
					float num28 = (float)(1.0 - Main.time / 16200.0);
					white2.R = (byte)(num28 * 10f + 205f);
					white2.G = (byte)(num28 * 70f + 155f);
					white2.B = (byte)(num28 * 100f + 155f);
					Main.bgColor.R = (byte)(num28 * 30f + 5f);
					Main.bgColor.G = (byte)(num28 * 30f + 5f);
					Main.bgColor.B = (byte)(num28 * 30f + 5f);
				}
				else if (Main.time >= 16200.0)
				{
					float num28 = (float)((Main.time / 32400.0 - 0.5) * 2.0);
					white2.R = (byte)(num28 * 50f + 205f);
					white2.G = (byte)(num28 * 100f + 155f);
					white2.B = (byte)(num28 * 100f + 155f);
					Main.bgColor.R = (byte)(num28 * 20f + 5f);
					Main.bgColor.G = (byte)(num28 * 30f + 5f);
					Main.bgColor.B = (byte)(num28 * 30f + 5f);
				}
			}
			float num29 = 0.0005f * (float)Main.dayRate;
			if (Main.gameMenu)
			{
				num29 *= 20f;
			}
			if (Main.raining)
			{
				if (Main.cloudAlpha > Main.maxRaining)
				{
					Main.cloudAlpha -= num29;
					if (Main.cloudAlpha < Main.maxRaining)
					{
						Main.cloudAlpha = Main.maxRaining;
					}
				}
				else if (Main.cloudAlpha < Main.maxRaining)
				{
					Main.cloudAlpha += num29;
					if (Main.cloudAlpha > Main.maxRaining)
					{
						Main.cloudAlpha = Main.maxRaining;
					}
				}
			}
			else
			{
				Main.cloudAlpha -= num29;
				if (Main.cloudAlpha < 0f)
				{
					Main.cloudAlpha = 0f;
				}
			}
			if (Main.cloudAlpha > 0f)
			{
				float num30 = 1f - Main.cloudAlpha * 0.9f;
				Main.bgColor.R = (byte)((float)Main.bgColor.R * num30);
				Main.bgColor.G = (byte)((float)Main.bgColor.G * num30);
				Main.bgColor.B = (byte)((float)Main.bgColor.B * num30);
			}
			if (Main.gameMenu || Main.netMode == 2)
			{
				this.bgTop = 0;
				if (!Main.dayTime)
				{
					Main.bgColor.R = 35;
					Main.bgColor.G = 35;
					Main.bgColor.B = 35;
				}
			}
			if (Main.gameMenu)
			{
				Main.bgDelay = 1000;
				Main.evilTiles = (int)(Main.bgAlpha[1] * 500f);
			}
			if (Main.evilTiles > 0)
			{
				float num31 = (float)Main.evilTiles / 500f;
				if (num31 > 1f)
				{
					num31 = 1f;
				}
				int num32 = (int)Main.bgColor.R;
				int num33 = (int)Main.bgColor.G;
				int num34 = (int)Main.bgColor.B;
				num32 -= (int)(100f * num31 * ((float)Main.bgColor.R / 255f));
				num33 -= (int)(140f * num31 * ((float)Main.bgColor.G / 255f));
				num34 -= (int)(80f * num31 * ((float)Main.bgColor.B / 255f));
				if (num32 < 15)
				{
					num32 = 15;
				}
				if (num33 < 15)
				{
					num33 = 15;
				}
				if (num34 < 15)
				{
					num34 = 15;
				}
				Main.bgColor.R = (byte)num32;
				Main.bgColor.G = (byte)num33;
				Main.bgColor.B = (byte)num34;
				num32 = (int)white.R;
				num33 = (int)white.G;
				num34 = (int)white.B;
				num32 -= (int)(100f * num31 * ((float)white.R / 255f));
				num33 -= (int)(100f * num31 * ((float)white.G / 255f));
				num34 -= (int)(0f * num31 * ((float)white.B / 255f));
				if (num32 < 15)
				{
					num32 = 15;
				}
				if (num33 < 15)
				{
					num33 = 15;
				}
				if (num34 < 15)
				{
					num34 = 15;
				}
				white.R = (byte)num32;
				white.G = (byte)num33;
				white.B = (byte)num34;
				num32 = (int)white2.R;
				num33 = (int)white2.G;
				num34 = (int)white2.B;
				num32 -= (int)(140f * num31 * ((float)white2.R / 255f));
				num33 -= (int)(190f * num31 * ((float)white2.G / 255f));
				num34 -= (int)(170f * num31 * ((float)white2.B / 255f));
				if (num32 < 15)
				{
					num32 = 15;
				}
				if (num33 < 15)
				{
					num33 = 15;
				}
				if (num34 < 15)
				{
					num34 = 15;
				}
				white2.R = (byte)num32;
				white2.G = (byte)num33;
				white2.B = (byte)num34;
			}
			if (Main.bloodTiles > 0)
			{
				float num35 = (float)Main.bloodTiles / 400f;
				if (num35 > 1f)
				{
					num35 = 1f;
				}
				int num36 = (int)Main.bgColor.R;
				int num37 = (int)Main.bgColor.G;
				int num38 = (int)Main.bgColor.B;
				num36 -= (int)(70f * num35 * ((float)Main.bgColor.G / 255f));
				num37 -= (int)(110f * num35 * ((float)Main.bgColor.G / 255f));
				num38 -= (int)(150f * num35 * ((float)Main.bgColor.B / 255f));
				if (num36 < 15)
				{
					num36 = 15;
				}
				if (num37 < 15)
				{
					num37 = 15;
				}
				if (num38 < 15)
				{
					num38 = 15;
				}
				Main.bgColor.R = (byte)num36;
				Main.bgColor.G = (byte)num37;
				Main.bgColor.B = (byte)num38;
				num36 = (int)white.R;
				num37 = (int)white.G;
				num38 = (int)white.B;
				num37 -= (int)(90f * num35 * ((float)white.G / 255f));
				num38 -= (int)(110f * num35 * ((float)white.B / 255f));
				if (num36 < 15)
				{
					num36 = 15;
				}
				if (num37 < 15)
				{
					num37 = 15;
				}
				if (num38 < 15)
				{
					num38 = 15;
				}
				white.R = (byte)num36;
				white.G = (byte)num37;
				white.B = (byte)num38;
				num36 = (int)white2.R;
				num37 = (int)white2.G;
				num38 = (int)white2.B;
				num36 -= (int)(100f * num35 * ((float)white2.R / 255f));
				num37 -= (int)(120f * num35 * ((float)white2.G / 255f));
				num38 -= (int)(180f * num35 * ((float)white2.B / 255f));
				if (num36 < 15)
				{
					num36 = 15;
				}
				if (num37 < 15)
				{
					num37 = 15;
				}
				if (num38 < 15)
				{
					num38 = 15;
				}
				white2.R = (byte)num36;
				white2.G = (byte)num37;
				white2.B = (byte)num38;
			}
			if (Main.jungleTiles > 0)
			{
				float num39 = (float)Main.jungleTiles / 200f;
				if (num39 > 1f)
				{
					num39 = 1f;
				}
				int num40 = (int)Main.bgColor.R;
				int num41 = (int)Main.bgColor.G;
				int num42 = (int)Main.bgColor.B;
				num40 -= (int)(40f * num39 * ((float)Main.bgColor.R / 255f));
				num42 -= (int)(70f * num39 * ((float)Main.bgColor.B / 255f));
				if (num41 > 255)
				{
					num41 = 255;
				}
				if (num41 < 15)
				{
					num41 = 15;
				}
				if (num40 > 255)
				{
					num40 = 255;
				}
				if (num40 < 15)
				{
					num40 = 15;
				}
				if (num42 < 15)
				{
					num42 = 15;
				}
				Main.bgColor.R = (byte)num40;
				Main.bgColor.G = (byte)num41;
				Main.bgColor.B = (byte)num42;
				num40 = (int)white.R;
				num41 = (int)white.G;
				num42 = (int)white.B;
				num40 -= (int)(30f * num39 * ((float)white.R / 255f));
				num42 -= (int)(10f * num39 * ((float)white.B / 255f));
				if (num40 < 15)
				{
					num40 = 15;
				}
				if (num41 < 15)
				{
					num41 = 15;
				}
				if (num42 < 15)
				{
					num42 = 15;
				}
				white.R = (byte)num40;
				white.G = (byte)num41;
				white.B = (byte)num42;
				num40 = (int)white2.R;
				num41 = (int)white2.G;
				num42 = (int)white2.B;
				num41 -= (int)(140f * num39 * ((float)white2.R / 255f));
				num40 -= (int)(170f * num39 * ((float)white2.G / 255f));
				num42 -= (int)(190f * num39 * ((float)white2.B / 255f));
				if (num40 < 15)
				{
					num40 = 15;
				}
				if (num41 < 15)
				{
					num41 = 15;
				}
				if (num42 < 15)
				{
					num42 = 15;
				}
				white2.R = (byte)num40;
				white2.G = (byte)num41;
				white2.B = (byte)num42;
			}
			if (Main.shroomTiles > 0)
			{
				float num43 = (float)Main.shroomTiles / 160f;
				if (num43 > Main.shroomLight)
				{
					Main.shroomLight += 0.01f;
				}
				if (num43 < Main.shroomLight)
				{
					Main.shroomLight -= 0.01f;
				}
			}
			else
			{
				Main.shroomLight -= 0.02f;
			}
			if (Main.shroomLight < 0f)
			{
				Main.shroomLight = 0f;
			}
			if (Main.shroomLight > 1f)
			{
				Main.shroomLight = 1f;
			}
			if (Main.shroomLight > 0f)
			{
				float num44 = Main.shroomLight;
				int num45 = (int)Main.bgColor.R;
				int num46 = (int)Main.bgColor.G;
				int num47 = (int)Main.bgColor.B;
				num46 -= (int)(250f * num44 * ((float)Main.bgColor.G / 255f));
				num45 -= (int)(250f * num44 * ((float)Main.bgColor.R / 255f));
				num47 -= (int)(250f * num44 * ((float)Main.bgColor.B / 255f));
				if (num46 < 15)
				{
					num46 = 15;
				}
				if (num45 < 15)
				{
					num45 = 15;
				}
				if (num47 < 15)
				{
					num47 = 15;
				}
				Main.bgColor.R = (byte)num45;
				Main.bgColor.G = (byte)num46;
				Main.bgColor.B = (byte)num47;
				num45 = (int)white.R;
				num46 = (int)white.G;
				num47 = (int)white.B;
				num46 -= (int)(10f * num44 * ((float)white.G / 255f));
				num45 -= (int)(30f * num44 * ((float)white.R / 255f));
				num47 -= (int)(10f * num44 * ((float)white.B / 255f));
				if (num45 < 15)
				{
					num45 = 15;
				}
				if (num46 < 15)
				{
					num46 = 15;
				}
				if (num47 < 15)
				{
					num47 = 15;
				}
				white.R = (byte)num45;
				white.G = (byte)num46;
				white.B = (byte)num47;
				num45 = (int)white2.R;
				num46 = (int)white2.G;
				num47 = (int)white2.B;
				num46 -= (int)(140f * num44 * ((float)white2.R / 255f));
				num45 -= (int)(170f * num44 * ((float)white2.G / 255f));
				num47 -= (int)(190f * num44 * ((float)white2.B / 255f));
				if (num45 < 15)
				{
					num45 = 15;
				}
				if (num46 < 15)
				{
					num46 = 15;
				}
				if (num47 < 15)
				{
					num47 = 15;
				}
				white2.R = (byte)num45;
				white2.G = (byte)num46;
				white2.B = (byte)num47;
			}
			if (Lighting.lightMode < 2)
			{
				if (Main.bgColor.R < 10)
				{
					Main.bgColor.R = 10;
				}
				if (Main.bgColor.G < 10)
				{
					Main.bgColor.G = 10;
				}
				if (Main.bgColor.B < 10)
				{
					Main.bgColor.B = 10;
				}
			}
			else
			{
				if (Main.bgColor.R < 15)
				{
					Main.bgColor.R = 15;
				}
				if (Main.bgColor.G < 15)
				{
					Main.bgColor.G = 15;
				}
				if (Main.bgColor.B < 15)
				{
					Main.bgColor.B = 15;
				}
			}
			if (Main.bloodMoon)
			{
				if (Main.bgColor.R < 25)
				{
					Main.bgColor.R = 25;
				}
				if (Main.bgColor.G < 25)
				{
					Main.bgColor.G = 25;
				}
				if (Main.bgColor.B < 25)
				{
					Main.bgColor.B = 25;
				}
			}
			if (Main.eclipse && Main.dayTime)
			{
				float num48 = 1242f;
				Main.eclipseLight = (float)(Main.time / (double)num48);
				if (Main.eclipseLight > 1f)
				{
					Main.eclipseLight = 1f;
				}
			}
			else if (Main.eclipseLight > 0f)
			{
				Main.eclipseLight -= 0.01f;
				if (Main.eclipseLight < 0f)
				{
					Main.eclipseLight = 0f;
				}
			}
			if (Main.eclipseLight > 0f)
			{
				float num49 = 1f - 0.925f * Main.eclipseLight;
				float num50 = 1f - 0.96f * Main.eclipseLight;
				float num51 = 1f - 1f * Main.eclipseLight;
				int num52 = (int)((float)Main.bgColor.R * num49);
				int num53 = (int)((float)Main.bgColor.G * num50);
				int num54 = (int)((float)Main.bgColor.B * num51);
				Main.bgColor.R = (byte)num52;
				Main.bgColor.G = (byte)num53;
				Main.bgColor.B = (byte)num54;
				white.R = 255;
				white.G = 127;
				white.B = 67;
				if (Main.bgColor.R < 20)
				{
					Main.bgColor.R = 20;
				}
				if (Main.bgColor.G < 10)
				{
					Main.bgColor.G = 10;
				}
				if (Lighting.lightMode >= 2)
				{
					if (Main.bgColor.R < 20)
					{
						Main.bgColor.R = 20;
					}
					if (Main.bgColor.G < 14)
					{
						Main.bgColor.G = 14;
					}
					if (Main.bgColor.B < 6)
					{
						Main.bgColor.B = 6;
					}
				}
			}
			Main.tileColor.A = 255;
			Main.tileColor.R = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.R * 7) / 10);
			Main.tileColor.G = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.G * 7) / 10);
			Main.tileColor.B = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.B * 7) / 10);
			Main.tileColor = SkyManager.Instance.ProcessTileColor(Main.tileColor);
			float num55 = (float)(Main.maxTilesX / 4200);
			num55 *= num55;
			Main.atmo = (float)((double)((Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16f - (65f + 10f * num55)) / (Main.worldSurface / 5.0));
			if (Main.atmo < 0f)
			{
				Main.atmo = 0f;
			}
			if (Main.atmo > 1f)
			{
				Main.atmo = 1f;
			}
			if (Main.gameMenu)
			{
				Main.atmo = 1f;
			}
			Main.bgColor.R = (byte)((float)Main.bgColor.R * Main.atmo);
			Main.bgColor.G = (byte)((float)Main.bgColor.G * Main.atmo);
			Main.bgColor.B = (byte)((float)Main.bgColor.B * Main.atmo);
			if ((double)Main.atmo <= 0.05)
			{
				Main.bgColor.R = 0;
				Main.bgColor.G = 0;
				Main.bgColor.B = 0;
				Main.bgColor.A = 0;
			}
			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Black);
			base.Draw(gameTime);
			if (Main.gameMenu || Main.player[Main.myPlayer].gravDir == 1f)
			{
				Main.Transform = Matrix.CreateScale(value.X, value.Y, value.Z) * Matrix.CreateRotationZ(0f) * Matrix.CreateTranslation(new Vector3(0f, 0f, 0f));
				this.Rasterizer = RasterizerState.CullCounterClockwise;
			}
			else
			{
				Main.Transform = Matrix.CreateScale(value.X, -value.Y, value.Z) * Matrix.CreateRotationZ(0f) * Matrix.CreateTranslation(new Vector3(0f, (float)Main.screenHeight, 0f));
				this.Rasterizer = RasterizerState.CullClockwise;
			}
			bool flag = !Main.drawToScreen && Main.netMode != 2 && !Main.gameMenu && !Main.mapFullscreen && Filters.Scene.CanCapture();
			if (flag)
			{
				Filters.Scene.BeginCapture();
			}
			Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, Main.Transform);
			TimeLogger.DetailedDrawReset();
			if (!Main.mapFullscreen)
			{
				this.unityMouseOver = false;
				if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
				{
					for (int i = 0; i < this.bgLoops; i++)
					{
						Main.spriteBatch.Draw(Main.backgroundTexture[Main.background], new Microsoft.Xna.Framework.Rectangle(this.bgStart + Main.backgroundWidth[Main.background] * i, this.bgTop, Main.backgroundWidth[Main.background], Main.backgroundHeight[Main.background]), Main.bgColor);
					}
					TimeLogger.DetailedDrawTime(6);
				}
				if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0 && 255f * (1f - Main.cloudAlpha) - (float)Main.bgColor.R - 25f > 0f && Main.netMode != 2)
				{
					for (int j = 0; j < Main.numStars; j++)
					{
						Microsoft.Xna.Framework.Color color = default(Microsoft.Xna.Framework.Color);
						float num56 = (float)Main.evilTiles / 500f;
						if (num56 > 1f)
						{
							num56 = 1f;
						}
						num56 = 1f - num56 * 0.5f;
						if (Main.evilTiles <= 0)
						{
							num56 = 1f;
						}
						int num57 = (int)((float)(255 - Main.bgColor.R - 100) * Main.star[j].twinkle * num56);
						int num58 = (int)((float)(255 - Main.bgColor.G - 100) * Main.star[j].twinkle * num56);
						int num59 = (int)((float)(255 - Main.bgColor.B - 100) * Main.star[j].twinkle * num56);
						if (num57 < 0)
						{
							num57 = 0;
						}
						if (num58 < 0)
						{
							num58 = 0;
						}
						if (num59 < 0)
						{
							num59 = 0;
						}
						color.R = (byte)num57;
						color.G = (byte)((float)num58 * num56);
						color.B = (byte)((float)num59 * num56);
						float num60 = Main.star[j].position.X * ((float)Main.screenWidth / 800f);
						float num61 = Main.star[j].position.Y * ((float)Main.screenHeight / 600f);
						Main.spriteBatch.Draw(Main.starTexture[Main.star[j].type], new Vector2(num60 + (float)Main.starTexture[Main.star[j].type].Width * 0.5f, num61 + (float)Main.starTexture[Main.star[j].type].Height * 0.5f + (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.starTexture[Main.star[j].type].Width, Main.starTexture[Main.star[j].type].Height)), color, Main.star[j].rotation, new Vector2((float)Main.starTexture[Main.star[j].type].Width * 0.5f, (float)Main.starTexture[Main.star[j].type].Height * 0.5f), Main.star[j].scale * Main.star[j].twinkle, SpriteEffects.None, 0f);
					}
				}
				if ((double)(Main.screenPosition.Y / 16f) < Main.worldSurface + 2.0)
				{
					if (Main.dayTime)
					{
						num22 *= 1.1f;
						if (Main.eclipse)
						{
							float num62 = 1f - Main.shroomLight;
							num62 -= Main.cloudAlpha * 1.5f;
							if (num62 < 0f)
							{
								num62 = 0f;
							}
							Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num62)), (int)((byte)((float)white.G * num62)), (int)((byte)((float)white.B * num62)), (int)((byte)(255f * num62)));
							Microsoft.Xna.Framework.Color color3 = new Microsoft.Xna.Framework.Color((int)((byte)((float)white.R * num62)), (int)((byte)((float)white.G * num62)), (int)((byte)((float)white.B * num62)), (int)((byte)((float)(white.B - 60) * num62)));
							Main.spriteBatch.Draw(Main.sun3Texture, new Vector2((float)num20, (float)(num21 + (int)Main.sunModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.sun3Texture.Width, Main.sun3Texture.Height)), color2, rotation, new Vector2((float)(Main.sun3Texture.Width / 2), (float)(Main.sun3Texture.Height / 2)), num22, SpriteEffects.None, 0f);
							Main.spriteBatch.Draw(Main.sun3Texture, new Vector2((float)num20, (float)(num21 + (int)Main.sunModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.sun3Texture.Width, Main.sun3Texture.Height)), color3, rotation, new Vector2((float)(Main.sun3Texture.Width / 2), (float)(Main.sun3Texture.Height / 2)), num22, SpriteEffects.None, 0f);
						}
						else if (!Main.gameMenu && Main.player[Main.myPlayer].head == 12)
						{
							float num63 = 1f - Main.shroomLight;
							num63 -= Main.cloudAlpha * 1.5f;
							if (num63 < 0f)
							{
								num63 = 0f;
							}
							Microsoft.Xna.Framework.Color color4 = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num63)), (int)((byte)((float)white.G * num63)), (int)((byte)((float)white.B * num63)), (int)((byte)(255f * num63)));
							Microsoft.Xna.Framework.Color color5 = new Microsoft.Xna.Framework.Color((int)((byte)((float)white.R * num63)), (int)((byte)((float)white.G * num63)), (int)((byte)((float)white.B * num63)), (int)((byte)((float)(white.B - 60) * num63)));
							Main.spriteBatch.Draw(Main.sun2Texture, new Vector2((float)num20, (float)(num21 + (int)Main.sunModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.sun2Texture.Width, Main.sun2Texture.Height)), color4, rotation, new Vector2((float)(Main.sun2Texture.Width / 2), (float)(Main.sun2Texture.Height / 2)), num22, SpriteEffects.None, 0f);
							Main.spriteBatch.Draw(Main.sun2Texture, new Vector2((float)num20, (float)(num21 + (int)Main.sunModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.sun2Texture.Width, Main.sun2Texture.Height)), color5, rotation, new Vector2((float)(Main.sun2Texture.Width / 2), (float)(Main.sun2Texture.Height / 2)), num22, SpriteEffects.None, 0f);
						}
						else
						{
							float num64 = 1f - Main.shroomLight;
							num64 -= Main.cloudAlpha * 1.5f;
							if (num64 < 0f)
							{
								num64 = 0f;
							}
							Microsoft.Xna.Framework.Color color6 = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num64)), (int)((byte)((float)white.G * num64)), (int)((byte)((float)white.B * num64)), (int)((byte)(255f * num64)));
							Microsoft.Xna.Framework.Color color7 = new Microsoft.Xna.Framework.Color((int)((byte)((float)white.R * num64)), (int)((byte)((float)white.G * num64)), (int)((byte)((float)white.B * num64)), (int)((byte)((float)white.B * num64)));
							Main.spriteBatch.Draw(Main.sunTexture, new Vector2((float)num20, (float)(num21 + (int)Main.sunModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.sunTexture.Width, Main.sunTexture.Height)), color6, rotation, new Vector2((float)(Main.sunTexture.Width / 2), (float)(Main.sunTexture.Height / 2)), num22, SpriteEffects.None, 0f);
							Main.spriteBatch.Draw(Main.sunTexture, new Vector2((float)num20, (float)(num21 + (int)Main.sunModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.sunTexture.Width, Main.sunTexture.Height)), color7, rotation, new Vector2((float)(Main.sunTexture.Width / 2), (float)(Main.sunTexture.Height / 2)), num22, SpriteEffects.None, 0f);
						}
					}
					if (!Main.dayTime)
					{
						float num65 = 1f - Main.cloudAlpha * 1.5f;
						if (num65 < 0f)
						{
							num65 = 0f;
						}
						white2.R = (byte)((float)white2.R * num65);
						white2.G = (byte)((float)white2.G * num65);
						white2.B = (byte)((float)white2.B * num65);
						white2.A = (byte)((float)white2.A * num65);
						if (Main.pumpkinMoon)
						{
							Main.spriteBatch.Draw(Main.pumpkinMoonTexture, new Vector2((float)num23, (float)(num24 + (int)Main.moonModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.pumpkinMoonTexture.Width * Main.moonPhase, Main.pumpkinMoonTexture.Width, Main.pumpkinMoonTexture.Width)), white2, rotation2, new Vector2((float)(Main.pumpkinMoonTexture.Width / 2), (float)(Main.pumpkinMoonTexture.Width / 2)), num25, SpriteEffects.None, 0f);
						}
						else if (Main.snowMoon)
						{
							Main.spriteBatch.Draw(Main.snowMoonTexture, new Vector2((float)num23, (float)(num24 + (int)Main.moonModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.snowMoonTexture.Width * Main.moonPhase, Main.snowMoonTexture.Width, Main.snowMoonTexture.Width)), white2, rotation2, new Vector2((float)(Main.snowMoonTexture.Width / 2), (float)(Main.snowMoonTexture.Width / 2)), num25, SpriteEffects.None, 0f);
						}
						else
						{
							Main.spriteBatch.Draw(Main.moonTexture[Main.moonType], new Vector2((float)num23, (float)(num24 + (int)Main.moonModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.moonTexture[Main.moonType].Width * Main.moonPhase, Main.moonTexture[Main.moonType].Width, Main.moonTexture[Main.moonType].Width)), white2, rotation2, new Vector2((float)(Main.moonTexture[Main.moonType].Width / 2), (float)(Main.moonTexture[Main.moonType].Width / 2)), num25, SpriteEffects.None, 0f);
						}
					}
				}
				Microsoft.Xna.Framework.Rectangle value4;
				if (Main.dayTime)
				{
					value4 = new Microsoft.Xna.Framework.Rectangle((int)((double)num20 - (double)Main.sunTexture.Width * 0.5 * (double)num22), (int)((double)num21 - (double)Main.sunTexture.Height * 0.5 * (double)num22 + (double)Main.sunModY), (int)((float)Main.sunTexture.Width * num22), (int)((float)Main.sunTexture.Width * num22));
				}
				else
				{
					value4 = new Microsoft.Xna.Framework.Rectangle((int)((double)num23 - (double)Main.moonTexture[Main.moonType].Width * 0.5 * (double)num25), (int)((double)num24 - (double)Main.moonTexture[Main.moonType].Width * 0.5 * (double)num25 + (double)Main.moonModY), (int)((float)Main.moonTexture[Main.moonType].Width * num25), (int)((float)Main.moonTexture[Main.moonType].Width * num25));
				}
				Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(Main.mouseX, Main.mouseY, 1, 1);
				Main.sunModY = (short)((double)Main.sunModY * 0.999);
				Main.moonModY = (short)((double)Main.moonModY * 0.999);
				if (Main.gameMenu && Main.netMode != 1)
				{
					if (Main.mouseLeft && Main.hasFocus)
					{
						if (rectangle.Intersects(value4) || Main.grabSky)
						{
							if (Main.dayTime)
							{
								Main.time = 54000.0 * (double)((float)(Main.mouseX + Main.sunTexture.Width) / ((float)Main.screenWidth + (float)(Main.sunTexture.Width * 2)));
								Main.sunModY = (short)(Main.mouseY - num21);
								if (Main.time > 53990.0)
								{
									Main.time = 53990.0;
								}
							}
							else
							{
								Main.time = 32400.0 * (double)((float)(Main.mouseX + Main.moonTexture[Main.moonType].Width) / ((float)Main.screenWidth + (float)(Main.moonTexture[Main.moonType].Width * 2)));
								Main.moonModY = (short)(Main.mouseY - num24);
								if (Main.time > 32390.0)
								{
									Main.time = 32390.0;
								}
							}
							if (Main.time < 10.0)
							{
								Main.time = 10.0;
							}
							if (Main.netMode != 0)
							{
								NetMessage.SendData(18, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
							}
							Main.grabSky = true;
						}
					}
					else
					{
						Main.grabSky = false;
					}
				}
				TimeLogger.DetailedDrawTime(7);
			}
			Overlays.Scene.Draw(Main.spriteBatch, RenderLayers.Sky);
			this.DrawBG();
			Main.spriteBatch.End();
			Overlays.Scene.Draw(Main.spriteBatch, RenderLayers.Landscape);
			Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, Main.Transform);
			if (Main.gameMenu || Main.netMode == 2)
			{
				bool isActive = base.IsActive;
				Microsoft.Xna.Framework.Rectangle[] array = new Microsoft.Xna.Framework.Rectangle[6];
				for (int k = 0; k < array.Length; k++)
				{
					array[k] = new Microsoft.Xna.Framework.Rectangle(k * 4, 0, 2, 40);
				}
				Microsoft.Xna.Framework.Color color8 = Main.bgColor * 0.85f;
				for (int l = 0; l < Main.maxRain; l++)
				{
					if (Main.rain[l].active)
					{
						Rain rain = Main.rain[l];
						Main.spriteBatch.Draw(Main.rainTexture, rain.position - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(array[(int)rain.type]), color8, rain.rotation, Vector2.Zero, rain.scale, SpriteEffects.None, 0f);
						if (isActive)
						{
							rain.Update();
						}
					}
				}
				this.DrawMenu(gameTime);
				TimeLogger.MenuDrawTime(stopwatch.Elapsed.TotalMilliseconds);
				TimeLogger.EndDrawFrame();
				return;
			}
			this.firstTileX = (int)(Main.screenPosition.X / 16f - 1f);
			this.lastTileX = (int)((Main.screenPosition.X + (float)Main.screenWidth) / 16f) + 2;
			this.firstTileY = (int)(Main.screenPosition.Y / 16f - 1f);
			this.lastTileY = (int)((Main.screenPosition.Y + (float)Main.screenHeight) / 16f) + 2;
			if (this.firstTileX < 0)
			{
				this.firstTileX = 0;
			}
			if (this.lastTileX > Main.maxTilesX)
			{
				this.lastTileX = Main.maxTilesX;
			}
			if (this.firstTileY < 0)
			{
				this.firstTileY = 0;
			}
			if (this.lastTileY > Main.maxTilesY)
			{
				this.lastTileY = Main.maxTilesY;
			}
			if (!Main.drawSkip)
			{
				Lighting.LightTiles(this.firstTileX, this.lastTileX, this.firstTileY, this.lastTileY);
			}
			TimeLogger.DetailedDrawReset();
			if (!Main.mapFullscreen)
			{
				Overlays.Scene.Draw(Main.spriteBatch, RenderLayers.InWorldUI);
				Microsoft.Xna.Framework.Color arg_3BC1_0 = Microsoft.Xna.Framework.Color.White;
				if (Main.drawToScreen)
				{
					this.drawWaters(true, -1, true);
				}
				else
				{
					Main.spriteBatch.Draw(this.backWaterTarget, Main.sceneBackgroundPos - Main.screenPosition, Microsoft.Xna.Framework.Color.White);
					TimeLogger.DetailedDrawTime(11);
				}
				Overlays.Scene.Draw(Main.spriteBatch, RenderLayers.BackgroundWater);
				float x = (Main.sceneBackgroundPos.X - Main.screenPosition.X + (float)Main.offScreenRange) * Main.caveParallax - (float)Main.offScreenRange;
				if (Main.drawToScreen)
				{
					Main.tileBatch.Begin();
					this.DrawBackground();
					Main.tileBatch.End();
				}
				else
				{
					Main.spriteBatch.Draw(this.backgroundTarget, new Vector2(x, Main.sceneBackgroundPos.Y - Main.screenPosition.Y), Microsoft.Xna.Framework.Color.White);
					TimeLogger.DetailedDrawTime(12);
				}
				Overlays.Scene.Draw(Main.spriteBatch, RenderLayers.Background);
				Sandstorm.DrawGrains(Main.spriteBatch);
				ScreenDarkness.DrawBack(Main.spriteBatch);
				Main.magmaBGFrameCounter++;
				if (Main.magmaBGFrameCounter >= 8)
				{
					Main.magmaBGFrameCounter = 0;
					Main.magmaBGFrame++;
					if (Main.magmaBGFrame >= 3)
					{
						Main.magmaBGFrame = 0;
					}
				}
				try
				{
					this.CacheNPCDraws();
					this.CacheProjDraws();
					this.DrawCachedNPCs(this.DrawCacheNPCsMoonMoon, true);
					if (Main.drawToScreen)
					{
						this.DrawBlack(false);
						Main.tileBatch.Begin();
						this.DrawWalls();
						Main.tileBatch.End();
					}
					else
					{
						Main.spriteBatch.Draw(this.blackTarget, Main.sceneTilePos - Main.screenPosition, Microsoft.Xna.Framework.Color.White);
						TimeLogger.DetailedDrawTime(13);
						Main.spriteBatch.Draw(this.wallTarget, Main.sceneWallPos - Main.screenPosition, Microsoft.Xna.Framework.Color.White);
						TimeLogger.DetailedDrawTime(14);
					}
					Overlays.Scene.Draw(Main.spriteBatch, RenderLayers.Walls);
					this.DrawWoF();
					if (Main.drawBackGore)
					{
						Main.drawBackGore = false;
						if (Main.ignoreErrors)
						{
							try
							{
								this.DrawGoreBehind();
								goto IL_3DC9;
							}
							catch (Exception e)
							{
								TimeLogger.DrawException(e);
								goto IL_3DC9;
							}
						}
						this.DrawGoreBehind();
					}
					IL_3DC9:
					MoonlordDeathDrama.DrawPieces(Main.spriteBatch);
					MoonlordDeathDrama.DrawExplosions(Main.spriteBatch);
					this.DrawCachedNPCs(this.DrawCacheNPCsBehindNonSolidTiles, true);
					if (Main.player[Main.myPlayer].detectCreature)
					{
						if (Main.drawToScreen)
						{
							this.DrawTiles(false, -1);
							TimeLogger.DetailedDrawReset();
							this.waterfallManager.Draw(Main.spriteBatch);
							TimeLogger.DetailedDrawTime(16);
							this.DrawTiles(true, -1);
						}
						else
						{
							Main.spriteBatch.Draw(this.tile2Target, Main.sceneTile2Pos - Main.screenPosition, Microsoft.Xna.Framework.Color.White);
							TimeLogger.DetailedDrawTime(15);
							this.waterfallManager.Draw(Main.spriteBatch);
							TimeLogger.DetailedDrawTime(16);
							Main.spriteBatch.Draw(this.tileTarget, Main.sceneTilePos - Main.screenPosition, Microsoft.Xna.Framework.Color.White);
							TimeLogger.DetailedDrawTime(17);
						}
						TimeLogger.DetailedDrawReset();
						Main.spriteBatch.End();
						this.DrawCachedProjs(this.DrawCacheProjsBehindNPCsAndTiles, true);
						Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, Main.Transform);
						this.DrawNPCs(true);
						TimeLogger.DetailedDrawTime(18);
						Main.spriteBatch.End();
						this.DrawCachedProjs(this.DrawCacheProjsBehindNPCs, true);
						Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, Main.Transform);
						Main.player[Main.myPlayer].hitTile.DrawFreshAnimations(Main.spriteBatch);
						this.DrawNPCs(false);
						this.DrawCachedNPCs(this.DrawCacheNPCProjectiles, false);
						TimeLogger.DetailedDrawTime(19);
					}
					else
					{
						if (Main.drawToScreen)
						{
							this.DrawCachedNPCs(this.DrawCacheNPCsBehindNonSolidTiles, true);
							this.DrawTiles(false, -1);
							TimeLogger.DetailedDrawReset();
							this.waterfallManager.Draw(Main.spriteBatch);
							TimeLogger.DetailedDrawTime(16);
							Main.spriteBatch.End();
							this.DrawCachedProjs(this.DrawCacheProjsBehindNPCsAndTiles, true);
							Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, Main.Transform);
							this.DrawNPCs(true);
							TimeLogger.DetailedDrawTime(18);
							this.DrawTiles(true, -1);
						}
						else
						{
							this.DrawCachedNPCs(this.DrawCacheNPCsBehindNonSolidTiles, true);
							Main.spriteBatch.Draw(this.tile2Target, Main.sceneTile2Pos - Main.screenPosition, Microsoft.Xna.Framework.Color.White);
							TimeLogger.DetailedDrawTime(15);
							this.waterfallManager.Draw(Main.spriteBatch);
							TimeLogger.DetailedDrawTime(16);
							Main.spriteBatch.End();
							this.DrawCachedProjs(this.DrawCacheProjsBehindNPCsAndTiles, true);
							Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, Main.Transform);
							this.DrawNPCs(true);
							TimeLogger.DetailedDrawTime(18);
							Main.spriteBatch.Draw(this.tileTarget, Main.sceneTilePos - Main.screenPosition, Microsoft.Xna.Framework.Color.White);
							TimeLogger.DetailedDrawTime(17);
						}
						Main.player[Main.myPlayer].hitTile.DrawFreshAnimations(Main.spriteBatch);
						Main.spriteBatch.End();
						this.DrawCachedProjs(this.DrawCacheProjsBehindNPCs, true);
						Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, Main.Transform);
						TimeLogger.DetailedDrawReset();
						this.DrawNPCs(false);
						this.DrawCachedNPCs(this.DrawCacheNPCProjectiles, false);
						TimeLogger.DetailedDrawTime(19);
					}
				}
				catch (Exception e2)
				{
					TimeLogger.DrawException(e2);
				}
				Overlays.Scene.Draw(Main.spriteBatch, RenderLayers.TilesAndNPCs);
				if (!Main.mapFullscreen && Main.mapStyle == 2)
				{
					if (Main.ignoreErrors)
					{
						try
						{
							this.DrawMap();
							goto IL_4183;
						}
						catch (Exception e3)
						{
							TimeLogger.DrawException(e3);
							goto IL_4183;
						}
					}
					this.DrawMap();
				}
				IL_4183:
				TimeLogger.DetailedDrawReset();
				Main.spriteBatch.End();
				TimeLogger.DetailedDrawTime(35);
				this.SortDrawCacheWorms();
				this.DrawCachedProjs(this.DrawCacheProjsBehindProjectiles, true);
				this.DrawProjectiles();
				this.DrawPlayers();
				Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, Main.Transform);
				this.DrawCachedNPCs(this.DrawCacheNPCsOverPlayers, false);
				if (!Main.gamePaused)
				{
					Main.essScale += (float)Main.essDir * 0.01f;
					if (Main.essScale > 1f)
					{
						Main.essDir = -1;
						Main.essScale = 1f;
					}
					if ((double)Main.essScale < 0.7)
					{
						Main.essDir = 1;
						Main.essScale = 0.7f;
					}
				}
				this.DrawItems();
				TimeLogger.DetailedDrawTime(22);
				this.DrawRain();
				if (Main.ignoreErrors)
				{
					try
					{
						this.DrawGore();
						goto IL_4279;
					}
					catch (Exception e4)
					{
						TimeLogger.DrawException(e4);
						goto IL_4279;
					}
				}
				this.DrawGore();
				IL_4279:
				Main.spriteBatch.End();
				this.DrawDust();
				Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, Main.Transform);
				Overlays.Scene.Draw(Main.spriteBatch, RenderLayers.Entities);
				if (Main.drawToScreen)
				{
					this.drawWaters(false, -1, true);
					if (WiresUI.Settings.DrawWires)
					{
						this.DrawWires();
					}
				}
				else
				{
					Main.spriteBatch.Draw(Main.waterTarget, Main.sceneWaterPos - Main.screenPosition, Microsoft.Xna.Framework.Color.White);
					if (WiresUI.Settings.DrawWires)
					{
						this.DrawWires();
					}
					TimeLogger.DetailedDrawTime(26);
				}
				Overlays.Scene.Draw(Main.spriteBatch, RenderLayers.ForegroundWater);
				this.DrawCachedProjs(this.DrawCacheProjsOverWiresUI, false);
				this.DrawInfernoRings();
				ScreenDarkness.DrawFront(Main.spriteBatch);
				MoonlordDeathDrama.DrawWhite(Main.spriteBatch);
				ScreenObstruction.Draw(Main.spriteBatch);
				TimeLogger.DetailedDrawReset();
				Main.spriteBatch.End();
				Overlays.Scene.Draw(Main.spriteBatch, RenderLayers.All);
				if (flag)
				{
					Filters.Scene.EndCapture();
				}
				TimeLogger.DetailedDrawTime(36);
				Main.spriteBatch.Begin();
				if (!Main.hideUI)
				{
					TimeLogger.DetailedDrawReset();
					for (int m = 0; m < 255; m++)
					{
						if (Main.player[m].active && Main.player[m].chatOverhead.timeLeft > 0 && !Main.player[m].dead)
						{
							Vector2 messageSize = Main.player[m].chatOverhead.messageSize;
							Vector2 vector5;
							vector5.X = Main.player[m].position.X + (float)(Main.player[m].width / 2) - messageSize.X / 2f;
							vector5.Y = Main.player[m].position.Y - messageSize.Y - 2f;
							vector5.Y += Main.player[m].gfxOffY;
							vector5 = vector5.Floor();
							if (Main.player[Main.myPlayer].gravDir == -1f)
							{
								vector5.Y -= Main.screenPosition.Y;
								vector5.Y = Main.screenPosition.Y + (float)Main.screenHeight - vector5.Y;
							}
							int num66 = 0;
							ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, Main.fontMouseText, Main.player[m].chatOverhead.snippets, vector5 - Main.screenPosition, 0f, Vector2.Zero, Vector2.One, out num66, -1f, 2f);
						}
					}
					for (int n = 0; n < 100; n++)
					{
						if (Main.combatText[n].active)
						{
							int num67 = 0;
							if (Main.combatText[n].crit)
							{
								num67 = 1;
							}
							Vector2 vector6 = Main.fontCombatText[num67].MeasureString(Main.combatText[n].text);
							Vector2 origin = new Vector2(vector6.X * 0.5f, vector6.Y * 0.5f);
							float arg_45A6_0 = Main.combatText[n].scale;
							float num68 = (float)Main.combatText[n].color.R;
							float num69 = (float)Main.combatText[n].color.G;
							float num70 = (float)Main.combatText[n].color.B;
							float num71 = (float)Main.combatText[n].color.A;
							num68 *= Main.combatText[n].scale * Main.combatText[n].alpha * 0.3f;
							num70 *= Main.combatText[n].scale * Main.combatText[n].alpha * 0.3f;
							num69 *= Main.combatText[n].scale * Main.combatText[n].alpha * 0.3f;
							num71 *= Main.combatText[n].scale * Main.combatText[n].alpha;
							Microsoft.Xna.Framework.Color color9 = new Microsoft.Xna.Framework.Color((int)num68, (int)num69, (int)num70, (int)num71);
							for (int num72 = 0; num72 < 5; num72++)
							{
								int num73 = 0;
								int num74 = 0;
								if (num72 == 0)
								{
									num73--;
								}
								else if (num72 == 1)
								{
									num73++;
								}
								else if (num72 == 2)
								{
									num74--;
								}
								else if (num72 == 3)
								{
									num74++;
								}
								else
								{
									num68 = (float)Main.combatText[n].color.R * Main.combatText[n].scale * Main.combatText[n].alpha;
									num70 = (float)Main.combatText[n].color.B * Main.combatText[n].scale * Main.combatText[n].alpha;
									num69 = (float)Main.combatText[n].color.G * Main.combatText[n].scale * Main.combatText[n].alpha;
									num71 = (float)Main.combatText[n].color.A * Main.combatText[n].scale * Main.combatText[n].alpha;
									color9 = new Microsoft.Xna.Framework.Color((int)num68, (int)num69, (int)num70, (int)num71);
								}
								if (Main.player[Main.myPlayer].gravDir == -1f)
								{
									float num75 = Main.combatText[n].position.Y - Main.screenPosition.Y;
									num75 = (float)Main.screenHeight - num75;
									Main.spriteBatch.DrawString(Main.fontCombatText[num67], Main.combatText[n].text, new Vector2(Main.combatText[n].position.X - Main.screenPosition.X + (float)num73 + origin.X, num75 + (float)num74 + origin.Y), color9, Main.combatText[n].rotation, origin, Main.combatText[n].scale, SpriteEffects.None, 0f);
								}
								else
								{
									Main.spriteBatch.DrawString(Main.fontCombatText[num67], Main.combatText[n].text, new Vector2(Main.combatText[n].position.X - Main.screenPosition.X + (float)num73 + origin.X, Main.combatText[n].position.Y - Main.screenPosition.Y + (float)num74 + origin.Y), color9, Main.combatText[n].rotation, origin, Main.combatText[n].scale, SpriteEffects.None, 0f);
								}
							}
						}
					}
					for (int num76 = 0; num76 < 20; num76++)
					{
						if (Main.itemText[num76].active)
						{
							string text = Main.itemText[num76].name;
							if (Main.itemText[num76].stack > 1)
							{
								text = string.Concat(new object[]
								{
									text,
									" (",
									Main.itemText[num76].stack,
									")"
								});
							}
							Vector2 vector7 = Main.fontMouseText.MeasureString(text);
							Vector2 origin2 = new Vector2(vector7.X * 0.5f, vector7.Y * 0.5f);
							float arg_49F7_0 = Main.itemText[num76].scale;
							float num77 = (float)Main.itemText[num76].color.R;
							float num78 = (float)Main.itemText[num76].color.G;
							float num79 = (float)Main.itemText[num76].color.B;
							float num80 = (float)Main.itemText[num76].color.A;
							num77 *= Main.itemText[num76].scale * Main.itemText[num76].alpha * 0.3f;
							num79 *= Main.itemText[num76].scale * Main.itemText[num76].alpha * 0.3f;
							num78 *= Main.itemText[num76].scale * Main.itemText[num76].alpha * 0.3f;
							num80 *= Main.itemText[num76].scale * Main.itemText[num76].alpha;
							Microsoft.Xna.Framework.Color color10 = new Microsoft.Xna.Framework.Color((int)num77, (int)num78, (int)num79, (int)num80);
							for (int num81 = 0; num81 < 5; num81++)
							{
								int num82 = 0;
								int num83 = 0;
								if (num81 == 0)
								{
									num82 -= 2;
								}
								else if (num81 == 1)
								{
									num82 += 2;
								}
								else if (num81 == 2)
								{
									num83 -= 2;
								}
								else if (num81 == 3)
								{
									num83 += 2;
								}
								else
								{
									num77 = (float)Main.itemText[num76].color.R * Main.itemText[num76].scale * Main.itemText[num76].alpha;
									num79 = (float)Main.itemText[num76].color.B * Main.itemText[num76].scale * Main.itemText[num76].alpha;
									num78 = (float)Main.itemText[num76].color.G * Main.itemText[num76].scale * Main.itemText[num76].alpha;
									num80 = (float)Main.itemText[num76].color.A * Main.itemText[num76].scale * Main.itemText[num76].alpha;
									color10 = new Microsoft.Xna.Framework.Color((int)num77, (int)num78, (int)num79, (int)num80);
								}
								if (num81 < 4)
								{
									num80 = (float)Main.itemText[num76].color.A * Main.itemText[num76].scale * Main.itemText[num76].alpha;
									color10 = new Microsoft.Xna.Framework.Color(0, 0, 0, (int)num80);
								}
								float num84 = Main.itemText[num76].position.Y - Main.screenPosition.Y + (float)num83;
								if (Main.player[Main.myPlayer].gravDir == -1f)
								{
									num84 = (float)Main.screenHeight - num84;
								}
								Main.spriteBatch.DrawString(Main.fontMouseText, text, new Vector2(Main.itemText[num76].position.X - Main.screenPosition.X + (float)num82 + origin2.X, num84 + origin2.Y), color10, Main.itemText[num76].rotation, origin2, Main.itemText[num76].scale, SpriteEffects.None, 0f);
							}
						}
					}
					if (Main.netMode == 1 && Netplay.Connection.StatusText != "" && Netplay.Connection.StatusText != null)
					{
						string text2 = string.Concat(new object[]
						{
							Netplay.Connection.StatusText,
							": ",
							(int)((float)Netplay.Connection.StatusCount / (float)Netplay.Connection.StatusMax * 100f),
							"%"
						});
						Main.spriteBatch.DrawString(Main.fontMouseText, text2, new Vector2(628f - Main.fontMouseText.MeasureString(text2).X * 0.5f + (float)(Main.screenWidth - 800), 84f), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
					if (Main.BlackFadeIn > 0)
					{
						if (Main.BlackFadeIn < 0)
						{
							Main.BlackFadeIn = 0;
						}
						int num85 = Main.BlackFadeIn;
						if (num85 > 255)
						{
							num85 = 255;
						}
						Main.BlackFadeIn -= 25;
						Main.spriteBatch.Draw(Main.loTexture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), new Microsoft.Xna.Framework.Color(0, 0, 0, num85));
					}
					this.DrawFPS();
					if (!Main.mapFullscreen)
					{
						if (Main.ignoreErrors)
						{
							try
							{
								this.DrawInterface(gameTime);
								goto IL_4EBD;
							}
							catch (Exception e5)
							{
								TimeLogger.DrawException(e5);
								goto IL_4EBD;
							}
						}
						this.DrawInterface(gameTime);
					}
					IL_4EBD:
					TimeLogger.DetailedDrawTime(27);
				}
				else
				{
					Main.maxQ = true;
				}
				Main.spriteBatch.End();
				TimeLogger.DetailedDrawTime(37);
				if (Main.mouseLeft)
				{
					Main.mouseLeftRelease = false;
				}
				else
				{
					Main.mouseLeftRelease = true;
				}
				if (Main.mouseRight)
				{
					Main.mouseRightRelease = false;
				}
				else
				{
					Main.mouseRightRelease = true;
				}
				if (!PlayerInput.Triggers.Current.MouseRight)
				{
					Main.stackSplit = 0;
				}
				if (Main.stackSplit > 0)
				{
					Main.stackSplit--;
				}
				TimeLogger.RenderTime(Main.renderCount, stopwatch.Elapsed.TotalMilliseconds);
				TimeLogger.EndDrawFrame();
				return;
			}
			if (Main.player[Main.myPlayer].talkNPC >= 0 || Main.player[Main.myPlayer].sign >= 0 || (Main.playerInventory && !CaptureManager.Instance.Active))
			{
				Main.player[Main.myPlayer].ToggleInv();
			}
			this.DrawMap();
			this.DrawFPS();
			this.DrawPlayerChat();
			TimeLogger.MapDrawTime(stopwatch.Elapsed.TotalMilliseconds);
			TimeLogger.EndDrawFrame();
			CaptureManager.Instance.Update();
			if (CaptureManager.Instance.Active)
			{
				CaptureManager.Instance.Draw(Main.spriteBatch);
			}
			Main.spriteBatch.End();
			if (Main.mouseLeft)
			{
				Main.mouseLeftRelease = false;
				return;
			}
			Main.mouseLeftRelease = true;
		}

		private void DrawBG()
		{
			this.scAdj = 1f - (float)((double)(Main.screenPosition.Y + (float)Main.screenHeight) / (Main.worldSurface * 16.0));
			this.scAdj = (float)(Main.worldSurface * 16.0) / (Main.screenPosition.Y + (float)Main.screenHeight);
			float num = (float)Main.maxTilesY * 0.15f * 16f;
			num -= Main.screenPosition.Y;
			if (num < 0f)
			{
				num = 0f;
			}
			num *= 0.00025f;
			float num2 = num * num;
			this.scAdj *= 0.45f - num2;
			if ((double)Main.maxTilesY <= 1200.0)
			{
				this.scAdj *= -500f;
			}
			else if ((double)Main.maxTilesY <= 1800.0)
			{
				this.scAdj *= -300f;
			}
			else
			{
				this.scAdj *= -150f;
			}
			this.screenOff = (float)(Main.screenHeight - 600);
			this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1200.0 + 1190.0) + (int)this.scAdj;
			this.cTop = (float)(this.bgTop - 50);
			if (Main.resetClouds)
			{
				Cloud.resetClouds();
				Main.resetClouds = false;
			}
			Main.bgScale = 1f;
			Main.bgW = (int)((float)Main.backgroundWidth[Main.treeMntBG[0]] * Main.bgScale);
			Main.backColor = Main.bgColor;
			Main.trueBackColor = Main.backColor;
			int num3 = Main.bgStyle;
			int num4 = (int)((Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f);
			if ((double)(Main.screenPosition.Y / 16f) < Main.worldSurface + 10.0 && (num4 < 380 || num4 > Main.maxTilesX - 380))
			{
				num3 = 4;
			}
			else if (Main.shroomTiles > 100)
			{
				num3 = 9;
			}
			else if (Main.sandTiles > 1000)
			{
				if (Main.player[Main.myPlayer].ZoneCorrupt)
				{
					num3 = 5;
				}
				else if (Main.player[Main.myPlayer].ZoneCrimson)
				{
					num3 = 5;
				}
				else if (Main.player[Main.myPlayer].ZoneHoly)
				{
					num3 = 5;
				}
				else
				{
					num3 = 2;
				}
			}
			else if (Main.player[Main.myPlayer].ZoneHoly)
			{
				num3 = 6;
			}
			else if (Main.player[Main.myPlayer].ZoneCorrupt)
			{
				num3 = 1;
			}
			else if (Main.player[Main.myPlayer].ZoneCrimson)
			{
				num3 = 8;
			}
			else if (Main.player[Main.myPlayer].ZoneJungle)
			{
				num3 = 3;
			}
			else if (Main.player[Main.myPlayer].ZoneSnow)
			{
				num3 = 7;
			}
			else
			{
				num3 = 0;
			}
			int num5 = 30;
			Main.tranSpeed = 0.05f;
			if (num3 == 0)
			{
				num5 = 60;
			}
			if (Main.bgDelay < 0)
			{
				Main.bgDelay++;
			}
			else if (num3 != Main.bgStyle)
			{
				Main.bgDelay++;
				if (Main.bgDelay > num5)
				{
					Main.bgDelay = -60;
					Main.bgStyle = num3;
					if (num3 == 0)
					{
						Main.bgDelay = 0;
					}
				}
			}
			else if (Main.bgDelay > 0)
			{
				Main.bgDelay--;
			}
			if (Main.gameMenu)
			{
				Main.tranSpeed = 0.02f;
				if (!Main.dayTime)
				{
					Main.bgStyle = 1;
				}
				else
				{
					Main.bgStyle = 0;
				}
				num3 = Main.bgStyle;
			}
			if (Main.quickBG > 0)
			{
				Main.quickBG--;
				Main.bgStyle = num3;
				Main.tranSpeed = 1f;
			}
			if (Main.bgStyle == 2)
			{
				Main.bgAlpha2[0] -= Main.tranSpeed;
				if (Main.bgAlpha2[0] < 0f)
				{
					Main.bgAlpha2[0] = 0f;
				}
				Main.bgAlpha2[1] += Main.tranSpeed;
				if (Main.bgAlpha2[1] > 1f)
				{
					Main.bgAlpha2[1] = 1f;
				}
				Main.bgAlpha2[2] -= Main.tranSpeed;
				if (Main.bgAlpha2[2] < 0f)
				{
					Main.bgAlpha2[2] = 0f;
				}
				Main.bgAlpha2[3] -= Main.tranSpeed;
				if (Main.bgAlpha2[3] < 0f)
				{
					Main.bgAlpha2[3] = 0f;
				}
				Main.bgAlpha2[4] -= Main.tranSpeed;
				if (Main.bgAlpha2[4] < 0f)
				{
					Main.bgAlpha2[4] = 0f;
				}
				Main.bgAlpha2[5] -= Main.tranSpeed;
				if (Main.bgAlpha2[5] < 0f)
				{
					Main.bgAlpha2[5] = 0f;
				}
				Main.bgAlpha2[6] -= Main.tranSpeed;
				if (Main.bgAlpha2[6] < 0f)
				{
					Main.bgAlpha2[6] = 0f;
				}
			}
			else if (Main.bgStyle == 5 || Main.bgStyle == 1 || Main.bgStyle == 6)
			{
				Main.bgAlpha2[0] -= Main.tranSpeed;
				if (Main.bgAlpha2[0] < 0f)
				{
					Main.bgAlpha2[0] = 0f;
				}
				Main.bgAlpha2[1] -= Main.tranSpeed;
				if (Main.bgAlpha2[1] < 0f)
				{
					Main.bgAlpha2[1] = 0f;
				}
				Main.bgAlpha2[2] += Main.tranSpeed;
				if (Main.bgAlpha2[2] > 1f)
				{
					Main.bgAlpha2[2] = 1f;
				}
				Main.bgAlpha2[3] -= Main.tranSpeed;
				if (Main.bgAlpha2[3] < 0f)
				{
					Main.bgAlpha2[3] = 0f;
				}
				Main.bgAlpha2[4] -= Main.tranSpeed;
				if (Main.bgAlpha2[4] < 0f)
				{
					Main.bgAlpha2[4] = 0f;
				}
				Main.bgAlpha2[5] -= Main.tranSpeed;
				if (Main.bgAlpha2[5] < 0f)
				{
					Main.bgAlpha2[5] = 0f;
				}
				Main.bgAlpha2[6] -= Main.tranSpeed;
				if (Main.bgAlpha2[6] < 0f)
				{
					Main.bgAlpha2[6] = 0f;
				}
			}
			else if (Main.bgStyle == 4)
			{
				Main.bgAlpha2[0] -= Main.tranSpeed;
				if (Main.bgAlpha2[0] < 0f)
				{
					Main.bgAlpha2[0] = 0f;
				}
				Main.bgAlpha2[1] -= Main.tranSpeed;
				if (Main.bgAlpha2[1] < 0f)
				{
					Main.bgAlpha2[1] = 0f;
				}
				Main.bgAlpha2[2] -= Main.tranSpeed;
				if (Main.bgAlpha2[2] < 0f)
				{
					Main.bgAlpha2[2] = 0f;
				}
				Main.bgAlpha2[3] += Main.tranSpeed;
				if (Main.bgAlpha2[3] > 1f)
				{
					Main.bgAlpha2[3] = 1f;
				}
				Main.bgAlpha2[4] -= Main.tranSpeed;
				if (Main.bgAlpha2[4] < 0f)
				{
					Main.bgAlpha2[4] = 0f;
				}
				Main.bgAlpha2[5] -= Main.tranSpeed;
				if (Main.bgAlpha2[5] < 0f)
				{
					Main.bgAlpha2[5] = 0f;
				}
				Main.bgAlpha2[6] -= Main.tranSpeed;
				if (Main.bgAlpha2[6] < 0f)
				{
					Main.bgAlpha2[6] = 0f;
				}
			}
			else if (Main.bgStyle == 7)
			{
				Main.bgAlpha2[0] -= Main.tranSpeed;
				if (Main.bgAlpha2[0] < 0f)
				{
					Main.bgAlpha2[0] = 0f;
				}
				Main.bgAlpha2[1] -= Main.tranSpeed;
				if (Main.bgAlpha2[1] < 0f)
				{
					Main.bgAlpha2[1] = 0f;
				}
				Main.bgAlpha2[2] -= Main.tranSpeed;
				if (Main.bgAlpha2[2] < 0f)
				{
					Main.bgAlpha2[2] = 0f;
				}
				Main.bgAlpha2[3] -= Main.tranSpeed;
				if (Main.bgAlpha2[3] < 0f)
				{
					Main.bgAlpha2[3] = 0f;
				}
				Main.bgAlpha2[4] += Main.tranSpeed;
				if (Main.bgAlpha2[4] > 1f)
				{
					Main.bgAlpha2[4] = 1f;
				}
				Main.bgAlpha2[5] -= Main.tranSpeed;
				if (Main.bgAlpha2[5] < 0f)
				{
					Main.bgAlpha2[5] = 0f;
				}
				Main.bgAlpha2[6] -= Main.tranSpeed;
				if (Main.bgAlpha2[6] < 0f)
				{
					Main.bgAlpha2[6] = 0f;
				}
			}
			else if (Main.bgStyle == 8)
			{
				Main.bgAlpha2[0] -= Main.tranSpeed;
				if (Main.bgAlpha2[0] < 0f)
				{
					Main.bgAlpha2[0] = 0f;
				}
				Main.bgAlpha2[1] -= Main.tranSpeed;
				if (Main.bgAlpha2[1] < 0f)
				{
					Main.bgAlpha2[1] = 0f;
				}
				Main.bgAlpha2[2] -= Main.tranSpeed;
				if (Main.bgAlpha2[2] < 0f)
				{
					Main.bgAlpha2[2] = 0f;
				}
				Main.bgAlpha2[3] -= Main.tranSpeed;
				if (Main.bgAlpha2[3] < 0f)
				{
					Main.bgAlpha2[3] = 0f;
				}
				Main.bgAlpha2[4] -= Main.tranSpeed;
				if (Main.bgAlpha2[4] < 0f)
				{
					Main.bgAlpha2[4] = 0f;
				}
				Main.bgAlpha2[5] += Main.tranSpeed;
				if (Main.bgAlpha2[5] > 1f)
				{
					Main.bgAlpha2[5] = 1f;
				}
				Main.bgAlpha2[6] -= Main.tranSpeed;
				if (Main.bgAlpha2[6] < 0f)
				{
					Main.bgAlpha2[6] = 0f;
				}
			}
			else if (Main.bgStyle == 9)
			{
				Main.bgAlpha2[0] += Main.tranSpeed;
				if (Main.bgAlpha2[0] > 1f)
				{
					Main.bgAlpha2[0] = 1f;
				}
				Main.bgAlpha2[1] -= Main.tranSpeed;
				if (Main.bgAlpha2[1] < 0f)
				{
					Main.bgAlpha2[1] = 0f;
				}
				Main.bgAlpha2[2] -= Main.tranSpeed;
				if (Main.bgAlpha2[2] < 0f)
				{
					Main.bgAlpha2[2] = 0f;
				}
				Main.bgAlpha2[3] -= Main.tranSpeed;
				if (Main.bgAlpha2[3] < 0f)
				{
					Main.bgAlpha2[3] = 0f;
				}
				Main.bgAlpha2[4] -= Main.tranSpeed;
				if (Main.bgAlpha2[4] < 0f)
				{
					Main.bgAlpha2[4] = 0f;
				}
				Main.bgAlpha2[5] -= Main.tranSpeed;
				if (Main.bgAlpha2[5] < 0f)
				{
					Main.bgAlpha2[5] = 0f;
				}
				Main.bgAlpha2[6] += Main.tranSpeed;
				if (Main.bgAlpha2[6] > 1f)
				{
					Main.bgAlpha2[6] = 1f;
				}
			}
			else
			{
				Main.bgAlpha2[0] += Main.tranSpeed;
				if (Main.bgAlpha2[0] > 1f)
				{
					Main.bgAlpha2[0] = 1f;
				}
				Main.bgAlpha2[1] -= Main.tranSpeed;
				if (Main.bgAlpha2[1] < 0f)
				{
					Main.bgAlpha2[1] = 0f;
				}
				Main.bgAlpha2[2] -= Main.tranSpeed;
				if (Main.bgAlpha2[2] < 0f)
				{
					Main.bgAlpha2[2] = 0f;
				}
				Main.bgAlpha2[3] -= Main.tranSpeed;
				if (Main.bgAlpha2[3] < 0f)
				{
					Main.bgAlpha2[3] = 0f;
				}
				Main.bgAlpha2[4] -= Main.tranSpeed;
				if (Main.bgAlpha2[4] < 0f)
				{
					Main.bgAlpha2[4] = 0f;
				}
				Main.bgAlpha2[5] -= Main.tranSpeed;
				if (Main.bgAlpha2[5] < 0f)
				{
					Main.bgAlpha2[5] = 0f;
				}
				Main.bgAlpha2[6] -= Main.tranSpeed;
				if (Main.bgAlpha2[6] < 0f)
				{
					Main.bgAlpha2[6] = 0f;
				}
			}
			if (Main.ignoreErrors)
			{
				try
				{
					this.DrawSurfaceBG();
					if (Main.BackgroundEnabled)
					{
						this.DrawUnderworldBackground(false);
					}
					goto IL_ECB;
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
					goto IL_ECB;
				}
			}
			this.DrawSurfaceBG();
			if (Main.BackgroundEnabled)
			{
				this.DrawUnderworldBackground(false);
			}
			IL_ECB:
			TimeLogger.DetailedDrawTime(8);
		}

		public void DrawInfernoRings()
		{
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active && !Main.player[i].outOfRange && Main.player[i].inferno && !Main.player[i].dead)
				{
					this.LoadFlameRing();
					float num = 0.1f;
					float num2 = 0.9f;
					if (!Main.gamePaused && base.IsActive)
					{
						Main.player[i].flameRingScale += 0.004f;
					}
					float flameRingScale;
					if (Main.player[i].flameRingScale < 1f)
					{
						flameRingScale = Main.player[i].flameRingScale;
					}
					else
					{
						Main.player[i].flameRingScale = 0.8f;
						flameRingScale = Main.player[i].flameRingScale;
					}
					if (!Main.gamePaused && base.IsActive)
					{
						Main.player[i].flameRingRot += 0.05f;
					}
					if (Main.player[i].flameRingRot > 6.28318548f)
					{
						Main.player[i].flameRingRot -= 6.28318548f;
					}
					if (Main.player[i].flameRingRot < -6.28318548f)
					{
						Main.player[i].flameRingRot += 6.28318548f;
					}
					for (int j = 0; j < 3; j++)
					{
						float num3 = flameRingScale + num * (float)j;
						if (num3 > 1f)
						{
							num3 -= num * 2f;
						}
						float num4 = MathHelper.Lerp(0.8f, 0f, Math.Abs(num3 - num2) * 10f);
						Main.spriteBatch.Draw(this.flameRingTexture, Main.player[i].Center - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 400 * j, 400, 400)), new Microsoft.Xna.Framework.Color(num4, num4, num4, num4 / 2f), Main.player[i].flameRingRot + 1.04719758f * (float)j, new Vector2(200f, 200f), num3, SpriteEffects.None, 0f);
					}
				}
			}
		}

		private static void UpdateInvasion()
		{
			if (Main.invasionType > 0)
			{
				if (Main.invasionSize <= 0)
				{
					if (Main.invasionType == 1)
					{
						NPC.downedGoblins = true;
						if (Main.netMode == 2)
						{
							NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
						}
						AchievementsHelper.NotifyProgressionEvent(10);
					}
					else if (Main.invasionType == 2)
					{
						NPC.downedFrost = true;
						AchievementsHelper.NotifyProgressionEvent(12);
					}
					else if (Main.invasionType == 3)
					{
						NPC.downedPirates = true;
						AchievementsHelper.NotifyProgressionEvent(11);
					}
					else if (Main.invasionType == 4)
					{
						NPC.downedMartians = true;
						AchievementsHelper.NotifyProgressionEvent(13);
					}
					Main.InvasionWarning();
					Main.invasionType = 0;
					Main.invasionDelay = 0;
				}
				if (Main.invasionX == (double)Main.spawnTileX)
				{
					return;
				}
				float num = (float)Main.dayRate;
				if (Main.invasionX > (double)Main.spawnTileX)
				{
					Main.invasionX -= (double)num;
					if (Main.invasionX <= (double)Main.spawnTileX)
					{
						Main.invasionX = (double)Main.spawnTileX;
						Main.InvasionWarning();
					}
					else
					{
						Main.invasionWarn--;
					}
				}
				else if (Main.invasionX < (double)Main.spawnTileX)
				{
					Main.invasionX += (double)num;
					if (Main.invasionX >= (double)Main.spawnTileX)
					{
						Main.invasionX = (double)Main.spawnTileX;
						Main.InvasionWarning();
					}
					else
					{
						Main.invasionWarn--;
					}
				}
				if (Main.invasionWarn <= 0)
				{
					Main.invasionWarn = 3600;
					Main.InvasionWarning();
				}
			}
		}

		private static void InvasionWarning()
		{
			string text;
			if (Main.invasionSize <= 0)
			{
				if (Main.invasionType == 2)
				{
					text = Lang.misc[4];
				}
				else if (Main.invasionType == 3)
				{
					text = Lang.misc[24];
				}
				else if (Main.invasionType == 4)
				{
					text = Lang.misc[42];
				}
				else
				{
					text = Lang.misc[0];
				}
			}
			else if (Main.invasionX < (double)Main.spawnTileX)
			{
				if (Main.invasionType == 2)
				{
					text = Lang.misc[5];
				}
				else if (Main.invasionType == 3)
				{
					text = Lang.misc[25];
				}
				else if (Main.invasionType == 4)
				{
					text = "";
				}
				else
				{
					text = Lang.misc[1];
				}
			}
			else if (Main.invasionX > (double)Main.spawnTileX)
			{
				if (Main.invasionType == 2)
				{
					text = Lang.misc[6];
				}
				else if (Main.invasionType == 3)
				{
					text = Lang.misc[26];
				}
				else if (Main.invasionType == 4)
				{
					text = "";
				}
				else
				{
					text = Lang.misc[2];
				}
			}
			else if (Main.invasionType == 2)
			{
				text = Lang.misc[7];
			}
			else if (Main.invasionType == 3)
			{
				text = Lang.misc[27];
			}
			else if (Main.invasionType == 4)
			{
				text = Lang.misc[41];
			}
			else
			{
				text = Lang.misc[3];
			}
			if (Main.netMode == 0)
			{
				Main.NewText(text, 175, 75, 255, false);
				return;
			}
			if (Main.netMode == 2)
			{
				NetMessage.SendData(25, -1, -1, text, 255, 175f, 75f, 255f, 0, 0, 0);
			}
		}

		public static bool CanStartInvasion(int type = 1, bool ignoreDelay = false)
		{
			if (Main.invasionType != 0)
			{
				return false;
			}
			if (Main.invasionDelay != 0 && !ignoreDelay)
			{
				return false;
			}
			int num = 0;
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active && Main.player[i].statLifeMax >= 200)
				{
					num++;
				}
			}
			return num > 0;
		}

		public static void StartInvasion(int type = 1)
		{
			if (Main.invasionType != 0 && Main.invasionSize == 0)
			{
				Main.invasionType = 0;
			}
			if (Main.invasionType == 0)
			{
				int num = 0;
				for (int i = 0; i < 255; i++)
				{
					if (Main.player[i].active && Main.player[i].statLifeMax >= 200)
					{
						num++;
					}
				}
				if (num > 0)
				{
					Main.invasionType = type;
					Main.invasionSize = 80 + 40 * num;
					if (type == 3)
					{
						Main.invasionSize += 40 + 20 * num;
					}
					if (type == 4)
					{
						Main.invasionSize = 160 + 40 * num;
					}
					Main.invasionSizeStart = Main.invasionSize;
					Main.invasionProgress = 0;
					Main.invasionProgressIcon = type + 3;
					Main.invasionProgressWave = 0;
					Main.invasionProgressMax = Main.invasionSizeStart;
					Main.invasionWarn = 0;
					if (type == 4)
					{
						Main.invasionX = (double)(Main.spawnTileX - 1);
						Main.invasionWarn = 2;
						return;
					}
					if (Main.rand.Next(2) == 0)
					{
						Main.invasionX = 0.0;
						return;
					}
					Main.invasionX = (double)Main.maxTilesX;
				}
			}
		}

		public static void FakeLoadInvasionStart()
		{
			int num = 0;
			int num2 = 0;
			switch (Main.invasionType)
			{
			case 1:
			case 2:
				num = 80;
				num2 = 40;
				break;
			case 3:
				num = 120;
				num2 = 60;
				break;
			case 4:
				num = 160;
				num2 = 40;
				break;
			}
			int num3 = (int)Math.Ceiling((double)((float)(Main.invasionSize - num) / (float)num2));
			Main.invasionSizeStart = num;
			if (num3 > 0)
			{
				Main.invasionSizeStart += num3 * num2;
			}
		}

		private static void UpdateClient()
		{
			if (Main.myPlayer == 255)
			{
				Netplay.disconnect = true;
			}
			Main.netPlayCounter++;
			if (Main.netPlayCounter > 3600)
			{
				Main.netPlayCounter = 0;
			}
			if (Main.netPlayCounter % 420 == 0)
			{
				NetMessage.SendData(13, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
			}
			if (Main.netPlayCounter % 900 == 0)
			{
				NetMessage.SendData(36, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
				NetMessage.SendData(16, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
				NetMessage.SendData(40, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
			}
			if (Netplay.Connection.IsActive)
			{
				Netplay.Connection.TimeOutTimer++;
				if (!Main.stopTimeOuts && Netplay.Connection.TimeOutTimer > 7200)
				{
					Main.statusText = Lang.inter[43];
					Netplay.disconnect = true;
				}
			}
			for (int i = 0; i < 400; i++)
			{
				if (Main.item[i].active && Main.item[i].owner == Main.myPlayer)
				{
					Main.item[i].FindOwner(i);
				}
			}
		}

		private static void UpdateServer()
		{
			Main.netPlayCounter++;
			if (Main.netPlayCounter % 3600 == 0)
			{
				NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
				Main.netPlayCounter = 0;
			}
			for (int i = 0; i < Main.maxNetPlayers; i++)
			{
				if (Main.player[i].active && Netplay.Clients[i].IsActive)
				{
					Netplay.Clients[i].SpamUpdate();
				}
			}
			if (Math.IEEERemainder((double)Main.netPlayCounter, 900.0) == 0.0)
			{
				bool flag = true;
				int num = Main.lastItemUpdate;
				int num2 = 0;
				while (flag)
				{
					num++;
					if (num >= 400)
					{
						num = 0;
					}
					num2++;
					if (!Main.item[num].active || Main.item[num].owner == 255)
					{
						NetMessage.SendData(21, -1, -1, "", num, 0f, 0f, 0f, 0, 0, 0);
					}
					if (num2 >= Main.maxItemUpdates || num == Main.lastItemUpdate)
					{
						flag = false;
					}
				}
				Main.lastItemUpdate = num;
			}
			for (int j = 0; j < 400; j++)
			{
				if (Main.item[j].active && (Main.item[j].owner == 255 || !Main.player[Main.item[j].owner].active))
				{
					Main.item[j].FindOwner(j);
				}
			}
			for (int k = 0; k < 255; k++)
			{
				if (Netplay.Clients[k].IsActive)
				{
					Netplay.Clients[k].TimeOutTimer++;
					if (!Main.stopTimeOuts && Netplay.Clients[k].TimeOutTimer > 7200)
					{
						Netplay.Clients[k].PendingTermination = true;
					}
				}
				if (Main.player[k].active)
				{
					RemoteClient.CheckSection(k, Main.player[k].position, 1);
				}
			}
		}

		public static void NewText(string newText, byte R = 255, byte G = 255, byte B = 255, bool force = false)
		{
			int num = 80;
			if (!force && newText.Length > num)
			{
				string text = newText;
				while (text.Length > num)
				{
					int num2 = num;
					int num3 = num2;
					while (text.Substring(num3, 1) != " ")
					{
						num3--;
						if (num3 < 1)
						{
							break;
						}
					}
					if (num3 == 0)
					{
						while (text.Substring(num2, 1) != " ")
						{
							num2++;
							if (num2 >= text.Length - 1)
							{
								break;
							}
						}
					}
					else
					{
						num2 = num3;
					}
					if (num2 >= text.Length - 1)
					{
						num2 = text.Length;
					}
					string newText2 = text.Substring(0, num2);
					Main.NewText(newText2, R, G, B, true);
					text = text.Substring(num2);
					if (text.Length > 0)
					{
						while (text.Substring(0, 1) == " ")
						{
							text = text.Substring(1);
						}
					}
				}
				if (text.Length > 0)
				{
					Main.NewText(text, R, G, B, true);
				}
				return;
			}
			for (int i = Main.numChatLines - 1; i > 0; i--)
			{
				Main.chatLine[i].text = Main.chatLine[i - 1].text;
				Main.chatLine[i].parsedText = Main.chatLine[i - 1].parsedText;
				Main.chatLine[i].showTime = Main.chatLine[i - 1].showTime;
				Main.chatLine[i].color = Main.chatLine[i - 1].color;
			}
			if (R == 0 && G == 0 && B == 0)
			{
				Main.chatLine[0].color = Microsoft.Xna.Framework.Color.White;
			}
			else
			{
				Main.chatLine[0].color = new Microsoft.Xna.Framework.Color((int)R, (int)G, (int)B);
			}
			Main.chatLine[0].text = newText;
			Main.chatLine[0].parsedText = ChatManager.ParseMessage(Main.chatLine[0].text, Main.chatLine[0].color);
			Main.chatLine[0].showTime = Main.chatLength;
			Main.PlaySound(12, -1, -1, 1, 1f, 0f);
		}

		public static void NewTextMultiline(string text, bool force = false, Microsoft.Xna.Framework.Color c = default(Microsoft.Xna.Framework.Color), int WidthLimit = -1)
		{
			if (c == default(Microsoft.Xna.Framework.Color))
			{
				c = Microsoft.Xna.Framework.Color.White;
			}
			List<List<TextSnippet>> list;
			if (WidthLimit != -1)
			{
				list = Utils.WordwrapStringSmart(text, c, Main.fontMouseText, WidthLimit, 10);
			}
			else
			{
				list = Utils.WordwrapStringSmart(text, c, Main.fontMouseText, Main.TextMaxLengthForScreen, 10);
			}
			for (int i = 0; i < list.Count; i++)
			{
				Main.NewText(list[i]);
			}
		}

		public static void NewText(List<TextSnippet> snippets)
		{
			for (int i = Main.numChatLines - 1; i > 0; i--)
			{
				Main.chatLine[i].text = Main.chatLine[i - 1].text;
				Main.chatLine[i].parsedText = Main.chatLine[i - 1].parsedText;
				Main.chatLine[i].showTime = Main.chatLine[i - 1].showTime;
				Main.chatLine[i].color = Main.chatLine[i - 1].color;
			}
			Main.chatLine[0].text = "whatever";
			Main.chatLine[0].parsedText = snippets.ToArray();
			Main.chatLine[0].showTime = Main.chatLength;
			Main.PlaySound(12, -1, -1, 1, 1f, 0f);
		}

		public static void NewTextMultilineOld(string text, bool force = false, Microsoft.Xna.Framework.Color c = default(Microsoft.Xna.Framework.Color))
		{
			if (c == default(Microsoft.Xna.Framework.Color))
			{
				c = Microsoft.Xna.Framework.Color.White;
			}
			int num;
			string[] array = Utils.WordwrapString(text, Main.fontMouseText, 460, 10, out num);
			for (int i = 0; i <= num; i++)
			{
				Main.NewText(array[i], c.R, c.G, c.B, force);
			}
		}

		private static void StopRain()
		{
			Main.rainTime = 0;
			Main.raining = false;
			Main.maxRaining = 0f;
		}

		private static void StartRain()
		{
			int num = 86400;
			int num2 = num / 24;
			Main.rainTime = Main.rand.Next(num2 * 8, num);
			if (Main.rand.Next(3) == 0)
			{
				Main.rainTime += Main.rand.Next(0, num2);
			}
			if (Main.rand.Next(4) == 0)
			{
				Main.rainTime += Main.rand.Next(0, num2 * 2);
			}
			if (Main.rand.Next(5) == 0)
			{
				Main.rainTime += Main.rand.Next(0, num2 * 2);
			}
			if (Main.rand.Next(6) == 0)
			{
				Main.rainTime += Main.rand.Next(0, num2 * 3);
			}
			if (Main.rand.Next(7) == 0)
			{
				Main.rainTime += Main.rand.Next(0, num2 * 4);
			}
			if (Main.rand.Next(8) == 0)
			{
				Main.rainTime += Main.rand.Next(0, num2 * 5);
			}
			float num3 = 1f;
			if (Main.rand.Next(2) == 0)
			{
				num3 += 0.05f;
			}
			if (Main.rand.Next(3) == 0)
			{
				num3 += 0.1f;
			}
			if (Main.rand.Next(4) == 0)
			{
				num3 += 0.15f;
			}
			if (Main.rand.Next(5) == 0)
			{
				num3 += 0.2f;
			}
			Main.rainTime = (int)((float)Main.rainTime * num3);
			Main.ChangeRain();
			Main.raining = true;
		}

		private static void ChangeRain()
		{
			if (Main.cloudBGActive >= 1f || (double)Main.numClouds > 150.0)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.maxRaining = (float)Main.rand.Next(20, 90) * 0.01f;
					return;
				}
				Main.maxRaining = (float)Main.rand.Next(40, 90) * 0.01f;
				return;
			}
			else if ((double)Main.numClouds > 100.0)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.maxRaining = (float)Main.rand.Next(10, 70) * 0.01f;
					return;
				}
				Main.maxRaining = (float)Main.rand.Next(20, 60) * 0.01f;
				return;
			}
			else
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.maxRaining = (float)Main.rand.Next(5, 40) * 0.01f;
					return;
				}
				Main.maxRaining = (float)Main.rand.Next(5, 30) * 0.01f;
				return;
			}
		}

		public static void StartSlimeRain(bool announce = true)
		{
			if (Main.slimeRain)
			{
				return;
			}
			if (Main.netMode == 1)
			{
				Main.slimeRainTime = 54000.0;
				Main.slimeRain = true;
				SkyManager.Instance.Activate("Slime", default(Vector2), new object[0]);
				return;
			}
			if (Main.raining)
			{
				return;
			}
			Main.slimeRainTime = (double)Main.rand.Next(32400, 54000);
			Main.slimeRain = true;
			Main.slimeRainKillCount = 0;
			if (Main.netMode == 0)
			{
				SkyManager.Instance.Activate("Slime", default(Vector2), new object[0]);
				if (announce)
				{
					Main.slimeWarningTime = Main.slimeWarningDelay;
					return;
				}
			}
			else if (announce)
			{
				Main.slimeWarningTime = Main.slimeWarningDelay;
				NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
			}
		}

		public static void StopSlimeRain(bool announce = true)
		{
			if (!Main.slimeRain)
			{
				return;
			}
			if (Main.netMode == 1)
			{
				Main.slimeRainTime = 0.0;
				Main.slimeRain = false;
				SkyManager.Instance.Deactivate("Slime", new object[0]);
				return;
			}
			int num = 86400;
			int num2 = num * 7;
			if (Main.hardMode)
			{
				num2 *= 2;
			}
			Main.slimeRainTime = (double)(-(double)Main.rand.Next(3024, 6048) * 100);
			Main.slimeRain = false;
			if (Main.netMode == 0)
			{
				if (announce)
				{
					Main.slimeWarningTime = Main.slimeWarningDelay;
				}
				SkyManager.Instance.Deactivate("Slime", new object[0]);
				return;
			}
			if (announce)
			{
				Main.slimeWarningTime = Main.slimeWarningDelay;
				NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
			}
		}

		private static void UpdateTime()
		{
			if (Main.pumpkinMoon)
			{
				Main.bloodMoon = false;
				Main.snowMoon = false;
			}
			if (Main.snowMoon)
			{
				Main.bloodMoon = false;
			}
			if ((Main.netMode != 1 && !Main.gameMenu) || Main.netMode == 2)
			{
				if (Main.slimeRainTime > 0.0)
				{
					Main.slimeRainTime -= (double)Main.dayRate;
					if (Main.slimeRainTime <= 0.0)
					{
						Main.StopSlimeRain(true);
					}
				}
				else if (Main.slimeRainTime < 0.0)
				{
					Main.slimeRainTime += (double)Main.dayRate;
					if (Main.slimeRainTime > 0.0)
					{
						Main.slimeRainTime = 0.0;
					}
				}
				if (Main.raining)
				{
					Main.rainTime -= Main.dayRate;
					if (Main.dayRate > 0)
					{
						int num = 86400;
						num /= Main.dayRate;
						int num2 = num / 24;
						if (Main.rainTime <= 0)
						{
							Main.StopRain();
						}
						else if (Main.rand.Next(num2 * 2) == 0)
						{
							Main.ChangeRain();
						}
					}
				}
				else if (!Main.slimeRain)
				{
					int num3 = 86400;
					num3 /= ((Main.dayRate != 0) ? Main.dayRate : 1);
					if (Main.rand.Next((int)((double)num3 * 5.5)) == 0)
					{
						Main.StartRain();
					}
					else if (Main.cloudBGActive >= 1f && Main.rand.Next(num3 * 4) == 0)
					{
						Main.StartRain();
					}
					if (!Main.raining && !NPC.BusyWithAnyInvasionOfSorts())
					{
						int num4 = (int)(1728000.0 / (double)Main.dayRate);
						if (!NPC.downedSlimeKing)
						{
							num4 /= 2;
						}
						if (Main.hardMode)
						{
							num4 = (int)((double)num4 * 1.5);
						}
						bool flag = false;
						for (int i = 0; i < 255; i++)
						{
							if (Main.player[i].active && Main.player[i].statLifeMax > 140 && Main.player[i].statDefense > 8)
							{
								flag = true;
							}
						}
						if (!flag)
						{
							num4 *= 5;
						}
						if (Main.dayRate > 0 && num4 > 0 && (flag || Main.expertMode) && Main.rand.Next(num4) == 0)
						{
							Main.StartSlimeRain(true);
						}
					}
				}
			}
			if (Main.maxRaining != Main.oldMaxRaining)
			{
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
				}
				Main.oldMaxRaining = Main.maxRaining;
			}
			Main.UpdateSundial();
			Main.time += (double)Main.dayRate;
			CultistRitual.UpdateTime();
			BirthdayParty.UpdateTime();
			Sandstorm.UpdateTime();
			DD2Event.UpdateTime();
#if CLIENT
			if (NPC.MoonLordCountdown > 0)
			{
				float num5 = MathHelper.Clamp((float)Math.Sin((double)((float)NPC.MoonLordCountdown / 60f * 0.5f)) * 2f, 0f, 1f);
				num5 *= 0.75f - 0.5f * ((float)NPC.MoonLordCountdown / 3600f);
				if (!Filters.Scene["MoonLordShake"].IsActive())
				{
					Filters.Scene.Activate("MoonLordShake", Main.player[Main.myPlayer].position, new object[0]);
				}
				Filters.Scene["MoonLordShake"].GetShader().UseIntensity(num5);
			}
			else if (Filters.Scene["MoonLordShake"].IsActive())
			{
				Filters.Scene.Deactivate("MoonLordShake", new object[0]);
			}
#endif
			if (NPC.MoonLordCountdown > 0)
			{
				NPC.MoonLordCountdown--;
				if (NPC.MoonLordCountdown <= 0 && Main.netMode != 1)
				{
					NPC.SpawnOnPlayer((int)Player.FindClosest(new Vector2((float)(Main.maxTilesX / 2), (float)Main.worldSurface / 2f) * 16f, 0, 0), 398);
				}
			}
			if (NPC.taxCollector && Main.netMode != 2 && !Main.gameMenu)
			{
				Main.player[Main.myPlayer].taxTimer += Main.dayRate;
				if (Main.player[Main.myPlayer].taxTimer >= Player.taxRate)
				{
					Main.player[Main.myPlayer].taxTimer -= Player.taxRate;
					Main.player[Main.myPlayer].CollectTaxes();
				}
			}
			if (Main.netMode != 1 && Main.slimeWarningTime > 0)
			{
				Main.slimeWarningTime--;
				if (Main.slimeWarningTime <= 0)
				{
					if (Main.netMode == 0)
					{
						if (Main.slimeRainTime > 0.0)
						{
							Main.NewText(Lang.gen[74], 50, 255, 130, false);
						}
						else
						{
							Main.NewText(Lang.gen[75], 50, 255, 130, false);
						}
					}
					else if (Main.slimeRainTime > 0.0)
					{
						NetMessage.SendData(25, -1, -1, Lang.gen[74], 255, 50f, 255f, 130f, 0, 0, 0);
					}
					else
					{
						NetMessage.SendData(25, -1, -1, Lang.gen[75], 255, 50f, 255f, 130f, 0, 0, 0);
					}
				}
			}
			if (Main.netMode != 1)
			{
				if (NPC.travelNPC)
				{
					if (!Main.dayTime || Main.time > 48600.0)
					{
						WorldGen.UnspawnTravelNPC();
					}
				}
				else if (!Main.fastForwardTime && Main.dayTime && Main.time < 27000.0)
				{
					int num6 = (int)(27000.0 / (double)Main.dayRate);
					num6 *= 4;
					if (Main.rand.Next(num6) == 0)
					{
						int num7 = 0;
						for (int j = 0; j < 200; j++)
						{
							if (Main.npc[j].active && Main.npc[j].townNPC && Main.npc[j].type != 37 && Main.npc[j].type != 453)
							{
								num7++;
							}
						}
						if (num7 >= 2)
						{
							WorldGen.SpawnTravelNPC();
						}
					}
				}
				NPC.travelNPC = false;
			}
			if (!Main.dayTime)
			{
				Main.eclipse = false;
				if (!Main.fastForwardTime)
				{
					if (WorldGen.spawnEye && Main.netMode != 1 && Main.time > 4860.0)
					{
						for (int k = 0; k < 255; k++)
						{
							if (Main.player[k].active && !Main.player[k].dead && (double)Main.player[k].position.Y < Main.worldSurface * 16.0)
							{
								NPC.SpawnOnPlayer(k, 4);
								WorldGen.spawnEye = false;
								break;
							}
						}
					}
					if (WorldGen.spawnHardBoss > 0 && Main.netMode != 1 && Main.time > 4860.0)
					{
						bool flag2 = false;
						for (int l = 0; l < 200; l++)
						{
							if (Main.npc[l].active && Main.npc[l].boss)
							{
								flag2 = true;
							}
						}
						if (!flag2)
						{
							int m = 0;
							while (m < 255)
							{
								if (Main.player[m].active && !Main.player[m].dead && (double)Main.player[m].position.Y < Main.worldSurface * 16.0)
								{
									if (WorldGen.spawnHardBoss == 1)
									{
										NPC.SpawnOnPlayer(m, 134);
										break;
									}
									if (WorldGen.spawnHardBoss == 2)
									{
										NPC.SpawnOnPlayer(m, 125);
										NPC.SpawnOnPlayer(m, 126);
										break;
									}
									if (WorldGen.spawnHardBoss == 3)
									{
										NPC.SpawnOnPlayer(m, 127);
										break;
									}
									break;
								}
								else
								{
									m++;
								}
							}
						}
						WorldGen.spawnHardBoss = 0;
					}
				}
				if (Main.time > 32400.0)
				{
					if (Main.fastForwardTime)
					{
						Main.fastForwardTime = false;
						Main.UpdateSundial();
					}
					Main.checkXMas();
					Main.checkHalloween();
					Main.AnglerQuestSwap();
					BirthdayParty.CheckMorning();
					if (Main.invasionDelay > 0)
					{
						Main.invasionDelay--;
					}
					WorldGen.spawnNPC = 0;
					Main.checkForSpawns = 0;
					Main.time = 0.0;
					if (Main.bloodMoon && Main.netMode != 1)
					{
						AchievementsHelper.NotifyProgressionEvent(5);
					}
					Main.bloodMoon = false;
					Main.stopMoonEvent();
					Main.dayTime = true;
					if (Main.sundialCooldown > 0)
					{
						Main.sundialCooldown--;
					}
					Main.moonPhase++;
					if (Main.moonPhase >= 8)
					{
						Main.moonPhase = 0;
					}
					if (Main.netMode == 2)
					{
						NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
						WorldGen.saveAndPlay();
					}
					if (Main.netMode != 1)
					{
						AchievementsHelper.NotifyProgressionEvent(1);
						if (Main.hardMode && NPC.downedMechBossAny && Main.rand.Next(20) == 0)
						{
							Main.eclipse = true;
							AchievementsHelper.NotifyProgressionEvent(2);
							if (Main.eclipse)
							{
								if (Main.netMode == 0)
								{
									Main.NewText(Lang.misc[20], 50, 255, 130, false);
								}
								else if (Main.netMode == 2)
								{
									NetMessage.SendData(25, -1, -1, Lang.misc[20], 255, 50f, 255f, 130f, 0, 0, 0);
								}
							}
							if (Main.netMode == 2)
							{
								NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
							}
						}
						else if (!Main.snowMoon && !Main.pumpkinMoon && !DD2Event.Ongoing)
						{
							if (WorldGen.shadowOrbSmashed)
							{
								if (!NPC.downedGoblins)
								{
									if (Main.rand.Next(3) == 0)
									{
										Main.StartInvasion(1);
									}
								}
								else if ((Main.hardMode && Main.rand.Next(60) == 0) || (!Main.hardMode && Main.rand.Next(30) == 0))
								{
									Main.StartInvasion(1);
								}
							}
							if (Main.invasionType == 0 && Main.hardMode && WorldGen.altarCount > 0 && ((NPC.downedPirates && Main.rand.Next(50) == 0) || (!NPC.downedPirates && Main.rand.Next(30) == 0)))
							{
								Main.StartInvasion(3);
							}
						}
					}
				}
				if (Main.time > 16200.0 && WorldGen.spawnMeteor)
				{
					WorldGen.spawnMeteor = false;
					WorldGen.dropMeteor();
					return;
				}
			}
			else
			{
				Main.bloodMoon = false;
				Main.stopMoonEvent();
				if (Main.time > 54000.0)
				{
					NPC.setFireFlyChance();
					BirthdayParty.CheckNight();
					WorldGen.spawnNPC = 0;
					Main.checkForSpawns = 0;
					if (Main.rand.Next(50) == 0 && Main.netMode != 1 && WorldGen.shadowOrbSmashed)
					{
						WorldGen.spawnMeteor = true;
					}
					if (Main.eclipse && Main.netMode != 1)
					{
						AchievementsHelper.NotifyProgressionEvent(3);
					}
					Main.eclipse = false;
					if (Main.netMode != 1)
					{
						AchievementsHelper.NotifyProgressionEvent(0);
					}
					if (!Main.fastForwardTime)
					{
						if (!NPC.downedBoss1 && Main.netMode != 1)
						{
							bool flag3 = false;
							for (int n = 0; n < 255; n++)
							{
								if (Main.player[n].active && Main.player[n].statLifeMax >= 200 && Main.player[n].statDefense > 10)
								{
									flag3 = true;
									break;
								}
							}
							if (flag3 && Main.rand.Next(3) == 0)
							{
								int num8 = 0;
								for (int num9 = 0; num9 < 200; num9++)
								{
									if (Main.npc[num9].active && Main.npc[num9].townNPC)
									{
										num8++;
									}
								}
								if (num8 >= 4)
								{
									WorldGen.spawnEye = true;
									if (Main.netMode == 0)
									{
										Main.NewText(Lang.misc[9], 50, 255, 130, false);
									}
									else if (Main.netMode == 2)
									{
										NetMessage.SendData(25, -1, -1, Lang.misc[9], 255, 50f, 255f, 130f, 0, 0, 0);
									}
								}
							}
						}
						if (Main.netMode != 1 && !Main.pumpkinMoon && !DD2Event.Ongoing && !Main.snowMoon && WorldGen.altarCount > 0 && Main.hardMode && !WorldGen.spawnEye && Main.rand.Next(10) == 0)
						{
							bool flag4 = false;
							for (int num10 = 0; num10 < 200; num10++)
							{
								if (Main.npc[num10].active && Main.npc[num10].boss)
								{
									flag4 = true;
								}
							}
							if (!flag4 && (!NPC.downedMechBoss1 || !NPC.downedMechBoss2 || !NPC.downedMechBoss3))
							{
								int num11 = 0;
								while (num11 < 1000)
								{
									int num12 = Main.rand.Next(3) + 1;
									if (num12 == 1 && !NPC.downedMechBoss1)
									{
										WorldGen.spawnHardBoss = num12;
										if (Main.netMode == 0)
										{
											Main.NewText(Lang.misc[28], 50, 255, 130, false);
											break;
										}
										if (Main.netMode == 2)
										{
											NetMessage.SendData(25, -1, -1, Lang.misc[28], 255, 50f, 255f, 130f, 0, 0, 0);
											break;
										}
										break;
									}
									else if (num12 == 2 && !NPC.downedMechBoss2)
									{
										WorldGen.spawnHardBoss = num12;
										if (Main.netMode == 0)
										{
											Main.NewText(Lang.misc[29], 50, 255, 130, false);
											break;
										}
										if (Main.netMode == 2)
										{
											NetMessage.SendData(25, -1, -1, Lang.misc[29], 255, 50f, 255f, 130f, 0, 0, 0);
											break;
										}
										break;
									}
									else if (num12 == 3 && !NPC.downedMechBoss3)
									{
										WorldGen.spawnHardBoss = num12;
										if (Main.netMode == 0)
										{
											Main.NewText(Lang.misc[30], 50, 255, 130, false);
											break;
										}
										if (Main.netMode == 2)
										{
											NetMessage.SendData(25, -1, -1, Lang.misc[30], 255, 50f, 255f, 130f, 0, 0, 0);
											break;
										}
										break;
									}
									else
									{
										num11++;
									}
								}
							}
						}
						if (!WorldGen.spawnEye && Main.moonPhase != 4 && Main.rand.Next(9) == 0 && Main.netMode != 1)
						{
							for (int num13 = 0; num13 < 255; num13++)
							{
								if (Main.player[num13].active && Main.player[num13].statLifeMax > 120)
								{
									Main.bloodMoon = true;
									break;
								}
							}
							if (Main.bloodMoon)
							{
								AchievementsHelper.NotifyProgressionEvent(4);
								if (Main.netMode == 0)
								{
									Main.NewText(Lang.misc[8], 50, 255, 130, false);
								}
								else if (Main.netMode == 2)
								{
									NetMessage.SendData(25, -1, -1, Lang.misc[8], 255, 50f, 255f, 130f, 0, 0, 0);
								}
							}
						}
					}
					Main.time = 0.0;
					Main.dayTime = false;
					if (Main.netMode == 2)
					{
						NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
					}
				}
				if (Main.netMode != 1 && Main.worldRate > 0)
				{
					Main.checkForSpawns++;
					if (Main.checkForSpawns >= 7200 / Main.worldRate)
					{
						int num14 = 0;
						for (int num15 = 0; num15 < 255; num15++)
						{
							if (Main.player[num15].active)
							{
								num14++;
							}
						}
						for (int num16 = 0; num16 < 580; num16++)
						{
							Main.nextNPC[num16] = false;
						}
						Main.checkForSpawns = 0;
						WorldGen.spawnNPC = 0;
						int num17 = 0;
						int num18 = 0;
						int num19 = 0;
						int num20 = 0;
						int num21 = 0;
						int num22 = 0;
						int num23 = 0;
						int num24 = 0;
						int num25 = 0;
						int num26 = 0;
						int num27 = 0;
						int num28 = 0;
						int num29 = 0;
						int num30 = 0;
						int num31 = 0;
						int num32 = 0;
						int num33 = 0;
						int num34 = 0;
						int num35 = 0;
						int num36 = 0;
						int num37 = 0;
						int num38 = 0;
						int num39 = 0;
						int num40 = 0;
						int num41 = 0;
						for (int num42 = 0; num42 < 200; num42++)
						{
							if (Main.npc[num42].active && Main.npc[num42].townNPC)
							{
								if (Main.npc[num42].type != 368 && Main.npc[num42].type != 37 && Main.npc[num42].type != 453 && !Main.npc[num42].homeless)
								{
									WorldGen.QuickFindHome(num42);
								}
								if (Main.npc[num42].type == 37)
								{
									num22++;
								}
								if (Main.npc[num42].type == 17)
								{
									num17++;
								}
								if (Main.npc[num42].type == 18)
								{
									num18++;
								}
								if (Main.npc[num42].type == 19)
								{
									num20++;
								}
								if (Main.npc[num42].type == 20)
								{
									num19++;
								}
								if (Main.npc[num42].type == 22)
								{
									num21++;
								}
								if (Main.npc[num42].type == 38)
								{
									num23++;
								}
								if (Main.npc[num42].type == 54)
								{
									num24++;
								}
								if (Main.npc[num42].type == 107)
								{
									num26++;
								}
								if (Main.npc[num42].type == 108)
								{
									num25++;
								}
								if (Main.npc[num42].type == 124)
								{
									num27++;
								}
								if (Main.npc[num42].type == 142)
								{
									num28++;
								}
								if (Main.npc[num42].type == 160)
								{
									num29++;
								}
								if (Main.npc[num42].type == 178)
								{
									num30++;
								}
								if (Main.npc[num42].type == 207)
								{
									num31++;
								}
								if (Main.npc[num42].type == 208)
								{
									num32++;
								}
								if (Main.npc[num42].type == 209)
								{
									num33++;
								}
								if (Main.npc[num42].type == 227)
								{
									num34++;
								}
								if (Main.npc[num42].type == 228)
								{
									num35++;
								}
								if (Main.npc[num42].type == 229)
								{
									num36++;
								}
								if (Main.npc[num42].type == 353)
								{
									num37++;
								}
								if (Main.npc[num42].type == 369)
								{
									num38++;
								}
								if (Main.npc[num42].type == 441)
								{
									num39++;
								}
								if (Main.npc[num42].type == 550)
								{
									num40++;
								}
								num41++;
							}
						}
						if (WorldGen.spawnNPC == 0)
						{
							int num43 = 0;
							bool flag5 = false;
							int num44 = 0;
							bool flag6 = false;
							bool flag7 = false;
							bool flag8 = false;
							bool flag9 = false;
							for (int num45 = 0; num45 < 255; num45++)
							{
								if (Main.player[num45].active)
								{
									for (int num46 = 0; num46 < 58; num46++)
									{
										if (Main.player[num45].inventory[num46] != null & Main.player[num45].inventory[num46].stack > 0)
										{
											if (num43 < 2000000000)
											{
												if (Main.player[num45].inventory[num46].type == 71)
												{
													num43 += Main.player[num45].inventory[num46].stack;
												}
												if (Main.player[num45].inventory[num46].type == 72)
												{
													num43 += Main.player[num45].inventory[num46].stack * 100;
												}
												if (Main.player[num45].inventory[num46].type == 73)
												{
													num43 += Main.player[num45].inventory[num46].stack * 10000;
												}
												if (Main.player[num45].inventory[num46].type == 74)
												{
													num43 += Main.player[num45].inventory[num46].stack * 1000000;
												}
											}
											if (Main.player[num45].inventory[num46].ammo == AmmoID.Bullet || Main.player[num45].inventory[num46].useAmmo == AmmoID.Bullet)
											{
												flag6 = true;
											}
											if (Main.player[num45].inventory[num46].type == 166 || Main.player[num45].inventory[num46].type == 167 || Main.player[num45].inventory[num46].type == 168 || Main.player[num45].inventory[num46].type == 235 || Main.player[num45].inventory[num46].type == 2896 || Main.player[num45].inventory[num46].type == 3547)
											{
												flag7 = true;
											}
											if (Main.player[num45].inventory[num46].dye > 0 || (Main.player[num45].inventory[num46].type >= 1107 && Main.player[num45].inventory[num46].type <= 1120) || (Main.player[num45].inventory[num46].type >= 3385 && Main.player[num45].inventory[num46].type <= 3388))
											{
												if (Main.player[num45].inventory[num46].type >= 3385 && Main.player[num45].inventory[num46].type <= 3388)
												{
													flag9 = true;
												}
												flag8 = true;
											}
										}
									}
									int num47 = Main.player[num45].statLifeMax / 20;
									if (num47 > 5)
									{
										flag5 = true;
									}
									num44 += num47;
									if (!flag8)
									{
										for (int num48 = 0; num48 < 3; num48++)
										{
											if (Main.player[num45].dye[num48] != null && Main.player[num45].dye[num48].stack > 0 && Main.player[num45].dye[num48].dye > 0)
											{
												flag8 = true;
											}
										}
									}
								}
							}
							if (!NPC.downedBoss3 && num22 == 0)
							{
								int num49 = NPC.NewNPC(Main.dungeonX * 16 + 8, Main.dungeonY * 16, 37, 0, 0f, 0f, 0f, 0f, 255);
								Main.npc[num49].homeless = false;
								Main.npc[num49].homeTileX = Main.dungeonX;
								Main.npc[num49].homeTileY = Main.dungeonY;
							}
							bool flag10 = false;
							if (Main.rand.Next(40) == 0)
							{
								flag10 = true;
							}
							if (num21 < 1)
							{
								Main.nextNPC[22] = true;
							}
							if ((double)num43 > 5000.0 && num17 < 1)
							{
								Main.nextNPC[17] = true;
							}
							if (flag5 && num18 < 1 && num17 > 0)
							{
								Main.nextNPC[18] = true;
							}
							if (flag6 && num20 < 1)
							{
								Main.nextNPC[19] = true;
							}
							if ((NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3) && num19 < 1)
							{
								Main.nextNPC[20] = true;
							}
							if (flag7 && num17 > 0 && num23 < 1)
							{
								Main.nextNPC[38] = true;
							}
							if (NPC.savedStylist && num37 < 1)
							{
								Main.nextNPC[353] = true;
							}
							if (NPC.savedAngler && num38 < 1)
							{
								Main.nextNPC[369] = true;
							}
							if (NPC.downedBoss3 && num24 < 1)
							{
								Main.nextNPC[54] = true;
							}
							if (NPC.savedGoblin && num26 < 1)
							{
								Main.nextNPC[107] = true;
							}
							if (NPC.savedTaxCollector && num39 < 1)
							{
								Main.nextNPC[441] = true;
							}
							if (NPC.savedWizard && num25 < 1)
							{
								Main.nextNPC[108] = true;
							}
							if (NPC.savedMech && num27 < 1)
							{
								Main.nextNPC[124] = true;
							}
							if (NPC.downedFrost && num28 < 1 && Main.xMas)
							{
								Main.nextNPC[142] = true;
							}
							if (NPC.downedMechBossAny && num30 < 1)
							{
								Main.nextNPC[178] = true;
							}
							if (flag8 && num31 < 1 && (NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3 || flag9))
							{
								Main.nextNPC[207] = true;
							}
							if (NPC.downedQueenBee && num35 < 1)
							{
								Main.nextNPC[228] = true;
							}
							if (NPC.downedPirates && num36 < 1)
							{
								Main.nextNPC[229] = true;
							}
							if (num29 < 1 && Main.hardMode)
							{
								Main.nextNPC[160] = true;
							}
							if (Main.hardMode && NPC.downedPlantBoss && num33 < 1)
							{
								Main.nextNPC[209] = true;
							}
							if (num41 >= 8 && num34 < 1)
							{
								Main.nextNPC[227] = true;
							}
							if (flag10 && num32 < 1 && num41 >= 14)
							{
								Main.nextNPC[208] = true;
							}
							if (NPC.savedBartender && num40 < 1)
							{
								Main.nextNPC[550] = true;
							}
							if (WorldGen.spawnNPC == 0 && num21 < 1)
							{
								WorldGen.spawnNPC = 22;
							}
							if (WorldGen.spawnNPC == 0 && (double)num43 > 5000.0 && num17 < 1)
							{
								WorldGen.spawnNPC = 17;
							}
							if (WorldGen.spawnNPC == 0 && flag5 && num18 < 1 && num17 > 0)
							{
								WorldGen.spawnNPC = 18;
							}
							if (WorldGen.spawnNPC == 0 && flag6 && num20 < 1)
							{
								WorldGen.spawnNPC = 19;
							}
							if (WorldGen.spawnNPC == 0 && NPC.savedGoblin && num26 < 1)
							{
								WorldGen.spawnNPC = 107;
							}
							if (WorldGen.spawnNPC == 0 && NPC.savedTaxCollector && num39 < 1)
							{
								WorldGen.spawnNPC = 441;
							}
							if (WorldGen.spawnNPC == 0 && NPC.savedWizard && num25 < 1)
							{
								WorldGen.spawnNPC = 108;
							}
							if (WorldGen.spawnNPC == 0 && Main.hardMode && num29 < 1)
							{
								WorldGen.spawnNPC = 160;
							}
							if (WorldGen.spawnNPC == 0 && (NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3) && num19 < 1)
							{
								WorldGen.spawnNPC = 20;
							}
							if (WorldGen.spawnNPC == 0 && flag7 && num17 > 0 && num23 < 1)
							{
								WorldGen.spawnNPC = 38;
							}
							if (WorldGen.spawnNPC == 0 && NPC.downedQueenBee && num35 < 1)
							{
								WorldGen.spawnNPC = 228;
							}
							if (WorldGen.spawnNPC == 0 && NPC.downedMechBossAny && num30 < 1)
							{
								WorldGen.spawnNPC = 178;
							}
							if (WorldGen.spawnNPC == 0 && NPC.savedMech && num27 < 1)
							{
								WorldGen.spawnNPC = 124;
							}
							if (WorldGen.spawnNPC == 0 && NPC.savedAngler && num38 < 1)
							{
								WorldGen.spawnNPC = 369;
							}
							if (WorldGen.spawnNPC == 0 && Main.hardMode && NPC.downedPlantBoss && num33 < 1)
							{
								WorldGen.spawnNPC = 209;
							}
							if (WorldGen.spawnNPC == 0 && NPC.downedPirates && num36 < 1)
							{
								WorldGen.spawnNPC = 229;
							}
							if (WorldGen.spawnNPC == 0 && NPC.downedBoss3 && num24 < 1)
							{
								WorldGen.spawnNPC = 54;
							}
							if (WorldGen.spawnNPC == 0 && NPC.savedStylist && num37 < 1)
							{
								WorldGen.spawnNPC = 353;
							}
							if (WorldGen.spawnNPC == 0 && flag8 && num31 < 1)
							{
								WorldGen.spawnNPC = 207;
							}
							if (WorldGen.spawnNPC == 0 && num41 >= 8 && num34 < 1)
							{
								WorldGen.spawnNPC = 227;
							}
							if (WorldGen.spawnNPC == 0 && flag10 && num41 >= 14 && num32 < 1)
							{
								WorldGen.spawnNPC = 208;
							}
							if (WorldGen.spawnNPC == 0 && NPC.downedFrost && num28 < 1 && Main.xMas)
							{
								WorldGen.spawnNPC = 142;
							}
							if (WorldGen.spawnNPC == 0 && NPC.savedBartender && num40 < 1)
							{
								WorldGen.spawnNPC = 550;
							}
						}
					}
				}
			}
		}

		public static int DamageVar(float dmg)
		{
			float num = dmg * (1f + (float)Main.rand.Next(-15, 16) * 0.01f);
			return (int)Math.Round((double)num);
		}

		public static double CalculateDamage(int Damage, int Defense)
		{
			double num = (double)Damage - (double)Defense * 0.5;
			if (num < 1.0)
			{
				num = 1.0;
			}
			return num;
		}

		public static double CalculatePlayerDamage(int Damage, int Defense)
		{
			double num = (double)Damage - (double)Defense * 0.5;
			if (Main.expertMode)
			{
				num = (double)Damage - (double)Defense * 0.75;
			}
			if (num < 1.0)
			{
				num = 1.0;
			}
			return num;
		}

		public void OnTileChangeEvent(int x, int y, int count, TileChangeType eventType)
		{
			switch (eventType)
			{
			case TileChangeType.LavaWater:
				Main.PlaySound(SoundID.LiquidsWaterLava, x * 16 + count * 8, y * 16 + count * 8);
				return;
			case TileChangeType.HoneyWater:
				Main.PlaySound(SoundID.LiquidsHoneyWater, x * 16 + count * 8, y * 16 + count * 8);
				return;
			case TileChangeType.HoneyLava:
				Main.PlaySound(SoundID.LiquidsHoneyLava, x * 16 + count * 8, y * 16 + count * 8);
				return;
			default:
				return;
			}
		}

		public static void PlaySound(int type, Vector2 position, int Style = 1)
		{
			Main.PlaySound(type, (int)position.X, (int)position.Y, Style, 1f, 0f);
		}

		public static void PlaySoundInstance(SoundEffectInstance sound)
		{
			sound.Play();
#if !WINDOWS
			ActiveSoundInstances.Add(sound);
#endif
		}

		public static ActiveSound GetActiveSound(SlotId id)
		{
			if (Main._trackedSounds.Has(id))
			{
				return Main._trackedSounds[id];
			}
			return null;
		}

		public static SoundEffectInstance PlaySound(LegacySoundStyle type, Vector2 position)
		{
			if (type == null)
			{
				return null;
			}
			return Main.PlaySound(type, (int)position.X, (int)position.Y);
		}

		public static SoundEffectInstance PlaySound(LegacySoundStyle type, int x = -1, int y = -1)
		{
			if (type == null)
			{
				return null;
			}
			return Main.PlaySound(type.SoundId, x, y, type.Style, type.Volume, type.GetRandomPitch());
		}

		public static void StopTrackedSounds()
		{
			foreach (SlotVector<ActiveSound>.ItemPair current in ((IEnumerable<SlotVector<ActiveSound>.ItemPair>)Main._trackedSounds))
			{
				current.Value.Stop();
			}
			Main._trackedSounds.Clear();
		}

		public static SlotId PlayTrackedSound(SoundStyle style, Vector2 position)
		{
			if (Main.dedServ || style == null || !style.IsTrackable)
			{
				return SlotId.Invalid;
			}
			Vector2 value = Main.screenPosition + new Vector2((float)(Main.screenWidth / 2), (float)(Main.screenHeight / 2));
			if (Vector2.DistanceSquared(value, position) > 1E+08f)
			{
				return SlotId.Invalid;
			}
			ActiveSound value2 = new ActiveSound(style, position);
			return Main._trackedSounds.Add(value2);
		}

		public static SlotId PlayTrackedSound(SoundStyle style)
		{
			if (Main.dedServ || style == null || !style.IsTrackable)
			{
				return SlotId.Invalid;
			}
			ActiveSound value = new ActiveSound(style);
			return Main._trackedSounds.Add(value);
		}

		public static SoundEffectInstance PlaySound(int type, int x = -1, int y = -1, int Style = 1, float volumeScale = 1f, float pitchOffset = 0f)
		{
#if !WINDOWS
			object audioLock = Main._audioLock;
			lock (audioLock)
			{
#endif
			int num = Style;
			try
			{
				if (Main.dedServ)
				{
					SoundEffectInstance result = null;
					return result;
				}
				if (Main.soundVolume == 0f && (type < 30 || type > 35))
				{
					SoundEffectInstance result = null;
					return result;
				}
				bool flag = false;
				float num2 = 1f;
				float num3 = 0f;
				if (x == -1 || y == -1)
				{
					flag = true;
				}
				else
				{
					if (WorldGen.gen)
					{
						SoundEffectInstance result = null;
						return result;
					}
					if (Main.netMode == 2)
					{
						SoundEffectInstance result = null;
						return result;
					}
					Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)(Main.screenPosition.X - (float)(Main.screenWidth * 2)), (int)(Main.screenPosition.Y - (float)(Main.screenHeight * 2)), Main.screenWidth * 5, Main.screenHeight * 5);
					Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(x, y, 1, 1);
					Vector2 vector = new Vector2(Main.screenPosition.X + (float)Main.screenWidth * 0.5f, Main.screenPosition.Y + (float)Main.screenHeight * 0.5f);
					if (rectangle.Intersects(value))
					{
						flag = true;
					}
					if (flag)
					{
						num3 = ((float)x - vector.X) / ((float)Main.screenWidth * 0.5f);
						float num4 = Math.Abs((float)x - vector.X);
						float num5 = Math.Abs((float)y - vector.Y);
						float num6 = (float)Math.Sqrt((double)(num4 * num4 + num5 * num5));
						num2 = 1f - num6 / ((float)Main.screenWidth * 1.5f);
					}
				}
				if (num3 < -1f)
				{
					num3 = -1f;
				}
				if (num3 > 1f)
				{
					num3 = 1f;
				}
				if (num2 > 1f)
				{
					num2 = 1f;
				}
				if (num2 <= 0f && (type < 34 || type > 35 || type > 39))
				{
					SoundEffectInstance result = null;
					return result;
				}
				if (flag)
				{
					if ((type >= 30 && type <= 35) || type == 39)
					{
						num2 *= Main.ambientVolume * (float)(Main.gameInactive ? 0 : 1);
					}
					else
					{
						num2 *= Main.soundVolume;
					}
					if (num2 > 1f)
					{
						num2 = 1f;
					}
					SoundEffectInstance result;
					if (num2 <= 0f && (type < 30 || type > 35) && type != 39)
					{
						result = null;
						return result;
					}
					SoundEffectInstance soundEffectInstance = null;
					if (type == 0)
					{
						int num7 = Main.rand.Next(3);
						Main.soundInstanceDig[num7].Stop();
						Main.soundInstanceDig[num7] = Main.soundDig[num7].CreateInstance();
						Main.soundInstanceDig[num7].Volume = num2;
						Main.soundInstanceDig[num7].Pan = num3;
						Main.soundInstanceDig[num7].Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
						soundEffectInstance = Main.soundInstanceDig[num7];
					}
					else if (type == 1)
					{
						int num8 = Main.rand.Next(3);
						Main.soundInstancePlayerHit[num8].Stop();
						Main.soundInstancePlayerHit[num8] = Main.soundPlayerHit[num8].CreateInstance();
						Main.soundInstancePlayerHit[num8].Volume = num2;
						Main.soundInstancePlayerHit[num8].Pan = num3;
						soundEffectInstance = Main.soundInstancePlayerHit[num8];
					}
					else if (type == 2)
					{
						if (num == 123)
						{
							num2 *= 0.5f;
						}
						if (num == 124 || num == 125)
						{
							num2 *= 0.65f;
						}
						if (num == 116)
						{
							num2 *= 0.5f;
						}
						if (num == 1)
						{
							int num9 = Main.rand.Next(3);
							if (num9 == 1)
							{
								num = 18;
							}
							if (num9 == 2)
							{
								num = 19;
							}
						}
						else if (num == 55 || num == 53)
						{
							num2 *= 0.75f;
							if (num == 55)
							{
								num2 *= 0.75f;
							}
							if (Main.soundInstanceItem[num].State == SoundState.Playing)
							{
								result = null;
								return result;
							}
						}
						else if (num == 37)
						{
							num2 *= 0.5f;
						}
						if (num != 9 && num != 10 && num != 24 && num != 26 && num != 34 && num != 43 && num != 103)
						{
							Main.soundInstanceItem[num].Stop();
						}
						Main.soundInstanceItem[num] = Main.soundItem[num].CreateInstance();
						Main.soundInstanceItem[num].Volume = num2;
						Main.soundInstanceItem[num].Pan = num3;
						if (num == 47)
						{
							Main.soundInstanceItem[num].Pitch = (float)Main.rand.Next(-5, 6) * 0.19f;
						}
						else if (num == 53)
						{
							Main.soundInstanceItem[num].Pitch = (float)Main.rand.Next(-20, -11) * 0.02f;
						}
						else if (num == 55)
						{
							Main.soundInstanceItem[num].Pitch = (float)(-(float)Main.rand.Next(-20, -11)) * 0.02f;
						}
						else
						{
							Main.soundInstanceItem[num].Pitch = (float)Main.rand.Next(-6, 7) * 0.01f;
						}
						if (num == 26 || num == 35)
						{
							Main.soundInstanceItem[num].Volume = num2 * 0.75f;
							Main.soundInstanceItem[num].Pitch = Main.harpNote;
						}
						soundEffectInstance = Main.soundInstanceItem[num];
					}
					else if (type == 3)
					{
						if (num >= 20 && num <= 54)
						{
							num2 *= 0.5f;
						}
						if (num == 57 && Main.soundInstanceNPCHit[num].State == SoundState.Playing)
						{
							result = null;
							return result;
						}
						if (num == 57)
						{
							num2 *= 0.6f;
						}
						if (num == 55 || num == 56)
						{
							num2 *= 0.5f;
						}
						Main.soundInstanceNPCHit[num].Stop();
						Main.soundInstanceNPCHit[num] = Main.soundNPCHit[num].CreateInstance();
						Main.soundInstanceNPCHit[num].Volume = num2;
						Main.soundInstanceNPCHit[num].Pan = num3;
						Main.soundInstanceNPCHit[num].Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
						soundEffectInstance = Main.soundInstanceNPCHit[num];
					}
					else if (type == 4)
					{
						if (num >= 23 && num <= 57)
						{
							num2 *= 0.5f;
						}
						if (num == 61)
						{
							num2 *= 0.6f;
						}
						if (num == 62)
						{
							num2 *= 0.6f;
						}
						if (num == 10 && Main.soundInstanceNPCKilled[num].State == SoundState.Playing)
						{
							result = null;
							return result;
						}
						Main.soundInstanceNPCKilled[num] = Main.soundNPCKilled[num].CreateInstance();
						Main.soundInstanceNPCKilled[num].Volume = num2;
						Main.soundInstanceNPCKilled[num].Pan = num3;
						Main.soundInstanceNPCKilled[num].Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
						soundEffectInstance = Main.soundInstanceNPCKilled[num];
					}
					else if (type == 5)
					{
						Main.soundInstancePlayerKilled.Stop();
						Main.soundInstancePlayerKilled = Main.soundPlayerKilled.CreateInstance();
						Main.soundInstancePlayerKilled.Volume = num2;
						Main.soundInstancePlayerKilled.Pan = num3;
						soundEffectInstance = Main.soundInstancePlayerKilled;
					}
					else if (type == 6)
					{
						Main.soundInstanceGrass.Stop();
						Main.soundInstanceGrass = Main.soundGrass.CreateInstance();
						Main.soundInstanceGrass.Volume = num2;
						Main.soundInstanceGrass.Pan = num3;
						Main.soundInstanceGrass.Pitch = (float)Main.rand.Next(-30, 31) * 0.01f;
						soundEffectInstance = Main.soundInstanceGrass;
					}
					else if (type == 7)
					{
						Main.soundInstanceGrab.Stop();
						Main.soundInstanceGrab = Main.soundGrab.CreateInstance();
						Main.soundInstanceGrab.Volume = num2;
						Main.soundInstanceGrab.Pan = num3;
						Main.soundInstanceGrab.Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
						soundEffectInstance = Main.soundInstanceGrab;
					}
					else if (type == 8)
					{
						Main.soundInstanceDoorOpen.Stop();
						Main.soundInstanceDoorOpen = Main.soundDoorOpen.CreateInstance();
						Main.soundInstanceDoorOpen.Volume = num2;
						Main.soundInstanceDoorOpen.Pan = num3;
						Main.soundInstanceDoorOpen.Pitch = (float)Main.rand.Next(-20, 21) * 0.01f;
						soundEffectInstance = Main.soundInstanceDoorOpen;
					}
					else if (type == 9)
					{
						Main.soundInstanceDoorClosed.Stop();
						Main.soundInstanceDoorClosed = Main.soundDoorClosed.CreateInstance();
						Main.soundInstanceDoorClosed.Volume = num2;
						Main.soundInstanceDoorClosed.Pan = num3;
						Main.soundInstanceDoorOpen.Pitch = (float)Main.rand.Next(-20, 21) * 0.01f;
						soundEffectInstance = Main.soundInstanceDoorClosed;
					}
					else if (type == 10)
					{
						Main.soundInstanceMenuOpen.Stop();
						Main.soundInstanceMenuOpen = Main.soundMenuOpen.CreateInstance();
						Main.soundInstanceMenuOpen.Volume = num2;
						Main.soundInstanceMenuOpen.Pan = num3;
						soundEffectInstance = Main.soundInstanceMenuOpen;
					}
					else if (type == 11)
					{
						Main.soundInstanceMenuClose.Stop();
						Main.soundInstanceMenuClose = Main.soundMenuClose.CreateInstance();
						Main.soundInstanceMenuClose.Volume = num2;
						Main.soundInstanceMenuClose.Pan = num3;
						soundEffectInstance = Main.soundInstanceMenuClose;
					}
					else if (type == 12)
					{
						Main.soundInstanceMenuTick.Stop();
						Main.soundInstanceMenuTick = Main.soundMenuTick.CreateInstance();
						Main.soundInstanceMenuTick.Volume = num2;
						Main.soundInstanceMenuTick.Pan = num3;
						soundEffectInstance = Main.soundInstanceMenuTick;
					}
					else if (type == 13)
					{
						Main.soundInstanceShatter.Stop();
						Main.soundInstanceShatter = Main.soundShatter.CreateInstance();
						Main.soundInstanceShatter.Volume = num2;
						Main.soundInstanceShatter.Pan = num3;
						soundEffectInstance = Main.soundInstanceShatter;
					}
					else if (type == 14)
					{
						if (Style == 542)
						{
							int num10 = 7;
							Main.soundInstanceZombie[num10] = Main.soundZombie[num10].CreateInstance();
							Main.soundInstanceZombie[num10].Volume = num2 * 0.4f;
							Main.soundInstanceZombie[num10].Pan = num3;
							soundEffectInstance = Main.soundInstanceZombie[num10];
						}
						else if (Style == 489)
						{
							int num11 = Main.rand.Next(21, 24);
							Main.soundInstanceZombie[num11] = Main.soundZombie[num11].CreateInstance();
							Main.soundInstanceZombie[num11].Volume = num2 * 0.4f;
							Main.soundInstanceZombie[num11].Pan = num3;
							soundEffectInstance = Main.soundInstanceZombie[num11];
						}
						else
						{
							int num12 = Main.rand.Next(3);
							Main.soundInstanceZombie[num12] = Main.soundZombie[num12].CreateInstance();
							Main.soundInstanceZombie[num12].Volume = num2 * 0.4f;
							Main.soundInstanceZombie[num12].Pan = num3;
							soundEffectInstance = Main.soundInstanceZombie[num12];
						}
					}
					else if (type == 15)
					{
						float num13 = 1f;
						if (num == 4)
						{
							num = 1;
							num13 = 0.25f;
						}
						if (Main.soundInstanceRoar[num].State == SoundState.Stopped)
						{
							Main.soundInstanceRoar[num] = Main.soundRoar[num].CreateInstance();
							Main.soundInstanceRoar[num].Volume = num2 * num13;
							Main.soundInstanceRoar[num].Pan = num3;
							soundEffectInstance = Main.soundInstanceRoar[num];
						}
					}
					else if (type == 16)
					{
						Main.soundInstanceDoubleJump.Stop();
						Main.soundInstanceDoubleJump = Main.soundDoubleJump.CreateInstance();
						Main.soundInstanceDoubleJump.Volume = num2;
						Main.soundInstanceDoubleJump.Pan = num3;
						Main.soundInstanceDoubleJump.Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
						soundEffectInstance = Main.soundInstanceDoubleJump;
					}
					else if (type == 17)
					{
						Main.soundInstanceRun.Stop();
						Main.soundInstanceRun = Main.soundRun.CreateInstance();
						Main.soundInstanceRun.Volume = num2;
						Main.soundInstanceRun.Pan = num3;
						Main.soundInstanceRun.Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
						soundEffectInstance = Main.soundInstanceRun;
					}
					else if (type == 18)
					{
						Main.soundInstanceCoins = Main.soundCoins.CreateInstance();
						Main.soundInstanceCoins.Volume = num2;
						Main.soundInstanceCoins.Pan = num3;
						soundEffectInstance = Main.soundInstanceCoins;
					}
					else if (type == 19)
					{
						if (Main.soundInstanceSplash[num].State == SoundState.Stopped)
						{
							Main.soundInstanceSplash[num] = Main.soundSplash[num].CreateInstance();
							Main.soundInstanceSplash[num].Volume = num2;
							Main.soundInstanceSplash[num].Pan = num3;
							Main.soundInstanceSplash[num].Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
							soundEffectInstance = Main.soundInstanceSplash[num];
						}
					}
					else if (type == 20)
					{
						int num14 = Main.rand.Next(3);
						Main.soundInstanceFemaleHit[num14].Stop();
						Main.soundInstanceFemaleHit[num14] = Main.soundFemaleHit[num14].CreateInstance();
						Main.soundInstanceFemaleHit[num14].Volume = num2;
						Main.soundInstanceFemaleHit[num14].Pan = num3;
						soundEffectInstance = Main.soundInstanceFemaleHit[num14];
					}
					else if (type == 21)
					{
						int num15 = Main.rand.Next(3);
						Main.soundInstanceTink[num15].Stop();
						Main.soundInstanceTink[num15] = Main.soundTink[num15].CreateInstance();
						Main.soundInstanceTink[num15].Volume = num2;
						Main.soundInstanceTink[num15].Pan = num3;
						soundEffectInstance = Main.soundInstanceTink[num15];
					}
					else if (type == 22)
					{
						Main.soundInstanceUnlock.Stop();
						Main.soundInstanceUnlock = Main.soundUnlock.CreateInstance();
						Main.soundInstanceUnlock.Volume = num2;
						Main.soundInstanceUnlock.Pan = num3;
						soundEffectInstance = Main.soundInstanceUnlock;
					}
					else if (type == 23)
					{
						Main.soundInstanceDrown.Stop();
						Main.soundInstanceDrown = Main.soundDrown.CreateInstance();
						Main.soundInstanceDrown.Volume = num2;
						Main.soundInstanceDrown.Pan = num3;
						soundEffectInstance = Main.soundInstanceDrown;
					}
					else if (type == 24)
					{
						Main.soundInstanceChat = Main.soundChat.CreateInstance();
						Main.soundInstanceChat.Volume = num2;
						Main.soundInstanceChat.Pan = num3;
						soundEffectInstance = Main.soundInstanceChat;
					}
					else if (type == 25)
					{
						Main.soundInstanceMaxMana = Main.soundMaxMana.CreateInstance();
						Main.soundInstanceMaxMana.Volume = num2;
						Main.soundInstanceMaxMana.Pan = num3;
						soundEffectInstance = Main.soundInstanceMaxMana;
					}
					else if (type == 26)
					{
						int num16 = Main.rand.Next(3, 5);
						Main.soundInstanceZombie[num16] = Main.soundZombie[num16].CreateInstance();
						Main.soundInstanceZombie[num16].Volume = num2 * 0.9f;
						Main.soundInstanceZombie[num16].Pan = num3;
						Main.soundInstanceZombie[num16].Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
						soundEffectInstance = Main.soundInstanceZombie[num16];
					}
					else if (type == 27)
					{
						if (Main.soundInstancePixie.State == SoundState.Playing)
						{
							Main.soundInstancePixie.Volume = num2;
							Main.soundInstancePixie.Pan = num3;
							Main.soundInstancePixie.Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
							result = null;
							return result;
						}
						Main.soundInstancePixie.Stop();
						Main.soundInstancePixie = Main.soundPixie.CreateInstance();
						Main.soundInstancePixie.Volume = num2;
						Main.soundInstancePixie.Pan = num3;
						Main.soundInstancePixie.Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
						soundEffectInstance = Main.soundInstancePixie;
					}
					else if (type == 28)
					{
						if (Main.soundInstanceMech[num].State == SoundState.Playing)
						{
							result = null;
							return result;
						}
						Main.soundInstanceMech[num] = Main.soundMech[num].CreateInstance();
						Main.soundInstanceMech[num].Volume = num2;
						Main.soundInstanceMech[num].Pan = num3;
						Main.soundInstanceMech[num].Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
						soundEffectInstance = Main.soundInstanceMech[num];
					}
					else if (type == 29)
					{
						if (num >= 24 && num <= 87)
						{
							num2 *= 0.5f;
						}
						if (num >= 88 && num <= 91)
						{
							num2 *= 0.7f;
						}
						if (num >= 93 && num <= 99)
						{
							num2 *= 0.4f;
						}
						if (num == 92)
						{
							num2 *= 0.5f;
						}
						if (num == 103)
						{
							num2 *= 0.4f;
						}
						if (num == 104)
						{
							num2 *= 0.55f;
						}
						if (num == 100 || num == 101)
						{
							num2 *= 0.25f;
						}
						if (num == 102)
						{
							num2 *= 0.4f;
						}
						if (Main.soundInstanceZombie[num].State == SoundState.Playing)
						{
							result = null;
							return result;
						}
						Main.soundInstanceZombie[num] = Main.soundZombie[num].CreateInstance();
						Main.soundInstanceZombie[num].Volume = num2;
						Main.soundInstanceZombie[num].Pan = num3;
						Main.soundInstanceZombie[num].Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
						soundEffectInstance = Main.soundInstanceZombie[num];
					}
					else if (type == 30)
					{
						num = Main.rand.Next(10, 12);
						if (Main.rand.Next(300) == 0)
						{
							num = 12;
							if (Main.soundInstanceZombie[num].State == SoundState.Playing)
							{
								result = null;
								return result;
							}
						}
						Main.soundInstanceZombie[num] = Main.soundZombie[num].CreateInstance();
						Main.soundInstanceZombie[num].Volume = num2 * 0.75f;
						Main.soundInstanceZombie[num].Pan = num3;
						if (num != 12)
						{
							Main.soundInstanceZombie[num].Pitch = (float)Main.rand.Next(-70, 1) * 0.01f;
						}
						else
						{
							Main.soundInstanceZombie[num].Pitch = (float)Main.rand.Next(-40, 21) * 0.01f;
						}
						soundEffectInstance = Main.soundInstanceZombie[num];
					}
					else if (type == 31)
					{
						num = 13;
						Main.soundInstanceZombie[num] = Main.soundZombie[num].CreateInstance();
						Main.soundInstanceZombie[num].Volume = num2 * 0.35f;
						Main.soundInstanceZombie[num].Pan = num3;
						Main.soundInstanceZombie[num].Pitch = (float)Main.rand.Next(-40, 21) * 0.01f;
						soundEffectInstance = Main.soundInstanceZombie[num];
					}
					else if (type == 32)
					{
						if (Main.soundInstanceZombie[num].State == SoundState.Playing)
						{
							result = null;
							return result;
						}
						Main.soundInstanceZombie[num] = Main.soundZombie[num].CreateInstance();
						Main.soundInstanceZombie[num].Volume = num2 * 0.15f;
						Main.soundInstanceZombie[num].Pan = num3;
						Main.soundInstanceZombie[num].Pitch = (float)Main.rand.Next(-70, 26) * 0.01f;
						soundEffectInstance = Main.soundInstanceZombie[num];
					}
					else if (type == 33)
					{
						num = 15;
						if (Main.soundInstanceZombie[num].State == SoundState.Playing)
						{
							result = null;
							return result;
						}
						Main.soundInstanceZombie[num] = Main.soundZombie[num].CreateInstance();
						Main.soundInstanceZombie[num].Volume = num2 * 0.2f;
						Main.soundInstanceZombie[num].Pan = num3;
						Main.soundInstanceZombie[num].Pitch = (float)Main.rand.Next(-10, 31) * 0.01f;
						soundEffectInstance = Main.soundInstanceZombie[num];
					}
					else if (type == 34)
					{
						float num17 = (float)num / 50f;
						if (num17 > 1f)
						{
							num17 = 1f;
						}
						num2 *= num17;
						num2 *= 0.2f;
						if (num2 <= 0f || x == -1 || y == -1)
						{
							if (Main.soundInstanceLiquid[0].State == SoundState.Playing)
							{
								Main.soundInstanceLiquid[0].Stop();
							}
						}
						else if (Main.soundInstanceLiquid[0].State == SoundState.Playing)
						{
							Main.soundInstanceLiquid[0].Volume = num2;
							Main.soundInstanceLiquid[0].Pan = num3;
							Main.soundInstanceLiquid[0].Pitch = -0.2f;
						}
						else
						{
							Main.soundInstanceLiquid[0] = Main.soundLiquid[0].CreateInstance();
							Main.soundInstanceLiquid[0].Volume = num2;
							Main.soundInstanceLiquid[0].Pan = num3;
							soundEffectInstance = Main.soundInstanceLiquid[0];
						}
					}
					else if (type == 35)
					{
						float num18 = (float)num / 50f;
						if (num18 > 1f)
						{
							num18 = 1f;
						}
						num2 *= num18;
						num2 *= 0.65f;
						if (num2 <= 0f || x == -1 || y == -1)
						{
							if (Main.soundInstanceLiquid[1].State == SoundState.Playing)
							{
								Main.soundInstanceLiquid[1].Stop();
							}
						}
						else if (Main.soundInstanceLiquid[1].State == SoundState.Playing)
						{
							Main.soundInstanceLiquid[1].Volume = num2;
							Main.soundInstanceLiquid[1].Pan = num3;
							Main.soundInstanceLiquid[1].Pitch = -0f;
						}
						else
						{
							Main.soundInstanceLiquid[1] = Main.soundLiquid[1].CreateInstance();
							Main.soundInstanceLiquid[1].Volume = num2;
							Main.soundInstanceLiquid[1].Pan = num3;
							soundEffectInstance = Main.soundInstanceLiquid[1];
						}
					}
					else if (type == 36)
					{
						int num19 = Style;
						if (Style == -1)
						{
							num19 = 0;
						}
						Main.soundInstanceRoar[num19] = Main.soundRoar[num19].CreateInstance();
						Main.soundInstanceRoar[num19].Volume = num2;
						Main.soundInstanceRoar[num19].Pan = num3;
						if (Style == -1)
						{
							Main.soundInstanceRoar[num19].Pitch += 0.6f;
						}
						soundEffectInstance = Main.soundInstanceRoar[num19];
					}
					else if (type == 37)
					{
						int num20 = Main.rand.Next(57, 59);
						num2 *= (float)Style * 0.05f;
						Main.soundInstanceItem[num20] = Main.soundItem[num20].CreateInstance();
						Main.soundInstanceItem[num20].Volume = num2;
						Main.soundInstanceItem[num20].Pan = num3;
						Main.soundInstanceItem[num20].Pitch = (float)Main.rand.Next(-40, 41) * 0.01f;
						soundEffectInstance = Main.soundInstanceItem[num20];
					}
					else if (type == 38)
					{
						int num21 = Main.rand.Next(5);
						Main.soundInstanceCoin[num21] = Main.soundCoin[num21].CreateInstance();
						Main.soundInstanceCoin[num21].Volume = num2;
						Main.soundInstanceCoin[num21].Pan = num3;
						Main.soundInstanceCoin[num21].Pitch = (float)Main.rand.Next(-40, 41) * 0.002f;
						soundEffectInstance = Main.soundInstanceCoin[num21];
					}
					else if (type == 39)
					{
						Main.soundInstanceDrip[Style] = Main.soundDrip[Style].CreateInstance();
						Main.soundInstanceDrip[Style].Volume = num2 * 0.5f;
						Main.soundInstanceDrip[Style].Pan = num3;
						Main.soundInstanceDrip[Style].Pitch = (float)Main.rand.Next(-30, 31) * 0.01f;
						soundEffectInstance = Main.soundInstanceDrip[Style];
					}
					else if (type == 40)
					{
						Main.soundInstanceCamera.Stop();
						Main.soundInstanceCamera = Main.soundCamera.CreateInstance();
						Main.soundInstanceCamera.Volume = num2;
						Main.soundInstanceCamera.Pan = num3;
						soundEffectInstance = Main.soundInstanceCamera;
					}
					else if (type == 41)
					{
						Main.soundInstanceMoonlordCry = Main.soundNPCKilled[10].CreateInstance();
						Main.soundInstanceMoonlordCry.Volume = 1f / (1f + (new Vector2((float)x, (float)y) - Main.player[Main.myPlayer].position).Length());
						Main.soundInstanceMoonlordCry.Pan = num3;
						Main.soundInstanceMoonlordCry.Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
						soundEffectInstance = Main.soundInstanceMoonlordCry;
					}
					else if (type == 42)
					{
						soundEffectInstance = Main.trackableSounds[num].CreateInstance();
						soundEffectInstance.Volume = num2;
						soundEffectInstance.Pan = num3;
						Main.trackableSoundInstances[num] = soundEffectInstance;
					}
					if (soundEffectInstance != null)
					{
						soundEffectInstance.Pitch += pitchOffset;
						soundEffectInstance.Volume *= volumeScale;
						Main.PlaySoundInstance(soundEffectInstance);
					}
					result = soundEffectInstance;
					return result;
				}
			}
			catch
			{
			}
			return null;
#if !WINDOWS
			}
#endif
		}

		public static void ClearPendingPlayerSelectCallbacks()
		{
			Main._pendingCharacterSelect = null;
		}

		public static void SelectPlayer(PlayerFileData data)
		{
			if (Main._pendingCharacterSelect != null)
			{
				Main._pendingCharacterSelect(data);
				Main._pendingCharacterSelect = null;
				return;
			}
			if (!Main.menuMultiplayer)
			{
				Main.ServerSideCharacter = false;
				Main.myPlayer = 0;
				data.SetAsActive();
				Main.player[Main.myPlayer].position = Vector2.Zero;
				Main.LoadWorlds();
				Main.PlaySound(10, -1, -1, 1, 1f, 0f);
				Main.menuMode = 6;
				return;
			}
			Main.ServerSideCharacter = false;
			data.SetAsActive();
			Main.PlaySound(10, -1, -1, 1, 1f, 0f);
			if (Main.autoJoin)
			{
				if (Netplay.SetRemoteIP(Main.getIP))
				{
					Main.menuMode = 10;
					Netplay.StartTcpClient();
				}
				Main.autoJoin = false;
				return;
			}
			if (Main.menuServer)
			{
				Main.LoadWorlds();
				Main.menuMode = 6;
				return;
			}
			Main.menuMode = 13;
			Main.clrInput();
		}

		public static void ToggleFullScreen()
		{
			Main.SetFullScreen(!Main.graphics.IsFullScreen);
		}

		public static void SetFullScreen(bool fullscreen)
		{
			Main.SetDisplayMode(Main.PendingResolutionWidth, Main.PendingResolutionHeight, fullscreen);
		}

		public static void SetResolution(int width, int height)
		{
			Main.SetDisplayMode(width, height, Main.graphics.IsFullScreen);
		}

		public static void SetDisplayMode(int width, int height, bool fullscreen)
		{
			if (Main.graphics.IsFullScreen != fullscreen)
			{
				Main.graphics.ToggleFullScreen();
			}
#if WINDOWS
			Main.screenMaximized = (((Form)Control.FromHandle(Main.instance.Window.Handle)).WindowState == FormWindowState.Maximized);
			if (Main.screenBorderless && Main.screenMaximized && !Main.graphics.IsFullScreen)
			{
				Main.screenMaximized = false;
				((Form)Control.FromHandle(Main.instance.Window.Handle)).WindowState = FormWindowState.Normal;
			}
			Form form = (Form)Control.FromHandle(Main.instance.Window.Handle);
			bool flag = form.FormBorderStyle == FormBorderStyle.None;
#else
			Main.screenMaximized = false;
#endif
			if (!Main.instance.IsActive && (Main.screenBorderless || Main.screenMaximized || Main.graphics.IsFullScreen))
			{
				return;
			}
			bool flag2 = false;
			int num3;
			int num4;
			if (Main.screenBorderless || Main.screenMaximized || Main.graphics.IsFullScreen)
			{
#if WINDOWS
				form.MinimumSize = new Size(0, 0);
				if (Main.screenBorderless && !Main.graphics.IsFullScreen)
				{
					System.Drawing.Rectangle bounds = Screen.FromPoint(form.Location).Bounds;
					width = bounds.Width;
					height = bounds.Height;
				}
#endif
				if (width > Main.maxScreenW)
				{
					float num = (float)height / (float)width;
					width = Main.maxScreenW;
					height = (int)(num * (float)width);
				}
				if (height > Main.maxScreenH)
				{
					float num2 = (float)width / (float)height;
					height = Main.maxScreenH;
					width = (int)(num2 * (float)height);
				}
				if (!Main.graphics.IsFullScreen)
				{
					num3 = Math.Max(Main.graphics.PreferredBackBufferWidth, Main.graphics.GraphicsDevice.Viewport.Width);
					num4 = Math.Max(Main.graphics.PreferredBackBufferHeight, Main.graphics.GraphicsDevice.Viewport.Height);
					if (num3 != Main.graphics.PreferredBackBufferWidth || num4 != Main.graphics.PreferredBackBufferHeight)
					{
						flag2 = true;
					}
				}
				else
				{
					num3 = Main.graphics.PreferredBackBufferWidth;
					num4 = Main.graphics.PreferredBackBufferHeight;
				}
			}
			else
			{
#if WINDOWS
				form.MinimumSize = new Size(Main.minScreenW, Main.minScreenH);
				if (flag)
				{
					width = Main.displayWidth[0];
					height = Main.displayHeight[0];
				}
#endif
				width = Math.Min(width, Main.maxScreenW);
				height = Math.Min(height, Main.maxScreenH);
				num3 = Main.graphics.GraphicsDevice.Viewport.Width;
				num4 = Main.graphics.GraphicsDevice.Viewport.Height;
				flag2 = (Main.graphics.PreferredBackBufferWidth != Main.graphics.GraphicsDevice.Viewport.Width || Main.graphics.PreferredBackBufferHeight != Main.graphics.GraphicsDevice.Viewport.Height);
			}
#if WINDOWS
			if (!fullscreen && !flag2)
			{
				if (form.ClientSize.Width < Main.graphics.PreferredBackBufferWidth)
				{
					width = form.ClientSize.Width;
					flag2 = true;
				}
				if (form.ClientSize.Height < Main.graphics.PreferredBackBufferHeight)
				{
					height = form.ClientSize.Height;
					flag2 = true;
				}
			}
#endif
			width &= 2147483646;
			height &= 2147483646;
			width = Math.Max(width, Main.minScreenW);
			height = Math.Max(height, Main.minScreenH);
			if (width != num3 || height != num4 || flag2)
			{
				Main.mapTime = 0;
				if (Main.gamePaused)
				{
					Main.renderNow = true;
				}
				Main.screenWidth = width;
				Main.screenHeight = height;
				Main.graphics.PreferredBackBufferWidth = Main.screenWidth;
				Main.graphics.PreferredBackBufferHeight = Main.screenHeight;
				Main.graphics.ApplyChanges();
				Main.PendingResolutionWidth = Main.screenWidth;
				Main.PendingResolutionHeight = Main.screenHeight;
#if WINDOWS
				if (!fullscreen)
				{
					form.SendToBack();
					form.BringToFront();
					if (Main.screenBorderless)
					{
						System.Drawing.Rectangle bounds2 = Screen.FromPoint(form.Location).Bounds;
						form.Location = new System.Drawing.Point(bounds2.X, bounds2.Y);
						form.Width = bounds2.Width;
						form.Height = bounds2.Height;
						form.FormBorderStyle = FormBorderStyle.None;
					}
					else
					{
						form.FormBorderStyle = FormBorderStyle.Sizable;
					}
				}
#endif
				Lighting.Initialize(true);
				if (!Main.drawToScreen)
				{
					Main.instance.InitTargets();
				}
				UserInterface.ActiveInstance.Recalculate();
				Console.WriteLine(Language.GetTextValue("Misc.ResolutionChanged", width, height));
			}
			if (!Main.graphics.SynchronizeWithVerticalRetrace)
			{
				Main.graphics.SynchronizeWithVerticalRetrace = true;
				Main.graphics.ApplyChanges();
			}
		}

		public void UpdateDisplaySettings()
		{
			Main.SetResolution(base.GraphicsDevice.Viewport.Width, base.GraphicsDevice.Viewport.Height);
		}

		public static void OpenPlayerSelect(Main.OnPlayerSelected method)
		{
			if (Main.gameMenu && (Main.menuMode == 10 || Main.menuMode == 14))
			{
				return;
			}
			if (!Main.gameMenu)
			{
				WorldGen.SaveAndQuit(delegate
				{
					Main.menuMode = 888;
					Main._blockFancyUIWhileLoading = true;
					Main.LoadPlayers();
					Main.MenuUI.SetState(Main._characterSelectMenu);
					Main._blockFancyUIWhileLoading = false;
					Main._pendingCharacterSelect = method;
				});
				return;
			}
			Main.menuMode = 888;
			Main._blockFancyUIWhileLoading = true;
			Main.LoadPlayers();
			Main.MenuUI.SetState(Main._characterSelectMenu);
			Main._blockFancyUIWhileLoading = false;
			Main._pendingCharacterSelect = method;
		}

		public static void SwitchNetMode(int mode)
		{
			if (mode >= 0 && mode <= 2)
			{
				Main._targetNetMode = mode;
				Main._hasPendingNetmodeChange = true;
			}
		}
	}
}
