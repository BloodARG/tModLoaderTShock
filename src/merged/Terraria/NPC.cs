using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using System;
using System.Collections.Generic;
using Terraria.Audio;
using Terraria.DataStructures;
using Terraria.Enums;
using Terraria.GameContent;
using Terraria.GameContent.Achievements;
using Terraria.GameContent.Events;
using Terraria.GameContent.Tile_Entities;
using Terraria.GameContent.UI;
using Terraria.Graphics.Effects;
using Terraria.ID;
using Terraria.Localization;
using Terraria.Utilities;
using Terraria.World.Generation;

namespace Terraria
{
	public class NPC : Entity
	{
		private const int NPC_TARGETS_START = 300;

		public const int MaxMoonLordCountdown = 3600;

		public const float nameOverIncrement = 0.025f;

		public const float nameOverDistance = 400f;

		public const int maxBuffs = 5;

		public const int breathMax = 200;

		private float waterMovementSpeed = 0.5f;

		private float lavaMovementSpeed = 0.5f;

		private float honeyMovementSpeed = 0.25f;

		public static readonly int[,,,] MoonLordAttacksArray = NPC.InitializeMoonLordAttacks();

		public static readonly int[,] MoonLordAttacksArray2 = NPC.InitializeMoonLordAttacks2();

		public static int MoonLordCountdown = 0;

		public int teleportStyle;

		public float teleportTime;

		public static int immuneTime = 20;

		public static int maxAI = 4;

		public int netSpam;

		public static int goldCritterChance = 150;

		public static int[] killCount = new int[580];

		public static float waveKills = 0f;

		public static int waveNumber = 0;

		public float nameOver;

		public bool SpawnedFromStatue;

		public bool dripping;

		public bool drippingSlime;

		public int altTexture;

		public Vector2 visualOffset = Vector2.Zero;

		public short catchItem;

		public short releaseOwner = 255;

		public int rarity;

		public static bool taxCollector = false;

		public bool[] playerInteraction = new bool[256];

		public int lastInteraction = 255;

		public float takenDamageMultiplier = 1f;

		private static int spawnSpaceX = 3;

		private static int spawnSpaceY = 3;

		public float gfxOffY;

		public float stepSpeed;

		private static float gravity = 0.3f;

		public bool teleporting;

		private static int maxAttack = 20;

		private static int[] attackNPC = new int[NPC.maxAttack];

		public bool stairFall;

		public static int fireFlyFriendly = 0;

		public static int fireFlyChance = 0;

		public static int fireFlyMultiple = 0;

		public static int butterflyChance = 0;

		private byte netStream;

		private byte[] streamPlayer = new byte[255];

		private byte npcNameLookup;

		public Vector2[] oldPos = new Vector2[10];

		public float[] oldRot = new float[10];

		public bool setFrameSize;

		public static int golemBoss = -1;

		public static int plantBoss = -1;

		public static int crimsonBoss = -1;

		public int netSkip;

		public bool netAlways;

		public int realLife = -1;

		public static int sWidth = 1920;

		public static int sHeight = 1080;

		private static int spawnRangeX = (int)((double)(NPC.sWidth / 16) * 0.7);

		private static int spawnRangeY = (int)((double)(NPC.sHeight / 16) * 0.7);

		public static int safeRangeX = (int)((double)(NPC.sWidth / 16) * 0.52);

		public static int safeRangeY = (int)((double)(NPC.sHeight / 16) * 0.52);

		private static int activeRangeX = (int)((double)NPC.sWidth * 2.1);

		private static int activeRangeY = (int)((double)NPC.sHeight * 2.1);

		private static int townRangeX = NPC.sWidth;

		private static int townRangeY = NPC.sHeight;

		public float npcSlots = 1f;

		private static bool noSpawnCycle = false;

		private static int activeTime = 750;

		private static int defaultSpawnRate = 600;

		private static int defaultMaxSpawns = 5;

		public bool dontCountMe;

		public int[] buffType = new int[5];

		public int[] buffTime = new int[5];

		public bool[] buffImmune = new bool[206];

		public bool midas;

		public bool ichor;

		public bool onFire;

		public bool onFire2;

		public bool onFrostBurn;

		public bool poisoned;

		public bool venom;

		public bool shadowFlame;

		public bool soulDrain;

		public int lifeRegen;

		public int lifeRegenCount;

		public int lifeRegenExpectedLossPerSecond = -1;

		public bool confused;

		public bool loveStruck;

		public bool stinky;

		public bool dryadWard;

		public bool immortal;

		public bool chaseable = true;

		public bool canGhostHeal = true;

		public bool javelined;

		public bool celled;

		public bool dryadBane;

		public bool daybreak;

		public bool dontTakeDamageFromHostiles;

		public bool betsysCurse;

		public bool oiled;

		public static bool savedTaxCollector = false;

		public static bool savedGoblin = false;

		public static bool savedWizard = false;

		public static bool savedMech = false;

		public static bool savedAngler = false;

		public static bool savedStylist = false;

		public static bool savedBartender = false;

		public static bool downedBoss1 = false;

		public static bool downedBoss2 = false;

		public static bool downedBoss3 = false;

		public static bool downedQueenBee = false;

		public static bool downedSlimeKing = false;

		public static bool downedGoblins = false;

		public static bool downedFrost = false;

		public static bool downedPirates = false;

		public static bool downedClown = false;

		public static bool downedPlantBoss = false;

		public static bool downedGolemBoss = false;

		public static bool downedMartians = false;

		public static bool downedFishron = false;

		public static bool downedHalloweenTree = false;

		public static bool downedHalloweenKing = false;

		public static bool downedChristmasIceQueen = false;

		public static bool downedChristmasTree = false;

		public static bool downedChristmasSantank = false;

		public static bool downedAncientCultist = false;

		public static bool downedMoonlord = false;

		public static bool downedTowerSolar = false;

		public static bool downedTowerVortex = false;

		public static bool downedTowerNebula = false;

		public static bool downedTowerStardust = false;

		public static int ShieldStrengthTowerSolar = 0;

		public static int ShieldStrengthTowerVortex = 0;

		public static int ShieldStrengthTowerNebula = 0;

		public static int ShieldStrengthTowerStardust = 0;

		public static int LunarShieldPowerNormal = 100;

		public static int LunarShieldPowerExpert = 150;

		public static bool TowerActiveSolar = false;

		public static bool TowerActiveVortex = false;

		public static bool TowerActiveNebula = false;

		public static bool TowerActiveStardust = false;

		public static bool LunarApocalypseIsUp = false;

		public static bool downedMechBossAny = false;

		public static bool downedMechBoss1 = false;

		public static bool downedMechBoss2 = false;

		public static bool downedMechBoss3 = false;

		public static bool[] npcsFoundForCheckActive = new bool[580];

		private static int spawnRate = NPC.defaultSpawnRate;

		private static int maxSpawns = NPC.defaultMaxSpawns;

		public int soundDelay;

		public int[] immune = new int[256];

		public int directionY = 1;

		public int type;

		public float[] ai = new float[NPC.maxAI];

		public float[] localAI = new float[NPC.maxAI];

		public int aiAction;

		public int aiStyle;

		public bool justHit;

		public int timeLeft;

		public int target = -1;

		public int damage;

		public int defense;

		public int defDamage;

		public int defDefense;

		public bool coldDamage;

		public bool trapImmune;

		public LegacySoundStyle HitSound;

		public LegacySoundStyle DeathSound;

		public int life;

		public int lifeMax;

		public Rectangle targetRect;

		public double frameCounter;

		public Rectangle frame;

		public string displayName;

		public Color color;

		public int alpha;

		public bool hide;

		public float scale = 1f;

		public float knockBackResist = 1f;

		public int oldDirectionY;

		public int oldTarget;

		public float rotation;

		public bool noGravity;

		public bool noTileCollide;

		public bool netUpdate;

		public bool netUpdate2;

		public bool collideX;

		public bool collideY;

		public bool boss;

		public int spriteDirection = -1;

		public bool behindTiles;

		public bool lavaImmune;

		public float value;

		public float extraValue;

		public bool dontTakeDamage;

		public int netID;

		public bool townNPC;

		public static bool travelNPC = false;

		public bool homeless;

		public int homeTileX = -1;

		public int homeTileY = -1;

		public bool oldHomeless;

		public int oldHomeTileX = -1;

		public int oldHomeTileY = -1;

		public bool friendly;

		public bool closeDoor;

		public int doorX;

		public int doorY;

		public int friendlyRegen;

		public int breath;

		public int breathCounter;

		public bool reflectingProjectiles;

		public int lastPortalColorIndex;

		public static int[,] cavernMonsterType = new int[2, 3];

		private static int ignorePlayerInteractions = 0;

		public bool CanTalk
		{
			get
			{
				return (this.townNPC || this.type == 453) && this.aiStyle == 7 && this.velocity.Y == 0f;
			}
		}

		public bool HasValidTarget
		{
			get
			{
				return (this.HasPlayerTarget && Main.player[this.target].active && !Main.player[this.target].dead && !Main.player[this.target].ghost) || (this.SupportsNPCTargets && this.HasNPCTarget && Main.npc[this.TranslatedTargetIndex].active);
			}
		}

		public bool HasPlayerTarget
		{
			get
			{
				return this.target >= 0 && this.target < 255;
			}
		}

		public bool HasNPCTarget
		{
			get
			{
				return this.target >= 300 && this.target < 500;
			}
		}

		public bool SupportsNPCTargets
		{
			get
			{
				return NPCID.Sets.UsesNewTargetting[this.type];
			}
		}

		public int TranslatedTargetIndex
		{
			get
			{
				if (this.HasNPCTarget)
				{
					return this.target - 300;
				}
				return this.target;
			}
		}

		public int WhoAmIToTargettingIndex
		{
			get
			{
				return this.whoAmI + 300;
			}
		}

		public static bool downedTowers
		{
			get
			{
				return NPC.downedTowerSolar && NPC.downedTowerVortex && NPC.downedTowerNebula && NPC.downedTowerStardust;
			}
		}

		public static int ShieldStrengthTowerMax
		{
			get
			{
				if (!Main.expertMode)
				{
					return NPC.LunarShieldPowerNormal;
				}
				return NPC.LunarShieldPowerExpert;
			}
		}

		public static bool TowersDefeated
		{
			get
			{
				return NPC.TowerActiveSolar && NPC.TowerActiveVortex && NPC.TowerActiveNebula && NPC.TowerActiveStardust;
			}
		}

		public float Opacity
		{
			get
			{
				return 1f - (float)this.alpha / 255f;
			}
			set
			{
				this.alpha = (int)MathHelper.Clamp((1f - value) * 255f, 0f, 255f);
			}
		}

		public NPCAimedTarget GetTargetData(bool ignorePlayerTankPets = true)
		{
			if (!this.HasValidTarget)
			{
				return default(NPCAimedTarget);
			}
			if (this.SupportsNPCTargets && this.HasNPCTarget)
			{
				return new NPCAimedTarget(Main.npc[this.TranslatedTargetIndex]);
			}
			return new NPCAimedTarget(Main.player[this.target], ignorePlayerTankPets);
		}

		public static int[,,,] InitializeMoonLordAttacks()
		{
			int[,,,] array;
			if (NPC.MoonLordAttacksArray != null)
			{
				array = NPC.MoonLordAttacksArray;
				for (int i = 0; i < array.GetLength(0); i++)
				{
					for (int j = 0; j < array.GetLength(1); j++)
					{
						for (int k = 0; k < array.GetLength(2); k++)
						{
							for (int l = 0; l < array.GetLength(3); l++)
							{
								array[i, j, k, l] = 0;
							}
						}
					}
				}
			}
			else
			{
				array = new int[3, 3, 2, 5];
			}
			array[0, 0, 0, 0] = 0;
			array[0, 0, 1, 0] = 60;
			array[0, 0, 0, 1] = 1;
			array[0, 0, 1, 1] = 70;
			array[0, 0, 0, 2] = 2;
			array[0, 0, 1, 2] = 330;
			array[0, 0, 0, 3] = 0;
			array[0, 0, 1, 3] = 60;
			array[0, 0, 0, 4] = 3;
			array[0, 0, 1, 4] = 90;
			array[0, 1, 0, 0] = 1;
			array[0, 1, 1, 0] = 70;
			array[0, 1, 0, 1] = 0;
			array[0, 1, 1, 1] = 120;
			array[0, 1, 0, 2] = 3;
			array[0, 1, 1, 2] = 90;
			array[0, 1, 0, 3] = 0;
			array[0, 1, 1, 3] = 120;
			array[0, 1, 0, 4] = 2;
			array[0, 1, 1, 4] = 390;
			array[0, 2, 0, 0] = 3;
			array[0, 2, 1, 0] = 90;
			array[0, 2, 0, 1] = 0;
			array[0, 2, 1, 1] = 120;
			array[0, 2, 0, 2] = 2;
			array[0, 2, 1, 2] = 435;
			array[0, 2, 0, 3] = 0;
			array[0, 2, 1, 3] = 120;
			array[0, 2, 0, 4] = 1;
			array[0, 2, 1, 4] = 375;
			array[1, 0, 0, 0] = 0;
			array[1, 0, 1, 0] = 0;
			array[1, 0, 0, 1] = 0;
			array[1, 0, 1, 1] = 0;
			array[1, 0, 0, 2] = 0;
			array[1, 0, 1, 2] = 0;
			array[1, 0, 0, 3] = 0;
			array[1, 0, 1, 3] = 0;
			array[1, 0, 0, 4] = 0;
			array[1, 0, 1, 4] = 0;
			array[1, 1, 0, 0] = 0;
			array[1, 1, 1, 0] = 0;
			array[1, 1, 0, 1] = 0;
			array[1, 1, 1, 1] = 0;
			array[1, 1, 0, 2] = 0;
			array[1, 1, 1, 2] = 0;
			array[1, 1, 0, 3] = 0;
			array[1, 1, 1, 3] = 0;
			array[1, 1, 0, 4] = 0;
			array[1, 1, 1, 4] = 0;
			array[1, 2, 0, 0] = 0;
			array[1, 2, 1, 0] = 0;
			array[1, 2, 0, 1] = 0;
			array[1, 2, 1, 1] = 0;
			array[1, 2, 0, 2] = 0;
			array[1, 2, 1, 2] = 0;
			array[1, 2, 0, 3] = 0;
			array[1, 2, 1, 3] = 0;
			array[1, 2, 0, 4] = 0;
			array[1, 2, 1, 4] = 0;
			array[2, 0, 0, 0] = 0;
			array[2, 0, 1, 0] = 0;
			array[2, 0, 0, 1] = 0;
			array[2, 0, 1, 1] = 0;
			array[2, 0, 0, 2] = 0;
			array[2, 0, 1, 2] = 0;
			array[2, 0, 0, 3] = 0;
			array[2, 0, 1, 3] = 0;
			array[2, 0, 0, 4] = 0;
			array[2, 0, 1, 4] = 0;
			array[2, 1, 0, 0] = 0;
			array[2, 1, 1, 0] = 0;
			array[2, 1, 0, 1] = 0;
			array[2, 1, 1, 1] = 0;
			array[2, 1, 0, 2] = 0;
			array[2, 1, 1, 2] = 0;
			array[2, 1, 0, 3] = 0;
			array[2, 1, 1, 3] = 0;
			array[2, 1, 0, 4] = 0;
			array[2, 1, 1, 4] = 0;
			array[2, 2, 0, 0] = 0;
			array[2, 2, 1, 0] = 0;
			array[2, 2, 0, 1] = 0;
			array[2, 2, 1, 1] = 0;
			array[2, 2, 0, 2] = 0;
			array[2, 2, 1, 2] = 0;
			array[2, 2, 0, 3] = 0;
			array[2, 2, 1, 3] = 0;
			array[2, 2, 0, 4] = 0;
			array[2, 2, 1, 4] = 0;
			NPC.InitializeMoonLordAttacks2();
			return array;
		}

		public static int[,] InitializeMoonLordAttacks2()
		{
			int[,] array;
			if (NPC.MoonLordAttacksArray2 != null)
			{
				array = NPC.MoonLordAttacksArray2;
				for (int i = 0; i < array.GetLength(0); i++)
				{
					for (int j = 0; j < array.GetLength(1); j++)
					{
						array[i, j] = 0;
					}
				}
			}
			else
			{
				array = new int[2, 10];
			}
			array[0, 0] = 0;
			array[1, 0] = 90;
			array[0, 1] = 1;
			array[1, 1] = 90;
			array[0, 2] = 0;
			array[1, 2] = 90;
			array[0, 3] = 2;
			array[1, 3] = 135;
			array[0, 4] = 0;
			array[1, 4] = 90;
			array[0, 5] = 3;
			array[1, 5] = 200;
			array[0, 6] = 0;
			array[1, 6] = 90;
			array[0, 7] = 4;
			array[1, 7] = 375;
			array[0, 8] = 0;
			array[1, 8] = 90;
			array[0, 9] = 2;
			array[1, 9] = 135;
			return array;
		}

		public static bool BusyWithAnyInvasionOfSorts()
		{
			return Main.slimeRainTime != 0.0 || Main.bloodMoon || Main.eclipse || Main.snowMoon || Main.pumpkinMoon || Main.invasionType != 0 || DD2Event.Ongoing;
		}

		public static void ClearFoundActiveNPCs()
		{
			for (int i = 0; i < NPC.npcsFoundForCheckActive.Length; i++)
			{
				NPC.npcsFoundForCheckActive[i] = false;
			}
		}

		public static void UpdateFoundActiveNPCs()
		{
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.active && nPC.type >= 0 && nPC.type < 580)
				{
					NPC.npcsFoundForCheckActive[nPC.type] = true;
				}
			}
		}

		public static string getNewNPCName(int npcType)
		{
			if (npcType <= 178)
			{
				if (npcType <= 54)
				{
					switch (npcType)
					{
					case 17:
						switch (WorldGen.genRand.Next(23))
						{
						case 0:
							return "Alfred";
						case 1:
							return "Barney";
						case 2:
							return "Calvin";
						case 3:
							return "Edmund";
						case 4:
							return "Edwin";
						case 5:
							return "Eugene";
						case 6:
							return "Frank";
						case 7:
							return "Frederick";
						case 8:
							return "Gilbert";
						case 9:
							return "Gus";
						case 10:
							return "Wilbur";
						case 11:
							return "Seymour";
						case 12:
							return "Louis";
						case 13:
							return "Humphrey";
						case 14:
							return "Harold";
						case 15:
							return "Milton";
						case 16:
							return "Mortimer";
						case 17:
							return "Howard";
						case 18:
							return "Walter";
						case 19:
							return "Finn";
						case 20:
							return "Isaac";
						case 21:
							return "Joseph";
						default:
							return "Ralph";
						}
						break;
					case 18:
						switch (WorldGen.genRand.Next(24))
						{
						case 0:
							return "Molly";
						case 1:
							return "Amy";
						case 2:
							return "Claire";
						case 3:
							return "Emily";
						case 4:
							return "Katie";
						case 5:
							return "Madeline";
						case 6:
							return "Katelyn";
						case 7:
							return "Emma";
						case 8:
							return "Abigail";
						case 9:
							return "Carly";
						case 10:
							return "Jenna";
						case 11:
							return "Heather";
						case 12:
							return "Katherine";
						case 13:
							return "Caitlin";
						case 14:
							return "Kaitlin";
						case 15:
							return "Holly";
						case 16:
							return "Kaitlyn";
						case 17:
							return "Hannah";
						case 18:
							return "Kathryn";
						case 19:
							return "Lorraine";
						case 20:
							return "Helen";
						case 21:
							return "Kayla";
						case 22:
							return "Lisa";
						default:
							return "Allison";
						}
						break;
					case 19:
						switch (WorldGen.genRand.Next(24))
						{
						case 0:
							return "DeShawn";
						case 1:
							return "DeAndre";
						case 2:
							return "Marquis";
						case 3:
							return "Darnell";
						case 4:
							return "Terrell";
						case 5:
							return "Malik";
						case 6:
							return "Trevon";
						case 7:
							return "Tyrone";
						case 8:
							return "Willie";
						case 9:
							return "Dominique";
						case 10:
							return "Demetrius";
						case 11:
							return "Reginald";
						case 12:
							return "Jamal";
						case 13:
							return "Maurice";
						case 14:
							return "Jalen";
						case 15:
							return "Darius";
						case 16:
							return "Xavier";
						case 17:
							return "Terrance";
						case 18:
							return "Andre";
						case 19:
							return "Dante";
						case 20:
							return "Brimst";
						case 21:
							return "Bronson";
						case 22:
							return "Tony";
						default:
							return "Darryl";
						}
						break;
					case 20:
						switch (WorldGen.genRand.Next(22))
						{
						case 0:
							return "Alalia";
						case 1:
							return "Alalia";
						case 2:
							return "Alura";
						case 3:
							return "Ariella";
						case 4:
							return "Caelia";
						case 5:
							return "Calista";
						case 6:
							return "Chryseis";
						case 7:
							return "Emerenta";
						case 8:
							return "Elysia";
						case 9:
							return "Evvie";
						case 10:
							return "Faye";
						case 11:
							return "Felicitae";
						case 12:
							return "Lunette";
						case 13:
							return "Nata";
						case 14:
							return "Nissa";
						case 15:
							return "Tatiana";
						case 16:
							return "Rosalva";
						case 17:
							return "Shea";
						case 18:
							return "Tania";
						case 19:
							return "Isis";
						case 20:
							return "Celestia";
						default:
							return "Xylia";
						}
						break;
					case 21:
						break;
					case 22:
						switch (WorldGen.genRand.Next(35))
						{
						case 0:
							return "Joe";
						case 1:
							return "Connor";
						case 2:
							return "Tanner";
						case 3:
							return "Wyatt";
						case 4:
							return "Cody";
						case 5:
							return "Levi";
						case 6:
							return "Luke";
						case 7:
							return "Jack";
						case 8:
							return "Scott";
						case 9:
							return "Logan";
						case 10:
							return "Cole";
						case 11:
							return "Asher";
						case 12:
							return "Bradley";
						case 13:
							return "Jacob";
						case 14:
							return "Garrett";
						case 15:
							return "Dylan";
						case 16:
							return "Maxwell";
						case 17:
							return "Steve";
						case 18:
							return "Brett";
						case 19:
							return "Andrew";
						case 20:
							return "Harley";
						case 21:
							return "Kyle";
						case 22:
							return "Jake";
						case 23:
							return "Ryan";
						case 24:
							return "Jeffrey";
						case 25:
							return "Seth";
						case 26:
							return "Marty";
						case 27:
							return "Brandon";
						case 28:
							return "Zach";
						case 29:
							return "Jeff";
						case 30:
							return "Daniel";
						case 31:
							return "Trent";
						case 32:
							return "Kevin";
						case 33:
							return "Brian";
						default:
							return "Colin";
						}
						break;
					default:
						if (npcType != 38)
						{
							if (npcType == 54)
							{
								switch (WorldGen.genRand.Next(25))
								{
								case 0:
									return "Sebastian";
								case 1:
									return "Rupert";
								case 2:
									return "Clive";
								case 3:
									return "Nigel";
								case 4:
									return "Mervyn";
								case 5:
									return "Cedric";
								case 6:
									return "Pip";
								case 7:
									return "Cyril";
								case 8:
									return "Fitz";
								case 9:
									return "Lloyd";
								case 10:
									return "Arthur";
								case 11:
									return "Rodney";
								case 12:
									return "Graham";
								case 13:
									return "Edward";
								case 14:
									return "Alfred";
								case 15:
									return "Edmund";
								case 16:
									return "Henry";
								case 17:
									return "Herald";
								case 18:
									return "Roland";
								case 19:
									return "Lincoln";
								case 20:
									return "Lloyd";
								case 21:
									return "Edgar";
								case 22:
									return "Eustace";
								case 23:
									return "Benjamin";
								default:
									return "Rodrick";
								}
							}
						}
						else
						{
							switch (WorldGen.genRand.Next(22))
							{
							case 0:
								return "Dolbere";
							case 1:
								return "Bazdin";
							case 2:
								return "Durim";
							case 3:
								return "Tordak";
							case 4:
								return "Garval";
							case 5:
								return "Morthal";
							case 6:
								return "Oten";
							case 7:
								return "Dolgen";
							case 8:
								return "Gimli";
							case 9:
								return "Gimut";
							case 10:
								return "Duerthen";
							case 11:
								return "Beldin";
							case 12:
								return "Jarut";
							case 13:
								return "Ovbere";
							case 14:
								return "Norkas";
							case 15:
								return "Dolgrim";
							case 16:
								return "Boften";
							case 17:
								return "Norsun";
							case 18:
								return "Dias";
							case 19:
								return "Fikod";
							case 20:
								return "Urist";
							default:
								return "Darur";
							}
						}
						break;
					}
				}
				else if (npcType <= 124)
				{
					switch (npcType)
					{
					case 107:
						switch (WorldGen.genRand.Next(25))
						{
						case 0:
							return "Grodax";
						case 1:
							return "Sarx";
						case 2:
							return "Xon";
						case 3:
							return "Mrunok";
						case 4:
							return "Nuxatk";
						case 5:
							return "Tgerd";
						case 6:
							return "Darz";
						case 7:
							return "Smador";
						case 8:
							return "Stazen";
						case 9:
							return "Mobart";
						case 10:
							return "Knogs";
						case 11:
							return "Tkanus";
						case 12:
							return "Negurk";
						case 13:
							return "Nort";
						case 14:
							return "Durnok";
						case 15:
							return "Trogem";
						case 16:
							return "Stezom";
						case 17:
							return "Gnudar";
						case 18:
							return "Ragz";
						case 19:
							return "Fahd";
						case 20:
							return "Xanos";
						case 21:
							return "Arback";
						case 22:
							return "Fjell";
						case 23:
							return "Dalek";
						default:
							return "Knub";
						}
						break;
					case 108:
						switch (WorldGen.genRand.Next(22))
						{
						case 0:
							return "Dalamar";
						case 1:
							return "Dulais";
						case 2:
							return "Elric";
						case 3:
							return "Arddun";
						case 4:
							return "Maelor";
						case 5:
							return "Leomund";
						case 6:
							return "Hirael";
						case 7:
							return "Gwentor";
						case 8:
							return "Greum";
						case 9:
							return "Gearroid";
						case 10:
							return "Fizban";
						case 11:
							return "Ningauble";
						case 12:
							return "Seonag";
						case 13:
							return "Sargon";
						case 14:
							return "Merlyn";
						case 15:
							return "Magius";
						case 16:
							return "Berwyn";
						case 17:
							return "Arwyn";
						case 18:
							return "Alasdair";
						case 19:
							return "Tagar";
						case 20:
							return "Abram";
						default:
							return "Xanadu";
						}
						break;
					default:
						if (npcType == 124)
						{
							switch (WorldGen.genRand.Next(24))
							{
							case 0:
								return "Shayna";
							case 1:
								return "Korrie";
							case 2:
								return "Ginger";
							case 3:
								return "Brooke";
							case 4:
								return "Jenny";
							case 5:
								return "Autumn";
							case 6:
								return "Nancy";
							case 7:
								return "Ella";
							case 8:
								return "Kayla";
							case 9:
								return "Selah";
							case 10:
								return "Sophia";
							case 11:
								return "Marshanna";
							case 12:
								return "Lauren";
							case 13:
								return "Trisha";
							case 14:
								return "Shirlena";
							case 15:
								return "Sheena";
							case 16:
								return "Ellen";
							case 17:
								return "Amy";
							case 18:
								return "Dawn";
							case 19:
								return "Susana";
							case 20:
								return "Meredith";
							case 21:
								return "Selene";
							case 22:
								return "Terra";
							default:
								return "Sally";
							}
						}
						break;
					}
				}
				else if (npcType != 160)
				{
					if (npcType == 178)
					{
						switch (WorldGen.genRand.Next(20))
						{
						case 0:
							return "Whitney";
						case 1:
							return "Verity";
						case 2:
							return "Ada";
						case 3:
							return "Cornelia";
						case 4:
							return "Lydia";
						case 5:
							return "Leila";
						case 6:
							return "Minerva";
						case 7:
							return "Emeline";
						case 8:
							return "Cynthia";
						case 9:
							return "Fidelia";
						case 10:
							return "Lilly";
						case 11:
							return "Phoebe";
						case 12:
							return "Zylphia";
						case 13:
							return "Zelda";
						case 14:
							return "Selina";
						case 15:
							return "Hope";
						case 16:
							return "Isabella";
						case 17:
							return "Judith";
						case 18:
							return "Savannah";
						default:
							return "Vivian";
						}
					}
				}
				else
				{
					switch (WorldGen.genRand.Next(12))
					{
					case 0:
						return "Reishi";
					case 1:
						return "Maitake";
					case 2:
						return "Chanterelle";
					case 3:
						return "Porcini";
					case 4:
						return "Shimeji";
					case 5:
						return "Amanita";
					case 6:
						return "Muscaria";
					case 7:
						return "Agaric";
					case 8:
						return "Cremini";
					case 9:
						return "Morel";
					case 10:
						return "Enoki";
					default:
						return "Shiitake";
					}
				}
			}
			else if (npcType <= 353)
			{
				switch (npcType)
				{
				case 207:
					switch (WorldGen.genRand.Next(16))
					{
					case 0:
						return "Abdosir";
					case 1:
						return "Akbar";
					case 2:
						return "Bodashtart";
					case 3:
						return "Danel";
					case 4:
						return "Hanno";
					case 5:
						return "Hiram";
					case 6:
						return "Kanmi";
					case 7:
						return "Philosir";
					case 8:
						return "Tabnit";
					case 9:
						return "Yutpan";
					case 10:
						return "Ahirom";
					case 11:
						return "Batnoam";
					case 12:
						return "Sikarbaal";
					case 13:
						return "Hannibal";
					case 14:
						return "Yehomilk";
					default:
						return "Ahinadab";
					}
					break;
				case 208:
					switch (WorldGen.genRand.Next(17))
					{
					case 0:
						return "Candy";
					case 1:
						return "Isis";
					case 2:
						return "Trixy";
					case 3:
						return "Destiny";
					case 4:
						return "Lexus";
					case 5:
						return "Bambi";
					case 6:
						return "Bailey";
					case 7:
						return "Glitter";
					case 8:
						return "Sparkle";
					case 9:
						return "Paris";
					case 10:
						return "Dazzle";
					case 11:
						return "Fantasy";
					case 12:
						return "Bunny";
					case 13:
						return "Sugar";
					case 14:
						return "Fantasia";
					case 15:
						return "Star";
					default:
						return "Cherry";
					}
					break;
				case 209:
					switch (WorldGen.genRand.Next(23))
					{
					case 0:
						return "Alpha";
					case 1:
						return "Beta";
					case 2:
						return "Delta";
					case 3:
						return "Omega";
					case 4:
						return "Gamma";
					case 5:
						return "Theta";
					case 6:
						return "Kappa";
					case 7:
						return "Omicron";
					case 8:
						return "Sigma";
					case 9:
						return "Upsilon";
					case 10:
						return "Phi";
					case 11:
						return "Zeta";
					case 12:
						return "Lambda";
					case 13:
						return "Nu";
					case 14:
						return "Ci";
					case 15:
						return "Rho";
					case 16:
						return "Phi";
					case 17:
						return "Fender";
					case 18:
						return "T-3E0";
					case 19:
						return "Niner-7";
					case 20:
						return "A.N.D.Y";
					case 21:
						return "Syn-X";
					default:
						return "Mu";
					}
					break;
				default:
					switch (npcType)
					{
					case 227:
						switch (WorldGen.genRand.Next(18))
						{
						case 0:
							return "Marco";
						case 1:
							return "Guido";
						case 2:
							return "Enzo";
						case 3:
							return "Martino";
						case 4:
							return "Mauro";
						case 5:
							return "Lorenzo";
						case 6:
							return "Ludo";
						case 7:
							return "Luciano";
						case 8:
							return "Carlo";
						case 9:
							return "Bruno";
						case 10:
							return "Mario";
						case 11:
							return "Leonardo";
						case 12:
							return "Raphael";
						case 13:
							return "Luigi";
						case 14:
							return "Luca";
						case 15:
							return "Darren";
						case 16:
							return "Esreadel";
						default:
							return "Stefano";
						}
						break;
					case 228:
						switch (WorldGen.genRand.Next(10))
						{
						case 0:
							return "Abibe";
						case 1:
							return "Jamundi";
						case 2:
							return "U'wa";
						case 3:
							return "Tairona";
						case 4:
							return "Xirigua";
						case 5:
							return "Zop'a";
						case 6:
							return "Opuni";
						case 7:
							return "Kogi-ghi";
						case 8:
							return "Konah";
						default:
							return "Gboto";
						}
						break;
					case 229:
						switch (WorldGen.genRand.Next(11))
						{
						case 0:
							return "David";
						case 1:
							return "Red Beard";
						case 2:
							return "Jack";
						case 3:
							return "Black Beard";
						case 4:
							return "Captain Morgan";
						case 5:
							return "Wet Beard";
						case 6:
							return "James T. Beard";
						case 7:
							return "Gunpowder Garry";
						case 8:
							return "Captain Stoney Dirt";
						case 9:
							return "Jake";
						default:
							return "Captain Bullywort";
						}
						break;
					default:
						if (npcType == 353)
						{
							switch (WorldGen.genRand.Next(20))
							{
							case 0:
								return "Bri";
							case 1:
								return "Brianne";
							case 2:
								return "Flora";
							case 3:
								return "Iris";
							case 4:
								return "Scarlett";
							case 5:
								return "Lola";
							case 6:
								return "Hazel";
							case 7:
								return "Stella";
							case 8:
								return "Pearl";
							case 9:
								return "Tallulah";
							case 10:
								return "Ruby";
							case 11:
								return "Esmeralda";
							case 12:
								return "Kylie";
							case 13:
								return "Kati";
							case 14:
								return "Biah";
							case 15:
								return "Meliyah";
							case 16:
								return "Petra";
							case 17:
								return "Rox";
							case 18:
								return "Roxanne";
							default:
								return "Annabel";
							}
						}
						break;
					}
					break;
				}
			}
			else if (npcType <= 441)
			{
				switch (npcType)
				{
				case 368:
					switch (WorldGen.genRand.Next(13))
					{
					case 0:
						return "Abraham";
					case 1:
						return "Bohemas";
					case 2:
						return "Eladon";
					case 3:
						return "Aphraim";
					case 4:
						return "Gallius";
					case 5:
						return "Llewellyn";
					case 6:
						return "Riley";
					case 7:
						return "Rawleigh";
					case 8:
						return "Shipton";
					case 9:
						return "Romeo";
					case 10:
						return "Aedan";
					case 11:
						return "Mercer";
					default:
						return "Willy";
					}
					break;
				case 369:
					switch (WorldGen.genRand.Next(22))
					{
					case 0:
						return "Bobby";
					case 1:
						return "Sammy";
					case 2:
						return "Jimmy";
					case 3:
						return "Danny";
					case 4:
						return "Timmy";
					case 5:
						return "Simon";
					case 6:
						return "Johnny";
					case 7:
						return "Billy";
					case 8:
						return "Matty";
					case 9:
						return "Bart";
					case 10:
						return "Phillip";
					case 11:
						return "Spencer";
					case 12:
						return "Nathan";
					case 13:
						return "Grayson";
					case 14:
						return "Bryce";
					case 15:
						return "Miles";
					case 16:
						return "Charles";
					case 17:
						return "Adam";
					case 18:
						return "Tyler";
					case 19:
						return "Jey";
					case 20:
						return "Ivan";
					default:
						return "Izzy";
					}
					break;
				default:
					if (npcType == 441)
					{
						switch (WorldGen.genRand.Next(20))
						{
						case 0:
							return "McKinly";
						case 1:
							return "Millard";
						case 2:
							return "Fillmore";
						case 3:
							return "Rutherford";
						case 4:
							return "Chester";
						case 5:
							return "Grover";
						case 6:
							return "Cleveland";
						case 7:
							return "Theodore";
						case 8:
							return "Herbert";
						case 9:
							return "Warren";
						case 10:
							return "Lyndon";
						case 11:
							return "Ronald";
						case 12:
							return "Harrison";
						case 13:
							return "Woodrow";
						case 14:
							return "Tweed";
						case 15:
							return "Blanton";
						case 16:
							return "Dwyer";
						case 17:
							return "Carroll";
						default:
							return "Agnew";
						}
					}
					break;
				}
			}
			else if (npcType != 453)
			{
				if (npcType == 550)
				{
					return Language.RandomFromCategory("BartenderNames", WorldGen.genRand).Value;
				}
			}
			else
			{
				switch (WorldGen.genRand.Next(10))
				{
				case 0:
					return "Skellington";
				case 1:
					return "Bones McGee";
				case 2:
					return "Gloomy Mays";
				case 3:
					return "Jack Sellington";
				case 4:
					return "Billy Marrows";
				case 5:
					return "Tom";
				case 6:
					return "Rattles Magoo";
				case 7:
					return "Mandible Calavera";
				case 8:
					return "Mika";
				default:
					return "No-Eyed Wiley";
				}
			}
			return "";
		}

		public static void setNPCName(string newName, int npcType, bool resetExtras = false)
		{
			bool flag = false;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == npcType)
				{
					if (flag)
					{
						Main.npc[i].displayName = NPC.getNewNPCName(npcType);
					}
					else
					{
						Main.npc[i].displayName = newName;
						if (!resetExtras)
						{
							return;
						}
						flag = true;
					}
				}
			}
		}

		public static string firstNPCName(int npcType)
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == npcType)
				{
					return Main.npc[i].displayName;
				}
			}
			return NPC.getNewNPCName(npcType);
		}

		public static string GetFirstNPCNameOrNull(int npcType)
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == npcType)
				{
					return Main.npc[i].displayName;
				}
			}
			return null;
		}

		public static bool MechSpawn(float x, float y, int type)
		{
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == type)
				{
					num++;
					Vector2 vector = new Vector2(x, y);
					float num4 = Main.npc[i].position.X - vector.X;
					float num5 = Main.npc[i].position.Y - vector.Y;
					float num6 = (float)Math.Sqrt((double)(num4 * num4 + num5 * num5));
					if (num6 < 200f)
					{
						num2++;
					}
					if (num6 < 600f)
					{
						num3++;
					}
				}
			}
			return num2 < 3 && num3 < 6 && num < 10;
		}

		public static int TypeToHeadIndex(int type)
		{
			if (type == 17)
			{
				return 2;
			}
			if (type == 18)
			{
				return 3;
			}
			if (type == 19)
			{
				return 6;
			}
			if (type == 20)
			{
				return 5;
			}
			if (type == 22)
			{
				return 1;
			}
			if (type == 38)
			{
				return 4;
			}
			if (type == 54)
			{
				return 7;
			}
			if (type == 107)
			{
				return 9;
			}
			if (type == 108)
			{
				return 10;
			}
			if (type == 124)
			{
				return 8;
			}
			if (type == 142)
			{
				return 11;
			}
			if (type == 160)
			{
				return 12;
			}
			if (type == 178)
			{
				return 13;
			}
			if (type == 207)
			{
				return 14;
			}
			if (type == 208)
			{
				return 15;
			}
			if (type == 209)
			{
				return 16;
			}
			if (type == 227)
			{
				return 17;
			}
			if (type == 228)
			{
				return 18;
			}
			if (type == 229)
			{
				return 19;
			}
			if (type == 353)
			{
				return 20;
			}
			if (type == 368)
			{
				return 21;
			}
			if (type == 369)
			{
				return 22;
			}
			if (type == 441)
			{
				return 23;
			}
			if (type == 550)
			{
				return 24;
			}
			return -1;
		}

		public static int HeadIndexToType(int type)
		{
			if (type == 2)
			{
				return 17;
			}
			if (type == 3)
			{
				return 18;
			}
			if (type == 6)
			{
				return 19;
			}
			if (type == 5)
			{
				return 20;
			}
			if (type == 1)
			{
				return 22;
			}
			if (type == 4)
			{
				return 38;
			}
			if (type == 7)
			{
				return 54;
			}
			if (type == 9)
			{
				return 107;
			}
			if (type == 10)
			{
				return 108;
			}
			if (type == 8)
			{
				return 124;
			}
			if (type == 11)
			{
				return 142;
			}
			if (type == 12)
			{
				return 160;
			}
			if (type == 13)
			{
				return 178;
			}
			if (type == 14)
			{
				return 207;
			}
			if (type == 15)
			{
				return 208;
			}
			if (type == 16)
			{
				return 209;
			}
			if (type == 17)
			{
				return 227;
			}
			if (type == 18)
			{
				return 228;
			}
			if (type == 19)
			{
				return 229;
			}
			if (type == 20)
			{
				return 353;
			}
			if (type == 21)
			{
				return 368;
			}
			if (type == 22)
			{
				return 369;
			}
			if (type == 23)
			{
				return 441;
			}
			if (type == 24)
			{
				return 550;
			}
			return -1;
		}

		public int GetBossHeadTextureIndex()
		{
			int result = NPCID.Sets.BossHeadTextures[this.type];
			int num = this.type;
			if (num <= 126)
			{
				if (num != 4)
				{
					switch (num)
					{
					case 125:
						if (this.ai[0] >= 3f)
						{
							result = 20;
						}
						break;
					case 126:
						if (this.ai[0] >= 3f)
						{
							result = 21;
						}
						break;
					}
				}
				else if (this.ai[0] >= 2f)
				{
					result = 1;
				}
			}
			else if (num != 262)
			{
				switch (num)
				{
				case 439:
					if (this.ai[0] == 5f && this.alpha == 255)
					{
						result = -1;
					}
					break;
				case 440:
					if (this.ai[0] != 5f || this.alpha == 255)
					{
						result = -1;
					}
					break;
				}
			}
			else if (this.life <= this.lifeMax / 2)
			{
				result = 12;
			}
			return result;
		}

		public float GetBossHeadRotation()
		{
			float result = 0f;
			int num = this.type;
			if (num <= 68)
			{
				if (num == 35)
				{
					goto IL_3E;
				}
				if (num != 68)
				{
					return result;
				}
			}
			else
			{
				if (num == 127)
				{
					goto IL_3E;
				}
				if (num != 262)
				{
					if (num != 345)
					{
						return result;
					}
					if (this.ai[0] == 2f)
					{
						result = this.rotation;
						return result;
					}
					return result;
				}
			}
			result = this.rotation;
			return result;
			IL_3E:
			if (this.ai[1] == 1f || this.ai[1] == 2f)
			{
				result = this.rotation;
			}
			return result;
		}

		public SpriteEffects GetBossHeadSpriteEffects()
		{
			SpriteEffects result = SpriteEffects.None;
			int num = this.type;
			if (num == 491 && this.spriteDirection == 1)
			{
				result = SpriteEffects.FlipHorizontally;
			}
			return result;
		}

		public int BannerID()
		{
			if (this.netID >= -10)
			{
				return this.netID;
			}
			return this.type;
		}

		public void netDefaults(int type)
		{
			if (type < 0)
			{
				if (type == -1)
				{
					this.SetDefaults("Slimeling");
					return;
				}
				if (type == -2)
				{
					this.SetDefaults("Slimer2");
					return;
				}
				if (type == -3)
				{
					this.SetDefaults("Green Slime");
					return;
				}
				if (type == -4)
				{
					this.SetDefaults("Pinky");
					return;
				}
				if (type == -5)
				{
					this.SetDefaults("Baby Slime");
					return;
				}
				if (type == -6)
				{
					this.SetDefaults("Black Slime");
					return;
				}
				if (type == -7)
				{
					this.SetDefaults("Purple Slime");
					return;
				}
				if (type == -8)
				{
					this.SetDefaults("Red Slime");
					return;
				}
				if (type == -9)
				{
					this.SetDefaults("Yellow Slime");
					return;
				}
				if (type == -10)
				{
					this.SetDefaults("Jungle Slime");
					return;
				}
				if (type == -11)
				{
					this.SetDefaults("Little Eater");
					return;
				}
				if (type == -12)
				{
					this.SetDefaults("Big Eater");
					return;
				}
				if (type == -13)
				{
					this.SetDefaults("Short Bones");
					return;
				}
				if (type == -14)
				{
					this.SetDefaults("Big Boned");
					return;
				}
				if (type == -15)
				{
					this.SetDefaults("Heavy Skeleton");
					return;
				}
				if (type == -16)
				{
					this.SetDefaults("Little Stinger");
					return;
				}
				if (type == -17)
				{
					this.SetDefaults("Big Stinger");
					return;
				}
				if (type == -18)
				{
					this.SetDefaults("Tiny Moss Hornet");
					return;
				}
				if (type == -19)
				{
					this.SetDefaults("Little Moss Hornet");
					return;
				}
				if (type == -20)
				{
					this.SetDefaults("Big Moss Hornet");
					return;
				}
				if (type == -21)
				{
					this.SetDefaults("Giant Moss Hornet");
					return;
				}
				if (type == -22)
				{
					this.SetDefaults("Little Crimera");
					return;
				}
				if (type == -23)
				{
					this.SetDefaults("Big Crimera");
					return;
				}
				if (type == -24)
				{
					this.SetDefaults("Little Crimslime");
					return;
				}
				if (type == -25)
				{
					this.SetDefaults("Big Crimslime");
					return;
				}
				if (type == -26)
				{
					this.SetDefaults("Small Zombie");
					return;
				}
				if (type == -27)
				{
					this.SetDefaults("Big Zombie");
					return;
				}
				if (type == -28)
				{
					this.SetDefaults("Small Bald Zombie");
					return;
				}
				if (type == -29)
				{
					this.SetDefaults("Big Bald Zombie");
					return;
				}
				if (type == -30)
				{
					this.SetDefaults("Small Pincushion Zombie");
					return;
				}
				if (type == -31)
				{
					this.SetDefaults("Big Pincushion Zombie");
					return;
				}
				if (type == -32)
				{
					this.SetDefaults("Small Slimed Zombie");
					return;
				}
				if (type == -33)
				{
					this.SetDefaults("Big Slimed Zombie");
					return;
				}
				if (type == -34)
				{
					this.SetDefaults("Small Swamp Zombie");
					return;
				}
				if (type == -35)
				{
					this.SetDefaults("Big Swamp Zombie");
					return;
				}
				if (type == -36)
				{
					this.SetDefaults("Small Twiggy Zombie");
					return;
				}
				if (type == -37)
				{
					this.SetDefaults("Big Twiggy Zombie");
					return;
				}
				if (type == -38)
				{
					this.SetDefaults("Cataract Eye 2");
					return;
				}
				if (type == -39)
				{
					this.SetDefaults("Sleepy Eye 2");
					return;
				}
				if (type == -40)
				{
					this.SetDefaults("Dialated Eye 2");
					return;
				}
				if (type == -41)
				{
					this.SetDefaults("Green Eye 2");
					return;
				}
				if (type == -42)
				{
					this.SetDefaults("Purple Eye 2");
					return;
				}
				if (type == -43)
				{
					this.SetDefaults("Demon Eye 2");
					return;
				}
				if (type == -44)
				{
					this.SetDefaults("Small Female Zombie");
					return;
				}
				if (type == -45)
				{
					this.SetDefaults("Big Female Zombie");
					return;
				}
				if (type == -46)
				{
					this.SetDefaults("Small Skeleton");
					return;
				}
				if (type == -47)
				{
					this.SetDefaults("Big Skeleton");
					return;
				}
				if (type == -48)
				{
					this.SetDefaults("Small Headache Skeleton");
					return;
				}
				if (type == -49)
				{
					this.SetDefaults("Big Headache Skeleton");
					return;
				}
				if (type == -50)
				{
					this.SetDefaults("Small Misassembled Skeleton");
					return;
				}
				if (type == -51)
				{
					this.SetDefaults("Big Misassembled Skeleton");
					return;
				}
				if (type == -52)
				{
					this.SetDefaults("Small Pantless Skeleton");
					return;
				}
				if (type == -53)
				{
					this.SetDefaults("Big Pantless Skeleton");
					return;
				}
				if (type == -54)
				{
					this.SetDefaults("Small Rain Zombie");
					return;
				}
				if (type == -55)
				{
					this.SetDefaults("Big Rain Zombie");
					return;
				}
				if (type == -56)
				{
					this.SetDefaults("Little Hornet Fatty");
					return;
				}
				if (type == -57)
				{
					this.SetDefaults("Big Hornet Fatty");
					return;
				}
				if (type == -58)
				{
					this.SetDefaults("Little Hornet Honey");
					return;
				}
				if (type == -59)
				{
					this.SetDefaults("Big Hornet Honey");
					return;
				}
				if (type == -60)
				{
					this.SetDefaults("Little Hornet Leafy");
					return;
				}
				if (type == -61)
				{
					this.SetDefaults("Big Hornet Leafy");
					return;
				}
				if (type == -62)
				{
					this.SetDefaults("Little Hornet Spikey");
					return;
				}
				if (type == -63)
				{
					this.SetDefaults("Big Hornet Spikey");
					return;
				}
				if (type == -64)
				{
					this.SetDefaults("Little Hornet Stingy");
					return;
				}
				if (type == -65)
				{
					this.SetDefaults("Big Hornet Stingy");
					return;
				}
			}
			else
			{
				this.SetDefaults(type, -1f);
			}
		}

		public void SetDefaults(string Name)
		{
			bool flag = false;
			this.SetDefaults(0, -1f);
			if (Name == "Slimeling")
			{
				this.SetDefaults(81, 0.6f);
				this.name = Name;
				this.damage = 45;
				this.defense = 10;
				this.life = 90;
				this.knockBackResist *= 1.2f;
				this.value = 100f;
				this.netID = -1;
				flag = true;
			}
			else if (Name == "Slimer2")
			{
				this.SetDefaults(81, 0.9f);
				this.displayName = "Slimer";
				this.name = Name;
				this.damage = 45;
				this.defense = 20;
				this.life = 90;
				this.knockBackResist *= 1.2f;
				this.value = 100f;
				this.netID = -2;
				flag = true;
			}
			else if (Name == "Green Slime")
			{
				this.SetDefaults(1, 0.9f);
				this.name = Name;
				this.damage = 6;
				this.defense = 0;
				this.life = 14;
				this.knockBackResist *= 1.2f;
				this.color = new Color(0, 220, 40, 100);
				this.value = 3f;
				this.netID = -3;
				flag = true;
			}
			else if (Name == "Pinky")
			{
				this.SetDefaults(1, 0.6f);
				this.name = Name;
				this.damage = 5;
				this.defense = 5;
				this.life = 150;
				this.knockBackResist *= 1.4f;
				this.color = new Color(250, 30, 90, 90);
				this.value = 10000f;
				this.netID = -4;
				flag = true;
				this.rarity = 1;
			}
			else if (Name == "Baby Slime")
			{
				this.SetDefaults(1, 0.9f);
				this.name = Name;
				this.damage = 13;
				this.defense = 4;
				this.life = 30;
				this.knockBackResist *= 0.95f;
				this.alpha = 120;
				this.color = new Color(0, 0, 0, 50);
				this.value = 10f;
				this.netID = -5;
				flag = true;
			}
			else if (Name == "Black Slime")
			{
				this.SetDefaults(1, 1.05f);
				this.name = Name;
				this.damage = 15;
				this.defense = 4;
				this.life = 45;
				this.color = new Color(0, 0, 0, 50);
				this.value = 20f;
				this.netID = -6;
				flag = true;
			}
			else if (Name == "Purple Slime")
			{
				this.SetDefaults(1, 1.2f);
				this.name = Name;
				this.damage = 12;
				this.defense = 6;
				this.life = 40;
				this.knockBackResist *= 0.9f;
				this.color = new Color(200, 0, 255, 150);
				this.value = 10f;
				this.netID = -7;
				flag = true;
			}
			else if (Name == "Red Slime")
			{
				this.SetDefaults(1, 1.025f);
				this.name = Name;
				this.damage = 12;
				this.defense = 4;
				this.life = 35;
				this.color = new Color(255, 30, 0, 100);
				this.value = 8f;
				this.netID = -8;
				flag = true;
			}
			else if (Name == "Yellow Slime")
			{
				this.SetDefaults(1, 1.2f);
				this.name = Name;
				this.damage = 15;
				this.defense = 7;
				this.life = 45;
				this.color = new Color(255, 255, 0, 100);
				this.value = 10f;
				this.netID = -9;
				flag = true;
			}
			else if (Name == "Jungle Slime")
			{
				this.SetDefaults(1, 1.1f);
				this.name = Name;
				this.damage = 18;
				this.defense = 6;
				this.life = 60;
				this.color = new Color(143, 215, 93, 100);
				this.value = 500f;
				this.netID = -10;
				flag = true;
			}
			else if (Name == "Little Eater")
			{
				this.SetDefaults(6, 0.85f);
				this.name = Name;
				this.displayName = "Eater of Souls";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -11;
			}
			else if (Name == "Big Eater")
			{
				this.SetDefaults(6, 1.15f);
				this.name = Name;
				this.displayName = "Eater of Souls";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -12;
			}
			else if (Name == "Short Bones")
			{
				this.SetDefaults(31, 0.9f);
				this.name = Name;
				this.displayName = "Angry Bones";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.netID = -13;
			}
			else if (Name == "Big Boned")
			{
				this.SetDefaults(31, 1.15f);
				this.name = Name;
				this.displayName = "Angry Bones";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((double)((float)this.damage * this.scale) * 1.1);
				this.life = (int)((double)((float)this.life * this.scale) * 1.1);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots = 2f;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -14;
			}
			else if (Name == "Heavy Skeleton")
			{
				this.SetDefaults(77, 1.15f);
				this.name = Name;
				this.displayName = "Armored Skeleton";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((double)((float)this.damage * this.scale) * 1.1);
				this.life = 400;
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots = 2f;
				this.knockBackResist *= 2f - this.scale;
				this.height = 44;
				this.netID = -15;
			}
			else if (Name == "Little Stinger")
			{
				this.SetDefaults(42, 0.85f);
				this.displayName = "Hornet";
				this.name = Name;
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -16;
			}
			else if (Name == "Big Stinger")
			{
				this.SetDefaults(42, 1.2f);
				this.displayName = "Hornet";
				this.name = Name;
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -17;
			}
			else if (Name == "Tiny Moss Hornet")
			{
				this.SetDefaults(176, 0.8f);
				this.displayName = "Moss Hornet";
				this.name = Name;
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -18;
			}
			else if (Name == "Little Moss Hornet")
			{
				this.SetDefaults(176, 0.9f);
				this.displayName = "Moss Hornet";
				this.name = Name;
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -19;
			}
			else if (Name == "Big Moss Hornet")
			{
				this.SetDefaults(176, 1.1f);
				this.displayName = "Moss Hornet";
				this.name = Name;
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -20;
			}
			else if (Name == "Giant Moss Hornet")
			{
				this.SetDefaults(176, 1.2f);
				this.displayName = "Moss Hornet";
				this.name = Name;
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -21;
			}
			else if (Name == "Little Crimera")
			{
				this.SetDefaults(173, 0.85f);
				this.displayName = "Crimera";
				this.name = Name;
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -22;
			}
			else if (Name == "Big Crimera")
			{
				this.SetDefaults(173, 1.15f);
				this.displayName = "Crimera";
				this.name = Name;
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -23;
			}
			else if (Name == "Little Crimslime")
			{
				this.SetDefaults(183, 0.85f);
				this.displayName = "Crimslime";
				this.name = Name;
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -24;
			}
			else if (Name == "Big Crimslime")
			{
				this.SetDefaults(183, 1.15f);
				this.displayName = "Crimslime";
				this.name = Name;
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -25;
			}
			else if (Name == "Small Zombie")
			{
				this.SetDefaults(3, 0.9f);
				this.name = Name;
				this.displayName = "Zombie";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -26;
			}
			else if (Name == "Big Zombie")
			{
				this.SetDefaults(3, 1.1f);
				this.name = Name;
				this.displayName = "Zombie";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -27;
			}
			else if (Name == "Small Bald Zombie")
			{
				this.SetDefaults(132, 0.85f);
				this.name = Name;
				this.displayName = "Zombie";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -28;
			}
			else if (Name == "Big Bald Zombie")
			{
				this.SetDefaults(132, 1.15f);
				this.name = Name;
				this.displayName = "Zombie";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -29;
			}
			else if (Name == "Small Pincushion Zombie")
			{
				this.SetDefaults(186, 0.93f);
				this.name = Name;
				this.displayName = "Zombie";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -30;
			}
			else if (Name == "Big Pincushion Zombie")
			{
				this.SetDefaults(186, 1.13f);
				this.name = Name;
				this.displayName = "Zombie";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -31;
			}
			else if (Name == "Small Slimed Zombie")
			{
				this.SetDefaults(187, 0.89f);
				this.name = Name;
				this.displayName = "Zombie";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -32;
			}
			else if (Name == "Big Slimed Zombie")
			{
				this.SetDefaults(187, 1.11f);
				this.name = Name;
				this.displayName = "Zombie";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -33;
			}
			else if (Name == "Small Swamp Zombie")
			{
				this.SetDefaults(188, 0.87f);
				this.name = Name;
				this.displayName = "Zombie";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -34;
			}
			else if (Name == "Big Swamp Zombie")
			{
				this.SetDefaults(188, 1.13f);
				this.name = Name;
				this.displayName = "Zombie";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -35;
			}
			else if (Name == "Small Twiggy Zombie")
			{
				this.SetDefaults(189, 0.92f);
				this.name = Name;
				this.displayName = "Zombie";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -36;
			}
			else if (Name == "Big Twiggy Zombie")
			{
				this.SetDefaults(189, 1.08f);
				this.name = Name;
				this.displayName = "Zombie";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -37;
			}
			else if (Name == "Cataract Eye 2")
			{
				this.SetDefaults(190, 1.15f);
				this.name = Name;
				this.displayName = "Demon Eye";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -38;
			}
			else if (Name == "Sleepy Eye 2")
			{
				this.SetDefaults(191, 1.1f);
				this.name = Name;
				this.displayName = "Demon Eye";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -39;
			}
			else if (Name == "Dialated Eye 2")
			{
				this.SetDefaults(192, 0.9f);
				this.name = Name;
				this.displayName = "Demon Eye";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -40;
			}
			else if (Name == "Green Eye 2")
			{
				this.SetDefaults(193, 0.85f);
				this.name = Name;
				this.displayName = "Demon Eye";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -41;
			}
			else if (Name == "Purple Eye 2")
			{
				this.SetDefaults(194, 1.1f);
				this.name = Name;
				this.displayName = "Demon Eye";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -42;
			}
			else if (Name == "Demon Eye 2")
			{
				this.SetDefaults(2, 1.15f);
				this.name = Name;
				this.displayName = "Demon Eye";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -43;
			}
			else if (Name == "Small Female Zombie")
			{
				this.SetDefaults(200, 0.87f);
				this.name = Name;
				this.displayName = "Zombie";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -44;
			}
			else if (Name == "Big Female Zombie")
			{
				this.SetDefaults(200, 1.05f);
				this.name = Name;
				this.displayName = "Zombie";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -45;
			}
			else if (Name == "Small Skeleton")
			{
				this.SetDefaults(21, 0.9f);
				this.name = Name;
				this.displayName = "Skeleton";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -46;
			}
			else if (Name == "Big Skeleton")
			{
				this.SetDefaults(21, 1.1f);
				this.name = Name;
				this.displayName = "Skeleton";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -47;
			}
			else if (Name == "Small Headache Skeleton")
			{
				this.SetDefaults(201, 0.93f);
				this.name = Name;
				this.displayName = "Skeleton";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -48;
			}
			else if (Name == "Big Headache Skeleton")
			{
				this.SetDefaults(201, 1.07f);
				this.name = Name;
				this.displayName = "Skeleton";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -49;
			}
			else if (Name == "Small Misassembled Skeleton")
			{
				this.SetDefaults(202, 0.87f);
				this.name = Name;
				this.displayName = "Skeleton";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -50;
			}
			else if (Name == "Big Misassembled Skeleton")
			{
				this.SetDefaults(202, 1.13f);
				this.name = Name;
				this.displayName = "Skeleton";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -51;
			}
			else if (Name == "Small Pantless Skeleton")
			{
				this.SetDefaults(203, 0.85f);
				this.name = Name;
				this.displayName = "Skeleton";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -52;
			}
			else if (Name == "Big Pantless Skeleton")
			{
				this.SetDefaults(203, 1.15f);
				this.name = Name;
				this.displayName = "Skeleton";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -53;
			}
			else if (Name == "Small Rain Zombie")
			{
				this.SetDefaults(223, 0.9f);
				this.name = Name;
				this.displayName = "Zombie";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -54;
			}
			else if (Name == "Big Rain Zombie")
			{
				this.SetDefaults(223, 1.1f);
				this.name = Name;
				this.displayName = "Zombie";
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -55;
			}
			else if (Name == "Little Hornet Fatty")
			{
				this.SetDefaults(231, 0.85f);
				this.displayName = "Hornet";
				this.name = Name;
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -56;
			}
			else if (Name == "Big Hornet Fatty")
			{
				this.SetDefaults(231, 1.25f);
				this.displayName = "Hornet";
				this.name = Name;
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -57;
			}
			else if (Name == "Little Hornet Honey")
			{
				this.SetDefaults(232, 0.8f);
				this.displayName = "Hornet";
				this.name = Name;
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -58;
			}
			else if (Name == "Big Hornet Honey")
			{
				this.SetDefaults(232, 1.15f);
				this.displayName = "Hornet";
				this.name = Name;
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -59;
			}
			else if (Name == "Little Hornet Leafy")
			{
				this.SetDefaults(233, 0.92f);
				this.displayName = "Hornet";
				this.name = Name;
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -60;
			}
			else if (Name == "Big Hornet Leafy")
			{
				this.SetDefaults(233, 1.1f);
				this.displayName = "Hornet";
				this.name = Name;
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -61;
			}
			else if (Name == "Little Hornet Spikey")
			{
				this.SetDefaults(234, 0.78f);
				this.displayName = "Hornet";
				this.name = Name;
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -62;
			}
			else if (Name == "Big Hornet Spikey")
			{
				this.SetDefaults(234, 1.16f);
				this.displayName = "Hornet";
				this.name = Name;
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -63;
			}
			else if (Name == "Little Hornet Stingy")
			{
				this.SetDefaults(235, 0.87f);
				this.displayName = "Hornet";
				this.name = Name;
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -64;
			}
			else if (Name == "Big Hornet Stingy")
			{
				this.SetDefaults(235, 1.21f);
				this.displayName = "Hornet";
				this.name = Name;
				this.defense = (int)((float)this.defense * this.scale);
				this.damage = (int)((float)this.damage * this.scale);
				this.life = (int)((float)this.life * this.scale);
				this.value = (float)((int)(this.value * this.scale));
				this.npcSlots *= this.scale;
				this.knockBackResist *= 2f - this.scale;
				this.netID = -65;
			}
			else if (Name != "")
			{
				for (int i = 1; i < 580; i++)
				{
					if (Main.npcNameEnglish[i] == Name)
					{
						this.SetDefaults(i, -1f);
						return;
					}
				}
				this.SetDefaults(0, -1f);
				this.active = false;
			}
			else
			{
				this.active = false;
			}
			this.displayName = Lang.npcName(this.netID, false);
			this.lifeMax = this.life;
			this.defDamage = this.damage;
			this.defDefense = this.defense;
			if (Main.expertMode && flag)
			{
				this.scaleStats();
			}
		}

		public void SetDefaultsKeepPlayerInteraction(int Type)
		{
			bool[] array = new bool[this.playerInteraction.Length];
			for (int i = 0; i < this.playerInteraction.Length; i++)
			{
				array[i] = this.playerInteraction[i];
			}
			this.SetDefaults(Type, -1f);
			for (int j = 0; j < this.playerInteraction.Length; j++)
			{
				this.playerInteraction[j] = array[j];
			}
		}

		public void SetDefaults(int Type, float scaleOverride = -1f)
		{
			this.waterMovementSpeed = (this.lavaMovementSpeed = 0.5f);
			this.honeyMovementSpeed = 0.25f;
			this.altTexture = 0;
			this.nameOver = 0f;
			this.takenDamageMultiplier = 1f;
			this.extraValue = 0f;
			for (int i = 0; i < this.playerInteraction.Length; i++)
			{
				this.playerInteraction[i] = false;
			}
			this.rarity = 0;
			this.dontCountMe = false;
			this.releaseOwner = 255;
			this.catchItem = 0;
			this.npcNameLookup = 0;
			this.netStream = 32;
			bool flag = false;
			this.netID = 0;
			this.netAlways = false;
			this.netSpam = 0;
			this.SpawnedFromStatue = false;
			int num = 10;
			if (Type >= 0)
			{
				num = NPCID.Sets.TrailCacheLength[Type];
			}
			if (num != this.oldPos.Length)
			{
				Array.Resize<Vector2>(ref this.oldPos, num);
				Array.Resize<float>(ref this.oldRot, num);
			}
			for (int j = 0; j < this.oldPos.Length; j++)
			{
				this.oldRot[j] = 0f;
				this.oldPos[j].X = 0f;
				this.oldPos[j].Y = 0f;
			}
			for (int k = 0; k < 5; k++)
			{
				this.buffTime[k] = 0;
				this.buffType[k] = 0;
			}
			for (int l = 0; l < 206; l++)
			{
				this.buffImmune[l] = false;
			}
			this.setFrameSize = false;
			this.buffImmune[31] = true;
			this.netSkip = -2;
			this.realLife = -1;
			this.lifeRegen = 0;
			this.lifeRegenExpectedLossPerSecond = -1;
			this.lifeRegenCount = 0;
			this.poisoned = false;
			this.soulDrain = false;
			this.venom = false;
			this.shadowFlame = false;
			this.onFire = false;
			this.midas = false;
			this.ichor = false;
			this.onFrostBurn = false;
			this.confused = false;
			this.loveStruck = false;
			this.dontTakeDamageFromHostiles = false;
			this.stinky = false;
			this.dryadWard = false;
			this.onFire2 = false;
			this.justHit = false;
			this.dontTakeDamage = false;
			this.npcSlots = 1f;
			this.lavaImmune = false;
			this.lavaWet = false;
			this.wetCount = 0;
			this.wet = false;
			this.townNPC = false;
			this.homeless = false;
			this.homeTileX = -1;
			this.homeTileY = -1;
			this.friendly = false;
			this.behindTiles = false;
			this.boss = false;
			this.noTileCollide = false;
			this.rotation = 0f;
			this.active = true;
			this.alpha = 0;
			this.color = default(Color);
			this.collideX = false;
			this.collideY = false;
			this.direction = 0;
			this.oldDirection = this.direction;
			this.frameCounter = 0.0;
			this.netUpdate = true;
			this.netUpdate2 = false;
			this.knockBackResist = 1f;
			this.name = "";
			this.displayName = "";
			this.noGravity = false;
			this.scale = 1f;
			this.HitSound = null;
			this.DeathSound = null;
			this.spriteDirection = -1;
			this.target = 255;
			this.oldTarget = this.target;
			this.targetRect = default(Rectangle);
			this.timeLeft = NPC.activeTime;
			this.type = Type;
			this.value = 0f;
			this.coldDamage = false;
			this.trapImmune = false;
			this.hide = false;
			this.immortal = false;
			this.chaseable = true;
			this.breath = 200;
			this.breathCounter = 0;
			this.reflectingProjectiles = false;
			this.canGhostHeal = true;
			this.javelined = false;
			this.daybreak = false;
			this.celled = false;
			this.dryadBane = false;
			this.betsysCurse = false;
			this.oiled = false;
			for (int m = 0; m < NPC.maxAI; m++)
			{
				this.ai[m] = 0f;
			}
			for (int n = 0; n < NPC.maxAI; n++)
			{
				this.localAI[n] = 0f;
			}
			if (this.type == 1)
			{
				this.name = "Blue Slime";
				this.width = 24;
				this.height = 18;
				this.aiStyle = 1;
				this.damage = 7;
				this.defense = 2;
				this.lifeMax = 25;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.alpha = 175;
				this.color = new Color(0, 80, 255, 100);
				this.value = 25f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 2)
			{
				this.name = "Demon Eye";
				this.width = 30;
				this.height = 32;
				this.aiStyle = 2;
				this.damage = 18;
				this.defense = 2;
				this.lifeMax = 60;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.8f;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 75f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 3)
			{
				this.name = "Zombie";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 14;
				this.defense = 6;
				this.lifeMax = 45;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.5f;
				this.value = 60f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 430)
			{
				this.name = "Zombie";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 14;
				this.defense = 6;
				this.lifeMax = 45;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.5f;
				this.value = 60f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 431)
			{
				this.name = "Zombie Eskimo";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 16;
				this.defense = 8;
				this.lifeMax = 50;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.45f;
				this.value = 80f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 432)
			{
				this.name = "Pincushion Zombie";
				this.displayName = "Zombie";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 16;
				this.defense = 8;
				this.lifeMax = 50;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.45f;
				this.value = 65f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 433)
			{
				this.name = "Slimed Zombie";
				this.displayName = "Zombie";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 13;
				this.defense = 6;
				this.lifeMax = 40;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.55f;
				this.value = 55f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 434)
			{
				this.name = "Swamp Zombie";
				this.displayName = "Zombie";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 13;
				this.defense = 8;
				this.lifeMax = 45;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.45f;
				this.value = 80f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 435)
			{
				this.name = "Twiggy Zombie";
				this.displayName = "Zombie";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 16;
				this.defense = 4;
				this.lifeMax = 45;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.55f;
				this.value = 70f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 436)
			{
				this.name = "Female Zombie";
				this.displayName = "Zombie";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 12;
				this.defense = 4;
				this.lifeMax = 38;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.6f;
				this.value = 65f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 4)
			{
				this.name = "Eye of Cthulhu";
				this.width = 100;
				this.height = 110;
				this.aiStyle = 4;
				this.damage = 15;
				this.defense = 12;
				this.lifeMax = 2800;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0f;
				this.noGravity = true;
				this.noTileCollide = true;
				this.timeLeft = NPC.activeTime * 30;
				this.boss = true;
				this.value = 30000f;
				this.npcSlots = 5f;
			}
			else if (this.type == 5)
			{
				this.name = "Servant of Cthulhu";
				this.width = 20;
				this.height = 20;
				this.aiStyle = 5;
				this.damage = 12;
				this.defense = 0;
				this.lifeMax = 8;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.noTileCollide = true;
			}
			else if (this.type == 6)
			{
				this.npcSlots = 1f;
				this.name = "Eater of Souls";
				this.width = 30;
				this.height = 30;
				this.aiStyle = 5;
				this.damage = 22;
				this.defense = 8;
				this.lifeMax = 40;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.knockBackResist = 0.5f;
				this.value = 90f;
			}
			else if (this.type == 7)
			{
				this.displayName = "Devourer";
				this.npcSlots = 3.5f;
				this.name = "Devourer Head";
				this.width = 22;
				this.height = 22;
				this.aiStyle = 6;
				this.damage = 31;
				this.defense = 2;
				this.lifeMax = 100;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
				this.value = 140f;
				this.netAlways = true;
			}
			else if (this.type == 8)
			{
				this.displayName = "Devourer";
				this.name = "Devourer Body";
				this.width = 22;
				this.height = 22;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 16;
				this.defense = 6;
				this.lifeMax = 100;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
				this.value = 140f;
				this.dontCountMe = true;
			}
			else if (this.type == 9)
			{
				this.displayName = "Devourer";
				this.name = "Devourer Tail";
				this.width = 22;
				this.height = 22;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 13;
				this.defense = 10;
				this.lifeMax = 100;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
				this.value = 140f;
				this.dontCountMe = true;
			}
			else if (this.type == 10)
			{
				this.displayName = "Giant Worm";
				this.name = "Giant Worm Head";
				this.width = 14;
				this.height = 14;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 8;
				this.defense = 0;
				this.lifeMax = 30;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
				this.value = 40f;
			}
			else if (this.type == 11)
			{
				this.displayName = "Giant Worm";
				this.name = "Giant Worm Body";
				this.width = 14;
				this.height = 14;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 4;
				this.defense = 4;
				this.lifeMax = 30;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
				this.value = 40f;
				this.dontCountMe = true;
			}
			else if (this.type == 12)
			{
				this.displayName = "Giant Worm";
				this.name = "Giant Worm Tail";
				this.width = 14;
				this.height = 14;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 4;
				this.defense = 6;
				this.lifeMax = 30;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
				this.value = 40f;
				this.dontCountMe = true;
			}
			else if (this.type == 13)
			{
				this.displayName = "Eater of Worlds";
				this.npcSlots = 5f;
				this.name = "Eater of Worlds Head";
				this.width = 38;
				this.height = 38;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 22;
				this.defense = 2;
				this.lifeMax = 65;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
				this.value = 300f;
				this.scale = 1f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
			}
			else if (this.type == 14)
			{
				this.displayName = "Eater of Worlds";
				this.name = "Eater of Worlds Body";
				this.width = 38;
				this.height = 38;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 13;
				this.defense = 4;
				this.lifeMax = 150;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
				this.value = 300f;
				this.scale = 1f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.dontCountMe = true;
			}
			else if (this.type == 15)
			{
				this.displayName = "Eater of Worlds";
				this.name = "Eater of Worlds Tail";
				this.width = 38;
				this.height = 38;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 11;
				this.defense = 8;
				this.lifeMax = 220;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
				this.value = 300f;
				this.scale = 1f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.dontCountMe = true;
			}
			else if (this.type == 16)
			{
				this.npcSlots = 2f;
				this.name = "Mother Slime";
				this.width = 36;
				this.height = 24;
				this.aiStyle = 1;
				this.damage = 20;
				this.defense = 7;
				this.lifeMax = 90;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.alpha = 120;
				this.color = new Color(0, 0, 0, 50);
				this.value = 75f;
				this.scale = 1.25f;
				this.knockBackResist = 0.6f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 17)
			{
				this.townNPC = true;
				this.friendly = true;
				this.name = "Merchant";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 7;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
			}
			else if (this.type == 18)
			{
				this.townNPC = true;
				this.friendly = true;
				this.name = "Nurse";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 7;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
			}
			else if (this.type == 19)
			{
				this.townNPC = true;
				this.friendly = true;
				this.name = "Arms Dealer";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 7;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
			}
			else if (this.type == 20)
			{
				this.townNPC = true;
				this.friendly = true;
				this.name = "Dryad";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 7;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
			}
			else if (this.type == 21)
			{
				this.name = "Skeleton";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 20;
				this.defense = 8;
				this.lifeMax = 60;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.5f;
				this.value = 100f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 22)
			{
				this.townNPC = true;
				this.friendly = true;
				this.name = "Guide";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 7;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
			}
			else if (this.type == 23)
			{
				this.name = "Meteor Head";
				this.width = 22;
				this.height = 22;
				this.aiStyle = 5;
				this.damage = 40;
				this.defense = 6;
				this.lifeMax = 26;
				this.HitSound = SoundID.NPCHit3;
				this.DeathSound = SoundID.NPCDeath3;
				this.noGravity = true;
				this.noTileCollide = true;
				this.value = 80f;
				this.knockBackResist = 0.4f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
			}
			else if (this.type == 24)
			{
				this.npcSlots = 3f;
				this.name = "Fire Imp";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 8;
				this.damage = 30;
				this.defense = 16;
				this.lifeMax = 70;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
				this.lavaImmune = true;
				this.value = 350f;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
			}
			else if (this.type == 25)
			{
				this.name = "Burning Sphere";
				this.width = 16;
				this.height = 16;
				this.aiStyle = 9;
				this.damage = 30;
				this.defense = 0;
				this.lifeMax = 1;
				this.HitSound = SoundID.NPCHit3;
				this.DeathSound = SoundID.NPCDeath3;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.alpha = 100;
			}
			else if (this.type == 31)
			{
				this.name = "Angry Bones";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 26;
				this.defense = 8;
				this.lifeMax = 80;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.8f;
				this.value = 130f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 32)
			{
				this.name = "Dark Caster";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 8;
				this.damage = 20;
				this.defense = 2;
				this.lifeMax = 50;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.6f;
				this.value = 140f;
				this.npcSlots = 2f;
				this.buffImmune[20] = true;
			}
			else if (this.type == 33)
			{
				this.name = "Water Sphere";
				this.width = 16;
				this.height = 16;
				this.aiStyle = 9;
				this.damage = 20;
				this.defense = 0;
				this.lifeMax = 1;
				this.HitSound = SoundID.NPCHit3;
				this.DeathSound = SoundID.NPCDeath3;
				this.noGravity = true;
				this.noTileCollide = true;
				this.alpha = 255;
				this.knockBackResist = 0f;
			}
			else if (this.type == 34)
			{
				this.name = "Cursed Skull";
				this.width = 26;
				this.height = 28;
				this.aiStyle = 10;
				this.damage = 35;
				this.defense = 6;
				this.lifeMax = 40;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.noGravity = true;
				this.noTileCollide = true;
				this.value = 150f;
				this.knockBackResist = 0.2f;
				this.npcSlots = 0.75f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
			}
			else if (this.type == 35)
			{
				this.displayName = "Skeletron";
				this.name = "Skeletron Head";
				this.width = 80;
				this.height = 102;
				this.aiStyle = 11;
				this.damage = 32;
				this.defense = 10;
				this.lifeMax = 4400;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.noGravity = true;
				this.noTileCollide = true;
				this.value = 50000f;
				this.knockBackResist = 0f;
				this.boss = true;
				this.npcSlots = 6f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.buffImmune[189] = (this.buffImmune[169] = (this.buffImmune[183] = true));
			}
			else if (this.type == 36)
			{
				this.displayName = "Skeletron";
				this.name = "Skeletron Hand";
				this.width = 52;
				this.height = 52;
				this.aiStyle = 12;
				this.damage = 20;
				this.defense = 14;
				this.lifeMax = 600;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
			}
			else if (this.type == 37)
			{
				this.townNPC = true;
				this.friendly = true;
				this.name = "Old Man";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 7;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
			}
			else if (this.type == 38)
			{
				this.townNPC = true;
				this.friendly = true;
				this.name = "Demolitionist";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 7;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
			}
			else if (this.type == 39)
			{
				this.npcSlots = 6f;
				this.name = "Bone Serpent Head";
				this.displayName = "Bone Serpent";
				this.width = 22;
				this.height = 22;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 30;
				this.defense = 10;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath5;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
				this.value = 1200f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
			}
			else if (this.type == 40)
			{
				this.name = "Bone Serpent Body";
				this.displayName = "Bone Serpent";
				this.width = 22;
				this.height = 22;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 15;
				this.defense = 12;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath5;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
				this.value = 1200f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.dontCountMe = true;
			}
			else if (this.type == 41)
			{
				this.name = "Bone Serpent Tail";
				this.displayName = "Bone Serpent";
				this.width = 22;
				this.height = 22;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 10;
				this.defense = 18;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath5;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
				this.value = 1200f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.dontCountMe = true;
			}
			else if (this.type == 42)
			{
				this.name = "Hornet";
				this.width = 34;
				this.height = 32;
				this.aiStyle = 5;
				this.damage = 26;
				this.defense = 12;
				this.lifeMax = 48;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.5f;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 200f;
				this.noGravity = true;
				this.buffImmune[20] = true;
			}
			else if (this.type == 43)
			{
				this.noGravity = true;
				this.noTileCollide = true;
				this.name = "Man Eater";
				this.width = 30;
				this.height = 30;
				this.aiStyle = 13;
				this.damage = 34;
				this.defense = 10;
				this.lifeMax = 110;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0f;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 350f;
				this.buffImmune[20] = true;
			}
			else if (this.type == 44)
			{
				this.name = "Undead Miner";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 22;
				this.defense = 9;
				this.lifeMax = 70;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.5f;
				this.value = 250f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 45)
			{
				this.name = "Tim";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 8;
				this.damage = 20;
				this.defense = 4;
				this.lifeMax = 200;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.6f;
				this.value = 5000f;
				this.buffImmune[20] = true;
				this.rarity = 4;
			}
			else if (this.type == 46 || this.type == 303 || this.type == 337 || this.type == 540)
			{
				this.name = "Bunny";
				this.width = 18;
				this.height = 20;
				this.aiStyle = 7;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.catchItem = 2019;
			}
			else if (this.type == 47)
			{
				this.name = "Corrupt Bunny";
				this.width = 18;
				this.height = 20;
				this.aiStyle = 3;
				this.damage = 20;
				this.defense = 4;
				this.lifeMax = 70;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 500f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 48)
			{
				this.name = "Harpy";
				this.width = 24;
				this.height = 34;
				this.aiStyle = 14;
				this.damage = 25;
				this.defense = 8;
				this.lifeMax = 100;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.6f;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 300f;
			}
			else if (this.type == 49)
			{
				this.npcSlots = 0.5f;
				this.name = "Cave Bat";
				this.width = 22;
				this.height = 18;
				this.aiStyle = 14;
				this.damage = 13;
				this.defense = 2;
				this.lifeMax = 16;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.8f;
				this.DeathSound = SoundID.NPCDeath4;
				this.value = 90f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 50)
			{
				this.boss = true;
				this.name = "King Slime";
				this.width = 98;
				this.height = 92;
				this.aiStyle = 15;
				this.damage = 40;
				this.defense = 10;
				this.lifeMax = 2000;
				this.knockBackResist = 0f;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.alpha = 30;
				this.value = 10000f;
				this.scale = 1.25f;
				this.buffImmune[20] = true;
				this.timeLeft = NPC.activeTime * 30;
			}
			else if (this.type == 51)
			{
				this.npcSlots = 0.5f;
				this.name = "Jungle Bat";
				this.width = 22;
				this.height = 18;
				this.aiStyle = 14;
				this.damage = 20;
				this.defense = 4;
				this.lifeMax = 34;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.8f;
				this.DeathSound = SoundID.NPCDeath4;
				this.value = 80f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 52)
			{
				this.name = "Doctor Bones";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 20;
				this.defense = 10;
				this.lifeMax = 500;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.5f;
				this.value = 1000f;
				this.buffImmune[31] = false;
				this.rarity = 2;
			}
			else if (this.type == 53)
			{
				this.name = "The Groom";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 14;
				this.defense = 8;
				this.lifeMax = 200;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.5f;
				this.value = 1000f;
				this.buffImmune[31] = false;
				this.rarity = 2;
			}
			else if (this.type == 54)
			{
				this.townNPC = true;
				this.friendly = true;
				this.name = "Clothier";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 7;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
			}
			else if (this.type == 55)
			{
				this.noGravity = true;
				this.name = "Goldfish";
				this.width = 20;
				this.height = 18;
				this.aiStyle = 16;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
				this.catchItem = 261;
			}
			else if (this.type == 56)
			{
				this.noTileCollide = true;
				this.noGravity = true;
				this.name = "Snatcher";
				this.width = 30;
				this.height = 30;
				this.aiStyle = 13;
				this.damage = 25;
				this.defense = 10;
				this.lifeMax = 60;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0f;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 90f;
				this.buffImmune[20] = true;
			}
			else if (this.type == 57)
			{
				this.noGravity = true;
				this.name = "Corrupt Goldfish";
				this.width = 18;
				this.height = 20;
				this.aiStyle = 16;
				this.damage = 30;
				this.defense = 6;
				this.lifeMax = 100;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 500f;
			}
			else if (this.type == 58)
			{
				this.npcSlots = 0.5f;
				this.noGravity = true;
				this.name = "Piranha";
				this.width = 18;
				this.height = 20;
				this.aiStyle = 16;
				this.damage = 25;
				this.defense = 2;
				this.lifeMax = 30;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 50f;
			}
			else if (this.type == 59)
			{
				this.name = "Lava Slime";
				this.width = 24;
				this.height = 18;
				this.aiStyle = 1;
				this.damage = 15;
				this.defense = 10;
				this.lifeMax = 50;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.scale = 1.1f;
				this.alpha = 50;
				this.lavaImmune = true;
				this.value = 120f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 60)
			{
				this.npcSlots = 0.5f;
				this.name = "Hellbat";
				this.width = 22;
				this.height = 18;
				this.aiStyle = 14;
				this.damage = 35;
				this.defense = 8;
				this.lifeMax = 46;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.8f;
				this.DeathSound = SoundID.NPCDeath4;
				this.value = 120f;
				this.scale = 1.1f;
				this.lavaImmune = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 61)
			{
				this.name = "Vulture";
				this.width = 36;
				this.height = 36;
				this.aiStyle = 17;
				this.damage = 15;
				this.defense = 4;
				this.lifeMax = 40;
				this.knockBackResist = 0.8f;
				this.HitSound = SoundID.NPCHit28;
				this.DeathSound = SoundID.NPCDeath31;
				this.value = 60f;
			}
			else if (this.type == 62)
			{
				this.npcSlots = 2f;
				this.name = "Demon";
				this.width = 28;
				this.height = 48;
				this.aiStyle = 14;
				this.damage = 32;
				this.defense = 8;
				this.lifeMax = 120;
				this.HitSound = SoundID.NPCHit21;
				this.knockBackResist = 0.8f;
				this.DeathSound = SoundID.NPCDeath24;
				this.value = 300f;
				this.lavaImmune = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
			}
			else if (this.type == 63)
			{
				this.noGravity = true;
				this.name = "Blue Jellyfish";
				this.width = 26;
				this.height = 26;
				this.aiStyle = 18;
				this.damage = 25;
				this.defense = 4;
				this.lifeMax = 34;
				this.HitSound = SoundID.NPCHit25;
				this.DeathSound = SoundID.NPCDeath28;
				this.value = 100f;
				this.alpha = 20;
			}
			else if (this.type == 64)
			{
				this.noGravity = true;
				this.name = "Pink Jellyfish";
				this.width = 26;
				this.height = 26;
				this.aiStyle = 18;
				this.damage = 30;
				this.defense = 6;
				this.lifeMax = 70;
				this.HitSound = SoundID.NPCHit25;
				this.DeathSound = SoundID.NPCDeath28;
				this.value = 100f;
				this.alpha = 20;
			}
			else if (this.type == 65)
			{
				this.noGravity = true;
				this.name = "Shark";
				this.width = 100;
				this.height = 24;
				this.aiStyle = 16;
				this.damage = 40;
				this.defense = 2;
				this.lifeMax = 300;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 400f;
				this.knockBackResist = 0.7f;
			}
			else if (this.type == 66)
			{
				this.npcSlots = 2f;
				this.name = "Voodoo Demon";
				this.width = 28;
				this.height = 48;
				this.aiStyle = 14;
				this.damage = 32;
				this.defense = 8;
				this.lifeMax = 140;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.8f;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 1000f;
				this.lavaImmune = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
			}
			else if (this.type == 67)
			{
				this.name = "Crab";
				this.width = 28;
				this.height = 20;
				this.aiStyle = 3;
				this.damage = 20;
				this.defense = 10;
				this.lifeMax = 40;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 60f;
			}
			else if (this.type == 68)
			{
				this.name = "Dungeon Guardian";
				this.width = 80;
				this.height = 102;
				this.aiStyle = 11;
				this.damage = 1000;
				this.defense = 9999;
				this.lifeMax = 9999;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.buffImmune[189] = (this.buffImmune[169] = (this.buffImmune[183] = true));
			}
			else if (this.type == 69)
			{
				this.name = "Antlion";
				this.width = 24;
				this.height = 24;
				this.aiStyle = 19;
				this.damage = 10;
				this.defense = 6;
				this.lifeMax = 45;
				this.HitSound = SoundID.NPCHit31;
				this.DeathSound = SoundID.NPCDeath34;
				this.knockBackResist = 0f;
				this.value = 60f;
				this.behindTiles = true;
			}
			else if (this.type == 70)
			{
				this.npcSlots = 0.3f;
				this.name = "Spike Ball";
				this.width = 34;
				this.height = 34;
				this.aiStyle = 20;
				this.damage = 32;
				this.defense = 100;
				this.lifeMax = 100;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0f;
				this.noGravity = true;
				this.noTileCollide = true;
				this.dontTakeDamage = true;
				this.scale = 1.5f;
			}
			else if (this.type == 71)
			{
				this.npcSlots = 2f;
				this.name = "Dungeon Slime";
				this.width = 36;
				this.height = 24;
				this.aiStyle = 1;
				this.damage = 30;
				this.defense = 7;
				this.lifeMax = 150;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.alpha = 60;
				this.value = 150f;
				this.scale = 1.25f;
				this.knockBackResist = 0.6f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
				this.rarity = 1;
			}
			else if (this.type == 72)
			{
				this.npcSlots = 0.3f;
				this.name = "Blazing Wheel";
				this.width = 34;
				this.height = 34;
				this.aiStyle = 21;
				this.damage = 24;
				this.defense = 100;
				this.lifeMax = 100;
				this.alpha = 100;
				this.behindTiles = true;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0f;
				this.noGravity = true;
				this.dontTakeDamage = true;
				this.scale = 1.2f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
			}
			else if (this.type == 73)
			{
				this.name = "Goblin Scout";
				this.scale = 0.95f;
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 20;
				this.defense = 6;
				this.lifeMax = 80;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.7f;
				this.value = 200f;
				this.buffImmune[31] = false;
				this.rarity = 1;
			}
			else if (this.type == 74 || this.type == 297 || this.type == 298)
			{
				this.name = "Bird";
				this.width = 14;
				this.height = 14;
				this.aiStyle = 24;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.8f;
				this.DeathSound = SoundID.NPCDeath1;
				if (this.type == 74)
				{
					this.catchItem = 2015;
				}
				if (this.type == 297)
				{
					this.catchItem = 2016;
				}
				if (this.type == 298)
				{
					this.catchItem = 2017;
				}
				this.npcSlots = 0.4f;
			}
			else if (this.type == 75)
			{
				this.noGravity = true;
				this.name = "Pixie";
				this.width = 20;
				this.height = 20;
				this.aiStyle = 22;
				this.damage = 55;
				this.defense = 20;
				this.lifeMax = 150;
				this.HitSound = SoundID.NPCHit5;
				this.knockBackResist = 0.6f;
				this.DeathSound = SoundID.NPCDeath7;
				this.value = 350f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 77)
			{
				this.name = "Armored Skeleton";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 40;
				this.defense = 28;
				this.lifeMax = 260;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.4f;
				this.value = 400f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 78)
			{
				this.name = "Mummy";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 50;
				this.defense = 16;
				this.lifeMax = 130;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath6;
				this.knockBackResist = 0.6f;
				this.value = 600f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 79)
			{
				this.name = "Dark Mummy";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 60;
				this.defense = 18;
				this.lifeMax = 180;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath6;
				this.knockBackResist = 0.5f;
				this.value = 700f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 80)
			{
				this.name = "Light Mummy";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 55;
				this.defense = 18;
				this.lifeMax = 200;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath6;
				this.knockBackResist = 0.55f;
				this.value = 700f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 81)
			{
				this.name = "Corrupt Slime";
				this.width = 40;
				this.height = 30;
				this.aiStyle = 1;
				this.damage = 55;
				this.defense = 20;
				this.lifeMax = 170;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.alpha = 55;
				this.value = 400f;
				this.scale = 1.1f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 82)
			{
				this.noGravity = true;
				this.noTileCollide = true;
				this.name = "Wraith";
				this.width = 24;
				this.height = 44;
				this.aiStyle = 22;
				this.damage = 65;
				this.defense = 16;
				this.lifeMax = 160;
				this.HitSound = SoundID.NPCHit54;
				this.DeathSound = SoundID.NPCDeath52;
				this.alpha = 100;
				this.value = 500f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.knockBackResist = 0.7f;
			}
			else if (this.type == 83)
			{
				this.name = "Cursed Hammer";
				this.width = 40;
				this.height = 40;
				this.aiStyle = 23;
				this.damage = 80;
				this.defense = 18;
				this.lifeMax = 200;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = SoundID.NPCDeath6;
				this.value = 1000f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.knockBackResist = 0.4f;
			}
			else if (this.type == 84)
			{
				this.name = "Enchanted Sword";
				this.width = 40;
				this.height = 40;
				this.aiStyle = 23;
				this.damage = 80;
				this.defense = 18;
				this.lifeMax = 200;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = SoundID.NPCDeath6;
				this.value = 1000f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.knockBackResist = 0.4f;
			}
			else if (this.type == 85)
			{
				this.name = "Mimic";
				this.width = 24;
				this.height = 24;
				this.aiStyle = 25;
				this.damage = 80;
				this.defense = 30;
				this.lifeMax = 500;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = SoundID.NPCDeath6;
				this.value = 100000f;
				this.knockBackResist = 0.3f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.rarity = 4;
			}
			else if (this.type == 86)
			{
				this.name = "Unicorn";
				this.width = 46;
				this.height = 42;
				this.aiStyle = 26;
				this.damage = 65;
				this.defense = 30;
				this.lifeMax = 400;
				this.HitSound = SoundID.NPCHit12;
				this.DeathSound = SoundID.NPCDeath18;
				this.knockBackResist = 0.3f;
				this.value = 1000f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 87)
			{
				this.displayName = "Wyvern";
				this.noTileCollide = true;
				this.npcSlots = 5f;
				this.name = "Wyvern Head";
				this.width = 32;
				this.height = 32;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 80;
				this.defense = 10;
				this.lifeMax = 4000;
				this.HitSound = SoundID.NPCHit7;
				this.DeathSound = SoundID.NPCDeath8;
				this.noGravity = true;
				this.knockBackResist = 0f;
				this.value = 10000f;
				this.scale = 1f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
			}
			else if (this.type == 88)
			{
				this.displayName = "Wyvern";
				this.noTileCollide = true;
				this.name = "Wyvern Legs";
				this.width = 32;
				this.height = 32;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 40;
				this.defense = 20;
				this.lifeMax = 4000;
				this.HitSound = SoundID.NPCHit7;
				this.DeathSound = SoundID.NPCDeath8;
				this.noGravity = true;
				this.knockBackResist = 0f;
				this.value = 10000f;
				this.scale = 1f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.dontCountMe = true;
			}
			else if (this.type == 89)
			{
				this.displayName = "Wyvern";
				this.noTileCollide = true;
				this.name = "Wyvern Body";
				this.width = 32;
				this.height = 32;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 40;
				this.defense = 20;
				this.lifeMax = 4000;
				this.HitSound = SoundID.NPCHit7;
				this.DeathSound = SoundID.NPCDeath8;
				this.noGravity = true;
				this.knockBackResist = 0f;
				this.value = 2000f;
				this.scale = 1f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.dontCountMe = true;
			}
			else if (this.type == 90)
			{
				this.displayName = "Wyvern";
				this.noTileCollide = true;
				this.name = "Wyvern Body 2";
				this.width = 32;
				this.height = 32;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 40;
				this.defense = 20;
				this.lifeMax = 4000;
				this.HitSound = SoundID.NPCHit7;
				this.DeathSound = SoundID.NPCDeath8;
				this.noGravity = true;
				this.knockBackResist = 0f;
				this.value = 10000f;
				this.scale = 1f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.dontCountMe = true;
			}
			else if (this.type == 91)
			{
				this.displayName = "Wyvern";
				this.noTileCollide = true;
				this.name = "Wyvern Body 3";
				this.width = 32;
				this.height = 32;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 40;
				this.defense = 20;
				this.lifeMax = 4000;
				this.HitSound = SoundID.NPCHit7;
				this.DeathSound = SoundID.NPCDeath8;
				this.noGravity = true;
				this.knockBackResist = 0f;
				this.value = 10000f;
				this.scale = 1f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.dontCountMe = true;
			}
			else if (this.type == 92)
			{
				this.displayName = "Wyvern";
				this.noTileCollide = true;
				this.name = "Wyvern Tail";
				this.width = 32;
				this.height = 32;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 40;
				this.defense = 20;
				this.lifeMax = 4000;
				this.HitSound = SoundID.NPCHit7;
				this.DeathSound = SoundID.NPCDeath8;
				this.noGravity = true;
				this.knockBackResist = 0f;
				this.value = 10000f;
				this.scale = 1f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.dontCountMe = true;
			}
			else if (this.type == 93)
			{
				this.npcSlots = 0.5f;
				this.name = "Giant Bat";
				this.width = 26;
				this.height = 20;
				this.aiStyle = 14;
				this.damage = 45;
				this.defense = 16;
				this.lifeMax = 100;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.75f;
				this.DeathSound = SoundID.NPCDeath4;
				this.value = 400f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 94)
			{
				this.npcSlots = 1f;
				this.name = "Corruptor";
				this.width = 44;
				this.height = 44;
				this.aiStyle = 5;
				this.damage = 60;
				this.defense = 32;
				this.lifeMax = 230;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.knockBackResist = 0.55f;
				this.value = 500f;
			}
			else if (this.type == 95)
			{
				this.displayName = "Digger";
				this.name = "Digger Head";
				this.width = 22;
				this.height = 22;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 45;
				this.defense = 10;
				this.lifeMax = 200;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
				this.scale = 0.9f;
				this.value = 300f;
			}
			else if (this.type == 96)
			{
				this.displayName = "Digger";
				this.name = "Digger Body";
				this.width = 22;
				this.height = 22;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 28;
				this.defense = 20;
				this.lifeMax = 200;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
				this.scale = 0.9f;
				this.value = 300f;
				this.dontCountMe = true;
			}
			else if (this.type == 97)
			{
				this.displayName = "Digger";
				this.name = "Digger Tail";
				this.width = 22;
				this.height = 22;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 26;
				this.defense = 30;
				this.lifeMax = 200;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
				this.scale = 0.9f;
				this.value = 300f;
				this.dontCountMe = true;
			}
			else if (this.type == 98)
			{
				this.displayName = "World Feeder";
				this.npcSlots = 3.5f;
				this.name = "Seeker Head";
				this.width = 22;
				this.height = 22;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 70;
				this.defense = 36;
				this.lifeMax = 500;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
				this.value = 700f;
			}
			else if (this.type == 99)
			{
				this.displayName = "World Feeder";
				this.name = "Seeker Body";
				this.width = 22;
				this.height = 22;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 55;
				this.defense = 40;
				this.lifeMax = 500;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
				this.value = 700f;
				this.dontCountMe = true;
			}
			else if (this.type == 100)
			{
				this.displayName = "World Feeder";
				this.name = "Seeker Tail";
				this.width = 22;
				this.height = 22;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 40;
				this.defense = 44;
				this.lifeMax = 500;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
				this.value = 700f;
				this.dontCountMe = true;
			}
			else if (this.type == 101)
			{
				this.noGravity = true;
				this.noTileCollide = true;
				this.behindTiles = true;
				this.name = "Clinger";
				this.width = 30;
				this.height = 30;
				this.aiStyle = 13;
				this.damage = 70;
				this.defense = 30;
				this.lifeMax = 320;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.2f;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 600f;
			}
			else if (this.type == 102)
			{
				this.npcSlots = 0.5f;
				this.noGravity = true;
				this.name = "Angler Fish";
				this.width = 18;
				this.height = 20;
				this.aiStyle = 16;
				this.damage = 80;
				this.defense = 22;
				this.lifeMax = 90;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 500f;
			}
			else if (this.type == 103)
			{
				this.noGravity = true;
				this.name = "Green Jellyfish";
				this.width = 26;
				this.height = 26;
				this.aiStyle = 18;
				this.damage = 80;
				this.defense = 30;
				this.lifeMax = 120;
				this.HitSound = SoundID.NPCHit25;
				this.DeathSound = SoundID.NPCDeath28;
				this.value = 800f;
				this.alpha = 20;
			}
			else if (this.type == 104)
			{
				this.name = "Werewolf";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 70;
				this.defense = 38;
				this.lifeMax = 350;
				this.HitSound = SoundID.NPCHit6;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.4f;
				this.value = 1000f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 105)
			{
				this.friendly = true;
				this.name = "Bound Goblin";
				this.width = 18;
				this.height = 34;
				this.aiStyle = 0;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
				this.scale = 0.9f;
				this.rarity = 1;
			}
			else if (this.type == 106)
			{
				this.friendly = true;
				this.name = "Bound Wizard";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 0;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
				this.rarity = 1;
			}
			else if (this.type == 107)
			{
				this.townNPC = true;
				this.friendly = true;
				this.name = "Goblin Tinkerer";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 7;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
				this.scale = 0.9f;
			}
			else if (this.type == 108)
			{
				this.townNPC = true;
				this.friendly = true;
				this.name = "Wizard";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 7;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
			}
			else if (this.type == 109)
			{
				this.name = "Clown";
				this.width = 34;
				this.height = 78;
				this.aiStyle = 3;
				this.damage = 50;
				this.defense = 20;
				this.lifeMax = 400;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.4f;
				this.value = 8000f;
			}
			else if (this.type == 110)
			{
				this.name = "Skeleton Archer";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 45;
				this.defense = 14;
				this.lifeMax = 210;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.55f;
				this.value = 400f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 112)
			{
				this.name = "Vile Spit";
				this.width = 16;
				this.height = 16;
				this.aiStyle = 9;
				this.damage = 65;
				this.defense = 0;
				this.lifeMax = 1;
				this.HitSound = null;
				this.DeathSound = SoundID.NPCDeath9;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.scale = 0.9f;
				this.alpha = 80;
			}
			else if (this.type == 113)
			{
				this.npcSlots = 10f;
				this.name = "Wall of Flesh";
				this.width = 100;
				this.height = 100;
				this.aiStyle = 27;
				this.damage = 50;
				this.defense = 12;
				this.lifeMax = 8000;
				this.HitSound = SoundID.NPCHit8;
				this.DeathSound = SoundID.NPCDeath10;
				this.noGravity = true;
				this.noTileCollide = true;
				this.behindTiles = true;
				this.knockBackResist = 0f;
				this.scale = 1.2f;
				this.boss = true;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.value = 80000f;
			}
			else if (this.type == 114)
			{
				this.name = "Wall of Flesh Eye";
				this.displayName = "Wall of Flesh";
				this.width = 100;
				this.height = 100;
				this.aiStyle = 28;
				this.damage = 50;
				this.defense = 0;
				this.lifeMax = 8000;
				this.HitSound = SoundID.NPCHit8;
				this.DeathSound = SoundID.NPCDeath10;
				this.noGravity = true;
				this.noTileCollide = true;
				this.behindTiles = true;
				this.knockBackResist = 0f;
				this.scale = 1.2f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.value = 80000f;
			}
			else if (this.type == 115)
			{
				this.name = "The Hungry";
				this.width = 30;
				this.height = 30;
				this.aiStyle = 29;
				this.damage = 30;
				this.defense = 10;
				this.lifeMax = 240;
				this.HitSound = SoundID.NPCHit9;
				this.DeathSound = SoundID.NPCDeath11;
				this.noGravity = true;
				this.behindTiles = true;
				this.noTileCollide = true;
				this.knockBackResist = 1.1f;
			}
			else if (this.type == 116)
			{
				this.name = "The Hungry II";
				this.displayName = "The Hungry";
				this.width = 30;
				this.height = 32;
				this.aiStyle = 2;
				this.damage = 30;
				this.defense = 6;
				this.lifeMax = 80;
				this.HitSound = SoundID.NPCHit9;
				this.knockBackResist = 0.8f;
				this.DeathSound = SoundID.NPCDeath12;
			}
			else if (this.type == 117)
			{
				this.displayName = "Leech";
				this.name = "Leech Head";
				this.width = 14;
				this.height = 14;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 26;
				this.defense = 2;
				this.lifeMax = 60;
				this.HitSound = SoundID.NPCHit9;
				this.DeathSound = SoundID.NPCDeath12;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
			}
			else if (this.type == 118)
			{
				this.displayName = "Leech";
				this.name = "Leech Body";
				this.width = 14;
				this.height = 14;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 22;
				this.defense = 6;
				this.lifeMax = 60;
				this.HitSound = SoundID.NPCHit9;
				this.DeathSound = SoundID.NPCDeath12;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
			}
			else if (this.type == 119)
			{
				this.displayName = "Leech";
				this.name = "Leech Tail";
				this.width = 14;
				this.height = 14;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 18;
				this.defense = 10;
				this.lifeMax = 60;
				this.HitSound = SoundID.NPCHit9;
				this.DeathSound = SoundID.NPCDeath12;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
			}
			else if (this.type == 120)
			{
				this.name = "Chaos Elemental";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 40;
				this.defense = 30;
				this.lifeMax = 370;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath6;
				this.knockBackResist = 0.4f;
				this.value = 600f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 121)
			{
				this.name = "Slimer";
				this.width = 40;
				this.height = 30;
				this.aiStyle = 14;
				this.damage = 45;
				this.defense = 20;
				this.lifeMax = 60;
				this.HitSound = SoundID.NPCHit1;
				this.alpha = 55;
				this.knockBackResist = 0.8f;
				this.scale = 1.1f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 122)
			{
				this.noGravity = true;
				this.name = "Gastropod";
				this.width = 20;
				this.height = 20;
				this.aiStyle = 22;
				this.damage = 60;
				this.defense = 22;
				this.lifeMax = 220;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.8f;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 600f;
				this.buffImmune[20] = true;
			}
			else if (this.type == 123)
			{
				this.friendly = true;
				this.name = "Bound Mechanic";
				this.width = 18;
				this.height = 34;
				this.aiStyle = 0;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
				this.scale = 0.9f;
				this.rarity = 1;
			}
			else if (this.type == 124)
			{
				this.townNPC = true;
				this.friendly = true;
				this.name = "Mechanic";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 7;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
			}
			else if (this.type == 125)
			{
				this.name = "Retinazer";
				this.width = 100;
				this.height = 110;
				this.aiStyle = 30;
				this.defense = 10;
				this.damage = 45;
				this.lifeMax = 20000;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath14;
				this.knockBackResist = 0f;
				this.noGravity = true;
				this.noTileCollide = true;
				this.timeLeft = NPC.activeTime * 30;
				this.boss = true;
				this.value = 120000f;
				this.npcSlots = 5f;
			}
			else if (this.type == 126)
			{
				this.name = "Spazmatism";
				this.width = 100;
				this.height = 110;
				this.aiStyle = 31;
				this.defense = 10;
				this.damage = 50;
				this.lifeMax = 23000;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath14;
				this.knockBackResist = 0f;
				this.noGravity = true;
				this.noTileCollide = true;
				this.timeLeft = NPC.activeTime * 30;
				this.boss = true;
				this.value = 120000f;
				this.npcSlots = 5f;
			}
			else if (this.type == 127)
			{
				this.name = "Skeletron Prime";
				this.width = 80;
				this.height = 102;
				this.aiStyle = 32;
				this.damage = 47;
				this.defense = 24;
				this.lifeMax = 28000;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = SoundID.NPCDeath14;
				this.noGravity = true;
				this.noTileCollide = true;
				this.value = 120000f;
				this.knockBackResist = 0f;
				this.boss = true;
				this.npcSlots = 6f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.buffImmune[189] = (this.buffImmune[169] = (this.buffImmune[183] = true));
				this.boss = true;
			}
			else if (this.type == 128)
			{
				this.name = "Prime Cannon";
				this.width = 52;
				this.height = 52;
				this.aiStyle = 35;
				this.damage = 30;
				this.defense = 23;
				this.lifeMax = 7000;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = SoundID.NPCDeath14;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.netAlways = true;
			}
			else if (this.type == 129)
			{
				this.name = "Prime Saw";
				this.width = 52;
				this.height = 52;
				this.aiStyle = 33;
				this.damage = 56;
				this.defense = 38;
				this.lifeMax = 9000;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = SoundID.NPCDeath14;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.netAlways = true;
			}
			else if (this.type == 130)
			{
				this.name = "Prime Vice";
				this.width = 52;
				this.height = 52;
				this.aiStyle = 34;
				this.damage = 52;
				this.defense = 34;
				this.lifeMax = 9000;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = SoundID.NPCDeath14;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.netAlways = true;
			}
			else if (this.type == 131)
			{
				this.name = "Prime Laser";
				this.width = 52;
				this.height = 52;
				this.aiStyle = 36;
				this.damage = 29;
				this.defense = 20;
				this.lifeMax = 6000;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = SoundID.NPCDeath14;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.netAlways = true;
			}
			else if (this.type == 132)
			{
				this.displayName = "Zombie";
				this.name = "Bald Zombie";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 15;
				this.defense = 5;
				this.lifeMax = 40;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.5f;
				this.value = 65f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 133)
			{
				this.name = "Wandering Eye";
				this.width = 30;
				this.height = 32;
				this.aiStyle = 2;
				this.damage = 40;
				this.defense = 20;
				this.lifeMax = 300;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.8f;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 500f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 134)
			{
				this.displayName = "The Destroyer";
				this.npcSlots = 5f;
				this.name = "The Destroyer";
				this.width = 38;
				this.height = 38;
				this.aiStyle = 37;
				this.defense = 0;
				this.damage = 70;
				this.lifeMax = 80000;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = SoundID.NPCDeath14;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
				this.value = 120000f;
				this.scale = 1.25f;
				this.boss = true;
				this.netAlways = true;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				flag = true;
				this.alpha = 255;
			}
			else if (this.type == 135)
			{
				this.displayName = "The Destroyer";
				this.npcSlots = 5f;
				this.name = "The Destroyer Body";
				this.width = 38;
				this.height = 38;
				this.aiStyle = 37;
				this.damage = 55;
				this.defense = 30;
				this.lifeMax = 80000;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = SoundID.NPCDeath14;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
				this.netAlways = true;
				this.scale = 1.25f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				flag = true;
				this.dontCountMe = true;
				this.alpha = 255;
			}
			else if (this.type == 136)
			{
				this.displayName = "The Destroyer";
				this.npcSlots = 5f;
				this.name = "The Destroyer Tail";
				this.width = 38;
				this.height = 38;
				this.aiStyle = 37;
				this.damage = 40;
				this.defense = 35;
				this.lifeMax = 80000;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = SoundID.NPCDeath14;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
				this.scale = 1.25f;
				this.netAlways = true;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				flag = true;
				this.dontCountMe = true;
				this.alpha = 255;
			}
			else if (this.type == 139)
			{
				this.npcSlots = 1f;
				this.name = "Probe";
				this.width = 30;
				this.height = 30;
				this.aiStyle = 5;
				this.damage = 50;
				this.defense = 20;
				this.lifeMax = 200;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = SoundID.NPCDeath14;
				this.noGravity = true;
				this.knockBackResist = 0.8f;
				this.noTileCollide = true;
				flag = true;
			}
			else if (this.type == 137)
			{
				this.name = "Illuminant Bat";
				this.width = 26;
				this.height = 20;
				this.aiStyle = 14;
				this.damage = 75;
				this.defense = 30;
				this.lifeMax = 200;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.75f;
				this.DeathSound = SoundID.NPCDeath6;
				this.value = 500f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 138)
			{
				this.name = "Illuminant Slime";
				this.width = 24;
				this.height = 18;
				this.aiStyle = 1;
				this.damage = 70;
				this.defense = 30;
				this.lifeMax = 180;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath6;
				this.alpha = 100;
				this.value = 400f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.knockBackResist = 0.85f;
				this.scale = 1.05f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 140)
			{
				this.name = "Possessed Armor";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 55;
				this.defense = 28;
				this.lifeMax = 260;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = SoundID.NPCDeath6;
				this.knockBackResist = 0.4f;
				this.value = 400f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
				this.buffImmune[24] = true;
			}
			else if (this.type == 141)
			{
				this.name = "Toxic Sludge";
				this.width = 34;
				this.height = 28;
				this.aiStyle = 1;
				this.damage = 50;
				this.defense = 18;
				this.lifeMax = 150;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.alpha = 55;
				this.value = 400f;
				this.scale = 1.1f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
				this.knockBackResist = 0.8f;
			}
			else if (this.type == 142)
			{
				this.townNPC = true;
				this.friendly = true;
				this.name = "Santa Claus";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 7;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
			}
			else if (this.type == 143)
			{
				this.name = "Snowman Gangsta";
				this.width = 26;
				this.height = 40;
				this.aiStyle = 38;
				this.damage = 50;
				this.defense = 20;
				this.lifeMax = 200;
				this.HitSound = SoundID.NPCHit11;
				this.DeathSound = SoundID.NPCDeath15;
				this.knockBackResist = 0.6f;
				this.value = 400f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
			}
			else if (this.type == 144)
			{
				this.name = "Mister Stabby";
				this.width = 26;
				this.height = 40;
				this.aiStyle = 38;
				this.damage = 65;
				this.defense = 26;
				this.lifeMax = 240;
				this.HitSound = SoundID.NPCHit11;
				this.DeathSound = SoundID.NPCDeath15;
				this.knockBackResist = 0.6f;
				this.value = 400f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.coldDamage = true;
			}
			else if (this.type == 145)
			{
				this.name = "Snow Balla";
				this.width = 26;
				this.height = 40;
				this.aiStyle = 38;
				this.damage = 55;
				this.defense = 22;
				this.lifeMax = 220;
				this.HitSound = SoundID.NPCHit11;
				this.DeathSound = SoundID.NPCDeath15;
				this.knockBackResist = 0.6f;
				this.value = 400f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.coldDamage = true;
			}
			else if (this.type == 147)
			{
				this.name = "Ice Slime";
				this.width = 24;
				this.height = 18;
				this.aiStyle = 1;
				this.damage = 8;
				this.defense = 4;
				this.lifeMax = 30;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.alpha = 50;
				this.value = 50f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
				this.coldDamage = true;
			}
			else if (this.type == 148)
			{
				this.name = "Penguin";
				this.width = 16;
				this.height = 34;
				this.aiStyle = 7;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.catchItem = 2205;
			}
			else if (this.type == 149)
			{
				this.name = "Penguin";
				this.width = 16;
				this.height = 34;
				this.aiStyle = 7;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.catchItem = 2205;
			}
			else if (this.type == 150)
			{
				this.npcSlots = 0.5f;
				this.name = "Ice Bat";
				this.width = 22;
				this.height = 22;
				this.aiStyle = 14;
				this.damage = 18;
				this.defense = 6;
				this.lifeMax = 30;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.8f;
				this.DeathSound = SoundID.NPCDeath4;
				this.value = 250f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 151)
			{
				this.npcSlots = 0.5f;
				this.name = "Lava bat";
				this.width = 22;
				this.height = 22;
				this.aiStyle = 14;
				this.damage = 50;
				this.defense = 16;
				this.lifeMax = 160;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.6f;
				this.DeathSound = SoundID.NPCDeath4;
				this.value = 400f;
				this.scale = 1.15f;
				this.lavaImmune = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 152)
			{
				this.npcSlots = 0.5f;
				this.name = "Giant Flying Fox";
				this.width = 38;
				this.height = 34;
				this.aiStyle = 14;
				this.damage = 80;
				this.defense = 24;
				this.lifeMax = 220;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.65f;
				this.DeathSound = SoundID.NPCDeath4;
				this.value = 400f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 153)
			{
				this.npcSlots = 2f;
				this.name = "Giant Tortoise";
				this.width = 46;
				this.height = 32;
				this.aiStyle = 39;
				this.damage = 80;
				this.defense = 30;
				this.lifeMax = 470;
				this.HitSound = SoundID.NPCHit24;
				this.knockBackResist = 0.3f;
				this.DeathSound = SoundID.NPCDeath27;
				this.value = 500f;
				this.noGravity = false;
				this.buffImmune[31] = false;
			}
			else if (this.type == 154)
			{
				this.npcSlots = 1.5f;
				this.name = "Ice Tortoise";
				this.width = 46;
				this.height = 32;
				this.aiStyle = 39;
				this.damage = 55;
				this.defense = 28;
				this.lifeMax = 400;
				this.HitSound = SoundID.NPCHit24;
				this.knockBackResist = 0.3f;
				this.DeathSound = SoundID.NPCDeath27;
				this.value = 450f;
				this.noGravity = false;
				this.buffImmune[31] = false;
			}
			else if (this.type == 155)
			{
				this.name = "Wolf";
				this.width = 46;
				this.height = 30;
				this.aiStyle = 26;
				this.damage = 65;
				this.defense = 30;
				this.lifeMax = 300;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.3f;
				this.value = 1000f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 156)
			{
				this.npcSlots = 2f;
				this.name = "Red Devil";
				this.width = 28;
				this.height = 48;
				this.aiStyle = 14;
				this.damage = 50;
				this.defense = 40;
				this.lifeMax = 600;
				this.HitSound = SoundID.NPCHit21;
				this.knockBackResist = 0.5f;
				this.DeathSound = SoundID.NPCDeath24;
				this.value = 1200f;
				this.lavaImmune = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
			}
			else if (this.type == 157)
			{
				this.npcSlots = 0.5f;
				this.noGravity = true;
				this.name = "Arapaima";
				this.width = 74;
				this.height = 20;
				this.aiStyle = 16;
				this.damage = 75;
				this.defense = 30;
				this.lifeMax = 200;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 500f;
			}
			else if (this.type == 160)
			{
				this.townNPC = true;
				this.friendly = true;
				this.name = "Truffle";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 7;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
			}
			else if (this.type == 161)
			{
				this.name = "Zombie Eskimo";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 16;
				this.defense = 8;
				this.lifeMax = 50;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.45f;
				this.value = 80f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 163)
			{
				this.name = "Black Recluse";
				this.width = 50;
				this.height = 20;
				this.aiStyle = 3;
				this.damage = 90;
				this.defense = 40;
				this.lifeMax = 350;
				this.HitSound = SoundID.NPCHit29;
				this.DeathSound = SoundID.NPCDeath31;
				this.knockBackResist = 0.25f;
				this.value = 500f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
				this.npcSlots = 0.5f;
				this.timeLeft = NPC.activeTime * 2;
			}
			else if (this.type == 238)
			{
				this.noGravity = true;
				this.name = "Black Recluse";
				this.width = 36;
				this.height = 36;
				this.aiStyle = 40;
				this.damage = 100;
				this.defense = 40;
				this.lifeMax = 350;
				this.HitSound = SoundID.NPCHit29;
				this.DeathSound = SoundID.NPCDeath31;
				this.knockBackResist = 0.25f;
				this.value = 500f;
				this.timeLeft = NPC.activeTime * 2;
				this.npcSlots = 0.5f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 164)
			{
				this.name = "Wall Creeper";
				this.width = 50;
				this.height = 20;
				this.aiStyle = 3;
				this.damage = 30;
				this.defense = 10;
				this.lifeMax = 80;
				this.HitSound = SoundID.NPCHit29;
				this.DeathSound = SoundID.NPCDeath31;
				this.knockBackResist = 0.25f;
				this.value = 100f;
				this.timeLeft = NPC.activeTime * 2;
				this.npcSlots = 0.5f;
				this.buffImmune[20] = true;
			}
			else if (this.type == 165)
			{
				this.noGravity = true;
				this.name = "Wall Creeper";
				this.width = 36;
				this.height = 36;
				this.aiStyle = 40;
				this.damage = 30;
				this.defense = 10;
				this.lifeMax = 80;
				this.HitSound = SoundID.NPCHit29;
				this.DeathSound = SoundID.NPCDeath31;
				this.knockBackResist = 0.25f;
				this.value = 100f;
				this.timeLeft = NPC.activeTime * 2;
				this.npcSlots = 0.5f;
				this.buffImmune[20] = true;
			}
			else if (this.type == 167)
			{
				this.name = "Undead Viking";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 24;
				this.defense = 10;
				this.lifeMax = 70;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.5f;
				this.value = 200f;
				this.buffImmune[31] = false;
				this.buffImmune[20] = true;
			}
			else if (this.type == 168)
			{
				this.name = "Corrupt Penguin";
				this.width = 16;
				this.height = 34;
				this.aiStyle = 3;
				this.damage = 20;
				this.defense = 4;
				this.lifeMax = 70;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 500f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 169)
			{
				this.noGravity = true;
				this.name = "Ice Elemental";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 22;
				this.damage = 55;
				this.defense = 20;
				this.lifeMax = 200;
				this.HitSound = SoundID.NPCHit5;
				this.knockBackResist = 0.6f;
				this.DeathSound = SoundID.NPCDeath7;
				this.value = 1500f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.buffImmune[31] = false;
				this.buffImmune[44] = true;
				this.coldDamage = true;
			}
			else if (this.type == 170)
			{
				this.name = "Pigron";
				this.width = 44;
				this.height = 36;
				this.aiStyle = 2;
				this.damage = 70;
				this.defense = 16;
				this.lifeMax = 210;
				this.HitSound = SoundID.NPCHit27;
				this.DeathSound = SoundID.NPCDeath30;
				this.knockBackResist = 0.5f;
				this.value = 2000f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 171)
			{
				this.name = "Pigron";
				this.width = 44;
				this.height = 36;
				this.aiStyle = 2;
				this.damage = 70;
				this.defense = 16;
				this.lifeMax = 210;
				this.HitSound = SoundID.NPCHit27;
				this.DeathSound = SoundID.NPCDeath30;
				this.knockBackResist = 0.5f;
				this.value = 2000f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 172)
			{
				this.name = "Rune Wizard";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 8;
				this.damage = 200;
				this.defense = 30;
				this.lifeMax = 600;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.3f;
				this.value = 5000f;
				this.buffImmune[20] = true;
				this.rarity = 2;
			}
			else if (this.type == 173)
			{
				this.npcSlots = 1f;
				this.name = "Crimera";
				this.width = 30;
				this.height = 30;
				this.aiStyle = 5;
				this.damage = 22;
				this.defense = 8;
				this.lifeMax = 40;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.knockBackResist = 0.5f;
				this.value = 90f;
			}
			else if (this.type == 174)
			{
				this.npcSlots = 1f;
				this.name = "Herpling";
				this.width = 52;
				this.height = 26;
				this.aiStyle = 41;
				this.damage = 65;
				this.defense = 26;
				this.lifeMax = 220;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.3f;
				this.value = 450f;
			}
			else if (this.type == 175)
			{
				this.noGravity = true;
				this.noTileCollide = true;
				this.name = "Angry Trapper";
				this.width = 30;
				this.height = 30;
				this.aiStyle = 13;
				this.damage = 100;
				this.defense = 30;
				this.lifeMax = 300;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.25f;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 650f;
				this.buffImmune[20] = true;
			}
			else if (this.type == 176)
			{
				this.name = "Moss Hornet";
				this.width = 34;
				this.height = 32;
				this.aiStyle = 5;
				this.damage = 70;
				this.defense = 22;
				this.lifeMax = 220;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.5f;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 600f;
				this.noGravity = true;
				this.buffImmune[20] = true;
				this.npcSlots = 1.5f;
			}
			else if (this.type == 177)
			{
				this.npcSlots = 1f;
				this.name = "Derpling";
				this.width = 58;
				this.height = 44;
				this.aiStyle = 41;
				this.damage = 80;
				this.defense = 26;
				this.lifeMax = 300;
				this.HitSound = SoundID.NPCHit22;
				this.DeathSound = SoundID.NPCDeath25;
				this.knockBackResist = 0.5f;
				this.value = 500f;
			}
			else if (this.type == 178)
			{
				this.townNPC = true;
				this.friendly = true;
				this.name = "Steampunker";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 7;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
			}
			else if (this.type == 179)
			{
				this.name = "Crimson Axe";
				this.width = 40;
				this.height = 40;
				this.aiStyle = 23;
				this.damage = 80;
				this.defense = 18;
				this.lifeMax = 200;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = SoundID.NPCDeath6;
				this.value = 1000f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.knockBackResist = 0.4f;
			}
			else if (this.type == 180)
			{
				this.name = "Pigron";
				this.width = 44;
				this.height = 36;
				this.aiStyle = 2;
				this.damage = 70;
				this.defense = 16;
				this.lifeMax = 210;
				this.HitSound = SoundID.NPCHit27;
				this.DeathSound = SoundID.NPCDeath30;
				this.knockBackResist = 0.5f;
				this.value = 4000f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 181)
			{
				this.name = "Face Monster";
				this.width = 18;
				this.height = 44;
				this.aiStyle = 3;
				this.damage = 25;
				this.defense = 10;
				this.lifeMax = 70;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.4f;
				this.value = 200f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 182)
			{
				this.noGravity = true;
				this.noTileCollide = true;
				this.name = "Floaty Gross";
				this.width = 24;
				this.height = 62;
				this.aiStyle = 22;
				this.damage = 65;
				this.defense = 18;
				this.lifeMax = 240;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.alpha = 100;
				this.value = 500f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.knockBackResist = 0.7f;
			}
			else if (this.type == 183)
			{
				this.name = "Crimslime";
				this.width = 40;
				this.height = 30;
				this.aiStyle = 1;
				this.damage = 60;
				this.defense = 26;
				this.lifeMax = 200;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.alpha = 55;
				this.value = 400f;
				this.scale = 1.1f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 184)
			{
				this.name = "Spiked Ice Slime";
				this.width = 24;
				this.height = 18;
				this.aiStyle = 1;
				this.damage = 12;
				this.defense = 8;
				this.lifeMax = 60;
				this.scale = 1.1f;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.alpha = 50;
				this.value = 200f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
				this.coldDamage = true;
			}
			else if (this.type == 185)
			{
				this.name = "Snow Flinx";
				this.width = 28;
				this.height = 28;
				this.aiStyle = 3;
				this.damage = 26;
				this.defense = 12;
				this.lifeMax = 70;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 1.1f;
				this.value = 200f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
				this.coldDamage = true;
			}
			else if (this.type == 186)
			{
				this.name = "Pincushion Zombie";
				this.displayName = "Zombie";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 16;
				this.defense = 8;
				this.lifeMax = 50;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.45f;
				this.value = 65f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 187)
			{
				this.name = "Slimed Zombie";
				this.displayName = "Zombie";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 13;
				this.defense = 6;
				this.lifeMax = 40;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.55f;
				this.value = 55f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 188)
			{
				this.name = "Swamp Zombie";
				this.displayName = "Zombie";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 13;
				this.defense = 8;
				this.lifeMax = 45;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.45f;
				this.value = 80f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 189)
			{
				this.name = "Twiggy Zombie";
				this.displayName = "Zombie";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 16;
				this.defense = 4;
				this.lifeMax = 45;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.55f;
				this.value = 70f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 190)
			{
				this.name = "Cataract Eye";
				this.displayName = "Demon Eye";
				this.width = 30;
				this.height = 32;
				this.aiStyle = 2;
				this.damage = 18;
				this.defense = 4;
				this.lifeMax = 65;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.7f;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 75f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 191)
			{
				this.name = "Sleepy Eye";
				this.displayName = "Demon Eye";
				this.width = 30;
				this.height = 32;
				this.aiStyle = 2;
				this.damage = 16;
				this.defense = 2;
				this.lifeMax = 60;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.85f;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 75f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 192)
			{
				this.name = "Dialated Eye";
				this.displayName = "Demon Eye";
				this.width = 30;
				this.height = 32;
				this.aiStyle = 2;
				this.damage = 18;
				this.defense = 2;
				this.lifeMax = 50;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.8f;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 75f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 193)
			{
				this.name = "Green Eye";
				this.displayName = "Demon Eye";
				this.width = 30;
				this.height = 32;
				this.aiStyle = 2;
				this.damage = 20;
				this.defense = 0;
				this.lifeMax = 60;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.8f;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 75f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 194)
			{
				this.name = "Purple Eye";
				this.displayName = "Demon Eye";
				this.width = 30;
				this.height = 32;
				this.aiStyle = 2;
				this.damage = 14;
				this.defense = 4;
				this.lifeMax = 60;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.8f;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 75f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 195)
			{
				this.name = "Lost Girl";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 42;
				this.damage = 10;
				this.defense = 30;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
				this.rarity = 1;
			}
			else if (this.type == 196)
			{
				this.name = "Nymph";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 35;
				this.defense = 16;
				this.lifeMax = 300;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.4f;
				this.value = 10000f;
				this.buffImmune[31] = false;
				this.rarity = 1;
			}
			else if (this.type == 197)
			{
				this.name = "Armored Viking";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 50;
				this.defense = 28;
				this.lifeMax = 280;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.45f;
				this.value = 500f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 198)
			{
				this.name = "Lihzahrd";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 38;
				this.defense = 20;
				this.lifeMax = 400;
				this.HitSound = SoundID.NPCHit26;
				this.DeathSound = SoundID.NPCDeath29;
				this.knockBackResist = 0.4f;
				this.value = 650f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 199)
			{
				this.name = "Lihzahrd";
				this.width = 42;
				this.height = 30;
				this.aiStyle = 3;
				this.damage = 60;
				this.defense = 30;
				this.lifeMax = 400;
				this.HitSound = SoundID.NPCHit26;
				this.DeathSound = SoundID.NPCDeath29;
				this.knockBackResist = 0f;
				this.value = 650f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 200)
			{
				this.name = "Female Zombie";
				this.displayName = "Zombie";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 12;
				this.defense = 4;
				this.lifeMax = 38;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.6f;
				this.value = 65f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 201)
			{
				this.name = "Headache Skeleton";
				this.displayName = "Skeleton";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 20;
				this.defense = 12;
				this.lifeMax = 55;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.5f;
				this.value = 130f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 202)
			{
				this.name = "Misassembled Skeleton";
				this.displayName = "Skeleton";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 18;
				this.defense = 8;
				this.lifeMax = 65;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.5f;
				this.value = 120f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 203)
			{
				this.name = "Pantless Skeleton";
				this.displayName = "Skeleton";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 22;
				this.defense = 8;
				this.lifeMax = 60;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.5f;
				this.value = 110f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 204)
			{
				this.name = "Spiked Jungle Slime";
				this.width = 24;
				this.height = 18;
				this.aiStyle = 1;
				this.damage = 28;
				this.defense = 8;
				this.lifeMax = 65;
				this.scale = 1.15f;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.alpha = 50;
				this.value = 300f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 205)
			{
				this.name = "Moth";
				this.width = 40;
				this.height = 40;
				this.aiStyle = 5;
				this.damage = 70;
				this.defense = 28;
				this.lifeMax = 1000;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.4f;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 600f;
				this.noGravity = true;
				this.buffImmune[20] = true;
				this.rarity = 2;
			}
			else if (this.type == 206)
			{
				this.name = "Icy Merman";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 60;
				this.defense = 30;
				this.lifeMax = 280;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
				this.value = 500f;
				this.buffImmune[31] = false;
				this.coldDamage = true;
			}
			else if (this.type == 207)
			{
				this.townNPC = true;
				this.friendly = true;
				this.name = "Dye Trader";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 7;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
			}
			else if (this.type == 208)
			{
				this.townNPC = true;
				this.friendly = true;
				this.name = "Party Girl";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 7;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
			}
			else if (this.type == 209)
			{
				this.townNPC = true;
				this.friendly = true;
				this.name = "Cyborg";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 7;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
			}
			else if (this.type == 210)
			{
				this.name = "Bee";
				this.width = 12;
				this.height = 12;
				this.aiStyle = 5;
				this.damage = 20;
				this.defense = 5;
				this.lifeMax = 20;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.5f;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.buffImmune[20] = true;
			}
			else if (this.type == 211)
			{
				this.name = "Bee";
				this.width = 8;
				this.height = 8;
				this.aiStyle = 5;
				this.damage = 15;
				this.defense = 2;
				this.lifeMax = 10;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.5f;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.buffImmune[20] = true;
			}
			else if (this.type == 212)
			{
				this.name = "Pirate Deckhand";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 35;
				this.defense = 17;
				this.lifeMax = 300;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.4f;
				this.value = 700f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 213)
			{
				this.name = "Pirate Corsair";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 50;
				this.defense = 22;
				this.lifeMax = 450;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.2f;
				this.value = 1000f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 214)
			{
				this.name = "Pirate Deadeye";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 30;
				this.defense = 14;
				this.lifeMax = 225;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.3f;
				this.value = 1000f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 215)
			{
				this.name = "Pirate Crossbower";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 35;
				this.defense = 20;
				this.lifeMax = 350;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.35f;
				this.value = 1500f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 216)
			{
				this.name = "Pirate Captain";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 70;
				this.defense = 30;
				this.lifeMax = 3000;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0f;
				this.value = 50000f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = true;
			}
			else if (this.type == 217)
			{
				this.name = "Cochineal Beetle";
				this.width = 28;
				this.height = 20;
				this.aiStyle = 3;
				this.damage = 20;
				this.defense = 10;
				this.lifeMax = 40;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath16;
				this.value = 60f;
			}
			else if (this.type == 218)
			{
				this.name = "Cyan Beetle";
				this.width = 28;
				this.height = 20;
				this.aiStyle = 3;
				this.damage = 20;
				this.defense = 10;
				this.lifeMax = 40;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath16;
				this.value = 60f;
			}
			else if (this.type == 219)
			{
				this.name = "Lac Beetle";
				this.width = 28;
				this.height = 20;
				this.aiStyle = 3;
				this.damage = 20;
				this.defense = 10;
				this.lifeMax = 40;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath16;
				this.value = 60f;
			}
			else if (this.type == 220)
			{
				this.name = "Sea Snail";
				this.width = 28;
				this.height = 20;
				this.aiStyle = 3;
				this.damage = 20;
				this.defense = 10;
				this.lifeMax = 40;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 60f;
			}
			else if (this.type == 221)
			{
				this.noGravity = true;
				this.name = "Squid";
				this.width = 26;
				this.height = 26;
				this.aiStyle = 18;
				this.damage = 20;
				this.defense = 2;
				this.lifeMax = 30;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 100f;
				this.alpha = 20;
			}
			else if (this.type == 222)
			{
				this.name = "Queen Bee";
				this.width = 66;
				this.height = 66;
				this.aiStyle = 43;
				this.damage = 30;
				this.defense = 8;
				this.lifeMax = 3400;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0f;
				this.noGravity = true;
				this.noTileCollide = true;
				this.timeLeft = NPC.activeTime * 30;
				this.boss = true;
				this.value = 100000f;
				this.npcSlots = 7f;
			}
			else if (this.type == 223)
			{
				this.name = "Zombie";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 16;
				this.defense = 8;
				this.lifeMax = 50;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.45f;
				this.value = 70f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 224)
			{
				this.name = "Flying Fish";
				this.width = 32;
				this.height = 18;
				this.aiStyle = 44;
				this.damage = 9;
				this.defense = 4;
				this.lifeMax = 20;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.8f;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 90f;
				this.buffImmune[31] = false;
			}
			if (this.type == 225)
			{
				this.name = "Umbrella Slime";
				this.width = 38;
				this.height = 26;
				this.aiStyle = 1;
				this.damage = 10;
				this.defense = 5;
				this.lifeMax = 35;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.75f;
				this.value = 25f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 226)
			{
				this.npcSlots = 0.5f;
				this.name = "Flying Snake";
				this.width = 34;
				this.height = 50;
				this.aiStyle = 14;
				this.damage = 85;
				this.defense = 28;
				this.lifeMax = 260;
				this.HitSound = SoundID.NPCHit23;
				this.knockBackResist = 0.65f;
				this.DeathSound = SoundID.NPCDeath26;
				this.value = 400f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 227)
			{
				this.townNPC = true;
				this.friendly = true;
				this.name = "Painter";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 7;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
			}
			else if (this.type == 228)
			{
				this.townNPC = true;
				this.friendly = true;
				this.name = "Witch Doctor";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 7;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
			}
			else if (this.type == 229)
			{
				this.townNPC = true;
				this.friendly = true;
				this.name = "Pirate";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 7;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
			}
			else if (this.type == 230)
			{
				this.name = "Goldfish";
				this.width = 18;
				this.height = 20;
				this.aiStyle = 7;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.catchItem = 261;
			}
			else if (this.type == 231)
			{
				this.name = "Hornet Fatty";
				this.width = 34;
				this.height = 32;
				this.aiStyle = 5;
				this.damage = 22;
				this.defense = 16;
				this.lifeMax = 50;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.3f;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 200f;
				this.noGravity = true;
				this.buffImmune[20] = true;
			}
			else if (this.type == 232)
			{
				this.name = "Hornet Honey";
				this.width = 34;
				this.height = 32;
				this.aiStyle = 5;
				this.damage = 28;
				this.defense = 12;
				this.lifeMax = 42;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.6f;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 200f;
				this.noGravity = true;
				this.buffImmune[20] = true;
			}
			else if (this.type == 233)
			{
				this.name = "Hornet Leafy";
				this.width = 34;
				this.height = 32;
				this.aiStyle = 5;
				this.damage = 30;
				this.defense = 14;
				this.lifeMax = 38;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.45f;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 200f;
				this.noGravity = true;
				this.buffImmune[20] = true;
			}
			else if (this.type == 234)
			{
				this.name = "Hornet Spikey";
				this.width = 34;
				this.height = 32;
				this.aiStyle = 5;
				this.damage = 32;
				this.defense = 6;
				this.lifeMax = 42;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.55f;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 200f;
				this.noGravity = true;
				this.buffImmune[20] = true;
			}
			else if (this.type == 235)
			{
				this.name = "Hornet Stingy";
				this.width = 34;
				this.height = 32;
				this.aiStyle = 5;
				this.damage = 34;
				this.defense = 4;
				this.lifeMax = 38;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.6f;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 200f;
				this.noGravity = true;
				this.buffImmune[20] = true;
			}
			else if (this.type == 236)
			{
				this.name = "Jungle Creeper";
				this.width = 50;
				this.height = 20;
				this.aiStyle = 3;
				this.damage = 50;
				this.defense = 14;
				this.lifeMax = 120;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.25f;
				this.value = 1000f;
				this.timeLeft = NPC.activeTime * 2;
				this.npcSlots = 0.75f;
				this.buffImmune[20] = true;
			}
			else if (this.type == 237)
			{
				this.noGravity = true;
				this.name = "Jungle Creeper";
				this.width = 36;
				this.height = 36;
				this.aiStyle = 40;
				this.damage = 50;
				this.defense = 14;
				this.lifeMax = 120;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.25f;
				this.value = 1000f;
				this.timeLeft = NPC.activeTime * 2;
				this.npcSlots = 0.75f;
				this.buffImmune[20] = true;
			}
			else if (this.type == 239)
			{
				this.name = "Blood Crawler";
				this.width = 50;
				this.height = 20;
				this.aiStyle = 3;
				this.damage = 30;
				this.defense = 8;
				this.lifeMax = 60;
				this.HitSound = SoundID.NPCHit20;
				this.DeathSound = SoundID.NPCDeath23;
				this.knockBackResist = 0.5f;
				this.value = 130f;
				this.timeLeft = NPC.activeTime * 2;
				this.buffImmune[20] = true;
			}
			else if (this.type == 240)
			{
				this.noGravity = true;
				this.name = "Blood Crawler";
				this.width = 50;
				this.height = 20;
				this.aiStyle = 40;
				this.damage = 30;
				this.defense = 8;
				this.lifeMax = 60;
				this.HitSound = SoundID.NPCHit20;
				this.DeathSound = SoundID.NPCDeath23;
				this.knockBackResist = 0.5f;
				this.value = 130f;
				this.timeLeft = NPC.activeTime * 2;
				this.buffImmune[20] = true;
			}
			else if (this.type == 241)
			{
				this.npcSlots = 0.5f;
				this.noGravity = true;
				this.name = "Blood Feeder";
				this.width = 18;
				this.height = 20;
				this.aiStyle = 16;
				this.damage = 30;
				this.defense = 4;
				this.lifeMax = 20;
				this.HitSound = SoundID.NPCHit13;
				this.DeathSound = SoundID.NPCDeath19;
				this.value = 350f;
			}
			else if (this.type == 242)
			{
				this.noGravity = true;
				this.name = "Blood Jelly";
				this.width = 26;
				this.height = 26;
				this.aiStyle = 18;
				this.damage = 75;
				this.defense = 20;
				this.lifeMax = 150;
				this.HitSound = SoundID.NPCHit13;
				this.DeathSound = SoundID.NPCDeath19;
				this.value = 800f;
				this.alpha = 20;
			}
			else if (this.type == 243)
			{
				this.name = "Ice Golem";
				this.width = 30;
				this.height = 114;
				this.aiStyle = 3;
				this.damage = 60;
				this.defense = 32;
				this.lifeMax = 4000;
				this.HitSound = SoundID.NPCHit5;
				this.DeathSound = SoundID.NPCDeath7;
				this.knockBackResist = 0.05f;
				this.value = (float)Item.buyPrice(0, 1, 50, 0);
				this.buffImmune[20] = true;
				this.buffImmune[44] = true;
				this.coldDamage = true;
				this.rarity = 2;
			}
			else if (this.type == 244)
			{
				this.name = "Rainbow Slime";
				this.width = 60;
				this.height = 42;
				this.aiStyle = 1;
				this.damage = 85;
				this.defense = 26;
				this.lifeMax = 400;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.alpha = 175;
				this.value = (float)Item.buyPrice(0, 0, 20, 0);
				this.knockBackResist = 0.3f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
				this.rarity = 1;
			}
			else if (this.type == 245)
			{
				this.name = "Golem";
				this.width = 140;
				this.height = 140;
				this.aiStyle = 45;
				this.damage = 72;
				this.defense = 26;
				this.lifeMax = 9000;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = SoundID.NPCDeath14;
				this.knockBackResist = 0f;
				this.value = (float)Item.buyPrice(0, 15, 0, 0);
				this.alpha = 255;
				this.boss = true;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
			}
			else if (this.type == 246)
			{
				this.noGravity = true;
				this.name = "Golem Head";
				this.width = 70;
				this.height = 70;
				this.aiStyle = 46;
				this.damage = 64;
				this.defense = 20;
				this.lifeMax = 16000;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = null;
				this.knockBackResist = 0f;
				this.alpha = 255;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
			}
			else if (this.type == 247 || this.type == 248)
			{
				this.noGravity = true;
				this.name = "Golem Fist";
				this.width = 40;
				this.height = 30;
				this.aiStyle = 47;
				this.damage = 59;
				this.defense = 28;
				this.lifeMax = 7000;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = SoundID.NPCDeath14;
				this.alpha = 255;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
			}
			else if (this.type == 249)
			{
				this.noGravity = true;
				this.name = "Golem Head";
				this.width = 70;
				this.height = 70;
				this.aiStyle = 48;
				this.damage = 80;
				this.defense = 32;
				this.lifeMax = 11000;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = SoundID.NPCDeath14;
				this.knockBackResist = 0f;
				this.dontTakeDamage = true;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
			}
			else if (this.type == 250)
			{
				this.name = "Angry Nimbus";
				this.width = 34;
				this.height = 26;
				this.aiStyle = 49;
				this.damage = 50;
				this.defense = 24;
				this.lifeMax = 300;
				this.HitSound = SoundID.NPCHit30;
				this.DeathSound = SoundID.NPCDeath33;
				this.knockBackResist = 0.3f;
				this.value = 300f;
				this.buffImmune[20] = true;
			}
			else if (this.type == 251)
			{
				this.name = "Eyezor";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 50;
				this.defense = 30;
				this.lifeMax = 1000;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.3f;
				this.value = (float)Item.buyPrice(0, 0, 50, 0);
				this.buffImmune[31] = false;
			}
			else if (this.type == 252)
			{
				this.noGravity = true;
				this.npcSlots = 0.5f;
				this.name = "Parrot";
				this.width = 32;
				this.height = 32;
				this.aiStyle = 5;
				this.damage = 80;
				this.defense = 12;
				this.lifeMax = 100;
				this.HitSound = SoundID.NPCHit46;
				this.knockBackResist = 0.7f;
				this.DeathSound = SoundID.NPCDeath48;
				this.value = 500f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 254)
			{
				this.name = "Spore Zombie";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 40;
				this.defense = 10;
				this.lifeMax = 180;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath6;
				this.knockBackResist = 0.4f;
				this.value = 1000f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 255)
			{
				this.name = "Spore Zombie";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 38;
				this.defense = 16;
				this.lifeMax = 220;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath6;
				this.knockBackResist = 0.3f;
				this.value = 1200f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 256)
			{
				this.noGravity = true;
				this.name = "Fungo Fish";
				this.width = 26;
				this.height = 26;
				this.aiStyle = 18;
				this.damage = 90;
				this.defense = 20;
				this.lifeMax = 140;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath6;
				this.value = 1200f;
				this.alpha = 20;
				this.npcSlots = 0.3f;
			}
			else if (this.type == 257)
			{
				this.name = "Anomura Fungus";
				this.width = 44;
				this.height = 34;
				this.aiStyle = 3;
				this.damage = 38;
				this.defense = 24;
				this.lifeMax = 230;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath6;
				this.knockBackResist = 0.3f;
				this.value = 1300f;
				this.buffImmune[31] = false;
				this.npcSlots = 0.3f;
			}
			else if (this.type == 258)
			{
				this.name = "Mushi Ladybug";
				this.width = 30;
				this.height = 24;
				this.aiStyle = 3;
				this.damage = 60;
				this.defense = 16;
				this.lifeMax = 220;
				this.HitSound = SoundID.NPCHit45;
				this.DeathSound = SoundID.NPCDeath47;
				this.knockBackResist = 0.3f;
				this.value = 1500f;
				this.buffImmune[31] = false;
				this.npcSlots = 0.3f;
			}
			else if (this.type == 259)
			{
				this.noGravity = true;
				this.noTileCollide = true;
				this.name = "Fungi Bulb";
				this.width = 20;
				this.height = 20;
				this.aiStyle = 13;
				this.damage = 24;
				this.defense = 4;
				this.lifeMax = 90;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0f;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 350f;
				this.buffImmune[20] = true;
				this.npcSlots = 0.3f;
			}
			else if (this.type == 260)
			{
				this.noGravity = true;
				this.noTileCollide = true;
				this.name = "Giant Fungi Bulb";
				this.width = 36;
				this.height = 36;
				this.aiStyle = 13;
				this.damage = 70;
				this.defense = 20;
				this.lifeMax = 300;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0f;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 1250f;
				this.buffImmune[20] = true;
				this.npcSlots = 0.3f;
			}
			else if (this.type == 261)
			{
				this.name = "Fungi Spore";
				this.width = 12;
				this.height = 12;
				this.aiStyle = 50;
				this.damage = 80;
				this.defense = 0;
				this.lifeMax = 1;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.npcSlots = 0f;
			}
			else if (this.type == 262)
			{
				this.noTileCollide = true;
				this.name = "Plantera";
				this.width = 86;
				this.height = 86;
				this.aiStyle = 51;
				this.damage = 50;
				this.defense = 14;
				this.lifeMax = 30000;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0f;
				this.value = (float)Item.buyPrice(0, 15, 0, 0);
				this.noGravity = true;
				this.boss = true;
				this.npcSlots = 16f;
				this.buffImmune[20] = true;
			}
			else if (this.type == 263)
			{
				this.noTileCollide = true;
				this.noGravity = true;
				this.name = "Plantera's Hook";
				this.width = 40;
				this.height = 40;
				this.aiStyle = 52;
				this.damage = 60;
				this.defense = 24;
				this.lifeMax = 4000;
				this.dontTakeDamage = true;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.buffImmune[20] = true;
			}
			else if (this.type == 264)
			{
				this.name = "Plantera's Tentacle";
				this.width = 24;
				this.height = 24;
				this.aiStyle = 53;
				this.damage = 60;
				this.defense = 20;
				this.lifeMax = 1000;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.noTileCollide = true;
				this.buffImmune[20] = true;
			}
			else if (this.type == 265)
			{
				this.name = "Spore";
				this.width = 18;
				this.height = 18;
				this.aiStyle = 50;
				this.damage = 70;
				this.defense = 0;
				this.lifeMax = 1;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.npcSlots = 0f;
			}
			else if (this.type == 266)
			{
				this.name = "Brain of Cthulhu";
				this.dontTakeDamage = true;
				this.width = 160;
				this.height = 110;
				this.aiStyle = 54;
				this.damage = 30;
				this.defense = 14;
				this.lifeMax = 1000;
				this.HitSound = SoundID.NPCHit9;
				this.DeathSound = SoundID.NPCDeath11;
				this.knockBackResist = 0f;
				this.noGravity = true;
				this.noTileCollide = true;
				this.timeLeft = NPC.activeTime * 30;
				this.boss = true;
				this.value = 50000f;
				this.npcSlots = 6f;
			}
			else if (this.type == 267)
			{
				this.name = "Creeper";
				this.width = 30;
				this.height = 30;
				this.aiStyle = 55;
				this.damage = 20;
				this.defense = 10;
				this.lifeMax = 100;
				this.HitSound = SoundID.NPCHit9;
				this.DeathSound = SoundID.NPCDeath11;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0.8f;
			}
			else if (this.type == 268)
			{
				this.noGravity = true;
				this.name = "Ichor Sticker";
				this.width = 28;
				this.height = 56;
				this.aiStyle = 22;
				this.damage = 55;
				this.defense = 20;
				this.lifeMax = 340;
				this.HitSound = SoundID.NPCHit13;
				this.DeathSound = SoundID.NPCDeath19;
				this.knockBackResist = 0.6f;
				this.value = 450f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 269)
			{
				this.name = "Rusty Armored Bones";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 70;
				this.defense = 34;
				this.lifeMax = 550;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.3f;
				this.value = 1000f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 270)
			{
				this.name = "Rusty Armored Bones";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 55;
				this.defense = 50;
				this.lifeMax = 400;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.2f;
				this.value = 1000f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 271)
			{
				this.name = "Rusty Armored Bones";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 70;
				this.defense = 40;
				this.lifeMax = 450;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.25f;
				this.value = 1000f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 272)
			{
				this.name = "Rusty Armored Bones";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 75;
				this.defense = 28;
				this.lifeMax = 400;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.35f;
				this.value = 1000f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 273)
			{
				this.name = "Blue Armored Bones";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 45;
				this.defense = 50;
				this.lifeMax = 500;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.15f;
				this.value = 1000f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 274)
			{
				this.name = "Blue Armored Bones";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 65;
				this.defense = 34;
				this.lifeMax = 350;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.4f;
				this.value = 1000f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 275)
			{
				this.name = "Blue Armored Bones";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 45;
				this.defense = 50;
				this.lifeMax = 550;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.15f;
				this.value = 1000f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 276)
			{
				this.name = "Blue Armored Bones";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 85;
				this.defense = 54;
				this.lifeMax = 500;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.2f;
				this.value = 1000f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 277)
			{
				this.name = "Hell Armored Bones";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 70;
				this.defense = 32;
				this.lifeMax = 400;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.4f;
				this.value = 1000f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 278)
			{
				this.name = "Hell Armored Bones";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 65;
				this.defense = 48;
				this.lifeMax = 450;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.3f;
				this.value = 1000f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 279)
			{
				this.name = "Hell Armored Bones";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 40;
				this.defense = 54;
				this.lifeMax = 500;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.2f;
				this.value = 1000f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 280)
			{
				this.name = "Hell Armored Bones";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 75;
				this.defense = 34;
				this.lifeMax = 500;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.4f;
				this.value = 1000f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 281)
			{
				this.name = "Ragged Caster";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 8;
				this.damage = 40;
				this.defense = 20;
				this.lifeMax = 400;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.6f;
				this.value = 1500f;
				this.npcSlots = 2f;
				this.buffImmune[20] = true;
			}
			else if (this.type == 282)
			{
				this.name = "Ragged Caster";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 8;
				this.damage = 35;
				this.defense = 28;
				this.lifeMax = 450;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.5f;
				this.value = 1500f;
				this.npcSlots = 2f;
				this.buffImmune[20] = true;
			}
			else if (this.type == 283)
			{
				this.name = "Necromancer";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 8;
				this.damage = 50;
				this.defense = 18;
				this.lifeMax = 300;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.55f;
				this.value = 1500f;
				this.npcSlots = 2f;
				this.buffImmune[20] = true;
			}
			else if (this.type == 284)
			{
				this.name = "Necromancer";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 8;
				this.damage = 35;
				this.defense = 24;
				this.lifeMax = 450;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.5f;
				this.value = 1500f;
				this.npcSlots = 2f;
				this.buffImmune[20] = true;
			}
			else if (this.type == 285)
			{
				this.name = "Diabolist";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 8;
				this.damage = 50;
				this.defense = 12;
				this.lifeMax = 200;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.7f;
				this.value = 1500f;
				this.npcSlots = 2f;
				this.buffImmune[20] = true;
			}
			else if (this.type == 286)
			{
				this.name = "Diabolist";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 8;
				this.damage = 60;
				this.defense = 10;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.65f;
				this.value = 1500f;
				this.npcSlots = 2f;
				this.buffImmune[20] = true;
			}
			else if (this.type == 287)
			{
				this.name = "Bone Lee";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 90;
				this.defense = 42;
				this.lifeMax = 1000;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.3f;
				this.value = 2000f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
				this.rarity = 1;
			}
			else if (this.type == 288)
			{
				this.name = "Dungeon Spirit";
				this.width = 20;
				this.height = 20;
				this.aiStyle = 56;
				this.damage = 70;
				this.defense = 30;
				this.lifeMax = 200;
				this.knockBackResist = 0.2f;
				this.HitSound = SoundID.NPCHit36;
				this.DeathSound = SoundID.NPCDeath39;
				this.value = 500f;
				this.noTileCollide = true;
				this.noGravity = true;
				flag = true;
			}
			else if (this.type == 289)
			{
				this.name = "Giant Cursed Skull";
				this.width = 44;
				this.height = 44;
				this.aiStyle = 10;
				this.damage = 60;
				this.defense = 20;
				this.lifeMax = 400;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.noGravity = true;
				this.noTileCollide = true;
				this.value = 150f;
				this.knockBackResist = 0.2f;
				this.npcSlots = 0.75f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
			}
			else if (this.type == 290)
			{
				this.name = "Paladin";
				this.width = 34;
				this.height = 62;
				this.aiStyle = 3;
				this.damage = 100;
				this.defense = 50;
				this.lifeMax = 5000;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = SoundID.NPCDeath6;
				this.knockBackResist = 0f;
				this.value = 50000f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = true;
				this.rarity = 1;
			}
			else if (this.type == 291)
			{
				this.name = "Skeleton Sniper";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 60;
				this.defense = 28;
				this.lifeMax = 400;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.4f;
				this.value = 1000f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
				this.rarity = 2;
			}
			else if (this.type == 292)
			{
				this.name = "Tactical Skeleton";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 60;
				this.defense = 28;
				this.lifeMax = 400;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.4f;
				this.value = 1000f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
				this.rarity = 2;
			}
			else if (this.type == 293)
			{
				this.name = "Skeleton Commando";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 60;
				this.defense = 28;
				this.lifeMax = 400;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.4f;
				this.value = 1000f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
				this.rarity = 2;
			}
			else if (this.type == 294)
			{
				this.name = "Angry Bones";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 34;
				this.defense = 6;
				this.lifeMax = 70;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.9f;
				this.value = 130f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 295)
			{
				this.name = "Angry Bones";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 28;
				this.defense = 12;
				this.lifeMax = 70;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.7f;
				this.value = 130f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 296)
			{
				this.name = "Angry Bones";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 24;
				this.defense = 14;
				this.lifeMax = 120;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.6f;
				this.value = 130f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 299)
			{
				this.name = "Squirrel";
				this.width = 18;
				this.height = 20;
				this.aiStyle = 7;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.catchItem = 2018;
			}
			else if (this.type == 300)
			{
				this.name = "Mouse";
				this.width = 14;
				this.height = 12;
				this.aiStyle = 7;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath4;
				this.npcSlots = 0.25f;
				this.catchItem = 2003;
			}
			else if (this.type == 301)
			{
				this.name = "Raven";
				this.width = 36;
				this.height = 26;
				this.aiStyle = 17;
				this.damage = 12;
				this.defense = 2;
				this.lifeMax = 35;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.85f;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 50f;
			}
			if (this.type == 302)
			{
				this.name = "Slime";
				this.width = 24;
				this.height = 18;
				this.aiStyle = 1;
				this.damage = 7;
				this.defense = 2;
				this.lifeMax = 25;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 25f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 304)
			{
				this.name = "Hoppin' Jack";
				this.width = 34;
				this.height = 28;
				this.aiStyle = 1;
				this.damage = 80;
				this.defense = 20;
				this.lifeMax = 175;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 500f;
				this.scale = 1.1f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
				this.knockBackResist = 0.5f;
				this.npcSlots = 0.3f;
			}
			else if (this.type >= 305 && this.type <= 314)
			{
				this.name = "Scarecrow";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath6;
				this.value = 1200f;
				this.buffImmune[31] = false;
				this.npcSlots = 0.5f;
				if (this.type == 305 || this.type == 310)
				{
					this.damage = 60;
					this.defense = 18;
					this.lifeMax = 500;
					this.knockBackResist = 0.4f;
				}
				else if (this.type == 306 || this.type == 311)
				{
					this.damage = 52;
					this.defense = 14;
					this.lifeMax = 400;
					this.knockBackResist = 0.2f;
					this.scale = 1.05f;
				}
				else if (this.type == 307 || this.type == 312)
				{
					this.damage = 78;
					this.defense = 16;
					this.lifeMax = 600;
					this.knockBackResist = 0.25f;
					this.scale = 0.9f;
				}
				else if (this.type == 308 || this.type == 313)
				{
					this.damage = 66;
					this.defense = 14;
					this.lifeMax = 650;
					this.knockBackResist = 0.35f;
					this.scale = 0.95f;
				}
				else if (this.type == 309 || this.type == 314)
				{
					this.damage = 52;
					this.defense = 26;
					this.lifeMax = 450;
					this.knockBackResist = 0.5f;
					this.scale = 1.1f;
				}
			}
			else if (this.type == 315)
			{
				this.name = "Headless Horseman";
				this.width = 74;
				this.height = 70;
				this.aiStyle = 26;
				this.damage = 130;
				this.defense = 40;
				this.lifeMax = 10000;
				this.HitSound = SoundID.NPCHit12;
				this.DeathSound = SoundID.NPCDeath18;
				this.knockBackResist = 0f;
				this.value = 10000f;
				flag = true;
			}
			else if (this.type == 316)
			{
				this.noGravity = true;
				this.noTileCollide = true;
				this.name = "Ghost";
				this.width = 24;
				this.height = 44;
				this.aiStyle = 22;
				this.damage = 40;
				this.defense = 14;
				this.lifeMax = 100;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath6;
				this.alpha = 100;
				this.value = 700f;
				flag = true;
				this.knockBackResist = 0.7f;
			}
			else if (this.type == 317)
			{
				this.name = "Demon Eye";
				this.width = 30;
				this.height = 32;
				this.aiStyle = 2;
				this.damage = 16;
				this.defense = 6;
				this.lifeMax = 75;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.7f;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 100f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 318)
			{
				this.name = "Demon Eye";
				this.width = 30;
				this.height = 32;
				this.aiStyle = 2;
				this.damage = 20;
				this.defense = 4;
				this.lifeMax = 60;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.65f;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 100f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 319)
			{
				this.name = "Zombie";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 20;
				this.defense = 6;
				this.lifeMax = 40;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.6f;
				this.value = 85f;
				this.buffImmune[31] = false;
				this.scale = 0.9f;
			}
			else if (this.type == 320)
			{
				this.name = "Zombie";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 15;
				this.defense = 8;
				this.lifeMax = 60;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.5f;
				this.value = 105f;
				this.buffImmune[31] = false;
				this.scale = 1.05f;
			}
			else if (this.type == 321)
			{
				this.name = "Zombie";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 20;
				this.defense = 14;
				this.lifeMax = 34;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.3f;
				this.value = 120f;
				this.buffImmune[31] = false;
				this.scale = 1.1f;
			}
			else if (this.type == 322)
			{
				this.name = "Skeleton";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 23;
				this.defense = 0;
				this.lifeMax = 115;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.65f;
				this.value = 130f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 323)
			{
				this.name = "Skeleton";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 18;
				this.defense = 10;
				this.lifeMax = 65;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.5f;
				this.value = 120f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 324)
			{
				this.name = "Skeleton";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 22;
				this.defense = 10;
				this.lifeMax = 70;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.4f;
				this.value = 130f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
				this.scale = 1.05f;
			}
			else if (this.type == 325)
			{
				this.name = "Mourning Wood";
				this.width = 164;
				this.height = 154;
				this.aiStyle = 57;
				this.damage = 120;
				this.defense = 28;
				this.lifeMax = 12000;
				this.HitSound = SoundID.NPCHit7;
				this.DeathSound = SoundID.NPCDeath5;
				this.knockBackResist = 0f;
				this.value = 10000f;
				flag = true;
			}
			else if (this.type == 326)
			{
				this.name = "Splinterling";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 100;
				this.defense = 32;
				this.lifeMax = 900;
				this.HitSound = SoundID.NPCHit7;
				this.DeathSound = SoundID.NPCDeath6;
				this.knockBackResist = 0.2f;
				this.value = 2000f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 327)
			{
				this.name = "Pumpking";
				this.width = 100;
				this.height = 100;
				this.aiStyle = 58;
				this.damage = 50;
				this.defense = 36;
				this.lifeMax = 22000;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.noTileCollide = true;
				this.value = 50000f;
				this.knockBackResist = 0f;
				flag = true;
			}
			else if (this.type == 328)
			{
				this.name = "Pumpking";
				this.width = 80;
				this.height = 80;
				this.aiStyle = 59;
				this.damage = 65;
				this.defense = 14;
				this.lifeMax = 5000;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				flag = true;
				this.dontTakeDamage = true;
				this.npcSlots = 0f;
			}
			else if (this.type == 329)
			{
				this.name = "Hellhound";
				this.width = 46;
				this.height = 30;
				this.aiStyle = 26;
				this.damage = 80;
				this.defense = 38;
				this.lifeMax = 1200;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath5;
				this.knockBackResist = 0.3f;
				this.value = 3000f;
				flag = true;
			}
			else if (this.type == 330)
			{
				this.noGravity = true;
				this.noTileCollide = true;
				this.name = "Poltergeist";
				this.width = 24;
				this.height = 44;
				this.aiStyle = 22;
				this.damage = 90;
				this.defense = 44;
				this.lifeMax = 2000;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath6;
				this.alpha = 100;
				this.value = 4500f;
				flag = true;
				this.knockBackResist = 0.4f;
			}
			else if (this.type == 331)
			{
				this.name = "Zombie";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 14;
				this.defense = 6;
				this.lifeMax = 45;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.5f;
				this.value = 60f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 332)
			{
				this.name = "Zombie";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 14;
				this.defense = 6;
				this.lifeMax = 45;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.5f;
				this.value = 60f;
				this.buffImmune[31] = false;
			}
			if (this.type == 333)
			{
				this.name = "Slime";
				this.width = 24;
				this.height = 18;
				this.aiStyle = 1;
				this.damage = 7;
				this.defense = 2;
				this.lifeMax = 25;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 25f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			if (this.type == 334)
			{
				this.name = "Slime";
				this.width = 24;
				this.height = 18;
				this.aiStyle = 1;
				this.damage = 6;
				this.defense = 2;
				this.lifeMax = 23;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.scale = 0.9f;
				this.value = 25f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			if (this.type == 335)
			{
				this.name = "Slime";
				this.width = 24;
				this.height = 18;
				this.aiStyle = 1;
				this.damage = 8;
				this.defense = 3;
				this.lifeMax = 29;
				this.scale = 1.05f;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 25f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			if (this.type == 336)
			{
				this.name = "Slime";
				this.width = 24;
				this.height = 18;
				this.aiStyle = 1;
				this.damage = 5;
				this.defense = 1;
				this.lifeMax = 22;
				this.scale = 0.85f;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 25f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type >= 338 && this.type <= 340)
			{
				this.name = "Zombie Elf";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 1200f;
				this.buffImmune[31] = false;
				this.npcSlots = 0.5f;
				if (this.type == 338)
				{
					this.damage = 65;
					this.defense = 18;
					this.lifeMax = 600;
					this.knockBackResist = 0.4f;
				}
				else if (this.type == 339)
				{
					this.damage = 52;
					this.defense = 24;
					this.lifeMax = 700;
					this.knockBackResist = 0.2f;
					this.scale = 1.05f;
				}
				else if (this.type == 340)
				{
					this.damage = 78;
					this.defense = 14;
					this.lifeMax = 500;
					this.knockBackResist = 0.25f;
					this.scale = 0.9f;
				}
			}
			else if (this.type == 341)
			{
				this.name = "Present Mimic";
				this.width = 24;
				this.height = 24;
				this.aiStyle = 25;
				this.damage = 100;
				this.defense = 32;
				this.lifeMax = 900;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = SoundID.NPCDeath6;
				this.value = (float)Item.buyPrice(0, 0, 20, 0);
				this.knockBackResist = 0.25f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
			}
			else if (this.type == 342)
			{
				this.name = "Gingerbread Man";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 90;
				this.defense = 26;
				this.lifeMax = 750;
				this.HitSound = SoundID.NPCHit7;
				this.DeathSound = SoundID.NPCDeath6;
				this.knockBackResist = 0.2f;
				this.value = 1800f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 343)
			{
				this.name = "Yeti";
				this.width = 38;
				this.height = 78;
				this.aiStyle = 3;
				this.damage = 140;
				this.defense = 50;
				this.lifeMax = 3500;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0f;
				this.value = 3000f;
				this.buffImmune[31] = false;
				this.npcSlots = 2f;
			}
			else if (this.type == 344)
			{
				this.name = "Everscream";
				this.width = 172;
				this.height = 130;
				this.aiStyle = 57;
				this.damage = 110;
				this.defense = 38;
				this.lifeMax = 13000;
				this.HitSound = SoundID.NPCHit7;
				this.DeathSound = SoundID.NPCDeath5;
				this.knockBackResist = 0f;
				this.value = 10000f;
				this.buffImmune[20] = true;
				this.npcSlots = 3f;
			}
			else if (this.type == 345)
			{
				this.name = "Ice Queen";
				this.width = 130;
				this.height = 140;
				this.aiStyle = 60;
				this.damage = 120;
				this.defense = 38;
				this.lifeMax = 34000;
				this.HitSound = SoundID.NPCHit7;
				this.DeathSound = SoundID.NPCDeath5;
				this.knockBackResist = 0f;
				this.value = 10000f;
				this.buffImmune[20] = true;
				this.noTileCollide = true;
				this.noGravity = true;
				this.npcSlots = 5f;
				this.coldDamage = true;
			}
			else if (this.type == 346)
			{
				this.name = "Santa-NK1";
				this.width = 112;
				this.height = 140;
				this.aiStyle = 61;
				this.damage = 120;
				this.defense = 56;
				this.lifeMax = 18000;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = SoundID.NPCDeath14;
				this.knockBackResist = 0f;
				this.value = 10000f;
				this.buffImmune[20] = true;
				this.npcSlots = 4f;
			}
			else if (this.type == 347)
			{
				this.name = "Elf Copter";
				this.width = 50;
				this.height = 50;
				this.aiStyle = 62;
				this.damage = 60;
				this.defense = 28;
				this.lifeMax = 1200;
				this.HitSound = SoundID.NPCHit4;
				this.knockBackResist = 0.4f;
				this.DeathSound = SoundID.NPCDeath14;
				this.value = 1000f;
				this.noTileCollide = true;
				this.noGravity = true;
				this.npcSlots = 1.5f;
			}
			else if (this.type == 348)
			{
				this.name = "Nutcracker";
				this.width = 28;
				this.height = 76;
				this.aiStyle = 3;
				this.damage = 80;
				this.defense = 26;
				this.lifeMax = 1800;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.4f;
				this.value = 1500f;
				this.buffImmune[31] = false;
				this.npcSlots = 1.5f;
			}
			else if (this.type == 349)
			{
				this.name = "Nutcracker";
				this.width = 28;
				this.height = 76;
				this.aiStyle = 3;
				this.damage = 100;
				this.defense = 42;
				this.lifeMax = 1800;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.1f;
				this.value = 1500f;
				this.buffImmune[31] = false;
				this.npcSlots = 1.5f;
			}
			else if (this.type == 350)
			{
				this.name = "Elf Archer";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 70;
				this.defense = 30;
				this.lifeMax = 900;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.45f;
				this.value = 900f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 351)
			{
				this.name = "Krampus";
				this.width = 18;
				this.height = 90;
				this.aiStyle = 3;
				this.damage = 100;
				this.defense = 40;
				this.lifeMax = 2500;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.1f;
				this.value = 3000f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
				this.npcSlots = 1.75f;
			}
			else if (this.type == 352)
			{
				this.name = "Flocko";
				this.width = 54;
				this.height = 54;
				this.aiStyle = 63;
				this.damage = 75;
				this.defense = 8;
				this.lifeMax = 450;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath6;
				this.value = 500f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.knockBackResist = 0.4f;
				this.noGravity = true;
				this.noTileCollide = true;
				this.npcSlots = 2f;
				this.coldDamage = true;
			}
			else if (this.type == 353)
			{
				this.townNPC = true;
				this.friendly = true;
				this.name = "Stylist";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 7;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
			}
			else if (this.type == 354)
			{
				this.friendly = true;
				this.name = "Webbed Stylist";
				this.width = 18;
				this.height = 34;
				this.aiStyle = 0;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
				this.scale = 0.9f;
				this.rarity = 1;
			}
			else if (this.type == 355)
			{
				this.name = "Firefly";
				this.width = 10;
				this.height = 10;
				this.aiStyle = 64;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.npcSlots = 0.2f;
				this.noGravity = true;
				this.catchItem = 1992;
			}
			else if (this.type == 356)
			{
				this.name = "Butterfly";
				this.width = 10;
				this.height = 10;
				this.aiStyle = 65;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.npcSlots = 0.25f;
				this.noGravity = true;
				this.catchItem = 1994;
			}
			else if (this.type == 357)
			{
				this.name = "Worm";
				this.width = 10;
				this.height = 4;
				this.aiStyle = 66;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.npcSlots = 0.1f;
				this.catchItem = 2002;
				this.friendly = true;
			}
			else if (this.type == 358)
			{
				this.name = "Lightning Bug";
				this.width = 12;
				this.height = 12;
				this.aiStyle = 64;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.npcSlots = 0.2f;
				this.noGravity = true;
				this.catchItem = 2004;
			}
			else if (this.type == 359)
			{
				this.name = "Snail";
				this.width = 12;
				this.height = 12;
				this.aiStyle = 67;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.npcSlots = 0.5f;
				this.noGravity = true;
				this.catchItem = 2006;
			}
			else if (this.type == 360)
			{
				this.name = "Glowing Snail";
				this.width = 14;
				this.height = 14;
				this.aiStyle = 67;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.npcSlots = 0.5f;
				this.noGravity = true;
				this.catchItem = 2007;
			}
			else if (this.type == 361)
			{
				this.name = "Frog";
				this.width = 18;
				this.height = 20;
				this.aiStyle = 7;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.catchItem = 2121;
			}
			else if (this.type == 362)
			{
				this.name = "Duck";
				this.width = 22;
				this.height = 26;
				this.aiStyle = 7;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.catchItem = 2122;
			}
			else if (this.type == 363)
			{
				this.name = "Duck";
				this.width = 28;
				this.height = 22;
				this.aiStyle = 68;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.catchItem = 2122;
			}
			else if (this.type == 364)
			{
				this.name = "Duck";
				this.width = 22;
				this.height = 26;
				this.aiStyle = 7;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.catchItem = 2123;
			}
			else if (this.type == 365)
			{
				this.name = "Duck";
				this.width = 28;
				this.height = 22;
				this.aiStyle = 68;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.catchItem = 2123;
			}
			else if (this.type == 366 || this.type == 367)
			{
				this.name = "Scorpion";
				this.width = 26;
				this.height = 18;
				this.aiStyle = 7;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.catchItem = (short)(2156 + this.type - 366);
			}
			else if (this.type == 368)
			{
				this.townNPC = true;
				this.friendly = true;
				this.name = "Travelling Merchant";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 7;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
			}
			else if (this.type == 369)
			{
				this.townNPC = true;
				this.friendly = true;
				this.name = "Angler";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 7;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath6;
				this.knockBackResist = 0.5f;
			}
			else if (this.type == 370)
			{
				this.name = "Duke Fishron";
				this.width = 150;
				this.height = 100;
				this.aiStyle = 69;
				this.damage = 100;
				this.defense = 50;
				this.lifeMax = 50000;
				this.knockBackResist = 0f;
				this.noTileCollide = true;
				this.noGravity = true;
				this.npcSlots = 10f;
				this.HitSound = SoundID.NPCHit14;
				this.DeathSound = SoundID.NPCDeath20;
				this.value = 10000f;
				this.boss = true;
				this.netAlways = true;
				this.timeLeft = NPC.activeTime * 30;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[31] = true;
				this.buffImmune[44] = true;
			}
			else if (this.type == 371)
			{
				this.name = "Detonating Bubble";
				this.width = 36;
				this.height = 36;
				this.aiStyle = 70;
				this.damage = 100;
				this.defense = 0;
				this.lifeMax = 1;
				this.HitSound = SoundID.NPCHit3;
				this.DeathSound = SoundID.NPCDeath3;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.alpha = 255;
			}
			else if (this.type == 372)
			{
				this.noGravity = true;
				this.name = "Sharkron";
				this.width = 120;
				this.height = 24;
				this.aiStyle = 71;
				this.damage = 100;
				this.defense = 100;
				this.lifeMax = 100;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0f;
				this.alpha = 255;
			}
			else if (this.type == 373)
			{
				this.noGravity = true;
				this.name = "Sharkron2";
				this.displayName = "Sharkron";
				this.width = 100;
				this.height = 24;
				this.aiStyle = 71;
				this.damage = 120;
				this.defense = 100;
				this.lifeMax = 100;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0f;
				this.alpha = 255;
			}
			else if (this.type == 374)
			{
				this.name = "Truffle Worm";
				this.width = 20;
				this.height = 10;
				this.aiStyle = 66;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.npcSlots = 0.15f;
				this.catchItem = 2673;
				this.rarity = 4;
			}
			else if (this.type == 375)
			{
				this.displayName = "Truffle Worm";
				this.name = "Truffle Worm Digger";
				this.width = 10;
				this.height = 10;
				this.aiStyle = 6;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
				this.npcSlots = 0.15f;
				this.catchItem = 2673;
			}
			else if (this.type == 376)
			{
				this.friendly = true;
				this.name = "Sleeping Angler";
				this.width = 34;
				this.height = 8;
				this.aiStyle = 0;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath6;
				this.knockBackResist = 0.5f;
				this.scale = 0.9f;
				this.rarity = 1;
			}
			else if (this.type == 377)
			{
				this.name = "Grasshopper";
				this.width = 14;
				this.height = 12;
				this.aiStyle = 1;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.friendly = true;
				this.catchItem = 2740;
				this.npcSlots = 0.1f;
			}
			else if (this.type == 378)
			{
				this.npcSlots = 1f;
				this.name = "Chattering Teeth Bomb";
				this.width = 20;
				this.height = 26;
				this.aiStyle = 41;
				this.damage = 80;
				this.defense = 30;
				this.lifeMax = 200;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
				this.value = 450f;
			}
			else if (this.type >= 379 && this.type <= 380)
			{
				this.name = "Lunatic Cultist Archer";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 45;
				this.defense = 14;
				this.lifeMax = 210;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.55f;
				this.value = 1000f;
				this.npcSlots = 0f;
				this.lavaImmune = true;
				this.netAlways = true;
				this.chaseable = false;
			}
			else if (this.type >= 381 && this.type <= 382)
			{
				this.name = "Martian Ranger";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 50;
				this.defense = 25;
				this.lifeMax = 350;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.35f;
				this.value = 1000f;
			}
			else if (this.type == 383)
			{
				this.name = "Martian Officer";
				this.lifeMax = 300;
				this.defense = 50;
				this.damage = 75;
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.HitSound = SoundID.NPCHit43;
				this.DeathSound = SoundID.NPCDeath45;
				this.value = 1200f;
				this.knockBackResist = 0.25f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 384)
			{
				this.name = "Bubble Shield";
				this.lifeMax = 1000;
				this.width = 18;
				this.defense = 20;
				this.height = 40;
				this.aiStyle = 72;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				flag = true;
				this.npcSlots = 0f;
				this.noTileCollide = true;
				this.canGhostHeal = false;
			}
			else if (this.type == 385)
			{
				this.name = "Martian Grunty";
				this.lifeMax = 750;
				this.defense = 30;
				this.damage = 80;
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.HitSound = SoundID.NPCHit43;
				this.DeathSound = SoundID.NPCDeath45;
				this.value = 600f;
				this.knockBackResist = 0f;
				this.npcSlots = 0.75f;
			}
			else if (this.type == 386)
			{
				this.name = "Martian Engineer";
				this.lifeMax = 400;
				this.defense = 34;
				this.damage = 40;
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.HitSound = SoundID.NPCHit43;
				this.DeathSound = SoundID.NPCDeath45;
				this.value = 1200f;
				this.knockBackResist = 0.4f;
			}
			else if (this.type == 387)
			{
				this.name = "Tesla Turret";
				this.width = 20;
				this.height = 50;
				this.aiStyle = 73;
				this.damage = 10;
				this.defense = 40;
				this.lifeMax = 200;
				this.HitSound = SoundID.NPCHit53;
				this.DeathSound = SoundID.NPCDeath56;
				this.knockBackResist = 0f;
				this.buffImmune[31] = true;
				this.canGhostHeal = false;
			}
			else if (this.type == 388)
			{
				this.name = "Martian Drone";
				this.width = 40;
				this.height = 30;
				this.aiStyle = 74;
				this.damage = 60;
				this.defense = 16;
				this.lifeMax = 300;
				this.HitSound = SoundID.NPCHit42;
				this.knockBackResist = 0.4f;
				this.DeathSound = SoundID.NPCDeath44;
				this.value = 1000f;
				this.noTileCollide = true;
				this.noGravity = true;
				this.npcSlots = 1.5f;
				this.canGhostHeal = false;
			}
			else if (this.type == 389)
			{
				this.name = "Gigazapper";
				this.lifeMax = 600;
				this.defense = 38;
				this.damage = 75;
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.HitSound = SoundID.NPCHit39;
				this.DeathSound = SoundID.NPCDeath57;
				this.value = 1200f;
				this.npcSlots = 0.5f;
				this.knockBackResist = 0.3f;
			}
			else if (this.type == 390)
			{
				this.name = "Scutlix Gunner";
				this.damage = 65;
				this.defense = 30;
				this.lifeMax = 350;
				this.width = 18;
				this.height = 40;
				this.aiStyle = 75;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 1200f;
				this.npcSlots = 0.5f;
			}
			else if (this.type == 391)
			{
				this.name = "Scutlix";
				this.lifeMax = 600;
				this.defense = 30;
				this.damage = 85;
				this.width = 60;
				this.height = 40;
				this.aiStyle = 3;
				this.HitSound = SoundID.NPCHit51;
				this.DeathSound = SoundID.NPCDeath54;
				this.value = 1200f;
				this.npcSlots = 0.5f;
				this.knockBackResist = 0.1f;
			}
			else if (this.type == 392)
			{
				this.name = "Martian Saucer";
				this.lifeMax = 100;
				this.defense = 100;
				this.damage = 50;
				this.width = 150;
				this.height = 80;
				this.aiStyle = 75;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = SoundID.NPCDeath14;
				this.value = 0f;
				this.npcSlots = 0f;
				this.knockBackResist = 0f;
				this.noGravity = true;
				this.noTileCollide = true;
				this.dontTakeDamage = true;
				flag = true;
				this.netAlways = true;
			}
			else if (this.type == 393)
			{
				this.name = "Saucer Turret";
				this.lifeMax = 5000;
				this.defense = 20;
				this.damage = 60;
				this.width = 40;
				this.height = 16;
				this.aiStyle = 75;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = SoundID.NPCDeath14;
				this.value = 0f;
				this.npcSlots = 1f;
				this.knockBackResist = 0f;
				this.noGravity = true;
				this.noTileCollide = true;
				flag = true;
				this.netAlways = true;
			}
			else if (this.type == 394)
			{
				this.name = "Saucer Cannon";
				this.lifeMax = 3500;
				this.defense = 20;
				this.damage = 60;
				this.width = 46;
				this.height = 36;
				this.aiStyle = 75;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = SoundID.NPCDeath14;
				this.value = 0f;
				this.npcSlots = 1f;
				this.knockBackResist = 0f;
				this.noGravity = true;
				this.noTileCollide = true;
				flag = true;
				this.netAlways = true;
			}
			else if (this.type == 395)
			{
				this.name = "Saucer Core";
				this.lifeMax = 10000;
				this.defense = 0;
				this.damage = 80;
				this.width = 46;
				this.height = 36;
				this.aiStyle = 76;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = SoundID.NPCDeath14;
				this.value = 0f;
				this.npcSlots = 6f;
				this.knockBackResist = 0f;
				this.noGravity = true;
				this.noTileCollide = true;
				this.dontTakeDamage = true;
				this.boss = true;
				flag = true;
				this.netAlways = true;
			}
			else if (this.type == 399)
			{
				this.name = "Martian Probe";
				this.defense = 5;
				this.damage = 5;
				this.lifeMax = 500;
				this.aiStyle = 80;
				this.width = 42;
				this.height = 72;
				this.value = 0f;
				this.knockBackResist = 0f;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = SoundID.NPCDeath14;
				this.npcSlots = 0f;
				this.noGravity = true;
				this.timeLeft = NPC.activeTime * 30;
				this.chaseable = false;
				this.netAlways = true;
				this.rarity = 1;
			}
			else if (this.type == 396)
			{
				this.name = "Moon Lord Head";
				this.lifeMax = 45000;
				this.defense = 50;
				this.damage = 0;
				this.width = 38;
				this.height = 56;
				this.aiStyle = 79;
				this.HitSound = SoundID.NPCHit57;
				this.DeathSound = SoundID.NPCDeath62;
				this.value = 0f;
				this.npcSlots = 6f;
				this.knockBackResist = 0f;
				this.noGravity = true;
				this.noTileCollide = true;
				this.boss = true;
				this.hide = true;
				this.netAlways = true;
			}
			else if (this.type == 397)
			{
				this.name = "Moon Lord Hand";
				this.lifeMax = 25000;
				this.defense = 40;
				this.damage = 0;
				this.width = 46;
				this.height = 66;
				this.aiStyle = 78;
				this.HitSound = SoundID.NPCHit57;
				this.DeathSound = SoundID.NPCDeath62;
				this.value = 0f;
				this.npcSlots = 6f;
				this.knockBackResist = 0f;
				this.noGravity = true;
				this.noTileCollide = true;
				this.boss = true;
				this.hide = true;
				this.netAlways = true;
			}
			else if (this.type == 398)
			{
				this.name = "Moon Lord Core";
				this.lifeMax = 50000;
				this.defense = 70;
				this.damage = 0;
				this.width = 46;
				this.height = 66;
				this.aiStyle = 77;
				this.HitSound = SoundID.NPCHit57;
				this.DeathSound = null;
				this.value = 0f;
				this.npcSlots = 6f;
				this.knockBackResist = 0f;
				this.noGravity = true;
				this.noTileCollide = true;
				this.dontTakeDamage = true;
				this.boss = true;
				this.behindTiles = true;
				this.hide = true;
				this.netAlways = true;
			}
			else if (this.type == 400)
			{
				this.name = "True Eye of Cthulhu";
				this.defense = 0;
				this.damage = 60;
				this.lifeMax = 100;
				this.aiStyle = 81;
				this.width = 60;
				this.height = 60;
				this.value = 0f;
				this.knockBackResist = 0f;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.npcSlots = 0f;
				this.noGravity = true;
				this.dontTakeDamage = true;
				this.noTileCollide = true;
				this.netAlways = true;
			}
			else if (this.type == 401)
			{
				this.name = "Moon Leech Clot";
				this.lifeMax = 400;
				this.defense = 0;
				this.damage = 0;
				this.width = 30;
				this.height = 30;
				this.aiStyle = 82;
				this.HitSound = SoundID.NPCHit57;
				this.DeathSound = SoundID.NPCDeath62;
				this.value = 0f;
				this.npcSlots = 0f;
				this.knockBackResist = 0f;
				this.noGravity = true;
				this.noTileCollide = true;
				this.hide = true;
			}
			else if (this.type == 437)
			{
				this.name = "Lunar Tablet";
				this.lifeMax = 400;
				this.defense = 0;
				this.damage = 0;
				this.width = 54;
				this.height = 54;
				this.aiStyle = 83;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = SoundID.NPCDeath14;
				this.value = 0f;
				this.npcSlots = 0f;
				this.knockBackResist = 0f;
				this.noGravity = true;
				this.noTileCollide = true;
				this.dontTakeDamage = true;
				this.netAlways = true;
			}
			else if (this.type == 438)
			{
				this.name = "Lunar Devote";
				this.lifeMax = 400;
				this.defense = 0;
				this.damage = 0;
				this.width = 22;
				this.height = 40;
				this.aiStyle = 83;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 0f;
				this.npcSlots = 0f;
				this.knockBackResist = 0f;
				this.lavaImmune = true;
				this.netAlways = true;
				this.chaseable = false;
			}
			else if (this.type == 439)
			{
				this.name = "Ancient Cultist";
				this.width = 24;
				this.height = 50;
				this.aiStyle = 84;
				this.damage = 50;
				this.defense = 42;
				this.lifeMax = 32000;
				this.knockBackResist = 0f;
				this.noTileCollide = true;
				this.noGravity = true;
				this.npcSlots = 10f;
				this.HitSound = SoundID.NPCHit55;
				this.DeathSound = SoundID.NPCDeath59;
				this.value = 10000f;
				this.boss = true;
				this.netAlways = true;
				this.timeLeft = NPC.activeTime * 30;
				flag = true;
			}
			else if (this.type == 440)
			{
				this.name = "Ancient Cultist";
				this.width = 24;
				this.height = 50;
				this.aiStyle = 84;
				this.damage = 0;
				this.defense = 35;
				this.lifeMax = 10000;
				this.knockBackResist = 0f;
				this.noTileCollide = true;
				this.noGravity = true;
				this.npcSlots = 0f;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.netAlways = true;
				this.timeLeft = NPC.activeTime * 30;
				flag = true;
				this.chaseable = false;
			}
			else if (this.type == 442)
			{
				this.name = "Gold Bird";
				this.width = 14;
				this.height = 14;
				this.aiStyle = 24;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.8f;
				this.DeathSound = SoundID.NPCDeath1;
				this.catchItem = 2889;
				this.npcSlots = 0.4f;
				this.rarity = 3;
			}
			else if (this.type == 443)
			{
				this.name = "Gold Bunny";
				this.width = 18;
				this.height = 20;
				this.aiStyle = 7;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.catchItem = 2890;
				this.rarity = 3;
			}
			else if (this.type == 444)
			{
				this.name = "Gold Butterfly";
				this.width = 10;
				this.height = 10;
				this.aiStyle = 65;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.npcSlots = 0.25f;
				this.noGravity = true;
				this.catchItem = 2891;
				this.rarity = 3;
			}
			else if (this.type == 445)
			{
				this.name = "Gold Frog";
				this.width = 18;
				this.height = 20;
				this.aiStyle = 7;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.catchItem = 2892;
				this.rarity = 3;
			}
			else if (this.type == 446)
			{
				this.name = "Gold Grasshopper";
				this.width = 14;
				this.height = 12;
				this.aiStyle = 1;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.friendly = true;
				this.catchItem = 2893;
				this.npcSlots = 0.1f;
				this.rarity = 3;
			}
			else if (this.type == 447)
			{
				this.name = "Gold Mouse";
				this.width = 14;
				this.height = 12;
				this.aiStyle = 7;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath4;
				this.npcSlots = 0.25f;
				this.catchItem = 2894;
				this.rarity = 3;
			}
			else if (this.type == 448)
			{
				this.name = "Gold Worm";
				this.width = 10;
				this.height = 4;
				this.aiStyle = 66;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.npcSlots = 0.1f;
				this.catchItem = 2895;
				this.friendly = true;
				this.rarity = 3;
			}
			else if (this.type == 449)
			{
				this.name = "Skeleton";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 20;
				this.defense = 8;
				this.lifeMax = 60;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.5f;
				this.value = 100f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 450)
			{
				this.name = "Headache Skeleton";
				this.displayName = "Skeleton";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 20;
				this.defense = 12;
				this.lifeMax = 55;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.5f;
				this.value = 130f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 451)
			{
				this.name = "Misassembled Skeleton";
				this.displayName = "Skeleton";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 18;
				this.defense = 8;
				this.lifeMax = 65;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.5f;
				this.value = 120f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 452)
			{
				this.name = "Pantless Skeleton";
				this.displayName = "Skeleton";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 22;
				this.defense = 8;
				this.lifeMax = 60;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.5f;
				this.value = 110f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 453)
			{
				this.friendly = true;
				this.name = "Skeleton Merchant";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 7;
				this.damage = 10;
				this.defense = 30;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.5f;
				this.npcSlots = 7f;
			}
			else if (this.type == 454)
			{
				this.displayName = "Phantasm Dragon";
				this.noTileCollide = true;
				this.npcSlots = 5f;
				this.name = "Phantasm Dragon Head";
				this.width = 32;
				this.height = 32;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 80;
				this.defense = 10;
				this.lifeMax = 4000;
				this.HitSound = SoundID.NPCHit56;
				this.DeathSound = SoundID.NPCDeath60;
				this.noGravity = true;
				this.knockBackResist = 0f;
				this.value = 0f;
				this.scale = 1f;
				flag = true;
				this.alpha = 255;
			}
			else if (this.type == 459)
			{
				this.displayName = "Phantasm Dragon";
				this.noTileCollide = true;
				this.name = "Phantasm Dragon Tail";
				this.width = 32;
				this.height = 32;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 40;
				this.defense = 20;
				this.lifeMax = 4000;
				this.HitSound = SoundID.NPCHit56;
				this.DeathSound = SoundID.NPCDeath60;
				this.noGravity = true;
				this.knockBackResist = 0f;
				this.value = 0f;
				this.scale = 1f;
				flag = true;
				this.alpha = 255;
				this.dontCountMe = true;
			}
			else if (this.type == 455 || this.type == 456 || this.type == 457 || this.type == 458)
			{
				this.displayName = "Phantasm Dragon";
				this.noTileCollide = true;
				this.name = "Phantasm Dragon Body";
				this.width = 32;
				this.height = 32;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 40;
				this.defense = 20;
				this.lifeMax = 4000;
				this.HitSound = SoundID.NPCHit56;
				this.DeathSound = SoundID.NPCDeath60;
				this.noGravity = true;
				this.knockBackResist = 0f;
				this.value = 0f;
				this.scale = 1f;
				flag = true;
				this.alpha = 255;
				this.dontCountMe = true;
			}
			else if (this.type == 464)
			{
				this.name = "Crimson Bunny";
				this.width = 18;
				this.height = 20;
				this.aiStyle = 3;
				this.damage = 21;
				this.defense = 5;
				this.lifeMax = 75;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 500f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 465)
			{
				this.noGravity = true;
				this.name = "Crimson Goldfish";
				this.width = 18;
				this.height = 20;
				this.aiStyle = 16;
				this.damage = 31;
				this.defense = 7;
				this.lifeMax = 110;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 500f;
			}
			else if (this.type == 470)
			{
				this.name = "Crimtane Penguin";
				this.width = 16;
				this.height = 34;
				this.aiStyle = 3;
				this.damage = 21;
				this.defense = 5;
				this.lifeMax = 75;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 500f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 473 || this.type == 474 || this.type == 475 || this.type == 476)
			{
				this.name = "Big Mimic";
				this.width = 28;
				this.height = 44;
				this.aiStyle = 87;
				this.damage = 90;
				this.defense = 34;
				this.lifeMax = 3500;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = SoundID.NPCDeath6;
				this.value = 30000f;
				this.knockBackResist = 0.1f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.rarity = 2;
			}
			else if (this.type == 480)
			{
				this.name = "Medusa";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 30;
				this.defense = 20;
				this.lifeMax = 400;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.15f;
				this.value = 1000f;
			}
			else if (this.type == 481)
			{
				this.name = "Hoplite";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 22;
				this.defense = 10;
				this.lifeMax = 70;
				this.HitSound = SoundID.NPCHit2;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.4f;
				this.value = 300f;
				this.buffImmune[31] = false;
				this.buffImmune[20] = true;
			}
			else if (this.type == 482)
			{
				this.name = "Grolem";
				this.width = 28;
				this.height = 48;
				this.aiStyle = 3;
				this.damage = 30;
				this.defense = 18;
				this.lifeMax = 110;
				this.HitSound = SoundID.NPCHit41;
				this.DeathSound = SoundID.NPCDeath44;
				this.knockBackResist = 0.35f;
				this.value = 500f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
			}
			else if (this.type == 483)
			{
				this.npcSlots = 0.5f;
				this.name = "Grelimental";
				this.width = 20;
				this.height = 30;
				this.aiStyle = 91;
				this.damage = 24;
				this.defense = 8;
				this.lifeMax = 40;
				this.HitSound = SoundID.NPCHit7;
				this.knockBackResist = 0.6f;
				this.DeathSound = SoundID.NPCDeath6;
				this.value = 1000f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
			}
			else if (this.type >= 484 && this.type <= 487)
			{
				this.name = "Grub";
				this.width = 10;
				this.height = 4;
				this.aiStyle = 66;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.npcSlots = 0.1f;
				this.catchItem = (short)(3191 + this.type - 484);
				this.friendly = true;
			}
			else if (this.type == 488)
			{
				this.name = "Target Dummy";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 92;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 1000;
				this.HitSound = SoundID.NPCHit15;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0f;
				this.value = 0f;
				this.immortal = true;
				this.netAlways = true;
			}
			else if (this.type == 489)
			{
				this.name = "Blood Zombie";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 20;
				this.defense = 8;
				this.lifeMax = 75;
				this.HitSound = SoundID.NPCHit18;
				this.DeathSound = SoundID.NPCDeath21;
				this.knockBackResist = 0.4f;
				this.value = 150f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 490)
			{
				this.noGravity = true;
				this.name = "Drippler";
				this.width = 28;
				this.height = 30;
				this.aiStyle = 22;
				this.damage = 28;
				this.defense = 14;
				this.lifeMax = 50;
				this.HitSound = SoundID.NPCHit19;
				this.knockBackResist = 0.6f;
				this.DeathSound = SoundID.NPCDeath22;
				this.value = 150f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 491)
			{
				this.noGravity = true;
				this.name = "Flying Dutchman";
				this.width = 350;
				this.height = 120;
				this.aiStyle = 93;
				this.damage = 0;
				this.defense = 100;
				this.lifeMax = 50;
				this.HitSound = SoundID.NPCHit19;
				this.knockBackResist = 0f;
				this.DeathSound = SoundID.NPCDeath22;
				this.value = 0f;
				flag = true;
				this.dontTakeDamage = true;
				this.netAlways = true;
			}
			else if (this.type == 492)
			{
				this.name = "Dutchman Cannon";
				this.lifeMax = 2000;
				this.defense = 20;
				this.damage = 30;
				this.width = 30;
				this.height = 30;
				this.aiStyle = 75;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = SoundID.NPCDeath14;
				this.value = 0f;
				this.npcSlots = 1f;
				this.knockBackResist = 0f;
				this.noGravity = true;
				this.noTileCollide = true;
				flag = true;
				this.hide = true;
				this.netAlways = true;
			}
			else if (this.type >= 494 && this.type <= 495)
			{
				this.name = "Crawdad";
				this.width = 28;
				this.height = 22;
				this.aiStyle = 3;
				this.damage = 28;
				this.defense = 6;
				this.lifeMax = 50;
				this.HitSound = SoundID.NPCHit33;
				this.DeathSound = SoundID.NPCDeath36;
				this.value = 120f;
			}
			else if (this.type >= 496 && this.type <= 497)
			{
				this.name = "Giant Shelly";
				this.width = 28;
				this.height = 22;
				this.aiStyle = 39;
				this.damage = 16;
				this.defense = 12;
				this.lifeMax = 50;
				this.HitSound = SoundID.NPCHit38;
				this.DeathSound = SoundID.NPCDeath41;
				this.knockBackResist = 0.75f;
				this.value = 120f;
			}
			else if (this.type >= 498 && this.type <= 506)
			{
				this.name = "Salamander";
				this.width = 24;
				this.height = 44;
				this.aiStyle = 3;
				this.damage = 18;
				this.defense = 10;
				this.lifeMax = 65;
				this.HitSound = SoundID.NPCHit50;
				this.DeathSound = SoundID.NPCDeath53;
				this.knockBackResist = 0.45f;
				this.value = 120f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 441)
			{
				this.townNPC = true;
				this.friendly = true;
				this.name = "Tax Collector";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 7;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
			}
			else if (this.type == 513)
			{
				this.displayName = "Tomb Crawler";
				this.npcSlots = 4f;
				this.name = "Tomb Crawler Head";
				this.width = 22;
				this.height = 22;
				this.aiStyle = 6;
				this.damage = 34;
				this.defense = 0;
				this.lifeMax = 80;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
				this.value = 140f;
			}
			else if (this.type == 514)
			{
				this.displayName = "Tomb Crawler";
				this.name = "Tomb Crawler Body";
				this.width = 22;
				this.height = 22;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 18;
				this.defense = 12;
				this.lifeMax = 80;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
				this.value = 140f;
				this.dontCountMe = true;
				this.npcSlots = 0f;
			}
			else if (this.type == 515)
			{
				this.displayName = "Tomb Crawler";
				this.name = "Tomb Crawler Tail";
				this.width = 22;
				this.height = 22;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 16;
				this.defense = 20;
				this.lifeMax = 80;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
				this.value = 140f;
				this.dontCountMe = true;
				this.npcSlots = 0f;
			}
			else if (this.type == 510)
			{
				this.displayName = "Dune Splicer";
				this.npcSlots = 5f;
				this.name = "Dune Splicer Head";
				this.width = 34;
				this.height = 34;
				this.aiStyle = 6;
				this.damage = 58;
				this.defense = 18;
				this.lifeMax = 500;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
				this.value = 700f;
			}
			else if (this.type == 511)
			{
				this.displayName = "Dune Splicer";
				this.name = "Dune Splicer Body";
				this.width = 34;
				this.height = 34;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 54;
				this.defense = 28;
				this.lifeMax = 500;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
				this.value = 700f;
				this.dontCountMe = true;
				this.npcSlots = 0f;
			}
			else if (this.type == 512)
			{
				this.displayName = "Dune Splicer";
				this.name = "Dune Splicer Tail";
				this.width = 34;
				this.height = 34;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 50;
				this.defense = 34;
				this.lifeMax = 500;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.behindTiles = true;
				this.value = 700f;
				this.dontCountMe = true;
				this.npcSlots = 0f;
			}
			else if (this.type == 508)
			{
				this.name = "Antlion Charger";
				this.width = 33;
				this.height = 31;
				this.aiStyle = 3;
				this.damage = 24;
				this.defense = 16;
				this.lifeMax = 70;
				this.HitSound = SoundID.NPCHit31;
				this.DeathSound = SoundID.NPCDeath34;
				this.knockBackResist = 0.2f;
				this.value = 80f;
				this.buffImmune[31] = false;
				this.npcSlots = 0.8f;
			}
			else if (this.type == 509)
			{
				this.name = "Antlion Swarmer";
				this.width = 40;
				this.height = 31;
				this.aiStyle = 44;
				this.damage = 30;
				this.defense = 12;
				this.lifeMax = 50;
				this.knockBackResist = 0.6f;
				this.HitSound = SoundID.NPCHit32;
				this.DeathSound = SoundID.NPCDeath35;
				this.value = 90f;
				this.buffImmune[31] = false;
				this.npcSlots = 0.8f;
			}
			else if (this.type >= 524 && this.type <= 527)
			{
				this.name = "Ghoul";
				this.width = 24;
				this.height = 44;
				this.aiStyle = 3;
				this.damage = 50;
				this.defense = 26;
				this.lifeMax = 180;
				this.HitSound = SoundID.NPCHit37;
				this.DeathSound = SoundID.NPCDeath40;
				this.knockBackResist = 0.6f;
				this.value = 500f;
				this.buffImmune[31] = false;
				this.npcSlots = 0.5f;
				switch (this.type - 524)
				{
				case 1:
					this.lifeMax += 70;
					this.defense += 4;
					this.damage += 10;
					this.knockBackResist -= 0.1f;
					this.value += 150f;
					break;
				case 2:
					this.lifeMax += 40;
					this.defense += 6;
					this.damage += 14;
					this.knockBackResist -= 0.1f;
					this.value += 150f;
					break;
				case 3:
					this.lifeMax += 120;
					this.defense += 6;
					this.damage += 4;
					this.knockBackResist -= 0.2f;
					this.value += 250f;
					break;
				}
			}
			else if (this.type >= 528 && this.type <= 529)
			{
				this.name = "Lamia";
				this.width = 24;
				this.height = 44;
				this.aiStyle = 3;
				this.damage = 52;
				this.defense = 28;
				this.lifeMax = 350;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.35f;
				this.value = 600f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 530)
			{
				this.name = "Ravager Scorpion";
				this.width = 50;
				this.height = 20;
				this.aiStyle = 3;
				this.damage = 66;
				this.defense = 24;
				this.lifeMax = 320;
				this.HitSound = SoundID.NPCHit13;
				this.DeathSound = SoundID.NPCDeath19;
				this.knockBackResist = 0.5f;
				this.value = 600f;
				this.timeLeft = NPC.activeTime * 2;
				this.buffImmune[20] = true;
				this.buffImmune[70] = true;
			}
			else if (this.type == 531)
			{
				this.noGravity = true;
				this.name = "Ravager Scorpion";
				this.width = 36;
				this.height = 36;
				this.aiStyle = 40;
				this.damage = 66;
				this.defense = 24;
				this.lifeMax = 320;
				this.HitSound = SoundID.NPCHit13;
				this.DeathSound = SoundID.NPCDeath19;
				this.knockBackResist = 0.5f;
				this.value = 600f;
				this.timeLeft = NPC.activeTime * 2;
				this.buffImmune[20] = true;
				this.buffImmune[70] = true;
			}
			else if (this.type == 532)
			{
				this.name = "Basilisk";
				this.width = 32;
				this.height = 31;
				this.aiStyle = 3;
				this.damage = 65;
				this.defense = 34;
				this.lifeMax = 270;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.3f;
				this.value = 800f;
				this.buffImmune[31] = false;
				this.npcSlots = 0.75f;
			}
			else if (this.type == 533)
			{
				this.name = "Desert Spirit";
				this.width = 28;
				this.height = 62;
				this.aiStyle = 8;
				this.damage = 40;
				this.defense = 20;
				this.lifeMax = 220;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath6;
				this.knockBackResist = 0f;
				this.value = 1200f;
				this.npcSlots = 2f;
				flag = true;
			}
			else if (this.type == 493)
			{
				this.name = "Stardust Pillar";
				this.lifeMax = 20000;
				this.defense = 20;
				this.damage = 0;
				this.width = 130;
				this.height = 270;
				this.aiStyle = 94;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 0f;
				this.knockBackResist = 0f;
				this.noGravity = true;
				this.noTileCollide = true;
				flag = true;
				this.npcSlots = 0f;
			}
			else if (this.type == 402)
			{
				this.displayName = "Milkyway Weaver";
				this.noTileCollide = true;
				this.npcSlots = 1f;
				this.name = "Milkyway Weaver";
				this.width = 32;
				this.height = 32;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 80;
				this.defense = 10;
				this.lifeMax = 1200;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.knockBackResist = 0f;
				this.value = 0f;
				this.scale = 1f;
				flag = true;
			}
			else if (this.type == 405)
			{
				this.name = "Star Cell";
				this.width = 44;
				this.height = 44;
				this.aiStyle = 85;
				this.damage = 120;
				this.defense = 50;
				this.lifeMax = 300;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
				this.noGravity = true;
				this.buffImmune[31] = true;
				this.npcSlots = 2f;
			}
			else if (this.type == 406)
			{
				this.name = "Star Cell";
				this.width = 22;
				this.height = 22;
				this.aiStyle = 95;
				this.damage = 70;
				this.defense = 0;
				this.lifeMax = 300;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.4f;
				this.noGravity = true;
				this.buffImmune[31] = true;
			}
			else if (this.type == 411)
			{
				this.name = "Stardust Soldier";
				this.width = 22;
				this.height = 56;
				this.aiStyle = 3;
				this.damage = 80;
				this.defense = 34;
				this.lifeMax = 700;
				this.HitSound = SoundID.NPCHit6;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.4f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 409)
			{
				this.name = "Twinkle Popper";
				this.width = 34;
				this.height = 42;
				this.aiStyle = 3;
				this.damage = 70;
				this.defense = 40;
				this.lifeMax = 800;
				this.HitSound = SoundID.NPCHit6;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.4f;
				this.buffImmune[31] = false;
				this.npcSlots = 3f;
			}
			else if (this.type == 410)
			{
				this.name = "Twinkle";
				this.width = 22;
				this.height = 22;
				this.aiStyle = 26;
				this.damage = 80;
				this.defense = 10;
				this.lifeMax = 200;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath5;
				this.knockBackResist = 0.3f;
				this.buffImmune[31] = false;
				this.npcSlots = 0.5f;
			}
			else if (this.type == 407)
			{
				this.name = "Flow Invader";
				this.width = 40;
				this.height = 60;
				this.aiStyle = 96;
				this.damage = 70;
				this.defense = 38;
				this.lifeMax = 1500;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.noGravity = true;
				this.knockBackResist = 0.03f;
				this.buffImmune[31] = true;
				this.npcSlots = 3f;
			}
			else if (this.type == 507)
			{
				this.name = "Nebula Pillar";
				this.lifeMax = 20000;
				this.defense = 20;
				this.damage = 0;
				this.width = 130;
				this.height = 270;
				this.aiStyle = 94;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 0f;
				this.knockBackResist = 0f;
				this.noGravity = true;
				this.noTileCollide = true;
				flag = true;
				this.npcSlots = 0f;
			}
			else if (this.type == 423)
			{
				this.name = "Nebula Beast";
				this.width = 50;
				this.height = 44;
				this.aiStyle = 26;
				this.damage = 90;
				this.defense = 46;
				this.lifeMax = 850;
				this.HitSound = SoundID.NPCHit6;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.2f;
				flag = true;
				this.npcSlots = 1f;
			}
			else if (this.type == 421)
			{
				this.name = "Nebula Headcrab";
				this.width = 44;
				this.height = 44;
				this.aiStyle = 85;
				this.damage = 70;
				this.defense = 34;
				this.lifeMax = 330;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
				this.noGravity = true;
				this.buffImmune[31] = true;
				this.npcSlots = 1f;
			}
			else if (this.type == 424)
			{
				this.name = "Nebula Soldier";
				this.width = 22;
				this.height = 56;
				this.aiStyle = 3;
				this.damage = 80;
				this.defense = 30;
				this.lifeMax = 700;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath5;
				this.knockBackResist = 0.6f;
				this.buffImmune[31] = false;
				this.npcSlots = 2f;
			}
			else if (this.type == 420)
			{
				this.name = "Nebula Floater";
				this.width = 40;
				this.height = 40;
				this.aiStyle = 97;
				this.damage = 75;
				this.defense = 20;
				this.lifeMax = 1300;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
				this.noTileCollide = true;
				this.noGravity = true;
				this.npcSlots = 3f;
			}
			else if (this.type == 422)
			{
				this.name = "Vortex Pillar";
				this.lifeMax = 20000;
				this.defense = 20;
				this.damage = 0;
				this.width = 130;
				this.height = 270;
				this.aiStyle = 94;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 0f;
				this.knockBackResist = 0f;
				this.noGravity = true;
				this.noTileCollide = true;
				flag = true;
				this.npcSlots = 0f;
			}
			else if (this.type == 425)
			{
				this.name = "Vortex Rifleman";
				this.width = 30;
				this.height = 56;
				this.aiStyle = 3;
				this.damage = 100;
				this.defense = 40;
				this.lifeMax = 800;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath6;
				this.knockBackResist = 0.4f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 429)
			{
				this.name = "Vortex Soldier";
				this.width = 22;
				this.height = 56;
				this.aiStyle = 3;
				this.damage = 90;
				this.defense = 34;
				this.lifeMax = 700;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath5;
				this.knockBackResist = 0.6f;
				this.buffImmune[31] = false;
				this.npcSlots = 2f;
			}
			else if (this.type == 428)
			{
				this.name = "Alien Larva";
				this.width = 24;
				this.height = 26;
				this.aiStyle = 3;
				this.damage = 50;
				this.defense = 6;
				this.lifeMax = 200;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
			}
			else if (this.type == 427)
			{
				this.name = "Alien Hornet";
				this.width = 40;
				this.height = 28;
				this.aiStyle = 3;
				this.damage = 75;
				this.defense = 20;
				this.lifeMax = 500;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath6;
				this.knockBackResist = 0.5f;
				this.buffImmune[31] = false;
				this.npcSlots = 0.5f;
			}
			else if (this.type == 426)
			{
				this.name = "Alien Queen";
				this.width = 50;
				this.height = 62;
				this.aiStyle = 3;
				this.damage = 100;
				this.defense = 44;
				this.lifeMax = 1000;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath6;
				this.knockBackResist = 0.3f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 517)
			{
				this.name = "Solar Pillar";
				this.lifeMax = 20000;
				this.defense = 20;
				this.damage = 0;
				this.width = 130;
				this.height = 270;
				this.aiStyle = 94;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 0f;
				this.knockBackResist = 0f;
				this.noGravity = true;
				this.noTileCollide = true;
				flag = true;
				this.npcSlots = 0f;
			}
			else if (this.type == 412)
			{
				this.name = "Crawltipede";
				this.width = 20;
				this.height = 20;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 150;
				this.defense = 1000;
				this.lifeMax = 10000;
				this.HitSound = SoundID.NPCHit11;
				this.DeathSound = SoundID.NPCDeath22;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.dontTakeDamage = true;
				this.npcSlots = 2f;
			}
			else if (this.type == 413)
			{
				this.name = "Crawltipede";
				this.width = 20;
				this.height = 20;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 100;
				this.defense = 1000;
				this.lifeMax = 10000;
				this.HitSound = SoundID.NPCHit11;
				this.DeathSound = SoundID.NPCDeath22;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.dontCountMe = true;
				this.dontTakeDamage = true;
				this.npcSlots = 0f;
			}
			else if (this.type == 414)
			{
				this.name = "Crawltipede";
				this.width = 20;
				this.height = 20;
				this.aiStyle = 6;
				this.netAlways = true;
				this.damage = 50;
				this.defense = 0;
				this.lifeMax = 10000;
				this.HitSound = SoundID.NPCHit8;
				this.DeathSound = SoundID.NPCDeath22;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0f;
				this.dontCountMe = true;
				this.takenDamageMultiplier = 10f;
				this.npcSlots = 0f;
			}
			else if (this.type == 415)
			{
				this.name = "Drakomire";
				this.lifeMax = 800;
				this.defense = 32;
				this.damage = 55;
				this.width = 60;
				this.height = 40;
				this.aiStyle = 3;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.2f;
			}
			else if (this.type == 416)
			{
				this.name = "Drakomire Rider";
				this.damage = 80;
				this.defense = 28;
				this.lifeMax = 800;
				this.width = 18;
				this.height = 40;
				this.aiStyle = 75;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.2f;
			}
			else if (this.type == 518)
			{
				this.name = "Solar Spearman";
				this.lifeMax = 1000;
				this.defense = 28;
				this.damage = 80;
				this.width = 22;
				this.height = 56;
				this.aiStyle = 3;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.4f;
			}
			else if (this.type == 417)
			{
				this.npcSlots = 2f;
				this.name = "Sroller";
				this.width = 46;
				this.height = 32;
				this.aiStyle = 39;
				this.damage = 80;
				this.defense = 34;
				this.lifeMax = 700;
				this.HitSound = SoundID.NPCHit7;
				this.knockBackResist = 0f;
				this.DeathSound = SoundID.NPCDeath5;
			}
			else if (this.type == 418)
			{
				this.name = "Corite";
				this.width = 38;
				this.height = 38;
				this.aiStyle = 74;
				this.damage = 70;
				this.defense = 26;
				this.lifeMax = 600;
				this.HitSound = SoundID.NPCHit3;
				this.DeathSound = SoundID.NPCDeath3;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0.2f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
			}
			else if (this.type == 419)
			{
				this.name = "Solar Solenian";
				this.lifeMax = 800;
				this.defense = 30;
				this.damage = 90;
				this.width = 22;
				this.height = 56;
				this.aiStyle = 3;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.4f;
			}
			else if (this.type == 516)
			{
				this.name = "Solar Flare";
				this.width = 26;
				this.height = 26;
				this.aiStyle = 9;
				this.damage = 100;
				this.defense = 0;
				this.lifeMax = 1;
				this.HitSound = null;
				this.DeathSound = null;
				this.noGravity = true;
				this.noTileCollide = false;
				this.alpha = 0;
				this.knockBackResist = 0f;
			}
			else if (this.type == 519)
			{
				this.name = "Solar Goop";
				this.width = 26;
				this.height = 26;
				this.aiStyle = 99;
				this.damage = 120;
				this.defense = 0;
				this.lifeMax = 1;
				this.HitSound = null;
				this.DeathSound = null;
				this.noGravity = true;
				this.noTileCollide = false;
				this.alpha = 0;
				this.knockBackResist = 0f;
			}
			else if (this.type == 162)
			{
				this.name = "Frankenstein";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 65;
				this.defense = 18;
				this.lifeMax = 350;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.3f;
				this.value = 600f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 166)
			{
				this.name = "Swamp Thing";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 70;
				this.defense = 26;
				this.lifeMax = 450;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.2f;
				this.value = 1000f;
				this.buffImmune[31] = false;
				this.buffImmune[20] = true;
			}
			else if (this.type == 253)
			{
				this.noGravity = true;
				this.noTileCollide = true;
				this.name = "Reaper";
				this.width = 24;
				this.height = 44;
				this.aiStyle = 22;
				this.damage = 80;
				this.defense = 22;
				this.lifeMax = 700;
				this.HitSound = SoundID.NPCHit49;
				this.DeathSound = SoundID.NPCDeath51;
				this.alpha = 100;
				this.value = 1500f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.knockBackResist = 0.6f;
			}
			else if (this.type == 158)
			{
				this.npcSlots = 2f;
				this.name = "Vampire";
				this.width = 22;
				this.height = 22;
				this.aiStyle = 14;
				this.damage = 60;
				this.defense = 32;
				this.lifeMax = 750;
				this.HitSound = SoundID.NPCHit1;
				this.knockBackResist = 0.75f;
				this.DeathSound = SoundID.NPCDeath6;
				this.value = 5000f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 159)
			{
				this.npcSlots = 2f;
				this.name = "Vampire";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 80;
				this.defense = 24;
				this.lifeMax = 750;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath6;
				this.knockBackResist = 0.4f;
				this.value = 5000f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 460)
			{
				this.name = "Butcher";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 70;
				this.defense = 30;
				this.lifeMax = 700;
				this.HitSound = SoundID.NPCHit7;
				this.DeathSound = SoundID.NPCDeath17;
				this.knockBackResist = 0.25f;
				this.value = 1000f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 461)
			{
				this.name = "Creature from the Deep";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 60;
				this.defense = 22;
				this.lifeMax = 400;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.3f;
				this.value = 1000f;
			}
			else if (this.type == 462)
			{
				this.name = "Fritz";
				this.width = 20;
				this.height = 24;
				this.aiStyle = 3;
				this.damage = 70;
				this.defense = 14;
				this.lifeMax = 270;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.7f;
				this.value = 600f;
				this.buffImmune[31] = false;
				this.npcSlots = 0.5f;
			}
			else if (this.type == 463)
			{
				this.name = "Nailhead";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 100;
				this.defense = 34;
				this.lifeMax = 4000;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.1f;
				this.value = 3000f;
			}
			else if (this.type == 466)
			{
				this.name = "Psycho";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 70;
				this.defense = 40;
				this.lifeMax = 550;
				this.HitSound = SoundID.NPCHit48;
				this.DeathSound = SoundID.NPCDeath50;
				this.knockBackResist = 0.5f;
				this.value = 1500f;
			}
			else if (this.type == 467)
			{
				this.name = "Deadly Sphere";
				this.width = 22;
				this.height = 22;
				this.aiStyle = 85;
				this.damage = 100;
				this.defense = 80;
				this.lifeMax = 350;
				this.HitSound = SoundID.NPCHit34;
				this.DeathSound = SoundID.NPCDeath37;
				this.value = 900f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
				this.buffImmune[39] = true;
				this.knockBackResist = 0.7f;
				this.noGravity = true;
			}
			else if (this.type == 469)
			{
				this.name = "The Possessed";
				this.width = 38;
				this.height = 26;
				this.aiStyle = 3;
				this.damage = 68;
				this.defense = 28;
				this.lifeMax = 600;
				this.HitSound = SoundID.NPCHit47;
				this.DeathSound = SoundID.NPCDeath49;
				this.knockBackResist = 0.35f;
				this.value = 1300f;
			}
			else if (this.type == 468)
			{
				this.name = "Dr. Man Fly";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 65;
				this.defense = 24;
				this.lifeMax = 500;
				this.HitSound = SoundID.NPCHit35;
				this.DeathSound = SoundID.NPCDeath38;
				this.knockBackResist = 0.6f;
				this.value = 1300f;
			}
			else if (this.type == 477)
			{
				this.noGravity = true;
				this.name = "Mothron";
				this.width = 80;
				this.height = 50;
				this.aiStyle = 88;
				this.damage = 80;
				this.defense = 30;
				this.lifeMax = 6000;
				this.HitSound = SoundID.NPCHit44;
				this.DeathSound = SoundID.NPCDeath46;
				this.value = 50000f;
				this.knockBackResist = 0.2f;
				this.buffImmune[20] = true;
			}
			else if (this.type == 478)
			{
				this.name = "Mothron Egg";
				this.width = 34;
				this.height = 34;
				this.aiStyle = 89;
				this.damage = 0;
				this.defense = 30;
				this.lifeMax = 200;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 0f;
				this.knockBackResist = 0.7f;
				flag = true;
				this.npcSlots = 0f;
			}
			else if (this.type == 479)
			{
				this.name = "Mothron Spawn";
				this.width = 46;
				this.height = 30;
				this.aiStyle = 90;
				this.damage = 50;
				this.defense = 14;
				this.lifeMax = 700;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.3f;
				this.value = 0f;
				this.npcSlots = 0.1f;
			}
			else if (this.type == 26)
			{
				this.name = "Goblin Peon";
				this.scale = 0.9f;
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 12;
				this.defense = 4;
				this.lifeMax = 60;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.8f;
				this.value = 100f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 27)
			{
				this.name = "Goblin Thief";
				this.scale = 0.95f;
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 20;
				this.defense = 6;
				this.lifeMax = 80;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.7f;
				this.value = 200f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 28)
			{
				this.name = "Goblin Warrior";
				this.scale = 1.1f;
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 25;
				this.defense = 8;
				this.lifeMax = 110;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
				this.value = 150f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 29)
			{
				this.name = "Goblin Sorcerer";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 8;
				this.damage = 20;
				this.defense = 2;
				this.lifeMax = 40;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.6f;
				this.value = 200f;
			}
			else if (this.type == 30)
			{
				this.name = "Chaos Ball";
				this.width = 16;
				this.height = 16;
				this.aiStyle = 9;
				this.damage = 20;
				this.defense = 0;
				this.lifeMax = 1;
				this.HitSound = SoundID.NPCHit3;
				this.DeathSound = SoundID.NPCDeath3;
				this.noGravity = true;
				this.noTileCollide = true;
				this.alpha = 100;
				this.knockBackResist = 0f;
			}
			else if (this.type == 111)
			{
				this.name = "Goblin Archer";
				this.scale = 0.95f;
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 20;
				this.defense = 6;
				this.lifeMax = 80;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.7f;
				this.value = 200f;
				this.buffImmune[31] = false;
			}
			else if (this.type == 471)
			{
				this.name = "Goblin Summoner";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 80;
				this.defense = 26;
				this.lifeMax = 2000;
				this.HitSound = SoundID.NPCHit40;
				this.DeathSound = SoundID.NPCDeath42;
				this.knockBackResist = 0.15f;
				this.value = 5000f;
				flag = true;
			}
			else if (this.type == 472)
			{
				this.name = "Shadowflame Apparition";
				this.width = 40;
				this.height = 24;
				this.aiStyle = 86;
				this.damage = 50;
				this.defense = 18;
				this.lifeMax = 180;
				this.HitSound = SoundID.NPCHit52;
				this.DeathSound = SoundID.NPCDeath55;
				this.knockBackResist = 0f;
				this.value = 0f;
				flag = true;
				this.npcSlots = 0.1f;
			}
			else if (this.type == 520)
			{
				this.name = "Martian Walker";
				this.width = 34;
				this.height = 110;
				this.aiStyle = 3;
				this.damage = 60;
				this.defense = 40;
				this.lifeMax = 2000;
				this.HitSound = SoundID.NPCHit4;
				this.DeathSound = SoundID.NPCDeath14;
				this.knockBackResist = 0f;
				this.buffImmune[20] = true;
				this.buffImmune[24] = true;
			}
			else if (this.type == 521)
			{
				this.name = "Ancient Vision";
				this.width = 60;
				this.height = 60;
				this.aiStyle = 86;
				this.damage = 90;
				this.defense = 30;
				this.lifeMax = 2000;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath6;
				this.knockBackResist = 0f;
				flag = true;
			}
			else if (this.type == 522)
			{
				this.name = "Ancient Light";
				this.width = 26;
				this.height = 26;
				this.aiStyle = 100;
				this.damage = 120;
				this.defense = 0;
				this.lifeMax = 1;
				this.HitSound = null;
				this.DeathSound = null;
				this.noGravity = true;
				this.noTileCollide = true;
				this.alpha = 0;
				this.knockBackResist = 0f;
				this.chaseable = false;
			}
			else if (this.type == 523)
			{
				this.name = "Ending's Prophecy";
				this.width = 42;
				this.height = 42;
				this.aiStyle = 101;
				this.damage = 30;
				this.defense = 0;
				this.lifeMax = 500;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath6;
				this.noGravity = true;
				this.noTileCollide = true;
				this.alpha = 0;
				this.knockBackResist = 0f;
				this.chaseable = false;
				this.alpha = 255;
				this.canGhostHeal = false;
			}
			else if (this.type == 534)
			{
				this.name = "Tortured Soul";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 14;
				this.defense = 20;
				this.lifeMax = 400;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.3f;
				this.value = 0f;
				this.buffImmune[31] = false;
				this.lavaImmune = true;
				this.netAlways = true;
				this.rarity = 1;
			}
			else if (this.type == 535)
			{
				this.name = "Spiked Slime";
				this.width = 24;
				this.height = 18;
				this.aiStyle = 1;
				this.damage = 14;
				this.defense = 5;
				this.lifeMax = 50;
				this.scale = 1.1f;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.alpha = 0;
				this.value = 40f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 536)
			{
				this.name = "The Bride";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 3;
				this.damage = 14;
				this.defense = 8;
				this.lifeMax = 200;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath2;
				this.knockBackResist = 0.5f;
				this.value = 1000f;
				this.buffImmune[31] = false;
				this.rarity = 2;
			}
			else if (this.type == 537)
			{
				this.npcSlots = 2f;
				this.name = "Sand Slime";
				this.width = 30;
				this.height = 24;
				this.aiStyle = 1;
				this.damage = 11;
				this.defense = 8;
				this.lifeMax = 60;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.alpha = 50;
				this.color = new Color(255, 250, 0, 0) * 0.2f;
				this.value = 75f;
				this.knockBackResist = 0.8f;
				this.buffImmune[20] = true;
				this.buffImmune[31] = false;
			}
			else if (this.type == 538)
			{
				this.name = "Squirrel";
				this.width = 18;
				this.height = 20;
				this.aiStyle = 7;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.catchItem = 3563;
			}
			else if (this.type == 539)
			{
				this.name = "Squirrel";
				this.width = 18;
				this.height = 20;
				this.aiStyle = 7;
				this.damage = 0;
				this.defense = 0;
				this.lifeMax = 5;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.catchItem = 3564;
				this.rarity = 3;
			}
			else if (this.type == 541)
			{
				this.name = "Sand Elemental";
				this.width = 30;
				this.height = 76;
				this.aiStyle = 102;
				this.damage = 40;
				this.defense = 30;
				this.lifeMax = 5000;
				this.HitSound = SoundID.NPCHit23;
				this.DeathSound = SoundID.NPCDeath39;
				this.knockBackResist = 0.05f;
				this.value = (float)Item.buyPrice(0, 1, 50, 0);
				this.buffImmune[20] = true;
				this.buffImmune[44] = true;
				this.rarity = 2;
			}
			else if (this.type == 542)
			{
				this.noGravity = true;
				this.name = "Sand Shark";
				this.width = 100;
				this.height = 24;
				this.aiStyle = 103;
				this.damage = 50;
				this.defense = 20;
				this.lifeMax = 360;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 400f;
				this.knockBackResist = 0.9f;
				this.behindTiles = true;
			}
			else if (this.type == 543)
			{
				this.noGravity = true;
				this.name = "Bone Biter";
				this.width = 100;
				this.height = 24;
				this.aiStyle = 103;
				this.damage = 60;
				this.defense = 24;
				this.lifeMax = 380;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 400f;
				this.knockBackResist = 0.8f;
				this.behindTiles = true;
			}
			else if (this.type == 544)
			{
				this.noGravity = true;
				this.name = "Flesh Reaver";
				this.width = 100;
				this.height = 24;
				this.aiStyle = 103;
				this.damage = 64;
				this.defense = 22;
				this.lifeMax = 400;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 400f;
				this.knockBackResist = 0.8f;
				this.behindTiles = true;
			}
			else if (this.type == 545)
			{
				this.noGravity = true;
				this.name = "Crystal Thresher";
				this.width = 100;
				this.height = 24;
				this.aiStyle = 103;
				this.damage = 54;
				this.defense = 26;
				this.lifeMax = 450;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 400f;
				this.knockBackResist = 0.7f;
				this.behindTiles = true;
			}
			else if (this.type == 546)
			{
				this.name = "Angry Tumbler";
				this.width = 30;
				this.height = 30;
				this.aiStyle = 26;
				this.damage = 30;
				this.defense = 10;
				this.lifeMax = 60;
				this.HitSound = SoundID.NPCHit11;
				this.DeathSound = SoundID.NPCDeath15;
				this.knockBackResist = 0.8f;
				this.value = 130f;
				this.behindTiles = true;
			}
			else if (this.type == 547)
			{
				this.name = "Needs a better name";
				this.width = 16;
				this.height = 16;
				this.aiStyle = 104;
				this.defense = 10;
				this.lifeMax = 10;
				this.HitSound = SoundID.NPCHit11;
				this.DeathSound = SoundID.NPCDeath15;
				this.knockBackResist = 1f;
				this.noGravity = true;
				this.noTileCollide = true;
			}
			else if (this.type == 548)
			{
				this.name = "Elder Crystal";
				this.width = 40;
				this.height = 40;
				this.aiStyle = 105;
				this.defense = 14;
				this.lifeMax = 1000;
				this.HitSound = SoundID.DD2_CrystalCartImpact;
				this.DeathSound = SoundID.NPCDeath15;
				this.knockBackResist = 0f;
				this.friendly = true;
				this.npcSlots = 0f;
				this.hide = true;
				if (Main.hardMode && NPC.downedMechBossAny)
				{
					this.defense = 18;
					this.lifeMax = 3000;
				}
				if (NPC.downedGolemBoss && Main.hardMode)
				{
					this.defense = 20;
					this.lifeMax = 5000;
				}
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 549)
			{
				this.name = "Mysterious Portal";
				this.lifeMax = 5;
				this.defense = 20;
				this.damage = 0;
				this.width = 78;
				this.height = 130;
				this.aiStyle = 106;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.value = 0f;
				this.knockBackResist = 0f;
				this.noGravity = true;
				this.noTileCollide = true;
				flag = true;
				this.npcSlots = 0f;
				this.behindTiles = true;
				this.dontTakeDamage = true;
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 552)
			{
				this.name = "Goblin";
				this.lifeMax = 30;
				this.defense = 14;
				this.damage = 18;
				this.width = 18;
				this.height = 40;
				this.aiStyle = 107;
				this.HitSound = SoundID.DD2_GoblinHurt;
				this.DeathSound = SoundID.DD2_GoblinDeath;
				this.knockBackResist = 0.2f;
				this.value = 0f;
				this.npcSlots = 0f;
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 553)
			{
				this.name = "Goblin";
				this.lifeMax = 170;
				this.defense = 20;
				this.damage = 46;
				this.width = 18;
				this.height = 40;
				this.aiStyle = 107;
				this.HitSound = SoundID.DD2_GoblinHurt;
				this.DeathSound = SoundID.DD2_GoblinDeath;
				this.knockBackResist = 0.2f;
				this.value = 0f;
				this.npcSlots = 0f;
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 554)
			{
				this.name = "Goblin";
				this.lifeMax = 560;
				this.defense = 28;
				this.damage = 70;
				this.width = 18;
				this.height = 40;
				this.aiStyle = 107;
				this.HitSound = SoundID.DD2_GoblinHurt;
				this.DeathSound = SoundID.DD2_GoblinDeath;
				this.knockBackResist = 0.15f;
				this.value = 0f;
				this.npcSlots = 0f;
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 561)
			{
				this.name = "Javelin Thrower";
				this.lifeMax = 60;
				this.defense = 18;
				this.damage = 30;
				this.width = 26;
				this.height = 52;
				this.aiStyle = 107;
				this.HitSound = SoundID.DD2_JavelinThrowersHurt;
				this.DeathSound = SoundID.DD2_JavelinThrowersDeath;
				this.knockBackResist = 0.1f;
				this.value = 0f;
				this.npcSlots = 0f;
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 562)
			{
				this.name = "Javelin Thrower";
				this.lifeMax = 300;
				this.defense = 28;
				this.damage = 60;
				this.width = 26;
				this.height = 52;
				this.aiStyle = 107;
				this.HitSound = SoundID.DD2_JavelinThrowersHurt;
				this.DeathSound = SoundID.DD2_JavelinThrowersDeath;
				this.knockBackResist = 0.1f;
				this.value = 0f;
				this.npcSlots = 0f;
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 563)
			{
				this.name = "Javelin Thrower";
				this.lifeMax = 1000;
				this.defense = 38;
				this.damage = 80;
				this.width = 26;
				this.height = 52;
				this.aiStyle = 107;
				this.HitSound = SoundID.DD2_JavelinThrowersHurt;
				this.DeathSound = SoundID.DD2_JavelinThrowersDeath;
				this.knockBackResist = 0.05f;
				this.value = 0f;
				this.npcSlots = 0f;
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 555)
			{
				this.name = "Goblin Bomber";
				this.lifeMax = 50;
				this.defense = 16;
				this.damage = 26;
				this.width = 18;
				this.height = 40;
				this.aiStyle = 107;
				this.HitSound = SoundID.DD2_GoblinBomberHurt;
				this.DeathSound = SoundID.DD2_GoblinBomberDeath;
				this.knockBackResist = 0.2f;
				this.value = 0f;
				this.npcSlots = 0f;
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 556)
			{
				this.name = "Goblin Bomber";
				this.lifeMax = 200;
				this.defense = 26;
				this.damage = 55;
				this.width = 18;
				this.height = 40;
				this.aiStyle = 107;
				this.HitSound = SoundID.DD2_GoblinBomberHurt;
				this.DeathSound = SoundID.DD2_GoblinBomberDeath;
				this.knockBackResist = 0.2f;
				this.value = 0f;
				this.npcSlots = 0f;
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 557)
			{
				this.name = "Goblin Bomber";
				this.lifeMax = 700;
				this.defense = 34;
				this.damage = 75;
				this.width = 18;
				this.height = 40;
				this.aiStyle = 107;
				this.HitSound = SoundID.DD2_GoblinBomberHurt;
				this.DeathSound = SoundID.DD2_GoblinBomberDeath;
				this.knockBackResist = 0.15f;
				this.value = 0f;
				this.npcSlots = 0f;
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 558)
			{
				this.name = "Wyvern";
				this.width = 38;
				this.height = 38;
				this.aiStyle = 108;
				this.damage = 30;
				this.defense = 4;
				this.lifeMax = 60;
				this.HitSound = SoundID.DD2_WyvernHurt;
				this.DeathSound = SoundID.DD2_WyvernDeath;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0.2f;
				this.npcSlots = 0f;
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 559)
			{
				this.name = "Wyvern";
				this.width = 38;
				this.height = 38;
				this.aiStyle = 108;
				this.damage = 75;
				this.defense = 16;
				this.lifeMax = 180;
				this.HitSound = SoundID.DD2_WyvernHurt;
				this.DeathSound = SoundID.DD2_WyvernDeath;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0.2f;
				this.npcSlots = 0f;
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 560)
			{
				this.name = "Wyvern";
				this.width = 38;
				this.height = 38;
				this.aiStyle = 108;
				this.damage = 100;
				this.defense = 30;
				this.lifeMax = 600;
				this.HitSound = SoundID.DD2_WyvernHurt;
				this.DeathSound = SoundID.DD2_WyvernDeath;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0.05f;
				this.npcSlots = 0f;
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 550)
			{
				this.townNPC = true;
				this.friendly = true;
				this.name = "Tavernkeep";
				this.width = 18;
				this.height = 40;
				this.aiStyle = 7;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath1;
				this.knockBackResist = 0.5f;
			}
			else if (this.type == 576)
			{
				this.name = "Ogre";
				this.lifeMax = 5000;
				this.defense = 34;
				this.damage = 70;
				this.width = 96;
				this.height = 124;
				this.aiStyle = 107;
				this.HitSound = SoundID.DD2_OgreHurt;
				this.DeathSound = SoundID.DD2_OgreDeath;
				this.knockBackResist = 0f;
				this.value = 0f;
				this.npcSlots = 0f;
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 577)
			{
				this.name = "Ogre";
				this.lifeMax = 13000;
				this.defense = 40;
				this.damage = 90;
				this.width = 96;
				this.height = 124;
				this.aiStyle = 107;
				this.HitSound = SoundID.DD2_OgreHurt;
				this.DeathSound = SoundID.DD2_OgreDeath;
				this.knockBackResist = 0f;
				this.value = 0f;
				this.npcSlots = 0f;
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 568)
			{
				this.name = "Wither Beast";
				this.lifeMax = 500;
				this.defense = 30;
				this.damage = 50;
				this.width = 18;
				this.height = 40;
				this.aiStyle = 107;
				this.HitSound = SoundID.DD2_WitherBeastHurt;
				this.DeathSound = SoundID.DD2_WitherBeastDeath;
				this.knockBackResist = 0.15f;
				this.value = 0f;
				this.npcSlots = 0f;
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 569)
			{
				this.name = "Wither Beast";
				this.lifeMax = 1400;
				this.defense = 40;
				this.damage = 80;
				this.width = 18;
				this.height = 40;
				this.aiStyle = 107;
				this.HitSound = SoundID.DD2_WitherBeastHurt;
				this.DeathSound = SoundID.DD2_WitherBeastDeath;
				this.knockBackResist = 0.05f;
				this.value = 0f;
				this.npcSlots = 0f;
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 566)
			{
				this.name = "Old One's Skeleton";
				this.lifeMax = 25;
				this.defense = 12;
				this.damage = 18;
				this.width = 18;
				this.height = 40;
				this.aiStyle = 107;
				this.HitSound = SoundID.DD2_SkeletonHurt;
				this.DeathSound = SoundID.DD2_SkeletonDeath;
				this.knockBackResist = 0.3f;
				this.value = 0f;
				this.npcSlots = 0f;
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 567)
			{
				this.name = "Old One's Skeleton";
				this.lifeMax = 480;
				this.defense = 22;
				this.damage = 70;
				this.width = 18;
				this.height = 40;
				this.aiStyle = 107;
				this.HitSound = SoundID.DD2_SkeletonHurt;
				this.DeathSound = SoundID.DD2_SkeletonDeath;
				this.knockBackResist = 0.2f;
				this.value = 0f;
				this.npcSlots = 0f;
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 572)
			{
				this.name = "Kobold";
				this.lifeMax = 260;
				this.defense = 26;
				this.damage = 60;
				this.width = 18;
				this.height = 40;
				this.aiStyle = 107;
				this.HitSound = SoundID.DD2_KoboldHurt;
				this.DeathSound = SoundID.DD2_KoboldDeath;
				this.knockBackResist = 0.2f;
				this.value = 0f;
				this.npcSlots = 0f;
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 573)
			{
				this.name = "Kobold";
				this.lifeMax = 800;
				this.defense = 32;
				this.damage = 80;
				this.width = 18;
				this.height = 40;
				this.aiStyle = 107;
				this.HitSound = SoundID.DD2_KoboldHurt;
				this.DeathSound = SoundID.DD2_KoboldDeath;
				this.knockBackResist = 0.1f;
				this.value = 0f;
				this.npcSlots = 0f;
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 570)
			{
				this.name = "Drakin";
				this.lifeMax = 900;
				this.defense = 30;
				this.damage = 60;
				this.width = 42;
				this.height = 58;
				this.aiStyle = 107;
				this.HitSound = SoundID.DD2_DrakinHurt;
				this.DeathSound = SoundID.DD2_DrakinDeath;
				this.knockBackResist = 0f;
				this.value = 0f;
				this.npcSlots = 0f;
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 571)
			{
				this.name = "Drakin";
				this.lifeMax = 3000;
				this.defense = 40;
				this.damage = 90;
				this.width = 42;
				this.height = 58;
				this.aiStyle = 107;
				this.HitSound = SoundID.DD2_DrakinHurt;
				this.DeathSound = SoundID.DD2_DrakinDeath;
				this.knockBackResist = 0f;
				this.value = 0f;
				this.npcSlots = 0f;
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 564)
			{
				this.name = "Dark Mage";
				this.lifeMax = 800;
				this.defense = 18;
				this.damage = 40;
				this.width = 34;
				this.height = 62;
				this.aiStyle = 109;
				this.HitSound = SoundID.DD2_DarkMageHurt;
				this.DeathSound = SoundID.DD2_DarkMageDeath;
				this.knockBackResist = 0f;
				this.value = 0f;
				this.npcSlots = 0f;
				this.noGravity = true;
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 565)
			{
				this.name = "Dark Mage";
				this.lifeMax = 4000;
				this.defense = 38;
				this.damage = 90;
				this.width = 34;
				this.height = 62;
				this.aiStyle = 109;
				this.HitSound = SoundID.DD2_DarkMageHurt;
				this.DeathSound = SoundID.DD2_DarkMageDeath;
				this.knockBackResist = 0f;
				this.value = 0f;
				this.npcSlots = 0f;
				this.noGravity = true;
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 574)
			{
				this.name = "Kobold Glider";
				this.width = 38;
				this.height = 38;
				this.aiStyle = 108;
				this.damage = 50;
				this.defense = 16;
				this.lifeMax = 170;
				this.HitSound = SoundID.DD2_KoboldFlyerHurt;
				this.DeathSound = SoundID.DD2_KoboldFlyerDeath;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0.4f;
				this.npcSlots = 0f;
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 575)
			{
				this.name = "Kobold Glider";
				this.width = 38;
				this.height = 38;
				this.aiStyle = 108;
				this.damage = 80;
				this.defense = 32;
				this.lifeMax = 580;
				this.HitSound = SoundID.DD2_KoboldFlyerHurt;
				this.DeathSound = SoundID.DD2_KoboldFlyerDeath;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0.25f;
				this.npcSlots = 0f;
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 551)
			{
				this.name = "Betsy";
				this.damage = 80;
				this.defense = 38;
				this.lifeMax = 50000;
				this.width = 190;
				this.height = 90;
				this.aiStyle = 110;
				this.HitSound = SoundID.DD2_BetsyHurt;
				this.DeathSound = SoundID.DD2_BetsyDeath;
				this.knockBackResist = 0f;
				this.value = 0f;
				this.noGravity = true;
				this.noTileCollide = true;
				this.npcSlots = 0f;
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 578)
			{
				this.name = "Lightning Bug";
				this.width = 30;
				this.height = 24;
				this.aiStyle = 111;
				this.damage = 80;
				this.defense = 36;
				this.lifeMax = 500;
				this.HitSound = SoundID.DD2_LightningBugHurt;
				this.DeathSound = SoundID.DD2_LightningBugDeath;
				this.noGravity = true;
				this.noTileCollide = true;
				this.knockBackResist = 0.8f;
				this.npcSlots = 0f;
				this.lavaImmune = true;
				this.LazySetLiquidMovementDD2();
				this.netAlways = true;
			}
			else if (this.type == 579)
			{
				this.friendly = true;
				this.name = "Unconscious Man";
				this.width = 34;
				this.height = 8;
				this.aiStyle = 0;
				this.damage = 10;
				this.defense = 15;
				this.lifeMax = 250;
				this.HitSound = SoundID.NPCHit1;
				this.DeathSound = SoundID.NPCDeath6;
				this.knockBackResist = 0.5f;
				this.scale = 1f;
				this.rarity = 1;
			}
			if (flag)
			{
				for (int num2 = 0; num2 < 206; num2++)
				{
					this.buffImmune[num2] = true;
				}
			}
			if (Main.dedServ)
			{
				this.frame = default(Rectangle);
			}
			else if (Main.NPCLoaded[this.type])
			{
				this.frame = new Rectangle(0, 0, Main.npcTexture[this.type].Width, Main.npcTexture[this.type].Height / Main.npcFrameCount[this.type]);
			}
			else
			{
				this.setFrameSize = true;
			}
			if (scaleOverride > 0f)
			{
				int num3 = (int)((float)this.width * this.scale);
				int num4 = (int)((float)this.height * this.scale);
				this.position.X = this.position.X + (float)(num3 / 2);
				this.position.Y = this.position.Y + (float)num4;
				this.scale = scaleOverride;
				this.width = (int)((float)this.width * this.scale);
				this.height = (int)((float)this.height * this.scale);
				if (this.height == 16 || this.height == 32)
				{
					this.height++;
				}
				this.position.X = this.position.X - (float)(this.width / 2);
				this.position.Y = this.position.Y - (float)this.height;
			}
			else
			{
				this.width = (int)((float)this.width * this.scale);
				this.height = (int)((float)this.height * this.scale);
			}
			if (this.buffImmune[20])
			{
				this.buffImmune[70] = true;
			}
			if (this.buffImmune[39])
			{
				this.buffImmune[153] = true;
			}
			this.life = this.lifeMax;
			this.defDamage = this.damage;
			this.defDefense = this.defense;
			this.netID = this.type;
			this.displayName = Lang.npcName(this.netID, false);
			if (Main.expertMode)
			{
				this.scaleStats();
			}
		}

		private void LazySetLiquidMovementDD2()
		{
			this.waterMovementSpeed = 1f;
			this.lavaMovementSpeed = 1f;
			this.honeyMovementSpeed = 1f;
		}

		public static void setWorldMonsters()
		{
			UnifiedRandom unifiedRandom = new UnifiedRandom(Main.worldID);
			int num = unifiedRandom.Next(3);
			int num2 = unifiedRandom.Next(3);
			while (num == num2)
			{
				num = unifiedRandom.Next(3);
			}
			for (int i = 0; i < 2; i++)
			{
				int num3 = num;
				if (i == 1)
				{
					num3 = num2;
				}
				for (int j = 0; j < 3; j++)
				{
					if (num3 == 0)
					{
						NPC.cavernMonsterType[i, j] = unifiedRandom.Next(494, 496);
					}
					else if (num3 == 1)
					{
						NPC.cavernMonsterType[i, j] = unifiedRandom.Next(496, 498);
					}
					else
					{
						NPC.cavernMonsterType[i, j] = unifiedRandom.Next(498, 507);
					}
				}
			}
		}

		public void scaleStats()
		{
			if (!Main.expertMode)
			{
				return;
			}
			if (this.friendly)
			{
				int arg_1C_0 = this.life;
			}
			if ((this.type < 0 || !NPCID.Sets.NeedsExpertScaling[this.type]) && (this.life <= 5 || this.damage == 0 || this.friendly || this.townNPC))
			{
				return;
			}
			bool flag = this.type >= 0 && NPCID.Sets.ProjectileNPC[this.type];
			if (this.type != 5 && (this.type < 13 || this.type > 15) && this.type != 267 && (this.type < 113 || this.type > 119) && Main.hardMode && !this.boss && this.lifeMax < 1000)
			{
				int num = this.damage + this.defense + this.lifeMax / 4;
				if (num == 0)
				{
					num = 1;
				}
				int num2 = 80;
				if (NPC.downedPlantBoss)
				{
					num2 += 20;
				}
				if (num < num2)
				{
					float num3 = (float)(num2 / num);
					this.damage = (int)((double)((float)this.damage * num3) * 0.9);
					if (!flag)
					{
						this.defense = (int)((float)this.defense * num3);
						this.lifeMax = (int)((double)((float)this.lifeMax * num3) * 1.1);
						this.value = (float)((int)((double)(this.value * num3) * 0.8));
					}
				}
			}
			if (this.type == 210 || this.type == 211)
			{
				this.damage = (int)((float)this.damage * 0.6f);
				this.lifeMax = (int)((float)this.lifeMax * 0.8f);
				this.defense = (int)((float)this.defense * 0.8f);
			}
			if (!flag)
			{
				this.value = (float)((int)((double)this.value * 2.5));
				this.lifeMax = (int)((float)this.lifeMax * Main.expertLife);
			}
			this.damage = (int)((float)this.damage * Main.expertDamage);
			this.knockBackResist *= Main.expertKnockBack;
			int num4 = 0;
			float num5 = 1f;
			float num6 = 0.35f;
			if (Main.netMode != 0)
			{
				for (int i = 0; i < 255; i++)
				{
					if (Main.player[i].active)
					{
						num4++;
					}
				}
				for (int j = 1; j < num4; j++)
				{
					num5 += num6;
					num6 += (1f - num6) / 3f;
				}
			}
			if (num5 > 8f)
			{
				num5 = (num5 * 2f + 8f) / 3f;
			}
			if (num5 > 1000f)
			{
				num5 = 1000f;
			}
			if (this.type == 5)
			{
				this.lifeMax = (int)((float)this.lifeMax * 0.75f);
			}
			if (this.type == 4)
			{
				this.lifeMax = (int)((double)this.lifeMax * 0.65 * (double)num5);
			}
			if (this.type >= 13 && this.type <= 15)
			{
				this.lifeMax = (int)((double)this.lifeMax * 0.7 * (double)num5);
				if (this.type == 13)
				{
					this.damage = (int)((double)this.damage * 1.1);
				}
				if (this.type == 14)
				{
					this.damage = (int)((double)this.damage * 0.8);
				}
				if (this.type == 15)
				{
					this.damage = (int)((double)this.damage * 0.8);
				}
				this.scale *= 1.2f;
				this.defense += 2;
			}
			if (this.type == 266)
			{
				this.lifeMax = (int)((double)this.lifeMax * 0.85 * (double)num5);
				this.damage = (int)((double)this.damage * 0.9);
				this.scale *= 1.05f;
			}
			if (this.type == 50)
			{
				this.lifeMax = (int)((double)this.lifeMax * 0.7 * (double)num5);
				this.damage = (int)((double)this.damage * 0.8);
			}
			if (this.type == 471)
			{
				this.lifeMax = (int)((double)this.lifeMax * 0.85 * (double)(num5 * 2f + 1f) / 3.0);
			}
			if (this.type == 472)
			{
				this.lifeMax = (int)((double)this.lifeMax * 0.85 * (double)(num5 + 1f) / 2.0);
				this.damage = (int)((double)this.damage * 0.8);
			}
			if (this.type == 222)
			{
				this.lifeMax = (int)((double)this.lifeMax * 0.7 * (double)num5);
				this.damage = (int)((double)this.damage * 0.9);
			}
			if (this.type == 210 || this.type == 211)
			{
				this.lifeMax = (int)((double)this.lifeMax * 0.75);
			}
			if (this.type == 35)
			{
				this.lifeMax = (int)((float)this.lifeMax * num5);
				this.damage = (int)((double)this.damage * 1.1);
			}
			else if (this.type == 36)
			{
				this.lifeMax = (int)((double)this.lifeMax * 1.3 * (double)num5);
				this.damage = (int)((double)this.damage * 1.1);
			}
			if (this.type == 113 || this.type == 114)
			{
				this.defense += 6;
				this.lifeMax = (int)((double)this.lifeMax * 0.7 * (double)num5);
				this.damage = (int)((double)this.damage * 1.5);
			}
			else if (this.type == 115)
			{
				this.lifeMax = (int)((double)this.lifeMax * 0.7 * (double)num5);
				if (num4 > 1)
				{
					this.knockBackResist *= 1f - num6;
				}
				this.defense += 6;
			}
			else if (this.type == 116)
			{
				this.lifeMax = (int)((double)this.lifeMax * 0.7 * (double)num5);
				if (num4 > 1)
				{
					this.knockBackResist *= 1f - num6;
				}
			}
			else if (this.type == 117 || this.type == 118 || this.type == 119)
			{
				this.lifeMax = (int)((double)this.lifeMax * 0.8);
			}
			if (this.type >= 134 && this.type <= 136)
			{
				this.lifeMax = (int)((double)this.lifeMax * 0.75 * (double)num5);
				if (this.type == 134)
				{
					this.damage *= 2;
				}
				if (this.type == 135)
				{
					this.damage = (int)((double)this.damage * 0.85);
				}
				if (this.type == 136)
				{
					this.damage = (int)((double)this.damage * 0.85);
				}
				this.scale *= 1.05f;
			}
			else if (this.type == 139)
			{
				this.lifeMax = (int)((double)this.lifeMax * 0.75 * (double)(num5 * 2f + 1f) / 3.0);
				this.damage = (int)((double)this.damage * 0.8);
				this.scale *= 1.05f;
			}
			if (this.type >= 127 && this.type <= 131)
			{
				this.lifeMax = (int)((double)this.lifeMax * 0.75 * (double)num5);
				this.damage = (int)((double)this.damage * 0.85);
			}
			if (this.type >= 125 && this.type <= 126)
			{
				this.lifeMax = (int)((double)this.lifeMax * 0.75 * (double)num5);
				this.damage = (int)((double)this.damage * 0.85);
			}
			if (this.type >= 262 && this.type <= 262)
			{
				this.lifeMax = (int)((double)this.lifeMax * 0.7 * (double)num5);
				this.damage = (int)((double)this.damage * 1.15);
			}
			if (this.type >= 245 && this.type <= 249)
			{
				this.lifeMax = (int)((double)this.lifeMax * 0.75 * (double)num5);
				this.damage = (int)((double)this.damage * 0.8);
			}
			if (this.type == 370)
			{
				this.lifeMax = (int)((double)this.lifeMax * 0.6 * (double)num5);
				this.damage = (int)((double)this.damage * 0.7);
			}
			else if (this.type == 371 || this.type == 372 || this.type == 373)
			{
				if (this.type != 371)
				{
					this.lifeMax = (int)((double)this.lifeMax * 0.75);
				}
				this.damage = (int)((double)this.damage * 0.75);
			}
			if (this.type == 439 || this.type == 440 || (this.type >= 454 && this.type <= 459) || this.type == 522 || this.type == 523)
			{
				if (this.type != 522)
				{
					this.lifeMax = (int)((float)this.lifeMax * 0.625f * num5);
				}
				this.damage = (int)((double)this.damage * 0.75);
			}
			if (this.type == 397 || this.type == 396 || this.type == 398)
			{
				this.lifeMax = (int)((double)this.lifeMax * 0.75 * (double)num5);
				this.damage = (int)((double)this.damage * 0.75);
			}
			if (this.type == 551)
			{
				this.lifeMax = (int)((double)this.lifeMax * 0.75 * (double)num5);
				this.damage = (int)((double)this.damage * 0.65);
			}
			switch (this.type)
			{
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 315:
			case 326:
			case 329:
			case 330:
				this.lifeMax = (int)((double)this.lifeMax * 0.75);
				this.damage = (int)((double)this.damage * 0.75);
				break;
			case 325:
			case 327:
				this.lifeMax = (int)((double)this.lifeMax * 0.65);
				this.damage = (int)((double)this.damage * 0.75);
				break;
			}
			switch (this.type)
			{
			case 338:
			case 339:
			case 340:
			case 341:
			case 342:
			case 343:
			case 347:
			case 348:
			case 349:
			case 350:
				this.lifeMax = (int)((double)this.lifeMax * 0.75);
				this.damage = (int)((double)this.damage * 0.75);
				break;
			case 344:
			case 345:
			case 346:
				this.lifeMax = (int)((double)this.lifeMax * 0.65);
				this.damage = (int)((double)this.damage * 0.75);
				break;
			}
			this.defDefense = this.defense;
			this.defDamage = this.damage;
			this.life = this.lifeMax;
		}

		public static bool GetNPCLocation(int i, bool seekHead, bool averageDirection, out int index, out Vector2 pos)
		{
			int num = Main.npc[i].type;
			int num2 = -1;
			int num3 = -1;
			int num4 = num;
			if (num4 <= 100)
			{
				switch (num4)
				{
				case 7:
					num3 = 9;
					num2 = 0;
					break;
				case 8:
				case 9:
					num3 = 7;
					num2 = 1;
					break;
				case 10:
					num3 = 12;
					num2 = 0;
					break;
				case 11:
				case 12:
					num3 = 10;
					num2 = 1;
					break;
				case 13:
					num3 = 15;
					num2 = 0;
					break;
				case 14:
				case 15:
					num3 = 13;
					num2 = 1;
					break;
				default:
					switch (num4)
					{
					case 39:
						num3 = 41;
						num2 = 0;
						break;
					case 40:
					case 41:
						num3 = 39;
						num2 = 1;
						break;
					default:
						switch (num4)
						{
						case 87:
							num3 = 92;
							num2 = 0;
							break;
						case 88:
						case 89:
						case 90:
						case 91:
						case 92:
							num3 = 87;
							num2 = 1;
							break;
						case 95:
							num3 = 97;
							num2 = 0;
							break;
						case 96:
						case 97:
							num3 = 95;
							num2 = 1;
							break;
						case 98:
							num3 = 100;
							num2 = 0;
							break;
						case 99:
						case 100:
							num3 = 98;
							num2 = 1;
							break;
						}
						break;
					}
					break;
				}
			}
			else if (num4 <= 136)
			{
				switch (num4)
				{
				case 117:
					num3 = 119;
					num2 = 0;
					break;
				case 118:
				case 119:
					num3 = 117;
					num2 = 1;
					break;
				default:
					switch (num4)
					{
					case 134:
						num3 = 136;
						num2 = 0;
						break;
					case 135:
					case 136:
						num3 = 134;
						num2 = 1;
						break;
					}
					break;
				}
			}
			else
			{
				switch (num4)
				{
				case 454:
					num3 = 459;
					num2 = 0;
					break;
				case 455:
				case 456:
				case 457:
				case 458:
				case 459:
					num3 = 454;
					num2 = 1;
					break;
				default:
					switch (num4)
					{
					case 510:
						num3 = 512;
						num2 = 0;
						break;
					case 511:
					case 512:
						num3 = 510;
						num2 = 1;
						break;
					case 513:
						num3 = 515;
						num2 = 0;
						break;
					case 514:
					case 515:
						num3 = 513;
						num2 = 1;
						break;
					}
					break;
				}
			}
			if (num2 == -1)
			{
				pos = Main.npc[i].Center;
				index = i;
				return true;
			}
			if (seekHead && num2 == 1)
			{
				index = -1;
				pos = Vector2.Zero;
				return false;
			}
			Vector2 value = Main.npc[i].Center;
			int num5 = -1;
			float num6 = -1f;
			int num7 = -1;
			Vector2 center = Main.player[Main.myPlayer].Center;
			int num8 = (int)Main.npc[i].ai[num2];
			int num9 = 0;
			while (num8 >= 0 && num8 < 200 && ++num9 < 100 && Main.npc[num8].active)
			{
				if (!averageDirection && (num7 == -1 || Main.npc[num8].Distance(center) < num6))
				{
					num6 = Main.npc[num8].Distance(center);
					num7 = num8;
				}
				if (Main.npc[num8].type == num3)
				{
					num5 = num8;
					break;
				}
				num8 = (int)Main.npc[num8].ai[num2];
			}
			if (num5 >= 0)
			{
				if (!averageDirection)
				{
					pos = Main.npc[num7].Center;
					index = num7;
				}
				else
				{
					value += Main.npc[num5].Center;
					pos = value / 2f;
					index = num5;
				}
				return true;
			}
			pos = Vector2.Zero;
			index = -1;
			return false;
		}

		public void AI()
		{
			if (this.aiStyle == 0)
			{
				for (int i = 0; i < 255; i++)
				{
					if (Main.player[i].active && Main.player[i].talkNPC == this.whoAmI)
					{
						if (this.type == 105)
						{
							this.Transform(107);
							return;
						}
						if (this.type == 106)
						{
							this.Transform(108);
							return;
						}
						if (this.type == 123)
						{
							this.Transform(124);
							return;
						}
						if (this.type == 354)
						{
							this.Transform(353);
							return;
						}
						if (this.type == 376)
						{
							this.Transform(369);
							return;
						}
						if (this.type == 579)
						{
							this.Transform(550);
							return;
						}
					}
				}
				if (this.type != 376 && this.type != 579)
				{
					this.TargetClosest(true);
					this.spriteDirection = this.direction;
				}
				if (this.type == 376 || this.type == 579)
				{
					if (this.wet || Main.tile[(int)(base.Center.X / 16f), (int)(this.position.Y - 4f) / 16].liquid > 0)
					{
						this.velocity.Y = -0.4f;
						int num = 1;
						if (base.Center.X / 16f > (float)(Main.maxTilesX / 2))
						{
							num = -1;
						}
						int num2 = 12;
						int num3 = (int)base.Center.X / 16;
						int j = (int)base.Center.Y / 16;
						bool flag = false;
						if (num > 0)
						{
							for (int k = num3; k < num3 + num2; k++)
							{
								if (WorldGen.SolidTile(k, j))
								{
									flag = true;
								}
							}
						}
						else
						{
							for (int l = num3; l > num3 - num2; l--)
							{
								if (WorldGen.SolidTile(l, j))
								{
									flag = true;
								}
							}
						}
						if (this.type == 579)
						{
							flag = true;
						}
						if (flag)
						{
							this.velocity.X = this.velocity.X * 0.99f;
							if ((double)this.velocity.X > -0.01 && (double)this.velocity.X < 0.01)
							{
								this.velocity.X = 0f;
								return;
							}
						}
						else
						{
							this.velocity.X = this.velocity.X + (float)num * 0.01f;
							if (this.velocity.X > 0.2f)
							{
								this.velocity.X = this.velocity.X * 0.95f;
							}
							if (this.velocity.X < -0.2f)
							{
								this.velocity.X = this.velocity.X * 0.95f;
								return;
							}
						}
					}
					else
					{
						this.velocity.X = this.velocity.X * 0.93f;
						if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1)
						{
							this.velocity.X = 0f;
							return;
						}
					}
				}
				else
				{
					this.velocity.X = this.velocity.X * 0.93f;
					if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1)
					{
						this.velocity.X = 0f;
						return;
					}
				}
			}
			else
			{
				if (this.aiStyle == 1)
				{
					this.AI_001_Slimes();
					return;
				}
				if (this.aiStyle == 2)
				{
					this.AI_002_FloatingEye();
					return;
				}
				if (this.aiStyle == 3)
				{
					this.AI_003_Fighters();
					return;
				}
				if (this.aiStyle == 4)
				{
					bool flag2 = false;
					if (Main.expertMode && (double)this.life < (double)this.lifeMax * 0.12)
					{
						flag2 = true;
					}
					bool flag3 = false;
					if (Main.expertMode && (double)this.life < (double)this.lifeMax * 0.04)
					{
						flag3 = true;
					}
					float num4 = 20f;
					if (flag3)
					{
						num4 = 10f;
					}
					if (this.target < 0 || this.target == 255 || Main.player[this.target].dead || !Main.player[this.target].active)
					{
						this.TargetClosest(true);
					}
					bool dead = Main.player[this.target].dead;
					float num5 = this.position.X + (float)(this.width / 2) - Main.player[this.target].position.X - (float)(Main.player[this.target].width / 2);
					float num6 = this.position.Y + (float)this.height - 59f - Main.player[this.target].position.Y - (float)(Main.player[this.target].height / 2);
					float num7 = (float)Math.Atan2((double)num6, (double)num5) + 1.57f;
					if (num7 < 0f)
					{
						num7 += 6.283f;
					}
					else if ((double)num7 > 6.283)
					{
						num7 -= 6.283f;
					}
					float num8 = 0f;
					if (this.ai[0] == 0f && this.ai[1] == 0f)
					{
						num8 = 0.02f;
					}
					if (this.ai[0] == 0f && this.ai[1] == 2f && this.ai[2] > 40f)
					{
						num8 = 0.05f;
					}
					if (this.ai[0] == 3f && this.ai[1] == 0f)
					{
						num8 = 0.05f;
					}
					if (this.ai[0] == 3f && this.ai[1] == 2f && this.ai[2] > 40f)
					{
						num8 = 0.08f;
					}
					if (this.ai[0] == 3f && this.ai[1] == 4f && this.ai[2] > num4)
					{
						num8 = 0.15f;
					}
					if (this.ai[0] == 3f && this.ai[1] == 5f)
					{
						num8 = 0.05f;
					}
					if (Main.expertMode)
					{
						num8 *= 1.5f;
					}
					if (flag3 && Main.expertMode)
					{
						num8 = 0f;
					}
					if (this.rotation < num7)
					{
						if ((double)(num7 - this.rotation) > 3.1415)
						{
							this.rotation -= num8;
						}
						else
						{
							this.rotation += num8;
						}
					}
					else if (this.rotation > num7)
					{
						if ((double)(this.rotation - num7) > 3.1415)
						{
							this.rotation += num8;
						}
						else
						{
							this.rotation -= num8;
						}
					}
					if (this.rotation > num7 - num8 && this.rotation < num7 + num8)
					{
						this.rotation = num7;
					}
					if (this.rotation < 0f)
					{
						this.rotation += 6.283f;
					}
					else if ((double)this.rotation > 6.283)
					{
						this.rotation -= 6.283f;
					}
					if (this.rotation > num7 - num8 && this.rotation < num7 + num8)
					{
						this.rotation = num7;
					}
					if (Main.rand.Next(5) == 0)
					{
						int num9 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height * 0.25f), this.width, (int)((float)this.height * 0.5f), 5, this.velocity.X, 2f, 0, default(Color), 1f);
						Dust expr_80D_cp_0 = Main.dust[num9];
						expr_80D_cp_0.velocity.X = expr_80D_cp_0.velocity.X * 0.5f;
						Dust expr_82B_cp_0 = Main.dust[num9];
						expr_82B_cp_0.velocity.Y = expr_82B_cp_0.velocity.Y * 0.1f;
					}
					if (Main.dayTime || dead)
					{
						this.velocity.Y = this.velocity.Y - 0.04f;
						if (this.timeLeft > 10)
						{
							this.timeLeft = 10;
							return;
						}
					}
					else if (this.ai[0] == 0f)
					{
						if (this.ai[1] == 0f)
						{
							float num10 = 5f;
							float num11 = 0.04f;
							if (Main.expertMode)
							{
								num11 = 0.15f;
								num10 = 7f;
							}
							Vector2 vector = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
							float num12 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector.X;
							float num13 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - 200f - vector.Y;
							float num14 = (float)Math.Sqrt((double)(num12 * num12 + num13 * num13));
							float num15 = num14;
							num14 = num10 / num14;
							num12 *= num14;
							num13 *= num14;
							if (this.velocity.X < num12)
							{
								this.velocity.X = this.velocity.X + num11;
								if (this.velocity.X < 0f && num12 > 0f)
								{
									this.velocity.X = this.velocity.X + num11;
								}
							}
							else if (this.velocity.X > num12)
							{
								this.velocity.X = this.velocity.X - num11;
								if (this.velocity.X > 0f && num12 < 0f)
								{
									this.velocity.X = this.velocity.X - num11;
								}
							}
							if (this.velocity.Y < num13)
							{
								this.velocity.Y = this.velocity.Y + num11;
								if (this.velocity.Y < 0f && num13 > 0f)
								{
									this.velocity.Y = this.velocity.Y + num11;
								}
							}
							else if (this.velocity.Y > num13)
							{
								this.velocity.Y = this.velocity.Y - num11;
								if (this.velocity.Y > 0f && num13 < 0f)
								{
									this.velocity.Y = this.velocity.Y - num11;
								}
							}
							this.ai[2] += 1f;
							float num16 = 600f;
							if (Main.expertMode)
							{
								num16 *= 0.35f;
							}
							if (this.ai[2] >= num16)
							{
								this.ai[1] = 1f;
								this.ai[2] = 0f;
								this.ai[3] = 0f;
								this.target = 255;
								this.netUpdate = true;
							}
							else if ((this.position.Y + (float)this.height < Main.player[this.target].position.Y && num15 < 500f) || (Main.expertMode && num15 < 500f))
							{
								if (!Main.player[this.target].dead)
								{
									this.ai[3] += 1f;
								}
								float num17 = 110f;
								if (Main.expertMode)
								{
									num17 *= 0.4f;
								}
								if (this.ai[3] >= num17)
								{
									this.ai[3] = 0f;
									this.rotation = num7;
									float num18 = 5f;
									if (Main.expertMode)
									{
										num18 = 6f;
									}
									float num19 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector.X;
									float num20 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector.Y;
									float num21 = (float)Math.Sqrt((double)(num19 * num19 + num20 * num20));
									num21 = num18 / num21;
									Vector2 position = vector;
									Vector2 vector2;
									vector2.X = num19 * num21;
									vector2.Y = num20 * num21;
									position.X += vector2.X * 10f;
									position.Y += vector2.Y * 10f;
									if (Main.netMode != 1)
									{
										int num22 = NPC.NewNPC((int)position.X, (int)position.Y, 5, 0, 0f, 0f, 0f, 0f, 255);
										Main.npc[num22].velocity.X = vector2.X;
										Main.npc[num22].velocity.Y = vector2.Y;
										if (Main.netMode == 2 && num22 < 200)
										{
											NetMessage.SendData(23, -1, -1, "", num22, 0f, 0f, 0f, 0, 0, 0);
										}
									}
									Main.PlaySound(3, (int)position.X, (int)position.Y, 1, 1f, 0f);
									for (int m = 0; m < 10; m++)
									{
										Dust.NewDust(position, 20, 20, 5, vector2.X * 0.4f, vector2.Y * 0.4f, 0, default(Color), 1f);
									}
								}
							}
						}
						else if (this.ai[1] == 1f)
						{
							this.rotation = num7;
							float num23 = 6f;
							if (Main.expertMode)
							{
								num23 = 7f;
							}
							Vector2 vector3 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
							float num24 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector3.X;
							float num25 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector3.Y;
							float num26 = (float)Math.Sqrt((double)(num24 * num24 + num25 * num25));
							num26 = num23 / num26;
							this.velocity.X = num24 * num26;
							this.velocity.Y = num25 * num26;
							this.ai[1] = 2f;
							this.netUpdate = true;
							if (this.netSpam > 10)
							{
								this.netSpam = 10;
							}
						}
						else if (this.ai[1] == 2f)
						{
							this.ai[2] += 1f;
							if (this.ai[2] >= 40f)
							{
								this.velocity *= 0.98f;
								if (Main.expertMode)
								{
									this.velocity *= 0.985f;
								}
								if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1)
								{
									this.velocity.X = 0f;
								}
								if ((double)this.velocity.Y > -0.1 && (double)this.velocity.Y < 0.1)
								{
									this.velocity.Y = 0f;
								}
							}
							else
							{
								this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) - 1.57f;
							}
							int num27 = 150;
							if (Main.expertMode)
							{
								num27 = 100;
							}
							if (this.ai[2] >= (float)num27)
							{
								this.ai[3] += 1f;
								this.ai[2] = 0f;
								this.target = 255;
								this.rotation = num7;
								if (this.ai[3] >= 3f)
								{
									this.ai[1] = 0f;
									this.ai[3] = 0f;
								}
								else
								{
									this.ai[1] = 1f;
								}
							}
						}
						float num28 = 0.5f;
						if (Main.expertMode)
						{
							num28 = 0.65f;
						}
						if ((float)this.life < (float)this.lifeMax * num28)
						{
							this.ai[0] = 1f;
							this.ai[1] = 0f;
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							this.netUpdate = true;
							if (this.netSpam > 10)
							{
								this.netSpam = 10;
								return;
							}
						}
					}
					else if (this.ai[0] == 1f || this.ai[0] == 2f)
					{
						if (this.ai[0] == 1f)
						{
							this.ai[2] += 0.005f;
							if ((double)this.ai[2] > 0.5)
							{
								this.ai[2] = 0.5f;
							}
						}
						else
						{
							this.ai[2] -= 0.005f;
							if (this.ai[2] < 0f)
							{
								this.ai[2] = 0f;
							}
						}
						this.rotation += this.ai[2];
						this.ai[1] += 1f;
						if (Main.expertMode && this.ai[1] % 20f == 0f)
						{
							float num29 = 5f;
							Vector2 vector4 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
							float num30 = (float)Main.rand.Next(-200, 200);
							float num31 = (float)Main.rand.Next(-200, 200);
							float num32 = (float)Math.Sqrt((double)(num30 * num30 + num31 * num31));
							num32 = num29 / num32;
							Vector2 position2 = vector4;
							Vector2 vector5;
							vector5.X = num30 * num32;
							vector5.Y = num31 * num32;
							position2.X += vector5.X * 10f;
							position2.Y += vector5.Y * 10f;
							if (Main.netMode != 1)
							{
								int num33 = NPC.NewNPC((int)position2.X, (int)position2.Y, 5, 0, 0f, 0f, 0f, 0f, 255);
								Main.npc[num33].velocity.X = vector5.X;
								Main.npc[num33].velocity.Y = vector5.Y;
								if (Main.netMode == 2 && num33 < 200)
								{
									NetMessage.SendData(23, -1, -1, "", num33, 0f, 0f, 0f, 0, 0, 0);
								}
							}
							for (int n = 0; n < 10; n++)
							{
								Dust.NewDust(position2, 20, 20, 5, vector5.X * 0.4f, vector5.Y * 0.4f, 0, default(Color), 1f);
							}
						}
						if (this.ai[1] == 100f)
						{
							this.ai[0] += 1f;
							this.ai[1] = 0f;
							if (this.ai[0] == 3f)
							{
								this.ai[2] = 0f;
							}
							else
							{
								Main.PlaySound(3, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
								for (int num34 = 0; num34 < 2; num34++)
								{
									Gore.NewGore(this.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 8, 1f);
									Gore.NewGore(this.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 7, 1f);
									Gore.NewGore(this.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 6, 1f);
								}
								for (int num35 = 0; num35 < 20; num35++)
								{
									Dust.NewDust(this.position, this.width, this.height, 5, (float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f, 0, default(Color), 1f);
								}
								Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
							}
						}
						Dust.NewDust(this.position, this.width, this.height, 5, (float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f, 0, default(Color), 1f);
						this.velocity.X = this.velocity.X * 0.98f;
						this.velocity.Y = this.velocity.Y * 0.98f;
						if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1)
						{
							this.velocity.X = 0f;
						}
						if ((double)this.velocity.Y > -0.1 && (double)this.velocity.Y < 0.1)
						{
							this.velocity.Y = 0f;
							return;
						}
					}
					else
					{
						this.defense = 0;
						this.damage = 23;
						if (Main.expertMode)
						{
							if (flag2)
							{
								this.defense = -15;
							}
							if (flag3)
							{
								this.damage = (int)(20f * Main.expertDamage);
								this.defense = -30;
							}
							else
							{
								this.damage = (int)(18f * Main.expertDamage);
							}
						}
						if (this.ai[1] == 0f && flag2)
						{
							this.ai[1] = 5f;
						}
						if (this.ai[1] == 0f)
						{
							float num36 = 6f;
							float num37 = 0.07f;
							Vector2 vector6 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
							float num38 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector6.X;
							float num39 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - 120f - vector6.Y;
							float num40 = (float)Math.Sqrt((double)(num38 * num38 + num39 * num39));
							if (num40 > 400f && Main.expertMode)
							{
								num36 += 1f;
								num37 += 0.05f;
								if (num40 > 600f)
								{
									num36 += 1f;
									num37 += 0.05f;
									if (num40 > 800f)
									{
										num36 += 1f;
										num37 += 0.05f;
									}
								}
							}
							num40 = num36 / num40;
							num38 *= num40;
							num39 *= num40;
							if (this.velocity.X < num38)
							{
								this.velocity.X = this.velocity.X + num37;
								if (this.velocity.X < 0f && num38 > 0f)
								{
									this.velocity.X = this.velocity.X + num37;
								}
							}
							else if (this.velocity.X > num38)
							{
								this.velocity.X = this.velocity.X - num37;
								if (this.velocity.X > 0f && num38 < 0f)
								{
									this.velocity.X = this.velocity.X - num37;
								}
							}
							if (this.velocity.Y < num39)
							{
								this.velocity.Y = this.velocity.Y + num37;
								if (this.velocity.Y < 0f && num39 > 0f)
								{
									this.velocity.Y = this.velocity.Y + num37;
								}
							}
							else if (this.velocity.Y > num39)
							{
								this.velocity.Y = this.velocity.Y - num37;
								if (this.velocity.Y > 0f && num39 < 0f)
								{
									this.velocity.Y = this.velocity.Y - num37;
								}
							}
							this.ai[2] += 1f;
							if (this.ai[2] >= 200f)
							{
								this.ai[1] = 1f;
								this.ai[2] = 0f;
								this.ai[3] = 0f;
								if (Main.expertMode && (double)this.life < (double)this.lifeMax * 0.35)
								{
									this.ai[1] = 3f;
								}
								this.target = 255;
								this.netUpdate = true;
							}
							if (Main.expertMode && flag3)
							{
								this.TargetClosest(true);
								this.netUpdate = true;
								this.ai[1] = 3f;
								this.ai[2] = 0f;
								this.ai[3] -= 1000f;
							}
						}
						else if (this.ai[1] == 1f)
						{
							Main.PlaySound(36, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
							this.rotation = num7;
							float num41 = 6.8f;
							if (Main.expertMode && this.ai[3] == 1f)
							{
								num41 *= 1.15f;
							}
							if (Main.expertMode && this.ai[3] == 2f)
							{
								num41 *= 1.3f;
							}
							Vector2 vector7 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
							float num42 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector7.X;
							float num43 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector7.Y;
							float num44 = (float)Math.Sqrt((double)(num42 * num42 + num43 * num43));
							num44 = num41 / num44;
							this.velocity.X = num42 * num44;
							this.velocity.Y = num43 * num44;
							this.ai[1] = 2f;
							this.netUpdate = true;
							if (this.netSpam > 10)
							{
								this.netSpam = 10;
							}
						}
						else if (this.ai[1] == 2f)
						{
							float num45 = 40f;
							this.ai[2] += 1f;
							if (Main.expertMode)
							{
								num45 = 50f;
							}
							if (this.ai[2] >= num45)
							{
								this.velocity *= 0.97f;
								if (Main.expertMode)
								{
									this.velocity *= 0.98f;
								}
								if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1)
								{
									this.velocity.X = 0f;
								}
								if ((double)this.velocity.Y > -0.1 && (double)this.velocity.Y < 0.1)
								{
									this.velocity.Y = 0f;
								}
							}
							else
							{
								this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) - 1.57f;
							}
							int num46 = 130;
							if (Main.expertMode)
							{
								num46 = 90;
							}
							if (this.ai[2] >= (float)num46)
							{
								this.ai[3] += 1f;
								this.ai[2] = 0f;
								this.target = 255;
								this.rotation = num7;
								if (this.ai[3] >= 3f)
								{
									this.ai[1] = 0f;
									this.ai[3] = 0f;
									if (Main.expertMode && Main.netMode != 1 && (double)this.life < (double)this.lifeMax * 0.5)
									{
										this.ai[1] = 3f;
										this.ai[3] += (float)Main.rand.Next(1, 4);
									}
									this.netUpdate = true;
									if (this.netSpam > 10)
									{
										this.netSpam = 10;
									}
								}
								else
								{
									this.ai[1] = 1f;
								}
							}
						}
						else if (this.ai[1] == 3f)
						{
							if (this.ai[3] == 4f && flag2 && base.Center.Y > Main.player[this.target].Center.Y)
							{
								this.TargetClosest(true);
								this.ai[1] = 0f;
								this.ai[2] = 0f;
								this.ai[3] = 0f;
								this.netUpdate = true;
								if (this.netSpam > 10)
								{
									this.netSpam = 10;
								}
							}
							else if (Main.netMode != 1)
							{
								this.TargetClosest(true);
								float num47 = 20f;
								Vector2 vector8 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
								float num48 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector8.X;
								float num49 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector8.Y;
								float num50 = Math.Abs(Main.player[this.target].velocity.X) + Math.Abs(Main.player[this.target].velocity.Y) / 4f;
								num50 += 10f - num50;
								if (num50 < 5f)
								{
									num50 = 5f;
								}
								if (num50 > 15f)
								{
									num50 = 15f;
								}
								if (this.ai[2] == -1f && !flag3)
								{
									num50 *= 4f;
									num47 *= 1.3f;
								}
								if (flag3)
								{
									num50 *= 2f;
								}
								num48 -= Main.player[this.target].velocity.X * num50;
								num49 -= Main.player[this.target].velocity.Y * num50 / 4f;
								num48 *= 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
								num49 *= 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
								if (flag3)
								{
									num48 *= 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
									num49 *= 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
								}
								float num51 = (float)Math.Sqrt((double)(num48 * num48 + num49 * num49));
								float num52 = num51;
								num51 = num47 / num51;
								this.velocity.X = num48 * num51;
								this.velocity.Y = num49 * num51;
								this.velocity.X = this.velocity.X + (float)Main.rand.Next(-20, 21) * 0.1f;
								this.velocity.Y = this.velocity.Y + (float)Main.rand.Next(-20, 21) * 0.1f;
								if (flag3)
								{
									this.velocity.X = this.velocity.X + (float)Main.rand.Next(-50, 51) * 0.1f;
									this.velocity.Y = this.velocity.Y + (float)Main.rand.Next(-50, 51) * 0.1f;
									float num53 = Math.Abs(this.velocity.X);
									float num54 = Math.Abs(this.velocity.Y);
									if (base.Center.X > Main.player[this.target].Center.X)
									{
										num54 *= -1f;
									}
									if (base.Center.Y > Main.player[this.target].Center.Y)
									{
										num53 *= -1f;
									}
									this.velocity.X = num54 + this.velocity.X;
									this.velocity.Y = num53 + this.velocity.Y;
									this.velocity.Normalize();
									this.velocity *= num47;
									this.velocity.X = this.velocity.X + (float)Main.rand.Next(-20, 21) * 0.1f;
									this.velocity.Y = this.velocity.Y + (float)Main.rand.Next(-20, 21) * 0.1f;
								}
								else if (num52 < 100f)
								{
									if (Math.Abs(this.velocity.X) > Math.Abs(this.velocity.Y))
									{
										float num55 = Math.Abs(this.velocity.X);
										float num56 = Math.Abs(this.velocity.Y);
										if (base.Center.X > Main.player[this.target].Center.X)
										{
											num56 *= -1f;
										}
										if (base.Center.Y > Main.player[this.target].Center.Y)
										{
											num55 *= -1f;
										}
										this.velocity.X = num56;
										this.velocity.Y = num55;
									}
								}
								else if (Math.Abs(this.velocity.X) > Math.Abs(this.velocity.Y))
								{
									float num57 = (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) / 2f;
									float num58 = num57;
									if (base.Center.X > Main.player[this.target].Center.X)
									{
										num58 *= -1f;
									}
									if (base.Center.Y > Main.player[this.target].Center.Y)
									{
										num57 *= -1f;
									}
									this.velocity.X = num58;
									this.velocity.Y = num57;
								}
								this.ai[1] = 4f;
								this.netUpdate = true;
								if (this.netSpam > 10)
								{
									this.netSpam = 10;
								}
							}
						}
						else if (this.ai[1] == 4f)
						{
							if (this.ai[2] == 0f)
							{
								Main.PlaySound(36, (int)this.position.X, (int)this.position.Y, -1, 1f, 0f);
							}
							float num59 = num4;
							this.ai[2] += 1f;
							if (this.ai[2] == num59 && Vector2.Distance(this.position, Main.player[this.target].position) < 200f)
							{
								this.ai[2] -= 1f;
							}
							if (this.ai[2] >= num59)
							{
								this.velocity *= 0.95f;
								if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1)
								{
									this.velocity.X = 0f;
								}
								if ((double)this.velocity.Y > -0.1 && (double)this.velocity.Y < 0.1)
								{
									this.velocity.Y = 0f;
								}
							}
							else
							{
								this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) - 1.57f;
							}
							float num60 = num59 + 13f;
							if (this.ai[2] >= num60)
							{
								this.netUpdate = true;
								if (this.netSpam > 10)
								{
									this.netSpam = 10;
								}
								this.ai[3] += 1f;
								this.ai[2] = 0f;
								if (this.ai[3] >= 5f)
								{
									this.ai[1] = 0f;
									this.ai[3] = 0f;
								}
								else
								{
									this.ai[1] = 3f;
								}
							}
						}
						else if (this.ai[1] == 5f)
						{
							float num61 = 600f;
							float num62 = 9f;
							float num63 = 0.3f;
							Vector2 vector9 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
							float num64 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector9.X;
							float num65 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) + num61 - vector9.Y;
							float num66 = (float)Math.Sqrt((double)(num64 * num64 + num65 * num65));
							num66 = num62 / num66;
							num64 *= num66;
							num65 *= num66;
							if (this.velocity.X < num64)
							{
								this.velocity.X = this.velocity.X + num63;
								if (this.velocity.X < 0f && num64 > 0f)
								{
									this.velocity.X = this.velocity.X + num63;
								}
							}
							else if (this.velocity.X > num64)
							{
								this.velocity.X = this.velocity.X - num63;
								if (this.velocity.X > 0f && num64 < 0f)
								{
									this.velocity.X = this.velocity.X - num63;
								}
							}
							if (this.velocity.Y < num65)
							{
								this.velocity.Y = this.velocity.Y + num63;
								if (this.velocity.Y < 0f && num65 > 0f)
								{
									this.velocity.Y = this.velocity.Y + num63;
								}
							}
							else if (this.velocity.Y > num65)
							{
								this.velocity.Y = this.velocity.Y - num63;
								if (this.velocity.Y > 0f && num65 < 0f)
								{
									this.velocity.Y = this.velocity.Y - num63;
								}
							}
							this.ai[2] += 1f;
							if (this.ai[2] >= 70f)
							{
								this.TargetClosest(true);
								this.ai[1] = 3f;
								this.ai[2] = -1f;
								this.ai[3] = (float)Main.rand.Next(-3, 1);
								this.netUpdate = true;
							}
						}
						if (flag3 && this.ai[1] == 5f)
						{
							this.ai[1] = 3f;
							return;
						}
					}
				}
				else
				{
					if (this.aiStyle == 5)
					{
						this.AI_005_EaterOfSouls();
						return;
					}
					if (this.aiStyle == 6)
					{
						this.AI_006_Worms();
						return;
					}
					if (this.aiStyle == 7)
					{
						this.AI_007_TownEntities();
						return;
					}
					if (this.aiStyle == 8)
					{
						this.TargetClosest(true);
						this.velocity.X = this.velocity.X * 0.93f;
						if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1)
						{
							this.velocity.X = 0f;
						}
						if (this.ai[0] == 0f)
						{
							this.ai[0] = 500f;
						}
						if (this.type == 172)
						{
							if (this.alpha < 255)
							{
								this.alpha++;
							}
							if (this.justHit)
							{
								this.alpha = 0;
							}
						}
						if (this.ai[2] != 0f && this.ai[3] != 0f)
						{
							if (this.type == 172)
							{
								this.alpha = 255;
							}
							Main.PlaySound(SoundID.Item8, this.position);
							for (int num67 = 0; num67 < 50; num67++)
							{
								if (this.type == 29 || this.type == 45)
								{
									int num68 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, 0f, 0f, 100, default(Color), (float)Main.rand.Next(1, 3));
									Main.dust[num68].velocity *= 3f;
									if (Main.dust[num68].scale > 1f)
									{
										Main.dust[num68].noGravity = true;
									}
								}
								else if (this.type == 32)
								{
									int num69 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 172, 0f, 0f, 100, default(Color), 1.5f);
									Main.dust[num69].velocity *= 3f;
									Main.dust[num69].noGravity = true;
								}
								else if (this.type == 283 || this.type == 284)
								{
									int num70 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 173, 0f, 0f, 0, default(Color), 1f);
									Main.dust[num70].velocity *= 2f;
									Main.dust[num70].scale = 1.4f;
								}
								else if (this.type == 285 || this.type == 286)
								{
									int num71 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 174, 0f, 0f, 100, default(Color), 1.5f);
									Main.dust[num71].velocity *= 3f;
									Main.dust[num71].noGravity = true;
								}
								else if (this.type == 281 || this.type == 282)
								{
									int num72 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 175, 0f, 0f, 100, default(Color), 1.5f);
									Main.dust[num72].velocity *= 3f;
									Main.dust[num72].noGravity = true;
								}
								else if (this.type == 172)
								{
									int num73 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 106, 0f, 0f, 100, default(Color), 2.5f);
									Main.dust[num73].velocity *= 3f;
									Main.dust[num73].noGravity = true;
								}
								else if (this.type == 533)
								{
									int num74 = Dust.NewDust(this.position, this.width, this.height, 27, 0f, 0f, 100, default(Color), 2.5f);
									Main.dust[num74].velocity *= 3f;
									Main.dust[num74].noGravity = true;
								}
								else
								{
									int num75 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
									Main.dust[num75].velocity *= 3f;
									Main.dust[num75].noGravity = true;
								}
							}
							this.position.X = this.ai[2] * 16f - (float)(this.width / 2) + 8f;
							this.position.Y = this.ai[3] * 16f - (float)this.height;
							this.velocity.X = 0f;
							this.velocity.Y = 0f;
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							Main.PlaySound(SoundID.Item8, this.position);
							for (int num76 = 0; num76 < 50; num76++)
							{
								if (this.type == 29 || this.type == 45)
								{
									int num77 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, 0f, 0f, 100, default(Color), (float)Main.rand.Next(1, 3));
									Main.dust[num77].velocity *= 3f;
									if (Main.dust[num77].scale > 1f)
									{
										Main.dust[num77].noGravity = true;
									}
								}
								else if (this.type == 32)
								{
									int num78 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 172, 0f, 0f, 100, default(Color), 1.5f);
									Main.dust[num78].velocity *= 3f;
									Main.dust[num78].noGravity = true;
								}
								else if (this.type == 172)
								{
									int num79 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 106, 0f, 0f, 100, default(Color), 2.5f);
									Main.dust[num79].velocity *= 3f;
									Main.dust[num79].noGravity = true;
								}
								else if (this.type == 283 || this.type == 284)
								{
									int num80 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 173, 0f, 0f, 0, default(Color), 1f);
									Main.dust[num80].velocity *= 2f;
									Main.dust[num80].scale = 1.4f;
								}
								else if (this.type == 285 || this.type == 286)
								{
									int num81 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 174, 0f, 0f, 100, default(Color), 1.5f);
									Main.dust[num81].velocity *= 3f;
									Main.dust[num81].noGravity = true;
								}
								else if (this.type == 281 || this.type == 282)
								{
									int num82 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 175, 0f, 0f, 100, default(Color), 1.5f);
									Main.dust[num82].velocity *= 3f;
									Main.dust[num82].noGravity = true;
								}
								else if (this.type == 533)
								{
									int num83 = Dust.NewDust(this.position, this.width, this.height, 27, 0f, 0f, 100, default(Color), 2.5f);
									Main.dust[num83].velocity *= 3f;
									Main.dust[num83].noGravity = true;
								}
								else
								{
									int num84 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
									Main.dust[num84].velocity *= 3f;
									Main.dust[num84].noGravity = true;
								}
							}
						}
						this.ai[0] += 1f;
						if (this.type == 283 || this.type == 284)
						{
							if (this.ai[0] == 50f || this.ai[0] == 100f || this.ai[0] == 150f || this.ai[0] == 200f || this.ai[0] == 250f)
							{
								this.ai[1] = 30f;
								this.netUpdate = true;
							}
							if (this.ai[0] >= 400f)
							{
								this.ai[0] = 700f;
							}
						}
						else if (this.type == 172)
						{
							if (this.ai[0] == 75f || this.ai[0] == 150f || this.ai[0] == 225f || this.ai[0] == 300f || this.ai[0] == 375f || this.ai[0] == 450f)
							{
								this.ai[1] = 30f;
								this.netUpdate = true;
							}
						}
						else if (this.type == 533)
						{
							if (this.ai[0] == 180f)
							{
								this.ai[1] = 181f;
								this.netUpdate = true;
							}
						}
						else if (this.type == 281 || this.type == 282)
						{
							if (this.ai[0] == 20f || this.ai[0] == 40f || this.ai[0] == 60f || this.ai[0] == 120f || this.ai[0] == 140f || this.ai[0] == 160f || this.ai[0] == 220f || this.ai[0] == 240f || this.ai[0] == 260f)
							{
								this.ai[1] = 30f;
								this.netUpdate = true;
							}
							if (this.ai[0] >= 460f)
							{
								this.ai[0] = 700f;
							}
						}
						else if (this.ai[0] == 100f || this.ai[0] == 200f || this.ai[0] == 300f)
						{
							this.ai[1] = 30f;
							this.netUpdate = true;
						}
						if ((this.type == 285 || this.type == 286) && this.ai[0] > 400f)
						{
							this.ai[0] = 650f;
						}
						if (this.type == 533 && this.ai[0] >= 360f)
						{
							this.ai[0] = 650f;
						}
						if (this.ai[0] >= 650f && Main.netMode != 1)
						{
							this.ai[0] = 1f;
							int num85 = (int)Main.player[this.target].position.X / 16;
							int num86 = (int)Main.player[this.target].position.Y / 16;
							int num87 = (int)this.position.X / 16;
							int num88 = (int)this.position.Y / 16;
							int num89 = 20;
							int num90 = 0;
							bool flag4 = false;
							if (Math.Abs(this.position.X - Main.player[this.target].position.X) + Math.Abs(this.position.Y - Main.player[this.target].position.Y) > 2000f)
							{
								num90 = 100;
								flag4 = true;
							}
							while (!flag4 && num90 < 100)
							{
								num90++;
								int num91 = Main.rand.Next(num85 - num89, num85 + num89);
								int num92 = Main.rand.Next(num86 - num89, num86 + num89);
								for (int num93 = num92; num93 < num86 + num89; num93++)
								{
									if ((num93 < num86 - 4 || num93 > num86 + 4 || num91 < num85 - 4 || num91 > num85 + 4) && (num93 < num88 - 1 || num93 > num88 + 1 || num91 < num87 - 1 || num91 > num87 + 1) && Main.tile[num91, num93].nactive())
									{
										bool flag5 = true;
										if ((this.type == 32 || (this.type >= 281 && this.type <= 286)) && !Main.wallDungeon[(int)Main.tile[num91, num93 - 1].wall])
										{
											flag5 = false;
										}
										else if (Main.tile[num91, num93 - 1].lava())
										{
											flag5 = false;
										}
										if (flag5 && Main.tileSolid[(int)Main.tile[num91, num93].type] && !Collision.SolidTiles(num91 - 1, num91 + 1, num93 - 4, num93 - 1))
										{
											this.ai[1] = 20f;
											this.ai[2] = (float)num91;
											this.ai[3] = (float)num93;
											flag4 = true;
											break;
										}
									}
								}
							}
							this.netUpdate = true;
						}
						if (this.ai[1] > 0f)
						{
							this.ai[1] -= 1f;
							if (this.type == 533)
							{
								if (this.ai[1] % 30f == 0f && this.ai[1] / 30f < 5f)
								{
									Main.PlaySound(SoundID.Item8, this.position);
									if (Main.netMode != 1)
									{
										Point point = base.Center.ToTileCoordinates();
										Point point2 = Main.player[this.target].Center.ToTileCoordinates();
										Vector2 vector10 = Main.player[this.target].Center - base.Center;
										int num94 = 6;
										int num95 = 6;
										int num96 = 0;
										int num97 = 2;
										int num98 = 0;
										bool flag6 = false;
										if (vector10.Length() > 2000f)
										{
											flag6 = true;
										}
										while (!flag6)
										{
											if (num98 >= 50)
											{
												break;
											}
											num98++;
											int num99 = Main.rand.Next(point2.X - num94, point2.X + num94 + 1);
											int num100 = Main.rand.Next(point2.Y - num94, point2.Y + num94 + 1);
											if ((num100 < point2.Y - num96 || num100 > point2.Y + num96 || num99 < point2.X - num96 || num99 > point2.X + num96) && (num100 < point.Y - num95 || num100 > point.Y + num95 || num99 < point.X - num95 || num99 > point.X + num95) && !Main.tile[num99, num100].nactive())
											{
												bool flag7 = true;
												if (flag7 && Main.tile[num99, num100].lava())
												{
													flag7 = false;
												}
												if (flag7 && Collision.SolidTiles(num99 - num97, num99 + num97, num100 - num97, num100 + num97))
												{
													flag7 = false;
												}
												if (flag7)
												{
													Projectile.NewProjectile((float)(num99 * 16 + 8), (float)(num100 * 16 + 8), 0f, 0f, 596, 0, 1f, Main.myPlayer, (float)this.target, 0f);
													break;
												}
											}
										}
									}
								}
							}
							else if (this.ai[1] == 25f)
							{
								if (this.type >= 281 && this.type <= 286)
								{
									if (Main.netMode != 1)
									{
										float num101 = 6f;
										if (this.type == 285 || this.type == 286)
										{
											num101 = 8f;
										}
										if (this.type == 281 || this.type == 282)
										{
											num101 = 4f;
										}
										Vector2 vector11 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y);
										float num102 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector11.X;
										float num103 = Main.player[this.target].position.Y + (float)Main.player[this.target].height * 0.5f - vector11.Y;
										if (this.type == 283 || this.type == 284)
										{
											num102 += (float)Main.rand.Next(-30, 31);
											num103 += (float)Main.rand.Next(-30, 31);
											num102 -= Main.player[this.target].velocity.X * 10f;
											num103 -= Main.player[this.target].velocity.Y * 10f;
										}
										float num104 = (float)Math.Sqrt((double)(num102 * num102 + num103 * num103));
										num104 = num101 / num104;
										num102 *= num104;
										num103 *= num104;
										int num105 = 30;
										int num106 = 290;
										if (this.type == 285 || this.type == 286)
										{
											num106 = 291;
											num105 = 40;
										}
										if (this.type == 281 || this.type == 282)
										{
											num106 = 293;
											num105 = 40;
										}
										if (Main.expertMode)
										{
											num105 = (int)((double)num105 * 0.8);
										}
										int num107 = Projectile.NewProjectile(vector11.X, vector11.Y, num102, num103, num106, num105, 0f, Main.myPlayer, 0f, 0f);
										Main.projectile[num107].timeLeft = 300;
										if (num106 == 291)
										{
											Main.projectile[num107].ai[0] = Main.player[this.target].Center.X;
											Main.projectile[num107].ai[1] = Main.player[this.target].Center.Y;
											Main.projectile[num107].netUpdate = true;
										}
										this.localAI[0] = 0f;
									}
								}
								else
								{
									if (this.type != 172)
									{
										Main.PlaySound(SoundID.Item8, this.position);
									}
									if (Main.netMode != 1)
									{
										if (this.type == 29 || this.type == 45)
										{
											NPC.NewNPC((int)this.position.X + this.width / 2, (int)this.position.Y - 8, 30, 0, 0f, 0f, 0f, 0f, 255);
										}
										else if (this.type == 32)
										{
											NPC.NewNPC((int)this.position.X + this.width / 2, (int)this.position.Y - 8, 33, 0, 0f, 0f, 0f, 0f, 255);
										}
										else if (this.type == 172)
										{
											float num108 = 10f;
											Vector2 vector12 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
											float num109 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector12.X + (float)Main.rand.Next(-10, 11);
											float num110 = Main.player[this.target].position.Y + (float)Main.player[this.target].height * 0.5f - vector12.Y + (float)Main.rand.Next(-10, 11);
											float num111 = (float)Math.Sqrt((double)(num109 * num109 + num110 * num110));
											num111 = num108 / num111;
											num109 *= num111;
											num110 *= num111;
											int num112 = 40;
											int num113 = 129;
											int num114 = Projectile.NewProjectile(vector12.X, vector12.Y, num109, num110, num113, num112, 0f, Main.myPlayer, 0f, 0f);
											Main.projectile[num114].timeLeft = 300;
											this.localAI[0] = 0f;
										}
										else
										{
											NPC.NewNPC((int)this.position.X + this.width / 2 + this.direction * 8, (int)this.position.Y + 20, 25, 0, 0f, 0f, 0f, 0f, 255);
										}
									}
								}
							}
						}
						if (this.type == 29 || this.type == 45)
						{
							if (Main.rand.Next(5) == 0)
							{
								int num115 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 2f), this.width, this.height, 27, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 1.5f);
								Main.dust[num115].noGravity = true;
								Dust expr_43C4_cp_0 = Main.dust[num115];
								expr_43C4_cp_0.velocity.X = expr_43C4_cp_0.velocity.X * 0.5f;
								Main.dust[num115].velocity.Y = -2f;
								return;
							}
						}
						else if (this.type == 32)
						{
							if (Main.rand.Next(3) != 0)
							{
								int num116 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 2f), this.width, this.height, 172, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 0.9f);
								Main.dust[num116].noGravity = true;
								Dust expr_4495_cp_0 = Main.dust[num116];
								expr_4495_cp_0.velocity.X = expr_4495_cp_0.velocity.X * 0.3f;
								Dust expr_44B3_cp_0 = Main.dust[num116];
								expr_44B3_cp_0.velocity.Y = expr_44B3_cp_0.velocity.Y * 0.2f;
								Dust expr_44D1_cp_0 = Main.dust[num116];
								expr_44D1_cp_0.velocity.Y = expr_44D1_cp_0.velocity.Y - 1f;
								return;
							}
						}
						else
						{
							if (this.type == 172)
							{
								int num117 = 1;
								if (this.alpha == 255)
								{
									num117 = 2;
								}
								for (int num118 = 0; num118 < num117; num118++)
								{
									if (Main.rand.Next(255) > 255 - this.alpha)
									{
										int num119 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 2f), this.width, this.height, 106, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 1.2f);
										Main.dust[num119].noGravity = true;
										Dust expr_45B6_cp_0 = Main.dust[num119];
										expr_45B6_cp_0.velocity.X = expr_45B6_cp_0.velocity.X * (0.1f + (float)Main.rand.Next(30) * 0.01f);
										Dust expr_45E8_cp_0 = Main.dust[num119];
										expr_45E8_cp_0.velocity.Y = expr_45E8_cp_0.velocity.Y * (0.1f + (float)Main.rand.Next(30) * 0.01f);
										Main.dust[num119].scale *= 1f + (float)Main.rand.Next(6) * 0.1f;
									}
								}
								return;
							}
							if (this.type == 283 || this.type == 284)
							{
								if (Main.rand.Next(2) == 0)
								{
									int num120 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 2f), this.width, this.height, 173, 0f, 0f, 0, default(Color), 1f);
									Dust expr_46DA_cp_0 = Main.dust[num120];
									expr_46DA_cp_0.velocity.X = expr_46DA_cp_0.velocity.X * 0.5f;
									Dust expr_46F8_cp_0 = Main.dust[num120];
									expr_46F8_cp_0.velocity.Y = expr_46F8_cp_0.velocity.Y * 0.5f;
									return;
								}
							}
							else if (this.type == 285 || this.type == 286)
							{
								if (Main.rand.Next(2) == 0)
								{
									int num121 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 2f), this.width, this.height, 174, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 1f);
									Main.dust[num121].noGravity = true;
									Main.dust[num121].velocity *= 0.4f;
									Dust expr_47DF_cp_0 = Main.dust[num121];
									expr_47DF_cp_0.velocity.Y = expr_47DF_cp_0.velocity.Y - 0.7f;
									return;
								}
							}
							else if (this.type == 281 || this.type == 282)
							{
								if (Main.rand.Next(2) == 0)
								{
									int num122 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 2f), this.width, this.height, 175, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 0.1f);
									Main.dust[num122].noGravity = true;
									Main.dust[num122].velocity *= 0.5f;
									Main.dust[num122].fadeIn = 1.2f;
									return;
								}
							}
							else
							{
								if (this.type == 533)
								{
									Lighting.AddLight(base.Top, 0.6f, 0.6f, 0.3f);
									return;
								}
								if (Main.rand.Next(2) == 0)
								{
									int num123 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 2f), this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 2f);
									Main.dust[num123].noGravity = true;
									Dust expr_498B_cp_0 = Main.dust[num123];
									expr_498B_cp_0.velocity.X = expr_498B_cp_0.velocity.X * 1f;
									Dust expr_49A9_cp_0 = Main.dust[num123];
									expr_49A9_cp_0.velocity.Y = expr_49A9_cp_0.velocity.Y * 1f;
									return;
								}
							}
						}
					}
					else if (this.aiStyle == 9)
					{
						if (this.type == 516)
						{
							if (this.alpha < 220)
							{
								this.alpha += 40;
							}
							if (this.ai[0] == 0f)
							{
								this.ai[0] = 1f;
								Vector2 vector13 = Main.player[this.target].Center - base.Center;
								vector13.Normalize();
								if (vector13.HasNaNs())
								{
									vector13 = -Vector2.UnitY;
								}
								vector13 = vector13.RotatedByRandom(1.5707963705062866).RotatedBy(-0.78539818525314331, default(Vector2));
								if (vector13.Y > 0.2f)
								{
									vector13.Y = 0.2f;
								}
								this.velocity = vector13 * (6f + Main.rand.NextFloat() * 4f);
							}
							if (this.collideX || this.collideY || base.Distance(Main.player[this.target].Center) < 20f)
							{
								this.StrikeNPCNoInteraction(9999, 0f, this.direction, false, false, false);
							}
						}
						if (this.target == 255)
						{
							this.TargetClosest(true);
							float num124 = 6f;
							if (this.type == 25)
							{
								num124 = 5f;
							}
							if (this.type == 112)
							{
								num124 = 7f;
							}
							Vector2 vector14 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
							float num125 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector14.X;
							float num126 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector14.Y;
							float num127 = (float)Math.Sqrt((double)(num125 * num125 + num126 * num126));
							num127 = num124 / num127;
							this.velocity.X = num125 * num127;
							this.velocity.Y = num126 * num127;
						}
						if (this.type == 112)
						{
							this.damage = ((this.ai[1] == 1f) ? 65 : this.defDamage);
							this.ai[0] += 1f;
							if (this.ai[0] > 3f)
							{
								this.ai[0] = 3f;
							}
							if (this.ai[0] == 2f)
							{
								this.position += this.velocity;
								Main.PlaySound(4, (int)this.position.X, (int)this.position.Y, 9, 1f, 0f);
								for (int num128 = 0; num128 < 20; num128++)
								{
									int num129 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 2f), this.width, this.height, 18, 0f, 0f, 100, default(Color), 1.8f);
									Main.dust[num129].velocity *= 1.3f;
									Main.dust[num129].velocity += this.velocity;
									Main.dust[num129].noGravity = true;
								}
							}
						}
						if (this.type == 112 && Collision.SolidCollision(this.position, this.width, this.height))
						{
							int arg_4DB4_0 = Main.netMode;
							this.StrikeNPCNoInteraction(999, 0f, 0, false, false, false);
						}
						if (this.timeLeft > 100)
						{
							this.timeLeft = 100;
						}
						if (this.type != 516)
						{
							for (int num130 = 0; num130 < 2; num130++)
							{
								if (this.type == 30)
								{
									this.alpha = 255;
									for (int num131 = 0; num131 < 2; num131++)
									{
										int num132 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 2f), this.width, this.height, 27, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 1.3f);
										Main.dust[num132].noGravity = true;
										Main.dust[num132].velocity *= 0.3f;
										Dust expr_4F90_cp_0 = Main.dust[num132];
										expr_4F90_cp_0.velocity.X = expr_4F90_cp_0.velocity.X - this.velocity.X * 0.2f;
										Dust expr_4FBA_cp_0 = Main.dust[num132];
										expr_4FBA_cp_0.velocity.Y = expr_4FBA_cp_0.velocity.Y - this.velocity.Y * 0.2f;
									}
								}
								else if (this.type == 33)
								{
									for (int num133 = 0; num133 < 3; num133++)
									{
										float num134 = this.velocity.X / 3f * (float)num130;
										float num135 = this.velocity.Y / 3f * (float)num130;
										int num136 = 2;
										int num137 = Dust.NewDust(new Vector2(this.position.X + (float)num136, this.position.Y + (float)num136), this.width - num136 * 2, this.height - num136 * 2, 172, 0f, 0f, 100, default(Color), 1.2f);
										Main.dust[num137].noGravity = true;
										Main.dust[num137].velocity *= 0.1f;
										Main.dust[num137].velocity += this.velocity * 0.5f;
										Dust expr_50F4_cp_0 = Main.dust[num137];
										expr_50F4_cp_0.position.X = expr_50F4_cp_0.position.X - num134;
										Dust expr_510F_cp_0 = Main.dust[num137];
										expr_510F_cp_0.position.Y = expr_510F_cp_0.position.Y - num135;
									}
									if (Main.rand.Next(5) == 0)
									{
										int num138 = 2;
										int num139 = Dust.NewDust(new Vector2(this.position.X + (float)num138, this.position.Y + (float)num138), this.width - num138 * 2, this.height - num138 * 2, 172, 0f, 0f, 100, default(Color), 0.6f);
										Main.dust[num139].velocity *= 0.25f;
										Main.dust[num139].velocity += this.velocity * 0.5f;
									}
								}
								else if (this.type == 112)
								{
									int num140 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 2f), this.width, this.height, 18, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 80, default(Color), 1.3f);
									Main.dust[num140].velocity *= 0.3f;
									Main.dust[num140].noGravity = true;
								}
								else
								{
									Lighting.AddLight((int)((this.position.X + (float)(this.width / 2)) / 16f), (int)((this.position.Y + (float)(this.height / 2)) / 16f), 1f, 0.3f, 0.1f);
									int num141 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 2f), this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 2f);
									Main.dust[num141].noGravity = true;
									Dust expr_5369_cp_0 = Main.dust[num141];
									expr_5369_cp_0.velocity.X = expr_5369_cp_0.velocity.X * 0.3f;
									Dust expr_5387_cp_0 = Main.dust[num141];
									expr_5387_cp_0.velocity.Y = expr_5387_cp_0.velocity.Y * 0.3f;
								}
							}
							this.rotation += 0.4f * (float)this.direction;
							return;
						}
						this.rotation += 0.1f * (float)this.direction;
						float num142 = 15f;
						float num143 = 0.0833333358f;
						Vector2 center = base.Center;
						Vector2 center2 = Main.player[this.target].Center;
						Vector2 vec = center2 - center;
						vec.Normalize();
						if (vec.HasNaNs())
						{
							vec = new Vector2((float)this.direction, 0f);
						}
						this.velocity = (this.velocity * (num142 - 1f) + vec * (this.velocity.Length() + num143)) / num142;
						if (this.velocity.Length() < 6f)
						{
							this.velocity *= 1.05f;
							return;
						}
					}
					else if (this.aiStyle == 10)
					{
						float num144 = 1f;
						float num145 = 0.011f;
						this.TargetClosest(true);
						Vector2 vector15 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
						float num146 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector15.X;
						float num147 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector15.Y;
						float num148 = (float)Math.Sqrt((double)(num146 * num146 + num147 * num147));
						float num149 = num148;
						this.ai[1] += 1f;
						if (this.ai[1] > 600f)
						{
							num145 *= 8f;
							num144 = 4f;
							if (this.ai[1] > 650f)
							{
								this.ai[1] = 0f;
							}
						}
						else if (num149 < 250f)
						{
							this.ai[0] += 0.9f;
							if (this.ai[0] > 0f)
							{
								this.velocity.Y = this.velocity.Y + 0.019f;
							}
							else
							{
								this.velocity.Y = this.velocity.Y - 0.019f;
							}
							if (this.ai[0] < -100f || this.ai[0] > 100f)
							{
								this.velocity.X = this.velocity.X + 0.019f;
							}
							else
							{
								this.velocity.X = this.velocity.X - 0.019f;
							}
							if (this.ai[0] > 200f)
							{
								this.ai[0] = -200f;
							}
						}
						if (num149 > 350f)
						{
							num144 = 5f;
							num145 = 0.3f;
						}
						else if (num149 > 300f)
						{
							num144 = 3f;
							num145 = 0.2f;
						}
						else if (num149 > 250f)
						{
							num144 = 1.5f;
							num145 = 0.1f;
						}
						num148 = num144 / num148;
						num146 *= num148;
						num147 *= num148;
						if (Main.player[this.target].dead)
						{
							num146 = (float)this.direction * num144 / 2f;
							num147 = -num144 / 2f;
						}
						if (this.velocity.X < num146)
						{
							this.velocity.X = this.velocity.X + num145;
						}
						else if (this.velocity.X > num146)
						{
							this.velocity.X = this.velocity.X - num145;
						}
						if (this.velocity.Y < num147)
						{
							this.velocity.Y = this.velocity.Y + num145;
						}
						else if (this.velocity.Y > num147)
						{
							this.velocity.Y = this.velocity.Y - num145;
						}
						if (num146 > 0f)
						{
							this.spriteDirection = -1;
							this.rotation = (float)Math.Atan2((double)num147, (double)num146);
						}
						if (num146 < 0f)
						{
							this.spriteDirection = 1;
							this.rotation = (float)Math.Atan2((double)num147, (double)num146) + 3.14f;
						}
						if (this.type == 289)
						{
							if (this.justHit)
							{
								this.ai[2] = 0f;
								this.ai[3] = 0f;
							}
							vector15 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
							num146 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector15.X;
							num147 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector15.Y;
							num148 = (float)Math.Sqrt((double)(num146 * num146 + num147 * num147));
							if (num148 > 500f)
							{
								this.ai[2] = 0f;
								this.ai[3] = 0f;
								return;
							}
							this.ai[2] += 1f;
							if (this.ai[3] == 0f)
							{
								if (this.ai[2] > 120f)
								{
									this.ai[2] = 0f;
									this.ai[3] = 1f;
									this.netUpdate = true;
									return;
								}
							}
							else
							{
								if (this.ai[2] > 40f)
								{
									this.ai[3] = 0f;
								}
								if (Main.netMode != 1 && this.ai[2] == 20f)
								{
									float num150 = 6f;
									int num151 = 25;
									int num152 = 299;
									num148 = num150 / num148;
									num146 *= num148;
									num147 *= num148;
									Projectile.NewProjectile(vector15.X, vector15.Y, num146, num147, num152, num151, 0f, Main.myPlayer, 0f, 0f);
									return;
								}
							}
						}
					}
					else if (this.aiStyle == 11)
					{
						this.defense = this.defDefense;
						if (this.ai[0] == 0f && Main.netMode != 1)
						{
							this.TargetClosest(true);
							this.ai[0] = 1f;
							if (this.type != 68)
							{
								int num153 = NPC.NewNPC((int)(this.position.X + (float)(this.width / 2)), (int)this.position.Y + this.height / 2, 36, this.whoAmI, 0f, 0f, 0f, 0f, 255);
								Main.npc[num153].ai[0] = -1f;
								Main.npc[num153].ai[1] = (float)this.whoAmI;
								Main.npc[num153].target = this.target;
								Main.npc[num153].netUpdate = true;
								num153 = NPC.NewNPC((int)(this.position.X + (float)(this.width / 2)), (int)this.position.Y + this.height / 2, 36, this.whoAmI, 0f, 0f, 0f, 0f, 255);
								Main.npc[num153].ai[0] = 1f;
								Main.npc[num153].ai[1] = (float)this.whoAmI;
								Main.npc[num153].ai[3] = 150f;
								Main.npc[num153].target = this.target;
								Main.npc[num153].netUpdate = true;
							}
						}
						if (this.type == 68 && this.ai[1] != 3f && this.ai[1] != 2f)
						{
							Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
							this.ai[1] = 2f;
						}
						if (Main.player[this.target].dead || Math.Abs(this.position.X - Main.player[this.target].position.X) > 2000f || Math.Abs(this.position.Y - Main.player[this.target].position.Y) > 2000f)
						{
							this.TargetClosest(true);
							if (Main.player[this.target].dead || Math.Abs(this.position.X - Main.player[this.target].position.X) > 2000f || Math.Abs(this.position.Y - Main.player[this.target].position.Y) > 2000f)
							{
								this.ai[1] = 3f;
							}
						}
						if (Main.dayTime && this.ai[1] != 3f && this.ai[1] != 2f)
						{
							this.ai[1] = 2f;
							Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
						}
						int num154 = 0;
						if (Main.expertMode)
						{
							for (int num155 = 0; num155 < 200; num155++)
							{
								if (Main.npc[num155].active && Main.npc[num155].type == this.type + 1)
								{
									num154++;
								}
							}
							this.defense += num154 * 25;
							if ((num154 < 2 || (double)this.life < (double)this.lifeMax * 0.75) && this.ai[1] == 0f)
							{
								float num156 = 80f;
								if (num154 == 0)
								{
									num156 /= 2f;
								}
								if (Main.netMode != 1 && this.ai[2] % num156 == 0f)
								{
									Vector2 vector16 = base.Center;
									float num157 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector16.X;
									float num158 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector16.Y;
									Math.Sqrt((double)(num157 * num157 + num158 * num158));
									if (Collision.CanHit(vector16, 1, 1, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
									{
										float num159 = 3f;
										if (num154 == 0)
										{
											num159 += 2f;
										}
										float num160 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector16.X + (float)Main.rand.Next(-20, 21);
										float num161 = Main.player[this.target].position.Y + (float)Main.player[this.target].height * 0.5f - vector16.Y + (float)Main.rand.Next(-20, 21);
										float num162 = (float)Math.Sqrt((double)(num160 * num160 + num161 * num161));
										num162 = num159 / num162;
										num160 *= num162;
										num161 *= num162;
										Vector2 value = new Vector2(num160 * 1f + (float)Main.rand.Next(-50, 51) * 0.01f, num161 * 1f + (float)Main.rand.Next(-50, 51) * 0.01f);
										value.Normalize();
										value *= num159;
										value += this.velocity;
										num160 = value.X;
										num161 = value.Y;
										int num163 = 17;
										int num164 = 270;
										vector16 += value * 5f;
										int num165 = Projectile.NewProjectile(vector16.X, vector16.Y, num160, num161, num164, num163, 0f, Main.myPlayer, -1f, 0f);
										Main.projectile[num165].timeLeft = 300;
									}
								}
							}
						}
						if (this.ai[1] == 0f)
						{
							this.damage = this.defDamage;
							this.ai[2] += 1f;
							if (this.ai[2] >= 800f)
							{
								this.ai[2] = 0f;
								this.ai[1] = 1f;
								this.TargetClosest(true);
								this.netUpdate = true;
							}
							this.rotation = this.velocity.X / 15f;
							float num166 = 0.02f;
							float num167 = 2f;
							float num168 = 0.05f;
							float num169 = 8f;
							if (Main.expertMode)
							{
								num166 = 0.03f;
								num167 = 4f;
								num168 = 0.07f;
								num169 = 9.5f;
							}
							if (this.position.Y > Main.player[this.target].position.Y - 250f)
							{
								if (this.velocity.Y > 0f)
								{
									this.velocity.Y = this.velocity.Y * 0.98f;
								}
								this.velocity.Y = this.velocity.Y - num166;
								if (this.velocity.Y > num167)
								{
									this.velocity.Y = num167;
								}
							}
							else if (this.position.Y < Main.player[this.target].position.Y - 250f)
							{
								if (this.velocity.Y < 0f)
								{
									this.velocity.Y = this.velocity.Y * 0.98f;
								}
								this.velocity.Y = this.velocity.Y + num166;
								if (this.velocity.Y < -num167)
								{
									this.velocity.Y = -num167;
								}
							}
							if (this.position.X + (float)(this.width / 2) > Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2))
							{
								if (this.velocity.X > 0f)
								{
									this.velocity.X = this.velocity.X * 0.98f;
								}
								this.velocity.X = this.velocity.X - num168;
								if (this.velocity.X > num169)
								{
									this.velocity.X = num169;
								}
							}
							if (this.position.X + (float)(this.width / 2) < Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2))
							{
								if (this.velocity.X < 0f)
								{
									this.velocity.X = this.velocity.X * 0.98f;
								}
								this.velocity.X = this.velocity.X + num168;
								if (this.velocity.X < -num169)
								{
									this.velocity.X = -num169;
								}
							}
						}
						else if (this.ai[1] == 1f)
						{
							this.defense -= 10;
							this.ai[2] += 1f;
							if (this.ai[2] == 2f)
							{
								Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
							}
							if (this.ai[2] >= 400f)
							{
								this.ai[2] = 0f;
								this.ai[1] = 0f;
							}
							this.rotation += (float)this.direction * 0.3f;
							Vector2 vector17 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
							float num170 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector17.X;
							float num171 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector17.Y;
							float num172 = (float)Math.Sqrt((double)(num170 * num170 + num171 * num171));
							float num173 = 1.5f;
							if (Main.expertMode)
							{
								this.damage = (int)((double)this.defDamage * 1.3);
								num173 = 4f;
								if (num172 > 150f)
								{
									num173 *= 1.05f;
								}
								if (num172 > 200f)
								{
									num173 *= 1.1f;
								}
								if (num172 > 250f)
								{
									num173 *= 1.1f;
								}
								if (num172 > 300f)
								{
									num173 *= 1.1f;
								}
								if (num172 > 350f)
								{
									num173 *= 1.1f;
								}
								if (num172 > 400f)
								{
									num173 *= 1.1f;
								}
								if (num172 > 450f)
								{
									num173 *= 1.1f;
								}
								if (num172 > 500f)
								{
									num173 *= 1.1f;
								}
								if (num172 > 550f)
								{
									num173 *= 1.1f;
								}
								if (num172 > 600f)
								{
									num173 *= 1.1f;
								}
								if (num154 == 0)
								{
									num173 *= 1.2f;
								}
								else if (num154 == 1)
								{
									num173 *= 1.1f;
								}
							}
							num172 = num173 / num172;
							this.velocity.X = num170 * num172;
							this.velocity.Y = num171 * num172;
						}
						else if (this.ai[1] == 2f)
						{
							this.damage = 1000;
							this.defense = 9999;
							this.rotation += (float)this.direction * 0.3f;
							Vector2 vector18 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
							float num174 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector18.X;
							float num175 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector18.Y;
							float num176 = (float)Math.Sqrt((double)(num174 * num174 + num175 * num175));
							num176 = 8f / num176;
							this.velocity.X = num174 * num176;
							this.velocity.Y = num175 * num176;
						}
						else if (this.ai[1] == 3f)
						{
							this.velocity.Y = this.velocity.Y + 0.1f;
							if (this.velocity.Y < 0f)
							{
								this.velocity.Y = this.velocity.Y * 0.95f;
							}
							this.velocity.X = this.velocity.X * 0.95f;
							if (this.timeLeft > 50)
							{
								this.timeLeft = 50;
							}
						}
						if (this.ai[1] != 2f && this.ai[1] != 3f && this.type != 68)
						{
							if (num154 == 0 && Main.expertMode)
							{
								return;
							}
							int num177 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) - 15f - this.velocity.X * 5f, this.position.Y + (float)this.height - 2f), 30, 10, 5, -this.velocity.X * 0.2f, 3f, 0, default(Color), 2f);
							Main.dust[num177].noGravity = true;
							Dust expr_6804_cp_0 = Main.dust[num177];
							expr_6804_cp_0.velocity.X = expr_6804_cp_0.velocity.X * 1.3f;
							Dust expr_6822_cp_0 = Main.dust[num177];
							expr_6822_cp_0.velocity.X = expr_6822_cp_0.velocity.X + this.velocity.X * 0.4f;
							Dust expr_684C_cp_0 = Main.dust[num177];
							expr_684C_cp_0.velocity.Y = expr_684C_cp_0.velocity.Y + (2f + this.velocity.Y);
							for (int num178 = 0; num178 < 2; num178++)
							{
								num177 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 120f), this.width, 60, 5, this.velocity.X, this.velocity.Y, 0, default(Color), 2f);
								Main.dust[num177].noGravity = true;
								Main.dust[num177].velocity -= this.velocity;
								Dust expr_6905_cp_0 = Main.dust[num177];
								expr_6905_cp_0.velocity.Y = expr_6905_cp_0.velocity.Y + 5f;
							}
							return;
						}
					}
					else if (this.aiStyle == 12)
					{
						this.spriteDirection = -(int)this.ai[0];
						if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 11)
						{
							this.ai[2] += 10f;
							if (this.ai[2] > 50f || Main.netMode != 2)
							{
								this.life = -1;
								this.HitEffect(0, 10.0);
								this.active = false;
							}
						}
						if (this.ai[2] == 0f || this.ai[2] == 3f)
						{
							if (Main.npc[(int)this.ai[1]].ai[1] == 3f && this.timeLeft > 10)
							{
								this.timeLeft = 10;
							}
							if (Main.npc[(int)this.ai[1]].ai[1] != 0f)
							{
								if (this.position.Y > Main.npc[(int)this.ai[1]].position.Y - 100f)
								{
									if (this.velocity.Y > 0f)
									{
										this.velocity.Y = this.velocity.Y * 0.96f;
									}
									this.velocity.Y = this.velocity.Y - 0.07f;
									if (this.velocity.Y > 6f)
									{
										this.velocity.Y = 6f;
									}
								}
								else if (this.position.Y < Main.npc[(int)this.ai[1]].position.Y - 100f)
								{
									if (this.velocity.Y < 0f)
									{
										this.velocity.Y = this.velocity.Y * 0.96f;
									}
									this.velocity.Y = this.velocity.Y + 0.07f;
									if (this.velocity.Y < -6f)
									{
										this.velocity.Y = -6f;
									}
								}
								if (this.position.X + (float)(this.width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
								{
									if (this.velocity.X > 0f)
									{
										this.velocity.X = this.velocity.X * 0.96f;
									}
									this.velocity.X = this.velocity.X - 0.1f;
									if (this.velocity.X > 8f)
									{
										this.velocity.X = 8f;
									}
								}
								if (this.position.X + (float)(this.width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
								{
									if (this.velocity.X < 0f)
									{
										this.velocity.X = this.velocity.X * 0.96f;
									}
									this.velocity.X = this.velocity.X + 0.1f;
									if (this.velocity.X < -8f)
									{
										this.velocity.X = -8f;
									}
								}
							}
							else
							{
								this.ai[3] += 1f;
								if (Main.expertMode)
								{
									this.ai[3] += 0.5f;
								}
								if (this.ai[3] >= 300f)
								{
									this.ai[2] += 1f;
									this.ai[3] = 0f;
									this.netUpdate = true;
								}
								if (Main.expertMode)
								{
									if (this.position.Y > Main.npc[(int)this.ai[1]].position.Y + 230f)
									{
										if (this.velocity.Y > 0f)
										{
											this.velocity.Y = this.velocity.Y * 0.96f;
										}
										this.velocity.Y = this.velocity.Y - 0.04f;
										if (this.velocity.Y > 3f)
										{
											this.velocity.Y = 3f;
										}
									}
									else if (this.position.Y < Main.npc[(int)this.ai[1]].position.Y + 230f)
									{
										if (this.velocity.Y < 0f)
										{
											this.velocity.Y = this.velocity.Y * 0.96f;
										}
										this.velocity.Y = this.velocity.Y + 0.04f;
										if (this.velocity.Y < -3f)
										{
											this.velocity.Y = -3f;
										}
									}
									if (this.position.X + (float)(this.width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0])
									{
										if (this.velocity.X > 0f)
										{
											this.velocity.X = this.velocity.X * 0.96f;
										}
										this.velocity.X = this.velocity.X - 0.07f;
										if (this.velocity.X > 8f)
										{
											this.velocity.X = 8f;
										}
									}
									if (this.position.X + (float)(this.width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0])
									{
										if (this.velocity.X < 0f)
										{
											this.velocity.X = this.velocity.X * 0.96f;
										}
										this.velocity.X = this.velocity.X + 0.07f;
										if (this.velocity.X < -8f)
										{
											this.velocity.X = -8f;
										}
									}
								}
								if (this.position.Y > Main.npc[(int)this.ai[1]].position.Y + 230f)
								{
									if (this.velocity.Y > 0f)
									{
										this.velocity.Y = this.velocity.Y * 0.96f;
									}
									this.velocity.Y = this.velocity.Y - 0.04f;
									if (this.velocity.Y > 3f)
									{
										this.velocity.Y = 3f;
									}
								}
								else if (this.position.Y < Main.npc[(int)this.ai[1]].position.Y + 230f)
								{
									if (this.velocity.Y < 0f)
									{
										this.velocity.Y = this.velocity.Y * 0.96f;
									}
									this.velocity.Y = this.velocity.Y + 0.04f;
									if (this.velocity.Y < -3f)
									{
										this.velocity.Y = -3f;
									}
								}
								if (this.position.X + (float)(this.width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0])
								{
									if (this.velocity.X > 0f)
									{
										this.velocity.X = this.velocity.X * 0.96f;
									}
									this.velocity.X = this.velocity.X - 0.07f;
									if (this.velocity.X > 8f)
									{
										this.velocity.X = 8f;
									}
								}
								if (this.position.X + (float)(this.width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0])
								{
									if (this.velocity.X < 0f)
									{
										this.velocity.X = this.velocity.X * 0.96f;
									}
									this.velocity.X = this.velocity.X + 0.07f;
									if (this.velocity.X < -8f)
									{
										this.velocity.X = -8f;
									}
								}
							}
							Vector2 vector19 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
							float num179 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector19.X;
							float num180 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector19.Y;
							Math.Sqrt((double)(num179 * num179 + num180 * num180));
							this.rotation = (float)Math.Atan2((double)num180, (double)num179) + 1.57f;
							return;
						}
						if (this.ai[2] == 1f)
						{
							Vector2 vector20 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
							float num181 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector20.X;
							float num182 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector20.Y;
							float num183 = (float)Math.Sqrt((double)(num181 * num181 + num182 * num182));
							this.rotation = (float)Math.Atan2((double)num182, (double)num181) + 1.57f;
							this.velocity.X = this.velocity.X * 0.95f;
							this.velocity.Y = this.velocity.Y - 0.1f;
							if (Main.expertMode)
							{
								this.velocity.Y = this.velocity.Y - 0.06f;
								if (this.velocity.Y < -13f)
								{
									this.velocity.Y = -13f;
								}
							}
							else if (this.velocity.Y < -8f)
							{
								this.velocity.Y = -8f;
							}
							if (this.position.Y < Main.npc[(int)this.ai[1]].position.Y - 200f)
							{
								this.TargetClosest(true);
								this.ai[2] = 2f;
								vector20 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
								num181 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector20.X;
								num182 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector20.Y;
								num183 = (float)Math.Sqrt((double)(num181 * num181 + num182 * num182));
								if (Main.expertMode)
								{
									num183 = 21f / num183;
								}
								else
								{
									num183 = 18f / num183;
								}
								this.velocity.X = num181 * num183;
								this.velocity.Y = num182 * num183;
								this.netUpdate = true;
								return;
							}
						}
						else if (this.ai[2] == 2f)
						{
							if (this.position.Y > Main.player[this.target].position.Y || this.velocity.Y < 0f)
							{
								this.ai[2] = 3f;
								return;
							}
						}
						else if (this.ai[2] == 4f)
						{
							Vector2 vector21 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
							float num184 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector21.X;
							float num185 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector21.Y;
							float num186 = (float)Math.Sqrt((double)(num184 * num184 + num185 * num185));
							this.rotation = (float)Math.Atan2((double)num185, (double)num184) + 1.57f;
							this.velocity.Y = this.velocity.Y * 0.95f;
							this.velocity.X = this.velocity.X + 0.1f * -this.ai[0];
							if (Main.expertMode)
							{
								this.velocity.X = this.velocity.X + 0.07f * -this.ai[0];
								if (this.velocity.X < -12f)
								{
									this.velocity.X = -12f;
								}
								else if (this.velocity.X > 12f)
								{
									this.velocity.X = 12f;
								}
							}
							else if (this.velocity.X < -8f)
							{
								this.velocity.X = -8f;
							}
							else if (this.velocity.X > 8f)
							{
								this.velocity.X = 8f;
							}
							if (this.position.X + (float)(this.width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 500f || this.position.X + (float)(this.width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 500f)
							{
								this.TargetClosest(true);
								this.ai[2] = 5f;
								vector21 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
								num184 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector21.X;
								num185 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector21.Y;
								num186 = (float)Math.Sqrt((double)(num184 * num184 + num185 * num185));
								if (Main.expertMode)
								{
									num186 = 22f / num186;
								}
								else
								{
									num186 = 17f / num186;
								}
								this.velocity.X = num184 * num186;
								this.velocity.Y = num185 * num186;
								this.netUpdate = true;
								return;
							}
						}
						else if (this.ai[2] == 5f && ((this.velocity.X > 0f && this.position.X + (float)(this.width / 2) > Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2)) || (this.velocity.X < 0f && this.position.X + (float)(this.width / 2) < Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2))))
						{
							this.ai[2] = 0f;
							return;
						}
					}
					else if (this.aiStyle == 13)
					{
						if (this.ai[0] < 0f || this.ai[0] >= (float)Main.maxTilesX || this.ai[1] < 0f || this.ai[1] >= (float)Main.maxTilesX)
						{
							return;
						}
						if (Main.tile[(int)this.ai[0], (int)this.ai[1]] == null)
						{
							Main.tile[(int)this.ai[0], (int)this.ai[1]] = new Tile();
						}
						if (!Main.tile[(int)this.ai[0], (int)this.ai[1]].active())
						{
							this.life = -1;
							this.HitEffect(0, 10.0);
							this.active = false;
							return;
						}
						FixExploitManEaters.ProtectSpot((int)this.ai[0], (int)this.ai[1]);
						this.TargetClosest(true);
						float num187 = 0.035f;
						float num188 = 150f;
						if (this.type == 43)
						{
							num188 = 250f;
						}
						if (this.type == 101)
						{
							num188 = 175f;
						}
						if (this.type == 259)
						{
							num188 = 100f;
						}
						if (this.type == 175)
						{
							num188 = 500f;
							num187 = 0.05f;
						}
						if (this.type == 260)
						{
							num188 = 350f;
							num187 = 0.15f;
						}
						this.ai[2] += 1f;
						if (this.ai[2] > 300f)
						{
							num188 = (float)((int)((double)num188 * 1.3));
							if (this.ai[2] > 450f)
							{
								this.ai[2] = 0f;
							}
						}
						Vector2 vector22 = new Vector2(this.ai[0] * 16f + 8f, this.ai[1] * 16f + 8f);
						float num189 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - (float)(this.width / 2) - vector22.X;
						float num190 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - (float)(this.height / 2) - vector22.Y;
						float num191 = (float)Math.Sqrt((double)(num189 * num189 + num190 * num190));
						if (num191 > num188)
						{
							num191 = num188 / num191;
							num189 *= num191;
							num190 *= num191;
						}
						if (this.position.X < this.ai[0] * 16f + 8f + num189)
						{
							this.velocity.X = this.velocity.X + num187;
							if (this.velocity.X < 0f && num189 > 0f)
							{
								this.velocity.X = this.velocity.X + num187 * 1.5f;
							}
						}
						else if (this.position.X > this.ai[0] * 16f + 8f + num189)
						{
							this.velocity.X = this.velocity.X - num187;
							if (this.velocity.X > 0f && num189 < 0f)
							{
								this.velocity.X = this.velocity.X - num187 * 1.5f;
							}
						}
						if (this.position.Y < this.ai[1] * 16f + 8f + num190)
						{
							this.velocity.Y = this.velocity.Y + num187;
							if (this.velocity.Y < 0f && num190 > 0f)
							{
								this.velocity.Y = this.velocity.Y + num187 * 1.5f;
							}
						}
						else if (this.position.Y > this.ai[1] * 16f + 8f + num190)
						{
							this.velocity.Y = this.velocity.Y - num187;
							if (this.velocity.Y > 0f && num190 < 0f)
							{
								this.velocity.Y = this.velocity.Y - num187 * 1.5f;
							}
						}
						if (this.type == 43)
						{
							if (this.velocity.X > 3f)
							{
								this.velocity.X = 3f;
							}
							if (this.velocity.X < -3f)
							{
								this.velocity.X = -3f;
							}
							if (this.velocity.Y > 3f)
							{
								this.velocity.Y = 3f;
							}
							if (this.velocity.Y < -3f)
							{
								this.velocity.Y = -3f;
							}
						}
						else if (this.type == 175)
						{
							if (this.velocity.X > 4f)
							{
								this.velocity.X = 4f;
							}
							if (this.velocity.X < -4f)
							{
								this.velocity.X = -4f;
							}
							if (this.velocity.Y > 4f)
							{
								this.velocity.Y = 4f;
							}
							if (this.velocity.Y < -4f)
							{
								this.velocity.Y = -4f;
							}
						}
						else
						{
							if (this.velocity.X > 2f)
							{
								this.velocity.X = 2f;
							}
							if (this.velocity.X < -2f)
							{
								this.velocity.X = -2f;
							}
							if (this.velocity.Y > 2f)
							{
								this.velocity.Y = 2f;
							}
							if (this.velocity.Y < -2f)
							{
								this.velocity.Y = -2f;
							}
						}
						if (this.type == 259 || this.type == 260)
						{
							this.rotation = (float)Math.Atan2((double)num190, (double)num189) + 1.57f;
						}
						else
						{
							if (num189 > 0f)
							{
								this.spriteDirection = 1;
								this.rotation = (float)Math.Atan2((double)num190, (double)num189);
							}
							if (num189 < 0f)
							{
								this.spriteDirection = -1;
								this.rotation = (float)Math.Atan2((double)num190, (double)num189) + 3.14f;
							}
						}
						if (this.collideX)
						{
							this.netUpdate = true;
							this.velocity.X = this.oldVelocity.X * -0.7f;
							if (this.velocity.X > 0f && this.velocity.X < 2f)
							{
								this.velocity.X = 2f;
							}
							if (this.velocity.X < 0f && this.velocity.X > -2f)
							{
								this.velocity.X = -2f;
							}
						}
						if (this.collideY)
						{
							this.netUpdate = true;
							this.velocity.Y = this.oldVelocity.Y * -0.7f;
							if (this.velocity.Y > 0f && this.velocity.Y < 2f)
							{
								this.velocity.Y = 2f;
							}
							if (this.velocity.Y < 0f && this.velocity.Y > -2f)
							{
								this.velocity.Y = -2f;
							}
						}
						if (Main.netMode != 1)
						{
							if (this.type == 101 && !Main.player[this.target].dead)
							{
								if (this.justHit)
								{
									this.localAI[0] = 0f;
								}
								this.localAI[0] += 1f;
								if (this.localAI[0] >= 120f)
								{
									if (!Collision.SolidCollision(this.position, this.width, this.height) && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
									{
										float num192 = 10f;
										vector22 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
										num189 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector22.X + (float)Main.rand.Next(-10, 11);
										num190 = Main.player[this.target].position.Y + (float)Main.player[this.target].height * 0.5f - vector22.Y + (float)Main.rand.Next(-10, 11);
										num191 = (float)Math.Sqrt((double)(num189 * num189 + num190 * num190));
										num191 = num192 / num191;
										num189 *= num191;
										num190 *= num191;
										int num193 = 22;
										if (Main.expertMode)
										{
											num193 = (int)((double)num193 * 0.8);
										}
										int num194 = 96;
										int num195 = Projectile.NewProjectile(vector22.X, vector22.Y, num189, num190, num194, num193, 0f, Main.myPlayer, 0f, 0f);
										Main.projectile[num195].timeLeft = 300;
										this.localAI[0] = 0f;
									}
									else
									{
										this.localAI[0] = 100f;
									}
								}
							}
							if (this.type == 260 && !Main.player[this.target].dead)
							{
								if (this.justHit)
								{
									this.localAI[0] = 0f;
								}
								this.localAI[0] += 1f;
								if (this.localAI[0] >= 150f)
								{
									if (!Collision.SolidCollision(this.position, this.width, this.height))
									{
										float num196 = 14f;
										vector22 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
										num189 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector22.X + (float)Main.rand.Next(-10, 11);
										float num197 = Math.Abs(num189 * 0.1f);
										if (num190 > 0f)
										{
											num197 = 0f;
										}
										num190 = Main.player[this.target].position.Y + (float)Main.player[this.target].height * 0.5f - vector22.Y + (float)Main.rand.Next(-10, 11) - num197;
										num191 = (float)Math.Sqrt((double)(num189 * num189 + num190 * num190));
										num191 = num196 / num191;
										num189 *= num191;
										num190 *= num191;
										int num198 = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 261, 0, 0f, 0f, 0f, 0f, 255);
										Main.npc[num198].velocity.X = num189;
										Main.npc[num198].velocity.Y = num190;
										Main.npc[num198].netUpdate = true;
										this.localAI[0] = 0f;
										return;
									}
									this.localAI[0] = 250f;
									return;
								}
							}
						}
					}
					else if (this.aiStyle == 14)
					{
						if (this.type == 60 || this.type == 151)
						{
							int num199 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 2f);
							Main.dust[num199].noGravity = true;
						}
						if (this.type == 150 && Main.rand.Next(10) == 0)
						{
							int num200 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 67, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 90, default(Color), 1.5f);
							Main.dust[num200].noGravity = true;
							Main.dust[num200].velocity *= 0.2f;
							Main.dust[num200].noLight = true;
						}
						this.noGravity = true;
						if (this.collideX)
						{
							this.velocity.X = this.oldVelocity.X * -0.5f;
							if (this.direction == -1 && this.velocity.X > 0f && this.velocity.X < 2f)
							{
								this.velocity.X = 2f;
							}
							if (this.direction == 1 && this.velocity.X < 0f && this.velocity.X > -2f)
							{
								this.velocity.X = -2f;
							}
						}
						if (this.collideY)
						{
							this.velocity.Y = this.oldVelocity.Y * -0.5f;
							if (this.velocity.Y > 0f && this.velocity.Y < 1f)
							{
								this.velocity.Y = 1f;
							}
							if (this.velocity.Y < 0f && this.velocity.Y > -1f)
							{
								this.velocity.Y = -1f;
							}
						}
						if (this.type == 226)
						{
							int direction = 1;
							int num201 = 1;
							if (this.velocity.X < 0f)
							{
								direction = -1;
							}
							if (this.velocity.Y < 0f)
							{
								num201 = -1;
							}
							this.TargetClosest(true);
							if (!Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
							{
								this.direction = direction;
								this.directionY = num201;
							}
						}
						else
						{
							this.TargetClosest(true);
						}
						if (this.type == 158)
						{
							if ((double)this.position.Y < Main.worldSurface * 16.0 && Main.dayTime && !Main.eclipse)
							{
								this.directionY = -1;
								this.direction *= -1;
							}
							if (this.direction == -1 && this.velocity.X > -7f)
							{
								this.velocity.X = this.velocity.X - 0.2f;
								if (this.velocity.X > 4f)
								{
									this.velocity.X = this.velocity.X - 0.1f;
								}
								else if (this.velocity.X > 0f)
								{
									this.velocity.X = this.velocity.X + 0.05f;
								}
								if (this.velocity.X < -7f)
								{
									this.velocity.X = -7f;
								}
							}
							else if (this.direction == 1 && this.velocity.X < 7f)
							{
								this.velocity.X = this.velocity.X + 0.2f;
								if (this.velocity.X < -4f)
								{
									this.velocity.X = this.velocity.X + 0.1f;
								}
								else if (this.velocity.X < 0f)
								{
									this.velocity.X = this.velocity.X - 0.05f;
								}
								if (this.velocity.X > 7f)
								{
									this.velocity.X = 7f;
								}
							}
							if (this.directionY == -1 && this.velocity.Y > -7f)
							{
								this.velocity.Y = this.velocity.Y - 0.2f;
								if (this.velocity.Y > 4f)
								{
									this.velocity.Y = this.velocity.Y - 0.1f;
								}
								else if (this.velocity.Y > 0f)
								{
									this.velocity.Y = this.velocity.Y + 0.05f;
								}
								if (this.velocity.Y < -7f)
								{
									this.velocity.Y = -7f;
								}
							}
							else if (this.directionY == 1 && this.velocity.Y < 7f)
							{
								this.velocity.Y = this.velocity.Y + 0.2f;
								if (this.velocity.Y < -4f)
								{
									this.velocity.Y = this.velocity.Y + 0.1f;
								}
								else if (this.velocity.Y < 0f)
								{
									this.velocity.Y = this.velocity.Y - 0.05f;
								}
								if (this.velocity.Y > 7f)
								{
									this.velocity.Y = 7f;
								}
							}
						}
						else if (this.type == 226)
						{
							if (this.direction == -1 && this.velocity.X > -4f)
							{
								this.velocity.X = this.velocity.X - 0.2f;
								if (this.velocity.X > 4f)
								{
									this.velocity.X = this.velocity.X - 0.1f;
								}
								else if (this.velocity.X > 0f)
								{
									this.velocity.X = this.velocity.X + 0.05f;
								}
								if (this.velocity.X < -4f)
								{
									this.velocity.X = -4f;
								}
							}
							else if (this.direction == 1 && this.velocity.X < 4f)
							{
								this.velocity.X = this.velocity.X + 0.2f;
								if (this.velocity.X < -4f)
								{
									this.velocity.X = this.velocity.X + 0.1f;
								}
								else if (this.velocity.X < 0f)
								{
									this.velocity.X = this.velocity.X - 0.05f;
								}
								if (this.velocity.X > 4f)
								{
									this.velocity.X = 4f;
								}
							}
							if (this.directionY == -1 && (double)this.velocity.Y > -2.5)
							{
								this.velocity.Y = this.velocity.Y - 0.1f;
								if ((double)this.velocity.Y > 2.5)
								{
									this.velocity.Y = this.velocity.Y - 0.05f;
								}
								else if (this.velocity.Y > 0f)
								{
									this.velocity.Y = this.velocity.Y + 0.03f;
								}
								if ((double)this.velocity.Y < -2.5)
								{
									this.velocity.Y = -2.5f;
								}
							}
							else if (this.directionY == 1 && (double)this.velocity.Y < 2.5)
							{
								this.velocity.Y = this.velocity.Y + 0.1f;
								if ((double)this.velocity.Y < -2.5)
								{
									this.velocity.Y = this.velocity.Y + 0.05f;
								}
								else if (this.velocity.Y < 0f)
								{
									this.velocity.Y = this.velocity.Y - 0.03f;
								}
								if ((double)this.velocity.Y > 2.5)
								{
									this.velocity.Y = 2.5f;
								}
							}
						}
						else
						{
							if (this.direction == -1 && this.velocity.X > -4f)
							{
								this.velocity.X = this.velocity.X - 0.1f;
								if (this.velocity.X > 4f)
								{
									this.velocity.X = this.velocity.X - 0.1f;
								}
								else if (this.velocity.X > 0f)
								{
									this.velocity.X = this.velocity.X + 0.05f;
								}
								if (this.velocity.X < -4f)
								{
									this.velocity.X = -4f;
								}
							}
							else if (this.direction == 1 && this.velocity.X < 4f)
							{
								this.velocity.X = this.velocity.X + 0.1f;
								if (this.velocity.X < -4f)
								{
									this.velocity.X = this.velocity.X + 0.1f;
								}
								else if (this.velocity.X < 0f)
								{
									this.velocity.X = this.velocity.X - 0.05f;
								}
								if (this.velocity.X > 4f)
								{
									this.velocity.X = 4f;
								}
							}
							if (this.directionY == -1 && (double)this.velocity.Y > -1.5)
							{
								this.velocity.Y = this.velocity.Y - 0.04f;
								if ((double)this.velocity.Y > 1.5)
								{
									this.velocity.Y = this.velocity.Y - 0.05f;
								}
								else if (this.velocity.Y > 0f)
								{
									this.velocity.Y = this.velocity.Y + 0.03f;
								}
								if ((double)this.velocity.Y < -1.5)
								{
									this.velocity.Y = -1.5f;
								}
							}
							else if (this.directionY == 1 && (double)this.velocity.Y < 1.5)
							{
								this.velocity.Y = this.velocity.Y + 0.04f;
								if ((double)this.velocity.Y < -1.5)
								{
									this.velocity.Y = this.velocity.Y + 0.05f;
								}
								else if (this.velocity.Y < 0f)
								{
									this.velocity.Y = this.velocity.Y - 0.03f;
								}
								if ((double)this.velocity.Y > 1.5)
								{
									this.velocity.Y = 1.5f;
								}
							}
						}
						if (this.type == 49 || this.type == 51 || this.type == 60 || this.type == 62 || this.type == 66 || this.type == 93 || this.type == 137 || this.type == 150 || this.type == 151 || this.type == 152)
						{
							if (this.wet)
							{
								if (this.velocity.Y > 0f)
								{
									this.velocity.Y = this.velocity.Y * 0.95f;
								}
								this.velocity.Y = this.velocity.Y - 0.5f;
								if (this.velocity.Y < -4f)
								{
									this.velocity.Y = -4f;
								}
								this.TargetClosest(true);
							}
							if (this.type == 60)
							{
								if (this.direction == -1 && this.velocity.X > -4f)
								{
									this.velocity.X = this.velocity.X - 0.1f;
									if (this.velocity.X > 4f)
									{
										this.velocity.X = this.velocity.X - 0.07f;
									}
									else if (this.velocity.X > 0f)
									{
										this.velocity.X = this.velocity.X + 0.03f;
									}
									if (this.velocity.X < -4f)
									{
										this.velocity.X = -4f;
									}
								}
								else if (this.direction == 1 && this.velocity.X < 4f)
								{
									this.velocity.X = this.velocity.X + 0.1f;
									if (this.velocity.X < -4f)
									{
										this.velocity.X = this.velocity.X + 0.07f;
									}
									else if (this.velocity.X < 0f)
									{
										this.velocity.X = this.velocity.X - 0.03f;
									}
									if (this.velocity.X > 4f)
									{
										this.velocity.X = 4f;
									}
								}
								if (this.directionY == -1 && (double)this.velocity.Y > -1.5)
								{
									this.velocity.Y = this.velocity.Y - 0.04f;
									if ((double)this.velocity.Y > 1.5)
									{
										this.velocity.Y = this.velocity.Y - 0.03f;
									}
									else if (this.velocity.Y > 0f)
									{
										this.velocity.Y = this.velocity.Y + 0.02f;
									}
									if ((double)this.velocity.Y < -1.5)
									{
										this.velocity.Y = -1.5f;
									}
								}
								else if (this.directionY == 1 && (double)this.velocity.Y < 1.5)
								{
									this.velocity.Y = this.velocity.Y + 0.04f;
									if ((double)this.velocity.Y < -1.5)
									{
										this.velocity.Y = this.velocity.Y + 0.03f;
									}
									else if (this.velocity.Y < 0f)
									{
										this.velocity.Y = this.velocity.Y - 0.02f;
									}
									if ((double)this.velocity.Y > 1.5)
									{
										this.velocity.Y = 1.5f;
									}
								}
							}
							else
							{
								if (this.direction == -1 && this.velocity.X > -4f)
								{
									this.velocity.X = this.velocity.X - 0.1f;
									if (this.velocity.X > 4f)
									{
										this.velocity.X = this.velocity.X - 0.1f;
									}
									else if (this.velocity.X > 0f)
									{
										this.velocity.X = this.velocity.X + 0.05f;
									}
									if (this.velocity.X < -4f)
									{
										this.velocity.X = -4f;
									}
								}
								else if (this.direction == 1 && this.velocity.X < 4f)
								{
									this.velocity.X = this.velocity.X + 0.1f;
									if (this.velocity.X < -4f)
									{
										this.velocity.X = this.velocity.X + 0.1f;
									}
									else if (this.velocity.X < 0f)
									{
										this.velocity.X = this.velocity.X - 0.05f;
									}
									if (this.velocity.X > 4f)
									{
										this.velocity.X = 4f;
									}
								}
								if (this.directionY == -1 && (double)this.velocity.Y > -1.5)
								{
									this.velocity.Y = this.velocity.Y - 0.04f;
									if ((double)this.velocity.Y > 1.5)
									{
										this.velocity.Y = this.velocity.Y - 0.05f;
									}
									else if (this.velocity.Y > 0f)
									{
										this.velocity.Y = this.velocity.Y + 0.03f;
									}
									if ((double)this.velocity.Y < -1.5)
									{
										this.velocity.Y = -1.5f;
									}
								}
								else if (this.directionY == 1 && (double)this.velocity.Y < 1.5)
								{
									this.velocity.Y = this.velocity.Y + 0.04f;
									if ((double)this.velocity.Y < -1.5)
									{
										this.velocity.Y = this.velocity.Y + 0.05f;
									}
									else if (this.velocity.Y < 0f)
									{
										this.velocity.Y = this.velocity.Y - 0.03f;
									}
									if ((double)this.velocity.Y > 1.5)
									{
										this.velocity.Y = 1.5f;
									}
								}
							}
						}
						if (this.type == 48 && this.wet)
						{
							if (this.velocity.Y > 0f)
							{
								this.velocity.Y = this.velocity.Y * 0.95f;
							}
							this.velocity.Y = this.velocity.Y - 0.5f;
							if (this.velocity.Y < -4f)
							{
								this.velocity.Y = -4f;
							}
							this.TargetClosest(true);
						}
						if (this.type == 158 && Main.netMode != 1)
						{
							Vector2 vector23 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
							float num202 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector23.X;
							float num203 = Main.player[this.target].position.Y + (float)Main.player[this.target].height * 0.5f - vector23.Y;
							float num204 = (float)Math.Sqrt((double)(num202 * num202 + num203 * num203));
							if (num204 < 200f && this.position.Y + (float)this.height < Main.player[this.target].position.Y + (float)Main.player[this.target].height && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
							{
								this.Transform(159);
							}
						}
						this.ai[1] += 1f;
						if (this.type == 158)
						{
							this.ai[1] += 1f;
						}
						if (this.ai[1] > 200f)
						{
							if (!Main.player[this.target].wet && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
							{
								this.ai[1] = 0f;
							}
							float num205 = 0.2f;
							float num206 = 0.1f;
							float num207 = 4f;
							float num208 = 1.5f;
							if (this.type == 48 || this.type == 62 || this.type == 66)
							{
								num205 = 0.12f;
								num206 = 0.07f;
								num207 = 3f;
								num208 = 1.25f;
							}
							if (this.ai[1] > 1000f)
							{
								this.ai[1] = 0f;
							}
							this.ai[2] += 1f;
							if (this.ai[2] > 0f)
							{
								if (this.velocity.Y < num208)
								{
									this.velocity.Y = this.velocity.Y + num206;
								}
							}
							else if (this.velocity.Y > -num208)
							{
								this.velocity.Y = this.velocity.Y - num206;
							}
							if (this.ai[2] < -150f || this.ai[2] > 150f)
							{
								if (this.velocity.X < num207)
								{
									this.velocity.X = this.velocity.X + num205;
								}
							}
							else if (this.velocity.X > -num207)
							{
								this.velocity.X = this.velocity.X - num205;
							}
							if (this.ai[2] > 300f)
							{
								this.ai[2] = -300f;
							}
						}
						if (Main.netMode != 1)
						{
							if (this.type == 48)
							{
								this.ai[0] += 1f;
								if (this.ai[0] == 30f || this.ai[0] == 60f || this.ai[0] == 90f)
								{
									if (Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
									{
										float num209 = 6f;
										Vector2 vector24 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
										float num210 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector24.X + (float)Main.rand.Next(-100, 101);
										float num211 = Main.player[this.target].position.Y + (float)Main.player[this.target].height * 0.5f - vector24.Y + (float)Main.rand.Next(-100, 101);
										float num212 = (float)Math.Sqrt((double)(num210 * num210 + num211 * num211));
										num212 = num209 / num212;
										num210 *= num212;
										num211 *= num212;
										int num213 = 15;
										int num214 = 38;
										int num215 = Projectile.NewProjectile(vector24.X, vector24.Y, num210, num211, num214, num213, 0f, Main.myPlayer, 0f, 0f);
										Main.projectile[num215].timeLeft = 300;
									}
								}
								else if (this.ai[0] >= (float)(400 + Main.rand.Next(400)))
								{
									this.ai[0] = 0f;
								}
							}
							if (this.type == 62 || this.type == 66)
							{
								this.ai[0] += 1f;
								if (this.ai[0] == 20f || this.ai[0] == 40f || this.ai[0] == 60f || this.ai[0] == 80f)
								{
									if (Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
									{
										float num216 = 0.2f;
										Vector2 vector25 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
										float num217 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector25.X + (float)Main.rand.Next(-100, 101);
										float num218 = Main.player[this.target].position.Y + (float)Main.player[this.target].height * 0.5f - vector25.Y + (float)Main.rand.Next(-100, 101);
										float num219 = (float)Math.Sqrt((double)(num217 * num217 + num218 * num218));
										num219 = num216 / num219;
										num217 *= num219;
										num218 *= num219;
										int num220 = 21;
										int num221 = 44;
										int num222 = Projectile.NewProjectile(vector25.X, vector25.Y, num217, num218, num221, num220, 0f, Main.myPlayer, 0f, 0f);
										Main.projectile[num222].timeLeft = 300;
									}
								}
								else if (this.ai[0] >= (float)(300 + Main.rand.Next(300)))
								{
									this.ai[0] = 0f;
								}
							}
							if (this.type == 156)
							{
								this.ai[0] += 1f;
								if (this.ai[0] == 20f || this.ai[0] == 40f || this.ai[0] == 60f || this.ai[0] == 80f || this.ai[0] == 100f)
								{
									if (Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
									{
										float num223 = 0.2f;
										Vector2 value2 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
										float num224 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - value2.X + (float)Main.rand.Next(-50, 51);
										float num225 = Main.player[this.target].position.Y + (float)Main.player[this.target].height * 0.5f - value2.Y + (float)Main.rand.Next(-50, 51);
										float num226 = (float)Math.Sqrt((double)(num224 * num224 + num225 * num225));
										num226 = num223 / num226;
										num224 *= num226;
										num225 *= num226;
										int num227 = 80;
										int num228 = 115;
										value2 += this.velocity * 5f;
										int num229 = Projectile.NewProjectile(value2.X + num224 * 100f, value2.Y + num225 * 100f, num224, num225, num228, num227, 0f, Main.myPlayer, 0f, 0f);
										Main.projectile[num229].timeLeft = 300;
										return;
									}
								}
								else if (this.ai[0] >= (float)(250 + Main.rand.Next(250)))
								{
									this.ai[0] = 0f;
									return;
								}
							}
						}
					}
					else if (this.aiStyle == 15)
					{
						float num230 = 1f;
						bool flag8 = false;
						bool flag9 = false;
						this.aiAction = 0;
						if (this.ai[3] == 0f && this.life > 0)
						{
							this.ai[3] = (float)this.lifeMax;
						}
						if (this.localAI[3] == 0f && Main.netMode != 1)
						{
							this.ai[0] = -100f;
							this.localAI[3] = 1f;
							this.TargetClosest(true);
							this.netUpdate = true;
						}
						if (Main.player[this.target].dead)
						{
							this.TargetClosest(true);
							if (Main.player[this.target].dead)
							{
								this.timeLeft = 0;
								if (Main.player[this.target].Center.X < base.Center.X)
								{
									this.direction = 1;
								}
								else
								{
									this.direction = -1;
								}
							}
						}
						if (!Main.player[this.target].dead && this.ai[2] >= 300f && this.ai[1] < 5f && this.velocity.Y == 0f)
						{
							this.ai[2] = 0f;
							this.ai[0] = 0f;
							this.ai[1] = 5f;
							if (Main.netMode != 1)
							{
								this.TargetClosest(false);
								Point point3 = base.Center.ToTileCoordinates();
								Point point4 = Main.player[this.target].Center.ToTileCoordinates();
								Vector2 vector26 = Main.player[this.target].Center - base.Center;
								int num231 = 10;
								int num232 = 0;
								int num233 = 7;
								int num234 = 0;
								bool flag10 = false;
								if (vector26.Length() > 2000f)
								{
									flag10 = true;
									num234 = 100;
								}
								while (!flag10 && num234 < 100)
								{
									num234++;
									int num235 = Main.rand.Next(point4.X - num231, point4.X + num231 + 1);
									int num236 = Main.rand.Next(point4.Y - num231, point4.Y + 1);
									if ((num236 < point4.Y - num233 || num236 > point4.Y + num233 || num235 < point4.X - num233 || num235 > point4.X + num233) && (num236 < point3.Y - num232 || num236 > point3.Y + num232 || num235 < point3.X - num232 || num235 > point3.X + num232) && !Main.tile[num235, num236].nactive())
									{
										int num237 = num236;
										int num238 = 0;
										bool flag11 = Main.tile[num235, num237].nactive() && Main.tileSolid[(int)Main.tile[num235, num237].type] && !Main.tileSolidTop[(int)Main.tile[num235, num237].type];
										if (flag11)
										{
											num238 = 1;
										}
										else
										{
											while (num238 < 150 && num237 + num238 < Main.maxTilesY)
											{
												int num239 = num237 + num238;
												bool flag12 = Main.tile[num235, num239].nactive() && Main.tileSolid[(int)Main.tile[num235, num239].type] && !Main.tileSolidTop[(int)Main.tile[num235, num239].type];
												if (flag12)
												{
													num238--;
													break;
												}
												num238++;
											}
										}
										num236 += num238;
										bool flag13 = true;
										if (flag13 && Main.tile[num235, num236].lava())
										{
											flag13 = false;
										}
										if (flag13 && !Collision.CanHitLine(base.Center, 0, 0, Main.player[this.target].Center, 0, 0))
										{
											flag13 = false;
										}
										if (flag13)
										{
											this.localAI[1] = (float)(num235 * 16 + 8);
											this.localAI[2] = (float)(num236 * 16 + 16);
											break;
										}
									}
								}
								if (num234 >= 100)
								{
									Vector2 bottom = Main.player[(int)Player.FindClosest(this.position, this.width, this.height)].Bottom;
									this.localAI[1] = bottom.X;
									this.localAI[2] = bottom.Y;
								}
							}
						}
						if (!Collision.CanHitLine(base.Center, 0, 0, Main.player[this.target].Center, 0, 0))
						{
							this.ai[2] += 1f;
						}
						if (Math.Abs(base.Top.Y - Main.player[this.target].Bottom.Y) > 320f)
						{
							this.ai[2] += 1f;
						}
						if (this.ai[1] == 5f)
						{
							flag8 = true;
							this.aiAction = 1;
							this.ai[0] += 1f;
							num230 = MathHelper.Clamp((60f - this.ai[0]) / 60f, 0f, 1f);
							num230 = 0.5f + num230 * 0.5f;
							if (this.ai[0] >= 60f)
							{
								flag9 = true;
							}
							if (this.ai[0] == 60f)
							{
								Gore.NewGore(base.Center + new Vector2(-40f, (float)(-(float)this.height / 2)), this.velocity, 734, 1f);
							}
							if (this.ai[0] >= 60f && Main.netMode != 1)
							{
								base.Bottom = new Vector2(this.localAI[1], this.localAI[2]);
								this.ai[1] = 6f;
								this.ai[0] = 0f;
								this.netUpdate = true;
							}
							if (Main.netMode == 1 && this.ai[0] >= 120f)
							{
								this.ai[1] = 6f;
								this.ai[0] = 0f;
							}
							if (!flag9)
							{
								for (int num240 = 0; num240 < 10; num240++)
								{
									int num241 = Dust.NewDust(this.position + Vector2.UnitX * -20f, this.width + 40, this.height, 4, this.velocity.X, this.velocity.Y, 150, new Color(78, 136, 255, 80), 2f);
									Main.dust[num241].noGravity = true;
									Main.dust[num241].velocity *= 0.5f;
								}
							}
						}
						else if (this.ai[1] == 6f)
						{
							flag8 = true;
							this.aiAction = 0;
							this.ai[0] += 1f;
							num230 = MathHelper.Clamp(this.ai[0] / 30f, 0f, 1f);
							num230 = 0.5f + num230 * 0.5f;
							if (this.ai[0] >= 30f && Main.netMode != 1)
							{
								this.ai[1] = 0f;
								this.ai[0] = 0f;
								this.netUpdate = true;
								this.TargetClosest(true);
							}
							if (Main.netMode == 1 && this.ai[0] >= 60f)
							{
								this.ai[1] = 0f;
								this.ai[0] = 0f;
								this.TargetClosest(true);
							}
							for (int num242 = 0; num242 < 10; num242++)
							{
								int num243 = Dust.NewDust(this.position + Vector2.UnitX * -20f, this.width + 40, this.height, 4, this.velocity.X, this.velocity.Y, 150, new Color(78, 136, 255, 80), 2f);
								Main.dust[num243].noGravity = true;
								Main.dust[num243].velocity *= 2f;
							}
						}
						this.dontTakeDamage = (this.hide = flag9);
						if (this.velocity.Y == 0f)
						{
							this.velocity.X = this.velocity.X * 0.8f;
							if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1)
							{
								this.velocity.X = 0f;
							}
							if (!flag8)
							{
								this.ai[0] += 2f;
								if ((double)this.life < (double)this.lifeMax * 0.8)
								{
									this.ai[0] += 1f;
								}
								if ((double)this.life < (double)this.lifeMax * 0.6)
								{
									this.ai[0] += 1f;
								}
								if ((double)this.life < (double)this.lifeMax * 0.4)
								{
									this.ai[0] += 2f;
								}
								if ((double)this.life < (double)this.lifeMax * 0.2)
								{
									this.ai[0] += 3f;
								}
								if ((double)this.life < (double)this.lifeMax * 0.1)
								{
									this.ai[0] += 4f;
								}
								if (this.ai[0] >= 0f)
								{
									this.netUpdate = true;
									this.TargetClosest(true);
									if (this.ai[1] == 3f)
									{
										this.velocity.Y = -13f;
										this.velocity.X = this.velocity.X + 3.5f * (float)this.direction;
										this.ai[0] = -200f;
										this.ai[1] = 0f;
									}
									else if (this.ai[1] == 2f)
									{
										this.velocity.Y = -6f;
										this.velocity.X = this.velocity.X + 4.5f * (float)this.direction;
										this.ai[0] = -120f;
										this.ai[1] += 1f;
									}
									else
									{
										this.velocity.Y = -8f;
										this.velocity.X = this.velocity.X + 4f * (float)this.direction;
										this.ai[0] = -120f;
										this.ai[1] += 1f;
									}
								}
								else if (this.ai[0] >= -30f)
								{
									this.aiAction = 1;
								}
							}
						}
						else if (this.target < 255 && ((this.direction == 1 && this.velocity.X < 3f) || (this.direction == -1 && this.velocity.X > -3f)))
						{
							if ((this.direction == -1 && (double)this.velocity.X < 0.1) || (this.direction == 1 && (double)this.velocity.X > -0.1))
							{
								this.velocity.X = this.velocity.X + 0.2f * (float)this.direction;
							}
							else
							{
								this.velocity.X = this.velocity.X * 0.93f;
							}
						}
						int num244 = Dust.NewDust(this.position, this.width, this.height, 4, this.velocity.X, this.velocity.Y, 255, new Color(0, 80, 255, 80), this.scale * 1.2f);
						Main.dust[num244].noGravity = true;
						Main.dust[num244].velocity *= 0.5f;
						if (this.life > 0)
						{
							float num245 = (float)this.life / (float)this.lifeMax;
							num245 = num245 * 0.5f + 0.75f;
							num245 *= num230;
							if (num245 != this.scale)
							{
								this.position.X = this.position.X + (float)(this.width / 2);
								this.position.Y = this.position.Y + (float)this.height;
								this.scale = num245;
								this.width = (int)(98f * this.scale);
								this.height = (int)(92f * this.scale);
								this.position.X = this.position.X - (float)(this.width / 2);
								this.position.Y = this.position.Y - (float)this.height;
							}
							if (Main.netMode != 1)
							{
								int num246 = (int)((double)this.lifeMax * 0.05);
								if ((float)(this.life + num246) < this.ai[3])
								{
									this.ai[3] = (float)this.life;
									int num247 = Main.rand.Next(1, 4);
									for (int num248 = 0; num248 < num247; num248++)
									{
										int x = (int)(this.position.X + (float)Main.rand.Next(this.width - 32));
										int y = (int)(this.position.Y + (float)Main.rand.Next(this.height - 32));
										int num249 = 1;
										if (Main.expertMode && Main.rand.Next(4) == 0)
										{
											num249 = 535;
										}
										int num250 = NPC.NewNPC(x, y, num249, 0, 0f, 0f, 0f, 0f, 255);
										Main.npc[num250].SetDefaults(num249, -1f);
										Main.npc[num250].velocity.X = (float)Main.rand.Next(-15, 16) * 0.1f;
										Main.npc[num250].velocity.Y = (float)Main.rand.Next(-30, 1) * 0.1f;
										Main.npc[num250].ai[0] = (float)(-1000 * Main.rand.Next(3));
										Main.npc[num250].ai[1] = 0f;
										if (Main.netMode == 2 && num250 < 200)
										{
											NetMessage.SendData(23, -1, -1, "", num250, 0f, 0f, 0f, 0, 0, 0);
										}
									}
									return;
								}
							}
						}
					}
					else if (this.aiStyle == 16)
					{
						if (this.direction == 0)
						{
							this.TargetClosest(true);
						}
						if (this.wet)
						{
							bool flag14 = false;
							if (this.type != 55)
							{
								this.TargetClosest(false);
								if (Main.player[this.target].wet && !Main.player[this.target].dead)
								{
									flag14 = true;
								}
							}
							if (!flag14)
							{
								if (this.collideX)
								{
									this.velocity.X = this.velocity.X * -1f;
									this.direction *= -1;
									this.netUpdate = true;
								}
								if (this.collideY)
								{
									this.netUpdate = true;
									if (this.velocity.Y > 0f)
									{
										this.velocity.Y = Math.Abs(this.velocity.Y) * -1f;
										this.directionY = -1;
										this.ai[0] = -1f;
									}
									else if (this.velocity.Y < 0f)
									{
										this.velocity.Y = Math.Abs(this.velocity.Y);
										this.directionY = 1;
										this.ai[0] = 1f;
									}
								}
							}
							if (this.type == 102)
							{
								Lighting.AddLight((int)(this.position.X + (float)(this.width / 2) + (float)(this.direction * (this.width + 8))) / 16, (int)(this.position.Y + 2f) / 16, 0.07f, 0.04f, 0.025f);
							}
							if (flag14)
							{
								this.TargetClosest(true);
								if (this.type == 157)
								{
									if (this.velocity.X > 0f && this.direction < 0)
									{
										this.velocity.X = this.velocity.X * 0.95f;
									}
									if (this.velocity.X < 0f && this.direction > 0)
									{
										this.velocity.X = this.velocity.X * 0.95f;
									}
									this.velocity.X = this.velocity.X + (float)this.direction * 0.25f;
									this.velocity.Y = this.velocity.Y + (float)this.directionY * 0.2f;
									if (this.velocity.X > 8f)
									{
										this.velocity.X = 7f;
									}
									if (this.velocity.X < -8f)
									{
										this.velocity.X = -7f;
									}
									if (this.velocity.Y > 5f)
									{
										this.velocity.Y = 4f;
									}
									if (this.velocity.Y < -5f)
									{
										this.velocity.Y = -4f;
									}
								}
								else if (this.type == 65 || this.type == 102)
								{
									this.velocity.X = this.velocity.X + (float)this.direction * 0.15f;
									this.velocity.Y = this.velocity.Y + (float)this.directionY * 0.15f;
									if (this.velocity.X > 5f)
									{
										this.velocity.X = 5f;
									}
									if (this.velocity.X < -5f)
									{
										this.velocity.X = -5f;
									}
									if (this.velocity.Y > 3f)
									{
										this.velocity.Y = 3f;
									}
									if (this.velocity.Y < -3f)
									{
										this.velocity.Y = -3f;
									}
								}
								else
								{
									this.velocity.X = this.velocity.X + (float)this.direction * 0.1f;
									this.velocity.Y = this.velocity.Y + (float)this.directionY * 0.1f;
									if (this.velocity.X > 3f)
									{
										this.velocity.X = 3f;
									}
									if (this.velocity.X < -3f)
									{
										this.velocity.X = -3f;
									}
									if (this.velocity.Y > 2f)
									{
										this.velocity.Y = 2f;
									}
									if (this.velocity.Y < -2f)
									{
										this.velocity.Y = -2f;
									}
								}
							}
							else
							{
								if (this.type == 157)
								{
									if (Main.player[this.target].position.Y > this.position.Y)
									{
										this.directionY = 1;
									}
									else
									{
										this.directionY = -1;
									}
									this.velocity.X = this.velocity.X + (float)this.direction * 0.2f;
									if (this.velocity.X < -2f || this.velocity.X > 2f)
									{
										this.velocity.X = this.velocity.X * 0.95f;
									}
									if (this.ai[0] == -1f)
									{
										float num251 = -0.6f;
										if (this.directionY < 0)
										{
											num251 = -1f;
										}
										if (this.directionY > 0)
										{
											num251 = -0.2f;
										}
										this.velocity.Y = this.velocity.Y - 0.02f;
										if (this.velocity.Y < num251)
										{
											this.ai[0] = 1f;
										}
									}
									else
									{
										float num252 = 0.6f;
										if (this.directionY < 0)
										{
											num252 = 0.2f;
										}
										if (this.directionY > 0)
										{
											num252 = 1f;
										}
										this.velocity.Y = this.velocity.Y + 0.02f;
										if (this.velocity.Y > num252)
										{
											this.ai[0] = -1f;
										}
									}
								}
								else
								{
									this.velocity.X = this.velocity.X + (float)this.direction * 0.1f;
									if (this.velocity.X < -1f || this.velocity.X > 1f)
									{
										this.velocity.X = this.velocity.X * 0.95f;
									}
									if (this.ai[0] == -1f)
									{
										this.velocity.Y = this.velocity.Y - 0.01f;
										if ((double)this.velocity.Y < -0.3)
										{
											this.ai[0] = 1f;
										}
									}
									else
									{
										this.velocity.Y = this.velocity.Y + 0.01f;
										if ((double)this.velocity.Y > 0.3)
										{
											this.ai[0] = -1f;
										}
									}
								}
								int num253 = (int)(this.position.X + (float)(this.width / 2)) / 16;
								int num254 = (int)(this.position.Y + (float)(this.height / 2)) / 16;
								if (Main.tile[num253, num254 - 1] == null)
								{
									Main.tile[num253, num254 - 1] = new Tile();
								}
								if (Main.tile[num253, num254 + 1] == null)
								{
									Main.tile[num253, num254 + 1] = new Tile();
								}
								if (Main.tile[num253, num254 + 2] == null)
								{
									Main.tile[num253, num254 + 2] = new Tile();
								}
								if (Main.tile[num253, num254 - 1].liquid > 128)
								{
									if (Main.tile[num253, num254 + 1].active())
									{
										this.ai[0] = -1f;
									}
									else if (Main.tile[num253, num254 + 2].active())
									{
										this.ai[0] = -1f;
									}
								}
								if (this.type != 157 && ((double)this.velocity.Y > 0.4 || (double)this.velocity.Y < -0.4))
								{
									this.velocity.Y = this.velocity.Y * 0.95f;
								}
							}
						}
						else
						{
							if (this.velocity.Y == 0f)
							{
								if (this.type == 65)
								{
									this.velocity.X = this.velocity.X * 0.94f;
									if ((double)this.velocity.X > -0.2 && (double)this.velocity.X < 0.2)
									{
										this.velocity.X = 0f;
									}
								}
								else if (Main.netMode != 1)
								{
									this.velocity.Y = (float)Main.rand.Next(-50, -20) * 0.1f;
									this.velocity.X = (float)Main.rand.Next(-20, 20) * 0.1f;
									this.netUpdate = true;
								}
							}
							this.velocity.Y = this.velocity.Y + 0.3f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
							this.ai[0] = 1f;
						}
						this.rotation = this.velocity.Y * (float)this.direction * 0.1f;
						if ((double)this.rotation < -0.2)
						{
							this.rotation = -0.2f;
						}
						if ((double)this.rotation > 0.2)
						{
							this.rotation = 0.2f;
							return;
						}
					}
					else if (this.aiStyle == 17)
					{
						this.noGravity = true;
						if (this.ai[0] == 0f)
						{
							this.noGravity = false;
							this.TargetClosest(true);
							if (Main.netMode != 1)
							{
								if (this.velocity.X != 0f || this.velocity.Y < 0f || (double)this.velocity.Y > 0.3)
								{
									this.ai[0] = 1f;
									this.netUpdate = true;
								}
								else
								{
									Rectangle rectangle = new Rectangle((int)Main.player[this.target].position.X, (int)Main.player[this.target].position.Y, Main.player[this.target].width, Main.player[this.target].height);
									Rectangle rectangle2 = new Rectangle((int)this.position.X - 100, (int)this.position.Y - 100, this.width + 200, this.height + 200);
									if (rectangle2.Intersects(rectangle) || this.life < this.lifeMax)
									{
										this.ai[0] = 1f;
										this.velocity.Y = this.velocity.Y - 6f;
										this.netUpdate = true;
									}
								}
							}
						}
						else if (!Main.player[this.target].dead)
						{
							if (this.collideX)
							{
								this.velocity.X = this.oldVelocity.X * -0.5f;
								if (this.direction == -1 && this.velocity.X > 0f && this.velocity.X < 2f)
								{
									this.velocity.X = 2f;
								}
								if (this.direction == 1 && this.velocity.X < 0f && this.velocity.X > -2f)
								{
									this.velocity.X = -2f;
								}
							}
							if (this.collideY)
							{
								this.velocity.Y = this.oldVelocity.Y * -0.5f;
								if (this.velocity.Y > 0f && this.velocity.Y < 1f)
								{
									this.velocity.Y = 1f;
								}
								if (this.velocity.Y < 0f && this.velocity.Y > -1f)
								{
									this.velocity.Y = -1f;
								}
							}
							this.TargetClosest(true);
							if (this.direction == -1 && this.velocity.X > -3f)
							{
								this.velocity.X = this.velocity.X - 0.1f;
								if (this.velocity.X > 3f)
								{
									this.velocity.X = this.velocity.X - 0.1f;
								}
								else if (this.velocity.X > 0f)
								{
									this.velocity.X = this.velocity.X - 0.05f;
								}
								if (this.velocity.X < -3f)
								{
									this.velocity.X = -3f;
								}
							}
							else if (this.direction == 1 && this.velocity.X < 3f)
							{
								this.velocity.X = this.velocity.X + 0.1f;
								if (this.velocity.X < -3f)
								{
									this.velocity.X = this.velocity.X + 0.1f;
								}
								else if (this.velocity.X < 0f)
								{
									this.velocity.X = this.velocity.X + 0.05f;
								}
								if (this.velocity.X > 3f)
								{
									this.velocity.X = 3f;
								}
							}
							float num255 = Math.Abs(this.position.X + (float)(this.width / 2) - (Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2)));
							float num256 = Main.player[this.target].position.Y - (float)(this.height / 2);
							if (num255 > 50f)
							{
								num256 -= 100f;
							}
							if (this.position.Y < num256)
							{
								this.velocity.Y = this.velocity.Y + 0.05f;
								if (this.velocity.Y < 0f)
								{
									this.velocity.Y = this.velocity.Y + 0.01f;
								}
							}
							else
							{
								this.velocity.Y = this.velocity.Y - 0.05f;
								if (this.velocity.Y > 0f)
								{
									this.velocity.Y = this.velocity.Y - 0.01f;
								}
							}
							if (this.velocity.Y < -3f)
							{
								this.velocity.Y = -3f;
							}
							if (this.velocity.Y > 3f)
							{
								this.velocity.Y = 3f;
							}
						}
						if (this.wet)
						{
							if (this.velocity.Y > 0f)
							{
								this.velocity.Y = this.velocity.Y * 0.95f;
							}
							this.velocity.Y = this.velocity.Y - 0.5f;
							if (this.velocity.Y < -4f)
							{
								this.velocity.Y = -4f;
							}
							this.TargetClosest(true);
							return;
						}
					}
					else if (this.aiStyle == 18)
					{
						bool flag15 = false;
						if (this.wet && this.ai[1] == 1f)
						{
							flag15 = true;
						}
						else
						{
							this.dontTakeDamage = false;
						}
						if (Main.expertMode && (this.type == 63 || this.type == 64 || this.type == 103 || this.type == 242))
						{
							if (this.wet)
							{
								if (this.target >= 0 && Main.player[this.target].wet && !Main.player[this.target].dead && (Main.player[this.target].Center - base.Center).Length() < 150f)
								{
									if (this.ai[1] == 0f)
									{
										this.ai[2] += 2f;
									}
									else
									{
										this.ai[2] -= 0.25f;
									}
								}
								if (flag15)
								{
									this.dontTakeDamage = true;
									this.ai[2] += 1f;
									if (this.ai[2] >= 120f)
									{
										this.ai[1] = 0f;
									}
								}
								else
								{
									this.ai[2] += 1f;
									if (this.ai[2] >= 420f)
									{
										this.ai[1] = 1f;
										this.ai[2] = 0f;
									}
								}
							}
							else
							{
								this.ai[1] = 0f;
								this.ai[2] = 0f;
							}
						}
						float num257 = 1f;
						if (flag15)
						{
							num257 += 0.5f;
						}
						if (this.type == 63)
						{
							Lighting.AddLight((int)(this.position.X + (float)(this.height / 2)) / 16, (int)(this.position.Y + (float)(this.height / 2)) / 16, 0.05f * num257, 0.15f * num257, 0.4f * num257);
						}
						else if (this.type == 103)
						{
							Lighting.AddLight((int)(this.position.X + (float)(this.height / 2)) / 16, (int)(this.position.Y + (float)(this.height / 2)) / 16, 0.05f * num257, 0.45f * num257, 0.1f * num257);
						}
						else if (this.type != 221 && this.type != 242)
						{
							Lighting.AddLight((int)(this.position.X + (float)(this.height / 2)) / 16, (int)(this.position.Y + (float)(this.height / 2)) / 16, 0.35f * num257, 0.05f * num257, 0.2f * num257);
						}
						if (this.direction == 0)
						{
							this.TargetClosest(true);
						}
						if (flag15)
						{
							return;
						}
						if (!this.wet)
						{
							this.rotation += this.velocity.X * 0.1f;
							if (this.velocity.Y == 0f)
							{
								this.velocity.X = this.velocity.X * 0.98f;
								if ((double)this.velocity.X > -0.01 && (double)this.velocity.X < 0.01)
								{
									this.velocity.X = 0f;
								}
							}
							this.velocity.Y = this.velocity.Y + 0.2f;
							if (this.velocity.Y > 10f)
							{
								this.velocity.Y = 10f;
							}
							this.ai[0] = 1f;
							return;
						}
						if (this.collideX)
						{
							this.velocity.X = this.velocity.X * -1f;
							this.direction *= -1;
						}
						if (this.collideY)
						{
							if (this.velocity.Y > 0f)
							{
								this.velocity.Y = Math.Abs(this.velocity.Y) * -1f;
								this.directionY = -1;
								this.ai[0] = -1f;
							}
							else if (this.velocity.Y < 0f)
							{
								this.velocity.Y = Math.Abs(this.velocity.Y);
								this.directionY = 1;
								this.ai[0] = 1f;
							}
						}
						bool flag16 = false;
						if (!this.friendly)
						{
							this.TargetClosest(false);
							if (Main.player[this.target].wet && !Main.player[this.target].dead)
							{
								flag16 = true;
							}
						}
						if (flag16)
						{
							this.localAI[2] = 1f;
							this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
							this.velocity *= 0.98f;
							float num258 = 0.2f;
							if (this.type == 103)
							{
								this.velocity *= 0.98f;
								num258 = 0.6f;
							}
							if (this.type == 221)
							{
								this.velocity *= 0.99f;
								num258 = 1f;
							}
							if (this.type == 242)
							{
								this.velocity *= 0.995f;
								num258 = 3f;
							}
							if (this.velocity.X > -num258 && this.velocity.X < num258 && this.velocity.Y > -num258 && this.velocity.Y < num258)
							{
								if (this.type == 221)
								{
									this.localAI[0] = 1f;
								}
								this.TargetClosest(true);
								float num259 = 7f;
								if (this.type == 103)
								{
									num259 = 9f;
								}
								Vector2 vector27 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
								float num260 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector27.X;
								float num261 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector27.Y;
								float num262 = (float)Math.Sqrt((double)(num260 * num260 + num261 * num261));
								num262 = num259 / num262;
								num260 *= num262;
								num261 *= num262;
								this.velocity.X = num260;
								this.velocity.Y = num261;
								return;
							}
						}
						else
						{
							this.localAI[2] = 0f;
							this.velocity.X = this.velocity.X + (float)this.direction * 0.02f;
							this.rotation = this.velocity.X * 0.4f;
							if (this.velocity.X < -1f || this.velocity.X > 1f)
							{
								this.velocity.X = this.velocity.X * 0.95f;
							}
							if (this.ai[0] == -1f)
							{
								this.velocity.Y = this.velocity.Y - 0.01f;
								if (this.velocity.Y < -1f)
								{
									this.ai[0] = 1f;
								}
							}
							else
							{
								this.velocity.Y = this.velocity.Y + 0.01f;
								if (this.velocity.Y > 1f)
								{
									this.ai[0] = -1f;
								}
							}
							int num263 = (int)(this.position.X + (float)(this.width / 2)) / 16;
							int num264 = (int)(this.position.Y + (float)(this.height / 2)) / 16;
							if (Main.tile[num263, num264 - 1] == null)
							{
								Main.tile[num263, num264 - 1] = new Tile();
							}
							if (Main.tile[num263, num264 + 1] == null)
							{
								Main.tile[num263, num264 + 1] = new Tile();
							}
							if (Main.tile[num263, num264 + 2] == null)
							{
								Main.tile[num263, num264 + 2] = new Tile();
							}
							if (Main.tile[num263, num264 - 1].liquid > 128)
							{
								if (Main.tile[num263, num264 + 1].active())
								{
									this.ai[0] = -1f;
								}
								else if (Main.tile[num263, num264 + 2].active())
								{
									this.ai[0] = -1f;
								}
							}
							else
							{
								this.ai[0] = 1f;
							}
							if ((double)this.velocity.Y > 1.2 || (double)this.velocity.Y < -1.2)
							{
								this.velocity.Y = this.velocity.Y * 0.99f;
								return;
							}
						}
					}
					else
					{
						if (this.aiStyle == 19)
						{
							this.TargetClosest(true);
							float num265 = 12f;
							Vector2 vector28 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
							float num266 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector28.X;
							float num267 = Main.player[this.target].position.Y - vector28.Y;
							float num268 = (float)Math.Sqrt((double)(num266 * num266 + num267 * num267));
							num268 = num265 / num268;
							num266 *= num268;
							num267 *= num268;
							bool flag17 = false;
							if (this.directionY < 0)
							{
								this.rotation = (float)(Math.Atan2((double)num267, (double)num266) + 1.57);
								flag17 = ((double)this.rotation >= -1.2 && (double)this.rotation <= 1.2);
								if ((double)this.rotation < -0.8)
								{
									this.rotation = -0.8f;
								}
								else if ((double)this.rotation > 0.8)
								{
									this.rotation = 0.8f;
								}
								if (this.velocity.X != 0f)
								{
									this.velocity.X = this.velocity.X * 0.9f;
									if ((double)this.velocity.X > -0.1 || (double)this.velocity.X < 0.1)
									{
										this.netUpdate = true;
										this.velocity.X = 0f;
									}
								}
							}
							if (this.ai[0] > 0f)
							{
								if (this.ai[0] == 200f)
								{
									Main.PlaySound(SoundID.Item5, this.position);
								}
								this.ai[0] -= 1f;
							}
							if (Main.netMode != 1 && flag17 && this.ai[0] == 0f && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
							{
								this.ai[0] = 200f;
								int num269 = 10;
								int num270 = 31;
								int num271 = Projectile.NewProjectile(vector28.X, vector28.Y, num266, num267, num270, num269, 0f, Main.myPlayer, 0f, 0f);
								Main.projectile[num271].ai[0] = 2f;
								Main.projectile[num271].timeLeft = 300;
								Main.projectile[num271].friendly = false;
								NetMessage.SendData(27, -1, -1, "", num271, 0f, 0f, 0f, 0, 0, 0);
								this.netUpdate = true;
							}
							try
							{
								int num272 = (int)this.position.X / 16;
								int num273 = (int)(this.position.X + (float)(this.width / 2)) / 16;
								int num274 = (int)(this.position.X + (float)this.width) / 16;
								int num275 = (int)(this.position.Y + (float)this.height) / 16;
								bool flag18 = false;
								if (Main.tile[num272, num275] == null)
								{
									Main.tile[num272, num275] = new Tile();
								}
								if (Main.tile[num273, num275] == null)
								{
									Main.tile[num272, num275] = new Tile();
								}
								if (Main.tile[num274, num275] == null)
								{
									Main.tile[num272, num275] = new Tile();
								}
								if ((Main.tile[num272, num275].nactive() && Main.tileSolid[(int)Main.tile[num272, num275].type]) || (Main.tile[num273, num275].nactive() && Main.tileSolid[(int)Main.tile[num273, num275].type]) || (Main.tile[num274, num275].nactive() && Main.tileSolid[(int)Main.tile[num274, num275].type]))
								{
									flag18 = true;
								}
								if (flag18)
								{
									this.noGravity = true;
									this.noTileCollide = true;
									this.velocity.Y = -0.2f;
								}
								else
								{
									this.noGravity = false;
									this.noTileCollide = false;
									if (Main.rand.Next(2) == 0)
									{
										int num276 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y + (float)this.height - 8f), this.width + 8, 24, 32, 0f, this.velocity.Y / 2f, 0, default(Color), 1f);
										Dust expr_D696_cp_0 = Main.dust[num276];
										expr_D696_cp_0.velocity.X = expr_D696_cp_0.velocity.X * 0.4f;
										Dust expr_D6B6_cp_0 = Main.dust[num276];
										expr_D6B6_cp_0.velocity.Y = expr_D6B6_cp_0.velocity.Y * -1f;
										if (Main.rand.Next(2) == 0)
										{
											Main.dust[num276].noGravity = true;
											Main.dust[num276].scale += 0.2f;
										}
									}
								}
								return;
							}
							catch
							{
								return;
							}
						}
						if (this.aiStyle == 20)
						{
							if (this.ai[0] == 0f)
							{
								if (Main.netMode != 1)
								{
									this.TargetClosest(true);
									this.direction *= -1;
									this.directionY *= -1;
									this.position.Y = this.position.Y + (float)(this.height / 2 + 8);
									this.ai[1] = this.position.X + (float)(this.width / 2);
									this.ai[2] = this.position.Y + (float)(this.height / 2);
									if (this.direction == 0)
									{
										this.direction = 1;
									}
									if (this.directionY == 0)
									{
										this.directionY = 1;
									}
									this.ai[3] = 1f + (float)Main.rand.Next(15) * 0.1f;
									this.velocity.Y = (float)(this.directionY * 6) * this.ai[3];
									this.ai[0] += 1f;
									this.netUpdate = true;
									return;
								}
								this.ai[1] = this.position.X + (float)(this.width / 2);
								this.ai[2] = this.position.Y + (float)(this.height / 2);
								return;
							}
							else
							{
								float num277 = 6f * this.ai[3];
								float num278 = 0.2f * this.ai[3];
								float num279 = num277 / num278 / 2f;
								if (this.ai[0] >= 1f && this.ai[0] < (float)((int)num279))
								{
									this.velocity.Y = (float)this.directionY * num277;
									this.ai[0] += 1f;
									return;
								}
								if (this.ai[0] >= (float)((int)num279))
								{
									this.velocity.Y = 0f;
									this.directionY *= -1;
									this.velocity.X = num277 * (float)this.direction;
									this.ai[0] = -1f;
									return;
								}
								if (this.directionY > 0)
								{
									if (this.velocity.Y >= num277)
									{
										this.directionY *= -1;
										this.velocity.Y = num277;
									}
								}
								else if (this.directionY < 0 && this.velocity.Y <= -num277)
								{
									this.directionY *= -1;
									this.velocity.Y = -num277;
								}
								if (this.direction > 0)
								{
									if (this.velocity.X >= num277)
									{
										this.direction *= -1;
										this.velocity.X = num277;
									}
								}
								else if (this.direction < 0 && this.velocity.X <= -num277)
								{
									this.direction *= -1;
									this.velocity.X = -num277;
								}
								this.velocity.X = this.velocity.X + num278 * (float)this.direction;
								this.velocity.Y = this.velocity.Y + num278 * (float)this.directionY;
								return;
							}
						}
						else
						{
							if (this.aiStyle == 21)
							{
								if (this.ai[0] == 0f)
								{
									this.TargetClosest(true);
									this.directionY = 1;
									this.ai[0] = 1f;
								}
								int num280 = 6;
								if (this.ai[1] == 0f)
								{
									this.rotation += (float)(this.direction * this.directionY) * 0.13f;
									if (this.collideY)
									{
										this.ai[0] = 2f;
									}
									if (!this.collideY && this.ai[0] == 2f)
									{
										this.direction = -this.direction;
										this.ai[1] = 1f;
										this.ai[0] = 1f;
									}
									if (this.collideX)
									{
										this.directionY = -this.directionY;
										this.ai[1] = 1f;
									}
								}
								else
								{
									this.rotation -= (float)(this.direction * this.directionY) * 0.13f;
									if (this.collideX)
									{
										this.ai[0] = 2f;
									}
									if (!this.collideX && this.ai[0] == 2f)
									{
										this.directionY = -this.directionY;
										this.ai[1] = 0f;
										this.ai[0] = 1f;
									}
									if (this.collideY)
									{
										this.direction = -this.direction;
										this.ai[1] = 0f;
									}
								}
								this.velocity.X = (float)(num280 * this.direction);
								this.velocity.Y = (float)(num280 * this.directionY);
								float num281 = (float)(270 - (int)Main.mouseTextColor) / 400f;
								Lighting.AddLight((int)(this.position.X + (float)(this.width / 2)) / 16, (int)(this.position.Y + (float)(this.height / 2)) / 16, 0.9f, 0.3f + num281, 0.2f);
								return;
							}
							if (this.aiStyle == 22)
							{
								bool flag19 = false;
								bool flag20 = this.type == 330 && !Main.pumpkinMoon;
								if (this.type == 253 && !Main.eclipse)
								{
									flag20 = true;
								}
								if (this.type == 490 && Main.dayTime)
								{
									flag20 = true;
								}
								if (this.justHit)
								{
									this.ai[2] = 0f;
								}
								if (!flag20)
								{
									if (this.ai[2] >= 0f)
									{
										int num282 = 16;
										bool flag21 = false;
										bool flag22 = false;
										if (this.position.X > this.ai[0] - (float)num282 && this.position.X < this.ai[0] + (float)num282)
										{
											flag21 = true;
										}
										else if ((this.velocity.X < 0f && this.direction > 0) || (this.velocity.X > 0f && this.direction < 0))
										{
											flag21 = true;
										}
										num282 += 24;
										if (this.position.Y > this.ai[1] - (float)num282 && this.position.Y < this.ai[1] + (float)num282)
										{
											flag22 = true;
										}
										if (flag21 && flag22)
										{
											this.ai[2] += 1f;
											if (this.ai[2] >= 30f && num282 == 16)
											{
												flag19 = true;
											}
											if (this.ai[2] >= 60f)
											{
												this.ai[2] = -200f;
												this.direction *= -1;
												this.velocity.X = this.velocity.X * -1f;
												this.collideX = false;
											}
										}
										else
										{
											this.ai[0] = this.position.X;
											this.ai[1] = this.position.Y;
											this.ai[2] = 0f;
										}
										this.TargetClosest(true);
									}
									else if (this.type == 253)
									{
										this.TargetClosest(true);
										this.ai[2] += 2f;
									}
									else
									{
										if (this.type == 330)
										{
											this.ai[2] += 0.1f;
										}
										else
										{
											this.ai[2] += 1f;
										}
										if (Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) > this.position.X + (float)(this.width / 2))
										{
											this.direction = -1;
										}
										else
										{
											this.direction = 1;
										}
									}
								}
								int num283 = (int)((this.position.X + (float)(this.width / 2)) / 16f) + this.direction * 2;
								int num284 = (int)((this.position.Y + (float)this.height) / 16f);
								bool flag23 = true;
								bool flag24 = false;
								int num285 = 3;
								if (this.type == 122)
								{
									if (this.justHit)
									{
										this.ai[3] = 0f;
										this.localAI[1] = 0f;
									}
									float num286 = 7f;
									Vector2 vector29 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
									float num287 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector29.X;
									float num288 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector29.Y;
									float num289 = (float)Math.Sqrt((double)(num287 * num287 + num288 * num288));
									num289 = num286 / num289;
									num287 *= num289;
									num288 *= num289;
									if (Main.netMode != 1 && this.ai[3] == 32f && !Main.player[this.target].npcTypeNoAggro[this.type])
									{
										int num290 = 25;
										int num291 = 84;
										Projectile.NewProjectile(vector29.X, vector29.Y, num287, num288, num291, num290, 0f, Main.myPlayer, 0f, 0f);
									}
									num285 = 8;
									if (this.ai[3] > 0f)
									{
										this.ai[3] += 1f;
										if (this.ai[3] >= 64f)
										{
											this.ai[3] = 0f;
										}
									}
									if (Main.netMode != 1 && this.ai[3] == 0f)
									{
										this.localAI[1] += 1f;
										if (this.localAI[1] > 120f && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height) && !Main.player[this.target].npcTypeNoAggro[this.type])
										{
											this.localAI[1] = 0f;
											this.ai[3] = 1f;
											this.netUpdate = true;
										}
									}
								}
								else if (this.type == 75)
								{
									num285 = 4;
									if (Main.rand.Next(6) == 0)
									{
										int num292 = Dust.NewDust(this.position, this.width, this.height, 55, 0f, 0f, 200, this.color, 1f);
										Main.dust[num292].velocity *= 0.3f;
									}
									if (Main.rand.Next(40) == 0)
									{
										Main.PlaySound(27, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
									}
								}
								else if (this.type == 169)
								{
									Lighting.AddLight((int)((this.position.X + (float)(this.width / 2)) / 16f), (int)((this.position.Y + (float)(this.height / 2)) / 16f), 0f, 0.6f, 0.75f);
									this.alpha = 30;
									if (Main.rand.Next(3) == 0)
									{
										int num293 = Dust.NewDust(this.position, this.width, this.height, 92, 0f, 0f, 200, default(Color), 1f);
										Main.dust[num293].velocity *= 0.3f;
										Main.dust[num293].noGravity = true;
									}
									if (this.justHit)
									{
										this.ai[3] = 0f;
										this.localAI[1] = 0f;
									}
									float num294 = 5f;
									Vector2 vector30 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
									float num295 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector30.X;
									float num296 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector30.Y;
									float num297 = (float)Math.Sqrt((double)(num295 * num295 + num296 * num296));
									num297 = num294 / num297;
									num295 *= num297;
									num296 *= num297;
									if (num295 > 0f)
									{
										this.direction = 1;
									}
									else
									{
										this.direction = -1;
									}
									this.spriteDirection = this.direction;
									if (this.direction < 0)
									{
										this.rotation = (float)Math.Atan2((double)(-(double)num296), (double)(-(double)num295));
									}
									else
									{
										this.rotation = (float)Math.Atan2((double)num296, (double)num295);
									}
									if (Main.netMode != 1 && this.ai[3] == 16f)
									{
										int num298 = 45;
										int num299 = 128;
										Projectile.NewProjectile(vector30.X, vector30.Y, num295, num296, num299, num298, 0f, Main.myPlayer, 0f, 0f);
									}
									num285 = 10;
									if (this.ai[3] > 0f)
									{
										this.ai[3] += 1f;
										if (this.ai[3] >= 64f)
										{
											this.ai[3] = 0f;
										}
									}
									if (Main.netMode != 1 && this.ai[3] == 0f)
									{
										this.localAI[1] += 1f;
										if (this.localAI[1] > 120f && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
										{
											this.localAI[1] = 0f;
											this.ai[3] = 1f;
											this.netUpdate = true;
										}
									}
								}
								else if (this.type == 268)
								{
									this.rotation = this.velocity.X * 0.1f;
									if (Main.player[this.target].Center.Y < base.Center.Y)
									{
										num285 = 12;
									}
									else
									{
										num285 = 6;
									}
									if (Main.netMode != 1 && !this.confused)
									{
										this.ai[3] += 1f;
										if (this.justHit)
										{
											this.ai[3] = -45f;
											this.localAI[1] = 0f;
										}
										if (Main.netMode != 1 && this.ai[3] >= (float)(60 + Main.rand.Next(60)))
										{
											this.ai[3] = 0f;
											if (Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].head))
											{
												float num300 = 10f;
												Vector2 vector31 = new Vector2(this.position.X + (float)this.width * 0.5f - 4f, this.position.Y + (float)this.height * 0.7f);
												float num301 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector31.X;
												float num302 = Math.Abs(num301) * 0.1f;
												float num303 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector31.Y - num302;
												num301 += (float)Main.rand.Next(-10, 11);
												num303 += (float)Main.rand.Next(-30, 21);
												float num304 = (float)Math.Sqrt((double)(num301 * num301 + num303 * num303));
												num304 = num300 / num304;
												num301 *= num304;
												num303 *= num304;
												int num305 = 40;
												int num306 = 288;
												Projectile.NewProjectile(vector31.X, vector31.Y, num301, num303, num306, num305, 0f, Main.myPlayer, 0f, 0f);
											}
										}
									}
								}
								if (this.type == 490)
								{
									num285 = 4;
									if (this.target >= 0)
									{
										float num307 = (Main.player[this.target].Center - base.Center).Length();
										num307 /= 70f;
										if (num307 > 8f)
										{
											num307 = 8f;
										}
										num285 += (int)num307;
									}
								}
								for (int num308 = num284; num308 < num284 + num285; num308++)
								{
									if (Main.tile[num283, num308] == null)
									{
										Main.tile[num283, num308] = new Tile();
									}
									if ((Main.tile[num283, num308].nactive() && Main.tileSolid[(int)Main.tile[num283, num308].type]) || Main.tile[num283, num308].liquid > 0)
									{
										if (num308 <= num284 + 1)
										{
											flag24 = true;
										}
										flag23 = false;
										break;
									}
								}
								if (Main.player[this.target].npcTypeNoAggro[this.type])
								{
									bool flag25 = false;
									for (int num309 = num284; num309 < num284 + num285 - 2; num309++)
									{
										if (Main.tile[num283, num309] == null)
										{
											Main.tile[num283, num309] = new Tile();
										}
										if ((Main.tile[num283, num309].nactive() && Main.tileSolid[(int)Main.tile[num283, num309].type]) || Main.tile[num283, num309].liquid > 0)
										{
											flag25 = true;
											break;
										}
									}
									this.directionY = (!flag25).ToDirectionInt();
								}
								if (this.type == 169 || this.type == 268)
								{
									for (int num310 = num284 - 3; num310 < num284; num310++)
									{
										if (Main.tile[num283, num310] == null)
										{
											Main.tile[num283, num310] = new Tile();
										}
										if ((Main.tile[num283, num310].nactive() && Main.tileSolid[(int)Main.tile[num283, num310].type]) || Main.tile[num283, num310].liquid > 0)
										{
											flag24 = false;
											flag19 = true;
											break;
										}
									}
								}
								if (flag19)
								{
									flag24 = false;
									flag23 = true;
									if (this.type == 268)
									{
										this.velocity.Y = this.velocity.Y + 2f;
									}
								}
								if (flag23)
								{
									if (this.type == 75 || this.type == 169)
									{
										this.velocity.Y = this.velocity.Y + 0.2f;
										if (this.velocity.Y > 2f)
										{
											this.velocity.Y = 2f;
										}
									}
									else if (this.type == 490)
									{
										this.velocity.Y = this.velocity.Y + 0.03f;
										if ((double)this.velocity.Y > 0.75)
										{
											this.velocity.Y = 0.75f;
										}
									}
									else
									{
										this.velocity.Y = this.velocity.Y + 0.1f;
										if (this.velocity.Y > 3f)
										{
											this.velocity.Y = 3f;
										}
									}
								}
								else
								{
									if (this.type == 75 || this.type == 169)
									{
										if ((this.directionY < 0 && this.velocity.Y > 0f) || flag24)
										{
											this.velocity.Y = this.velocity.Y - 0.2f;
										}
									}
									else if (this.type == 490)
									{
										if ((this.directionY < 0 && this.velocity.Y > 0f) || flag24)
										{
											this.velocity.Y = this.velocity.Y - 0.075f;
										}
										if (this.velocity.Y < -0.75f)
										{
											this.velocity.Y = -0.75f;
										}
									}
									else if (this.directionY < 0 && this.velocity.Y > 0f)
									{
										this.velocity.Y = this.velocity.Y - 0.1f;
									}
									if (this.velocity.Y < -4f)
									{
										this.velocity.Y = -4f;
									}
								}
								if (this.type == 75 && this.wet)
								{
									this.velocity.Y = this.velocity.Y - 0.2f;
									if (this.velocity.Y < -2f)
									{
										this.velocity.Y = -2f;
									}
								}
								if (this.collideX)
								{
									this.velocity.X = this.oldVelocity.X * -0.4f;
									if (this.direction == -1 && this.velocity.X > 0f && this.velocity.X < 1f)
									{
										this.velocity.X = 1f;
									}
									if (this.direction == 1 && this.velocity.X < 0f && this.velocity.X > -1f)
									{
										this.velocity.X = -1f;
									}
								}
								if (this.collideY)
								{
									this.velocity.Y = this.oldVelocity.Y * -0.25f;
									if (this.velocity.Y > 0f && this.velocity.Y < 1f)
									{
										this.velocity.Y = 1f;
									}
									if (this.velocity.Y < 0f && this.velocity.Y > -1f)
									{
										this.velocity.Y = -1f;
									}
								}
								float num311 = 2f;
								if (this.type == 75)
								{
									num311 = 3f;
								}
								if (this.type == 253)
								{
									num311 = 4f;
								}
								if (this.type == 490)
								{
									num311 = 1.5f;
								}
								if (this.type == 330)
								{
									this.alpha = 0;
									num311 = 4f;
									if (!flag20)
									{
										this.TargetClosest(true);
									}
									else if (this.timeLeft > 10)
									{
										this.timeLeft = 10;
									}
									if (this.direction < 0 && this.velocity.X > 0f)
									{
										this.velocity.X = this.velocity.X * 0.9f;
									}
									if (this.direction > 0 && this.velocity.X < 0f)
									{
										this.velocity.X = this.velocity.X * 0.9f;
									}
								}
								if (this.direction == -1 && this.velocity.X > -num311)
								{
									this.velocity.X = this.velocity.X - 0.1f;
									if (this.velocity.X > num311)
									{
										this.velocity.X = this.velocity.X - 0.1f;
									}
									else if (this.velocity.X > 0f)
									{
										this.velocity.X = this.velocity.X + 0.05f;
									}
									if (this.velocity.X < -num311)
									{
										this.velocity.X = -num311;
									}
								}
								else if (this.direction == 1 && this.velocity.X < num311)
								{
									this.velocity.X = this.velocity.X + 0.1f;
									if (this.velocity.X < -num311)
									{
										this.velocity.X = this.velocity.X + 0.1f;
									}
									else if (this.velocity.X < 0f)
									{
										this.velocity.X = this.velocity.X - 0.05f;
									}
									if (this.velocity.X > num311)
									{
										this.velocity.X = num311;
									}
								}
								if (this.type == 490)
								{
									num311 = 1f;
								}
								else
								{
									num311 = 1.5f;
								}
								if (this.directionY == -1 && this.velocity.Y > -num311)
								{
									this.velocity.Y = this.velocity.Y - 0.04f;
									if (this.velocity.Y > num311)
									{
										this.velocity.Y = this.velocity.Y - 0.05f;
									}
									else if (this.velocity.Y > 0f)
									{
										this.velocity.Y = this.velocity.Y + 0.03f;
									}
									if (this.velocity.Y < -num311)
									{
										this.velocity.Y = -num311;
									}
								}
								else if (this.directionY == 1 && this.velocity.Y < num311)
								{
									this.velocity.Y = this.velocity.Y + 0.04f;
									if (this.velocity.Y < -num311)
									{
										this.velocity.Y = this.velocity.Y + 0.05f;
									}
									else if (this.velocity.Y < 0f)
									{
										this.velocity.Y = this.velocity.Y - 0.03f;
									}
									if (this.velocity.Y > num311)
									{
										this.velocity.Y = num311;
									}
								}
								if (this.type == 122)
								{
									Lighting.AddLight((int)this.position.X / 16, (int)this.position.Y / 16, 0.4f, 0f, 0.25f);
									return;
								}
							}
							else if (this.aiStyle == 23)
							{
								this.noGravity = true;
								this.noTileCollide = true;
								if (this.type == 83)
								{
									Lighting.AddLight((int)((this.position.X + (float)(this.width / 2)) / 16f), (int)((this.position.Y + (float)(this.height / 2)) / 16f), 0.2f, 0.05f, 0.3f);
								}
								else if (this.type == 179)
								{
									Lighting.AddLight((int)((this.position.X + (float)(this.width / 2)) / 16f), (int)((this.position.Y + (float)(this.height / 2)) / 16f), 0.3f, 0.15f, 0.05f);
								}
								else
								{
									Lighting.AddLight((int)((this.position.X + (float)(this.width / 2)) / 16f), (int)((this.position.Y + (float)(this.height / 2)) / 16f), 0.05f, 0.2f, 0.3f);
								}
								if (this.target < 0 || this.target == 255 || Main.player[this.target].dead)
								{
									this.TargetClosest(true);
								}
								if (this.ai[0] == 0f)
								{
									float num312 = 9f;
									Vector2 vector32 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
									float num313 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector32.X;
									float num314 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector32.Y;
									float num315 = (float)Math.Sqrt((double)(num313 * num313 + num314 * num314));
									num315 = num312 / num315;
									num313 *= num315;
									num314 *= num315;
									this.velocity.X = num313;
									this.velocity.Y = num314;
									this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 0.785f;
									this.ai[0] = 1f;
									this.ai[1] = 0f;
									this.netUpdate = true;
									return;
								}
								if (this.ai[0] == 1f)
								{
									if (this.justHit)
									{
										this.ai[0] = 2f;
										this.ai[1] = 0f;
									}
									this.velocity *= 0.99f;
									this.ai[1] += 1f;
									if (this.ai[1] >= 100f)
									{
										this.netUpdate = true;
										this.ai[0] = 2f;
										this.ai[1] = 0f;
										this.velocity.X = 0f;
										this.velocity.Y = 0f;
										return;
									}
								}
								else
								{
									if (this.justHit)
									{
										this.ai[0] = 2f;
										this.ai[1] = 0f;
									}
									this.velocity *= 0.96f;
									this.ai[1] += 1f;
									float num316 = this.ai[1] / 120f;
									num316 = 0.1f + num316 * 0.4f;
									this.rotation += num316 * (float)this.direction;
									if (this.ai[1] >= 120f)
									{
										this.netUpdate = true;
										this.ai[0] = 0f;
										this.ai[1] = 0f;
										return;
									}
								}
							}
							else if (this.aiStyle == 24)
							{
								this.noGravity = true;
								if (this.ai[0] == 0f)
								{
									this.noGravity = false;
									this.TargetClosest(true);
									if (Main.netMode != 1)
									{
										if (this.velocity.X != 0f || this.velocity.Y < 0f || (double)this.velocity.Y > 0.3)
										{
											this.ai[0] = 1f;
											this.netUpdate = true;
											this.direction = -this.direction;
										}
										else
										{
											Rectangle rectangle3 = new Rectangle((int)Main.player[this.target].position.X, (int)Main.player[this.target].position.Y, Main.player[this.target].width, Main.player[this.target].height);
											Rectangle rectangle4 = new Rectangle((int)this.position.X - 100, (int)this.position.Y - 100, this.width + 200, this.height + 200);
											if (rectangle4.Intersects(rectangle3) || this.life < this.lifeMax)
											{
												this.ai[0] = 1f;
												this.velocity.Y = this.velocity.Y - 6f;
												this.netUpdate = true;
												this.direction = -this.direction;
											}
										}
									}
								}
								else if (!Main.player[this.target].dead)
								{
									if (this.collideX)
									{
										this.direction *= -1;
										this.velocity.X = this.oldVelocity.X * -0.5f;
										if (this.direction == -1 && this.velocity.X > 0f && this.velocity.X < 2f)
										{
											this.velocity.X = 2f;
										}
										if (this.direction == 1 && this.velocity.X < 0f && this.velocity.X > -2f)
										{
											this.velocity.X = -2f;
										}
									}
									if (this.collideY)
									{
										this.velocity.Y = this.oldVelocity.Y * -0.5f;
										if (this.velocity.Y > 0f && this.velocity.Y < 1f)
										{
											this.velocity.Y = 1f;
										}
										if (this.velocity.Y < 0f && this.velocity.Y > -1f)
										{
											this.velocity.Y = -1f;
										}
									}
									if (this.direction == -1 && this.velocity.X > -3f)
									{
										this.velocity.X = this.velocity.X - 0.1f;
										if (this.velocity.X > 3f)
										{
											this.velocity.X = this.velocity.X - 0.1f;
										}
										else if (this.velocity.X > 0f)
										{
											this.velocity.X = this.velocity.X - 0.05f;
										}
										if (this.velocity.X < -3f)
										{
											this.velocity.X = -3f;
										}
									}
									else if (this.direction == 1 && this.velocity.X < 3f)
									{
										this.velocity.X = this.velocity.X + 0.1f;
										if (this.velocity.X < -3f)
										{
											this.velocity.X = this.velocity.X + 0.1f;
										}
										else if (this.velocity.X < 0f)
										{
											this.velocity.X = this.velocity.X + 0.05f;
										}
										if (this.velocity.X > 3f)
										{
											this.velocity.X = 3f;
										}
									}
									int num317 = (int)((this.position.X + (float)(this.width / 2)) / 16f) + this.direction;
									int num318 = (int)((this.position.Y + (float)this.height) / 16f);
									bool flag26 = true;
									int num319 = 15;
									bool flag27 = false;
									for (int num320 = num318; num320 < num318 + num319; num320++)
									{
										if (Main.tile[num317, num320] == null)
										{
											Main.tile[num317, num320] = new Tile();
										}
										if ((Main.tile[num317, num320].nactive() && Main.tileSolid[(int)Main.tile[num317, num320].type]) || Main.tile[num317, num320].liquid > 0)
										{
											if (num320 < num318 + 5)
											{
												flag27 = true;
											}
											flag26 = false;
											break;
										}
									}
									if (flag26)
									{
										this.velocity.Y = this.velocity.Y + 0.05f;
									}
									else
									{
										this.velocity.Y = this.velocity.Y - 0.1f;
									}
									if (flag27)
									{
										this.velocity.Y = this.velocity.Y - 0.2f;
									}
									if (this.velocity.Y > 2f)
									{
										this.velocity.Y = 2f;
									}
									if (this.velocity.Y < -4f)
									{
										this.velocity.Y = -4f;
									}
								}
								if (this.wet)
								{
									this.ai[1] = 0f;
									if (this.velocity.Y > 0f)
									{
										this.velocity.Y = this.velocity.Y * 0.95f;
									}
									this.velocity.Y = this.velocity.Y - 0.5f;
									if (this.velocity.Y < -4f)
									{
										this.velocity.Y = -4f;
									}
									this.TargetClosest(true);
									return;
								}
							}
							else if (this.aiStyle == 25)
							{
								bool flag28 = this.type == 341 && !Main.snowMoon;
								if (this.ai[3] == 0f)
								{
									this.position.X = this.position.X + 8f;
									if (this.position.Y / 16f > (float)(Main.maxTilesY - 200))
									{
										this.ai[3] = 3f;
									}
									else if ((double)(this.position.Y / 16f) > Main.worldSurface)
									{
										this.TargetClosest(true);
										if (Main.player[this.target].ZoneSnow)
										{
											this.ai[3] = 4f;
										}
										else
										{
											this.ai[3] = 2f;
										}
									}
									else
									{
										this.ai[3] = 1f;
									}
								}
								if (this.type == 341)
								{
									this.ai[3] = 1f;
								}
								if (this.ai[0] == 0f)
								{
									if (!flag28)
									{
										this.TargetClosest(true);
									}
									if (Main.netMode != 1)
									{
										if (this.velocity.X != 0f || this.velocity.Y < 0f || (double)this.velocity.Y > 0.3)
										{
											this.ai[0] = 1f;
											this.netUpdate = true;
											return;
										}
										Rectangle rectangle5 = new Rectangle((int)Main.player[this.target].position.X, (int)Main.player[this.target].position.Y, Main.player[this.target].width, Main.player[this.target].height);
										Rectangle rectangle6 = new Rectangle((int)this.position.X - 100, (int)this.position.Y - 100, this.width + 200, this.height + 200);
										if (rectangle6.Intersects(rectangle5) || this.life < this.lifeMax)
										{
											this.ai[0] = 1f;
											this.netUpdate = true;
											return;
										}
									}
								}
								else if (this.velocity.Y == 0f)
								{
									this.ai[2] += 1f;
									int num321 = 20;
									if (this.ai[1] == 0f)
									{
										num321 = 12;
									}
									if (this.ai[2] < (float)num321)
									{
										this.velocity.X = this.velocity.X * 0.9f;
										return;
									}
									this.ai[2] = 0f;
									if (!flag28)
									{
										this.TargetClosest(true);
									}
									if (this.direction == 0)
									{
										this.direction = -1;
									}
									this.spriteDirection = this.direction;
									this.ai[1] += 1f;
									if (this.ai[1] == 2f)
									{
										this.velocity.X = (float)this.direction * 2.5f;
										this.velocity.Y = -8f;
										this.ai[1] = 0f;
									}
									else
									{
										this.velocity.X = (float)this.direction * 3.5f;
										this.velocity.Y = -4f;
									}
									this.netUpdate = true;
									return;
								}
								else
								{
									if (this.direction == 1 && this.velocity.X < 1f)
									{
										this.velocity.X = this.velocity.X + 0.1f;
										return;
									}
									if (this.direction == -1 && this.velocity.X > -1f)
									{
										this.velocity.X = this.velocity.X - 0.1f;
										return;
									}
								}
							}
							else
							{
								if (this.aiStyle == 26)
								{
									this.AI_026_Unicorns();
									return;
								}
								if (this.aiStyle == 27)
								{
									if (this.position.X < 160f || this.position.X > (float)((Main.maxTilesX - 10) * 16))
									{
										this.active = false;
									}
									if (this.localAI[0] == 0f)
									{
										this.localAI[0] = 1f;
										Main.wofB = -1;
										Main.wofT = -1;
									}
									this.ai[1] += 1f;
									if (this.ai[2] == 0f)
									{
										if ((double)this.life < (double)this.lifeMax * 0.5)
										{
											this.ai[1] += 1f;
										}
										if ((double)this.life < (double)this.lifeMax * 0.2)
										{
											this.ai[1] += 1f;
										}
										if (this.ai[1] > 2700f)
										{
											this.ai[2] = 1f;
										}
									}
									if (this.ai[2] > 0f && this.ai[1] > 60f)
									{
										int num322 = 3;
										if ((double)this.life < (double)this.lifeMax * 0.3)
										{
											num322++;
										}
										this.ai[2] += 1f;
										this.ai[1] = 0f;
										if (this.ai[2] > (float)num322)
										{
											this.ai[2] = 0f;
										}
										if (Main.netMode != 1)
										{
											int num323 = NPC.NewNPC((int)(this.position.X + (float)(this.width / 2)), (int)(this.position.Y + (float)(this.height / 2) + 20f), 117, 1, 0f, 0f, 0f, 0f, 255);
											Main.npc[num323].velocity.X = (float)(this.direction * 8);
										}
									}
									this.localAI[3] += 1f;
									if (this.localAI[3] >= (float)(600 + Main.rand.Next(1000)))
									{
										this.localAI[3] = (float)(-(float)Main.rand.Next(200));
										Main.PlaySound(4, (int)this.position.X, (int)this.position.Y, 10, 1f, 0f);
									}
									Main.wof = this.whoAmI;
									int num324 = (int)(this.position.X / 16f);
									int num325 = (int)((this.position.X + (float)this.width) / 16f);
									int num326 = (int)((this.position.Y + (float)(this.height / 2)) / 16f);
									int num327 = 0;
									int num328 = num326 + 7;
									while (num327 < 15 && num328 > Main.maxTilesY - 200)
									{
										num328++;
										for (int num329 = num324; num329 <= num325; num329++)
										{
											try
											{
												if (WorldGen.SolidTile(num329, num328) || Main.tile[num329, num328].liquid > 0)
												{
													num327++;
												}
											}
											catch
											{
												num327 += 15;
											}
										}
									}
									num328 += 4;
									if (Main.wofB == -1)
									{
										Main.wofB = num328 * 16;
									}
									else if (Main.wofB > num328 * 16)
									{
										Main.wofB--;
										if (Main.wofB < num328 * 16)
										{
											Main.wofB = num328 * 16;
										}
									}
									else if (Main.wofB < num328 * 16)
									{
										Main.wofB++;
										if (Main.wofB > num328 * 16)
										{
											Main.wofB = num328 * 16;
										}
									}
									num327 = 0;
									num328 = num326 - 7;
									while (num327 < 15 && num328 < Main.maxTilesY - 10)
									{
										num328--;
										for (int num330 = num324; num330 <= num325; num330++)
										{
											try
											{
												if (WorldGen.SolidTile(num330, num328) || Main.tile[num330, num328].liquid > 0)
												{
													num327++;
												}
											}
											catch
											{
												num327 += 15;
											}
										}
									}
									num328 -= 4;
									if (Main.wofT == -1)
									{
										Main.wofT = num328 * 16;
									}
									else if (Main.wofT > num328 * 16)
									{
										Main.wofT--;
										if (Main.wofT < num328 * 16)
										{
											Main.wofT = num328 * 16;
										}
									}
									else if (Main.wofT < num328 * 16)
									{
										Main.wofT++;
										if (Main.wofT > num328 * 16)
										{
											Main.wofT = num328 * 16;
										}
									}
									float num331 = (float)((Main.wofB + Main.wofT) / 2 - this.height / 2);
									if (this.position.Y > num331 + 1f)
									{
										this.velocity.Y = -1f;
									}
									else if (this.position.Y < num331 - 1f)
									{
										this.velocity.Y = 1f;
									}
									this.velocity.Y = 0f;
									int num332 = (Main.maxTilesY - 180) * 16;
									if (num331 < (float)num332)
									{
										num331 = (float)num332;
									}
									this.position.Y = num331;
									float num333 = 1.5f;
									if ((double)this.life < (double)this.lifeMax * 0.75)
									{
										num333 += 0.25f;
									}
									if ((double)this.life < (double)this.lifeMax * 0.5)
									{
										num333 += 0.4f;
									}
									if ((double)this.life < (double)this.lifeMax * 0.25)
									{
										num333 += 0.5f;
									}
									if ((double)this.life < (double)this.lifeMax * 0.1)
									{
										num333 += 0.6f;
									}
									if ((double)this.life < (double)this.lifeMax * 0.66 && Main.expertMode)
									{
										num333 += 0.3f;
									}
									if ((double)this.life < (double)this.lifeMax * 0.33 && Main.expertMode)
									{
										num333 += 0.3f;
									}
									if ((double)this.life < (double)this.lifeMax * 0.05 && Main.expertMode)
									{
										num333 += 0.6f;
									}
									if ((double)this.life < (double)this.lifeMax * 0.035 && Main.expertMode)
									{
										num333 += 0.6f;
									}
									if ((double)this.life < (double)this.lifeMax * 0.025 && Main.expertMode)
									{
										num333 += 0.6f;
									}
									if (Main.expertMode)
									{
										num333 *= 1.35f;
										num333 += 0.35f;
									}
									if (this.velocity.X == 0f)
									{
										this.TargetClosest(true);
										this.velocity.X = (float)this.direction;
									}
									if (this.velocity.X < 0f)
									{
										this.velocity.X = -num333;
										this.direction = -1;
									}
									else
									{
										this.velocity.X = num333;
										this.direction = 1;
									}
									this.spriteDirection = this.direction;
									Vector2 vector33 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
									float num334 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector33.X;
									float num335 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector33.Y;
									float num336 = (float)Math.Sqrt((double)(num334 * num334 + num335 * num335));
									num334 *= num336;
									num335 *= num336;
									if (this.direction > 0)
									{
										if (Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) > this.position.X + (float)(this.width / 2))
										{
											this.rotation = (float)Math.Atan2((double)(-(double)num335), (double)(-(double)num334)) + 3.14f;
										}
										else
										{
											this.rotation = 0f;
										}
									}
									else if (Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) < this.position.X + (float)(this.width / 2))
									{
										this.rotation = (float)Math.Atan2((double)num335, (double)num334) + 3.14f;
									}
									else
									{
										this.rotation = 0f;
									}
									if (Main.expertMode && Main.netMode != 1)
									{
										int num337 = (int)(1f + (float)this.life / (float)this.lifeMax * 10f);
										num337 *= num337;
										if (num337 < 400)
										{
											num337 = (num337 * 19 + 400) / 20;
										}
										if (num337 < 60)
										{
											num337 = (num337 * 3 + 60) / 4;
										}
										if (num337 < 20)
										{
											num337 = (num337 + 20) / 2;
										}
										num337 = (int)((double)num337 * 0.7);
										if (Main.rand.Next(num337) == 0)
										{
											int num338 = 0;
											float[] array = new float[10];
											for (int num339 = 0; num339 < 200; num339++)
											{
												if (num338 < 10 && Main.npc[num339].active && Main.npc[num339].type == 115)
												{
													array[num338] = Main.npc[num339].ai[0];
													num338++;
												}
											}
											int maxValue = 1 + num338 * 2;
											if (num338 < 10 && Main.rand.Next(maxValue) <= 1)
											{
												int num340 = -1;
												for (int num341 = 0; num341 < 1000; num341++)
												{
													int num342 = Main.rand.Next(10);
													float num343 = (float)num342 * 0.1f - 0.05f;
													bool flag29 = true;
													for (int num344 = 0; num344 < num338; num344++)
													{
														if (num343 == array[num344])
														{
															flag29 = false;
															break;
														}
													}
													if (flag29)
													{
														num340 = num342;
														break;
													}
												}
												if (num340 >= 0)
												{
													int num345 = NPC.NewNPC((int)this.position.X, (int)num331, 115, this.whoAmI, 0f, 0f, 0f, 0f, 255);
													Main.npc[num345].ai[0] = (float)num340 * 0.1f - 0.05f;
												}
											}
										}
									}
									if (this.localAI[0] == 1f && Main.netMode != 1)
									{
										this.localAI[0] = 2f;
										num331 = (float)((Main.wofB + Main.wofT) / 2);
										num331 = (num331 + (float)Main.wofT) / 2f;
										int num346 = NPC.NewNPC((int)this.position.X, (int)num331, 114, this.whoAmI, 0f, 0f, 0f, 0f, 255);
										Main.npc[num346].ai[0] = 1f;
										num331 = (float)((Main.wofB + Main.wofT) / 2);
										num331 = (num331 + (float)Main.wofB) / 2f;
										num346 = NPC.NewNPC((int)this.position.X, (int)num331, 114, this.whoAmI, 0f, 0f, 0f, 0f, 255);
										Main.npc[num346].ai[0] = -1f;
										num331 = (float)((Main.wofB + Main.wofT) / 2);
										num331 = (num331 + (float)Main.wofB) / 2f;
										for (int num347 = 0; num347 < 11; num347++)
										{
											num346 = NPC.NewNPC((int)this.position.X, (int)num331, 115, this.whoAmI, 0f, 0f, 0f, 0f, 255);
											Main.npc[num346].ai[0] = (float)num347 * 0.1f - 0.05f;
										}
										return;
									}
								}
								else if (this.aiStyle == 28)
								{
									if (Main.wof < 0)
									{
										this.active = false;
										return;
									}
									this.realLife = Main.wof;
									if (Main.npc[Main.wof].life > 0)
									{
										this.life = Main.npc[Main.wof].life;
									}
									this.TargetClosest(true);
									this.position.X = Main.npc[Main.wof].position.X;
									this.direction = Main.npc[Main.wof].direction;
									this.spriteDirection = this.direction;
									float num348 = (float)((Main.wofB + Main.wofT) / 2);
									if (this.ai[0] > 0f)
									{
										num348 = (num348 + (float)Main.wofT) / 2f;
									}
									else
									{
										num348 = (num348 + (float)Main.wofB) / 2f;
									}
									num348 -= (float)(this.height / 2);
									if (this.position.Y > num348 + 1f)
									{
										this.velocity.Y = -1f;
									}
									else if (this.position.Y < num348 - 1f)
									{
										this.velocity.Y = 1f;
									}
									else
									{
										this.velocity.Y = 0f;
										this.position.Y = num348;
									}
									if (this.velocity.Y > 5f)
									{
										this.velocity.Y = 5f;
									}
									if (this.velocity.Y < -5f)
									{
										this.velocity.Y = -5f;
									}
									Vector2 vector34 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
									float num349 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector34.X;
									float num350 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector34.Y;
									float num351 = (float)Math.Sqrt((double)(num349 * num349 + num350 * num350));
									num349 *= num351;
									num350 *= num351;
									bool flag30 = true;
									if (this.direction > 0)
									{
										if (Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) > this.position.X + (float)(this.width / 2))
										{
											this.rotation = (float)Math.Atan2((double)(-(double)num350), (double)(-(double)num349)) + 3.14f;
										}
										else
										{
											this.rotation = 0f;
											flag30 = false;
										}
									}
									else if (Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) < this.position.X + (float)(this.width / 2))
									{
										this.rotation = (float)Math.Atan2((double)num350, (double)num349) + 3.14f;
									}
									else
									{
										this.rotation = 0f;
										flag30 = false;
									}
									if (Main.netMode != 1)
									{
										int num352 = 4;
										this.localAI[1] += 1f;
										if ((double)Main.npc[Main.wof].life < (double)Main.npc[Main.wof].lifeMax * 0.75)
										{
											this.localAI[1] += 1f;
											num352++;
										}
										if ((double)Main.npc[Main.wof].life < (double)Main.npc[Main.wof].lifeMax * 0.5)
										{
											this.localAI[1] += 1f;
											num352++;
										}
										if ((double)Main.npc[Main.wof].life < (double)Main.npc[Main.wof].lifeMax * 0.25)
										{
											this.localAI[1] += 1f;
											num352 += 2;
										}
										if ((double)Main.npc[Main.wof].life < (double)Main.npc[Main.wof].lifeMax * 0.1)
										{
											this.localAI[1] += 2f;
											num352 += 3;
										}
										if (Main.expertMode)
										{
											this.localAI[1] += 0.5f;
											num352++;
											if ((double)Main.npc[Main.wof].life < (double)Main.npc[Main.wof].lifeMax * 0.1)
											{
												this.localAI[1] += 2f;
												num352 += 3;
											}
										}
										if (this.localAI[2] == 0f)
										{
											if (this.localAI[1] > 600f)
											{
												this.localAI[2] = 1f;
												this.localAI[1] = 0f;
												return;
											}
										}
										else if (this.localAI[1] > 45f && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
										{
											this.localAI[1] = 0f;
											this.localAI[2] += 1f;
											if (this.localAI[2] >= (float)num352)
											{
												this.localAI[2] = 0f;
											}
											if (flag30)
											{
												float num353 = 9f;
												int num354 = 11;
												int num355 = 83;
												if ((double)Main.npc[Main.wof].life < (double)Main.npc[Main.wof].lifeMax * 0.5)
												{
													num354++;
													num353 += 1f;
												}
												if ((double)Main.npc[Main.wof].life < (double)Main.npc[Main.wof].lifeMax * 0.25)
												{
													num354++;
													num353 += 1f;
												}
												if ((double)Main.npc[Main.wof].life < (double)Main.npc[Main.wof].lifeMax * 0.1)
												{
													num354 += 2;
													num353 += 2f;
												}
												vector34 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
												num349 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector34.X;
												num350 = Main.player[this.target].position.Y + (float)Main.player[this.target].height * 0.5f - vector34.Y;
												num351 = (float)Math.Sqrt((double)(num349 * num349 + num350 * num350));
												num351 = num353 / num351;
												num349 *= num351;
												num350 *= num351;
												vector34.X += num349;
												vector34.Y += num350;
												Projectile.NewProjectile(vector34.X, vector34.Y, num349, num350, num355, num354, 0f, Main.myPlayer, 0f, 0f);
												return;
											}
										}
									}
								}
								else if (this.aiStyle == 29)
								{
									if (this.justHit)
									{
										this.ai[1] = 10f;
									}
									if (Main.wof < 0)
									{
										this.active = false;
										return;
									}
									this.TargetClosest(true);
									float num356 = 0.1f;
									float num357 = 300f;
									if ((double)Main.npc[Main.wof].life < (double)Main.npc[Main.wof].lifeMax * 0.25)
									{
										this.damage = (int)(75f * Main.damageMultiplier);
										this.defense = 40;
										if (!Main.expertMode)
										{
											num357 = 900f;
										}
										else
										{
											num356 += 0.1f;
										}
									}
									else if ((double)Main.npc[Main.wof].life < (double)Main.npc[Main.wof].lifeMax * 0.5)
									{
										this.damage = (int)(60f * Main.damageMultiplier);
										this.defense = 30;
										if (!Main.expertMode)
										{
											num357 = 700f;
										}
										else
										{
											num356 += 0.066f;
										}
									}
									else if ((double)Main.npc[Main.wof].life < (double)Main.npc[Main.wof].lifeMax * 0.75)
									{
										this.damage = (int)(45f * Main.damageMultiplier);
										this.defense = 20;
										if (!Main.expertMode)
										{
											num357 = 500f;
										}
										else
										{
											num356 += 0.033f;
										}
									}
									if (Main.expertMode)
									{
										this.defense = this.defDefense;
										if (this.whoAmI % 4 == 0)
										{
											num357 *= 1.75f;
										}
										if (this.whoAmI % 4 == 1)
										{
											num357 *= 1.5f;
										}
										if (this.whoAmI % 4 == 2)
										{
											num357 *= 1.25f;
										}
										if (this.whoAmI % 3 == 0)
										{
											num357 *= 1.5f;
										}
										if (this.whoAmI % 3 == 1)
										{
											num357 *= 1.25f;
										}
										num357 *= 0.75f;
									}
									float num358 = Main.npc[Main.wof].position.X + (float)(Main.npc[Main.wof].width / 2);
									float num359 = Main.npc[Main.wof].position.Y;
									float num360 = (float)(Main.wofB - Main.wofT);
									num359 = (float)Main.wofT + num360 * this.ai[0];
									this.ai[2] += 1f;
									if (this.ai[2] > 100f)
									{
										num357 = (float)((int)(num357 * 1.3f));
										if (this.ai[2] > 200f)
										{
											this.ai[2] = 0f;
										}
									}
									Vector2 vector35 = new Vector2(num358, num359);
									float num361 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - (float)(this.width / 2) - vector35.X;
									float num362 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - (float)(this.height / 2) - vector35.Y;
									float num363 = (float)Math.Sqrt((double)(num361 * num361 + num362 * num362));
									if (this.ai[1] == 0f)
									{
										if (num363 > num357)
										{
											num363 = num357 / num363;
											num361 *= num363;
											num362 *= num363;
										}
										if (this.position.X < num358 + num361)
										{
											this.velocity.X = this.velocity.X + num356;
											if (this.velocity.X < 0f && num361 > 0f)
											{
												this.velocity.X = this.velocity.X + num356 * 2.5f;
											}
										}
										else if (this.position.X > num358 + num361)
										{
											this.velocity.X = this.velocity.X - num356;
											if (this.velocity.X > 0f && num361 < 0f)
											{
												this.velocity.X = this.velocity.X - num356 * 2.5f;
											}
										}
										if (this.position.Y < num359 + num362)
										{
											this.velocity.Y = this.velocity.Y + num356;
											if (this.velocity.Y < 0f && num362 > 0f)
											{
												this.velocity.Y = this.velocity.Y + num356 * 2.5f;
											}
										}
										else if (this.position.Y > num359 + num362)
										{
											this.velocity.Y = this.velocity.Y - num356;
											if (this.velocity.Y > 0f && num362 < 0f)
											{
												this.velocity.Y = this.velocity.Y - num356 * 2.5f;
											}
										}
										float num364 = 4f;
										if (Main.expertMode && Main.wof >= 0)
										{
											float num365 = 1.5f;
											float num366 = (float)(Main.npc[Main.wof].life / Main.npc[Main.wof].lifeMax);
											if ((double)num366 < 0.75)
											{
												num365 += 0.7f;
											}
											if ((double)num366 < 0.5)
											{
												num365 += 0.7f;
											}
											if ((double)num366 < 0.25)
											{
												num365 += 0.9f;
											}
											if ((double)num366 < 0.1)
											{
												num365 += 0.9f;
											}
											num365 *= 1.25f;
											num365 += 0.3f;
											num364 += num365 * 0.35f;
											if (base.Center.X < Main.npc[Main.wof].Center.X && Main.npc[Main.wof].velocity.X > 0f)
											{
												num364 += 6f;
											}
											if (base.Center.X > Main.npc[Main.wof].Center.X && Main.npc[Main.wof].velocity.X < 0f)
											{
												num364 += 6f;
											}
										}
										if (this.velocity.X > num364)
										{
											this.velocity.X = num364;
										}
										if (this.velocity.X < -num364)
										{
											this.velocity.X = -num364;
										}
										if (this.velocity.Y > num364)
										{
											this.velocity.Y = num364;
										}
										if (this.velocity.Y < -num364)
										{
											this.velocity.Y = -num364;
										}
									}
									else if (this.ai[1] > 0f)
									{
										this.ai[1] -= 1f;
									}
									else
									{
										this.ai[1] = 0f;
									}
									if (num361 > 0f)
									{
										this.spriteDirection = 1;
										this.rotation = (float)Math.Atan2((double)num362, (double)num361);
									}
									if (num361 < 0f)
									{
										this.spriteDirection = -1;
										this.rotation = (float)Math.Atan2((double)num362, (double)num361) + 3.14f;
									}
									Lighting.AddLight((int)(this.position.X + (float)(this.width / 2)) / 16, (int)(this.position.Y + (float)(this.height / 2)) / 16, 0.3f, 0.2f, 0.1f);
									return;
								}
								else if (this.aiStyle == 30)
								{
									if (this.target < 0 || this.target == 255 || Main.player[this.target].dead || !Main.player[this.target].active)
									{
										this.TargetClosest(true);
									}
									bool dead2 = Main.player[this.target].dead;
									float num367 = this.position.X + (float)(this.width / 2) - Main.player[this.target].position.X - (float)(Main.player[this.target].width / 2);
									float num368 = this.position.Y + (float)this.height - 59f - Main.player[this.target].position.Y - (float)(Main.player[this.target].height / 2);
									float num369 = (float)Math.Atan2((double)num368, (double)num367) + 1.57f;
									if (num369 < 0f)
									{
										num369 += 6.283f;
									}
									else if ((double)num369 > 6.283)
									{
										num369 -= 6.283f;
									}
									float num370 = 0.1f;
									if (this.rotation < num369)
									{
										if ((double)(num369 - this.rotation) > 3.1415)
										{
											this.rotation -= num370;
										}
										else
										{
											this.rotation += num370;
										}
									}
									else if (this.rotation > num369)
									{
										if ((double)(this.rotation - num369) > 3.1415)
										{
											this.rotation += num370;
										}
										else
										{
											this.rotation -= num370;
										}
									}
									if (this.rotation > num369 - num370 && this.rotation < num369 + num370)
									{
										this.rotation = num369;
									}
									if (this.rotation < 0f)
									{
										this.rotation += 6.283f;
									}
									else if ((double)this.rotation > 6.283)
									{
										this.rotation -= 6.283f;
									}
									if (this.rotation > num369 - num370 && this.rotation < num369 + num370)
									{
										this.rotation = num369;
									}
									if (Main.rand.Next(5) == 0)
									{
										int num371 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height * 0.25f), this.width, (int)((float)this.height * 0.5f), 5, this.velocity.X, 2f, 0, default(Color), 1f);
										Dust expr_12582_cp_0 = Main.dust[num371];
										expr_12582_cp_0.velocity.X = expr_12582_cp_0.velocity.X * 0.5f;
										Dust expr_125A2_cp_0 = Main.dust[num371];
										expr_125A2_cp_0.velocity.Y = expr_125A2_cp_0.velocity.Y * 0.1f;
									}
									if (Main.netMode != 1 && !Main.dayTime && !dead2 && this.timeLeft < 10)
									{
										for (int num372 = 0; num372 < 200; num372++)
										{
											if (num372 != this.whoAmI && Main.npc[num372].active && (Main.npc[num372].type == 125 || Main.npc[num372].type == 126) && Main.npc[num372].timeLeft - 1 > this.timeLeft)
											{
												this.timeLeft = Main.npc[num372].timeLeft - 1;
											}
										}
									}
									if (Main.dayTime || dead2)
									{
										this.velocity.Y = this.velocity.Y - 0.04f;
										if (this.timeLeft > 10)
										{
											this.timeLeft = 10;
											return;
										}
									}
									else if (this.ai[0] == 0f)
									{
										if (this.ai[1] == 0f)
										{
											float num373 = 7f;
											float num374 = 0.1f;
											if (Main.expertMode)
											{
												num373 = 8.25f;
												num374 = 0.115f;
											}
											int num375 = 1;
											if (this.position.X + (float)(this.width / 2) < Main.player[this.target].position.X + (float)Main.player[this.target].width)
											{
												num375 = -1;
											}
											Vector2 vector36 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
											float num376 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) + (float)(num375 * 300) - vector36.X;
											float num377 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - 300f - vector36.Y;
											float num378 = (float)Math.Sqrt((double)(num376 * num376 + num377 * num377));
											float num379 = num378;
											num378 = num373 / num378;
											num376 *= num378;
											num377 *= num378;
											if (this.velocity.X < num376)
											{
												this.velocity.X = this.velocity.X + num374;
												if (this.velocity.X < 0f && num376 > 0f)
												{
													this.velocity.X = this.velocity.X + num374;
												}
											}
											else if (this.velocity.X > num376)
											{
												this.velocity.X = this.velocity.X - num374;
												if (this.velocity.X > 0f && num376 < 0f)
												{
													this.velocity.X = this.velocity.X - num374;
												}
											}
											if (this.velocity.Y < num377)
											{
												this.velocity.Y = this.velocity.Y + num374;
												if (this.velocity.Y < 0f && num377 > 0f)
												{
													this.velocity.Y = this.velocity.Y + num374;
												}
											}
											else if (this.velocity.Y > num377)
											{
												this.velocity.Y = this.velocity.Y - num374;
												if (this.velocity.Y > 0f && num377 < 0f)
												{
													this.velocity.Y = this.velocity.Y - num374;
												}
											}
											this.ai[2] += 1f;
											if (this.ai[2] >= 600f)
											{
												this.ai[1] = 1f;
												this.ai[2] = 0f;
												this.ai[3] = 0f;
												this.target = 255;
												this.netUpdate = true;
											}
											else if (this.position.Y + (float)this.height < Main.player[this.target].position.Y && num379 < 400f)
											{
												if (!Main.player[this.target].dead)
												{
													this.ai[3] += 1f;
													if (Main.expertMode && (double)this.life < (double)this.lifeMax * 0.9)
													{
														this.ai[3] += 0.3f;
													}
													if (Main.expertMode && (double)this.life < (double)this.lifeMax * 0.8)
													{
														this.ai[3] += 0.3f;
													}
													if (Main.expertMode && (double)this.life < (double)this.lifeMax * 0.7)
													{
														this.ai[3] += 0.3f;
													}
													if (Main.expertMode && (double)this.life < (double)this.lifeMax * 0.6)
													{
														this.ai[3] += 0.3f;
													}
												}
												if (this.ai[3] >= 60f)
												{
													this.ai[3] = 0f;
													vector36 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
													num376 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector36.X;
													num377 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector36.Y;
													if (Main.netMode != 1)
													{
														float num380 = 9f;
														int num381 = 20;
														int num382 = 83;
														if (Main.expertMode)
														{
															num380 = 10.5f;
															num381 = 19;
														}
														num378 = (float)Math.Sqrt((double)(num376 * num376 + num377 * num377));
														num378 = num380 / num378;
														num376 *= num378;
														num377 *= num378;
														num376 += (float)Main.rand.Next(-40, 41) * 0.08f;
														num377 += (float)Main.rand.Next(-40, 41) * 0.08f;
														vector36.X += num376 * 15f;
														vector36.Y += num377 * 15f;
														Projectile.NewProjectile(vector36.X, vector36.Y, num376, num377, num382, num381, 0f, Main.myPlayer, 0f, 0f);
													}
												}
											}
										}
										else if (this.ai[1] == 1f)
										{
											this.rotation = num369;
											float num383 = 12f;
											if (Main.expertMode)
											{
												num383 = 15f;
											}
											Vector2 vector37 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
											float num384 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector37.X;
											float num385 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector37.Y;
											float num386 = (float)Math.Sqrt((double)(num384 * num384 + num385 * num385));
											num386 = num383 / num386;
											this.velocity.X = num384 * num386;
											this.velocity.Y = num385 * num386;
											this.ai[1] = 2f;
										}
										else if (this.ai[1] == 2f)
										{
											this.ai[2] += 1f;
											if (this.ai[2] >= 25f)
											{
												this.velocity.X = this.velocity.X * 0.96f;
												this.velocity.Y = this.velocity.Y * 0.96f;
												if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1)
												{
													this.velocity.X = 0f;
												}
												if ((double)this.velocity.Y > -0.1 && (double)this.velocity.Y < 0.1)
												{
													this.velocity.Y = 0f;
												}
											}
											else
											{
												this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) - 1.57f;
											}
											if (this.ai[2] >= 70f)
											{
												this.ai[3] += 1f;
												this.ai[2] = 0f;
												this.target = 255;
												this.rotation = num369;
												if (this.ai[3] >= 4f)
												{
													this.ai[1] = 0f;
													this.ai[3] = 0f;
												}
												else
												{
													this.ai[1] = 1f;
												}
											}
										}
										if ((double)this.life < (double)this.lifeMax * 0.4)
										{
											this.ai[0] = 1f;
											this.ai[1] = 0f;
											this.ai[2] = 0f;
											this.ai[3] = 0f;
											this.netUpdate = true;
											return;
										}
									}
									else if (this.ai[0] == 1f || this.ai[0] == 2f)
									{
										if (this.ai[0] == 1f)
										{
											this.ai[2] += 0.005f;
											if ((double)this.ai[2] > 0.5)
											{
												this.ai[2] = 0.5f;
											}
										}
										else
										{
											this.ai[2] -= 0.005f;
											if (this.ai[2] < 0f)
											{
												this.ai[2] = 0f;
											}
										}
										this.rotation += this.ai[2];
										this.ai[1] += 1f;
										if (this.ai[1] == 100f)
										{
											this.ai[0] += 1f;
											this.ai[1] = 0f;
											if (this.ai[0] == 3f)
											{
												this.ai[2] = 0f;
											}
											else
											{
												Main.PlaySound(3, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
												for (int num387 = 0; num387 < 2; num387++)
												{
													Gore.NewGore(this.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 143, 1f);
													Gore.NewGore(this.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 7, 1f);
													Gore.NewGore(this.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 6, 1f);
												}
												for (int num388 = 0; num388 < 20; num388++)
												{
													Dust.NewDust(this.position, this.width, this.height, 5, (float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f, 0, default(Color), 1f);
												}
												Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
											}
										}
										Dust.NewDust(this.position, this.width, this.height, 5, (float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f, 0, default(Color), 1f);
										this.velocity.X = this.velocity.X * 0.98f;
										this.velocity.Y = this.velocity.Y * 0.98f;
										if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1)
										{
											this.velocity.X = 0f;
										}
										if ((double)this.velocity.Y > -0.1 && (double)this.velocity.Y < 0.1)
										{
											this.velocity.Y = 0f;
											return;
										}
									}
									else
									{
										this.damage = (int)((double)this.defDamage * 1.5);
										this.defense = this.defDefense + 10;
										this.HitSound = SoundID.NPCHit4;
										if (this.ai[1] == 0f)
										{
											float num389 = 8f;
											float num390 = 0.15f;
											if (Main.expertMode)
											{
												num389 = 9.5f;
												num390 = 0.175f;
											}
											Vector2 vector38 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
											float num391 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector38.X;
											float num392 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - 300f - vector38.Y;
											float num393 = (float)Math.Sqrt((double)(num391 * num391 + num392 * num392));
											num393 = num389 / num393;
											num391 *= num393;
											num392 *= num393;
											if (this.velocity.X < num391)
											{
												this.velocity.X = this.velocity.X + num390;
												if (this.velocity.X < 0f && num391 > 0f)
												{
													this.velocity.X = this.velocity.X + num390;
												}
											}
											else if (this.velocity.X > num391)
											{
												this.velocity.X = this.velocity.X - num390;
												if (this.velocity.X > 0f && num391 < 0f)
												{
													this.velocity.X = this.velocity.X - num390;
												}
											}
											if (this.velocity.Y < num392)
											{
												this.velocity.Y = this.velocity.Y + num390;
												if (this.velocity.Y < 0f && num392 > 0f)
												{
													this.velocity.Y = this.velocity.Y + num390;
												}
											}
											else if (this.velocity.Y > num392)
											{
												this.velocity.Y = this.velocity.Y - num390;
												if (this.velocity.Y > 0f && num392 < 0f)
												{
													this.velocity.Y = this.velocity.Y - num390;
												}
											}
											this.ai[2] += 1f;
											if (this.ai[2] >= 300f)
											{
												this.ai[1] = 1f;
												this.ai[2] = 0f;
												this.ai[3] = 0f;
												this.TargetClosest(true);
												this.netUpdate = true;
											}
											vector38 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
											num391 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector38.X;
											num392 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector38.Y;
											this.rotation = (float)Math.Atan2((double)num392, (double)num391) - 1.57f;
											if (Main.netMode != 1)
											{
												this.localAI[1] += 1f;
												if ((double)this.life < (double)this.lifeMax * 0.75)
												{
													this.localAI[1] += 1f;
												}
												if ((double)this.life < (double)this.lifeMax * 0.5)
												{
													this.localAI[1] += 1f;
												}
												if ((double)this.life < (double)this.lifeMax * 0.25)
												{
													this.localAI[1] += 1f;
												}
												if ((double)this.life < (double)this.lifeMax * 0.1)
												{
													this.localAI[1] += 2f;
												}
												if (this.localAI[1] > 180f && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
												{
													this.localAI[1] = 0f;
													float num394 = 8.5f;
													int num395 = 25;
													int num396 = 100;
													if (Main.expertMode)
													{
														num394 = 10f;
														num395 = 23;
													}
													num393 = (float)Math.Sqrt((double)(num391 * num391 + num392 * num392));
													num393 = num394 / num393;
													num391 *= num393;
													num392 *= num393;
													vector38.X += num391 * 15f;
													vector38.Y += num392 * 15f;
													Projectile.NewProjectile(vector38.X, vector38.Y, num391, num392, num396, num395, 0f, Main.myPlayer, 0f, 0f);
													return;
												}
											}
										}
										else
										{
											int num397 = 1;
											if (this.position.X + (float)(this.width / 2) < Main.player[this.target].position.X + (float)Main.player[this.target].width)
											{
												num397 = -1;
											}
											float num398 = 8f;
											float num399 = 0.2f;
											if (Main.expertMode)
											{
												num398 = 9.5f;
												num399 = 0.25f;
											}
											Vector2 vector39 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
											float num400 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) + (float)(num397 * 340) - vector39.X;
											float num401 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector39.Y;
											float num402 = (float)Math.Sqrt((double)(num400 * num400 + num401 * num401));
											num402 = num398 / num402;
											num400 *= num402;
											num401 *= num402;
											if (this.velocity.X < num400)
											{
												this.velocity.X = this.velocity.X + num399;
												if (this.velocity.X < 0f && num400 > 0f)
												{
													this.velocity.X = this.velocity.X + num399;
												}
											}
											else if (this.velocity.X > num400)
											{
												this.velocity.X = this.velocity.X - num399;
												if (this.velocity.X > 0f && num400 < 0f)
												{
													this.velocity.X = this.velocity.X - num399;
												}
											}
											if (this.velocity.Y < num401)
											{
												this.velocity.Y = this.velocity.Y + num399;
												if (this.velocity.Y < 0f && num401 > 0f)
												{
													this.velocity.Y = this.velocity.Y + num399;
												}
											}
											else if (this.velocity.Y > num401)
											{
												this.velocity.Y = this.velocity.Y - num399;
												if (this.velocity.Y > 0f && num401 < 0f)
												{
													this.velocity.Y = this.velocity.Y - num399;
												}
											}
											vector39 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
											num400 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector39.X;
											num401 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector39.Y;
											this.rotation = (float)Math.Atan2((double)num401, (double)num400) - 1.57f;
											if (Main.netMode != 1)
											{
												this.localAI[1] += 1f;
												if ((double)this.life < (double)this.lifeMax * 0.75)
												{
													this.localAI[1] += 0.5f;
												}
												if ((double)this.life < (double)this.lifeMax * 0.5)
												{
													this.localAI[1] += 0.75f;
												}
												if ((double)this.life < (double)this.lifeMax * 0.25)
												{
													this.localAI[1] += 1f;
												}
												if ((double)this.life < (double)this.lifeMax * 0.1)
												{
													this.localAI[1] += 1.5f;
												}
												if (Main.expertMode)
												{
													this.localAI[1] += 1.5f;
												}
												if (this.localAI[1] > 60f && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
												{
													this.localAI[1] = 0f;
													float num403 = 9f;
													int num404 = 18;
													int num405 = 100;
													if (Main.expertMode)
													{
														num404 = 17;
													}
													num402 = (float)Math.Sqrt((double)(num400 * num400 + num401 * num401));
													num402 = num403 / num402;
													num400 *= num402;
													num401 *= num402;
													vector39.X += num400 * 15f;
													vector39.Y += num401 * 15f;
													Projectile.NewProjectile(vector39.X, vector39.Y, num400, num401, num405, num404, 0f, Main.myPlayer, 0f, 0f);
												}
											}
											this.ai[2] += 1f;
											if (this.ai[2] >= 180f)
											{
												this.ai[1] = 0f;
												this.ai[2] = 0f;
												this.ai[3] = 0f;
												this.TargetClosest(true);
												this.netUpdate = true;
												return;
											}
										}
									}
								}
								else if (this.aiStyle == 31)
								{
									if (this.target < 0 || this.target == 255 || Main.player[this.target].dead || !Main.player[this.target].active)
									{
										this.TargetClosest(true);
									}
									bool dead3 = Main.player[this.target].dead;
									float num406 = this.position.X + (float)(this.width / 2) - Main.player[this.target].position.X - (float)(Main.player[this.target].width / 2);
									float num407 = this.position.Y + (float)this.height - 59f - Main.player[this.target].position.Y - (float)(Main.player[this.target].height / 2);
									float num408 = (float)Math.Atan2((double)num407, (double)num406) + 1.57f;
									if (num408 < 0f)
									{
										num408 += 6.283f;
									}
									else if ((double)num408 > 6.283)
									{
										num408 -= 6.283f;
									}
									float num409 = 0.15f;
									if (this.rotation < num408)
									{
										if ((double)(num408 - this.rotation) > 3.1415)
										{
											this.rotation -= num409;
										}
										else
										{
											this.rotation += num409;
										}
									}
									else if (this.rotation > num408)
									{
										if ((double)(this.rotation - num408) > 3.1415)
										{
											this.rotation += num409;
										}
										else
										{
											this.rotation -= num409;
										}
									}
									if (this.rotation > num408 - num409 && this.rotation < num408 + num409)
									{
										this.rotation = num408;
									}
									if (this.rotation < 0f)
									{
										this.rotation += 6.283f;
									}
									else if ((double)this.rotation > 6.283)
									{
										this.rotation -= 6.283f;
									}
									if (this.rotation > num408 - num409 && this.rotation < num408 + num409)
									{
										this.rotation = num408;
									}
									if (Main.rand.Next(5) == 0)
									{
										int num410 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height * 0.25f), this.width, (int)((float)this.height * 0.5f), 5, this.velocity.X, 2f, 0, default(Color), 1f);
										Dust expr_1447B_cp_0 = Main.dust[num410];
										expr_1447B_cp_0.velocity.X = expr_1447B_cp_0.velocity.X * 0.5f;
										Dust expr_1449B_cp_0 = Main.dust[num410];
										expr_1449B_cp_0.velocity.Y = expr_1449B_cp_0.velocity.Y * 0.1f;
									}
									if (Main.netMode != 1 && !Main.dayTime && !dead3 && this.timeLeft < 10)
									{
										for (int num411 = 0; num411 < 200; num411++)
										{
											if (num411 != this.whoAmI && Main.npc[num411].active && (Main.npc[num411].type == 125 || Main.npc[num411].type == 126) && Main.npc[num411].timeLeft - 1 > this.timeLeft)
											{
												this.timeLeft = Main.npc[num411].timeLeft - 1;
											}
										}
									}
									if (Main.dayTime || dead3)
									{
										this.velocity.Y = this.velocity.Y - 0.04f;
										if (this.timeLeft > 10)
										{
											this.timeLeft = 10;
											return;
										}
									}
									else if (this.ai[0] == 0f)
									{
										if (this.ai[1] == 0f)
										{
											this.TargetClosest(true);
											float num412 = 12f;
											float num413 = 0.4f;
											int num414 = 1;
											if (this.position.X + (float)(this.width / 2) < Main.player[this.target].position.X + (float)Main.player[this.target].width)
											{
												num414 = -1;
											}
											Vector2 vector40 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
											float num415 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) + (float)(num414 * 400) - vector40.X;
											float num416 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector40.Y;
											float num417 = (float)Math.Sqrt((double)(num415 * num415 + num416 * num416));
											num417 = num412 / num417;
											num415 *= num417;
											num416 *= num417;
											if (this.velocity.X < num415)
											{
												this.velocity.X = this.velocity.X + num413;
												if (this.velocity.X < 0f && num415 > 0f)
												{
													this.velocity.X = this.velocity.X + num413;
												}
											}
											else if (this.velocity.X > num415)
											{
												this.velocity.X = this.velocity.X - num413;
												if (this.velocity.X > 0f && num415 < 0f)
												{
													this.velocity.X = this.velocity.X - num413;
												}
											}
											if (this.velocity.Y < num416)
											{
												this.velocity.Y = this.velocity.Y + num413;
												if (this.velocity.Y < 0f && num416 > 0f)
												{
													this.velocity.Y = this.velocity.Y + num413;
												}
											}
											else if (this.velocity.Y > num416)
											{
												this.velocity.Y = this.velocity.Y - num413;
												if (this.velocity.Y > 0f && num416 < 0f)
												{
													this.velocity.Y = this.velocity.Y - num413;
												}
											}
											this.ai[2] += 1f;
											if (this.ai[2] >= 600f)
											{
												this.ai[1] = 1f;
												this.ai[2] = 0f;
												this.ai[3] = 0f;
												this.target = 255;
												this.netUpdate = true;
											}
											else
											{
												if (!Main.player[this.target].dead)
												{
													this.ai[3] += 1f;
													if (Main.expertMode && (double)this.life < (double)this.lifeMax * 0.8)
													{
														this.ai[3] += 0.6f;
													}
												}
												if (this.ai[3] >= 60f)
												{
													this.ai[3] = 0f;
													vector40 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
													num415 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector40.X;
													num416 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector40.Y;
													if (Main.netMode != 1)
													{
														float num418 = 12f;
														int num419 = 25;
														int num420 = 96;
														if (Main.expertMode)
														{
															num418 = 14f;
															num419 = 22;
														}
														num417 = (float)Math.Sqrt((double)(num415 * num415 + num416 * num416));
														num417 = num418 / num417;
														num415 *= num417;
														num416 *= num417;
														num415 += (float)Main.rand.Next(-40, 41) * 0.05f;
														num416 += (float)Main.rand.Next(-40, 41) * 0.05f;
														vector40.X += num415 * 4f;
														vector40.Y += num416 * 4f;
														Projectile.NewProjectile(vector40.X, vector40.Y, num415, num416, num420, num419, 0f, Main.myPlayer, 0f, 0f);
													}
												}
											}
										}
										else if (this.ai[1] == 1f)
										{
											this.rotation = num408;
											float num421 = 13f;
											if (Main.expertMode)
											{
												if ((double)this.life < (double)this.lifeMax * 0.9)
												{
													num421 += 0.5f;
												}
												if ((double)this.life < (double)this.lifeMax * 0.8)
												{
													num421 += 0.5f;
												}
												if ((double)this.life < (double)this.lifeMax * 0.7)
												{
													num421 += 0.55f;
												}
												if ((double)this.life < (double)this.lifeMax * 0.6)
												{
													num421 += 0.6f;
												}
												if ((double)this.life < (double)this.lifeMax * 0.5)
												{
													num421 += 0.65f;
												}
											}
											Vector2 vector41 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
											float num422 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector41.X;
											float num423 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector41.Y;
											float num424 = (float)Math.Sqrt((double)(num422 * num422 + num423 * num423));
											num424 = num421 / num424;
											this.velocity.X = num422 * num424;
											this.velocity.Y = num423 * num424;
											this.ai[1] = 2f;
										}
										else if (this.ai[1] == 2f)
										{
											this.ai[2] += 1f;
											if (this.ai[2] >= 8f)
											{
												this.velocity.X = this.velocity.X * 0.9f;
												this.velocity.Y = this.velocity.Y * 0.9f;
												if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1)
												{
													this.velocity.X = 0f;
												}
												if ((double)this.velocity.Y > -0.1 && (double)this.velocity.Y < 0.1)
												{
													this.velocity.Y = 0f;
												}
											}
											else
											{
												this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) - 1.57f;
											}
											if (this.ai[2] >= 42f)
											{
												this.ai[3] += 1f;
												this.ai[2] = 0f;
												this.target = 255;
												this.rotation = num408;
												if (this.ai[3] >= 10f)
												{
													this.ai[1] = 0f;
													this.ai[3] = 0f;
												}
												else
												{
													this.ai[1] = 1f;
												}
											}
										}
										if ((double)this.life < (double)this.lifeMax * 0.4)
										{
											this.ai[0] = 1f;
											this.ai[1] = 0f;
											this.ai[2] = 0f;
											this.ai[3] = 0f;
											this.netUpdate = true;
											return;
										}
									}
									else if (this.ai[0] == 1f || this.ai[0] == 2f)
									{
										if (this.ai[0] == 1f)
										{
											this.ai[2] += 0.005f;
											if ((double)this.ai[2] > 0.5)
											{
												this.ai[2] = 0.5f;
											}
										}
										else
										{
											this.ai[2] -= 0.005f;
											if (this.ai[2] < 0f)
											{
												this.ai[2] = 0f;
											}
										}
										this.rotation += this.ai[2];
										this.ai[1] += 1f;
										if (this.ai[1] == 100f)
										{
											this.ai[0] += 1f;
											this.ai[1] = 0f;
											if (this.ai[0] == 3f)
											{
												this.ai[2] = 0f;
											}
											else
											{
												Main.PlaySound(3, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
												for (int num425 = 0; num425 < 2; num425++)
												{
													Gore.NewGore(this.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 144, 1f);
													Gore.NewGore(this.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 7, 1f);
													Gore.NewGore(this.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 6, 1f);
												}
												for (int num426 = 0; num426 < 20; num426++)
												{
													Dust.NewDust(this.position, this.width, this.height, 5, (float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f, 0, default(Color), 1f);
												}
												Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
											}
										}
										Dust.NewDust(this.position, this.width, this.height, 5, (float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f, 0, default(Color), 1f);
										this.velocity.X = this.velocity.X * 0.98f;
										this.velocity.Y = this.velocity.Y * 0.98f;
										if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1)
										{
											this.velocity.X = 0f;
										}
										if ((double)this.velocity.Y > -0.1 && (double)this.velocity.Y < 0.1)
										{
											this.velocity.Y = 0f;
											return;
										}
									}
									else
									{
										this.HitSound = SoundID.NPCHit4;
										this.damage = (int)((double)this.defDamage * 1.5);
										this.defense = this.defDefense + 18;
										if (this.ai[1] == 0f)
										{
											float num427 = 4f;
											float num428 = 0.1f;
											int num429 = 1;
											if (this.position.X + (float)(this.width / 2) < Main.player[this.target].position.X + (float)Main.player[this.target].width)
											{
												num429 = -1;
											}
											Vector2 vector42 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
											float num430 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) + (float)(num429 * 180) - vector42.X;
											float num431 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector42.Y;
											float num432 = (float)Math.Sqrt((double)(num430 * num430 + num431 * num431));
											if (Main.expertMode)
											{
												if (num432 > 300f)
												{
													num427 += 0.5f;
												}
												if (num432 > 400f)
												{
													num427 += 0.5f;
												}
												if (num432 > 500f)
												{
													num427 += 0.55f;
												}
												if (num432 > 600f)
												{
													num427 += 0.55f;
												}
												if (num432 > 700f)
												{
													num427 += 0.6f;
												}
												if (num432 > 800f)
												{
													num427 += 0.6f;
												}
											}
											num432 = num427 / num432;
											num430 *= num432;
											num431 *= num432;
											if (this.velocity.X < num430)
											{
												this.velocity.X = this.velocity.X + num428;
												if (this.velocity.X < 0f && num430 > 0f)
												{
													this.velocity.X = this.velocity.X + num428;
												}
											}
											else if (this.velocity.X > num430)
											{
												this.velocity.X = this.velocity.X - num428;
												if (this.velocity.X > 0f && num430 < 0f)
												{
													this.velocity.X = this.velocity.X - num428;
												}
											}
											if (this.velocity.Y < num431)
											{
												this.velocity.Y = this.velocity.Y + num428;
												if (this.velocity.Y < 0f && num431 > 0f)
												{
													this.velocity.Y = this.velocity.Y + num428;
												}
											}
											else if (this.velocity.Y > num431)
											{
												this.velocity.Y = this.velocity.Y - num428;
												if (this.velocity.Y > 0f && num431 < 0f)
												{
													this.velocity.Y = this.velocity.Y - num428;
												}
											}
											this.ai[2] += 1f;
											if (this.ai[2] >= 400f)
											{
												this.ai[1] = 1f;
												this.ai[2] = 0f;
												this.ai[3] = 0f;
												this.target = 255;
												this.netUpdate = true;
											}
											if (Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
											{
												this.localAI[2] += 1f;
												if (this.localAI[2] > 22f)
												{
													this.localAI[2] = 0f;
													Main.PlaySound(SoundID.Item34, this.position);
												}
												if (Main.netMode != 1)
												{
													this.localAI[1] += 1f;
													if ((double)this.life < (double)this.lifeMax * 0.75)
													{
														this.localAI[1] += 1f;
													}
													if ((double)this.life < (double)this.lifeMax * 0.5)
													{
														this.localAI[1] += 1f;
													}
													if ((double)this.life < (double)this.lifeMax * 0.25)
													{
														this.localAI[1] += 1f;
													}
													if ((double)this.life < (double)this.lifeMax * 0.1)
													{
														this.localAI[1] += 2f;
													}
													if (this.localAI[1] > 8f)
													{
														this.localAI[1] = 0f;
														float num433 = 6f;
														int num434 = 30;
														if (Main.expertMode)
														{
															num434 = 27;
														}
														int num435 = 101;
														vector42 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
														num430 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector42.X;
														num431 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector42.Y;
														num432 = (float)Math.Sqrt((double)(num430 * num430 + num431 * num431));
														num432 = num433 / num432;
														num430 *= num432;
														num431 *= num432;
														num431 += (float)Main.rand.Next(-40, 41) * 0.01f;
														num430 += (float)Main.rand.Next(-40, 41) * 0.01f;
														num431 += this.velocity.Y * 0.5f;
														num430 += this.velocity.X * 0.5f;
														vector42.X -= num430 * 1f;
														vector42.Y -= num431 * 1f;
														Projectile.NewProjectile(vector42.X, vector42.Y, num430, num431, num435, num434, 0f, Main.myPlayer, 0f, 0f);
														return;
													}
												}
											}
										}
										else
										{
											if (this.ai[1] == 1f)
											{
												Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
												this.rotation = num408;
												float num436 = 14f;
												if (Main.expertMode)
												{
													num436 += 2.5f;
												}
												Vector2 vector43 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
												float num437 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector43.X;
												float num438 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector43.Y;
												float num439 = (float)Math.Sqrt((double)(num437 * num437 + num438 * num438));
												num439 = num436 / num439;
												this.velocity.X = num437 * num439;
												this.velocity.Y = num438 * num439;
												this.ai[1] = 2f;
												return;
											}
											if (this.ai[1] == 2f)
											{
												this.ai[2] += 1f;
												if (Main.expertMode)
												{
													this.ai[2] += 0.5f;
												}
												if (this.ai[2] >= 50f)
												{
													this.velocity.X = this.velocity.X * 0.93f;
													this.velocity.Y = this.velocity.Y * 0.93f;
													if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1)
													{
														this.velocity.X = 0f;
													}
													if ((double)this.velocity.Y > -0.1 && (double)this.velocity.Y < 0.1)
													{
														this.velocity.Y = 0f;
													}
												}
												else
												{
													this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) - 1.57f;
												}
												if (this.ai[2] >= 80f)
												{
													this.ai[3] += 1f;
													this.ai[2] = 0f;
													this.target = 255;
													this.rotation = num408;
													if (this.ai[3] >= 6f)
													{
														this.ai[1] = 0f;
														this.ai[3] = 0f;
														return;
													}
													this.ai[1] = 1f;
													return;
												}
											}
										}
									}
								}
								else if (this.aiStyle == 32)
								{
									this.damage = this.defDamage;
									this.defense = this.defDefense;
									if (this.ai[0] == 0f && Main.netMode != 1)
									{
										this.TargetClosest(true);
										this.ai[0] = 1f;
										int num440 = NPC.NewNPC((int)(this.position.X + (float)(this.width / 2)), (int)this.position.Y + this.height / 2, 128, this.whoAmI, 0f, 0f, 0f, 0f, 255);
										Main.npc[num440].ai[0] = -1f;
										Main.npc[num440].ai[1] = (float)this.whoAmI;
										Main.npc[num440].target = this.target;
										Main.npc[num440].netUpdate = true;
										num440 = NPC.NewNPC((int)(this.position.X + (float)(this.width / 2)), (int)this.position.Y + this.height / 2, 129, this.whoAmI, 0f, 0f, 0f, 0f, 255);
										Main.npc[num440].ai[0] = 1f;
										Main.npc[num440].ai[1] = (float)this.whoAmI;
										Main.npc[num440].target = this.target;
										Main.npc[num440].netUpdate = true;
										num440 = NPC.NewNPC((int)(this.position.X + (float)(this.width / 2)), (int)this.position.Y + this.height / 2, 130, this.whoAmI, 0f, 0f, 0f, 0f, 255);
										Main.npc[num440].ai[0] = -1f;
										Main.npc[num440].ai[1] = (float)this.whoAmI;
										Main.npc[num440].target = this.target;
										Main.npc[num440].ai[3] = 150f;
										Main.npc[num440].netUpdate = true;
										num440 = NPC.NewNPC((int)(this.position.X + (float)(this.width / 2)), (int)this.position.Y + this.height / 2, 131, this.whoAmI, 0f, 0f, 0f, 0f, 255);
										Main.npc[num440].ai[0] = 1f;
										Main.npc[num440].ai[1] = (float)this.whoAmI;
										Main.npc[num440].target = this.target;
										Main.npc[num440].netUpdate = true;
										Main.npc[num440].ai[3] = 150f;
									}
									if (Main.player[this.target].dead || Math.Abs(this.position.X - Main.player[this.target].position.X) > 6000f || Math.Abs(this.position.Y - Main.player[this.target].position.Y) > 6000f)
									{
										this.TargetClosest(true);
										if (Main.player[this.target].dead || Math.Abs(this.position.X - Main.player[this.target].position.X) > 6000f || Math.Abs(this.position.Y - Main.player[this.target].position.Y) > 6000f)
										{
											this.ai[1] = 3f;
										}
									}
									if (Main.dayTime && this.ai[1] != 3f && this.ai[1] != 2f)
									{
										this.ai[1] = 2f;
										Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
									}
									if (this.ai[1] == 0f)
									{
										this.ai[2] += 1f;
										if (this.ai[2] >= 600f)
										{
											this.ai[2] = 0f;
											this.ai[1] = 1f;
											this.TargetClosest(true);
											this.netUpdate = true;
										}
										this.rotation = this.velocity.X / 15f;
										if (this.position.Y > Main.player[this.target].position.Y - 200f)
										{
											if (this.velocity.Y > 0f)
											{
												this.velocity.Y = this.velocity.Y * 0.98f;
											}
											this.velocity.Y = this.velocity.Y - 0.1f;
											if (this.velocity.Y > 2f)
											{
												this.velocity.Y = 2f;
											}
										}
										else if (this.position.Y < Main.player[this.target].position.Y - 500f)
										{
											if (this.velocity.Y < 0f)
											{
												this.velocity.Y = this.velocity.Y * 0.98f;
											}
											this.velocity.Y = this.velocity.Y + 0.1f;
											if (this.velocity.Y < -2f)
											{
												this.velocity.Y = -2f;
											}
										}
										if (this.position.X + (float)(this.width / 2) > Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) + 100f)
										{
											if (this.velocity.X > 0f)
											{
												this.velocity.X = this.velocity.X * 0.98f;
											}
											this.velocity.X = this.velocity.X - 0.1f;
											if (this.velocity.X > 8f)
											{
												this.velocity.X = 8f;
											}
										}
										if (this.position.X + (float)(this.width / 2) < Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - 100f)
										{
											if (this.velocity.X < 0f)
											{
												this.velocity.X = this.velocity.X * 0.98f;
											}
											this.velocity.X = this.velocity.X + 0.1f;
											if (this.velocity.X < -8f)
											{
												this.velocity.X = -8f;
												return;
											}
										}
									}
									else
									{
										if (this.ai[1] == 1f)
										{
											this.defense *= 2;
											this.damage *= 2;
											this.ai[2] += 1f;
											if (this.ai[2] == 2f)
											{
												Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
											}
											if (this.ai[2] >= 400f)
											{
												this.ai[2] = 0f;
												this.ai[1] = 0f;
											}
											this.rotation += (float)this.direction * 0.3f;
											Vector2 vector44 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
											float num441 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector44.X;
											float num442 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector44.Y;
											float num443 = (float)Math.Sqrt((double)(num441 * num441 + num442 * num442));
											num443 = 2f / num443;
											this.velocity.X = num441 * num443;
											this.velocity.Y = num442 * num443;
											return;
										}
										if (this.ai[1] == 2f)
										{
											this.damage = 1000;
											this.defense = 9999;
											this.rotation += (float)this.direction * 0.3f;
											Vector2 vector45 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
											float num444 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector45.X;
											float num445 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector45.Y;
											float num446 = (float)Math.Sqrt((double)(num444 * num444 + num445 * num445));
											float num447 = 10f;
											num447 += num446 / 100f;
											if (num447 < 8f)
											{
												num447 = 8f;
											}
											if (num447 > 32f)
											{
												num447 = 32f;
											}
											num446 = num447 / num446;
											this.velocity.X = num444 * num446;
											this.velocity.Y = num445 * num446;
											return;
										}
										if (this.ai[1] == 3f)
										{
											this.velocity.Y = this.velocity.Y + 0.1f;
											if (this.velocity.Y < 0f)
											{
												this.velocity.Y = this.velocity.Y * 0.95f;
											}
											this.velocity.X = this.velocity.X * 0.95f;
											if (this.timeLeft > 500)
											{
												this.timeLeft = 500;
												return;
											}
										}
									}
								}
								else if (this.aiStyle == 33)
								{
									Vector2 vector46 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
									float num448 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector46.X;
									float num449 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector46.Y;
									float num450 = (float)Math.Sqrt((double)(num448 * num448 + num449 * num449));
									if (this.ai[2] != 99f)
									{
										if (num450 > 800f)
										{
											this.ai[2] = 99f;
										}
									}
									else if (num450 < 400f)
									{
										this.ai[2] = 0f;
									}
									this.spriteDirection = -(int)this.ai[0];
									if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 32)
									{
										this.ai[2] += 10f;
										if (this.ai[2] > 50f || Main.netMode != 2)
										{
											this.life = -1;
											this.HitEffect(0, 10.0);
											this.active = false;
										}
									}
									if (this.ai[2] == 99f)
									{
										if (this.position.Y > Main.npc[(int)this.ai[1]].position.Y)
										{
											if (this.velocity.Y > 0f)
											{
												this.velocity.Y = this.velocity.Y * 0.96f;
											}
											this.velocity.Y = this.velocity.Y - 0.1f;
											if (this.velocity.Y > 8f)
											{
												this.velocity.Y = 8f;
											}
										}
										else if (this.position.Y < Main.npc[(int)this.ai[1]].position.Y)
										{
											if (this.velocity.Y < 0f)
											{
												this.velocity.Y = this.velocity.Y * 0.96f;
											}
											this.velocity.Y = this.velocity.Y + 0.1f;
											if (this.velocity.Y < -8f)
											{
												this.velocity.Y = -8f;
											}
										}
										if (this.position.X + (float)(this.width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
										{
											if (this.velocity.X > 0f)
											{
												this.velocity.X = this.velocity.X * 0.96f;
											}
											this.velocity.X = this.velocity.X - 0.5f;
											if (this.velocity.X > 12f)
											{
												this.velocity.X = 12f;
											}
										}
										if (this.position.X + (float)(this.width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
										{
											if (this.velocity.X < 0f)
											{
												this.velocity.X = this.velocity.X * 0.96f;
											}
											this.velocity.X = this.velocity.X + 0.5f;
											if (this.velocity.X < -12f)
											{
												this.velocity.X = -12f;
												return;
											}
										}
									}
									else
									{
										if (this.ai[2] == 0f || this.ai[2] == 3f)
										{
											if (Main.npc[(int)this.ai[1]].ai[1] == 3f && this.timeLeft > 10)
											{
												this.timeLeft = 10;
											}
											if (Main.npc[(int)this.ai[1]].ai[1] != 0f)
											{
												this.TargetClosest(true);
												if (Main.player[this.target].dead)
												{
													this.velocity.Y = this.velocity.Y + 0.1f;
													if (this.velocity.Y > 16f)
													{
														this.velocity.Y = 16f;
													}
												}
												else
												{
													Vector2 vector47 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
													float num451 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector47.X;
													float num452 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector47.Y;
													float num453 = (float)Math.Sqrt((double)(num451 * num451 + num452 * num452));
													num453 = 7f / num453;
													num451 *= num453;
													num452 *= num453;
													this.rotation = (float)Math.Atan2((double)num452, (double)num451) - 1.57f;
													if (this.velocity.X > num451)
													{
														if (this.velocity.X > 0f)
														{
															this.velocity.X = this.velocity.X * 0.97f;
														}
														this.velocity.X = this.velocity.X - 0.05f;
													}
													if (this.velocity.X < num451)
													{
														if (this.velocity.X < 0f)
														{
															this.velocity.X = this.velocity.X * 0.97f;
														}
														this.velocity.X = this.velocity.X + 0.05f;
													}
													if (this.velocity.Y > num452)
													{
														if (this.velocity.Y > 0f)
														{
															this.velocity.Y = this.velocity.Y * 0.97f;
														}
														this.velocity.Y = this.velocity.Y - 0.05f;
													}
													if (this.velocity.Y < num452)
													{
														if (this.velocity.Y < 0f)
														{
															this.velocity.Y = this.velocity.Y * 0.97f;
														}
														this.velocity.Y = this.velocity.Y + 0.05f;
													}
												}
												this.ai[3] += 1f;
												if (this.ai[3] >= 600f)
												{
													this.ai[2] = 0f;
													this.ai[3] = 0f;
													this.netUpdate = true;
												}
											}
											else
											{
												this.ai[3] += 1f;
												if (this.ai[3] >= 300f)
												{
													this.ai[2] += 1f;
													this.ai[3] = 0f;
													this.netUpdate = true;
												}
												if (this.position.Y > Main.npc[(int)this.ai[1]].position.Y + 320f)
												{
													if (this.velocity.Y > 0f)
													{
														this.velocity.Y = this.velocity.Y * 0.96f;
													}
													this.velocity.Y = this.velocity.Y - 0.04f;
													if (this.velocity.Y > 3f)
													{
														this.velocity.Y = 3f;
													}
												}
												else if (this.position.Y < Main.npc[(int)this.ai[1]].position.Y + 260f)
												{
													if (this.velocity.Y < 0f)
													{
														this.velocity.Y = this.velocity.Y * 0.96f;
													}
													this.velocity.Y = this.velocity.Y + 0.04f;
													if (this.velocity.Y < -3f)
													{
														this.velocity.Y = -3f;
													}
												}
												if (this.position.X + (float)(this.width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
												{
													if (this.velocity.X > 0f)
													{
														this.velocity.X = this.velocity.X * 0.96f;
													}
													this.velocity.X = this.velocity.X - 0.3f;
													if (this.velocity.X > 12f)
													{
														this.velocity.X = 12f;
													}
												}
												if (this.position.X + (float)(this.width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 250f)
												{
													if (this.velocity.X < 0f)
													{
														this.velocity.X = this.velocity.X * 0.96f;
													}
													this.velocity.X = this.velocity.X + 0.3f;
													if (this.velocity.X < -12f)
													{
														this.velocity.X = -12f;
													}
												}
											}
											Vector2 vector48 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
											float num454 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector48.X;
											float num455 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector48.Y;
											Math.Sqrt((double)(num454 * num454 + num455 * num455));
											this.rotation = (float)Math.Atan2((double)num455, (double)num454) + 1.57f;
											return;
										}
										if (this.ai[2] == 1f)
										{
											Vector2 vector49 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
											float num456 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector49.X;
											float num457 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector49.Y;
											float num458 = (float)Math.Sqrt((double)(num456 * num456 + num457 * num457));
											this.rotation = (float)Math.Atan2((double)num457, (double)num456) + 1.57f;
											this.velocity.X = this.velocity.X * 0.95f;
											this.velocity.Y = this.velocity.Y - 0.1f;
											if (this.velocity.Y < -8f)
											{
												this.velocity.Y = -8f;
											}
											if (this.position.Y < Main.npc[(int)this.ai[1]].position.Y - 200f)
											{
												this.TargetClosest(true);
												this.ai[2] = 2f;
												vector49 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
												num456 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector49.X;
												num457 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector49.Y;
												num458 = (float)Math.Sqrt((double)(num456 * num456 + num457 * num457));
												num458 = 22f / num458;
												this.velocity.X = num456 * num458;
												this.velocity.Y = num457 * num458;
												this.netUpdate = true;
												return;
											}
										}
										else if (this.ai[2] == 2f)
										{
											if (this.position.Y > Main.player[this.target].position.Y || this.velocity.Y < 0f)
											{
												this.ai[2] = 3f;
												return;
											}
										}
										else
										{
											if (this.ai[2] == 4f)
											{
												this.TargetClosest(true);
												Vector2 vector50 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
												float num459 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector50.X;
												float num460 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector50.Y;
												float num461 = (float)Math.Sqrt((double)(num459 * num459 + num460 * num460));
												num461 = 7f / num461;
												num459 *= num461;
												num460 *= num461;
												if (this.velocity.X > num459)
												{
													if (this.velocity.X > 0f)
													{
														this.velocity.X = this.velocity.X * 0.97f;
													}
													this.velocity.X = this.velocity.X - 0.05f;
												}
												if (this.velocity.X < num459)
												{
													if (this.velocity.X < 0f)
													{
														this.velocity.X = this.velocity.X * 0.97f;
													}
													this.velocity.X = this.velocity.X + 0.05f;
												}
												if (this.velocity.Y > num460)
												{
													if (this.velocity.Y > 0f)
													{
														this.velocity.Y = this.velocity.Y * 0.97f;
													}
													this.velocity.Y = this.velocity.Y - 0.05f;
												}
												if (this.velocity.Y < num460)
												{
													if (this.velocity.Y < 0f)
													{
														this.velocity.Y = this.velocity.Y * 0.97f;
													}
													this.velocity.Y = this.velocity.Y + 0.05f;
												}
												this.ai[3] += 1f;
												if (this.ai[3] >= 600f)
												{
													this.ai[2] = 0f;
													this.ai[3] = 0f;
													this.netUpdate = true;
												}
												vector50 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
												num459 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector50.X;
												num460 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector50.Y;
												num461 = (float)Math.Sqrt((double)(num459 * num459 + num460 * num460));
												this.rotation = (float)Math.Atan2((double)num460, (double)num459) + 1.57f;
												return;
											}
											if (this.ai[2] == 5f && ((this.velocity.X > 0f && this.position.X + (float)(this.width / 2) > Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2)) || (this.velocity.X < 0f && this.position.X + (float)(this.width / 2) < Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2))))
											{
												this.ai[2] = 0f;
												return;
											}
										}
									}
								}
								else if (this.aiStyle == 34)
								{
									this.spriteDirection = -(int)this.ai[0];
									Vector2 vector51 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
									float num462 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector51.X;
									float num463 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector51.Y;
									float num464 = (float)Math.Sqrt((double)(num462 * num462 + num463 * num463));
									if (this.ai[2] != 99f)
									{
										if (num464 > 800f)
										{
											this.ai[2] = 99f;
										}
									}
									else if (num464 < 400f)
									{
										this.ai[2] = 0f;
									}
									if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 32)
									{
										this.ai[2] += 10f;
										if (this.ai[2] > 50f || Main.netMode != 2)
										{
											this.life = -1;
											this.HitEffect(0, 10.0);
											this.active = false;
										}
									}
									if (this.ai[2] == 99f)
									{
										if (this.position.Y > Main.npc[(int)this.ai[1]].position.Y)
										{
											if (this.velocity.Y > 0f)
											{
												this.velocity.Y = this.velocity.Y * 0.96f;
											}
											this.velocity.Y = this.velocity.Y - 0.1f;
											if (this.velocity.Y > 8f)
											{
												this.velocity.Y = 8f;
											}
										}
										else if (this.position.Y < Main.npc[(int)this.ai[1]].position.Y)
										{
											if (this.velocity.Y < 0f)
											{
												this.velocity.Y = this.velocity.Y * 0.96f;
											}
											this.velocity.Y = this.velocity.Y + 0.1f;
											if (this.velocity.Y < -8f)
											{
												this.velocity.Y = -8f;
											}
										}
										if (this.position.X + (float)(this.width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
										{
											if (this.velocity.X > 0f)
											{
												this.velocity.X = this.velocity.X * 0.96f;
											}
											this.velocity.X = this.velocity.X - 0.5f;
											if (this.velocity.X > 12f)
											{
												this.velocity.X = 12f;
											}
										}
										if (this.position.X + (float)(this.width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
										{
											if (this.velocity.X < 0f)
											{
												this.velocity.X = this.velocity.X * 0.96f;
											}
											this.velocity.X = this.velocity.X + 0.5f;
											if (this.velocity.X < -12f)
											{
												this.velocity.X = -12f;
												return;
											}
										}
									}
									else
									{
										if (this.ai[2] == 0f || this.ai[2] == 3f)
										{
											if (Main.npc[(int)this.ai[1]].ai[1] == 3f && this.timeLeft > 10)
											{
												this.timeLeft = 10;
											}
											if (Main.npc[(int)this.ai[1]].ai[1] != 0f)
											{
												this.TargetClosest(true);
												this.TargetClosest(true);
												if (Main.player[this.target].dead)
												{
													this.velocity.Y = this.velocity.Y + 0.1f;
													if (this.velocity.Y > 16f)
													{
														this.velocity.Y = 16f;
													}
												}
												else
												{
													Vector2 vector52 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
													float num465 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector52.X;
													float num466 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector52.Y;
													float num467 = (float)Math.Sqrt((double)(num465 * num465 + num466 * num466));
													num467 = 12f / num467;
													num465 *= num467;
													num466 *= num467;
													this.rotation = (float)Math.Atan2((double)num466, (double)num465) - 1.57f;
													if (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) < 2f)
													{
														this.rotation = (float)Math.Atan2((double)num466, (double)num465) - 1.57f;
														this.velocity.X = num465;
														this.velocity.Y = num466;
														this.netUpdate = true;
													}
													else
													{
														this.velocity *= 0.97f;
													}
													this.ai[3] += 1f;
													if (this.ai[3] >= 600f)
													{
														this.ai[2] = 0f;
														this.ai[3] = 0f;
														this.netUpdate = true;
													}
												}
											}
											else
											{
												this.ai[3] += 1f;
												if (this.ai[3] >= 600f)
												{
													this.ai[2] += 1f;
													this.ai[3] = 0f;
													this.netUpdate = true;
												}
												if (this.position.Y > Main.npc[(int)this.ai[1]].position.Y + 300f)
												{
													if (this.velocity.Y > 0f)
													{
														this.velocity.Y = this.velocity.Y * 0.96f;
													}
													this.velocity.Y = this.velocity.Y - 0.1f;
													if (this.velocity.Y > 3f)
													{
														this.velocity.Y = 3f;
													}
												}
												else if (this.position.Y < Main.npc[(int)this.ai[1]].position.Y + 230f)
												{
													if (this.velocity.Y < 0f)
													{
														this.velocity.Y = this.velocity.Y * 0.96f;
													}
													this.velocity.Y = this.velocity.Y + 0.1f;
													if (this.velocity.Y < -3f)
													{
														this.velocity.Y = -3f;
													}
												}
												if (this.position.X + (float)(this.width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 250f)
												{
													if (this.velocity.X > 0f)
													{
														this.velocity.X = this.velocity.X * 0.94f;
													}
													this.velocity.X = this.velocity.X - 0.3f;
													if (this.velocity.X > 9f)
													{
														this.velocity.X = 9f;
													}
												}
												if (this.position.X + (float)(this.width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
												{
													if (this.velocity.X < 0f)
													{
														this.velocity.X = this.velocity.X * 0.94f;
													}
													this.velocity.X = this.velocity.X + 0.2f;
													if (this.velocity.X < -8f)
													{
														this.velocity.X = -8f;
													}
												}
											}
											Vector2 vector53 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
											float num468 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector53.X;
											float num469 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector53.Y;
											Math.Sqrt((double)(num468 * num468 + num469 * num469));
											this.rotation = (float)Math.Atan2((double)num469, (double)num468) + 1.57f;
											return;
										}
										if (this.ai[2] == 1f)
										{
											if (this.velocity.Y > 0f)
											{
												this.velocity.Y = this.velocity.Y * 0.9f;
											}
											Vector2 vector54 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
											float num470 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 280f * this.ai[0] - vector54.X;
											float num471 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector54.Y;
											float num472 = (float)Math.Sqrt((double)(num470 * num470 + num471 * num471));
											this.rotation = (float)Math.Atan2((double)num471, (double)num470) + 1.57f;
											this.velocity.X = (this.velocity.X * 5f + Main.npc[(int)this.ai[1]].velocity.X) / 6f;
											this.velocity.X = this.velocity.X + 0.5f;
											this.velocity.Y = this.velocity.Y - 0.5f;
											if (this.velocity.Y < -9f)
											{
												this.velocity.Y = -9f;
											}
											if (this.position.Y < Main.npc[(int)this.ai[1]].position.Y - 280f)
											{
												this.TargetClosest(true);
												this.ai[2] = 2f;
												vector54 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
												num470 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector54.X;
												num471 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector54.Y;
												num472 = (float)Math.Sqrt((double)(num470 * num470 + num471 * num471));
												num472 = 20f / num472;
												this.velocity.X = num470 * num472;
												this.velocity.Y = num471 * num472;
												this.netUpdate = true;
												return;
											}
										}
										else if (this.ai[2] == 2f)
										{
											if (this.position.Y > Main.player[this.target].position.Y || this.velocity.Y < 0f)
											{
												if (this.ai[3] >= 4f)
												{
													this.ai[2] = 3f;
													this.ai[3] = 0f;
													return;
												}
												this.ai[2] = 1f;
												this.ai[3] += 1f;
												return;
											}
										}
										else if (this.ai[2] == 4f)
										{
											Vector2 vector55 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
											float num473 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector55.X;
											float num474 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector55.Y;
											float num475 = (float)Math.Sqrt((double)(num473 * num473 + num474 * num474));
											this.rotation = (float)Math.Atan2((double)num474, (double)num473) + 1.57f;
											this.velocity.Y = (this.velocity.Y * 5f + Main.npc[(int)this.ai[1]].velocity.Y) / 6f;
											this.velocity.X = this.velocity.X + 0.5f;
											if (this.velocity.X > 12f)
											{
												this.velocity.X = 12f;
											}
											if (this.position.X + (float)(this.width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 500f || this.position.X + (float)(this.width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 500f)
											{
												this.TargetClosest(true);
												this.ai[2] = 5f;
												vector55 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
												num473 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector55.X;
												num474 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector55.Y;
												num475 = (float)Math.Sqrt((double)(num473 * num473 + num474 * num474));
												num475 = 17f / num475;
												this.velocity.X = num473 * num475;
												this.velocity.Y = num474 * num475;
												this.netUpdate = true;
												return;
											}
										}
										else if (this.ai[2] == 5f && this.position.X + (float)(this.width / 2) < Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - 100f)
										{
											if (this.ai[3] >= 4f)
											{
												this.ai[2] = 0f;
												this.ai[3] = 0f;
												return;
											}
											this.ai[2] = 4f;
											this.ai[3] += 1f;
											return;
										}
									}
								}
								else if (this.aiStyle == 35)
								{
									this.spriteDirection = -(int)this.ai[0];
									if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 32)
									{
										this.ai[2] += 10f;
										if (this.ai[2] > 50f || Main.netMode != 2)
										{
											this.life = -1;
											this.HitEffect(0, 10.0);
											this.active = false;
										}
									}
									if (this.ai[2] == 0f)
									{
										if (Main.npc[(int)this.ai[1]].ai[1] == 3f && this.timeLeft > 10)
										{
											this.timeLeft = 10;
										}
										if (Main.npc[(int)this.ai[1]].ai[1] != 0f)
										{
											this.localAI[0] += 2f;
											if (this.position.Y > Main.npc[(int)this.ai[1]].position.Y - 100f)
											{
												if (this.velocity.Y > 0f)
												{
													this.velocity.Y = this.velocity.Y * 0.96f;
												}
												this.velocity.Y = this.velocity.Y - 0.07f;
												if (this.velocity.Y > 6f)
												{
													this.velocity.Y = 6f;
												}
											}
											else if (this.position.Y < Main.npc[(int)this.ai[1]].position.Y - 100f)
											{
												if (this.velocity.Y < 0f)
												{
													this.velocity.Y = this.velocity.Y * 0.96f;
												}
												this.velocity.Y = this.velocity.Y + 0.07f;
												if (this.velocity.Y < -6f)
												{
													this.velocity.Y = -6f;
												}
											}
											if (this.position.X + (float)(this.width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
											{
												if (this.velocity.X > 0f)
												{
													this.velocity.X = this.velocity.X * 0.96f;
												}
												this.velocity.X = this.velocity.X - 0.1f;
												if (this.velocity.X > 8f)
												{
													this.velocity.X = 8f;
												}
											}
											if (this.position.X + (float)(this.width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
											{
												if (this.velocity.X < 0f)
												{
													this.velocity.X = this.velocity.X * 0.96f;
												}
												this.velocity.X = this.velocity.X + 0.1f;
												if (this.velocity.X < -8f)
												{
													this.velocity.X = -8f;
												}
											}
										}
										else
										{
											this.ai[3] += 1f;
											if (this.ai[3] >= 1100f)
											{
												this.localAI[0] = 0f;
												this.ai[2] = 1f;
												this.ai[3] = 0f;
												this.netUpdate = true;
											}
											if (this.position.Y > Main.npc[(int)this.ai[1]].position.Y - 150f)
											{
												if (this.velocity.Y > 0f)
												{
													this.velocity.Y = this.velocity.Y * 0.96f;
												}
												this.velocity.Y = this.velocity.Y - 0.04f;
												if (this.velocity.Y > 3f)
												{
													this.velocity.Y = 3f;
												}
											}
											else if (this.position.Y < Main.npc[(int)this.ai[1]].position.Y - 150f)
											{
												if (this.velocity.Y < 0f)
												{
													this.velocity.Y = this.velocity.Y * 0.96f;
												}
												this.velocity.Y = this.velocity.Y + 0.04f;
												if (this.velocity.Y < -3f)
												{
													this.velocity.Y = -3f;
												}
											}
											if (this.position.X + (float)(this.width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 200f)
											{
												if (this.velocity.X > 0f)
												{
													this.velocity.X = this.velocity.X * 0.96f;
												}
												this.velocity.X = this.velocity.X - 0.2f;
												if (this.velocity.X > 8f)
												{
													this.velocity.X = 8f;
												}
											}
											if (this.position.X + (float)(this.width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 160f)
											{
												if (this.velocity.X < 0f)
												{
													this.velocity.X = this.velocity.X * 0.96f;
												}
												this.velocity.X = this.velocity.X + 0.2f;
												if (this.velocity.X < -8f)
												{
													this.velocity.X = -8f;
												}
											}
										}
										Vector2 vector56 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
										float num476 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector56.X;
										float num477 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector56.Y;
										float num478 = (float)Math.Sqrt((double)(num476 * num476 + num477 * num477));
										this.rotation = (float)Math.Atan2((double)num477, (double)num476) + 1.57f;
										if (Main.netMode != 1)
										{
											this.localAI[0] += 1f;
											if (this.localAI[0] > 140f)
											{
												this.localAI[0] = 0f;
												float num479 = 12f;
												int num480 = 0;
												int num481 = 102;
												num478 = num479 / num478;
												num476 = -num476 * num478;
												num477 = -num477 * num478;
												num476 += (float)Main.rand.Next(-40, 41) * 0.01f;
												num477 += (float)Main.rand.Next(-40, 41) * 0.01f;
												vector56.X += num476 * 4f;
												vector56.Y += num477 * 4f;
												Projectile.NewProjectile(vector56.X, vector56.Y, num476, num477, num481, num480, 0f, Main.myPlayer, 0f, 0f);
												return;
											}
										}
									}
									else if (this.ai[2] == 1f)
									{
										this.ai[3] += 1f;
										if (this.ai[3] >= 300f)
										{
											this.localAI[0] = 0f;
											this.ai[2] = 0f;
											this.ai[3] = 0f;
											this.netUpdate = true;
										}
										Vector2 vector57 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
										float num482 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - vector57.X;
										float num483 = Main.npc[(int)this.ai[1]].position.Y - vector57.Y;
										num483 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - 80f - vector57.Y;
										float num484 = (float)Math.Sqrt((double)(num482 * num482 + num483 * num483));
										num484 = 6f / num484;
										num482 *= num484;
										num483 *= num484;
										if (this.velocity.X > num482)
										{
											if (this.velocity.X > 0f)
											{
												this.velocity.X = this.velocity.X * 0.9f;
											}
											this.velocity.X = this.velocity.X - 0.04f;
										}
										if (this.velocity.X < num482)
										{
											if (this.velocity.X < 0f)
											{
												this.velocity.X = this.velocity.X * 0.9f;
											}
											this.velocity.X = this.velocity.X + 0.04f;
										}
										if (this.velocity.Y > num483)
										{
											if (this.velocity.Y > 0f)
											{
												this.velocity.Y = this.velocity.Y * 0.9f;
											}
											this.velocity.Y = this.velocity.Y - 0.08f;
										}
										if (this.velocity.Y < num483)
										{
											if (this.velocity.Y < 0f)
											{
												this.velocity.Y = this.velocity.Y * 0.9f;
											}
											this.velocity.Y = this.velocity.Y + 0.08f;
										}
										this.TargetClosest(true);
										vector57 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
										num482 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector57.X;
										num483 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector57.Y;
										num484 = (float)Math.Sqrt((double)(num482 * num482 + num483 * num483));
										this.rotation = (float)Math.Atan2((double)num483, (double)num482) - 1.57f;
										if (Main.netMode != 1)
										{
											this.localAI[0] += 1f;
											if (this.localAI[0] > 40f)
											{
												this.localAI[0] = 0f;
												float num485 = 10f;
												int num486 = 0;
												int num487 = 102;
												num484 = num485 / num484;
												num482 *= num484;
												num483 *= num484;
												num482 += (float)Main.rand.Next(-40, 41) * 0.01f;
												num483 += (float)Main.rand.Next(-40, 41) * 0.01f;
												vector57.X += num482 * 4f;
												vector57.Y += num483 * 4f;
												Projectile.NewProjectile(vector57.X, vector57.Y, num482, num483, num487, num486, 0f, Main.myPlayer, 0f, 0f);
												return;
											}
										}
									}
								}
								else if (this.aiStyle == 36)
								{
									this.spriteDirection = -(int)this.ai[0];
									if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 32)
									{
										this.ai[2] += 10f;
										if (this.ai[2] > 50f || Main.netMode != 2)
										{
											this.life = -1;
											this.HitEffect(0, 10.0);
											this.active = false;
										}
									}
									if (this.ai[2] == 0f || this.ai[2] == 3f)
									{
										if (Main.npc[(int)this.ai[1]].ai[1] == 3f && this.timeLeft > 10)
										{
											this.timeLeft = 10;
										}
										if (Main.npc[(int)this.ai[1]].ai[1] != 0f)
										{
											this.localAI[0] += 3f;
											if (this.position.Y > Main.npc[(int)this.ai[1]].position.Y - 100f)
											{
												if (this.velocity.Y > 0f)
												{
													this.velocity.Y = this.velocity.Y * 0.96f;
												}
												this.velocity.Y = this.velocity.Y - 0.07f;
												if (this.velocity.Y > 6f)
												{
													this.velocity.Y = 6f;
												}
											}
											else if (this.position.Y < Main.npc[(int)this.ai[1]].position.Y - 100f)
											{
												if (this.velocity.Y < 0f)
												{
													this.velocity.Y = this.velocity.Y * 0.96f;
												}
												this.velocity.Y = this.velocity.Y + 0.07f;
												if (this.velocity.Y < -6f)
												{
													this.velocity.Y = -6f;
												}
											}
											if (this.position.X + (float)(this.width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
											{
												if (this.velocity.X > 0f)
												{
													this.velocity.X = this.velocity.X * 0.96f;
												}
												this.velocity.X = this.velocity.X - 0.1f;
												if (this.velocity.X > 8f)
												{
													this.velocity.X = 8f;
												}
											}
											if (this.position.X + (float)(this.width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
											{
												if (this.velocity.X < 0f)
												{
													this.velocity.X = this.velocity.X * 0.96f;
												}
												this.velocity.X = this.velocity.X + 0.1f;
												if (this.velocity.X < -8f)
												{
													this.velocity.X = -8f;
												}
											}
										}
										else
										{
											this.ai[3] += 1f;
											if (this.ai[3] >= 800f)
											{
												this.ai[2] += 1f;
												this.ai[3] = 0f;
												this.netUpdate = true;
											}
											if (this.position.Y > Main.npc[(int)this.ai[1]].position.Y - 100f)
											{
												if (this.velocity.Y > 0f)
												{
													this.velocity.Y = this.velocity.Y * 0.96f;
												}
												this.velocity.Y = this.velocity.Y - 0.1f;
												if (this.velocity.Y > 3f)
												{
													this.velocity.Y = 3f;
												}
											}
											else if (this.position.Y < Main.npc[(int)this.ai[1]].position.Y - 100f)
											{
												if (this.velocity.Y < 0f)
												{
													this.velocity.Y = this.velocity.Y * 0.96f;
												}
												this.velocity.Y = this.velocity.Y + 0.1f;
												if (this.velocity.Y < -3f)
												{
													this.velocity.Y = -3f;
												}
											}
											if (this.position.X + (float)(this.width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 180f * this.ai[0])
											{
												if (this.velocity.X > 0f)
												{
													this.velocity.X = this.velocity.X * 0.96f;
												}
												this.velocity.X = this.velocity.X - 0.14f;
												if (this.velocity.X > 8f)
												{
													this.velocity.X = 8f;
												}
											}
											if (this.position.X + (float)(this.width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 180f * this.ai[0])
											{
												if (this.velocity.X < 0f)
												{
													this.velocity.X = this.velocity.X * 0.96f;
												}
												this.velocity.X = this.velocity.X + 0.14f;
												if (this.velocity.X < -8f)
												{
													this.velocity.X = -8f;
												}
											}
										}
										this.TargetClosest(true);
										Vector2 vector58 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
										float num488 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector58.X;
										float num489 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector58.Y;
										float num490 = (float)Math.Sqrt((double)(num488 * num488 + num489 * num489));
										this.rotation = (float)Math.Atan2((double)num489, (double)num488) - 1.57f;
										if (Main.netMode != 1)
										{
											this.localAI[0] += 1f;
											if (this.localAI[0] > 200f)
											{
												this.localAI[0] = 0f;
												float num491 = 8f;
												int num492 = 25;
												int num493 = 100;
												num490 = num491 / num490;
												num488 *= num490;
												num489 *= num490;
												num488 += (float)Main.rand.Next(-40, 41) * 0.05f;
												num489 += (float)Main.rand.Next(-40, 41) * 0.05f;
												vector58.X += num488 * 8f;
												vector58.Y += num489 * 8f;
												Projectile.NewProjectile(vector58.X, vector58.Y, num488, num489, num493, num492, 0f, Main.myPlayer, 0f, 0f);
												return;
											}
										}
									}
									else if (this.ai[2] == 1f)
									{
										this.ai[3] += 1f;
										if (this.ai[3] >= 200f)
										{
											this.localAI[0] = 0f;
											this.ai[2] = 0f;
											this.ai[3] = 0f;
											this.netUpdate = true;
										}
										Vector2 vector59 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
										float num494 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - 350f - vector59.X;
										float num495 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - 20f - vector59.Y;
										float num496 = (float)Math.Sqrt((double)(num494 * num494 + num495 * num495));
										num496 = 7f / num496;
										num494 *= num496;
										num495 *= num496;
										if (this.velocity.X > num494)
										{
											if (this.velocity.X > 0f)
											{
												this.velocity.X = this.velocity.X * 0.9f;
											}
											this.velocity.X = this.velocity.X - 0.1f;
										}
										if (this.velocity.X < num494)
										{
											if (this.velocity.X < 0f)
											{
												this.velocity.X = this.velocity.X * 0.9f;
											}
											this.velocity.X = this.velocity.X + 0.1f;
										}
										if (this.velocity.Y > num495)
										{
											if (this.velocity.Y > 0f)
											{
												this.velocity.Y = this.velocity.Y * 0.9f;
											}
											this.velocity.Y = this.velocity.Y - 0.03f;
										}
										if (this.velocity.Y < num495)
										{
											if (this.velocity.Y < 0f)
											{
												this.velocity.Y = this.velocity.Y * 0.9f;
											}
											this.velocity.Y = this.velocity.Y + 0.03f;
										}
										this.TargetClosest(true);
										vector59 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
										num494 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector59.X;
										num495 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector59.Y;
										num496 = (float)Math.Sqrt((double)(num494 * num494 + num495 * num495));
										this.rotation = (float)Math.Atan2((double)num495, (double)num494) - 1.57f;
										if (Main.netMode == 1)
										{
											this.localAI[0] += 1f;
											if (this.localAI[0] > 80f)
											{
												this.localAI[0] = 0f;
												float num497 = 10f;
												int num498 = 25;
												int num499 = 100;
												num496 = num497 / num496;
												num494 *= num496;
												num495 *= num496;
												num494 += (float)Main.rand.Next(-40, 41) * 0.05f;
												num495 += (float)Main.rand.Next(-40, 41) * 0.05f;
												vector59.X += num494 * 8f;
												vector59.Y += num495 * 8f;
												Projectile.NewProjectile(vector59.X, vector59.Y, num494, num495, num499, num498, 0f, Main.myPlayer, 0f, 0f);
												return;
											}
										}
									}
								}
								else
								{
									if (this.aiStyle == 37)
									{
										this.AI_037_Destroyer();
										return;
									}
									if (this.aiStyle == 38)
									{
										float num500 = 4f;
										float num501 = 1f;
										if (this.type == 143)
										{
											num500 = 3f;
											num501 = 0.7f;
										}
										if (this.type == 145)
										{
											num500 = 3.5f;
											num501 = 0.8f;
										}
										if (this.type == 143)
										{
											this.ai[2] += 1f;
											if (this.ai[2] >= 120f)
											{
												this.ai[2] = 0f;
												if (Main.netMode != 1)
												{
													Vector2 vector60 = new Vector2(this.position.X + (float)this.width * 0.5f - (float)(this.direction * 12), this.position.Y + (float)this.height * 0.5f);
													float speedX = (float)(12 * this.spriteDirection);
													float speedY = 0f;
													if (Main.netMode != 1)
													{
														int num502 = 25;
														int num503 = 110;
														int num504 = Projectile.NewProjectile(vector60.X, vector60.Y, speedX, speedY, num503, num502, 0f, Main.myPlayer, 0f, 0f);
														Main.projectile[num504].ai[0] = 2f;
														Main.projectile[num504].timeLeft = 300;
														Main.projectile[num504].friendly = false;
														NetMessage.SendData(27, -1, -1, "", num504, 0f, 0f, 0f, 0, 0, 0);
														this.netUpdate = true;
													}
												}
											}
										}
										if (this.type == 144 && this.ai[1] >= 3f)
										{
											this.TargetClosest(true);
											this.spriteDirection = this.direction;
											if (this.velocity.Y == 0f)
											{
												this.velocity.X = this.velocity.X * 0.9f;
												this.ai[2] += 1f;
												if ((double)this.velocity.X > -0.3 && (double)this.velocity.X < 0.3)
												{
													this.velocity.X = 0f;
												}
												if (this.ai[2] >= 200f)
												{
													this.ai[2] = 0f;
													this.ai[1] = 0f;
												}
											}
										}
										else if (this.type == 145 && this.ai[1] >= 3f)
										{
											this.TargetClosest(true);
											if (this.velocity.Y == 0f)
											{
												this.velocity.X = this.velocity.X * 0.9f;
												this.ai[2] += 1f;
												if ((double)this.velocity.X > -0.3 && (double)this.velocity.X < 0.3)
												{
													this.velocity.X = 0f;
												}
												if (this.ai[2] >= 16f)
												{
													this.ai[2] = 0f;
													this.ai[1] = 0f;
												}
											}
											if (this.velocity.X == 0f && this.velocity.Y == 0f && this.ai[2] == 8f)
											{
												float num505 = 10f;
												Vector2 vector61 = new Vector2(this.position.X + (float)this.width * 0.5f - (float)(this.direction * 12), this.position.Y + (float)this.height * 0.25f);
												float num506 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector61.X;
												float num507 = Main.player[this.target].position.Y - vector61.Y;
												float num508 = (float)Math.Sqrt((double)(num506 * num506 + num507 * num507));
												num508 = num505 / num508;
												num506 *= num508;
												num507 *= num508;
												if (Main.netMode != 1)
												{
													int num509 = 35;
													int num510 = 109;
													int num511 = Projectile.NewProjectile(vector61.X, vector61.Y, num506, num507, num510, num509, 0f, Main.myPlayer, 0f, 0f);
													Main.projectile[num511].ai[0] = 2f;
													Main.projectile[num511].timeLeft = 300;
													Main.projectile[num511].friendly = false;
													NetMessage.SendData(27, -1, -1, "", num511, 0f, 0f, 0f, 0, 0, 0);
													this.netUpdate = true;
												}
											}
										}
										else
										{
											if (this.velocity.Y == 0f)
											{
												if (this.localAI[2] == this.position.X)
												{
													this.direction *= -1;
													this.ai[3] = 60f;
												}
												this.localAI[2] = this.position.X;
												if (this.ai[3] == 0f)
												{
													this.TargetClosest(true);
												}
												this.ai[0] += 1f;
												if (this.ai[0] > 2f)
												{
													this.ai[0] = 0f;
													this.ai[1] += 1f;
													this.velocity.Y = -8.2f;
													this.velocity.X = this.velocity.X + (float)this.direction * num501 * 1.1f;
												}
												else
												{
													this.velocity.Y = -6f;
													this.velocity.X = this.velocity.X + (float)this.direction * num501 * 0.9f;
												}
												this.spriteDirection = this.direction;
											}
											this.velocity.X = this.velocity.X + (float)this.direction * num501 * 0.01f;
										}
										if (this.ai[3] > 0f)
										{
											this.ai[3] -= 1f;
										}
										if (this.velocity.X > num500 && this.direction > 0)
										{
											this.velocity.X = 4f;
										}
										if (this.velocity.X < -num500 && this.direction < 0)
										{
											this.velocity.X = -4f;
											return;
										}
									}
									else if (this.aiStyle == 39)
									{
										if (this.target < 0 || Main.player[this.target].dead || this.direction == 0)
										{
											this.TargetClosest(true);
										}
										bool flag31 = true;
										int num512 = 0;
										if (this.velocity.X < 0f)
										{
											num512 = -1;
										}
										if (this.velocity.X > 0f)
										{
											num512 = 1;
										}
										Vector2 position3 = this.position;
										position3.X += this.velocity.X;
										int num513 = (int)((position3.X + (float)(this.width / 2) + (float)((this.width / 2 + 1) * num512)) / 16f);
										int num514 = (int)((position3.Y + (float)this.height - 1f) / 16f);
										if ((float)(num513 * 16) < position3.X + (float)this.width && (float)(num513 * 16 + 16) > position3.X && ((Main.tile[num513, num514].nactive() && !Main.tile[num513, num514].topSlope() && !Main.tile[num513, num514 - 1].topSlope() && ((Main.tileSolid[(int)Main.tile[num513, num514].type] && !Main.tileSolidTop[(int)Main.tile[num513, num514].type]) || (flag31 && Main.tileSolidTop[(int)Main.tile[num513, num514].type] && (!Main.tileSolid[(int)Main.tile[num513, num514 - 1].type] || !Main.tile[num513, num514 - 1].nactive()) && Main.tile[num513, num514].type != 16 && Main.tile[num513, num514].type != 18 && Main.tile[num513, num514].type != 134))) || (Main.tile[num513, num514 - 1].halfBrick() && Main.tile[num513, num514 - 1].nactive())) && (!Main.tile[num513, num514 - 1].nactive() || !Main.tileSolid[(int)Main.tile[num513, num514 - 1].type] || Main.tileSolidTop[(int)Main.tile[num513, num514 - 1].type] || (Main.tile[num513, num514 - 1].halfBrick() && (!Main.tile[num513, num514 - 4].nactive() || !Main.tileSolid[(int)Main.tile[num513, num514 - 4].type] || Main.tileSolidTop[(int)Main.tile[num513, num514 - 4].type]))) && (!Main.tile[num513, num514 - 2].nactive() || !Main.tileSolid[(int)Main.tile[num513, num514 - 2].type] || Main.tileSolidTop[(int)Main.tile[num513, num514 - 2].type]) && (!Main.tile[num513, num514 - 3].nactive() || !Main.tileSolid[(int)Main.tile[num513, num514 - 3].type] || Main.tileSolidTop[(int)Main.tile[num513, num514 - 3].type]) && (!Main.tile[num513 - num512, num514 - 3].nactive() || !Main.tileSolid[(int)Main.tile[num513 - num512, num514 - 3].type] || Main.tileSolidTop[(int)Main.tile[num513 - num512, num514 - 3].type]))
										{
											float num515 = (float)(num514 * 16);
											if (Main.tile[num513, num514].halfBrick())
											{
												num515 += 8f;
											}
											if (Main.tile[num513, num514 - 1].halfBrick())
											{
												num515 -= 8f;
											}
											if (num515 < position3.Y + (float)this.height)
											{
												float num516 = position3.Y + (float)this.height - num515;
												if ((double)num516 <= 16.1)
												{
													this.gfxOffY += this.position.Y + (float)this.height - num515;
													this.position.Y = num515 - (float)this.height;
													if (num516 < 9f)
													{
														this.stepSpeed = 0.75f;
													}
													else
													{
														this.stepSpeed = 1.5f;
													}
												}
											}
										}
										if (this.justHit && this.type != 417)
										{
											this.ai[0] = 0f;
											this.ai[1] = 0f;
											this.TargetClosest(true);
										}
										if (this.type == 154 && Main.rand.Next(10) == 0)
										{
											int num517 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 67, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 90, default(Color), 1.5f);
											Main.dust[num517].noGravity = true;
											Main.dust[num517].velocity *= 0.2f;
										}
										if (this.ai[0] == 0f)
										{
											if (this.velocity.X < 0f)
											{
												this.direction = -1;
											}
											else if (this.velocity.X > 0f)
											{
												this.direction = 1;
											}
											this.spriteDirection = this.direction;
											Vector2 vector62 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
											float num518 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector62.X;
											float num519 = Main.player[this.target].position.Y - vector62.Y;
											float num520 = (float)Math.Sqrt((double)(num518 * num518 + num519 * num519));
											bool flag32 = Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height);
											if (this.type >= 496 && this.type <= 497)
											{
												if (num520 > 200f && flag32)
												{
													this.ai[1] += 2f;
												}
												if (num520 > 600f && (flag32 || this.position.Y + (float)this.height > Main.player[this.target].position.Y - 200f))
												{
													this.ai[1] += 4f;
												}
											}
											else
											{
												if (num520 > 200f && flag32)
												{
													this.ai[1] += 4f;
												}
												if (num520 > 600f && (flag32 || this.position.Y + (float)this.height > Main.player[this.target].position.Y - 200f))
												{
													this.ai[1] += 10f;
												}
												if (this.wet)
												{
													this.ai[1] = 1000f;
												}
											}
											this.defense = this.defDefense;
											this.damage = this.defDamage;
											if (this.type >= 496 && this.type <= 497)
											{
												this.knockBackResist = 0.75f * Main.knockBackMultiplier;
											}
											else
											{
												this.knockBackResist = 0.3f * Main.knockBackMultiplier;
											}
											this.ai[1] += 1f;
											if (this.ai[1] >= 400f)
											{
												this.ai[1] = 0f;
												this.ai[0] = 1f;
											}
											if (!this.justHit && this.velocity.X != this.oldVelocity.X)
											{
												this.direction *= -1;
											}
											if (this.velocity.Y == 0f && Main.player[this.target].position.Y < this.position.Y + (float)this.height)
											{
												int num521;
												int num522;
												if (this.direction > 0)
												{
													num521 = (int)(((double)this.position.X + (double)this.width * 0.5) / 16.0);
													num522 = num521 + 3;
												}
												else
												{
													num522 = (int)(((double)this.position.X + (double)this.width * 0.5) / 16.0);
													num521 = num522 - 3;
												}
												int num523 = (int)((this.position.Y + (float)this.height + 2f) / 16f) - 1;
												int num524 = num523 + 4;
												bool flag33 = false;
												for (int num525 = num521; num525 <= num522; num525++)
												{
													for (int num526 = num523; num526 <= num524; num526++)
													{
														if (Main.tile[num525, num526] != null && Main.tile[num525, num526].nactive() && Main.tileSolid[(int)Main.tile[num525, num526].type])
														{
															flag33 = true;
														}
													}
												}
												if (!flag33)
												{
													this.direction *= -1;
													this.velocity.X = 0.1f * (float)this.direction;
												}
											}
											if (this.type >= 496 && this.type <= 497)
											{
												float num527 = 0.5f;
												if (this.velocity.X < -num527 || this.velocity.X > num527)
												{
													if (this.velocity.Y == 0f)
													{
														this.velocity *= 0.8f;
														return;
													}
												}
												else if (this.velocity.X < num527 && this.direction == 1)
												{
													this.velocity.X = this.velocity.X + 0.07f;
													if (this.velocity.X > num527)
													{
														this.velocity.X = num527;
														return;
													}
												}
												else if (this.velocity.X > -num527 && this.direction == -1)
												{
													this.velocity.X = this.velocity.X - 0.07f;
													if (this.velocity.X < -num527)
													{
														this.velocity.X = -num527;
														return;
													}
												}
											}
											else
											{
												float num528 = 1f;
												if (num520 < 400f)
												{
													if (this.velocity.X < -num528 || this.velocity.X > num528)
													{
														if (this.velocity.Y == 0f)
														{
															this.velocity *= 0.8f;
															return;
														}
													}
													else if (this.velocity.X < num528 && this.direction == 1)
													{
														this.velocity.X = this.velocity.X + 0.07f;
														if (this.velocity.X > num528)
														{
															this.velocity.X = num528;
															return;
														}
													}
													else if (this.velocity.X > -num528 && this.direction == -1)
													{
														this.velocity.X = this.velocity.X - 0.07f;
														if (this.velocity.X < -num528)
														{
															this.velocity.X = -num528;
															return;
														}
													}
												}
												else if (this.velocity.X < -1.5f || this.velocity.X > 1.5f)
												{
													if (this.velocity.Y == 0f)
													{
														this.velocity *= 0.8f;
														return;
													}
												}
												else if (this.velocity.X < 1.5f && this.direction == 1)
												{
													this.velocity.X = this.velocity.X + 0.07f;
													if (this.velocity.X > 1.5f)
													{
														this.velocity.X = 1.5f;
														return;
													}
												}
												else if (this.velocity.X > -1.5f && this.direction == -1)
												{
													this.velocity.X = this.velocity.X - 0.07f;
													if (this.velocity.X < -1.5f)
													{
														this.velocity.X = -1.5f;
														return;
													}
												}
											}
										}
										else if (this.ai[0] == 1f)
										{
											this.velocity.X = this.velocity.X * 0.5f;
											if (this.type >= 496 && this.type <= 497)
											{
												this.ai[1] += 0.5f;
											}
											else
											{
												this.ai[1] += 1f;
											}
											if (this.ai[1] >= 30f)
											{
												this.netUpdate = true;
												this.TargetClosest(true);
												this.ai[1] = 0f;
												this.ai[2] = 0f;
												this.ai[0] = 3f;
												if (this.type == 417)
												{
													this.ai[0] = 6f;
													this.ai[2] = (float)Main.rand.Next(2, 5);
													return;
												}
											}
										}
										else
										{
											if (this.ai[0] == 3f)
											{
												if (this.type == 154 && Main.rand.Next(3) < 2)
												{
													int num529 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 67, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 90, default(Color), 1.5f);
													Main.dust[num529].noGravity = true;
													Main.dust[num529].velocity *= 0.2f;
												}
												if (Main.expertMode)
												{
													if (this.type >= 496 && this.type <= 497)
													{
														this.damage = (int)((double)this.defDamage * 1.5 * 0.9);
													}
													else
													{
														this.damage = (int)((double)(this.defDamage * 2) * 0.9);
													}
												}
												else if (this.type >= 496 && this.type <= 497)
												{
													this.damage = (int)((double)this.defDamage * 1.5);
												}
												else
												{
													this.damage = this.defDamage * 2;
												}
												this.defense = this.defDefense * 2;
												this.ai[1] += 1f;
												if (this.ai[1] == 1f)
												{
													this.netUpdate = true;
													this.TargetClosest(true);
													this.ai[2] += 0.3f;
													this.rotation += this.ai[2] * (float)this.direction;
													this.ai[1] += 1f;
													bool flag34 = Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height);
													float num530 = 10f;
													if (!flag34)
													{
														num530 = 6f;
													}
													if (this.type >= 496 && this.type <= 497)
													{
														num530 *= 0.75f;
													}
													Vector2 vector63 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
													float num531 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector63.X;
													float num532 = Math.Abs(num531) * 0.2f;
													if (this.directionY > 0)
													{
														num532 = 0f;
													}
													float num533 = Main.player[this.target].position.Y - vector63.Y - num532;
													float num534 = (float)Math.Sqrt((double)(num531 * num531 + num533 * num533));
													this.netUpdate = true;
													num534 = num530 / num534;
													num531 *= num534;
													num533 *= num534;
													if (!flag34)
													{
														num533 = -10f;
													}
													this.velocity.X = num531;
													this.velocity.Y = num533;
													this.ai[3] = this.velocity.X;
												}
												else
												{
													if (this.position.X + (float)this.width > Main.player[this.target].position.X && this.position.X < Main.player[this.target].position.X + (float)Main.player[this.target].width && this.position.Y < Main.player[this.target].position.Y + (float)Main.player[this.target].height)
													{
														this.velocity.X = this.velocity.X * 0.8f;
														this.ai[3] = 0f;
														if (this.velocity.Y < 0f)
														{
															this.velocity.Y = this.velocity.Y + 0.2f;
														}
													}
													if (this.ai[3] != 0f)
													{
														this.velocity.X = this.ai[3];
														this.velocity.Y = this.velocity.Y - 0.22f;
													}
													if (this.ai[1] >= 90f)
													{
														this.noGravity = false;
														this.ai[1] = 0f;
														this.ai[0] = 4f;
													}
												}
												if (this.wet && this.directionY < 0)
												{
													this.velocity.Y = this.velocity.Y - 0.3f;
												}
												this.rotation += this.ai[2] * (float)this.direction;
												return;
											}
											if (this.ai[0] == 4f)
											{
												if (this.wet && this.directionY < 0)
												{
													this.velocity.Y = this.velocity.Y - 0.3f;
												}
												this.velocity.X = this.velocity.X * 0.96f;
												if (this.ai[2] > 0f)
												{
													this.ai[2] -= 0.01f;
													this.rotation += this.ai[2] * (float)this.direction;
												}
												else if (this.velocity.Y >= 0f)
												{
													this.rotation = 0f;
												}
												if (this.ai[2] <= 0f && (this.velocity.Y == 0f || this.wet))
												{
													this.netUpdate = true;
													this.rotation = 0f;
													this.ai[2] = 0f;
													this.ai[1] = 0f;
													this.ai[0] = 5f;
													return;
												}
											}
											else
											{
												if (this.ai[0] == 6f)
												{
													this.damage = (int)((float)this.defDamage * (Main.expertMode ? 1.4f : 1.8f));
													this.defense = this.defDefense * 2;
													this.knockBackResist = 0f;
													if (Main.rand.Next(3) < 2)
													{
														int num535 = Dust.NewDust(base.Center - new Vector2(30f), 60, 60, 6, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 90, default(Color), 1.5f);
														Main.dust[num535].noGravity = true;
														Main.dust[num535].velocity *= 0.2f;
														Main.dust[num535].fadeIn = 1f;
													}
													this.ai[1] += 1f;
													if (this.ai[3] > 0f)
													{
														if (this.ai[3] == 1f)
														{
															Vector2 vector64 = base.Center - new Vector2(50f);
															for (int num536 = 0; num536 < 32; num536++)
															{
																int num537 = Dust.NewDust(vector64, 100, 100, 6, 0f, 0f, 100, default(Color), 2.5f);
																Main.dust[num537].noGravity = true;
																Main.dust[num537].velocity *= 3f;
																num537 = Dust.NewDust(vector64, 100, 100, 6, 0f, 0f, 100, default(Color), 1.5f);
																Main.dust[num537].velocity *= 2f;
																Main.dust[num537].noGravity = true;
															}
															for (int num538 = 0; num538 < 4; num538++)
															{
																int num539 = Gore.NewGore(vector64 + new Vector2((float)(50 * Main.rand.Next(100)) / 100f, (float)(50 * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
																Main.gore[num539].velocity *= 0.3f;
																Gore expr_1CB06_cp_0 = Main.gore[num539];
																expr_1CB06_cp_0.velocity.X = expr_1CB06_cp_0.velocity.X + (float)Main.rand.Next(-10, 11) * 0.05f;
																Gore expr_1CB36_cp_0 = Main.gore[num539];
																expr_1CB36_cp_0.velocity.Y = expr_1CB36_cp_0.velocity.Y + (float)Main.rand.Next(-10, 11) * 0.05f;
															}
														}
														for (int num540 = 0; num540 < 5; num540++)
														{
															int num541 = Dust.NewDust(this.position, this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
															Main.dust[num541].velocity = Main.dust[num541].velocity * Main.rand.NextFloat();
														}
														this.ai[3] += 1f;
														if (this.ai[3] >= 10f)
														{
															this.ai[3] = 0f;
														}
													}
													if (this.ai[1] == 1f)
													{
														this.netUpdate = true;
														this.TargetClosest(true);
														bool flag35 = Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height);
														float num542 = 16f;
														if (!flag35)
														{
															num542 = 10f;
														}
														Vector2 vector65 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
														float num543 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector65.X;
														float num544 = Math.Abs(num543) * 0.2f;
														if (this.directionY > 0)
														{
															num544 = 0f;
														}
														float num545 = Main.player[this.target].position.Y - vector65.Y - num544;
														float num546 = (float)Math.Sqrt((double)(num543 * num543 + num545 * num545));
														this.netUpdate = true;
														num546 = num542 / num546;
														num543 *= num546;
														num545 *= num546;
														if (!flag35)
														{
															num545 = -12f;
														}
														this.velocity.X = num543;
														this.velocity.Y = num545;
													}
													else
													{
														if (this.position.X + (float)this.width > Main.player[this.target].position.X && this.position.X < Main.player[this.target].position.X + (float)Main.player[this.target].width && this.position.Y < Main.player[this.target].position.Y + (float)Main.player[this.target].height)
														{
															this.velocity.X = this.velocity.X * 0.9f;
															if (this.velocity.Y < 0f)
															{
																this.velocity.Y = this.velocity.Y + 0.2f;
															}
														}
														if (this.ai[2] == 0f || this.ai[1] >= 1200f)
														{
															this.ai[1] = 0f;
															this.ai[0] = 5f;
														}
													}
													if (this.wet && this.directionY < 0)
													{
														this.velocity.Y = this.velocity.Y - 0.3f;
													}
													this.rotation += MathHelper.Clamp(this.velocity.X / 10f * (float)this.direction, -0.314159274f, 0.314159274f);
													return;
												}
												if (this.ai[0] == 5f)
												{
													this.rotation = 0f;
													this.velocity.X = 0f;
													if (this.type >= 496 && this.type <= 497)
													{
														this.ai[1] += 0.5f;
													}
													else
													{
														this.ai[1] += 1f;
													}
													if (this.ai[1] >= 30f)
													{
														this.TargetClosest(true);
														this.netUpdate = true;
														this.ai[1] = 0f;
														this.ai[0] = 0f;
													}
													if (this.wet)
													{
														this.ai[0] = 3f;
														this.ai[1] = 0f;
														return;
													}
												}
											}
										}
									}
									else if (this.aiStyle == 40)
									{
										if (this.target < 0 || this.target == 255 || Main.player[this.target].dead)
										{
											this.TargetClosest(true);
										}
										float num547 = 2f;
										float num548 = 0.08f;
										if (this.type == 531)
										{
											num547 = 4f;
											num548 = 0.16f;
										}
										Vector2 vector66 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
										float num549 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2);
										float num550 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2);
										num549 = (float)((int)(num549 / 8f) * 8);
										num550 = (float)((int)(num550 / 8f) * 8);
										vector66.X = (float)((int)(vector66.X / 8f) * 8);
										vector66.Y = (float)((int)(vector66.Y / 8f) * 8);
										num549 -= vector66.X;
										num550 -= vector66.Y;
										float num551 = (float)Math.Sqrt((double)(num549 * num549 + num550 * num550));
										if (num551 == 0f)
										{
											num549 = this.velocity.X;
											num550 = this.velocity.Y;
										}
										else
										{
											num551 = num547 / num551;
											num549 *= num551;
											num550 *= num551;
										}
										if (Main.player[this.target].dead)
										{
											num549 = (float)this.direction * num547 / 2f;
											num550 = -num547 / 2f;
										}
										this.spriteDirection = -1;
										if (!Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
										{
											this.ai[0] += 1f;
											if (this.ai[0] > 0f)
											{
												this.velocity.Y = this.velocity.Y + 0.023f;
											}
											else
											{
												this.velocity.Y = this.velocity.Y - 0.023f;
											}
											if (this.ai[0] < -100f || this.ai[0] > 100f)
											{
												this.velocity.X = this.velocity.X + 0.023f;
											}
											else
											{
												this.velocity.X = this.velocity.X - 0.023f;
											}
											if (this.ai[0] > 200f)
											{
												this.ai[0] = -200f;
											}
											this.velocity.X = this.velocity.X + num549 * 0.007f;
											this.velocity.Y = this.velocity.Y + num550 * 0.007f;
											this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X);
											if ((double)this.velocity.X > 1.5)
											{
												this.velocity.X = this.velocity.X * 0.9f;
											}
											if ((double)this.velocity.X < -1.5)
											{
												this.velocity.X = this.velocity.X * 0.9f;
											}
											if ((double)this.velocity.Y > 1.5)
											{
												this.velocity.Y = this.velocity.Y * 0.9f;
											}
											if ((double)this.velocity.Y < -1.5)
											{
												this.velocity.Y = this.velocity.Y * 0.9f;
											}
											if (this.velocity.X > 3f)
											{
												this.velocity.X = 3f;
											}
											if (this.velocity.X < -3f)
											{
												this.velocity.X = -3f;
											}
											if (this.velocity.Y > 3f)
											{
												this.velocity.Y = 3f;
											}
											if (this.velocity.Y < -3f)
											{
												this.velocity.Y = -3f;
											}
										}
										else
										{
											if (this.velocity.X < num549)
											{
												this.velocity.X = this.velocity.X + num548;
												if (this.velocity.X < 0f && num549 > 0f)
												{
													this.velocity.X = this.velocity.X + num548;
												}
											}
											else if (this.velocity.X > num549)
											{
												this.velocity.X = this.velocity.X - num548;
												if (this.velocity.X > 0f && num549 < 0f)
												{
													this.velocity.X = this.velocity.X - num548;
												}
											}
											if (this.velocity.Y < num550)
											{
												this.velocity.Y = this.velocity.Y + num548;
												if (this.velocity.Y < 0f && num550 > 0f)
												{
													this.velocity.Y = this.velocity.Y + num548;
												}
											}
											else if (this.velocity.Y > num550)
											{
												this.velocity.Y = this.velocity.Y - num548;
												if (this.velocity.Y > 0f && num550 < 0f)
												{
													this.velocity.Y = this.velocity.Y - num548;
												}
											}
											this.rotation = (float)Math.Atan2((double)num550, (double)num549);
										}
										if (this.type == 531)
										{
											this.rotation += 1.57079637f;
										}
										float num552 = 0.5f;
										if (this.collideX)
										{
											this.netUpdate = true;
											this.velocity.X = this.oldVelocity.X * -num552;
											if (this.direction == -1 && this.velocity.X > 0f && this.velocity.X < 2f)
											{
												this.velocity.X = 2f;
											}
											if (this.direction == 1 && this.velocity.X < 0f && this.velocity.X > -2f)
											{
												this.velocity.X = -2f;
											}
										}
										if (this.collideY)
										{
											this.netUpdate = true;
											this.velocity.Y = this.oldVelocity.Y * -num552;
											if (this.velocity.Y > 0f && (double)this.velocity.Y < 1.5)
											{
												this.velocity.Y = 2f;
											}
											if (this.velocity.Y < 0f && (double)this.velocity.Y > -1.5)
											{
												this.velocity.Y = -2f;
											}
										}
										if (((this.velocity.X > 0f && this.oldVelocity.X < 0f) || (this.velocity.X < 0f && this.oldVelocity.X > 0f) || (this.velocity.Y > 0f && this.oldVelocity.Y < 0f) || (this.velocity.Y < 0f && this.oldVelocity.Y > 0f)) && !this.justHit)
										{
											this.netUpdate = true;
										}
										if (Main.netMode != 1)
										{
											if (Main.netMode != 1 && Main.expertMode && this.target >= 0 && (this.type == 163 || this.type == 238) && Collision.CanHit(base.Center, 1, 1, Main.player[this.target].Center, 1, 1))
											{
												this.localAI[0] += 1f;
												if (this.justHit)
												{
													this.localAI[0] -= (float)Main.rand.Next(20, 60);
													if (this.localAI[0] < 0f)
													{
														this.localAI[0] = 0f;
													}
												}
												if (this.localAI[0] > (float)Main.rand.Next(180, 900))
												{
													this.localAI[0] = 0f;
													Vector2 vector67 = Main.player[this.target].Center - base.Center;
													vector67.Normalize();
													vector67 *= 8f;
													Projectile.NewProjectile(base.Center.X, base.Center.Y, vector67.X, vector67.Y, 472, 18, 0f, Main.myPlayer, 0f, 0f);
												}
											}
											int num553 = (int)base.Center.X / 16;
											int num554 = (int)base.Center.Y / 16;
											bool flag36 = false;
											for (int num555 = num553 - 1; num555 <= num553 + 1; num555++)
											{
												for (int num556 = num554 - 1; num556 <= num554 + 1; num556++)
												{
													if (Main.tile[num555, num556] == null)
													{
														return;
													}
													if (Main.tile[num555, num556].wall > 0)
													{
														flag36 = true;
													}
												}
											}
											if (!flag36)
											{
												if (this.type == 237)
												{
													this.Transform(236);
													return;
												}
												if (this.type == 238)
												{
													this.Transform(163);
													return;
												}
												if (this.type == 240)
												{
													this.Transform(239);
													return;
												}
												if (this.type == 531)
												{
													this.Transform(530);
													return;
												}
												this.Transform(164);
												return;
											}
										}
									}
									else if (this.aiStyle == 41)
									{
										if (this.ai[2] > 1f)
										{
											this.ai[2] -= 1f;
										}
										if (this.ai[2] == 0f)
										{
											this.ai[0] = -100f;
											this.ai[2] = 1f;
											this.TargetClosest(true);
											this.spriteDirection = this.direction;
										}
										if (this.type == 378)
										{
											Vector2 value3 = new Vector2(-6f, -10f);
											value3.X *= (float)this.spriteDirection;
											if (this.ai[1] != 5f && Main.rand.Next(3) == 0)
											{
												int num557 = Dust.NewDust(base.Center + value3 - Vector2.One * 5f, 4, 4, 6, 0f, 0f, 0, default(Color), 1f);
												Main.dust[num557].scale = 1.5f;
												Main.dust[num557].noGravity = true;
												Main.dust[num557].velocity = Main.dust[num557].velocity * 0.25f + Vector2.Normalize(value3) * 1f;
												Main.dust[num557].velocity = Main.dust[num557].velocity.RotatedBy((double)(-1.57079637f * (float)this.direction), default(Vector2));
											}
											if (this.ai[1] == 5f)
											{
												this.velocity = Vector2.Zero;
												this.position.X = this.position.X + (float)(this.width / 2);
												this.position.Y = this.position.Y + (float)(this.height / 2);
												this.width = 160;
												this.height = 160;
												this.position.X = this.position.X - (float)(this.width / 2);
												this.position.Y = this.position.Y - (float)(this.height / 2);
												this.dontTakeDamage = true;
												for (int num558 = 0; num558 < 8; num558++)
												{
													Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
												}
												for (int num559 = 0; num559 < 32; num559++)
												{
													int num560 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
													Main.dust[num560].noGravity = true;
													Main.dust[num560].velocity *= 3f;
													num560 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
													Main.dust[num560].velocity *= 2f;
													Main.dust[num560].noGravity = true;
												}
												for (int num561 = 0; num561 < 2; num561++)
												{
													int num562 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
													Main.gore[num562].velocity *= 0.3f;
													Gore expr_1E008_cp_0 = Main.gore[num562];
													expr_1E008_cp_0.velocity.X = expr_1E008_cp_0.velocity.X + (float)Main.rand.Next(-10, 11) * 0.05f;
													Gore expr_1E038_cp_0 = Main.gore[num562];
													expr_1E038_cp_0.velocity.Y = expr_1E038_cp_0.velocity.Y + (float)Main.rand.Next(-10, 11) * 0.05f;
												}
												if (this.ai[2] == 1f)
												{
													Main.PlaySound(SoundID.Item14, this.position);
													this.life = -1;
													this.HitEffect(0, 10.0);
													this.active = false;
												}
												return;
											}
										}
										if (this.type == 378 && this.ai[1] != 5f)
										{
											if (this.wet || Vector2.Distance(base.Center, Main.player[this.target].Center) < 64f)
											{
												this.ai[1] = 5f;
												this.ai[2] = 3f;
												this.netUpdate = true;
												return;
											}
										}
										else if (this.wet && this.type != 177)
										{
											if (this.collideX)
											{
												this.direction *= -this.direction;
												this.spriteDirection = this.direction;
											}
											if (this.collideY)
											{
												this.TargetClosest(true);
												if (this.oldVelocity.Y < 0f)
												{
													this.velocity.Y = 5f;
												}
												else
												{
													this.velocity.Y = this.velocity.Y - 2f;
												}
												this.spriteDirection = this.direction;
											}
											if (this.velocity.Y > 4f)
											{
												this.velocity.Y = this.velocity.Y * 0.95f;
											}
											this.velocity.Y = this.velocity.Y - 0.3f;
											if (this.velocity.Y < -4f)
											{
												this.velocity.Y = -4f;
											}
										}
										if (this.velocity.Y == 0f)
										{
											if (this.ai[3] == this.position.X)
											{
												this.direction *= -1;
												this.ai[2] = 300f;
											}
											this.ai[3] = 0f;
											this.velocity.X = this.velocity.X * 0.8f;
											if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1)
											{
												this.velocity.X = 0f;
											}
											if (this.type == 177)
											{
												this.ai[0] += 2f;
											}
											else
											{
												this.ai[0] += 5f;
											}
											Vector2 vector68 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
											float num563 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector68.X;
											float num564 = Main.player[this.target].position.Y + (float)Main.player[this.target].height * 0.5f - vector68.Y;
											float num565 = (float)Math.Sqrt((double)(num563 * num563 + num564 * num564));
											float num566 = 400f / num565;
											if (this.type == 177)
											{
												num566 *= 5f;
											}
											else
											{
												num566 *= 10f;
											}
											if (num566 > 30f)
											{
												num566 = 30f;
											}
											this.ai[0] += (float)((int)num566);
											if (this.ai[0] >= 0f)
											{
												this.netUpdate = true;
												if (this.ai[2] == 1f)
												{
													this.TargetClosest(true);
												}
												if (this.type == 177)
												{
													if (this.ai[1] == 2f)
													{
														this.velocity.Y = -11.5f;
														this.velocity.X = this.velocity.X + 2f * (float)this.direction;
														if (num565 < 350f && num565 > 200f)
														{
															this.velocity.X = this.velocity.X + (float)this.direction;
														}
														this.ai[0] = -200f;
														this.ai[1] = 0f;
														this.ai[3] = this.position.X;
													}
													else
													{
														this.velocity.Y = -7.5f;
														this.velocity.X = this.velocity.X + (float)(4 * this.direction);
														if (num565 < 350f && num565 > 200f)
														{
															this.velocity.X = this.velocity.X + (float)this.direction;
														}
														this.ai[0] = -120f;
														this.ai[1] += 1f;
													}
												}
												else if (this.ai[1] == 3f)
												{
													this.velocity.Y = -9f;
													this.velocity.X = this.velocity.X + (float)(3 * this.direction);
													if (num565 < 350f && num565 > 200f)
													{
														this.velocity.X = this.velocity.X + (float)this.direction;
													}
													this.ai[0] = -200f;
													this.ai[1] = 0f;
													this.ai[3] = this.position.X;
												}
												else
												{
													this.velocity.Y = -5f;
													this.velocity.X = this.velocity.X + (float)(5 * this.direction);
													if (num565 < 350f && num565 > 200f)
													{
														this.velocity.X = this.velocity.X + (float)this.direction;
													}
													this.ai[0] = -120f;
													this.ai[1] += 1f;
												}
											}
											else if (this.ai[0] >= -30f)
											{
												this.aiAction = 1;
											}
											this.spriteDirection = this.direction;
											return;
										}
										if (this.target < 255)
										{
											if (this.type == 177)
											{
												bool flag37 = false;
												if (this.position.Y + (float)this.height < Main.player[this.target].position.Y && this.position.X + (float)this.width > Main.player[this.target].position.X && this.position.X < Main.player[this.target].position.X + (float)Main.player[this.target].width)
												{
													flag37 = true;
													this.velocity.X = this.velocity.X * 0.92f;
													if (this.velocity.Y < 0f)
													{
														this.velocity.Y = this.velocity.Y * 0.9f;
														this.velocity.Y = this.velocity.Y + 0.1f;
													}
												}
												if (!flag37 && ((this.direction == 1 && this.velocity.X < 4f) || (this.direction == -1 && this.velocity.X > -4f)))
												{
													if ((this.direction == -1 && (double)this.velocity.X < 0.1) || (this.direction == 1 && (double)this.velocity.X > -0.1))
													{
														this.velocity.X = this.velocity.X + 0.2f * (float)this.direction;
														return;
													}
													this.velocity.X = this.velocity.X * 0.93f;
													return;
												}
											}
											else if ((this.direction == 1 && this.velocity.X < 3f) || (this.direction == -1 && this.velocity.X > -3f))
											{
												if ((this.direction == -1 && (double)this.velocity.X < 0.1) || (this.direction == 1 && (double)this.velocity.X > -0.1))
												{
													this.velocity.X = this.velocity.X + 0.2f * (float)this.direction;
													return;
												}
												this.velocity.X = this.velocity.X * 0.93f;
												return;
											}
										}
									}
									else if (this.aiStyle == 42)
									{
										this.TargetClosest(true);
										if (this.ai[0] == 0f)
										{
											if (this.target >= 0)
											{
												Vector2 vector69 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
												float num567 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector69.X;
												float num568 = Main.player[this.target].position.Y - vector69.Y;
												float num569 = (float)Math.Sqrt((double)(num567 * num567 + num568 * num568));
												if (num569 < 200f && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
												{
													this.ai[0] = 1f;
												}
											}
											if (this.velocity.X != 0f || this.velocity.Y < 0f || this.velocity.Y > 2f || this.life != this.lifeMax)
											{
												this.ai[0] = 1f;
												return;
											}
										}
										else
										{
											this.ai[0] += 1f;
											if (this.ai[0] >= 21f)
											{
												this.ai[0] = 21f;
												this.Transform(196);
												return;
											}
										}
									}
									else if (this.aiStyle == 43)
									{
										int num570 = 0;
										for (int num571 = 0; num571 < 255; num571++)
										{
											if (Main.player[num571].active && !Main.player[num571].dead && (base.Center - Main.player[num571].Center).Length() < 1000f)
											{
												num570++;
											}
										}
										if (Main.expertMode)
										{
											int num572 = (int)(20f * (1f - (float)this.life / (float)this.lifeMax));
											this.defense = this.defDefense + num572;
										}
										if (this.target < 0 || this.target == 255 || Main.player[this.target].dead || !Main.player[this.target].active)
										{
											this.TargetClosest(true);
										}
										bool dead4 = Main.player[this.target].dead;
										if (dead4 && Main.expertMode)
										{
											if ((double)this.position.Y < Main.worldSurface * 16.0 + 2000.0)
											{
												this.velocity.Y = this.velocity.Y + 0.04f;
											}
											if (this.position.X < (float)(Main.maxTilesX * 8))
											{
												this.velocity.X = this.velocity.X - 0.04f;
											}
											else
											{
												this.velocity.X = this.velocity.X + 0.04f;
											}
											if (this.timeLeft > 10)
											{
												this.timeLeft = 10;
												return;
											}
										}
										else if (this.ai[0] == -1f)
										{
											if (Main.netMode != 1)
											{
												float num573 = this.ai[1];
												int num574;
												do
												{
													num574 = Main.rand.Next(3);
													if (num574 == 1)
													{
														num574 = 2;
													}
													else if (num574 == 2)
													{
														num574 = 3;
													}
												}
												while ((float)num574 == num573);
												this.ai[0] = (float)num574;
												this.ai[1] = 0f;
												this.ai[2] = 0f;
												return;
											}
										}
										else if (this.ai[0] == 0f)
										{
											int num575 = 2;
											if (Main.expertMode)
											{
												if (this.life < this.lifeMax / 2)
												{
													num575++;
												}
												if (this.life < this.lifeMax / 3)
												{
													num575++;
												}
												if (this.life < this.lifeMax / 5)
												{
													num575++;
												}
											}
											if (this.ai[1] > (float)(2 * num575) && this.ai[1] % 2f == 0f)
											{
												this.ai[0] = -1f;
												this.ai[1] = 0f;
												this.ai[2] = 0f;
												this.netUpdate = true;
												return;
											}
											if (this.ai[1] % 2f == 0f)
											{
												this.TargetClosest(true);
												if (Math.Abs(this.position.Y + (float)(this.height / 2) - (Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2))) < 20f)
												{
													this.localAI[0] = 1f;
													this.ai[1] += 1f;
													this.ai[2] = 0f;
													float num576 = 12f;
													if (Main.expertMode)
													{
														num576 = 16f;
														if ((double)this.life < (double)this.lifeMax * 0.75)
														{
															num576 += 2f;
														}
														if ((double)this.life < (double)this.lifeMax * 0.5)
														{
															num576 += 2f;
														}
														if ((double)this.life < (double)this.lifeMax * 0.25)
														{
															num576 += 2f;
														}
														if ((double)this.life < (double)this.lifeMax * 0.1)
														{
															num576 += 2f;
														}
													}
													Vector2 vector70 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
													float num577 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector70.X;
													float num578 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector70.Y;
													float num579 = (float)Math.Sqrt((double)(num577 * num577 + num578 * num578));
													num579 = num576 / num579;
													this.velocity.X = num577 * num579;
													this.velocity.Y = num578 * num579;
													this.spriteDirection = this.direction;
													Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
													return;
												}
												this.localAI[0] = 0f;
												float num580 = 12f;
												float num581 = 0.15f;
												if (Main.expertMode)
												{
													if ((double)this.life < (double)this.lifeMax * 0.75)
													{
														num580 += 1f;
														num581 += 0.05f;
													}
													if ((double)this.life < (double)this.lifeMax * 0.5)
													{
														num580 += 1f;
														num581 += 0.05f;
													}
													if ((double)this.life < (double)this.lifeMax * 0.25)
													{
														num580 += 2f;
														num581 += 0.05f;
													}
													if ((double)this.life < (double)this.lifeMax * 0.1)
													{
														num580 += 2f;
														num581 += 0.1f;
													}
												}
												if (this.position.Y + (float)(this.height / 2) < Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2))
												{
													this.velocity.Y = this.velocity.Y + num581;
												}
												else
												{
													this.velocity.Y = this.velocity.Y - num581;
												}
												if (this.velocity.Y < -12f)
												{
													this.velocity.Y = -num580;
												}
												if (this.velocity.Y > 12f)
												{
													this.velocity.Y = num580;
												}
												if (Math.Abs(this.position.X + (float)(this.width / 2) - (Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2))) > 600f)
												{
													this.velocity.X = this.velocity.X + 0.15f * (float)this.direction;
												}
												else if (Math.Abs(this.position.X + (float)(this.width / 2) - (Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2))) < 300f)
												{
													this.velocity.X = this.velocity.X - 0.15f * (float)this.direction;
												}
												else
												{
													this.velocity.X = this.velocity.X * 0.8f;
												}
												if (this.velocity.X < -16f)
												{
													this.velocity.X = -16f;
												}
												if (this.velocity.X > 16f)
												{
													this.velocity.X = 16f;
												}
												this.spriteDirection = this.direction;
												return;
											}
											else
											{
												if (this.velocity.X < 0f)
												{
													this.direction = -1;
												}
												else
												{
													this.direction = 1;
												}
												this.spriteDirection = this.direction;
												int num582 = 600;
												if (Main.expertMode)
												{
													if ((double)this.life < (double)this.lifeMax * 0.1)
													{
														num582 = 300;
													}
													else if ((double)this.life < (double)this.lifeMax * 0.25)
													{
														num582 = 450;
													}
													else if ((double)this.life < (double)this.lifeMax * 0.5)
													{
														num582 = 500;
													}
													else if ((double)this.life < (double)this.lifeMax * 0.75)
													{
														num582 = 550;
													}
												}
												int num583 = 1;
												if (this.position.X + (float)(this.width / 2) < Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2))
												{
													num583 = -1;
												}
												if (this.direction == num583 && Math.Abs(this.position.X + (float)(this.width / 2) - (Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2))) > (float)num582)
												{
													this.ai[2] = 1f;
												}
												if (this.ai[2] != 1f)
												{
													this.localAI[0] = 1f;
													return;
												}
												this.TargetClosest(true);
												this.spriteDirection = this.direction;
												this.localAI[0] = 0f;
												this.velocity *= 0.9f;
												float num584 = 0.1f;
												if (Main.expertMode)
												{
													if (this.life < this.lifeMax / 2)
													{
														this.velocity *= 0.9f;
														num584 += 0.05f;
													}
													if (this.life < this.lifeMax / 3)
													{
														this.velocity *= 0.9f;
														num584 += 0.05f;
													}
													if (this.life < this.lifeMax / 5)
													{
														this.velocity *= 0.9f;
														num584 += 0.05f;
													}
												}
												if (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) < num584)
												{
													this.ai[2] = 0f;
													this.ai[1] += 1f;
													return;
												}
											}
										}
										else if (this.ai[0] == 2f)
										{
											this.TargetClosest(true);
											this.spriteDirection = this.direction;
											float num585 = 12f;
											float num586 = 0.07f;
											if (Main.expertMode)
											{
												num586 = 0.1f;
											}
											Vector2 vector71 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
											float num587 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector71.X;
											float num588 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - 200f - vector71.Y;
											float num589 = (float)Math.Sqrt((double)(num587 * num587 + num588 * num588));
											if (num589 < 200f)
											{
												this.ai[0] = 1f;
												this.ai[1] = 0f;
												this.netUpdate = true;
												return;
											}
											num589 = num585 / num589;
											if (this.velocity.X < num587)
											{
												this.velocity.X = this.velocity.X + num586;
												if (this.velocity.X < 0f && num587 > 0f)
												{
													this.velocity.X = this.velocity.X + num586;
												}
											}
											else if (this.velocity.X > num587)
											{
												this.velocity.X = this.velocity.X - num586;
												if (this.velocity.X > 0f && num587 < 0f)
												{
													this.velocity.X = this.velocity.X - num586;
												}
											}
											if (this.velocity.Y < num588)
											{
												this.velocity.Y = this.velocity.Y + num586;
												if (this.velocity.Y < 0f && num588 > 0f)
												{
													this.velocity.Y = this.velocity.Y + num586;
													return;
												}
											}
											else if (this.velocity.Y > num588)
											{
												this.velocity.Y = this.velocity.Y - num586;
												if (this.velocity.Y > 0f && num588 < 0f)
												{
													this.velocity.Y = this.velocity.Y - num586;
													return;
												}
											}
										}
										else if (this.ai[0] == 1f)
										{
											this.localAI[0] = 0f;
											this.TargetClosest(true);
											Vector2 vector72 = new Vector2(this.position.X + (float)(this.width / 2) + (float)(Main.rand.Next(20) * this.direction), this.position.Y + (float)this.height * 0.8f);
											Vector2 vector73 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
											float num590 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector73.X;
											float num591 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector73.Y;
											float num592 = (float)Math.Sqrt((double)(num590 * num590 + num591 * num591));
											this.ai[1] += 1f;
											if (Main.expertMode)
											{
												this.ai[1] += (float)(num570 / 2);
												if ((double)this.life < (double)this.lifeMax * 0.75)
												{
													this.ai[1] += 0.25f;
												}
												if ((double)this.life < (double)this.lifeMax * 0.5)
												{
													this.ai[1] += 0.25f;
												}
												if ((double)this.life < (double)this.lifeMax * 0.25)
												{
													this.ai[1] += 0.25f;
												}
												if ((double)this.life < (double)this.lifeMax * 0.1)
												{
													this.ai[1] += 0.25f;
												}
											}
											bool flag38 = false;
											if (this.ai[1] > 40f)
											{
												this.ai[1] = 0f;
												this.ai[2] += 1f;
												flag38 = true;
											}
											if (Collision.CanHit(vector72, 1, 1, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height) && flag38)
											{
												Main.PlaySound(3, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
												if (Main.netMode != 1)
												{
													int num593 = Main.rand.Next(210, 212);
													int num594 = NPC.NewNPC((int)vector72.X, (int)vector72.Y, num593, 0, 0f, 0f, 0f, 0f, 255);
													Main.npc[num594].velocity.X = (float)Main.rand.Next(-200, 201) * 0.002f;
													Main.npc[num594].velocity.Y = (float)Main.rand.Next(-200, 201) * 0.002f;
													Main.npc[num594].localAI[0] = 60f;
													Main.npc[num594].netUpdate = true;
												}
											}
											if (num592 > 400f || !Collision.CanHit(new Vector2(vector72.X, vector72.Y - 30f), 1, 1, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
											{
												float num595 = 14f;
												float num596 = 0.1f;
												vector73 = vector72;
												num590 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector73.X;
												num591 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector73.Y;
												num592 = (float)Math.Sqrt((double)(num590 * num590 + num591 * num591));
												num592 = num595 / num592;
												if (this.velocity.X < num590)
												{
													this.velocity.X = this.velocity.X + num596;
													if (this.velocity.X < 0f && num590 > 0f)
													{
														this.velocity.X = this.velocity.X + num596;
													}
												}
												else if (this.velocity.X > num590)
												{
													this.velocity.X = this.velocity.X - num596;
													if (this.velocity.X > 0f && num590 < 0f)
													{
														this.velocity.X = this.velocity.X - num596;
													}
												}
												if (this.velocity.Y < num591)
												{
													this.velocity.Y = this.velocity.Y + num596;
													if (this.velocity.Y < 0f && num591 > 0f)
													{
														this.velocity.Y = this.velocity.Y + num596;
													}
												}
												else if (this.velocity.Y > num591)
												{
													this.velocity.Y = this.velocity.Y - num596;
													if (this.velocity.Y > 0f && num591 < 0f)
													{
														this.velocity.Y = this.velocity.Y - num596;
													}
												}
											}
											else
											{
												this.velocity *= 0.9f;
											}
											this.spriteDirection = this.direction;
											if (this.ai[2] > 5f)
											{
												this.ai[0] = -1f;
												this.ai[1] = 1f;
												this.netUpdate = true;
												return;
											}
										}
										else if (this.ai[0] == 3f)
										{
											float num597 = 4f;
											float num598 = 0.05f;
											if (Main.expertMode)
											{
												num598 = 0.075f;
												num597 = 6f;
											}
											Vector2 vector74 = new Vector2(this.position.X + (float)(this.width / 2) + (float)(Main.rand.Next(20) * this.direction), this.position.Y + (float)this.height * 0.8f);
											Vector2 vector75 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
											float num599 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector75.X;
											float num600 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - 300f - vector75.Y;
											float num601 = (float)Math.Sqrt((double)(num599 * num599 + num600 * num600));
											this.ai[1] += 1f;
											bool flag39 = false;
											if (Main.expertMode)
											{
												if ((double)this.life < (double)this.lifeMax * 0.1)
												{
													if (this.ai[1] % 15f == 14f)
													{
														flag39 = true;
													}
												}
												else if (this.life < this.lifeMax / 3)
												{
													if (this.ai[1] % 25f == 24f)
													{
														flag39 = true;
													}
												}
												else if (this.life < this.lifeMax / 2)
												{
													if (this.ai[1] % 30f == 29f)
													{
														flag39 = true;
													}
												}
												else if (this.ai[1] % 35f == 34f)
												{
													flag39 = true;
												}
											}
											else if (this.ai[1] % 40f == 39f)
											{
												flag39 = true;
											}
											if (flag39 && this.position.Y + (float)this.height < Main.player[this.target].position.Y && Collision.CanHit(vector74, 1, 1, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
											{
												Main.PlaySound(SoundID.Item17, this.position);
												if (Main.netMode != 1)
												{
													float num602 = 8f;
													if (Main.expertMode)
													{
														num602 += 2f;
													}
													if (Main.expertMode && (double)this.life < (double)this.lifeMax * 0.1)
													{
														num602 += 3f;
													}
													float num603 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector74.X + (float)Main.rand.Next(-80, 81);
													float num604 = Main.player[this.target].position.Y + (float)Main.player[this.target].height * 0.5f - vector74.Y + (float)Main.rand.Next(-40, 41);
													float num605 = (float)Math.Sqrt((double)(num603 * num603 + num604 * num604));
													num605 = num602 / num605;
													num603 *= num605;
													num604 *= num605;
													int num606 = 11;
													int num607 = 55;
													int num608 = Projectile.NewProjectile(vector74.X, vector74.Y, num603, num604, num607, num606, 0f, Main.myPlayer, 0f, 0f);
													Main.projectile[num608].timeLeft = 300;
												}
											}
											if (!Collision.CanHit(new Vector2(vector74.X, vector74.Y - 30f), 1, 1, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
											{
												num597 = 14f;
												num598 = 0.1f;
												vector75 = vector74;
												num599 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector75.X;
												num600 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector75.Y;
												num601 = (float)Math.Sqrt((double)(num599 * num599 + num600 * num600));
												num601 = num597 / num601;
												if (this.velocity.X < num599)
												{
													this.velocity.X = this.velocity.X + num598;
													if (this.velocity.X < 0f && num599 > 0f)
													{
														this.velocity.X = this.velocity.X + num598;
													}
												}
												else if (this.velocity.X > num599)
												{
													this.velocity.X = this.velocity.X - num598;
													if (this.velocity.X > 0f && num599 < 0f)
													{
														this.velocity.X = this.velocity.X - num598;
													}
												}
												if (this.velocity.Y < num600)
												{
													this.velocity.Y = this.velocity.Y + num598;
													if (this.velocity.Y < 0f && num600 > 0f)
													{
														this.velocity.Y = this.velocity.Y + num598;
													}
												}
												else if (this.velocity.Y > num600)
												{
													this.velocity.Y = this.velocity.Y - num598;
													if (this.velocity.Y > 0f && num600 < 0f)
													{
														this.velocity.Y = this.velocity.Y - num598;
													}
												}
											}
											else if (num601 > 100f)
											{
												this.TargetClosest(true);
												this.spriteDirection = this.direction;
												num601 = num597 / num601;
												if (this.velocity.X < num599)
												{
													this.velocity.X = this.velocity.X + num598;
													if (this.velocity.X < 0f && num599 > 0f)
													{
														this.velocity.X = this.velocity.X + num598 * 2f;
													}
												}
												else if (this.velocity.X > num599)
												{
													this.velocity.X = this.velocity.X - num598;
													if (this.velocity.X > 0f && num599 < 0f)
													{
														this.velocity.X = this.velocity.X - num598 * 2f;
													}
												}
												if (this.velocity.Y < num600)
												{
													this.velocity.Y = this.velocity.Y + num598;
													if (this.velocity.Y < 0f && num600 > 0f)
													{
														this.velocity.Y = this.velocity.Y + num598 * 2f;
													}
												}
												else if (this.velocity.Y > num600)
												{
													this.velocity.Y = this.velocity.Y - num598;
													if (this.velocity.Y > 0f && num600 < 0f)
													{
														this.velocity.Y = this.velocity.Y - num598 * 2f;
													}
												}
											}
											if (this.ai[1] > 800f)
											{
												this.ai[0] = -1f;
												this.ai[1] = 3f;
												this.netUpdate = true;
												return;
											}
										}
									}
									else if (this.aiStyle == 44)
									{
										this.noGravity = true;
										if (this.collideX)
										{
											if (this.oldVelocity.X > 0f)
											{
												this.direction = -1;
											}
											else
											{
												this.direction = 1;
											}
											this.velocity.X = (float)this.direction;
										}
										if (this.collideY)
										{
											if (this.oldVelocity.Y > 0f)
											{
												this.directionY = -1;
											}
											else
											{
												this.directionY = 1;
											}
											this.velocity.Y = (float)this.directionY;
										}
										int num609 = this.target;
										int direction2 = this.direction;
										if (this.target == 255 || Main.player[this.target].wet || Main.player[this.target].dead || Collision.CanHit(base.Center, 1, 1, Main.player[this.target].Center, 1, 1))
										{
											this.ai[0] = 90f;
											this.TargetClosest(true);
										}
										else if (this.ai[0] > 0f)
										{
											this.ai[0] -= 1f;
											this.TargetClosest(true);
										}
										if (this.netUpdate && num609 == this.target && direction2 == this.direction)
										{
											this.netUpdate = false;
										}
										float num610 = 0.05f;
										float num611 = 0.01f;
										float num612 = 3f;
										float num613 = 1f;
										float num614 = 30f;
										float num615 = 100f;
										float num616 = Math.Abs(this.position.X + (float)(this.width / 2) - (Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2)));
										float num617 = Main.player[this.target].position.Y - (float)(this.height / 2);
										if (this.type == 509)
										{
											num610 = 0.09f;
											num611 = 0.03f;
											num612 = 5f;
											num613 = 2f;
											num614 = 40f;
											num615 = 150f;
											num617 = Main.player[this.target].Center.Y - (float)(this.height / 2);
											this.rotation = this.velocity.X * 0.1f;
											for (int num618 = 0; num618 < 200; num618++)
											{
												if (num618 != this.whoAmI && Main.npc[num618].active && Main.npc[num618].type == this.type && Math.Abs(this.position.X - Main.npc[num618].position.X) + Math.Abs(this.position.Y - Main.npc[num618].position.Y) < (float)this.width)
												{
													if (this.position.X < Main.npc[num618].position.X)
													{
														this.velocity.X = this.velocity.X - 0.05f;
													}
													else
													{
														this.velocity.X = this.velocity.X + 0.05f;
													}
													if (this.position.Y < Main.npc[num618].position.Y)
													{
														this.velocity.Y = this.velocity.Y - 0.05f;
													}
													else
													{
														this.velocity.Y = this.velocity.Y + 0.05f;
													}
												}
											}
										}
										if (this.ai[0] <= 0f)
										{
											num612 *= 0.8f;
											num610 *= 0.7f;
											num617 = base.Center.Y + (float)(this.directionY * 1000);
											if (this.velocity.X < 0f)
											{
												this.direction = -1;
											}
											else if (this.velocity.X > 0f || this.direction == 0)
											{
												this.direction = 1;
											}
										}
										if (num616 > num614)
										{
											if (this.direction == -1 && this.velocity.X > -num612)
											{
												this.velocity.X = this.velocity.X - num610;
												if (this.velocity.X > num612)
												{
													this.velocity.X = this.velocity.X - num610;
												}
												else if (this.velocity.X > 0f)
												{
													this.velocity.X = this.velocity.X - num610 / 2f;
												}
												if (this.velocity.X < -num612)
												{
													this.velocity.X = -num612;
												}
											}
											else if (this.direction == 1 && this.velocity.X < num612)
											{
												this.velocity.X = this.velocity.X + num610;
												if (this.velocity.X < -num612)
												{
													this.velocity.X = this.velocity.X + num610;
												}
												else if (this.velocity.X < 0f)
												{
													this.velocity.X = this.velocity.X + num610 / 2f;
												}
												if (this.velocity.X > num612)
												{
													this.velocity.X = num612;
												}
											}
										}
										if (num616 > num615)
										{
											num617 -= num615 / 2f;
										}
										if (this.position.Y < num617)
										{
											this.velocity.Y = this.velocity.Y + num611;
											if (this.velocity.Y < 0f)
											{
												this.velocity.Y = this.velocity.Y + num611;
											}
										}
										else
										{
											this.velocity.Y = this.velocity.Y - num611;
											if (this.velocity.Y > 0f)
											{
												this.velocity.Y = this.velocity.Y - num611;
											}
										}
										if (this.velocity.Y < -num613)
										{
											this.velocity.Y = -num613;
										}
										if (this.velocity.Y > num613)
										{
											this.velocity.Y = num613;
										}
										if (this.wet)
										{
											if (this.velocity.Y > 0f)
											{
												this.velocity.Y = this.velocity.Y * 0.95f;
											}
											this.velocity.Y = this.velocity.Y - 0.5f;
											if (this.velocity.Y < -4f)
											{
												this.velocity.Y = -4f;
												return;
											}
										}
									}
									else if (this.aiStyle == 45)
									{
										NPC.golemBoss = this.whoAmI;
										if (this.localAI[0] == 0f && Main.netMode != 1)
										{
											this.localAI[0] = 1f;
											NPC.NewNPC((int)base.Center.X - 84, (int)base.Center.Y - 9, 247, 0, 0f, 0f, 0f, 0f, 255);
											NPC.NewNPC((int)base.Center.X + 78, (int)base.Center.Y - 9, 248, 0, 0f, 0f, 0f, 0f, 255);
											NPC.NewNPC((int)base.Center.X - 3, (int)base.Center.Y - 57, 246, 0, 0f, 0f, 0f, 0f, 255);
										}
										if (this.target >= 0 && Main.player[this.target].dead)
										{
											this.TargetClosest(true);
											if (Main.player[this.target].dead)
											{
												this.noTileCollide = true;
											}
										}
										if (this.alpha > 0)
										{
											this.alpha -= 10;
											if (this.alpha < 0)
											{
												this.alpha = 0;
											}
											this.ai[1] = 0f;
										}
										bool flag40 = false;
										bool flag41 = false;
										bool flag42 = false;
										this.dontTakeDamage = false;
										for (int num619 = 0; num619 < 200; num619++)
										{
											if (Main.npc[num619].active && Main.npc[num619].type == 246)
											{
												flag40 = true;
											}
											if (Main.npc[num619].active && Main.npc[num619].type == 247)
											{
												flag41 = true;
											}
											if (Main.npc[num619].active && Main.npc[num619].type == 248)
											{
												flag42 = true;
											}
										}
										this.dontTakeDamage = flag40;
										if (!flag41)
										{
											int num620 = Dust.NewDust(new Vector2(base.Center.X - 80f, base.Center.Y - 9f), 8, 8, 31, 0f, 0f, 100, default(Color), 1f);
											Main.dust[num620].alpha += Main.rand.Next(100);
											Main.dust[num620].velocity *= 0.2f;
											Dust expr_213A6_cp_0 = Main.dust[num620];
											expr_213A6_cp_0.velocity.Y = expr_213A6_cp_0.velocity.Y - (0.5f + (float)Main.rand.Next(10) * 0.1f);
											Main.dust[num620].fadeIn = 0.5f + (float)Main.rand.Next(10) * 0.1f;
											if (Main.rand.Next(10) == 0)
											{
												num620 = Dust.NewDust(new Vector2(base.Center.X - 80f, base.Center.Y - 9f), 8, 8, 6, 0f, 0f, 0, default(Color), 1f);
												if (Main.rand.Next(20) != 0)
												{
													Main.dust[num620].noGravity = true;
													Main.dust[num620].scale *= 1f + (float)Main.rand.Next(10) * 0.1f;
													Dust expr_214B1_cp_0 = Main.dust[num620];
													expr_214B1_cp_0.velocity.Y = expr_214B1_cp_0.velocity.Y - 1f;
												}
											}
										}
										if (!flag42)
										{
											int num621 = Dust.NewDust(new Vector2(base.Center.X + 62f, base.Center.Y - 9f), 8, 8, 31, 0f, 0f, 100, default(Color), 1f);
											Main.dust[num621].alpha += Main.rand.Next(100);
											Main.dust[num621].velocity *= 0.2f;
											Dust expr_2156E_cp_0 = Main.dust[num621];
											expr_2156E_cp_0.velocity.Y = expr_2156E_cp_0.velocity.Y - (0.5f + (float)Main.rand.Next(10) * 0.1f);
											Main.dust[num621].fadeIn = 0.5f + (float)Main.rand.Next(10) * 0.1f;
											if (Main.rand.Next(10) == 0)
											{
												num621 = Dust.NewDust(new Vector2(base.Center.X + 62f, base.Center.Y - 9f), 8, 8, 6, 0f, 0f, 0, default(Color), 1f);
												if (Main.rand.Next(20) != 0)
												{
													Main.dust[num621].noGravity = true;
													Main.dust[num621].scale *= 1f + (float)Main.rand.Next(10) * 0.1f;
													Dust expr_21679_cp_0 = Main.dust[num621];
													expr_21679_cp_0.velocity.Y = expr_21679_cp_0.velocity.Y - 1f;
												}
											}
										}
										if (this.ai[0] == 0f)
										{
											this.noTileCollide = false;
											if (this.velocity.Y == 0f)
											{
												this.velocity.X = this.velocity.X * 0.8f;
												this.ai[1] += 1f;
												if (this.ai[1] > 0f)
												{
													if (!flag41)
													{
														this.ai[1] += 2f;
													}
													if (!flag42)
													{
														this.ai[1] += 2f;
													}
													if (!flag40)
													{
														this.ai[1] += 2f;
													}
													if (this.life < this.lifeMax)
													{
														this.ai[1] += 1f;
													}
													if (this.life < this.lifeMax / 2)
													{
														this.ai[1] += 4f;
													}
													if (this.life < this.lifeMax / 3)
													{
														this.ai[1] += 8f;
													}
												}
												if (this.ai[1] >= 300f)
												{
													this.ai[1] = -20f;
													this.frameCounter = 0.0;
												}
												else if (this.ai[1] == -1f)
												{
													this.TargetClosest(true);
													this.velocity.X = (float)(4 * this.direction);
													this.velocity.Y = -12.1f;
													this.ai[0] = 1f;
													this.ai[1] = 0f;
												}
											}
										}
										else if (this.ai[0] == 1f)
										{
											if (this.velocity.Y == 0f)
											{
												Main.PlaySound(SoundID.Item14, this.position);
												this.ai[0] = 0f;
												for (int num622 = (int)this.position.X - 20; num622 < (int)this.position.X + this.width + 40; num622 += 20)
												{
													for (int num623 = 0; num623 < 4; num623++)
													{
														int num624 = Dust.NewDust(new Vector2(this.position.X - 20f, this.position.Y + (float)this.height), this.width + 20, 4, 31, 0f, 0f, 100, default(Color), 1.5f);
														Main.dust[num624].velocity *= 0.2f;
													}
													int num625 = Gore.NewGore(new Vector2((float)(num622 - 20), this.position.Y + (float)this.height - 8f), default(Vector2), Main.rand.Next(61, 64), 1f);
													Main.gore[num625].velocity *= 0.4f;
												}
											}
											else
											{
												this.TargetClosest(true);
												if (this.position.X < Main.player[this.target].position.X && this.position.X + (float)this.width > Main.player[this.target].position.X + (float)Main.player[this.target].width)
												{
													this.velocity.X = this.velocity.X * 0.9f;
													this.velocity.Y = this.velocity.Y + 0.2f;
												}
												else
												{
													if (this.direction < 0)
													{
														this.velocity.X = this.velocity.X - 0.2f;
													}
													else if (this.direction > 0)
													{
														this.velocity.X = this.velocity.X + 0.2f;
													}
													float num626 = 3f;
													if (this.life < this.lifeMax)
													{
														num626 += 1f;
													}
													if (this.life < this.lifeMax / 2)
													{
														num626 += 1f;
													}
													if (this.life < this.lifeMax / 4)
													{
														num626 += 1f;
													}
													if (this.velocity.X < -num626)
													{
														this.velocity.X = -num626;
													}
													if (this.velocity.X > num626)
													{
														this.velocity.X = num626;
													}
												}
											}
										}
										if (this.target <= 0 || this.target == 255 || Main.player[this.target].dead)
										{
											this.TargetClosest(true);
										}
										int num627 = 3000;
										if (Math.Abs(base.Center.X - Main.player[this.target].Center.X) + Math.Abs(base.Center.Y - Main.player[this.target].Center.Y) > (float)num627)
										{
											this.TargetClosest(true);
											if (Math.Abs(base.Center.X - Main.player[this.target].Center.X) + Math.Abs(base.Center.Y - Main.player[this.target].Center.Y) > (float)num627)
											{
												this.active = false;
												return;
											}
										}
									}
									else if (this.aiStyle == 46)
									{
										this.noTileCollide = true;
										if (NPC.golemBoss < 0)
										{
											this.StrikeNPCNoInteraction(9999, 0f, 0, false, false, false);
											return;
										}
										float num628 = 12f;
										Vector2 vector76 = new Vector2(base.Center.X, base.Center.Y);
										float num629 = Main.npc[NPC.golemBoss].Center.X - vector76.X;
										float num630 = Main.npc[NPC.golemBoss].Center.Y - vector76.Y;
										num630 -= 57f;
										num629 -= 3f;
										float num631 = (float)Math.Sqrt((double)(num629 * num629 + num630 * num630));
										if (num631 < 20f)
										{
											this.rotation = 0f;
											this.velocity.X = num629;
											this.velocity.Y = num630;
										}
										else
										{
											num631 = num628 / num631;
											this.velocity.X = num629 * num631;
											this.velocity.Y = num630 * num631;
											this.rotation = this.velocity.X * 0.1f;
										}
										if (this.alpha > 0)
										{
											this.alpha -= 10;
											if (this.alpha < 0)
											{
												this.alpha = 0;
											}
											this.ai[1] = 30f;
										}
										if (this.ai[0] == 0f)
										{
											this.ai[1] += 1f;
											int num632 = 300;
											if (this.ai[1] < 20f || this.ai[1] > (float)(num632 - 20))
											{
												this.localAI[0] = 1f;
											}
											else
											{
												this.localAI[0] = 0f;
											}
											if (this.ai[1] >= (float)num632)
											{
												this.TargetClosest(true);
												this.ai[1] = 0f;
												Vector2 vector77 = new Vector2(base.Center.X, base.Center.Y + 10f);
												float num633 = 8f;
												float num634 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector77.X;
												float num635 = Main.player[this.target].position.Y + (float)Main.player[this.target].height * 0.5f - vector77.Y;
												float num636 = (float)Math.Sqrt((double)(num634 * num634 + num635 * num635));
												num636 = num633 / num636;
												num634 *= num636;
												num635 *= num636;
												int num637 = 18;
												int num638 = 258;
												if (Main.netMode != 1)
												{
													Projectile.NewProjectile(vector77.X, vector77.Y, num634, num635, num638, num637, 0f, Main.myPlayer, 0f, 0f);
												}
											}
										}
										else if (this.ai[0] == 1f)
										{
											this.TargetClosest(true);
											Vector2 vector78 = new Vector2(base.Center.X, base.Center.Y + 10f);
											if (Main.player[this.target].Center.X < base.Center.X - (float)this.width)
											{
												this.localAI[1] = -1f;
												vector78.X -= 40f;
											}
											else if (Main.player[this.target].Center.X > base.Center.X + (float)this.width)
											{
												this.localAI[1] = 1f;
												vector78.X += 40f;
											}
											else
											{
												this.localAI[1] = 0f;
											}
											this.ai[1] += 1f;
											if ((double)this.life < (double)this.lifeMax * 0.4)
											{
												this.ai[1] += 1f;
											}
											if ((double)this.life < (double)this.lifeMax * 0.2)
											{
												this.ai[1] += 1f;
											}
											int num639 = 300;
											if (this.ai[1] < 20f || this.ai[1] > (float)(num639 - 20))
											{
												this.localAI[0] = 1f;
											}
											else
											{
												this.localAI[0] = 0f;
											}
											if (this.ai[1] >= (float)num639)
											{
												this.TargetClosest(true);
												this.ai[1] = 0f;
												float num640 = 8f;
												float num641 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector78.X;
												float num642 = Main.player[this.target].position.Y + (float)Main.player[this.target].height * 0.5f - vector78.Y;
												float num643 = (float)Math.Sqrt((double)(num641 * num641 + num642 * num642));
												num643 = num640 / num643;
												num641 *= num643;
												num642 *= num643;
												int num644 = 24;
												int num645 = 258;
												if (Main.netMode != 1)
												{
													Projectile.NewProjectile(vector78.X, vector78.Y, num641, num642, num645, num644, 0f, Main.myPlayer, 0f, 0f);
												}
											}
											this.ai[2] += 1f;
											if (this.life < this.lifeMax / 3)
											{
												this.ai[2] += 1f;
											}
											if (this.life < this.lifeMax / 4)
											{
												this.ai[2] += 1f;
											}
											if (this.life < this.lifeMax / 5)
											{
												this.ai[2] += 1f;
											}
											if (!Collision.CanHit(base.Center, 1, 1, Main.player[this.target].Center, 1, 1))
											{
												this.ai[2] += 4f;
											}
											if (this.ai[2] > (float)(60 + Main.rand.Next(600)))
											{
												this.ai[2] = 0f;
												int num646 = 28;
												int num647 = 259;
												if (this.localAI[1] == 0f)
												{
													for (int num648 = 0; num648 < 2; num648++)
													{
														vector78 = new Vector2(base.Center.X, base.Center.Y - 22f);
														if (num648 == 0)
														{
															vector78.X -= 18f;
														}
														else
														{
															vector78.X += 18f;
														}
														float num649 = 11f;
														float num650 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector78.X;
														float num651 = Main.player[this.target].position.Y + (float)Main.player[this.target].height * 0.5f - vector78.Y;
														float num652 = (float)Math.Sqrt((double)(num650 * num650 + num651 * num651));
														num652 = num649 / num652;
														num650 *= num652;
														num651 *= num652;
														vector78.X += num650 * 3f;
														vector78.Y += num651 * 3f;
														if (Main.netMode != 1)
														{
															int num653 = Projectile.NewProjectile(vector78.X, vector78.Y, num650, num651, num647, num646, 0f, Main.myPlayer, 0f, 0f);
															Main.projectile[num653].timeLeft = 300;
														}
													}
												}
												else if (this.localAI[1] != 0f)
												{
													vector78 = new Vector2(base.Center.X, base.Center.Y - 22f);
													if (this.localAI[1] == -1f)
													{
														vector78.X -= 30f;
													}
													else if (this.localAI[1] == 1f)
													{
														vector78.X += 30f;
													}
													float num654 = 12f;
													float num655 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector78.X;
													float num656 = Main.player[this.target].position.Y + (float)Main.player[this.target].height * 0.5f - vector78.Y;
													float num657 = (float)Math.Sqrt((double)(num655 * num655 + num656 * num656));
													num657 = num654 / num657;
													num655 *= num657;
													num656 *= num657;
													vector78.X += num655 * 3f;
													vector78.Y += num656 * 3f;
													if (Main.netMode != 1)
													{
														int num658 = Projectile.NewProjectile(vector78.X, vector78.Y, num655, num656, num647, num646, 0f, Main.myPlayer, 0f, 0f);
														Main.projectile[num658].timeLeft = 300;
													}
												}
											}
										}
										if (this.life < this.lifeMax / 2)
										{
											this.ai[0] = 1f;
											return;
										}
										this.ai[0] = 0f;
										return;
									}
									else if (this.aiStyle == 47)
									{
										if (NPC.golemBoss < 0)
										{
											this.StrikeNPCNoInteraction(9999, 0f, 0, false, false, false);
											return;
										}
										if (this.alpha > 0)
										{
											this.alpha -= 10;
											if (this.alpha < 0)
											{
												this.alpha = 0;
											}
											this.ai[1] = 0f;
										}
										if (this.ai[0] == 0f)
										{
											this.noTileCollide = true;
											float num659 = 14f;
											if (this.life < this.lifeMax / 2)
											{
												num659 += 3f;
											}
											if (this.life < this.lifeMax / 4)
											{
												num659 += 3f;
											}
											if (Main.npc[NPC.golemBoss].life < Main.npc[NPC.golemBoss].lifeMax)
											{
												num659 += 8f;
											}
											Vector2 vector79 = new Vector2(base.Center.X, base.Center.Y);
											float num660 = Main.npc[NPC.golemBoss].Center.X - vector79.X;
											float num661 = Main.npc[NPC.golemBoss].Center.Y - vector79.Y;
											num661 -= 9f;
											if (this.type == 247)
											{
												num660 -= 84f;
											}
											else
											{
												num660 += 78f;
											}
											float num662 = (float)Math.Sqrt((double)(num660 * num660 + num661 * num661));
											if (num662 < 12f + num659)
											{
												this.rotation = 0f;
												this.velocity.X = num660;
												this.velocity.Y = num661;
												this.ai[1] += 1f;
												if (this.life < this.lifeMax / 2)
												{
													this.ai[1] += 1f;
												}
												if (this.life < this.lifeMax / 4)
												{
													this.ai[1] += 1f;
												}
												if (Main.npc[NPC.golemBoss].life < Main.npc[NPC.golemBoss].lifeMax)
												{
													this.ai[1] += 10f;
												}
												if (this.ai[1] >= 60f)
												{
													this.TargetClosest(true);
													if ((this.type == 247 && base.Center.X + 100f > Main.player[this.target].Center.X) || (this.type == 248 && base.Center.X - 100f < Main.player[this.target].Center.X))
													{
														this.ai[1] = 0f;
														this.ai[0] = 1f;
														return;
													}
													this.ai[1] = 0f;
													return;
												}
											}
											else
											{
												num662 = num659 / num662;
												this.velocity.X = num660 * num662;
												this.velocity.Y = num661 * num662;
												this.rotation = (float)Math.Atan2((double)(-(double)this.velocity.Y), (double)(-(double)this.velocity.X));
												if (this.type == 247)
												{
													this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X);
													return;
												}
											}
										}
										else if (this.ai[0] == 1f)
										{
											this.noTileCollide = true;
											this.collideX = false;
											this.collideY = false;
											float num663 = 12f;
											if (this.life < this.lifeMax / 2)
											{
												num663 += 4f;
											}
											if (this.life < this.lifeMax / 4)
											{
												num663 += 4f;
											}
											if (Main.npc[NPC.golemBoss].life < Main.npc[NPC.golemBoss].lifeMax)
											{
												num663 += 10f;
											}
											Vector2 vector80 = new Vector2(base.Center.X, base.Center.Y);
											float num664 = Main.player[this.target].Center.X - vector80.X;
											float num665 = Main.player[this.target].Center.Y - vector80.Y;
											float num666 = (float)Math.Sqrt((double)(num664 * num664 + num665 * num665));
											num666 = num663 / num666;
											this.velocity.X = num664 * num666;
											this.velocity.Y = num665 * num666;
											this.ai[0] = 2f;
											this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X);
											if (this.type == 247)
											{
												this.rotation = (float)Math.Atan2((double)(-(double)this.velocity.Y), (double)(-(double)this.velocity.X));
												return;
											}
										}
										else if (this.ai[0] == 2f)
										{
											if (Math.Abs(this.velocity.X) > Math.Abs(this.velocity.Y))
											{
												if (this.velocity.X > 0f && base.Center.X > Main.player[this.target].Center.X)
												{
													this.noTileCollide = false;
												}
												if (this.velocity.X < 0f && base.Center.X < Main.player[this.target].Center.X)
												{
													this.noTileCollide = false;
												}
											}
											else
											{
												if (this.velocity.Y > 0f && base.Center.Y > Main.player[this.target].Center.Y)
												{
													this.noTileCollide = false;
												}
												if (this.velocity.Y < 0f && base.Center.Y < Main.player[this.target].Center.Y)
												{
													this.noTileCollide = false;
												}
											}
											Vector2 vector81 = new Vector2(base.Center.X, base.Center.Y);
											float num667 = Main.npc[NPC.golemBoss].Center.X - vector81.X;
											float num668 = Main.npc[NPC.golemBoss].Center.Y - vector81.Y;
											num667 += Main.npc[NPC.golemBoss].velocity.X;
											num668 += Main.npc[NPC.golemBoss].velocity.Y;
											num668 -= 9f;
											if (this.type == 247)
											{
												num667 -= 84f;
											}
											else
											{
												num667 += 78f;
											}
											float num669 = (float)Math.Sqrt((double)(num667 * num667 + num668 * num668));
											if (Main.npc[NPC.golemBoss].life < Main.npc[NPC.golemBoss].lifeMax)
											{
												this.knockBackResist = 0f;
												if (num669 > 700f || this.collideX || this.collideY)
												{
													this.noTileCollide = true;
													this.ai[0] = 0f;
													return;
												}
											}
											else
											{
												bool flag43 = this.justHit;
												if (flag43)
												{
													int num670 = 0;
													while (num670 < 200)
													{
														if (Main.npc[num670].active && Main.npc[num670].type == 246)
														{
															if (Main.npc[num670].life < Main.npc[num670].lifeMax / 2)
															{
																if (this.knockBackResist == 0f)
																{
																	flag43 = false;
																}
																this.knockBackResist = 0f;
																break;
															}
															break;
														}
														else
														{
															num670++;
														}
													}
												}
												if (num669 > 600f || this.collideX || this.collideY || flag43)
												{
													this.noTileCollide = true;
													this.ai[0] = 0f;
													return;
												}
											}
										}
										else if (this.ai[0] == 3f)
										{
											this.noTileCollide = true;
											float num671 = 12f;
											float num672 = 0.4f;
											Vector2 vector82 = new Vector2(base.Center.X, base.Center.Y);
											float num673 = Main.player[this.target].Center.X - vector82.X;
											float num674 = Main.player[this.target].Center.Y - vector82.Y;
											float num675 = (float)Math.Sqrt((double)(num673 * num673 + num674 * num674));
											num675 = num671 / num675;
											num673 *= num675;
											num674 *= num675;
											if (this.velocity.X < num673)
											{
												this.velocity.X = this.velocity.X + num672;
												if (this.velocity.X < 0f && num673 > 0f)
												{
													this.velocity.X = this.velocity.X + num672 * 2f;
												}
											}
											else if (this.velocity.X > num673)
											{
												this.velocity.X = this.velocity.X - num672;
												if (this.velocity.X > 0f && num673 < 0f)
												{
													this.velocity.X = this.velocity.X - num672 * 2f;
												}
											}
											if (this.velocity.Y < num674)
											{
												this.velocity.Y = this.velocity.Y + num672;
												if (this.velocity.Y < 0f && num674 > 0f)
												{
													this.velocity.Y = this.velocity.Y + num672 * 2f;
												}
											}
											else if (this.velocity.Y > num674)
											{
												this.velocity.Y = this.velocity.Y - num672;
												if (this.velocity.Y > 0f && num674 < 0f)
												{
													this.velocity.Y = this.velocity.Y - num672 * 2f;
												}
											}
											this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X);
											if (this.type == 247)
											{
												this.rotation = (float)Math.Atan2((double)(-(double)this.velocity.Y), (double)(-(double)this.velocity.X));
												return;
											}
										}
									}
									else if (this.aiStyle == 48)
									{
										bool flag44 = false;
										if (!Collision.CanHit(base.Center, 1, 1, Main.player[this.target].Center, 1, 1))
										{
											this.noTileCollide = true;
											flag44 = true;
										}
										else
										{
											this.noTileCollide = false;
										}
										if (NPC.golemBoss < 0)
										{
											this.StrikeNPCNoInteraction(9999, 0f, 0, false, false, false);
											return;
										}
										this.TargetClosest(true);
										float num676 = 7f;
										float num677 = 0.05f;
										Vector2 vector83 = new Vector2(base.Center.X, base.Center.Y);
										float num678 = Main.player[this.target].Center.X - vector83.X;
										float num679 = Main.player[this.target].Center.Y - vector83.Y - 300f;
										float num680 = (float)Math.Sqrt((double)(num678 * num678 + num679 * num679));
										num680 = num676 / num680;
										num678 *= num680;
										num679 *= num680;
										if (this.velocity.X < num678)
										{
											this.velocity.X = this.velocity.X + num677;
											if (this.velocity.X < 0f && num678 > 0f)
											{
												this.velocity.X = this.velocity.X + num677;
											}
										}
										else if (this.velocity.X > num678)
										{
											this.velocity.X = this.velocity.X - num677;
											if (this.velocity.X > 0f && num678 < 0f)
											{
												this.velocity.X = this.velocity.X - num677;
											}
										}
										if (this.velocity.Y < num679)
										{
											this.velocity.Y = this.velocity.Y + num677;
											if (this.velocity.Y < 0f && num679 > 0f)
											{
												this.velocity.Y = this.velocity.Y + num677;
											}
										}
										else if (this.velocity.Y > num679)
										{
											this.velocity.Y = this.velocity.Y - num677;
											if (this.velocity.Y > 0f && num679 < 0f)
											{
												this.velocity.Y = this.velocity.Y - num677;
											}
										}
										this.ai[1] += 1f;
										if ((double)Main.npc[NPC.golemBoss].life < (double)Main.npc[NPC.golemBoss].lifeMax * 0.8)
										{
											this.ai[1] += 1f;
										}
										if ((double)Main.npc[NPC.golemBoss].life < (double)Main.npc[NPC.golemBoss].lifeMax * 0.6)
										{
											this.ai[1] += 1f;
										}
										if ((double)Main.npc[NPC.golemBoss].life < (double)Main.npc[NPC.golemBoss].lifeMax * 0.2)
										{
											this.ai[1] += 1f;
										}
										if ((double)Main.npc[NPC.golemBoss].life < (double)Main.npc[NPC.golemBoss].lifeMax * 0.1)
										{
											this.ai[1] += 1f;
										}
										int num681 = 360;
										if (this.ai[1] < 20f || this.ai[1] > (float)(num681 - 20))
										{
											this.localAI[0] = 1f;
										}
										else
										{
											this.localAI[0] = 0f;
										}
										if (flag44)
										{
											this.ai[1] = 20f;
										}
										if (this.ai[1] >= (float)num681)
										{
											this.TargetClosest(true);
											this.ai[1] = 0f;
											Vector2 vector84 = new Vector2(base.Center.X, base.Center.Y - 10f);
											float num682 = 8f;
											int num683 = 20;
											int num684 = 258;
											float num685 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector84.X;
											float num686 = Main.player[this.target].position.Y + (float)Main.player[this.target].height * 0.5f - vector84.Y;
											float num687 = (float)Math.Sqrt((double)(num685 * num685 + num686 * num686));
											num687 = num682 / num687;
											num685 *= num687;
											num686 *= num687;
											if (Main.netMode != 1)
											{
												Projectile.NewProjectile(vector84.X, vector84.Y, num685, num686, num684, num683, 0f, Main.myPlayer, 0f, 0f);
											}
										}
										this.ai[2] += 1f;
										if ((double)Main.npc[NPC.golemBoss].life < (double)Main.npc[NPC.golemBoss].lifeMax / 1.25)
										{
											this.ai[2] += 1f;
										}
										if ((double)Main.npc[NPC.golemBoss].life < (double)Main.npc[NPC.golemBoss].lifeMax / 1.5)
										{
											this.ai[2] += 1f;
										}
										if (Main.npc[NPC.golemBoss].life < Main.npc[NPC.golemBoss].lifeMax / 2)
										{
											this.ai[2] += 1f;
										}
										if (Main.npc[NPC.golemBoss].life < Main.npc[NPC.golemBoss].lifeMax / 3)
										{
											this.ai[2] += 1f;
										}
										if (Main.npc[NPC.golemBoss].life < Main.npc[NPC.golemBoss].lifeMax / 4)
										{
											this.ai[2] += 1f;
										}
										if (Main.npc[NPC.golemBoss].life < Main.npc[NPC.golemBoss].lifeMax / 5)
										{
											this.ai[2] += 1f;
										}
										if (Main.npc[NPC.golemBoss].life < Main.npc[NPC.golemBoss].lifeMax / 6)
										{
											this.ai[2] += 1f;
										}
										if (!Collision.CanHit(Main.npc[NPC.golemBoss].Center, 1, 1, Main.player[this.target].Center, 1, 1))
										{
											this.ai[2] += 4f;
										}
										if (this.ai[2] > (float)(100 + Main.rand.Next(4800)))
										{
											this.ai[2] = 0f;
											for (int num688 = 0; num688 < 2; num688++)
											{
												Vector2 vector85 = new Vector2(base.Center.X, base.Center.Y - 50f);
												if (num688 == 0)
												{
													vector85.X -= 14f;
												}
												else if (num688 == 1)
												{
													vector85.X += 14f;
												}
												float num689 = 11f;
												int num690 = 24;
												int num691 = 259;
												if ((double)Main.npc[NPC.golemBoss].life < (double)Main.npc[NPC.golemBoss].lifeMax * 0.5)
												{
													num690++;
													num689 += 0.25f;
												}
												if ((double)Main.npc[NPC.golemBoss].life < (double)Main.npc[NPC.golemBoss].lifeMax * 0.4)
												{
													num690++;
													num689 += 0.25f;
												}
												if ((double)Main.npc[NPC.golemBoss].life < (double)Main.npc[NPC.golemBoss].lifeMax * 0.3)
												{
													num690++;
													num689 += 0.25f;
												}
												if ((double)Main.npc[NPC.golemBoss].life < (double)Main.npc[NPC.golemBoss].lifeMax * 0.2)
												{
													num690++;
													num689 += 0.25f;
												}
												if ((double)Main.npc[NPC.golemBoss].life < (double)Main.npc[NPC.golemBoss].lifeMax * 0.1)
												{
													num690++;
													num689 += 0.25f;
												}
												float num692 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector85.X;
												float num693 = Main.player[this.target].position.Y + (float)Main.player[this.target].height * 0.5f - vector85.Y;
												float num694 = (float)Math.Sqrt((double)(num692 * num692 + num693 * num693));
												num694 = num689 / num694;
												num692 *= num694;
												num693 *= num694;
												vector85.X += num692 * 3f;
												vector85.Y += num693 * 3f;
												if (Main.netMode != 1)
												{
													int num695 = Projectile.NewProjectile(vector85.X, vector85.Y, num692, num693, num691, num690, 0f, Main.myPlayer, 0f, 0f);
													Main.projectile[num695].timeLeft = 300;
												}
											}
											return;
										}
									}
									else if (this.aiStyle == 49)
									{
										this.noGravity = true;
										this.TargetClosest(true);
										float num696 = 4f;
										float num697 = 0.25f;
										Vector2 vector86 = new Vector2(base.Center.X, base.Center.Y);
										float num698 = Main.player[this.target].Center.X - vector86.X;
										float num699 = Main.player[this.target].Center.Y - vector86.Y - 200f;
										float num700 = (float)Math.Sqrt((double)(num698 * num698 + num699 * num699));
										if (num700 < 20f)
										{
											num698 = this.velocity.X;
											num699 = this.velocity.Y;
										}
										else
										{
											num700 = num696 / num700;
											num698 *= num700;
											num699 *= num700;
										}
										if (this.velocity.X < num698)
										{
											this.velocity.X = this.velocity.X + num697;
											if (this.velocity.X < 0f && num698 > 0f)
											{
												this.velocity.X = this.velocity.X + num697 * 2f;
											}
										}
										else if (this.velocity.X > num698)
										{
											this.velocity.X = this.velocity.X - num697;
											if (this.velocity.X > 0f && num698 < 0f)
											{
												this.velocity.X = this.velocity.X - num697 * 2f;
											}
										}
										if (this.velocity.Y < num699)
										{
											this.velocity.Y = this.velocity.Y + num697;
											if (this.velocity.Y < 0f && num699 > 0f)
											{
												this.velocity.Y = this.velocity.Y + num697 * 2f;
											}
										}
										else if (this.velocity.Y > num699)
										{
											this.velocity.Y = this.velocity.Y - num697;
											if (this.velocity.Y > 0f && num699 < 0f)
											{
												this.velocity.Y = this.velocity.Y - num697 * 2f;
											}
										}
										if (this.position.X + (float)this.width > Main.player[this.target].position.X && this.position.X < Main.player[this.target].position.X + (float)Main.player[this.target].width && this.position.Y + (float)this.height < Main.player[this.target].position.Y && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height) && Main.netMode != 1)
										{
											this.ai[0] += 1f;
											if (this.ai[0] > 8f)
											{
												this.ai[0] = 0f;
												int num701 = (int)(this.position.X + 10f + (float)Main.rand.Next(this.width - 20));
												int num702 = (int)(this.position.Y + (float)this.height + 4f);
												Projectile.NewProjectile((float)num701, (float)num702, 0f, 5f, 264, 20, 0f, Main.myPlayer, 0f, 0f);
												return;
											}
										}
									}
									else
									{
										if (this.aiStyle == 50)
										{
											if (this.timeLeft > 5)
											{
												this.timeLeft = 5;
											}
											this.noTileCollide = true;
											this.velocity.Y = this.velocity.Y + 0.02f;
											if (this.velocity.Y < 0f && !Main.expertMode)
											{
												this.velocity.Y = this.velocity.Y * 0.99f;
											}
											if (this.velocity.Y > 1f)
											{
												this.velocity.Y = 1f;
											}
											this.TargetClosest(true);
											if (this.position.X + (float)this.width < Main.player[this.target].position.X)
											{
												if (this.velocity.X < 0f)
												{
													this.velocity.X = this.velocity.X * 0.98f;
												}
												if (Main.expertMode && this.velocity.X < 0f)
												{
													this.velocity.X = this.velocity.X * 0.98f;
												}
												this.velocity.X = this.velocity.X + 0.1f;
												if (Main.expertMode)
												{
													this.velocity.X = this.velocity.X + 0.1f;
												}
											}
											else if (this.position.X > Main.player[this.target].position.X + (float)Main.player[this.target].width)
											{
												if (this.velocity.X > 0f)
												{
													this.velocity.X = this.velocity.X * 0.98f;
												}
												if (Main.expertMode && this.velocity.X > 0f)
												{
													this.velocity.X = this.velocity.X * 0.98f;
												}
												this.velocity.X = this.velocity.X - 0.1f;
												if (Main.expertMode)
												{
													this.velocity.X = this.velocity.X + 0.1f;
												}
											}
											if (this.velocity.X > 5f || this.velocity.X < -5f)
											{
												this.velocity.X = this.velocity.X * 0.97f;
											}
											this.rotation = this.velocity.X * 0.2f;
											return;
										}
										if (this.aiStyle == 51)
										{
											bool flag45 = false;
											bool flag46 = false;
											this.TargetClosest(true);
											if (Main.player[this.target].dead)
											{
												flag46 = true;
												flag45 = true;
											}
											if (Main.netMode != 1)
											{
												int num703 = 6000;
												if (Math.Abs(base.Center.X - Main.player[this.target].Center.X) + Math.Abs(base.Center.Y - Main.player[this.target].Center.Y) > (float)num703)
												{
													this.active = false;
													this.life = 0;
													if (Main.netMode == 2)
													{
														NetMessage.SendData(23, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
													}
												}
											}
											NPC.plantBoss = this.whoAmI;
											if (this.localAI[0] == 0f && Main.netMode != 1)
											{
												this.localAI[0] = 1f;
												NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 263, this.whoAmI, 0f, 0f, 0f, 0f, 255);
												NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 263, this.whoAmI, 0f, 0f, 0f, 0f, 255);
												NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 263, this.whoAmI, 0f, 0f, 0f, 0f, 255);
											}
											int[] array2 = new int[3];
											float num704 = 0f;
											float num705 = 0f;
											int num706 = 0;
											for (int num707 = 0; num707 < 200; num707++)
											{
												if (Main.npc[num707].active && Main.npc[num707].aiStyle == 52)
												{
													num704 += Main.npc[num707].Center.X;
													num705 += Main.npc[num707].Center.Y;
													array2[num706] = num707;
													num706++;
													if (num706 > 2)
													{
														break;
													}
												}
											}
											num704 /= (float)num706;
											num705 /= (float)num706;
											float num708 = 2.5f;
											float num709 = 0.025f;
											if (this.life < this.lifeMax / 2)
											{
												num708 = 5f;
												num709 = 0.05f;
											}
											if (this.life < this.lifeMax / 4)
											{
												num708 = 7f;
											}
											if (!Main.player[this.target].ZoneJungle || (double)Main.player[this.target].position.Y < Main.worldSurface * 16.0 || Main.player[this.target].position.Y > (float)((Main.maxTilesY - 200) * 16))
											{
												flag45 = true;
												num708 += 8f;
												num709 = 0.15f;
											}
											if (Main.expertMode)
											{
												num708 += 1f;
												num708 *= 1.1f;
												num709 += 0.01f;
												num709 *= 1.1f;
											}
											Vector2 vector87 = new Vector2(num704, num705);
											float num710 = Main.player[this.target].Center.X - vector87.X;
											float num711 = Main.player[this.target].Center.Y - vector87.Y;
											if (flag46)
											{
												num711 *= -1f;
												num710 *= -1f;
												num708 += 8f;
											}
											float num712 = (float)Math.Sqrt((double)(num710 * num710 + num711 * num711));
											int num713 = 500;
											if (flag45)
											{
												num713 += 350;
											}
											if (Main.expertMode)
											{
												num713 += 150;
											}
											if (num712 >= (float)num713)
											{
												num712 = (float)num713 / num712;
												num710 *= num712;
												num711 *= num712;
											}
											num704 += num710;
											num705 += num711;
											vector87 = new Vector2(base.Center.X, base.Center.Y);
											num710 = num704 - vector87.X;
											num711 = num705 - vector87.Y;
											num712 = (float)Math.Sqrt((double)(num710 * num710 + num711 * num711));
											if (num712 < num708)
											{
												num710 = this.velocity.X;
												num711 = this.velocity.Y;
											}
											else
											{
												num712 = num708 / num712;
												num710 *= num712;
												num711 *= num712;
											}
											if (this.velocity.X < num710)
											{
												this.velocity.X = this.velocity.X + num709;
												if (this.velocity.X < 0f && num710 > 0f)
												{
													this.velocity.X = this.velocity.X + num709 * 2f;
												}
											}
											else if (this.velocity.X > num710)
											{
												this.velocity.X = this.velocity.X - num709;
												if (this.velocity.X > 0f && num710 < 0f)
												{
													this.velocity.X = this.velocity.X - num709 * 2f;
												}
											}
											if (this.velocity.Y < num711)
											{
												this.velocity.Y = this.velocity.Y + num709;
												if (this.velocity.Y < 0f && num711 > 0f)
												{
													this.velocity.Y = this.velocity.Y + num709 * 2f;
												}
											}
											else if (this.velocity.Y > num711)
											{
												this.velocity.Y = this.velocity.Y - num709;
												if (this.velocity.Y > 0f && num711 < 0f)
												{
													this.velocity.Y = this.velocity.Y - num709 * 2f;
												}
											}
											Vector2 vector88 = new Vector2(base.Center.X, base.Center.Y);
											float num714 = Main.player[this.target].Center.X - vector88.X;
											float num715 = Main.player[this.target].Center.Y - vector88.Y;
											this.rotation = (float)Math.Atan2((double)num715, (double)num714) + 1.57f;
											if (this.life > this.lifeMax / 2)
											{
												this.defense = 36;
												this.damage = (int)(50f * Main.damageMultiplier);
												if (flag45)
												{
													this.defense *= 2;
													this.damage *= 2;
												}
												if (Main.netMode != 1)
												{
													this.localAI[1] += 1f;
													if ((double)this.life < (double)this.lifeMax * 0.9)
													{
														this.localAI[1] += 1f;
													}
													if ((double)this.life < (double)this.lifeMax * 0.8)
													{
														this.localAI[1] += 1f;
													}
													if ((double)this.life < (double)this.lifeMax * 0.7)
													{
														this.localAI[1] += 1f;
													}
													if ((double)this.life < (double)this.lifeMax * 0.6)
													{
														this.localAI[1] += 1f;
													}
													if (flag45)
													{
														this.localAI[1] += 3f;
													}
													if (Main.expertMode)
													{
														this.localAI[1] += 1f;
													}
													if (Main.expertMode && this.justHit && Main.rand.Next(2) == 0)
													{
														this.localAI[3] = 1f;
													}
													if (this.localAI[1] > 80f)
													{
														this.localAI[1] = 0f;
														bool flag47 = Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height);
														if (this.localAI[3] > 0f)
														{
															flag47 = true;
															this.localAI[3] = 0f;
														}
														if (flag47)
														{
															Vector2 vector89 = new Vector2(base.Center.X, base.Center.Y);
															float num716 = 15f;
															if (Main.expertMode)
															{
																num716 = 17f;
															}
															float num717 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector89.X;
															float num718 = Main.player[this.target].position.Y + (float)Main.player[this.target].height * 0.5f - vector89.Y;
															float num719 = (float)Math.Sqrt((double)(num717 * num717 + num718 * num718));
															num719 = num716 / num719;
															num717 *= num719;
															num718 *= num719;
															int num720 = 22;
															int num721 = 275;
															int maxValue2 = 4;
															int maxValue3 = 8;
															if (Main.expertMode)
															{
																maxValue2 = 2;
																maxValue3 = 6;
															}
															if ((double)this.life < (double)this.lifeMax * 0.8 && Main.rand.Next(maxValue2) == 0)
															{
																num720 = 27;
																this.localAI[1] = -30f;
																num721 = 276;
															}
															else if ((double)this.life < (double)this.lifeMax * 0.8 && Main.rand.Next(maxValue3) == 0)
															{
																num720 = 31;
																this.localAI[1] = -120f;
																num721 = 277;
															}
															if (flag45)
															{
																num720 *= 2;
															}
															if (Main.expertMode)
															{
																num720 = (int)((double)num720 * 0.9);
															}
															vector89.X += num717 * 3f;
															vector89.Y += num718 * 3f;
															int num722 = Projectile.NewProjectile(vector89.X, vector89.Y, num717, num718, num721, num720, 0f, Main.myPlayer, 0f, 0f);
															if (num721 != 277)
															{
																Main.projectile[num722].timeLeft = 300;
																return;
															}
														}
													}
												}
											}
											else
											{
												this.defense = 10;
												this.damage = (int)(70f * Main.damageMultiplier);
												if (flag45)
												{
													this.defense *= 4;
													this.damage *= 2;
												}
												if (Main.netMode != 1)
												{
													if (this.localAI[0] == 1f)
													{
														this.localAI[0] = 2f;
														for (int num723 = 0; num723 < 8; num723++)
														{
															NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 264, this.whoAmI, 0f, 0f, 0f, 0f, 255);
														}
														if (Main.expertMode)
														{
															for (int num724 = 0; num724 < 200; num724++)
															{
																if (Main.npc[num724].active && Main.npc[num724].aiStyle == 52)
																{
																	for (int num725 = 0; num725 < 3; num725++)
																	{
																		int num726 = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 264, this.whoAmI, 0f, 0f, 0f, 0f, 255);
																		Main.npc[num726].ai[3] = (float)(num724 + 1);
																	}
																}
															}
														}
													}
													else if (Main.expertMode && Main.rand.Next(60) == 0)
													{
														int num727 = 0;
														for (int num728 = 0; num728 < 200; num728++)
														{
															if (Main.npc[num728].active && Main.npc[num728].type == 264 && Main.npc[num728].ai[3] == 0f)
															{
																num727++;
															}
														}
														if (num727 < 8 && Main.rand.Next((num727 + 1) * 10) <= 1)
														{
															NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 264, this.whoAmI, 0f, 0f, 0f, 0f, 255);
														}
													}
												}
												if (this.localAI[2] == 0f)
												{
													Gore.NewGore(new Vector2(this.position.X + (float)Main.rand.Next(this.width), this.position.Y + (float)Main.rand.Next(this.height)), this.velocity, 378, this.scale);
													Gore.NewGore(new Vector2(this.position.X + (float)Main.rand.Next(this.width), this.position.Y + (float)Main.rand.Next(this.height)), this.velocity, 379, this.scale);
													Gore.NewGore(new Vector2(this.position.X + (float)Main.rand.Next(this.width), this.position.Y + (float)Main.rand.Next(this.height)), this.velocity, 380, this.scale);
													this.localAI[2] = 1f;
												}
												this.localAI[1] += 1f;
												if ((double)this.life < (double)this.lifeMax * 0.4)
												{
													this.localAI[1] += 1f;
												}
												if ((double)this.life < (double)this.lifeMax * 0.3)
												{
													this.localAI[1] += 1f;
												}
												if ((double)this.life < (double)this.lifeMax * 0.2)
												{
													this.localAI[1] += 1f;
												}
												if ((double)this.life < (double)this.lifeMax * 0.1)
												{
													this.localAI[1] += 1f;
												}
												if (this.localAI[1] >= 350f)
												{
													float num729 = 8f;
													Vector2 vector90 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
													float num730 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector90.X + (float)Main.rand.Next(-10, 11);
													float num731 = Math.Abs(num730 * 0.2f);
													float num732 = Main.player[this.target].position.Y + (float)Main.player[this.target].height * 0.5f - vector90.Y + (float)Main.rand.Next(-10, 11);
													if (num732 > 0f)
													{
														num731 = 0f;
													}
													num732 -= num731;
													float num733 = (float)Math.Sqrt((double)(num730 * num730 + num732 * num732));
													num733 = num729 / num733;
													num730 *= num733;
													num732 *= num733;
													int num734 = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 265, 0, 0f, 0f, 0f, 0f, 255);
													Main.npc[num734].velocity.X = num730;
													Main.npc[num734].velocity.Y = num732;
													Main.npc[num734].netUpdate = true;
													this.localAI[1] = 0f;
													return;
												}
											}
										}
										else if (this.aiStyle == 52)
										{
											bool flag48 = false;
											bool flag49 = false;
											if (NPC.plantBoss < 0)
											{
												this.StrikeNPCNoInteraction(9999, 0f, 0, false, false, false);
												this.netUpdate = true;
												return;
											}
											if (Main.player[Main.npc[NPC.plantBoss].target].dead)
											{
												flag49 = true;
											}
											if ((NPC.plantBoss != -1 && !Main.player[Main.npc[NPC.plantBoss].target].ZoneJungle) || (double)Main.player[Main.npc[NPC.plantBoss].target].position.Y < Main.worldSurface * 16.0 || Main.player[Main.npc[NPC.plantBoss].target].position.Y > (float)((Main.maxTilesY - 200) * 16) || flag49)
											{
												this.localAI[0] -= 4f;
												flag48 = true;
											}
											if (Main.netMode == 1)
											{
												if (this.ai[0] == 0f)
												{
													this.ai[0] = (float)((int)(base.Center.X / 16f));
												}
												if (this.ai[1] == 0f)
												{
													this.ai[1] = (float)((int)(base.Center.X / 16f));
												}
											}
											if (Main.netMode != 1)
											{
												if (this.ai[0] == 0f || this.ai[1] == 0f)
												{
													this.localAI[0] = 0f;
												}
												this.localAI[0] -= 1f;
												if (Main.npc[NPC.plantBoss].life < Main.npc[NPC.plantBoss].lifeMax / 2)
												{
													this.localAI[0] -= 2f;
												}
												if (Main.npc[NPC.plantBoss].life < Main.npc[NPC.plantBoss].lifeMax / 4)
												{
													this.localAI[0] -= 2f;
												}
												if (flag48)
												{
													this.localAI[0] -= 6f;
												}
												if (!flag49 && this.localAI[0] <= 0f && this.ai[0] != 0f)
												{
													for (int num735 = 0; num735 < 200; num735++)
													{
														if (num735 != this.whoAmI && Main.npc[num735].active && Main.npc[num735].type == this.type && (Main.npc[num735].velocity.X != 0f || Main.npc[num735].velocity.Y != 0f))
														{
															this.localAI[0] = (float)Main.rand.Next(60, 300);
														}
													}
												}
												if (this.localAI[0] <= 0f)
												{
													this.localAI[0] = (float)Main.rand.Next(300, 600);
													bool flag50 = false;
													int num736 = 0;
													while (!flag50 && num736 <= 1000)
													{
														num736++;
														int num737 = (int)(Main.player[Main.npc[NPC.plantBoss].target].Center.X / 16f);
														int num738 = (int)(Main.player[Main.npc[NPC.plantBoss].target].Center.Y / 16f);
														if (this.ai[0] == 0f)
														{
															num737 = (int)((Main.player[Main.npc[NPC.plantBoss].target].Center.X + Main.npc[NPC.plantBoss].Center.X) / 32f);
															num738 = (int)((Main.player[Main.npc[NPC.plantBoss].target].Center.Y + Main.npc[NPC.plantBoss].Center.Y) / 32f);
														}
														if (flag49)
														{
															num737 = (int)Main.npc[NPC.plantBoss].position.X / 16;
															num738 = (int)(Main.npc[NPC.plantBoss].position.Y + 400f) / 16;
														}
														int num739 = 20;
														num739 += (int)(100f * ((float)num736 / 1000f));
														int num740 = num737 + Main.rand.Next(-num739, num739 + 1);
														int num741 = num738 + Main.rand.Next(-num739, num739 + 1);
														if (Main.npc[NPC.plantBoss].life < Main.npc[NPC.plantBoss].lifeMax / 2 && Main.rand.Next(6) == 0)
														{
															this.TargetClosest(true);
															int num742 = (int)(Main.player[this.target].Center.X / 16f);
															int num743 = (int)(Main.player[this.target].Center.Y / 16f);
															if (Main.tile[num742, num743].wall > 0)
															{
																num740 = num742;
																num741 = num743;
															}
														}
														try
														{
															if (WorldGen.SolidTile(num740, num741) || (Main.tile[num740, num741].wall > 0 && (num736 > 500 || Main.npc[NPC.plantBoss].life < Main.npc[NPC.plantBoss].lifeMax / 2)))
															{
																flag50 = true;
																this.ai[0] = (float)num740;
																this.ai[1] = (float)num741;
																this.netUpdate = true;
															}
														}
														catch
														{
														}
													}
												}
											}
											if (this.ai[0] > 0f && this.ai[1] > 0f)
											{
												float num744 = 6f;
												if (Main.npc[NPC.plantBoss].life < Main.npc[NPC.plantBoss].lifeMax / 2)
												{
													num744 = 8f;
												}
												if (Main.npc[NPC.plantBoss].life < Main.npc[NPC.plantBoss].lifeMax / 4)
												{
													num744 = 10f;
												}
												if (Main.expertMode)
												{
													num744 += 1f;
												}
												if (Main.expertMode && Main.npc[NPC.plantBoss].life < Main.npc[NPC.plantBoss].lifeMax / 2)
												{
													num744 += 1f;
												}
												if (flag48)
												{
													num744 *= 2f;
												}
												if (flag49)
												{
													num744 *= 2f;
												}
												Vector2 vector91 = new Vector2(base.Center.X, base.Center.Y);
												float num745 = this.ai[0] * 16f - 8f - vector91.X;
												float num746 = this.ai[1] * 16f - 8f - vector91.Y;
												float num747 = (float)Math.Sqrt((double)(num745 * num745 + num746 * num746));
												if (num747 < 12f + num744)
												{
													this.velocity.X = num745;
													this.velocity.Y = num746;
												}
												else
												{
													num747 = num744 / num747;
													this.velocity.X = num745 * num747;
													this.velocity.Y = num746 * num747;
												}
												Vector2 vector92 = new Vector2(base.Center.X, base.Center.Y);
												float num748 = Main.npc[NPC.plantBoss].Center.X - vector92.X;
												float num749 = Main.npc[NPC.plantBoss].Center.Y - vector92.Y;
												this.rotation = (float)Math.Atan2((double)num749, (double)num748) - 1.57f;
												return;
											}
										}
										else if (this.aiStyle == 53)
										{
											if (NPC.plantBoss < 0)
											{
												this.StrikeNPCNoInteraction(9999, 0f, 0, false, false, false);
												this.netUpdate = true;
												return;
											}
											int num750 = NPC.plantBoss;
											if (this.ai[3] > 0f)
											{
												num750 = (int)this.ai[3] - 1;
											}
											if (Main.netMode != 1)
											{
												this.localAI[0] -= 1f;
												if (this.localAI[0] <= 0f)
												{
													this.localAI[0] = (float)Main.rand.Next(120, 480);
													this.ai[0] = (float)Main.rand.Next(-100, 101);
													this.ai[1] = (float)Main.rand.Next(-100, 101);
													this.netUpdate = true;
												}
											}
											this.TargetClosest(true);
											float num751 = 0.2f;
											float num752 = 200f;
											if ((double)Main.npc[NPC.plantBoss].life < (double)Main.npc[NPC.plantBoss].lifeMax * 0.25)
											{
												num752 += 100f;
											}
											if ((double)Main.npc[NPC.plantBoss].life < (double)Main.npc[NPC.plantBoss].lifeMax * 0.1)
											{
												num752 += 100f;
											}
											if (Main.expertMode)
											{
												float num753 = 1f - (float)this.life / (float)this.lifeMax;
												num752 += num753 * 300f;
												num751 += 0.3f;
											}
											if (!Main.npc[num750].active || NPC.plantBoss < 0)
											{
												this.active = false;
												return;
											}
											float num754 = Main.npc[num750].position.X + (float)(Main.npc[num750].width / 2);
											float num755 = Main.npc[num750].position.Y + (float)(Main.npc[num750].height / 2);
											Vector2 vector93 = new Vector2(num754, num755);
											float num756 = num754 + this.ai[0];
											float num757 = num755 + this.ai[1];
											float num758 = num756 - vector93.X;
											float num759 = num757 - vector93.Y;
											float num760 = (float)Math.Sqrt((double)(num758 * num758 + num759 * num759));
											num760 = num752 / num760;
											num758 *= num760;
											num759 *= num760;
											if (this.position.X < num754 + num758)
											{
												this.velocity.X = this.velocity.X + num751;
												if (this.velocity.X < 0f && num758 > 0f)
												{
													this.velocity.X = this.velocity.X * 0.9f;
												}
											}
											else if (this.position.X > num754 + num758)
											{
												this.velocity.X = this.velocity.X - num751;
												if (this.velocity.X > 0f && num758 < 0f)
												{
													this.velocity.X = this.velocity.X * 0.9f;
												}
											}
											if (this.position.Y < num755 + num759)
											{
												this.velocity.Y = this.velocity.Y + num751;
												if (this.velocity.Y < 0f && num759 > 0f)
												{
													this.velocity.Y = this.velocity.Y * 0.9f;
												}
											}
											else if (this.position.Y > num755 + num759)
											{
												this.velocity.Y = this.velocity.Y - num751;
												if (this.velocity.Y > 0f && num759 < 0f)
												{
													this.velocity.Y = this.velocity.Y * 0.9f;
												}
											}
											if (this.velocity.X > 8f)
											{
												this.velocity.X = 8f;
											}
											if (this.velocity.X < -8f)
											{
												this.velocity.X = -8f;
											}
											if (this.velocity.Y > 8f)
											{
												this.velocity.Y = 8f;
											}
											if (this.velocity.Y < -8f)
											{
												this.velocity.Y = -8f;
											}
											if (num758 > 0f)
											{
												this.spriteDirection = 1;
												this.rotation = (float)Math.Atan2((double)num759, (double)num758);
											}
											if (num758 < 0f)
											{
												this.spriteDirection = -1;
												this.rotation = (float)Math.Atan2((double)num759, (double)num758) + 3.14f;
												return;
											}
										}
										else if (this.aiStyle == 54)
										{
											NPC.crimsonBoss = this.whoAmI;
											if (Main.netMode != 1 && this.localAI[0] == 0f)
											{
												this.localAI[0] = 1f;
												for (int num761 = 0; num761 < 20; num761++)
												{
													float num762 = base.Center.X;
													float num763 = base.Center.Y;
													num762 += (float)Main.rand.Next(-this.width, this.width);
													num763 += (float)Main.rand.Next(-this.height, this.height);
													int num764 = NPC.NewNPC((int)num762, (int)num763, 267, 0, 0f, 0f, 0f, 0f, 255);
													Main.npc[num764].velocity = new Vector2((float)Main.rand.Next(-30, 31) * 0.1f, (float)Main.rand.Next(-30, 31) * 0.1f);
													Main.npc[num764].netUpdate = true;
												}
											}
											if (Main.netMode != 1)
											{
												this.TargetClosest(true);
												int num765 = 6000;
												if (Math.Abs(base.Center.X - Main.player[this.target].Center.X) + Math.Abs(base.Center.Y - Main.player[this.target].Center.Y) > (float)num765)
												{
													this.active = false;
													this.life = 0;
													if (Main.netMode == 2)
													{
														NetMessage.SendData(23, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
													}
												}
											}
											if (this.ai[0] < 0f)
											{
												if (this.localAI[2] == 0f)
												{
													Main.PlaySound(3, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
													this.localAI[2] = 1f;
													Gore.NewGore(this.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 392, 1f);
													Gore.NewGore(this.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 393, 1f);
													Gore.NewGore(this.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 394, 1f);
													Gore.NewGore(this.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 395, 1f);
													for (int num766 = 0; num766 < 20; num766++)
													{
														Dust.NewDust(this.position, this.width, this.height, 5, (float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f, 0, default(Color), 1f);
													}
													Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
												}
												this.dontTakeDamage = false;
												this.knockBackResist = 0.5f;
												if (Main.expertMode)
												{
													this.knockBackResist *= Main.expertKnockBack;
												}
												this.TargetClosest(true);
												Vector2 vector94 = new Vector2(base.Center.X, base.Center.Y);
												float num767 = Main.player[this.target].Center.X - vector94.X;
												float num768 = Main.player[this.target].Center.Y - vector94.Y;
												float num769 = (float)Math.Sqrt((double)(num767 * num767 + num768 * num768));
												float num770 = 8f;
												num769 = num770 / num769;
												num767 *= num769;
												num768 *= num769;
												this.velocity.X = (this.velocity.X * 50f + num767) / 51f;
												this.velocity.Y = (this.velocity.Y * 50f + num768) / 51f;
												if (this.ai[0] == -1f)
												{
													if (Main.netMode != 1)
													{
														this.localAI[1] += 1f;
														if (this.justHit)
														{
															this.localAI[1] -= (float)Main.rand.Next(5);
														}
														int num771 = 60 + Main.rand.Next(120);
														if (Main.netMode != 0)
														{
															num771 += Main.rand.Next(30, 90);
														}
														if (this.localAI[1] >= (float)num771)
														{
															this.localAI[1] = 0f;
															this.TargetClosest(true);
															int num772 = 0;
															int num773;
															int num774;
															while (true)
															{
																num772++;
																num773 = (int)Main.player[this.target].Center.X / 16;
																num774 = (int)Main.player[this.target].Center.Y / 16;
																if (Main.rand.Next(2) == 0)
																{
																	num773 += Main.rand.Next(7, 13);
																}
																else
																{
																	num773 -= Main.rand.Next(7, 13);
																}
																if (Main.rand.Next(2) == 0)
																{
																	num774 += Main.rand.Next(7, 13);
																}
																else
																{
																	num774 -= Main.rand.Next(7, 13);
																}
																if (!WorldGen.SolidTile(num773, num774))
																{
																	break;
																}
																if (num772 > 100)
																{
																	goto Block_2789;
																}
															}
															this.ai[3] = 0f;
															this.ai[0] = -2f;
															this.ai[1] = (float)num773;
															this.ai[2] = (float)num774;
															this.netUpdate = true;
															this.netSpam = 0;
															Block_2789:;
														}
													}
												}
												else if (this.ai[0] == -2f)
												{
													this.velocity *= 0.9f;
													if (Main.netMode != 0)
													{
														this.ai[3] += 15f;
													}
													else
													{
														this.ai[3] += 25f;
													}
													if (this.ai[3] >= 255f)
													{
														this.ai[3] = 255f;
														this.position.X = this.ai[1] * 16f - (float)(this.width / 2);
														this.position.Y = this.ai[2] * 16f - (float)(this.height / 2);
														Main.PlaySound(SoundID.Item8, base.Center);
														this.ai[0] = -3f;
														this.netUpdate = true;
														this.netSpam = 0;
													}
													this.alpha = (int)this.ai[3];
												}
												else if (this.ai[0] == -3f)
												{
													if (Main.netMode != 0)
													{
														this.ai[3] -= 15f;
													}
													else
													{
														this.ai[3] -= 25f;
													}
													if (this.ai[3] <= 0f)
													{
														this.ai[3] = 0f;
														this.ai[0] = -1f;
														this.netUpdate = true;
														this.netSpam = 0;
													}
													this.alpha = (int)this.ai[3];
												}
											}
											else
											{
												this.TargetClosest(true);
												Vector2 vector95 = new Vector2(base.Center.X, base.Center.Y);
												float num775 = Main.player[this.target].Center.X - vector95.X;
												float num776 = Main.player[this.target].Center.Y - vector95.Y;
												float num777 = (float)Math.Sqrt((double)(num775 * num775 + num776 * num776));
												float num778 = 1f;
												if (num777 < num778)
												{
													this.velocity.X = num775;
													this.velocity.Y = num776;
												}
												else
												{
													num777 = num778 / num777;
													this.velocity.X = num775 * num777;
													this.velocity.Y = num776 * num777;
												}
												if (this.ai[0] == 0f)
												{
													if (Main.netMode != 1)
													{
														int num779 = 0;
														for (int num780 = 0; num780 < 200; num780++)
														{
															if (Main.npc[num780].active && Main.npc[num780].type == 267)
															{
																num779++;
															}
														}
														if (num779 == 0)
														{
															this.ai[0] = -1f;
															this.localAI[1] = 0f;
															this.alpha = 0;
															this.netUpdate = true;
														}
														this.localAI[1] += 1f;
														if (this.localAI[1] >= (float)(120 + Main.rand.Next(300)))
														{
															this.localAI[1] = 0f;
															this.TargetClosest(true);
															int num781 = 0;
															int num782;
															int num783;
															while (true)
															{
																num781++;
																num782 = (int)Main.player[this.target].Center.X / 16;
																num783 = (int)Main.player[this.target].Center.Y / 16;
																num782 += Main.rand.Next(-50, 51);
																num783 += Main.rand.Next(-50, 51);
																if (!WorldGen.SolidTile(num782, num783) && Collision.CanHit(new Vector2((float)(num782 * 16), (float)(num783 * 16)), 1, 1, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
																{
																	break;
																}
																if (num781 > 100)
																{
																	goto Block_2806;
																}
															}
															this.ai[0] = 1f;
															this.ai[1] = (float)num782;
															this.ai[2] = (float)num783;
															this.netUpdate = true;
															Block_2806:;
														}
													}
												}
												else if (this.ai[0] == 1f)
												{
													this.alpha += 5;
													if (this.alpha >= 255)
													{
														Main.PlaySound(SoundID.Item8, base.Center);
														this.alpha = 255;
														this.position.X = this.ai[1] * 16f - (float)(this.width / 2);
														this.position.Y = this.ai[2] * 16f - (float)(this.height / 2);
														this.ai[0] = 2f;
													}
												}
												else if (this.ai[0] == 2f)
												{
													this.alpha -= 5;
													if (this.alpha <= 0)
													{
														this.alpha = 0;
														this.ai[0] = 0f;
													}
												}
											}
											if (Main.player[this.target].dead || !Main.player[this.target].ZoneCrimson)
											{
												if (this.localAI[3] < 120f)
												{
													this.localAI[3] += 1f;
												}
												if (this.localAI[3] > 60f)
												{
													this.velocity.Y = this.velocity.Y + (this.localAI[3] - 60f) * 0.25f;
												}
												this.ai[0] = 2f;
												this.alpha = 10;
												return;
											}
											if (this.localAI[3] > 0f)
											{
												this.localAI[3] -= 1f;
												return;
											}
										}
										else if (this.aiStyle == 55)
										{
											if (NPC.crimsonBoss < 0)
											{
												this.active = false;
												this.netUpdate = true;
												return;
											}
											if (this.ai[0] == 0f)
											{
												Vector2 vector96 = new Vector2(base.Center.X, base.Center.Y);
												float num784 = Main.npc[NPC.crimsonBoss].Center.X - vector96.X;
												float num785 = Main.npc[NPC.crimsonBoss].Center.Y - vector96.Y;
												float num786 = (float)Math.Sqrt((double)(num784 * num784 + num785 * num785));
												if (num786 > 90f)
												{
													num786 = 8f / num786;
													num784 *= num786;
													num785 *= num786;
													this.velocity.X = (this.velocity.X * 15f + num784) / 16f;
													this.velocity.Y = (this.velocity.Y * 15f + num785) / 16f;
													return;
												}
												if (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) < 8f)
												{
													this.velocity.Y = this.velocity.Y * 1.05f;
													this.velocity.X = this.velocity.X * 1.05f;
												}
												if (Main.netMode != 1 && ((Main.expertMode && Main.rand.Next(100) == 0) || Main.rand.Next(200) == 0))
												{
													this.TargetClosest(true);
													vector96 = new Vector2(base.Center.X, base.Center.Y);
													num784 = Main.player[this.target].Center.X - vector96.X;
													num785 = Main.player[this.target].Center.Y - vector96.Y;
													num786 = (float)Math.Sqrt((double)(num784 * num784 + num785 * num785));
													num786 = 8f / num786;
													this.velocity.X = num784 * num786;
													this.velocity.Y = num785 * num786;
													this.ai[0] = 1f;
													this.netUpdate = true;
													return;
												}
											}
											else
											{
												if (Main.expertMode)
												{
													Vector2 value4 = Main.player[this.target].Center - base.Center;
													value4.Normalize();
													value4 *= 9f;
													this.velocity = (this.velocity * 99f + value4) / 100f;
												}
												Vector2 vector97 = new Vector2(base.Center.X, base.Center.Y);
												float num787 = Main.npc[NPC.crimsonBoss].Center.X - vector97.X;
												float num788 = Main.npc[NPC.crimsonBoss].Center.Y - vector97.Y;
												float num789 = (float)Math.Sqrt((double)(num787 * num787 + num788 * num788));
												if (num789 > 700f || this.justHit)
												{
													this.ai[0] = 0f;
													return;
												}
											}
										}
										else
										{
											if (this.aiStyle == 56)
											{
												this.TargetClosest(true);
												Vector2 vector98 = new Vector2(base.Center.X, base.Center.Y);
												float num790 = Main.player[this.target].Center.X - vector98.X;
												float num791 = Main.player[this.target].Center.Y - vector98.Y;
												float num792 = (float)Math.Sqrt((double)(num790 * num790 + num791 * num791));
												float num793 = 12f;
												num792 = num793 / num792;
												num790 *= num792;
												num791 *= num792;
												this.velocity.X = (this.velocity.X * 100f + num790) / 101f;
												this.velocity.Y = (this.velocity.Y * 100f + num791) / 101f;
												this.rotation = (float)Math.Atan2((double)num791, (double)num790) - 1.57f;
												int num794 = Dust.NewDust(this.position, this.width, this.height, 180, 0f, 0f, 0, default(Color), 1f);
												Main.dust[num794].velocity *= 0.1f;
												Main.dust[num794].scale = 1.3f;
												Main.dust[num794].noGravity = true;
												return;
											}
											if (this.aiStyle == 57)
											{
												float num795 = 2f;
												this.noGravity = true;
												this.noTileCollide = true;
												if (!Main.dayTime)
												{
													this.TargetClosest(true);
												}
												bool flag51 = false;
												if ((double)this.life < (double)this.lifeMax * 0.75)
												{
													num795 = 3f;
												}
												if ((double)this.life < (double)this.lifeMax * 0.5)
												{
													num795 = 4f;
												}
												if (Main.dayTime)
												{
													if (this.timeLeft > 10)
													{
														this.timeLeft = 10;
													}
													num795 = 8f;
												}
												else if (this.ai[0] == 0f)
												{
													this.ai[1] += 1f;
													if ((double)this.life < (double)this.lifeMax * 0.5)
													{
														this.ai[1] += 1f;
													}
													if ((double)this.life < (double)this.lifeMax * 0.25)
													{
														this.ai[1] += 1f;
													}
													if (this.ai[1] >= 300f && Main.netMode != 1)
													{
														this.ai[1] = 0f;
														if ((double)this.life < (double)this.lifeMax * 0.25 && this.type != 344)
														{
															this.ai[0] = (float)Main.rand.Next(3, 5);
														}
														else
														{
															this.ai[0] = (float)Main.rand.Next(1, 3);
														}
														this.netUpdate = true;
													}
												}
												else if (this.ai[0] == 1f)
												{
													if (this.type == 344)
													{
														flag51 = true;
														this.ai[1] += 1f;
														if (this.ai[1] % 5f == 0f)
														{
															Vector2 vector99 = new Vector2(this.position.X + 20f + (float)Main.rand.Next(this.width - 40), this.position.Y + 20f + (float)Main.rand.Next(this.height - 40));
															float num796 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector99.X;
															float num797 = Main.player[this.target].position.Y - vector99.Y;
															num796 += (float)Main.rand.Next(-50, 51);
															num797 += (float)Main.rand.Next(-50, 51);
															num797 -= Math.Abs(num796) * ((float)Main.rand.Next(0, 21) * 0.01f);
															float num798 = (float)Math.Sqrt((double)(num796 * num796 + num797 * num797));
															float num799 = 12.5f;
															num798 = num799 / num798;
															num796 *= num798;
															num797 *= num798;
															num796 *= 1f + (float)Main.rand.Next(-20, 21) * 0.02f;
															num797 *= 1f + (float)Main.rand.Next(-20, 21) * 0.02f;
															Projectile.NewProjectile(vector99.X, vector99.Y, num796, num797, 345, 43, 0f, Main.myPlayer, (float)Main.rand.Next(0, 31), 0f);
														}
														if (this.ai[1] >= 180f)
														{
															this.ai[1] = 0f;
															this.ai[0] = 0f;
														}
													}
													else
													{
														flag51 = true;
														this.ai[1] += 1f;
														if (this.ai[1] % 15f == 0f)
														{
															Vector2 vector100 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f + 30f);
															float num800 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector100.X;
															float num801 = Main.player[this.target].position.Y - vector100.Y;
															float num802 = (float)Math.Sqrt((double)(num800 * num800 + num801 * num801));
															float num803 = 10f;
															num802 = num803 / num802;
															num800 *= num802;
															num801 *= num802;
															num800 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
															num801 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
															Projectile.NewProjectile(vector100.X, vector100.Y, num800, num801, 325, 50, 0f, Main.myPlayer, 0f, 0f);
														}
														if (this.ai[1] >= 120f)
														{
															this.ai[1] = 0f;
															this.ai[0] = 0f;
														}
													}
												}
												else if (this.ai[0] == 2f)
												{
													if (this.type == 344)
													{
														flag51 = true;
														this.ai[1] += 1f;
														if (this.ai[1] > 60f && this.ai[1] < 240f && this.ai[1] % 15f == 0f)
														{
															float num804 = 4.5f;
															Vector2 vector101 = new Vector2(this.position.X + 20f + (float)Main.rand.Next(this.width - 40), this.position.Y + 60f + (float)Main.rand.Next(this.height - 80));
															float num805 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector101.X;
															float num806 = Main.player[this.target].position.Y - vector101.Y;
															num806 -= Math.Abs(num805) * 0.3f;
															num804 += Math.Abs(num805) * 0.004f;
															num805 += (float)Main.rand.Next(-50, 51);
															num806 -= (float)Main.rand.Next(50, 201);
															float num807 = (float)Math.Sqrt((double)(num805 * num805 + num806 * num806));
															num807 = num804 / num807;
															num805 *= num807;
															num806 *= num807;
															num805 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
															num806 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
															Projectile.NewProjectile(vector101.X, vector101.Y, num805, num806, 346, 57, 0f, Main.myPlayer, 0f, (float)Main.rand.Next(2));
														}
														if (this.ai[1] >= 300f)
														{
															this.ai[1] = 0f;
															this.ai[0] = 0f;
														}
													}
													else
													{
														flag51 = true;
														this.ai[1] += 1f;
														if (this.ai[1] > 60f && this.ai[1] < 240f && this.ai[1] % 8f == 0f)
														{
															float num808 = 10f;
															Vector2 vector102 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f + 30f);
															float num809 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector102.X;
															float num810 = Main.player[this.target].position.Y - vector102.Y;
															num810 -= Math.Abs(num809) * 0.3f;
															num808 += Math.Abs(num809) * 0.004f;
															if (num808 > 14f)
															{
																num808 = 14f;
															}
															num809 += (float)Main.rand.Next(-50, 51);
															num810 -= (float)Main.rand.Next(50, 201);
															float num811 = (float)Math.Sqrt((double)(num809 * num809 + num810 * num810));
															num811 = num808 / num811;
															num809 *= num811;
															num810 *= num811;
															num809 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
															num810 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
															Projectile.NewProjectile(vector102.X, vector102.Y, num809, num810, Main.rand.Next(326, 329), 40, 0f, Main.myPlayer, 0f, 0f);
														}
														if (this.ai[1] >= 300f)
														{
															this.ai[1] = 0f;
															this.ai[0] = 0f;
														}
													}
												}
												else if (this.ai[0] == 3f)
												{
													num795 = 4f;
													this.ai[1] += 1f;
													if (this.ai[1] % 30f == 0f)
													{
														Vector2 vector103 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f + 30f);
														float num812 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector103.X;
														float num813 = Main.player[this.target].position.Y - vector103.Y;
														float num814 = (float)Math.Sqrt((double)(num812 * num812 + num813 * num813));
														float num815 = 16f;
														num814 = num815 / num814;
														num812 *= num814;
														num813 *= num814;
														num812 *= 1f + (float)Main.rand.Next(-20, 21) * 0.001f;
														num813 *= 1f + (float)Main.rand.Next(-20, 21) * 0.001f;
														Projectile.NewProjectile(vector103.X, vector103.Y, num812, num813, 325, 75, 0f, Main.myPlayer, 0f, 0f);
													}
													if (this.ai[1] >= 120f)
													{
														this.ai[1] = 0f;
														this.ai[0] = 0f;
													}
												}
												else if (this.ai[0] == 4f)
												{
													num795 = 4f;
													this.ai[1] += 1f;
													if (this.ai[1] % 10f == 0f)
													{
														float num816 = 12f;
														Vector2 vector104 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f + 30f);
														float num817 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector104.X;
														float num818 = Main.player[this.target].position.Y - vector104.Y;
														num818 -= Math.Abs(num817) * 0.2f;
														num816 += Math.Abs(num817) * 0.002f;
														if (num816 > 16f)
														{
															num816 = 16f;
														}
														num817 += (float)Main.rand.Next(-50, 51);
														num818 -= (float)Main.rand.Next(50, 201);
														float num819 = (float)Math.Sqrt((double)(num817 * num817 + num818 * num818));
														num819 = num816 / num819;
														num817 *= num819;
														num818 *= num819;
														num817 *= 1f + (float)Main.rand.Next(-30, 31) * 0.005f;
														num818 *= 1f + (float)Main.rand.Next(-30, 31) * 0.005f;
														Projectile.NewProjectile(vector104.X, vector104.Y, num817, num818, Main.rand.Next(326, 329), 50, 0f, Main.myPlayer, 0f, 0f);
													}
													if (this.ai[1] >= 240f)
													{
														this.ai[1] = 0f;
														this.ai[0] = 0f;
													}
												}
												if (Math.Abs(base.Center.X - Main.player[this.target].Center.X) < 50f)
												{
													flag51 = true;
												}
												if (flag51)
												{
													this.velocity.X = this.velocity.X * 0.9f;
													if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1)
													{
														this.velocity.X = 0f;
													}
												}
												else
												{
													if (this.direction > 0)
													{
														this.velocity.X = (this.velocity.X * 20f + num795) / 21f;
													}
													if (this.direction < 0)
													{
														this.velocity.X = (this.velocity.X * 20f - num795) / 21f;
													}
												}
												int num820 = 80;
												int num821 = 20;
												Vector2 position4 = new Vector2(base.Center.X - (float)(num820 / 2), this.position.Y + (float)this.height - (float)num821);
												bool flag52 = false;
												if (this.position.X < Main.player[this.target].position.X && this.position.X + (float)this.width > Main.player[this.target].position.X + (float)Main.player[this.target].width && this.position.Y + (float)this.height < Main.player[this.target].position.Y + (float)Main.player[this.target].height - 16f)
												{
													flag52 = true;
												}
												if (flag52)
												{
													this.velocity.Y = this.velocity.Y + 0.5f;
												}
												else if (Collision.SolidCollision(position4, num820, num821))
												{
													if (this.velocity.Y > 0f)
													{
														this.velocity.Y = 0f;
													}
													if ((double)this.velocity.Y > -0.2)
													{
														this.velocity.Y = this.velocity.Y - 0.025f;
													}
													else
													{
														this.velocity.Y = this.velocity.Y - 0.2f;
													}
													if (this.velocity.Y < -4f)
													{
														this.velocity.Y = -4f;
													}
												}
												else
												{
													if (this.velocity.Y < 0f)
													{
														this.velocity.Y = 0f;
													}
													if ((double)this.velocity.Y < 0.1)
													{
														this.velocity.Y = this.velocity.Y + 0.025f;
													}
													else
													{
														this.velocity.Y = this.velocity.Y + 0.5f;
													}
												}
												if (this.velocity.Y > 10f)
												{
													this.velocity.Y = 10f;
													return;
												}
											}
											else
											{
												if (this.aiStyle == 58)
												{
													this.localAI[0] += 1f;
													if (this.localAI[0] > 6f)
													{
														this.localAI[0] = 0f;
														this.localAI[1] += 1f;
														if (this.localAI[1] > 4f)
														{
															this.localAI[1] = 0f;
														}
													}
													if (Main.netMode != 1)
													{
														this.localAI[2] += 1f;
														if (this.localAI[2] > 300f)
														{
															this.ai[3] = (float)Main.rand.Next(3);
															this.localAI[2] = 0f;
														}
														else if (this.ai[3] == 0f && this.localAI[2] % 30f == 0f && this.localAI[2] > 30f)
														{
															float num822 = 5f;
															Vector2 vector105 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f + 30f);
															if (!WorldGen.SolidTile((int)vector105.X / 16, (int)vector105.Y / 16))
															{
																float num823 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector105.X;
																float num824 = Main.player[this.target].position.Y - vector105.Y;
																num823 += (float)Main.rand.Next(-50, 51);
																num824 += (float)Main.rand.Next(50, 201);
																num824 *= 0.2f;
																float num825 = (float)Math.Sqrt((double)(num823 * num823 + num824 * num824));
																num825 = num822 / num825;
																num823 *= num825;
																num824 *= num825;
																num823 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
																num824 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
																Projectile.NewProjectile(vector105.X, vector105.Y, num823, num824, Main.rand.Next(326, 329), 40, 0f, Main.myPlayer, 0f, 0f);
															}
														}
													}
													if (this.ai[0] == 0f && Main.netMode != 1)
													{
														this.TargetClosest(true);
														this.ai[0] = 1f;
														int num826 = NPC.NewNPC((int)(this.position.X + (float)(this.width / 2)), (int)this.position.Y + this.height / 2, 328, this.whoAmI, 0f, 0f, 0f, 0f, 255);
														Main.npc[num826].ai[0] = -1f;
														Main.npc[num826].ai[1] = (float)this.whoAmI;
														Main.npc[num826].target = this.target;
														Main.npc[num826].netUpdate = true;
														num826 = NPC.NewNPC((int)(this.position.X + (float)(this.width / 2)), (int)this.position.Y + this.height / 2, 328, this.whoAmI, 0f, 0f, 0f, 0f, 255);
														Main.npc[num826].ai[0] = 1f;
														Main.npc[num826].ai[1] = (float)this.whoAmI;
														Main.npc[num826].ai[3] = 150f;
														Main.npc[num826].target = this.target;
														Main.npc[num826].netUpdate = true;
													}
													if (Main.player[this.target].dead || Math.Abs(this.position.X - Main.player[this.target].position.X) > 2000f || Math.Abs(this.position.Y - Main.player[this.target].position.Y) > 2000f)
													{
														this.TargetClosest(true);
														if (Main.player[this.target].dead || Math.Abs(this.position.X - Main.player[this.target].position.X) > 2000f || Math.Abs(this.position.Y - Main.player[this.target].position.Y) > 2000f)
														{
															this.ai[1] = 2f;
														}
													}
													if (Main.dayTime)
													{
														this.velocity.Y = this.velocity.Y + 0.3f;
														this.velocity.X = this.velocity.X * 0.9f;
													}
													else if (this.ai[1] == 0f)
													{
														this.ai[2] += 1f;
														if (this.ai[2] >= 300f)
														{
															if (this.ai[3] != 1f)
															{
																this.ai[1] = 0f;
																this.ai[2] = 0f;
															}
															else
															{
																this.ai[2] = 0f;
																this.ai[1] = 1f;
																this.TargetClosest(true);
																this.netUpdate = true;
															}
														}
														Vector2 vector106 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
														float num827 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector106.X;
														float num828 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - 200f - vector106.Y;
														float num829 = (float)Math.Sqrt((double)(num827 * num827 + num828 * num828));
														float num830 = 6f;
														if (this.ai[3] == 1f)
														{
															if (num829 > 900f)
															{
																num830 = 12f;
															}
															else if (num829 > 600f)
															{
																num830 = 10f;
															}
															else if (num829 > 300f)
															{
																num830 = 8f;
															}
														}
														if (num829 > 50f)
														{
															num829 = num830 / num829;
															this.velocity.X = (this.velocity.X * 14f + num827 * num829) / 15f;
															this.velocity.Y = (this.velocity.Y * 14f + num828 * num829) / 15f;
														}
													}
													else if (this.ai[1] == 1f)
													{
														this.ai[2] += 1f;
														if (this.ai[2] >= 600f || this.ai[3] != 1f)
														{
															this.ai[2] = 0f;
															this.ai[1] = 0f;
														}
														Vector2 vector107 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
														float num831 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector107.X;
														float num832 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector107.Y;
														float num833 = (float)Math.Sqrt((double)(num831 * num831 + num832 * num832));
														num833 = 16f / num833;
														this.velocity.X = (this.velocity.X * 49f + num831 * num833) / 50f;
														this.velocity.Y = (this.velocity.Y * 49f + num832 * num833) / 50f;
													}
													else if (this.ai[1] == 2f)
													{
														this.ai[1] = 3f;
														this.velocity.Y = this.velocity.Y + 0.1f;
														if (this.velocity.Y < 0f)
														{
															this.velocity.Y = this.velocity.Y * 0.95f;
														}
														this.velocity.X = this.velocity.X * 0.95f;
														if (this.timeLeft > 500)
														{
															this.timeLeft = 500;
														}
													}
													this.rotation = this.velocity.X * -0.02f;
													return;
												}
												if (this.aiStyle == 59)
												{
													this.spriteDirection = -(int)this.ai[0];
													if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 58)
													{
														this.ai[2] += 10f;
														if (this.ai[2] > 50f || Main.netMode != 2)
														{
															this.life = -1;
															this.HitEffect(0, 10.0);
															this.active = false;
														}
													}
													if (Main.netMode != 1 && Main.npc[(int)this.ai[1]].ai[3] == 2f)
													{
														this.localAI[1] += 1f;
														if (this.localAI[1] > 90f)
														{
															this.localAI[1] = 0f;
															float num834 = 0.01f;
															Vector2 vector108 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f + 30f);
															float num835 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector108.X;
															float num836 = Main.player[this.target].position.Y - vector108.Y;
															float num837 = (float)Math.Sqrt((double)(num835 * num835 + num836 * num836));
															num837 = num834 / num837;
															num835 *= num837;
															num836 *= num837;
															Projectile.NewProjectile(base.Center.X, base.Center.Y, num835, num836, 329, 60, 0f, Main.myPlayer, this.rotation, (float)this.spriteDirection);
														}
													}
													if (Main.dayTime)
													{
														this.velocity.Y = this.velocity.Y + 0.3f;
														this.velocity.X = this.velocity.X * 0.9f;
														return;
													}
													if (this.ai[2] == 0f || this.ai[2] == 3f)
													{
														if (Main.npc[(int)this.ai[1]].ai[1] == 3f && this.timeLeft > 10)
														{
															this.timeLeft = 10;
														}
														this.ai[3] += 1f;
														if (this.ai[3] >= 180f)
														{
															this.ai[2] += 1f;
															this.ai[3] = 0f;
															this.netUpdate = true;
														}
														Vector2 vector109 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
														float num838 = (Main.player[this.target].Center.X + Main.npc[(int)this.ai[1]].Center.X) / 2f;
														float num839 = (Main.player[this.target].Center.Y + Main.npc[(int)this.ai[1]].Center.Y) / 2f;
														num838 += -170f * this.ai[0] - vector109.X;
														num839 += 90f - vector109.Y;
														float num840 = Math.Abs(Main.player[this.target].Center.X - Main.npc[(int)this.ai[1]].Center.X) + Math.Abs(Main.player[this.target].Center.Y - Main.npc[(int)this.ai[1]].Center.Y);
														if (num840 > 700f)
														{
															num838 = Main.npc[(int)this.ai[1]].Center.X - 170f * this.ai[0] - vector109.X;
															num839 = Main.npc[(int)this.ai[1]].Center.Y + 90f - vector109.Y;
														}
														float num841 = (float)Math.Sqrt((double)(num838 * num838 + num839 * num839));
														float num842 = 6f;
														if (num841 > 1000f)
														{
															num842 = 21f;
														}
														else if (num841 > 800f)
														{
															num842 = 18f;
														}
														else if (num841 > 600f)
														{
															num842 = 15f;
														}
														else if (num841 > 400f)
														{
															num842 = 12f;
														}
														else if (num841 > 200f)
														{
															num842 = 9f;
														}
														if (this.ai[0] < 0f && base.Center.X > Main.npc[(int)this.ai[1]].Center.X)
														{
															num838 -= 4f;
														}
														if (this.ai[0] > 0f && base.Center.X < Main.npc[(int)this.ai[1]].Center.X)
														{
															num838 += 4f;
														}
														num841 = num842 / num841;
														this.velocity.X = (this.velocity.X * 14f + num838 * num841) / 15f;
														this.velocity.Y = (this.velocity.Y * 14f + num839 * num841) / 15f;
														num841 = (float)Math.Sqrt((double)(num838 * num838 + num839 * num839));
														if (num841 > 20f)
														{
															this.rotation = (float)Math.Atan2((double)num839, (double)num838) + 1.57f;
															return;
														}
													}
													else if (this.ai[2] == 1f)
													{
														Vector2 vector110 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
														float num843 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector110.X;
														float num844 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector110.Y;
														float num845 = (float)Math.Sqrt((double)(num843 * num843 + num844 * num844));
														this.rotation = (float)Math.Atan2((double)num844, (double)num843) + 1.57f;
														this.velocity.X = this.velocity.X * 0.95f;
														this.velocity.Y = this.velocity.Y - 0.3f;
														if (this.velocity.Y < -14f)
														{
															this.velocity.Y = -14f;
														}
														if (this.position.Y < Main.npc[(int)this.ai[1]].position.Y - 200f)
														{
															this.TargetClosest(true);
															this.ai[2] = 2f;
															vector110 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
															num843 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector110.X;
															num844 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector110.Y;
															num845 = (float)Math.Sqrt((double)(num843 * num843 + num844 * num844));
															num845 = 18f / num845;
															this.velocity.X = num843 * num845;
															this.velocity.Y = num844 * num845;
															this.netUpdate = true;
															return;
														}
													}
													else if (this.ai[2] == 2f)
													{
														float num846 = Math.Abs(base.Center.X - Main.npc[(int)this.ai[1]].Center.X) + Math.Abs(base.Center.Y - Main.npc[(int)this.ai[1]].Center.Y);
														if (this.position.Y > Main.player[this.target].position.Y || this.velocity.Y < 0f || num846 > 800f)
														{
															this.ai[2] = 3f;
															return;
														}
													}
													else if (this.ai[2] == 4f)
													{
														Vector2 vector111 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
														float num847 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector111.X;
														float num848 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector111.Y;
														float num849 = (float)Math.Sqrt((double)(num847 * num847 + num848 * num848));
														this.rotation = (float)Math.Atan2((double)num848, (double)num847) + 1.57f;
														this.velocity.Y = this.velocity.Y * 0.95f;
														this.velocity.X = this.velocity.X + 0.3f * -this.ai[0];
														if (this.velocity.X < -14f)
														{
															this.velocity.X = -14f;
														}
														if (this.velocity.X > 14f)
														{
															this.velocity.X = 14f;
														}
														if (this.position.X + (float)(this.width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 500f || this.position.X + (float)(this.width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 500f)
														{
															this.TargetClosest(true);
															this.ai[2] = 5f;
															vector111 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
															num847 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) - vector111.X;
															num848 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2) - vector111.Y;
															num849 = (float)Math.Sqrt((double)(num847 * num847 + num848 * num848));
															num849 = 17f / num849;
															this.velocity.X = num847 * num849;
															this.velocity.Y = num848 * num849;
															this.netUpdate = true;
															return;
														}
													}
													else if (this.ai[2] == 5f)
													{
														float num850 = Math.Abs(base.Center.X - Main.npc[(int)this.ai[1]].Center.X) + Math.Abs(base.Center.Y - Main.npc[(int)this.ai[1]].Center.Y);
														if ((this.velocity.X > 0f && this.position.X + (float)(this.width / 2) > Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2)) || (this.velocity.X < 0f && this.position.X + (float)(this.width / 2) < Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2)) || num850 > 800f)
														{
															this.ai[2] = 0f;
															return;
														}
													}
												}
												else if (this.aiStyle == 60)
												{
													if (Main.dayTime)
													{
														if (this.velocity.X > 0f)
														{
															this.velocity.X = this.velocity.X + 0.25f;
														}
														else
														{
															this.velocity.X = this.velocity.X - 0.25f;
														}
														this.velocity.Y = this.velocity.Y - 0.1f;
														this.rotation = this.velocity.X * 0.05f;
													}
													else if (this.ai[0] == 0f)
													{
														if (this.ai[2] == 0f)
														{
															this.TargetClosest(true);
															if (base.Center.X < Main.player[this.target].Center.X)
															{
																this.ai[2] = 1f;
															}
															else
															{
																this.ai[2] = -1f;
															}
														}
														this.TargetClosest(true);
														int num851 = 800;
														float num852 = Math.Abs(base.Center.X - Main.player[this.target].Center.X);
														if (base.Center.X < Main.player[this.target].Center.X && this.ai[2] < 0f && num852 > (float)num851)
														{
															this.ai[2] = 0f;
														}
														if (base.Center.X > Main.player[this.target].Center.X && this.ai[2] > 0f && num852 > (float)num851)
														{
															this.ai[2] = 0f;
														}
														float num853 = 0.45f;
														float num854 = 7f;
														if ((double)this.life < (double)this.lifeMax * 0.75)
														{
															num853 = 0.55f;
															num854 = 8f;
														}
														if ((double)this.life < (double)this.lifeMax * 0.5)
														{
															num853 = 0.7f;
															num854 = 10f;
														}
														if ((double)this.life < (double)this.lifeMax * 0.25)
														{
															num853 = 0.8f;
															num854 = 11f;
														}
														this.velocity.X = this.velocity.X + this.ai[2] * num853;
														if (this.velocity.X > num854)
														{
															this.velocity.X = num854;
														}
														if (this.velocity.X < -num854)
														{
															this.velocity.X = -num854;
														}
														float num855 = Main.player[this.target].position.Y - (this.position.Y + (float)this.height);
														if (num855 < 150f)
														{
															this.velocity.Y = this.velocity.Y - 0.2f;
														}
														if (num855 > 200f)
														{
															this.velocity.Y = this.velocity.Y + 0.2f;
														}
														if (this.velocity.Y > 8f)
														{
															this.velocity.Y = 8f;
														}
														if (this.velocity.Y < -8f)
														{
															this.velocity.Y = -8f;
														}
														this.rotation = this.velocity.X * 0.05f;
														if ((num852 < 500f || this.ai[3] < 0f) && this.position.Y < Main.player[this.target].position.Y)
														{
															this.ai[3] += 1f;
															int num856 = 13;
															if ((double)this.life < (double)this.lifeMax * 0.75)
															{
																num856 = 12;
															}
															if ((double)this.life < (double)this.lifeMax * 0.5)
															{
																num856 = 11;
															}
															if ((double)this.life < (double)this.lifeMax * 0.25)
															{
																num856 = 10;
															}
															num856++;
															if (this.ai[3] > (float)num856)
															{
																this.ai[3] = (float)(-(float)num856);
															}
															if (this.ai[3] == 0f && Main.netMode != 1)
															{
																Vector2 vector112 = new Vector2(base.Center.X, base.Center.Y);
																vector112.X += this.velocity.X * 7f;
																float num857 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector112.X;
																float num858 = Main.player[this.target].Center.Y - vector112.Y;
																float num859 = (float)Math.Sqrt((double)(num857 * num857 + num858 * num858));
																float num860 = 6f;
																if ((double)this.life < (double)this.lifeMax * 0.75)
																{
																	num860 = 7f;
																}
																if ((double)this.life < (double)this.lifeMax * 0.5)
																{
																	num860 = 8f;
																}
																if ((double)this.life < (double)this.lifeMax * 0.25)
																{
																	num860 = 9f;
																}
																num859 = num860 / num859;
																num857 *= num859;
																num858 *= num859;
																Projectile.NewProjectile(vector112.X, vector112.Y, num857, num858, 348, 42, 0f, Main.myPlayer, 0f, 0f);
															}
														}
														else if (this.ai[3] < 0f)
														{
															this.ai[3] += 1f;
														}
														if (Main.netMode != 1)
														{
															this.ai[1] += (float)Main.rand.Next(1, 4);
															if (this.ai[1] > 800f && num852 < 600f)
															{
																this.ai[0] = -1f;
															}
														}
													}
													else if (this.ai[0] == 1f)
													{
														this.TargetClosest(true);
														float num861 = 0.15f;
														float num862 = 7f;
														if ((double)this.life < (double)this.lifeMax * 0.75)
														{
															num861 = 0.17f;
															num862 = 8f;
														}
														if ((double)this.life < (double)this.lifeMax * 0.5)
														{
															num861 = 0.2f;
															num862 = 9f;
														}
														if ((double)this.life < (double)this.lifeMax * 0.25)
														{
															num861 = 0.25f;
															num862 = 10f;
														}
														num861 -= 0.05f;
														num862 -= 1f;
														if (base.Center.X < Main.player[this.target].Center.X)
														{
															this.velocity.X = this.velocity.X + num861;
															if (this.velocity.X < 0f)
															{
																this.velocity.X = this.velocity.X * 0.98f;
															}
														}
														if (base.Center.X > Main.player[this.target].Center.X)
														{
															this.velocity.X = this.velocity.X - num861;
															if (this.velocity.X > 0f)
															{
																this.velocity.X = this.velocity.X * 0.98f;
															}
														}
														if (this.velocity.X > num862 || this.velocity.X < -num862)
														{
															this.velocity.X = this.velocity.X * 0.95f;
														}
														float num863 = Main.player[this.target].position.Y - (this.position.Y + (float)this.height);
														if (num863 < 180f)
														{
															this.velocity.Y = this.velocity.Y - 0.1f;
														}
														if (num863 > 200f)
														{
															this.velocity.Y = this.velocity.Y + 0.1f;
														}
														if (this.velocity.Y > 6f)
														{
															this.velocity.Y = 6f;
														}
														if (this.velocity.Y < -6f)
														{
															this.velocity.Y = -6f;
														}
														this.rotation = this.velocity.X * 0.01f;
														if (Main.netMode != 1)
														{
															this.ai[3] += 1f;
															int num864 = 15;
															if ((double)this.life < (double)this.lifeMax * 0.75)
															{
																num864 = 14;
															}
															if ((double)this.life < (double)this.lifeMax * 0.5)
															{
																num864 = 12;
															}
															if ((double)this.life < (double)this.lifeMax * 0.25)
															{
																num864 = 10;
															}
															if ((double)this.life < (double)this.lifeMax * 0.1)
															{
																num864 = 8;
															}
															num864 += 3;
															if (this.ai[3] >= (float)num864)
															{
																this.ai[3] = 0f;
																Vector2 vector113 = new Vector2(base.Center.X, this.position.Y + (float)this.height - 14f);
																int i2 = (int)(vector113.X / 16f);
																int j2 = (int)(vector113.Y / 16f);
																if (!WorldGen.SolidTile(i2, j2))
																{
																	float num865 = this.velocity.Y;
																	if (num865 < 0f)
																	{
																		num865 = 0f;
																	}
																	num865 += 3f;
																	float speedX2 = this.velocity.X * 0.25f;
																	Projectile.NewProjectile(vector113.X, vector113.Y, speedX2, num865, 349, 37, 0f, Main.myPlayer, (float)Main.rand.Next(5), 0f);
																}
															}
														}
														if (Main.netMode != 1)
														{
															this.ai[1] += (float)Main.rand.Next(1, 4);
															if (this.ai[1] > 600f)
															{
																this.ai[0] = -1f;
															}
														}
													}
													else if (this.ai[0] == 2f)
													{
														this.TargetClosest(true);
														Vector2 vector114 = new Vector2(base.Center.X, base.Center.Y - 20f);
														float num866 = (float)Main.rand.Next(-1000, 1001);
														float num867 = (float)Main.rand.Next(-1000, 1001);
														float num868 = (float)Math.Sqrt((double)(num866 * num866 + num867 * num867));
														float num869 = 15f;
														this.velocity *= 0.95f;
														num868 = num869 / num868;
														num866 *= num868;
														num867 *= num868;
														this.rotation += 0.2f;
														vector114.X += num866 * 4f;
														vector114.Y += num867 * 4f;
														this.ai[3] += 1f;
														int num870 = 7;
														if ((double)this.life < (double)this.lifeMax * 0.75)
														{
															num870--;
														}
														if ((double)this.life < (double)this.lifeMax * 0.5)
														{
															num870 -= 2;
														}
														if ((double)this.life < (double)this.lifeMax * 0.25)
														{
															num870 -= 3;
														}
														if ((double)this.life < (double)this.lifeMax * 0.1)
														{
															num870 -= 4;
														}
														if (this.ai[3] > (float)num870)
														{
															this.ai[3] = 0f;
															Projectile.NewProjectile(vector114.X, vector114.Y, num866, num867, 349, 35, 0f, Main.myPlayer, 0f, 0f);
														}
														if (Main.netMode != 1)
														{
															this.ai[1] += (float)Main.rand.Next(1, 4);
															if (this.ai[1] > 500f)
															{
																this.ai[0] = -1f;
															}
														}
													}
													if (this.ai[0] == -1f)
													{
														int num871 = Main.rand.Next(3);
														this.TargetClosest(true);
														if (Math.Abs(base.Center.X - Main.player[this.target].Center.X) > 1000f)
														{
															num871 = 0;
														}
														this.ai[0] = (float)num871;
														this.ai[1] = 0f;
														this.ai[2] = 0f;
														this.ai[3] = 0f;
														return;
													}
												}
												else if (this.aiStyle == 61)
												{
													float num872 = 2f;
													this.noGravity = true;
													this.noTileCollide = true;
													if (!Main.dayTime)
													{
														this.TargetClosest(true);
													}
													bool flag53 = false;
													if ((double)this.life < (double)this.lifeMax * 0.75)
													{
														num872 = 3f;
													}
													if ((double)this.life < (double)this.lifeMax * 0.5)
													{
														num872 = 4f;
													}
													if ((double)this.life < (double)this.lifeMax * 0.25)
													{
														num872 = 5f;
													}
													if (Main.dayTime)
													{
														if (this.timeLeft > 10)
														{
															this.timeLeft = 10;
														}
														num872 = 8f;
														if (this.velocity.X == 0f)
														{
															this.velocity.X = 0.1f;
														}
													}
													else if (this.ai[0] == 0f)
													{
														this.ai[1] += 1f;
														if (this.ai[1] >= 300f && Main.netMode != 1)
														{
															this.TargetClosest(true);
															this.ai[1] = 0f;
															this.ai[0] = 1f;
															this.netUpdate = true;
														}
													}
													else if (this.ai[0] == 1f)
													{
														this.ai[1] += 1f;
														flag53 = true;
														int num873 = 16;
														if ((double)this.life < (double)this.lifeMax * 0.25)
														{
															num873 = 8;
														}
														else if ((double)this.life < (double)this.lifeMax * 0.5)
														{
															num873 = 11;
														}
														else if ((double)this.life < (double)this.lifeMax * 0.75)
														{
															num873 = 14;
														}
														if (this.ai[1] % (float)num873 == 0f)
														{
															Vector2 vector115 = new Vector2(base.Center.X + (float)(this.direction * 50), base.Center.Y + (float)Main.rand.Next(15, 36));
															float num874 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector115.X;
															float num875 = Main.player[this.target].Center.Y - vector115.Y;
															num874 += (float)Main.rand.Next(-40, 41);
															num875 += (float)Main.rand.Next(-40, 41);
															float num876 = (float)Math.Sqrt((double)(num874 * num874 + num875 * num875));
															float num877 = 15f;
															num876 = num877 / num876;
															num874 *= num876;
															num875 *= num876;
															num874 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
															num875 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
															Projectile.NewProjectile(vector115.X, vector115.Y, num874, num875, 180, 36, 0f, Main.myPlayer, 0f, 0f);
														}
														if (this.ai[1] > 240f)
														{
															this.ai[0] = 0f;
															this.ai[1] = 0f;
														}
													}
													if (Main.netMode != 1)
													{
														int num878 = 600;
														int num879 = 1200;
														int num880 = 2700;
														if ((double)this.life < (double)this.lifeMax * 0.25)
														{
															num878 = (int)((double)num878 * 0.5);
															num879 = (int)((double)num879 * 0.5);
															num880 = (int)((double)num880 * 0.5);
														}
														else if ((double)this.life < (double)this.lifeMax * 0.5)
														{
															num878 = (int)((double)num878 * 0.75);
															num879 = (int)((double)num879 * 0.75);
															num880 = (int)((double)num880 * 0.75);
														}
														else if ((double)this.life < (double)this.lifeMax * 0.75)
														{
															num878 = (int)((double)num878 * 0.9);
															num879 = (int)((double)num879 * 0.9);
															num880 = (int)((double)num880 * 0.9);
														}
														if (Main.rand.Next(num878) == 0)
														{
															Vector2 vector116 = new Vector2(base.Center.X - (float)(this.direction * 24), base.Center.Y - 64f);
															float num881 = (float)(Main.rand.Next(1, 100) * this.direction);
															float num882 = 1f;
															float num883 = (float)Math.Sqrt((double)(num881 * num881 + num882 * num882));
															float num884 = 1f;
															num883 = num884 / num883;
															num881 *= num883;
															num882 *= num883;
															Projectile.NewProjectile(vector116.X, vector116.Y, num881, num882, 352, 80, 0f, Main.myPlayer, 0f, 0f);
														}
														if (Main.rand.Next(num879) == 0)
														{
															this.localAI[1] = 1f;
														}
														if (this.localAI[1] >= 1f)
														{
															this.localAI[1] += 1f;
															int num885 = 12;
															if (this.localAI[1] % (float)num885 == 0f)
															{
																Vector2 vector117 = new Vector2(base.Center.X - (float)(this.direction * 24), base.Center.Y - 64f);
																float num886 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector117.X;
																float num887 = Main.player[this.target].Center.Y - vector117.Y;
																num886 += (float)Main.rand.Next(-50, 51);
																num887 += (float)Main.rand.Next(-50, 51);
																float num888 = (float)Math.Sqrt((double)(num886 * num886 + num887 * num887));
																float num889 = 12.5f;
																num888 = num889 / num888;
																num886 *= num888;
																num887 *= num888;
																num886 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
																num887 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
																Projectile.NewProjectile(vector117.X, vector117.Y, num886, num887, 350, 42, 0f, Main.myPlayer, 0f, 0f);
															}
															if (this.localAI[1] >= 100f)
															{
																this.localAI[1] = 0f;
															}
														}
														if (Main.rand.Next(num880) == 0)
														{
															this.localAI[2] = 2f;
														}
														if (this.localAI[2] > 0f)
														{
															this.localAI[2] += 1f;
															int num890 = 9;
															if (this.localAI[2] % (float)num890 == 0f)
															{
																Vector2 vector118 = new Vector2(base.Center.X - (float)(this.direction * 24), base.Center.Y - 64f);
																float num891 = (float)Main.rand.Next(-100, 101);
																float num892 = -300f;
																float num893 = (float)Math.Sqrt((double)(num891 * num891 + num892 * num892));
																float num894 = 11f;
																num893 = num894 / num893;
																num891 *= num893;
																num892 *= num893;
																num891 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
																num892 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
																Projectile.NewProjectile(vector118.X, vector118.Y, num891, num892, 351, 50, 0f, Main.myPlayer, 0f, 0f);
															}
															if (this.localAI[2] >= 100f)
															{
																this.localAI[2] = 0f;
															}
														}
													}
													if (Math.Abs(base.Center.X - Main.player[this.target].Center.X) < 50f)
													{
														flag53 = true;
													}
													if (flag53)
													{
														this.velocity.X = this.velocity.X * 0.9f;
														if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1)
														{
															this.velocity.X = 0f;
														}
													}
													else
													{
														if (this.direction > 0)
														{
															this.velocity.X = (this.velocity.X * 20f + num872) / 21f;
														}
														if (this.direction < 0)
														{
															this.velocity.X = (this.velocity.X * 20f - num872) / 21f;
														}
													}
													int num895 = 80;
													int num896 = 20;
													Vector2 position5 = new Vector2(base.Center.X - (float)(num895 / 2), this.position.Y + (float)this.height - (float)num896);
													bool flag54 = false;
													if (this.position.X < Main.player[this.target].position.X && this.position.X + (float)this.width > Main.player[this.target].position.X + (float)Main.player[this.target].width && this.position.Y + (float)this.height < Main.player[this.target].position.Y + (float)Main.player[this.target].height - 16f)
													{
														flag54 = true;
													}
													if (flag54)
													{
														this.velocity.Y = this.velocity.Y + 0.5f;
													}
													else if (Collision.SolidCollision(position5, num895, num896))
													{
														if (this.velocity.Y > 0f)
														{
															this.velocity.Y = 0f;
														}
														if ((double)this.velocity.Y > -0.2)
														{
															this.velocity.Y = this.velocity.Y - 0.025f;
														}
														else
														{
															this.velocity.Y = this.velocity.Y - 0.2f;
														}
														if (this.velocity.Y < -4f)
														{
															this.velocity.Y = -4f;
														}
													}
													else
													{
														if (this.velocity.Y < 0f)
														{
															this.velocity.Y = 0f;
														}
														if ((double)this.velocity.Y < 0.1)
														{
															this.velocity.Y = this.velocity.Y + 0.025f;
														}
														else
														{
															this.velocity.Y = this.velocity.Y + 0.5f;
														}
													}
													if (this.velocity.Y > 10f)
													{
														this.velocity.Y = 10f;
														return;
													}
												}
												else if (this.aiStyle == 62)
												{
													this.TargetClosest(true);
													this.rotation = Math.Abs(this.velocity.X) * (float)this.direction * 0.1f;
													this.spriteDirection = this.direction;
													float num897 = 7f;
													Vector2 vector119 = new Vector2(base.Center.X + (float)(this.direction * 20), base.Center.Y + 6f);
													float num898 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector119.X;
													float num899 = Main.player[this.target].position.Y - vector119.Y;
													float num900 = (float)Math.Sqrt((double)(num898 * num898 + num899 * num899));
													float num901 = num897 / num900;
													num898 *= num901;
													num899 *= num901;
													bool flag55 = Collision.CanHit(base.Center, 1, 1, Main.player[this.target].Center, 1, 1);
													if (Main.dayTime)
													{
														int num902 = 60;
														this.velocity.X = (this.velocity.X * (float)(num902 - 1) - num898) / (float)num902;
														this.velocity.Y = (this.velocity.Y * (float)(num902 - 1) - num899) / (float)num902;
														if (this.timeLeft > 10)
														{
															this.timeLeft = 10;
															return;
														}
													}
													else
													{
														if (num900 > 600f || !flag55)
														{
															int num903 = 60;
															this.velocity.X = (this.velocity.X * (float)(num903 - 1) + num898) / (float)num903;
															this.velocity.Y = (this.velocity.Y * (float)(num903 - 1) + num899) / (float)num903;
															return;
														}
														this.velocity *= 0.98f;
														if (Math.Abs(this.velocity.X) < 1f && Math.Abs(this.velocity.Y) < 1f && Main.netMode != 1)
														{
															this.localAI[0] += 1f;
															if (this.localAI[0] >= 15f)
															{
																this.localAI[0] = 0f;
																num898 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector119.X;
																num899 = Main.player[this.target].Center.Y - vector119.Y;
																num898 += (float)Main.rand.Next(-35, 36);
																num899 += (float)Main.rand.Next(-35, 36);
																num898 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
																num899 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
																num900 = (float)Math.Sqrt((double)(num898 * num898 + num899 * num899));
																num897 = 10f;
																num901 = num897 / num900;
																num898 *= num901;
																num899 *= num901;
																num898 *= 1f + (float)Main.rand.Next(-20, 21) * 0.0125f;
																num899 *= 1f + (float)Main.rand.Next(-20, 21) * 0.0125f;
																Projectile.NewProjectile(vector119.X, vector119.Y, num898, num899, 180, 32, 0f, Main.myPlayer, 0f, 0f);
																return;
															}
														}
													}
												}
												else if (this.aiStyle == 63)
												{
													this.TargetClosest(true);
													float num904 = 11f;
													Vector2 vector120 = new Vector2(base.Center.X + (float)(this.direction * 20), base.Center.Y + 6f);
													float num905 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector120.X;
													float num906 = Main.player[this.target].Center.Y - vector120.Y;
													float num907 = (float)Math.Sqrt((double)(num905 * num905 + num906 * num906));
													float num908 = num904 / num907;
													num905 *= num908;
													num906 *= num908;
													if (Main.dayTime)
													{
														num905 = -num905;
														num906 = -num906;
													}
													this.ai[0] -= 1f;
													if (num907 < 200f || this.ai[0] > 0f)
													{
														if (num907 < 200f)
														{
															this.ai[0] = 20f;
														}
														if (this.velocity.X < 0f)
														{
															this.direction = -1;
														}
														else
														{
															this.direction = 1;
														}
														this.rotation += (float)this.direction * 0.3f;
														return;
													}
													this.velocity.X = (this.velocity.X * 50f + num905) / 51f;
													this.velocity.Y = (this.velocity.Y * 50f + num906) / 51f;
													if (num907 < 350f)
													{
														this.velocity.X = (this.velocity.X * 10f + num905) / 11f;
														this.velocity.Y = (this.velocity.Y * 10f + num906) / 11f;
													}
													if (num907 < 300f)
													{
														this.velocity.X = (this.velocity.X * 7f + num905) / 8f;
														this.velocity.Y = (this.velocity.Y * 7f + num906) / 8f;
													}
													this.rotation = this.velocity.X * 0.15f;
													return;
												}
												else
												{
													if (this.aiStyle == 64)
													{
														float num909 = this.ai[0];
														float num910 = this.ai[1];
														if (Main.netMode != 1)
														{
															this.localAI[0] -= 1f;
															if (this.ai[3] == 0f)
															{
																this.ai[3] = (float)Main.rand.Next(75, 111) * 0.01f;
															}
															if (this.localAI[0] <= 0f)
															{
																this.TargetClosest(true);
																this.localAI[0] = (float)Main.rand.Next(60, 180);
																float num911 = Math.Abs(base.Center.X - Main.player[this.target].Center.X);
																if (num911 > 700f && this.localAI[3] == 0f)
																{
																	float num912 = (float)Main.rand.Next(50, 151) * 0.01f;
																	if (num911 > 1000f)
																	{
																		num912 = (float)Main.rand.Next(150, 201) * 0.01f;
																	}
																	else if (num911 > 850f)
																	{
																		num912 = (float)Main.rand.Next(100, 151) * 0.01f;
																	}
																	int num913 = this.direction * Main.rand.Next(100, 251);
																	int num914 = Main.rand.Next(-50, 51);
																	if (this.position.Y > Main.player[this.target].position.Y - 100f)
																	{
																		num914 -= Main.rand.Next(100, 251);
																	}
																	float num915 = num912 / (float)Math.Sqrt((double)(num913 * num913 + num914 * num914));
																	num909 = (float)num913 * num915;
																	num910 = (float)num914 * num915;
																}
																else
																{
																	this.localAI[3] = 1f;
																	float num916 = (float)Main.rand.Next(5, 151) * 0.01f;
																	int num917 = Main.rand.Next(-100, 101);
																	int num918 = Main.rand.Next(-100, 101);
																	float num919 = num916 / (float)Math.Sqrt((double)(num917 * num917 + num918 * num918));
																	num909 = (float)num917 * num919;
																	num910 = (float)num918 * num919;
																}
																this.netUpdate = true;
															}
														}
														this.scale = this.ai[3];
														if (this.localAI[2] > 0f)
														{
															int i3 = (int)base.Center.X / 16;
															int j3 = (int)base.Center.Y / 16;
															if (this.localAI[2] > 3f)
															{
																if (this.type == 358)
																{
																	Lighting.AddLight(i3, j3, 0.101249993f * this.scale, 0.21374999f * this.scale, 0.225f * this.scale);
																}
																else
																{
																	Lighting.AddLight(i3, j3, 0.109500006f * this.scale, 0.15f * this.scale, 0.0615f * this.scale);
																}
															}
															this.localAI[2] -= 1f;
														}
														else if (this.localAI[1] > 0f)
														{
															this.localAI[1] -= 1f;
														}
														else
														{
															this.localAI[1] = (float)Main.rand.Next(30, 180);
															if (!Main.dayTime || (double)(this.position.Y / 16f) > Main.worldSurface + 10.0)
															{
																this.localAI[2] = (float)Main.rand.Next(10, 30);
															}
														}
														int num920 = 80;
														this.velocity.X = (this.velocity.X * (float)(num920 - 1) + num909) / (float)num920;
														this.velocity.Y = (this.velocity.Y * (float)(num920 - 1) + num910) / (float)num920;
														if (this.velocity.Y > 0f)
														{
															int num921 = 4;
															int num922 = (int)base.Center.X / 16;
															int num923 = (int)base.Center.Y / 16;
															for (int num924 = num923; num924 < num923 + num921; num924++)
															{
																if (Main.tile[num922, num924] != null && ((Main.tile[num922, num924].nactive() && Main.tileSolid[(int)Main.tile[num922, num924].type]) || Main.tile[num922, num924].liquid > 0))
																{
																	num910 *= -1f;
																	if (this.velocity.Y > 0f)
																	{
																		this.velocity.Y = this.velocity.Y * 0.9f;
																	}
																}
															}
														}
														if (this.velocity.Y < 0f)
														{
															int num925 = 30;
															bool flag56 = false;
															int num926 = (int)base.Center.X / 16;
															int num927 = (int)base.Center.Y / 16;
															for (int num928 = num927; num928 < num927 + num925; num928++)
															{
																if (Main.tile[num926, num928] != null && Main.tile[num926, num928].nactive() && Main.tileSolid[(int)Main.tile[num926, num928].type])
																{
																	flag56 = true;
																}
															}
															if (!flag56)
															{
																num910 *= -1f;
																if (this.velocity.Y < 0f)
																{
																	this.velocity.Y = this.velocity.Y * 0.9f;
																}
															}
														}
														if (this.collideX)
														{
															if (this.velocity.X < 0f)
															{
																num909 = Math.Abs(num909);
															}
															else
															{
																num909 = -Math.Abs(num909);
															}
															this.velocity.X = this.velocity.X * -0.2f;
														}
														if (this.velocity.X < 0f)
														{
															this.direction = -1;
														}
														if (this.velocity.X > 0f)
														{
															this.direction = 1;
														}
														this.ai[0] = num909;
														this.ai[1] = num910;
														return;
													}
													if (this.aiStyle == 65)
													{
														float num929 = this.ai[0];
														float num930 = this.ai[1];
														if (Main.netMode != 1)
														{
															if (this.ai[2] == 0f)
															{
																int num931 = 0;
																int num932 = 4;
																int num933 = 6;
																int num934 = 3;
																int num935 = 7;
																int num936 = 2;
																int num937 = 1;
																int num938 = 5;
																int num939 = Main.rand.Next(100);
																if (num939 == 0)
																{
																	num939 = num938;
																}
																else if (num939 < 3)
																{
																	num939 = num937;
																}
																else if (num939 < 9)
																{
																	num939 = num936;
																}
																else if (num939 < 19)
																{
																	num939 = num935;
																}
																else if (num939 < 34)
																{
																	num939 = num934;
																}
																else if (num939 < 53)
																{
																	num939 = num933;
																}
																else if (num939 < 75)
																{
																	num939 = num932;
																}
																else
																{
																	num939 = num931;
																}
																this.ai[2] = (float)(1 + num939);
															}
															if (this.ai[3] == 0f)
															{
																this.ai[3] = (float)Main.rand.Next(75, 111) * 0.01f;
															}
															this.localAI[0] -= 1f;
															if (this.localAI[0] <= 0f)
															{
																this.TargetClosest(true);
																this.localAI[0] = (float)Main.rand.Next(90, 240);
																float num940 = Math.Abs(base.Center.X - Main.player[this.target].Center.X);
																if (num940 > 700f && this.localAI[3] == 0f)
																{
																	float num941 = (float)Main.rand.Next(50, 151) * 0.01f;
																	if (num940 > 1000f)
																	{
																		num941 = (float)Main.rand.Next(150, 201) * 0.01f;
																	}
																	else if (num940 > 850f)
																	{
																		num941 = (float)Main.rand.Next(100, 151) * 0.01f;
																	}
																	int num942 = this.direction * Main.rand.Next(100, 251);
																	int num943 = Main.rand.Next(-50, 51);
																	if (this.position.Y > Main.player[this.target].position.Y - 100f)
																	{
																		num943 -= Main.rand.Next(100, 251);
																	}
																	float num944 = num941 / (float)Math.Sqrt((double)(num942 * num942 + num943 * num943));
																	num929 = (float)num942 * num944;
																	num930 = (float)num943 * num944;
																}
																else
																{
																	this.localAI[3] = 1f;
																	float num945 = (float)Main.rand.Next(26, 301) * 0.01f;
																	int num946 = Main.rand.Next(-100, 101);
																	int num947 = Main.rand.Next(-100, 101);
																	float num948 = num945 / (float)Math.Sqrt((double)(num946 * num946 + num947 * num947));
																	num929 = (float)num946 * num948;
																	num930 = (float)num947 * num948;
																}
																this.netUpdate = true;
															}
														}
														this.scale = this.ai[3];
														int num949 = 60;
														this.velocity.X = (this.velocity.X * (float)(num949 - 1) + num929) / (float)num949;
														this.velocity.Y = (this.velocity.Y * (float)(num949 - 1) + num930) / (float)num949;
														if (this.velocity.Y > 0f)
														{
															int num950 = 3;
															int num951 = (int)base.Center.X / 16;
															int num952 = (int)base.Center.Y / 16;
															for (int num953 = num952; num953 < num952 + num950; num953++)
															{
																if (Main.tile[num951, num953] != null && ((Main.tile[num951, num953].nactive() && Main.tileSolid[(int)Main.tile[num951, num953].type]) || Main.tile[num951, num953].liquid > 0))
																{
																	num930 *= -1f;
																	if (this.velocity.Y > 0f)
																	{
																		this.velocity.Y = this.velocity.Y * 0.9f;
																	}
																}
															}
														}
														if (this.velocity.Y < 0f)
														{
															int num954 = 30;
															bool flag57 = false;
															int num955 = (int)base.Center.X / 16;
															int num956 = (int)base.Center.Y / 16;
															for (int num957 = num956; num957 < num956 + num954; num957++)
															{
																if (Main.tile[num955, num957] != null && Main.tile[num955, num957].nactive() && Main.tileSolid[(int)Main.tile[num955, num957].type])
																{
																	flag57 = true;
																}
															}
															if (!flag57)
															{
																num930 *= -1f;
																if (this.velocity.Y < 0f)
																{
																	this.velocity.Y = this.velocity.Y * 0.9f;
																}
															}
														}
														if (this.localAI[1] > 0f)
														{
															this.localAI[1] -= 1f;
														}
														else
														{
															this.localAI[1] = 15f;
															float num958 = 0f;
															Vector2 vector121 = Vector2.Zero;
															for (int num959 = 0; num959 < 200; num959++)
															{
																NPC nPC = Main.npc[num959];
																if (nPC.active && nPC.damage > 0 && !nPC.friendly && nPC.Hitbox.Distance(base.Center) <= 100f)
																{
																	num958 += 1f;
																	vector121 += base.DirectionFrom(nPC.Center);
																}
															}
															if (num958 > 0f)
															{
																vector121 /= num958;
																vector121 *= 2f;
																this.velocity += vector121;
																if (this.velocity.Length() > 16f)
																{
																	this.velocity = this.velocity.SafeNormalize(Vector2.Zero) * 16f;
																}
															}
														}
														if (this.collideX)
														{
															if (this.velocity.X < 0f)
															{
																num929 = Math.Abs(num929);
															}
															else
															{
																num929 = -Math.Abs(num929);
															}
															this.velocity.X = this.velocity.X * -0.2f;
														}
														if (this.velocity.X < 0f)
														{
															this.direction = -1;
														}
														if (this.velocity.X > 0f)
														{
															this.direction = 1;
														}
														this.ai[0] = num929;
														this.ai[1] = num930;
														if (this.type == 356)
														{
															this.catchItem = (short)(1994f + this.ai[2] - 1f);
															return;
														}
													}
													else if (this.aiStyle == 66)
													{
														if (this.type == 484)
														{
															float num960 = (float)Main.rand.Next(90, 111) * 0.01f;
															num960 *= (Main.essScale + 0.5f) / 2f;
															Lighting.AddLight((int)((this.position.X + (float)(this.width / 2)) / 16f), (int)((this.position.Y + (float)(this.height / 2)) / 16f), 0.3f * num960, 0.1f * num960, 0.25f * num960);
														}
														if (this.type == 357 || this.type == 448 || (this.type >= 484 && this.type <= 487))
														{
															if (this.localAI[2] < 90f)
															{
																this.localAI[2] += 1f;
															}
															else
															{
																this.friendly = false;
															}
														}
														if (this.velocity.Y == 0f)
														{
															if (this.ai[0] == 1f)
															{
																if (this.direction == 0)
																{
																	this.TargetClosest(true);
																}
																if (this.collideX)
																{
																	this.direction *= -1;
																}
																float num961 = 0.2f;
																if (this.type == 485)
																{
																	num961 = 0.25f;
																}
																if (this.type == 486)
																{
																	num961 = 0.325f;
																}
																if (this.type == 487)
																{
																	num961 = 0.4f;
																}
																this.velocity.X = num961 * (float)this.direction;
																if (this.type == 374)
																{
																	this.velocity.X = this.velocity.X * 3f;
																}
															}
															else
															{
																this.velocity.X = 0f;
															}
															if (Main.netMode != 1)
															{
																this.localAI[1] -= 1f;
																if (this.localAI[1] <= 0f)
																{
																	if (this.ai[0] == 1f)
																	{
																		this.ai[0] = 0f;
																		this.localAI[1] = (float)Main.rand.Next(300, 900);
																	}
																	else
																	{
																		this.ai[0] = 1f;
																		this.localAI[1] = (float)Main.rand.Next(600, 1800);
																	}
																	this.netUpdate = true;
																}
															}
														}
														if (this.type == 374)
														{
															this.spriteDirection = this.direction;
															bool flag58 = false;
															for (int num962 = 0; num962 < 255; num962++)
															{
																Player player = Main.player[num962];
																if (player.active && !player.dead && Vector2.Distance(player.Center, base.Center) <= 160f)
																{
																	flag58 = true;
																	break;
																}
															}
															int num963 = 90;
															if (flag58 && this.ai[1] < (float)num963)
															{
																this.ai[1] += 1f;
															}
															if (this.ai[1] == (float)num963 && Main.netMode != 1)
															{
																this.position.Y = this.position.Y + 16f;
																this.Transform(375);
																this.netUpdate = true;
																return;
															}
														}
													}
													else if (this.aiStyle == 67)
													{
														if (this.type == 359)
														{
															if (this.ai[3] != 0f)
															{
																this.scale = this.ai[3];
																int num964 = (int)(12f * this.scale);
																int num965 = (int)(12f * this.scale);
																if (num964 != this.width)
																{
																	this.position.X = this.position.X + (float)(this.width / 2) - (float)num964 - 2f;
																	this.width = num964;
																}
																if (num965 != this.height)
																{
																	this.position.Y = this.position.Y + (float)this.height - (float)num965;
																	this.height = num965;
																}
															}
															if (this.ai[3] == 0f && Main.netMode != 1)
															{
																this.ai[3] = (float)Main.rand.Next(80, 111) * 0.01f;
																this.netUpdate = true;
															}
														}
														if (this.type == 360)
														{
															Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.1f, 0.2f, 0.7f);
														}
														float num966 = 0.3f;
														if (this.type == 360)
														{
															num966 = 0.6f;
														}
														if (this.ai[0] == 0f)
														{
															this.TargetClosest(true);
															this.directionY = 1;
															this.ai[0] = 1f;
															if (this.direction > 0)
															{
																this.spriteDirection = 1;
															}
														}
														bool flag59 = false;
														if (Main.netMode != 1)
														{
															if (this.ai[2] == 0f && Main.rand.Next(7200) == 0)
															{
																this.ai[2] = 2f;
																this.netUpdate = true;
															}
															if (!this.collideX && !this.collideY)
															{
																this.localAI[3] += 1f;
																if (this.localAI[3] > 5f)
																{
																	this.ai[2] = 2f;
																	this.netUpdate = true;
																}
															}
															else
															{
																this.localAI[3] = 0f;
															}
														}
														if (this.ai[2] > 0f)
														{
															this.ai[1] = 0f;
															this.ai[0] = 1f;
															this.directionY = 1;
															if (this.velocity.Y > num966)
															{
																this.rotation += (float)this.direction * 0.1f;
															}
															else
															{
																this.rotation = 0f;
															}
															this.spriteDirection = this.direction;
															this.velocity.X = num966 * (float)this.direction;
															this.noGravity = false;
															int num967 = (int)(base.Center.X + (float)(this.width / 2 * -(float)this.direction)) / 16;
															int num968 = (int)(this.position.Y + (float)this.height + 8f) / 16;
															if (Main.tile[num967, num968] != null && !Main.tile[num967, num968].topSlope() && this.collideY)
															{
																this.ai[2] -= 1f;
															}
															num968 = (int)(this.position.Y + (float)this.height - 4f) / 16;
															num967 = (int)(base.Center.X + (float)(this.width / 2 * this.direction)) / 16;
															if (Main.tile[num967, num968] != null && Main.tile[num967, num968].bottomSlope())
															{
																this.direction *= -1;
															}
															if (this.collideX && this.velocity.Y == 0f)
															{
																flag59 = true;
																this.ai[2] = 0f;
																this.directionY = -1;
																this.ai[1] = 1f;
															}
															if (this.velocity.Y == 0f)
															{
																if (this.localAI[1] == this.position.X)
																{
																	this.localAI[2] += 1f;
																	if (this.localAI[2] > 10f)
																	{
																		this.direction = 1;
																		this.velocity.X = (float)this.direction * num966;
																		this.localAI[2] = 0f;
																	}
																}
																else
																{
																	this.localAI[2] = 0f;
																	this.localAI[1] = this.position.X;
																}
															}
														}
														if (this.ai[2] == 0f)
														{
															this.noGravity = true;
															if (this.ai[1] == 0f)
															{
																if (this.collideY)
																{
																	this.ai[0] = 2f;
																}
																if (!this.collideY && this.ai[0] == 2f)
																{
																	this.direction = -this.direction;
																	this.ai[1] = 1f;
																	this.ai[0] = 1f;
																}
																if (this.collideX)
																{
																	this.directionY = -this.directionY;
																	this.ai[1] = 1f;
																}
															}
															else
															{
																if (this.collideX)
																{
																	this.ai[0] = 2f;
																}
																if (!this.collideX && this.ai[0] == 2f)
																{
																	this.directionY = -this.directionY;
																	this.ai[1] = 0f;
																	this.ai[0] = 1f;
																}
																if (this.collideY)
																{
																	this.direction = -this.direction;
																	this.ai[1] = 0f;
																}
															}
															if (!flag59)
															{
																float num969 = this.rotation;
																if (this.directionY < 0)
																{
																	if (this.direction < 0)
																	{
																		if (this.collideX)
																		{
																			this.rotation = 1.57f;
																			this.spriteDirection = -1;
																		}
																		else if (this.collideY)
																		{
																			this.rotation = 3.14f;
																			this.spriteDirection = 1;
																		}
																	}
																	else if (this.collideY)
																	{
																		this.rotation = 3.14f;
																		this.spriteDirection = -1;
																	}
																	else if (this.collideX)
																	{
																		this.rotation = 4.71f;
																		this.spriteDirection = 1;
																	}
																}
																else if (this.direction < 0)
																{
																	if (this.collideY)
																	{
																		this.rotation = 0f;
																		this.spriteDirection = -1;
																	}
																	else if (this.collideX)
																	{
																		this.rotation = 1.57f;
																		this.spriteDirection = 1;
																	}
																}
																else if (this.collideX)
																{
																	this.rotation = 4.71f;
																	this.spriteDirection = -1;
																}
																else if (this.collideY)
																{
																	this.rotation = 0f;
																	this.spriteDirection = 1;
																}
																float num970 = this.rotation;
																this.rotation = num969;
																if ((double)this.rotation > 6.28)
																{
																	this.rotation -= 6.28f;
																}
																if (this.rotation < 0f)
																{
																	this.rotation += 6.28f;
																}
																float num971 = Math.Abs(this.rotation - num970);
																float num972 = 0.1f;
																if (this.rotation > num970)
																{
																	if ((double)num971 > 3.14)
																	{
																		this.rotation += num972;
																	}
																	else
																	{
																		this.rotation -= num972;
																		if (this.rotation < num970)
																		{
																			this.rotation = num970;
																		}
																	}
																}
																if (this.rotation < num970)
																{
																	if ((double)num971 > 3.14)
																	{
																		this.rotation -= num972;
																	}
																	else
																	{
																		this.rotation += num972;
																		if (this.rotation > num970)
																		{
																			this.rotation = num970;
																		}
																	}
																}
															}
															this.velocity.X = num966 * (float)this.direction;
															this.velocity.Y = num966 * (float)this.directionY;
															return;
														}
													}
													else if (this.aiStyle == 68)
													{
														this.noGravity = true;
														if (this.ai[0] == 0f)
														{
															this.noGravity = false;
															int direction3 = this.direction;
															int num973 = this.target;
															this.TargetClosest(true);
															if (num973 >= 0 && direction3 != 0)
															{
																this.direction = direction3;
															}
															if (this.wet)
															{
																float num974 = 2f;
																this.velocity.X = (this.velocity.X * 19f + num974 * (float)this.direction) / 20f;
																int num975 = (int)(base.Center.X + (float)((this.width / 2 + 8) * this.direction)) / 16;
																int num976 = (int)(base.Center.Y / 16f);
																int j4 = (int)(this.position.Y / 16f);
																int num977 = (int)((this.position.Y + (float)this.height) / 16f);
																if (Main.tile[num975, num976] == null)
																{
																	Main.tile[num975, num976] = new Tile();
																}
																if (Main.tile[num975, num977] == null)
																{
																	Main.tile[num975, num977] = new Tile();
																}
																if (WorldGen.SolidTile(num975, num976) || WorldGen.SolidTile(num975, j4) || WorldGen.SolidTile(num975, num977) || Main.tile[num975, num977].liquid == 0)
																{
																	this.direction *= -1;
																}
																this.spriteDirection = this.direction;
																if (this.velocity.Y > 0f)
																{
																	this.velocity.Y = this.velocity.Y * 0.5f;
																}
																this.noGravity = true;
																num975 = (int)(base.Center.X / 16f);
																num976 = (int)(base.Center.Y / 16f);
																float num978 = this.position.Y + (float)this.height;
																if (Main.tile[num975, num976 - 1] == null)
																{
																	Main.tile[num975, num976 - 1] = new Tile();
																}
																if (Main.tile[num975, num976] == null)
																{
																	Main.tile[num975, num976] = new Tile();
																}
																if (Main.tile[num975, num976 + 1] == null)
																{
																	Main.tile[num975, num976 + 1] = new Tile();
																}
																if (Main.tile[num975, num976 - 1].liquid > 0)
																{
																	num978 = (float)(num976 * 16);
																	num978 -= (float)(Main.tile[num975, num976 - 1].liquid / 16);
																}
																else if (Main.tile[num975, num976].liquid > 0)
																{
																	num978 = (float)((num976 + 1) * 16);
																	num978 -= (float)(Main.tile[num975, num976].liquid / 16);
																}
																else if (Main.tile[num975, num976 + 1].liquid > 0)
																{
																	num978 = (float)((num976 + 2) * 16);
																	num978 -= (float)(Main.tile[num975, num976 + 1].liquid / 16);
																}
																num978 -= 6f;
																if (base.Center.Y > num978)
																{
																	this.velocity.Y = this.velocity.Y - 0.1f;
																	if (this.velocity.Y < -8f)
																	{
																		this.velocity.Y = -8f;
																	}
																	if (base.Center.Y + this.velocity.Y < num978)
																	{
																		this.velocity.Y = num978 - base.Center.Y;
																	}
																}
																else
																{
																	this.velocity.Y = num978 - base.Center.Y;
																}
															}
															if (Main.netMode != 1)
															{
																if (!this.wet)
																{
																	this.ai[0] = 1f;
																	this.netUpdate = true;
																	this.direction = -this.direction;
																	return;
																}
																Rectangle rectangle7 = new Rectangle((int)Main.player[this.target].position.X, (int)Main.player[this.target].position.Y, Main.player[this.target].width, Main.player[this.target].height);
																Rectangle rectangle8 = new Rectangle((int)this.position.X - 100, (int)this.position.Y - 100, this.width + 200, this.height + 200);
																if (rectangle8.Intersects(rectangle7) || this.life < this.lifeMax)
																{
																	this.ai[0] = 1f;
																	this.velocity.Y = this.velocity.Y - 6f;
																	this.netUpdate = true;
																	this.direction = -this.direction;
																	return;
																}
															}
														}
														else if (!Main.player[this.target].dead)
														{
															bool flag60 = false;
															this.ai[1] += 1f;
															if (this.ai[1] >= 300f)
															{
																flag60 = true;
															}
															if (flag60)
															{
																if (this.velocity.Y == 0f || this.collideY || this.wet)
																{
																	this.velocity.X = 0f;
																	this.velocity.Y = 0f;
																	this.ai[0] = 0f;
																	this.ai[1] = 0f;
																	if (Main.netMode != 1)
																	{
																		if ((this.type == 363 || this.type == 365) && !this.wet)
																		{
																			int direction4 = this.direction;
																			this.Transform(this.type - 1);
																			this.TargetClosest(true);
																			this.direction = direction4;
																			this.ai[0] = 0f;
																			this.ai[1] = (float)(200 + Main.rand.Next(200));
																		}
																		this.netUpdate = true;
																		return;
																	}
																}
																else
																{
																	this.velocity.X = this.velocity.X * 0.98f;
																	this.velocity.Y = this.velocity.Y + 0.1f;
																	if (this.velocity.Y > 2f)
																	{
																		this.velocity.Y = 2f;
																		return;
																	}
																}
															}
															else
															{
																if (this.collideX)
																{
																	this.direction *= -1;
																	this.velocity.X = this.oldVelocity.X * -0.5f;
																	if (this.direction == -1 && this.velocity.X > 0f && this.velocity.X < 2f)
																	{
																		this.velocity.X = 2f;
																	}
																	if (this.direction == 1 && this.velocity.X < 0f && this.velocity.X > -2f)
																	{
																		this.velocity.X = -2f;
																	}
																}
																if (this.collideY)
																{
																	this.velocity.Y = this.oldVelocity.Y * -0.5f;
																	if (this.velocity.Y > 0f && this.velocity.Y < 1f)
																	{
																		this.velocity.Y = 1f;
																	}
																	if (this.velocity.Y < 0f && this.velocity.Y > -1f)
																	{
																		this.velocity.Y = -1f;
																	}
																}
																if (this.direction == -1 && this.velocity.X > -3f)
																{
																	this.velocity.X = this.velocity.X - 0.1f;
																	if (this.velocity.X > 3f)
																	{
																		this.velocity.X = this.velocity.X - 0.1f;
																	}
																	else if (this.velocity.X > 0f)
																	{
																		this.velocity.X = this.velocity.X - 0.05f;
																	}
																	if (this.velocity.X < -3f)
																	{
																		this.velocity.X = -3f;
																	}
																}
																else if (this.direction == 1 && this.velocity.X < 3f)
																{
																	this.velocity.X = this.velocity.X + 0.1f;
																	if (this.velocity.X < -3f)
																	{
																		this.velocity.X = this.velocity.X + 0.1f;
																	}
																	else if (this.velocity.X < 0f)
																	{
																		this.velocity.X = this.velocity.X + 0.05f;
																	}
																	if (this.velocity.X > 3f)
																	{
																		this.velocity.X = 3f;
																	}
																}
																int num979 = (int)((this.position.X + (float)(this.width / 2)) / 16f) + this.direction;
																int num980 = (int)((this.position.Y + (float)this.height) / 16f);
																bool flag61 = true;
																int num981 = 15;
																bool flag62 = false;
																for (int num982 = num980; num982 < num980 + num981; num982++)
																{
																	if (Main.tile[num979, num982] == null)
																	{
																		Main.tile[num979, num982] = new Tile();
																	}
																	if ((Main.tile[num979, num982].nactive() && Main.tileSolid[(int)Main.tile[num979, num982].type]) || Main.tile[num979, num982].liquid > 0)
																	{
																		if (num982 < num980 + 5)
																		{
																			flag62 = true;
																		}
																		flag61 = false;
																		break;
																	}
																}
																if (flag61)
																{
																	this.velocity.Y = this.velocity.Y + 0.1f;
																}
																else
																{
																	this.velocity.Y = this.velocity.Y - 0.1f;
																}
																if (flag62)
																{
																	this.velocity.Y = this.velocity.Y - 0.2f;
																}
																if (this.velocity.Y > 3f)
																{
																	this.velocity.Y = 3f;
																}
																if (this.velocity.Y < -4f)
																{
																	this.velocity.Y = -4f;
																	return;
																}
															}
														}
													}
													else
													{
														if (this.aiStyle == 69)
														{
															this.AI_069_DukeFishron();
															return;
														}
														if (this.aiStyle == 70)
														{
															if (this.target == 255)
															{
																this.TargetClosest(true);
																this.ai[3] = (float)Main.rand.Next(80, 121) / 100f;
																float scaleFactor = (float)Main.rand.Next(165, 265) / 15f;
																this.velocity = Vector2.Normalize(Main.player[this.target].Center - base.Center + new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101))) * scaleFactor;
																this.netUpdate = true;
															}
															Vector2 vector122 = Vector2.Normalize(Main.player[this.target].Center - base.Center);
															this.velocity = (this.velocity * 40f + vector122 * 20f) / 41f;
															this.scale = this.ai[3];
															this.alpha -= 30;
															if (this.alpha < 50)
															{
																this.alpha = 50;
															}
															this.alpha = 50;
															this.velocity.X = (this.velocity.X * 50f + Main.windSpeed * 2f + (float)Main.rand.Next(-10, 11) * 0.1f) / 51f;
															this.velocity.Y = (this.velocity.Y * 50f + -0.25f + (float)Main.rand.Next(-10, 11) * 0.2f) / 51f;
															if (this.velocity.Y > 0f)
															{
																this.velocity.Y = this.velocity.Y - 0.04f;
															}
															if (this.ai[0] == 0f)
															{
																int num983 = 40;
																Rectangle rect = this.getRect();
																rect.X -= num983 + this.width / 2;
																rect.Y -= num983 + this.height / 2;
																rect.Width += num983 * 2;
																rect.Height += num983 * 2;
																for (int num984 = 0; num984 < 255; num984++)
																{
																	Player player2 = Main.player[num984];
																	if (player2.active && !player2.dead && rect.Intersects(player2.getRect()))
																	{
																		this.ai[0] = 1f;
																		this.ai[1] = 4f;
																		this.netUpdate = true;
																		break;
																	}
																}
															}
															if (this.ai[0] == 0f)
															{
																this.ai[1] += 1f;
																if (this.ai[1] >= 150f)
																{
																	this.ai[0] = 1f;
																	this.ai[1] = 4f;
																}
															}
															if (this.ai[0] == 1f)
															{
																this.ai[1] -= 1f;
																if (this.ai[1] <= 0f)
																{
																	this.life = 0;
																	this.HitEffect(0, 10.0);
																	this.active = false;
																	return;
																}
															}
															if (this.justHit || this.ai[0] == 1f)
															{
																this.dontTakeDamage = true;
																this.position = base.Center;
																this.width = (this.height = 100);
																this.position = new Vector2(this.position.X - (float)(this.width / 2), this.position.Y - (float)(this.height / 2));
																if (this.timeLeft > 3)
																{
																	this.timeLeft = 3;
																	return;
																}
															}
														}
														else if (this.aiStyle == 71)
														{
															this.noTileCollide = true;
															int num985 = 90;
															if (this.target < 0 || this.target == 255 || Main.player[this.target].dead)
															{
																this.TargetClosest(false);
																this.direction = 1;
																this.netUpdate = true;
															}
															if (this.ai[0] == 0f)
															{
																this.ai[1] += 1f;
																int arg_2F288_0 = this.type;
																this.noGravity = true;
																this.dontTakeDamage = true;
																this.velocity.Y = this.ai[3];
																if (this.type == 373)
																{
																	float num986 = 0.104719758f;
																	float num987 = this.ai[2];
																	float num988 = (float)(Math.Cos((double)(num986 * this.localAI[1])) - 0.5) * num987;
																	this.position.X = this.position.X - num988 * (float)(-(float)this.direction);
																	this.localAI[1] += 1f;
																	num988 = (float)(Math.Cos((double)(num986 * this.localAI[1])) - 0.5) * num987;
																	this.position.X = this.position.X + num988 * (float)(-(float)this.direction);
																	if (Math.Abs(Math.Cos((double)(num986 * this.localAI[1])) - 0.5) > 0.25)
																	{
																		this.spriteDirection = ((Math.Cos((double)(num986 * this.localAI[1])) - 0.5 >= 0.0) ? -1 : 1);
																	}
																	this.rotation = this.velocity.Y * (float)this.spriteDirection * 0.1f;
																	if ((double)this.rotation < -0.2)
																	{
																		this.rotation = -0.2f;
																	}
																	if ((double)this.rotation > 0.2)
																	{
																		this.rotation = 0.2f;
																	}
																	this.alpha -= 6;
																	if (this.alpha < 0)
																	{
																		this.alpha = 0;
																	}
																}
																if (this.ai[1] >= (float)num985)
																{
																	this.ai[0] = 1f;
																	this.ai[1] = 0f;
																	if (!Collision.SolidCollision(this.position, this.width, this.height))
																	{
																		this.ai[1] = 1f;
																	}
																	Main.PlaySound(4, (int)base.Center.X, (int)base.Center.Y, 19, 1f, 0f);
																	this.TargetClosest(true);
																	this.spriteDirection = this.direction;
																	Vector2 vector123 = Main.player[this.target].Center - base.Center;
																	vector123.Normalize();
																	this.velocity = vector123 * 16f;
																	this.rotation = this.velocity.ToRotation();
																	if (this.direction == -1)
																	{
																		this.rotation += 3.14159274f;
																	}
																	this.netUpdate = true;
																	return;
																}
															}
															else if (this.ai[0] == 1f)
															{
																this.noGravity = true;
																if (!Collision.SolidCollision(this.position, this.width, this.height))
																{
																	if (this.ai[1] < 1f)
																	{
																		this.ai[1] = 1f;
																	}
																}
																else
																{
																	this.alpha -= 15;
																	if (this.alpha < 150)
																	{
																		this.alpha = 150;
																	}
																}
																if (this.ai[1] >= 1f)
																{
																	this.alpha -= 60;
																	if (this.alpha < 0)
																	{
																		this.alpha = 0;
																	}
																	this.dontTakeDamage = false;
																	this.ai[1] += 1f;
																	if (Collision.SolidCollision(this.position, this.width, this.height))
																	{
																		if (this.DeathSound != null)
																		{
																			Main.PlaySound(this.DeathSound, this.position);
																		}
																		this.life = 0;
																		this.HitEffect(0, 10.0);
																		this.active = false;
																		return;
																	}
																}
																if (this.ai[1] >= 60f)
																{
																	this.noGravity = false;
																}
																this.rotation = this.velocity.ToRotation();
																if (this.direction == -1)
																{
																	this.rotation += 3.14159274f;
																	return;
																}
															}
														}
														else if (this.aiStyle == 72)
														{
															if (this.type == 384)
															{
																int num989 = (int)this.ai[0];
																if (Main.npc[num989].active && Main.npc[num989].type == 383)
																{
																	this.velocity = Vector2.Zero;
																	this.position = Main.npc[num989].Center;
																	this.position.X = this.position.X - (float)(this.width / 2);
																	this.position.Y = this.position.Y - (float)(this.height / 2);
																	this.gfxOffY = Main.npc[num989].gfxOffY;
																	Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.1f, 0.5f, 0.7f);
																	return;
																}
																this.life = 0;
																this.HitEffect(0, 10.0);
																this.active = false;
																return;
															}
														}
														else if (this.aiStyle == 73)
														{
															this.TargetClosest(false);
															this.spriteDirection = this.direction;
															this.velocity.X = this.velocity.X * 0.93f;
															if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1)
															{
																this.velocity.X = 0f;
															}
															if (this.type == 387)
															{
																float num990 = 120f;
																float num991 = 60f;
																if (this.ai[1] < num990)
																{
																	this.ai[1] += 1f;
																	if (this.ai[1] > 60f)
																	{
																		float num992 = (this.ai[1] - num991) / (num990 - num991);
																		this.alpha = (int)((1f - num992) * 255f);
																	}
																	else
																	{
																		this.alpha = 255;
																	}
																	this.dontTakeDamage = true;
																	this.frameCounter = 0.0;
																	this.frame.Y = 0;
																	float num993 = this.ai[1] / num991;
																	Vector2 spinningpoint = new Vector2(0f, -30f);
																	spinningpoint = spinningpoint.RotatedBy((double)(num993 * 1.5f * 6.28318548f), default(Vector2)) * new Vector2(1f, 0.4f);
																	for (int num994 = 0; num994 < 4; num994++)
																	{
																		Vector2 value5 = Vector2.Zero;
																		float scaleFactor2 = 1f;
																		if (num994 == 0)
																		{
																			value5 = Vector2.UnitY * -15f;
																			scaleFactor2 = 0.15f;
																		}
																		if (num994 == 1)
																		{
																			value5 = Vector2.UnitY * -5f;
																			scaleFactor2 = 0.3f;
																		}
																		if (num994 == 2)
																		{
																			value5 = Vector2.UnitY * 5f;
																			scaleFactor2 = 0.6f;
																		}
																		if (num994 == 3)
																		{
																			value5 = Vector2.UnitY * 20f;
																			scaleFactor2 = 0.45f;
																		}
																		int num995 = Dust.NewDust(base.Center, 0, 0, 226, 0f, 0f, 100, default(Color), 0.5f);
																		Main.dust[num995].noGravity = true;
																		Main.dust[num995].position = base.Center + spinningpoint * scaleFactor2 + value5;
																		Main.dust[num995].velocity = Vector2.Zero;
																		spinningpoint *= -1f;
																		num995 = Dust.NewDust(base.Center, 0, 0, 226, 0f, 0f, 100, default(Color), 0.5f);
																		Main.dust[num995].noGravity = true;
																		Main.dust[num995].position = base.Center + spinningpoint * scaleFactor2 + value5;
																		Main.dust[num995].velocity = Vector2.Zero;
																	}
																	Lighting.AddLight((int)base.Center.X / 16, (int)(base.Center.Y - 10f) / 16, 0.1f * num993, 0.5f * num993, 0.7f * num993);
																	return;
																}
																Lighting.AddLight((int)base.Center.X / 16, (int)(base.Center.Y - 10f) / 16, 0.1f, 0.5f, 0.7f);
																this.dontTakeDamage = false;
															}
															if (this.ai[0] < 60f)
															{
																this.ai[0] += 1f;
															}
															if (this.justHit)
															{
																this.ai[0] = -30f;
															}
															if (this.ai[0] == 60f)
															{
																this.ai[0] = -120f;
																Vector2 center3 = Main.player[this.target].Center;
																Vector2 value6 = base.Center - Vector2.UnitY * 10f;
																Vector2 vector124 = center3 - value6;
																vector124.X += (float)Main.rand.Next(-100, 101);
																vector124.Y += (float)Main.rand.Next(-100, 101);
																vector124.X *= (float)Main.rand.Next(70, 131) * 0.01f;
																vector124.Y *= (float)Main.rand.Next(70, 131) * 0.01f;
																vector124.Normalize();
																if (float.IsNaN(vector124.X) || float.IsNaN(vector124.Y))
																{
																	vector124 = -Vector2.UnitY;
																}
																vector124 *= 14f;
																int num996 = 35;
																if (Main.expertMode && this.type >= 381 && this.type <= 392)
																{
																	num996 = (int)((double)num996 * 0.8);
																}
																Projectile.NewProjectile(value6.X, value6.Y, vector124.X, vector124.Y, 435, num996, 0f, Main.myPlayer, 0f, 0f);
																return;
															}
														}
														else if (this.aiStyle == 74)
														{
															this.TargetClosest(false);
															this.rotation = this.velocity.ToRotation();
															if (Math.Sign(this.velocity.X) != 0)
															{
																this.spriteDirection = -Math.Sign(this.velocity.X);
															}
															if (this.rotation < -1.57079637f)
															{
																this.rotation += 3.14159274f;
															}
															if (this.rotation > 1.57079637f)
															{
																this.rotation -= 3.14159274f;
															}
															if (this.type == 418)
															{
																this.spriteDirection = Math.Sign(this.velocity.X);
															}
															float num997 = 0.4f;
															float num998 = 10f;
															float scaleFactor3 = 200f;
															float num999 = 750f;
															float num1000 = 30f;
															float num1001 = 30f;
															float scaleFactor4 = 0.95f;
															int num1002 = 50;
															float scaleFactor5 = 14f;
															float num1003 = 30f;
															float num1004 = 100f;
															float num1005 = 20f;
															float num1006 = 0f;
															float num1007 = 7f;
															bool flag63 = true;
															if (this.type == 418)
															{
																num997 = 0.3f;
																num998 = 8f;
																scaleFactor3 = 300f;
																num999 = 800f;
																num1000 = 60f;
																num1001 = 5f;
																scaleFactor4 = 0.8f;
																num1002 = 0;
																scaleFactor5 = 10f;
																num1003 = 30f;
																num1004 = 150f;
																num1005 = 60f;
																num1006 = 0.333333343f;
																num1007 = 8f;
																flag63 = false;
															}
															num1006 *= num1005;
															if (Main.expertMode)
															{
																num997 *= Main.expertKnockBack;
															}
															if (this.type == 388 && this.ai[0] != 3f)
															{
																int num1008 = Dust.NewDust(this.position, this.width, this.height, 226, 0f, 0f, 100, default(Color), 0.5f);
																Main.dust[num1008].noGravity = true;
																Main.dust[num1008].velocity = this.velocity / 5f;
																Vector2 vector125 = new Vector2(-10f, 10f);
																if (this.spriteDirection == 1)
																{
																	vector125.X *= -1f;
																}
																vector125 = vector125.RotatedBy((double)this.rotation, default(Vector2));
																Main.dust[num1008].position = base.Center + vector125;
															}
															if (this.type == 418)
															{
																int num1009 = (this.ai[0] == 2f) ? 2 : 1;
																int num1010 = (this.ai[0] == 2f) ? 30 : 20;
																for (int num1011 = 0; num1011 < 2; num1011++)
																{
																	if (Main.rand.Next(3) < num1009)
																	{
																		int num1012 = Dust.NewDust(base.Center - new Vector2((float)num1010), num1010 * 2, num1010 * 2, 6, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 90, default(Color), 1.5f);
																		Main.dust[num1012].noGravity = true;
																		Main.dust[num1012].velocity *= 0.2f;
																		Main.dust[num1012].fadeIn = 1f;
																	}
																}
															}
															if (this.ai[0] == 0f)
															{
																this.knockBackResist = num997;
																float scaleFactor6 = num998;
																Vector2 center4 = base.Center;
																Vector2 center5 = Main.player[this.target].Center;
																Vector2 vector126 = center5 - center4;
																Vector2 vector127 = vector126 - Vector2.UnitY * scaleFactor3;
																float num1013 = vector126.Length();
																vector126 = Vector2.Normalize(vector126) * scaleFactor6;
																vector127 = Vector2.Normalize(vector127) * scaleFactor6;
																bool flag64 = Collision.CanHit(base.Center, 1, 1, Main.player[this.target].Center, 1, 1);
																if (this.ai[3] >= 120f)
																{
																	flag64 = true;
																}
																float num1014 = 8f;
																flag64 = (flag64 && vector126.ToRotation() > 3.14159274f / num1014 && vector126.ToRotation() < 3.14159274f - 3.14159274f / num1014);
																if (num1013 > num999 || !flag64)
																{
																	this.velocity.X = (this.velocity.X * (num1000 - 1f) + vector127.X) / num1000;
																	this.velocity.Y = (this.velocity.Y * (num1000 - 1f) + vector127.Y) / num1000;
																	if (!flag64)
																	{
																		this.ai[3] += 1f;
																		if (this.ai[3] == 120f)
																		{
																			this.netUpdate = true;
																		}
																	}
																	else
																	{
																		this.ai[3] = 0f;
																	}
																}
																else
																{
																	this.ai[0] = 1f;
																	this.ai[2] = vector126.X;
																	this.ai[3] = vector126.Y;
																	this.netUpdate = true;
																}
															}
															else if (this.ai[0] == 1f)
															{
																this.knockBackResist = 0f;
																this.velocity *= scaleFactor4;
																this.ai[1] += 1f;
																if (this.ai[1] >= num1001)
																{
																	this.ai[0] = 2f;
																	this.ai[1] = 0f;
																	this.netUpdate = true;
																	Vector2 velocity = new Vector2(this.ai[2], this.ai[3]) + new Vector2((float)Main.rand.Next(-num1002, num1002 + 1), (float)Main.rand.Next(-num1002, num1002 + 1)) * 0.04f;
																	velocity.Normalize();
																	velocity *= scaleFactor5;
																	this.velocity = velocity;
																}
																if (this.type == 388 && Main.rand.Next(4) == 0)
																{
																	int num1015 = Dust.NewDust(this.position, this.width, this.height, 226, 0f, 0f, 100, default(Color), 0.5f);
																	Main.dust[num1015].noGravity = true;
																	Main.dust[num1015].velocity *= 2f;
																	Main.dust[num1015].velocity = Main.dust[num1015].velocity / 2f + Vector2.Normalize(Main.dust[num1015].position - base.Center);
																}
															}
															else if (this.ai[0] == 2f)
															{
																this.knockBackResist = 0f;
																float num1016 = num1003;
																this.ai[1] += 1f;
																bool flag65 = Vector2.Distance(base.Center, Main.player[this.target].Center) > num1004 && base.Center.Y > Main.player[this.target].Center.Y;
																if ((this.ai[1] >= num1016 && flag65) || this.velocity.Length() < num1007)
																{
																	this.ai[0] = 0f;
																	this.ai[1] = 0f;
																	this.ai[2] = 0f;
																	this.ai[3] = 0f;
																	this.velocity /= 2f;
																	this.netUpdate = true;
																	if (this.type == 418)
																	{
																		this.ai[1] = 45f;
																		this.ai[0] = 4f;
																	}
																}
																else
																{
																	Vector2 center6 = base.Center;
																	Vector2 center7 = Main.player[this.target].Center;
																	Vector2 vec2 = center7 - center6;
																	vec2.Normalize();
																	if (vec2.HasNaNs())
																	{
																		vec2 = new Vector2((float)this.direction, 0f);
																	}
																	this.velocity = (this.velocity * (num1005 - 1f) + vec2 * (this.velocity.Length() + num1006)) / num1005;
																}
																if (flag63 && Collision.SolidCollision(this.position, this.width, this.height))
																{
																	this.ai[0] = 3f;
																	this.ai[1] = 0f;
																	this.ai[2] = 0f;
																	this.ai[3] = 0f;
																	this.netUpdate = true;
																}
															}
															else if (this.ai[0] == 4f)
															{
																this.ai[1] -= 3f;
																if (this.ai[1] <= 0f)
																{
																	this.ai[0] = 0f;
																	this.ai[1] = 0f;
																	this.netUpdate = true;
																}
																this.velocity *= 0.95f;
															}
															if (flag63 && this.ai[0] != 3f && Vector2.Distance(base.Center, Main.player[this.target].Center) < 64f)
															{
																this.ai[0] = 3f;
																this.ai[1] = 0f;
																this.ai[2] = 0f;
																this.ai[3] = 0f;
																this.netUpdate = true;
															}
															if (this.ai[0] == 3f)
															{
																this.position = base.Center;
																this.width = (this.height = 192);
																this.position.X = this.position.X - (float)(this.width / 2);
																this.position.Y = this.position.Y - (float)(this.height / 2);
																this.velocity = Vector2.Zero;
																this.damage = (int)(80f * Main.damageMultiplier);
																this.alpha = 255;
																Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.2f, 0.7f, 1.1f);
																for (int num1017 = 0; num1017 < 10; num1017++)
																{
																	int num1018 = Dust.NewDust(this.position, this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
																	Main.dust[num1018].velocity *= 1.4f;
																	Main.dust[num1018].position = ((float)Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() * ((float)Main.rand.NextDouble() * 96f) + base.Center;
																}
																for (int num1019 = 0; num1019 < 40; num1019++)
																{
																	int num1020 = Dust.NewDust(this.position, this.width, this.height, 226, 0f, 0f, 100, default(Color), 0.5f);
																	Main.dust[num1020].noGravity = true;
																	Main.dust[num1020].velocity *= 2f;
																	Main.dust[num1020].position = ((float)Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() * ((float)Main.rand.NextDouble() * 96f) + base.Center;
																	Main.dust[num1020].velocity = Main.dust[num1020].velocity / 2f + Vector2.Normalize(Main.dust[num1020].position - base.Center);
																	if (Main.rand.Next(2) == 0)
																	{
																		num1020 = Dust.NewDust(this.position, this.width, this.height, 226, 0f, 0f, 100, default(Color), 0.9f);
																		Main.dust[num1020].noGravity = true;
																		Main.dust[num1020].velocity *= 1.2f;
																		Main.dust[num1020].position = ((float)Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() * ((float)Main.rand.NextDouble() * 96f) + base.Center;
																		Main.dust[num1020].velocity = Main.dust[num1020].velocity / 2f + Vector2.Normalize(Main.dust[num1020].position - base.Center);
																	}
																	if (Main.rand.Next(4) == 0)
																	{
																		num1020 = Dust.NewDust(this.position, this.width, this.height, 226, 0f, 0f, 100, default(Color), 0.7f);
																		Main.dust[num1020].velocity *= 1.2f;
																		Main.dust[num1020].position = ((float)Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() * ((float)Main.rand.NextDouble() * 96f) + base.Center;
																		Main.dust[num1020].velocity = Main.dust[num1020].velocity / 2f + Vector2.Normalize(Main.dust[num1020].position - base.Center);
																	}
																}
																this.ai[1] += 1f;
																if (this.ai[1] >= 3f)
																{
																	Main.PlaySound(SoundID.Item14, this.position);
																	this.life = 0;
																	this.HitEffect(0, 10.0);
																	this.active = false;
																	return;
																}
															}
														}
														else if (this.aiStyle == 75)
														{
															int num1021 = -1;
															Vector2 vector128 = Vector2.Zero;
															int num1022 = 0;
															if (this.type == 390)
															{
																if (this.localAI[0] == 0f && Main.netMode != 1)
																{
																	this.localAI[0] = 1f;
																	int num1023 = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 391, this.whoAmI, 0f, 0f, 0f, 0f, 255);
																	this.ai[0] = (float)num1023;
																	this.netUpdate = true;
																}
																int num1024 = (int)this.ai[0];
																if (Main.npc[num1024].active && Main.npc[num1024].type == 391)
																{
																	if (this.timeLeft < 60)
																	{
																		this.timeLeft = 60;
																	}
																	num1021 = num1024;
																	vector128 = Vector2.UnitY * -14f;
																}
															}
															if (this.type == 416)
															{
																if (this.localAI[0] == 0f && Main.netMode != 1)
																{
																	this.localAI[0] = 1f;
																	int num1025 = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 415, this.whoAmI, 0f, 0f, 0f, 0f, 255);
																	this.ai[0] = (float)num1025;
																	this.netUpdate = true;
																}
																int num1026 = (int)this.ai[0];
																if (Main.npc[num1026].active && Main.npc[num1026].type == 415)
																{
																	if (this.timeLeft < 60)
																	{
																		this.timeLeft = 60;
																	}
																	num1021 = num1026;
																	vector128 = new Vector2((float)(-(float)Main.npc[num1026].spriteDirection * 10), -30f);
																}
															}
															else if (this.type == 392)
															{
																int num1027 = (int)this.ai[0];
																if (Main.npc[num1027].active && Main.npc[num1027].type == 395)
																{
																	if (this.timeLeft < 60)
																	{
																		this.timeLeft = 60;
																	}
																	num1021 = num1027;
																	vector128 = Vector2.UnitY * 2f;
																	vector128 *= Main.npc[num1027].scale;
																	float num1028 = Main.npc[num1027].rotation;
																	vector128 = vector128.RotatedBy((double)num1028, default(Vector2));
																	this.rotation = num1028;
																	if (Main.netMode != 1)
																	{
																		bool flag66 = true;
																		if (Main.npc[num1027].ai[0] >= 1f || Main.npc[num1027].ai[0] < 0f)
																		{
																			flag66 = false;
																		}
																		if (flag66)
																		{
																			for (int num1029 = 0; num1029 < 2; num1029++)
																			{
																				if (Main.npc[(int)this.localAI[num1029]].active && Main.npc[(int)this.localAI[num1029]].type == 393)
																				{
																					flag66 = false;
																				}
																			}
																			for (int num1030 = 2; num1030 < 4; num1030++)
																			{
																				if (Main.npc[(int)this.localAI[num1030]].active && Main.npc[(int)this.localAI[num1030]].type == 394)
																				{
																					flag66 = false;
																				}
																			}
																		}
																		if (Main.npc[num1027].ai[3] % 200f == 0f && Main.npc[num1027].ai[0] != 1f)
																		{
																			for (int num1031 = 0; num1031 < 2; num1031++)
																			{
																				if (Main.npc[(int)this.localAI[num1031]].active && Main.npc[(int)this.localAI[num1031]].type == 393)
																				{
																					Main.npc[(int)this.localAI[num1031]].netUpdate = true;
																				}
																			}
																			for (int num1032 = 2; num1032 < 4; num1032++)
																			{
																				if (Main.npc[(int)this.localAI[num1032]].active && Main.npc[(int)this.localAI[num1032]].type == 394)
																				{
																					Main.npc[(int)this.localAI[num1032]].netUpdate = true;
																				}
																			}
																			this.netUpdate = true;
																		}
																		if (flag66)
																		{
																			Main.npc[num1027].ai[0] = 1f;
																			Main.npc[num1027].ai[1] = 0f;
																			Main.npc[num1027].ai[2] = 0f;
																			Main.npc[num1027].ai[3] = 0f;
																			Main.npc[num1027].netUpdate = true;
																		}
																	}
																}
															}
															else if (this.type == 393)
															{
																int num1033 = (int)this.ai[0];
																if (Main.npc[num1033].active && Main.npc[num1033].type == 395)
																{
																	if (this.timeLeft < 60)
																	{
																		this.timeLeft = 60;
																	}
																	num1021 = num1033;
																	vector128 = Vector2.UnitY * 29f + ((this.ai[1] == 1f) ? Vector2.UnitX : (-Vector2.UnitX)) * 60f;
																	vector128 *= Main.npc[num1033].scale;
																	float num1034 = Main.npc[num1033].rotation;
																	vector128 = vector128.RotatedBy((double)num1034, default(Vector2));
																	this.rotation = num1034;
																}
															}
															else if (this.type == 394)
															{
																int num1035 = (int)this.ai[0];
																if (Main.npc[num1035].active && Main.npc[num1035].type == 395)
																{
																	if (this.timeLeft < 60)
																	{
																		this.timeLeft = 60;
																	}
																	num1021 = num1035;
																	vector128 = Vector2.UnitY * -13f + ((this.ai[1] == 1f) ? Vector2.UnitX : (-Vector2.UnitX)) * 49f;
																	vector128 *= Main.npc[num1035].scale;
																	float num1036 = Main.npc[num1035].rotation;
																	vector128 = vector128.RotatedBy((double)num1036, default(Vector2));
																	this.rotation = num1036;
																	num1022 = ((this.ai[1] == 1f) ? 1 : -1);
																}
															}
															else if (this.type == 492)
															{
																int num1037 = (int)this.ai[0];
																if (Main.npc[num1037].active && Main.npc[num1037].type == 491)
																{
																	if (this.timeLeft < 60)
																	{
																		this.timeLeft = 60;
																	}
																	num1021 = num1037;
																	vector128 = new Vector2((-122f + 68f * this.ai[1]) * (float)((Main.npc[num1037].spriteDirection == 1) ? -1 : 1), -6f);
																	vector128 *= Main.npc[num1037].scale;
																	float num1038 = Main.npc[num1037].rotation;
																	vector128 = vector128.RotatedBy((double)num1038, default(Vector2));
																	this.rotation = num1038;
																}
															}
															if (num1021 != -1)
															{
																NPC nPC2 = Main.npc[num1021];
																this.velocity = Vector2.Zero;
																this.position = nPC2.Center;
																this.position.X = this.position.X - (float)(this.width / 2);
																this.position.Y = this.position.Y - (float)(this.height / 2);
																this.position += vector128;
																this.gfxOffY = nPC2.gfxOffY;
																this.direction = nPC2.direction;
																if (num1022 == 0)
																{
																	this.spriteDirection = nPC2.spriteDirection;
																}
																else
																{
																	this.spriteDirection = num1022;
																}
																if (this.type == 390)
																{
																	this.timeLeft = nPC2.timeLeft;
																	this.velocity = nPC2.velocity;
																	this.target = nPC2.target;
																	if (this.ai[1] < 60f)
																	{
																		this.ai[1] += 1f;
																	}
																	if (this.justHit)
																	{
																		this.ai[1] = -30f;
																	}
																	int num1039 = 438;
																	int num1040 = 30;
																	float scaleFactor7 = 7f;
																	if (Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
																	{
																		Vector2 vector129 = Main.player[this.target].Center - base.Center;
																		Vector2 vector130 = Vector2.Normalize(vector129);
																		float num1041 = vector129.Length();
																		float num1042 = 700f;
																		if (this.type == 214)
																		{
																			num1042 = 550f;
																		}
																		if (this.type == 215)
																		{
																			num1042 = 800f;
																		}
																		if (num1041 < num1042)
																		{
																			if (this.ai[1] == 60f && Math.Sign(vector129.X) == this.direction)
																			{
																				this.ai[1] = -60f;
																				Vector2 center8 = Main.player[this.target].Center;
																				Vector2 value7 = base.Center - Vector2.UnitY * 4f;
																				Vector2 vector131 = center8 - value7;
																				vector131.X += (float)Main.rand.Next(-50, 51);
																				vector131.Y += (float)Main.rand.Next(-50, 51);
																				vector131.X *= (float)Main.rand.Next(80, 121) * 0.01f;
																				vector131.Y *= (float)Main.rand.Next(80, 121) * 0.01f;
																				vector131.Normalize();
																				if (float.IsNaN(vector131.X) || float.IsNaN(vector131.Y))
																				{
																					vector131 = -Vector2.UnitY;
																				}
																				vector131 *= scaleFactor7;
																				Projectile.NewProjectile(value7.X, value7.Y, vector131.X, vector131.Y, num1039, num1040, 0f, Main.myPlayer, 0f, 0f);
																				this.netUpdate = true;
																			}
																			else
																			{
																				float num1043 = this.ai[2];
																				this.velocity.X = this.velocity.X * 0.5f;
																				this.ai[2] = 3f;
																				if (Math.Abs(vector130.Y) > Math.Abs(vector130.X) * 2f)
																				{
																					if (vector130.Y > 0f)
																					{
																						this.ai[2] = 1f;
																					}
																					else
																					{
																						this.ai[2] = 5f;
																					}
																				}
																				else if (Math.Abs(vector130.X) > Math.Abs(vector130.Y) * 2f)
																				{
																					this.ai[2] = 3f;
																				}
																				else if (vector130.Y > 0f)
																				{
																					this.ai[2] = 2f;
																				}
																				else
																				{
																					this.ai[2] = 4f;
																				}
																				if (this.ai[2] != num1043)
																				{
																					this.netUpdate = true;
																				}
																			}
																		}
																	}
																}
																if (this.type == 492)
																{
																	this.timeLeft = nPC2.timeLeft;
																	this.velocity = nPC2.velocity;
																	if (this.ai[3] < 240f)
																	{
																		this.ai[3] += 1f;
																	}
																	if (this.ai[3] == 2f)
																	{
																		this.TargetClosest(false);
																	}
																	if (Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
																	{
																		Vector2 vector132 = Main.player[this.target].Center - base.Center;
																		Vector2.Normalize(vector132);
																		if (this.ai[3] >= 240f)
																		{
																			this.ai[3] = 0f;
																			Vector2 center9 = Main.player[this.target].Center;
																			Vector2 center10 = base.Center;
																			Vector2 value8 = Vector2.Normalize(center9 - center10);
																			if (float.IsNaN(value8.X) || float.IsNaN(value8.Y))
																			{
																				value8 = Vector2.UnitY;
																			}
																			value8 *= 14f;
																			value8 += Vector2.UnitY * -5f;
																			if (Main.netMode != 1)
																			{
																				Projectile.NewProjectile(center10.X, center10.Y, value8.X, value8.Y, 240, 30, 0f, Main.myPlayer, 0f, 0f);
																			}
																			this.netUpdate = true;
																		}
																		else
																		{
																			float num1044 = this.ai[2];
																			float[] array3 = new float[8];
																			for (int num1045 = 0; num1045 < array3.Length; num1045++)
																			{
																				array3[num1045] = Vector2.Distance(base.Center + Vector2.UnitY.RotatedBy((double)((float)num1045 * -0.7853982f), default(Vector2)) * 50f, Main.player[this.target].Center);
																			}
																			int num1046 = 0;
																			for (int num1047 = 1; num1047 < array3.Length; num1047++)
																			{
																				if (array3[num1046] > array3[num1047])
																				{
																					num1046 = num1047;
																				}
																			}
																			this.ai[2] = (float)(num1046 + 1);
																			if (this.spriteDirection == 1)
																			{
																				this.ai[2] = 9f - this.ai[2];
																			}
																			if (this.ai[2] != num1044)
																			{
																				this.netUpdate = true;
																			}
																		}
																	}
																	else
																	{
																		if (this.ai[2] != 0f)
																		{
																			this.netUpdate = true;
																		}
																		this.ai[2] = 0f;
																	}
																}
																if (this.type == 394)
																{
																	this.timeLeft = nPC2.timeLeft;
																	int num1048 = 50;
																	if (Main.expertMode)
																	{
																		num1048 = 37;
																	}
																	this.ai[3] = nPC2.ai[3];
																	float num1049 = 440f;
																	float num1050 = 140f;
																	if (this.ai[3] >= num1049 && this.ai[3] < num1049 + num1050)
																	{
																		float num1051 = this.ai[3] - num1049;
																		if (num1051 % 20f == 0f)
																		{
																			if (Main.netMode != 1)
																			{
																				Vector2 spinningpoint2 = (float)num1022 * Vector2.UnitX;
																				spinningpoint2 = spinningpoint2.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331, default(Vector2));
																				spinningpoint2 *= 8f;
																				Vector2 vector133 = (float)num1022 * Vector2.UnitX * 36f + base.Center + Vector2.UnitY * 8f;
																				Projectile.NewProjectile(vector133.X, vector133.Y, spinningpoint2.X, spinningpoint2.Y, 448, num1048, 0f, Main.myPlayer, 0f, 20f);
																			}
																			Main.PlaySound(SoundID.Item39, base.Center);
																		}
																	}
																}
																if (this.type == 393)
																{
																	this.timeLeft = nPC2.timeLeft;
																	int num1052 = 35;
																	if (Main.expertMode)
																	{
																		num1052 = 30;
																	}
																	this.ai[3] = nPC2.ai[3];
																	float num1053 = 280f;
																	float num1054 = 140f;
																	bool flag67 = this.ai[3] >= num1053 && this.ai[3] < num1053 + num1054;
																	if (!flag67)
																	{
																		this.TargetClosest(false);
																		Player player3 = Main.player[this.target];
																		Vector2 v = player3.Center - base.Center;
																		if (v.Y < 0f)
																		{
																			v.Y = 0f;
																		}
																		v.Normalize();
																		if (float.IsNaN(v.X) || float.IsNaN(v.Y))
																		{
																			v = Vector2.UnitY;
																		}
																		this.ai[2] = v.ToRotation();
																	}
																	if (flag67)
																	{
																		float num1055 = this.ai[3] - num1053;
																		if (num1055 % 6f == 0f)
																		{
																			if (Main.netMode != 1)
																			{
																				Vector2 spinningpoint3 = this.ai[2].ToRotationVector2();
																				spinningpoint3 = spinningpoint3.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331 / 3.0, default(Vector2));
																				spinningpoint3 *= 16f;
																				Vector2 vector134 = base.Center + spinningpoint3 * 1f;
																				Projectile.NewProjectile(vector134.X, vector134.Y, spinningpoint3.X, spinningpoint3.Y, 449, num1052, 0f, Main.myPlayer, 0f, 0f);
																			}
																			Main.PlaySound(SoundID.Item12, base.Center);
																		}
																	}
																}
																if (this.type == 392)
																{
																	this.timeLeft = nPC2.timeLeft;
																	int num1056 = 70;
																	if (Main.expertMode)
																	{
																		num1056 = 50;
																	}
																	this.ai[3] = nPC2.ai[3];
																	float num1057 = 20f;
																	float num1058 = 240f;
																	bool flag68 = this.ai[3] >= num1057 && this.ai[3] < num1057 + num1058 && nPC2.ai[0] == 0f;
																	if (flag68)
																	{
																		float num1059 = this.ai[3] - num1057;
																		if (num1059 == 0f)
																		{
																			if (Main.netMode != 1)
																			{
																				Vector2 center11 = base.Center;
																				Projectile.NewProjectile(center11.X, center11.Y, 0f, 0f, 447, num1056, 0f, Main.myPlayer, (float)(this.whoAmI + 1), 0f);
																			}
																			Main.PlaySound(SoundID.Item12, base.Center);
																		}
																	}
																	flag68 = false;
																	int maxValue4 = 1000;
																	int maxValue5 = 1000;
																	int num1060 = 450;
																	int num1061 = 30;
																	if (Main.expertMode)
																	{
																		num1061 = 25;
																	}
																	if (nPC2.ai[0] == 2f)
																	{
																		flag68 = true;
																		maxValue5 = 120;
																		maxValue4 = 120;
																	}
																	if (!flag68)
																	{
																		num1057 = 280f;
																		num1058 = 120f;
																		flag68 = (flag68 || (this.ai[3] >= num1057 && this.ai[3] < num1057 + num1058));
																		if (flag68)
																		{
																			maxValue5 = 90;
																			maxValue4 = 60;
																		}
																	}
																	if (!flag68)
																	{
																		num1057 = 440f;
																		num1058 = 140f;
																		flag68 = (flag68 || (this.ai[3] >= num1057 && this.ai[3] < num1057 + num1058));
																		if (flag68)
																		{
																			maxValue5 = 60;
																			maxValue4 = 90;
																		}
																	}
																	bool flag69 = true;
																	bool flag70 = true;
																	bool flag71 = true;
																	bool flag72 = true;
																	if (Main.npc[(int)this.localAI[0]].active && Main.npc[(int)this.localAI[0]].type == 393)
																	{
																		flag69 = false;
																	}
																	if (Main.npc[(int)this.localAI[1]].active && Main.npc[(int)this.localAI[1]].type == 393)
																	{
																		flag70 = false;
																	}
																	if (Main.npc[(int)this.localAI[2]].active && Main.npc[(int)this.localAI[2]].type == 394)
																	{
																		flag71 = false;
																	}
																	if (Main.npc[(int)this.localAI[3]].active && Main.npc[(int)this.localAI[3]].type == 394)
																	{
																		flag72 = false;
																	}
																	if (flag68)
																	{
																		bool flag73 = flag69;
																		if (flag73 && Main.rand.Next(maxValue4) == 0)
																		{
																			if (Main.netMode != 1)
																			{
																				Vector2 spinningpoint4 = new Vector2(-1f * (float)Main.rand.NextDouble() * 3f, 1f);
																				spinningpoint4 = spinningpoint4.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331, default(Vector2));
																				spinningpoint4 *= 3f;
																				Vector2 vector135 = -1f * Vector2.UnitX * (float)Main.rand.Next(50, 70) + base.Center + Vector2.UnitY * (float)Main.rand.Next(30, 45);
																				Projectile.NewProjectile(vector135.X, vector135.Y, spinningpoint4.X, spinningpoint4.Y, num1060, num1061, 0f, Main.myPlayer, 0f, 0f);
																			}
																			Main.PlaySound(SoundID.Item39, base.Center);
																		}
																		flag73 = flag70;
																		if (flag73 && Main.rand.Next(maxValue4) == 0)
																		{
																			if (Main.netMode != 1)
																			{
																				Vector2 spinningpoint5 = new Vector2(1f * (float)Main.rand.NextDouble() * 3f, 1f);
																				spinningpoint5 = spinningpoint5.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331, default(Vector2));
																				spinningpoint5 *= 3f;
																				Vector2 vector136 = 1f * Vector2.UnitX * (float)Main.rand.Next(50, 70) + base.Center + Vector2.UnitY * (float)Main.rand.Next(30, 45);
																				Projectile.NewProjectile(vector136.X, vector136.Y, spinningpoint5.X, spinningpoint5.Y, num1060, num1061, 0f, Main.myPlayer, 0f, 0f);
																			}
																			Main.PlaySound(SoundID.Item39, base.Center);
																		}
																	}
																	if (flag68)
																	{
																		bool flag74 = flag71;
																		if (flag74 && Main.rand.Next(maxValue5) == 0)
																		{
																			if (Main.netMode != 1)
																			{
																				Vector2 spinningpoint6 = new Vector2(-1f * (float)Main.rand.NextDouble() * 2f, -1f);
																				spinningpoint6 = spinningpoint6.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331, default(Vector2));
																				spinningpoint6 *= 3f;
																				Vector2 vector137 = -1f * Vector2.UnitX * (float)Main.rand.Next(30, 60) + base.Center + Vector2.UnitY * (float)Main.rand.Next(-30, -10);
																				Projectile.NewProjectile(vector137.X, vector137.Y, spinningpoint6.X, spinningpoint6.Y, num1060, num1061, 0f, Main.myPlayer, 0f, 0f);
																			}
																			Main.PlaySound(SoundID.Item39, base.Center);
																		}
																		flag74 = flag72;
																		if (flag74 && Main.rand.Next(maxValue5) == 0)
																		{
																			if (Main.netMode != 1)
																			{
																				Vector2 spinningpoint7 = new Vector2(1f * (float)Main.rand.NextDouble() * 2f, -1f);
																				spinningpoint7 = spinningpoint7.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331, default(Vector2));
																				spinningpoint7 *= 3f;
																				Vector2 vector138 = 1f * Vector2.UnitX * (float)Main.rand.Next(30, 60) + base.Center + Vector2.UnitY * (float)Main.rand.Next(-30, -10);
																				Projectile.NewProjectile(vector138.X, vector138.Y, spinningpoint7.X, spinningpoint7.Y, num1060, num1061, 0f, Main.myPlayer, 0f, 0f);
																			}
																			Main.PlaySound(SoundID.Item39, base.Center);
																		}
																	}
																	if (flag69 && Main.rand.Next(8) == 0)
																	{
																		int num1062 = Dust.NewDust(-1f * Vector2.UnitX * (float)Main.rand.Next(50, 70) + base.Center + Vector2.UnitY * (float)Main.rand.Next(15, 30), 4, 16, (Main.rand.Next(4) != 0) ? 31 : 228, 0f, 0f, 100, default(Color), 1.2f);
																		Main.dust[num1062].velocity = new Vector2(-1f * (float)Main.rand.NextDouble() * 3f, 1f).RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331, default(Vector2));
																		Main.dust[num1062].velocity *= 0.5f;
																		Main.dust[num1062].velocity.Y = -Math.Abs(Main.dust[num1062].velocity.Y);
																	}
																	if (flag70 && Main.rand.Next(8) == 0)
																	{
																		int num1063 = Dust.NewDust(Vector2.UnitX * (float)Main.rand.Next(50, 70) + base.Center + Vector2.UnitY * (float)Main.rand.Next(15, 30), 4, 16, (Main.rand.Next(4) != 0) ? 31 : 228, 0f, 0f, 100, default(Color), 1.2f);
																		Main.dust[num1063].velocity = new Vector2((float)Main.rand.NextDouble() * 3f, 1f).RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331, default(Vector2));
																		Main.dust[num1063].velocity *= 0.5f;
																		Main.dust[num1063].velocity.Y = -Math.Abs(Main.dust[num1063].velocity.Y);
																	}
																	if (flag71 && Main.rand.Next(8) == 0)
																	{
																		int num1064 = Dust.NewDust(-1f * Vector2.UnitX * (float)Main.rand.Next(30, 60) + base.Center + Vector2.UnitY * (float)Main.rand.Next(-30, -10), 4, 16, (Main.rand.Next(4) != 0) ? 31 : 228, 0f, 0f, 100, default(Color), 1.2f);
																		Main.dust[num1064].velocity = new Vector2(-1f * (float)Main.rand.NextDouble() * 2f, 1f).RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331, default(Vector2));
																		Main.dust[num1064].velocity *= 0.5f;
																		Main.dust[num1064].velocity.Y = -Math.Abs(Main.dust[num1064].velocity.Y);
																	}
																	if (flag72 && Main.rand.Next(8) == 0)
																	{
																		int num1065 = Dust.NewDust(Vector2.UnitX * (float)Main.rand.Next(30, 60) + base.Center + Vector2.UnitY * (float)Main.rand.Next(-30, -10), 4, 16, (Main.rand.Next(4) != 0) ? 31 : 228, 0f, 0f, 100, default(Color), 1.2f);
																		Main.dust[num1065].velocity = new Vector2((float)Main.rand.NextDouble() * 2f, 1f).RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331, default(Vector2));
																		Main.dust[num1065].velocity *= 0.5f;
																		Main.dust[num1065].velocity.Y = -Math.Abs(Main.dust[num1065].velocity.Y);
																		return;
																	}
																}
															}
															else
															{
																if (this.type == 390)
																{
																	this.Transform(382);
																	return;
																}
																if (this.type == 416)
																{
																	this.Transform(518);
																	return;
																}
																this.life = 0;
																this.HitEffect(0, 10.0);
																this.active = false;
																return;
															}
														}
														else if (this.aiStyle == 76)
														{
															if (this.localAI[3] == 0f && Main.netMode != 1 && this.type == 395)
															{
																this.localAI[3] = 1f;
																int[] array4 = new int[4];
																int num1066 = 0;
																for (int num1067 = 0; num1067 < 2; num1067++)
																{
																	int num1068 = NPC.NewNPC((int)base.Center.X + num1067 * 300 - 150, (int)base.Center.Y, 393, this.whoAmI, 0f, 0f, 0f, 0f, 255);
																	Main.npc[num1068].ai[1] = (float)num1067;
																	Main.npc[num1068].netUpdate = true;
																	array4[num1066++] = num1068;
																}
																for (int num1069 = 0; num1069 < 2; num1069++)
																{
																	int num1070 = NPC.NewNPC((int)base.Center.X + num1069 * 300 - 150, (int)base.Center.Y, 394, this.whoAmI, 0f, 0f, 0f, 0f, 255);
																	Main.npc[num1070].ai[1] = (float)num1069;
																	Main.npc[num1070].netUpdate = true;
																	array4[num1066++] = num1070;
																}
																int num1071 = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 392, this.whoAmI, 0f, 0f, 0f, 0f, 255);
																Main.npc[num1071].ai[0] = (float)this.whoAmI;
																Main.npc[num1071].netUpdate = true;
																for (int num1072 = 0; num1072 < 4; num1072++)
																{
																	Main.npc[array4[num1072]].ai[0] = (float)this.whoAmI;
																}
																for (int num1073 = 0; num1073 < 4; num1073++)
																{
																	Main.npc[num1071].localAI[num1073] = (float)array4[num1073];
																}
															}
															Vector2 center12 = base.Center;
															Player player4 = Main.player[this.target];
															if (this.target < 0 || this.target == 255 || player4.dead || !player4.active)
															{
																this.TargetClosest(true);
																player4 = Main.player[this.target];
																this.netUpdate = true;
															}
															if ((player4.dead || Vector2.Distance(player4.Center, center12) > 5600f) && this.ai[0] != 1f)
															{
																if (this.ai[0] == 0f)
																{
																	this.ai[0] = -1f;
																}
																if (this.ai[0] == 2f)
																{
																	this.ai[0] = -2f;
																}
																this.netUpdate = true;
															}
															if (this.ai[0] == -1f || this.ai[0] == -2f)
															{
																this.velocity.Y = this.velocity.Y - 0.4f;
																if (this.timeLeft > 10)
																{
																	this.timeLeft = 10;
																}
																if (!player4.dead)
																{
																	this.timeLeft = 300;
																	if (this.ai[0] == -2f)
																	{
																		this.ai[0] = 2f;
																	}
																	if (this.ai[0] == 0f)
																	{
																		this.ai[0] = 0f;
																	}
																	this.ai[1] = 0f;
																	this.ai[2] = 0f;
																	this.ai[3] = 0f;
																	this.netUpdate = true;
																}
															}
															else if (this.ai[0] == 0f)
															{
																int num1074 = 0;
																if (this.ai[3] >= 580f)
																{
																	num1074 = 0;
																}
																else if (this.ai[3] >= 440f)
																{
																	num1074 = 5;
																}
																else if (this.ai[3] >= 420f)
																{
																	num1074 = 4;
																}
																else if (this.ai[3] >= 280f)
																{
																	num1074 = 3;
																}
																else if (this.ai[3] >= 260f)
																{
																	num1074 = 2;
																}
																else if (this.ai[3] >= 20f)
																{
																	num1074 = 1;
																}
																this.ai[3] += 1f;
																if (this.ai[3] >= 600f)
																{
																	this.ai[3] = 0f;
																}
																int num1075 = num1074;
																if (this.ai[3] >= 580f)
																{
																	num1074 = 0;
																}
																else if (this.ai[3] >= 440f)
																{
																	num1074 = 5;
																}
																else if (this.ai[3] >= 420f)
																{
																	num1074 = 4;
																}
																else if (this.ai[3] >= 280f)
																{
																	num1074 = 3;
																}
																else if (this.ai[3] >= 260f)
																{
																	num1074 = 2;
																}
																else if (this.ai[3] >= 20f)
																{
																	num1074 = 1;
																}
																if (num1074 != num1075)
																{
																	if (num1074 == 0)
																	{
																		this.ai[2] = 0f;
																	}
																	if (num1074 == 1)
																	{
																		this.ai[2] = (float)((Math.Sign((player4.Center - center12).X) == 1) ? 1 : -1);
																	}
																	if (num1074 == 2)
																	{
																		this.ai[2] = 0f;
																	}
																	this.netUpdate = true;
																}
																if (num1074 == 0)
																{
																	if (this.ai[2] == 0f)
																	{
																		this.ai[2] = (float)(-600 * Math.Sign((center12 - player4.Center).X));
																	}
																	Vector2 vector139 = player4.Center + new Vector2(this.ai[2], -250f) - center12;
																	if (vector139.Length() < 50f)
																	{
																		this.ai[3] = 19f;
																	}
																	else
																	{
																		vector139.Normalize();
																		this.velocity = Vector2.Lerp(this.velocity, vector139 * 16f, 0.1f);
																	}
																}
																if (num1074 == 1)
																{
																	int num1076 = (int)base.Center.X / 16;
																	int num1077 = (int)(this.position.Y + (float)this.height) / 16;
																	int num1078 = 0;
																	bool flag75 = Main.tile[num1076, num1077].nactive() && Main.tileSolid[(int)Main.tile[num1076, num1077].type] && !Main.tileSolidTop[(int)Main.tile[num1076, num1077].type];
																	if (flag75)
																	{
																		num1078 = 1;
																	}
																	else
																	{
																		while (num1078 < 150 && num1077 + num1078 < Main.maxTilesY)
																		{
																			int num1079 = num1077 + num1078;
																			bool flag76 = Main.tile[num1076, num1079].nactive() && Main.tileSolid[(int)Main.tile[num1076, num1079].type] && !Main.tileSolidTop[(int)Main.tile[num1076, num1079].type];
																			if (flag76)
																			{
																				num1078--;
																				break;
																			}
																			num1078++;
																		}
																	}
																	float num1080 = (float)(num1078 * 16);
																	float num1081 = 250f;
																	if (num1080 < num1081)
																	{
																		float num1082 = -4f;
																		if (-num1082 > num1080)
																		{
																			num1082 = -num1080;
																		}
																		this.velocity.Y = MathHelper.Lerp(this.velocity.Y, num1082, 0.05f);
																	}
																	else
																	{
																		this.velocity.Y = this.velocity.Y * 0.95f;
																	}
																	this.velocity.X = 3.5f * this.ai[2];
																}
																if (num1074 == 2)
																{
																	if (this.ai[2] == 0f)
																	{
																		this.ai[2] = (float)(300 * Math.Sign((center12 - player4.Center).X));
																	}
																	Vector2 vector140 = player4.Center + new Vector2(this.ai[2], -170f) - center12;
																	int num1083 = (int)base.Center.X / 16;
																	int num1084 = (int)(this.position.Y + (float)this.height) / 16;
																	int num1085 = 0;
																	bool flag77 = Main.tile[num1083, num1084].nactive() && Main.tileSolid[(int)Main.tile[num1083, num1084].type] && !Main.tileSolidTop[(int)Main.tile[num1083, num1084].type];
																	if (flag77)
																	{
																		num1085 = 1;
																	}
																	else
																	{
																		while (num1085 < 150 && num1084 + num1085 < Main.maxTilesY)
																		{
																			int num1086 = num1084 + num1085;
																			bool flag78 = Main.tile[num1083, num1086].nactive() && Main.tileSolid[(int)Main.tile[num1083, num1086].type] && !Main.tileSolidTop[(int)Main.tile[num1083, num1086].type];
																			if (flag78)
																			{
																				num1085--;
																				break;
																			}
																			num1085++;
																		}
																	}
																	float num1087 = (float)(num1085 * 16);
																	float num1088 = 170f;
																	if (num1087 < num1088)
																	{
																		vector140.Y -= num1088 - num1087;
																	}
																	if (vector140.Length() < 70f)
																	{
																		this.ai[3] = 279f;
																	}
																	else
																	{
																		vector140.Normalize();
																		this.velocity = Vector2.Lerp(this.velocity, vector140 * 20f, 0.1f);
																	}
																}
																else if (num1074 == 3)
																{
																	float num1089 = 0.85f;
																	int num1090 = (int)base.Center.X / 16;
																	int num1091 = (int)(this.position.Y + (float)this.height) / 16;
																	int num1092 = 0;
																	bool flag79 = Main.tile[num1090, num1091].nactive() && Main.tileSolid[(int)Main.tile[num1090, num1091].type] && !Main.tileSolidTop[(int)Main.tile[num1090, num1091].type];
																	if (flag79)
																	{
																		num1092 = 1;
																	}
																	else
																	{
																		while (num1092 < 150 && num1091 + num1092 < Main.maxTilesY)
																		{
																			int num1093 = num1091 + num1092;
																			bool flag80 = Main.tile[num1090, num1093].nactive() && Main.tileSolid[(int)Main.tile[num1090, num1093].type] && !Main.tileSolidTop[(int)Main.tile[num1090, num1093].type];
																			if (flag80)
																			{
																				num1092--;
																				break;
																			}
																			num1092++;
																		}
																	}
																	float num1094 = (float)(num1092 * 16);
																	float num1095 = 170f;
																	if (num1094 < num1095)
																	{
																		float num1096 = -4f;
																		if (-num1096 > num1094)
																		{
																			num1096 = -num1094;
																		}
																		this.velocity.Y = MathHelper.Lerp(this.velocity.Y, num1096, 0.05f);
																	}
																	else
																	{
																		this.velocity.Y = this.velocity.Y * num1089;
																	}
																	this.velocity.X = this.velocity.X * num1089;
																}
																if (num1074 == 4)
																{
																	Vector2 vector141 = player4.Center + new Vector2(0f, -250f) - center12;
																	if (vector141.Length() < 50f)
																	{
																		this.ai[3] = 439f;
																	}
																	else
																	{
																		vector141.Normalize();
																		this.velocity = Vector2.Lerp(this.velocity, vector141 * 16f, 0.1f);
																	}
																}
																else if (num1074 == 5)
																{
																	this.velocity *= 0.85f;
																}
															}
															else if (this.ai[0] == 1f)
															{
																this.dontTakeDamage = false;
																this.velocity *= 0.96f;
																float num1097 = 150f;
																this.ai[1] += 1f;
																if (this.ai[1] >= num1097)
																{
																	this.ai[0] = 2f;
																	this.ai[1] = 0f;
																	this.rotation = 0f;
																	this.netUpdate = true;
																}
																else if (this.ai[1] < 40f)
																{
																	this.rotation = Vector2.UnitY.RotatedBy((double)(this.ai[1] / 40f * 6.28318548f), default(Vector2)).Y * 0.2f;
																}
																else if (this.ai[1] < 80f)
																{
																	this.rotation = Vector2.UnitY.RotatedBy((double)(this.ai[1] / 20f * 6.28318548f), default(Vector2)).Y * 0.3f;
																}
																else if (this.ai[1] < 120f)
																{
																	this.rotation = Vector2.UnitY.RotatedBy((double)(this.ai[1] / 10f * 6.28318548f), default(Vector2)).Y * 0.4f;
																}
																else
																{
																	this.rotation = (this.ai[1] - 120f) / 30f * 6.28318548f;
																}
															}
															else if (this.ai[0] == 2f)
															{
																int num1098 = 100;
																float num1099 = 3600f;
																float num1100 = 120f;
																float num1101 = 60f;
																int num1102 = 0;
																if (this.ai[3] % num1100 >= num1101)
																{
																	num1102 = 1;
																}
																int num1103 = num1102;
																num1102 = 0;
																this.ai[3] += 1f;
																if (this.ai[3] % num1100 >= num1101)
																{
																	num1102 = 1;
																}
																if (num1102 != num1103)
																{
																	if (num1102 == 1)
																	{
																		this.ai[2] = (float)((Math.Sign((player4.Center - center12).X) == 1) ? 1 : -1);
																		if (Main.netMode != 1)
																		{
																			Vector2 center13 = base.Center;
																			Projectile.NewProjectile(center13.X, center13.Y, 0f, 0f, 447, num1098, 0f, Main.myPlayer, (float)(this.whoAmI + 1), 0f);
																		}
																		Main.PlaySound(SoundID.Item12, base.Center);
																	}
																	this.netUpdate = true;
																}
																if (this.ai[3] >= num1099)
																{
																	this.ai[0] = 2f;
																	this.ai[1] = 0f;
																	this.ai[2] = 0f;
																	this.ai[3] = 0f;
																	this.netUpdate = true;
																}
																else if (num1102 == 0)
																{
																	Vector2 vector142 = player4.Center + new Vector2(this.ai[2] * 350f, -250f) - center12;
																	vector142.Normalize();
																	this.velocity = Vector2.Lerp(this.velocity, vector142 * 16f, 0.1f);
																}
																else
																{
																	int num1104 = (int)base.Center.X / 16;
																	int num1105 = (int)(this.position.Y + (float)this.height) / 16;
																	int num1106 = 0;
																	bool flag81 = Main.tile[num1104, num1105].nactive() && Main.tileSolid[(int)Main.tile[num1104, num1105].type] && !Main.tileSolidTop[(int)Main.tile[num1104, num1105].type];
																	if (flag81)
																	{
																		num1106 = 1;
																	}
																	else
																	{
																		while (num1106 < 150 && num1105 + num1106 < Main.maxTilesY)
																		{
																			int num1107 = num1105 + num1106;
																			bool flag82 = Main.tile[num1104, num1107].nactive() && Main.tileSolid[(int)Main.tile[num1104, num1107].type] && !Main.tileSolidTop[(int)Main.tile[num1104, num1107].type];
																			if (flag82)
																			{
																				num1106--;
																				break;
																			}
																			num1106++;
																		}
																	}
																	float num1108 = (float)(num1106 * 16);
																	float num1109 = 250f;
																	if (num1108 < num1109)
																	{
																		float num1110 = -4f;
																		if (-num1110 > num1108)
																		{
																			num1110 = -num1108;
																		}
																		this.velocity.Y = MathHelper.Lerp(this.velocity.Y, num1110, 0.05f);
																	}
																	else
																	{
																		this.velocity.Y = this.velocity.Y * 0.95f;
																	}
																	this.velocity.X = 8f * this.ai[2];
																}
																this.rotation = 0f;
															}
															bool flag83 = false;
															if (this.position.Y < -100f)
															{
																flag83 = true;
															}
															if (this.position.X < -100f)
															{
																flag83 = true;
															}
															if (this.position.Y > (float)(Main.maxTilesY * 16 + 100))
															{
																flag83 = true;
															}
															if (this.position.X > (float)(Main.maxTilesX * 16 + 100))
															{
																flag83 = true;
															}
															if (flag83)
															{
																this.position = Vector2.Clamp(this.position, new Vector2(-100f), new Vector2(100f) + new Vector2((float)Main.maxTilesX, (float)Main.maxTilesY) * 16f);
																this.active = false;
																this.netUpdate = true;
																return;
															}
														}
														else if (this.aiStyle == 77)
														{
															if (this.ai[0] != -1f && this.ai[0] != 2f && Main.rand.Next(200) == 0)
															{
																Main.PlaySound(29, (int)base.Center.X, (int)base.Center.Y, Main.rand.Next(93, 100), 1f, 0f);
															}
															if (this.localAI[3] == 0f)
															{
																this.netUpdate = true;
																this.localAI[3] = 1f;
																this.ai[0] = -1f;
															}
															if (this.ai[0] == -2f)
															{
																this.dontTakeDamage = true;
																this.ai[1] += 1f;
																if (this.ai[1] == 30f)
																{
																	Main.PlaySound(29, (int)base.Center.X, (int)base.Center.Y, 92, 1f, 0f);
																}
																if (this.ai[1] < 60f)
																{
																	MoonlordDeathDrama.RequestLight(this.ai[1] / 30f, base.Center);
																}
																if (this.ai[1] == 60f)
																{
																	this.ai[1] = 0f;
																	this.ai[0] = 0f;
																	if (Main.netMode != 1 && this.type == 398)
																	{
																		this.ai[2] = (float)Main.rand.Next(3);
																		this.ai[2] = 0f;
																		this.netUpdate = true;
																	}
																}
															}
															if (this.ai[0] == -1f)
															{
																this.dontTakeDamage = true;
																this.ai[1] += 1f;
																if (this.ai[1] == 30f)
																{
																	Main.PlaySound(29, (int)base.Center.X, (int)base.Center.Y, 92, 1f, 0f);
																}
																if (this.ai[1] < 60f)
																{
																	MoonlordDeathDrama.RequestLight(this.ai[1] / 30f, base.Center);
																}
																if (this.ai[1] == 60f)
																{
																	this.ai[1] = 0f;
																	this.ai[0] = 0f;
																	if (Main.netMode != 1 && this.type == 398)
																	{
																		this.ai[2] = (float)Main.rand.Next(3);
																		this.ai[2] = 0f;
																		this.netUpdate = true;
																		int[] array5 = new int[3];
																		int num1111 = 0;
																		for (int num1112 = 0; num1112 < 2; num1112++)
																		{
																			int num1113 = NPC.NewNPC((int)base.Center.X + num1112 * 800 - 400, (int)base.Center.Y - 100, 397, this.whoAmI, 0f, 0f, 0f, 0f, 255);
																			Main.npc[num1113].ai[2] = (float)num1112;
																			Main.npc[num1113].netUpdate = true;
																			array5[num1111++] = num1113;
																		}
																		int num1114 = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y - 400, 396, this.whoAmI, 0f, 0f, 0f, 0f, 255);
																		Main.npc[num1114].netUpdate = true;
																		array5[num1111++] = num1114;
																		for (int num1115 = 0; num1115 < 3; num1115++)
																		{
																			Main.npc[array5[num1115]].ai[3] = (float)this.whoAmI;
																		}
																		for (int num1116 = 0; num1116 < 3; num1116++)
																		{
																			this.localAI[num1116] = (float)array5[num1116];
																		}
																	}
																}
															}
															if (this.ai[0] == 0f)
															{
																this.dontTakeDamage = true;
																this.TargetClosest(false);
																Vector2 value9 = Main.player[this.target].Center - base.Center + new Vector2(0f, 130f);
																if (value9.Length() > 20f)
																{
																	Vector2 desiredVelocity = Vector2.Normalize(value9 - this.velocity) * 8f;
																	Vector2 velocity2 = this.velocity;
																	this.SimpleFlyMovement(desiredVelocity, 0.5f);
																	this.velocity = Vector2.Lerp(this.velocity, velocity2, 0.5f);
																}
																if (Main.netMode != 1)
																{
																	bool flag84 = false;
																	if (this.localAI[0] < 0f || this.localAI[1] < 0f || this.localAI[2] < 0f)
																	{
																		flag84 = true;
																	}
																	else if (!Main.npc[(int)this.localAI[0]].active || Main.npc[(int)this.localAI[0]].type != 397)
																	{
																		flag84 = true;
																	}
																	else if (!Main.npc[(int)this.localAI[1]].active || Main.npc[(int)this.localAI[1]].type != 397)
																	{
																		flag84 = true;
																	}
																	else if (!Main.npc[(int)this.localAI[2]].active || Main.npc[(int)this.localAI[2]].type != 396)
																	{
																		flag84 = true;
																	}
																	if (flag84)
																	{
																		this.life = 0;
																		this.HitEffect(0, 10.0);
																		this.active = false;
																	}
																	bool flag85 = true;
																	if (Main.npc[(int)this.localAI[0]].ai[0] != -2f)
																	{
																		flag85 = false;
																	}
																	if (Main.npc[(int)this.localAI[1]].ai[0] != -2f)
																	{
																		flag85 = false;
																	}
																	if (Main.npc[(int)this.localAI[2]].ai[0] != -2f)
																	{
																		flag85 = false;
																	}
																	if (flag85)
																	{
																		this.ai[0] = 1f;
																		this.dontTakeDamage = false;
																		this.netUpdate = true;
																	}
																}
															}
															else if (this.ai[0] == 1f)
															{
																this.dontTakeDamage = false;
																this.TargetClosest(false);
																Vector2 value10 = Main.player[this.target].Center - base.Center + new Vector2(0f, 130f);
																if (value10.Length() > 20f)
																{
																	Vector2 desiredVelocity2 = Vector2.Normalize(value10 - this.velocity) * 8f;
																	Vector2 velocity3 = this.velocity;
																	this.SimpleFlyMovement(desiredVelocity2, 0.5f);
																	this.velocity = Vector2.Lerp(this.velocity, velocity3, 0.5f);
																}
															}
															else if (this.ai[0] == 2f)
															{
																this.dontTakeDamage = true;
																Vector2 value11 = new Vector2((float)this.direction, -0.5f);
																this.velocity = Vector2.Lerp(this.velocity, value11, 0.98f);
																this.ai[1] += 1f;
																if (this.ai[1] < 60f)
																{
																	MoonlordDeathDrama.RequestLight(this.ai[1] / 60f, base.Center);
																}
																if (this.ai[1] == 60f)
																{
																	for (int num1117 = 0; num1117 < 1000; num1117++)
																	{
																		Projectile projectile = Main.projectile[num1117];
																		if (projectile.active && (projectile.type == 456 || projectile.type == 462 || projectile.type == 455 || projectile.type == 452 || projectile.type == 454))
																		{
																			projectile.Kill();
																		}
																	}
																	for (int num1118 = 0; num1118 < 200; num1118++)
																	{
																		NPC nPC3 = Main.npc[num1118];
																		if (nPC3.active && nPC3.type == 400)
																		{
																			nPC3.HitEffect(0, 9999.0);
																			nPC3.active = false;
																		}
																	}
																}
																if (this.ai[1] % 3f == 0f && this.ai[1] < 580f && this.ai[1] > 60f)
																{
																	Vector2 vector143 = Utils.RandomVector2(Main.rand, -1f, 1f);
																	if (vector143 != Vector2.Zero)
																	{
																		vector143.Normalize();
																	}
																	vector143 *= 20f + Main.rand.NextFloat() * 400f;
																	bool flag86 = true;
																	Vector2 vector144 = base.Center + vector143;
																	Point point5 = vector144.ToTileCoordinates();
																	if (!WorldGen.InWorld(point5.X, point5.Y, 0))
																	{
																		flag86 = false;
																	}
																	if (flag86 && WorldGen.SolidTile(point5.X, point5.Y))
																	{
																		flag86 = false;
																	}
																	float num1119 = (float)Main.rand.Next(6, 19);
																	float num1120 = 6.28318548f / num1119;
																	float num1121 = 6.28318548f * Main.rand.NextFloat();
																	float scaleFactor8 = 1f + Main.rand.NextFloat() * 2f;
																	float num1122 = 1f + Main.rand.NextFloat();
																	float fadeIn = 0.4f + Main.rand.NextFloat();
																	int num1123 = Utils.SelectRandom<int>(Main.rand, new int[]
																	{
																		31,
																		229
																	});
#if CLIENT
																	if (flag86)
																	{
																		MoonlordDeathDrama.AddExplosion(vector144);
																		for (float num1124 = 0f; num1124 < num1119 * 2f; num1124 += 1f)
																		{
																			Dust dust = Main.dust[Dust.NewDust(vector144, 0, 0, 229, 0f, 0f, 0, default(Color), 1f)];
																			dust.noGravity = true;
																			dust.position = vector144;
																			dust.velocity = Vector2.UnitY.RotatedBy((double)(num1121 + num1120 * num1124), default(Vector2)) * scaleFactor8 * (Main.rand.NextFloat() * 1.6f + 1.6f);
																			dust.fadeIn = fadeIn;
																			dust.scale = num1122;
																		}
																	}
#endif
																	for (float num1125 = 0f; num1125 < this.ai[1] / 60f; num1125 += 1f)
																	{
																		Vector2 vector145 = Utils.RandomVector2(Main.rand, -1f, 1f);
																		if (vector145 != Vector2.Zero)
																		{
																			vector145.Normalize();
																		}
																		vector145 *= 20f + Main.rand.NextFloat() * 800f;
																		Vector2 vector146 = base.Center + vector145;
																		Point point6 = vector146.ToTileCoordinates();
																		bool flag87 = true;
																		if (!WorldGen.InWorld(point6.X, point6.Y, 0))
																		{
																			flag87 = false;
																		}
																		if (flag87 && WorldGen.SolidTile(point6.X, point6.Y))
																		{
																			flag87 = false;
																		}
																		if (flag87)
																		{
																			Dust dust2 = Main.dust[Dust.NewDust(vector146, 0, 0, num1123, 0f, 0f, 0, default(Color), 1f)];
																			dust2.noGravity = true;
																			dust2.position = vector146;
																			dust2.velocity = -Vector2.UnitY * scaleFactor8 * (Main.rand.NextFloat() * 0.9f + 1.6f);
																			dust2.fadeIn = fadeIn;
																			dust2.scale = num1122;
																		}
																	}
																}
																if (this.ai[1] % 15f == 0f && this.ai[1] < 480f && this.ai[1] >= 90f && Main.netMode != 1)
																{
																	Vector2 vector147 = Utils.RandomVector2(Main.rand, -1f, 1f);
																	if (vector147 != Vector2.Zero)
																	{
																		vector147.Normalize();
																	}
																	vector147 *= 20f + Main.rand.NextFloat() * 400f;
																	bool flag88 = true;
																	Vector2 vec3 = base.Center + vector147;
																	Point point7 = vec3.ToTileCoordinates();
																	if (!WorldGen.InWorld(point7.X, point7.Y, 0))
																	{
																		flag88 = false;
																	}
																	if (flag88 && WorldGen.SolidTile(point7.X, point7.Y))
																	{
																		flag88 = false;
																	}
																	if (flag88)
																	{
																		float num1126 = (float)(Main.rand.Next(4) < 2).ToDirectionInt() * (0.3926991f + 0.7853982f * Main.rand.NextFloat());
																		Vector2 vector148 = new Vector2(0f, -Main.rand.NextFloat() * 0.5f - 0.5f).RotatedBy((double)num1126, default(Vector2)) * 6f;
																		Projectile.NewProjectile(vec3.X, vec3.Y, vector148.X, vector148.Y, 622, 0, 0f, Main.myPlayer, 0f, 0f);
																	}
																}
																if (this.ai[1] == 1f)
																{
																	Main.PlaySound(SoundID.NPCDeath61, base.Center);
																}
																if (this.ai[1] >= 480f)
																{
																	MoonlordDeathDrama.RequestLight((this.ai[1] - 480f) / 120f, base.Center);
																}
																if (this.ai[1] >= 600f)
																{
																	this.life = 0;
																	this.HitEffect(0, 1337.0);
																	this.checkDead();
																	return;
																}
															}
															else if (this.ai[0] == 3f)
															{
																this.dontTakeDamage = true;
																Vector2 value12 = new Vector2((float)this.direction, -0.5f);
																this.velocity = Vector2.Lerp(this.velocity, value12, 0.98f);
																this.ai[1] += 1f;
																if (this.ai[1] < 60f)
																{
																	MoonlordDeathDrama.RequestLight(this.ai[1] / 40f, base.Center);
																}
																if (this.ai[1] == 40f)
																{
																	for (int num1127 = 0; num1127 < 1000; num1127++)
																	{
																		Projectile projectile2 = Main.projectile[num1127];
																		if (projectile2.active && (projectile2.type == 456 || projectile2.type == 462 || projectile2.type == 455 || projectile2.type == 452 || projectile2.type == 454))
																		{
																			projectile2.active = false;
																			if (Main.netMode != 1)
																			{
																				NetMessage.SendData(27, -1, -1, "", num1127, 0f, 0f, 0f, 0, 0, 0);
																			}
																		}
																	}
																	for (int num1128 = 0; num1128 < 200; num1128++)
																	{
																		NPC nPC4 = Main.npc[num1128];
																		if (nPC4.active && nPC4.type == 400)
																		{
																			nPC4.active = false;
																			if (Main.netMode != 1)
																			{
																				NetMessage.SendData(23, -1, -1, "", nPC4.whoAmI, 0f, 0f, 0f, 0, 0, 0);
																			}
																		}
																	}
																	for (int num1129 = 0; num1129 < 500; num1129++)
																	{
																		Gore gore = Main.gore[num1129];
																		if (gore.active && gore.type >= 619 && gore.type <= 622)
																		{
																			gore.active = false;
																		}
																	}
																}
																if (this.ai[1] >= 60f)
																{
																	for (int num1130 = 0; num1130 < 200; num1130++)
																	{
																		NPC nPC5 = Main.npc[num1130];
																		if (nPC5.active && (nPC5.type == 400 || nPC5.type == 397 || nPC5.type == 396))
																		{
																			nPC5.active = false;
																			if (Main.netMode != 1)
																			{
																				NetMessage.SendData(23, -1, -1, "", nPC5.whoAmI, 0f, 0f, 0f, 0, 0, 0);
																			}
																		}
																	}
																	this.active = false;
																	if (Main.netMode != 1)
																	{
																		NetMessage.SendData(23, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
																	}
																	NPC.LunarApocalypseIsUp = false;
																	if (Main.netMode == 2)
																	{
																		NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
																	}
																	return;
																}
															}
															bool flag89 = false;
															if (this.ai[0] == -2f || this.ai[0] == -1f || this.ai[0] == -2f || this.ai[0] == 3f)
															{
																flag89 = true;
															}
															if (Main.player[this.target].active && !Main.player[this.target].dead)
															{
																flag89 = true;
															}
															if (!flag89)
															{
																for (int num1131 = 0; num1131 < 255; num1131++)
																{
																	if (Main.player[num1131].active && !Main.player[num1131].dead)
																	{
																		flag89 = true;
																		break;
																	}
																}
															}
															if (!flag89)
															{
																this.ai[0] = 3f;
																this.ai[1] = 0f;
																this.netUpdate = true;
															}
															if (this.ai[0] >= 0f && this.ai[0] < 2f && Main.netMode != 1 && base.Distance(Main.player[this.target].Center) > 2400f)
															{
																this.ai[0] = -2f;
																this.netUpdate = true;
																Vector2 value13 = Main.player[this.target].Center - Vector2.UnitY * 150f - base.Center;
																this.position += value13;
																if (Main.npc[(int)this.localAI[0]].active)
																{
																	Main.npc[(int)this.localAI[0]].position += value13;
																	Main.npc[(int)this.localAI[0]].netUpdate = true;
																}
																if (Main.npc[(int)this.localAI[1]].active)
																{
																	Main.npc[(int)this.localAI[1]].position += value13;
																	Main.npc[(int)this.localAI[1]].netUpdate = true;
																}
																if (Main.npc[(int)this.localAI[2]].active)
																{
																	Main.npc[(int)this.localAI[2]].position += value13;
																	Main.npc[(int)this.localAI[2]].netUpdate = true;
																}
																for (int num1132 = 0; num1132 < 200; num1132++)
																{
																	NPC nPC6 = Main.npc[num1132];
																	if (nPC6.active && nPC6.type == 400)
																	{
																		nPC6.position += value13;
																		nPC6.netUpdate = true;
																	}
																}
																return;
															}
														}
														else if (this.aiStyle == 78)
														{
															NPC.InitializeMoonLordAttacks();
															if (!Main.npc[(int)this.ai[3]].active || Main.npc[(int)this.ai[3]].type != 398)
															{
																this.life = 0;
																this.HitEffect(0, 10.0);
																this.active = false;
															}
															bool flag90 = this.ai[2] == 0f;
															float num1133 = (float)(-(float)flag90.ToDirectionInt());
															this.spriteDirection = (int)num1133;
															this.dontTakeDamage = (this.frameCounter >= 21.0);
															Vector2 vector149 = new Vector2(30f, 66f);
															float num1134 = 0f;
															float num1135 = 0f;
															bool flag91 = true;
															int num1136 = 0;
															if (this.ai[0] != -2f)
															{
																float num1137 = this.ai[0];
																this.ai[1] += 1f;
																int num1138 = (int)Main.npc[(int)this.ai[3]].ai[2];
																int num1139 = flag90 ? 0 : 1;
																int num1140 = 0;
																int num1141 = 0;
																while (num1140 < 5)
																{
																	num1135 = (float)NPC.MoonLordAttacksArray[num1138, num1139, 1, num1140];
																	if (num1135 + (float)num1141 > this.ai[1])
																	{
																		break;
																	}
																	num1141 += (int)num1135;
																	num1140++;
																}
																if (num1140 == 5)
																{
																	num1140 = 0;
																	this.ai[1] = 0f;
																	num1135 = (float)NPC.MoonLordAttacksArray[num1138, num1139, 1, num1140];
																	num1141 = 0;
																}
																this.ai[0] = (float)NPC.MoonLordAttacksArray[num1138, num1139, 0, num1140];
																num1134 = (float)((int)this.ai[1] - num1141);
																if (this.ai[0] != num1137)
																{
																	this.netUpdate = true;
																}
															}
															if (this.ai[0] == -2f)
															{
																this.damage = 80;
																num1136 = 0;
																this.dontTakeDamage = true;
																this.ai[1] += 1f;
																if (this.ai[1] >= 32f)
																{
																	this.ai[1] = 0f;
																}
																if (this.ai[1] < 0f)
																{
																	this.ai[1] = 0f;
																}
																Vector2 center14 = Main.npc[(int)this.ai[3]].Center;
																Vector2 value14 = center14 + new Vector2(350f * num1133, -100f);
																Vector2 vector150 = value14 - base.Center;
																if (vector150.Length() > 20f)
																{
																	vector150.Normalize();
																	vector150 *= 6f;
																	Vector2 velocity4 = this.velocity;
																	if (vector150 != Vector2.Zero)
																	{
																		this.SimpleFlyMovement(vector150, 0.3f);
																	}
																	this.velocity = Vector2.Lerp(velocity4, this.velocity, 0.5f);
																}
															}
															else if (this.ai[0] == 0f)
															{
																num1136 = 3;
																this.localAI[1] -= 0.05f;
																if (this.localAI[1] < 0f)
																{
																	this.localAI[1] = 0f;
																}
																Vector2 center15 = Main.npc[(int)this.ai[3]].Center;
																Vector2 value15 = center15 + new Vector2(350f * num1133, -100f);
																Vector2 vector151 = value15 - base.Center;
																if (vector151.Length() > 20f)
																{
																	vector151.Normalize();
																	vector151 *= 6f;
																	Vector2 velocity5 = this.velocity;
																	if (vector151 != Vector2.Zero)
																	{
																		this.SimpleFlyMovement(vector151, 0.3f);
																	}
																	this.velocity = Vector2.Lerp(velocity5, this.velocity, 0.5f);
																}
															}
															else if (this.ai[0] == 1f)
															{
																num1136 = 0;
																int num1142 = 7;
																int num1143 = 4;
																if (num1134 >= (float)(num1142 * num1143 * 2))
																{
																	this.localAI[1] -= 0.07f;
																	if (this.localAI[1] < 0f)
																	{
																		this.localAI[1] = 0f;
																	}
																}
																else if (num1134 >= (float)(num1142 * num1143))
																{
																	this.localAI[1] += 0.05f;
																	if (this.localAI[1] > 0.75f)
																	{
																		this.localAI[1] = 0.75f;
																	}
																	float num1144 = 6.28318548f * (num1134 % (float)(num1142 * num1143)) / (float)(num1142 * num1143) - 1.57079637f;
																	this.localAI[0] = new Vector2((float)Math.Cos((double)num1144) * vector149.X, (float)Math.Sin((double)num1144) * vector149.Y).ToRotation();
																	if (num1134 % (float)num1143 == 0f)
																	{
																		Vector2 value16 = new Vector2(1f * -num1133, 3f);
																		Vector2 vector152 = Utils.Vector2FromElipse(this.localAI[0].ToRotationVector2(), vector149 * this.localAI[1]);
																		Vector2 vector153 = base.Center + Vector2.Normalize(vector152) * vector149.Length() * 0.4f + value16;
																		Vector2 vector154 = Vector2.Normalize(vector152) * 8f;
																		float ai = (6.28318548f * (float)Main.rand.NextDouble() - 3.14159274f) / 30f + 0.0174532924f * num1133;
																		Projectile.NewProjectile(vector153.X, vector153.Y, vector154.X, vector154.Y, 452, 30, 0f, Main.myPlayer, 0f, ai);
																	}
																}
																else
																{
																	this.localAI[1] += 0.02f;
																	if (this.localAI[1] > 0.75f)
																	{
																		this.localAI[1] = 0.75f;
																	}
																	float num1145 = 6.28318548f * (num1134 % (float)(num1142 * num1143)) / (float)(num1142 * num1143) - 1.57079637f;
																	this.localAI[0] = new Vector2((float)Math.Cos((double)num1145) * vector149.X, (float)Math.Sin((double)num1145) * vector149.Y).ToRotation();
																}
															}
															else if (this.ai[0] == 2f)
															{
																this.localAI[1] -= 0.05f;
																if (this.localAI[1] < 0f)
																{
																	this.localAI[1] = 0f;
																}
																Vector2 center16 = Main.npc[(int)this.ai[3]].Center;
																Vector2 value17 = new Vector2(220f * num1133, -60f) + center16;
																value17 += new Vector2(num1133 * 100f, -50f);
																Vector2 value18 = new Vector2(400f * num1133, -60f);
																if (num1134 < 30f)
																{
																	Vector2 vector155 = value17 - base.Center;
																	if (vector155 != Vector2.Zero)
																	{
																		Vector2 vector156 = vector155;
																		vector156.Normalize();
																		this.velocity = Vector2.SmoothStep(this.velocity, vector156 * Math.Min(8f, vector155.Length()), 0.2f);
																	}
																}
																else if (num1134 < 210f)
																{
																	num1136 = 1;
																	int num1146 = (int)num1134 - 30;
																	if (num1146 % 30 == 0 && Main.netMode != 1)
																	{
																		Vector2 vector157 = new Vector2(5f * num1133, -8f);
																		int num1147 = num1146 / 30;
																		vector157.X += ((float)num1147 - 3.5f) * num1133 * 3f;
																		vector157.Y += ((float)num1147 - 4.5f) * 1f;
																		vector157 *= 1.2f;
																		Projectile.NewProjectile(base.Center.X, base.Center.Y, vector157.X, vector157.Y, 454, 50, 1f, Main.myPlayer, 0f, (float)this.whoAmI);
																	}
																	Vector2 vector158 = Vector2.SmoothStep(value17, value17 + value18, (num1134 - 30f) / 180f) - base.Center;
																	if (vector158 != Vector2.Zero)
																	{
																		Vector2 vector159 = vector158;
																		vector159.Normalize();
																		this.velocity = Vector2.Lerp(this.velocity, vector159 * Math.Min(20f, vector158.Length()), 0.5f);
																	}
																}
																else if (num1134 < 282f)
																{
																	num1136 = 0;
																	this.velocity *= 0.9f;
																}
																else if (num1134 < 287f)
																{
																	num1136 = 1;
																	this.velocity *= 0.9f;
																}
																else if (num1134 < 292f)
																{
																	num1136 = 2;
																	this.velocity *= 0.9f;
																}
																else if (num1134 < 300f)
																{
																	num1136 = 3;
																	if (num1134 == 292f && Main.netMode != 1)
																	{
																		int num1148 = (int)Player.FindClosest(this.position, this.width, this.height);
																		Vector2 velocity6 = Vector2.Normalize(Main.player[num1148].Center - (base.Center + Vector2.UnitY * -350f));
																		if (float.IsNaN(velocity6.X) || float.IsNaN(velocity6.Y))
																		{
																			velocity6 = Vector2.UnitY;
																		}
																		velocity6 *= 12f;
																		for (int num1149 = 0; num1149 < 1000; num1149++)
																		{
																			Projectile projectile3 = Main.projectile[num1149];
																			if (projectile3.active && projectile3.type == 454 && projectile3.ai[1] == (float)this.whoAmI && projectile3.ai[0] != -1f)
																			{
																				projectile3.ai[0] = -1f;
																				projectile3.velocity = velocity6;
																				projectile3.netUpdate = true;
																			}
																		}
																	}
																	Vector2 vector160 = Vector2.SmoothStep(value17, value17 + value18, 1f - (num1134 - 270f) / 30f) - base.Center;
																	if (vector160 != Vector2.Zero)
																	{
																		Vector2 vector161 = vector160;
																		vector161.Normalize();
																		this.velocity = Vector2.Lerp(this.velocity, vector161 * Math.Min(14f, vector160.Length()), 0.1f);
																	}
																}
																else
																{
																	num1136 = 3;
																	Vector2 vector162 = value17 - base.Center;
																	if (vector162 != Vector2.Zero)
																	{
																		Vector2 vector163 = vector162;
																		vector163.Normalize();
																		this.velocity = Vector2.SmoothStep(this.velocity, vector163 * Math.Min(8f, vector162.Length()), 0.2f);
																	}
																}
															}
															else if (this.ai[0] == 3f)
															{
																if (num1134 == 0f)
																{
																	this.TargetClosest(false);
																	this.netUpdate = true;
																}
																Vector2 v2 = Main.player[this.target].Center + Main.player[this.target].velocity * 20f - base.Center;
																this.localAI[0] = this.localAI[0].AngleLerp(v2.ToRotation(), 0.5f);
																this.localAI[1] += 0.05f;
																if (this.localAI[1] > 1f)
																{
																	this.localAI[1] = 1f;
																}
																if (num1134 == num1135 - 35f)
																{
																	Main.PlaySound(4, (int)this.position.X, (int)this.position.Y, 6, 1f, 0f);
																}
																if ((num1134 == num1135 - 14f || num1134 == num1135 - 7f || num1134 == num1135) && Main.netMode != 1)
																{
																	Vector2 vector164 = Utils.Vector2FromElipse(this.localAI[0].ToRotationVector2(), vector149 * this.localAI[1]);
																	Vector2 vector165 = Vector2.Normalize(v2) * 8f;
																	Projectile.NewProjectile(base.Center.X + vector164.X, base.Center.Y + vector164.Y, vector165.X, vector165.Y, 462, 30, 0f, Main.myPlayer, 0f, 0f);
																}
															}
															if (flag91)
															{
																Vector2 center17 = Main.npc[(int)this.ai[3]].Center;
																Vector2 value19 = new Vector2(220f * num1133, -60f) + center17;
																Vector2 vector166 = value19 + new Vector2(num1133 * 110f, -150f);
																Vector2 max = vector166 + new Vector2(num1133 * 370f, 150f);
																if (vector166.X > max.X)
																{
																	Utils.Swap<float>(ref vector166.X, ref max.X);
																}
																if (vector166.Y > max.Y)
																{
																	Utils.Swap<float>(ref vector166.Y, ref max.Y);
																}
																Vector2 value20 = Vector2.Clamp(base.Center + this.velocity, vector166, max);
																if (value20 != base.Center + this.velocity)
																{
																	base.Center = value20 - this.velocity;
																}
															}
															int num1150 = num1136 * 7;
															if ((double)num1150 > this.frameCounter)
															{
																this.frameCounter += 1.0;
															}
															if ((double)num1150 < this.frameCounter)
															{
																this.frameCounter -= 1.0;
															}
															if (this.frameCounter < 0.0)
															{
																this.frameCounter = 0.0;
															}
															if (this.frameCounter > 21.0)
															{
																this.frameCounter = 21.0;
															}
															int num1151 = 0;
															if (flag90)
															{
																num1151 = 0;
															}
															if (num1151 == 0)
															{
																return;
															}
															if (num1151 == 1)
															{
																if (this.ai[0] == 0f)
																{
																	if ((this.ai[1] += 1f) >= 20f)
																	{
																		this.ai[1] = 0f;
																		this.ai[0] = 1f;
																		this.netUpdate = true;
																	}
																	this.velocity = Vector2.UnitX * 4f;
																	return;
																}
																if (this.ai[0] == 1f)
																{
																	if ((this.ai[1] += 1f) >= 20f)
																	{
																		this.ai[1] = 0f;
																		this.ai[0] = 2f;
																		this.netUpdate = true;
																	}
																	this.velocity = Vector2.UnitX * -4f;
																	return;
																}
																if (this.ai[0] == 2f || this.ai[0] == 4f)
																{
																	if ((this.ai[1] += 1f) >= 20f)
																	{
																		this.ai[1] = 0f;
																		this.ai[0] += 1f;
																		this.netUpdate = true;
																	}
																	this.velocity = Vector2.UnitY * -4f * (float)(flag90 ? 1 : -1);
																	return;
																}
																if (this.ai[0] == 3f || this.ai[0] == 5f)
																{
																	if ((this.ai[1] += 1f) >= 20f)
																	{
																		this.ai[1] = 0f;
																		this.ai[0] += 1f;
																		if (this.ai[0] == 6f)
																		{
																			this.ai[0] = 0f;
																		}
																		this.netUpdate = true;
																	}
																	this.velocity = Vector2.UnitY * 4f * (float)(flag90 ? 1 : -1);
																	return;
																}
															}
															else
															{
																if (num1151 == 2)
																{
																	new Vector2(30f, 66f);
																	this.TargetClosest(false);
																	Vector2 v3 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - base.Center;
																	float num1152 = v3.Length() / 200f;
																	if (num1152 > 1f)
																	{
																		num1152 = 1f;
																	}
																	num1152 = 1f - num1152;
																	num1152 *= 2f;
																	if (num1152 > 1f)
																	{
																		num1152 = 1f;
																	}
																	this.localAI[0] = v3.ToRotation();
																	this.localAI[1] = num1152;
																	this.localAI[1] = 1f;
																	return;
																}
																if (num1151 == 3)
																{
																	int num1153 = 7;
																	int num1154 = 4;
																	this.ai[1] += 1f;
																	if (this.ai[1] >= (float)(num1153 * num1154 * 10))
																	{
																		this.ai[1] = 0f;
																		return;
																	}
																	if (this.ai[1] >= (float)(num1153 * num1154))
																	{
																		this.localAI[1] -= 0.07f;
																		if (this.localAI[1] < 0f)
																		{
																			this.localAI[1] = 0f;
																			return;
																		}
																	}
																	else
																	{
																		this.localAI[1] += 0.05f;
																		if (this.localAI[1] > 0.75f)
																		{
																			this.localAI[1] = 0.75f;
																		}
																		float num1155 = 6.28318548f * (this.ai[1] % (float)(num1153 * num1154)) / (float)(num1153 * num1154) - 1.57079637f;
																		this.localAI[0] = new Vector2((float)Math.Cos((double)num1155) * vector149.X, (float)Math.Sin((double)num1155) * vector149.Y).ToRotation();
																		if (this.ai[1] % (float)num1154 == 0f)
																		{
																			Vector2 value21 = new Vector2(1f * -num1133, 3f);
																			Vector2 vector167 = Utils.Vector2FromElipse(this.localAI[0].ToRotationVector2(), vector149 * this.localAI[1]);
																			Vector2 vector168 = base.Center + Vector2.Normalize(vector167) * vector149.Length() * 0.4f + value21;
																			Vector2 vector169 = Vector2.Normalize(vector167) * 8f;
																			float ai2 = (6.28318548f * (float)Main.rand.NextDouble() - 3.14159274f) / 30f + 0.0174532924f * num1133;
																			Projectile.NewProjectile(vector168.X, vector168.Y, vector169.X, vector169.Y, 452, 5, 0f, Main.myPlayer, 0f, ai2);
																			return;
																		}
																	}
																}
																else if (num1151 == 4)
																{
																	Vector2 center18 = Main.npc[(int)this.ai[3]].Center;
																	Vector2 value22 = new Vector2(220f * num1133, -60f) + center18;
																	value22 += new Vector2(num1133 * 100f, -50f);
																	Vector2 value23 = new Vector2(400f * num1133, -60f);
																	this.ai[1] += 1f;
																	if (this.ai[1] < 30f)
																	{
																		Vector2 vector170 = value22 - base.Center;
																		if (vector170 != Vector2.Zero)
																		{
																			Vector2 vector171 = vector170;
																			vector171.Normalize();
																			this.velocity = Vector2.SmoothStep(this.velocity, vector171 * Math.Min(8f, vector170.Length()), 0.2f);
																			return;
																		}
																	}
																	else if (this.ai[1] < 210f)
																	{
																		int num1156 = (int)this.ai[1] - 30;
																		if (num1156 % 30 == 0 && Main.netMode != 1)
																		{
																			Vector2 vector172 = new Vector2(5f * num1133, -8f);
																			int num1157 = num1156 / 30;
																			vector172.X += ((float)num1157 - 3.5f) * num1133 * 3f;
																			vector172.Y += ((float)num1157 - 4.5f) * 1f;
																			vector172 *= 1.2f;
																			Projectile.NewProjectile(base.Center.X, base.Center.Y, vector172.X, vector172.Y, 454, 1, 1f, Main.myPlayer, 0f, (float)this.whoAmI);
																		}
																		Vector2 vector173 = Vector2.SmoothStep(value22, value22 + value23, (this.ai[1] - 30f) / 180f) - base.Center;
																		if (vector173 != Vector2.Zero)
																		{
																			Vector2 vector174 = vector173;
																			vector174.Normalize();
																			this.velocity = Vector2.Lerp(this.velocity, vector174 * Math.Min(4f, vector173.Length()), 0.1f);
																			return;
																		}
																	}
																	else
																	{
																		if (this.ai[1] < 270f)
																		{
																			this.velocity *= 0.9f;
																			return;
																		}
																		if (this.ai[1] >= 300f)
																		{
																			this.ai[1] = 0f;
																			return;
																		}
																		if (this.ai[1] == 270f && Main.netMode != 1)
																		{
																			int num1158 = (int)Player.FindClosest(this.position, this.width, this.height);
																			Vector2 velocity7 = Vector2.Normalize(Main.player[num1158].Center - (base.Center + Vector2.UnitY * -350f));
																			if (float.IsNaN(velocity7.X) || float.IsNaN(velocity7.Y))
																			{
																				velocity7 = Vector2.UnitY;
																			}
																			velocity7 *= 12f;
																			for (int num1159 = 0; num1159 < 1000; num1159++)
																			{
																				Projectile projectile4 = Main.projectile[num1159];
																				if (projectile4.active && projectile4.type == 454 && projectile4.ai[1] == (float)this.whoAmI && projectile4.ai[0] != -1f)
																				{
																					projectile4.ai[0] = -1f;
																					projectile4.velocity = velocity7;
																					projectile4.netUpdate = true;
																				}
																			}
																		}
																		Vector2 vector175 = Vector2.SmoothStep(value22, value22 + value23, 1f - (this.ai[1] - 270f) / 30f) - base.Center;
																		if (vector175 != Vector2.Zero)
																		{
																			Vector2 vector176 = vector175;
																			vector176.Normalize();
																			this.velocity = Vector2.Lerp(this.velocity, vector176 * Math.Min(14f, vector175.Length()), 0.1f);
																			return;
																		}
																	}
																}
																else if (num1151 == 5)
																{
																	this.dontTakeDamage = true;
																	this.ai[1] += 1f;
																	if (this.ai[1] >= 40f)
																	{
																		this.ai[1] = 0f;
																		return;
																	}
																}
															}
														}
														else if (this.aiStyle == 79)
														{
															if (!Main.npc[(int)this.ai[3]].active || Main.npc[(int)this.ai[3]].type != 398)
															{
																this.life = 0;
																this.HitEffect(0, 10.0);
																this.active = false;
															}
															this.dontTakeDamage = (this.localAI[3] >= 15f);
															this.velocity = Vector2.Zero;
															base.Center = Main.npc[(int)this.ai[3]].Center + new Vector2(0f, -400f);
															Vector2 value24 = new Vector2(27f, 59f);
															float num1160 = 0f;
															float num1161 = 0f;
															int num1162 = 0;
															int num1163 = 0;
															if (this.ai[0] >= 0f)
															{
																float num1164 = this.ai[0];
																this.ai[1] += 1f;
																int num1165 = (int)Main.npc[(int)this.ai[3]].ai[2];
																int num1166 = 2;
																int num1167 = 0;
																int num1168 = 0;
																while (num1167 < 5)
																{
																	num1161 = (float)NPC.MoonLordAttacksArray[num1165, num1166, 1, num1167];
																	if (num1161 + (float)num1168 > this.ai[1])
																	{
																		break;
																	}
																	num1168 += (int)num1161;
																	num1167++;
																}
																if (num1167 == 5)
																{
																	num1167 = 0;
																	this.ai[1] = 0f;
																	num1161 = (float)NPC.MoonLordAttacksArray[num1165, num1166, 1, num1167];
																	num1168 = 0;
																}
																this.ai[0] = (float)NPC.MoonLordAttacksArray[num1165, num1166, 0, num1167];
																num1160 = (float)((int)this.ai[1] - num1168);
																if (this.ai[0] != num1164)
																{
																	this.netUpdate = true;
																}
															}
															if (this.ai[0] == -3f)
															{
																this.damage = 0;
																this.dontTakeDamage = true;
																this.rotation = MathHelper.Lerp(this.rotation, 0.2617994f, 0.07f);
																this.ai[1] += 1f;
																if (this.ai[1] >= 32f)
																{
																	this.ai[1] = 0f;
																}
																if (this.ai[1] < 0f)
																{
																	this.ai[1] = 0f;
																}
																if (this.localAI[2] < 14f)
																{
																	this.localAI[2] += 1f;
																}
															}
															else if (this.ai[0] == -2f)
															{
																if (Main.npc[(int)this.ai[3]].ai[0] == 2f)
																{
																	this.ai[0] = -3f;
																	return;
																}
																this.damage = 80;
																this.dontTakeDamage = true;
																this.ai[1] += 1f;
																if (this.ai[1] >= 32f)
																{
																	this.ai[1] = 0f;
																}
																if (this.ai[1] < 0f)
																{
																	this.ai[1] = 0f;
																}
																this.ai[2] += 1f;
																if (this.ai[2] >= 555f)
																{
																	this.ai[2] = 0f;
																}
																if (this.ai[2] >= 120f)
																{
																	num1160 = this.ai[2] - 120f;
																	num1161 = 555f;
																	num1162 = 2;
																	Vector2 value25 = new Vector2(0f, 216f);
																	if (num1160 == 0f && Main.netMode != 1)
																	{
																		Vector2 value26 = base.Center + value25;
																		for (int num1169 = 0; num1169 < 255; num1169++)
																		{
																			Player player5 = Main.player[num1169];
																			if (player5.active && !player5.dead && Vector2.Distance(player5.Center, value26) <= 3000f)
																			{
																				Vector2 value27 = Main.player[this.target].Center - value26;
																				if (value27 != Vector2.Zero)
																				{
																					value27.Normalize();
																				}
																				Projectile.NewProjectile(value26.X, value26.Y, value27.X, value27.Y, 456, 0, 0f, Main.myPlayer, (float)(this.whoAmI + 1), (float)num1169);
																			}
																		}
																	}
																	if ((num1160 == 120f || num1160 == 180f || num1160 == 240f) && Main.netMode != 1)
																	{
																		for (int num1170 = 0; num1170 < 1000; num1170++)
																		{
																			Projectile projectile5 = Main.projectile[num1170];
																			if (projectile5.active && projectile5.type == 456 && Main.player[(int)projectile5.ai[1]].FindBuffIndex(145) != -1)
																			{
																				Vector2 center19 = Main.player[this.target].Center;
																				int num1171 = NPC.NewNPC((int)center19.X, (int)center19.Y, 401, 0, 0f, 0f, 0f, 0f, 255);
																				Main.npc[num1171].netUpdate = true;
																				Main.npc[num1171].ai[0] = (float)(this.whoAmI + 1);
																				Main.npc[num1171].ai[1] = (float)num1170;
																			}
																		}
																	}
																}
															}
															else if (this.ai[0] == 0f)
															{
																num1163 = 3;
																this.TargetClosest(false);
																Vector2 v4 = Main.player[this.target].Center - base.Center - new Vector2(0f, -22f);
																float num1172 = v4.Length() / 500f;
																if (num1172 > 1f)
																{
																	num1172 = 1f;
																}
																num1172 = 1f - num1172;
																num1172 *= 2f;
																if (num1172 > 1f)
																{
																	num1172 = 1f;
																}
																this.localAI[0] = v4.ToRotation();
																this.localAI[1] = num1172;
																this.localAI[2] = MathHelper.Lerp(this.localAI[2], 1f, 0.2f);
															}
															if (this.ai[0] == 1f)
															{
																if (num1160 < 180f)
																{
																	this.localAI[1] -= 0.05f;
																	if (this.localAI[1] < 0f)
																	{
																		this.localAI[1] = 0f;
																	}
																	if (num1160 >= 60f)
																	{
																		Vector2 center20 = base.Center;
																		int num1173 = 0;
																		if (num1160 >= 120f)
																		{
																			num1173 = 1;
																		}
																		for (int num1174 = 0; num1174 < 1 + num1173; num1174++)
																		{
																			int num1175 = 229;
																			float num1176 = 0.8f;
																			if (num1174 % 2 == 1)
																			{
																				num1175 = 229;
																				num1176 = 1.65f;
																			}
																			Vector2 vector177 = center20 + ((float)Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() * value24 / 2f;
																			int num1177 = Dust.NewDust(vector177 - Vector2.One * 8f, 16, 16, num1175, this.velocity.X / 2f, this.velocity.Y / 2f, 0, default(Color), 1f);
																			Main.dust[num1177].velocity = Vector2.Normalize(center20 - vector177) * 3.5f * (10f - (float)num1173 * 2f) / 10f;
																			Main.dust[num1177].noGravity = true;
																			Main.dust[num1177].scale = num1176;
																			Main.dust[num1177].customData = this;
																		}
																	}
																}
																else if (num1160 < num1161 - 15f)
																{
																	if (num1160 == 180f && Main.netMode != 1)
																	{
																		this.TargetClosest(false);
																		Vector2 vector178 = Main.player[this.target].Center - base.Center;
																		vector178.Normalize();
																		float num1178 = -1f;
																		if (vector178.X < 0f)
																		{
																			num1178 = 1f;
																		}
																		vector178 = vector178.RotatedBy((double)(-(double)num1178 * 6.28318548f / 6f), default(Vector2));
																		Projectile.NewProjectile(base.Center.X, base.Center.Y, vector178.X, vector178.Y, 455, 75, 0f, Main.myPlayer, num1178 * 6.28318548f / 540f, (float)this.whoAmI);
																		this.ai[2] = (vector178.ToRotation() + 9.424778f) * num1178;
																		this.netUpdate = true;
																	}
																	this.localAI[1] += 0.05f;
																	if (this.localAI[1] > 1f)
																	{
																		this.localAI[1] = 1f;
																	}
																	float num1179 = (float)(this.ai[2] >= 0f).ToDirectionInt();
																	float num1180 = this.ai[2];
																	if (num1180 < 0f)
																	{
																		num1180 *= -1f;
																	}
																	num1180 += -9.424778f;
																	num1180 += num1179 * 6.28318548f / 540f;
																	this.localAI[0] = num1180;
																	this.ai[2] = (num1180 + 9.424778f) * num1179;
																}
																else
																{
																	this.localAI[1] -= 0.07f;
																	if (this.localAI[1] < 0f)
																	{
																		this.localAI[1] = 0f;
																	}
																	num1163 = 3;
																}
															}
															else if (this.ai[0] == 2f)
															{
																num1162 = 2;
																num1163 = 3;
																Vector2 value28 = new Vector2(0f, 216f);
																if (num1160 == 0f && Main.netMode != 1)
																{
																	Vector2 value29 = base.Center + value28;
																	for (int num1181 = 0; num1181 < 255; num1181++)
																	{
																		Player player6 = Main.player[num1181];
																		if (player6.active && !player6.dead && Vector2.Distance(player6.Center, value29) <= 3000f)
																		{
																			Vector2 value30 = Main.player[this.target].Center - value29;
																			if (value30 != Vector2.Zero)
																			{
																				value30.Normalize();
																			}
																			Projectile.NewProjectile(value29.X, value29.Y, value30.X, value30.Y, 456, 0, 0f, Main.myPlayer, (float)(this.whoAmI + 1), (float)num1181);
																		}
																	}
																}
																if ((num1160 == 120f || num1160 == 180f || num1160 == 240f) && Main.netMode != 1)
																{
																	for (int num1182 = 0; num1182 < 1000; num1182++)
																	{
																		Projectile projectile6 = Main.projectile[num1182];
																		if (projectile6.active && projectile6.type == 456 && Main.player[(int)projectile6.ai[1]].FindBuffIndex(145) != -1)
																		{
																			Vector2 center21 = Main.player[this.target].Center;
																			int num1183 = NPC.NewNPC((int)center21.X, (int)center21.Y, 401, 0, 0f, 0f, 0f, 0f, 255);
																			Main.npc[num1183].netUpdate = true;
																			Main.npc[num1183].ai[0] = (float)(this.whoAmI + 1);
																			Main.npc[num1183].ai[1] = (float)num1182;
																		}
																	}
																}
															}
															else if (this.ai[0] == 3f)
															{
																if (num1160 == 0f)
																{
																	this.TargetClosest(false);
																	this.netUpdate = true;
																}
																Vector2 v5 = Main.player[this.target].Center + Main.player[this.target].velocity * 20f - base.Center;
																this.localAI[0] = this.localAI[0].AngleLerp(v5.ToRotation(), 0.5f);
																this.localAI[1] += 0.05f;
																if (this.localAI[1] > 1f)
																{
																	this.localAI[1] = 1f;
																}
																if (num1160 == num1161 - 35f)
																{
																	Main.PlaySound(4, (int)this.position.X, (int)this.position.Y, 6, 1f, 0f);
																}
																if ((num1160 == num1161 - 14f || num1160 == num1161 - 7f || num1160 == num1161) && Main.netMode != 1)
																{
																	Vector2 vector179 = Utils.Vector2FromElipse(this.localAI[0].ToRotationVector2(), value24 * this.localAI[1]);
																	Vector2 vector180 = Vector2.Normalize(v5) * 8f;
																	Projectile.NewProjectile(base.Center.X + vector179.X, base.Center.Y + vector179.Y, vector180.X, vector180.Y, 462, 30, 0f, Main.myPlayer, 0f, 0f);
																}
															}
															int num1184 = num1162 * 7;
															if ((float)num1184 > this.localAI[2])
															{
																this.localAI[2] += 1f;
															}
															if ((float)num1184 < this.localAI[2])
															{
																this.localAI[2] -= 1f;
															}
															if (this.localAI[2] < 0f)
															{
																this.localAI[2] = 0f;
															}
															if (this.localAI[2] > 14f)
															{
																this.localAI[2] = 14f;
															}
															int num1185 = num1163 * 5;
															if ((float)num1185 > this.localAI[3])
															{
																this.localAI[3] += 1f;
															}
															if ((float)num1185 < this.localAI[3])
															{
																this.localAI[3] -= 1f;
															}
															if (this.localAI[3] < 0f)
															{
																this.localAI[2] = 0f;
															}
															if (this.localAI[3] > 15f)
															{
																this.localAI[2] = 15f;
															}
															int num1186 = 0;
															if (num1186 == 1)
															{
																new Vector2(27f, 59f);
																this.TargetClosest(false);
																Vector2 v6 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY) - base.Center;
																float num1187 = v6.Length() / 200f;
																if (num1187 > 1f)
																{
																	num1187 = 1f;
																}
																num1187 = 1f - num1187;
																num1187 *= 2f;
																if (num1187 > 1f)
																{
																	num1187 = 1f;
																}
																this.localAI[0] = v6.ToRotation();
																this.localAI[1] = num1187;
																this.localAI[1] = 1f;
															}
															if (num1186 == 2)
															{
																Vector2 vector181 = new Vector2(27f, 59f);
																float num1188 = 6.28318548f * ((float)Main.time % 600f) / 600f;
																this.localAI[0] = new Vector2((float)Math.Cos((double)num1188) * vector181.X, (float)Math.Sin((double)num1188) * vector181.Y).ToRotation();
																this.localAI[1] = 0.75f;
																if (this.ai[1] == 0f)
																{
																	Vector2 vector182 = num1188.ToRotationVector2();
																	vector182 = Vector2.One;
																	Projectile.NewProjectile(base.Center.X, base.Center.Y, vector182.X, vector182.Y, 455, 1, 0f, Main.myPlayer, 0.0104719754f, (float)this.whoAmI);
																}
																this.ai[1] += 1f;
																if (this.ai[1] >= 600f)
																{
																	this.ai[1] = 0f;
																}
															}
															if (num1186 == 3)
															{
																Vector2 vector183 = new Vector2(0f, 216f);
																if (this.ai[1] == 0f)
																{
																	this.TargetClosest(false);
																	Vector2 vector184 = Main.player[this.target].Center - base.Center;
																	vector184.Normalize();
																	Projectile.NewProjectile(base.Center.X + vector183.X, base.Center.Y + vector183.Y, vector184.X, vector184.Y, 456, 0, 0f, Main.myPlayer, (float)(this.whoAmI + 1), (float)this.target);
																}
																this.ai[1] += 1f;
																if (this.ai[1] >= 600f)
																{
																	this.ai[1] = 0f;
																}
															}
															if (num1186 == 4)
															{
																new Vector2(27f, 59f);
																this.TargetClosest(false);
																Vector2 v7 = Main.player[this.target].Center + Main.player[this.target].velocity * 20f - base.Center;
																this.localAI[0] = this.localAI[0].AngleLerp(v7.ToRotation(), 0.5f);
																this.localAI[1] = 1f;
																this.ai[1] += 1f;
																if (this.ai[1] == 55f)
																{
																	Main.PlaySound(4, (int)this.position.X, (int)this.position.Y, 6, 1f, 0f);
																}
																if (this.ai[1] == 76f || this.ai[1] == 83f || this.ai[1] == 90f)
																{
																	value24 = new Vector2(27f, 59f);
																	Vector2 vector185 = Utils.Vector2FromElipse(this.localAI[0].ToRotationVector2(), value24 * this.localAI[1]);
																	Vector2 vector186 = Vector2.Normalize(v7) * 8f;
																	Projectile.NewProjectile(base.Center.X + vector185.X, base.Center.Y + vector185.Y, vector186.X, vector186.Y, 462, 5, 0f, Main.myPlayer, 0f, 0f);
																}
																if (this.ai[1] >= 90f)
																{
																	this.ai[1] = 0f;
																	return;
																}
															}
														}
														else
														{
															if (this.aiStyle == 80)
															{
																if (this.ai[0] == 0f)
																{
																	if (this.direction == 0)
																	{
																		this.TargetClosest(true);
																		this.netUpdate = true;
																	}
																	if (this.collideX)
																	{
																		this.direction = -this.direction;
																		this.netUpdate = true;
																	}
																	this.velocity.X = 3f * (float)this.direction;
																	Vector2 center22 = base.Center;
																	Point point8 = center22.ToTileCoordinates();
																	int num1189 = 30;
																	if (WorldGen.InWorld(point8.X, point8.Y, 30))
																	{
																		for (int num1190 = 0; num1190 < 30; num1190++)
																		{
																			if (WorldGen.SolidTile(point8.X, point8.Y + num1190))
																			{
																				num1189 = num1190;
																				break;
																			}
																		}
																	}
																	if (num1189 < 15)
																	{
																		this.velocity.Y = Math.Max(this.velocity.Y - 0.05f, -3.5f);
																	}
																	else if (num1189 < 20)
																	{
																		this.velocity.Y = this.velocity.Y * 0.95f;
																	}
																	else
																	{
																		this.velocity.Y = Math.Min(this.velocity.Y + 0.05f, 1.5f);
																	}
																	float num1192;
																	int num1191 = this.FindClosestPlayer(out num1192);
																	if (num1191 == -1 || Main.player[num1191].dead)
																	{
																		return;
																	}
																	if (num1192 < 352f && Main.player[num1191].Center.Y > base.Center.Y)
																	{
																		this.ai[0] = 1f;
																		this.ai[1] = 0f;
																		this.netUpdate = true;
																	}
																}
																else if (this.ai[0] == 1f)
																{
																	this.ai[1] += 1f;
																	this.velocity *= 0.95f;
																	if (this.ai[1] >= 60f)
																	{
																		this.ai[1] = 0f;
																		this.ai[0] = 2f;
																		int num1193 = this.FindClosestPlayer();
																		if (num1193 != -1)
																		{
																			this.ai[3] = ((Main.player[num1193].Center.X > base.Center.X) ? -1f : 1f);
																		}
																		else
																		{
																			this.ai[3] = 1f;
																		}
																		this.netUpdate = true;
																	}
																}
																else if (this.ai[0] == 2f)
																{
																	this.noTileCollide = true;
																	this.ai[1] += 1f;
																	this.velocity.Y = Math.Max(this.velocity.Y - 0.1f, -10f);
																	this.velocity.X = Math.Min(this.velocity.X + this.ai[3] * 0.05f, 4f);
																	if ((this.position.Y < (float)(-(float)this.height) || this.ai[1] >= 180f) && Main.netMode != 1)
																	{
																		Main.StartInvasion(4);
																		this.active = false;
																		this.netUpdate = true;
																	}
																}
																Vector3 rgb = Color.SkyBlue.ToVector3();
																if (this.ai[0] == 2f)
																{
																	rgb = Color.Red.ToVector3();
																}
																rgb *= 0.65f;
																Lighting.AddLight(base.Center, rgb);
																return;
															}
															if (this.aiStyle == 81)
															{
																if (Main.rand.Next(420) == 0)
																{
																	Main.PlaySound(29, (int)base.Center.X, (int)base.Center.Y, Main.rand.Next(100, 101), 1f, 0f);
																}
																Vector2 value31 = new Vector2(30f);
																if (!Main.npc[(int)this.ai[3]].active || Main.npc[(int)this.ai[3]].type != 398)
																{
																	this.life = 0;
																	this.HitEffect(0, 10.0);
																	this.active = false;
																}
																float num1194 = 0f;
																float num1195 = this.ai[0];
																this.ai[1] += 1f;
																int num1196 = 0;
																int num1197 = 0;
																while (num1196 < 10)
																{
																	num1194 = (float)NPC.MoonLordAttacksArray2[1, num1196];
																	if (num1194 + (float)num1197 > this.ai[1])
																	{
																		break;
																	}
																	num1197 += (int)num1194;
																	num1196++;
																}
																if (num1196 == 10)
																{
																	num1196 = 0;
																	this.ai[1] = 0f;
																	num1194 = (float)NPC.MoonLordAttacksArray2[1, num1196];
																	num1197 = 0;
																}
																this.ai[0] = (float)NPC.MoonLordAttacksArray2[0, num1196];
																float num1198 = (float)((int)this.ai[1] - num1197);
																if (this.ai[0] != num1195)
																{
																	this.netUpdate = true;
																}
																if (this.ai[0] == -1f)
																{
																	this.ai[1] += 1f;
																	if (this.ai[1] > 180f)
																	{
																		this.ai[1] = 0f;
																	}
																	float value32;
																	if (this.ai[1] < 60f)
																	{
																		value32 = 0.75f;
																		this.localAI[0] = 0f;
																		this.localAI[1] = (float)Math.Sin((double)(this.ai[1] * 6.28318548f / 15f)) * 0.35f;
																		if (this.localAI[1] < 0f)
																		{
																			this.localAI[0] = 3.14159274f;
																		}
																	}
																	else if (this.ai[1] < 120f)
																	{
																		value32 = 1f;
																		if (this.localAI[1] < 0.5f)
																		{
																			this.localAI[1] += 0.025f;
																		}
																		this.localAI[0] += 0.209439516f;
																	}
																	else
																	{
																		value32 = 1.15f;
																		this.localAI[1] -= 0.05f;
																		if (this.localAI[1] < 0f)
																		{
																			this.localAI[1] = 0f;
																		}
																	}
																	this.localAI[2] = MathHelper.Lerp(this.localAI[2], value32, 0.3f);
																}
																if (this.ai[0] == 0f)
																{
																	this.TargetClosest(false);
																	Vector2 v8 = Main.player[this.target].Center + Main.player[this.target].velocity * 20f - base.Center;
																	this.localAI[0] = this.localAI[0].AngleLerp(v8.ToRotation(), 0.5f);
																	this.localAI[1] += 0.05f;
																	if (this.localAI[1] > 0.7f)
																	{
																		this.localAI[1] = 0.7f;
																	}
																	this.localAI[2] = MathHelper.Lerp(this.localAI[2], 1f, 0.2f);
																	float scaleFactor9 = 24f;
																	Vector2 center23 = base.Center;
																	Vector2 center24 = Main.player[this.target].Center;
																	Vector2 value33 = center24 - center23;
																	Vector2 vector187 = value33 - Vector2.UnitY * 200f;
																	vector187 = Vector2.Normalize(vector187) * scaleFactor9;
																	int num1199 = 30;
																	this.velocity.X = (this.velocity.X * (float)(num1199 - 1) + vector187.X) / (float)num1199;
																	this.velocity.Y = (this.velocity.Y * (float)(num1199 - 1) + vector187.Y) / (float)num1199;
																	float num1200 = 0.25f;
																	for (int num1201 = 0; num1201 < 200; num1201++)
																	{
																		if (num1201 != this.whoAmI && Main.npc[num1201].active && Main.npc[num1201].type == 400 && Vector2.Distance(base.Center, Main.npc[num1201].Center) < 150f)
																		{
																			if (this.position.X < Main.npc[num1201].position.X)
																			{
																				this.velocity.X = this.velocity.X - num1200;
																			}
																			else
																			{
																				this.velocity.X = this.velocity.X + num1200;
																			}
																			if (this.position.Y < Main.npc[num1201].position.Y)
																			{
																				this.velocity.Y = this.velocity.Y - num1200;
																			}
																			else
																			{
																				this.velocity.Y = this.velocity.Y + num1200;
																			}
																		}
																	}
																	return;
																}
																if (this.ai[0] == 1f)
																{
																	if (num1198 == 0f)
																	{
																		this.TargetClosest(false);
																		this.netUpdate = true;
																	}
																	this.velocity *= 0.95f;
																	if (this.velocity.Length() < 1f)
																	{
																		this.velocity = Vector2.Zero;
																	}
																	Vector2 v9 = Main.player[this.target].Center + Main.player[this.target].velocity * 20f - base.Center;
																	this.localAI[0] = this.localAI[0].AngleLerp(v9.ToRotation(), 0.5f);
																	this.localAI[1] += 0.05f;
																	if (this.localAI[1] > 1f)
																	{
																		this.localAI[1] = 1f;
																	}
																	if (num1198 < 20f)
																	{
																		this.localAI[2] = MathHelper.Lerp(this.localAI[2], 1.1f, 0.2f);
																	}
																	else
																	{
																		this.localAI[2] = MathHelper.Lerp(this.localAI[2], 0.4f, 0.2f);
																	}
																	if (num1198 == num1194 - 35f)
																	{
																		Main.PlaySound(4, (int)this.position.X, (int)this.position.Y, 6, 1f, 0f);
																	}
																	if ((num1198 == num1194 - 14f || num1198 == num1194 - 7f || num1198 == num1194) && Main.netMode != 1)
																	{
																		Vector2 vector188 = Utils.Vector2FromElipse(this.localAI[0].ToRotationVector2(), value31 * this.localAI[1]);
																		Vector2 vector189 = Vector2.Normalize(v9) * 8f;
																		Projectile.NewProjectile(base.Center.X + vector188.X, base.Center.Y + vector188.Y, vector189.X, vector189.Y, 462, 35, 0f, Main.myPlayer, 0f, 0f);
																		return;
																	}
																}
																else if (this.ai[0] == 2f)
																{
																	if (num1198 < 15f)
																	{
																		this.localAI[1] -= 0.07f;
																		if (this.localAI[1] < 0f)
																		{
																			this.localAI[1] = 0f;
																		}
																		this.localAI[2] = MathHelper.Lerp(this.localAI[2], 0.4f, 0.2f);
																		this.velocity *= 0.8f;
																		if (this.velocity.Length() < 1f)
																		{
																			this.velocity = Vector2.Zero;
																			return;
																		}
																	}
																	else if (num1198 < 75f)
																	{
																		float num1202 = (num1198 - 15f) / 10f;
																		int num1203 = 0;
																		int num1204 = 0;
																		switch ((int)num1202)
																		{
																		case 0:
																			num1203 = 0;
																			num1204 = 2;
																			break;
																		case 1:
																			num1203 = 2;
																			num1204 = 5;
																			break;
																		case 2:
																			num1203 = 5;
																			num1204 = 3;
																			break;
																		case 3:
																			num1203 = 3;
																			num1204 = 1;
																			break;
																		case 4:
																			num1203 = 1;
																			num1204 = 4;
																			break;
																		case 5:
																			num1203 = 4;
																			num1204 = 0;
																			break;
																		}
																		Vector2 spinningpoint8 = Vector2.UnitY * -30f;
																		Vector2 value34 = spinningpoint8.RotatedBy((double)((float)num1203 * 6.28318548f / 6f), default(Vector2));
																		Vector2 value35 = spinningpoint8.RotatedBy((double)((float)num1204 * 6.28318548f / 6f), default(Vector2));
																		Vector2 vector190 = Vector2.Lerp(value34, value35, num1202 - (float)((int)num1202));
																		float value36 = vector190.Length() / 30f;
																		this.localAI[0] = vector190.ToRotation();
																		this.localAI[1] = MathHelper.Lerp(this.localAI[1], value36, 0.5f);
																		for (int num1205 = 0; num1205 < 2; num1205++)
																		{
																			int num1206 = Dust.NewDust(base.Center + vector190 - Vector2.One * 4f, 0, 0, 229, 0f, 0f, 0, default(Color), 1f);
																			Main.dust[num1206].velocity += vector190 / 15f;
																			Main.dust[num1206].noGravity = true;
																		}
																		if ((num1198 - 15f) % 10f == 0f && Main.netMode != 1)
																		{
																			Vector2 vec4 = Vector2.Normalize(vector190);
																			if (vec4.HasNaNs())
																			{
																				vec4 = Vector2.UnitY * -1f;
																			}
																			vec4 *= 4f;
																			Projectile.NewProjectile(base.Center.X + vector190.X, base.Center.Y + vector190.Y, vec4.X, vec4.Y, 454, 55, 0f, Main.myPlayer, 30f, (float)this.whoAmI);
																			return;
																		}
																	}
																	else
																	{
																		if (num1198 < 105f)
																		{
																			this.localAI[0] = this.localAI[0].AngleLerp(this.ai[2] - 1.57079637f, 0.2f);
																			this.localAI[2] = MathHelper.Lerp(this.localAI[2], 0.75f, 0.2f);
																			if (num1198 == 75f)
																			{
																				this.TargetClosest(false);
																				this.netUpdate = true;
																				this.velocity = Vector2.UnitY * -7f;
																				for (int num1207 = 0; num1207 < 1000; num1207++)
																				{
																					Projectile projectile7 = Main.projectile[num1207];
																					if (projectile7.active && projectile7.type == 454 && projectile7.ai[1] == (float)this.whoAmI && projectile7.ai[0] != -1f)
																					{
																						projectile7.velocity += this.velocity;
																						projectile7.netUpdate = true;
																					}
																				}
																			}
																			this.velocity.Y = this.velocity.Y * 0.96f;
																			this.ai[2] = (Main.player[this.target].Center - base.Center).ToRotation() + 1.57079637f;
																			this.rotation = this.rotation.AngleTowards(this.ai[2], 0.104719758f);
																			return;
																		}
																		if (num1198 < 120f)
																		{
																			Main.PlaySound(29, (int)base.Center.X, (int)base.Center.Y, 102, 1f, 0f);
																			if (num1198 == 105f)
																			{
																				this.netUpdate = true;
																			}
																			Vector2 velocity8 = (this.ai[2] - 1.57079637f).ToRotationVector2() * 12f;
																			this.velocity = velocity8 * 2f;
																			for (int num1208 = 0; num1208 < 1000; num1208++)
																			{
																				Projectile projectile8 = Main.projectile[num1208];
																				if (projectile8.active && projectile8.type == 454 && projectile8.ai[1] == (float)this.whoAmI && projectile8.ai[0] != -1f)
																				{
																					projectile8.ai[0] = -1f;
																					projectile8.velocity = velocity8;
																					projectile8.netUpdate = true;
																				}
																			}
																			return;
																		}
																		this.velocity *= 0.92f;
																		this.rotation = this.rotation.AngleLerp(0f, 0.2f);
																		return;
																	}
																}
																else if (this.ai[0] == 3f)
																{
																	if (num1198 < 15f)
																	{
																		this.localAI[1] -= 0.07f;
																		if (this.localAI[1] < 0f)
																		{
																			this.localAI[1] = 0f;
																		}
																		this.localAI[2] = MathHelper.Lerp(this.localAI[2], 0.4f, 0.2f);
																		this.velocity *= 0.9f;
																		if (this.velocity.Length() < 1f)
																		{
																			this.velocity = Vector2.Zero;
																			return;
																		}
																	}
																	else if (num1198 < 45f)
																	{
																		this.localAI[0] = 0f;
																		this.localAI[1] = (float)Math.Sin((double)((num1198 - 15f) * 6.28318548f / 15f)) * 0.5f;
																		if (this.localAI[1] < 0f)
																		{
																			this.localAI[0] = 3.14159274f;
																			return;
																		}
																	}
																	else
																	{
																		if (num1198 >= 185f)
																		{
																			this.velocity *= 0.88f;
																			this.rotation = this.rotation.AngleLerp(0f, 0.2f);
																			this.localAI[1] -= 0.07f;
																			if (this.localAI[1] < 0f)
																			{
																				this.localAI[1] = 0f;
																			}
																			this.localAI[2] = MathHelper.Lerp(this.localAI[2], 1f, 0.2f);
																			return;
																		}
																		if (num1198 == 45f)
																		{
																			this.ai[2] = (float)(Main.rand.Next(2) == 0).ToDirectionInt() * 6.28318548f / 40f;
																			this.netUpdate = true;
																		}
																		if ((num1198 - 15f - 30f) % 40f == 0f)
																		{
																			this.ai[2] *= 0.95f;
																		}
																		this.localAI[0] += this.ai[2];
																		this.localAI[1] += 0.05f;
																		if (this.localAI[1] > 1f)
																		{
																			this.localAI[1] = 1f;
																		}
																		Vector2 vector191 = this.localAI[0].ToRotationVector2() * value31 * this.localAI[1];
																		float scaleFactor10 = MathHelper.Lerp(8f, 20f, (num1198 - 15f - 30f) / 140f);
																		this.velocity = Vector2.Normalize(vector191) * scaleFactor10;
																		this.rotation = this.rotation.AngleLerp(this.velocity.ToRotation() + 1.57079637f, 0.2f);
																		if ((num1198 - 15f - 30f) % 10f == 0f && Main.netMode != 1)
																		{
																			Vector2 vector192 = base.Center + Vector2.Normalize(vector191) * value31.Length() * 0.4f;
																			Vector2 vector193 = Vector2.Normalize(vector191) * 8f;
																			float ai3 = (6.28318548f * (float)Main.rand.NextDouble() - 3.14159274f) / 30f + 0.0174532924f * this.ai[2];
																			Projectile.NewProjectile(vector192.X, vector192.Y, vector193.X, vector193.Y, 452, 35, 0f, Main.myPlayer, 0f, ai3);
																			return;
																		}
																	}
																}
																else if (this.ai[0] == 4f)
																{
																	if (num1198 == 0f)
																	{
																		this.TargetClosest(false);
																		this.netUpdate = true;
																	}
																	if (num1198 < 180f)
																	{
																		this.localAI[2] = MathHelper.Lerp(this.localAI[2], 1f, 0.2f);
																		this.localAI[1] -= 0.05f;
																		if (this.localAI[1] < 0f)
																		{
																			this.localAI[1] = 0f;
																		}
																		this.velocity *= 0.95f;
																		if (this.velocity.Length() < 1f)
																		{
																			this.velocity = Vector2.Zero;
																		}
																		if (num1198 >= 60f)
																		{
																			Vector2 center25 = base.Center;
																			int num1209 = 0;
																			if (num1198 >= 120f)
																			{
																				num1209 = 1;
																			}
																			for (int num1210 = 0; num1210 < 1 + num1209; num1210++)
																			{
																				int num1211 = 229;
																				float num1212 = 0.8f;
																				if (num1210 % 2 == 1)
																				{
																					num1211 = 229;
																					num1212 = 1.65f;
																				}
																				Vector2 vector194 = center25 + ((float)Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() * value31 / 2f;
																				int num1213 = Dust.NewDust(vector194 - Vector2.One * 8f, 16, 16, num1211, this.velocity.X / 2f, this.velocity.Y / 2f, 0, default(Color), 1f);
																				Main.dust[num1213].velocity = Vector2.Normalize(center25 - vector194) * 3.5f * (10f - (float)num1209 * 2f) / 10f;
																				Main.dust[num1213].noGravity = true;
																				Main.dust[num1213].scale = num1212;
																				Main.dust[num1213].customData = this;
																			}
																			return;
																		}
																	}
																	else
																	{
																		if (num1198 < num1194 - 15f)
																		{
																			if (num1198 == 180f && Main.netMode != 1)
																			{
																				this.TargetClosest(false);
																				Vector2 vector195 = Main.player[this.target].Center - base.Center;
																				vector195.Normalize();
																				float num1214 = -1f;
																				if (vector195.X < 0f)
																				{
																					num1214 = 1f;
																				}
																				vector195 = vector195.RotatedBy((double)(-(double)num1214 * 6.28318548f / 6f), default(Vector2));
																				Projectile.NewProjectile(base.Center.X, base.Center.Y, vector195.X, vector195.Y, 455, 50, 0f, Main.myPlayer, num1214 * 6.28318548f / 540f, (float)this.whoAmI);
																				this.ai[2] = (vector195.ToRotation() + 9.424778f) * num1214;
																				this.netUpdate = true;
																			}
																			this.localAI[1] += 0.05f;
																			if (this.localAI[1] > 1f)
																			{
																				this.localAI[1] = 1f;
																			}
																			float num1215 = (float)(this.ai[2] >= 0f).ToDirectionInt();
																			float num1216 = this.ai[2];
																			if (num1216 < 0f)
																			{
																				num1216 *= -1f;
																			}
																			num1216 += -9.424778f;
																			num1216 += num1215 * 6.28318548f / 540f;
																			this.localAI[0] = num1216;
																			this.ai[2] = (num1216 + 9.424778f) * num1215;
																			return;
																		}
																		this.localAI[1] -= 0.07f;
																		if (this.localAI[1] < 0f)
																		{
																			this.localAI[1] = 0f;
																			return;
																		}
																	}
																}
															}
															else if (this.aiStyle == 82)
															{
																float num1217 = 90f;
																Vector2 value37 = new Vector2(0f, 216f);
																int num1218 = (int)Math.Abs(this.ai[0]) - 1;
																int num1219 = (int)this.ai[1];
																if (!Main.npc[num1218].active || Main.npc[num1218].type != 396)
																{
																	this.life = 0;
																	this.HitEffect(0, 10.0);
																	this.active = false;
																	return;
																}
																this.ai[2] += 1f;
																if (this.ai[2] >= num1217)
																{
																	if (Main.netMode != 1)
																	{
																		int num1220 = (int)Main.npc[num1218].ai[3];
																		int num1221 = -1;
																		int num1222 = -1;
																		int num1223 = num1218;
																		for (int num1224 = 0; num1224 < 200; num1224++)
																		{
																			if (Main.npc[num1224].active && Main.npc[num1224].ai[3] == (float)num1220)
																			{
																				if (num1221 == -1 && Main.npc[num1224].type == 397 && Main.npc[num1224].ai[2] == 0f)
																				{
																					num1221 = num1224;
																				}
																				if (num1222 == -1 && Main.npc[num1224].type == 397 && Main.npc[num1224].ai[2] == 1f)
																				{
																					num1222 = num1224;
																				}
																				if (num1221 != -1 && num1222 != -1 && num1223 != -1)
																				{
																					break;
																				}
																			}
																		}
																		int num1225 = 1000;
																		int num1226 = Main.npc[num1220].lifeMax - Main.npc[num1220].life;
																		int num1227 = Main.npc[num1221].lifeMax - Main.npc[num1221].life;
																		int num1228 = Main.npc[num1222].lifeMax - Main.npc[num1222].life;
																		int num1229 = Main.npc[num1223].lifeMax - Main.npc[num1223].life;
																		if (num1229 > 0 && num1225 > 0)
																		{
																			int num1230 = num1229 - num1225;
																			if (num1230 > 0)
																			{
																				num1230 = 0;
																			}
																			int num1231 = num1225 + num1230;
																			num1225 -= num1231;
																			Main.npc[num1223].life += num1231;
																			NPC.HealEffect(Utils.CenteredRectangle(Main.npc[num1223].Center, new Vector2(50f)), num1231, true);
																		}
																		if (num1226 > 0 && num1225 > 0)
																		{
																			int num1232 = num1226 - num1225;
																			if (num1232 > 0)
																			{
																				num1232 = 0;
																			}
																			int num1233 = num1225 + num1232;
																			num1225 -= num1233;
																			Main.npc[num1220].life += num1233;
																			NPC.HealEffect(Utils.CenteredRectangle(Main.npc[num1220].Center, new Vector2(50f)), num1233, true);
																		}
																		if (num1227 > 0 && num1225 > 0)
																		{
																			int num1234 = num1227 - num1225;
																			if (num1234 > 0)
																			{
																				num1234 = 0;
																			}
																			int num1235 = num1225 + num1234;
																			num1225 -= num1235;
																			Main.npc[num1221].life += num1235;
																			NPC.HealEffect(Utils.CenteredRectangle(Main.npc[num1221].Center, new Vector2(50f)), num1235, true);
																		}
																		if (num1228 > 0 && num1225 > 0)
																		{
																			int num1236 = num1228 - num1225;
																			if (num1236 > 0)
																			{
																				num1236 = 0;
																			}
																			int num1237 = num1225 + num1236;
																			num1225 -= num1237;
																			Main.npc[num1222].life += num1237;
																			NPC.HealEffect(Utils.CenteredRectangle(Main.npc[num1222].Center, new Vector2(50f)), num1237, true);
																		}
																	}
																	this.life = 0;
																	this.HitEffect(0, 10.0);
																	this.active = false;
																	return;
																}
																this.velocity = Vector2.Zero;
																base.Center = Vector2.Lerp(Main.projectile[num1219].Center, Main.npc[(int)Math.Abs(this.ai[0]) - 1].Center + value37, this.ai[2] / num1217);
																Vector2 spinningpoint9 = Vector2.UnitY * (float)(-(float)this.height) / 2f;
																for (int num1238 = 0; num1238 < 6; num1238++)
																{
																	int num1239 = Dust.NewDust(base.Center - Vector2.One * 4f + spinningpoint9.RotatedBy((double)((float)num1238 * 6.28318548f / 6f), default(Vector2)), 0, 0, 229, 0f, 0f, 0, default(Color), 1f);
																	Main.dust[num1239].velocity = -Vector2.UnitY;
																	Main.dust[num1239].noGravity = true;
																	Main.dust[num1239].scale = 0.7f;
																	Main.dust[num1239].customData = this;
																}
																spinningpoint9 = Vector2.UnitY * (float)(-(float)this.height) / 6f;
																for (int num1240 = 0; num1240 < 3; num1240++)
																{
																	int num1241 = Dust.NewDust(base.Center - Vector2.One * 4f + spinningpoint9.RotatedBy((double)((float)num1240 * 6.28318548f / 6f), default(Vector2)), 0, 0, 229, 0f, -2f, 0, default(Color), 1f);
																	Main.dust[num1241].noGravity = true;
																	Main.dust[num1241].scale = 1.5f;
																	Main.dust[num1241].customData = this;
																}
																return;
															}
															else if (this.aiStyle == 83)
															{
																if (this.type == 437)
																{
																	if (this.localAI[3] == 0f && Main.netMode != 1)
																	{
																		this.localAI[3] = 1f;
																		this.netUpdate = true;
																		Point[] array6 = null;
																		if (!CultistRitual.CheckFloor(base.Center, out array6))
																		{
																			this.life = 0;
																			this.HitEffect(0, 10.0);
																			this.active = false;
																			return;
																		}
																		int num1242 = 0;
																		int num1243 = 1;
																		for (int num1244 = 0; num1244 < 4; num1244++)
																		{
																			bool flag92 = num1244 == 1 || num1244 == 2;
																			int num1245;
																			if (flag92)
																			{
																				num1245 = 438;
																			}
																			else
																			{
																				num1245 = 379;
																			}
																			int num1246 = NPC.NewNPC(array6[num1244].X * 16 + 8, array6[num1244].Y * 16 - 48, num1245, 0, 0f, 0f, 0f, 0f, 255);
																			if (flag92)
																			{
																				this.localAI[num1243++] = (float)(num1246 + 1);
																				Main.npc[num1246].ai[3] = (float)(-(float)(this.whoAmI + 1));
																			}
																			else
																			{
																				this.ai[num1242++] = (float)(num1246 + 1);
																				Main.npc[num1246].ai[3] = (float)(-(float)(this.whoAmI + 1));
																			}
																			Main.npc[num1246].netUpdate = true;
																		}
																	}
																	if (this.localAI[0] == 1f && Main.netMode != 1)
																	{
																		this.localAI[0] = 2f;
																		for (int num1247 = 0; num1247 < 2; num1247++)
																		{
																			Main.npc[(int)this.localAI[num1247 + 1] - 1].ai[1] = 1f;
																			Main.npc[(int)this.localAI[num1247 + 1] - 1].netUpdate = true;
																			Main.npc[(int)this.ai[num1247] - 1].ai[3] = 0f;
																			Main.npc[(int)this.ai[num1247] - 1].TargetClosest(true);
																			Main.npc[(int)this.ai[num1247] - 1].netUpdate = true;
																		}
																	}
																	if (this.ai[0] != -1f && Main.netMode != 1)
																	{
																		bool flag93 = true;
																		for (int num1248 = 0; num1248 < 2; num1248++)
																		{
																			if (Main.npc[(int)this.localAI[num1248 + 1] - 1].active && Main.npc[(int)this.localAI[num1248 + 1] - 1].type == 438)
																			{
																				flag93 = false;
																			}
																			if (Main.npc[(int)this.ai[num1248] - 1].active && Main.npc[(int)this.ai[num1248] - 1].type == 379)
																			{
																				flag93 = false;
																			}
																		}
																		if (flag93)
																		{
																			this.ai[0] = -1f;
																			this.ai[1] = 0f;
																			this.ai[3] = 0f;
																			int num1249 = (int)base.Center.X / 16 + 11 * (Main.rand.Next(2) == 0).ToDirectionInt();
																			int num1250 = 0;
																			for (int num1251 = -5; num1251 < 12; num1251++)
																			{
																				int num1252 = num1249;
																				int num1253 = (int)base.Center.Y / 16 + num1251;
																				if (WorldGen.SolidTile(num1252, num1253) && !Collision.SolidTiles(num1252 - 1, num1252 + 1, num1253 - 3, num1253 - 1))
																				{
																					num1250 = num1253;
																					break;
																				}
																				if (num1251 == 11)
																				{
																					num1250 = num1253;
																				}
																			}
																			int num1254 = NPC.NewNPC(num1249 * 16 + 10, num1250 * 16 - 2, 439, 0, 0f, 0f, 0f, 0f, 255);
																			Main.npc[num1254].direction = (Main.npc[num1254].spriteDirection = Math.Sign(base.Center.X - (float)(num1249 * 16) - 10f));
																			this.ai[2] = (float)num1254;
																			this.netUpdate = true;
																			CultistRitual.TabletDestroyed();
																		}
																	}
																	if (this.ai[0] == -1f)
																	{
																		this.ai[3] += 1f;
																		if (this.ai[3] > 300f)
																		{
																			this.life = 0;
																			this.HitEffect(0, 9999.0);
																			this.active = false;
																			if (Main.netMode != 1)
																			{
																				for (int num1255 = 0; num1255 < 6; num1255++)
																				{
																					float num1256 = 3f + Main.rand.NextFloat() * 6f;
																					Vector2 vector196 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																					Vector2 value38 = base.Center;
																					value38 += vector196 * 30f;
																					Projectile.NewProjectile(value38.X, value38.Y, vector196.X * num1256, vector196.Y * num1256, 526, 0, 0f, Main.myPlayer, Main.npc[(int)this.ai[2]].Center.X, Main.npc[(int)this.ai[2]].Center.Y);
																				}
																				for (int num1257 = 0; num1257 < 20; num1257++)
																				{
																					if (Main.rand.Next(2) != 0)
																					{
																						float num1258 = 3f + Main.rand.NextFloat() * 6f;
																						Vector2 vector197 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																						Vector2 value39 = base.Center;
																						value39 += vector197 * 30f;
																						Vector2 vector198 = base.Center + vector197 * (Main.rand.NextFloat() * 45f + 45f) + Vector2.UnitY * 20f;
																						Projectile.NewProjectile(value39.X, value39.Y, vector197.X * num1258, -20f, 526, 0, 0f, Main.myPlayer, vector198.X, vector198.Y);
																					}
																				}
																			}
																		}
																		else if (this.ai[3] % 10f == 1f && this.ai[3] > 120f && Main.netMode != 1)
																		{
																			float num1259 = 3f + Main.rand.NextFloat() * 6f;
																			Vector2 vector199 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																			Vector2 value40 = base.Center;
																			value40 += vector199 * 25f;
																			Projectile.NewProjectile(value40.X, value40.Y, vector199.X * num1259, vector199.Y * num1259, 526, 0, 0f, Main.myPlayer, Main.npc[(int)this.ai[2]].Center.X, Main.npc[(int)this.ai[2]].Center.Y);
																		}
																	}
																}
																if (this.type == 438)
																{
																	this.velocity.X = this.velocity.X * 0.93f;
																	if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1)
																	{
																		this.velocity.X = 0f;
																	}
																	int num1260 = (int)(-this.ai[3] - 1f);
																	if (num1260 == -1)
																	{
																		this.life = 0;
																		this.HitEffect(0, 10.0);
																		this.active = false;
																		return;
																	}
																	int num1261 = Math.Sign(Main.npc[num1260].Center.X - base.Center.X);
																	if (num1261 != this.direction)
																	{
																		this.velocity.X = 0f;
																		this.direction = (this.spriteDirection = num1261);
																		this.netUpdate = true;
																	}
																	if (this.justHit && Main.netMode != 1 && Main.npc[num1260].localAI[0] == 0f)
																	{
																		Main.npc[num1260].localAI[0] = 1f;
																	}
																	if ((this.ai[0] += 1f) >= 300f)
																	{
																		this.ai[0] = 0f;
																		this.netUpdate = true;
																	}
																}
																if (this.type == 437)
																{
																	Lighting.AddLight(base.Center, 0.8f, 0.75f, 0.55f);
																	return;
																}
															}
															else
															{
																if (this.aiStyle == 84)
																{
																	this.AI_084_LunaticCultist();
																	return;
																}
																if (this.aiStyle == 85)
																{
																	this.noTileCollide = false;
																	if (this.ai[0] == 0f)
																	{
																		this.TargetClosest(true);
																		if (Collision.CanHit(base.Center, 1, 1, Main.player[this.target].Center, 1, 1))
																		{
																			this.ai[0] = 1f;
																		}
																		else
																		{
																			Vector2 value41 = Main.player[this.target].Center - base.Center;
																			value41.Y -= (float)(Main.player[this.target].height / 4);
																			float num1262 = value41.Length();
																			if (num1262 > 800f)
																			{
																				this.ai[0] = 2f;
																			}
																			else
																			{
																				Vector2 center26 = base.Center;
																				center26.X = Main.player[this.target].Center.X;
																				Vector2 vector200 = center26 - base.Center;
																				if (vector200.Length() > 8f && Collision.CanHit(base.Center, 1, 1, center26, 1, 1))
																				{
																					this.ai[0] = 3f;
																					this.ai[1] = center26.X;
																					this.ai[2] = center26.Y;
																					Vector2 center27 = base.Center;
																					center27.Y = Main.player[this.target].Center.Y;
																					if (vector200.Length() > 8f && Collision.CanHit(base.Center, 1, 1, center27, 1, 1) && Collision.CanHit(center27, 1, 1, Main.player[this.target].position, 1, 1))
																					{
																						this.ai[0] = 3f;
																						this.ai[1] = center27.X;
																						this.ai[2] = center27.Y;
																					}
																				}
																				else
																				{
																					center26 = base.Center;
																					center26.Y = Main.player[this.target].Center.Y;
																					if ((center26 - base.Center).Length() > 8f && Collision.CanHit(base.Center, 1, 1, center26, 1, 1))
																					{
																						this.ai[0] = 3f;
																						this.ai[1] = center26.X;
																						this.ai[2] = center26.Y;
																					}
																				}
																				if (this.ai[0] == 0f)
																				{
																					this.localAI[0] = 0f;
																					value41.Normalize();
																					value41 *= 0.5f;
																					this.velocity += value41;
																					this.ai[0] = 4f;
																					this.ai[1] = 0f;
																				}
																			}
																		}
																	}
																	else if (this.ai[0] == 1f)
																	{
																		this.rotation += (float)this.direction * 0.3f;
																		Vector2 value42 = Main.player[this.target].Center - base.Center;
																		if (this.type == 421)
																		{
																			value42 = Main.player[this.target].Top - base.Center;
																		}
																		float num1263 = value42.Length();
																		float num1264 = 5.5f;
																		num1264 += num1263 / 100f;
																		int num1265 = 50;
																		value42.Normalize();
																		value42 *= num1264;
																		this.velocity = (this.velocity * (float)(num1265 - 1) + value42) / (float)num1265;
																		if (!Collision.CanHit(base.Center, 1, 1, Main.player[this.target].Center, 1, 1))
																		{
																			this.ai[0] = 0f;
																			this.ai[1] = 0f;
																		}
																		if (this.type == 421 && num1263 < 40f && Main.player[this.target].active && !Main.player[this.target].dead)
																		{
																			bool flag94 = true;
																			for (int num1266 = 0; num1266 < 200; num1266++)
																			{
																				NPC nPC7 = Main.npc[num1266];
																				if (nPC7.active && nPC7.type == this.type && nPC7.ai[0] == 5f && nPC7.target == this.target)
																				{
																					flag94 = false;
																					break;
																				}
																			}
																			if (flag94)
																			{
																				base.Center = Main.player[this.target].Top;
																				this.velocity = Vector2.Zero;
																				this.ai[0] = 5f;
																				this.ai[1] = 0f;
																				this.netUpdate = true;
																			}
																		}
																	}
																	else if (this.ai[0] == 2f)
																	{
																		this.rotation = this.velocity.X * 0.1f;
																		this.noTileCollide = true;
																		Vector2 value43 = Main.player[this.target].Center - base.Center;
																		float num1267 = value43.Length();
																		float scaleFactor11 = 3f;
																		int num1268 = 3;
																		value43.Normalize();
																		value43 *= scaleFactor11;
																		this.velocity = (this.velocity * (float)(num1268 - 1) + value43) / (float)num1268;
																		if (num1267 < 600f && !Collision.SolidCollision(this.position, this.width, this.height))
																		{
																			this.ai[0] = 0f;
																		}
																	}
																	else if (this.ai[0] == 3f)
																	{
																		this.rotation = this.velocity.X * 0.1f;
																		Vector2 value44 = new Vector2(this.ai[1], this.ai[2]);
																		Vector2 value45 = value44 - base.Center;
																		float num1269 = value45.Length();
																		float num1270 = 2f;
																		float num1271 = 3f;
																		value45.Normalize();
																		value45 *= num1270;
																		this.velocity = (this.velocity * (num1271 - 1f) + value45) / num1271;
																		if (this.collideX || this.collideY)
																		{
																			this.ai[0] = 4f;
																			this.ai[1] = 0f;
																		}
																		if (num1269 < num1270 || num1269 > 800f || Collision.CanHit(base.Center, 1, 1, Main.player[this.target].Center, 1, 1))
																		{
																			this.ai[0] = 0f;
																		}
																	}
																	else if (this.ai[0] == 4f)
																	{
																		this.rotation = this.velocity.X * 0.1f;
																		if (this.collideX)
																		{
																			this.velocity.X = this.velocity.X * -0.8f;
																		}
																		if (this.collideY)
																		{
																			this.velocity.Y = this.velocity.Y * -0.8f;
																		}
																		Vector2 value46;
																		if (this.velocity.X == 0f && this.velocity.Y == 0f)
																		{
																			value46 = Main.player[this.target].Center - base.Center;
																			value46.Y -= (float)(Main.player[this.target].height / 4);
																			value46.Normalize();
																			this.velocity = value46 * 0.1f;
																		}
																		float scaleFactor12 = 2f;
																		float num1272 = 20f;
																		value46 = this.velocity;
																		value46.Normalize();
																		value46 *= scaleFactor12;
																		this.velocity = (this.velocity * (num1272 - 1f) + value46) / num1272;
																		this.ai[1] += 1f;
																		if (this.ai[1] > 180f)
																		{
																			this.ai[0] = 0f;
																			this.ai[1] = 0f;
																		}
																		if (Collision.CanHit(base.Center, 1, 1, Main.player[this.target].Center, 1, 1))
																		{
																			this.ai[0] = 0f;
																		}
																		this.localAI[0] += 1f;
																		if (this.localAI[0] >= 5f && !Collision.SolidCollision(this.position - new Vector2(10f, 10f), this.width + 20, this.height + 20))
																		{
																			this.localAI[0] = 0f;
																			Vector2 center28 = base.Center;
																			center28.X = Main.player[this.target].Center.X;
																			if (Collision.CanHit(base.Center, 1, 1, center28, 1, 1) && Collision.CanHit(base.Center, 1, 1, center28, 1, 1) && Collision.CanHit(Main.player[this.target].Center, 1, 1, center28, 1, 1))
																			{
																				this.ai[0] = 3f;
																				this.ai[1] = center28.X;
																				this.ai[2] = center28.Y;
																			}
																			else
																			{
																				center28 = base.Center;
																				center28.Y = Main.player[this.target].Center.Y;
																				if (Collision.CanHit(base.Center, 1, 1, center28, 1, 1) && Collision.CanHit(Main.player[this.target].Center, 1, 1, center28, 1, 1))
																				{
																					this.ai[0] = 3f;
																					this.ai[1] = center28.X;
																					this.ai[2] = center28.Y;
																				}
																			}
																		}
																	}
																	else if (this.ai[0] == 5f)
																	{
																		Player player7 = Main.player[this.target];
																		if (!player7.active || player7.dead)
																		{
																			this.ai[0] = 0f;
																			this.ai[1] = 0f;
																			this.netUpdate = true;
																		}
																		else
																		{
																			base.Center = ((player7.gravDir == 1f) ? player7.Top : player7.Bottom) + new Vector2((float)(player7.direction * 4), 0f);
																			this.gfxOffY = player7.gfxOffY;
																			this.velocity = Vector2.Zero;
																			player7.AddBuff(163, 59, true);
																		}
																	}
																	if (this.type == 405)
																	{
																		this.rotation = 0f;
																		for (int num1273 = 0; num1273 < 200; num1273++)
																		{
																			if (num1273 != this.whoAmI && Main.npc[num1273].active && Main.npc[num1273].type == this.type && Math.Abs(this.position.X - Main.npc[num1273].position.X) + Math.Abs(this.position.Y - Main.npc[num1273].position.Y) < (float)this.width)
																			{
																				if (this.position.X < Main.npc[num1273].position.X)
																				{
																					this.velocity.X = this.velocity.X - 0.05f;
																				}
																				else
																				{
																					this.velocity.X = this.velocity.X + 0.05f;
																				}
																				if (this.position.Y < Main.npc[num1273].position.Y)
																				{
																					this.velocity.Y = this.velocity.Y - 0.05f;
																				}
																				else
																				{
																					this.velocity.Y = this.velocity.Y + 0.05f;
																				}
																			}
																		}
																		return;
																	}
																	if (this.type == 421)
																	{
																		this.hide = (this.ai[0] == 5f);
																		this.rotation = this.velocity.X * 0.1f;
																		for (int num1274 = 0; num1274 < 200; num1274++)
																		{
																			if (num1274 != this.whoAmI && Main.npc[num1274].active && Main.npc[num1274].type == this.type && Math.Abs(this.position.X - Main.npc[num1274].position.X) + Math.Abs(this.position.Y - Main.npc[num1274].position.Y) < (float)this.width)
																			{
																				if (this.position.X < Main.npc[num1274].position.X)
																				{
																					this.velocity.X = this.velocity.X - 0.05f;
																				}
																				else
																				{
																					this.velocity.X = this.velocity.X + 0.05f;
																				}
																				if (this.position.Y < Main.npc[num1274].position.Y)
																				{
																					this.velocity.Y = this.velocity.Y - 0.05f;
																				}
																				else
																				{
																					this.velocity.Y = this.velocity.Y + 0.05f;
																				}
																			}
																		}
																		return;
																	}
																}
																else if (this.aiStyle == 86)
																{
																	if (this.alpha > 0)
																	{
																		this.alpha -= 30;
																		if (this.alpha < 0)
																		{
																			this.alpha = 0;
																		}
																	}
																	this.noGravity = true;
																	this.noTileCollide = true;
																	this.knockBackResist = 0f;
																	for (int num1275 = 0; num1275 < 200; num1275++)
																	{
																		if (num1275 != this.whoAmI && Main.npc[num1275].active && Main.npc[num1275].type == this.type)
																		{
																			Vector2 value47 = Main.npc[num1275].Center - base.Center;
																			if (value47.Length() < 50f)
																			{
																				value47.Normalize();
																				if (value47.X == 0f && value47.Y == 0f)
																				{
																					if (num1275 > this.whoAmI)
																					{
																						value47.X = 1f;
																					}
																					else
																					{
																						value47.X = -1f;
																					}
																				}
																				value47 *= 0.4f;
																				this.velocity -= value47;
																				Main.npc[num1275].velocity += value47;
																			}
																		}
																	}
																	if (this.type == 472)
																	{
																		float num1276 = 120f;
																		if (this.localAI[0] < num1276)
																		{
																			if (this.localAI[0] == 0f)
																			{
																				Main.PlaySound(SoundID.Item8, base.Center);
																				this.TargetClosest(true);
																				if (this.direction > 0)
																				{
																					this.velocity.X = this.velocity.X + 2f;
																				}
																				else
																				{
																					this.velocity.X = this.velocity.X - 2f;
																				}
																				for (int num1277 = 0; num1277 < 20; num1277++)
																				{
																					Vector2 vector201 = base.Center;
																					vector201.Y -= 18f;
																					Vector2 value48 = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
																					value48.Normalize();
																					value48 *= (float)Main.rand.Next(0, 100) * 0.1f;
																					vector201 += value48;
																					value48.Normalize();
																					value48 *= (float)Main.rand.Next(50, 90) * 0.2f;
																					int num1278 = Dust.NewDust(vector201, 1, 1, 27, 0f, 0f, 0, default(Color), 1f);
																					Main.dust[num1278].velocity = -value48 * 0.3f;
																					Main.dust[num1278].alpha = 100;
																					if (Main.rand.Next(2) == 0)
																					{
																						Main.dust[num1278].noGravity = true;
																						Main.dust[num1278].scale += 0.3f;
																					}
																				}
																			}
																			this.localAI[0] += 1f;
																			float num1279 = 1f - this.localAI[0] / num1276;
																			float num1280 = num1279 * 20f;
																			int num1281 = 0;
																			while ((float)num1281 < num1280)
																			{
																				if (Main.rand.Next(5) == 0)
																				{
																					int num1282 = Dust.NewDust(this.position, this.width, this.height, 27, 0f, 0f, 0, default(Color), 1f);
																					Main.dust[num1282].alpha = 100;
																					Main.dust[num1282].velocity *= 0.3f;
																					Main.dust[num1282].velocity += this.velocity * 0.75f;
																					Main.dust[num1282].noGravity = true;
																				}
																				num1281++;
																			}
																		}
																	}
																	if (this.type == 521)
																	{
																		float num1283 = 120f;
																		if (this.localAI[0] < num1283)
																		{
																			if (this.localAI[0] == 0f)
																			{
																				Main.PlaySound(SoundID.Item8, base.Center);
																				this.TargetClosest(true);
																				if (this.direction > 0)
																				{
																					this.velocity.X = this.velocity.X + 2f;
																				}
																				else
																				{
																					this.velocity.X = this.velocity.X - 2f;
																				}
																			}
																			this.localAI[0] += 1f;
																			int num1284 = 10;
																			for (int num1285 = 0; num1285 < 2; num1285++)
																			{
																				int num1286 = Dust.NewDust(this.position - new Vector2((float)num1284), this.width + num1284 * 2, this.height + num1284 * 2, 228, 0f, 0f, 100, default(Color), 2f);
																				Main.dust[num1286].noGravity = true;
																				Main.dust[num1286].noLight = true;
																			}
																		}
																	}
																	if (this.ai[0] == 0f)
																	{
																		this.TargetClosest(true);
																		this.ai[0] = 1f;
																		this.ai[1] = (float)this.direction;
																	}
																	else if (this.ai[0] == 1f)
																	{
																		this.TargetClosest(true);
																		float num1287 = 0.3f;
																		float num1288 = 7f;
																		float num1289 = 4f;
																		float num1290 = 660f;
																		float num1291 = 4f;
																		if (this.type == 521)
																		{
																			num1287 = 0.7f;
																			num1288 = 14f;
																			num1290 = 500f;
																			num1289 = 6f;
																			num1291 = 3f;
																		}
																		this.velocity.X = this.velocity.X + this.ai[1] * num1287;
																		if (this.velocity.X > num1288)
																		{
																			this.velocity.X = num1288;
																		}
																		if (this.velocity.X < -num1288)
																		{
																			this.velocity.X = -num1288;
																		}
																		float num1292 = Main.player[this.target].Center.Y - base.Center.Y;
																		if (Math.Abs(num1292) > num1289)
																		{
																			num1291 = 15f;
																		}
																		if (num1292 > num1289)
																		{
																			num1292 = num1289;
																		}
																		else if (num1292 < -num1289)
																		{
																			num1292 = -num1289;
																		}
																		this.velocity.Y = (this.velocity.Y * (num1291 - 1f) + num1292) / num1291;
																		if ((this.ai[1] > 0f && Main.player[this.target].Center.X - base.Center.X < -num1290) || (this.ai[1] < 0f && Main.player[this.target].Center.X - base.Center.X > num1290))
																		{
																			this.ai[0] = 2f;
																			this.ai[1] = 0f;
																			if (base.Center.Y + 20f > Main.player[this.target].Center.Y)
																			{
																				this.ai[1] = -1f;
																			}
																			else
																			{
																				this.ai[1] = 1f;
																			}
																		}
																	}
																	else if (this.ai[0] == 2f)
																	{
																		float num1293 = 0.4f;
																		float scaleFactor13 = 0.95f;
																		float num1294 = 5f;
																		if (this.type == 521)
																		{
																			num1293 = 0.3f;
																			num1294 = 7f;
																			scaleFactor13 = 0.9f;
																		}
																		this.velocity.Y = this.velocity.Y + this.ai[1] * num1293;
																		if (this.velocity.Length() > num1294)
																		{
																			this.velocity *= scaleFactor13;
																		}
																		if (this.velocity.X > -1f && this.velocity.X < 1f)
																		{
																			this.TargetClosest(true);
																			this.ai[0] = 3f;
																			this.ai[1] = (float)this.direction;
																		}
																	}
																	else if (this.ai[0] == 3f)
																	{
																		float num1295 = 0.4f;
																		float num1296 = 0.2f;
																		float num1297 = 5f;
																		float scaleFactor14 = 0.95f;
																		if (this.type == 521)
																		{
																			num1295 = 0.6f;
																			num1296 = 0.3f;
																			num1297 = 7f;
																			scaleFactor14 = 0.9f;
																		}
																		this.velocity.X = this.velocity.X + this.ai[1] * num1295;
																		if (base.Center.Y > Main.player[this.target].Center.Y)
																		{
																			this.velocity.Y = this.velocity.Y - num1296;
																		}
																		else
																		{
																			this.velocity.Y = this.velocity.Y + num1296;
																		}
																		if (this.velocity.Length() > num1297)
																		{
																			this.velocity *= scaleFactor14;
																		}
																		if (this.velocity.Y > -1f && this.velocity.Y < 1f)
																		{
																			this.TargetClosest(true);
																			this.ai[0] = 0f;
																			this.ai[1] = (float)this.direction;
																		}
																	}
																	if (this.type == 521)
																	{
																		int num1298 = 10;
																		for (int num1299 = 0; num1299 < 1; num1299++)
																		{
																			int num1300 = Dust.NewDust(this.position - new Vector2((float)num1298), this.width + num1298 * 2, this.height + num1298 * 2, 228, 0f, 0f, 100, default(Color), 2f);
																			Main.dust[num1300].noGravity = true;
																			Main.dust[num1300].noLight = true;
																		}
																		return;
																	}
																}
																else if (this.aiStyle == 87)
																{
																	this.knockBackResist = 0.2f * Main.knockBackMultiplier;
																	this.dontTakeDamage = false;
																	this.noTileCollide = false;
																	this.noGravity = false;
																	this.reflectingProjectiles = false;
																	if (this.ai[0] != 7f && Main.player[this.target].dead)
																	{
																		this.TargetClosest(true);
																		if (Main.player[this.target].dead)
																		{
																			this.ai[0] = 7f;
																			this.ai[1] = 0f;
																			this.ai[2] = 0f;
																			this.ai[3] = 0f;
																		}
																	}
																	if (this.ai[0] == 0f)
																	{
																		this.TargetClosest(true);
																		Vector2 vector202 = Main.player[this.target].Center - base.Center;
																		if (this.velocity.X != 0f || this.velocity.Y > 100f || this.justHit || vector202.Length() < 80f)
																		{
																			this.ai[0] = 1f;
																			this.ai[1] = 0f;
																			return;
																		}
																	}
																	else if (this.ai[0] == 1f)
																	{
																		this.ai[1] += 1f;
																		if (this.ai[1] > 36f)
																		{
																			this.ai[0] = 2f;
																			this.ai[1] = 0f;
																			return;
																		}
																	}
																	else if (this.ai[0] == 2f)
																	{
																		if ((Main.player[this.target].Center - base.Center).Length() > 600f)
																		{
																			this.ai[0] = 5f;
																			this.ai[1] = 0f;
																			this.ai[2] = 0f;
																			this.ai[3] = 0f;
																		}
																		if (this.velocity.Y == 0f)
																		{
																			this.TargetClosest(true);
																			this.velocity.X = this.velocity.X * 0.85f;
																			this.ai[1] += 1f;
																			float num1301 = 15f + 30f * ((float)this.life / (float)this.lifeMax);
																			float num1302 = 3f + 4f * (1f - (float)this.life / (float)this.lifeMax);
																			float num1303 = 4f;
																			if (!Collision.CanHit(base.Center, 1, 1, Main.player[this.target].Center, 1, 1))
																			{
																				num1303 += 2f;
																			}
																			if (this.ai[1] > num1301)
																			{
																				this.ai[3] += 1f;
																				if (this.ai[3] >= 3f)
																				{
																					this.ai[3] = 0f;
																					num1303 *= 2f;
																					num1302 /= 2f;
																				}
																				this.ai[1] = 0f;
																				this.velocity.Y = this.velocity.Y - num1303;
																				this.velocity.X = num1302 * (float)this.direction;
																			}
																		}
																		else
																		{
																			this.knockBackResist = 0f;
																			this.velocity.X = this.velocity.X * 0.99f;
																			if (this.direction < 0 && this.velocity.X > -1f)
																			{
																				this.velocity.X = -1f;
																			}
																			if (this.direction > 0 && this.velocity.X < 1f)
																			{
																				this.velocity.X = 1f;
																			}
																		}
																		this.ai[2] += 1f;
																		if ((double)this.ai[2] > 210.0 && this.velocity.Y == 0f && Main.netMode != 1)
																		{
																			int num1304 = Main.rand.Next(3);
																			if (num1304 == 0)
																			{
																				this.ai[0] = 3f;
																			}
																			else if (num1304 == 1)
																			{
																				this.ai[0] = 4f;
																				this.noTileCollide = true;
																				this.velocity.Y = -8f;
																			}
																			else if (num1304 == 2)
																			{
																				this.ai[0] = 6f;
																			}
																			else
																			{
																				this.ai[0] = 2f;
																			}
																			this.ai[1] = 0f;
																			this.ai[2] = 0f;
																			this.ai[3] = 0f;
																			return;
																		}
																	}
																	else if (this.ai[0] == 3f)
																	{
																		this.velocity.X = this.velocity.X * 0.85f;
																		this.dontTakeDamage = true;
																		this.ai[1] += 1f;
																		if (this.ai[1] >= 180f)
																		{
																			this.ai[0] = 2f;
																			this.ai[1] = 0f;
																		}
																		if (Main.expertMode)
																		{
																			this.ReflectProjectiles(base.Hitbox);
																			this.reflectingProjectiles = true;
																			return;
																		}
																	}
																	else if (this.ai[0] == 4f)
																	{
																		this.noTileCollide = true;
																		this.noGravity = true;
																		this.knockBackResist = 0f;
																		if (this.velocity.X < 0f)
																		{
																			this.direction = -1;
																		}
																		else
																		{
																			this.direction = 1;
																		}
																		this.spriteDirection = this.direction;
																		this.TargetClosest(true);
																		Vector2 center29 = Main.player[this.target].Center;
																		center29.Y -= 350f;
																		Vector2 vector203 = center29 - base.Center;
																		if (this.ai[2] == 1f)
																		{
																			this.ai[1] += 1f;
																			vector203 = Main.player[this.target].Center - base.Center;
																			vector203.Normalize();
																			vector203 *= 8f;
																			this.velocity = (this.velocity * 4f + vector203) / 5f;
																			if (this.ai[1] > 6f)
																			{
																				this.ai[1] = 0f;
																				this.ai[0] = 4.1f;
																				this.ai[2] = 0f;
																				this.velocity = vector203;
																				return;
																			}
																		}
																		else
																		{
																			if (Math.Abs(base.Center.X - Main.player[this.target].Center.X) < 40f && base.Center.Y < Main.player[this.target].Center.Y - 300f)
																			{
																				this.ai[1] = 0f;
																				this.ai[2] = 1f;
																				return;
																			}
																			vector203.Normalize();
																			vector203 *= 12f;
																			this.velocity = (this.velocity * 5f + vector203) / 6f;
																			return;
																		}
																	}
																	else if (this.ai[0] == 4.1f)
																	{
																		this.knockBackResist = 0f;
																		if (this.ai[2] == 0f && Collision.CanHit(base.Center, 1, 1, Main.player[this.target].Center, 1, 1) && !Collision.SolidCollision(this.position, this.width, this.height))
																		{
																			this.ai[2] = 1f;
																		}
																		if (this.position.Y + (float)this.height >= Main.player[this.target].position.Y || this.velocity.Y <= 0f)
																		{
																			this.ai[1] += 1f;
																			if (this.ai[1] > 10f)
																			{
																				this.ai[0] = 2f;
																				this.ai[1] = 0f;
																				this.ai[2] = 0f;
																				this.ai[3] = 0f;
																				if (Collision.SolidCollision(this.position, this.width, this.height))
																				{
																					this.ai[0] = 5f;
																				}
																			}
																		}
																		else if (this.ai[2] == 0f)
																		{
																			this.noTileCollide = true;
																			this.noGravity = true;
																			this.knockBackResist = 0f;
																		}
																		this.velocity.Y = this.velocity.Y + 0.2f;
																		if (this.velocity.Y > 16f)
																		{
																			this.velocity.Y = 16f;
																			return;
																		}
																	}
																	else
																	{
																		if (this.ai[0] == 5f)
																		{
																			if (this.velocity.X > 0f)
																			{
																				this.direction = 1;
																			}
																			else
																			{
																				this.direction = -1;
																			}
																			this.spriteDirection = this.direction;
																			this.noTileCollide = true;
																			this.noGravity = true;
																			this.knockBackResist = 0f;
																			Vector2 value49 = Main.player[this.target].Center - base.Center;
																			value49.Y -= 4f;
																			if (value49.Length() < 200f && !Collision.SolidCollision(this.position, this.width, this.height))
																			{
																				this.ai[0] = 2f;
																				this.ai[1] = 0f;
																				this.ai[2] = 0f;
																				this.ai[3] = 0f;
																			}
																			if (value49.Length() > 10f)
																			{
																				value49.Normalize();
																				value49 *= 10f;
																			}
																			this.velocity = (this.velocity * 4f + value49) / 5f;
																			return;
																		}
																		if (this.ai[0] == 6f)
																		{
																			this.knockBackResist = 0f;
																			if (this.velocity.Y == 0f)
																			{
																				this.TargetClosest(true);
																				this.velocity.X = this.velocity.X * 0.8f;
																				this.ai[1] += 1f;
																				if (this.ai[1] > 5f)
																				{
																					this.ai[1] = 0f;
																					this.velocity.Y = this.velocity.Y - 4f;
																					if (Main.player[this.target].position.Y + (float)Main.player[this.target].height < base.Center.Y)
																					{
																						this.velocity.Y = this.velocity.Y - 1.25f;
																					}
																					if (Main.player[this.target].position.Y + (float)Main.player[this.target].height < base.Center.Y - 40f)
																					{
																						this.velocity.Y = this.velocity.Y - 1.5f;
																					}
																					if (Main.player[this.target].position.Y + (float)Main.player[this.target].height < base.Center.Y - 80f)
																					{
																						this.velocity.Y = this.velocity.Y - 1.75f;
																					}
																					if (Main.player[this.target].position.Y + (float)Main.player[this.target].height < base.Center.Y - 120f)
																					{
																						this.velocity.Y = this.velocity.Y - 2f;
																					}
																					if (Main.player[this.target].position.Y + (float)Main.player[this.target].height < base.Center.Y - 160f)
																					{
																						this.velocity.Y = this.velocity.Y - 2.25f;
																					}
																					if (Main.player[this.target].position.Y + (float)Main.player[this.target].height < base.Center.Y - 200f)
																					{
																						this.velocity.Y = this.velocity.Y - 2.5f;
																					}
																					if (!Collision.CanHit(base.Center, 1, 1, Main.player[this.target].Center, 1, 1))
																					{
																						this.velocity.Y = this.velocity.Y - 2f;
																					}
																					this.velocity.X = (float)(12 * this.direction);
																					this.ai[2] += 1f;
																				}
																			}
																			else
																			{
																				this.velocity.X = this.velocity.X * 0.98f;
																				if (this.direction < 0 && this.velocity.X > -8f)
																				{
																					this.velocity.X = -8f;
																				}
																				if (this.direction > 0 && this.velocity.X < 8f)
																				{
																					this.velocity.X = 8f;
																				}
																			}
																			if (this.ai[2] >= 3f && this.velocity.Y == 0f)
																			{
																				this.ai[0] = 2f;
																				this.ai[1] = 0f;
																				this.ai[2] = 0f;
																				this.ai[3] = 0f;
																				return;
																			}
																		}
																		else if (this.ai[0] == 7f)
																		{
																			this.damage = 0;
																			this.life = this.lifeMax;
																			this.defense = 9999;
																			this.noTileCollide = true;
																			this.alpha += 7;
																			if (this.alpha > 255)
																			{
																				this.alpha = 255;
																			}
																			this.velocity.X = this.velocity.X * 0.98f;
																			return;
																		}
																	}
																}
																else if (this.aiStyle == 88)
																{
																	int num1305 = 7;
																	this.noTileCollide = false;
																	this.noGravity = true;
																	this.knockBackResist = 0.2f * Main.expertKnockBack;
																	this.damage = this.defDamage;
																	if (!Main.eclipse)
																	{
																		this.ai[0] = -1f;
																	}
																	else if (this.target < 0 || Main.player[this.target].dead || !Main.player[this.target].active)
																	{
																		this.TargetClosest(true);
																		Vector2 vector204 = Main.player[this.target].Center - base.Center;
																		if (Main.player[this.target].dead || vector204.Length() > 3000f)
																		{
																			this.ai[0] = -1f;
																		}
																	}
																	else
																	{
																		Vector2 vector205 = Main.player[this.target].Center - base.Center;
																		if (this.ai[0] > 1f && vector205.Length() > 1000f)
																		{
																			this.ai[0] = 1f;
																		}
																	}
																	if (this.ai[0] == -1f)
																	{
																		Vector2 value50 = new Vector2(0f, -8f);
																		this.velocity = (this.velocity * 9f + value50) / 10f;
																		this.noTileCollide = true;
																		this.dontTakeDamage = true;
																		return;
																	}
																	if (this.ai[0] == 0f)
																	{
																		this.TargetClosest(true);
																		if (base.Center.X < Main.player[this.target].Center.X - 2f)
																		{
																			this.direction = 1;
																		}
																		if (base.Center.X > Main.player[this.target].Center.X + 2f)
																		{
																			this.direction = -1;
																		}
																		this.spriteDirection = this.direction;
																		this.rotation = (this.rotation * 9f + this.velocity.X * 0.1f) / 10f;
																		if (this.collideX)
																		{
																			this.velocity.X = this.velocity.X * (-this.oldVelocity.X * 0.5f);
																			if (this.velocity.X > 4f)
																			{
																				this.velocity.X = 4f;
																			}
																			if (this.velocity.X < -4f)
																			{
																				this.velocity.X = -4f;
																			}
																		}
																		if (this.collideY)
																		{
																			this.velocity.Y = this.velocity.Y * (-this.oldVelocity.Y * 0.5f);
																			if (this.velocity.Y > 4f)
																			{
																				this.velocity.Y = 4f;
																			}
																			if (this.velocity.Y < -4f)
																			{
																				this.velocity.Y = -4f;
																			}
																		}
																		Vector2 value51 = Main.player[this.target].Center - base.Center;
																		value51.Y -= 200f;
																		if (value51.Length() > 800f)
																		{
																			this.ai[0] = 1f;
																			this.ai[1] = 0f;
																			this.ai[2] = 0f;
																			this.ai[3] = 0f;
																		}
																		else if (value51.Length() > 80f)
																		{
																			float scaleFactor15 = 6f;
																			float num1306 = 30f;
																			value51.Normalize();
																			value51 *= scaleFactor15;
																			this.velocity = (this.velocity * (num1306 - 1f) + value51) / num1306;
																		}
																		else if (this.velocity.Length() > 2f)
																		{
																			this.velocity *= 0.95f;
																		}
																		else if (this.velocity.Length() < 1f)
																		{
																			this.velocity *= 1.05f;
																		}
																		this.ai[1] += 1f;
																		if (this.justHit)
																		{
																			this.ai[1] += (float)Main.rand.Next(10, 30);
																		}
																		if (this.ai[1] >= 180f && Main.netMode != 1)
																		{
																			this.ai[1] = 0f;
																			this.ai[2] = 0f;
																			this.ai[3] = 0f;
																			this.netUpdate = true;
																			while (this.ai[0] == 0f)
																			{
																				int num1307 = Main.rand.Next(3);
																				if (num1307 == 0 && Collision.CanHit(base.Center, 1, 1, Main.player[this.target].Center, 1, 1))
																				{
																					this.ai[0] = 2f;
																				}
																				else if (num1307 == 1)
																				{
																					this.ai[0] = 3f;
																				}
																				else if (num1307 == 2 && NPC.CountNPCS(478) + NPC.CountNPCS(479) < num1305)
																				{
																					this.ai[0] = 4f;
																				}
																			}
																			return;
																		}
																	}
																	else
																	{
																		if (this.ai[0] == 1f)
																		{
																			this.collideX = false;
																			this.collideY = false;
																			this.noTileCollide = true;
																			this.knockBackResist = 0f;
																			if (this.target < 0 || !Main.player[this.target].active || Main.player[this.target].dead)
																			{
																				this.TargetClosest(true);
																			}
																			if (this.velocity.X < 0f)
																			{
																				this.direction = -1;
																			}
																			else if (this.velocity.X > 0f)
																			{
																				this.direction = 1;
																			}
																			this.spriteDirection = this.direction;
																			this.rotation = (this.rotation * 9f + this.velocity.X * 0.08f) / 10f;
																			Vector2 value52 = Main.player[this.target].Center - base.Center;
																			if (value52.Length() < 300f && !Collision.SolidCollision(this.position, this.width, this.height))
																			{
																				this.ai[0] = 0f;
																				this.ai[1] = 0f;
																				this.ai[2] = 0f;
																				this.ai[3] = 0f;
																			}
																			float scaleFactor16 = 7f + value52.Length() / 100f;
																			float num1308 = 25f;
																			value52.Normalize();
																			value52 *= scaleFactor16;
																			this.velocity = (this.velocity * (num1308 - 1f) + value52) / num1308;
																			return;
																		}
																		if (this.ai[0] == 2f)
																		{
																			this.damage = (int)((double)this.defDamage * 0.5);
																			this.knockBackResist = 0f;
																			if (this.target < 0 || !Main.player[this.target].active || Main.player[this.target].dead)
																			{
																				this.TargetClosest(true);
																				this.ai[0] = 0f;
																				this.ai[1] = 0f;
																				this.ai[2] = 0f;
																				this.ai[3] = 0f;
																			}
																			if (Main.player[this.target].Center.X - 10f < base.Center.X)
																			{
																				this.direction = -1;
																			}
																			else if (Main.player[this.target].Center.X + 10f > base.Center.X)
																			{
																				this.direction = 1;
																			}
																			this.spriteDirection = this.direction;
																			this.rotation = (this.rotation * 4f + this.velocity.X * 0.1f) / 5f;
																			if (this.collideX)
																			{
																				this.velocity.X = this.velocity.X * (-this.oldVelocity.X * 0.5f);
																				if (this.velocity.X > 4f)
																				{
																					this.velocity.X = 4f;
																				}
																				if (this.velocity.X < -4f)
																				{
																					this.velocity.X = -4f;
																				}
																			}
																			if (this.collideY)
																			{
																				this.velocity.Y = this.velocity.Y * (-this.oldVelocity.Y * 0.5f);
																				if (this.velocity.Y > 4f)
																				{
																					this.velocity.Y = 4f;
																				}
																				if (this.velocity.Y < -4f)
																				{
																					this.velocity.Y = -4f;
																				}
																			}
																			Vector2 value53 = Main.player[this.target].Center - base.Center;
																			value53.Y -= 20f;
																			this.ai[2] += 0.0222222228f;
																			if (Main.expertMode)
																			{
																				this.ai[2] += 0.0166666675f;
																			}
																			float scaleFactor17 = 4f + this.ai[2] + value53.Length() / 120f;
																			float num1309 = 20f;
																			value53.Normalize();
																			value53 *= scaleFactor17;
																			this.velocity = (this.velocity * (num1309 - 1f) + value53) / num1309;
																			this.ai[1] += 1f;
																			if (this.ai[1] > 240f || !Collision.CanHit(base.Center, 1, 1, Main.player[this.target].Center, 1, 1))
																			{
																				this.ai[0] = 0f;
																				this.ai[1] = 0f;
																				this.ai[2] = 0f;
																				this.ai[3] = 0f;
																				return;
																			}
																		}
																		else
																		{
																			if (this.ai[0] == 3f)
																			{
																				this.knockBackResist = 0f;
																				this.noTileCollide = true;
																				if (this.velocity.X < 0f)
																				{
																					this.direction = -1;
																				}
																				else
																				{
																					this.direction = 1;
																				}
																				this.spriteDirection = this.direction;
																				this.rotation = (this.rotation * 4f + this.velocity.X * 0.07f) / 5f;
																				Vector2 value54 = Main.player[this.target].Center - base.Center;
																				value54.Y -= 12f;
																				if (base.Center.X > Main.player[this.target].Center.X)
																				{
																					value54.X += 400f;
																				}
																				else
																				{
																					value54.X -= 400f;
																				}
																				if (Math.Abs(base.Center.X - Main.player[this.target].Center.X) > 350f && Math.Abs(base.Center.Y - Main.player[this.target].Center.Y) < 20f)
																				{
																					this.ai[0] = 3.1f;
																					this.ai[1] = 0f;
																				}
																				this.ai[1] += 0.0333333351f;
																				float scaleFactor18 = 8f + this.ai[1];
																				float num1310 = 4f;
																				value54.Normalize();
																				value54 *= scaleFactor18;
																				this.velocity = (this.velocity * (num1310 - 1f) + value54) / num1310;
																				return;
																			}
																			if (this.ai[0] == 3.1f)
																			{
																				this.knockBackResist = 0f;
																				this.noTileCollide = true;
																				this.rotation = (this.rotation * 4f + this.velocity.X * 0.07f) / 5f;
																				Vector2 vector206 = Main.player[this.target].Center - base.Center;
																				vector206.Y -= 12f;
																				float scaleFactor19 = 16f;
																				float num1311 = 8f;
																				vector206.Normalize();
																				vector206 *= scaleFactor19;
																				this.velocity = (this.velocity * (num1311 - 1f) + vector206) / num1311;
																				if (this.velocity.X < 0f)
																				{
																					this.direction = -1;
																				}
																				else
																				{
																					this.direction = 1;
																				}
																				this.spriteDirection = this.direction;
																				this.ai[1] += 1f;
																				if (this.ai[1] > 10f)
																				{
																					this.velocity = vector206;
																					if (this.velocity.X < 0f)
																					{
																						this.direction = -1;
																					}
																					else
																					{
																						this.direction = 1;
																					}
																					this.ai[0] = 3.2f;
																					this.ai[1] = 0f;
																					this.ai[1] = (float)this.direction;
																					return;
																				}
																			}
																			else
																			{
																				if (this.ai[0] == 3.2f)
																				{
																					this.damage = (int)((double)this.defDamage * 1.3);
																					this.collideX = false;
																					this.collideY = false;
																					this.knockBackResist = 0f;
																					this.noTileCollide = true;
																					this.ai[2] += 0.0333333351f;
																					this.velocity.X = (16f + this.ai[2]) * this.ai[1];
																					if ((this.ai[1] > 0f && base.Center.X > Main.player[this.target].Center.X + 260f) || (this.ai[1] < 0f && base.Center.X < Main.player[this.target].Center.X - 260f))
																					{
																						if (!Collision.SolidCollision(this.position, this.width, this.height))
																						{
																							this.ai[0] = 0f;
																							this.ai[1] = 0f;
																							this.ai[2] = 0f;
																							this.ai[3] = 0f;
																						}
																						else if (Math.Abs(base.Center.X - Main.player[this.target].Center.X) > 800f)
																						{
																							this.ai[0] = 1f;
																							this.ai[1] = 0f;
																							this.ai[2] = 0f;
																							this.ai[3] = 0f;
																						}
																					}
																					this.rotation = (this.rotation * 4f + this.velocity.X * 0.07f) / 5f;
																					return;
																				}
																				if (this.ai[0] == 4f)
																				{
																					this.ai[0] = 0f;
																					this.TargetClosest(true);
																					if (Main.netMode != 1)
																					{
																						this.ai[1] = -1f;
																						this.ai[2] = -1f;
																						for (int num1312 = 0; num1312 < 1000; num1312++)
																						{
																							int num1313 = (int)Main.player[this.target].Center.X / 16;
																							int num1314 = (int)Main.player[this.target].Center.Y / 16;
																							int num1315 = 30 + num1312 / 50;
																							int num1316 = 20 + num1312 / 75;
																							num1313 += Main.rand.Next(-num1315, num1315 + 1);
																							num1314 += Main.rand.Next(-num1316, num1316 + 1);
																							if (!WorldGen.SolidTile(num1313, num1314))
																							{
																								while (!WorldGen.SolidTile(num1313, num1314) && (double)num1314 < Main.worldSurface)
																								{
																									num1314++;
																								}
																								if ((new Vector2((float)(num1313 * 16 + 8), (float)(num1314 * 16 + 8)) - Main.player[this.target].Center).Length() < 600f)
																								{
																									this.ai[0] = 4.1f;
																									this.ai[1] = (float)num1313;
																									this.ai[2] = (float)num1314;
																									break;
																								}
																							}
																						}
																					}
																					this.netUpdate = true;
																					return;
																				}
																				if (this.ai[0] == 4.1f)
																				{
																					if (this.velocity.X < -2f)
																					{
																						this.direction = -1;
																					}
																					else if (this.velocity.X > 2f)
																					{
																						this.direction = 1;
																					}
																					this.spriteDirection = this.direction;
																					this.rotation = (this.rotation * 9f + this.velocity.X * 0.1f) / 10f;
																					this.noTileCollide = true;
																					int num1317 = (int)this.ai[1];
																					int num1318 = (int)this.ai[2];
																					float x2 = (float)(num1317 * 16 + 8);
																					float y2 = (float)(num1318 * 16 - 20);
																					Vector2 vector207 = new Vector2(x2, y2);
																					vector207 -= base.Center;
																					float num1319 = 6f + vector207.Length() / 150f;
																					if (num1319 > 10f)
																					{
																						num1319 = 10f;
																					}
																					float num1320 = 10f;
																					if (vector207.Length() < 10f)
																					{
																						this.ai[0] = 4.2f;
																					}
																					vector207.Normalize();
																					vector207 *= num1319;
																					this.velocity = (this.velocity * (num1320 - 1f) + vector207) / num1320;
																					return;
																				}
																				if (this.ai[0] == 4.2f)
																				{
																					this.rotation = (this.rotation * 9f + this.velocity.X * 0.1f) / 10f;
																					this.knockBackResist = 0f;
																					this.noTileCollide = true;
																					int num1321 = (int)this.ai[1];
																					int num1322 = (int)this.ai[2];
																					float x3 = (float)(num1321 * 16 + 8);
																					float y3 = (float)(num1322 * 16 - 20);
																					Vector2 vector208 = new Vector2(x3, y3);
																					vector208 -= base.Center;
																					float num1323 = 4f;
																					float num1324 = 2f;
																					if (Main.netMode != 1 && vector208.Length() < 4f)
																					{
																						int num1325 = 70;
																						if (Main.expertMode)
																						{
																							num1325 = (int)((double)num1325 * 0.75);
																						}
																						this.ai[3] += 1f;
																						if (this.ai[3] == (float)num1325)
																						{
																							NPC.NewNPC(num1321 * 16 + 8, num1322 * 16, 478, this.whoAmI, 0f, 0f, 0f, 0f, 255);
																						}
																						else if (this.ai[3] == (float)(num1325 * 2))
																						{
																							this.ai[0] = 0f;
																							this.ai[1] = 0f;
																							this.ai[2] = 0f;
																							this.ai[3] = 0f;
																							if (NPC.CountNPCS(478) + NPC.CountNPCS(479) < num1305 && Main.rand.Next(3) != 0)
																							{
																								this.ai[0] = 4f;
																							}
																							else if (Collision.SolidCollision(this.position, this.width, this.height))
																							{
																								this.ai[0] = 1f;
																							}
																						}
																					}
																					if (vector208.Length() > num1323)
																					{
																						vector208.Normalize();
																						vector208 *= num1323;
																					}
																					this.velocity = (this.velocity * (num1324 - 1f) + vector208) / num1324;
																					return;
																				}
																			}
																		}
																	}
																}
																else if (this.aiStyle == 89)
																{
																	if (this.velocity.Y == 0f)
																	{
																		this.velocity.X = this.velocity.X * 0.9f;
																		this.rotation += this.velocity.X * 0.02f;
																	}
																	else
																	{
																		this.velocity.X = this.velocity.X * 0.99f;
																		this.rotation += this.velocity.X * 0.04f;
																	}
																	int num1326 = 900;
																	if (Main.expertMode)
																	{
																		num1326 = 600;
																	}
																	if (this.justHit)
																	{
																		this.ai[0] -= (float)Main.rand.Next(10, 21);
																		if (!Main.expertMode)
																		{
																			this.ai[0] -= (float)Main.rand.Next(10, 21);
																		}
																	}
																	this.ai[0] += 1f;
																	if (this.ai[0] >= (float)num1326)
																	{
																		this.Transform(479);
																	}
																	if (Main.netMode != 1 && this.velocity.Y == 0f && (double)Math.Abs(this.velocity.X) < 0.2 && (double)this.ai[0] >= (double)num1326 * 0.75)
																	{
																		float num1327 = this.ai[0] - (float)num1326 * 0.75f;
																		num1327 /= (float)num1326 * 0.25f;
																		if ((float)Main.rand.Next(-10, 120) < num1327 * 100f)
																		{
																			this.velocity.Y = this.velocity.Y - (float)Main.rand.Next(20, 40) * 0.025f;
																			this.velocity.X = this.velocity.X + (float)Main.rand.Next(-20, 20) * 0.025f;
																			this.velocity *= 1f + num1327 * 2f;
																			this.netUpdate = true;
																			return;
																		}
																	}
																}
																else if (this.aiStyle == 90)
																{
																	this.noTileCollide = false;
																	this.knockBackResist = 0.4f * Main.knockBackMultiplier;
																	this.noGravity = true;
																	this.rotation = (this.rotation * 9f + this.velocity.X * 0.1f) / 10f;
																	if (!Main.eclipse)
																	{
																		if (this.timeLeft > 5)
																		{
																			this.timeLeft = 5;
																		}
																		this.velocity.Y = this.velocity.Y - 0.2f;
																		if (this.velocity.Y < -8f)
																		{
																			this.velocity.Y = -8f;
																		}
																		this.noTileCollide = true;
																		return;
																	}
																	if (this.ai[0] == 0f || this.ai[0] == 1f)
																	{
																		for (int num1328 = 0; num1328 < 200; num1328++)
																		{
																			if (num1328 != this.whoAmI && Main.npc[num1328].active && Main.npc[num1328].type == this.type)
																			{
																				Vector2 value55 = Main.npc[num1328].Center - base.Center;
																				if (value55.Length() < (float)(this.width + this.height))
																				{
																					value55.Normalize();
																					value55 *= -0.1f;
																					this.velocity += value55;
																					Main.npc[num1328].velocity -= value55;
																				}
																			}
																		}
																	}
																	if (this.target < 0 || Main.player[this.target].dead || !Main.player[this.target].active)
																	{
																		this.TargetClosest(true);
																		Vector2 vector209 = Main.player[this.target].Center - base.Center;
																		if (Main.player[this.target].dead || vector209.Length() > 3000f)
																		{
																			this.ai[0] = -1f;
																		}
																	}
																	else
																	{
																		Vector2 vector210 = Main.player[this.target].Center - base.Center;
																		if (this.ai[0] > 1f && vector210.Length() > 1000f)
																		{
																			this.ai[0] = 1f;
																		}
																	}
																	if (this.ai[0] == -1f)
																	{
																		Vector2 value56 = new Vector2(0f, -8f);
																		this.velocity = (this.velocity * 9f + value56) / 10f;
																		this.noTileCollide = true;
																		this.dontTakeDamage = true;
																		return;
																	}
																	if (this.ai[0] == 0f)
																	{
																		this.TargetClosest(true);
																		this.spriteDirection = this.direction;
																		if (this.collideX)
																		{
																			this.velocity.X = this.velocity.X * (-this.oldVelocity.X * 0.5f);
																			if (this.velocity.X > 4f)
																			{
																				this.velocity.X = 4f;
																			}
																			if (this.velocity.X < -4f)
																			{
																				this.velocity.X = -4f;
																			}
																		}
																		if (this.collideY)
																		{
																			this.velocity.Y = this.velocity.Y * (-this.oldVelocity.Y * 0.5f);
																			if (this.velocity.Y > 4f)
																			{
																				this.velocity.Y = 4f;
																			}
																			if (this.velocity.Y < -4f)
																			{
																				this.velocity.Y = -4f;
																			}
																		}
																		Vector2 value57 = Main.player[this.target].Center - base.Center;
																		if (value57.Length() > 800f)
																		{
																			this.ai[0] = 1f;
																			this.ai[1] = 0f;
																			this.ai[2] = 0f;
																			this.ai[3] = 0f;
																		}
																		else if (value57.Length() > 200f)
																		{
																			float scaleFactor20 = 5.5f + value57.Length() / 100f + this.ai[1] / 15f;
																			float num1329 = 40f;
																			value57.Normalize();
																			value57 *= scaleFactor20;
																			this.velocity = (this.velocity * (num1329 - 1f) + value57) / num1329;
																		}
																		else if (this.velocity.Length() > 2f)
																		{
																			this.velocity *= 0.95f;
																		}
																		else if (this.velocity.Length() < 1f)
																		{
																			this.velocity *= 1.05f;
																		}
																		this.ai[1] += 1f;
																		if (this.ai[1] >= 90f)
																		{
																			this.ai[1] = 0f;
																			this.ai[0] = 2f;
																			return;
																		}
																	}
																	else
																	{
																		if (this.ai[0] == 1f)
																		{
																			this.collideX = false;
																			this.collideY = false;
																			this.noTileCollide = true;
																			this.knockBackResist = 0f;
																			if (this.target < 0 || !Main.player[this.target].active || Main.player[this.target].dead)
																			{
																				this.TargetClosest(true);
																			}
																			if (this.velocity.X < 0f)
																			{
																				this.direction = -1;
																			}
																			else if (this.velocity.X > 0f)
																			{
																				this.direction = 1;
																			}
																			this.spriteDirection = this.direction;
																			this.rotation = (this.rotation * 9f + this.velocity.X * 0.08f) / 10f;
																			Vector2 value58 = Main.player[this.target].Center - base.Center;
																			if (value58.Length() < 300f && !Collision.SolidCollision(this.position, this.width, this.height))
																			{
																				this.ai[0] = 0f;
																				this.ai[1] = 0f;
																				this.ai[2] = 0f;
																				this.ai[3] = 0f;
																			}
																			this.ai[2] += 0.0166666675f;
																			float scaleFactor21 = 5.5f + this.ai[2] + value58.Length() / 150f;
																			float num1330 = 35f;
																			value58.Normalize();
																			value58 *= scaleFactor21;
																			this.velocity = (this.velocity * (num1330 - 1f) + value58) / num1330;
																			return;
																		}
																		if (this.ai[0] == 2f)
																		{
																			if (this.velocity.X < 0f)
																			{
																				this.direction = -1;
																			}
																			else if (this.velocity.X > 0f)
																			{
																				this.direction = 1;
																			}
																			this.spriteDirection = this.direction;
																			this.rotation = (this.rotation * 7f + this.velocity.X * 0.1f) / 8f;
																			this.knockBackResist = 0f;
																			this.noTileCollide = true;
																			Vector2 vector211 = Main.player[this.target].Center - base.Center;
																			vector211.Y -= 8f;
																			float scaleFactor22 = 9f;
																			float num1331 = 8f;
																			vector211.Normalize();
																			vector211 *= scaleFactor22;
																			this.velocity = (this.velocity * (num1331 - 1f) + vector211) / num1331;
																			if (this.velocity.X < 0f)
																			{
																				this.direction = -1;
																			}
																			else
																			{
																				this.direction = 1;
																			}
																			this.spriteDirection = this.direction;
																			this.ai[1] += 1f;
																			if (this.ai[1] > 10f)
																			{
																				this.velocity = vector211;
																				if (this.velocity.X < 0f)
																				{
																					this.direction = -1;
																				}
																				else
																				{
																					this.direction = 1;
																				}
																				this.ai[0] = 2.1f;
																				this.ai[1] = 0f;
																				return;
																			}
																		}
																		else if (this.ai[0] == 2.1f)
																		{
																			if (this.velocity.X < 0f)
																			{
																				this.direction = -1;
																			}
																			else if (this.velocity.X > 0f)
																			{
																				this.direction = 1;
																			}
																			this.spriteDirection = this.direction;
																			this.velocity *= 1.01f;
																			this.knockBackResist = 0f;
																			this.noTileCollide = true;
																			this.ai[1] += 1f;
																			int num1332 = 45;
																			if (this.ai[1] > (float)num1332)
																			{
																				if (!Collision.SolidCollision(this.position, this.width, this.height))
																				{
																					this.ai[0] = 0f;
																					this.ai[1] = 0f;
																					this.ai[2] = 0f;
																					return;
																				}
																				if (this.ai[1] > (float)(num1332 * 2))
																				{
																					this.ai[0] = 1f;
																					this.ai[1] = 0f;
																					this.ai[2] = 0f;
																					return;
																				}
																			}
																		}
																	}
																}
																else if (this.aiStyle == 91)
																{
																	this.noGravity = true;
																	this.noTileCollide = false;
																	this.dontTakeDamage = false;
																	if (this.justHit && Main.netMode != 1 && Main.expertMode && Main.rand.Next(6) == 0)
																	{
																		this.netUpdate = true;
																		this.ai[0] = -1f;
																		this.ai[1] = 0f;
																	}
																	if (this.ai[0] == -1f)
																	{
																		this.dontTakeDamage = true;
																		this.noGravity = false;
																		this.velocity.X = this.velocity.X * 0.98f;
																		this.ai[1] += 1f;
																		if (this.ai[1] >= 120f)
																		{
																			this.ai[0] = (this.ai[1] = (this.ai[2] = (this.ai[3] = 0f)));
																			return;
																		}
																	}
																	else if (this.ai[0] == 0f)
																	{
																		this.TargetClosest(true);
																		if (Collision.CanHit(base.Center, 1, 1, Main.player[this.target].Center, 1, 1))
																		{
																			this.ai[0] = 1f;
																			return;
																		}
																		Vector2 value59 = Main.player[this.target].Center - base.Center;
																		value59.Y -= (float)(Main.player[this.target].height / 4);
																		float num1333 = value59.Length();
																		if (num1333 > 800f)
																		{
																			this.ai[0] = 2f;
																			return;
																		}
																		Vector2 center30 = base.Center;
																		center30.X = Main.player[this.target].Center.X;
																		Vector2 vector212 = center30 - base.Center;
																		if (vector212.Length() > 8f && Collision.CanHit(base.Center, 1, 1, center30, 1, 1))
																		{
																			this.ai[0] = 3f;
																			this.ai[1] = center30.X;
																			this.ai[2] = center30.Y;
																			Vector2 center31 = base.Center;
																			center31.Y = Main.player[this.target].Center.Y;
																			if (vector212.Length() > 8f && Collision.CanHit(base.Center, 1, 1, center31, 1, 1) && Collision.CanHit(center31, 1, 1, Main.player[this.target].position, 1, 1))
																			{
																				this.ai[0] = 3f;
																				this.ai[1] = center31.X;
																				this.ai[2] = center31.Y;
																			}
																		}
																		else
																		{
																			center30 = base.Center;
																			center30.Y = Main.player[this.target].Center.Y;
																			if ((center30 - base.Center).Length() > 8f && Collision.CanHit(base.Center, 1, 1, center30, 1, 1))
																			{
																				this.ai[0] = 3f;
																				this.ai[1] = center30.X;
																				this.ai[2] = center30.Y;
																			}
																		}
																		if (this.ai[0] == 0f)
																		{
																			this.localAI[0] = 0f;
																			value59.Normalize();
																			value59 *= 0.5f;
																			this.velocity += value59;
																			this.ai[0] = 4f;
																			this.ai[1] = 0f;
																			return;
																		}
																	}
																	else if (this.ai[0] == 1f)
																	{
																		Vector2 value60 = Main.player[this.target].Center - base.Center;
																		float num1334 = value60.Length();
																		float num1335 = 2f;
																		num1335 += num1334 / 200f;
																		int num1336 = 50;
																		value60.Normalize();
																		value60 *= num1335;
																		this.velocity = (this.velocity * (float)(num1336 - 1) + value60) / (float)num1336;
																		if (!Collision.CanHit(base.Center, 1, 1, Main.player[this.target].Center, 1, 1))
																		{
																			this.ai[0] = 0f;
																			this.ai[1] = 0f;
																			return;
																		}
																	}
																	else if (this.ai[0] == 2f)
																	{
																		this.noTileCollide = true;
																		Vector2 value61 = Main.player[this.target].Center - base.Center;
																		float num1337 = value61.Length();
																		float scaleFactor23 = 2f;
																		int num1338 = 4;
																		value61.Normalize();
																		value61 *= scaleFactor23;
																		this.velocity = (this.velocity * (float)(num1338 - 1) + value61) / (float)num1338;
																		if (num1337 < 600f && !Collision.SolidCollision(this.position, this.width, this.height))
																		{
																			this.ai[0] = 0f;
																			return;
																		}
																	}
																	else if (this.ai[0] == 3f)
																	{
																		Vector2 value62 = new Vector2(this.ai[1], this.ai[2]);
																		Vector2 value63 = value62 - base.Center;
																		float num1339 = value63.Length();
																		float num1340 = 1f;
																		float num1341 = 3f;
																		value63.Normalize();
																		value63 *= num1340;
																		this.velocity = (this.velocity * (num1341 - 1f) + value63) / num1341;
																		if (this.collideX || this.collideY)
																		{
																			this.ai[0] = 4f;
																			this.ai[1] = 0f;
																		}
																		if (num1339 < num1340 || num1339 > 800f || Collision.CanHit(base.Center, 1, 1, Main.player[this.target].Center, 1, 1))
																		{
																			this.ai[0] = 0f;
																			return;
																		}
																	}
																	else if (this.ai[0] == 4f)
																	{
																		if (this.collideX)
																		{
																			this.velocity.X = this.velocity.X * -0.8f;
																		}
																		if (this.collideY)
																		{
																			this.velocity.Y = this.velocity.Y * -0.8f;
																		}
																		Vector2 value64;
																		if (this.velocity.X == 0f && this.velocity.Y == 0f)
																		{
																			value64 = Main.player[this.target].Center - base.Center;
																			value64.Y -= (float)(Main.player[this.target].height / 4);
																			value64.Normalize();
																			this.velocity = value64 * 0.1f;
																		}
																		float scaleFactor24 = 1.5f;
																		float num1342 = 20f;
																		value64 = this.velocity;
																		value64.Normalize();
																		value64 *= scaleFactor24;
																		this.velocity = (this.velocity * (num1342 - 1f) + value64) / num1342;
																		this.ai[1] += 1f;
																		if (this.ai[1] > 180f)
																		{
																			this.ai[0] = 0f;
																			this.ai[1] = 0f;
																		}
																		if (Collision.CanHit(base.Center, 1, 1, Main.player[this.target].Center, 1, 1))
																		{
																			this.ai[0] = 0f;
																		}
																		this.localAI[0] += 1f;
																		if (this.localAI[0] >= 5f && !Collision.SolidCollision(this.position - new Vector2(10f, 10f), this.width + 20, this.height + 20))
																		{
																			this.localAI[0] = 0f;
																			Vector2 center32 = base.Center;
																			center32.X = Main.player[this.target].Center.X;
																			if (Collision.CanHit(base.Center, 1, 1, center32, 1, 1) && Collision.CanHit(base.Center, 1, 1, center32, 1, 1) && Collision.CanHit(Main.player[this.target].Center, 1, 1, center32, 1, 1))
																			{
																				this.ai[0] = 3f;
																				this.ai[1] = center32.X;
																				this.ai[2] = center32.Y;
																				return;
																			}
																			center32 = base.Center;
																			center32.Y = Main.player[this.target].Center.Y;
																			if (Collision.CanHit(base.Center, 1, 1, center32, 1, 1) && Collision.CanHit(Main.player[this.target].Center, 1, 1, center32, 1, 1))
																			{
																				this.ai[0] = 3f;
																				this.ai[1] = center32.X;
																				this.ai[2] = center32.Y;
																				return;
																			}
																		}
																	}
																}
																else if (this.aiStyle == 92)
																{
																	if (Main.rand.Next(20) == 0)
																	{
																		switch (Main.rand.Next(15, 18))
																		{
																		case 15:
																			this.HitSound = SoundID.NPCHit15;
																			break;
																		case 16:
																			this.HitSound = SoundID.NPCHit16;
																			break;
																		case 17:
																			this.HitSound = SoundID.NPCHit17;
																			break;
																		}
																	}
																	if (Main.netMode != 1)
																	{
																		bool flag95 = false;
																		int num1343 = (int)this.ai[0];
																		int num1344 = (int)this.ai[1];
																		if (!flag95 && (!Main.tile[num1343, num1344].active() || Main.tile[num1343, num1344].type != 378))
																		{
																			flag95 = true;
																		}
																		if (!flag95 && (this.target == 255 || Main.player[this.target].dead || Vector2.Distance(base.Center, Main.player[this.target].Center) > 160000f))
																		{
																			this.TargetClosest(false);
																			if (this.target == 255 || Main.player[this.target].dead || Vector2.Distance(base.Center, Main.player[this.target].Center) > 160000f)
																			{
																				flag95 = true;
																			}
																		}
																		if (flag95)
																		{
																			this.life = 0;
																			this.HitEffect(0, 10.0);
																			this.active = false;
																			int num1345 = TETrainingDummy.Find((int)this.ai[0], (int)this.ai[1]);
																			if (num1345 != -1)
																			{
																				((TETrainingDummy)TileEntity.ByID[num1345]).Deactivate();
																			}
																			return;
																		}
																	}
																}
																else if (this.aiStyle == 93)
																{
																	if (this.localAI[0] == 0f)
																	{
																		this.localAI[0] = 1f;
																		for (int num1346 = 0; num1346 < 4; num1346++)
																		{
																			int num1347 = NPC.NewNPC((int)base.Center.X + num1346 * 40 - 150, (int)base.Center.Y, 492, this.whoAmI, 0f, 0f, 0f, 0f, 255);
																			Main.npc[num1347].netUpdate = true;
																			Main.npc[num1347].ai[0] = (float)this.whoAmI;
																			Main.npc[num1347].ai[1] = (float)num1346;
																			Main.npc[num1347].ai[3] = (float)(60 * num1346);
																			Main.npc[num1347].TargetClosest(false);
																			Main.npc[num1347].timeLeft = 600;
																			this.ai[num1346] = (float)num1347;
																		}
																	}
																	bool flag96 = true;
																	for (int num1348 = 0; num1348 < 4; num1348++)
																	{
																		if (this.ai[num1348] >= 0f && (!Main.npc[(int)this.ai[num1348]].active || Main.npc[(int)this.ai[num1348]].type != 492))
																		{
																			this.ai[num1348] = -1f;
																			this.netUpdate = true;
																		}
																		else if (this.ai[num1348] >= 0f)
																		{
																			flag96 = false;
																		}
																	}
																	if (flag96)
																	{
																		this.life = 0;
																		this.HitEffect(9999, 10.0);
																		this.checkDead();
																		return;
																	}
																	if (Main.netMode != 1 && Main.rand.Next(300) == 0)
																	{
																		Vector2 value65 = new Vector2((Main.rand.NextFloat() - 0.5f) * (float)(this.width - 70), (Main.rand.NextFloat() - 0.5f) * 20f - (float)(this.height / 2) - 20f).RotatedBy((double)this.rotation, default(Vector2));
																		value65 += base.Center;
																		int num1349 = NPC.NewNPC((int)value65.X, (int)value65.Y, Utils.SelectRandom<int>(Main.rand, new int[]
																		{
																			213,
																			215,
																			214,
																			212
																		}), 0, 0f, 0f, 0f, 0f, 255);
																		Main.npc[num1349].velocity = new Vector2((Main.rand.NextFloat() - 0.5f) * 5f, -8.01f) + this.velocity;
																		Main.npc[num1349].netUpdate = true;
																		Main.npc[num1349].timeLeft = 600;
																	}
																	if ((this.localAI[3] += 1f) >= 64f)
																	{
																		this.localAI[3] = 0f;
																	}
																	this.TargetClosest(true);
																	int num1350 = (int)base.Center.X / 16 + Math.Sign(this.velocity.X) * 10;
																	int num1351 = (int)(this.position.Y + (float)this.height) / 16;
																	int num1352 = 0;
																	bool flag97 = Main.tile[num1350, num1351].nactive() && Main.tileSolid[(int)Main.tile[num1350, num1351].type] && !Main.tileSolidTop[(int)Main.tile[num1350, num1351].type];
																	if (flag97)
																	{
																		num1352 = 1;
																	}
																	else
																	{
																		while (num1352 < 150 && num1351 + num1352 < Main.maxTilesY)
																		{
																			int num1353 = num1351 + num1352;
																			bool flag98 = Main.tile[num1350, num1353].nactive() && Main.tileSolid[(int)Main.tile[num1350, num1353].type] && !Main.tileSolidTop[(int)Main.tile[num1350, num1353].type];
																			if (flag98)
																			{
																				num1352--;
																				break;
																			}
																			num1352++;
																		}
																	}
																	float num1354 = (float)(num1352 * 16);
																	if (num1354 < 350f)
																	{
																		float num1355 = num1354 - 350f;
																		if (num1355 < -4f)
																		{
																			num1355 = -4f;
																		}
																		this.velocity.Y = MathHelper.Lerp(this.velocity.Y, num1355, 0.05f);
																	}
																	else if (num1354 > 450f)
																	{
																		float num1356 = num1354 - 350f;
																		if (num1356 > 4f)
																		{
																			num1356 = 4f;
																		}
																		this.velocity.Y = MathHelper.Lerp(this.velocity.Y, num1356, 0.05f);
																	}
																	else
																	{
																		this.velocity.Y = this.velocity.Y * 0.95f;
																	}
																	float num1357 = Main.player[this.target].Center.X - base.Center.X;
																	if (Math.Abs(num1357) >= 300f && (Math.Abs(this.velocity.X) < 6f || Math.Sign(this.velocity.X) != this.direction))
																	{
																		this.velocity.X = this.velocity.X + (float)this.direction * 0.06f;
																	}
																	this.rotation = this.velocity.X * 0.025f;
																	this.spriteDirection = -Math.Sign(this.velocity.X);
																	for (int num1358 = 0; num1358 < 2; num1358++)
																	{
																		if (Main.rand.Next(2) != 0)
																		{
																			Vector2 value66 = new Vector2((Main.rand.NextFloat() - 0.5f) * (float)(this.width - 70), (Main.rand.NextFloat() - 0.5f) * 20f + (float)(this.height / 2) + 10f).RotatedBy((double)this.rotation, default(Vector2));
																			Dust dust3 = Main.dust[Dust.NewDust(base.Center, 0, 0, 228, 0f, 0f, 0, default(Color), 1f)];
																			dust3.position = base.Center + value66;
																			dust3.velocity = Vector2.Zero;
																			dust3.noGravity = true;
																			dust3.noLight = true;
																			dust3.fadeIn = 1.5f;
																			dust3.scale = 0.5f;
																		}
																	}
																	return;
																}
																else if (this.aiStyle == 94)
																{
																	int num1360;
																	if (this.ai[2] == 1f)
																	{
																		this.velocity = Vector2.UnitY * this.velocity.Length();
																		if (this.velocity.Y < 0.25f)
																		{
																			this.velocity.Y = this.velocity.Y + 0.02f;
																		}
																		if (this.velocity.Y > 0.25f)
																		{
																			this.velocity.Y = this.velocity.Y - 0.02f;
																		}
																		this.dontTakeDamage = true;
																		this.ai[1] += 1f;
																		if (this.ai[1] > 120f)
																		{
																			this.Opacity = 1f - (this.ai[1] - 120f) / 60f;
																		}
																		int num1359 = 6;
																		num1360 = this.type;
																		if (num1360 <= 493)
																		{
																			if (num1360 != 422)
																			{
																				if (num1360 == 493)
																				{
																					num1359 = 135;
																				}
																			}
																			else
																			{
																				num1359 = 229;
																			}
																		}
																		else if (num1360 != 507)
																		{
																			if (num1360 == 517)
																			{
																				num1359 = 127;
																			}
																		}
																		else
																		{
																			num1359 = 242;
																		}
																		if (Main.rand.Next(5) == 0 && this.ai[1] < 120f)
																		{
																			for (int num1361 = 0; num1361 < 3; num1361++)
																			{
																				Dust dust4 = Main.dust[Dust.NewDust(base.Left, this.width, this.height / 2, num1359, 0f, 0f, 0, default(Color), 1f)];
																				dust4.position = base.Center + Vector2.UnitY.RotatedByRandom(4.1887903213500977) * new Vector2((float)this.width * 1.5f, (float)this.height * 1.1f) * 0.8f * (0.8f + Main.rand.NextFloat() * 0.2f);
																				dust4.velocity.X = 0f;
																				dust4.velocity.Y = -Math.Abs(dust4.velocity.Y - (float)num1361 + this.velocity.Y - 4f) * 3f;
																				dust4.noGravity = true;
																				dust4.fadeIn = 1f;
																				dust4.scale = 1f + Main.rand.NextFloat() + (float)num1361 * 0.3f;
																			}
																		}
																		if (this.ai[1] < 150f)
																		{
																			for (int num1362 = 0; num1362 < 3; num1362++)
																			{
																				if (Main.rand.Next(4) == 0)
																				{
																					Dust dust5 = Main.dust[Dust.NewDust(base.Top + new Vector2((float)(-(float)this.width) * (0.33f - 0.11f * (float)num1362), -20f), (int)((float)this.width * (0.66f - 0.22f * (float)num1362)), 20, num1359, 0f, 0f, 0, default(Color), 1f)];
																					dust5.velocity.X = 0f;
																					dust5.velocity.Y = -Math.Abs(dust5.velocity.Y - (float)num1362 + this.velocity.Y - 4f) * (1f + this.ai[1] / 180f * 0.5f);
																					dust5.noGravity = true;
																					dust5.fadeIn = 1f;
																					dust5.scale = 1f + Main.rand.NextFloat() + (float)num1362 * 0.3f;
																				}
																			}
																		}
																		if (Main.rand.Next(5) == 0 && this.ai[1] < 150f)
																		{
																			for (int num1363 = 0; num1363 < 3; num1363++)
																			{
																				Vector2 position6 = base.Center + Vector2.UnitY.RotatedByRandom(4.1887903213500977) * new Vector2((float)this.width, (float)this.height) * 0.7f * Main.rand.NextFloat();
																				float num1364 = 1f + Main.rand.NextFloat() * 2f + this.ai[1] / 180f * 4f;
																				for (int num1365 = 0; num1365 < 6; num1365++)
																				{
																					Dust dust6 = Main.dust[Dust.NewDust(position6, 4, 4, num1359, 0f, 0f, 0, default(Color), 1f)];
																					dust6.position = position6;
																					Dust expr_41952_cp_0 = dust6;
																					expr_41952_cp_0.velocity.X = expr_41952_cp_0.velocity.X * num1364;
																					dust6.velocity.Y = -Math.Abs(dust6.velocity.Y) * num1364;
																					dust6.noGravity = true;
																					dust6.fadeIn = 1f;
																					dust6.scale = 1.5f + Main.rand.NextFloat() + (float)num1365 * 0.13f;
																				}
																				Main.PlaySound(3, position6, Utils.SelectRandom<int>(Main.rand, new int[]
																				{
																					1,
																					18
																				}));
																			}
																		}
																		if (Main.rand.Next(3) != 0 && this.ai[1] < 150f)
																		{
																			Dust dust7 = Main.dust[Dust.NewDust(base.Left, this.width, this.height / 2, 241, 0f, 0f, 0, default(Color), 1f)];
																			dust7.position = base.Center + Vector2.UnitY.RotatedByRandom(4.1887903213500977) * new Vector2((float)(this.width / 2), (float)(this.height / 2)) * (0.8f + Main.rand.NextFloat() * 0.2f);
																			dust7.velocity.X = 0f;
																			dust7.velocity.Y = Math.Abs(dust7.velocity.Y) * 0.25f;
																		}
																		if (this.ai[1] % 60f == 1f)
																		{
																			Main.PlaySound(4, base.Center, 22);
																		}
																		if (this.ai[1] >= 180f)
																		{
																			this.life = 0;
																			this.HitEffect(0, 1337.0);
																			this.checkDead();
																		}
																		return;
																	}
																	if (this.ai[3] > 0f)
																	{
																		bool flag99 = this.dontTakeDamage;
																		num1360 = this.type;
																		if (num1360 <= 493)
																		{
																			if (num1360 != 422)
																			{
																				if (num1360 == 493)
																				{
																					flag99 = (NPC.ShieldStrengthTowerStardust != 0);
																				}
																			}
																			else
																			{
																				flag99 = (NPC.ShieldStrengthTowerVortex != 0);
																			}
																		}
																		else if (num1360 != 507)
																		{
																			if (num1360 == 517)
																			{
																				flag99 = (NPC.ShieldStrengthTowerSolar != 0);
																			}
																		}
																		else
																		{
																			flag99 = (NPC.ShieldStrengthTowerNebula != 0);
																		}
																		if (flag99 != this.dontTakeDamage)
																		{
																			Main.PlaySound(SoundID.NPCDeath58, this.position);
																		}
																		else if (this.ai[3] == 1f)
																		{
																			Main.PlaySound(SoundID.NPCDeath3, this.position);
																		}
																		this.ai[3] += 1f;
																		if (this.ai[3] > 120f)
																		{
																			this.ai[3] = 0f;
																		}
																	}
																	num1360 = this.type;
																	if (num1360 <= 493)
																	{
																		if (num1360 != 422)
																		{
																			if (num1360 == 493)
																			{
																				this.dontTakeDamage = (NPC.ShieldStrengthTowerStardust != 0);
																			}
																		}
																		else
																		{
																			this.dontTakeDamage = (NPC.ShieldStrengthTowerVortex != 0);
																		}
																	}
																	else if (num1360 != 507)
																	{
																		if (num1360 == 517)
																		{
																			this.dontTakeDamage = (NPC.ShieldStrengthTowerSolar != 0);
																		}
																	}
																	else
																	{
																		this.dontTakeDamage = (NPC.ShieldStrengthTowerNebula != 0);
																	}
																	this.TargetClosest(false);
																	if (Main.player[this.target].Distance(base.Center) > 2000f)
																	{
																		this.localAI[0] += 1f;
																	}
																	if (this.localAI[0] >= 60f && Main.netMode != 1)
																	{
																		this.localAI[0] = 0f;
																		this.netUpdate = true;
																		this.life = (int)MathHelper.Clamp((float)(this.life + 200), 0f, (float)this.lifeMax);
																	}
																	else
																	{
																		this.localAI[0] = 0f;
																	}
																	this.velocity = new Vector2(0f, (float)Math.Sin((double)(6.28318548f * this.ai[0] / 300f)) * 0.5f);
																	if ((double)base.Bottom.Y > Main.worldSurface * 16.0 - 100.0)
																	{
																		this.position.Y = (float)Main.worldSurface * 16f - (float)this.height - 100f;
																	}
																	this.ai[0] += 1f;
																	if (this.ai[0] >= 300f)
																	{
																		this.ai[0] = 0f;
																		this.netUpdate = true;
																	}
																	if (this.type == 493)
																	{
																		if (Main.rand.Next(5) == 0)
																		{
																			Dust dust8 = Main.dust[Dust.NewDust(base.Left, this.width, this.height / 2, 241, 0f, 0f, 0, default(Color), 1f)];
																			dust8.position = base.Center + Vector2.UnitY.RotatedByRandom(2.0943951606750488) * new Vector2((float)(this.width / 2), (float)(this.height / 2)) * (0.8f + Main.rand.NextFloat() * 0.2f);
																			dust8.velocity.X = 0f;
																			dust8.velocity.Y = Math.Abs(dust8.velocity.Y) * 0.25f;
																		}
																		for (int num1366 = 0; num1366 < 3; num1366++)
																		{
																			if (Main.rand.Next(5) == 0)
																			{
																				Dust dust9 = Main.dust[Dust.NewDust(base.Top + new Vector2((float)(-(float)this.width) * (0.33f - 0.11f * (float)num1366), -20f), (int)((float)this.width * (0.66f - 0.22f * (float)num1366)), 20, 135, 0f, 0f, 0, default(Color), 1f)];
																				dust9.velocity.X = 0f;
																				dust9.velocity.Y = -Math.Abs(dust9.velocity.Y - (float)num1366 + this.velocity.Y - 4f) * 1f;
																				dust9.noGravity = true;
																				dust9.fadeIn = 1f;
																				dust9.scale = 1f + Main.rand.NextFloat() + (float)num1366 * 0.3f;
																			}
																		}
																		if (this.ai[1] > 0f)
																		{
																			this.ai[1] -= 1f;
																		}
																		if (Main.netMode != 1 && this.ai[1] <= 0f && Main.player[this.target].active && !Main.player[this.target].dead && base.Distance(Main.player[this.target].Center) < 1080f && Main.player[this.target].position.Y - this.position.Y < 400f)
																		{
																			List<int> list = new List<int>();
																			if (NPC.CountNPCS(405) + NPC.CountNPCS(406) < 2)
																			{
																				list.Add(405);
																			}
																			if (NPC.CountNPCS(402) < 2)
																			{
																				list.Add(402);
																			}
																			if (NPC.CountNPCS(407) < 1)
																			{
																				list.Add(407);
																			}
																			if (list.Count > 0)
																			{
																				int num1367 = Utils.SelectRandom<int>(Main.rand, list.ToArray());
																				this.ai[1] = (float)(30 * Main.rand.Next(5, 16));
																				int num1368 = Main.rand.Next(3, 6);
																				int num1369 = Main.rand.Next(0, 4);
																				int num1370 = 0;
																				List<Tuple<Vector2, int, int>> list2 = new List<Tuple<Vector2, int, int>>();
																				List<Vector2> list3 = new List<Vector2>();
																				list2.Add(Tuple.Create<Vector2, int, int>(base.Top - Vector2.UnitY * 120f, num1368, 0));
																				int num1371 = 0;
																				int num1372 = list2.Count;
																				while (list2.Count > 0)
																				{
																					Vector2 item = list2[0].Item1;
																					int num1373 = 1;
																					int num1374 = 1;
																					if (num1371 > 0 && num1369 > 0 && (Main.rand.Next(3) != 0 || num1371 == 1))
																					{
																						num1374 = Main.rand.Next(Math.Max(1, list2[0].Item2));
																						num1373++;
																						num1369--;
																					}
																					for (int num1375 = 0; num1375 < num1373; num1375++)
																					{
																						int num1376 = list2[0].Item3;
																						if (num1371 == 0)
																						{
																							num1376 = Utils.SelectRandom<int>(Main.rand, new int[]
																							{
																								-1,
																								1
																							});
																						}
																						else if (num1375 == 1)
																						{
																							num1376 *= -1;
																						}
																						float num1377 = ((num1371 % 2 == 0) ? 0f : 3.14159274f) + (0.5f - Main.rand.NextFloat()) * 0.7853982f + (float)num1376 * 0.7853982f * (float)(num1371 % 2 == 0).ToDirectionInt();
																						float scaleFactor25 = 100f + 50f * Main.rand.NextFloat();
																						int num1378 = list2[0].Item2;
																						if (num1375 != 0)
																						{
																							num1378 = num1374;
																						}
																						if (num1371 == 0)
																						{
																							num1377 = (0.5f - Main.rand.NextFloat()) * 0.7853982f;
																							scaleFactor25 = 100f + 100f * Main.rand.NextFloat();
																						}
																						Vector2 value67 = (-Vector2.UnitY).RotatedBy((double)num1377, default(Vector2)) * scaleFactor25;
																						if (num1378 - 1 < 0)
																						{
																							value67 = Vector2.Zero;
																						}
																						num1370 = Projectile.NewProjectile(item.X, item.Y, value67.X, value67.Y, 540, 0, 0f, Main.myPlayer, (float)(-(float)num1371) * 10f, 0.5f + Main.rand.NextFloat() * 0.5f);
																						list3.Add(item + value67);
																						if (num1371 < num1368 && list2[0].Item2 > 0)
																						{
																							list2.Add(Tuple.Create<Vector2, int, int>(item + value67, num1378 - 1, num1376));
																						}
																					}
																					list2.Remove(list2[0]);
																					if (--num1372 == 0)
																					{
																						num1372 = list2.Count;
																						num1371++;
																					}
																				}
																				Main.projectile[num1370].localAI[0] = (float)num1367;
																			}
																			else
																			{
																				this.ai[1] = 30f;
																			}
																		}
																	}
																	if (this.type == 507)
																	{
																		if (Main.rand.Next(5) == 0)
																		{
																			Dust dust10 = Main.dust[Dust.NewDust(base.Left, this.width, this.height / 2, 241, 0f, 0f, 0, default(Color), 1f)];
																			dust10.position = base.Center + Vector2.UnitY.RotatedByRandom(2.0943951606750488) * new Vector2((float)(this.width / 2), (float)(this.height / 2)) * (0.8f + Main.rand.NextFloat() * 0.2f);
																			dust10.velocity.X = 0f;
																			dust10.velocity.Y = Math.Abs(dust10.velocity.Y) * 0.25f;
																		}
																		for (int num1379 = 0; num1379 < 3; num1379++)
																		{
																			if (Main.rand.Next(5) == 0)
																			{
																				Dust dust11 = Main.dust[Dust.NewDust(base.Top + new Vector2((float)(-(float)this.width) * (0.33f - 0.11f * (float)num1379), -20f), (int)((float)this.width * (0.66f - 0.22f * (float)num1379)), 20, 242, 0f, 0f, 0, default(Color), 1f)];
																				dust11.velocity.X = 0f;
																				dust11.velocity.Y = -Math.Abs(dust11.velocity.Y - (float)num1379 + this.velocity.Y - 4f) * 1f;
																				dust11.noGravity = true;
																				dust11.fadeIn = 1f;
																				dust11.color = Color.Black;
																				dust11.scale = 1f + Main.rand.NextFloat() + (float)num1379 * 0.3f;
																			}
																		}
																	}
																	if (this.type == 422)
																	{
																		if (Main.rand.Next(5) == 0)
																		{
																			Dust dust12 = Main.dust[Dust.NewDust(base.Left, this.width, this.height / 2, 241, 0f, 0f, 0, default(Color), 1f)];
																			dust12.position = base.Center + Vector2.UnitY.RotatedByRandom(2.0943951606750488) * new Vector2((float)(this.width / 2), (float)(this.height / 2)) * (0.8f + Main.rand.NextFloat() * 0.2f);
																			dust12.velocity.X = 0f;
																			dust12.velocity.Y = Math.Abs(dust12.velocity.Y) * 0.25f;
																		}
																		for (int num1380 = 0; num1380 < 3; num1380++)
																		{
																			if (Main.rand.Next(5) == 0)
																			{
																				Dust dust13 = Main.dust[Dust.NewDust(base.Top + new Vector2((float)(-(float)this.width) * (0.33f - 0.11f * (float)num1380), -20f), (int)((float)this.width * (0.66f - 0.22f * (float)num1380)), 20, 229, 0f, 0f, 0, default(Color), 1f)];
																				dust13.velocity.X = 0f;
																				dust13.velocity.Y = -Math.Abs(dust13.velocity.Y - (float)num1380 + this.velocity.Y - 4f) * 1f;
																				dust13.noGravity = true;
																				dust13.fadeIn = 1f;
																				dust13.color = Color.Black;
																				dust13.scale = 1f + Main.rand.NextFloat() + (float)num1380 * 0.3f;
																			}
																		}
																		if (this.ai[1] > 0f)
																		{
																			this.ai[1] -= 1f;
																		}
																		if (Main.netMode != 1 && this.ai[1] <= 0f && Main.player[this.target].active && !Main.player[this.target].dead && base.Distance(Main.player[this.target].Center) < 3240f && !Collision.CanHitLine(base.Center, 0, 0, Main.player[this.target].Center, 0, 0))
																		{
																			this.ai[1] = (float)(60 + Main.rand.Next(120));
																			Point point9 = Main.player[this.target].Top.ToTileCoordinates();
																			bool flag100 = NPC.CountNPCS(427) + NPC.CountNPCS(426) < 14;
																			int num1381 = 0;
																			while (num1381 < 10 && !WorldGen.SolidTile(point9.X, point9.Y) && point9.Y > 10)
																			{
																				point9.Y--;
																				num1381++;
																			}
																			if (flag100)
																			{
																				Projectile.NewProjectile((float)(point9.X * 16 + 8), (float)(point9.Y * 16 + 24), 0f, 0f, 579, 0, 0f, Main.myPlayer, 0f, 0f);
																			}
																			else
																			{
																				Projectile.NewProjectile((float)(point9.X * 16 + 8), (float)(point9.Y * 16 + 17), 0f, 0f, 578, 0, 1f, Main.myPlayer, 0f, 0f);
																			}
																		}
																		if (Main.netMode != 1 && this.ai[1] <= 0f && Main.player[this.target].active && !Main.player[this.target].dead && base.Distance(Main.player[this.target].Center) < 1080f && Main.player[this.target].position.Y - this.position.Y < 400f)
																		{
																			bool flag101 = NPC.CountNPCS(427) + NPC.CountNPCS(426) * 3 + NPC.CountNPCS(428) < 20;
																			if (flag101)
																			{
																				this.ai[1] = (float)(420 + Main.rand.Next(360));
																				Point point10 = base.Center.ToTileCoordinates();
																				Point point11 = Main.player[this.target].Center.ToTileCoordinates();
																				Vector2 vector213 = Main.player[this.target].Center - base.Center;
																				int num1382 = 20;
																				int num1383 = 3;
																				int num1384 = 8;
																				int num1385 = 2;
																				int num1386 = 0;
																				bool flag102 = false;
																				if (vector213.Length() > 2000f)
																				{
																					flag102 = true;
																				}
																				while (!flag102 && num1386 < 100)
																				{
																					num1386++;
																					int num1387 = Main.rand.Next(point11.X - num1382, point11.X + num1382 + 1);
																					int num1388 = Main.rand.Next(point11.Y - num1382, point11.Y + num1382 + 1);
																					if ((num1388 < point11.Y - num1384 || num1388 > point11.Y + num1384 || num1387 < point11.X - num1384 || num1387 > point11.X + num1384) && (num1388 < point10.Y - num1383 || num1388 > point10.Y + num1383 || num1387 < point10.X - num1383 || num1387 > point10.X + num1383) && !Main.tile[num1387, num1388].nactive())
																					{
																						bool flag103 = true;
																						if (flag103 && Main.tile[num1387, num1388].lava())
																						{
																							flag103 = false;
																						}
																						if (flag103 && Collision.SolidTiles(num1387 - num1385, num1387 + num1385, num1388 - num1385, num1388 + num1385))
																						{
																							flag103 = false;
																						}
																						if (flag103 && !Collision.CanHitLine(base.Center, 0, 0, Main.player[this.target].Center, 0, 0))
																						{
																							flag103 = false;
																						}
																						if (flag103)
																						{
																							Projectile.NewProjectile((float)(num1387 * 16 + 8), (float)(num1388 * 16 + 8), 0f, 0f, 579, 0, 0f, Main.myPlayer, 0f, 0f);
																							break;
																						}
																					}
																				}
																			}
																		}
																	}
																	if (this.type == 517)
																	{
																		if (Main.rand.Next(5) == 0)
																		{
																			Dust dust14 = Main.dust[Dust.NewDust(base.Left, this.width, this.height / 2, 241, 0f, 0f, 0, default(Color), 1f)];
																			dust14.position = base.Center + Vector2.UnitY.RotatedByRandom(2.0943951606750488) * new Vector2((float)(this.width / 2), (float)(this.height / 2)) * (0.8f + Main.rand.NextFloat() * 0.2f);
																			dust14.velocity.X = 0f;
																			dust14.velocity.Y = Math.Abs(dust14.velocity.Y) * 0.25f;
																		}
																		for (int num1389 = 0; num1389 < 3; num1389++)
																		{
																			if (Main.rand.Next(5) == 0)
																			{
																				Dust dust15 = Main.dust[Dust.NewDust(base.Top + new Vector2((float)(-(float)this.width) * (0.33f - 0.11f * (float)num1389), -20f), (int)((float)this.width * (0.66f - 0.22f * (float)num1389)), 20, 6, 0f, 0f, 0, default(Color), 1f)];
																				dust15.velocity.X = 0f;
																				dust15.velocity.Y = -Math.Abs(dust15.velocity.Y - (float)num1389 + this.velocity.Y - 4f) * 1f;
																				dust15.noGravity = true;
																				dust15.fadeIn = 1f;
																				dust15.scale = 1f + Main.rand.NextFloat() + (float)num1389 * 0.3f;
																			}
																		}
																		if (this.ai[1] > 0f)
																		{
																			this.ai[1] -= 1f;
																		}
																		if (Main.netMode != 1 && this.ai[1] <= 0f && Main.player[this.target].active && !Main.player[this.target].dead && base.Distance(Main.player[this.target].Center) < 1080f && Main.player[this.target].position.Y - this.position.Y < 700f)
																		{
																			Vector2 vector214 = base.Top + new Vector2((float)(-(float)this.width) * 0.33f, -20f) + new Vector2((float)this.width * 0.66f, 20f) * Utils.RandomVector2(Main.rand, 0f, 1f);
																			Vector2 velocity9 = -Vector2.UnitY.RotatedByRandom(0.78539818525314331) * (7f + Main.rand.NextFloat() * 5f);
																			int num1390 = NPC.NewNPC((int)vector214.X, (int)vector214.Y, 519, this.whoAmI, 0f, 0f, 0f, 0f, 255);
																			Main.npc[num1390].velocity = velocity9;
																			Main.npc[num1390].netUpdate = true;
																			this.ai[1] = 60f;
																			return;
																		}
																	}
																}
																else if (this.aiStyle == 95)
																{
																	float num1391 = 300f;
																	if (this.velocity.Length() > 4f)
																	{
																		this.velocity *= 0.95f;
																	}
																	this.velocity *= 0.99f;
																	this.ai[0] += 1f;
																	this.scale = 1f + 0.3f * (this.ai[0] / num1391);
																	if (this.ai[0] >= num1391)
																	{
																		if (Main.netMode != 1)
																		{
																			this.Transform(405);
																		}
																		return;
																	}
																	this.rotation += this.velocity.X * 0.1f;
																	if (this.ai[0] > 20f)
																	{
																		Vector2 center33 = base.Center;
																		int num1392 = (int)(this.ai[0] / (num1391 / 2f));
																		for (int num1393 = 0; num1393 < num1392 + 1; num1393++)
																		{
																			if (Main.rand.Next(2) != 0)
																			{
																				int num1394 = 226;
																				float num1395 = 0.4f;
																				if (num1393 % 2 == 1)
																				{
																					num1394 = 226;
																					num1395 = 0.65f;
																				}
																				Vector2 vector215 = center33 + ((float)Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() * (12f - (float)(num1392 * 2));
																				int num1396 = Dust.NewDust(vector215 - Vector2.One * 12f, 24, 24, num1394, this.velocity.X / 2f, this.velocity.Y / 2f, 0, default(Color), 1f);
																				Main.dust[num1396].position -= new Vector2(2f);
																				Main.dust[num1396].velocity = Vector2.Normalize(center33 - vector215) * 1.5f * (10f - (float)num1392 * 2f) / 10f;
																				Main.dust[num1396].noGravity = true;
																				Main.dust[num1396].scale = num1395;
																				Main.dust[num1396].customData = this;
																			}
																		}
																		return;
																	}
																}
																else if (this.aiStyle == 96)
																{
																	float num1397 = 5f;
																	float moveSpeed = 0.15f;
																	this.TargetClosest(true);
																	Vector2 desiredVelocity3 = Main.player[this.target].Center - base.Center + new Vector2(0f, -250f);
																	float num1398 = desiredVelocity3.Length();
																	if (num1398 < 20f)
																	{
																		desiredVelocity3 = this.velocity;
																	}
																	else if (num1398 < 40f)
																	{
																		desiredVelocity3.Normalize();
																		desiredVelocity3 *= num1397 * 0.35f;
																	}
																	else if (num1398 < 80f)
																	{
																		desiredVelocity3.Normalize();
																		desiredVelocity3 *= num1397 * 0.65f;
																	}
																	else
																	{
																		desiredVelocity3.Normalize();
																		desiredVelocity3 *= num1397;
																	}
																	this.SimpleFlyMovement(desiredVelocity3, moveSpeed);
																	this.rotation = this.velocity.X * 0.1f;
																	if ((this.ai[0] += 1f) >= 70f)
																	{
																		this.ai[0] = 0f;
																		if (Main.netMode != 1)
																		{
																			Vector2 vector216 = Vector2.Zero;
																			while (Math.Abs(vector216.X) < 1.5f)
																			{
																				vector216 = Vector2.UnitY.RotatedByRandom(1.5707963705062866) * new Vector2(5f, 3f);
																			}
																			Projectile.NewProjectile(base.Center.X, base.Center.Y, vector216.X, vector216.Y, 539, 60, 0f, Main.myPlayer, 0f, (float)this.whoAmI);
																			return;
																		}
																	}
																}
																else if (this.aiStyle == 97)
																{
																	float num1399 = 7f;
																	int num1400 = 480;
																	if (this.localAI[2] < 180f)
																	{
																		this.localAI[2] += 1f;
																		if (Main.netMode != 1 && this.localAI[2] % 60f == 0f)
																		{
																			Vector2 vector217 = Vector2.Zero;
																			while (Math.Abs(vector217.X) < 1.5f)
																			{
																				vector217 = Vector2.UnitY.RotatedByRandom(1.5707963705062866) * new Vector2(4f, 2.5f);
																			}
																			Projectile.NewProjectile(base.Center.X, base.Center.Y, vector217.X, vector217.Y, 574, 0, 0f, Main.myPlayer, 0f, (float)this.whoAmI);
																		}
																	}
																	if (this.localAI[1] == 1f)
																	{
																		this.localAI[1] = 0f;
																		if (Main.rand.Next(4) == 0)
																		{
																			this.ai[0] = (float)num1400;
																		}
																	}
																	this.TargetClosest(true);
																	this.rotation = Math.Abs(this.velocity.X) * (float)this.direction * 0.1f;
																	this.spriteDirection = -this.direction;
																	Vector2 value68 = base.Center + new Vector2((float)(this.direction * 20), 6f);
																	Vector2 vector218 = Main.player[this.target].Center - value68;
																	bool flag104 = Collision.CanHit(base.Center, 1, 1, Main.player[this.target].Center, 1, 1);
																	bool flag105 = false;
																	if (vector218.Length() > 400f || !flag104)
																	{
																		Vector2 value69 = vector218;
																		if (value69.Length() > num1399)
																		{
																			value69.Normalize();
																			value69 *= num1399;
																		}
																		int num1401 = 30;
																		this.velocity = (this.velocity * (float)(num1401 - 1) + value69) / (float)num1401;
																	}
																	else
																	{
																		this.velocity *= 0.98f;
																		flag105 = true;
																	}
																	if (this.ai[2] != 0f && this.ai[3] != 0f)
																	{
																		Main.PlaySound(SoundID.Item8, base.Center);
																		for (int num1402 = 0; num1402 < 20; num1402++)
																		{
																			int num1403 = Dust.NewDust(this.position, this.width, this.height, 242, 0f, 0f, 0, default(Color), 1f);
																			Main.dust[num1403].velocity *= 3f;
																			Main.dust[num1403].noGravity = true;
																			Main.dust[num1403].scale = 2.5f;
																		}
																		base.Center = new Vector2(this.ai[2] * 16f, this.ai[3] * 16f);
																		this.velocity = Vector2.Zero;
																		this.ai[2] = 0f;
																		this.ai[3] = 0f;
																		Main.PlaySound(SoundID.Item8, base.Center);
																		for (int num1404 = 0; num1404 < 20; num1404++)
																		{
																			int num1405 = Dust.NewDust(this.position, this.width, this.height, 242, 0f, 0f, 0, default(Color), 1f);
																			Main.dust[num1405].velocity *= 3f;
																			Main.dust[num1405].noGravity = true;
																			Main.dust[num1405].scale = 2.5f;
																		}
																	}
																	this.ai[0] += 1f;
																	if (this.ai[0] >= (float)num1400 && Main.netMode != 1)
																	{
																		this.ai[0] = 0f;
																		Point point12 = base.Center.ToTileCoordinates();
																		Point point13 = Main.player[this.target].Center.ToTileCoordinates();
																		int num1406 = 20;
																		int num1407 = 3;
																		int num1408 = 10;
																		int num1409 = 1;
																		int num1410 = 0;
																		bool flag106 = false;
																		if (vector218.Length() > 2000f)
																		{
																			flag106 = true;
																		}
																		while (!flag106 && num1410 < 100)
																		{
																			num1410++;
																			int num1411 = Main.rand.Next(point13.X - num1406, point13.X + num1406 + 1);
																			int num1412 = Main.rand.Next(point13.Y - num1406, point13.Y + num1406 + 1);
																			if ((num1412 < point13.Y - num1408 || num1412 > point13.Y + num1408 || num1411 < point13.X - num1408 || num1411 > point13.X + num1408) && (num1412 < point12.Y - num1407 || num1412 > point12.Y + num1407 || num1411 < point12.X - num1407 || num1411 > point12.X + num1407) && !Main.tile[num1411, num1412].nactive())
																			{
																				bool flag107 = true;
																				if (flag107 && Main.tile[num1411, num1412].lava())
																				{
																					flag107 = false;
																				}
																				if (flag107 && Collision.SolidTiles(num1411 - num1409, num1411 + num1409, num1412 - num1409, num1412 + num1409))
																				{
																					flag107 = false;
																				}
																				if (flag107)
																				{
																					this.ai[1] = 20f;
																					this.ai[2] = (float)num1411;
																					this.ai[3] = (float)num1412;
																					break;
																				}
																			}
																		}
																		this.netUpdate = true;
																	}
																	if (flag105 && this.velocity.Length() < 2f && Main.netMode != 1)
																	{
																		this.localAI[0] += 1f;
																		if (this.localAI[0] >= 13f)
																		{
																			return;
																		}
																	}
																}
																else if (this.aiStyle == 98)
																{
																	this.noTileCollide = false;
																	if (this.ai[0] == 0f)
																	{
																		this.TargetClosest(true);
																		this.ai[0] = 1f;
																		this.ai[1] = 0f;
																		this.ai[2] = 0f;
																		this.ai[3] = 0f;
																	}
																	bool flag108 = Collision.CanHit(base.Center, 1, 1, Main.player[this.target].position, 1, 1);
																	bool flag109 = true;
																	if (!flag108 || Main.player[this.target].dead)
																	{
																		flag109 = false;
																	}
																	else
																	{
																		int num1413 = (int)(Main.player[this.target].Center.X / 16f);
																		int num1414 = (int)(Main.player[this.target].Center.Y / 16f);
																		for (int num1415 = num1413 - 2; num1415 <= num1413 + 2; num1415++)
																		{
																			for (int num1416 = num1414; num1416 <= num1414 + 25; num1416++)
																			{
																				if (WorldGen.SolidTile2(num1415, num1416))
																				{
																					flag109 = false;
																				}
																			}
																		}
																	}
																	if (this.ai[0] < 0f)
																	{
																		Vector2 vector219 = Main.player[this.target].Center - base.Center;
																		float num1417 = vector219.Length();
																		if (this.ai[0] == -1f)
																		{
																			vector219.Normalize();
																			if (vector219.HasNaNs())
																			{
																				vector219 = new Vector2((float)this.direction, 0f);
																			}
																			float num1418 = 8f + num1417 / 100f;
																			float num1419 = 12f;
																			if (Main.player[this.target].velocity.Length() > num1419)
																			{
																				num1419 = Main.player[this.target].velocity.Length();
																			}
																			if (num1418 > num1419)
																			{
																				num1418 = num1419;
																			}
																			vector219 *= num1418;
																			float num1420 = 10f;
																			this.velocity = (this.velocity * (num1420 - 1f) + vector219) / num1420;
																			for (int num1421 = 0; num1421 < 200; num1421++)
																			{
																				if (Main.npc[num1421].active && Main.npc[num1421].type == this.type && num1421 != this.whoAmI)
																				{
																					Vector2 value70 = Main.npc[num1421].Center - base.Center;
																					if (value70.Length() < 40f)
																					{
																						value70.Normalize();
																						value70 *= 1f;
																						this.velocity -= value70;
																					}
																				}
																			}
																			this.rotation += this.velocity.X * 0.03f;
																			if ((double)this.rotation < -6.2831)
																			{
																				this.rotation += 6.2831f;
																			}
																			if ((double)this.rotation > 6.2831)
																			{
																				this.rotation -= 6.2831f;
																			}
																			if (this.velocity.X > 0f)
																			{
																				this.direction = 1;
																			}
																			else if (this.velocity.X < 0f)
																			{
																				this.direction = -1;
																			}
																			this.spriteDirection = this.direction;
																		}
																		this.ai[1] += 1f;
																		if (this.ai[1] >= 60f && !flag109)
																		{
																			this.ai[0] = 0f;
																		}
																	}
																	else if (this.ai[0] == 2f)
																	{
																		this.rotation *= 0.92f;
																		if ((double)Math.Abs(this.rotation) < 0.02)
																		{
																			this.rotation = 0f;
																		}
																		int num1422 = 300;
																		float num1423 = Math.Abs(base.Center.X - Main.player[this.target].Center.X);
																		if (num1423 < (float)num1422 && Collision.CanHit(base.Center, 1, 1, Main.player[this.target].position, 1, 1))
																		{
																			this.velocity.X = this.velocity.X * 0.96f;
																			this.velocity.Y = this.velocity.Y * 0.96f;
																			this.ai[1] += 1f;
																			if (this.ai[1] == 20f)
																			{
																				if (Main.netMode != 1)
																				{
																					NPC.NewNPC((int)base.Center.X, (int)base.Center.Y + 26, 516, 0, 0f, 0f, 0f, 0f, this.target);
																				}
																			}
																			else if (this.ai[1] >= 30f)
																			{
																				this.ai[1] = 0f;
																			}
																			for (int num1424 = 0; num1424 < 200; num1424++)
																			{
																				if (Main.npc[num1424].active && Main.npc[num1424].type == this.type && num1424 != this.whoAmI)
																				{
																					Vector2 value71 = Main.npc[num1424].Center - base.Center;
																					if (value71.Length() < 100f)
																					{
																						value71.Normalize();
																						value71 *= 0.1f;
																						this.velocity -= value71;
																					}
																				}
																			}
																		}
																		else
																		{
																			this.ai[0] = 0f;
																		}
																		if (Main.player[this.target].Center.X < base.Center.X)
																		{
																			this.direction = -1;
																		}
																		else if (Main.player[this.target].Center.X > base.Center.X)
																		{
																			this.direction = 1;
																		}
																		this.spriteDirection = this.direction;
																	}
																	if (this.ai[0] == 1f)
																	{
																		this.rotation *= 0.92f;
																		if ((double)Math.Abs(this.rotation) < 0.02)
																		{
																			this.rotation = 0f;
																		}
																		if (flag109)
																		{
																			this.ai[0] = -1f;
																			this.ai[1] = 0f;
																			this.ai[2] = 0f;
																			this.ai[3] = 0f;
																		}
																		int num1425 = 300;
																		for (int num1426 = 0; num1426 < 200; num1426++)
																		{
																			if (Main.npc[num1426].active && Main.npc[num1426].type == this.type && num1426 != this.whoAmI)
																			{
																				Vector2 value72 = Main.npc[num1426].Center - base.Center;
																				if (value72.Length() < 50f)
																				{
																					value72.Normalize();
																					value72 *= 0.1f;
																					this.velocity -= value72;
																					this.velocity.X = this.velocity.X - value72.X * 1f;
																				}
																			}
																		}
																		int num1427 = 800;
																		float num1428 = Math.Abs(base.Center.X - Main.player[this.target].Center.X);
																		if (num1428 < (float)num1425 && flag108)
																		{
																			this.ai[0] = 2f;
																			this.ai[1] = 0f;
																		}
																		else
																		{
																			if (this.collideX)
																			{
																				this.velocity.X = this.velocity.X * -0.5f;
																				this.ai[1] = 60f;
																				this.direction *= -1;
																			}
																			if (this.ai[1] > 0f)
																			{
																				this.ai[1] -= 1f;
																			}
																			else if (flag108)
																			{
																				if (base.Center.X > Main.player[this.target].Center.X)
																				{
																					this.direction = -1;
																				}
																				else
																				{
																					this.direction = 1;
																				}
																			}
																			else if (num1428 > (float)num1427)
																			{
																				if (base.Center.X > Main.player[this.target].Center.X)
																				{
																					this.direction = -1;
																				}
																				else
																				{
																					this.direction = 1;
																				}
																			}
																			float num1429 = 2f;
																			float num1430 = 0.1f;
																			if (this.velocity.X > num1429 || this.velocity.X < -num1429)
																			{
																				if (Math.Abs(this.velocity.X) < num1429 + num1430 * 2f)
																				{
																					if (this.velocity.X < 0f)
																					{
																						this.velocity.X = -num1429;
																					}
																					else
																					{
																						this.velocity.X = num1429;
																					}
																				}
																				else
																				{
																					this.velocity.X = this.velocity.X * 0.99f;
																				}
																			}
																			else
																			{
																				this.velocity.X = this.velocity.X + (float)this.direction * num1430;
																			}
																			this.spriteDirection = this.direction;
																		}
																		if (this.collideY)
																		{
																			this.ai[2] = 60f;
																			this.directionY *= -1;
																			this.velocity.Y = this.velocity.Y * -0.5f;
																		}
																		if (this.ai[2] > 0f)
																		{
																			this.ai[2] -= 1f;
																		}
																		else
																		{
																			int num1431 = (int)(base.Center.Y / 16f);
																			int num1432 = (int)((base.Center.X - 8f) / 16f);
																			int num1433 = 30;
																			int num1434 = 15;
																			int num1435 = 0;
																			for (int num1436 = num1431; num1436 < num1431 + num1433; num1436++)
																			{
																				for (int num1437 = num1432; num1437 <= num1432 + 1; num1437++)
																				{
																					if (WorldGen.SolidTile(num1437, num1436) || Main.tile[num1437, num1436].liquid > 0)
																					{
																						num1435 = num1436 - num1431;
																						break;
																					}
																				}
																				if (num1435 != 0)
																				{
																					break;
																				}
																			}
																			if (num1435 == 0)
																			{
																				this.directionY = 1;
																			}
																			else if (num1435 < num1434)
																			{
																				this.directionY = -1;
																			}
																		}
																		float num1438 = 2f;
																		float num1439 = 0.1f;
																		if (this.velocity.Y <= num1438 && this.velocity.Y >= -num1438)
																		{
																			this.velocity.Y = this.velocity.Y + (float)this.directionY * num1439;
																			return;
																		}
																		if (Math.Abs(this.velocity.Y) >= num1438 + num1439 * 2f)
																		{
																			this.velocity.Y = this.velocity.Y * 0.99f;
																			return;
																		}
																		if (this.velocity.Y < 0f)
																		{
																			this.velocity.Y = -num1438;
																			return;
																		}
																		this.velocity.Y = num1438;
																		return;
																	}
																}
																else if (this.aiStyle == 99)
																{
																	if (this.velocity.Y == 0f && this.ai[0] == 0f)
																	{
																		this.ai[0] = 1f;
																		this.ai[1] = 0f;
																		this.netUpdate = true;
																		return;
																	}
																	if (this.ai[0] == 1f)
																	{
																		this.velocity = Vector2.Zero;
																		this.position = this.oldPosition;
																		this.ai[1] += 1f;
																		if (this.ai[1] >= 5f)
																		{
																			this.HitEffect(0, 9999.0);
																			this.active = false;
																		}
																		return;
																	}
																	this.velocity.Y = this.velocity.Y + 0.2f;
																	if (this.velocity.Y > 12f)
																	{
																		this.velocity.Y = 12f;
																	}
																	this.rotation = this.velocity.ToRotation() - 1.57079637f;
																	if (this.type == 519)
																	{
																		if (this.localAI[0] == 0f)
																		{
																			this.localAI[0] = 1f;
																			for (int num1440 = 0; num1440 < 13; num1440++)
																			{
																				int num1441 = Dust.NewDust(this.position, this.width, this.height, 6, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 90, default(Color), 2.5f);
																				Main.dust[num1441].noGravity = true;
																				Main.dust[num1441].fadeIn = 1f;
																				Main.dust[num1441].velocity *= 4f;
																				Main.dust[num1441].noLight = true;
																			}
																		}
																		for (int num1442 = 0; num1442 < 3; num1442++)
																		{
																			if (Main.rand.Next(3) < 2)
																			{
																				int num1443 = Dust.NewDust(this.position, this.width, this.height, 6, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 90, default(Color), 2.5f);
																				Main.dust[num1443].noGravity = true;
																				Main.dust[num1443].velocity *= 0.2f;
																				Main.dust[num1443].fadeIn = 1f;
																				if (Main.rand.Next(6) == 0)
																				{
																					Main.dust[num1443].velocity *= 30f;
																					Main.dust[num1443].noGravity = false;
																					Main.dust[num1443].noLight = true;
																				}
																				else
																				{
																					Main.dust[num1443].velocity = base.DirectionFrom(Main.dust[num1443].position) * Main.dust[num1443].velocity.Length();
																				}
																			}
																		}
																		return;
																	}
																}
																else if (this.aiStyle == 100)
																{
																	if (this.velocity.Y == 0f && this.ai[0] >= 0f)
																	{
																		this.ai[0] = -1f;
																		this.ai[1] = 0f;
																		this.netUpdate = true;
																		return;
																	}
																	if (this.ai[0] == -1f)
																	{
																		this.velocity = Vector2.Zero;
																		this.position = this.oldPosition;
																		this.ai[1] += 1f;
																		if (this.ai[1] >= 5f)
																		{
																			this.HitEffect(0, 9999.0);
																			this.active = false;
																		}
																		return;
																	}
																	this.rotation = this.velocity.ToRotation() - 1.57079637f;
																	if (this.type == 522)
																	{
																		if (this.localAI[0] == 0f)
																		{
																			this.localAI[0] = 1f;
																			this.velocity.X = this.ai[2];
																			this.velocity.Y = this.ai[3];
																			for (int num1444 = 0; num1444 < 13; num1444++)
																			{
																				int num1445 = Dust.NewDust(this.position, this.width, this.height, 261, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 90, default(Color), 2.5f);
																				Main.dust[num1445].noGravity = true;
																				Main.dust[num1445].fadeIn = 1f;
																				Main.dust[num1445].velocity *= 4f;
																				Main.dust[num1445].noLight = true;
																			}
																		}
																		for (int num1446 = 0; num1446 < 2; num1446++)
																		{
																			if (Main.rand.Next(10 - (int)Math.Min(7f, this.velocity.Length())) < 1)
																			{
																				int num1447 = Dust.NewDust(this.position, this.width, this.height, 261, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 90, default(Color), 2.5f);
																				Main.dust[num1447].noGravity = true;
																				Main.dust[num1447].velocity *= 0.2f;
																				Main.dust[num1447].fadeIn = 0.4f;
																				if (Main.rand.Next(6) == 0)
																				{
																					Main.dust[num1447].velocity *= 5f;
																					Main.dust[num1447].noLight = true;
																				}
																				else
																				{
																					Main.dust[num1447].velocity = base.DirectionFrom(Main.dust[num1447].position) * Main.dust[num1447].velocity.Length();
																				}
																			}
																		}
																		this.dontTakeDamage = (this.ai[0] >= 0f && this.ai[0] <= 20f);
																		if (this.ai[0] >= 0f)
																		{
																			this.ai[0] += 1f;
																			if (this.ai[0] > 60f)
																			{
																				this.velocity = this.velocity.RotatedBy((double)this.ai[1], default(Vector2));
																			}
																			if (this.ai[0] > 120f)
																			{
																				this.velocity *= 0.98f;
																			}
																			if (this.velocity.Length() < 0.2f)
																			{
																				this.velocity = Vector2.Zero;
																				return;
																			}
																		}
																	}
																}
																else if (this.aiStyle == 101)
																{
																	float num1448 = 420f;
																	float num1449 = 120f;
																	int num1450 = 1;
																	float value73 = 0f;
																	float value74 = 1f;
																	float num1451 = 4f;
																	bool flag110 = this.ai[1] < 0f || !Main.npc[(int)this.ai[0]].active;
																	if (Main.npc[(int)this.ai[0]].type == 439)
																	{
																		if (Main.npc[(int)this.ai[0]].life < Main.npc[(int)this.ai[0]].lifeMax / 2)
																		{
																			num1450 = 2;
																		}
																		if (Main.npc[(int)this.ai[0]].life < Main.npc[(int)this.ai[0]].lifeMax / 4)
																		{
																			num1450 = 3;
																		}
																	}
																	else
																	{
																		flag110 = true;
																	}
																	this.ai[1] += (float)num1450;
																	float num1452 = this.ai[1] / num1449;
																	num1452 = MathHelper.Clamp(num1452, 0f, 1f);
																	this.position = base.Center;
																	this.scale = MathHelper.Lerp(value73, value74, num1452);
																	base.Center = this.position;
																	this.alpha = (int)(255f - num1452 * 255f);
																	if (Main.rand.Next(6) == 0)
																	{
																		Vector2 spinningpoint10 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																		Dust dust16 = Main.dust[Dust.NewDust(base.Center - spinningpoint10 * 20f, 0, 0, 27, 0f, 0f, 0, default(Color), 1f)];
																		dust16.noGravity = true;
																		dust16.position = base.Center - spinningpoint10 * (float)Main.rand.Next(10, 21) * this.scale;
																		dust16.velocity = spinningpoint10.RotatedBy(1.5707963705062866, default(Vector2)) * 4f;
																		dust16.scale = 0.5f + Main.rand.NextFloat();
																		dust16.fadeIn = 0.5f;
																	}
																	if (Main.rand.Next(6) == 0)
																	{
																		Vector2 spinningpoint11 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																		Dust dust17 = Main.dust[Dust.NewDust(base.Center - spinningpoint11 * 30f, 0, 0, 240, 0f, 0f, 0, default(Color), 1f)];
																		dust17.noGravity = true;
																		dust17.position = base.Center - spinningpoint11 * 20f * this.scale;
																		dust17.velocity = spinningpoint11.RotatedBy(-1.5707963705062866, default(Vector2)) * 2f;
																		dust17.scale = 0.5f + Main.rand.NextFloat();
																		dust17.fadeIn = 0.5f;
																	}
																	if (Main.rand.Next(6) == 0)
																	{
																		Vector2 vector220 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
																		Dust dust18 = Main.dust[Dust.NewDust(base.Center - vector220 * 30f, 0, 0, 240, 0f, 0f, 0, default(Color), 1f)];
																		dust18.position = base.Center - vector220 * 20f * this.scale;
																		dust18.velocity = Vector2.Zero;
																		dust18.scale = 0.5f + Main.rand.NextFloat();
																		dust18.fadeIn = 0.5f;
																		dust18.noLight = true;
																	}
																	this.localAI[0] += 0.05235988f;
																	this.localAI[1] = 0.25f + Vector2.UnitY.RotatedBy((double)(this.ai[1] * 6.28318548f / 60f), default(Vector2)).Y * 0.25f;
																	if (this.ai[1] >= num1448)
																	{
																		flag110 = true;
																		if (Main.netMode != 1)
																		{
																			for (int num1453 = 0; num1453 < 4; num1453++)
																			{
																				Vector2 vector221 = new Vector2(0f, -num1451).RotatedBy((double)(1.57079637f * (float)num1453), default(Vector2));
																				Projectile.NewProjectile(base.Center.X, base.Center.Y, vector221.X, vector221.Y, 593, this.damage, 0f, Main.myPlayer, 0f, 0f);
																			}
																		}
																	}
																	if (flag110)
																	{
																		this.HitEffect(0, 9999.0);
																		this.active = false;
																		return;
																	}
																}
																else if (this.aiStyle == 102)
																{
																	bool flag111 = false;
																	bool flag112 = false;
																	bool flag113 = true;
																	bool flag114 = false;
																	int num1454 = 4;
																	int num1455 = 3;
																	int num1456 = 0;
																	float num1457 = 0.2f;
																	float num1458 = 2f;
																	float num1459 = -0.2f;
																	float num1460 = -4f;
																	bool flag115 = true;
																	float num1461 = 2f;
																	float num1462 = 0.1f;
																	float num1463 = 1f;
																	float num1464 = 0.04f;
																	bool flag116 = false;
																	float scaleFactor26 = 0.96f;
																	bool flag117 = true;
																	if (this.type == 541)
																	{
																		flag115 = false;
																		this.rotation = this.velocity.X * 0.04f;
																		this.spriteDirection = ((this.direction > 0) ? 1 : -1);
																		num1456 = 3;
																		num1459 = -0.1f;
																		num1457 = 0.1f;
																		float num1465 = (float)this.life / (float)this.lifeMax;
																		num1461 += (1f - num1465) * 2f;
																		num1462 += (1f - num1465) * 0.02f;
																		if (num1465 < 0.5f)
																		{
																			this.knockBackResist = 0f;
																		}
																		Vector2 vector222 = base.BottomLeft + new Vector2(0f, -12f);
																		Vector2 bottomRight = base.BottomRight;
																		Vector2 value75 = new Vector2((float)(-(float)this.spriteDirection * 10), -4f);
																		Color color = new Color(222, 108, 48) * 0.7f;
																		float num1466 = -0.3f + MathHelper.Max(this.velocity.Y * 2f, 0f);
																		for (int num1467 = 0; num1467 < 2; num1467++)
																		{
																			if (Main.rand.Next(2) != 0)
																			{
																				Dust dust19 = Main.dust[Dust.NewDust(base.Bottom, 0, 0, 268, 0f, 0f, 0, default(Color), 1f)];
																				dust19.position = new Vector2(MathHelper.Lerp(vector222.X, bottomRight.X, Main.rand.NextFloat()), MathHelper.Lerp(vector222.Y, bottomRight.Y, Main.rand.NextFloat())) + value75;
																				if (num1467 == 1)
																				{
																					dust19.position = base.Bottom + Utils.RandomVector2(Main.rand, -6f, 6f);
																				}
																				dust19.color = color;
																				dust19.scale = 0.8f;
																				Dust expr_45B4B_cp_0 = dust19;
																				expr_45B4B_cp_0.velocity.Y = expr_45B4B_cp_0.velocity.Y + num1466;
																				Dust expr_45B64_cp_0 = dust19;
																				expr_45B64_cp_0.velocity.X = expr_45B64_cp_0.velocity.X + (float)this.spriteDirection * 0.2f;
																			}
																		}
																		this.localAI[2] = 0f;
																		if (this.ai[0] < 0f)
																		{
																			this.ai[0] = MathHelper.Min(this.ai[0] + 1f, 0f);
																		}
																		if (this.ai[0] > 0f)
																		{
																			flag117 = false;
																			flag116 = true;
																			this.ai[0] += 1f;
																			if (this.ai[0] >= 135f)
																			{
																				this.ai[0] = -300f;
																				this.netUpdate = true;
																			}
																			base.Center + Vector2.UnitX * (float)this.direction * 200f;
																			Vector2 vector223 = base.Center + Vector2.UnitX * (float)this.direction * 50f - Vector2.UnitY * 6f;
																			if (this.ai[0] == 54f && Main.netMode != 1)
																			{
																				List<Point> list4 = new List<Point>();
																				Vector2 vec5 = Main.player[this.target].Center + new Vector2(Main.player[this.target].velocity.X * 30f, 0f);
																				Point point14 = vec5.ToTileCoordinates();
																				int num1468 = 0;
																				while (num1468 < 1000 && list4.Count < 3)
																				{
																					bool flag118 = false;
																					int num1469 = Main.rand.Next(point14.X - 30, point14.X + 30 + 1);
																					foreach (Point current in list4)
																					{
																						if (Math.Abs(current.X - num1469) < 10)
																						{
																							flag118 = true;
																							break;
																						}
																					}
																					if (!flag118)
																					{
																						int startY = point14.Y - 20;
																						int num1470;
																						int num1471;
																						Collision.ExpandVertically(num1469, startY, out num1470, out num1471, 1, 51);
																						if (StrayMethods.CanSpawnSandstormHostile(new Vector2((float)num1469, (float)(num1471 - 15)) * 16f, 15, 15))
																						{
																							list4.Add(new Point(num1469, num1471 - 15));
																						}
																					}
																					num1468++;
																				}
																				foreach (Point current2 in list4)
																				{
																					Projectile.NewProjectile((float)(current2.X * 16), (float)(current2.Y * 16), 0f, 0f, 658, 0, 0f, Main.myPlayer, 0f, 0f);
																				}
																			}
																			new Vector2(0.9f, 2f);
																			if (this.ai[0] < 114f && this.ai[0] > 0f)
																			{
																				List<Vector2> list5 = new List<Vector2>();
																				for (int num1472 = 0; num1472 < 1000; num1472++)
																				{
																					Projectile projectile9 = Main.projectile[num1472];
																					if (projectile9.active && projectile9.type == 658)
																					{
																						list5.Add(projectile9.Center);
																					}
																				}
																				Vector2 value76 = new Vector2(0f, 1500f);
																				float num1473 = (this.ai[0] - 54f) / 30f;
																				if (num1473 < 0.95f && num1473 >= 0f)
																				{
																					foreach (Vector2 current3 in list5)
																					{
																						Vector2 value77 = Vector2.CatmullRom(vector223 + value76, vector223, current3, current3 + value76, num1473);
																						Vector2 value78 = Vector2.CatmullRom(vector223 + value76, vector223, current3, current3 + value76, num1473 + 0.05f);
																						float num1474 = num1473;
																						if (num1474 > 0.5f)
																						{
																							num1474 = 1f - num1474;
																						}
																						float num1475 = 2f;
																						if (Vector2.Distance(value77, value78) > 5f)
																						{
																							num1475 = 3f;
																						}
																						if (Vector2.Distance(value77, value78) > 10f)
																						{
																							num1475 = 4f;
																						}
																						for (float num1476 = 0f; num1476 < num1475; num1476 += 1f)
																						{
																							Dust dust20 = Main.dust[Dust.NewDust(vector223, 0, 0, 269, 0f, 0f, 0, default(Color), 1f)];
																							dust20.position = Vector2.Lerp(value77, value78, num1476 / num1475) + Utils.RandomVector2(Main.rand, -2f, 2f);
																							dust20.noLight = true;
																							dust20.scale = 0.3f + num1473;
																						}
																					}
																				}
																			}
																			float arg_46144_0 = this.ai[0];
																		}
																		if (this.ai[0] == 0f)
																		{
																			this.ai[0] = 1f;
																			this.netUpdate = true;
																			flag116 = true;
																		}
																	}
																	if (this.justHit)
																	{
																		this.localAI[2] = 0f;
																	}
																	if (!flag112)
																	{
																		if (this.localAI[2] >= 0f)
																		{
																			float num1477 = 16f;
																			bool flag119 = false;
																			bool flag120 = false;
																			if (this.position.X > this.localAI[0] - num1477 && this.position.X < this.localAI[0] + num1477)
																			{
																				flag119 = true;
																			}
																			else if ((this.velocity.X < 0f && this.direction > 0) || (this.velocity.X > 0f && this.direction < 0))
																			{
																				flag119 = true;
																				num1477 += 24f;
																			}
																			if (this.position.Y > this.localAI[1] - num1477 && this.position.Y < this.localAI[1] + num1477)
																			{
																				flag120 = true;
																			}
																			if (flag119 && flag120)
																			{
																				this.localAI[2] += 1f;
																				if (this.localAI[2] >= 30f && num1477 == 16f)
																				{
																					flag111 = true;
																				}
																				if (this.localAI[2] >= 60f)
																				{
																					this.localAI[2] = -180f;
																					this.direction *= -1;
																					this.velocity.X = this.velocity.X * -1f;
																					this.collideX = false;
																				}
																			}
																			else
																			{
																				this.localAI[0] = this.position.X;
																				this.localAI[1] = this.position.Y;
																				this.localAI[2] = 0f;
																			}
																			if (flag117)
																			{
																				this.TargetClosest(true);
																			}
																		}
																		else
																		{
																			this.localAI[2] += 1f;
																			this.direction = ((Main.player[this.target].Center.X > base.Center.X) ? 1 : -1);
																		}
																	}
																	int num1478 = (int)((this.position.X + (float)(this.width / 2)) / 16f) + this.direction * 2;
																	int num1479 = (int)((this.position.Y + (float)this.height) / 16f);
																	int num1480 = (int)base.Bottom.Y / 16;
																	int num1481 = (int)base.Bottom.X / 16;
																	if (flag116)
																	{
																		this.velocity *= scaleFactor26;
																		return;
																	}
																	for (int num1482 = num1479; num1482 < num1479 + num1454; num1482++)
																	{
																		if (Main.tile[num1478, num1482] == null)
																		{
																			Main.tile[num1478, num1482] = new Tile();
																		}
																		if ((Main.tile[num1478, num1482].nactive() && Main.tileSolid[(int)Main.tile[num1478, num1482].type]) || Main.tile[num1478, num1482].liquid > 0)
																		{
																			if (num1482 <= num1479 + 1)
																			{
																				flag114 = true;
																			}
																			flag113 = false;
																			break;
																		}
																	}
																	for (int num1483 = num1480; num1483 < num1480 + num1456; num1483++)
																	{
																		if (Main.tile[num1481, num1483] == null)
																		{
																			Main.tile[num1481, num1483] = new Tile();
																		}
																		if ((Main.tile[num1481, num1483].nactive() && Main.tileSolid[(int)Main.tile[num1481, num1483].type]) || Main.tile[num1481, num1483].liquid > 0)
																		{
																			flag114 = true;
																			flag113 = false;
																			break;
																		}
																	}
																	if (flag115)
																	{
																		for (int num1484 = num1479 - num1455; num1484 < num1479; num1484++)
																		{
																			if (Main.tile[num1478, num1484] == null)
																			{
																				Main.tile[num1478, num1484] = new Tile();
																			}
																			if ((Main.tile[num1478, num1484].nactive() && Main.tileSolid[(int)Main.tile[num1478, num1484].type]) || Main.tile[num1478, num1484].liquid > 0)
																			{
																				flag114 = false;
																				flag111 = true;
																				break;
																			}
																		}
																	}
																	if (flag111)
																	{
																		flag114 = false;
																		flag113 = true;
																	}
																	if (flag113)
																	{
																		this.velocity.Y = this.velocity.Y + num1457;
																		if (this.velocity.Y > num1458)
																		{
																			this.velocity.Y = num1458;
																		}
																	}
																	else
																	{
																		if ((this.directionY < 0 && this.velocity.Y > 0f) || flag114)
																		{
																			this.velocity.Y = this.velocity.Y + num1459;
																		}
																		if (this.velocity.Y < num1460)
																		{
																			this.velocity.Y = num1460;
																		}
																	}
																	if (this.collideX)
																	{
																		this.velocity.X = this.oldVelocity.X * -0.4f;
																		if (this.direction == -1 && this.velocity.X > 0f && this.velocity.X < 1f)
																		{
																			this.velocity.X = 1f;
																		}
																		if (this.direction == 1 && this.velocity.X < 0f && this.velocity.X > -1f)
																		{
																			this.velocity.X = -1f;
																		}
																	}
																	if (this.collideY)
																	{
																		this.velocity.Y = this.oldVelocity.Y * -0.25f;
																		if (this.velocity.Y > 0f && this.velocity.Y < 1f)
																		{
																			this.velocity.Y = 1f;
																		}
																		if (this.velocity.Y < 0f && this.velocity.Y > -1f)
																		{
																			this.velocity.Y = -1f;
																		}
																	}
																	if (this.direction == -1 && this.velocity.X > -num1461)
																	{
																		this.velocity.X = this.velocity.X - num1462;
																		if (this.velocity.X > num1461)
																		{
																			this.velocity.X = this.velocity.X - num1462;
																		}
																		else if (this.velocity.X > 0f)
																		{
																			this.velocity.X = this.velocity.X + num1462 / 2f;
																		}
																		if (this.velocity.X < -num1461)
																		{
																			this.velocity.X = -num1461;
																		}
																	}
																	else if (this.direction == 1 && this.velocity.X < num1461)
																	{
																		this.velocity.X = this.velocity.X + num1462;
																		if (this.velocity.X < -num1461)
																		{
																			this.velocity.X = this.velocity.X + num1462;
																		}
																		else if (this.velocity.X < 0f)
																		{
																			this.velocity.X = this.velocity.X - num1462 / 2f;
																		}
																		if (this.velocity.X > num1461)
																		{
																			this.velocity.X = num1461;
																		}
																	}
																	if (this.directionY == -1 && this.velocity.Y > -num1463)
																	{
																		this.velocity.Y = this.velocity.Y - num1464;
																		if (this.velocity.Y > num1463)
																		{
																			this.velocity.Y = this.velocity.Y - num1464 * 1.25f;
																		}
																		else if (this.velocity.Y > 0f)
																		{
																			this.velocity.Y = this.velocity.Y + num1464 * 0.75f;
																		}
																		if (this.velocity.Y < -num1463)
																		{
																			this.velocity.Y = -num1461;
																			return;
																		}
																	}
																	else if (this.directionY == 1 && this.velocity.Y < num1463)
																	{
																		this.velocity.Y = this.velocity.Y + num1464;
																		if (this.velocity.Y < -num1463)
																		{
																			this.velocity.Y = this.velocity.Y + num1464 * 1.25f;
																		}
																		else if (this.velocity.Y < 0f)
																		{
																			this.velocity.Y = this.velocity.Y - num1464 * 0.75f;
																		}
																		if (this.velocity.Y > num1463)
																		{
																			this.velocity.Y = num1463;
																			return;
																		}
																	}
																}
																else if (this.aiStyle == 103)
																{
																	if (this.direction == 0)
																	{
																		this.TargetClosest(true);
																	}
																	Point pt = base.Center.ToTileCoordinates();
																	Tile tileSafely = Framing.GetTileSafely(pt);
																	bool flag121 = tileSafely.nactive() && (TileID.Sets.Conversion.Sand[(int)tileSafely.type] || TileID.Sets.Conversion.Sandstone[(int)tileSafely.type] || TileID.Sets.Conversion.HardenedSand[(int)tileSafely.type]);
																	flag121 |= this.wet;
																	bool flag122 = false;
																	this.TargetClosest(false);
																	Vector2 vector224 = this.targetRect.Center.ToVector2();
																	if (Main.player[this.target].velocity.Y > -0.1f && !Main.player[this.target].dead && base.Distance(vector224) > 150f)
																	{
																		flag122 = true;
																	}
																	if (this.localAI[0] == -1f && !flag121)
																	{
																		this.localAI[0] = 20f;
																	}
																	if (this.localAI[0] > 0f)
																	{
																		this.localAI[0] -= 1f;
																	}
																	if (flag121)
																	{
																		if (this.soundDelay == 0)
																		{
																			float num1485 = base.Distance(vector224) / 40f;
																			if (num1485 < 10f)
																			{
																				num1485 = 10f;
																			}
																			if (num1485 > 20f)
																			{
																				num1485 = 20f;
																			}
																			this.soundDelay = (int)num1485;
																			Main.PlaySound(15, base.Center, 4);
																		}
																		float arg_46CA6_0 = this.ai[1];
																		bool flag123 = false;
																		pt = (base.Center + new Vector2(0f, 24f)).ToTileCoordinates();
																		tileSafely = Framing.GetTileSafely(pt.X, pt.Y - 2);
																		if (tileSafely.nactive() && (TileID.Sets.Conversion.Sand[(int)tileSafely.type] || TileID.Sets.Conversion.Sandstone[(int)tileSafely.type] || TileID.Sets.Conversion.HardenedSand[(int)tileSafely.type]))
																		{
																			flag123 = true;
																		}
																		this.ai[1] = (float)flag123.ToInt();
																		if (this.ai[2] < 30f)
																		{
																			this.ai[2] += 1f;
																		}
																		if (flag122)
																		{
																			this.TargetClosest(true);
																			this.velocity.X = this.velocity.X + (float)this.direction * 0.15f;
																			this.velocity.Y = this.velocity.Y + (float)this.directionY * 0.15f;
																			if (this.velocity.X > 5f)
																			{
																				this.velocity.X = 5f;
																			}
																			if (this.velocity.X < -5f)
																			{
																				this.velocity.X = -5f;
																			}
																			if (this.velocity.Y > 3f)
																			{
																				this.velocity.Y = 3f;
																			}
																			if (this.velocity.Y < -3f)
																			{
																				this.velocity.Y = -3f;
																			}
																			Vector2 vec6 = base.Center + this.velocity.SafeNormalize(Vector2.Zero) * base.Size.Length() / 2f + this.velocity;
																			pt = vec6.ToTileCoordinates();
																			tileSafely = Framing.GetTileSafely(pt);
																			bool flag124 = tileSafely.nactive() && (TileID.Sets.Conversion.Sand[(int)tileSafely.type] || TileID.Sets.Conversion.Sandstone[(int)tileSafely.type] || TileID.Sets.Conversion.HardenedSand[(int)tileSafely.type]);
																			if (!flag124 && this.wet)
																			{
																				flag124 = (tileSafely.liquid > 0);
																			}
																			if (!flag124 && Math.Sign(this.velocity.X) == this.direction && base.Distance(vector224) < 400f && (this.ai[2] >= 30f || this.ai[2] < 0f))
																			{
																				if (this.localAI[0] == 0f)
																				{
																					Main.PlaySound(14, base.Center, 542);
																					this.localAI[0] = -1f;
																				}
																				this.ai[2] = -30f;
																				Vector2 vector225 = base.DirectionTo(vector224 + new Vector2(0f, -80f));
																				this.velocity = vector225 * 12f;
																			}
																		}
																		else
																		{
																			if (this.collideX)
																			{
																				this.velocity.X = this.velocity.X * -1f;
																				this.direction *= -1;
																				this.netUpdate = true;
																			}
																			if (this.collideY)
																			{
																				this.netUpdate = true;
																				this.velocity.Y = this.velocity.Y * -1f;
																				this.directionY = Math.Sign(this.velocity.Y);
																				this.ai[0] = (float)this.directionY;
																			}
																			float num1486 = 6f;
																			this.velocity.X = this.velocity.X + (float)this.direction * 0.1f;
																			if (this.velocity.X < -num1486 || this.velocity.X > num1486)
																			{
																				this.velocity.X = this.velocity.X * 0.95f;
																			}
																			if (flag123)
																			{
																				this.ai[0] = -1f;
																			}
																			else
																			{
																				this.ai[0] = 1f;
																			}
																			float num1487 = 0.06f;
																			float num1488 = 0.01f;
																			if (this.ai[0] == -1f)
																			{
																				this.velocity.Y = this.velocity.Y - num1488;
																				if (this.velocity.Y < -num1487)
																				{
																					this.ai[0] = 1f;
																				}
																			}
																			else
																			{
																				this.velocity.Y = this.velocity.Y + num1488;
																				if (this.velocity.Y > num1487)
																				{
																					this.ai[0] = -1f;
																				}
																			}
																			if (this.velocity.Y > 0.4f || this.velocity.Y < -0.4f)
																			{
																				this.velocity.Y = this.velocity.Y * 0.95f;
																			}
																		}
																	}
																	else
																	{
																		if (this.velocity.Y == 0f)
																		{
																			if (flag122)
																			{
																				this.TargetClosest(true);
																			}
																			float num1489 = 1f;
																			this.velocity.X = this.velocity.X + (float)this.direction * 0.1f;
																			if (this.velocity.X < -num1489 || this.velocity.X > num1489)
																			{
																				this.velocity.X = this.velocity.X * 0.95f;
																			}
																		}
																		this.velocity.Y = this.velocity.Y + 0.3f;
																		if (this.velocity.Y > 10f)
																		{
																			this.velocity.Y = 10f;
																		}
																		this.ai[0] = 1f;
																	}
																	this.rotation = this.velocity.Y * (float)this.direction * 0.1f;
																	if (this.rotation < -0.2f)
																	{
																		this.rotation = -0.2f;
																	}
																	if (this.rotation > 0.2f)
																	{
																		this.rotation = 0.2f;
																		return;
																	}
																}
																else
																{
																	if (this.aiStyle == 104)
																	{
																		this.active = false;
																		return;
																	}
																	if (this.aiStyle == 105)
																	{
																		if (this.alpha == 0)
																		{
																			Lighting.AddLight(base.Center, 1.3f, 0.5f, 1.5f);
																		}
																		if (this.ai[1] == 0f)
																		{
																			if (this.ai[0] > 0f)
																			{
																				this.ai[0] -= 1f;
																			}
																			if (this.ai[0] == 0f)
																			{
																				this.ai[0] = 180f;
																				this.netUpdate = true;
																				if (this.localAI[0] == 0f)
																				{
																					Point p;
																					Point p2;
																					StrayMethods.CheckArenaScore(base.Bottom, out p, out p2, 5, 10);
																					this.localAI[0] = 1f;
																					p.X += 2;
																					p2.X -= 2;
																					int num1490 = NPC.NewNPC(p.X, p.Y, 549, 0, 0f, 0f, 0f, 0f, 255);
																					Main.npc[num1490].Bottom = p.ToWorldCoordinates(8f, 16f);
																					num1490 = NPC.NewNPC(p2.X, p2.Y, 549, 0, 0f, 0f, 0f, 0f, 255);
																					Main.npc[num1490].Bottom = p2.ToWorldCoordinates(8f, 16f);
																					if (Main.netMode != 1)
																					{
																						DD2Event.FindArenaHitbox();
																						return;
																					}
																				}
																			}
																		}
																		else if (this.ai[1] == 2f)
																		{
																			this.dontTakeDamageFromHostiles = true;
																			this.life = this.lifeMax;
																			if (this.ai[0] == 3f)
																			{
																				Main.PlayTrackedSound(SoundID.DD2_WinScene, base.Center);
																				for (int num1491 = 0; num1491 < 200; num1491++)
																				{
																					NPC nPC8 = Main.npc[num1491];
																					if (nPC8.active && nPC8.type == 549)
																					{
																						nPC8.ai[1] = 1f;
																						nPC8.ai[0] = 0f;
																						nPC8.netUpdate = true;
																					}
																				}
																				if (Main.netMode != 1)
																				{
																					Projectile.NewProjectile(base.Center - Vector2.UnitY * 40f, Vector2.Zero, 713, 0, 0f, Main.myPlayer, 0f, 0f);
																				}
																			}
																			this.ai[0] += 1f;
																			this.noGravity = true;
																			if (this.ai[0] <= 120f)
																			{
																				float num1492 = this.ai[0] / 120f;
																				this.velocity.Y = (float)Math.Cos((double)(num1492 * 6.28318548f)) * 0.25f - 0.25f;
																			}
																			else
																			{
																				this.velocity.Y = 0f;
																			}
																			float num1493 = Utils.InverseLerp(480f, 570f, this.ai[0], true);
																			if (num1493 != 0f)
																			{
																				MoonlordDeathDrama.RequestLight(num1493, base.Center);
																			}
																			if (this.ai[0] >= 600f)
																			{
																				DD2Event.StopInvasion(true);
																				this.dontTakeDamage = false;
																				this.life = 0;
																				this.checkDead();
																				this.netUpdate = true;
																			}
																			bool flag125 = true;
																			if (flag125)
																			{
																				Vector2 value79 = base.Center + new Vector2(0f, -20f);
																				float num1494 = 0.99f;
																				if (this.ai[0] >= 60f)
																				{
																					num1494 = 0.79f;
																				}
																				if (this.ai[0] >= 120f)
																				{
																					num1494 = 0.58f;
																				}
																				if (this.ai[0] >= 180f)
																				{
																					num1494 = 0.43f;
																				}
																				if (this.ai[0] >= 240f)
																				{
																					num1494 = 0.33f;
																				}
																				if (this.ai[0] >= 540f)
																				{
																					num1494 = 1f;
																				}
																				for (int num1495 = 0; num1495 < 9; num1495++)
																				{
																					if (Main.rand.NextFloat() >= num1494)
																					{
																						float num1496 = Main.rand.NextFloat() * 6.28318548f;
																						float num1497 = Main.rand.NextFloat();
																						Vector2 position7 = value79 + num1496.ToRotationVector2() * (110f + 600f * num1497);
																						Vector2 vector226 = (num1496 - 3.14159274f).ToRotationVector2() * (14f + 0f * Main.rand.NextFloat() + 8f * num1497);
																						Dust dust21 = Dust.NewDustPerfect(position7, 264, new Vector2?(vector226), 0, default(Color), 1f);
																						dust21.scale = 0.9f;
																						dust21.fadeIn = 1.15f + num1497 * 0.3f;
																						dust21.color = new Color(1f, 1f, 1f, num1494) * (1f - num1494);
																						dust21.noGravity = true;
																						dust21.noLight = true;
																					}
																				}
																			}
																			if (this.ai[0] == 100f || this.ai[0] == 160f || this.ai[0] == 220f || this.ai[0] == 280f || this.ai[0] == 340f || this.ai[0] == 370f || this.ai[0] == 400f || this.ai[0] == 430f || this.ai[0] == 460f || this.ai[0] == 500f || this.ai[0] == 520f || this.ai[0] == 540f)
																			{
																				Main.rand.NextFloat();
																				float num1498 = 120f;
																				int num1499 = 0;
																				while ((float)num1499 < num1498)
																				{
																					float num1500 = (float)num1499 / num1498 * 6.28318548f;
																					float num1501 = Main.rand.NextFloat();
																					Vector2 position8 = base.Center + new Vector2(0f, -20f) + num1500.ToRotationVector2() * (810f - this.ai[0]);
																					Vector2 vector227 = (num1500 - 3.14159274f).ToRotationVector2() * (14f + 5f * (this.ai[0] / 600f) + 8f * num1501);
																					Dust dust22 = Dust.NewDustPerfect(position8, 264, new Vector2?(vector227), 0, default(Color), 1f);
																					dust22.scale = 0.9f;
																					dust22.fadeIn = 1.15f + num1501 * 0.3f;
																					dust22.color = new Color(1f, 1f, 1f, 0f);
																					dust22.noGravity = true;
																					dust22.noLight = true;
																					num1499++;
																				}
																				return;
																			}
																		}
																		else if (this.ai[1] == 1f)
																		{
																			this.dontTakeDamageFromHostiles = true;
																			this.life = this.lifeMax;
																			if (this.ai[0] == 0f)
																			{
																				for (int num1502 = 0; num1502 < 200; num1502++)
																				{
																					NPC nPC9 = Main.npc[num1502];
																					if (nPC9.active && nPC9.type == 549)
																					{
																						nPC9.ai[1] = 1f;
																						nPC9.ai[0] = 0f;
																						nPC9.netUpdate = true;
																					}
																				}
																				if (Main.netMode != 1)
																				{
																					DD2Event.ReportLoss();
																					Projectile.NewProjectile(base.Center - Vector2.UnitY * 40f, Vector2.Zero, 672, 0, 0f, Main.myPlayer, 0f, 0f);
																				}
																			}
																			this.ai[0] += 1f;
																			float num1503 = Utils.InverseLerp(480f, 600f, this.ai[0], true);
																			if (num1503 != 0f)
																			{
																				MoonlordDeathDrama.RequestLight(num1503, base.Center);
																			}
																			float num1504 = 96f;
																			if (this.ai[0] < num1504)
																			{
																				this.velocity.Y = MathHelper.Lerp(0f, -1f, this.ai[0] / num1504);
																			}
																			if (this.ai[0] >= num1504)
																			{
																				this.alpha += 50;
																				if (this.alpha > 255)
																				{
																					this.alpha = 255;
																				}
																			}
																			bool flag126 = true;
																			if (flag126)
																			{
																				Vector2 value80 = base.Center + new Vector2(0f, MathHelper.Lerp(0f, -70f, Utils.InverseLerp(0f, 300f, this.ai[0], true)));
																				float num1505 = 0.99f;
																				if (this.ai[0] >= 60f)
																				{
																					num1505 = 0.79f;
																				}
																				if (this.ai[0] >= 120f)
																				{
																					num1505 = 0.58f;
																				}
																				if (this.ai[0] >= 180f)
																				{
																					num1505 = 0.23f;
																				}
																				if (this.ai[0] >= 240f)
																				{
																					num1505 = 0.35f;
																				}
																				if (this.ai[0] >= 300f)
																				{
																					num1505 = 0.6f;
																				}
																				if (this.ai[0] >= 360f)
																				{
																					num1505 = 0.98f;
																				}
																				if (this.ai[0] >= 420f)
																				{
																					num1505 = 0.995f;
																				}
																				if (this.ai[0] >= 450f)
																				{
																					num1505 = 1f;
																				}
																				for (int num1506 = 0; num1506 < 12; num1506++)
																				{
																					if (Main.rand.NextFloat() >= num1505)
																					{
																						float num1507 = Main.rand.NextFloat() * 6.28318548f;
																						float num1508 = Main.rand.NextFloat();
																						Vector2 position9 = value80 + num1507.ToRotationVector2() * (70f + 600f * num1508);
																						Vector2 vector228 = (num1507 - 1.57079637f - 0.3926991f).ToRotationVector2() * (12f + 9f * Main.rand.NextFloat() + 4f * num1508);
																						Dust dust23 = Dust.NewDustPerfect(position9, 240, new Vector2?(vector228), 0, default(Color), 1f);
																						dust23.scale = 0.8f;
																						dust23.fadeIn = 0.95f + num1508 * 0.3f;
																						dust23.noGravity = true;
																					}
																				}
																			}
																			if (this.ai[0] >= 600f)
																			{
																				DD2Event.StopInvasion(false);
																				Filters.Scene.Deactivate("CrystalDestructionVortex", new object[0]);
																				Filters.Scene.Deactivate("CrystalDestructionColor", new object[0]);
																				Filters.Scene.Deactivate("CrystalWin", new object[0]);
																				this.dontTakeDamage = false;
																				this.life = 0;
																				this.checkDead();
																				this.netUpdate = true;
																				return;
																			}
																		}
																	}
																	else if (this.aiStyle == 106)
																	{
																		if (this.alpha == 0)
																		{
																			Lighting.AddLight(base.Center, 0.5f, 0.1f, 0.3f);
																		}
																		if (this.ai[1] == 0f)
																		{
																			if (this.localAI[0] == 0f)
																			{
																				Main.PlayTrackedSound(SoundID.DD2_EtherianPortalOpen, base.Center);
																				this.localAI[3] = SlotId.Invalid.ToFloat();
																			}
																			if (this.localAI[0] > 150f && Main.GetActiveSound(SlotId.FromFloat(this.localAI[3])) == null)
																			{
																				this.localAI[3] = Main.PlayTrackedSound(SoundID.DD2_EtherianPortalIdleLoop, base.Center).ToFloat();
																			}
																			if (!DD2Event.EnemySpawningIsOnHold)
																			{
																				this.ai[0] += 1f;
																			}
																			if (this.ai[0] >= (float)DD2Event.LaneSpawnRate)
																			{
																				if (this.ai[0] >= (float)(DD2Event.LaneSpawnRate * 3))
																				{
																					this.ai[0] = 0f;
																				}
																				this.netUpdate = true;
																				if (Main.netMode != 1 && (int)this.ai[0] % DD2Event.LaneSpawnRate == 0)
																				{
																					DD2Event.SpawnMonsterFromGate(base.Bottom);
																					if (DD2Event.EnemySpawningIsOnHold)
																					{
																						this.ai[0] += 1f;
																					}
																				}
																			}
																			this.localAI[0] += 1f;
																			if (this.localAI[0] > 180f)
																			{
																				this.localAI[0] = 180f;
																			}
																			if (Main.netMode != 1 && this.localAI[0] >= 180f)
																			{
																				bool flag127 = NPC.AnyNPCs(548);
																				if (flag127)
																				{
																					this.dontTakeDamage = true;
																					return;
																				}
																				this.ai[1] = 1f;
																				this.ai[0] = 0f;
																				this.dontTakeDamage = true;
																				return;
																			}
																		}
																		else if (this.ai[1] == 1f)
																		{
																			this.ai[0] += 1f;
																			this.scale = MathHelper.Lerp(1f, 0.05f, Utils.InverseLerp(500f, 600f, this.ai[0], true));
																			if (Main.GetActiveSound(SlotId.FromFloat(this.localAI[3])) == null)
																			{
																				this.localAI[3] = Main.PlayTrackedSound(SoundID.DD2_EtherianPortalIdleLoop, base.Center).ToFloat();
																			}
																			ActiveSound activeSound = Main.GetActiveSound(SlotId.FromFloat(this.localAI[3]));
																			if (activeSound != null)
																			{
																				activeSound.Volume = this.scale;
																			}
																			if (this.ai[0] >= 550f)
																			{
																				this.dontTakeDamage = false;
																				this.life = 0;
																				this.checkDead();
																				this.netUpdate = true;
																				if (activeSound != null)
																				{
																					activeSound.Stop();
																					return;
																				}
																			}
																		}
																	}
																	else
																	{
																		if (this.aiStyle == 107)
																		{
																			this.AI_107_ImprovedWalkers();
																			return;
																		}
																		if (this.aiStyle == 108)
																		{
																			this.AI_108_DivingFlyer();
																			return;
																		}
																		if (this.aiStyle == 109)
																		{
																			this.AI_109_DarkMage();
																			return;
																		}
																		if (this.aiStyle == 110)
																		{
																			this.AI_110_Betsy();
																			return;
																		}
																		if (this.aiStyle == 111)
																		{
																			this.AI_111_DD2LightningBug();
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}

		private void AI_069_DukeFishron()
		{
			bool expertMode = Main.expertMode;
			float num = expertMode ? (0.6f * Main.damageMultiplier) : 1f;
			bool flag = (double)this.life <= (double)this.lifeMax * 0.5;
			bool flag2 = expertMode && (double)this.life <= (double)this.lifeMax * 0.15;
			bool flag3 = this.ai[0] > 4f;
			bool flag4 = this.ai[0] > 9f;
			bool flag5 = this.ai[3] < 10f;
			if (flag4)
			{
				this.damage = (int)((float)this.defDamage * 1.1f * num);
				this.defense = 0;
			}
			else if (flag3)
			{
				this.damage = (int)((float)this.defDamage * 1.2f * num);
				this.defense = (int)((float)this.defDefense * 0.8f);
			}
			else
			{
				this.damage = this.defDamage;
				this.defense = this.defDefense;
			}
			int num2 = expertMode ? 40 : 60;
			float num3 = expertMode ? 0.55f : 0.45f;
			float scaleFactor = expertMode ? 8.5f : 7.5f;
			if (flag4)
			{
				num3 = 0.7f;
				scaleFactor = 12f;
				num2 = 30;
			}
			else if (flag3 && flag5)
			{
				num3 = (expertMode ? 0.6f : 0.5f);
				scaleFactor = (expertMode ? 10f : 8f);
				num2 = (expertMode ? 40 : 20);
			}
			else if (flag5 && !flag3 && !flag4)
			{
				num2 = 30;
			}
			int num4 = expertMode ? 28 : 30;
			float num5 = expertMode ? 17f : 16f;
			if (flag4)
			{
				num4 = 25;
				num5 = 27f;
			}
			else if (flag5 && flag3)
			{
				num4 = (expertMode ? 27 : 30);
				if (expertMode)
				{
					num5 = 21f;
				}
			}
			int num6 = 80;
			int num7 = 4;
			float num8 = 0.3f;
			float scaleFactor2 = 5f;
			int num9 = 90;
			int num10 = 180;
			int num11 = 180;
			int num12 = 30;
			int num13 = 120;
			int num14 = 4;
			float scaleFactor3 = 6f;
			float scaleFactor4 = 20f;
			float num15 = 6.28318548f / (float)(num13 / 2);
			int num16 = 75;
			Vector2 vector = base.Center;
			Player player = Main.player[this.target];
			if (this.target < 0 || this.target == 255 || player.dead || !player.active)
			{
				this.TargetClosest(true);
				player = Main.player[this.target];
				this.netUpdate = true;
			}
			if (player.dead || Vector2.Distance(player.Center, vector) > 5600f)
			{
				this.velocity.Y = this.velocity.Y - 0.4f;
				if (this.timeLeft > 10)
				{
					this.timeLeft = 10;
				}
				if (this.ai[0] > 4f)
				{
					this.ai[0] = 5f;
				}
				else
				{
					this.ai[0] = 0f;
				}
				this.ai[2] = 0f;
			}
			bool flag6 = player.position.Y < 800f || (double)player.position.Y > Main.worldSurface * 16.0 || (player.position.X > 6400f && player.position.X < (float)(Main.maxTilesX * 16 - 6400));
			if (flag6)
			{
				num2 = 20;
				this.damage = this.defDamage * 2;
				this.defense = this.defDefense * 2;
				this.ai[3] = 0f;
				num5 += 6f;
			}
			if (this.localAI[0] == 0f)
			{
				this.localAI[0] = 1f;
				this.alpha = 255;
				this.rotation = 0f;
				if (Main.netMode != 1)
				{
					this.ai[0] = -1f;
					this.netUpdate = true;
				}
			}
			float num17 = (float)Math.Atan2((double)(player.Center.Y - vector.Y), (double)(player.Center.X - vector.X));
			if (this.spriteDirection == 1)
			{
				num17 += 3.14159274f;
			}
			if (num17 < 0f)
			{
				num17 += 6.28318548f;
			}
			if (num17 > 6.28318548f)
			{
				num17 -= 6.28318548f;
			}
			if (this.ai[0] == -1f)
			{
				num17 = 0f;
			}
			if (this.ai[0] == 3f)
			{
				num17 = 0f;
			}
			if (this.ai[0] == 4f)
			{
				num17 = 0f;
			}
			if (this.ai[0] == 8f)
			{
				num17 = 0f;
			}
			float num18 = 0.04f;
			if (this.ai[0] == 1f || this.ai[0] == 6f)
			{
				num18 = 0f;
			}
			if (this.ai[0] == 7f)
			{
				num18 = 0f;
			}
			if (this.ai[0] == 3f)
			{
				num18 = 0.01f;
			}
			if (this.ai[0] == 4f)
			{
				num18 = 0.01f;
			}
			if (this.ai[0] == 8f)
			{
				num18 = 0.01f;
			}
			if (this.rotation < num17)
			{
				if ((double)(num17 - this.rotation) > 3.1415926535897931)
				{
					this.rotation -= num18;
				}
				else
				{
					this.rotation += num18;
				}
			}
			if (this.rotation > num17)
			{
				if ((double)(this.rotation - num17) > 3.1415926535897931)
				{
					this.rotation += num18;
				}
				else
				{
					this.rotation -= num18;
				}
			}
			if (this.rotation > num17 - num18 && this.rotation < num17 + num18)
			{
				this.rotation = num17;
			}
			if (this.rotation < 0f)
			{
				this.rotation += 6.28318548f;
			}
			if (this.rotation > 6.28318548f)
			{
				this.rotation -= 6.28318548f;
			}
			if (this.rotation > num17 - num18 && this.rotation < num17 + num18)
			{
				this.rotation = num17;
			}
			if (this.ai[0] != -1f && this.ai[0] < 9f)
			{
				bool flag7 = Collision.SolidCollision(this.position, this.width, this.height);
				if (flag7)
				{
					this.alpha += 15;
				}
				else
				{
					this.alpha -= 15;
				}
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				if (this.alpha > 150)
				{
					this.alpha = 150;
				}
			}
			if (this.ai[0] == -1f)
			{
				this.velocity *= 0.98f;
				int num19 = Math.Sign(player.Center.X - vector.X);
				if (num19 != 0)
				{
					this.direction = num19;
					this.spriteDirection = -this.direction;
				}
				if (this.ai[2] > 20f)
				{
					this.velocity.Y = -2f;
					this.alpha -= 5;
					bool flag8 = Collision.SolidCollision(this.position, this.width, this.height);
					if (flag8)
					{
						this.alpha += 15;
					}
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
					if (this.alpha > 150)
					{
						this.alpha = 150;
					}
				}
				if (this.ai[2] == (float)(num9 - 30))
				{
					int num20 = 36;
					for (int i = 0; i < num20; i++)
					{
						Vector2 vector2 = Vector2.Normalize(this.velocity) * new Vector2((float)this.width / 2f, (float)this.height) * 0.75f * 0.5f;
						vector2 = vector2.RotatedBy((double)((float)(i - (num20 / 2 - 1)) * 6.28318548f / (float)num20), default(Vector2)) + base.Center;
						Vector2 value = vector2 - base.Center;
						int num21 = Dust.NewDust(vector2 + value, 0, 0, 172, value.X * 2f, value.Y * 2f, 100, default(Color), 1.4f);
						Main.dust[num21].noGravity = true;
						Main.dust[num21].noLight = true;
						Main.dust[num21].velocity = Vector2.Normalize(value) * 3f;
					}
					Main.PlaySound(29, (int)vector.X, (int)vector.Y, 20, 1f, 0f);
				}
				this.ai[2] += 1f;
				if (this.ai[2] >= (float)num16)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.netUpdate = true;
					return;
				}
			}
			else if (this.ai[0] == 0f && !player.dead)
			{
				if (this.ai[1] == 0f)
				{
					this.ai[1] = (float)(300 * Math.Sign((vector - player.Center).X));
				}
				Vector2 value2 = player.Center + new Vector2(this.ai[1], -200f) - vector;
				Vector2 vector3 = Vector2.Normalize(value2 - this.velocity) * scaleFactor;
				if (this.velocity.X < vector3.X)
				{
					this.velocity.X = this.velocity.X + num3;
					if (this.velocity.X < 0f && vector3.X > 0f)
					{
						this.velocity.X = this.velocity.X + num3;
					}
				}
				else if (this.velocity.X > vector3.X)
				{
					this.velocity.X = this.velocity.X - num3;
					if (this.velocity.X > 0f && vector3.X < 0f)
					{
						this.velocity.X = this.velocity.X - num3;
					}
				}
				if (this.velocity.Y < vector3.Y)
				{
					this.velocity.Y = this.velocity.Y + num3;
					if (this.velocity.Y < 0f && vector3.Y > 0f)
					{
						this.velocity.Y = this.velocity.Y + num3;
					}
				}
				else if (this.velocity.Y > vector3.Y)
				{
					this.velocity.Y = this.velocity.Y - num3;
					if (this.velocity.Y > 0f && vector3.Y < 0f)
					{
						this.velocity.Y = this.velocity.Y - num3;
					}
				}
				int num22 = Math.Sign(player.Center.X - vector.X);
				if (num22 != 0)
				{
					if (this.ai[2] == 0f && num22 != this.direction)
					{
						this.rotation += 3.14159274f;
					}
					this.direction = num22;
					if (this.spriteDirection != -this.direction)
					{
						this.rotation += 3.14159274f;
					}
					this.spriteDirection = -this.direction;
				}
				this.ai[2] += 1f;
				if (this.ai[2] >= (float)num2)
				{
					int num23 = 0;
					switch ((int)this.ai[3])
					{
					case 0:
					case 1:
					case 2:
					case 3:
					case 4:
					case 5:
					case 6:
					case 7:
					case 8:
					case 9:
						num23 = 1;
						break;
					case 10:
						this.ai[3] = 1f;
						num23 = 2;
						break;
					case 11:
						this.ai[3] = 0f;
						num23 = 3;
						break;
					}
					if (flag)
					{
						num23 = 4;
					}
					if (num23 == 1)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.velocity = Vector2.Normalize(player.Center - vector) * num5;
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X);
						if (num22 != 0)
						{
							this.direction = num22;
							if (this.spriteDirection == 1)
							{
								this.rotation += 3.14159274f;
							}
							this.spriteDirection = -this.direction;
						}
					}
					else if (num23 == 2)
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
					}
					else if (num23 == 3)
					{
						this.ai[0] = 3f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
					}
					else if (num23 == 4)
					{
						this.ai[0] = 4f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
					}
					this.netUpdate = true;
					return;
				}
			}
			else if (this.ai[0] == 1f)
			{
				int num24 = 7;
				for (int j = 0; j < num24; j++)
				{
					Vector2 vector4 = Vector2.Normalize(this.velocity) * new Vector2((float)(this.width + 50) / 2f, (float)this.height) * 0.75f;
					vector4 = vector4.RotatedBy((double)(j - (num24 / 2 - 1)) * 3.1415926535897931 / (double)((float)num24), default(Vector2)) + vector;
					Vector2 value3 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - 1.57079637f).ToRotationVector2() * (float)Main.rand.Next(3, 8);
					int num25 = Dust.NewDust(vector4 + value3, 0, 0, 172, value3.X * 2f, value3.Y * 2f, 100, default(Color), 1.4f);
					Main.dust[num25].noGravity = true;
					Main.dust[num25].noLight = true;
					Main.dust[num25].velocity /= 4f;
					Main.dust[num25].velocity -= this.velocity;
				}
				this.ai[2] += 1f;
				if (this.ai[2] >= (float)num4)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] += 2f;
					this.netUpdate = true;
					return;
				}
			}
			else if (this.ai[0] == 2f)
			{
				if (this.ai[1] == 0f)
				{
					this.ai[1] = (float)(300 * Math.Sign((vector - player.Center).X));
				}
				Vector2 value4 = player.Center + new Vector2(this.ai[1], -200f) - vector;
				Vector2 vector5 = Vector2.Normalize(value4 - this.velocity) * scaleFactor2;
				if (this.velocity.X < vector5.X)
				{
					this.velocity.X = this.velocity.X + num8;
					if (this.velocity.X < 0f && vector5.X > 0f)
					{
						this.velocity.X = this.velocity.X + num8;
					}
				}
				else if (this.velocity.X > vector5.X)
				{
					this.velocity.X = this.velocity.X - num8;
					if (this.velocity.X > 0f && vector5.X < 0f)
					{
						this.velocity.X = this.velocity.X - num8;
					}
				}
				if (this.velocity.Y < vector5.Y)
				{
					this.velocity.Y = this.velocity.Y + num8;
					if (this.velocity.Y < 0f && vector5.Y > 0f)
					{
						this.velocity.Y = this.velocity.Y + num8;
					}
				}
				else if (this.velocity.Y > vector5.Y)
				{
					this.velocity.Y = this.velocity.Y - num8;
					if (this.velocity.Y > 0f && vector5.Y < 0f)
					{
						this.velocity.Y = this.velocity.Y - num8;
					}
				}
				if (this.ai[2] == 0f)
				{
					Main.PlaySound(29, (int)vector.X, (int)vector.Y, 20, 1f, 0f);
				}
				if (this.ai[2] % (float)num7 == 0f)
				{
					Main.PlaySound(4, (int)base.Center.X, (int)base.Center.Y, 19, 1f, 0f);
					if (Main.netMode != 1)
					{
						Vector2 vector6 = Vector2.Normalize(player.Center - vector) * (float)(this.width + 20) / 2f + vector;
						NPC.NewNPC((int)vector6.X, (int)vector6.Y + 45, 371, 0, 0f, 0f, 0f, 0f, 255);
					}
				}
				int num26 = Math.Sign(player.Center.X - vector.X);
				if (num26 != 0)
				{
					this.direction = num26;
					if (this.spriteDirection != -this.direction)
					{
						this.rotation += 3.14159274f;
					}
					this.spriteDirection = -this.direction;
				}
				this.ai[2] += 1f;
				if (this.ai[2] >= (float)num6)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.netUpdate = true;
					return;
				}
			}
			else if (this.ai[0] == 3f)
			{
				this.velocity *= 0.98f;
				this.velocity.Y = MathHelper.Lerp(this.velocity.Y, 0f, 0.02f);
				if (this.ai[2] == (float)(num9 - 30))
				{
					Main.PlaySound(29, (int)vector.X, (int)vector.Y, 9, 1f, 0f);
				}
				if (Main.netMode != 1 && this.ai[2] == (float)(num9 - 30))
				{
					Vector2 vector7 = this.rotation.ToRotationVector2() * (Vector2.UnitX * (float)this.direction) * (float)(this.width + 20) / 2f + vector;
					Projectile.NewProjectile(vector7.X, vector7.Y, (float)(this.direction * 2), 8f, 385, 0, 0f, Main.myPlayer, 0f, 0f);
					Projectile.NewProjectile(vector7.X, vector7.Y, (float)(-(float)this.direction * 2), 8f, 385, 0, 0f, Main.myPlayer, 0f, 0f);
				}
				this.ai[2] += 1f;
				if (this.ai[2] >= (float)num9)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.netUpdate = true;
					return;
				}
			}
			else if (this.ai[0] == 4f)
			{
				this.velocity *= 0.98f;
				this.velocity.Y = MathHelper.Lerp(this.velocity.Y, 0f, 0.02f);
				if (this.ai[2] == (float)(num10 - 60))
				{
					Main.PlaySound(29, (int)vector.X, (int)vector.Y, 20, 1f, 0f);
				}
				this.ai[2] += 1f;
				if (this.ai[2] >= (float)num10)
				{
					this.ai[0] = 5f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					this.netUpdate = true;
					return;
				}
			}
			else if (this.ai[0] == 5f && !player.dead)
			{
				if (this.ai[1] == 0f)
				{
					this.ai[1] = (float)(300 * Math.Sign((vector - player.Center).X));
				}
				Vector2 value5 = player.Center + new Vector2(this.ai[1], -200f) - vector;
				Vector2 vector8 = Vector2.Normalize(value5 - this.velocity) * scaleFactor;
				if (this.velocity.X < vector8.X)
				{
					this.velocity.X = this.velocity.X + num3;
					if (this.velocity.X < 0f && vector8.X > 0f)
					{
						this.velocity.X = this.velocity.X + num3;
					}
				}
				else if (this.velocity.X > vector8.X)
				{
					this.velocity.X = this.velocity.X - num3;
					if (this.velocity.X > 0f && vector8.X < 0f)
					{
						this.velocity.X = this.velocity.X - num3;
					}
				}
				if (this.velocity.Y < vector8.Y)
				{
					this.velocity.Y = this.velocity.Y + num3;
					if (this.velocity.Y < 0f && vector8.Y > 0f)
					{
						this.velocity.Y = this.velocity.Y + num3;
					}
				}
				else if (this.velocity.Y > vector8.Y)
				{
					this.velocity.Y = this.velocity.Y - num3;
					if (this.velocity.Y > 0f && vector8.Y < 0f)
					{
						this.velocity.Y = this.velocity.Y - num3;
					}
				}
				int num27 = Math.Sign(player.Center.X - vector.X);
				if (num27 != 0)
				{
					if (this.ai[2] == 0f && num27 != this.direction)
					{
						this.rotation += 3.14159274f;
					}
					this.direction = num27;
					if (this.spriteDirection != -this.direction)
					{
						this.rotation += 3.14159274f;
					}
					this.spriteDirection = -this.direction;
				}
				this.ai[2] += 1f;
				if (this.ai[2] >= (float)num2)
				{
					int num28 = 0;
					switch ((int)this.ai[3])
					{
					case 0:
					case 1:
					case 2:
					case 3:
					case 4:
					case 5:
						num28 = 1;
						break;
					case 6:
						this.ai[3] = 1f;
						num28 = 2;
						break;
					case 7:
						this.ai[3] = 0f;
						num28 = 3;
						break;
					}
					if (flag2)
					{
						num28 = 4;
					}
					if (num28 == 1)
					{
						this.ai[0] = 6f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.velocity = Vector2.Normalize(player.Center - vector) * num5;
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X);
						if (num27 != 0)
						{
							this.direction = num27;
							if (this.spriteDirection == 1)
							{
								this.rotation += 3.14159274f;
							}
							this.spriteDirection = -this.direction;
						}
					}
					else if (num28 == 2)
					{
						this.velocity = Vector2.Normalize(player.Center - vector) * scaleFactor4;
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X);
						if (num27 != 0)
						{
							this.direction = num27;
							if (this.spriteDirection == 1)
							{
								this.rotation += 3.14159274f;
							}
							this.spriteDirection = -this.direction;
						}
						this.ai[0] = 7f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
					}
					else if (num28 == 3)
					{
						this.ai[0] = 8f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
					}
					else if (num28 == 4)
					{
						this.ai[0] = 9f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
					}
					this.netUpdate = true;
					return;
				}
			}
			else if (this.ai[0] == 6f)
			{
				int num29 = 7;
				for (int k = 0; k < num29; k++)
				{
					Vector2 vector9 = Vector2.Normalize(this.velocity) * new Vector2((float)(this.width + 50) / 2f, (float)this.height) * 0.75f;
					vector9 = vector9.RotatedBy((double)(k - (num29 / 2 - 1)) * 3.1415926535897931 / (double)((float)num29), default(Vector2)) + vector;
					Vector2 value6 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - 1.57079637f).ToRotationVector2() * (float)Main.rand.Next(3, 8);
					int num30 = Dust.NewDust(vector9 + value6, 0, 0, 172, value6.X * 2f, value6.Y * 2f, 100, default(Color), 1.4f);
					Main.dust[num30].noGravity = true;
					Main.dust[num30].noLight = true;
					Main.dust[num30].velocity /= 4f;
					Main.dust[num30].velocity -= this.velocity;
				}
				this.ai[2] += 1f;
				if (this.ai[2] >= (float)num4)
				{
					this.ai[0] = 5f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] += 2f;
					this.netUpdate = true;
					return;
				}
			}
			else if (this.ai[0] == 7f)
			{
				if (this.ai[2] == 0f)
				{
					Main.PlaySound(29, (int)vector.X, (int)vector.Y, 20, 1f, 0f);
				}
				if (this.ai[2] % (float)num14 == 0f)
				{
					Main.PlaySound(4, (int)base.Center.X, (int)base.Center.Y, 19, 1f, 0f);
					if (Main.netMode != 1)
					{
						Vector2 vector10 = Vector2.Normalize(this.velocity) * (float)(this.width + 20) / 2f + vector;
						int num31 = NPC.NewNPC((int)vector10.X, (int)vector10.Y + 45, 371, 0, 0f, 0f, 0f, 0f, 255);
						Main.npc[num31].target = this.target;
						Main.npc[num31].velocity = Vector2.Normalize(this.velocity).RotatedBy((double)(1.57079637f * (float)this.direction), default(Vector2)) * scaleFactor3;
						Main.npc[num31].netUpdate = true;
						Main.npc[num31].ai[3] = (float)Main.rand.Next(80, 121) / 100f;
					}
				}
				this.velocity = this.velocity.RotatedBy((double)(-(double)num15 * (float)this.direction), default(Vector2));
				this.rotation -= num15 * (float)this.direction;
				this.ai[2] += 1f;
				if (this.ai[2] >= (float)num13)
				{
					this.ai[0] = 5f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.netUpdate = true;
					return;
				}
			}
			else if (this.ai[0] == 8f)
			{
				this.velocity *= 0.98f;
				this.velocity.Y = MathHelper.Lerp(this.velocity.Y, 0f, 0.02f);
				if (this.ai[2] == (float)(num9 - 30))
				{
					Main.PlaySound(29, (int)vector.X, (int)vector.Y, 20, 1f, 0f);
				}
				if (Main.netMode != 1 && this.ai[2] == (float)(num9 - 30))
				{
					Projectile.NewProjectile(vector.X, vector.Y, 0f, 0f, 385, 0, 0f, Main.myPlayer, 1f, (float)(this.target + 1));
				}
				this.ai[2] += 1f;
				if (this.ai[2] >= (float)num9)
				{
					this.ai[0] = 5f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.netUpdate = true;
					return;
				}
			}
			else if (this.ai[0] == 9f)
			{
				if (this.ai[2] < (float)(num11 - 90))
				{
					bool flag9 = Collision.SolidCollision(this.position, this.width, this.height);
					if (flag9)
					{
						this.alpha += 15;
					}
					else
					{
						this.alpha -= 15;
					}
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
					if (this.alpha > 150)
					{
						this.alpha = 150;
					}
				}
				else if (this.alpha < 255)
				{
					this.alpha += 4;
					if (this.alpha > 255)
					{
						this.alpha = 255;
					}
				}
				this.velocity *= 0.98f;
				this.velocity.Y = MathHelper.Lerp(this.velocity.Y, 0f, 0.02f);
				if (this.ai[2] == (float)(num11 - 60))
				{
					Main.PlaySound(29, (int)vector.X, (int)vector.Y, 20, 1f, 0f);
				}
				this.ai[2] += 1f;
				if (this.ai[2] >= (float)num11)
				{
					this.ai[0] = 10f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					this.netUpdate = true;
					return;
				}
			}
			else if (this.ai[0] == 10f && !player.dead)
			{
				this.dontTakeDamage = false;
				this.chaseable = false;
				if (this.alpha < 255)
				{
					this.alpha += 25;
					if (this.alpha > 255)
					{
						this.alpha = 255;
					}
				}
				if (this.ai[1] == 0f)
				{
					this.ai[1] = (float)(360 * Math.Sign((vector - player.Center).X));
				}
				Vector2 value7 = player.Center + new Vector2(this.ai[1], -200f) - vector;
				Vector2 desiredVelocity = Vector2.Normalize(value7 - this.velocity) * scaleFactor;
				this.SimpleFlyMovement(desiredVelocity, num3);
				int num32 = Math.Sign(player.Center.X - vector.X);
				if (num32 != 0)
				{
					if (this.ai[2] == 0f && num32 != this.direction)
					{
						this.rotation += 3.14159274f;
						for (int l = 0; l < this.oldPos.Length; l++)
						{
							this.oldPos[l] = Vector2.Zero;
						}
					}
					this.direction = num32;
					if (this.spriteDirection != -this.direction)
					{
						this.rotation += 3.14159274f;
					}
					this.spriteDirection = -this.direction;
				}
				this.ai[2] += 1f;
				if (this.ai[2] >= (float)num2)
				{
					int num33 = 0;
					switch ((int)this.ai[3])
					{
					case 0:
					case 2:
					case 3:
					case 5:
					case 6:
					case 7:
						num33 = 1;
						break;
					case 1:
					case 4:
					case 8:
						num33 = 2;
						break;
					}
					if (num33 == 1)
					{
						this.ai[0] = 11f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.velocity = Vector2.Normalize(player.Center - vector) * num5;
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X);
						if (num32 != 0)
						{
							this.direction = num32;
							if (this.spriteDirection == 1)
							{
								this.rotation += 3.14159274f;
							}
							this.spriteDirection = -this.direction;
						}
					}
					else if (num33 == 2)
					{
						this.ai[0] = 12f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
					}
					else if (num33 == 3)
					{
						this.ai[0] = 13f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
					}
					this.netUpdate = true;
					return;
				}
			}
			else if (this.ai[0] == 11f)
			{
				this.dontTakeDamage = false;
				this.chaseable = true;
				this.alpha -= 25;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				int num34 = 7;
				for (int m = 0; m < num34; m++)
				{
					Vector2 vector11 = Vector2.Normalize(this.velocity) * new Vector2((float)(this.width + 50) / 2f, (float)this.height) * 0.75f;
					vector11 = vector11.RotatedBy((double)(m - (num34 / 2 - 1)) * 3.1415926535897931 / (double)((float)num34), default(Vector2)) + vector;
					Vector2 value8 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - 1.57079637f).ToRotationVector2() * (float)Main.rand.Next(3, 8);
					int num35 = Dust.NewDust(vector11 + value8, 0, 0, 172, value8.X * 2f, value8.Y * 2f, 100, default(Color), 1.4f);
					Main.dust[num35].noGravity = true;
					Main.dust[num35].noLight = true;
					Main.dust[num35].velocity /= 4f;
					Main.dust[num35].velocity -= this.velocity;
				}
				this.ai[2] += 1f;
				if (this.ai[2] >= (float)num4)
				{
					this.ai[0] = 10f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] += 1f;
					this.netUpdate = true;
					return;
				}
			}
			else if (this.ai[0] == 12f)
			{
				this.dontTakeDamage = true;
				this.chaseable = false;
				if (this.alpha < 255)
				{
					this.alpha += 17;
					if (this.alpha > 255)
					{
						this.alpha = 255;
					}
				}
				this.velocity *= 0.98f;
				this.velocity.Y = MathHelper.Lerp(this.velocity.Y, 0f, 0.02f);
				if (this.ai[2] == (float)(num12 / 2))
				{
					Main.PlaySound(29, (int)vector.X, (int)vector.Y, 20, 1f, 0f);
				}
				if (Main.netMode != 1 && this.ai[2] == (float)(num12 / 2))
				{
					if (this.ai[1] == 0f)
					{
						this.ai[1] = (float)(300 * Math.Sign((vector - player.Center).X));
					}
					Vector2 center = player.Center + new Vector2(-this.ai[1], -200f);
					vector = (base.Center = center);
					int num36 = Math.Sign(player.Center.X - vector.X);
					if (num36 != 0)
					{
						if (this.ai[2] == 0f && num36 != this.direction)
						{
							this.rotation += 3.14159274f;
							for (int n = 0; n < this.oldPos.Length; n++)
							{
								this.oldPos[n] = Vector2.Zero;
							}
						}
						this.direction = num36;
						if (this.spriteDirection != -this.direction)
						{
							this.rotation += 3.14159274f;
						}
						this.spriteDirection = -this.direction;
					}
				}
				this.ai[2] += 1f;
				if (this.ai[2] >= (float)num12)
				{
					this.ai[0] = 10f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] += 1f;
					if (this.ai[3] >= 9f)
					{
						this.ai[3] = 0f;
					}
					this.netUpdate = true;
					return;
				}
			}
			else if (this.ai[0] == 13f)
			{
				if (this.ai[2] == 0f)
				{
					Main.PlaySound(29, (int)vector.X, (int)vector.Y, 20, 1f, 0f);
				}
				this.velocity = this.velocity.RotatedBy((double)(-(double)num15 * (float)this.direction), default(Vector2));
				this.rotation -= num15 * (float)this.direction;
				this.ai[2] += 1f;
				if (this.ai[2] >= (float)num13)
				{
					this.ai[0] = 10f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] += 1f;
					this.netUpdate = true;
				}
			}
		}

		private void AI_037_Destroyer()
		{
			if (this.ai[3] > 0f)
			{
				this.realLife = (int)this.ai[3];
			}
			if (this.target < 0 || this.target == 255 || Main.player[this.target].dead)
			{
				this.TargetClosest(true);
			}
			if (this.type >= 134 && this.type <= 136)
			{
				this.velocity.Length();
				if (this.type == 134 || (this.type != 134 && Main.npc[(int)this.ai[1]].alpha < 128))
				{
					if (this.alpha != 0)
					{
						for (int i = 0; i < 2; i++)
						{
							int num = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 182, 0f, 0f, 100, default(Color), 2f);
							Main.dust[num].noGravity = true;
							Main.dust[num].noLight = true;
						}
					}
					this.alpha -= 42;
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
				}
			}
			if (this.type > 134)
			{
				bool flag = false;
				if (this.ai[1] <= 0f)
				{
					flag = true;
				}
				else if (Main.npc[(int)this.ai[1]].life <= 0)
				{
					flag = true;
				}
				if (flag)
				{
					this.life = 0;
					this.HitEffect(0, 10.0);
					this.checkDead();
				}
			}
			if (Main.netMode != 1)
			{
				if (this.ai[0] == 0f && this.type == 134)
				{
					this.ai[3] = (float)this.whoAmI;
					this.realLife = this.whoAmI;
					int num2 = this.whoAmI;
					int num3 = 80;
					for (int j = 0; j <= num3; j++)
					{
						int num4 = 135;
						if (j == num3)
						{
							num4 = 136;
						}
						int num5 = NPC.NewNPC((int)(this.position.X + (float)(this.width / 2)), (int)(this.position.Y + (float)this.height), num4, this.whoAmI, 0f, 0f, 0f, 0f, 255);
						Main.npc[num5].ai[3] = (float)this.whoAmI;
						Main.npc[num5].realLife = this.whoAmI;
						Main.npc[num5].ai[1] = (float)num2;
						Main.npc[num2].ai[0] = (float)num5;
						NetMessage.SendData(23, -1, -1, "", num5, 0f, 0f, 0f, 0, 0, 0);
						num2 = num5;
					}
				}
				if (this.type == 135)
				{
					this.localAI[0] += (float)Main.rand.Next(4);
					if (this.localAI[0] >= (float)Main.rand.Next(1400, 26000))
					{
						this.localAI[0] = 0f;
						this.TargetClosest(true);
						if (Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
						{
							float num6 = 8f;
							Vector2 vector = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)(this.height / 2));
							float num7 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector.X + (float)Main.rand.Next(-20, 21);
							float num8 = Main.player[this.target].position.Y + (float)Main.player[this.target].height * 0.5f - vector.Y + (float)Main.rand.Next(-20, 21);
							float num9 = (float)Math.Sqrt((double)(num7 * num7 + num8 * num8));
							num9 = num6 / num9;
							num7 *= num9;
							num8 *= num9;
							num7 += (float)Main.rand.Next(-20, 21) * 0.05f;
							num8 += (float)Main.rand.Next(-20, 21) * 0.05f;
							int num10 = 22;
							if (Main.expertMode)
							{
								num10 = 18;
							}
							int num11 = 100;
							vector.X += num7 * 5f;
							vector.Y += num8 * 5f;
							int num12 = Projectile.NewProjectile(vector.X, vector.Y, num7, num8, num11, num10, 0f, Main.myPlayer, 0f, 0f);
							Main.projectile[num12].timeLeft = 300;
							this.netUpdate = true;
						}
					}
				}
			}
			int num13 = (int)(this.position.X / 16f) - 1;
			int num14 = (int)((this.position.X + (float)this.width) / 16f) + 2;
			int num15 = (int)(this.position.Y / 16f) - 1;
			int num16 = (int)((this.position.Y + (float)this.height) / 16f) + 2;
			if (num13 < 0)
			{
				num13 = 0;
			}
			if (num14 > Main.maxTilesX)
			{
				num14 = Main.maxTilesX;
			}
			if (num15 < 0)
			{
				num15 = 0;
			}
			if (num16 > Main.maxTilesY)
			{
				num16 = Main.maxTilesY;
			}
			bool flag2 = false;
			if (!flag2)
			{
				for (int k = num13; k < num14; k++)
				{
					for (int l = num15; l < num16; l++)
					{
						if (Main.tile[k, l] != null && ((Main.tile[k, l].nactive() && (Main.tileSolid[(int)Main.tile[k, l].type] || (Main.tileSolidTop[(int)Main.tile[k, l].type] && Main.tile[k, l].frameY == 0))) || Main.tile[k, l].liquid > 64))
						{
							Vector2 vector2;
							vector2.X = (float)(k * 16);
							vector2.Y = (float)(l * 16);
							if (this.position.X + (float)this.width > vector2.X && this.position.X < vector2.X + 16f && this.position.Y + (float)this.height > vector2.Y && this.position.Y < vector2.Y + 16f)
							{
								flag2 = true;
								break;
							}
						}
					}
				}
			}
			if (!flag2)
			{
				if (this.type != 135 || this.ai[2] != 1f)
				{
					Lighting.AddLight((int)((this.position.X + (float)(this.width / 2)) / 16f), (int)((this.position.Y + (float)(this.height / 2)) / 16f), 0.3f, 0.1f, 0.05f);
				}
				this.localAI[1] = 1f;
				if (this.type == 134)
				{
					Rectangle rectangle = new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height);
					int num17 = 1000;
					bool flag3 = true;
					if (this.position.Y > Main.player[this.target].position.Y)
					{
						for (int m = 0; m < 255; m++)
						{
							if (Main.player[m].active)
							{
								Rectangle rectangle2 = new Rectangle((int)Main.player[m].position.X - num17, (int)Main.player[m].position.Y - num17, num17 * 2, num17 * 2);
								if (rectangle.Intersects(rectangle2))
								{
									flag3 = false;
									break;
								}
							}
						}
						if (flag3)
						{
							flag2 = true;
						}
					}
				}
			}
			else
			{
				this.localAI[1] = 0f;
			}
			float num18 = 16f;
			if (Main.dayTime || Main.player[this.target].dead)
			{
				flag2 = false;
				this.velocity.Y = this.velocity.Y + 1f;
				if ((double)this.position.Y > Main.worldSurface * 16.0)
				{
					this.velocity.Y = this.velocity.Y + 1f;
					num18 = 32f;
				}
				if ((double)this.position.Y > Main.rockLayer * 16.0)
				{
					for (int n = 0; n < 200; n++)
					{
						if (Main.npc[n].aiStyle == this.aiStyle)
						{
							Main.npc[n].active = false;
						}
					}
				}
			}
			float num19 = 0.1f;
			float num20 = 0.15f;
			Vector2 vector3 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
			float num21 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2);
			float num22 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2);
			num21 = (float)((int)(num21 / 16f) * 16);
			num22 = (float)((int)(num22 / 16f) * 16);
			vector3.X = (float)((int)(vector3.X / 16f) * 16);
			vector3.Y = (float)((int)(vector3.Y / 16f) * 16);
			num21 -= vector3.X;
			num22 -= vector3.Y;
			float num23 = (float)Math.Sqrt((double)(num21 * num21 + num22 * num22));
			if (this.ai[1] > 0f && this.ai[1] < (float)Main.npc.Length)
			{
				try
				{
					vector3 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
					num21 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - vector3.X;
					num22 = Main.npc[(int)this.ai[1]].position.Y + (float)(Main.npc[(int)this.ai[1]].height / 2) - vector3.Y;
				}
				catch
				{
				}
				this.rotation = (float)Math.Atan2((double)num22, (double)num21) + 1.57f;
				num23 = (float)Math.Sqrt((double)(num21 * num21 + num22 * num22));
				int num24 = (int)(44f * this.scale);
				num23 = (num23 - (float)num24) / num23;
				num21 *= num23;
				num22 *= num23;
				this.velocity = Vector2.Zero;
				this.position.X = this.position.X + num21;
				this.position.Y = this.position.Y + num22;
				return;
			}
			if (!flag2)
			{
				this.TargetClosest(true);
				this.velocity.Y = this.velocity.Y + 0.15f;
				if (this.velocity.Y > num18)
				{
					this.velocity.Y = num18;
				}
				if ((double)(Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) < (double)num18 * 0.4)
				{
					if (this.velocity.X < 0f)
					{
						this.velocity.X = this.velocity.X - num19 * 1.1f;
					}
					else
					{
						this.velocity.X = this.velocity.X + num19 * 1.1f;
					}
				}
				else if (this.velocity.Y == num18)
				{
					if (this.velocity.X < num21)
					{
						this.velocity.X = this.velocity.X + num19;
					}
					else if (this.velocity.X > num21)
					{
						this.velocity.X = this.velocity.X - num19;
					}
				}
				else if (this.velocity.Y > 4f)
				{
					if (this.velocity.X < 0f)
					{
						this.velocity.X = this.velocity.X + num19 * 0.9f;
					}
					else
					{
						this.velocity.X = this.velocity.X - num19 * 0.9f;
					}
				}
			}
			else
			{
				if (this.soundDelay == 0)
				{
					float num25 = num23 / 40f;
					if (num25 < 10f)
					{
						num25 = 10f;
					}
					if (num25 > 20f)
					{
						num25 = 20f;
					}
					this.soundDelay = (int)num25;
					Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				}
				num23 = (float)Math.Sqrt((double)(num21 * num21 + num22 * num22));
				float num26 = Math.Abs(num21);
				float num27 = Math.Abs(num22);
				float num28 = num18 / num23;
				num21 *= num28;
				num22 *= num28;
				if (((this.velocity.X > 0f && num21 > 0f) || (this.velocity.X < 0f && num21 < 0f)) && ((this.velocity.Y > 0f && num22 > 0f) || (this.velocity.Y < 0f && num22 < 0f)))
				{
					if (this.velocity.X < num21)
					{
						this.velocity.X = this.velocity.X + num20;
					}
					else if (this.velocity.X > num21)
					{
						this.velocity.X = this.velocity.X - num20;
					}
					if (this.velocity.Y < num22)
					{
						this.velocity.Y = this.velocity.Y + num20;
					}
					else if (this.velocity.Y > num22)
					{
						this.velocity.Y = this.velocity.Y - num20;
					}
				}
				if ((this.velocity.X > 0f && num21 > 0f) || (this.velocity.X < 0f && num21 < 0f) || (this.velocity.Y > 0f && num22 > 0f) || (this.velocity.Y < 0f && num22 < 0f))
				{
					if (this.velocity.X < num21)
					{
						this.velocity.X = this.velocity.X + num19;
					}
					else if (this.velocity.X > num21)
					{
						this.velocity.X = this.velocity.X - num19;
					}
					if (this.velocity.Y < num22)
					{
						this.velocity.Y = this.velocity.Y + num19;
					}
					else if (this.velocity.Y > num22)
					{
						this.velocity.Y = this.velocity.Y - num19;
					}
					if ((double)Math.Abs(num22) < (double)num18 * 0.2 && ((this.velocity.X > 0f && num21 < 0f) || (this.velocity.X < 0f && num21 > 0f)))
					{
						if (this.velocity.Y > 0f)
						{
							this.velocity.Y = this.velocity.Y + num19 * 2f;
						}
						else
						{
							this.velocity.Y = this.velocity.Y - num19 * 2f;
						}
					}
					if ((double)Math.Abs(num21) < (double)num18 * 0.2 && ((this.velocity.Y > 0f && num22 < 0f) || (this.velocity.Y < 0f && num22 > 0f)))
					{
						if (this.velocity.X > 0f)
						{
							this.velocity.X = this.velocity.X + num19 * 2f;
						}
						else
						{
							this.velocity.X = this.velocity.X - num19 * 2f;
						}
					}
				}
				else if (num26 > num27)
				{
					if (this.velocity.X < num21)
					{
						this.velocity.X = this.velocity.X + num19 * 1.1f;
					}
					else if (this.velocity.X > num21)
					{
						this.velocity.X = this.velocity.X - num19 * 1.1f;
					}
					if ((double)(Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) < (double)num18 * 0.5)
					{
						if (this.velocity.Y > 0f)
						{
							this.velocity.Y = this.velocity.Y + num19;
						}
						else
						{
							this.velocity.Y = this.velocity.Y - num19;
						}
					}
				}
				else
				{
					if (this.velocity.Y < num22)
					{
						this.velocity.Y = this.velocity.Y + num19 * 1.1f;
					}
					else if (this.velocity.Y > num22)
					{
						this.velocity.Y = this.velocity.Y - num19 * 1.1f;
					}
					if ((double)(Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) < (double)num18 * 0.5)
					{
						if (this.velocity.X > 0f)
						{
							this.velocity.X = this.velocity.X + num19;
						}
						else
						{
							this.velocity.X = this.velocity.X - num19;
						}
					}
				}
			}
			this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
			if (this.type == 134)
			{
				if (flag2)
				{
					if (this.localAI[0] != 1f)
					{
						this.netUpdate = true;
					}
					this.localAI[0] = 1f;
				}
				else
				{
					if (this.localAI[0] != 0f)
					{
						this.netUpdate = true;
					}
					this.localAI[0] = 0f;
				}
				if (((this.velocity.X > 0f && this.oldVelocity.X < 0f) || (this.velocity.X < 0f && this.oldVelocity.X > 0f) || (this.velocity.Y > 0f && this.oldVelocity.Y < 0f) || (this.velocity.Y < 0f && this.oldVelocity.Y > 0f)) && !this.justHit)
				{
					this.netUpdate = true;
				}
			}
		}

		private void AI_005_EaterOfSouls()
		{
			if (this.target < 0 || this.target == 255 || Main.player[this.target].dead)
			{
				this.TargetClosest(true);
			}
			float num = 6f;
			float num2 = 0.05f;
			if (this.type == 6 || this.type == 173)
			{
				num = 4f;
				num2 = 0.02f;
				if (this.type == 6 && Main.expertMode)
				{
					num2 = 0.035f;
				}
			}
			else if (this.type == 94)
			{
				num = 4.2f;
				num2 = 0.022f;
			}
			else if (this.type == 252)
			{
				if (Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
				{
					num = 6f;
					num2 = 0.1f;
				}
				else
				{
					num2 = 0.01f;
					num = 2f;
				}
			}
			else if (this.type == 42 || (this.type >= 231 && this.type <= 235))
			{
				num = 3.5f;
				num2 = 0.021f;
				if (this.type == 231)
				{
					num = 3f;
					num2 = 0.017f;
				}
				num *= 1f - this.scale;
				num2 *= 1f - this.scale;
			}
			else if (this.type == 205)
			{
				num = 3.25f;
				num2 = 0.018f;
			}
			else if (this.type == 176)
			{
				num = 4f;
				num2 = 0.017f;
			}
			else if (this.type == 23)
			{
				num = 1f;
				num2 = 0.03f;
			}
			else if (this.type == 5)
			{
				num = 5f;
				num2 = 0.03f;
			}
			else if (this.type == 210 || this.type == 211)
			{
				this.localAI[0] += 1f;
				float num3 = (this.localAI[0] - 60f) / 60f;
				if (num3 > 1f)
				{
					num3 = 1f;
				}
				else
				{
					if (this.velocity.X > 6f)
					{
						this.velocity.X = 6f;
					}
					if (this.velocity.X < -6f)
					{
						this.velocity.X = -6f;
					}
					if (this.velocity.Y > 6f)
					{
						this.velocity.Y = 6f;
					}
					if (this.velocity.Y < -6f)
					{
						this.velocity.Y = -6f;
					}
				}
				num = 5f;
				num2 = 0.1f;
				num2 *= num3;
			}
			Vector2 vector = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
			float num4 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2);
			float num5 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2);
			num4 = (float)((int)(num4 / 8f) * 8);
			num5 = (float)((int)(num5 / 8f) * 8);
			vector.X = (float)((int)(vector.X / 8f) * 8);
			vector.Y = (float)((int)(vector.Y / 8f) * 8);
			num4 -= vector.X;
			num5 -= vector.Y;
			float num6 = (float)Math.Sqrt((double)(num4 * num4 + num5 * num5));
			float num7 = num6;
			bool flag = false;
			if (num6 > 600f)
			{
				flag = true;
			}
			if (num6 == 0f)
			{
				num4 = this.velocity.X;
				num5 = this.velocity.Y;
			}
			else
			{
				num6 = num / num6;
				num4 *= num6;
				num5 *= num6;
			}
			if (this.type == 6 || this.type == 42 || this.type == 94 || this.type == 139 || this.type == 173 || this.type == 176 || this.type == 205 || this.type == 210 || this.type == 211 || (this.type >= 231 && this.type <= 235))
			{
				if (num7 > 100f || this.type == 42 || this.type == 94 || this.type == 176 || this.type == 210 || this.type == 211 || (this.type >= 231 && this.type <= 235))
				{
					this.ai[0] += 1f;
					if (this.ai[0] > 0f)
					{
						this.velocity.Y = this.velocity.Y + 0.023f;
					}
					else
					{
						this.velocity.Y = this.velocity.Y - 0.023f;
					}
					if (this.ai[0] < -100f || this.ai[0] > 100f)
					{
						this.velocity.X = this.velocity.X + 0.023f;
					}
					else
					{
						this.velocity.X = this.velocity.X - 0.023f;
					}
					if (this.ai[0] > 200f)
					{
						this.ai[0] = -200f;
					}
				}
				if (num7 < 150f && (this.type == 6 || this.type == 94 || this.type == 173))
				{
					this.velocity.X = this.velocity.X + num4 * 0.007f;
					this.velocity.Y = this.velocity.Y + num5 * 0.007f;
				}
			}
			if (Main.player[this.target].dead)
			{
				num4 = (float)this.direction * num / 2f;
				num5 = -num / 2f;
			}
			if (this.velocity.X < num4)
			{
				this.velocity.X = this.velocity.X + num2;
				if (this.type != 173 && this.type != 6 && this.type != 42 && (this.type < 231 || this.type > 235) && this.type != 94 && this.type != 139 && this.velocity.X < 0f && num4 > 0f)
				{
					this.velocity.X = this.velocity.X + num2;
				}
			}
			else if (this.velocity.X > num4)
			{
				this.velocity.X = this.velocity.X - num2;
				if (this.type != 173 && this.type != 6 && this.type != 42 && (this.type < 231 || this.type > 235) && this.type != 94 && this.type != 139 && this.velocity.X > 0f && num4 < 0f)
				{
					this.velocity.X = this.velocity.X - num2;
				}
			}
			if (this.velocity.Y < num5)
			{
				this.velocity.Y = this.velocity.Y + num2;
				if (this.type != 173 && this.type != 6 && this.type != 42 && (this.type < 231 || this.type > 235) && this.type != 94 && this.type != 139 && this.velocity.Y < 0f && num5 > 0f)
				{
					this.velocity.Y = this.velocity.Y + num2;
				}
			}
			else if (this.velocity.Y > num5)
			{
				this.velocity.Y = this.velocity.Y - num2;
				if (this.type != 173 && this.type != 6 && this.type != 42 && (this.type < 231 || this.type > 235) && this.type != 94 && this.type != 139 && this.velocity.Y > 0f && num5 < 0f)
				{
					this.velocity.Y = this.velocity.Y - num2;
				}
			}
			if (this.type == 23)
			{
				if (num4 > 0f)
				{
					this.spriteDirection = 1;
					this.rotation = (float)Math.Atan2((double)num5, (double)num4);
				}
				else if (num4 < 0f)
				{
					this.spriteDirection = -1;
					this.rotation = (float)Math.Atan2((double)num5, (double)num4) + 3.14f;
				}
			}
			else if (this.type == 139)
			{
				this.localAI[0] += 1f;
				if (this.justHit)
				{
					this.localAI[0] = 0f;
				}
				if (Main.netMode != 1 && this.localAI[0] >= 120f)
				{
					this.localAI[0] = 0f;
					if (Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
					{
						int num8 = 25;
						if (Main.expertMode)
						{
							num8 = 22;
						}
						int num9 = 84;
						Projectile.NewProjectile(vector.X, vector.Y, num4, num5, num9, num8, 0f, Main.myPlayer, 0f, 0f);
					}
				}
				int num10 = (int)this.position.X + this.width / 2;
				int num11 = (int)this.position.Y + this.height / 2;
				num10 /= 16;
				num11 /= 16;
				if (!WorldGen.SolidTile(num10, num11))
				{
					Lighting.AddLight((int)((this.position.X + (float)(this.width / 2)) / 16f), (int)((this.position.Y + (float)(this.height / 2)) / 16f), 0.3f, 0.1f, 0.05f);
				}
				if (num4 > 0f)
				{
					this.spriteDirection = 1;
					this.rotation = (float)Math.Atan2((double)num5, (double)num4);
				}
				if (num4 < 0f)
				{
					this.spriteDirection = -1;
					this.rotation = (float)Math.Atan2((double)num5, (double)num4) + 3.14f;
				}
			}
			else if (this.type == 6 || this.type == 94 || this.type == 173)
			{
				this.rotation = (float)Math.Atan2((double)num5, (double)num4) - 1.57f;
			}
			else if (this.type == 42 || this.type == 176 || this.type == 205 || (this.type >= 231 && this.type <= 235))
			{
				if (this.velocity.X > 0f)
				{
					this.spriteDirection = 1;
				}
				if (this.velocity.X < 0f)
				{
					this.spriteDirection = -1;
				}
				this.rotation = this.velocity.X * 0.1f;
			}
			else
			{
				this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) - 1.57f;
			}
			if (this.type == 6 || this.type == 23 || this.type == 42 || this.type == 94 || this.type == 139 || this.type == 173 || this.type == 176 || this.type == 205 || this.type == 210 || this.type == 211 || (this.type >= 231 && this.type <= 235))
			{
				float num12 = 0.7f;
				if (this.type == 6 || this.type == 173)
				{
					num12 = 0.4f;
				}
				if (this.collideX)
				{
					this.netUpdate = true;
					this.velocity.X = this.oldVelocity.X * -num12;
					if (this.direction == -1 && this.velocity.X > 0f && this.velocity.X < 2f)
					{
						this.velocity.X = 2f;
					}
					if (this.direction == 1 && this.velocity.X < 0f && this.velocity.X > -2f)
					{
						this.velocity.X = -2f;
					}
				}
				if (this.collideY)
				{
					this.netUpdate = true;
					this.velocity.Y = this.oldVelocity.Y * -num12;
					if (this.velocity.Y > 0f && (double)this.velocity.Y < 1.5)
					{
						this.velocity.Y = 2f;
					}
					if (this.velocity.Y < 0f && (double)this.velocity.Y > -1.5)
					{
						this.velocity.Y = -2f;
					}
				}
				if (this.type == 23)
				{
					int num13 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X, this.position.Y - this.velocity.Y), this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 2f);
					Main.dust[num13].noGravity = true;
					Dust expr_F26_cp_0 = Main.dust[num13];
					expr_F26_cp_0.velocity.X = expr_F26_cp_0.velocity.X * 0.3f;
					Dust expr_F44_cp_0 = Main.dust[num13];
					expr_F44_cp_0.velocity.Y = expr_F44_cp_0.velocity.Y * 0.3f;
				}
				else if (this.type != 42 && this.type != 139 && this.type != 176 && this.type != 205 && this.type != 210 && this.type != 211 && this.type != 252 && (this.type < 231 || this.type > 235) && Main.rand.Next(20) == 0)
				{
					int num14 = 18;
					if (this.type == 173)
					{
						num14 = 5;
					}
					int num15 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height * 0.25f), this.width, (int)((float)this.height * 0.5f), num14, this.velocity.X, 2f, 75, this.color, this.scale);
					Dust expr_107A_cp_0 = Main.dust[num15];
					expr_107A_cp_0.velocity.X = expr_107A_cp_0.velocity.X * 0.5f;
					Dust expr_1098_cp_0 = Main.dust[num15];
					expr_1098_cp_0.velocity.Y = expr_1098_cp_0.velocity.Y * 0.1f;
				}
			}
			else if (this.type != 252 && Main.rand.Next(40) == 0)
			{
				int num16 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height * 0.25f), this.width, (int)((float)this.height * 0.5f), 5, this.velocity.X, 2f, 0, default(Color), 1f);
				Dust expr_1141_cp_0 = Main.dust[num16];
				expr_1141_cp_0.velocity.X = expr_1141_cp_0.velocity.X * 0.5f;
				Dust expr_115F_cp_0 = Main.dust[num16];
				expr_115F_cp_0.velocity.Y = expr_115F_cp_0.velocity.Y * 0.1f;
			}
			if ((this.type == 6 || this.type == 94 || this.type == 173) && this.wet)
			{
				if (this.velocity.Y > 0f)
				{
					this.velocity.Y = this.velocity.Y * 0.95f;
				}
				this.velocity.Y = this.velocity.Y - 0.3f;
				if (this.velocity.Y < -2f)
				{
					this.velocity.Y = -2f;
				}
			}
			if (this.type == 205 && this.wet)
			{
				if (this.velocity.Y > 0f)
				{
					this.velocity.Y = this.velocity.Y * 0.95f;
				}
				this.velocity.Y = this.velocity.Y - 0.5f;
				if (this.velocity.Y < -4f)
				{
					this.velocity.Y = -4f;
				}
				this.TargetClosest(true);
			}
			if (this.type == 42 || this.type == 176 || (this.type >= 231 && this.type <= 235))
			{
				if (this.wet)
				{
					if (this.velocity.Y > 0f)
					{
						this.velocity.Y = this.velocity.Y * 0.95f;
					}
					this.velocity.Y = this.velocity.Y - 0.5f;
					if (this.velocity.Y < -4f)
					{
						this.velocity.Y = -4f;
					}
					this.TargetClosest(true);
				}
				if (this.ai[1] == 101f)
				{
					Main.PlaySound(SoundID.Item17, this.position);
					this.ai[1] = 0f;
				}
				if (Main.netMode != 1)
				{
					this.ai[1] += (float)Main.rand.Next(5, 20) * 0.1f * this.scale;
					if (this.type == 176)
					{
						this.ai[1] += (float)Main.rand.Next(5, 20) * 0.1f * this.scale;
					}
					if (Main.player[this.target].stealth == 0f && Main.player[this.target].itemAnimation == 0)
					{
						this.ai[1] = 0f;
					}
					if (this.ai[1] >= 130f)
					{
						if (Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
						{
							float num17 = 8f;
							Vector2 vector2 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)(this.height / 2));
							float num18 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector2.X + (float)Main.rand.Next(-20, 21);
							float num19 = Main.player[this.target].position.Y + (float)Main.player[this.target].height * 0.5f - vector2.Y + (float)Main.rand.Next(-20, 21);
							if ((num18 < 0f && this.velocity.X < 0f) || (num18 > 0f && this.velocity.X > 0f))
							{
								float num20 = (float)Math.Sqrt((double)(num18 * num18 + num19 * num19));
								num20 = num17 / num20;
								num18 *= num20;
								num19 *= num20;
								int num21 = (int)(10f * this.scale);
								if (this.type == 176)
								{
									num21 = (int)(30f * this.scale);
								}
								int num22 = 55;
								int num23 = Projectile.NewProjectile(vector2.X, vector2.Y, num18, num19, num22, num21, 0f, Main.myPlayer, 0f, 0f);
								Main.projectile[num23].timeLeft = 300;
								this.ai[1] = 101f;
								this.netUpdate = true;
							}
							else
							{
								this.ai[1] = 0f;
							}
						}
						else
						{
							this.ai[1] = 0f;
						}
					}
				}
			}
			if (this.type == 139 && flag)
			{
				if ((this.velocity.X > 0f && num4 > 0f) || (this.velocity.X < 0f && num4 < 0f))
				{
					if (Math.Abs(this.velocity.X) < 12f)
					{
						this.velocity.X = this.velocity.X * 1.05f;
					}
				}
				else
				{
					this.velocity.X = this.velocity.X * 0.9f;
				}
			}
			if (Main.netMode != 1 && this.type == 94 && !Main.player[this.target].dead)
			{
				if (this.justHit)
				{
					this.localAI[0] = 0f;
				}
				this.localAI[0] += 1f;
				if (this.localAI[0] == 180f)
				{
					if (Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
					{
						NPC.NewNPC((int)(this.position.X + (float)(this.width / 2) + this.velocity.X), (int)(this.position.Y + (float)(this.height / 2) + this.velocity.Y), 112, 0, 0f, 0f, 0f, 0f, 255);
					}
					this.localAI[0] = 0f;
				}
			}
			if ((Main.dayTime && this.type != 173 && this.type != 6 && this.type != 23 && this.type != 42 && this.type != 94 && this.type != 176 && this.type != 205 && this.type != 210 && this.type != 211 && this.type != 252 && (this.type < 231 || this.type > 235)) || Main.player[this.target].dead)
			{
				this.velocity.Y = this.velocity.Y - num2 * 2f;
				if (this.timeLeft > 10)
				{
					this.timeLeft = 10;
				}
			}
			if (((this.velocity.X > 0f && this.oldVelocity.X < 0f) || (this.velocity.X < 0f && this.oldVelocity.X > 0f) || (this.velocity.Y > 0f && this.oldVelocity.Y < 0f) || (this.velocity.Y < 0f && this.oldVelocity.Y > 0f)) && !this.justHit)
			{
				this.netUpdate = true;
			}
		}

		private void AI_006_Worms()
		{
			if (this.type == 117 && this.localAI[1] == 0f)
			{
				this.localAI[1] = 1f;
				Main.PlaySound(SoundID.NPCDeath13, this.position);
				int num = 1;
				if (this.velocity.X < 0f)
				{
					num = -1;
				}
				for (int i = 0; i < 20; i++)
				{
					Dust.NewDust(new Vector2(this.position.X - 20f, this.position.Y - 20f), this.width + 40, this.height + 40, 5, (float)(num * 8), -1f, 0, default(Color), 1f);
				}
			}
			if (this.type == 454 && this.localAI[3] == 0f)
			{
				Main.PlaySound(SoundID.Item119, this.position);
				this.localAI[3] = 1f;
			}
			if (this.type >= 454 && this.type <= 459)
			{
				this.dontTakeDamage = (this.alpha > 0);
				if (this.type == 454 || (this.type != 454 && Main.npc[(int)this.ai[1]].alpha < 85))
				{
					if (this.dontTakeDamage)
					{
						for (int j = 0; j < 2; j++)
						{
							int num2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 228, 0f, 0f, 100, default(Color), 2f);
							Main.dust[num2].noGravity = true;
							Main.dust[num2].noLight = true;
						}
					}
					this.alpha -= 42;
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
				}
			}
			else if (this.type == 402 && this.ai[1] == 0f)
			{
				this.ai[1] = (float)Main.rand.Next(-2, 0);
				this.netUpdate = true;
			}
			if (Main.netMode != 1 && Main.expertMode)
			{
				if (this.type == 14 && (double)(this.position.Y / 16f) < Main.worldSurface)
				{
					if (Main.rand.Next(900) == 0)
					{
						this.TargetClosest(true);
						if (Collision.CanHitLine(base.Center, 1, 1, Main.player[this.target].Center, 1, 1))
						{
							NPC.NewNPC((int)(this.position.X + (float)(this.width / 2) + this.velocity.X), (int)(this.position.Y + (float)(this.height / 2) + this.velocity.Y), 112, 0, 0f, 1f, 0f, 0f, 255);
						}
					}
				}
				else if (this.type == 13)
				{
					int num3 = 90;
					num3 += (int)((float)this.life / (float)this.lifeMax * 60f * 5f);
					if (Main.rand.Next(num3) == 0)
					{
						this.TargetClosest(true);
						if (Collision.CanHitLine(base.Center, 1, 1, Main.player[this.target].Center, 1, 1))
						{
							NPC.NewNPC((int)(this.position.X + (float)(this.width / 2) + this.velocity.X), (int)(this.position.Y + (float)(this.height / 2) + this.velocity.Y), 112, 0, 0f, 1f, 0f, 0f, 255);
						}
					}
				}
			}
			bool flag = false;
			float num4 = 0.2f;
			int num5 = this.type;
			if (num5 <= 95)
			{
				if (num5 != 10 && num5 != 39 && num5 != 95)
				{
					goto IL_450;
				}
			}
			else if (num5 != 117 && num5 != 510)
			{
				if (num5 == 513)
				{
					flag = !Main.player[this.target].ZoneUndergroundDesert;
					num4 = 0.1f;
					goto IL_450;
				}
				goto IL_450;
			}
			flag = true;
			IL_450:
			if (this.type >= 13 && this.type <= 15)
			{
				this.realLife = -1;
			}
			else if (this.ai[3] > 0f)
			{
				this.realLife = (int)this.ai[3];
			}
			if (this.target < 0 || this.target == 255 || Main.player[this.target].dead || (flag && (double)Main.player[this.target].position.Y < Main.worldSurface * 16.0))
			{
				this.TargetClosest(true);
			}
			if (Main.player[this.target].dead || (flag && (double)Main.player[this.target].position.Y < Main.worldSurface * 16.0))
			{
				if (this.timeLeft > 300)
				{
					this.timeLeft = 300;
				}
				if (flag)
				{
					this.velocity.Y = this.velocity.Y + num4;
				}
			}
			if (Main.netMode != 1)
			{
				if (this.type == 87 && this.ai[0] == 0f)
				{
					this.ai[3] = (float)this.whoAmI;
					this.realLife = this.whoAmI;
					int num6 = this.whoAmI;
					for (int k = 0; k < 14; k++)
					{
						int num7 = 89;
						if (k == 1 || k == 8)
						{
							num7 = 88;
						}
						else if (k == 11)
						{
							num7 = 90;
						}
						else if (k == 12)
						{
							num7 = 91;
						}
						else if (k == 13)
						{
							num7 = 92;
						}
						int num8 = NPC.NewNPC((int)(this.position.X + (float)(this.width / 2)), (int)(this.position.Y + (float)this.height), num7, this.whoAmI, 0f, 0f, 0f, 0f, 255);
						Main.npc[num8].ai[3] = (float)this.whoAmI;
						Main.npc[num8].realLife = this.whoAmI;
						Main.npc[num8].ai[1] = (float)num6;
						Main.npc[num6].ai[0] = (float)num8;
						NetMessage.SendData(23, -1, -1, "", num8, 0f, 0f, 0f, 0, 0, 0);
						num6 = num8;
					}
				}
				if (this.type == 454 && this.ai[0] == 0f)
				{
					this.ai[3] = (float)this.whoAmI;
					this.realLife = this.whoAmI;
					int num9 = this.whoAmI;
					for (int l = 0; l < 30; l++)
					{
						int num10 = 456;
						if ((l - 2) % 4 == 0 && l < 26)
						{
							num10 = 455;
						}
						else if (l == 27)
						{
							num10 = 457;
						}
						else if (l == 28)
						{
							num10 = 458;
						}
						else if (l == 29)
						{
							num10 = 459;
						}
						int num11 = NPC.NewNPC((int)(this.position.X + (float)(this.width / 2)), (int)(this.position.Y + (float)this.height), num10, this.whoAmI, 0f, 0f, 0f, 0f, 255);
						Main.npc[num11].ai[3] = (float)this.whoAmI;
						Main.npc[num11].realLife = this.whoAmI;
						Main.npc[num11].ai[1] = (float)num9;
						Main.npc[num9].ai[0] = (float)num11;
						NetMessage.SendData(23, -1, -1, "", num11, 0f, 0f, 0f, 0, 0, 0);
						num9 = num11;
					}
				}
				if (this.type == 513 && this.ai[0] == 0f)
				{
					this.ai[3] = (float)this.whoAmI;
					this.realLife = this.whoAmI;
					int num12 = this.whoAmI;
					int num13 = Main.rand.Next(6, 10);
					for (int m = 0; m < num13; m++)
					{
						int num14 = 514;
						if (m == num13 - 1)
						{
							num14 = 515;
						}
						int num15 = NPC.NewNPC((int)(this.position.X + (float)(this.width / 2)), (int)(this.position.Y + (float)this.height), num14, this.whoAmI, 0f, 0f, 0f, 0f, 255);
						Main.npc[num15].ai[3] = (float)this.whoAmI;
						Main.npc[num15].realLife = this.whoAmI;
						Main.npc[num15].ai[1] = (float)num12;
						Main.npc[num12].ai[0] = (float)num15;
						NetMessage.SendData(23, -1, -1, "", num15, 0f, 0f, 0f, 0, 0, 0);
						num12 = num15;
					}
				}
				if (this.type == 510 && this.ai[0] == 0f)
				{
					this.ai[3] = (float)this.whoAmI;
					this.realLife = this.whoAmI;
					int num16 = this.whoAmI;
					int num17 = Main.rand.Next(12, 21);
					for (int n = 0; n < num17; n++)
					{
						int num18 = 511;
						if (n == num17 - 1)
						{
							num18 = 512;
						}
						int num19 = NPC.NewNPC((int)(this.position.X + (float)(this.width / 2)), (int)(this.position.Y + (float)this.height), num18, this.whoAmI, 0f, 0f, 0f, 0f, 255);
						Main.npc[num19].ai[3] = (float)this.whoAmI;
						Main.npc[num19].realLife = this.whoAmI;
						Main.npc[num19].ai[1] = (float)num16;
						Main.npc[num16].ai[0] = (float)num19;
						NetMessage.SendData(23, -1, -1, "", num19, 0f, 0f, 0f, 0, 0, 0);
						num16 = num19;
					}
				}
				else if ((this.type == 7 || this.type == 8 || this.type == 10 || this.type == 11 || this.type == 13 || this.type == 14 || this.type == 39 || this.type == 40 || this.type == 95 || this.type == 96 || this.type == 98 || this.type == 99 || this.type == 117 || this.type == 118) && this.ai[0] == 0f)
				{
					if (this.type == 7 || this.type == 10 || this.type == 13 || this.type == 39 || this.type == 95 || this.type == 98 || this.type == 117)
					{
						if (this.type < 13 || this.type > 15)
						{
							this.ai[3] = (float)this.whoAmI;
							this.realLife = this.whoAmI;
						}
						this.ai[2] = (float)Main.rand.Next(8, 13);
						if (this.type == 10)
						{
							this.ai[2] = (float)Main.rand.Next(4, 7);
						}
						if (this.type == 13)
						{
							this.ai[2] = (float)Main.rand.Next(45, 56);
							if (Main.expertMode)
							{
								this.ai[2] = (float)((int)(this.ai[2] * 1.1f));
							}
						}
						if (this.type == 39)
						{
							this.ai[2] = (float)Main.rand.Next(12, 19);
						}
						if (this.type == 95)
						{
							this.ai[2] = (float)Main.rand.Next(6, 12);
						}
						if (this.type == 98)
						{
							this.ai[2] = (float)Main.rand.Next(20, 26);
						}
						if (this.type == 117)
						{
							this.ai[2] = (float)Main.rand.Next(3, 6);
						}
						this.ai[0] = (float)NPC.NewNPC((int)(this.position.X + (float)(this.width / 2)), (int)(this.position.Y + (float)this.height), this.type + 1, this.whoAmI, 0f, 0f, 0f, 0f, 255);
					}
					else if ((this.type == 8 || this.type == 11 || this.type == 14 || this.type == 40 || this.type == 96 || this.type == 99 || this.type == 118) && this.ai[2] > 0f)
					{
						this.ai[0] = (float)NPC.NewNPC((int)(this.position.X + (float)(this.width / 2)), (int)(this.position.Y + (float)this.height), this.type, this.whoAmI, 0f, 0f, 0f, 0f, 255);
					}
					else
					{
						this.ai[0] = (float)NPC.NewNPC((int)(this.position.X + (float)(this.width / 2)), (int)(this.position.Y + (float)this.height), this.type + 1, this.whoAmI, 0f, 0f, 0f, 0f, 255);
					}
					if (this.type < 13 || this.type > 15)
					{
						Main.npc[(int)this.ai[0]].ai[3] = this.ai[3];
						Main.npc[(int)this.ai[0]].realLife = this.realLife;
					}
					Main.npc[(int)this.ai[0]].ai[1] = (float)this.whoAmI;
					Main.npc[(int)this.ai[0]].ai[2] = this.ai[2] - 1f;
					this.netUpdate = true;
				}
				if (this.type == 412 && this.ai[0] == 0f)
				{
					this.ai[3] = (float)this.whoAmI;
					this.realLife = this.whoAmI;
					int num20 = this.whoAmI;
					int num21 = 30;
					for (int num22 = 0; num22 < num21; num22++)
					{
						int num23 = 413;
						if (num22 == num21 - 1)
						{
							num23 = 414;
						}
						int num24 = NPC.NewNPC((int)(this.position.X + (float)(this.width / 2)), (int)(this.position.Y + (float)this.height), num23, this.whoAmI, 0f, 0f, 0f, 0f, 255);
						Main.npc[num24].ai[3] = (float)this.whoAmI;
						Main.npc[num24].realLife = this.whoAmI;
						Main.npc[num24].ai[1] = (float)num20;
						Main.npc[num20].ai[0] = (float)num24;
						NetMessage.SendData(23, -1, -1, "", num24, 0f, 0f, 0f, 0, 0, 0);
						num20 = num24;
					}
				}
				num5 = this.type;
				if (num5 <= 100)
				{
					switch (num5)
					{
					case 8:
					case 9:
					case 11:
					case 12:
						break;
					case 10:
						goto IL_1183;
					default:
						switch (num5)
						{
						case 40:
						case 41:
							break;
						default:
							switch (num5)
							{
							case 88:
							case 89:
							case 90:
							case 91:
							case 92:
							case 96:
							case 97:
							case 99:
							case 100:
								break;
							case 93:
							case 94:
							case 95:
							case 98:
								goto IL_1183;
							default:
								goto IL_1183;
							}
							break;
						}
						break;
					}
				}
				else if (num5 <= 414)
				{
					switch (num5)
					{
					case 118:
					case 119:
						break;
					default:
						switch (num5)
						{
						case 413:
						case 414:
							break;
						default:
							goto IL_1183;
						}
						break;
					}
				}
				else
				{
					switch (num5)
					{
					case 455:
					case 456:
					case 457:
					case 458:
					case 459:
						break;
					default:
						switch (num5)
						{
						case 511:
						case 512:
						case 514:
						case 515:
							break;
						case 513:
							goto IL_1183;
						default:
							goto IL_1183;
						}
						break;
					}
				}
				if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != this.aiStyle)
				{
					this.life = 0;
					this.HitEffect(0, 10.0);
					this.active = false;
					NetMessage.SendData(28, -1, -1, "", this.whoAmI, -1f, 0f, 0f, 0, 0, 0);
				}
				IL_1183:
				num5 = this.type;
				if (num5 <= 99)
				{
					switch (num5)
					{
					case 7:
					case 8:
					case 10:
					case 11:
						break;
					case 9:
						goto IL_12F2;
					default:
						switch (num5)
						{
						case 39:
						case 40:
							break;
						default:
							switch (num5)
							{
							case 87:
							case 88:
							case 89:
							case 90:
							case 91:
							case 95:
							case 96:
							case 98:
							case 99:
								break;
							case 92:
							case 93:
							case 94:
							case 97:
								goto IL_12F2;
							default:
								goto IL_12F2;
							}
							break;
						}
						break;
					}
				}
				else if (num5 <= 413)
				{
					switch (num5)
					{
					case 117:
					case 118:
						break;
					default:
						switch (num5)
						{
						case 412:
						case 413:
							break;
						default:
							goto IL_12F2;
						}
						break;
					}
				}
				else
				{
					switch (num5)
					{
					case 454:
					case 455:
					case 456:
					case 457:
					case 458:
						break;
					default:
						switch (num5)
						{
						case 510:
						case 511:
						case 513:
						case 514:
							break;
						case 512:
							goto IL_12F2;
						default:
							goto IL_12F2;
						}
						break;
					}
				}
				if (!Main.npc[(int)this.ai[0]].active || Main.npc[(int)this.ai[0]].aiStyle != this.aiStyle)
				{
					this.life = 0;
					this.HitEffect(0, 10.0);
					this.active = false;
					NetMessage.SendData(28, -1, -1, "", this.whoAmI, -1f, 0f, 0f, 0, 0, 0);
				}
				IL_12F2:
				if (this.type == 13 || this.type == 14 || this.type == 15)
				{
					if (!Main.npc[(int)this.ai[1]].active && !Main.npc[(int)this.ai[0]].active)
					{
						this.life = 0;
						this.HitEffect(0, 10.0);
						this.checkDead();
						this.active = false;
						NetMessage.SendData(28, -1, -1, "", this.whoAmI, -1f, 0f, 0f, 0, 0, 0);
					}
					if (this.type == 13 && !Main.npc[(int)this.ai[0]].active)
					{
						this.life = 0;
						this.HitEffect(0, 10.0);
						this.checkDead();
						this.active = false;
						NetMessage.SendData(28, -1, -1, "", this.whoAmI, -1f, 0f, 0f, 0, 0, 0);
					}
					if (this.type == 15 && !Main.npc[(int)this.ai[1]].active)
					{
						this.life = 0;
						this.HitEffect(0, 10.0);
						this.checkDead();
						this.active = false;
						NetMessage.SendData(28, -1, -1, "", this.whoAmI, -1f, 0f, 0f, 0, 0, 0);
					}
					if (this.type == 14 && (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != this.aiStyle))
					{
						this.type = 13;
						int whoAmI = this.whoAmI;
						float num25 = (float)this.life / (float)this.lifeMax;
						float num26 = this.ai[0];
						this.SetDefaultsKeepPlayerInteraction(this.type);
						this.life = (int)((float)this.lifeMax * num25);
						this.ai[0] = num26;
						this.TargetClosest(true);
						this.netUpdate = true;
						this.whoAmI = whoAmI;
					}
					if (this.type == 14 && (!Main.npc[(int)this.ai[0]].active || Main.npc[(int)this.ai[0]].aiStyle != this.aiStyle))
					{
						int whoAmI2 = this.whoAmI;
						float num27 = (float)this.life / (float)this.lifeMax;
						float num28 = this.ai[1];
						this.SetDefaultsKeepPlayerInteraction(this.type);
						this.life = (int)((float)this.lifeMax * num27);
						this.ai[1] = num28;
						this.TargetClosest(true);
						this.netUpdate = true;
						this.whoAmI = whoAmI2;
					}
				}
				if (!this.active && Main.netMode == 2)
				{
					NetMessage.SendData(28, -1, -1, "", this.whoAmI, -1f, 0f, 0f, 0, 0, 0);
				}
			}
			int num29 = (int)(this.position.X / 16f) - 1;
			int num30 = (int)((this.position.X + (float)this.width) / 16f) + 2;
			int num31 = (int)(this.position.Y / 16f) - 1;
			int num32 = (int)((this.position.Y + (float)this.height) / 16f) + 2;
			if (num29 < 0)
			{
				num29 = 0;
			}
			if (num30 > Main.maxTilesX)
			{
				num30 = Main.maxTilesX;
			}
			if (num31 < 0)
			{
				num31 = 0;
			}
			if (num32 > Main.maxTilesY)
			{
				num32 = Main.maxTilesY;
			}
			bool flag2 = false;
			if (this.type >= 87 && this.type <= 92)
			{
				flag2 = true;
			}
			if (this.type >= 454 && this.type <= 459)
			{
				flag2 = true;
			}
			if (this.type == 402 && this.ai[1] == -1f)
			{
				flag2 = true;
			}
			if (this.type >= 412 && this.type <= 414)
			{
				flag2 = true;
			}
			if (!flag2)
			{
				for (int num33 = num29; num33 < num30; num33++)
				{
					for (int num34 = num31; num34 < num32; num34++)
					{
						if (Main.tile[num33, num34] != null && ((Main.tile[num33, num34].nactive() && (Main.tileSolid[(int)Main.tile[num33, num34].type] || (Main.tileSolidTop[(int)Main.tile[num33, num34].type] && Main.tile[num33, num34].frameY == 0))) || Main.tile[num33, num34].liquid > 64))
						{
							Vector2 vector;
							vector.X = (float)(num33 * 16);
							vector.Y = (float)(num34 * 16);
							if (this.position.X + (float)this.width > vector.X && this.position.X < vector.X + 16f && this.position.Y + (float)this.height > vector.Y && this.position.Y < vector.Y + 16f)
							{
								flag2 = true;
								if (Main.rand.Next(100) == 0 && this.type != 117 && Main.tile[num33, num34].nactive())
								{
									WorldGen.KillTile(num33, num34, true, true, false);
								}
							}
						}
					}
				}
			}
			if (!flag2 && (this.type == 7 || this.type == 10 || this.type == 13 || this.type == 39 || this.type == 95 || this.type == 98 || this.type == 117 || this.type == 375 || this.type == 454 || this.type == 510 || this.type == 513))
			{
				Rectangle rectangle = new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height);
				int num35 = 1000;
				bool flag3 = true;
				for (int num36 = 0; num36 < 255; num36++)
				{
					if (Main.player[num36].active)
					{
						Rectangle rectangle2 = new Rectangle((int)Main.player[num36].position.X - num35, (int)Main.player[num36].position.Y - num35, num35 * 2, num35 * 2);
						if (rectangle.Intersects(rectangle2))
						{
							flag3 = false;
							break;
						}
					}
				}
				if (flag3)
				{
					flag2 = true;
				}
			}
			if ((this.type >= 87 && this.type <= 92) || (this.type >= 454 && this.type <= 459))
			{
				if (this.velocity.X < 0f)
				{
					this.spriteDirection = 1;
				}
				else if (this.velocity.X > 0f)
				{
					this.spriteDirection = -1;
				}
			}
			if (this.type == 414)
			{
				if (this.justHit)
				{
					this.localAI[3] = 3f;
				}
				if (this.localAI[2] > 0f)
				{
					this.localAI[2] -= 16f;
					if (this.localAI[2] == 0f)
					{
						this.localAI[2] = -128f;
					}
				}
				else if (this.localAI[2] < 0f)
				{
					this.localAI[2] += 16f;
				}
				else if (this.localAI[3] > 0f)
				{
					this.localAI[2] = 128f;
					this.localAI[3] -= 1f;
				}
			}
			if (this.type == 412)
			{
				Vector2 value = base.Center + (this.rotation - 1.57079637f).ToRotationVector2() * 8f;
				Vector2 value2 = this.rotation.ToRotationVector2() * 16f;
				Dust dust = Main.dust[Dust.NewDust(value + value2, 0, 0, 6, this.velocity.X, this.velocity.Y, 100, Color.Transparent, 1f + Main.rand.NextFloat() * 3f)];
				dust.noGravity = true;
				dust.noLight = true;
				dust.position -= new Vector2(4f);
				dust.fadeIn = 1f;
				dust.velocity = Vector2.Zero;
				dust = Main.dust[Dust.NewDust(value - value2, 0, 0, 6, this.velocity.X, this.velocity.Y, 100, Color.Transparent, 1f + Main.rand.NextFloat() * 3f)];
				dust.noGravity = true;
				dust.noLight = true;
				dust.position -= new Vector2(4f);
				dust.fadeIn = 1f;
				dust.velocity = Vector2.Zero;
			}
			float num37 = 8f;
			float num38 = 0.07f;
			if (this.type == 95)
			{
				num37 = 5.5f;
				num38 = 0.045f;
			}
			if (this.type == 10)
			{
				num37 = 6f;
				num38 = 0.05f;
			}
			if (this.type == 513)
			{
				num37 = 7f;
				num38 = 0.1f;
			}
			if (this.type == 13)
			{
				num37 = 10f;
				num38 = 0.07f;
				if (Main.expertMode)
				{
					num37 = 12f;
					num38 = 0.15f;
				}
			}
			if (this.type == 510)
			{
				if (!Main.player[this.target].dead && Main.player[this.target].ZoneSandstorm)
				{
					num37 = 16f;
					num38 = 0.35f;
				}
				else
				{
					num37 = 10f;
					num38 = 0.25f;
				}
			}
			if (this.type == 87)
			{
				num37 = 11f;
				num38 = 0.25f;
			}
			if (this.type == 375)
			{
				num37 = 6f;
				num38 = 0.15f;
			}
			if (this.type == 454)
			{
				num37 = 20f;
				num38 = 0.55f;
			}
			if (this.type == 402)
			{
				num37 = 6f;
				num38 = 0.2f;
			}
			if (this.type == 117 && Main.wof >= 0)
			{
				float num39 = (float)Main.npc[Main.wof].life / (float)Main.npc[Main.wof].lifeMax;
				if ((double)num39 < 0.5)
				{
					num37 += 1f;
					num38 += 0.1f;
				}
				if ((double)num39 < 0.25)
				{
					num37 += 1f;
					num38 += 0.1f;
				}
				if ((double)num39 < 0.1)
				{
					num37 += 2f;
					num38 += 0.1f;
				}
			}
			Vector2 vector2 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
			float num40 = Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2);
			float num41 = Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2);
			if (this.type == 412)
			{
				num37 = 10f;
				num38 = 0.3f;
				int num42 = -1;
				int num43 = (int)(Main.player[this.target].Center.X / 16f);
				int num44 = (int)(Main.player[this.target].Center.Y / 16f);
				for (int num45 = num43 - 2; num45 <= num43 + 2; num45++)
				{
					for (int num46 = num44; num46 <= num44 + 15; num46++)
					{
						if (WorldGen.SolidTile2(num45, num46))
						{
							num42 = num46;
							break;
						}
					}
					if (num42 > 0)
					{
						break;
					}
				}
				if (num42 > 0)
				{
					num42 *= 16;
					float num47 = (float)(num42 - 800);
					if (Main.player[this.target].position.Y > num47)
					{
						num41 = num47;
						if (Math.Abs(base.Center.X - Main.player[this.target].Center.X) < 500f)
						{
							if (this.velocity.X > 0f)
							{
								num40 = Main.player[this.target].Center.X + 600f;
							}
							else
							{
								num40 = Main.player[this.target].Center.X - 600f;
							}
						}
					}
				}
				else
				{
					num37 = 14f;
					num38 = 0.5f;
				}
				float num48 = num37 * 1.3f;
				float num49 = num37 * 0.7f;
				float num50 = this.velocity.Length();
				if (num50 > 0f)
				{
					if (num50 > num48)
					{
						this.velocity.Normalize();
						this.velocity *= num48;
					}
					else if (num50 < num49)
					{
						this.velocity.Normalize();
						this.velocity *= num49;
					}
				}
				if (num42 > 0)
				{
					for (int num51 = 0; num51 < 200; num51++)
					{
						if (Main.npc[num51].active && Main.npc[num51].type == this.type && num51 != this.whoAmI)
						{
							Vector2 vector3 = Main.npc[num51].Center - base.Center;
							if (vector3.Length() < 400f)
							{
								vector3.Normalize();
								vector3 *= 1000f;
								num40 -= vector3.X;
								num41 -= vector3.Y;
							}
						}
					}
				}
				else
				{
					for (int num52 = 0; num52 < 200; num52++)
					{
						if (Main.npc[num52].active && Main.npc[num52].type == this.type && num52 != this.whoAmI)
						{
							Vector2 vector4 = Main.npc[num52].Center - base.Center;
							if (vector4.Length() < 60f)
							{
								vector4.Normalize();
								vector4 *= 200f;
								num40 -= vector4.X;
								num41 -= vector4.Y;
							}
						}
					}
				}
			}
			num40 = (float)((int)(num40 / 16f) * 16);
			num41 = (float)((int)(num41 / 16f) * 16);
			vector2.X = (float)((int)(vector2.X / 16f) * 16);
			vector2.Y = (float)((int)(vector2.Y / 16f) * 16);
			num40 -= vector2.X;
			num41 -= vector2.Y;
			if (this.type == 375)
			{
				num40 *= -1f;
				num41 *= -1f;
			}
			float num53 = (float)Math.Sqrt((double)(num40 * num40 + num41 * num41));
			if (this.ai[1] > 0f && this.ai[1] < (float)Main.npc.Length)
			{
				try
				{
					vector2 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
					num40 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - vector2.X;
					num41 = Main.npc[(int)this.ai[1]].position.Y + (float)(Main.npc[(int)this.ai[1]].height / 2) - vector2.Y;
				}
				catch
				{
				}
				this.rotation = (float)Math.Atan2((double)num41, (double)num40) + 1.57f;
				num53 = (float)Math.Sqrt((double)(num40 * num40 + num41 * num41));
				int num54 = this.width;
				if (this.type >= 87 && this.type <= 92)
				{
					num54 = 42;
				}
				if (this.type >= 454 && this.type <= 459)
				{
					num54 = 36;
				}
				if (this.type >= 13 && this.type <= 15)
				{
					num54 = (int)((float)num54 * this.scale);
				}
				if (this.type >= 412 && this.type <= 414)
				{
					num54 += 6;
				}
				num53 = (num53 - (float)num54) / num53;
				num40 *= num53;
				num41 *= num53;
				this.velocity = Vector2.Zero;
				this.position.X = this.position.X + num40;
				this.position.Y = this.position.Y + num41;
				if (this.type >= 87 && this.type <= 92)
				{
					if (num40 < 0f)
					{
						this.spriteDirection = 1;
					}
					else if (num40 > 0f)
					{
						this.spriteDirection = -1;
					}
				}
				if (this.type >= 454 && this.type <= 459)
				{
					if (num40 < 0f)
					{
						this.spriteDirection = 1;
						return;
					}
					if (num40 > 0f)
					{
						this.spriteDirection = -1;
						return;
					}
				}
			}
			else
			{
				if (!flag2)
				{
					this.TargetClosest(true);
					this.velocity.Y = this.velocity.Y + 0.11f;
					if (this.velocity.Y > num37)
					{
						this.velocity.Y = num37;
					}
					if ((double)(Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) < (double)num37 * 0.4)
					{
						if (this.velocity.X < 0f)
						{
							this.velocity.X = this.velocity.X - num38 * 1.1f;
						}
						else
						{
							this.velocity.X = this.velocity.X + num38 * 1.1f;
						}
					}
					else if (this.velocity.Y == num37)
					{
						if (this.velocity.X < num40)
						{
							this.velocity.X = this.velocity.X + num38;
						}
						else if (this.velocity.X > num40)
						{
							this.velocity.X = this.velocity.X - num38;
						}
					}
					else if (this.velocity.Y > 4f)
					{
						if (this.velocity.X < 0f)
						{
							this.velocity.X = this.velocity.X + num38 * 0.9f;
						}
						else
						{
							this.velocity.X = this.velocity.X - num38 * 0.9f;
						}
					}
				}
				else
				{
					if (this.type != 87 && this.type != 117 && this.type != 454 && this.type != 412 && this.soundDelay == 0)
					{
						float num55 = num53 / 40f;
						if (num55 < 10f)
						{
							num55 = 10f;
						}
						if (num55 > 20f)
						{
							num55 = 20f;
						}
						this.soundDelay = (int)num55;
						Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					}
					num53 = (float)Math.Sqrt((double)(num40 * num40 + num41 * num41));
					float num56 = Math.Abs(num40);
					float num57 = Math.Abs(num41);
					float num58 = num37 / num53;
					num40 *= num58;
					num41 *= num58;
					bool flag4 = false;
					if ((this.type == 7 || this.type == 13) && ((!Main.player[this.target].ZoneCorrupt && !Main.player[this.target].ZoneCrimson) || Main.player[this.target].dead))
					{
						flag4 = true;
					}
					if ((this.type == 513 && (double)Main.player[this.target].position.Y < Main.worldSurface * 16.0 && !Main.player[this.target].ZoneSandstorm && !Main.player[this.target].ZoneUndergroundDesert) || Main.player[this.target].dead)
					{
						flag4 = true;
					}
					if ((this.type == 510 && (double)Main.player[this.target].position.Y < Main.worldSurface * 16.0 && !Main.player[this.target].ZoneSandstorm && !Main.player[this.target].ZoneUndergroundDesert) || Main.player[this.target].dead)
					{
						flag4 = true;
					}
					if (flag4)
					{
						bool flag5 = true;
						for (int num59 = 0; num59 < 255; num59++)
						{
							if (Main.player[num59].active && !Main.player[num59].dead && Main.player[num59].ZoneCorrupt)
							{
								flag5 = false;
							}
						}
						if (flag5)
						{
							if (Main.netMode != 1 && (double)(this.position.Y / 16f) > (Main.rockLayer + (double)Main.maxTilesY) / 2.0)
							{
								this.active = false;
								int num60 = (int)this.ai[0];
								while (num60 > 0 && num60 < 200 && Main.npc[num60].active && Main.npc[num60].aiStyle == this.aiStyle)
								{
									int num61 = (int)Main.npc[num60].ai[0];
									Main.npc[num60].active = false;
									this.life = 0;
									if (Main.netMode == 2)
									{
										NetMessage.SendData(23, -1, -1, "", num60, 0f, 0f, 0f, 0, 0, 0);
									}
									num60 = num61;
								}
								if (Main.netMode == 2)
								{
									NetMessage.SendData(23, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
								}
							}
							num40 = 0f;
							num41 = num37;
						}
					}
					bool flag6 = false;
					if (this.type == 87)
					{
						if (((this.velocity.X > 0f && num40 < 0f) || (this.velocity.X < 0f && num40 > 0f) || (this.velocity.Y > 0f && num41 < 0f) || (this.velocity.Y < 0f && num41 > 0f)) && Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) > num38 / 2f && num53 < 300f)
						{
							flag6 = true;
							if (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) < num37)
							{
								this.velocity *= 1.1f;
							}
						}
						if (this.position.Y > Main.player[this.target].position.Y || (double)(Main.player[this.target].position.Y / 16f) > Main.worldSurface || Main.player[this.target].dead)
						{
							flag6 = true;
							if (Math.Abs(this.velocity.X) < num37 / 2f)
							{
								if (this.velocity.X == 0f)
								{
									this.velocity.X = this.velocity.X - (float)this.direction;
								}
								this.velocity.X = this.velocity.X * 1.1f;
							}
							else if (this.velocity.Y > -num37)
							{
								this.velocity.Y = this.velocity.Y - num38;
							}
						}
					}
					if (this.type == 454)
					{
						if (((this.velocity.X > 0f && num40 < 0f) || (this.velocity.X < 0f && num40 > 0f) || (this.velocity.Y > 0f && num41 < 0f) || (this.velocity.Y < 0f && num41 > 0f)) && Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) > num38 / 2f && num53 < 300f)
						{
							flag6 = true;
							if (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) < num37)
							{
								this.velocity *= 1.1f;
							}
						}
						if (this.position.Y > Main.player[this.target].position.Y || Main.player[this.target].dead)
						{
							flag6 = true;
							if (Math.Abs(this.velocity.X) < num37 / 2f)
							{
								if (this.velocity.X == 0f)
								{
									this.velocity.X = this.velocity.X - (float)this.direction;
								}
								this.velocity.X = this.velocity.X * 1.1f;
							}
							else if (this.velocity.Y > -num37)
							{
								this.velocity.Y = this.velocity.Y - num38;
							}
						}
					}
					if (!flag6)
					{
						if ((this.velocity.X > 0f && num40 > 0f) || (this.velocity.X < 0f && num40 < 0f) || (this.velocity.Y > 0f && num41 > 0f) || (this.velocity.Y < 0f && num41 < 0f))
						{
							if (this.velocity.X < num40)
							{
								this.velocity.X = this.velocity.X + num38;
							}
							else if (this.velocity.X > num40)
							{
								this.velocity.X = this.velocity.X - num38;
							}
							if (this.velocity.Y < num41)
							{
								this.velocity.Y = this.velocity.Y + num38;
							}
							else if (this.velocity.Y > num41)
							{
								this.velocity.Y = this.velocity.Y - num38;
							}
							if ((double)Math.Abs(num41) < (double)num37 * 0.2 && ((this.velocity.X > 0f && num40 < 0f) || (this.velocity.X < 0f && num40 > 0f)))
							{
								if (this.velocity.Y > 0f)
								{
									this.velocity.Y = this.velocity.Y + num38 * 2f;
								}
								else
								{
									this.velocity.Y = this.velocity.Y - num38 * 2f;
								}
							}
							if ((double)Math.Abs(num40) < (double)num37 * 0.2 && ((this.velocity.Y > 0f && num41 < 0f) || (this.velocity.Y < 0f && num41 > 0f)))
							{
								if (this.velocity.X > 0f)
								{
									this.velocity.X = this.velocity.X + num38 * 2f;
								}
								else
								{
									this.velocity.X = this.velocity.X - num38 * 2f;
								}
							}
						}
						else if (num56 > num57)
						{
							if (this.velocity.X < num40)
							{
								this.velocity.X = this.velocity.X + num38 * 1.1f;
							}
							else if (this.velocity.X > num40)
							{
								this.velocity.X = this.velocity.X - num38 * 1.1f;
							}
							if ((double)(Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) < (double)num37 * 0.5)
							{
								if (this.velocity.Y > 0f)
								{
									this.velocity.Y = this.velocity.Y + num38;
								}
								else
								{
									this.velocity.Y = this.velocity.Y - num38;
								}
							}
						}
						else
						{
							if (this.velocity.Y < num41)
							{
								this.velocity.Y = this.velocity.Y + num38 * 1.1f;
							}
							else if (this.velocity.Y > num41)
							{
								this.velocity.Y = this.velocity.Y - num38 * 1.1f;
							}
							if ((double)(Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) < (double)num37 * 0.5)
							{
								if (this.velocity.X > 0f)
								{
									this.velocity.X = this.velocity.X + num38;
								}
								else
								{
									this.velocity.X = this.velocity.X - num38;
								}
							}
						}
					}
				}
				this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
				if (this.type == 7 || this.type == 10 || this.type == 13 || this.type == 39 || this.type == 95 || this.type == 98 || this.type == 117 || this.type == 510 || this.type == 513)
				{
					if (flag2)
					{
						if (this.localAI[0] != 1f)
						{
							this.netUpdate = true;
						}
						this.localAI[0] = 1f;
					}
					else
					{
						if (this.localAI[0] != 0f)
						{
							this.netUpdate = true;
						}
						this.localAI[0] = 0f;
					}
					if (((this.velocity.X > 0f && this.oldVelocity.X < 0f) || (this.velocity.X < 0f && this.oldVelocity.X > 0f) || (this.velocity.Y > 0f && this.oldVelocity.Y < 0f) || (this.velocity.Y < 0f && this.oldVelocity.Y > 0f)) && !this.justHit)
					{
						this.netUpdate = true;
					}
				}
				if (this.type == 454)
				{
					float num62 = Vector2.Distance(Main.player[this.target].Center, base.Center);
					int num63 = 0;
					if (Vector2.Normalize(Main.player[this.target].Center - base.Center).ToRotation().AngleTowards(this.velocity.ToRotation(), 1.57079637f) == this.velocity.ToRotation() && num62 < 350f)
					{
						num63 = 4;
					}
					if ((double)num63 > this.frameCounter)
					{
						this.frameCounter += 1.0;
					}
					if ((double)num63 < this.frameCounter)
					{
						this.frameCounter -= 1.0;
					}
					if (this.frameCounter < 0.0)
					{
						this.frameCounter = 0.0;
					}
					if (this.frameCounter > 4.0)
					{
						this.frameCounter = 4.0;
					}
				}
			}
		}

		private void AI_002_FloatingEye()
		{
			if ((this.type == 170 || this.type == 171 || this.type == 180) && Main.rand.Next(1000) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, 9, 1f, 0f);
			}
			this.noGravity = true;
			if (!this.noTileCollide)
			{
				if (this.collideX)
				{
					this.velocity.X = this.oldVelocity.X * -0.5f;
					if (this.direction == -1 && this.velocity.X > 0f && this.velocity.X < 2f)
					{
						this.velocity.X = 2f;
					}
					if (this.direction == 1 && this.velocity.X < 0f && this.velocity.X > -2f)
					{
						this.velocity.X = -2f;
					}
				}
				if (this.collideY)
				{
					this.velocity.Y = this.oldVelocity.Y * -0.5f;
					if (this.velocity.Y > 0f && this.velocity.Y < 1f)
					{
						this.velocity.Y = 1f;
					}
					if (this.velocity.Y < 0f && this.velocity.Y > -1f)
					{
						this.velocity.Y = -1f;
					}
				}
			}
			if (Main.dayTime && (double)this.position.Y <= Main.worldSurface * 16.0 && (this.type == 2 || this.type == 133 || this.type == 190 || this.type == 191 || this.type == 192 || this.type == 193 || this.type == 194 || this.type == 317 || this.type == 318))
			{
				if (this.timeLeft > 10)
				{
					this.timeLeft = 10;
				}
				this.directionY = -1;
				if (this.velocity.Y > 0f)
				{
					this.direction = 1;
				}
				this.direction = -1;
				if (this.velocity.X > 0f)
				{
					this.direction = 1;
				}
			}
			else
			{
				this.TargetClosest(true);
			}
			if (this.type == 170 || this.type == 171 || this.type == 180)
			{
				if (Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
				{
					if (this.ai[1] > 0f && !Collision.SolidCollision(this.position, this.width, this.height))
					{
						this.ai[1] = 0f;
						this.ai[0] = 0f;
						this.netUpdate = true;
					}
				}
				else if (this.ai[1] == 0f)
				{
					this.ai[0] += 1f;
				}
				if (this.ai[0] >= 300f)
				{
					this.ai[1] = 1f;
					this.ai[0] = 0f;
					this.netUpdate = true;
				}
				if (this.ai[1] == 0f)
				{
					this.alpha = 0;
					this.noTileCollide = false;
				}
				else
				{
					this.wet = false;
					this.alpha = 200;
					this.noTileCollide = true;
				}
				this.rotation = this.velocity.Y * 0.1f * (float)this.direction;
				this.TargetClosest(true);
				if (this.direction == -1 && this.velocity.X > -4f && this.position.X > Main.player[this.target].position.X + (float)Main.player[this.target].width)
				{
					this.velocity.X = this.velocity.X - 0.08f;
					if (this.velocity.X > 4f)
					{
						this.velocity.X = this.velocity.X - 0.04f;
					}
					else if (this.velocity.X > 0f)
					{
						this.velocity.X = this.velocity.X - 0.2f;
					}
					if (this.velocity.X < -4f)
					{
						this.velocity.X = -4f;
					}
				}
				else if (this.direction == 1 && this.velocity.X < 4f && this.position.X + (float)this.width < Main.player[this.target].position.X)
				{
					this.velocity.X = this.velocity.X + 0.08f;
					if (this.velocity.X < -4f)
					{
						this.velocity.X = this.velocity.X + 0.04f;
					}
					else if (this.velocity.X < 0f)
					{
						this.velocity.X = this.velocity.X + 0.2f;
					}
					if (this.velocity.X > 4f)
					{
						this.velocity.X = 4f;
					}
				}
				if (this.directionY == -1 && (double)this.velocity.Y > -2.5 && this.position.Y > Main.player[this.target].position.Y + (float)Main.player[this.target].height)
				{
					this.velocity.Y = this.velocity.Y - 0.1f;
					if ((double)this.velocity.Y > 2.5)
					{
						this.velocity.Y = this.velocity.Y - 0.05f;
					}
					else if (this.velocity.Y > 0f)
					{
						this.velocity.Y = this.velocity.Y - 0.15f;
					}
					if ((double)this.velocity.Y < -2.5)
					{
						this.velocity.Y = -2.5f;
					}
				}
				else if (this.directionY == 1 && (double)this.velocity.Y < 2.5 && this.position.Y + (float)this.height < Main.player[this.target].position.Y)
				{
					this.velocity.Y = this.velocity.Y + 0.1f;
					if ((double)this.velocity.Y < -2.5)
					{
						this.velocity.Y = this.velocity.Y + 0.05f;
					}
					else if (this.velocity.Y < 0f)
					{
						this.velocity.Y = this.velocity.Y + 0.15f;
					}
					if ((double)this.velocity.Y > 2.5)
					{
						this.velocity.Y = 2.5f;
					}
				}
			}
			else if (this.type == 116)
			{
				this.TargetClosest(true);
				Lighting.AddLight((int)(this.position.X + (float)(this.width / 2)) / 16, (int)(this.position.Y + (float)(this.height / 2)) / 16, 0.3f, 0.2f, 0.1f);
				if (this.direction == -1 && this.velocity.X > -6f)
				{
					this.velocity.X = this.velocity.X - 0.1f;
					if (this.velocity.X > 6f)
					{
						this.velocity.X = this.velocity.X - 0.1f;
					}
					else if (this.velocity.X > 0f)
					{
						this.velocity.X = this.velocity.X - 0.2f;
					}
					if (this.velocity.X < -6f)
					{
						this.velocity.X = -6f;
					}
				}
				else if (this.direction == 1 && this.velocity.X < 6f)
				{
					this.velocity.X = this.velocity.X + 0.1f;
					if (this.velocity.X < -6f)
					{
						this.velocity.X = this.velocity.X + 0.1f;
					}
					else if (this.velocity.X < 0f)
					{
						this.velocity.X = this.velocity.X + 0.2f;
					}
					if (this.velocity.X > 6f)
					{
						this.velocity.X = 6f;
					}
				}
				if (this.directionY == -1 && (double)this.velocity.Y > -2.5)
				{
					this.velocity.Y = this.velocity.Y - 0.04f;
					if ((double)this.velocity.Y > 2.5)
					{
						this.velocity.Y = this.velocity.Y - 0.05f;
					}
					else if (this.velocity.Y > 0f)
					{
						this.velocity.Y = this.velocity.Y - 0.15f;
					}
					if ((double)this.velocity.Y < -2.5)
					{
						this.velocity.Y = -2.5f;
					}
				}
				else if (this.directionY == 1 && (double)this.velocity.Y < 1.5)
				{
					this.velocity.Y = this.velocity.Y + 0.04f;
					if ((double)this.velocity.Y < -2.5)
					{
						this.velocity.Y = this.velocity.Y + 0.05f;
					}
					else if (this.velocity.Y < 0f)
					{
						this.velocity.Y = this.velocity.Y + 0.15f;
					}
					if ((double)this.velocity.Y > 2.5)
					{
						this.velocity.Y = 2.5f;
					}
				}
				if (Main.rand.Next(40) == 0)
				{
					int num = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height * 0.25f), this.width, (int)((float)this.height * 0.5f), 5, this.velocity.X, 2f, 0, default(Color), 1f);
					Dust expr_B94_cp_0 = Main.dust[num];
					expr_B94_cp_0.velocity.X = expr_B94_cp_0.velocity.X * 0.5f;
					Dust expr_BB1_cp_0 = Main.dust[num];
					expr_BB1_cp_0.velocity.Y = expr_BB1_cp_0.velocity.Y * 0.1f;
				}
			}
			else if (this.type == 133)
			{
				if ((double)this.life < (double)this.lifeMax * 0.5)
				{
					if (this.direction == -1 && this.velocity.X > -6f)
					{
						this.velocity.X = this.velocity.X - 0.1f;
						if (this.velocity.X > 6f)
						{
							this.velocity.X = this.velocity.X - 0.1f;
						}
						else if (this.velocity.X > 0f)
						{
							this.velocity.X = this.velocity.X + 0.05f;
						}
						if (this.velocity.X < -6f)
						{
							this.velocity.X = -6f;
						}
					}
					else if (this.direction == 1 && this.velocity.X < 6f)
					{
						this.velocity.X = this.velocity.X + 0.1f;
						if (this.velocity.X < -6f)
						{
							this.velocity.X = this.velocity.X + 0.1f;
						}
						else if (this.velocity.X < 0f)
						{
							this.velocity.X = this.velocity.X - 0.05f;
						}
						if (this.velocity.X > 6f)
						{
							this.velocity.X = 6f;
						}
					}
					if (this.directionY == -1 && this.velocity.Y > -4f)
					{
						this.velocity.Y = this.velocity.Y - 0.1f;
						if (this.velocity.Y > 4f)
						{
							this.velocity.Y = this.velocity.Y - 0.1f;
						}
						else if (this.velocity.Y > 0f)
						{
							this.velocity.Y = this.velocity.Y + 0.05f;
						}
						if (this.velocity.Y < -4f)
						{
							this.velocity.Y = -4f;
						}
					}
					else if (this.directionY == 1 && this.velocity.Y < 4f)
					{
						this.velocity.Y = this.velocity.Y + 0.1f;
						if (this.velocity.Y < -4f)
						{
							this.velocity.Y = this.velocity.Y + 0.1f;
						}
						else if (this.velocity.Y < 0f)
						{
							this.velocity.Y = this.velocity.Y - 0.05f;
						}
						if (this.velocity.Y > 4f)
						{
							this.velocity.Y = 4f;
						}
					}
				}
				else
				{
					if (this.direction == -1 && this.velocity.X > -4f)
					{
						this.velocity.X = this.velocity.X - 0.1f;
						if (this.velocity.X > 4f)
						{
							this.velocity.X = this.velocity.X - 0.1f;
						}
						else if (this.velocity.X > 0f)
						{
							this.velocity.X = this.velocity.X + 0.05f;
						}
						if (this.velocity.X < -4f)
						{
							this.velocity.X = -4f;
						}
					}
					else if (this.direction == 1 && this.velocity.X < 4f)
					{
						this.velocity.X = this.velocity.X + 0.1f;
						if (this.velocity.X < -4f)
						{
							this.velocity.X = this.velocity.X + 0.1f;
						}
						else if (this.velocity.X < 0f)
						{
							this.velocity.X = this.velocity.X - 0.05f;
						}
						if (this.velocity.X > 4f)
						{
							this.velocity.X = 4f;
						}
					}
					if (this.directionY == -1 && (double)this.velocity.Y > -1.5)
					{
						this.velocity.Y = this.velocity.Y - 0.04f;
						if ((double)this.velocity.Y > 1.5)
						{
							this.velocity.Y = this.velocity.Y - 0.05f;
						}
						else if (this.velocity.Y > 0f)
						{
							this.velocity.Y = this.velocity.Y + 0.03f;
						}
						if ((double)this.velocity.Y < -1.5)
						{
							this.velocity.Y = -1.5f;
						}
					}
					else if (this.directionY == 1 && (double)this.velocity.Y < 1.5)
					{
						this.velocity.Y = this.velocity.Y + 0.04f;
						if ((double)this.velocity.Y < -1.5)
						{
							this.velocity.Y = this.velocity.Y + 0.05f;
						}
						else if (this.velocity.Y < 0f)
						{
							this.velocity.Y = this.velocity.Y - 0.03f;
						}
						if ((double)this.velocity.Y > 1.5)
						{
							this.velocity.Y = 1.5f;
						}
					}
				}
			}
			else
			{
				float num2 = 4f;
				float num3 = 1.5f;
				num2 *= 1f + (1f - this.scale);
				num3 *= 1f + (1f - this.scale);
				if (this.direction == -1 && this.velocity.X > -num2)
				{
					this.velocity.X = this.velocity.X - 0.1f;
					if (this.velocity.X > num2)
					{
						this.velocity.X = this.velocity.X - 0.1f;
					}
					else if (this.velocity.X > 0f)
					{
						this.velocity.X = this.velocity.X + 0.05f;
					}
					if (this.velocity.X < -num2)
					{
						this.velocity.X = -num2;
					}
				}
				else if (this.direction == 1 && this.velocity.X < num2)
				{
					this.velocity.X = this.velocity.X + 0.1f;
					if (this.velocity.X < -num2)
					{
						this.velocity.X = this.velocity.X + 0.1f;
					}
					else if (this.velocity.X < 0f)
					{
						this.velocity.X = this.velocity.X - 0.05f;
					}
					if (this.velocity.X > num2)
					{
						this.velocity.X = num2;
					}
				}
				if (this.directionY == -1 && this.velocity.Y > -num3)
				{
					this.velocity.Y = this.velocity.Y - 0.04f;
					if (this.velocity.Y > num3)
					{
						this.velocity.Y = this.velocity.Y - 0.05f;
					}
					else if (this.velocity.Y > 0f)
					{
						this.velocity.Y = this.velocity.Y + 0.03f;
					}
					if (this.velocity.Y < -num3)
					{
						this.velocity.Y = -num3;
					}
				}
				else if (this.directionY == 1 && this.velocity.Y < num3)
				{
					this.velocity.Y = this.velocity.Y + 0.04f;
					if (this.velocity.Y < -num3)
					{
						this.velocity.Y = this.velocity.Y + 0.05f;
					}
					else if (this.velocity.Y < 0f)
					{
						this.velocity.Y = this.velocity.Y - 0.03f;
					}
					if (this.velocity.Y > num3)
					{
						this.velocity.Y = num3;
					}
				}
			}
			if ((this.type == 2 || this.type == 133 || this.type == 190 || this.type == 191 || this.type == 192 || this.type == 193 || this.type == 194) && Main.rand.Next(40) == 0)
			{
				int num4 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height * 0.25f), this.width, (int)((float)this.height * 0.5f), 5, this.velocity.X, 2f, 0, default(Color), 1f);
				Dust expr_1553_cp_0 = Main.dust[num4];
				expr_1553_cp_0.velocity.X = expr_1553_cp_0.velocity.X * 0.5f;
				Dust expr_1570_cp_0 = Main.dust[num4];
				expr_1570_cp_0.velocity.Y = expr_1570_cp_0.velocity.Y * 0.1f;
			}
			if (this.wet && this.type != 170 && this.type != 171 && this.type != 172)
			{
				if (this.velocity.Y > 0f)
				{
					this.velocity.Y = this.velocity.Y * 0.95f;
				}
				this.velocity.Y = this.velocity.Y - 0.5f;
				if (this.velocity.Y < -4f)
				{
					this.velocity.Y = -4f;
				}
				this.TargetClosest(true);
			}
		}

		private void AI_007_TownEntities()
		{
			int maxValue = 300;
			bool flag = Main.raining;
			if (!Main.dayTime)
			{
				flag = true;
			}
			if (Main.eclipse)
			{
				flag = true;
			}
			if (Main.slimeRain)
			{
				flag = true;
			}
			float num = 1f;
			if (Main.expertMode)
			{
				this.defense = (this.dryadWard ? (this.defDefense + 10) : this.defDefense);
			}
			else
			{
				this.defense = (this.dryadWard ? (this.defDefense + 6) : this.defDefense);
			}
			if (this.townNPC || this.type == 453)
			{
				if (NPC.downedBoss1)
				{
					num += 0.1f;
					this.defense += 3;
				}
				if (NPC.downedBoss2)
				{
					num += 0.1f;
					this.defense += 3;
				}
				if (NPC.downedBoss3)
				{
					num += 0.1f;
					this.defense += 3;
				}
				if (NPC.downedQueenBee)
				{
					num += 0.1f;
					this.defense += 3;
				}
				if (Main.hardMode)
				{
					num += 0.4f;
					this.defense += 12;
				}
				if (NPC.downedMechBoss1)
				{
					num += 0.15f;
					this.defense += 6;
				}
				if (NPC.downedMechBoss2)
				{
					num += 0.15f;
					this.defense += 6;
				}
				if (NPC.downedMechBoss3)
				{
					num += 0.15f;
					this.defense += 6;
				}
				if (NPC.downedPlantBoss)
				{
					num += 0.15f;
					this.defense += 8;
				}
				if (NPC.downedGolemBoss)
				{
					num += 0.15f;
					this.defense += 8;
				}
				if (NPC.downedAncientCultist)
				{
					num += 0.15f;
					this.defense += 8;
				}
			}
			if (this.type == 142 && Main.netMode != 1 && !Main.xMas)
			{
				this.StrikeNPCNoInteraction(9999, 0f, 0, false, false, false);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(28, -1, -1, "", this.whoAmI, 9999f, 0f, 0f, 0, 0, 0);
				}
			}
			if ((this.type == 148 || this.type == 149) && this.localAI[0] == 0f)
			{
				this.localAI[0] = (float)Main.rand.Next(1, 5);
			}
			if (this.type == 124)
			{
				bool flag2 = false;
				for (int i = 0; i < 1000; i++)
				{
					if (Main.projectile[i].active && Main.projectile[i].type == 582 && Main.projectile[i].ai[1] == (float)this.whoAmI)
					{
						flag2 = true;
						break;
					}
				}
				this.localAI[0] = (float)flag2.ToInt();
			}
			if ((this.type == 362 || this.type == 364) && Main.netMode != 1 && (this.velocity.Y > 4f || this.velocity.Y < -4f || this.wet))
			{
				int direction = this.direction;
				this.Transform(this.type + 1);
				this.TargetClosest(true);
				this.direction = direction;
				this.netUpdate = true;
				return;
			}
			int num2 = this.type;
			if (num2 <= 353)
			{
				switch (num2)
				{
				case 107:
					NPC.savedGoblin = true;
					break;
				case 108:
					NPC.savedWizard = true;
					break;
				default:
					if (num2 != 124)
					{
						if (num2 == 353)
						{
							NPC.savedStylist = true;
						}
					}
					else
					{
						NPC.savedMech = true;
					}
					break;
				}
			}
			else if (num2 != 369)
			{
				if (num2 != 441)
				{
					if (num2 == 550)
					{
						NPC.savedBartender = true;
					}
				}
				else
				{
					NPC.savedTaxCollector = true;
				}
			}
			else
			{
				NPC.savedAngler = true;
			}
			if (this.type >= 0 && this.type < 580 && NPCID.Sets.TownCritter[this.type] && this.target == 255)
			{
				this.TargetClosest(true);
				if (this.position.X < Main.player[this.target].position.X)
				{
					this.direction = 1;
					this.spriteDirection = this.direction;
				}
				if (this.position.X > Main.player[this.target].position.X)
				{
					this.direction = -1;
					this.spriteDirection = this.direction;
				}
				if (this.homeTileX == -1)
				{
					this.homeTileX = (int)((this.position.X + (float)(this.width / 2)) / 16f);
				}
			}
			else if (this.homeTileX == -1 && this.homeTileY == -1 && this.velocity.Y == 0f)
			{
				this.homeTileX = (int)base.Center.X / 16;
				this.homeTileY = (int)(this.position.Y + (float)this.height + 4f) / 16;
			}
			bool flag3 = false;
			int num3 = this.homeTileY;
			if (this.type == 441)
			{
				NPC.taxCollector = true;
			}
			this.directionY = -1;
			if (this.direction == 0)
			{
				this.direction = 1;
			}
			for (int j = 0; j < 255; j++)
			{
				if (Main.player[j].active && Main.player[j].talkNPC == this.whoAmI)
				{
					flag3 = true;
					if (this.ai[0] != 0f)
					{
						this.netUpdate = true;
					}
					this.ai[0] = 0f;
					this.ai[1] = 300f;
					this.localAI[3] = 100f;
					if (Main.player[j].position.X + (float)(Main.player[j].width / 2) < this.position.X + (float)(this.width / 2))
					{
						this.direction = -1;
					}
					else
					{
						this.direction = 1;
					}
				}
			}
			if (this.ai[3] == 1f)
			{
				this.life = -1;
				this.HitEffect(0, 10.0);
				this.active = false;
				this.netUpdate = true;
				if (this.type == 37)
				{
					Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
				}
				return;
			}
			if (this.type == 37 && Main.netMode != 1)
			{
				this.homeless = false;
				this.homeTileX = Main.dungeonX;
				this.homeTileY = Main.dungeonY;
				if (NPC.downedBoss3)
				{
					this.ai[3] = 1f;
					this.netUpdate = true;
				}
			}
			if (Main.netMode != 1 && this.homeTileY > 0)
			{
				while (!WorldGen.SolidTile(this.homeTileX, num3) && num3 < Main.maxTilesY - 20)
				{
					num3++;
				}
			}
			if (this.type == 368)
			{
				this.homeless = true;
				if (!Main.dayTime)
				{
					this.homeTileX = (int)(base.Center.X / 16f);
					this.homeTileY = (int)(this.position.Y + (float)this.height + 2f) / 16;
					if (!flag3 && this.ai[0] == 0f)
					{
						this.ai[0] = 1f;
						this.ai[1] = 200f;
					}
					flag = false;
				}
			}
			if (this.type == 369 && this.homeless && this.wet)
			{
				if (base.Center.X / 16f < 380f || base.Center.X / 16f > (float)(Main.maxTilesX - 380))
				{
					this.homeTileX = Main.spawnTileX;
					this.homeTileY = Main.spawnTileY;
					this.ai[0] = 1f;
					this.ai[1] = 200f;
				}
				if (this.position.X / 16f < 200f)
				{
					this.direction = 1;
				}
				else if (this.position.X / 16f > (float)(Main.maxTilesX - 200))
				{
					this.direction = -1;
				}
			}
			int num4 = (int)(this.position.X + (float)(this.width / 2)) / 16;
			int num5 = (int)(this.position.Y + (float)this.height + 1f) / 16;
			if (!WorldGen.InWorld(num4, num5, 0) || Main.tile[num4, num5] == null)
			{
				return;
			}
			if (!this.homeless && Main.netMode != 1 && this.townNPC && (flag || Main.tileDungeon[(int)Main.tile[num4, num5].type]) && (num4 != this.homeTileX || num5 != num3))
			{
				bool flag4 = true;
				for (int k = 0; k < 2; k++)
				{
					Rectangle rectangle = new Rectangle((int)(this.position.X + (float)(this.width / 2) - (float)(NPC.sWidth / 2) - (float)NPC.safeRangeX), (int)(this.position.Y + (float)(this.height / 2) - (float)(NPC.sHeight / 2) - (float)NPC.safeRangeY), NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
					if (k == 1)
					{
						rectangle = new Rectangle(this.homeTileX * 16 + 8 - NPC.sWidth / 2 - NPC.safeRangeX, num3 * 16 + 8 - NPC.sHeight / 2 - NPC.safeRangeY, NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
					}
					for (int l = 0; l < 255; l++)
					{
						if (Main.player[l].active)
						{
							Rectangle rectangle2 = new Rectangle((int)Main.player[l].position.X, (int)Main.player[l].position.Y, Main.player[l].width, Main.player[l].height);
							if (rectangle2.Intersects(rectangle))
							{
								flag4 = false;
								break;
							}
						}
						if (!flag4)
						{
							break;
						}
					}
				}
				if (flag4)
				{
					if (this.type == 37 || !Collision.SolidTiles(this.homeTileX - 1, this.homeTileX + 1, num3 - 3, num3 - 1))
					{
						this.velocity.X = 0f;
						this.velocity.Y = 0f;
						this.position.X = (float)(this.homeTileX * 16 + 8 - this.width / 2);
						this.position.Y = (float)(num3 * 16 - this.height) - 0.1f;
						this.netUpdate = true;
					}
					else
					{
						this.homeless = true;
						WorldGen.QuickFindHome(this.whoAmI);
					}
				}
			}
			bool flag5 = this.type == 300 || this.type == 447;
			float num6 = 200f;
			if (NPCID.Sets.DangerDetectRange[this.type] != -1)
			{
				num6 = (float)NPCID.Sets.DangerDetectRange[this.type];
			}
			bool flag6 = false;
			bool flag7 = false;
			float num7 = -1f;
			float num8 = -1f;
			int num9 = 0;
			int num10 = -1;
			int num11 = -1;
			if (Main.netMode != 1 && !flag3)
			{
				for (int m = 0; m < 200; m++)
				{
					if (Main.npc[m].active && !Main.npc[m].friendly && Main.npc[m].damage > 0 && Main.npc[m].Distance(base.Center) < num6 && (this.type != 453 || !NPCID.Sets.Skeletons.Contains(Main.npc[m].netID)))
					{
						flag6 = true;
						float num12 = Main.npc[m].Center.X - base.Center.X;
						if (num12 < 0f && (num7 == -1f || num12 > num7))
						{
							num7 = num12;
							num10 = m;
						}
						if (num12 > 0f && (num8 == -1f || num12 < num8))
						{
							num8 = num12;
							num11 = m;
						}
					}
				}
				if (flag6)
				{
					if (num7 == -1f)
					{
						num9 = 1;
					}
					else if (num8 == -1f)
					{
						num9 = -1;
					}
					else
					{
						num9 = (num8 < -num7).ToDirectionInt();
					}
					float num13 = 0f;
					if (num7 != -1f)
					{
						num13 = -num7;
					}
					if (num13 == 0f || (num8 < num13 && num8 > 0f))
					{
						num13 = num8;
					}
					if (this.ai[0] == 8f)
					{
						if (this.direction == -num9)
						{
							this.ai[0] = 1f;
							this.ai[1] = (float)(300 + Main.rand.Next(300));
							this.ai[2] = 0f;
							this.localAI[3] = 0f;
							this.netUpdate = true;
						}
					}
					else if (this.ai[0] != 10f && this.ai[0] != 12f && this.ai[0] != 13f && this.ai[0] != 14f && this.ai[0] != 15f)
					{
						if (NPCID.Sets.PrettySafe[this.type] != -1 && (float)NPCID.Sets.PrettySafe[this.type] < num13)
						{
							flag6 = false;
							flag7 = true;
						}
						else if (this.ai[0] != 1f)
						{
							bool flag8 = this.ai[0] == 3f || this.ai[0] == 4f || this.ai[0] == 16f || this.ai[0] == 17f;
							if (flag8)
							{
								NPC nPC = Main.npc[(int)this.ai[2]];
								if (nPC.active)
								{
									nPC.ai[0] = 1f;
									nPC.ai[1] = (float)(120 + Main.rand.Next(120));
									nPC.ai[2] = 0f;
									nPC.localAI[3] = 0f;
									nPC.direction = -num9;
									nPC.netUpdate = true;
								}
							}
							this.ai[0] = 1f;
							this.ai[1] = (float)(120 + Main.rand.Next(120));
							this.ai[2] = 0f;
							this.localAI[3] = 0f;
							this.direction = -num9;
							this.netUpdate = true;
						}
						else if (this.ai[0] == 1f && this.direction != -num9)
						{
							this.direction = -num9;
							this.netUpdate = true;
						}
					}
				}
			}
			if (this.ai[0] == 0f)
			{
				if (this.localAI[3] > 0f)
				{
					this.localAI[3] -= 1f;
				}
				if (flag && !flag3 && !NPCID.Sets.TownCritter[this.type])
				{
					if (Main.netMode != 1)
					{
						if (num4 == this.homeTileX && num5 == num3)
						{
							if (this.velocity.X != 0f)
							{
								this.netUpdate = true;
							}
							if (this.velocity.X > 0.1f)
							{
								this.velocity.X = this.velocity.X - 0.1f;
							}
							else if (this.velocity.X < -0.1f)
							{
								this.velocity.X = this.velocity.X + 0.1f;
							}
							else
							{
								this.velocity.X = 0f;
							}
						}
						else
						{
							if (num4 > this.homeTileX)
							{
								this.direction = -1;
							}
							else
							{
								this.direction = 1;
							}
							this.ai[0] = 1f;
							this.ai[1] = (float)(200 + Main.rand.Next(200));
							this.ai[2] = 0f;
							this.localAI[3] = 0f;
							this.netUpdate = true;
						}
					}
				}
				else
				{
					if (flag5)
					{
						this.velocity.X = this.velocity.X * 0.5f;
					}
					if (this.velocity.X > 0.1f)
					{
						this.velocity.X = this.velocity.X - 0.1f;
					}
					else if (this.velocity.X < -0.1f)
					{
						this.velocity.X = this.velocity.X + 0.1f;
					}
					else
					{
						this.velocity.X = 0f;
					}
					if (Main.netMode != 1)
					{
						if (this.ai[1] > 0f)
						{
							this.ai[1] -= 1f;
						}
						if (this.ai[1] <= 0f)
						{
							this.ai[0] = 1f;
							this.ai[1] = (float)(200 + Main.rand.Next(300));
							this.ai[2] = 0f;
							if (NPCID.Sets.TownCritter[this.type])
							{
								this.ai[1] += (float)Main.rand.Next(200, 400);
							}
							this.localAI[3] = 0f;
							this.netUpdate = true;
						}
					}
				}
				if (Main.netMode != 1 && (!flag || (num4 == this.homeTileX && num5 == num3)))
				{
					if (num4 < this.homeTileX - 25 || num4 > this.homeTileX + 25)
					{
						if (this.localAI[3] == 0f)
						{
							if (num4 < this.homeTileX - 50 && this.direction == -1)
							{
								this.direction = 1;
								this.netUpdate = true;
							}
							else if (num4 > this.homeTileX + 50 && this.direction == 1)
							{
								this.direction = -1;
								this.netUpdate = true;
							}
						}
					}
					else if (Main.rand.Next(80) == 0 && this.localAI[3] == 0f)
					{
						this.localAI[3] = 200f;
						this.direction *= -1;
						this.netUpdate = true;
					}
				}
			}
			else if (this.ai[0] == 1f)
			{
				if (Main.netMode != 1 && flag && num4 == this.homeTileX && num5 == this.homeTileY && !NPCID.Sets.TownCritter[this.type])
				{
					this.ai[0] = 0f;
					this.ai[1] = (float)(200 + Main.rand.Next(200));
					this.localAI[3] = 60f;
					this.netUpdate = true;
				}
				else
				{
					bool flag9 = Collision.DrownCollision(this.position, this.width, this.height, 1f);
					if (!flag9)
					{
						if (Main.netMode != 1 && !this.homeless && !Main.tileDungeon[(int)Main.tile[num4, num5].type] && (num4 < this.homeTileX - 35 || num4 > this.homeTileX + 35))
						{
							if (this.position.X < (float)(this.homeTileX * 16) && this.direction == -1)
							{
								this.ai[1] -= 5f;
							}
							else if (this.position.X > (float)(this.homeTileX * 16) && this.direction == 1)
							{
								this.ai[1] -= 5f;
							}
						}
						this.ai[1] -= 1f;
					}
					if (this.ai[1] <= 0f)
					{
						this.ai[0] = 0f;
						this.ai[1] = (float)(300 + Main.rand.Next(300));
						this.ai[2] = 0f;
						if (NPCID.Sets.TownCritter[this.type])
						{
							this.ai[1] -= (float)Main.rand.Next(100);
						}
						else
						{
							this.ai[1] += (float)Main.rand.Next(900);
						}
						this.localAI[3] = 60f;
						this.netUpdate = true;
					}
					if (this.closeDoor && ((this.position.X + (float)(this.width / 2)) / 16f > (float)(this.doorX + 2) || (this.position.X + (float)(this.width / 2)) / 16f < (float)(this.doorX - 2)))
					{
						Tile tileSafely = Framing.GetTileSafely(this.doorX, this.doorY);
						if (tileSafely.type == 11)
						{
							bool flag10 = WorldGen.CloseDoor(this.doorX, this.doorY, false);
							if (flag10)
							{
								this.closeDoor = false;
								NetMessage.SendData(19, -1, -1, "", 1, (float)this.doorX, (float)this.doorY, (float)this.direction, 0, 0, 0);
							}
							if ((this.position.X + (float)(this.width / 2)) / 16f > (float)(this.doorX + 4) || (this.position.X + (float)(this.width / 2)) / 16f < (float)(this.doorX - 4) || (this.position.Y + (float)(this.height / 2)) / 16f > (float)(this.doorY + 4) || (this.position.Y + (float)(this.height / 2)) / 16f < (float)(this.doorY - 4))
							{
								this.closeDoor = false;
							}
						}
						else if (tileSafely.type == 389)
						{
							bool flag11 = WorldGen.ShiftTallGate(this.doorX, this.doorY, true);
							if (flag11)
							{
								this.closeDoor = false;
								NetMessage.SendData(19, -1, -1, "", 5, (float)this.doorX, (float)this.doorY, 0f, 0, 0, 0);
							}
							if ((this.position.X + (float)(this.width / 2)) / 16f > (float)(this.doorX + 4) || (this.position.X + (float)(this.width / 2)) / 16f < (float)(this.doorX - 4) || (this.position.Y + (float)(this.height / 2)) / 16f > (float)(this.doorY + 4) || (this.position.Y + (float)(this.height / 2)) / 16f < (float)(this.doorY - 4))
							{
								this.closeDoor = false;
							}
						}
						else
						{
							this.closeDoor = false;
						}
					}
					float num14 = 1f;
					float num15 = 0.07f;
					if (this.type == 299 || this.type == 539 || this.type == 538)
					{
						num14 = 1.5f;
					}
					if (flag5)
					{
						num14 = 2f;
						num15 = 1f;
					}
					if (this.friendly && (flag6 || flag9))
					{
						num14 = 1.5f;
						float num16 = 1f - (float)this.life / (float)this.lifeMax;
						num14 += num16 * 0.9f;
						num15 = 0.1f;
					}
					if (this.velocity.X < -num14 || this.velocity.X > num14)
					{
						if (this.velocity.Y == 0f)
						{
							this.velocity *= 0.8f;
						}
					}
					else if (this.velocity.X < num14 && this.direction == 1)
					{
						this.velocity.X = this.velocity.X + num15;
						if (this.velocity.X > num14)
						{
							this.velocity.X = num14;
						}
					}
					else if (this.velocity.X > -num14 && this.direction == -1)
					{
						this.velocity.X = this.velocity.X - num15;
						if (this.velocity.X > num14)
						{
							this.velocity.X = num14;
						}
					}
					bool holdsMatching = true;
					if ((float)(this.homeTileY * 16 - 32) > this.position.Y)
					{
						holdsMatching = false;
					}
					if ((this.direction == 1 && this.position.Y + (float)(this.width / 2) > (float)(this.homeTileX * 16)) || (this.direction == -1 && this.position.Y + (float)(this.width / 2) < (float)(this.homeTileX * 16)))
					{
						holdsMatching = true;
					}
					if (this.velocity.Y == 0f)
					{
						Collision.StepDown(ref this.position, ref this.velocity, this.width, this.height, ref this.stepSpeed, ref this.gfxOffY, 1, false);
					}
					if (this.velocity.Y >= 0f)
					{
						Collision.StepUp(ref this.position, ref this.velocity, this.width, this.height, ref this.stepSpeed, ref this.gfxOffY, 1, holdsMatching, 1);
					}
					if (this.velocity.Y == 0f)
					{
						int num17 = (int)((this.position.X + (float)(this.width / 2) + (float)(15 * this.direction)) / 16f);
						int num18 = (int)((this.position.Y + (float)this.height - 16f) / 16f);
						bool flag12 = false;
						bool flag13 = true;
						bool flag14 = num4 >= this.homeTileX - 35 && num4 <= this.homeTileX + 35;
						if (this.townNPC && this.ai[1] < 30f)
						{
							flag12 = !Utils.PlotTileLine(base.Top, base.Bottom, (float)this.width, new Utils.PerLinePoint(DelegateMethods.SearchAvoidedByNPCs));
							if (!flag12)
							{
								Rectangle hitbox = base.Hitbox;
								hitbox.X -= 20;
								hitbox.Width += 40;
								for (int n = 0; n < 200; n++)
								{
									if (Main.npc[n].active && Main.npc[n].friendly && n != this.whoAmI && Main.npc[n].velocity.X == 0f && hitbox.Intersects(Main.npc[n].Hitbox))
									{
										flag12 = true;
										break;
									}
								}
							}
						}
						if (!flag12 && flag9)
						{
							flag12 = true;
						}
						if (flag13 && (NPCID.Sets.TownCritter[this.type] || (!flag14 && this.direction == Math.Sign(this.homeTileX - num4))))
						{
							flag13 = false;
						}
						if (flag13)
						{
							int num19 = 0;
							for (int num20 = -1; num20 <= 4; num20++)
							{
								Tile tileSafely2 = Framing.GetTileSafely(num17 - this.direction * num19, num18 + num20);
								if (tileSafely2.lava() && tileSafely2.liquid > 0)
								{
									flag13 = true;
									break;
								}
								if (tileSafely2.nactive() && Main.tileSolid[(int)tileSafely2.type])
								{
									flag13 = false;
									break;
								}
							}
						}
						if (!flag13 && this.wet)
						{
							bool flag15 = flag9;
							bool flag16 = false;
							if (!flag15)
							{
								flag16 = Collision.DrownCollision(this.position + new Vector2((float)(this.width * this.direction), 0f), this.width, this.height, 1f);
							}
							flag16 = (flag16 || Collision.DrownCollision(this.position + new Vector2((float)(this.width * this.direction), (float)(this.height * 2 - 16 - (flag15 ? 16 : 0))), this.width, 16 + (flag15 ? 16 : 0), 1f));
							if (flag16 && this.localAI[3] <= 0f)
							{
								flag13 = true;
								this.localAI[3] = 600f;
							}
						}
						if (this.position.X == this.localAI[3])
						{
							this.direction *= -1;
							this.netUpdate = true;
							this.localAI[3] = 600f;
						}
						if (flag9)
						{
							if (this.localAI[3] > 0f)
							{
								this.localAI[3] -= 1f;
							}
						}
						else
						{
							this.localAI[3] = -1f;
						}
						Tile tileSafely3 = Framing.GetTileSafely(num17, num18);
						Tile tileSafely4 = Framing.GetTileSafely(num17, num18 - 1);
						Tile tileSafely5 = Framing.GetTileSafely(num17, num18 - 2);
						if (this.townNPC && tileSafely5.nactive() && (tileSafely5.type == 10 || tileSafely5.type == 388) && (Main.rand.Next(10) == 0 || flag))
						{
							if (Main.netMode != 1)
							{
								if (WorldGen.OpenDoor(num17, num18 - 2, this.direction))
								{
									this.closeDoor = true;
									this.doorX = num17;
									this.doorY = num18 - 2;
									NetMessage.SendData(19, -1, -1, "", 0, (float)num17, (float)(num18 - 2), (float)this.direction, 0, 0, 0);
									this.netUpdate = true;
									this.ai[1] += 80f;
								}
								else if (WorldGen.OpenDoor(num17, num18 - 2, -this.direction))
								{
									this.closeDoor = true;
									this.doorX = num17;
									this.doorY = num18 - 2;
									NetMessage.SendData(19, -1, -1, "", 0, (float)num17, (float)(num18 - 2), (float)(-(float)this.direction), 0, 0, 0);
									this.netUpdate = true;
									this.ai[1] += 80f;
								}
								else if (WorldGen.ShiftTallGate(num17, num18 - 2, false))
								{
									this.closeDoor = true;
									this.doorX = num17;
									this.doorY = num18 - 2;
									NetMessage.SendData(19, -1, -1, "", 4, (float)num17, (float)(num18 - 2), 0f, 0, 0, 0);
									this.netUpdate = true;
									this.ai[1] += 80f;
								}
								else
								{
									this.direction *= -1;
									this.netUpdate = true;
								}
							}
						}
						else
						{
							if ((this.velocity.X < 0f && this.spriteDirection == -1) || (this.velocity.X > 0f && this.spriteDirection == 1))
							{
								if (tileSafely5.nactive() && Main.tileSolid[(int)tileSafely5.type] && !Main.tileSolidTop[(int)tileSafely5.type])
								{
									if (!Collision.SolidTilesVersatile(num17 - this.direction * 2, num17 - this.direction, num18 - 5, num18 - 1) && !Collision.SolidTiles(num17, num17, num18 - 5, num18 - 3))
									{
										this.velocity.Y = -6f;
										this.netUpdate = true;
									}
									else if (flag5)
									{
										if (WorldGen.SolidTile((int)(base.Center.X / 16f) + this.direction, (int)(base.Center.Y / 16f)))
										{
											this.direction *= -1;
											this.velocity.X = this.velocity.X * 0f;
											this.netUpdate = true;
										}
									}
									else if (flag6)
									{
										flag12 = false;
										this.velocity.X = 0f;
										this.direction *= -1;
										this.netUpdate = true;
										this.ai[0] = 8f;
										this.ai[1] = 240f;
									}
									else
									{
										this.direction *= -1;
										this.netUpdate = true;
									}
								}
								else if (tileSafely4.nactive() && Main.tileSolid[(int)tileSafely4.type] && !Main.tileSolidTop[(int)tileSafely4.type])
								{
									if (!Collision.SolidTilesVersatile(num17 - this.direction * 2, num17 - this.direction, num18 - 4, num18 - 1) && !Collision.SolidTiles(num17, num17, num18 - 4, num18 - 2))
									{
										this.velocity.Y = -5f;
										this.netUpdate = true;
									}
									else if (flag6)
									{
										flag12 = false;
										this.velocity.X = 0f;
										this.direction *= -1;
										this.netUpdate = true;
										this.ai[0] = 8f;
										this.ai[1] = 240f;
									}
									else
									{
										this.direction *= -1;
										this.netUpdate = true;
									}
								}
								else if (this.position.Y + (float)this.height - (float)(num18 * 16) > 20f && tileSafely3.nactive() && Main.tileSolid[(int)tileSafely3.type] && !tileSafely3.topSlope())
								{
									if (!Collision.SolidTilesVersatile(num17 - this.direction * 2, num17, num18 - 3, num18 - 1))
									{
										this.velocity.Y = -4.4f;
										this.netUpdate = true;
									}
									else if (flag6)
									{
										flag12 = false;
										this.velocity.X = 0f;
										this.direction *= -1;
										this.netUpdate = true;
										this.ai[0] = 8f;
										this.ai[1] = 240f;
									}
									else
									{
										this.direction *= -1;
										this.netUpdate = true;
									}
								}
								else if (flag13)
								{
									this.direction *= -1;
									this.velocity.X = this.velocity.X * -1f;
									this.netUpdate = true;
									if (flag6)
									{
										flag12 = false;
										this.velocity.X = 0f;
										this.ai[0] = 8f;
										this.ai[1] = 240f;
									}
								}
								if (flag12)
								{
									this.ai[1] = 90f;
									this.netUpdate = true;
								}
								if (this.velocity.Y < 0f)
								{
									this.localAI[3] = this.position.X;
								}
							}
							if (this.velocity.Y < 0f && this.wet)
							{
								this.velocity.Y = this.velocity.Y * 1.2f;
							}
							if (this.velocity.Y < 0f && NPCID.Sets.TownCritter[this.type] && !flag5)
							{
								this.velocity.Y = this.velocity.Y * 1.2f;
							}
						}
					}
				}
			}
			else if (this.ai[0] == 2f || this.ai[0] == 11f)
			{
				if (Main.netMode != 1)
				{
					this.localAI[3] -= 1f;
					if (Main.rand.Next(60) == 0 && this.localAI[3] == 0f)
					{
						this.localAI[3] = 60f;
						this.direction *= -1;
						this.netUpdate = true;
					}
				}
				this.ai[1] -= 1f;
				this.velocity.X = this.velocity.X * 0.8f;
				if (this.ai[1] <= 0f)
				{
					this.localAI[3] = 40f;
					this.ai[0] = 0f;
					this.ai[1] = (float)(60 + Main.rand.Next(60));
					this.netUpdate = true;
				}
			}
			else if (this.ai[0] == 3f || this.ai[0] == 4f || this.ai[0] == 5f || this.ai[0] == 8f || this.ai[0] == 9f || this.ai[0] == 16f || this.ai[0] == 17f)
			{
				this.velocity.X = this.velocity.X * 0.8f;
				this.ai[1] -= 1f;
				if (this.ai[0] == 8f && this.ai[1] < 60f && flag6)
				{
					this.ai[1] = 180f;
					this.netUpdate = true;
				}
				if (this.ai[0] == 5f)
				{
					Point point = base.Center.ToTileCoordinates();
					Tile tile = Main.tile[point.X, point.Y];
					if (tile.type != 15)
					{
						this.ai[1] = 0f;
					}
				}
				if (this.ai[1] <= 0f)
				{
					this.ai[0] = 0f;
					this.ai[1] = (float)(60 + Main.rand.Next(60));
					this.ai[2] = 0f;
					this.localAI[3] = (float)(30 + Main.rand.Next(60));
					this.netUpdate = true;
				}
			}
			else if (this.ai[0] == 6f || this.ai[0] == 7f || this.ai[0] == 18f)
			{
				if (this.ai[0] == 18f && (this.localAI[3] < 1f || this.localAI[3] > 2f))
				{
					this.localAI[3] = 2f;
				}
				this.velocity.X = this.velocity.X * 0.8f;
				this.ai[1] -= 1f;
				int num21 = (int)this.ai[2];
				if (num21 < 0 || num21 > 255 || !Main.player[num21].active || Main.player[num21].dead || Main.player[num21].Distance(base.Center) > 200f || !Collision.CanHitLine(base.Top, 0, 0, Main.player[num21].Top, 0, 0))
				{
					this.ai[1] = 0f;
				}
				if (this.ai[1] > 0f)
				{
					int num22 = (base.Center.X < Main.player[num21].Center.X) ? 1 : -1;
					if (num22 != this.direction)
					{
						this.netUpdate = true;
					}
					this.direction = num22;
				}
				else
				{
					this.ai[0] = 0f;
					this.ai[1] = (float)(60 + Main.rand.Next(60));
					this.ai[2] = 0f;
					this.localAI[3] = (float)(30 + Main.rand.Next(60));
					this.netUpdate = true;
				}
			}
			else if (this.ai[0] == 10f)
			{
				int num23 = 0;
				int num24 = 0;
				float knockBack = 0f;
				float scaleFactor = 0f;
				int num25 = 0;
				int num26 = 0;
				int maxValue2 = 0;
				float num27 = 0f;
				float num28 = (float)NPCID.Sets.DangerDetectRange[this.type];
				float num29 = 0f;
				if ((float)NPCID.Sets.AttackTime[this.type] == this.ai[1])
				{
					this.frameCounter = 0.0;
					this.localAI[3] = 0f;
				}
				if (this.type == 38)
				{
					num23 = 30;
					scaleFactor = 6f;
					num24 = 20;
					num25 = 10;
					num26 = 180;
					maxValue2 = 120;
					num27 = 16f;
					knockBack = 7f;
				}
				else if (this.type == 550)
				{
					num23 = 669;
					scaleFactor = 6f;
					num24 = 24;
					num25 = 10;
					num26 = 120;
					maxValue2 = 60;
					num27 = 16f;
					knockBack = 9f;
				}
				else if (this.type == 208)
				{
					num23 = 588;
					scaleFactor = 6f;
					num24 = 30;
					num25 = 10;
					num26 = 60;
					maxValue2 = 120;
					num27 = 16f;
					knockBack = 6f;
				}
				else if (this.type == 17)
				{
					num23 = 48;
					scaleFactor = 9f;
					num24 = 12;
					num25 = 10;
					num26 = 60;
					maxValue2 = 60;
					num27 = 16f;
					knockBack = 1.5f;
				}
				else if (this.type == 369)
				{
					num23 = 520;
					scaleFactor = 12f;
					num24 = 10;
					num25 = 10;
					num26 = 0;
					maxValue2 = 1;
					num27 = 16f;
					knockBack = 3f;
				}
				else if (this.type == 453)
				{
					num23 = 21;
					scaleFactor = 14f;
					num24 = 14;
					num25 = 10;
					num26 = 0;
					maxValue2 = 1;
					num27 = 16f;
					knockBack = 3f;
				}
				else if (this.type == 107)
				{
					num23 = 24;
					scaleFactor = 5f;
					num24 = 15;
					num25 = 10;
					num26 = 60;
					maxValue2 = 60;
					num27 = 16f;
					knockBack = 1f;
				}
				else if (this.type == 124)
				{
					num23 = 582;
					scaleFactor = 10f;
					num24 = 11;
					num25 = 1;
					num26 = 30;
					maxValue2 = 30;
					knockBack = 3.5f;
				}
				else if (this.type == 18)
				{
					num23 = 583;
					scaleFactor = 8f;
					num24 = 8;
					num25 = 1;
					num26 = 15;
					maxValue2 = 10;
					knockBack = 2f;
					num27 = 10f;
				}
				else if (this.type == 142)
				{
					num23 = 589;
					scaleFactor = 7f;
					num24 = 22;
					num25 = 1;
					num26 = 10;
					maxValue2 = 1;
					knockBack = 2f;
					num27 = 10f;
				}
				if (Main.expertMode)
				{
					num24 = (int)((float)num24 * Main.expertNPCDamage);
				}
				num24 = (int)((float)num24 * num);
				this.velocity.X = this.velocity.X * 0.8f;
				this.ai[1] -= 1f;
				this.localAI[3] += 1f;
				if (this.localAI[3] == (float)num25 && Main.netMode != 1)
				{
					Vector2 vector = -Vector2.UnitY;
					if (num9 == 1 && this.spriteDirection == 1 && num11 != -1)
					{
						vector = base.DirectionTo(Main.npc[num11].Center + new Vector2(0f, -num27 * MathHelper.Clamp(base.Distance(Main.npc[num11].Center) / num28, 0f, 1f)));
					}
					if (num9 == -1 && this.spriteDirection == -1 && num10 != -1)
					{
						vector = base.DirectionTo(Main.npc[num10].Center + new Vector2(0f, -num27 * MathHelper.Clamp(base.Distance(Main.npc[num10].Center) / num28, 0f, 1f)));
					}
					if (vector.HasNaNs() || Math.Sign(vector.X) != this.spriteDirection)
					{
						vector = new Vector2((float)this.spriteDirection, -1f);
					}
					vector *= scaleFactor;
					vector += Utils.RandomVector2(Main.rand, -num29, num29);
					int num30;
					if (this.type == 124)
					{
						num30 = Projectile.NewProjectile(base.Center.X + (float)(this.spriteDirection * 16), base.Center.Y - 2f, vector.X, vector.Y, num23, num24, knockBack, Main.myPlayer, 0f, (float)this.whoAmI);
					}
					else if (this.type == 142)
					{
						num30 = Projectile.NewProjectile(base.Center.X + (float)(this.spriteDirection * 16), base.Center.Y - 2f, vector.X, vector.Y, num23, num24, knockBack, Main.myPlayer, 0f, (float)Main.rand.Next(5));
					}
					else
					{
						num30 = Projectile.NewProjectile(base.Center.X + (float)(this.spriteDirection * 16), base.Center.Y - 2f, vector.X, vector.Y, num23, num24, knockBack, Main.myPlayer, 0f, 0f);
					}
					Main.projectile[num30].npcProj = true;
					Main.projectile[num30].noDropItem = true;
				}
				if (this.ai[1] <= 0f && !false)
				{
					this.ai[0] = (float)((this.localAI[2] == 8f && flag6) ? 8 : 0);
					this.ai[1] = (float)(num26 + Main.rand.Next(maxValue2));
					this.ai[2] = 0f;
					this.localAI[1] = (this.localAI[3] = (float)(num26 / 2 + Main.rand.Next(maxValue2)));
					this.netUpdate = true;
				}
			}
			else if (this.ai[0] == 12f)
			{
				int num31 = 0;
				int num32 = 0;
				float scaleFactor2 = 0f;
				int num33 = 0;
				int num34 = 0;
				int maxValue3 = 0;
				float knockBack2 = 0f;
				int num35 = 0;
				bool flag17 = false;
				float num36 = 0f;
				if ((float)NPCID.Sets.AttackTime[this.type] == this.ai[1])
				{
					this.frameCounter = 0.0;
					this.localAI[3] = 0f;
				}
				int num37 = -1;
				if (num9 == 1 && this.spriteDirection == 1)
				{
					num37 = num11;
				}
				if (num9 == -1 && this.spriteDirection == -1)
				{
					num37 = num10;
				}
				if (this.type == 19)
				{
					num31 = 14;
					scaleFactor2 = 13f;
					num32 = 24;
					num34 = 14;
					maxValue3 = 4;
					knockBack2 = 3f;
					num33 = 1;
					num36 = 0.5f;
					if ((float)NPCID.Sets.AttackTime[this.type] == this.ai[1])
					{
						this.frameCounter = 0.0;
						this.localAI[3] = 0f;
					}
					if (Main.hardMode)
					{
						num32 = 15;
						if (this.localAI[3] > (float)num33)
						{
							num33 = 10;
							flag17 = true;
						}
						if (this.localAI[3] > (float)num33)
						{
							num33 = 20;
							flag17 = true;
						}
						if (this.localAI[3] > (float)num33)
						{
							num33 = 30;
							flag17 = true;
						}
					}
				}
				else if (this.type == 227)
				{
					num31 = 587;
					scaleFactor2 = 10f;
					num32 = 8;
					num34 = 10;
					maxValue3 = 1;
					knockBack2 = 1.75f;
					num33 = 1;
					num36 = 0.5f;
					if (this.localAI[3] > (float)num33)
					{
						num33 = 12;
						flag17 = true;
					}
					if (this.localAI[3] > (float)num33)
					{
						num33 = 24;
						flag17 = true;
					}
					if (Main.hardMode)
					{
						num32 += 2;
					}
				}
				else if (this.type == 368)
				{
					num31 = 14;
					scaleFactor2 = 13f;
					num32 = 24;
					num34 = 12;
					maxValue3 = 5;
					knockBack2 = 2f;
					num33 = 1;
					num36 = 0.2f;
					if (Main.hardMode)
					{
						num32 = 30;
						num31 = 357;
					}
				}
				else if (this.type == 22)
				{
					scaleFactor2 = 10f;
					num32 = 8;
					num33 = 1;
					if (Main.hardMode)
					{
						num31 = 2;
						num34 = 15;
						maxValue3 = 10;
						num32 += 6;
					}
					else
					{
						num31 = 1;
						num34 = 30;
						maxValue3 = 20;
					}
					knockBack2 = 2.75f;
					num35 = 4;
					num36 = 0.7f;
				}
				else if (this.type == 228)
				{
					num31 = 267;
					scaleFactor2 = 14f;
					num32 = 20;
					num33 = 1;
					num34 = 10;
					maxValue3 = 1;
					knockBack2 = 3f;
					num35 = 6;
					num36 = 0.4f;
				}
				else if (this.type == 178)
				{
					num31 = 242;
					scaleFactor2 = 13f;
					num32 = 15;
					num34 = 10;
					maxValue3 = 1;
					knockBack2 = 2f;
					num33 = 1;
					if (this.localAI[3] > (float)num33)
					{
						num33 = 8;
						flag17 = true;
					}
					if (this.localAI[3] > (float)num33)
					{
						num33 = 16;
						flag17 = true;
					}
					num36 = 0.3f;
				}
				else if (this.type == 229)
				{
					num31 = 14;
					scaleFactor2 = 14f;
					num32 = 24;
					num34 = 10;
					maxValue3 = 1;
					knockBack2 = 2f;
					num33 = 1;
					num36 = 0.7f;
					if (this.localAI[3] > (float)num33)
					{
						num33 = 16;
						flag17 = true;
					}
					if (this.localAI[3] > (float)num33)
					{
						num33 = 24;
						flag17 = true;
					}
					if (this.localAI[3] > (float)num33)
					{
						num33 = 32;
						flag17 = true;
					}
					if (this.localAI[3] > (float)num33)
					{
						num33 = 40;
						flag17 = true;
					}
					if (this.localAI[3] > (float)num33)
					{
						num33 = 48;
						flag17 = true;
					}
					if (this.localAI[3] == 0f && num37 != -1 && base.Distance(Main.npc[num37].Center) < (float)NPCID.Sets.PrettySafe[this.type])
					{
						num36 = 0.1f;
						num31 = 162;
						num32 = 50;
						knockBack2 = 10f;
						scaleFactor2 = 24f;
					}
				}
				else if (this.type == 209)
				{
					int num38 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						134,
						133,
						135
					});
					num31 = num38;
					num33 = 1;
					if (num31 == 135)
					{
						scaleFactor2 = 12f;
						num32 = 30;
						num34 = 30;
						maxValue3 = 10;
						knockBack2 = 7f;
						num36 = 0.2f;
					}
					else if (num31 == 133)
					{
						scaleFactor2 = 10f;
						num32 = 25;
						num34 = 10;
						maxValue3 = 1;
						knockBack2 = 6f;
						num36 = 0.2f;
					}
					else if (num31 == 134)
					{
						scaleFactor2 = 13f;
						num32 = 20;
						num34 = 20;
						maxValue3 = 10;
						knockBack2 = 4f;
						num36 = 0.1f;
					}
				}
				if (Main.expertMode)
				{
					num32 = (int)((float)num32 * Main.expertNPCDamage);
				}
				num32 = (int)((float)num32 * num);
				this.velocity.X = this.velocity.X * 0.8f;
				this.ai[1] -= 1f;
				this.localAI[3] += 1f;
				if (this.localAI[3] == (float)num33 && Main.netMode != 1)
				{
					Vector2 vector2 = Vector2.Zero;
					if (num37 != -1)
					{
						vector2 = base.DirectionTo(Main.npc[num37].Center + new Vector2(0f, (float)(-(float)num35)));
					}
					if (vector2.HasNaNs() || Math.Sign(vector2.X) != this.spriteDirection)
					{
						vector2 = new Vector2((float)this.spriteDirection, 0f);
					}
					vector2 *= scaleFactor2;
					vector2 += Utils.RandomVector2(Main.rand, -num36, num36);
					int num39;
					if (this.type == 227)
					{
						num39 = Projectile.NewProjectile(base.Center.X + (float)(this.spriteDirection * 16), base.Center.Y - 2f, vector2.X, vector2.Y, num31, num32, knockBack2, Main.myPlayer, 0f, (float)Main.rand.Next(12) / 6f);
					}
					else
					{
						num39 = Projectile.NewProjectile(base.Center.X + (float)(this.spriteDirection * 16), base.Center.Y - 2f, vector2.X, vector2.Y, num31, num32, knockBack2, Main.myPlayer, 0f, 0f);
					}
					Main.projectile[num39].npcProj = true;
					Main.projectile[num39].noDropItem = true;
				}
				if (this.localAI[3] == (float)num33 && flag17 && num37 != -1)
				{
					Vector2 vector3 = base.DirectionTo(Main.npc[num37].Center);
					if (vector3.Y <= 0.5f && vector3.Y >= -0.5f)
					{
						this.ai[2] = vector3.Y;
					}
				}
				if (this.ai[1] <= 0f && !false)
				{
					this.ai[0] = (float)((this.localAI[2] == 8f && flag6) ? 8 : 0);
					this.ai[1] = (float)(num34 + Main.rand.Next(maxValue3));
					this.ai[2] = 0f;
					this.localAI[1] = (this.localAI[3] = (float)(num34 / 2 + Main.rand.Next(maxValue3)));
					this.netUpdate = true;
				}
			}
			else if (this.ai[0] == 13f)
			{
				this.velocity.X = this.velocity.X * 0.8f;
				if ((float)NPCID.Sets.AttackTime[this.type] == this.ai[1])
				{
					this.frameCounter = 0.0;
				}
				this.ai[1] -= 1f;
				this.localAI[3] += 1f;
				if (this.localAI[3] == 1f && Main.netMode != 1)
				{
					Vector2 vec = base.DirectionTo(Main.npc[(int)this.ai[2]].Center + new Vector2(0f, -20f));
					if (vec.HasNaNs() || Math.Sign(vec.X) == -this.spriteDirection)
					{
						vec = new Vector2((float)this.spriteDirection, -1f);
					}
					vec *= 8f;
					int num40 = Projectile.NewProjectile(base.Center.X + (float)(this.spriteDirection * 16), base.Center.Y - 2f, vec.X, vec.Y, 584, 0, 0f, Main.myPlayer, this.ai[2], 0f);
					Main.projectile[num40].npcProj = true;
					Main.projectile[num40].noDropItem = true;
				}
				if (this.ai[1] <= 0f)
				{
					this.ai[0] = 0f;
					this.ai[1] = (float)(10 + Main.rand.Next(10));
					this.ai[2] = 0f;
					this.localAI[3] = (float)(5 + Main.rand.Next(10));
					this.netUpdate = true;
				}
			}
			else if (this.ai[0] == 14f)
			{
				int num41 = 0;
				int num42 = 0;
				float scaleFactor3 = 0f;
				int num43 = 0;
				int num44 = 0;
				int maxValue4 = 0;
				float knockBack3 = 0f;
				float num45 = 0f;
				float num46 = (float)NPCID.Sets.DangerDetectRange[this.type];
				float num47 = 1f;
				float num48 = 0f;
				if ((float)NPCID.Sets.AttackTime[this.type] == this.ai[1])
				{
					this.frameCounter = 0.0;
					this.localAI[3] = 0f;
				}
				int num49 = -1;
				if (num9 == 1 && this.spriteDirection == 1)
				{
					num49 = num11;
				}
				if (num9 == -1 && this.spriteDirection == -1)
				{
					num49 = num10;
				}
				if (this.type == 54)
				{
					num41 = 585;
					scaleFactor3 = 10f;
					num42 = 16;
					num43 = 30;
					num44 = 20;
					maxValue4 = 15;
					knockBack3 = 2f;
					num48 = 1f;
				}
				else if (this.type == 108)
				{
					num41 = 15;
					scaleFactor3 = 6f;
					num42 = 18;
					num43 = 15;
					num44 = 15;
					maxValue4 = 5;
					knockBack3 = 3f;
					num45 = 20f;
				}
				else if (this.type == 160)
				{
					num41 = 590;
					num42 = 40;
					num43 = 15;
					num44 = 10;
					maxValue4 = 1;
					knockBack3 = 3f;
					while (this.localAI[3] > (float)num43)
					{
						num43 += 15;
					}
				}
				else if (this.type == 20)
				{
					num41 = 586;
					num43 = 24;
					num44 = 10;
					maxValue4 = 1;
					knockBack3 = 3f;
				}
				if (Main.expertMode)
				{
					num42 = (int)((float)num42 * Main.expertNPCDamage);
				}
				num42 = (int)((float)num42 * num);
				this.velocity.X = this.velocity.X * 0.8f;
				this.ai[1] -= 1f;
				this.localAI[3] += 1f;
				if (this.localAI[3] == (float)num43 && Main.netMode != 1)
				{
					Vector2 vector4 = Vector2.Zero;
					if (num49 != -1)
					{
						vector4 = base.DirectionTo(Main.npc[num49].Center + new Vector2(0f, -num45 * MathHelper.Clamp(base.Distance(Main.npc[num49].Center) / num46, 0f, 1f)));
					}
					if (vector4.HasNaNs() || Math.Sign(vector4.X) != this.spriteDirection)
					{
						vector4 = new Vector2((float)this.spriteDirection, 0f);
					}
					vector4 *= scaleFactor3;
					vector4 += Utils.RandomVector2(Main.rand, -num48, num48);
					if (this.type == 108)
					{
						int num50 = Utils.SelectRandom<int>(Main.rand, new int[]
						{
							1,
							1,
							1,
							1,
							2,
							2,
							3
						});
						for (int num51 = 0; num51 < num50; num51++)
						{
							Vector2 vector5 = Utils.RandomVector2(Main.rand, -3.4f, 3.4f);
							int num52 = Projectile.NewProjectile(base.Center.X + (float)(this.spriteDirection * 16), base.Center.Y - 2f, vector4.X + vector5.X, vector4.Y + vector5.Y, num41, num42, knockBack3, Main.myPlayer, 0f, 0f);
							Main.projectile[num52].npcProj = true;
							Main.projectile[num52].noDropItem = true;
						}
					}
					else if (this.type == 160)
					{
						if (num49 != -1)
						{
							Vector2 vector6 = Main.npc[num49].position - Main.npc[num49].Size * 2f + Main.npc[num49].Size * Utils.RandomVector2(Main.rand, 0f, 1f) * 5f;
							int num53 = 10;
							while (num53 > 0 && WorldGen.SolidTile(Framing.GetTileSafely((int)vector6.X / 16, (int)vector6.Y / 16)))
							{
								num53--;
								vector6 = Main.npc[num49].position - Main.npc[num49].Size * 2f + Main.npc[num49].Size * Utils.RandomVector2(Main.rand, 0f, 1f) * 5f;
							}
							int num54 = Projectile.NewProjectile(vector6.X, vector6.Y, 0f, 0f, num41, num42, knockBack3, Main.myPlayer, 0f, 0f);
							Main.projectile[num54].npcProj = true;
							Main.projectile[num54].noDropItem = true;
						}
					}
					else if (this.type == 20)
					{
						int num55 = Projectile.NewProjectile(base.Center.X + (float)(this.spriteDirection * 16), base.Center.Y - 2f, vector4.X, vector4.Y, num41, num42, knockBack3, Main.myPlayer, 0f, (float)this.whoAmI);
						Main.projectile[num55].npcProj = true;
						Main.projectile[num55].noDropItem = true;
					}
					else
					{
						int num56 = Projectile.NewProjectile(base.Center.X + (float)(this.spriteDirection * 16), base.Center.Y - 2f, vector4.X, vector4.Y, num41, num42, knockBack3, Main.myPlayer, 0f, 0f);
						Main.projectile[num56].npcProj = true;
						Main.projectile[num56].noDropItem = true;
					}
				}
				if (num47 > 0f)
				{
					Vector3 vector7 = NPCID.Sets.MagicAuraColor[this.type].ToVector3() * num47;
					Lighting.AddLight(base.Center, vector7.X, vector7.Y, vector7.Z);
				}
				if (this.ai[1] <= 0f && !false)
				{
					this.ai[0] = (float)((this.localAI[2] == 8f && flag6) ? 8 : 0);
					this.ai[1] = (float)(num44 + Main.rand.Next(maxValue4));
					this.ai[2] = 0f;
					this.localAI[1] = (this.localAI[3] = (float)(num44 / 2 + Main.rand.Next(maxValue4)));
					this.netUpdate = true;
				}
			}
			else if (this.ai[0] == 15f)
			{
				int num57 = 0;
				int maxValue5 = 0;
				if ((float)NPCID.Sets.AttackTime[this.type] == this.ai[1])
				{
					this.frameCounter = 0.0;
					this.localAI[3] = 0f;
				}
				int num58 = 0;
				float num59 = 0f;
				int num60 = 0;
				int num61 = 0;
				if (num9 == 1)
				{
					int arg_3ED2_0 = this.spriteDirection;
				}
				if (num9 == -1)
				{
					int arg_3EE0_0 = this.spriteDirection;
				}
				if (this.type == 207)
				{
					num58 = 11;
					num61 = (num60 = 32);
					num57 = 12;
					maxValue5 = 6;
					num59 = 4.25f;
				}
				else if (this.type == 441)
				{
					num58 = 9;
					num61 = (num60 = 28);
					num57 = 9;
					maxValue5 = 3;
					num59 = 3.5f;
				}
				else if (this.type == 353)
				{
					num58 = 10;
					num61 = (num60 = 32);
					num57 = 15;
					maxValue5 = 8;
					num59 = 5f;
				}
				if (Main.expertMode)
				{
					num58 = (int)((float)num58 * Main.expertNPCDamage);
				}
				num58 = (int)((float)num58 * num);
				this.velocity.X = this.velocity.X * 0.8f;
				this.ai[1] -= 1f;
				if (Main.netMode != 1)
				{
					Tuple<Vector2, float> swingStats = this.GetSwingStats(NPCID.Sets.AttackTime[this.type] * 2, (int)this.ai[1], this.spriteDirection, num60, num61);
					Rectangle rectangle3 = new Rectangle((int)swingStats.Item1.X, (int)swingStats.Item1.Y, num60, num61);
					if (this.spriteDirection == -1)
					{
						rectangle3.X -= num60;
					}
					rectangle3.Y -= num61;
					this.TweakSwingStats(NPCID.Sets.AttackTime[this.type] * 2, (int)this.ai[1], this.spriteDirection, ref rectangle3);
					int myPlayer = Main.myPlayer;
					for (int num62 = 0; num62 < 200; num62++)
					{
						NPC nPC2 = Main.npc[num62];
						if (nPC2.active && nPC2.immune[myPlayer] == 0 && !nPC2.dontTakeDamage && !nPC2.friendly && nPC2.damage > 0 && rectangle3.Intersects(nPC2.Hitbox) && (nPC2.noTileCollide || Collision.CanHit(this.position, this.width, this.height, nPC2.position, nPC2.width, nPC2.height)))
						{
							nPC2.StrikeNPCNoInteraction(num58, num59, this.spriteDirection, false, false, false);
							if (Main.netMode != 0)
							{
								NetMessage.SendData(28, -1, -1, "", num62, (float)num58, num59, (float)this.spriteDirection, 0, 0, 0);
							}
							nPC2.netUpdate = true;
							nPC2.immune[myPlayer] = (int)this.ai[1] + 2;
						}
					}
				}
				if (this.ai[1] <= 0f)
				{
					bool flag18 = false;
					if (flag6)
					{
						int num63 = -num9;
						if (!Collision.CanHit(base.Center, 0, 0, base.Center + Vector2.UnitX * (float)num63 * 32f, 0, 0) || this.localAI[2] == 8f)
						{
							flag18 = true;
						}
						if (flag18)
						{
							int num64 = NPCID.Sets.AttackTime[this.type];
							int num65 = (num9 == 1) ? num11 : num10;
							int num66 = (num9 == 1) ? num10 : num11;
							if (num65 != -1 && !Collision.CanHit(base.Center, 0, 0, Main.npc[num65].Center, 0, 0))
							{
								if (num66 != -1 && Collision.CanHit(base.Center, 0, 0, Main.npc[num66].Center, 0, 0))
								{
									num65 = num66;
								}
								else
								{
									num65 = -1;
								}
							}
							if (num65 != -1)
							{
								this.ai[0] = 15f;
								this.ai[1] = (float)num64;
								this.ai[2] = 0f;
								this.localAI[3] = 0f;
								this.direction = ((this.position.X < Main.npc[num65].position.X) ? 1 : -1);
								this.netUpdate = true;
							}
							else
							{
								flag18 = false;
							}
						}
					}
					if (!flag18)
					{
						this.ai[0] = (float)((this.localAI[2] == 8f && flag6) ? 8 : 0);
						this.ai[1] = (float)(num57 + Main.rand.Next(maxValue5));
						this.ai[2] = 0f;
						this.localAI[1] = (this.localAI[3] = (float)(num57 / 2 + Main.rand.Next(maxValue5)));
						this.netUpdate = true;
					}
				}
			}
			if (Main.netMode != 1 && (this.townNPC || this.type == 453) && !flag3)
			{
				bool flag19 = this.ai[0] < 2f && !flag6;
				bool flag20 = (this.ai[0] < 2f || this.ai[0] == 8f) && (flag6 || flag7);
				if (this.localAI[1] > 0f)
				{
					this.localAI[1] -= 1f;
				}
				if (this.localAI[1] > 0f)
				{
					flag20 = false;
				}
				if (flag20 && this.type == 124 && this.localAI[0] == 1f)
				{
					flag20 = false;
				}
				if (flag20 && this.type == 20)
				{
					flag20 = false;
					for (int num67 = 0; num67 < 200; num67++)
					{
						NPC nPC3 = Main.npc[num67];
						if (nPC3.active && nPC3.townNPC && base.Distance(nPC3.Center) <= 1200f && nPC3.FindBuffIndex(165) == -1)
						{
							flag20 = true;
							break;
						}
					}
				}
				if (flag19 && this.ai[0] == 0f && this.velocity.Y == 0f && Main.rand.Next(300) == 0)
				{
					int num68 = 420;
					if (Main.rand.Next(2) == 0)
					{
						num68 *= Main.rand.Next(1, 4);
					}
					else
					{
						num68 *= Main.rand.Next(1, 3);
					}
					int num69 = 100;
					int num70 = 20;
					for (int num71 = 0; num71 < 200; num71++)
					{
						NPC nPC4 = Main.npc[num71];
						bool flag21 = (nPC4.ai[0] == 1f && nPC4.closeDoor) || (nPC4.ai[0] == 1f && nPC4.ai[1] > 200f) || nPC4.ai[0] > 1f;
						if (nPC4 != this && nPC4.active && nPC4.CanTalk && !flag21 && nPC4.Distance(base.Center) < (float)num69 && nPC4.Distance(base.Center) > (float)num70 && Collision.CanHit(base.Center, 0, 0, nPC4.Center, 0, 0))
						{
							int num72 = (this.position.X < nPC4.position.X).ToDirectionInt();
							this.ai[0] = 3f;
							this.ai[1] = (float)num68;
							this.ai[2] = (float)num71;
							this.direction = num72;
							this.netUpdate = true;
							nPC4.ai[0] = 4f;
							nPC4.ai[1] = (float)num68;
							nPC4.ai[2] = (float)this.whoAmI;
							nPC4.direction = -num72;
							nPC4.netUpdate = true;
							break;
						}
					}
				}
				else if (flag19 && this.ai[0] == 0f && this.velocity.Y == 0f && Main.rand.Next(1800) == 0)
				{
					int num73 = 420;
					if (Main.rand.Next(2) == 0)
					{
						num73 *= Main.rand.Next(1, 4);
					}
					else
					{
						num73 *= Main.rand.Next(1, 3);
					}
					int num74 = 100;
					int num75 = 20;
					for (int num76 = 0; num76 < 200; num76++)
					{
						NPC nPC5 = Main.npc[num76];
						bool flag22 = (nPC5.ai[0] == 1f && nPC5.closeDoor) || (nPC5.ai[0] == 1f && nPC5.ai[1] > 200f) || nPC5.ai[0] > 1f;
						if (nPC5 != this && nPC5.active && nPC5.CanTalk && !flag22 && nPC5.Distance(base.Center) < (float)num74 && nPC5.Distance(base.Center) > (float)num75 && Collision.CanHit(base.Center, 0, 0, nPC5.Center, 0, 0))
						{
							int num77 = (this.position.X < nPC5.position.X).ToDirectionInt();
							this.ai[0] = 16f;
							this.ai[1] = (float)num73;
							this.ai[2] = (float)num76;
							this.localAI[2] = (float)Main.rand.Next(4);
							this.localAI[3] = (float)Main.rand.Next(3 - (int)this.localAI[2]);
							this.direction = num77;
							this.netUpdate = true;
							nPC5.ai[0] = 17f;
							nPC5.ai[1] = (float)num73;
							nPC5.ai[2] = (float)this.whoAmI;
							nPC5.localAI[2] = 0f;
							nPC5.localAI[3] = 0f;
							nPC5.direction = -num77;
							nPC5.netUpdate = true;
							break;
						}
					}
				}
				else if (flag19 && this.ai[0] == 0f && this.velocity.Y == 0f && Main.rand.Next(1200) == 0 && (this.type == 208 || (BirthdayParty.PartyIsUp && NPCID.Sets.AttackType[this.type] == NPCID.Sets.AttackType[208])))
				{
					int num78 = 300;
					int num79 = 150;
					for (int num80 = 0; num80 < 255; num80++)
					{
						Player player = Main.player[num80];
						if (player.active && !player.dead && player.Distance(base.Center) < (float)num79 && Collision.CanHitLine(base.Top, 0, 0, player.Top, 0, 0))
						{
							int direction2 = (this.position.X < player.position.X).ToDirectionInt();
							this.ai[0] = 6f;
							this.ai[1] = (float)num78;
							this.ai[2] = (float)num80;
							this.direction = direction2;
							this.netUpdate = true;
							break;
						}
					}
				}
				else if (flag19 && this.ai[0] == 0f && this.velocity.Y == 0f && Main.rand.Next(600) == 0 && this.type == 550)
				{
					int num81 = 300;
					int num82 = 150;
					for (int num83 = 0; num83 < 255; num83++)
					{
						Player player2 = Main.player[num83];
						if (player2.active && !player2.dead && player2.Distance(base.Center) < (float)num82 && Collision.CanHitLine(base.Top, 0, 0, player2.Top, 0, 0))
						{
							int direction3 = (this.position.X < player2.position.X).ToDirectionInt();
							this.ai[0] = 18f;
							this.ai[1] = (float)num81;
							this.ai[2] = (float)num83;
							this.direction = direction3;
							this.netUpdate = true;
							break;
						}
					}
				}
				else if (flag19 && this.ai[0] == 0f && this.velocity.Y == 0f && Main.rand.Next(1800) == 0)
				{
					this.ai[0] = 2f;
					this.ai[1] = (float)(45 * Main.rand.Next(1, 2));
					this.netUpdate = true;
				}
				else if (flag19 && this.ai[0] == 0f && this.velocity.Y == 0f && Main.rand.Next(600) == 0 && this.type == 229 && !flag7)
				{
					this.ai[0] = 11f;
					this.ai[1] = (float)(30 * Main.rand.Next(1, 4));
					this.netUpdate = true;
				}
				else if (flag19 && this.ai[0] == 0f && this.velocity.Y == 0f && Main.rand.Next(1200) == 0)
				{
					int num84 = 220;
					int num85 = 150;
					for (int num86 = 0; num86 < 255; num86++)
					{
						Player player3 = Main.player[num86];
						if (player3.active && !player3.dead && player3.Distance(base.Center) < (float)num85 && Collision.CanHitLine(base.Top, 0, 0, player3.Top, 0, 0))
						{
							int direction4 = (this.position.X < player3.position.X).ToDirectionInt();
							this.ai[0] = 7f;
							this.ai[1] = (float)num84;
							this.ai[2] = (float)num86;
							this.direction = direction4;
							this.netUpdate = true;
							break;
						}
					}
				}
				else if (flag19 && this.ai[0] == 1f && this.velocity.Y == 0f && Main.rand.Next(maxValue) == 0)
				{
					Point b = base.Center.ToTileCoordinates();
					bool flag23 = WorldGen.InWorld(b.X, b.Y, 1);
					if (flag23)
					{
						for (int num87 = 0; num87 < 200; num87++)
						{
							if (Main.npc[num87].active && Main.npc[num87].aiStyle == 7 && Main.npc[num87].townNPC && Main.npc[num87].ai[0] == 5f)
							{
								Point a = Main.npc[num87].Center.ToTileCoordinates();
								if (a == b)
								{
									flag23 = false;
									break;
								}
							}
						}
					}
					if (flag23)
					{
						Tile tile2 = Main.tile[b.X, b.Y];
						flag23 = (tile2.type == 15);
						if (flag23 && tile2.frameY == 1080)
						{
							flag23 = false;
						}
						if (flag23)
						{
							this.ai[0] = 5f;
							this.ai[1] = (float)(900 + Main.rand.Next(10800));
							this.direction = ((tile2.frameX == 0) ? -1 : 1);
							base.Bottom = new Vector2((float)(b.X * 16 + 8 + 2 * this.direction), (float)(b.Y * 16 + 32));
							this.velocity = Vector2.Zero;
							this.localAI[3] = 0f;
							this.netUpdate = true;
						}
					}
				}
				else if (flag19 && this.ai[0] == 1f && this.velocity.Y == 0f && Main.rand.Next(600) == 0 && Utils.PlotTileLine(base.Top, base.Bottom, (float)this.width, new Utils.PerLinePoint(DelegateMethods.SearchAvoidedByNPCs)))
				{
					Point point2 = (base.Center + new Vector2((float)(this.direction * 10), 0f)).ToTileCoordinates();
					bool flag24 = WorldGen.InWorld(point2.X, point2.Y, 1);
					if (flag24)
					{
						Tile tileSafely6 = Framing.GetTileSafely(point2.X, point2.Y);
						if (!tileSafely6.nactive() || !TileID.Sets.InteractibleByNPCs[(int)tileSafely6.type])
						{
							flag24 = false;
						}
					}
					if (flag24)
					{
						this.ai[0] = 9f;
						this.ai[1] = (float)(40 + Main.rand.Next(90));
						this.velocity = Vector2.Zero;
						this.localAI[3] = 0f;
						this.netUpdate = true;
					}
				}
				if (this.ai[0] < 2f && this.velocity.Y == 0f && this.type == 18)
				{
					int num88 = -1;
					for (int num89 = 0; num89 < 200; num89++)
					{
						NPC nPC6 = Main.npc[num89];
						if (nPC6.active && nPC6.townNPC && nPC6.life != nPC6.lifeMax && (num88 == -1 || nPC6.lifeMax - nPC6.life > Main.npc[num88].lifeMax - Main.npc[num88].life) && Collision.CanHitLine(this.position, this.width, this.height, nPC6.position, nPC6.width, nPC6.height) && base.Distance(nPC6.Center) < 500f)
						{
							num88 = num89;
						}
					}
					if (num88 != -1)
					{
						this.ai[0] = 13f;
						this.ai[1] = 34f;
						this.ai[2] = (float)num88;
						this.localAI[3] = 0f;
						this.direction = ((this.position.X < Main.npc[num88].position.X) ? 1 : -1);
						this.netUpdate = true;
					}
				}
				if (flag20 && this.velocity.Y == 0f && NPCID.Sets.AttackType[this.type] == 0 && NPCID.Sets.AttackAverageChance[this.type] > 0 && Main.rand.Next(NPCID.Sets.AttackAverageChance[this.type] * 2) == 0)
				{
					int num90 = NPCID.Sets.AttackTime[this.type];
					int num91 = (num9 == 1) ? num11 : num10;
					int num92 = (num9 == 1) ? num10 : num11;
					if (num91 != -1 && !Collision.CanHit(base.Center, 0, 0, Main.npc[num91].Center, 0, 0))
					{
						if (num92 != -1 && Collision.CanHit(base.Center, 0, 0, Main.npc[num92].Center, 0, 0))
						{
							num91 = num92;
						}
						else
						{
							num91 = -1;
						}
					}
					if (num91 != -1)
					{
						this.localAI[2] = this.ai[0];
						this.ai[0] = 10f;
						this.ai[1] = (float)num90;
						this.ai[2] = 0f;
						this.localAI[3] = 0f;
						this.direction = ((this.position.X < Main.npc[num91].position.X) ? 1 : -1);
						this.netUpdate = true;
					}
				}
				else if (flag20 && this.velocity.Y == 0f && NPCID.Sets.AttackType[this.type] == 1 && NPCID.Sets.AttackAverageChance[this.type] > 0 && Main.rand.Next(NPCID.Sets.AttackAverageChance[this.type] * 2) == 0)
				{
					int num93 = NPCID.Sets.AttackTime[this.type];
					int num94 = (num9 == 1) ? num11 : num10;
					int num95 = (num9 == 1) ? num10 : num11;
					if (num94 != -1 && !Collision.CanHitLine(base.Center, 0, 0, Main.npc[num94].Center, 0, 0))
					{
						if (num95 != -1 && Collision.CanHitLine(base.Center, 0, 0, Main.npc[num95].Center, 0, 0))
						{
							num94 = num95;
						}
						else
						{
							num94 = -1;
						}
					}
					if (num94 != -1)
					{
						Vector2 vector8 = base.DirectionTo(Main.npc[num94].Center);
						if (vector8.Y <= 0.5f && vector8.Y >= -0.5f)
						{
							this.localAI[2] = this.ai[0];
							this.ai[0] = 12f;
							this.ai[1] = (float)num93;
							this.ai[2] = vector8.Y;
							this.localAI[3] = 0f;
							this.direction = ((this.position.X < Main.npc[num94].position.X) ? 1 : -1);
							this.netUpdate = true;
						}
					}
				}
				if (flag20 && this.velocity.Y == 0f && NPCID.Sets.AttackType[this.type] == 2 && NPCID.Sets.AttackAverageChance[this.type] > 0 && Main.rand.Next(NPCID.Sets.AttackAverageChance[this.type] * 2) == 0)
				{
					int num96 = NPCID.Sets.AttackTime[this.type];
					int num97 = (num9 == 1) ? num11 : num10;
					int num98 = (num9 == 1) ? num10 : num11;
					if (num97 != -1 && !Collision.CanHitLine(base.Center, 0, 0, Main.npc[num97].Center, 0, 0))
					{
						if (num98 != -1 && Collision.CanHitLine(base.Center, 0, 0, Main.npc[num98].Center, 0, 0))
						{
							num97 = num98;
						}
						else
						{
							num97 = -1;
						}
					}
					if (num97 != -1)
					{
						this.localAI[2] = this.ai[0];
						this.ai[0] = 14f;
						this.ai[1] = (float)num96;
						this.ai[2] = 0f;
						this.localAI[3] = 0f;
						this.direction = ((this.position.X < Main.npc[num97].position.X) ? 1 : -1);
						this.netUpdate = true;
					}
					else if (this.type == 20)
					{
						this.localAI[2] = this.ai[0];
						this.ai[0] = 14f;
						this.ai[1] = (float)num96;
						this.ai[2] = 0f;
						this.localAI[3] = 0f;
						this.netUpdate = true;
					}
				}
				if (flag20 && this.velocity.Y == 0f && NPCID.Sets.AttackType[this.type] == 3 && NPCID.Sets.AttackAverageChance[this.type] > 0 && Main.rand.Next(NPCID.Sets.AttackAverageChance[this.type] * 2) == 0)
				{
					int num99 = NPCID.Sets.AttackTime[this.type];
					int num100 = (num9 == 1) ? num11 : num10;
					int num101 = (num9 == 1) ? num10 : num11;
					if (num100 != -1 && !Collision.CanHit(base.Center, 0, 0, Main.npc[num100].Center, 0, 0))
					{
						if (num101 != -1 && Collision.CanHit(base.Center, 0, 0, Main.npc[num101].Center, 0, 0))
						{
							num100 = num101;
						}
						else
						{
							num100 = -1;
						}
					}
					if (num100 != -1)
					{
						this.localAI[2] = this.ai[0];
						this.ai[0] = 15f;
						this.ai[1] = (float)num99;
						this.ai[2] = 0f;
						this.localAI[3] = 0f;
						this.direction = ((this.position.X < Main.npc[num100].position.X) ? 1 : -1);
						this.netUpdate = true;
					}
				}
			}
		}

		private void AI_003_Fighters()
		{
			if (this.type == 466)
			{
				int num = 200;
				if (this.ai[2] == 0f)
				{
					this.alpha = num;
					this.TargetClosest(true);
					if (!Main.player[this.target].dead && (Main.player[this.target].Center - base.Center).Length() < 170f)
					{
						this.ai[2] = -16f;
					}
					if (this.velocity.X != 0f || this.velocity.Y < 0f || this.velocity.Y > 2f || this.justHit)
					{
						this.ai[2] = -16f;
					}
					return;
				}
				if (this.ai[2] < 0f)
				{
					if (this.alpha > 0)
					{
						this.alpha -= num / 16;
						if (this.alpha < 0)
						{
							this.alpha = 0;
						}
					}
					this.ai[2] += 1f;
					if (this.ai[2] == 0f)
					{
						this.ai[2] = 1f;
						this.velocity.X = (float)(this.direction * 2);
					}
					return;
				}
				this.alpha = 0;
			}
			if (this.type == 166)
			{
				if (Main.netMode != 1 && Main.rand.Next(240) == 0)
				{
					this.ai[2] = (float)Main.rand.Next(-480, -60);
					this.netUpdate = true;
				}
				if (this.ai[2] < 0f)
				{
					this.TargetClosest(true);
					if (this.justHit)
					{
						this.ai[2] = 0f;
					}
					if (Collision.CanHit(base.Center, 1, 1, Main.player[this.target].Center, 1, 1))
					{
						this.ai[2] = 0f;
					}
				}
				if (this.ai[2] < 0f)
				{
					this.velocity.X = this.velocity.X * 0.9f;
					if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1)
					{
						this.velocity.X = 0f;
					}
					this.ai[2] += 1f;
					if (this.ai[2] == 0f)
					{
						this.velocity.X = (float)this.direction * 0.1f;
					}
					return;
				}
			}
			if (this.type == 461)
			{
				if (this.wet)
				{
					this.knockBackResist = 0f;
					this.ai[3] = -0.10101f;
					this.noGravity = true;
					Vector2 center = base.Center;
					this.width = 34;
					this.height = 24;
					this.position.X = center.X - (float)(this.width / 2);
					this.position.Y = center.Y - (float)(this.height / 2);
					this.TargetClosest(true);
					if (this.collideX)
					{
						this.velocity.X = -this.oldVelocity.X;
					}
					if (this.velocity.X < 0f)
					{
						this.direction = -1;
					}
					if (this.velocity.X > 0f)
					{
						this.direction = 1;
					}
					if (Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].Center, 1, 1))
					{
						Vector2 value = Main.player[this.target].Center - base.Center;
						value.Normalize();
						value *= 5f;
						this.velocity = (this.velocity * 19f + value) / 20f;
						return;
					}
					float num2 = 5f;
					if (this.velocity.Y > 0f)
					{
						num2 = 3f;
					}
					if (this.velocity.Y < 0f)
					{
						num2 = 8f;
					}
					Vector2 value2 = new Vector2((float)this.direction, -1f);
					value2.Normalize();
					value2 *= num2;
					if (num2 < 5f)
					{
						this.velocity = (this.velocity * 24f + value2) / 25f;
						return;
					}
					this.velocity = (this.velocity * 9f + value2) / 10f;
					return;
				}
				else
				{
					this.knockBackResist = 0.4f * Main.knockBackMultiplier;
					this.noGravity = false;
					Vector2 center2 = base.Center;
					this.width = 18;
					this.height = 40;
					this.position.X = center2.X - (float)(this.width / 2);
					this.position.Y = center2.Y - (float)(this.height / 2);
					if (this.ai[3] == -0.10101f)
					{
						this.ai[3] = 0f;
						float num3 = this.velocity.Length();
						num3 *= 2f;
						if (num3 > 10f)
						{
							num3 = 10f;
						}
						this.velocity.Normalize();
						this.velocity *= num3;
						if (this.velocity.X < 0f)
						{
							this.direction = -1;
						}
						if (this.velocity.X > 0f)
						{
							this.direction = 1;
						}
						this.spriteDirection = this.direction;
					}
				}
			}
			if (this.type == 379 || this.type == 380)
			{
				if (this.ai[3] < 0f)
				{
					this.damage = 0;
					this.velocity.X = this.velocity.X * 0.93f;
					if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1)
					{
						this.velocity.X = 0f;
					}
					int num4 = (int)(-this.ai[3] - 1f);
					int num5 = Math.Sign(Main.npc[num4].Center.X - base.Center.X);
					if (num5 != this.direction)
					{
						this.velocity.X = 0f;
						this.direction = num5;
						this.netUpdate = true;
					}
					if (this.justHit && Main.netMode != 1 && Main.npc[num4].localAI[0] == 0f)
					{
						Main.npc[num4].localAI[0] = 1f;
					}
					if (this.ai[0] < 1000f)
					{
						this.ai[0] = 1000f;
					}
					if ((this.ai[0] += 1f) >= 1300f)
					{
						this.ai[0] = 1000f;
						this.netUpdate = true;
					}
					return;
				}
				if (this.ai[0] >= 1000f)
				{
					this.ai[0] = 0f;
				}
				this.damage = this.defDamage;
			}
			if (this.type == 383 && this.ai[2] == 0f && this.localAI[0] == 0f && Main.netMode != 1)
			{
				int num6 = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 384, this.whoAmI, 0f, 0f, 0f, 0f, 255);
				this.ai[2] = (float)(num6 + 1);
				this.localAI[0] = -1f;
				this.netUpdate = true;
				Main.npc[num6].ai[0] = (float)this.whoAmI;
				Main.npc[num6].netUpdate = true;
			}
			if (this.type == 383)
			{
				int num7 = (int)this.ai[2] - 1;
				if (num7 != -1 && Main.npc[num7].active && Main.npc[num7].type == 384)
				{
					this.dontTakeDamage = true;
				}
				else
				{
					this.dontTakeDamage = false;
					this.ai[2] = 0f;
					if (this.localAI[0] == -1f)
					{
						this.localAI[0] = 180f;
					}
					if (this.localAI[0] > 0f)
					{
						this.localAI[0] -= 1f;
					}
				}
			}
			if (this.type == 482)
			{
				int num8 = 300;
				int num9 = 120;
				this.dontTakeDamage = false;
				if (this.ai[2] < 0f)
				{
					this.dontTakeDamage = true;
					this.ai[2] += 1f;
					this.velocity.X = this.velocity.X * 0.9f;
					if ((double)Math.Abs(this.velocity.X) < 0.001)
					{
						this.velocity.X = 0.001f * (float)this.direction;
					}
					if (Math.Abs(this.velocity.Y) > 1f)
					{
						this.ai[2] += 10f;
					}
					if (this.ai[2] >= 0f)
					{
						this.netUpdate = true;
						this.velocity.X = this.velocity.X + (float)this.direction * 0.3f;
					}
					return;
				}
				if (this.ai[2] < (float)num8)
				{
					if (this.justHit)
					{
						this.ai[2] += 15f;
					}
					this.ai[2] += 1f;
				}
				else if (this.velocity.Y == 0f)
				{
					this.ai[2] = (float)(-(float)num9);
					this.netUpdate = true;
				}
			}
			if (this.type == 480)
			{
				int num10 = 180;
				int num11 = 300;
				int num12 = 180;
				int num13 = 60;
				int num14 = 20;
				if (this.life < this.lifeMax / 3)
				{
					num10 = 120;
					num11 = 240;
					num12 = 240;
					num13 = 90;
				}
				if (this.ai[2] > 0f)
				{
					this.ai[2] -= 1f;
				}
				else if (this.ai[2] == 0f)
				{
					if (((Main.player[this.target].Center.X < base.Center.X && this.direction < 0) || (Main.player[this.target].Center.X > base.Center.X && this.direction > 0)) && this.velocity.Y == 0f && base.Distance(Main.player[this.target].Center) < 900f && Collision.CanHit(base.Center, 1, 1, Main.player[this.target].Center, 1, 1))
					{
						this.ai[2] = (float)(-(float)num12 - num14);
						this.netUpdate = true;
					}
				}
				else
				{
					if (this.ai[2] < 0f && this.ai[2] < (float)(-(float)num12))
					{
						this.velocity.X = this.velocity.X * 0.9f;
						if (this.velocity.Y < -2f || this.velocity.Y > 4f || this.justHit)
						{
							this.ai[2] = (float)num10;
						}
						else
						{
							this.ai[2] += 1f;
							if (this.ai[2] == 0f)
							{
								this.ai[2] = (float)num11;
							}
						}
						float num15 = this.ai[2] + (float)num12 + (float)num14;
						if (num15 == 1f)
						{
							Main.PlaySound(4, (int)this.position.X, (int)this.position.Y, 17, 1f, 0f);
						}
						if (num15 < (float)num14)
						{
							Vector2 vector = base.Top + new Vector2((float)(this.spriteDirection * 6), 6f);
							float scaleFactor = MathHelper.Lerp(20f, 30f, (num15 * 3f + 50f) / 182f);
							Main.rand.NextFloat();
							for (float num16 = 0f; num16 < 2f; num16 += 1f)
							{
								Vector2 vector2 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (Main.rand.NextFloat() * 0.5f + 0.5f);
								Dust dust = Main.dust[Dust.NewDust(vector, 0, 0, 228, 0f, 0f, 0, default(Color), 1f)];
								dust.position = vector + vector2 * scaleFactor;
								dust.noGravity = true;
								dust.velocity = vector2 * 2f;
								dust.scale = 0.5f + Main.rand.NextFloat() * 0.5f;
							}
						}
						Lighting.AddLight(base.Center, 0.9f, 0.75f, 0.1f);
						return;
					}
					if (this.ai[2] < 0f && this.ai[2] >= (float)(-(float)num12))
					{
						Lighting.AddLight(base.Center, 0.9f, 0.75f, 0.1f);
						this.velocity.X = this.velocity.X * 0.9f;
						if (this.velocity.Y < -2f || this.velocity.Y > 4f || this.justHit)
						{
							this.ai[2] = (float)num10;
						}
						else
						{
							this.ai[2] += 1f;
							if (this.ai[2] == 0f)
							{
								this.ai[2] = (float)num11;
							}
						}
						float num17 = this.ai[2] + (float)num12;
						if (num17 < 180f && (Main.rand.Next(3) == 0 || this.ai[2] % 3f == 0f))
						{
							Vector2 vector3 = base.Top + new Vector2((float)(this.spriteDirection * 10), 10f);
							float scaleFactor2 = MathHelper.Lerp(20f, 30f, (num17 * 3f + 50f) / 182f);
							Main.rand.NextFloat();
							for (float num18 = 0f; num18 < 1f; num18 += 1f)
							{
								Vector2 vector4 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (Main.rand.NextFloat() * 0.5f + 0.5f);
								Dust dust2 = Main.dust[Dust.NewDust(vector3, 0, 0, 228, 0f, 0f, 0, default(Color), 1f)];
								dust2.position = vector3 + vector4 * scaleFactor2;
								dust2.noGravity = true;
								dust2.velocity = vector4 * 4f;
								dust2.scale = 0.5f + Main.rand.NextFloat();
							}
						}
						if (Main.netMode != 2)
						{
							Player player = Main.player[Main.myPlayer];
							int arg_1053_0 = Main.myPlayer;
							if (!player.dead && player.active && player.FindBuffIndex(156) == -1)
							{
								Vector2 vector5 = player.Center - base.Center;
								if (vector5.Length() < 700f)
								{
									bool flag = vector5.Length() < 30f;
									if (!flag)
									{
										float x = 0.7853982f.ToRotationVector2().X;
										Vector2 vector6 = Vector2.Normalize(vector5);
										if (vector6.X > x || vector6.X < -x)
										{
											flag = true;
										}
									}
									if (((player.Center.X < base.Center.X && this.direction < 0 && player.direction > 0) || (player.Center.X > base.Center.X && this.direction > 0 && player.direction < 0)) && flag)
									{
										bool flag2 = Collision.CanHitLine(base.Center, 1, 1, player.Center, 1, 1) || Collision.CanHitLine(base.Center - Vector2.UnitY * 16f, 1, 1, player.Center, 1, 1) || Collision.CanHitLine(base.Center + Vector2.UnitY * 8f, 1, 1, player.Center, 1, 1);
										if (flag2)
										{
											player.AddBuff(156, num13 + (int)this.ai[2] * -1, true);
										}
									}
								}
							}
						}
						return;
					}
				}
			}
			if (this.type == 471)
			{
				if (this.ai[3] < 0f)
				{
					this.knockBackResist = 0f;
					this.defense = (int)((double)this.defDefense * 1.1);
					this.noGravity = true;
					this.noTileCollide = true;
					if (this.velocity.X < 0f)
					{
						this.direction = -1;
					}
					else if (this.velocity.X > 0f)
					{
						this.direction = 1;
					}
					this.rotation = this.velocity.X * 0.1f;
					if (Main.netMode != 1)
					{
						this.localAI[3] += 1f;
						if (this.localAI[3] > (float)Main.rand.Next(20, 180))
						{
							this.localAI[3] = 0f;
							Vector2 value3 = base.Center;
							value3 += this.velocity;
							NPC.NewNPC((int)value3.X, (int)value3.Y, 30, 0, 0f, 0f, 0f, 0f, 255);
						}
					}
				}
				else
				{
					this.localAI[3] = 0f;
					this.knockBackResist = 0.35f * Main.knockBackMultiplier;
					this.rotation *= 0.9f;
					this.defense = this.defDefense;
					this.noGravity = false;
					this.noTileCollide = false;
				}
				if (this.ai[3] == 1f)
				{
					this.knockBackResist = 0f;
					this.defense += 10;
				}
				if (this.ai[3] == -1f)
				{
					this.TargetClosest(true);
					float num19 = 8f;
					float num20 = 40f;
					Vector2 value4 = Main.player[this.target].Center - base.Center;
					float num21 = value4.Length();
					num19 += num21 / 200f;
					value4.Normalize();
					value4 *= num19;
					this.velocity = (this.velocity * (num20 - 1f) + value4) / num20;
					if (num21 < 500f && !Collision.SolidCollision(this.position, this.width, this.height))
					{
						this.ai[3] = 0f;
						this.ai[2] = 0f;
					}
					return;
				}
				if (this.ai[3] == -2f)
				{
					this.velocity.Y = this.velocity.Y - 0.2f;
					if (this.velocity.Y < -10f)
					{
						this.velocity.Y = -10f;
					}
					if (Main.player[this.target].Center.Y - base.Center.Y > 200f)
					{
						this.TargetClosest(true);
						this.ai[3] = -3f;
						if (Main.player[this.target].Center.X > base.Center.X)
						{
							this.ai[2] = 1f;
						}
						else
						{
							this.ai[2] = -1f;
						}
					}
					this.velocity.X = this.velocity.X * 0.99f;
					return;
				}
				if (this.ai[3] == -3f)
				{
					if (this.direction == 0)
					{
						this.TargetClosest(true);
					}
					if (this.ai[2] == 0f)
					{
						this.ai[2] = (float)this.direction;
					}
					this.velocity.Y = this.velocity.Y * 0.9f;
					this.velocity.X = this.velocity.X + this.ai[2] * 0.3f;
					if (this.velocity.X > 10f)
					{
						this.velocity.X = 10f;
					}
					if (this.velocity.X < -10f)
					{
						this.velocity.X = -10f;
					}
					float num22 = Main.player[this.target].Center.X - base.Center.X;
					if ((this.ai[2] < 0f && num22 > 300f) || (this.ai[2] > 0f && num22 < -300f))
					{
						this.ai[3] = -4f;
						this.ai[2] = 0f;
						return;
					}
					if (Math.Abs(num22) > 800f)
					{
						this.ai[3] = -1f;
						this.ai[2] = 0f;
					}
					return;
				}
				else
				{
					if (this.ai[3] == -4f)
					{
						this.ai[2] += 1f;
						this.velocity.Y = this.velocity.Y + 0.1f;
						if (this.velocity.Length() > 4f)
						{
							this.velocity *= 0.9f;
						}
						int num23 = (int)base.Center.X / 16;
						int num24 = (int)(this.position.Y + (float)this.height + 12f) / 16;
						bool flag3 = false;
						for (int i = num23 - 1; i <= num23 + 1; i++)
						{
							if (Main.tile[i, num24] == null)
							{
								Main.tile[num23, num24] = new Tile();
							}
							if (Main.tile[i, num24].active() && Main.tileSolid[(int)Main.tile[i, num24].type])
							{
								flag3 = true;
							}
						}
						if (flag3 && !Collision.SolidCollision(this.position, this.width, this.height))
						{
							this.ai[3] = 0f;
							this.ai[2] = 0f;
						}
						else if (this.ai[2] > 300f || base.Center.Y > Main.player[this.target].Center.Y + 200f)
						{
							this.ai[3] = -1f;
							this.ai[2] = 0f;
						}
					}
					else
					{
						if (this.ai[3] == 1f)
						{
							Vector2 center3 = base.Center;
							center3.Y -= 70f;
							this.velocity.X = this.velocity.X * 0.8f;
							this.ai[2] += 1f;
							if (this.ai[2] == 60f)
							{
								if (Main.netMode != 1)
								{
									NPC.NewNPC((int)center3.X, (int)center3.Y + 18, 472, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (this.ai[2] >= 90f)
							{
								this.ai[3] = -2f;
								this.ai[2] = 0f;
							}
							for (int j = 0; j < 2; j++)
							{
								Vector2 vector7 = center3;
								Vector2 value5 = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
								value5.Normalize();
								value5 *= (float)Main.rand.Next(0, 100) * 0.1f;
								vector7 += value5;
								value5.Normalize();
								value5 *= (float)Main.rand.Next(50, 90) * 0.1f;
								int num25 = Dust.NewDust(vector7, 1, 1, 27, 0f, 0f, 0, default(Color), 1f);
								Main.dust[num25].velocity = -value5 * 0.3f;
								Main.dust[num25].alpha = 100;
								if (Main.rand.Next(2) == 0)
								{
									Main.dust[num25].noGravity = true;
									Main.dust[num25].scale += 0.3f;
								}
							}
							return;
						}
						this.ai[2] += 1f;
						int num26 = 10;
						if (this.velocity.Y == 0f && NPC.CountNPCS(472) < num26)
						{
							if (this.ai[2] >= 180f)
							{
								this.ai[2] = 0f;
								this.ai[3] = 1f;
							}
						}
						else
						{
							if (NPC.CountNPCS(472) >= num26)
							{
								this.ai[2] += 1f;
							}
							if (this.ai[2] >= 360f)
							{
								this.ai[2] = 0f;
								this.ai[3] = -2f;
								this.velocity.Y = this.velocity.Y - 3f;
							}
						}
						if (this.target >= 0 && !Main.player[this.target].dead && (Main.player[this.target].Center - base.Center).Length() > 800f)
						{
							this.ai[3] = -1f;
							this.ai[2] = 0f;
						}
					}
					if (Main.player[this.target].dead)
					{
						this.TargetClosest(true);
						if (Main.player[this.target].dead && this.timeLeft > 1)
						{
							this.timeLeft = 1;
						}
					}
				}
			}
			if (this.type == 419)
			{
				this.reflectingProjectiles = false;
				this.takenDamageMultiplier = 1f;
				int num27 = 6;
				int num28 = 10;
				float scaleFactor3 = 16f;
				if (this.ai[2] > 0f)
				{
					this.ai[2] -= 1f;
				}
				if (this.ai[2] == 0f)
				{
					if (((Main.player[this.target].Center.X < base.Center.X && this.direction < 0) || (Main.player[this.target].Center.X > base.Center.X && this.direction > 0)) && Collision.CanHit(base.Center, 1, 1, Main.player[this.target].Center, 1, 1))
					{
						this.ai[2] = -1f;
						this.netUpdate = true;
						this.TargetClosest(true);
					}
				}
				else
				{
					if (this.ai[2] < 0f && this.ai[2] > (float)(-(float)num27))
					{
						this.ai[2] -= 1f;
						this.velocity.X = this.velocity.X * 0.9f;
						return;
					}
					if (this.ai[2] == (float)(-(float)num27))
					{
						this.ai[2] -= 1f;
						this.TargetClosest(true);
						Vector2 vec = base.DirectionTo(Main.player[this.target].Top + new Vector2(0f, -30f));
						if (vec.HasNaNs())
						{
							vec = Vector2.Normalize(new Vector2((float)this.spriteDirection, -1f));
						}
						this.velocity = vec * scaleFactor3;
						this.netUpdate = true;
						return;
					}
					if (this.ai[2] < (float)(-(float)num27))
					{
						this.ai[2] -= 1f;
						if (this.velocity.Y == 0f)
						{
							this.ai[2] = 60f;
						}
						else if (this.ai[2] < (float)(-(float)num27 - num28))
						{
							this.velocity.Y = this.velocity.Y + 0.15f;
							if (this.velocity.Y > 24f)
							{
								this.velocity.Y = 24f;
							}
						}
						this.reflectingProjectiles = true;
						this.takenDamageMultiplier = 3f;
						if (this.justHit)
						{
							this.ai[2] = 60f;
							this.netUpdate = true;
						}
						return;
					}
				}
			}
			if (this.type == 415)
			{
				int num29 = 42;
				int num30 = 18;
				if (this.justHit)
				{
					this.ai[2] = 120f;
					this.netUpdate = true;
				}
				if (this.ai[2] > 0f)
				{
					this.ai[2] -= 1f;
				}
				if (this.ai[2] == 0f)
				{
					int num31 = 0;
					for (int k = 0; k < 200; k++)
					{
						if (Main.npc[k].active && Main.npc[k].type == 516)
						{
							num31++;
						}
					}
					if (num31 > 6)
					{
						this.ai[2] = 90f;
					}
					else if (((Main.player[this.target].Center.X < base.Center.X && this.direction < 0) || (Main.player[this.target].Center.X > base.Center.X && this.direction > 0)) && Collision.CanHit(base.Center, 1, 1, Main.player[this.target].Center, 1, 1))
					{
						this.ai[2] = -1f;
						this.netUpdate = true;
						this.TargetClosest(true);
					}
				}
				else if (this.ai[2] < 0f && this.ai[2] > (float)(-(float)num29))
				{
					this.ai[2] -= 1f;
					if (this.ai[2] == (float)(-(float)num29))
					{
						this.ai[2] = (float)(180 + 30 * Main.rand.Next(10));
					}
					this.velocity.X = this.velocity.X * 0.8f;
					if (this.ai[2] == (float)(-(float)num30) || this.ai[2] == (float)(-(float)num30 - 8) || this.ai[2] == (float)(-(float)num30 - 16))
					{
						for (int l = 0; l < 20; l++)
						{
							Vector2 vector8 = base.Center + Vector2.UnitX * (float)this.spriteDirection * 40f;
							Dust dust3 = Main.dust[Dust.NewDust(vector8, 0, 0, 259, 0f, 0f, 0, default(Color), 1f)];
							Vector2 vector9 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							dust3.position = vector8 + vector9 * 4f;
							dust3.velocity = vector9 * 2f + Vector2.UnitX * Main.rand.NextFloat() * (float)this.spriteDirection * 3f;
							dust3.scale = 0.3f + vector9.X * (float)(-(float)this.spriteDirection);
							dust3.fadeIn = 0.7f;
							dust3.noGravity = true;
						}
						if (this.velocity.X > -0.5f && this.velocity.X < 0.5f)
						{
							this.velocity.X = 0f;
						}
						if (Main.netMode != 1)
						{
							NPC.NewNPC((int)base.Center.X + this.spriteDirection * 45, (int)base.Center.Y + 8, 516, 0, 0f, 0f, 0f, 0f, this.target);
						}
					}
					return;
				}
			}
			if (this.type == 428)
			{
				this.localAI[0] += 1f;
				if (this.localAI[0] >= 300f)
				{
					int num32 = (int)base.Center.X / 16 - 1;
					int num33 = (int)base.Center.Y / 16 - 1;
					if (!Collision.SolidTiles(num32, num32 + 2, num33, num33 + 1) && Main.netMode != 1)
					{
						this.Transform(427);
						this.life = this.lifeMax;
						this.localAI[0] = 0f;
						return;
					}
				}
				int maxValue;
				if (this.localAI[0] < 60f)
				{
					maxValue = 16;
				}
				else if (this.localAI[0] < 120f)
				{
					maxValue = 8;
				}
				else if (this.localAI[0] < 180f)
				{
					maxValue = 4;
				}
				else if (this.localAI[0] < 240f)
				{
					maxValue = 2;
				}
				else if (this.localAI[0] < 300f)
				{
					maxValue = 1;
				}
				else
				{
					maxValue = 1;
				}
				if (Main.rand.Next(maxValue) == 0)
				{
					Dust dust4 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
					dust4.noGravity = true;
					dust4.scale = 1f;
					dust4.noLight = true;
					dust4.velocity = base.DirectionFrom(dust4.position) * dust4.velocity.Length();
					dust4.position -= dust4.velocity * 5f;
					Dust expr_23FC_cp_0 = dust4;
					expr_23FC_cp_0.position.X = expr_23FC_cp_0.position.X + (float)(this.direction * 6);
					Dust expr_2418_cp_0 = dust4;
					expr_2418_cp_0.position.Y = expr_2418_cp_0.position.Y + 4f;
				}
			}
			if (this.type == 427)
			{
				this.localAI[0] += 1f;
				this.localAI[0] += Math.Abs(this.velocity.X) / 2f;
				if (this.localAI[0] >= 1200f && Main.netMode != 1)
				{
					int num34 = (int)base.Center.X / 16 - 2;
					int num35 = (int)base.Center.Y / 16 - 3;
					if (!Collision.SolidTiles(num34, num34 + 4, num35, num35 + 4))
					{
						this.Transform(426);
						this.life = this.lifeMax;
						this.localAI[0] = 0f;
						return;
					}
				}
				int maxValue2;
				if (this.localAI[0] < 360f)
				{
					maxValue2 = 32;
				}
				else if (this.localAI[0] < 720f)
				{
					maxValue2 = 16;
				}
				else if (this.localAI[0] < 1080f)
				{
					maxValue2 = 6;
				}
				else if (this.localAI[0] < 1440f)
				{
					maxValue2 = 2;
				}
				else if (this.localAI[0] < 1800f)
				{
					maxValue2 = 1;
				}
				else
				{
					maxValue2 = 1;
				}
				if (Main.rand.Next(maxValue2) == 0)
				{
					Dust dust5 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
					dust5.noGravity = true;
					dust5.scale = 1f;
					dust5.noLight = true;
				}
			}
			bool flag4 = false;
			if (this.velocity.X == 0f)
			{
				flag4 = true;
			}
			if (this.justHit)
			{
				flag4 = false;
			}
			if (Main.netMode != 1 && this.type == 198 && (double)this.life <= (double)this.lifeMax * 0.55)
			{
				this.Transform(199);
			}
			if (Main.netMode != 1 && this.type == 348 && (double)this.life <= (double)this.lifeMax * 0.55)
			{
				this.Transform(349);
			}
			int num36 = 60;
			if (this.type == 120)
			{
				num36 = 180;
				if (this.ai[3] == -120f)
				{
					this.velocity *= 0f;
					this.ai[3] = 0f;
					Main.PlaySound(SoundID.Item8, this.position);
					Vector2 vector10 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
					float num37 = this.oldPos[2].X + (float)this.width * 0.5f - vector10.X;
					float num38 = this.oldPos[2].Y + (float)this.height * 0.5f - vector10.Y;
					float num39 = (float)Math.Sqrt((double)(num37 * num37 + num38 * num38));
					num39 = 2f / num39;
					num37 *= num39;
					num38 *= num39;
					for (int m = 0; m < 20; m++)
					{
						int num40 = Dust.NewDust(this.position, this.width, this.height, 71, num37, num38, 200, default(Color), 2f);
						Main.dust[num40].noGravity = true;
						Dust expr_27D4_cp_0 = Main.dust[num40];
						expr_27D4_cp_0.velocity.X = expr_27D4_cp_0.velocity.X * 2f;
					}
					for (int n = 0; n < 20; n++)
					{
						int num41 = Dust.NewDust(this.oldPos[2], this.width, this.height, 71, -num37, -num38, 200, default(Color), 2f);
						Main.dust[num41].noGravity = true;
						Dust expr_2855_cp_0 = Main.dust[num41];
						expr_2855_cp_0.velocity.X = expr_2855_cp_0.velocity.X * 2f;
					}
				}
			}
			bool flag5 = false;
			bool flag6 = true;
			if (this.type == 343 || this.type == 47 || this.type == 67 || this.type == 109 || this.type == 110 || this.type == 111 || this.type == 120 || this.type == 163 || this.type == 164 || this.type == 239 || this.type == 168 || this.type == 199 || this.type == 206 || this.type == 214 || this.type == 215 || this.type == 216 || this.type == 217 || this.type == 218 || this.type == 219 || this.type == 220 || this.type == 226 || this.type == 243 || this.type == 251 || this.type == 257 || this.type == 258 || this.type == 290 || this.type == 291 || this.type == 292 || this.type == 293 || this.type == 305 || this.type == 306 || this.type == 307 || this.type == 308 || this.type == 309 || this.type == 348 || this.type == 349 || this.type == 350 || this.type == 351 || this.type == 379 || (this.type >= 430 && this.type <= 436) || (this.type == 380 || this.type == 381 || this.type == 382 || this.type == 383 || this.type == 386 || this.type == 391 || (this.type >= 449 && this.type <= 452)) || (this.type == 466 || this.type == 464 || this.type == 166 || this.type == 469 || this.type == 468 || this.type == 471 || this.type == 470 || this.type == 480 || this.type == 481 || this.type == 482 || this.type == 411 || this.type == 424 || this.type == 409 || (this.type >= 494 && this.type <= 506)) || (this.type == 425 || this.type == 427 || this.type == 426 || this.type == 428 || this.type == 508 || this.type == 415 || this.type == 419 || this.type == 520 || (this.type >= 524 && this.type <= 527)) || this.type == 528 || this.type == 529 || this.type == 530 || this.type == 532)
			{
				flag6 = false;
			}
			bool flag7 = false;
			int num42 = this.type;
			if (num42 == 425 || num42 == 471)
			{
				flag7 = true;
			}
			bool flag8 = true;
			num42 = this.type;
			if (num42 <= 350)
			{
				if (num42 <= 206)
				{
					switch (num42)
					{
					case 110:
					case 111:
						break;
					default:
						if (num42 != 206)
						{
							goto IL_2E98;
						}
						break;
					}
				}
				else
				{
					switch (num42)
					{
					case 214:
					case 215:
					case 216:
						break;
					default:
						switch (num42)
						{
						case 291:
						case 292:
						case 293:
							break;
						default:
							if (num42 != 350)
							{
								goto IL_2E98;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num42 <= 426)
			{
				switch (num42)
				{
				case 379:
				case 380:
				case 381:
				case 382:
					break;
				default:
					switch (num42)
					{
					case 409:
					case 411:
						break;
					case 410:
						goto IL_2E98;
					default:
						switch (num42)
						{
						case 424:
						case 426:
							break;
						case 425:
							goto IL_2E98;
						default:
							goto IL_2E98;
						}
						break;
					}
					break;
				}
			}
			else if (num42 != 466)
			{
				switch (num42)
				{
				case 498:
				case 499:
				case 500:
				case 501:
				case 502:
				case 503:
				case 504:
				case 505:
				case 506:
					break;
				default:
					if (num42 != 520)
					{
						goto IL_2E98;
					}
					break;
				}
			}
			if (this.ai[2] > 0f)
			{
				flag8 = false;
			}
			IL_2E98:
			if (!flag7 && flag8)
			{
				if (this.velocity.Y == 0f && ((this.velocity.X > 0f && this.direction < 0) || (this.velocity.X < 0f && this.direction > 0)))
				{
					flag5 = true;
				}
				if (this.position.X == this.oldPosition.X || this.ai[3] >= (float)num36 || flag5)
				{
					this.ai[3] += 1f;
				}
				else if ((double)Math.Abs(this.velocity.X) > 0.9 && this.ai[3] > 0f)
				{
					this.ai[3] -= 1f;
				}
				if (this.ai[3] > (float)(num36 * 10))
				{
					this.ai[3] = 0f;
				}
				if (this.justHit)
				{
					this.ai[3] = 0f;
				}
				if (this.ai[3] == (float)num36)
				{
					this.netUpdate = true;
				}
			}
			if (this.type == 463 && Main.netMode != 1)
			{
				if (this.localAI[3] > 0f)
				{
					this.localAI[3] -= 1f;
				}
				if (this.justHit && this.localAI[3] <= 0f && Main.rand.Next(3) == 0)
				{
					this.localAI[3] = 30f;
					int num43 = Main.rand.Next(3, 6);
					int[] array = new int[num43];
					int num44 = 0;
					for (int num45 = 0; num45 < 255; num45++)
					{
						if (Main.player[num45].active && !Main.player[num45].dead && Collision.CanHitLine(this.position, this.width, this.height, Main.player[num45].position, Main.player[num45].width, Main.player[num45].height))
						{
							array[num44] = num45;
							num44++;
							if (num44 == num43)
							{
								break;
							}
						}
					}
					if (num44 > 1)
					{
						for (int num46 = 0; num46 < 100; num46++)
						{
							int num47 = Main.rand.Next(num44);
							int num48;
							for (num48 = num47; num48 == num47; num48 = Main.rand.Next(num44))
							{
							}
							int num49 = array[num47];
							array[num47] = array[num48];
							array[num48] = num49;
						}
					}
					Vector2 vector11 = new Vector2(-1f, -1f);
					for (int num50 = 0; num50 < num44; num50++)
					{
						Vector2 value6 = Main.npc[array[num50]].Center - base.Center;
						value6.Normalize();
						vector11 += value6;
					}
					vector11.Normalize();
					for (int num51 = 0; num51 < num43; num51++)
					{
						float scaleFactor4 = (float)Main.rand.Next(8, 13);
						Vector2 value7 = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
						value7.Normalize();
						if (num44 > 0)
						{
							value7 += vector11;
							value7.Normalize();
						}
						value7 *= scaleFactor4;
						if (num44 > 0)
						{
							num44--;
							value7 = Main.player[array[num44]].Center - base.Center;
							value7.Normalize();
							value7 *= scaleFactor4;
						}
						Projectile.NewProjectile(base.Center.X, this.position.Y + (float)(this.width / 4), value7.X, value7.Y, 498, (int)((double)this.damage * 0.15), 1f, 255, 0f, 0f);
					}
				}
			}
			if (this.type == 460)
			{
				if (this.velocity.Y < -NPC.gravity || this.velocity.Y > NPC.gravity)
				{
					this.knockBackResist = 0f;
				}
				else
				{
					this.knockBackResist = 0.25f * Main.knockBackMultiplier;
				}
			}
			if (this.type == 469)
			{
				this.knockBackResist = 0.45f * Main.knockBackMultiplier;
				if (this.ai[2] == 1f)
				{
					this.knockBackResist = 0f;
				}
				bool flag9 = false;
				int num52 = (int)base.Center.X / 16;
				int num53 = (int)base.Center.Y / 16;
				for (int num54 = num52 - 1; num54 <= num52 + 1; num54++)
				{
					for (int num55 = num53 - 1; num55 <= num53 + 1; num55++)
					{
						if (Main.tile[num54, num55] != null && Main.tile[num54, num55].wall > 0)
						{
							flag9 = true;
							break;
						}
					}
					if (flag9)
					{
						break;
					}
				}
				if (this.ai[2] == 0f && flag9)
				{
					if (this.velocity.Y == 0f)
					{
						this.velocity.Y = -4.6f;
						this.velocity.X = this.velocity.X * 1.3f;
					}
					else if (this.velocity.Y > 0f)
					{
						this.ai[2] = 1f;
					}
				}
				if (flag9 && this.ai[2] == 1f && Collision.CanHit(base.Center, 1, 1, Main.player[this.target].Center, 1, 1))
				{
					Vector2 value8 = Main.player[this.target].Center - base.Center;
					float num56 = value8.Length();
					value8.Normalize();
					value8 *= 4.5f + num56 / 300f;
					this.velocity = (this.velocity * 29f + value8) / 30f;
					this.noGravity = true;
					this.ai[2] = 1f;
					return;
				}
				this.noGravity = false;
				this.ai[2] = 0f;
			}
			if (this.type == 462 && this.velocity.Y == 0f && (Main.player[this.target].Center - base.Center).Length() < 150f && Math.Abs(this.velocity.X) > 3f && ((this.velocity.X < 0f && base.Center.X > Main.player[this.target].Center.X) || (this.velocity.X > 0f && base.Center.X < Main.player[this.target].Center.X)))
			{
				this.velocity.X = this.velocity.X * 1.75f;
				this.velocity.Y = this.velocity.Y - 4.5f;
				if (base.Center.Y - Main.player[this.target].Center.Y > 20f)
				{
					this.velocity.Y = this.velocity.Y - 0.5f;
				}
				if (base.Center.Y - Main.player[this.target].Center.Y > 40f)
				{
					this.velocity.Y = this.velocity.Y - 1f;
				}
				if (base.Center.Y - Main.player[this.target].Center.Y > 80f)
				{
					this.velocity.Y = this.velocity.Y - 1.5f;
				}
				if (base.Center.Y - Main.player[this.target].Center.Y > 100f)
				{
					this.velocity.Y = this.velocity.Y - 1.5f;
				}
				if (Math.Abs(this.velocity.X) > 7f)
				{
					if (this.velocity.X < 0f)
					{
						this.velocity.X = -7f;
					}
					else
					{
						this.velocity.X = 7f;
					}
				}
			}
			if (this.ai[3] < (float)num36 && (Main.eclipse || !Main.dayTime || (double)this.position.Y > Main.worldSurface * 16.0 || (Main.invasionType == 1 && (this.type == 343 || this.type == 350)) || (Main.invasionType == 1 && (this.type == 26 || this.type == 27 || this.type == 28 || this.type == 111 || this.type == 471)) || (this.type == 73 || (Main.invasionType == 3 && this.type >= 212 && this.type <= 216)) || (Main.invasionType == 4 && (this.type == 381 || this.type == 382 || this.type == 383 || this.type == 385 || this.type == 386 || this.type == 389 || this.type == 391 || this.type == 520)) || (this.type == 31 || this.type == 294 || this.type == 295 || this.type == 296 || this.type == 47 || this.type == 67 || this.type == 77 || this.type == 78 || this.type == 79 || this.type == 80 || this.type == 110 || this.type == 120 || this.type == 168 || this.type == 181 || this.type == 185 || this.type == 198 || this.type == 199 || this.type == 206 || this.type == 217 || this.type == 218 || this.type == 219 || this.type == 220 || this.type == 239 || this.type == 243 || this.type == 254 || this.type == 255 || this.type == 257 || this.type == 258 || this.type == 291 || this.type == 292 || this.type == 293 || this.type == 379 || this.type == 380 || this.type == 464 || this.type == 470 || this.type == 424 || (this.type == 411 && (this.ai[1] >= 180f || this.ai[1] < 90f))) || (this.type == 409 || this.type == 425 || this.type == 429 || this.type == 427 || this.type == 428 || this.type == 508 || this.type == 415 || this.type == 419 || (this.type >= 524 && this.type <= 527)) || this.type == 528 || this.type == 529 || this.type == 530 || this.type == 532))
			{
				if ((this.type == 3 || this.type == 331 || this.type == 332 || this.type == 21 || (this.type >= 449 && this.type <= 452) || this.type == 31 || this.type == 294 || this.type == 295 || this.type == 296 || this.type == 77 || this.type == 110 || this.type == 132 || this.type == 167 || this.type == 161 || this.type == 162 || this.type == 186 || this.type == 187 || this.type == 188 || this.type == 189 || this.type == 197 || this.type == 200 || this.type == 201 || this.type == 202 || this.type == 203 || this.type == 223 || this.type == 291 || this.type == 292 || this.type == 293 || this.type == 320 || this.type == 321 || this.type == 319 || this.type == 481) && Main.rand.Next(1000) == 0)
				{
					Main.PlaySound(14, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				}
				if (this.type == 489 && Main.rand.Next(800) == 0)
				{
					Main.PlaySound(14, (int)this.position.X, (int)this.position.Y, this.type, 1f, 0f);
				}
				if ((this.type == 78 || this.type == 79 || this.type == 80) && Main.rand.Next(500) == 0)
				{
					Main.PlaySound(26, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				}
				if (this.type == 159 && Main.rand.Next(500) == 0)
				{
					Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, 7, 1f, 0f);
				}
				if (this.type == 162 && Main.rand.Next(500) == 0)
				{
					Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, 6, 1f, 0f);
				}
				if (this.type == 181 && Main.rand.Next(500) == 0)
				{
					Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, 8, 1f, 0f);
				}
				if (this.type >= 269 && this.type <= 280 && Main.rand.Next(1000) == 0)
				{
					Main.PlaySound(14, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				}
				this.TargetClosest(true);
			}
			else if (this.ai[2] <= 0f || (this.type != 110 && this.type != 111 && this.type != 206 && this.type != 216 && this.type != 214 && this.type != 215 && this.type != 291 && this.type != 292 && this.type != 293 && this.type != 350 && this.type != 381 && this.type != 382 && this.type != 383 && this.type != 385 && this.type != 386 && this.type != 389 && this.type != 391 && this.type != 469 && this.type != 166 && this.type != 466 && this.type != 471 && this.type != 411 && this.type != 409 && this.type != 424 && this.type != 425 && this.type != 426 && this.type != 415 && this.type != 419 && this.type != 520))
			{
				if (Main.dayTime && (double)(this.position.Y / 16f) < Main.worldSurface && this.timeLeft > 10)
				{
					this.timeLeft = 10;
				}
				if (this.velocity.X == 0f)
				{
					if (this.velocity.Y == 0f)
					{
						this.ai[0] += 1f;
						if (this.ai[0] >= 2f)
						{
							this.direction *= -1;
							this.spriteDirection = this.direction;
							this.ai[0] = 0f;
						}
					}
				}
				else
				{
					this.ai[0] = 0f;
				}
				if (this.direction == 0)
				{
					this.direction = 1;
				}
			}
			if (this.type == 159 || this.type == 349)
			{
				if (this.type == 159 && ((this.velocity.X > 0f && this.direction < 0) || (this.velocity.X < 0f && this.direction > 0)))
				{
					this.velocity.X = this.velocity.X * 0.95f;
				}
				if (this.velocity.X < -6f || this.velocity.X > 6f)
				{
					if (this.velocity.Y == 0f)
					{
						this.velocity *= 0.8f;
					}
				}
				else if (this.velocity.X < 6f && this.direction == 1)
				{
					if (this.velocity.Y == 0f && this.velocity.X < 0f)
					{
						this.velocity.X = this.velocity.X * 0.99f;
					}
					this.velocity.X = this.velocity.X + 0.07f;
					if (this.velocity.X > 6f)
					{
						this.velocity.X = 6f;
					}
				}
				else if (this.velocity.X > -6f && this.direction == -1)
				{
					if (this.velocity.Y == 0f && this.velocity.X > 0f)
					{
						this.velocity.X = this.velocity.X * 0.99f;
					}
					this.velocity.X = this.velocity.X - 0.07f;
					if (this.velocity.X < -6f)
					{
						this.velocity.X = -6f;
					}
				}
			}
			else if (this.type == 199)
			{
				if (this.velocity.X < -4f || this.velocity.X > 4f)
				{
					if (this.velocity.Y == 0f)
					{
						this.velocity *= 0.8f;
					}
				}
				else if (this.velocity.X < 4f && this.direction == 1)
				{
					if (this.velocity.Y == 0f && this.velocity.X < 0f)
					{
						this.velocity.X = this.velocity.X * 0.8f;
					}
					this.velocity.X = this.velocity.X + 0.1f;
					if (this.velocity.X > 4f)
					{
						this.velocity.X = 4f;
					}
				}
				else if (this.velocity.X > -4f && this.direction == -1)
				{
					if (this.velocity.Y == 0f && this.velocity.X > 0f)
					{
						this.velocity.X = this.velocity.X * 0.8f;
					}
					this.velocity.X = this.velocity.X - 0.1f;
					if (this.velocity.X < -4f)
					{
						this.velocity.X = -4f;
					}
				}
			}
			else if (this.type == 120 || this.type == 166 || this.type == 213 || this.type == 258 || this.type == 528 || this.type == 529)
			{
				if (this.velocity.X < -3f || this.velocity.X > 3f)
				{
					if (this.velocity.Y == 0f)
					{
						this.velocity *= 0.8f;
					}
				}
				else if (this.velocity.X < 3f && this.direction == 1)
				{
					if (this.velocity.Y == 0f && this.velocity.X < 0f)
					{
						this.velocity.X = this.velocity.X * 0.99f;
					}
					this.velocity.X = this.velocity.X + 0.07f;
					if (this.velocity.X > 3f)
					{
						this.velocity.X = 3f;
					}
				}
				else if (this.velocity.X > -3f && this.direction == -1)
				{
					if (this.velocity.Y == 0f && this.velocity.X > 0f)
					{
						this.velocity.X = this.velocity.X * 0.99f;
					}
					this.velocity.X = this.velocity.X - 0.07f;
					if (this.velocity.X < -3f)
					{
						this.velocity.X = -3f;
					}
				}
			}
			else if (this.type == 461 || this.type == 27 || this.type == 77 || this.type == 104 || this.type == 163 || this.type == 162 || this.type == 196 || this.type == 197 || this.type == 212 || this.type == 257 || this.type == 326 || this.type == 343 || this.type == 348 || this.type == 351 || (this.type >= 524 && this.type <= 527) || this.type == 530)
			{
				if (this.velocity.X < -2f || this.velocity.X > 2f)
				{
					if (this.velocity.Y == 0f)
					{
						this.velocity *= 0.8f;
					}
				}
				else if (this.velocity.X < 2f && this.direction == 1)
				{
					this.velocity.X = this.velocity.X + 0.07f;
					if (this.velocity.X > 2f)
					{
						this.velocity.X = 2f;
					}
				}
				else if (this.velocity.X > -2f && this.direction == -1)
				{
					this.velocity.X = this.velocity.X - 0.07f;
					if (this.velocity.X < -2f)
					{
						this.velocity.X = -2f;
					}
				}
			}
			else if (this.type == 109)
			{
				if (this.velocity.X < -2f || this.velocity.X > 2f)
				{
					if (this.velocity.Y == 0f)
					{
						this.velocity *= 0.8f;
					}
				}
				else if (this.velocity.X < 2f && this.direction == 1)
				{
					this.velocity.X = this.velocity.X + 0.04f;
					if (this.velocity.X > 2f)
					{
						this.velocity.X = 2f;
					}
				}
				else if (this.velocity.X > -2f && this.direction == -1)
				{
					this.velocity.X = this.velocity.X - 0.04f;
					if (this.velocity.X < -2f)
					{
						this.velocity.X = -2f;
					}
				}
			}
			else if (this.type == 21 || this.type == 26 || this.type == 31 || this.type == 294 || this.type == 295 || this.type == 296 || this.type == 47 || this.type == 73 || this.type == 140 || this.type == 164 || this.type == 239 || this.type == 167 || this.type == 168 || this.type == 185 || this.type == 198 || this.type == 201 || this.type == 202 || this.type == 203 || this.type == 217 || this.type == 218 || this.type == 219 || this.type == 226 || this.type == 181 || this.type == 254 || this.type == 338 || this.type == 339 || this.type == 340 || this.type == 342 || this.type == 385 || this.type == 389 || this.type == 462 || this.type == 463 || this.type == 466 || this.type == 464 || this.type == 469 || this.type == 470 || this.type == 480 || this.type == 482 || this.type == 425 || this.type == 429)
			{
				float num57 = 1.5f;
				if (this.type == 294)
				{
					num57 = 2f;
				}
				else if (this.type == 295)
				{
					num57 = 1.75f;
				}
				else if (this.type == 296)
				{
					num57 = 1.25f;
				}
				else if (this.type == 201)
				{
					num57 = 1.1f;
				}
				else if (this.type == 202)
				{
					num57 = 0.9f;
				}
				else if (this.type == 203)
				{
					num57 = 1.2f;
				}
				else if (this.type == 338)
				{
					num57 = 1.75f;
				}
				else if (this.type == 339)
				{
					num57 = 1.25f;
				}
				else if (this.type == 340)
				{
					num57 = 2f;
				}
				else if (this.type == 385)
				{
					num57 = 1.8f;
				}
				else if (this.type == 389)
				{
					num57 = 2.25f;
				}
				else if (this.type == 462)
				{
					num57 = 4f;
				}
				else if (this.type == 463)
				{
					num57 = 0.75f;
				}
				else if (this.type == 466)
				{
					num57 = 3.75f;
				}
				else if (this.type == 469)
				{
					num57 = 3.25f;
				}
				else if (this.type == 480)
				{
					num57 = 1.5f + (1f - (float)this.life / (float)this.lifeMax) * 2f;
				}
				else if (this.type == 425)
				{
					num57 = 6f;
				}
				else if (this.type == 429)
				{
					num57 = 4f;
				}
				if (this.type == 21 || this.type == 201 || this.type == 202 || this.type == 203 || this.type == 342)
				{
					num57 *= 1f + (1f - this.scale);
				}
				if (this.velocity.X < -num57 || this.velocity.X > num57)
				{
					if (this.velocity.Y == 0f)
					{
						this.velocity *= 0.8f;
					}
				}
				else if (this.velocity.X < num57 && this.direction == 1)
				{
					if (this.type == 466 && this.velocity.X < -2f)
					{
						this.velocity.X = this.velocity.X * 0.9f;
					}
					this.velocity.X = this.velocity.X + 0.07f;
					if (this.velocity.X > num57)
					{
						this.velocity.X = num57;
					}
				}
				else if (this.velocity.X > -num57 && this.direction == -1)
				{
					if (this.type == 466 && this.velocity.X > 2f)
					{
						this.velocity.X = this.velocity.X * 0.9f;
					}
					this.velocity.X = this.velocity.X - 0.07f;
					if (this.velocity.X < -num57)
					{
						this.velocity.X = -num57;
					}
				}
				if (this.velocity.Y == 0f && this.type == 462 && ((this.direction > 0 && this.velocity.X < 0f) || (this.direction < 0 && this.velocity.X > 0f)))
				{
					this.velocity.X = this.velocity.X * 0.9f;
				}
			}
			else if (this.type >= 269 && this.type <= 280)
			{
				float num58 = 1.5f;
				if (this.type == 269)
				{
					num58 = 2f;
				}
				if (this.type == 270)
				{
					num58 = 1f;
				}
				if (this.type == 271)
				{
					num58 = 1.5f;
				}
				if (this.type == 272)
				{
					num58 = 3f;
				}
				if (this.type == 273)
				{
					num58 = 1.25f;
				}
				if (this.type == 274)
				{
					num58 = 3f;
				}
				if (this.type == 275)
				{
					num58 = 3.25f;
				}
				if (this.type == 276)
				{
					num58 = 2f;
				}
				if (this.type == 277)
				{
					num58 = 2.75f;
				}
				if (this.type == 278)
				{
					num58 = 1.8f;
				}
				if (this.type == 279)
				{
					num58 = 1.3f;
				}
				if (this.type == 280)
				{
					num58 = 2.5f;
				}
				num58 *= 1f + (1f - this.scale);
				if (this.velocity.X < -num58 || this.velocity.X > num58)
				{
					if (this.velocity.Y == 0f)
					{
						this.velocity *= 0.8f;
					}
				}
				else if (this.velocity.X < num58 && this.direction == 1)
				{
					this.velocity.X = this.velocity.X + 0.07f;
					if (this.velocity.X > num58)
					{
						this.velocity.X = num58;
					}
				}
				else if (this.velocity.X > -num58 && this.direction == -1)
				{
					this.velocity.X = this.velocity.X - 0.07f;
					if (this.velocity.X < -num58)
					{
						this.velocity.X = -num58;
					}
				}
			}
			else if (this.type >= 305 && this.type <= 314)
			{
				float num59 = 1.5f;
				if (this.type == 305 || this.type == 310)
				{
					num59 = 2f;
				}
				if (this.type == 306 || this.type == 311)
				{
					num59 = 1.25f;
				}
				if (this.type == 307 || this.type == 312)
				{
					num59 = 2.25f;
				}
				if (this.type == 308 || this.type == 313)
				{
					num59 = 1.5f;
				}
				if (this.type == 309 || this.type == 314)
				{
					num59 = 1f;
				}
				if (this.type < 310)
				{
					if (this.velocity.Y == 0f)
					{
						this.velocity.X = this.velocity.X * 0.85f;
						if ((double)this.velocity.X > -0.3 && (double)this.velocity.X < 0.3)
						{
							this.velocity.Y = -7f;
							this.velocity.X = num59 * (float)this.direction;
						}
					}
					else if (this.spriteDirection == this.direction)
					{
						this.velocity.X = (this.velocity.X * 10f + num59 * (float)this.direction) / 11f;
					}
				}
				else if (this.velocity.X < -num59 || this.velocity.X > num59)
				{
					if (this.velocity.Y == 0f)
					{
						this.velocity *= 0.8f;
					}
				}
				else if (this.velocity.X < num59 && this.direction == 1)
				{
					this.velocity.X = this.velocity.X + 0.07f;
					if (this.velocity.X > num59)
					{
						this.velocity.X = num59;
					}
				}
				else if (this.velocity.X > -num59 && this.direction == -1)
				{
					this.velocity.X = this.velocity.X - 0.07f;
					if (this.velocity.X < -num59)
					{
						this.velocity.X = -num59;
					}
				}
			}
			else if (this.type == 67 || this.type == 220 || this.type == 428)
			{
				if (this.velocity.X < -0.5f || this.velocity.X > 0.5f)
				{
					if (this.velocity.Y == 0f)
					{
						this.velocity *= 0.7f;
					}
				}
				else if (this.velocity.X < 0.5f && this.direction == 1)
				{
					this.velocity.X = this.velocity.X + 0.03f;
					if (this.velocity.X > 0.5f)
					{
						this.velocity.X = 0.5f;
					}
				}
				else if (this.velocity.X > -0.5f && this.direction == -1)
				{
					this.velocity.X = this.velocity.X - 0.03f;
					if (this.velocity.X < -0.5f)
					{
						this.velocity.X = -0.5f;
					}
				}
			}
			else if (this.type == 78 || this.type == 79 || this.type == 80)
			{
				float num60 = 1f;
				float num61 = 0.05f;
				if (this.life < this.lifeMax / 2)
				{
					num60 = 2f;
					num61 = 0.1f;
				}
				if (this.type == 79)
				{
					num60 *= 1.5f;
				}
				if (this.velocity.X < -num60 || this.velocity.X > num60)
				{
					if (this.velocity.Y == 0f)
					{
						this.velocity *= 0.7f;
					}
				}
				else if (this.velocity.X < num60 && this.direction == 1)
				{
					this.velocity.X = this.velocity.X + num61;
					if (this.velocity.X > num60)
					{
						this.velocity.X = num60;
					}
				}
				else if (this.velocity.X > -num60 && this.direction == -1)
				{
					this.velocity.X = this.velocity.X - num61;
					if (this.velocity.X < -num60)
					{
						this.velocity.X = -num60;
					}
				}
			}
			else if (this.type == 287)
			{
				float num62 = 5f;
				float num63 = 0.2f;
				if (this.velocity.X < -num62 || this.velocity.X > num62)
				{
					if (this.velocity.Y == 0f)
					{
						this.velocity *= 0.7f;
					}
				}
				else if (this.velocity.X < num62 && this.direction == 1)
				{
					this.velocity.X = this.velocity.X + num63;
					if (this.velocity.X > num62)
					{
						this.velocity.X = num62;
					}
				}
				else if (this.velocity.X > -num62 && this.direction == -1)
				{
					this.velocity.X = this.velocity.X - num63;
					if (this.velocity.X < -num62)
					{
						this.velocity.X = -num62;
					}
				}
			}
			else if (this.type == 243)
			{
				float num64 = 1f;
				float num65 = 0.07f;
				num64 += (1f - (float)this.life / (float)this.lifeMax) * 1.5f;
				num65 += (1f - (float)this.life / (float)this.lifeMax) * 0.15f;
				if (this.velocity.X < -num64 || this.velocity.X > num64)
				{
					if (this.velocity.Y == 0f)
					{
						this.velocity *= 0.7f;
					}
				}
				else if (this.velocity.X < num64 && this.direction == 1)
				{
					this.velocity.X = this.velocity.X + num65;
					if (this.velocity.X > num64)
					{
						this.velocity.X = num64;
					}
				}
				else if (this.velocity.X > -num64 && this.direction == -1)
				{
					this.velocity.X = this.velocity.X - num65;
					if (this.velocity.X < -num64)
					{
						this.velocity.X = -num64;
					}
				}
			}
			else if (this.type == 251)
			{
				float num66 = 1f;
				float num67 = 0.08f;
				num66 += (1f - (float)this.life / (float)this.lifeMax) * 2f;
				num67 += (1f - (float)this.life / (float)this.lifeMax) * 0.2f;
				if (this.velocity.X < -num66 || this.velocity.X > num66)
				{
					if (this.velocity.Y == 0f)
					{
						this.velocity *= 0.7f;
					}
				}
				else if (this.velocity.X < num66 && this.direction == 1)
				{
					this.velocity.X = this.velocity.X + num67;
					if (this.velocity.X > num66)
					{
						this.velocity.X = num66;
					}
				}
				else if (this.velocity.X > -num66 && this.direction == -1)
				{
					this.velocity.X = this.velocity.X - num67;
					if (this.velocity.X < -num66)
					{
						this.velocity.X = -num66;
					}
				}
			}
			else if (this.type == 386)
			{
				if (this.ai[2] > 0f)
				{
					if (this.velocity.Y == 0f)
					{
						this.velocity.X = this.velocity.X * 0.8f;
					}
				}
				else
				{
					float num68 = 0.15f;
					float num69 = 1.5f;
					if (this.velocity.X < -num69 || this.velocity.X > num69)
					{
						if (this.velocity.Y == 0f)
						{
							this.velocity *= 0.7f;
						}
					}
					else if (this.velocity.X < num69 && this.direction == 1)
					{
						this.velocity.X = this.velocity.X + num68;
						if (this.velocity.X > num69)
						{
							this.velocity.X = num69;
						}
					}
					else if (this.velocity.X > -num69 && this.direction == -1)
					{
						this.velocity.X = this.velocity.X - num68;
						if (this.velocity.X < -num69)
						{
							this.velocity.X = -num69;
						}
					}
				}
			}
			else if (this.type == 460)
			{
				float num70 = 3f;
				float num71 = 0.1f;
				if (Math.Abs(this.velocity.X) > 2f)
				{
					num71 *= 0.8f;
				}
				if ((double)Math.Abs(this.velocity.X) > 2.5)
				{
					num71 *= 0.8f;
				}
				if (Math.Abs(this.velocity.X) > 3f)
				{
					num71 *= 0.8f;
				}
				if ((double)Math.Abs(this.velocity.X) > 3.5)
				{
					num71 *= 0.8f;
				}
				if (Math.Abs(this.velocity.X) > 4f)
				{
					num71 *= 0.8f;
				}
				if ((double)Math.Abs(this.velocity.X) > 4.5)
				{
					num71 *= 0.8f;
				}
				if (Math.Abs(this.velocity.X) > 5f)
				{
					num71 *= 0.8f;
				}
				if ((double)Math.Abs(this.velocity.X) > 5.5)
				{
					num71 *= 0.8f;
				}
				num70 += (1f - (float)this.life / (float)this.lifeMax) * 3f;
				if (this.velocity.X < -num70 || this.velocity.X > num70)
				{
					if (this.velocity.Y == 0f)
					{
						this.velocity *= 0.7f;
					}
				}
				else if (this.velocity.X < num70 && this.direction == 1)
				{
					if (this.velocity.X < 0f)
					{
						this.velocity.X = this.velocity.X * 0.93f;
					}
					this.velocity.X = this.velocity.X + num71;
					if (this.velocity.X > num70)
					{
						this.velocity.X = num70;
					}
				}
				else if (this.velocity.X > -num70 && this.direction == -1)
				{
					if (this.velocity.X > 0f)
					{
						this.velocity.X = this.velocity.X * 0.93f;
					}
					this.velocity.X = this.velocity.X - num71;
					if (this.velocity.X < -num70)
					{
						this.velocity.X = -num70;
					}
				}
			}
			else if (this.type == 508)
			{
				float num72 = 2.5f;
				float num73 = 40f;
				float num74 = Math.Abs(this.velocity.X);
				if (num74 > 2.75f)
				{
					num72 = 3.5f;
					num73 += 80f;
				}
				else if ((double)num74 > 2.25)
				{
					num72 = 3f;
					num73 += 60f;
				}
				if ((double)Math.Abs(this.velocity.Y) < 0.5)
				{
					if (this.velocity.X > 0f && this.direction < 0)
					{
						this.velocity *= 0.9f;
					}
					if (this.velocity.X < 0f && this.direction > 0)
					{
						this.velocity *= 0.9f;
					}
				}
				if (Math.Abs(this.velocity.Y) > NPC.gravity)
				{
					num73 *= 3f;
				}
				if (this.velocity.X <= 0f && this.direction < 0)
				{
					this.velocity.X = (this.velocity.X * num73 - num72) / (num73 + 1f);
				}
				else if (this.velocity.X >= 0f && this.direction > 0)
				{
					this.velocity.X = (this.velocity.X * num73 + num72) / (num73 + 1f);
				}
				else if (Math.Abs(base.Center.X - Main.player[this.target].Center.X) > 20f && Math.Abs(this.velocity.Y) <= NPC.gravity)
				{
					this.velocity.X = this.velocity.X * 0.99f;
					this.velocity.X = this.velocity.X + (float)this.direction * 0.025f;
				}
			}
			else if (this.type == 391 || this.type == 427 || this.type == 415 || this.type == 419 || this.type == 518 || this.type == 532)
			{
				float num75 = 5f;
				float num76 = 0.25f;
				float scaleFactor5 = 0.7f;
				if (this.type == 427)
				{
					num75 = 6f;
					num76 = 0.2f;
					scaleFactor5 = 0.8f;
				}
				else if (this.type == 415)
				{
					num75 = 4f;
					num76 = 0.1f;
					scaleFactor5 = 0.95f;
				}
				else if (this.type == 419)
				{
					num75 = 6f;
					num76 = 0.15f;
					scaleFactor5 = 0.85f;
				}
				else if (this.type == 518)
				{
					num75 = 5f;
					num76 = 0.1f;
					scaleFactor5 = 0.95f;
				}
				else if (this.type == 532)
				{
					num75 = 5f;
					num76 = 0.15f;
					scaleFactor5 = 0.98f;
				}
				if (this.velocity.X < -num75 || this.velocity.X > num75)
				{
					if (this.velocity.Y == 0f)
					{
						this.velocity *= scaleFactor5;
					}
				}
				else if (this.velocity.X < num75 && this.direction == 1)
				{
					this.velocity.X = this.velocity.X + num76;
					if (this.velocity.X > num75)
					{
						this.velocity.X = num75;
					}
				}
				else if (this.velocity.X > -num75 && this.direction == -1)
				{
					this.velocity.X = this.velocity.X - num76;
					if (this.velocity.X < -num75)
					{
						this.velocity.X = -num75;
					}
				}
			}
			else if ((this.type >= 430 && this.type <= 436) || this.type == 494 || this.type == 495)
			{
				if (this.ai[2] == 0f)
				{
					this.damage = this.defDamage;
					float num77 = 1f;
					num77 *= 1f + (1f - this.scale);
					if (this.velocity.X < -num77 || this.velocity.X > num77)
					{
						if (this.velocity.Y == 0f)
						{
							this.velocity *= 0.8f;
						}
					}
					else if (this.velocity.X < num77 && this.direction == 1)
					{
						this.velocity.X = this.velocity.X + 0.07f;
						if (this.velocity.X > num77)
						{
							this.velocity.X = num77;
						}
					}
					else if (this.velocity.X > -num77 && this.direction == -1)
					{
						this.velocity.X = this.velocity.X - 0.07f;
						if (this.velocity.X < -num77)
						{
							this.velocity.X = -num77;
						}
					}
					if (this.velocity.Y == 0f && (!Main.dayTime || (double)this.position.Y > Main.worldSurface * 16.0) && !Main.player[this.target].dead)
					{
						Vector2 vector12 = base.Center - Main.player[this.target].Center;
						int num78 = 50;
						if (this.type >= 494 && this.type <= 495)
						{
							num78 = 42;
						}
						if (vector12.Length() < (float)num78 && Collision.CanHit(base.Center, 1, 1, Main.player[this.target].Center, 1, 1))
						{
							this.velocity.X = this.velocity.X * 0.7f;
							this.ai[2] = 1f;
						}
					}
				}
				else
				{
					this.damage = (int)((double)this.defDamage * 1.5);
					this.ai[3] = 1f;
					this.velocity.X = this.velocity.X * 0.9f;
					if ((double)Math.Abs(this.velocity.X) < 0.1)
					{
						this.velocity.X = 0f;
					}
					this.ai[2] += 1f;
					if (this.ai[2] >= 20f || this.velocity.Y != 0f || (Main.dayTime && (double)this.position.Y < Main.worldSurface * 16.0))
					{
						this.ai[2] = 0f;
					}
				}
			}
			else if (this.type != 110 && this.type != 111 && this.type != 206 && this.type != 214 && this.type != 215 && this.type != 216 && this.type != 290 && this.type != 291 && this.type != 292 && this.type != 293 && this.type != 350 && this.type != 379 && this.type != 380 && this.type != 381 && this.type != 382 && (this.type < 449 || this.type > 452) && this.type != 468 && this.type != 481 && this.type != 411 && this.type != 409 && (this.type < 498 || this.type > 506) && this.type != 424 && this.type != 426 && this.type != 520)
			{
				float num79 = 1f;
				if (this.type == 186)
				{
					num79 = 1.1f;
				}
				if (this.type == 187)
				{
					num79 = 0.9f;
				}
				if (this.type == 188)
				{
					num79 = 1.2f;
				}
				if (this.type == 189)
				{
					num79 = 0.8f;
				}
				if (this.type == 132)
				{
					num79 = 0.95f;
				}
				if (this.type == 200)
				{
					num79 = 0.87f;
				}
				if (this.type == 223)
				{
					num79 = 1.05f;
				}
				if (this.type == 489)
				{
					float num80 = (Main.player[this.target].Center - base.Center).Length();
					num80 *= 0.0025f;
					if ((double)num80 > 1.5)
					{
						num80 = 1.5f;
					}
					if (Main.expertMode)
					{
						num79 = 3f - num80;
					}
					else
					{
						num79 = 2.5f - num80;
					}
					num79 *= 0.8f;
				}
				if (this.type == 489 || this.type == 3 || this.type == 132 || this.type == 186 || this.type == 187 || this.type == 188 || this.type == 189 || this.type == 200 || this.type == 223 || this.type == 331 || this.type == 332)
				{
					num79 *= 1f + (1f - this.scale);
				}
				if (this.velocity.X < -num79 || this.velocity.X > num79)
				{
					if (this.velocity.Y == 0f)
					{
						this.velocity *= 0.8f;
					}
				}
				else if (this.velocity.X < num79 && this.direction == 1)
				{
					this.velocity.X = this.velocity.X + 0.07f;
					if (this.velocity.X > num79)
					{
						this.velocity.X = num79;
					}
				}
				else if (this.velocity.X > -num79 && this.direction == -1)
				{
					this.velocity.X = this.velocity.X - 0.07f;
					if (this.velocity.X < -num79)
					{
						this.velocity.X = -num79;
					}
				}
			}
			if (this.type >= 277 && this.type <= 280)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.2f, 0.1f, 0f);
			}
			else if (this.type == 520)
			{
				Lighting.AddLight(base.Top + new Vector2(0f, 20f), 0.3f, 0.3f, 0.7f);
			}
			else if (this.type == 525)
			{
				Vector3 rgb = new Vector3(0.7f, 1f, 0.2f) * 0.5f;
				Lighting.AddLight(base.Top + new Vector2(0f, 15f), rgb);
			}
			else if (this.type == 526)
			{
				Vector3 rgb2 = new Vector3(1f, 1f, 0.5f) * 0.4f;
				Lighting.AddLight(base.Top + new Vector2(0f, 15f), rgb2);
			}
			else if (this.type == 527)
			{
				Vector3 rgb3 = new Vector3(0.6f, 0.3f, 1f) * 0.4f;
				Lighting.AddLight(base.Top + new Vector2(0f, 15f), rgb3);
			}
			else if (this.type == 415)
			{
				this.hide = false;
				for (int num81 = 0; num81 < 200; num81++)
				{
					if (Main.npc[num81].active && Main.npc[num81].type == 416 && Main.npc[num81].ai[0] == (float)this.whoAmI)
					{
						this.hide = true;
						break;
					}
				}
			}
			else if (this.type == 258)
			{
				if (this.velocity.Y != 0f)
				{
					this.TargetClosest(true);
					this.spriteDirection = this.direction;
					if (Main.player[this.target].Center.X < this.position.X && this.velocity.X > 0f)
					{
						this.velocity.X = this.velocity.X * 0.95f;
					}
					else if (Main.player[this.target].Center.X > this.position.X + (float)this.width && this.velocity.X < 0f)
					{
						this.velocity.X = this.velocity.X * 0.95f;
					}
					if (Main.player[this.target].Center.X < this.position.X && this.velocity.X > -5f)
					{
						this.velocity.X = this.velocity.X - 0.1f;
					}
					else if (Main.player[this.target].Center.X > this.position.X + (float)this.width && this.velocity.X < 5f)
					{
						this.velocity.X = this.velocity.X + 0.1f;
					}
				}
				else if (Main.player[this.target].Center.Y + 50f < this.position.Y && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
				{
					this.velocity.Y = -7f;
				}
			}
			else if (this.type == 425)
			{
				if (this.velocity.Y == 0f)
				{
					this.ai[2] = 0f;
				}
				if (this.velocity.Y != 0f && this.ai[2] == 1f)
				{
					this.TargetClosest(true);
					this.spriteDirection = -this.direction;
					if (Collision.CanHit(base.Center, 0, 0, Main.player[this.target].Center, 0, 0))
					{
						float num82 = Main.player[this.target].Center.X - (float)(this.direction * 400) - base.Center.X;
						float num83 = Main.player[this.target].Bottom.Y - base.Bottom.Y;
						if (num82 < 0f && this.velocity.X > 0f)
						{
							this.velocity.X = this.velocity.X * 0.9f;
						}
						else if (num82 > 0f && this.velocity.X < 0f)
						{
							this.velocity.X = this.velocity.X * 0.9f;
						}
						if (num82 < 0f && this.velocity.X > -5f)
						{
							this.velocity.X = this.velocity.X - 0.1f;
						}
						else if (num82 > 0f && this.velocity.X < 5f)
						{
							this.velocity.X = this.velocity.X + 0.1f;
						}
						if (this.velocity.X > 6f)
						{
							this.velocity.X = 6f;
						}
						if (this.velocity.X < -6f)
						{
							this.velocity.X = -6f;
						}
						if (num83 < -20f && this.velocity.Y > 0f)
						{
							this.velocity.Y = this.velocity.Y * 0.8f;
						}
						else if (num83 > 20f && this.velocity.Y < 0f)
						{
							this.velocity.Y = this.velocity.Y * 0.8f;
						}
						if (num83 < -20f && this.velocity.Y > -5f)
						{
							this.velocity.Y = this.velocity.Y - 0.3f;
						}
						else if (num83 > 20f && this.velocity.Y < 5f)
						{
							this.velocity.Y = this.velocity.Y + 0.3f;
						}
					}
					if (Main.rand.Next(3) == 0)
					{
						Vector2 position = base.Center + new Vector2((float)(this.direction * -14), -8f) - Vector2.One * 4f;
						Vector2 velocity = new Vector2((float)(this.direction * -6), 12f) * 0.2f + Utils.RandomVector2(Main.rand, -1f, 1f) * 0.1f;
						Dust dust6 = Main.dust[Dust.NewDust(position, 8, 8, 229, velocity.X, velocity.Y, 100, Color.Transparent, 1f + Main.rand.NextFloat() * 0.5f)];
						dust6.noGravity = true;
						dust6.velocity = velocity;
						dust6.customData = this;
					}
					for (int num84 = 0; num84 < 200; num84++)
					{
						if (num84 != this.whoAmI && Main.npc[num84].active && Main.npc[num84].type == this.type && Math.Abs(this.position.X - Main.npc[num84].position.X) + Math.Abs(this.position.Y - Main.npc[num84].position.Y) < (float)this.width)
						{
							if (this.position.X < Main.npc[num84].position.X)
							{
								this.velocity.X = this.velocity.X - 0.05f;
							}
							else
							{
								this.velocity.X = this.velocity.X + 0.05f;
							}
							if (this.position.Y < Main.npc[num84].position.Y)
							{
								this.velocity.Y = this.velocity.Y - 0.05f;
							}
							else
							{
								this.velocity.Y = this.velocity.Y + 0.05f;
							}
						}
					}
				}
				else if (Main.player[this.target].Center.Y + 100f < this.position.Y && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
				{
					this.velocity.Y = -5f;
					this.ai[2] = 1f;
				}
				if (Main.netMode != 1)
				{
					this.localAI[2] += 1f;
					if (this.localAI[2] >= (float)(360 + Main.rand.Next(360)) && base.Distance(Main.player[this.target].Center) < 400f && Math.Abs(base.DirectionTo(Main.player[this.target].Center).Y) < 0.5f && Collision.CanHitLine(base.Center, 0, 0, Main.player[this.target].Center, 0, 0))
					{
						this.localAI[2] = 0f;
						Vector2 vector13 = base.Center + new Vector2((float)(this.direction * 30), 2f);
						Vector2 vector14 = base.DirectionTo(Main.player[this.target].Center) * 7f;
						if (vector14.HasNaNs())
						{
							vector14 = new Vector2((float)(this.direction * 8), 0f);
						}
						int num85 = Main.expertMode ? 50 : 75;
						for (int num86 = 0; num86 < 4; num86++)
						{
							Vector2 vector15 = vector14 + Utils.RandomVector2(Main.rand, -0.8f, 0.8f);
							Projectile.NewProjectile(vector13.X, vector13.Y, vector15.X, vector15.Y, 577, num85, 1f, Main.myPlayer, 0f, 0f);
						}
					}
				}
			}
			else if (this.type == 427)
			{
				if (this.velocity.Y == 0f)
				{
					this.ai[2] = 0f;
					this.rotation = 0f;
				}
				else
				{
					this.rotation = this.velocity.X * 0.1f;
				}
				if (this.velocity.Y != 0f && this.ai[2] == 1f)
				{
					this.TargetClosest(true);
					this.spriteDirection = -this.direction;
					if (Collision.CanHit(base.Center, 0, 0, Main.player[this.target].Center, 0, 0))
					{
						float num87 = Main.player[this.target].Center.X - base.Center.X;
						float num88 = Main.player[this.target].Center.Y - base.Center.Y;
						if (num87 < 0f && this.velocity.X > 0f)
						{
							this.velocity.X = this.velocity.X * 0.98f;
						}
						else if (num87 > 0f && this.velocity.X < 0f)
						{
							this.velocity.X = this.velocity.X * 0.98f;
						}
						if (num87 < -20f && this.velocity.X > -6f)
						{
							this.velocity.X = this.velocity.X - 0.015f;
						}
						else if (num87 > 20f && this.velocity.X < 6f)
						{
							this.velocity.X = this.velocity.X + 0.015f;
						}
						if (this.velocity.X > 6f)
						{
							this.velocity.X = 6f;
						}
						if (this.velocity.X < -6f)
						{
							this.velocity.X = -6f;
						}
						if (num88 < -20f && this.velocity.Y > 0f)
						{
							this.velocity.Y = this.velocity.Y * 0.98f;
						}
						else if (num88 > 20f && this.velocity.Y < 0f)
						{
							this.velocity.Y = this.velocity.Y * 0.98f;
						}
						if (num88 < -20f && this.velocity.Y > -6f)
						{
							this.velocity.Y = this.velocity.Y - 0.15f;
						}
						else if (num88 > 20f && this.velocity.Y < 6f)
						{
							this.velocity.Y = this.velocity.Y + 0.15f;
						}
					}
					for (int num89 = 0; num89 < 200; num89++)
					{
						if (num89 != this.whoAmI && Main.npc[num89].active && Main.npc[num89].type == this.type && Math.Abs(this.position.X - Main.npc[num89].position.X) + Math.Abs(this.position.Y - Main.npc[num89].position.Y) < (float)this.width)
						{
							if (this.position.X < Main.npc[num89].position.X)
							{
								this.velocity.X = this.velocity.X - 0.05f;
							}
							else
							{
								this.velocity.X = this.velocity.X + 0.05f;
							}
							if (this.position.Y < Main.npc[num89].position.Y)
							{
								this.velocity.Y = this.velocity.Y - 0.05f;
							}
							else
							{
								this.velocity.Y = this.velocity.Y + 0.05f;
							}
						}
					}
				}
				else if (Main.player[this.target].Center.Y + 100f < this.position.Y && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
				{
					this.velocity.Y = -5f;
					this.ai[2] = 1f;
				}
			}
			else if (this.type == 426)
			{
				if (this.ai[1] > 0f && this.velocity.Y > 0f)
				{
					this.velocity.Y = this.velocity.Y * 0.85f;
					if (this.velocity.Y == 0f)
					{
						this.velocity.Y = -0.4f;
					}
				}
				if (this.velocity.Y != 0f)
				{
					this.TargetClosest(true);
					this.spriteDirection = this.direction;
					if (Collision.CanHit(base.Center, 0, 0, Main.player[this.target].Center, 0, 0))
					{
						float num90 = Main.player[this.target].Center.X - (float)(this.direction * 300) - base.Center.X;
						if (num90 < 40f && this.velocity.X > 0f)
						{
							this.velocity.X = this.velocity.X * 0.98f;
						}
						else if (num90 > 40f && this.velocity.X < 0f)
						{
							this.velocity.X = this.velocity.X * 0.98f;
						}
						if (num90 < 40f && this.velocity.X > -5f)
						{
							this.velocity.X = this.velocity.X - 0.2f;
						}
						else if (num90 > 40f && this.velocity.X < 5f)
						{
							this.velocity.X = this.velocity.X + 0.2f;
						}
						if (this.velocity.X > 6f)
						{
							this.velocity.X = 6f;
						}
						if (this.velocity.X < -6f)
						{
							this.velocity.X = -6f;
						}
					}
				}
				else if (Main.player[this.target].Center.Y + 100f < this.position.Y && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
				{
					this.velocity.Y = -6f;
				}
				for (int num91 = 0; num91 < 200; num91++)
				{
					if (num91 != this.whoAmI && Main.npc[num91].active && Main.npc[num91].type == this.type && Math.Abs(this.position.X - Main.npc[num91].position.X) + Math.Abs(this.position.Y - Main.npc[num91].position.Y) < (float)this.width)
					{
						if (this.position.X < Main.npc[num91].position.X)
						{
							this.velocity.X = this.velocity.X - 0.1f;
						}
						else
						{
							this.velocity.X = this.velocity.X + 0.1f;
						}
						if (this.position.Y < Main.npc[num91].position.Y)
						{
							this.velocity.Y = this.velocity.Y - 0.1f;
						}
						else
						{
							this.velocity.Y = this.velocity.Y + 0.1f;
						}
					}
				}
				if (Main.rand.Next(6) == 0 && this.ai[1] <= 20f)
				{
					Dust dust7 = Main.dust[Dust.NewDust(base.Center + new Vector2((float)((this.spriteDirection == 1) ? 8 : -20), -20f), 8, 8, 229, this.velocity.X, this.velocity.Y, 100, default(Color), 1f)];
					dust7.velocity = dust7.velocity / 4f + this.velocity / 2f;
					dust7.scale = 0.6f;
					dust7.noLight = true;
				}
				if (this.ai[1] >= 57f)
				{
					int num92 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						161,
						229
					});
					Dust dust8 = Main.dust[Dust.NewDust(base.Center + new Vector2((float)((this.spriteDirection == 1) ? 8 : -20), -20f), 8, 8, num92, this.velocity.X, this.velocity.Y, 100, default(Color), 1f)];
					dust8.velocity = dust8.velocity / 4f + base.DirectionTo(Main.player[this.target].Top);
					dust8.scale = 1.2f;
					dust8.noLight = true;
				}
				if (Main.rand.Next(6) == 0)
				{
					Dust dust9 = Main.dust[Dust.NewDust(base.Center, 2, 2, 229, 0f, 0f, 0, default(Color), 1f)];
					dust9.position = base.Center + new Vector2((float)((this.spriteDirection == 1) ? 26 : -26), 24f);
					dust9.velocity.X = 0f;
					if (dust9.velocity.Y < 0f)
					{
						dust9.velocity.Y = 0f;
					}
					dust9.noGravity = true;
					dust9.scale = 1f;
					dust9.noLight = true;
				}
			}
			else if (this.type == 185)
			{
				if (this.velocity.Y == 0f)
				{
					this.rotation = 0f;
					this.localAI[0] = 0f;
				}
				else if (this.localAI[0] == 1f)
				{
					this.rotation += this.velocity.X * 0.05f;
				}
			}
			else if (this.type == 428)
			{
				if (this.velocity.Y == 0f)
				{
					this.rotation = 0f;
				}
				else
				{
					this.rotation += this.velocity.X * 0.08f;
				}
			}
			if (this.type == 159 && Main.netMode != 1)
			{
				Vector2 vector16 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
				float num93 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector16.X;
				float num94 = Main.player[this.target].position.Y + (float)Main.player[this.target].height * 0.5f - vector16.Y;
				float num95 = (float)Math.Sqrt((double)(num93 * num93 + num94 * num94));
				if (num95 > 300f)
				{
					this.Transform(158);
				}
			}
			if (this.type == 164 && Main.netMode != 1 && this.velocity.Y == 0f)
			{
				int num96 = (int)base.Center.X / 16;
				int num97 = (int)base.Center.Y / 16;
				bool flag10 = false;
				for (int num98 = num96 - 1; num98 <= num96 + 1; num98++)
				{
					for (int num99 = num97 - 1; num99 <= num97 + 1; num99++)
					{
						if (Main.tile[num98, num99].wall > 0)
						{
							flag10 = true;
						}
					}
				}
				if (flag10)
				{
					this.Transform(165);
				}
			}
			if (this.type == 239 && Main.netMode != 1 && this.velocity.Y == 0f)
			{
				int num100 = (int)base.Center.X / 16;
				int num101 = (int)base.Center.Y / 16;
				bool flag11 = false;
				for (int num102 = num100 - 1; num102 <= num100 + 1; num102++)
				{
					for (int num103 = num101 - 1; num103 <= num101 + 1; num103++)
					{
						if (Main.tile[num102, num103].wall > 0)
						{
							flag11 = true;
						}
					}
				}
				if (flag11)
				{
					this.Transform(240);
				}
			}
			if (this.type == 530 && Main.netMode != 1 && this.velocity.Y == 0f)
			{
				int num104 = (int)base.Center.X / 16;
				int num105 = (int)base.Center.Y / 16;
				bool flag12 = false;
				for (int num106 = num104 - 1; num106 <= num104 + 1; num106++)
				{
					for (int num107 = num105 - 1; num107 <= num105 + 1; num107++)
					{
						if (Main.tile[num106, num107].wall > 0)
						{
							flag12 = true;
						}
					}
				}
				if (flag12)
				{
					this.Transform(531);
				}
			}
			if (Main.netMode != 1 && Main.expertMode && this.target >= 0 && (this.type == 163 || this.type == 238) && Collision.CanHit(base.Center, 1, 1, Main.player[this.target].Center, 1, 1))
			{
				this.localAI[0] += 1f;
				if (this.justHit)
				{
					this.localAI[0] -= (float)Main.rand.Next(20, 60);
					if (this.localAI[0] < 0f)
					{
						this.localAI[0] = 0f;
					}
				}
				if (this.localAI[0] > (float)Main.rand.Next(180, 900))
				{
					this.localAI[0] = 0f;
					Vector2 vector17 = Main.player[this.target].Center - base.Center;
					vector17.Normalize();
					vector17 *= 8f;
					Projectile.NewProjectile(base.Center.X, base.Center.Y, vector17.X, vector17.Y, 472, 18, 0f, Main.myPlayer, 0f, 0f);
				}
			}
			if (this.type == 163 && Main.netMode != 1 && this.velocity.Y == 0f)
			{
				int num108 = (int)base.Center.X / 16;
				int num109 = (int)base.Center.Y / 16;
				bool flag13 = false;
				for (int num110 = num108 - 1; num110 <= num108 + 1; num110++)
				{
					for (int num111 = num109 - 1; num111 <= num109 + 1; num111++)
					{
						if (Main.tile[num110, num111].wall > 0)
						{
							flag13 = true;
						}
					}
				}
				if (flag13)
				{
					this.Transform(238);
				}
			}
			if (this.type == 236 && Main.netMode != 1 && this.velocity.Y == 0f)
			{
				int num112 = (int)base.Center.X / 16;
				int num113 = (int)base.Center.Y / 16;
				bool flag14 = false;
				for (int num114 = num112 - 1; num114 <= num112 + 1; num114++)
				{
					for (int num115 = num113 - 1; num115 <= num113 + 1; num115++)
					{
						if (Main.tile[num114, num115].wall > 0)
						{
							flag14 = true;
						}
					}
				}
				if (flag14)
				{
					this.Transform(237);
				}
			}
			if (this.type == 243)
			{
				if (this.justHit && Main.rand.Next(3) == 0)
				{
					this.ai[2] -= (float)Main.rand.Next(30);
				}
				if (this.ai[2] < 0f)
				{
					this.ai[2] = 0f;
				}
				if (this.confused)
				{
					this.ai[2] = 0f;
				}
				this.ai[2] += 1f;
				float num116 = (float)Main.rand.Next(30, 900);
				num116 *= (float)this.life / (float)this.lifeMax;
				num116 += 30f;
				if (Main.netMode != 1 && this.ai[2] >= num116 && this.velocity.Y == 0f && !Main.player[this.target].dead && !Main.player[this.target].frozen && ((this.direction > 0 && base.Center.X < Main.player[this.target].Center.X) || (this.direction < 0 && base.Center.X > Main.player[this.target].Center.X)) && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
				{
					float num117 = 15f;
					Vector2 vector18 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + 20f);
					vector18.X += (float)(10 * this.direction);
					float num118 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector18.X;
					float num119 = Main.player[this.target].position.Y + (float)Main.player[this.target].height * 0.5f - vector18.Y;
					num118 += (float)Main.rand.Next(-40, 41);
					num119 += (float)Main.rand.Next(-40, 41);
					float num120 = (float)Math.Sqrt((double)(num118 * num118 + num119 * num119));
					this.netUpdate = true;
					num120 = num117 / num120;
					num118 *= num120;
					num119 *= num120;
					int num121 = 32;
					int num122 = 257;
					vector18.X += num118 * 3f;
					vector18.Y += num119 * 3f;
					Projectile.NewProjectile(vector18.X, vector18.Y, num118, num119, num122, num121, 0f, Main.myPlayer, 0f, 0f);
					this.ai[2] = 0f;
				}
			}
			if (this.type == 251)
			{
				if (this.justHit)
				{
					this.ai[2] -= (float)Main.rand.Next(30);
				}
				if (this.ai[2] < 0f)
				{
					this.ai[2] = 0f;
				}
				if (this.confused)
				{
					this.ai[2] = 0f;
				}
				this.ai[2] += 1f;
				float num123 = (float)Main.rand.Next(60, 1800);
				num123 *= (float)this.life / (float)this.lifeMax;
				num123 += 15f;
				if (Main.netMode != 1 && this.ai[2] >= num123 && this.velocity.Y == 0f && !Main.player[this.target].dead && !Main.player[this.target].frozen && ((this.direction > 0 && base.Center.X < Main.player[this.target].Center.X) || (this.direction < 0 && base.Center.X > Main.player[this.target].Center.X)) && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
				{
					float num124 = 15f;
					Vector2 vector19 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + 12f);
					vector19.X += (float)(6 * this.direction);
					float num125 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector19.X;
					float num126 = Main.player[this.target].position.Y + (float)Main.player[this.target].height * 0.5f - vector19.Y;
					num125 += (float)Main.rand.Next(-40, 41);
					num126 += (float)Main.rand.Next(-30, 0);
					float num127 = (float)Math.Sqrt((double)(num125 * num125 + num126 * num126));
					this.netUpdate = true;
					num127 = num124 / num127;
					num125 *= num127;
					num126 *= num127;
					int num128 = 30;
					int num129 = 83;
					vector19.X += num125 * 3f;
					vector19.Y += num126 * 3f;
					Projectile.NewProjectile(vector19.X, vector19.Y, num125, num126, num129, num128, 0f, Main.myPlayer, 0f, 0f);
					this.ai[2] = 0f;
				}
			}
			if (this.type == 386)
			{
				if (this.confused)
				{
					this.ai[2] = -60f;
				}
				else
				{
					if (this.ai[2] < 60f)
					{
						this.ai[2] += 1f;
					}
					if (this.ai[2] > 0f && NPC.CountNPCS(387) >= 4 * NPC.CountNPCS(386))
					{
						this.ai[2] = 0f;
					}
					if (this.justHit)
					{
						this.ai[2] = -30f;
					}
					if (this.ai[2] == 30f)
					{
						int num130 = (int)this.position.X / 16;
						int num131 = (int)this.position.Y / 16;
						int num132 = (int)this.position.X / 16;
						int num133 = (int)this.position.Y / 16;
						int num134 = 5;
						int num135 = 0;
						bool flag15 = false;
						int num136 = 2;
						int num137 = 0;
						while (!flag15 && num135 < 100)
						{
							num135++;
							int num138 = Main.rand.Next(num130 - num134, num130 + num134);
							int num139 = Main.rand.Next(num131 - num134, num131 + num134);
							for (int num140 = num139; num140 < num131 + num134; num140++)
							{
								if ((num140 < num131 - num136 || num140 > num131 + num136 || num138 < num130 - num136 || num138 > num130 + num136) && (num140 < num133 - num137 || num140 > num133 + num137 || num138 < num132 - num137 || num138 > num132 + num137) && Main.tile[num138, num140].nactive())
								{
									bool flag16 = true;
									if (Main.tile[num138, num140 - 1].lava())
									{
										flag16 = false;
									}
									if (flag16 && Main.tileSolid[(int)Main.tile[num138, num140].type] && !Collision.SolidTiles(num138 - 1, num138 + 1, num140 - 4, num140 - 1))
									{
										int num141 = NPC.NewNPC(num138 * 16 - this.width / 2, num140 * 16, 387, 0, 0f, 0f, 0f, 0f, 255);
										Main.npc[num141].position.Y = (float)(num140 * 16 - Main.npc[num141].height);
										flag15 = true;
										this.netUpdate = true;
										break;
									}
								}
							}
						}
					}
					if (this.ai[2] == 60f)
					{
						this.ai[2] = -120f;
					}
				}
			}
			if (this.type == 389)
			{
				if (this.confused)
				{
					this.ai[2] = -60f;
				}
				else
				{
					if (this.ai[2] < 20f)
					{
						this.ai[2] += 1f;
					}
					if (this.justHit)
					{
						this.ai[2] = -30f;
					}
					if (this.ai[2] == 20f && Main.netMode != 1)
					{
						this.ai[2] = (float)(-10 + Main.rand.Next(3) * -10);
						Projectile.NewProjectile(base.Center.X, base.Center.Y + 8f, (float)(this.direction * 6), 0f, 437, 25, 1f, Main.myPlayer, 0f, 0f);
					}
				}
			}
			if (this.type == 110 || this.type == 111 || this.type == 206 || this.type == 214 || this.type == 215 || this.type == 216 || this.type == 290 || this.type == 291 || this.type == 292 || this.type == 293 || this.type == 350 || this.type == 379 || this.type == 380 || this.type == 381 || this.type == 382 || (this.type >= 449 && this.type <= 452) || (this.type == 468 || this.type == 481 || this.type == 411 || this.type == 409 || (this.type >= 498 && this.type <= 506)) || this.type == 424 || this.type == 426 || this.type == 520)
			{
				bool flag17 = this.type == 381 || this.type == 382 || this.type == 520;
				bool flag18 = this.type == 426;
				bool flag19 = true;
				int num142 = -1;
				int num143 = -1;
				if (this.type == 411)
				{
					flag17 = true;
					num142 = 90;
					num143 = 90;
					if (this.ai[1] <= 150f)
					{
						flag19 = false;
					}
				}
				if (this.confused)
				{
					this.ai[2] = 0f;
				}
				else
				{
					if (this.ai[1] > 0f)
					{
						this.ai[1] -= 1f;
					}
					if (this.justHit)
					{
						this.ai[1] = 30f;
						this.ai[2] = 0f;
					}
					int num144 = 70;
					if (this.type == 379 || this.type == 380)
					{
						num144 = 80;
					}
					if (this.type == 381 || this.type == 382)
					{
						num144 = 80;
					}
					if (this.type == 520)
					{
						num144 = 15;
					}
					if (this.type == 350)
					{
						num144 = 110;
					}
					if (this.type == 291)
					{
						num144 = 200;
					}
					if (this.type == 292)
					{
						num144 = 120;
					}
					if (this.type == 293)
					{
						num144 = 90;
					}
					if (this.type == 111)
					{
						num144 = 180;
					}
					if (this.type == 206)
					{
						num144 = 50;
					}
					if (this.type == 481)
					{
						num144 = 100;
					}
					if (this.type == 214)
					{
						num144 = 40;
					}
					if (this.type == 215)
					{
						num144 = 80;
					}
					if (this.type == 290)
					{
						num144 = 30;
					}
					if (this.type == 411)
					{
						num144 = 300;
					}
					if (this.type == 409)
					{
						num144 = 60;
					}
					if (this.type == 424)
					{
						num144 = 180;
					}
					if (this.type == 426)
					{
						num144 = 60;
					}
					bool flag20 = false;
					if (this.type == 216)
					{
						if (this.localAI[2] >= 20f)
						{
							flag20 = true;
						}
						if (flag20)
						{
							num144 = 60;
						}
						else
						{
							num144 = 8;
						}
					}
					int num145 = num144 / 2;
					if (this.type == 424)
					{
						num145 = num144 - 1;
					}
					if (this.type == 426)
					{
						num145 = num144 - 1;
					}
					if (this.ai[2] > 0f)
					{
						if (flag19)
						{
							this.TargetClosest(true);
						}
						if (this.ai[1] == (float)num145)
						{
							if (this.type == 216)
							{
								this.localAI[2] += 1f;
							}
							float num146 = 11f;
							if (this.type == 111)
							{
								num146 = 9f;
							}
							if (this.type == 206)
							{
								num146 = 7f;
							}
							if (this.type == 290)
							{
								num146 = 9f;
							}
							if (this.type == 293)
							{
								num146 = 4f;
							}
							if (this.type == 214)
							{
								num146 = 14f;
							}
							if (this.type == 215)
							{
								num146 = 16f;
							}
							if (this.type == 382)
							{
								num146 = 7f;
							}
							if (this.type == 520)
							{
								num146 = 8f;
							}
							if (this.type == 409)
							{
								num146 = 4f;
							}
							if (this.type >= 449 && this.type <= 452)
							{
								num146 = 7f;
							}
							if (this.type == 481)
							{
								num146 = 8f;
							}
							if (this.type == 468)
							{
								num146 = 7.5f;
							}
							if (this.type == 411)
							{
								num146 = 1f;
							}
							if (this.type >= 498 && this.type <= 506)
							{
								num146 = 7f;
							}
							Vector2 value9 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
							if (this.type == 481)
							{
								value9.Y -= 14f;
							}
							if (this.type == 206)
							{
								value9.Y -= 10f;
							}
							if (this.type == 290)
							{
								value9.Y -= 10f;
							}
							if (this.type == 381 || this.type == 382)
							{
								value9.Y += 6f;
							}
							if (this.type == 520)
							{
								value9.Y = this.position.Y + 20f;
							}
							if (this.type >= 498 && this.type <= 506)
							{
								value9.Y -= 8f;
							}
							if (this.type == 426)
							{
								value9 += new Vector2((float)(this.spriteDirection * 2), -12f);
							}
							float num147 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - value9.X;
							float num148 = Math.Abs(num147) * 0.1f;
							if (this.type == 291 || this.type == 292)
							{
								num148 = 0f;
							}
							if (this.type == 215)
							{
								num148 = Math.Abs(num147) * 0.08f;
							}
							if (this.type == 214 || (this.type == 216 && !flag20))
							{
								num148 = 0f;
							}
							if (this.type == 381 || this.type == 382 || this.type == 520)
							{
								num148 = 0f;
							}
							if (this.type >= 449 && this.type <= 452)
							{
								num148 = Math.Abs(num147) * (float)Main.rand.Next(10, 50) * 0.01f;
							}
							if (this.type == 468)
							{
								num148 = Math.Abs(num147) * (float)Main.rand.Next(10, 50) * 0.01f;
							}
							if (this.type == 481)
							{
								num148 = Math.Abs(num147) * (float)Main.rand.Next(-10, 11) * 0.0035f;
							}
							if (this.type >= 498 && this.type <= 506)
							{
								num148 = Math.Abs(num147) * (float)Main.rand.Next(1, 11) * 0.0025f;
							}
							float num149 = Main.player[this.target].position.Y + (float)Main.player[this.target].height * 0.5f - value9.Y - num148;
							if (this.type == 291)
							{
								num147 += (float)Main.rand.Next(-40, 41) * 0.2f;
								num149 += (float)Main.rand.Next(-40, 41) * 0.2f;
							}
							else if (this.type == 381 || this.type == 382 || this.type == 520)
							{
								num147 += (float)Main.rand.Next(-100, 101) * 0.4f;
								num149 += (float)Main.rand.Next(-100, 101) * 0.4f;
								num147 *= (float)Main.rand.Next(85, 116) * 0.01f;
								num149 *= (float)Main.rand.Next(85, 116) * 0.01f;
								if (this.type == 520)
								{
									num147 += (float)Main.rand.Next(-100, 101) * 0.6f;
									num149 += (float)Main.rand.Next(-100, 101) * 0.6f;
									num147 *= (float)Main.rand.Next(85, 116) * 0.015f;
									num149 *= (float)Main.rand.Next(85, 116) * 0.015f;
								}
							}
							else if (this.type == 481)
							{
								num147 += (float)Main.rand.Next(-40, 41) * 0.4f;
								num149 += (float)Main.rand.Next(-40, 41) * 0.4f;
							}
							else if (this.type >= 498 && this.type <= 506)
							{
								num147 += (float)Main.rand.Next(-40, 41) * 0.3f;
								num149 += (float)Main.rand.Next(-40, 41) * 0.3f;
							}
							else if (this.type != 292)
							{
								num147 += (float)Main.rand.Next(-40, 41);
								num149 += (float)Main.rand.Next(-40, 41);
							}
							float num150 = (float)Math.Sqrt((double)(num147 * num147 + num149 * num149));
							this.netUpdate = true;
							num150 = num146 / num150;
							num147 *= num150;
							num149 *= num150;
							int num151 = 35;
							int num152 = 82;
							if (this.type == 111)
							{
								num151 = 11;
							}
							if (this.type == 206)
							{
								num151 = 37;
							}
							if (this.type == 379 || this.type == 380)
							{
								num151 = 40;
							}
							if (this.type == 350)
							{
								num151 = 45;
							}
							if (this.type == 468)
							{
								num151 = 50;
							}
							if (this.type == 111)
							{
								num152 = 81;
							}
							if (this.type == 379 || this.type == 380)
							{
								num152 = 81;
							}
							if (this.type == 381)
							{
								num152 = 436;
								num151 = 24;
							}
							if (this.type == 382)
							{
								num152 = 438;
								num151 = 30;
							}
							if (this.type == 520)
							{
								num152 = 592;
								num151 = 35;
							}
							if (this.type >= 449 && this.type <= 452)
							{
								num152 = 471;
								num151 = 20;
							}
							if (this.type >= 498 && this.type <= 506)
							{
								num152 = 572;
								num151 = 14;
							}
							if (this.type == 481)
							{
								num152 = 508;
								num151 = 18;
							}
							if (this.type == 206)
							{
								num152 = 177;
							}
							if (this.type == 468)
							{
								num152 = 501;
							}
							if (this.type == 411)
							{
								num152 = 537;
								num151 = (Main.expertMode ? 45 : 60);
							}
							if (this.type == 424)
							{
								num152 = 573;
								num151 = (Main.expertMode ? 45 : 60);
							}
							if (this.type == 426)
							{
								num152 = 581;
								num151 = (Main.expertMode ? 45 : 60);
							}
							if (this.type == 291)
							{
								num152 = 302;
								num151 = 100;
							}
							if (this.type == 290)
							{
								num152 = 300;
								num151 = 60;
							}
							if (this.type == 293)
							{
								num152 = 303;
								num151 = 60;
							}
							if (this.type == 214)
							{
								num152 = 180;
								num151 = 25;
							}
							if (this.type == 215)
							{
								num152 = 82;
								num151 = 40;
							}
							if (this.type == 292)
							{
								num151 = 50;
								num152 = 180;
							}
							if (this.type == 216)
							{
								num152 = 180;
								num151 = 30;
								if (flag20)
								{
									num151 = 100;
									num152 = 240;
									this.localAI[2] = 0f;
								}
							}
							value9.X += num147;
							value9.Y += num149;
							if (Main.expertMode && this.type == 290)
							{
								num151 = (int)((double)num151 * 0.75);
							}
							if (Main.expertMode && this.type >= 381 && this.type <= 392)
							{
								num151 = (int)((double)num151 * 0.8);
							}
							if (Main.netMode != 1)
							{
								if (this.type == 292)
								{
									for (int num153 = 0; num153 < 4; num153++)
									{
										num147 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - value9.X;
										num149 = Main.player[this.target].position.Y + (float)Main.player[this.target].height * 0.5f - value9.Y;
										num150 = (float)Math.Sqrt((double)(num147 * num147 + num149 * num149));
										num150 = 12f / num150;
										num147 += (float)Main.rand.Next(-40, 41);
										num149 += (float)Main.rand.Next(-40, 41);
										num147 *= num150;
										num149 *= num150;
										Projectile.NewProjectile(value9.X, value9.Y, num147, num149, num152, num151, 0f, Main.myPlayer, 0f, 0f);
									}
								}
								else if (this.type == 411)
								{
									Projectile.NewProjectile(value9.X, value9.Y, num147, num149, num152, num151, 0f, Main.myPlayer, 0f, (float)this.whoAmI);
								}
								else if (this.type == 424)
								{
									for (int num154 = 0; num154 < 4; num154++)
									{
										Projectile.NewProjectile(base.Center.X - (float)(this.spriteDirection * 4), base.Center.Y + 6f, (float)(-3 + 2 * num154) * 0.15f, (float)(-(float)Main.rand.Next(0, 3)) * 0.2f - 0.1f, num152, num151, 0f, Main.myPlayer, 0f, (float)this.whoAmI);
									}
								}
								else if (this.type == 409)
								{
									int num155 = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 410, this.whoAmI, 0f, 0f, 0f, 0f, 255);
									Main.npc[num155].velocity = new Vector2(num147, -6f + num149);
								}
								else
								{
									Projectile.NewProjectile(value9.X, value9.Y, num147, num149, num152, num151, 0f, Main.myPlayer, 0f, 0f);
								}
							}
							if (Math.Abs(num149) > Math.Abs(num147) * 2f)
							{
								if (num149 > 0f)
								{
									this.ai[2] = 1f;
								}
								else
								{
									this.ai[2] = 5f;
								}
							}
							else if (Math.Abs(num147) > Math.Abs(num149) * 2f)
							{
								this.ai[2] = 3f;
							}
							else if (num149 > 0f)
							{
								this.ai[2] = 2f;
							}
							else
							{
								this.ai[2] = 4f;
							}
						}
						if ((this.velocity.Y != 0f && !flag18) || this.ai[1] <= 0f)
						{
							this.ai[2] = 0f;
							this.ai[1] = 0f;
						}
						else if (!flag17 || (num142 != -1 && this.ai[1] >= (float)num142 && this.ai[1] < (float)(num142 + num143) && (!flag18 || this.velocity.Y == 0f)))
						{
							this.velocity.X = this.velocity.X * 0.9f;
							this.spriteDirection = this.direction;
						}
					}
					if (this.type == 468 && !Main.eclipse)
					{
						flag17 = true;
					}
					else if ((this.ai[2] <= 0f || flag17) && (this.velocity.Y == 0f || flag18) && this.ai[1] <= 0f && !Main.player[this.target].dead)
					{
						bool flag21 = Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height);
						if (this.type == 520)
						{
							flag21 = Collision.CanHitLine(base.Top + new Vector2(0f, 20f), 0, 0, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height);
						}
						if (Main.player[this.target].stealth == 0f && Main.player[this.target].itemAnimation == 0)
						{
							flag21 = false;
						}
						if (flag21)
						{
							float num156 = 10f;
							Vector2 vector20 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
							float num157 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector20.X;
							float num158 = Math.Abs(num157) * 0.1f;
							float num159 = Main.player[this.target].position.Y + (float)Main.player[this.target].height * 0.5f - vector20.Y - num158;
							num157 += (float)Main.rand.Next(-40, 41);
							num159 += (float)Main.rand.Next(-40, 41);
							float num160 = (float)Math.Sqrt((double)(num157 * num157 + num159 * num159));
							float num161 = 700f;
							if (this.type == 214)
							{
								num161 = 550f;
							}
							if (this.type == 215)
							{
								num161 = 800f;
							}
							if (this.type >= 498 && this.type <= 506)
							{
								num161 = 190f;
							}
							if (this.type >= 449 && this.type <= 452)
							{
								num161 = 200f;
							}
							if (this.type == 481)
							{
								num161 = 400f;
							}
							if (this.type == 468)
							{
								num161 = 400f;
							}
							if (num160 < num161)
							{
								this.netUpdate = true;
								this.velocity.X = this.velocity.X * 0.5f;
								num160 = num156 / num160;
								num157 *= num160;
								num159 *= num160;
								this.ai[2] = 3f;
								this.ai[1] = (float)num144;
								if (Math.Abs(num159) > Math.Abs(num157) * 2f)
								{
									if (num159 > 0f)
									{
										this.ai[2] = 1f;
									}
									else
									{
										this.ai[2] = 5f;
									}
								}
								else if (Math.Abs(num157) > Math.Abs(num159) * 2f)
								{
									this.ai[2] = 3f;
								}
								else if (num159 > 0f)
								{
									this.ai[2] = 2f;
								}
								else
								{
									this.ai[2] = 4f;
								}
							}
						}
					}
					if (this.ai[2] <= 0f || (flag17 && (num142 == -1 || this.ai[1] < (float)num142 || this.ai[1] >= (float)(num142 + num143))))
					{
						float num162 = 1f;
						float num163 = 0.07f;
						float scaleFactor6 = 0.8f;
						if (this.type == 214)
						{
							num162 = 2f;
							num163 = 0.09f;
						}
						else if (this.type == 215)
						{
							num162 = 1.5f;
							num163 = 0.08f;
						}
						else if (this.type == 381 || this.type == 382)
						{
							num162 = 2f;
							num163 = 0.5f;
						}
						else if (this.type == 520)
						{
							num162 = 4f;
							num163 = 1f;
							scaleFactor6 = 0.7f;
						}
						else if (this.type == 411)
						{
							num162 = 2f;
							num163 = 0.5f;
						}
						else if (this.type == 409)
						{
							num162 = 2f;
							num163 = 0.5f;
						}
						bool flag22 = false;
						if ((this.type == 381 || this.type == 382) && Vector2.Distance(base.Center, Main.player[this.target].Center) < 300f && Collision.CanHitLine(base.Center, 0, 0, Main.player[this.target].Center, 0, 0))
						{
							flag22 = true;
							this.ai[3] = 0f;
						}
						if (this.type == 520 && Vector2.Distance(base.Center, Main.player[this.target].Center) < 400f && Collision.CanHitLine(base.Center, 0, 0, Main.player[this.target].Center, 0, 0))
						{
							flag22 = true;
							this.ai[3] = 0f;
						}
						if (this.velocity.X < -num162 || this.velocity.X > num162 || flag22)
						{
							if (this.velocity.Y == 0f)
							{
								this.velocity *= scaleFactor6;
							}
						}
						else if (this.velocity.X < num162 && this.direction == 1)
						{
							this.velocity.X = this.velocity.X + num163;
							if (this.velocity.X > num162)
							{
								this.velocity.X = num162;
							}
						}
						else if (this.velocity.X > -num162 && this.direction == -1)
						{
							this.velocity.X = this.velocity.X - num163;
							if (this.velocity.X < -num162)
							{
								this.velocity.X = -num162;
							}
						}
					}
					if (this.type == 520)
					{
						this.localAI[2] += 1f;
						if (this.localAI[2] >= 6f)
						{
							this.localAI[2] = 0f;
							this.localAI[3] = Main.player[this.target].DirectionFrom(base.Top + new Vector2(0f, 20f)).ToRotation();
						}
					}
				}
			}
			if (this.type == 109 && Main.netMode != 1 && !Main.player[this.target].dead)
			{
				if (this.justHit)
				{
					this.ai[2] = 0f;
				}
				this.ai[2] += 1f;
				if (this.ai[2] > 450f)
				{
					Vector2 vector21 = new Vector2(this.position.X + (float)this.width * 0.5f - (float)(this.direction * 24), this.position.Y + 4f);
					int num164 = 3 * this.direction;
					int num165 = -5;
					int num166 = Projectile.NewProjectile(vector21.X, vector21.Y, (float)num164, (float)num165, 75, 0, 0f, Main.myPlayer, 0f, 0f);
					Main.projectile[num166].timeLeft = 300;
					this.ai[2] = 0f;
				}
			}
			bool flag23 = false;
			if (this.velocity.Y == 0f)
			{
				int num167 = (int)(this.position.Y + (float)this.height + 7f) / 16;
				int num168 = (int)this.position.X / 16;
				int num169 = (int)(this.position.X + (float)this.width) / 16;
				for (int num170 = num168; num170 <= num169; num170++)
				{
					if (Main.tile[num170, num167] == null)
					{
						return;
					}
					if (Main.tile[num170, num167].nactive() && Main.tileSolid[(int)Main.tile[num170, num167].type])
					{
						flag23 = true;
						break;
					}
				}
			}
			if (this.type == 428)
			{
				flag23 = false;
			}
			if (this.velocity.Y >= 0f)
			{
				int num171 = 0;
				if (this.velocity.X < 0f)
				{
					num171 = -1;
				}
				if (this.velocity.X > 0f)
				{
					num171 = 1;
				}
				Vector2 position2 = this.position;
				position2.X += this.velocity.X;
				int num172 = (int)((position2.X + (float)(this.width / 2) + (float)((this.width / 2 + 1) * num171)) / 16f);
				int num173 = (int)((position2.Y + (float)this.height - 1f) / 16f);
				if (Main.tile[num172, num173] == null)
				{
					Main.tile[num172, num173] = new Tile();
				}
				if (Main.tile[num172, num173 - 1] == null)
				{
					Main.tile[num172, num173 - 1] = new Tile();
				}
				if (Main.tile[num172, num173 - 2] == null)
				{
					Main.tile[num172, num173 - 2] = new Tile();
				}
				if (Main.tile[num172, num173 - 3] == null)
				{
					Main.tile[num172, num173 - 3] = new Tile();
				}
				if (Main.tile[num172, num173 + 1] == null)
				{
					Main.tile[num172, num173 + 1] = new Tile();
				}
				if (Main.tile[num172 - num171, num173 - 3] == null)
				{
					Main.tile[num172 - num171, num173 - 3] = new Tile();
				}
				if ((float)(num172 * 16) < position2.X + (float)this.width && (float)(num172 * 16 + 16) > position2.X && ((Main.tile[num172, num173].nactive() && !Main.tile[num172, num173].topSlope() && !Main.tile[num172, num173 - 1].topSlope() && Main.tileSolid[(int)Main.tile[num172, num173].type] && !Main.tileSolidTop[(int)Main.tile[num172, num173].type]) || (Main.tile[num172, num173 - 1].halfBrick() && Main.tile[num172, num173 - 1].nactive())) && (!Main.tile[num172, num173 - 1].nactive() || !Main.tileSolid[(int)Main.tile[num172, num173 - 1].type] || Main.tileSolidTop[(int)Main.tile[num172, num173 - 1].type] || (Main.tile[num172, num173 - 1].halfBrick() && (!Main.tile[num172, num173 - 4].nactive() || !Main.tileSolid[(int)Main.tile[num172, num173 - 4].type] || Main.tileSolidTop[(int)Main.tile[num172, num173 - 4].type]))) && (!Main.tile[num172, num173 - 2].nactive() || !Main.tileSolid[(int)Main.tile[num172, num173 - 2].type] || Main.tileSolidTop[(int)Main.tile[num172, num173 - 2].type]) && (!Main.tile[num172, num173 - 3].nactive() || !Main.tileSolid[(int)Main.tile[num172, num173 - 3].type] || Main.tileSolidTop[(int)Main.tile[num172, num173 - 3].type]) && (!Main.tile[num172 - num171, num173 - 3].nactive() || !Main.tileSolid[(int)Main.tile[num172 - num171, num173 - 3].type]))
				{
					float num174 = (float)(num173 * 16);
					if (Main.tile[num172, num173].halfBrick())
					{
						num174 += 8f;
					}
					if (Main.tile[num172, num173 - 1].halfBrick())
					{
						num174 -= 8f;
					}
					if (num174 < position2.Y + (float)this.height)
					{
						float num175 = position2.Y + (float)this.height - num174;
						float num176 = 16.1f;
						if (this.type == 163 || this.type == 164 || this.type == 236 || this.type == 239 || this.type == 530)
						{
							num176 += 8f;
						}
						if (num175 <= num176)
						{
							this.gfxOffY += this.position.Y + (float)this.height - num174;
							this.position.Y = num174 - (float)this.height;
							if (num175 < 9f)
							{
								this.stepSpeed = 1f;
							}
							else
							{
								this.stepSpeed = 2f;
							}
						}
					}
				}
			}
			if (flag23)
			{
				int num177 = (int)((this.position.X + (float)(this.width / 2) + (float)(15 * this.direction)) / 16f);
				int num178 = (int)((this.position.Y + (float)this.height - 15f) / 16f);
				if (this.type == 109 || this.type == 163 || this.type == 164 || this.type == 199 || this.type == 236 || this.type == 239 || this.type == 257 || this.type == 258 || this.type == 290 || this.type == 391 || this.type == 425 || this.type == 427 || this.type == 426 || this.type == 508 || this.type == 415 || this.type == 530 || this.type == 532)
				{
					num177 = (int)((this.position.X + (float)(this.width / 2) + (float)((this.width / 2 + 16) * this.direction)) / 16f);
				}
				if (Main.tile[num177, num178] == null)
				{
					Main.tile[num177, num178] = new Tile();
				}
				if (Main.tile[num177, num178 - 1] == null)
				{
					Main.tile[num177, num178 - 1] = new Tile();
				}
				if (Main.tile[num177, num178 - 2] == null)
				{
					Main.tile[num177, num178 - 2] = new Tile();
				}
				if (Main.tile[num177, num178 - 3] == null)
				{
					Main.tile[num177, num178 - 3] = new Tile();
				}
				if (Main.tile[num177, num178 + 1] == null)
				{
					Main.tile[num177, num178 + 1] = new Tile();
				}
				if (Main.tile[num177 + this.direction, num178 - 1] == null)
				{
					Main.tile[num177 + this.direction, num178 - 1] = new Tile();
				}
				if (Main.tile[num177 + this.direction, num178 + 1] == null)
				{
					Main.tile[num177 + this.direction, num178 + 1] = new Tile();
				}
				if (Main.tile[num177 - this.direction, num178 + 1] == null)
				{
					Main.tile[num177 - this.direction, num178 + 1] = new Tile();
				}
				Main.tile[num177, num178 + 1].halfBrick();
				if (Main.tile[num177, num178 - 1].nactive() && (Main.tile[num177, num178 - 1].type == 10 || Main.tile[num177, num178 - 1].type == 388) && flag6)
				{
					this.ai[2] += 1f;
					this.ai[3] = 0f;
					if (this.ai[2] >= 60f)
					{
						if (!Main.bloodMoon && (this.type == 3 || this.type == 331 || this.type == 332 || this.type == 132 || this.type == 161 || this.type == 186 || this.type == 187 || this.type == 188 || this.type == 189 || this.type == 200 || this.type == 223 || this.type == 320 || this.type == 321 || this.type == 319))
						{
							this.ai[1] = 0f;
						}
						this.velocity.X = 0.5f * (float)(-(float)this.direction);
						int num179 = 5;
						if (Main.tile[num177, num178 - 1].type == 388)
						{
							num179 = 2;
						}
						this.ai[1] += (float)num179;
						if (this.type == 27)
						{
							this.ai[1] += 1f;
						}
						if (this.type == 31 || this.type == 294 || this.type == 295 || this.type == 296)
						{
							this.ai[1] += 6f;
						}
						this.ai[2] = 0f;
						bool flag24 = false;
						if (this.ai[1] >= 10f)
						{
							flag24 = true;
							this.ai[1] = 10f;
						}
						if (this.type == 460)
						{
							flag24 = true;
						}
						WorldGen.KillTile(num177, num178 - 1, true, false, false);
						if ((Main.netMode != 1 || !flag24) && flag24 && Main.netMode != 1)
						{
							if (this.type == 26)
							{
								WorldGen.KillTile(num177, num178 - 1, false, false, false);
								if (Main.netMode == 2)
								{
									NetMessage.SendData(17, -1, -1, "", 0, (float)num177, (float)(num178 - 1), 0f, 0, 0, 0);
								}
							}
							else
							{
								if (Main.tile[num177, num178 - 1].type == 10)
								{
									bool flag25 = WorldGen.OpenDoor(num177, num178 - 1, this.direction);
									if (!flag25)
									{
										this.ai[3] = (float)num36;
										this.netUpdate = true;
									}
									if (Main.netMode == 2 && flag25)
									{
										NetMessage.SendData(19, -1, -1, "", 0, (float)num177, (float)(num178 - 1), (float)this.direction, 0, 0, 0);
									}
								}
								if (Main.tile[num177, num178 - 1].type == 388)
								{
									bool flag26 = WorldGen.ShiftTallGate(num177, num178 - 1, false);
									if (!flag26)
									{
										this.ai[3] = (float)num36;
										this.netUpdate = true;
									}
									if (Main.netMode == 2 && flag26)
									{
										NetMessage.SendData(19, -1, -1, "", 4, (float)num177, (float)(num178 - 1), 0f, 0, 0, 0);
									}
								}
							}
						}
					}
				}
				else
				{
					int num180 = this.spriteDirection;
					if (this.type == 425)
					{
						num180 *= -1;
					}
					if ((this.velocity.X < 0f && num180 == -1) || (this.velocity.X > 0f && num180 == 1))
					{
						if (this.height >= 32 && Main.tile[num177, num178 - 2].nactive() && Main.tileSolid[(int)Main.tile[num177, num178 - 2].type])
						{
							if (Main.tile[num177, num178 - 3].nactive() && Main.tileSolid[(int)Main.tile[num177, num178 - 3].type])
							{
								this.velocity.Y = -8f;
								this.netUpdate = true;
							}
							else
							{
								this.velocity.Y = -7f;
								this.netUpdate = true;
							}
						}
						else if (Main.tile[num177, num178 - 1].nactive() && Main.tileSolid[(int)Main.tile[num177, num178 - 1].type])
						{
							this.velocity.Y = -6f;
							this.netUpdate = true;
						}
						else if (this.position.Y + (float)this.height - (float)(num178 * 16) > 20f && Main.tile[num177, num178].nactive() && !Main.tile[num177, num178].topSlope() && Main.tileSolid[(int)Main.tile[num177, num178].type])
						{
							this.velocity.Y = -5f;
							this.netUpdate = true;
						}
						else if (this.directionY < 0 && this.type != 67 && (!Main.tile[num177, num178 + 1].nactive() || !Main.tileSolid[(int)Main.tile[num177, num178 + 1].type]) && (!Main.tile[num177 + this.direction, num178 + 1].nactive() || !Main.tileSolid[(int)Main.tile[num177 + this.direction, num178 + 1].type]))
						{
							this.velocity.Y = -8f;
							this.velocity.X = this.velocity.X * 1.5f;
							this.netUpdate = true;
						}
						else if (flag6)
						{
							this.ai[1] = 0f;
							this.ai[2] = 0f;
						}
						if (this.velocity.Y == 0f && flag4 && this.ai[3] == 1f)
						{
							this.velocity.Y = -5f;
						}
					}
					if ((this.type == 31 || this.type == 294 || this.type == 295 || this.type == 296 || this.type == 47 || this.type == 77 || this.type == 104 || this.type == 168 || this.type == 196 || this.type == 385 || this.type == 389 || this.type == 464 || this.type == 470 || (this.type >= 524 && this.type <= 527)) && this.velocity.Y == 0f && Math.Abs(this.position.X + (float)(this.width / 2) - (Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2))) < 100f && Math.Abs(this.position.Y + (float)(this.height / 2) - (Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2))) < 50f && ((this.direction > 0 && this.velocity.X >= 1f) || (this.direction < 0 && this.velocity.X <= -1f)))
					{
						this.velocity.X = this.velocity.X * 2f;
						if (this.velocity.X > 3f)
						{
							this.velocity.X = 3f;
						}
						if (this.velocity.X < -3f)
						{
							this.velocity.X = -3f;
						}
						this.velocity.Y = -4f;
						this.netUpdate = true;
					}
					if (this.type == 120 && this.velocity.Y < 0f)
					{
						this.velocity.Y = this.velocity.Y * 1.1f;
					}
					if (this.type == 287 && this.velocity.Y == 0f && Math.Abs(this.position.X + (float)(this.width / 2) - (Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2))) < 150f && Math.Abs(this.position.Y + (float)(this.height / 2) - (Main.player[this.target].position.Y + (float)(Main.player[this.target].height / 2))) < 50f && ((this.direction > 0 && this.velocity.X >= 1f) || (this.direction < 0 && this.velocity.X <= -1f)))
					{
						this.velocity.X = (float)(8 * this.direction);
						this.velocity.Y = -4f;
						this.netUpdate = true;
					}
					if (this.type == 287 && this.velocity.Y < 0f)
					{
						this.velocity.X = this.velocity.X * 1.2f;
						this.velocity.Y = this.velocity.Y * 1.1f;
					}
					if (this.type == 460 && this.velocity.Y < 0f)
					{
						this.velocity.X = this.velocity.X * 1.3f;
						this.velocity.Y = this.velocity.Y * 1.1f;
					}
				}
			}
			else if (flag6)
			{
				this.ai[1] = 0f;
				this.ai[2] = 0f;
			}
			if (Main.netMode != 1 && this.type == 120 && this.ai[3] >= (float)num36)
			{
				int num181 = (int)Main.player[this.target].position.X / 16;
				int num182 = (int)Main.player[this.target].position.Y / 16;
				int num183 = (int)this.position.X / 16;
				int num184 = (int)this.position.Y / 16;
				int num185 = 20;
				int num186 = 0;
				bool flag27 = false;
				if (Math.Abs(this.position.X - Main.player[this.target].position.X) + Math.Abs(this.position.Y - Main.player[this.target].position.Y) > 2000f)
				{
					num186 = 100;
					flag27 = true;
				}
				while (!flag27 && num186 < 100)
				{
					num186++;
					int num187 = Main.rand.Next(num181 - num185, num181 + num185);
					int num188 = Main.rand.Next(num182 - num185, num182 + num185);
					for (int num189 = num188; num189 < num182 + num185; num189++)
					{
						if ((num189 < num182 - 4 || num189 > num182 + 4 || num187 < num181 - 4 || num187 > num181 + 4) && (num189 < num184 - 1 || num189 > num184 + 1 || num187 < num183 - 1 || num187 > num183 + 1) && Main.tile[num187, num189].nactive())
						{
							bool flag28 = true;
							if (this.type == 32 && Main.tile[num187, num189 - 1].wall == 0)
							{
								flag28 = false;
							}
							else if (Main.tile[num187, num189 - 1].lava())
							{
								flag28 = false;
							}
							if (flag28 && Main.tileSolid[(int)Main.tile[num187, num189].type] && !Collision.SolidTiles(num187 - 1, num187 + 1, num189 - 4, num189 - 1))
							{
								this.position.X = (float)(num187 * 16 - this.width / 2);
								this.position.Y = (float)(num189 * 16 - this.height);
								this.netUpdate = true;
								this.ai[3] = -120f;
							}
						}
					}
				}
			}
		}

		private void AI_001_Slimes()
		{
			if (this.type == 1 && (this.ai[1] == 1f || this.ai[1] == 2f || this.ai[1] == 3f))
			{
				this.ai[1] = -1f;
			}
			if (this.type == 1 && this.ai[1] == 0f && Main.netMode != 1 && this.value > 0f)
			{
				this.ai[1] = -1f;
				if (Main.rand.Next(20) == 0)
				{
					int num = Main.rand.Next(4);
					if (num == 0)
					{
						num = Main.rand.Next(7);
						if (num == 0)
						{
							num = 290;
						}
						else if (num == 1)
						{
							num = 292;
						}
						else if (num == 2)
						{
							num = 296;
						}
						else if (num == 3)
						{
							num = 2322;
						}
						else if (Main.netMode != 0 && Main.rand.Next(2) == 0)
						{
							num = 2997;
						}
						else
						{
							num = 2350;
						}
					}
					else if (num == 1)
					{
						num = Main.rand.Next(4);
						if (num == 0)
						{
							num = 8;
						}
						else if (num == 1)
						{
							num = 166;
						}
						else if (num == 2)
						{
							num = 965;
						}
						else
						{
							num = 58;
						}
					}
					else if (num == 2)
					{
						if (Main.rand.Next(2) == 0)
						{
							num = Main.rand.Next(11, 15);
						}
						else
						{
							num = Main.rand.Next(699, 703);
						}
					}
					else
					{
						num = Main.rand.Next(3);
						if (num == 0)
						{
							num = 71;
						}
						else if (num == 1)
						{
							num = 72;
						}
						else
						{
							num = 73;
						}
					}
					this.ai[1] = (float)num;
					this.netUpdate = true;
				}
			}
			if (this.type == 244)
			{
				float num2 = (float)Main.DiscoR / 255f;
				float num3 = (float)Main.DiscoG / 255f;
				float num4 = (float)Main.DiscoB / 255f;
				num2 *= 1f;
				num3 *= 1f;
				num4 *= 1f;
				Lighting.AddLight((int)((this.position.X + (float)(this.width / 2)) / 16f), (int)((this.position.Y + (float)(this.height / 2)) / 16f), num2, num3, num4);
				this.color.R = (byte)Main.DiscoR;
				this.color.G = (byte)Main.DiscoG;
				this.color.B = (byte)Main.DiscoB;
				this.color.A = 100;
				this.alpha = 175;
			}
			bool flag = false;
			if (!Main.dayTime || this.life != this.lifeMax || (double)this.position.Y > Main.worldSurface * 16.0 || Main.slimeRain)
			{
				flag = true;
			}
			if (this.type == 81)
			{
				flag = true;
				if (Main.rand.Next(30) == 0)
				{
					int num5 = Dust.NewDust(this.position, this.width, this.height, 14, 0f, 0f, this.alpha, this.color, 1f);
					Main.dust[num5].velocity *= 0.3f;
				}
			}
			if ((this.type == 377 || this.type == 446) && this.target != 255 && !Main.player[this.target].dead && Vector2.Distance(base.Center, Main.player[this.target].Center) <= 200f)
			{
				flag = true;
			}
			if (this.type == 183)
			{
				flag = true;
			}
			if (this.type == 304)
			{
				flag = true;
			}
			if (this.type == 244)
			{
				flag = true;
				this.ai[0] += 2f;
			}
			if (this.type == 147 && Main.rand.Next(10) == 0)
			{
				int num6 = Dust.NewDust(this.position, this.width, this.height, 76, 0f, 0f, 0, default(Color), 1f);
				Main.dust[num6].noGravity = true;
				Main.dust[num6].velocity *= 0.1f;
			}
			if (this.type == 184)
			{
				if (Main.rand.Next(8) == 0)
				{
					int num7 = Dust.NewDust(this.position - this.velocity, this.width, this.height, 76, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num7].noGravity = true;
					Main.dust[num7].velocity *= 0.15f;
				}
				flag = true;
				if (this.localAI[0] > 0f)
				{
					this.localAI[0] -= 1f;
				}
				if (!this.wet && !Main.player[this.target].npcTypeNoAggro[this.type])
				{
					Vector2 vector = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
					float num8 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector.X;
					float num9 = Main.player[this.target].position.Y - vector.Y;
					float num10 = (float)Math.Sqrt((double)(num8 * num8 + num9 * num9));
					if (Main.expertMode && num10 < 120f && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height) && this.velocity.Y == 0f)
					{
						this.ai[0] = -40f;
						if (this.velocity.Y == 0f)
						{
							this.velocity.X = this.velocity.X * 0.9f;
						}
						if (Main.netMode != 1 && this.localAI[0] == 0f)
						{
							for (int i = 0; i < 5; i++)
							{
								Vector2 vector2 = new Vector2((float)(i - 2), -4f);
								vector2.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.005f;
								vector2.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.005f;
								vector2.Normalize();
								vector2 *= 4f + (float)Main.rand.Next(-50, 51) * 0.01f;
								Projectile.NewProjectile(vector.X, vector.Y, vector2.X, vector2.Y, 174, 9, 0f, Main.myPlayer, 0f, 0f);
								this.localAI[0] = 30f;
							}
						}
					}
					else if (num10 < 200f && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height) && this.velocity.Y == 0f)
					{
						this.ai[0] = -40f;
						if (this.velocity.Y == 0f)
						{
							this.velocity.X = this.velocity.X * 0.9f;
						}
						if (Main.netMode != 1 && this.localAI[0] == 0f)
						{
							num9 = Main.player[this.target].position.Y - vector.Y - (float)Main.rand.Next(0, 200);
							num10 = (float)Math.Sqrt((double)(num8 * num8 + num9 * num9));
							num10 = 4.5f / num10;
							num8 *= num10;
							num9 *= num10;
							this.localAI[0] = 50f;
							Projectile.NewProjectile(vector.X, vector.Y, num8, num9, 174, 9, 0f, Main.myPlayer, 0f, 0f);
						}
					}
				}
			}
			if (this.type == 535)
			{
				flag = true;
				if (this.localAI[0] > 0f)
				{
					this.localAI[0] -= 1f;
				}
				if (!this.wet && !Main.player[this.target].npcTypeNoAggro[this.type])
				{
					Vector2 vector3 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
					float num11 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector3.X;
					float num12 = Main.player[this.target].position.Y - vector3.Y;
					float num13 = (float)Math.Sqrt((double)(num11 * num11 + num12 * num12));
					if (Main.expertMode && num13 < 120f && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height) && this.velocity.Y == 0f)
					{
						this.ai[0] = -40f;
						if (this.velocity.Y == 0f)
						{
							this.velocity.X = this.velocity.X * 0.9f;
						}
						if (Main.netMode != 1 && this.localAI[0] == 0f)
						{
							for (int j = 0; j < 5; j++)
							{
								Vector2 vector4 = new Vector2((float)(j - 2), -4f);
								vector4.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.005f;
								vector4.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.005f;
								vector4.Normalize();
								vector4 *= 4f + (float)Main.rand.Next(-50, 51) * 0.01f;
								Projectile.NewProjectile(vector3.X, vector3.Y, vector4.X, vector4.Y, 605, 9, 0f, Main.myPlayer, 0f, 0f);
								this.localAI[0] = 30f;
							}
						}
					}
					else if (num13 < 200f && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height) && this.velocity.Y == 0f)
					{
						this.ai[0] = -40f;
						if (this.velocity.Y == 0f)
						{
							this.velocity.X = this.velocity.X * 0.9f;
						}
						if (Main.netMode != 1 && this.localAI[0] == 0f)
						{
							num12 = Main.player[this.target].position.Y - vector3.Y - (float)Main.rand.Next(0, 200);
							num13 = (float)Math.Sqrt((double)(num11 * num11 + num12 * num12));
							num13 = 4.5f / num13;
							num11 *= num13;
							num12 *= num13;
							this.localAI[0] = 50f;
							Projectile.NewProjectile(vector3.X, vector3.Y, num11, num12, 605, 9, 0f, Main.myPlayer, 0f, 0f);
						}
					}
				}
			}
			if (this.type == 204)
			{
				flag = true;
				if (this.localAI[0] > 0f)
				{
					this.localAI[0] -= 1f;
				}
				if (!this.wet && !Main.player[this.target].npcTypeNoAggro[this.type])
				{
					Vector2 vector5 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
					float num14 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector5.X;
					float num15 = Main.player[this.target].position.Y - vector5.Y;
					float num16 = (float)Math.Sqrt((double)(num14 * num14 + num15 * num15));
					if (Main.expertMode && num16 < 200f && Collision.CanHit(new Vector2(this.position.X, this.position.Y - 20f), this.width, this.height + 20, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height) && this.velocity.Y == 0f)
					{
						this.ai[0] = -40f;
						if (this.velocity.Y == 0f)
						{
							this.velocity.X = this.velocity.X * 0.9f;
						}
						if (Main.netMode != 1 && this.localAI[0] == 0f)
						{
							for (int k = 0; k < 5; k++)
							{
								Vector2 vector6 = new Vector2((float)(k - 2), -2f);
								vector6.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.02f;
								vector6.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.02f;
								vector6.Normalize();
								vector6 *= 3f + (float)Main.rand.Next(-50, 51) * 0.01f;
								Projectile.NewProjectile(vector5.X, vector5.Y, vector6.X, vector6.Y, 176, 13, 0f, Main.myPlayer, 0f, 0f);
								this.localAI[0] = 80f;
							}
						}
					}
					if (num16 < 400f && Collision.CanHit(new Vector2(this.position.X, this.position.Y - 20f), this.width, this.height + 20, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height) && this.velocity.Y == 0f)
					{
						this.ai[0] = -80f;
						if (this.velocity.Y == 0f)
						{
							this.velocity.X = this.velocity.X * 0.9f;
						}
						if (Main.netMode != 1 && this.localAI[0] == 0f)
						{
							num15 = Main.player[this.target].position.Y - vector5.Y - (float)Main.rand.Next(-30, 20);
							num15 -= num16 * 0.05f;
							num14 = Main.player[this.target].position.X - vector5.X - (float)Main.rand.Next(-20, 20);
							num16 = (float)Math.Sqrt((double)(num14 * num14 + num15 * num15));
							num16 = 7f / num16;
							num14 *= num16;
							num15 *= num16;
							this.localAI[0] = 65f;
							Projectile.NewProjectile(vector5.X, vector5.Y, num14, num15, 176, 13, 0f, Main.myPlayer, 0f, 0f);
						}
					}
				}
			}
			if (this.type == 377 || this.type == 446)
			{
				if (this.localAI[2] < 90f)
				{
					this.localAI[2] += 1f;
				}
				else
				{
					this.friendly = false;
				}
			}
			if (this.type == 59)
			{
				Lighting.AddLight((int)((this.position.X + (float)(this.width / 2)) / 16f), (int)((this.position.Y + (float)(this.height / 2)) / 16f), 1f, 0.3f, 0.1f);
				int num17 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 1.7f);
				Main.dust[num17].noGravity = true;
			}
			if (this.ai[2] > 1f)
			{
				this.ai[2] -= 1f;
			}
			if (this.wet)
			{
				if (this.collideY)
				{
					this.velocity.Y = -2f;
				}
				if (this.velocity.Y < 0f && this.ai[3] == this.position.X)
				{
					this.direction *= -1;
					this.ai[2] = 200f;
				}
				if (this.velocity.Y > 0f)
				{
					this.ai[3] = this.position.X;
				}
				if (this.type == 59)
				{
					if (this.velocity.Y > 2f)
					{
						this.velocity.Y = this.velocity.Y * 0.9f;
					}
					else if (this.directionY < 0)
					{
						this.velocity.Y = this.velocity.Y - 0.8f;
					}
					this.velocity.Y = this.velocity.Y - 0.5f;
					if (this.velocity.Y < -10f)
					{
						this.velocity.Y = -10f;
					}
				}
				else
				{
					if (this.velocity.Y > 2f)
					{
						this.velocity.Y = this.velocity.Y * 0.9f;
					}
					this.velocity.Y = this.velocity.Y - 0.5f;
					if (this.velocity.Y < -4f)
					{
						this.velocity.Y = -4f;
					}
				}
				if (this.ai[2] == 1f && flag)
				{
					this.TargetClosest(true);
				}
			}
			this.aiAction = 0;
			if (this.ai[2] == 0f)
			{
				this.ai[0] = -100f;
				this.ai[2] = 1f;
				this.TargetClosest(true);
			}
			if (this.velocity.Y == 0f)
			{
				if (this.collideY && this.oldVelocity.Y != 0f && Collision.SolidCollision(this.position, this.width, this.height))
				{
					this.position.X = this.position.X - (this.velocity.X + (float)this.direction);
				}
				if (this.ai[3] == this.position.X)
				{
					this.direction *= -1;
					this.ai[2] = 200f;
				}
				this.ai[3] = 0f;
				this.velocity.X = this.velocity.X * 0.8f;
				if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1)
				{
					this.velocity.X = 0f;
				}
				if (flag)
				{
					this.ai[0] += 1f;
				}
				this.ai[0] += 1f;
				if (this.type == 59)
				{
					this.ai[0] += 2f;
				}
				if (this.type == 71)
				{
					this.ai[0] += 3f;
				}
				if (this.type == 138)
				{
					this.ai[0] += 2f;
				}
				if (this.type == 183)
				{
					this.ai[0] += 1f;
				}
				if (this.type == 304)
				{
					float num18 = (float)((1 - this.life / this.lifeMax) * 10);
					this.ai[0] += num18;
				}
				if (this.type == 377 || this.type == 446)
				{
					this.ai[0] += 3f;
				}
				if (this.type == 81)
				{
					if (this.scale >= 0f)
					{
						this.ai[0] += 4f;
					}
					else
					{
						this.ai[0] += 1f;
					}
				}
				int num19 = 0;
				if (this.ai[0] >= 0f)
				{
					num19 = 1;
				}
				if (this.ai[0] >= -1000f && this.ai[0] <= -500f)
				{
					num19 = 2;
				}
				if (this.ai[0] >= -2000f && this.ai[0] <= -1500f)
				{
					num19 = 3;
				}
				if (num19 > 0)
				{
					this.netUpdate = true;
					if (flag && this.ai[2] == 1f)
					{
						this.TargetClosest(true);
					}
					if (num19 == 3)
					{
						this.velocity.Y = -8f;
						if (this.type == 59)
						{
							this.velocity.Y = this.velocity.Y - 2f;
						}
						this.velocity.X = this.velocity.X + (float)(3 * this.direction);
						if (this.type == 59)
						{
							this.velocity.X = this.velocity.X + 0.5f * (float)this.direction;
						}
						this.ai[0] = -200f;
						this.ai[3] = this.position.X;
					}
					else
					{
						this.velocity.Y = -6f;
						this.velocity.X = this.velocity.X + (float)(2 * this.direction);
						if (this.type == 59)
						{
							this.velocity.X = this.velocity.X + (float)(2 * this.direction);
						}
						this.ai[0] = -120f;
						if (num19 == 1)
						{
							this.ai[0] -= 1000f;
						}
						else
						{
							this.ai[0] -= 2000f;
						}
					}
					if (this.type == 141)
					{
						this.velocity.Y = this.velocity.Y * 1.3f;
						this.velocity.X = this.velocity.X * 1.2f;
					}
					if (this.type == 377 || this.type == 446)
					{
						this.velocity.Y = this.velocity.Y * 0.9f;
						this.velocity.X = this.velocity.X * 0.6f;
						if (flag)
						{
							this.direction = -this.direction;
							this.velocity.X = this.velocity.X * -1f;
							return;
						}
					}
				}
				else if (this.ai[0] >= -30f)
				{
					this.aiAction = 1;
					return;
				}
			}
			else if (this.target < 255 && ((this.direction == 1 && this.velocity.X < 3f) || (this.direction == -1 && this.velocity.X > -3f)))
			{
				if (this.collideX && Math.Abs(this.velocity.X) == 0.2f)
				{
					this.position.X = this.position.X - 1.4f * (float)this.direction;
				}
				if (this.collideY && this.oldVelocity.Y != 0f && Collision.SolidCollision(this.position, this.width, this.height))
				{
					this.position.X = this.position.X - (this.velocity.X + (float)this.direction);
				}
				if ((this.direction == -1 && (double)this.velocity.X < 0.01) || (this.direction == 1 && (double)this.velocity.X > -0.01))
				{
					this.velocity.X = this.velocity.X + 0.2f * (float)this.direction;
					return;
				}
				this.velocity.X = this.velocity.X * 0.93f;
			}
		}

		private void AI_110_Betsy()
		{
			NPCUtils.TargetClosestBetsy(this, false, null);
			NPCAimedTarget targetData = this.GetTargetData(true);
			int num = -1;
			float num2 = 1f;
			int num3 = 35;
			int num4 = 35;
			float num5 = 10f;
			float num6 = 0.45f;
			float scaleFactor = 7.5f;
			float num7 = 30f;
			float num8 = 30f;
			float scaleFactor2 = 23f;
			float num9 = 600f;
			float num10 = 12f;
			float num11 = 40f;
			float num12 = 80f;
			float num13 = num11 + num12;
			float num14 = 1500f;
			float num15 = 60f;
			float scaleFactor3 = 13f;
			float amount = 0.0333333351f;
			float scaleFactor4 = 12f;
			int num16 = 10;
			int num17 = 6 * num16;
			float num18 = 60f;
			float num19 = num15 + (float)num17 + num18;
			float num20 = 60f;
			float num21 = 1f;
			float num22 = 6.28318548f * (num21 / num20);
			float num23 = 0.1f;
			float scaleFactor5 = 32f;
			float num24 = 90f;
			float num25 = 20f;
			float arg_F9_0 = this.ai[0];
			if (this.ai[0] == 0f)
			{
				if ((this.ai[1] += 1f) >= num5)
				{
					this.ai[1] = 0f;
					this.ai[0] = 1f;
					this.ai[2] = 0f;
					this.netUpdate = true;
				}
			}
			else if (this.ai[0] == 1f)
			{
				if (this.ai[2] == 0f)
				{
					this.ai[2] = (float)((base.Center.X < targetData.Center.X) ? 1 : -1);
				}
				Vector2 destination = targetData.Center + new Vector2(-this.ai[2] * 300f, -200f);
				Vector2 desiredVelocity = base.DirectionTo(destination) * scaleFactor;
				this.SimpleFlyMovement(desiredVelocity, num6);
				int num26 = (base.Center.X < targetData.Center.X) ? 1 : -1;
				this.direction = (this.spriteDirection = num26);
				if ((this.ai[1] += 1f) >= num7)
				{
					int num27 = 1;
					if (this.ai[3] == 5f && Main.rand.Next(3) == 0)
					{
						this.ai[3] += 1f;
					}
					switch ((int)this.ai[3])
					{
					case 0:
					case 1:
					case 3:
						num27 = 2;
						break;
					case 2:
						num27 = 3;
						break;
					case 4:
						num27 = 4;
						break;
					case 5:
						num27 = 5;
						break;
					case 6:
						num27 = 3;
						break;
					case 7:
						num27 = 6;
						break;
					}
					this.ai[0] = (float)num27;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] += 1f;
					this.netUpdate = true;
					if (this.ai[3] >= 8f)
					{
						this.ai[3] = 0f;
					}
					switch (num27)
					{
					case 2:
					{
						Vector2 v = base.DirectionTo(targetData.Center);
						this.spriteDirection = ((v.X > 0f) ? 1 : -1);
						this.rotation = v.ToRotation();
						if (this.spriteDirection == -1)
						{
							this.rotation += 3.14159274f;
						}
						this.velocity = v * scaleFactor2;
						break;
					}
					case 3:
					{
						Vector2 vector = new Vector2((float)((targetData.Center.X > base.Center.X) ? 1 : -1), 0f);
						this.spriteDirection = ((vector.X > 0f) ? 1 : -1);
						this.velocity = vector * -2f;
						break;
					}
					case 5:
					{
						Vector2 v2 = base.DirectionTo(targetData.Center);
						this.spriteDirection = ((v2.X > 0f) ? 1 : -1);
						this.rotation = v2.ToRotation();
						if (this.spriteDirection == -1)
						{
							this.rotation += 3.14159274f;
						}
						this.velocity = v2 * scaleFactor5;
						break;
					}
					}
				}
			}
			else if (this.ai[0] == 2f)
			{
				if (this.ai[1] == 0f)
				{
					Main.PlayTrackedSound(SoundID.DD2_BetsyWindAttack, base.Center);
				}
				if ((this.ai[1] += 1f) >= num8)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
				}
			}
			else if (this.ai[0] == 3f)
			{
				ActiveSound activeSound = Main.GetActiveSound(SlotId.FromFloat(this.localAI[2]));
				if (activeSound != null)
				{
					activeSound.Position = base.Center;
				}
				this.ai[1] += 1f;
				int num28 = (base.Center.X < targetData.Center.X) ? 1 : -1;
				this.ai[2] = (float)num28;
				if (this.ai[1] < num11)
				{
					Vector2 vector2 = targetData.Center + new Vector2((float)num28 * -num9, -250f);
					Vector2 value = base.DirectionTo(vector2) * num10;
					if (base.Distance(vector2) < num10)
					{
						base.Center = vector2;
					}
					else
					{
						this.position += value;
					}
					if (Vector2.Distance(vector2, base.Center) < 16f)
					{
						this.ai[1] = num11 - 1f;
					}
					num2 = 1.5f;
				}
				if (this.ai[1] == num11)
				{
					int num29 = (targetData.Center.X > base.Center.X) ? 1 : -1;
					this.velocity = new Vector2((float)num29, 0f) * 10f;
					this.direction = (this.spriteDirection = num29);
					if (Main.netMode != 1)
					{
						Projectile.NewProjectile(base.Center, this.velocity, 687, num3, 0f, Main.myPlayer, 0f, (float)this.whoAmI);
					}
					this.localAI[2] = Main.PlayTrackedSound(SoundID.DD2_BetsyFlameBreath, base.Center).ToFloat();
				}
				if (this.ai[1] >= num11)
				{
					num2 = 1.5f;
					if (Math.Abs(targetData.Center.X - base.Center.X) > 550f && Math.Abs(this.velocity.X) < 20f)
					{
						this.velocity.X = this.velocity.X + (float)Math.Sign(this.velocity.X) * 0.5f;
					}
				}
				if (this.ai[1] >= num13)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
				}
			}
			else if (this.ai[0] == 4f)
			{
				int num30 = (base.Center.X < targetData.Center.X) ? 1 : -1;
				this.ai[2] = (float)num30;
				if (this.ai[1] < num15)
				{
					Vector2 vector3 = targetData.Center + new Vector2((float)num30 * -num14, -350f);
					Vector2 value2 = base.DirectionTo(vector3) * scaleFactor3;
					this.velocity = Vector2.Lerp(this.velocity, value2, amount);
					int num31 = (base.Center.X < targetData.Center.X) ? 1 : -1;
					this.direction = (this.spriteDirection = num31);
					if (Vector2.Distance(vector3, base.Center) < 16f)
					{
						this.ai[1] = num15 - 1f;
					}
					num2 = 1.5f;
				}
				else if (this.ai[1] == num15)
				{
					Vector2 v3 = base.DirectionTo(targetData.Center);
					v3.Y *= 0.25f;
					v3 = v3.SafeNormalize(Vector2.UnitX * (float)this.direction);
					this.spriteDirection = ((v3.X > 0f) ? 1 : -1);
					this.rotation = v3.ToRotation();
					if (this.spriteDirection == -1)
					{
						this.rotation += 3.14159274f;
					}
					this.velocity = v3 * scaleFactor4;
				}
				else
				{
					this.position.X = this.position.X + base.DirectionTo(targetData.Center).X * 7f;
					this.position.Y = this.position.Y + base.DirectionTo(targetData.Center + new Vector2(0f, -400f)).Y * 6f;
					if (this.ai[1] <= num19 - num18)
					{
						num2 = 1.5f;
					}
					float num32 = 30f;
					Vector2 position = base.Center + new Vector2((110f + num32) * (float)this.direction, 20f).RotatedBy((double)this.rotation, default(Vector2));
					int num33 = (int)(this.ai[1] - num15 + 1f);
					if (num33 <= num17 && num33 % num16 == 0 && Main.netMode != 1)
					{
						Projectile.NewProjectile(position, this.velocity, 686, num4, 0f, Main.myPlayer, 0f, 0f);
					}
				}
				if (this.ai[1] > num19 - num18)
				{
					this.velocity.Y = this.velocity.Y - 0.1f;
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= num19)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
				}
			}
			else if (this.ai[0] == 5f)
			{
				this.velocity = this.velocity.RotatedBy((double)(-(double)num22 * (float)this.direction), default(Vector2));
				this.position.Y = this.position.Y - num23;
				this.position += base.DirectionTo(targetData.Center) * 10f;
				this.rotation -= num22 * (float)this.direction;
				num2 *= 0.7f;
				if (this.ai[1] == 1f)
				{
					Main.PlayTrackedSound(SoundID.DD2_BetsyFlyingCircleAttack, base.Center);
				}
				if ((this.ai[1] += 1f) >= num20)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.velocity /= 2f;
				}
			}
			else if (this.ai[0] == 6f)
			{
				if (this.ai[1] == 0f)
				{
					Vector2 destination2 = targetData.Center + new Vector2(0f, -200f);
					Vector2 desiredVelocity2 = base.DirectionTo(destination2) * scaleFactor * 2f;
					this.SimpleFlyMovement(desiredVelocity2, num6 * 2f);
					int num34 = (base.Center.X < targetData.Center.X) ? 1 : -1;
					this.direction = (this.spriteDirection = num34);
					this.ai[2] += 1f;
					if (base.Distance(targetData.Center) < 350f || this.ai[2] >= 180f)
					{
						this.ai[1] = 1f;
						this.netUpdate = true;
					}
				}
				else
				{
					if (this.ai[1] == 1f)
					{
						Main.PlayTrackedSound(SoundID.DD2_BetsyScream);
					}
					if (this.ai[1] < num25)
					{
						this.velocity *= 0.95f;
					}
					else
					{
						this.velocity *= 0.98f;
					}
					if (this.ai[1] == num25)
					{
						if (this.velocity.Y > 0f)
						{
							this.velocity.Y = this.velocity.Y / 3f;
						}
						this.velocity.Y = this.velocity.Y - 3f;
					}
					num2 *= 0.85f;
					bool flag = this.ai[1] == 20f || this.ai[1] == 25f || this.ai[1] == 30f;
					if (flag)
					{
						Point point = base.Center.ToTileCoordinates();
						int num35 = 30;
						int num36 = 35;
						int num37 = 4;
						for (int i = point.X - num35; i <= point.X + num35; i++)
						{
							bool flag2 = false;
							for (int j = point.Y - num36 / 3; j < point.Y + num36; j++)
							{
								Tile tileSafely = Framing.GetTileSafely(i, j);
								bool flag3 = tileSafely.active() && Main.tileSolid[(int)tileSafely.type] && !Main.tileFrameImportant[(int)tileSafely.type];
								if (flag2 && flag3)
								{
									int num38 = WorldGen.KillTile_GetTileDustAmount(true, tileSafely);
									for (int k = 0; k < num38; k++)
									{
										Dust dust = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
										Dust expr_E42_cp_0 = dust;
										expr_E42_cp_0.velocity.Y = expr_E42_cp_0.velocity.Y - (3f + (float)num37 * 1.5f);
										Dust expr_E64_cp_0 = dust;
										expr_E64_cp_0.velocity.Y = expr_E64_cp_0.velocity.Y * Main.rand.NextFloat();
										dust.scale += (float)num37 * 0.03f;
									}
									for (int l = 0; l < num38 - 1; l++)
									{
										Dust dust2 = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
										Dust expr_EBC_cp_0 = dust2;
										expr_EBC_cp_0.velocity.Y = expr_EBC_cp_0.velocity.Y - (1f + (float)num37);
										Dust expr_ED8_cp_0 = dust2;
										expr_ED8_cp_0.velocity.Y = expr_ED8_cp_0.velocity.Y * Main.rand.NextFloat();
									}
									if (num38 > 0 && Main.rand.Next(3) != 0)
									{
										float num39 = (float)(Math.Abs(point.X - i) / (num35 / 2));
										Gore gore = Gore.NewGoreDirect(this.position, Vector2.Zero, 61 + Main.rand.Next(3), 1f - (float)num37 * 0.15f + num39 * 0.5f);
										Gore expr_F6A_cp_0 = gore;
										expr_F6A_cp_0.velocity.Y = expr_F6A_cp_0.velocity.Y - (0.1f + (float)num37 * 0.5f + num39 * (float)num37 * 1f);
										Gore expr_F99_cp_0 = gore;
										expr_F99_cp_0.velocity.Y = expr_F99_cp_0.velocity.Y * Main.rand.NextFloat();
										gore.position = new Vector2((float)(i * 16 + 20), (float)(j * 16 + 20));
									}
								}
								flag2 = !flag3;
							}
						}
					}
					bool flag4 = this.ai[1] == 20f || this.ai[1] == 45f || this.ai[1] == 70f;
					if (NPC.CountNPCS(560) > 4)
					{
						flag4 = false;
					}
					if (flag4 && Main.netMode != 1)
					{
						for (int m = 0; m < 1; m++)
						{
							Vector2 vector4 = base.Center + (6.28318548f * Main.rand.NextFloat()).ToRotationVector2() * new Vector2(2f, 1f) * 300f * (0.6f + Main.rand.NextFloat() * 0.4f);
							if (Vector2.Distance(vector4, targetData.Center) > 100f)
							{
								Point point2 = vector4.ToPoint();
								NPC.NewNPC(point2.X, point2.Y, 560, this.whoAmI, 0f, 0f, 0f, 0f, 255);
								Main.PlayTrackedSound(SoundID.DD2_BetsySummon, vector4);
							}
						}
						List<NPC> list = new List<NPC>();
						for (int n = 0; n < 200; n++)
						{
							NPC nPC = Main.npc[n];
							if (nPC.active && nPC.type == 549)
							{
								list.Add(nPC);
							}
						}
						if (list.Count > 0)
						{
							for (int num40 = 0; num40 < 3; num40++)
							{
								NPC nPC2 = list[Main.rand.Next(list.Count)];
								Point point3 = nPC2.Center.ToPoint();
								NPC.NewNPC(point3.X, point3.Y, 560, 0, 0f, 0f, 0f, 0f, 255);
								Main.PlayTrackedSound(SoundID.DD2_BetsySummon, nPC2.Center);
							}
						}
					}
					this.ai[1] += 1f;
				}
				if (this.ai[1] >= num24)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
				}
			}
			this.localAI[0] += num2;
			if (this.localAI[0] >= 36f)
			{
				this.localAI[0] = 0f;
			}
			if (num != -1)
			{
				this.localAI[0] = (float)(num * 4);
			}
			if ((this.localAI[1] += 1f) >= 60f)
			{
				this.localAI[1] = 0f;
			}
			float num41 = base.DirectionTo(targetData.Center).ToRotation();
			float num42 = 0.04f;
			switch ((int)this.ai[0])
			{
			case 2:
			case 5:
				num42 = 0f;
				break;
			case 3:
				num42 = 0.01f;
				num41 = 0f;
				if (this.spriteDirection == -1)
				{
					num41 -= 3.14159274f;
				}
				if (this.ai[1] >= num11)
				{
					num41 += (float)this.spriteDirection * 3.14159274f / 12f;
					num42 = 0.05f;
				}
				break;
			case 4:
				num42 = 0.01f;
				num41 = 3.14159274f;
				if (this.spriteDirection == 1)
				{
					num41 += 3.14159274f;
				}
				break;
			case 6:
				num42 = 0.02f;
				num41 = 0f;
				if (this.spriteDirection == -1)
				{
					num41 -= 3.14159274f;
				}
				break;
			}
			if (this.spriteDirection == -1)
			{
				num41 += 3.14159274f;
			}
			if (num42 != 0f)
			{
				this.rotation = this.rotation.AngleTowards(num41, num42);
			}
			if (Main.GetActiveSound(SlotId.FromFloat(this.localAI[2])) == null)
			{
				this.localAI[2] = SlotId.Invalid.ToFloat();
			}
		}

		private void AI_026_Unicorns()
		{
			int num = 30;
			int num2 = 10;
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			if (this.velocity.Y == 0f && ((this.velocity.X > 0f && this.direction < 0) || (this.velocity.X < 0f && this.direction > 0)))
			{
				flag2 = true;
				this.ai[3] += 1f;
			}
			if (this.type == 546)
			{
				num2 = 4;
				bool flag4 = this.velocity.Y == 0f;
				for (int i = 0; i < 200; i++)
				{
					if (i != this.whoAmI && Main.npc[i].active && Main.npc[i].type == this.type && Math.Abs(this.position.X - Main.npc[i].position.X) + Math.Abs(this.position.Y - Main.npc[i].position.Y) < (float)this.width)
					{
						if (this.position.X < Main.npc[i].position.X)
						{
							this.velocity.X = this.velocity.X - 0.05f;
						}
						else
						{
							this.velocity.X = this.velocity.X + 0.05f;
						}
						if (this.position.Y < Main.npc[i].position.Y)
						{
							this.velocity.Y = this.velocity.Y - 0.05f;
						}
						else
						{
							this.velocity.Y = this.velocity.Y + 0.05f;
						}
					}
				}
				if (flag4)
				{
					this.velocity.Y = 0f;
				}
			}
			if (this.position.X == this.oldPosition.X || this.ai[3] >= (float)num || flag2)
			{
				this.ai[3] += 1f;
				flag3 = true;
			}
			else if (this.ai[3] > 0f)
			{
				this.ai[3] -= 1f;
			}
			if (this.ai[3] > (float)(num * num2))
			{
				this.ai[3] = 0f;
			}
			if (this.justHit)
			{
				this.ai[3] = 0f;
			}
			if (this.ai[3] == (float)num)
			{
				this.netUpdate = true;
			}
			Vector2 vector = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
			float num3 = Main.player[this.target].position.X + (float)Main.player[this.target].width * 0.5f - vector.X;
			float num4 = Main.player[this.target].position.Y - vector.Y;
			float num5 = (float)Math.Sqrt((double)(num3 * num3 + num4 * num4));
			if (num5 < 200f && !flag3)
			{
				this.ai[3] = 0f;
			}
			if (this.type == 410)
			{
				this.ai[1] += 1f;
				bool flag5 = this.ai[1] >= 240f;
				if (!flag5 && this.velocity.Y == 0f)
				{
					for (int j = 0; j < 255; j++)
					{
						if (Main.player[j].active && !Main.player[j].dead && Main.player[j].Distance(base.Center) < 800f && Main.player[j].Center.Y < base.Center.Y && Math.Abs(Main.player[j].Center.X - base.Center.X) < 20f)
						{
							flag5 = true;
							break;
						}
					}
				}
				if (flag5 && Main.netMode != 1)
				{
					for (int k = 0; k < 3; k++)
					{
						Projectile.NewProjectile(base.Center.X, base.Center.Y, (Main.rand.NextFloat() - 0.5f) * 2f, -4f - 10f * Main.rand.NextFloat(), 538, 50, 0f, Main.myPlayer, 0f, 0f);
					}
					this.HitEffect(9999, 10.0);
					this.active = false;
					return;
				}
			}
			else if (this.type == 423)
			{
				if (this.ai[2] == 1f)
				{
					this.ai[1] += 1f;
					this.velocity.X = this.velocity.X * 0.7f;
					if (this.ai[1] < 30f)
					{
						Vector2 vector2 = base.Center + Vector2.UnitX * (float)this.spriteDirection * -20f;
						Dust dust = Main.dust[Dust.NewDust(vector2, 0, 0, 242, 0f, 0f, 0, default(Color), 1f)];
						Vector2 vector3 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						dust.position = vector2 + vector3 * 20f;
						dust.velocity = -vector3 * 2f;
						dust.scale = 0.5f + vector3.X * (float)(-(float)this.spriteDirection);
						dust.fadeIn = 1f;
						dust.noGravity = true;
					}
					else if (this.ai[1] == 30f)
					{
						for (int l = 0; l < 20; l++)
						{
							Vector2 vector4 = base.Center + Vector2.UnitX * (float)this.spriteDirection * -20f;
							Dust dust2 = Main.dust[Dust.NewDust(vector4, 0, 0, 242, 0f, 0f, 0, default(Color), 1f)];
							Vector2 vector5 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							dust2.position = vector4 + vector5 * 4f;
							dust2.velocity = vector5 * 4f + Vector2.UnitX * Main.rand.NextFloat() * (float)this.spriteDirection * -5f;
							dust2.scale = 0.5f + vector5.X * (float)(-(float)this.spriteDirection);
							dust2.fadeIn = 1f;
							dust2.noGravity = true;
						}
					}
					if (this.velocity.X > -0.5f && this.velocity.X < 0.5f)
					{
						this.velocity.X = 0f;
					}
					if (this.ai[1] == 30f && Main.netMode != 1)
					{
						int num6 = Main.expertMode ? 35 : 50;
						Projectile.NewProjectile(base.Center.X + (float)(this.spriteDirection * -20), base.Center.Y, (float)(this.spriteDirection * -7), 0f, 575, num6, 0f, Main.myPlayer, (float)this.target, 0f);
					}
					if (this.ai[1] >= 60f)
					{
						this.ai[1] = (float)(-(float)Main.rand.Next(320, 601));
						this.ai[2] = 0f;
					}
				}
				else
				{
					this.ai[1] += 1f;
					if (this.ai[1] >= 180f && num5 < 500f && this.velocity.Y == 0f)
					{
						flag = true;
						this.ai[1] = 0f;
						this.ai[2] = 1f;
						this.netUpdate = true;
					}
					else if (this.velocity.Y == 0f && num5 < 100f && Math.Abs(this.velocity.X) > 3f && ((base.Center.X < Main.player[this.target].Center.X && this.velocity.X > 0f) || (base.Center.X > Main.player[this.target].Center.X && this.velocity.X < 0f)))
					{
						this.velocity.Y = this.velocity.Y - 4f;
					}
				}
			}
			else if (this.type == 155 || this.type == 329)
			{
				if (this.velocity.Y == 0f && num5 < 100f && Math.Abs(this.velocity.X) > 3f && ((this.position.X + (float)(this.width / 2) < Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) && this.velocity.X > 0f) || (this.position.X + (float)(this.width / 2) > Main.player[this.target].position.X + (float)(Main.player[this.target].width / 2) && this.velocity.X < 0f)))
				{
					this.velocity.Y = this.velocity.Y - 4f;
				}
			}
			else if (this.type == 546 && this.velocity.Y == 0f && Math.Abs(this.velocity.X) > 3f && ((base.Center.X < Main.player[this.target].Center.X && this.velocity.X > 0f) || (base.Center.X > Main.player[this.target].Center.X && this.velocity.X < 0f)))
			{
				this.velocity.Y = this.velocity.Y - 4f;
				Main.PlaySound(3, base.Center, 11);
			}
			if (this.ai[3] < (float)num)
			{
				if ((this.type == 329 || this.type == 315) && !Main.pumpkinMoon)
				{
					if (this.timeLeft > 10)
					{
						this.timeLeft = 10;
					}
				}
				else
				{
					this.TargetClosest(true);
				}
			}
			else
			{
				if (this.velocity.X == 0f)
				{
					if (this.velocity.Y == 0f)
					{
						this.ai[0] += 1f;
						if (this.ai[0] >= 2f)
						{
							this.direction *= -1;
							this.spriteDirection = this.direction;
							this.ai[0] = 0f;
						}
					}
				}
				else
				{
					this.ai[0] = 0f;
				}
				this.directionY = -1;
				if (this.direction == 0)
				{
					this.direction = 1;
				}
			}
			float num7 = 6f;
			float num8 = 0.07f;
			if (!flag && (this.velocity.Y == 0f || this.wet || (this.velocity.X <= 0f && this.direction < 0) || (this.velocity.X >= 0f && this.direction > 0)))
			{
				if (this.type == 155)
				{
					if (this.velocity.X > 0f && this.direction < 0)
					{
						this.velocity.X = this.velocity.X * 0.95f;
					}
					if (this.velocity.X < 0f && this.direction > 0)
					{
						this.velocity.X = this.velocity.X * 0.95f;
					}
				}
				else if (this.type == 329)
				{
					if (this.velocity.X > 0f && this.direction < 0)
					{
						this.velocity.X = this.velocity.X * 0.9f;
					}
					if (this.velocity.X < 0f && this.direction > 0)
					{
						this.velocity.X = this.velocity.X * 0.9f;
					}
					if (this.direction > 0 && this.velocity.X < 3f)
					{
						this.velocity.X = this.velocity.X + 0.1f;
					}
					if (this.direction < 0 && this.velocity.X > -3f)
					{
						this.velocity.X = this.velocity.X - 0.1f;
					}
				}
				else if (this.type == 315)
				{
					if (this.velocity.X > 0f && this.direction < 0)
					{
						this.velocity.X = this.velocity.X * 0.95f;
					}
					if (this.velocity.X < 0f && this.direction > 0)
					{
						this.velocity.X = this.velocity.X * 0.95f;
					}
					if (this.velocity.X < -num7 || this.velocity.X > num7)
					{
						if (this.velocity.Y == 0f)
						{
							this.velocity *= 0.8f;
						}
					}
					else if (this.velocity.X < num7 && this.direction == 1)
					{
						this.velocity.X = this.velocity.X + 0.07f;
						if (this.velocity.X > num7)
						{
							this.velocity.X = num7;
						}
					}
					else if (this.velocity.X > -num7 && this.direction == -1)
					{
						this.velocity.X = this.velocity.X - 0.07f;
						if (this.velocity.X < -num7)
						{
							this.velocity.X = -num7;
						}
					}
				}
				else if (this.type == 410)
				{
					if (Math.Sign(this.velocity.X) != this.direction)
					{
						this.velocity.X = this.velocity.X * 0.9f;
					}
					num7 = 6f;
					num8 = 0.2f;
				}
				else if (this.type == 423)
				{
					if (Math.Sign(this.velocity.X) != this.direction)
					{
						this.velocity.X = this.velocity.X * 0.85f;
					}
					num7 = 10f;
					num8 = 0.2f;
				}
				else if (this.type == 546)
				{
					if (Math.Sign(this.velocity.X) != this.direction)
					{
						this.velocity.X = this.velocity.X * 0.92f;
					}
					float num9 = MathHelper.Lerp(0.6f, 1f, Math.Abs(Main.windSpeedSet)) * (float)Math.Sign(Main.windSpeedSet);
					if (!Main.player[this.target].ZoneSandstorm)
					{
						num9 = 0f;
					}
					num7 = 5f + num9 * (float)this.direction * 4f;
					num8 = 0.2f;
				}
				if (this.velocity.X < -num7 || this.velocity.X > num7)
				{
					if (this.velocity.Y == 0f)
					{
						this.velocity *= 0.8f;
					}
				}
				else if (this.velocity.X < num7 && this.direction == 1)
				{
					this.velocity.X = this.velocity.X + num8;
					if (this.velocity.X > num7)
					{
						this.velocity.X = num7;
					}
				}
				else if (this.velocity.X > -num7 && this.direction == -1)
				{
					this.velocity.X = this.velocity.X - num8;
					if (this.velocity.X < -num7)
					{
						this.velocity.X = -num7;
					}
				}
			}
			if (this.velocity.Y >= 0f)
			{
				int num10 = 0;
				if (this.velocity.X < 0f)
				{
					num10 = -1;
				}
				if (this.velocity.X > 0f)
				{
					num10 = 1;
				}
				Vector2 position = this.position;
				position.X += this.velocity.X;
				int num11 = (int)((position.X + (float)(this.width / 2) + (float)((this.width / 2 + 1) * num10)) / 16f);
				int num12 = (int)((position.Y + (float)this.height - 1f) / 16f);
				if (Main.tile[num11, num12] == null)
				{
					Main.tile[num11, num12] = new Tile();
				}
				if (Main.tile[num11, num12 - 1] == null)
				{
					Main.tile[num11, num12 - 1] = new Tile();
				}
				if (Main.tile[num11, num12 - 2] == null)
				{
					Main.tile[num11, num12 - 2] = new Tile();
				}
				if (Main.tile[num11, num12 - 3] == null)
				{
					Main.tile[num11, num12 - 3] = new Tile();
				}
				if (Main.tile[num11, num12 + 1] == null)
				{
					Main.tile[num11, num12 + 1] = new Tile();
				}
				if ((float)(num11 * 16) < position.X + (float)this.width && (float)(num11 * 16 + 16) > position.X && ((Main.tile[num11, num12].nactive() && !Main.tile[num11, num12].topSlope() && !Main.tile[num11, num12 - 1].topSlope() && Main.tileSolid[(int)Main.tile[num11, num12].type] && !Main.tileSolidTop[(int)Main.tile[num11, num12].type]) || (Main.tile[num11, num12 - 1].halfBrick() && Main.tile[num11, num12 - 1].nactive())) && (!Main.tile[num11, num12 - 1].nactive() || !Main.tileSolid[(int)Main.tile[num11, num12 - 1].type] || Main.tileSolidTop[(int)Main.tile[num11, num12 - 1].type] || (Main.tile[num11, num12 - 1].halfBrick() && (!Main.tile[num11, num12 - 4].nactive() || !Main.tileSolid[(int)Main.tile[num11, num12 - 4].type] || Main.tileSolidTop[(int)Main.tile[num11, num12 - 4].type]))) && (!Main.tile[num11, num12 - 2].nactive() || !Main.tileSolid[(int)Main.tile[num11, num12 - 2].type] || Main.tileSolidTop[(int)Main.tile[num11, num12 - 2].type]) && (!Main.tile[num11, num12 - 3].nactive() || !Main.tileSolid[(int)Main.tile[num11, num12 - 3].type] || Main.tileSolidTop[(int)Main.tile[num11, num12 - 3].type]) && (!Main.tile[num11 - num10, num12 - 3].nactive() || !Main.tileSolid[(int)Main.tile[num11 - num10, num12 - 3].type]))
				{
					float num13 = (float)(num12 * 16);
					if (Main.tile[num11, num12].halfBrick())
					{
						num13 += 8f;
					}
					if (Main.tile[num11, num12 - 1].halfBrick())
					{
						num13 -= 8f;
					}
					if (num13 < position.Y + (float)this.height)
					{
						float num14 = position.Y + (float)this.height - num13;
						if ((double)num14 <= 16.1)
						{
							this.gfxOffY += this.position.Y + (float)this.height - num13;
							this.position.Y = num13 - (float)this.height;
							if (num14 < 9f)
							{
								this.stepSpeed = 1f;
							}
							else
							{
								this.stepSpeed = 2f;
							}
						}
					}
				}
			}
			if (this.velocity.Y == 0f)
			{
				int num15 = (int)((this.position.X + (float)(this.width / 2) + (float)((this.width / 2 + 2) * this.direction) + this.velocity.X * 5f) / 16f);
				int num16 = (int)((this.position.Y + (float)this.height - 15f) / 16f);
				if (Main.tile[num15, num16] == null)
				{
					Main.tile[num15, num16] = new Tile();
				}
				if (Main.tile[num15, num16 - 1] == null)
				{
					Main.tile[num15, num16 - 1] = new Tile();
				}
				if (Main.tile[num15, num16 - 2] == null)
				{
					Main.tile[num15, num16 - 2] = new Tile();
				}
				if (Main.tile[num15, num16 - 3] == null)
				{
					Main.tile[num15, num16 - 3] = new Tile();
				}
				if (Main.tile[num15, num16 + 1] == null)
				{
					Main.tile[num15, num16 + 1] = new Tile();
				}
				if (Main.tile[num15 + this.direction, num16 - 1] == null)
				{
					Main.tile[num15 + this.direction, num16 - 1] = new Tile();
				}
				if (Main.tile[num15 + this.direction, num16 + 1] == null)
				{
					Main.tile[num15 + this.direction, num16 + 1] = new Tile();
				}
				if (Main.tile[num15 - this.direction, num16 + 1] == null)
				{
					Main.tile[num15 - this.direction, num16 + 1] = new Tile();
				}
				int num17 = this.spriteDirection;
				if (this.type == 423 || this.type == 410 || this.type == 546)
				{
					num17 *= -1;
				}
				if ((this.velocity.X < 0f && num17 == -1) || (this.velocity.X > 0f && num17 == 1))
				{
					bool flag6 = this.type == 410 || this.type == 423;
					float num18 = 3f;
					if (Main.tile[num15, num16 - 2].nactive() && Main.tileSolid[(int)Main.tile[num15, num16 - 2].type])
					{
						if (Main.tile[num15, num16 - 3].nactive() && Main.tileSolid[(int)Main.tile[num15, num16 - 3].type])
						{
							this.velocity.Y = -8.5f;
							this.netUpdate = true;
						}
						else
						{
							this.velocity.Y = -7.5f;
							this.netUpdate = true;
						}
					}
					else if (Main.tile[num15, num16 - 1].nactive() && !Main.tile[num15, num16 - 1].topSlope() && Main.tileSolid[(int)Main.tile[num15, num16 - 1].type])
					{
						this.velocity.Y = -7f;
						this.netUpdate = true;
					}
					else if (this.position.Y + (float)this.height - (float)(num16 * 16) > 20f && Main.tile[num15, num16].nactive() && !Main.tile[num15, num16].topSlope() && Main.tileSolid[(int)Main.tile[num15, num16].type])
					{
						this.velocity.Y = -6f;
						this.netUpdate = true;
					}
					else if ((this.directionY < 0 || Math.Abs(this.velocity.X) > num18) && (!flag6 || !Main.tile[num15, num16 + 1].nactive() || !Main.tileSolid[(int)Main.tile[num15, num16 + 1].type]) && (!Main.tile[num15, num16 + 2].nactive() || !Main.tileSolid[(int)Main.tile[num15, num16 + 2].type]) && (!Main.tile[num15 + this.direction, num16 + 3].nactive() || !Main.tileSolid[(int)Main.tile[num15 + this.direction, num16 + 3].type]))
					{
						this.velocity.Y = -8f;
						this.netUpdate = true;
					}
				}
			}
			if (this.type == 423 && Math.Abs(this.velocity.X) >= num7 * 0.95f)
			{
				Rectangle hitbox = base.Hitbox;
				for (int m = 0; m < 2; m++)
				{
					if (Main.rand.Next(3) == 0)
					{
						Dust dust3 = Main.dust[Dust.NewDust(hitbox.TopLeft(), hitbox.Width, hitbox.Height, 242, 0f, 0f, 0, default(Color), 1f)];
						dust3.velocity = Vector2.Zero;
						dust3.noGravity = true;
						dust3.fadeIn = 1f;
						dust3.scale = 0.5f + Main.rand.NextFloat();
					}
				}
			}
			if (this.type == 546)
			{
				this.rotation += this.velocity.X * 0.05f;
				this.spriteDirection = -this.direction;
			}
		}

		private void AI_107_ImprovedWalkers()
		{
			bool flag = this.velocity.X == 0f && this.velocity.Y == 0f && !this.justHit;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			int num = 32;
			int num2 = 15;
			float num3 = 9f;
			bool flag5 = false;
			float num4 = 40f;
			int num5 = 30;
			int num6 = 0;
			bool flag6 = false;
			bool flag7 = true;
			float num7 = 0.9f;
			bool flag8 = false;
			bool flag9 = false;
			bool flag10 = false;
			bool flag11 = false;
			bool flag12 = false;
			bool flag13 = false;
			bool flag14 = false;
			bool flag15 = true;
			int num8 = 70;
			int num9 = num8 / 2;
			float scaleFactor = 11f;
			Vector2 zero = Vector2.Zero;
			int num10 = 1;
			int num11 = 81;
			float num12 = 700f;
			float num13 = 0f;
			float num14 = 0.1f;
			Vector2? vector = null;
			float num15 = 0.5f;
			int num16 = 1;
			float scaleFactor2 = 1f;
			bool flag16 = false;
			bool flag17 = true;
			bool flag18 = false;
			int num17 = 30;
			bool flag19 = false;
			bool flag20 = false;
			bool flag21 = false;
			bool flag22 = false;
			LegacySoundStyle style = null;
			int num18 = 0;
			bool flag23 = false;
			float num19 = 1f;
			float num20 = 0.07f;
			float num21 = 0.8f;
			float num22 = (float)(this.width / 2 + 6);
			bool flag24 = this.directionY < 0;
			bool flag25 = false;
			int num23 = 1;
			bool flag26 = false;
			float num24 = 0.025f;
			NPCAimedTarget targetData = this.GetTargetData(true);
			if (targetData.Type == NPCTargetType.NPC && Main.npc[this.TranslatedTargetIndex].type == 548 && Main.npc[this.TranslatedTargetIndex].dontTakeDamageFromHostiles)
			{
				NPCUtils.TargetClosestOldOnesInvasion(this, true, null);
				targetData = this.GetTargetData(true);
			}
			if (!targetData.Invalid)
			{
				flag2 = (!Collision.CanHit(base.Center, 0, 0, targetData.Center, 0, 0) && (this.direction == Math.Sign(targetData.Center.X - base.Center.X) || (this.noGravity && base.Distance(targetData.Center) > 50f && base.Center.Y > targetData.Center.Y)));
			}
			flag2 &= (this.ai[0] <= 0f);
			if (flag2)
			{
				if (this.velocity.Y == 0f || Math.Abs(targetData.Center.Y - base.Center.Y) > 800f)
				{
					this.noGravity = true;
					this.noTileCollide = true;
				}
			}
			else
			{
				this.noGravity = false;
				this.noTileCollide = false;
			}
			bool flag27 = NPCID.Sets.FighterUsesDD2PortalAppearEffect[this.type];
			bool flag28 = true;
			switch (this.type)
			{
			case 552:
			case 553:
			case 554:
				style = SoundID.DD2_GoblinScream;
				num18 = 1000;
				flag5 = true;
				flag20 = DD2Event.EnemiesShouldChasePlayers;
				if (this.type == 553)
				{
					num20 += 0.01f;
					num19 += 0.2f;
				}
				if (this.type == 554)
				{
					num20 += 0.02f;
					num19 += 0.4f;
				}
				if (this.localAI[3] < 60f)
				{
					num20 = 0.01f + this.localAI[3] / 60f * 0.05f;
				}
				break;
			case 555:
			case 556:
			case 557:
			{
				num18 = 800;
				style = SoundID.DD2_GoblinBomberScream;
				bool flag29 = this.localAI[3] >= 60f;
				flag20 = DD2Event.EnemiesShouldChasePlayers;
				flag23 = true;
				flag12 = true;
				flag15 = (this.ai[1] > 18f);
				num8 = 42;
				num9 = 18;
				num11 = 681;
				num10 = 10;
				zero.Y -= 14f;
				num14 = 0.4f;
				num15 = 0.5f;
				num12 = 280f;
				scaleFactor = 6f;
				if (!flag29)
				{
					num12 = 1f;
					num20 = 0.01f + this.localAI[3] / 60f * 0.05f;
				}
				if (this.type == 555)
				{
					num19 = 0.88f;
					num15 = 0.6f;
					num10 = (Main.expertMode ? 15 : 20);
				}
				if (this.type == 555)
				{
					num19 = 0.88f;
					num15 = 0.6f;
					num10 = (Main.expertMode ? 25 : 30);
				}
				if (this.type == 557)
				{
					num19 = 1.12f;
					num15 = 0.4f;
					num10 = (Main.expertMode ? 35 : 40);
				}
				if (this.ai[1] == (float)num9)
				{
					Main.PlayTrackedSound(SoundID.DD2_GoblinBomberThrow, base.Center);
				}
				break;
			}
			case 561:
			case 562:
			case 563:
			{
				bool flag30 = this.localAI[3] >= 60f;
				if (this.ai[1] == 82f)
				{
					Main.PlayTrackedSound(SoundID.DD2_JavelinThrowersAttack, base.Center);
					num18 = 7;
					style = SoundID.DD2_JavelinThrowersTaunt;
				}
				flag20 = DD2Event.EnemiesShouldChasePlayers;
				flag23 = true;
				flag12 = true;
				flag15 = (this.ai[1] > 82f);
				num8 = 90;
				num9 = 82;
				num11 = 662;
				if (this.type == 563)
				{
					num11 = 685;
				}
				zero.Y -= 14f;
				num14 = 0f;
				num15 = 0.5f;
				num12 = 600f;
				scaleFactor = 13f;
				if (!flag30)
				{
					num12 = 1f;
					num20 = 0.01f + this.localAI[3] / 60f * 0.05f;
				}
				if (this.type == 561)
				{
					num19 = 0.88f;
					num15 = 0.6f;
					num10 = (Main.expertMode ? 10 : 15);
					scaleFactor = 11.5f;
					num12 -= 100f;
				}
				if (this.type == 562)
				{
					num19 = 0.94f;
					num15 = 0.5f;
					num10 = (Main.expertMode ? 20 : 30);
					scaleFactor = 12.2f;
					num12 -= 50f;
				}
				if (this.type == 563)
				{
					num19 = 1f;
					num15 = 0.4f;
					num10 = (Main.expertMode ? 30 : 45);
				}
				break;
			}
			case 566:
			case 567:
			{
				Vector3 v3_ = new Vector3(0.3f, 0.05f, 0.45f) * 1.5f;
				DelegateMethods.v3_1 = v3_;
				Utils.PlotTileLine(base.Top, base.Bottom, (float)this.width, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
				flag20 = DD2Event.EnemiesShouldChasePlayers;
				bool flag31 = this.localAI[3] >= 120f;
				if (!flag31)
				{
					num20 = 0f;
				}
				if (flag31)
				{
					this.dontTakeDamage = false;
				}
				else
				{
					this.dontTakeDamage = true;
					this.velocity.X = 0f;
					flag23 = true;
					flag19 = true;
					this.ai[3] = 0f;
					if (this.localAI[3] == 0f)
					{
						this.alpha = 255;
					}
					this.localAI[3] += 1f;
					float num25 = this.localAI[3];
					if (num25 >= 110f)
					{
						this.alpha -= 26;
						if (this.alpha < 0)
						{
							this.alpha = 0;
						}
					}
					if (num25 >= 100f)
					{
						int num26 = (int)this.localAI[3] / 20;
						float num27 = base.Size.Length() / 2f;
						num27 /= 20f;
						int maxValue = 5;
						for (int i = 0; i < num26 * 2; i++)
						{
							if (Main.rand.Next(maxValue) == 0)
							{
								Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 236, this.velocity.X * 1f, 0f, 0, default(Color), 1f);
								dust.scale = 1f;
								dust.fadeIn = 0.3f;
								dust.velocity = new Vector2(Main.rand.NextFloatDirection() * 1f, -dust.velocity.Length()) * 1.25f * num27;
							}
						}
					}
					else
					{
						int num28 = (int)this.localAI[3] / 10;
						float num29 = base.Size.Length() / 2f;
						num29 /= 20f;
						int maxValue2 = 5;
						int num30 = 0;
						while ((float)num30 < (float)num28 * 1.3f)
						{
							if (Main.rand.Next(maxValue2) == 0)
							{
								Dust dust2 = Dust.NewDustDirect(this.position + new Vector2((float)(-(float)this.width / 2), 8f), this.width + this.width, this.height, 27, this.velocity.X * 1f, 0f, 100, default(Color), 1f);
								dust2.scale = 1.1f;
								dust2.fadeIn = 0.1f;
								dust2.velocity = new Vector2(Main.rand.NextFloatDirection() * 0.1f, -dust2.velocity.Length()) * 1.05f * num29 * Main.rand.NextFloat();
								Dust expr_1CC2_cp_0 = dust2;
								expr_1CC2_cp_0.velocity.Y = expr_1CC2_cp_0.velocity.Y * Utils.InverseLerp((float)this.width * 0.75f, 0f, Math.Abs(dust2.position.X - base.Center.X), true);
							}
							num30++;
						}
					}
					if (num25 > 100f && (int)num25 % 4 == 0)
					{
						Gore gore = Gore.NewGoreDirect(base.Left, new Vector2(0f, -3f), Utils.SelectRandom<int>(Main.rand, new int[]
						{
							971,
							972
						}), 0.85f);
						Gore expr_1D78_cp_0 = gore;
						expr_1D78_cp_0.velocity.X = expr_1D78_cp_0.velocity.X * 0.8f;
					}
				}
				break;
			}
			case 568:
			case 569:
				num5 = 110;
				num20 = 0.16f;
				num21 = 0.7f;
				num19 = 1.4f;
				flag5 = true;
				num4 = 600f;
				flag20 = DD2Event.EnemiesShouldChasePlayers;
				if (this.localAI[3] < 60f)
				{
					num20 = 0.01f + this.localAI[3] / 60f * 0.05f;
				}
				if (this.ai[0] == 0f)
				{
					this.localAI[1] = SlotId.Invalid.ToFloat();
				}
				if (this.ai[0] == 1f)
				{
					this.HitSound = SoundID.DD2_WitherBeastCrystalImpact;
					this.ai[0] += 1f;
					if (Main.rand.Next(10) == 0)
					{
						Dust dust3 = Dust.NewDustDirect(base.TopLeft, this.width, this.height, 271, 0f, -3f, 0, Color.Transparent, 0.6f);
						Dust expr_1431_cp_0 = dust3;
						expr_1431_cp_0.velocity.X = expr_1431_cp_0.velocity.X / 2f;
						dust3.noGravity = true;
						dust3.fadeIn = 1.5f;
						Dust expr_145D_cp_0 = dust3;
						expr_145D_cp_0.position.Y = expr_145D_cp_0.position.Y + 4f;
					}
					ActiveSound activeSound = Main.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
					if (activeSound == null)
					{
						this.localAI[1] = Main.PlayTrackedSound(SoundID.DD2_WitherBeastAuraPulse, base.Center).ToFloat();
					}
					else
					{
						activeSound.Position = base.Center;
					}
					this.localAI[0] += 1f;
					if (this.localAI[0] > 60f && Main.rand.Next(10) == 0)
					{
						Vector2 vector2 = base.Center + (Main.rand.NextFloat() * 6.28318548f).ToRotationVector2() * 400f * (0.3f + 0.7f * Main.rand.NextFloat());
						Point point = vector2.ToTileCoordinates();
						if (!WorldGen.SolidTile(point.X, point.Y))
						{
							Dust dust4 = Dust.NewDustPerfect(vector2, 27, new Vector2?(new Vector2(0f, -3f)), 0, new Color(255, 255, 255, 127), 1.5f);
							dust4.velocity = base.DirectionTo(dust4.position) * dust4.velocity.Length();
							dust4.fadeIn = 1.5f;
						}
					}
					if (Main.netMode != 2)
					{
						Player player = Main.player[Main.myPlayer];
						if (!player.dead && player.active && (player.Center - base.Center).Length() < 400f)
						{
							player.AddBuff(195, 3, false);
						}
					}
					if (this.ai[1] > 0f)
					{
						this.ai[1] -= 1f;
					}
					if (this.ai[1] <= 0f)
					{
						this.ai[1] = 60f;
						if (Main.netMode != 1)
						{
							int num31 = this.lifeMax / 20;
							if (num31 > this.lifeMax - this.life)
							{
								num31 = this.lifeMax - this.life;
							}
							if (num31 > 0)
							{
								this.life += num31;
								this.HealEffect(num31, true);
								this.netUpdate = true;
							}
						}
					}
				}
				break;
			case 570:
			case 571:
				flag20 = DD2Event.EnemiesShouldChasePlayers;
				flag23 = true;
				flag12 = true;
				flag15 = (this.ai[1] > 40f);
				num8 = 60;
				num9 = 40;
				if (this.type == 571 && this.ai[1] > 10f && this.ai[1] <= 40f && (int)this.ai[1] % 6 == 0)
				{
					num9 = (int)this.ai[1] - 1;
				}
				if (this.type == 570 && this.ai[1] > 10f && this.ai[1] <= 40f && (int)this.ai[1] % 9 == 0)
				{
					num9 = (int)this.ai[1] - 1;
				}
				num11 = 671;
				zero.X += (float)(22 * this.direction);
				num14 = 0.15f;
				num15 = 1.5f;
				num12 = 600f;
				scaleFactor = 13f;
				num16 = 1;
				scaleFactor2 = 0f;
				if (this.type == 570)
				{
					num15 = 2.5f;
				}
				num10 = (Main.expertMode ? 25 : 35);
				if (this.type == 571)
				{
					num10 = (Main.expertMode ? 45 : 60);
				}
				num19 = 0.77f;
				if (this.ai[0] > 0f)
				{
					if (this.ai[1] == 40f)
					{
						Main.PlayTrackedSound(SoundID.DD2_DrakinShot, base.Center);
					}
					else if (this.ai[1] == 60f)
					{
						Main.PlayTrackedSound(SoundID.DD2_DrakinBreathIn, base.Center);
					}
				}
				if (this.localAI[3] < 60f)
				{
					num12 = 1f;
					num20 = 0.01f + this.localAI[3] / 60f * 0.05f;
				}
				break;
			case 572:
			case 573:
				if (this.localAI[3] == 0f)
				{
					this.localAI[0] = SlotId.Invalid.ToFloat();
					this.localAI[1] = SlotId.Invalid.ToFloat();
				}
				flag20 = DD2Event.EnemiesShouldChasePlayers;
				if (this.ai[1] == 2f)
				{
					ActiveSound activeSound2 = Main.GetActiveSound(SlotId.FromFloat(this.localAI[0]));
					if (activeSound2 != null)
					{
						activeSound2.Stop();
					}
					ActiveSound activeSound3 = Main.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
					if (activeSound3 != null)
					{
						activeSound3.Stop();
					}
					this.position = base.Center;
					this.width = (this.height = 192);
					base.Center = this.position;
					this.velocity = Vector2.Zero;
					this.damage = (int)(80f * Main.damageMultiplier);
					this.alpha = 255;
					for (int j = 0; j < 4; j++)
					{
						int num32 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num32].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					}
					for (int k = 0; k < 20; k++)
					{
						int num33 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 200, default(Color), 3.7f);
						Main.dust[num33].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
						Main.dust[num33].noGravity = true;
						Main.dust[num33].velocity *= 3f;
						num33 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num33].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 4f;
						Main.dust[num33].velocity *= 2f;
						Main.dust[num33].noGravity = true;
						Main.dust[num33].fadeIn = 2.5f;
					}
					for (int l = 0; l < 6; l++)
					{
						int num34 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 0, default(Color), 2.7f);
						Main.dust[num34].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
						Main.dust[num34].noGravity = true;
						Main.dust[num34].velocity *= 3f;
					}
					for (int m = 0; m < 12; m++)
					{
						int num35 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num35].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
						Main.dust[num35].noGravity = true;
						Main.dust[num35].velocity *= 3f;
					}
					for (int n = 0; n < 5; n++)
					{
						int num36 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
						Main.gore[num36].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
						Main.gore[num36].velocity *= 0.3f;
						Gore expr_E5F_cp_0 = Main.gore[num36];
						expr_E5F_cp_0.velocity.X = expr_E5F_cp_0.velocity.X + (float)Main.rand.Next(-10, 11) * 0.05f;
						Gore expr_E8D_cp_0 = Main.gore[num36];
						expr_E8D_cp_0.velocity.Y = expr_E8D_cp_0.velocity.Y + (float)Main.rand.Next(-10, 11) * 0.05f;
					}
					this.ai[0] += 1f;
					if (this.ai[0] >= 3f)
					{
						Main.PlayTrackedSound(SoundID.DD2_KoboldExplosion, base.Center);
						this.life = 0;
						this.HitEffect(0, 10.0);
						this.active = false;
					}
					return;
				}
				if (this.ai[0] > 0f && this.ai[1] == 0f && this.life > 0)
				{
					if (!SlotId.FromFloat(this.localAI[0]).IsValid)
					{
						this.localAI[0] = Main.PlayTrackedSound(SoundID.DD2_KoboldIgnite, base.Center).ToFloat();
					}
					this.localAI[2] += 1f;
					if (this.localAI[2] == 30f)
					{
						this.localAI[0] = Main.PlayTrackedSound(SoundID.DD2_KoboldIgniteLoop, base.Center).ToFloat();
						this.localAI[1] = Main.PlayTrackedSound(SoundID.DD2_KoboldScreamChargeLoop, base.Center).ToFloat();
					}
				}
				if (this.ai[0] > 0f && this.ai[1] == 1f)
				{
					this.ai[0] = 0f;
					this.ai[1] = 2f;
					this.netUpdate = true;
					return;
				}
				num19 = 0.88f;
				if (this.ai[0] == 1f)
				{
					this.ai[1] = 1f;
				}
				if (this.ai[0] == 0f && this.ai[1] == 1f)
				{
					ActiveSound activeSound4 = Main.GetActiveSound(SlotId.FromFloat(this.localAI[0]));
					if (activeSound4 == null)
					{
						this.localAI[0] = Main.PlayTrackedSound(SoundID.DD2_KoboldIgniteLoop, base.Center).ToFloat();
					}
					else
					{
						activeSound4.Position = base.Center;
					}
					ActiveSound activeSound5 = Main.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
					if (activeSound5 == null)
					{
						this.localAI[1] = Main.PlayTrackedSound(SoundID.DD2_KoboldScreamChargeLoop, base.Center).ToFloat();
					}
					else
					{
						activeSound5.Position = base.Center;
					}
				}
				if (this.ai[1] > 0f && this.ai[0] == 0f)
				{
					flag5 = true;
					num5 = 40;
					num4 = 64f;
					num20 = 0.3f;
					num19 = 4f;
					Vector2 position = base.Center + new Vector2((float)(this.spriteDirection * 12), 0f);
					if (Main.rand.Next(6) == 0)
					{
						Dust dust5 = Dust.NewDustDirect(position, 1, 1, 213, (float)Main.rand.Next(-2, 3), (float)Main.rand.Next(-2, 3), 100, new Color(255, 255, 255, 0), 1f);
						dust5.noGravity = true;
						dust5.fadeIn = dust5.scale + 1f + 0.01f * (float)Main.rand.Next(0, 51);
						dust5.velocity *= 0.3f;
						Dust expr_120E_cp_0 = dust5;
						expr_120E_cp_0.velocity.X = expr_120E_cp_0.velocity.X + (float)(-(float)this.spriteDirection) * 1.2f;
						Dust expr_122F_cp_0 = dust5;
						expr_122F_cp_0.velocity.Y = expr_122F_cp_0.velocity.Y + -3.5f;
						Dust expr_1247_cp_0 = dust5;
						expr_1247_cp_0.velocity.X = expr_1247_cp_0.velocity.X + this.velocity.X;
					}
					if (Main.rand.Next(12) == 0)
					{
						Dust dust6 = Dust.NewDustPerfect(position, 6, new Vector2?(this.velocity), 100, default(Color), 1f);
						dust6.noGravity = true;
						Dust expr_12A4_cp_0 = dust6;
						expr_12A4_cp_0.velocity.Y = expr_12A4_cp_0.velocity.Y - (1f + Main.rand.NextFloat());
						dust6.scale = 1.1f;
						dust6.fadeIn = 0.5f;
						dust6.customData = this;
					}
				}
				else
				{
					flag5 = true;
					num5 = 40;
					num4 = 700f;
				}
				if (this.localAI[3] < 60f)
				{
					num20 = 0.01f + this.localAI[3] / 60f * 0.05f;
				}
				break;
			case 576:
			case 577:
				num18 = 700;
				style = SoundID.DD2_OgreRoar;
				num22 -= 32f;
				flag5 = true;
				num6 = 60;
				num4 = 130f;
				num5 = 44;
				flag20 = DD2Event.EnemiesShouldChasePlayers;
				num7 = 0.7f;
				if (this.localAI[0] > 0f)
				{
					this.localAI[0] -= 1f;
				}
				if (this.ai[0] <= 0f)
				{
					float num37 = this.ai[1];
					float num38 = base.Distance(targetData.Center);
					bool flag32 = this.localAI[3] >= 60f;
					if (flag32)
					{
						if (num38 <= num4 + 300f && this.localAI[0] <= 0f)
						{
							this.ai[1] = 2f;
						}
						else if (num38 > num4 + 30f)
						{
							this.ai[1] = 1f;
						}
						else if (num38 <= num4)
						{
							this.ai[1] = 0f;
							if (num37 == 1f)
							{
								this.ai[0] = 0f;
							}
						}
					}
					if (num37 != this.ai[1])
					{
						this.netUpdate = true;
					}
				}
				else if (this.ai[1] == 2f)
				{
					this.localAI[0] = 300f;
				}
				switch ((int)this.ai[1])
				{
				case 0:
					num5 = 44;
					if (this.ai[0] == 40f)
					{
						Main.PlayTrackedSound(SoundID.DD2_OgreAttack, base.Center);
					}
					break;
				case 1:
					flag3 = true;
					num5 = 90;
					num4 = 1000f;
					num6 = 240;
					if (this.type == 576)
					{
						num10 = (Main.expertMode ? 30 : 40);
					}
					else
					{
						num10 = (Main.expertMode ? 30 : 40);
					}
					flag15 = false;
					zero = new Vector2((float)(this.direction * 30), -70f);
					num11 = 676;
					if (this.ai[0] == 80f)
					{
						Main.PlayTrackedSound(SoundID.DD2_OgreSpit, base.Center);
					}
					break;
				case 2:
					num5 = 90;
					num4 = 250f;
					flag4 = true;
					if (this.type == 576)
					{
						num10 = (Main.expertMode ? 40 : 60);
					}
					else
					{
						num10 = (Main.expertMode ? 40 : 60);
					}
					num9 = 36;
					num = 56;
					num2 = 41;
					num3 = 13f;
					flag3 = true;
					num11 = 683;
					flag15 = false;
					zero = new Vector2((float)(-(float)this.direction * 20), (float)(this.height / 2 - 1));
					if (this.ai[0] == 40f)
					{
						Main.PlayTrackedSound(SoundID.DD2_OgreGroundPound, base.Center);
					}
					break;
				}
				if (this.ai[0] < (float)(-(float)num6))
				{
					this.ai[0] = (float)(-(float)num6);
				}
				break;
			}
			if (flag26)
			{
				bool flag33 = this.velocity.Y == 0f;
				for (int num39 = 0; num39 < 200; num39++)
				{
					if (num39 != this.whoAmI && Main.npc[num39].active && Main.npc[num39].type == this.type && Math.Abs(this.position.X - Main.npc[num39].position.X) + Math.Abs(this.position.Y - Main.npc[num39].position.Y) < (float)this.width)
					{
						if (this.position.X < Main.npc[num39].position.X)
						{
							this.velocity.X = this.velocity.X - num24;
						}
						else
						{
							this.velocity.X = this.velocity.X + num24;
						}
						if (this.position.Y < Main.npc[num39].position.Y)
						{
							this.velocity.Y = this.velocity.Y - num24;
						}
						else
						{
							this.velocity.Y = this.velocity.Y + num24;
						}
					}
				}
				if (flag33)
				{
					this.velocity.Y = 0f;
				}
			}
			if (flag27)
			{
				if (this.localAI[3] == 0f)
				{
					this.alpha = 255;
				}
				if (this.localAI[3] == 30f)
				{
					Main.PlayTrackedSound(SoundID.DD2_EtherianPortalSpawnEnemy, base.Center);
				}
				if (this.localAI[3] < 60f)
				{
					this.localAI[3] += 1f;
					this.alpha -= 5;
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
					int num40 = (int)this.localAI[3] / 10;
					float num41 = base.Size.Length() / 2f;
					num41 /= 20f;
					int maxValue3 = 5;
					if (this.type == 576 || this.type == 577)
					{
						maxValue3 = 1;
					}
					for (int num42 = 0; num42 < num40; num42++)
					{
						if (Main.rand.Next(maxValue3) == 0)
						{
							Dust dust7 = Dust.NewDustDirect(this.position, this.width, this.height, 27, this.velocity.X * 1f, 0f, 100, default(Color), 1f);
							dust7.scale = 0.55f;
							dust7.fadeIn = 0.7f;
							dust7.velocity *= 0.1f * num41;
							dust7.velocity += this.velocity;
						}
					}
				}
			}
			bool flag34 = false;
			if ((flag12 || flag5) && this.ai[0] > 0f)
			{
				flag17 = false;
			}
			if (flag12 && this.ai[1] > 0f)
			{
				flag21 = true;
			}
			if (flag5 && this.ai[0] > 0f)
			{
				flag21 = true;
			}
			if (flag5)
			{
				if (this.ai[0] < 0f)
				{
					this.ai[0] += 1f;
					flag = false;
				}
				if (this.ai[0] == 0f && (this.velocity.Y == 0f || flag6) && targetData.Type != NPCTargetType.None)
				{
					bool flag35 = Collision.CanHit(this.position, this.width, this.height, targetData.Position, targetData.Width, targetData.Height) || Collision.CanHitLine(this.position, this.width, this.height, targetData.Position, targetData.Width, targetData.Height);
					if (flag35)
					{
						float num43 = (targetData.Center - base.Center).Length();
						if (num43 < num4)
						{
							this.ai[0] = (float)num5;
							this.netUpdate = true;
						}
					}
				}
				if (this.ai[0] > 0f)
				{
					this.spriteDirection = this.direction * num23;
					if (flag7)
					{
						this.velocity.X = this.velocity.X * num7;
						flag23 = true;
						flag19 = true;
						this.ai[3] = 0f;
					}
					this.ai[0] -= 1f;
					if (this.ai[0] == 0f)
					{
						this.ai[0] = (float)(-(float)num6);
					}
				}
			}
			if (flag3 && this.ai[0] > 0f)
			{
				if (flag15)
				{
					NPCUtils.TargetClosestOldOnesInvasion(this, true, null);
					targetData = this.GetTargetData(true);
				}
				if (this.ai[0] == (float)num9)
				{
					Vector2 vector3 = base.Center + zero;
					Vector2 v = targetData.Center - vector3;
					v.Y -= Math.Abs(v.X) * num14;
					Vector2 vector4 = v.SafeNormalize(-Vector2.UnitY) * scaleFactor;
					for (int num44 = 0; num44 < num16; num44++)
					{
						Vector2 vector5 = vector4;
						Vector2 vector6 = vector3;
						if (vector.HasValue)
						{
							vector5 += vector.Value;
						}
						else
						{
							vector5 += Utils.RandomVector2(Main.rand, -num15, num15);
						}
						vector6 += vector4 * scaleFactor2;
						if (Main.netMode != 1)
						{
							Projectile.NewProjectile(vector6, vector5, num11, num10, 0f, Main.myPlayer, 0f, 0f);
						}
					}
				}
			}
			if (flag4 && this.ai[0] > 0f)
			{
				if (this.velocity.Y != 0f && this.ai[0] < (float)num2)
				{
					this.ai[0] = (float)num2;
				}
				if (this.ai[0] == (float)num)
				{
					this.velocity.Y = -num3;
				}
			}
			if (!flag16 && flag17)
			{
				if (this.velocity.Y == 0f && this.velocity.X * (float)this.direction < 0f)
				{
					flag18 = true;
				}
				if (this.position.X == this.oldPosition.X || this.ai[3] >= (float)num17 || flag18)
				{
					this.ai[3] += 1f;
				}
				else if (Math.Abs(this.velocity.X) > 0.9f && this.ai[3] > 0f)
				{
					this.ai[3] -= 1f;
				}
				if (this.ai[3] > (float)(num17 * 10))
				{
					this.ai[3] = 0f;
				}
				if (this.justHit && !flag28)
				{
					this.ai[3] = 0f;
				}
				if (this.ai[3] == (float)num17)
				{
					this.netUpdate = true;
					if (flag28)
					{
						this.noGravity = true;
						this.noTileCollide = true;
						this.position.X = this.position.X + (float)(this.direction * this.width * 2);
						int num45 = 20;
						float num46 = base.Size.Length() / 2f;
						num46 /= 20f;
						int maxValue4 = 5;
						if (this.type == 576 || this.type == 577)
						{
							maxValue4 = 1;
						}
						for (int num47 = 0; num47 < num45; num47++)
						{
							if (Main.rand.Next(maxValue4) == 0)
							{
								Dust dust8 = Dust.NewDustDirect(this.position, this.width, this.height, 27, this.velocity.X * 1f, 0f, 100, default(Color), 1f);
								dust8.scale = 0.55f;
								dust8.fadeIn = 0.7f;
								dust8.velocity *= 3f * num46;
								dust8.noGravity = true;
								dust8.fadeIn = 1.5f;
								dust8.velocity *= 3f;
							}
						}
						return;
					}
				}
			}
			if (!flag19)
			{
				if (this.ai[3] < (float)num17 && flag20)
				{
					if (num18 > 0 && Main.rand.Next(num18) == 0)
					{
						Main.PlayTrackedSound(style, base.Center);
					}
					NPCUtils.TargetClosestOldOnesInvasion(this, true, null);
					targetData = this.GetTargetData(true);
				}
				else if (!flag21)
				{
					if (flag22 && this.timeLeft > 10)
					{
						this.timeLeft = 10;
					}
					if (this.velocity.X == 0f)
					{
						if (this.velocity.Y == 0f)
						{
							this.ai[2] += 1f;
							if (this.ai[2] >= 2f)
							{
								this.direction *= -1;
								this.spriteDirection = this.direction * num23;
								this.ai[2] = 0f;
							}
						}
					}
					else
					{
						this.ai[2] = 0f;
					}
					if (this.direction == 0)
					{
						this.direction = 1;
					}
				}
			}
			if (!flag23)
			{
				if (this.velocity.X < -num19 || this.velocity.X > num19)
				{
					if (this.velocity.Y == 0f)
					{
						this.velocity *= num21;
					}
				}
				else if ((this.velocity.X < num19 && this.direction == 1) || (this.velocity.X > -num19 && this.direction == -1))
				{
					this.velocity.X = MathHelper.Clamp(this.velocity.X + num20 * (float)this.direction, -num19, num19);
				}
			}
			if (flag12)
			{
				if (this.confused)
				{
					this.ai[0] = 0f;
				}
				else
				{
					if (this.ai[1] > 0f)
					{
						this.ai[1] -= 1f;
					}
					if (this.justHit)
					{
						this.ai[1] = 30f;
						this.ai[0] = 0f;
					}
					if (this.ai[0] > 0f)
					{
						if (flag15)
						{
							NPCUtils.TargetClosestOldOnesInvasion(this, true, null);
							targetData = this.GetTargetData(true);
						}
						if (this.ai[1] == (float)num9)
						{
							Vector2 vector7 = base.Center + zero;
							Vector2 v2 = targetData.Center - vector7;
							v2.Y -= Math.Abs(v2.X) * num14;
							Vector2 vector8 = v2.SafeNormalize(-Vector2.UnitY) * scaleFactor;
							for (int num48 = 0; num48 < num16; num48++)
							{
								Vector2 vector9 = vector7;
								Vector2 vector10 = vector8;
								if (vector.HasValue)
								{
									vector10 += vector.Value;
								}
								else
								{
									vector10 += Utils.RandomVector2(Main.rand, -num15, num15);
								}
								vector9 += vector10 * scaleFactor2;
								if (Main.netMode != 1)
								{
									Projectile.NewProjectile(vector9, vector10, num11, num10, 0f, Main.myPlayer, 0f, 0f);
								}
							}
							if (Math.Abs(vector8.Y) > Math.Abs(vector8.X) * 2f)
							{
								this.ai[0] = (float)((vector8.Y > 0f) ? 1 : 5);
							}
							else if (Math.Abs(vector8.X) > Math.Abs(vector8.Y) * 2f)
							{
								this.ai[0] = 3f;
							}
							else
							{
								this.ai[0] = (float)((vector8.Y > 0f) ? 2 : 4);
							}
						}
						if ((this.velocity.Y != 0f && !flag14) || this.ai[1] <= 0f)
						{
							this.ai[0] = 0f;
							this.ai[1] = 0f;
						}
						else if (!flag13)
						{
							this.velocity.X = this.velocity.X * 0.9f;
							this.spriteDirection = this.direction * num23;
						}
					}
					if ((this.ai[0] <= 0f || flag13) && (this.velocity.Y == 0f || flag14) && this.ai[1] <= 0f && targetData.Type != NPCTargetType.None)
					{
						bool flag36 = Collision.CanHit(this.position, this.width, this.height, targetData.Position, targetData.Width, targetData.Height);
						if (flag36)
						{
							Vector2 vector11 = targetData.Center - base.Center;
							float num49 = vector11.Length();
							if (num49 < num12)
							{
								this.netUpdate = true;
								this.velocity.X = this.velocity.X * 0.5f;
								this.ai[0] = 3f;
								this.ai[1] = (float)num8;
								if (Math.Abs(vector11.Y) > Math.Abs(vector11.X) * 2f)
								{
									this.ai[0] = (float)((vector11.Y > 0f) ? 1 : 5);
								}
								else if (Math.Abs(vector11.X) > Math.Abs(vector11.Y) * 2f)
								{
									this.ai[0] = 3f;
								}
								else
								{
									this.ai[0] = (float)((vector11.Y > 0f) ? 2 : 4);
								}
							}
						}
					}
					if (this.ai[0] <= 0f || flag13)
					{
						bool flag37 = base.Distance(targetData.Center) < num13;
						if (flag37 && Collision.CanHitLine(this.position, this.width, this.height, targetData.Position, targetData.Width, targetData.Height))
						{
							this.ai[3] = 0f;
						}
						if (this.velocity.X < -num19 || this.velocity.X > num19 || flag37)
						{
							if (this.velocity.Y == 0f)
							{
								this.velocity.X = this.velocity.X * num21;
							}
						}
						else if ((this.velocity.X < num19 && this.direction == 1) || (this.velocity.X > -num19 && this.direction == -1))
						{
							this.velocity.X = MathHelper.Clamp(this.velocity.X + num20 * (float)this.direction, -num19, num19);
						}
					}
				}
			}
			if (this.velocity.Y == 0f)
			{
				int num50 = (int)(base.Bottom.Y + 7f) / 16;
				int num51 = (int)base.Left.X / 16;
				int num52 = (int)base.Right.X / 16;
				for (int num53 = num51; num53 <= num52; num53++)
				{
					num53 = Utils.Clamp<int>(num53, 0, Main.maxTilesX);
					num50 = Utils.Clamp<int>(num50, 0, Main.maxTilesY);
					Tile tile = Main.tile[num53, num50];
					if (tile == null)
					{
						return;
					}
					if (tile.nactive() && Main.tileSolid[(int)tile.type])
					{
						flag34 = true;
						break;
					}
				}
			}
			Point point2 = base.Center.ToTileCoordinates();
			if (WorldGen.InWorld(point2.X, point2.Y, 5) && !this.noGravity)
			{
				Vector2 vector12;
				int width;
				int height;
				this.GetTileCollisionParameters(out vector12, out width, out height);
				Vector2 value = this.position - vector12;
				Collision.StepUp(ref vector12, ref this.velocity, width, height, ref this.stepSpeed, ref this.gfxOffY, 1, false, 0);
				this.position = vector12 + value;
			}
			if (flag34)
			{
				int num54 = (int)(base.Center.X + num22 * (float)this.direction) / 16;
				int num55 = ((int)base.Bottom.Y - 15) / 16;
				bool flag38 = this.position.Y + (float)this.height - (float)(num55 * 16) > 20f;
				Tile tileSafely = Framing.GetTileSafely(num54 + this.direction, num55 + 1);
				Tile tileSafely2 = Framing.GetTileSafely(num54, num55 + 1);
				Tile tileSafely3 = Framing.GetTileSafely(num54, num55);
				Tile tileSafely4 = Framing.GetTileSafely(num54, num55 - 1);
				Tile tileSafely5 = Framing.GetTileSafely(num54, num55 - 2);
				Tile tileSafely6 = Framing.GetTileSafely(num54, num55 - 3);
				if (flag8 && tileSafely4.nactive() && (tileSafely4.type == 10 || tileSafely4.type == 388))
				{
					this.ai[0] += 1f;
					this.ai[3] = 0f;
					if (this.ai[0] >= 60f)
					{
						if (flag9)
						{
							this.ai[1] = 0f;
						}
						int num56 = 5;
						if (Main.tile[num54, num55 - 1].type == 388)
						{
							num56 = 2;
						}
						this.velocity.X = 0.5f * (float)(-(float)this.direction);
						this.ai[1] += (float)num56;
						bool flag39 = false;
						if (this.ai[1] >= 10f)
						{
							flag39 = true;
							this.ai[1] = 10f;
						}
						if (flag10)
						{
							flag39 = true;
						}
						WorldGen.KillTile(num54, num55 - 1, true, false, false);
						if (Main.netMode != 1 && flag39)
						{
							if (flag11)
							{
								WorldGen.KillTile(num54, num55 - 1, false, false, false);
								if (Main.netMode == 2)
								{
									NetMessage.SendData(17, -1, -1, "", 0, (float)num54, (float)(num55 - 1), 0f, 0, 0, 0);
								}
							}
							else
							{
								if (tileSafely4.type == 10)
								{
									bool flag40 = WorldGen.OpenDoor(num54, num55 - 1, this.direction);
									if (!flag40)
									{
										this.ai[3] = (float)num17;
										this.netUpdate = true;
									}
									if (Main.netMode == 2 && flag40)
									{
										NetMessage.SendData(19, -1, -1, "", 0, (float)num54, (float)(num55 - 1), (float)this.direction, 0, 0, 0);
									}
								}
								if (tileSafely4.type == 388)
								{
									bool flag41 = WorldGen.ShiftTallGate(num54, num55 - 1, false);
									if (!flag41)
									{
										this.ai[3] = (float)num17;
										this.netUpdate = true;
									}
									if (Main.netMode == 2 && flag41)
									{
										NetMessage.SendData(19, -1, -1, "", 4, (float)num54, (float)(num55 - 1), (float)this.direction, 0, 0, 0);
									}
								}
							}
						}
					}
				}
				else
				{
					int num57 = this.spriteDirection * num23;
					if (this.velocity.X * (float)num57 > 0f)
					{
						if (this.height >= 32 && tileSafely5.nactive() && Main.tileSolid[(int)tileSafely5.type])
						{
							this.netUpdate = true;
							this.velocity.Y = -7f;
							if (tileSafely6.nactive() && Main.tileSolid[(int)tileSafely6.type])
							{
								this.velocity.Y = -8f;
							}
						}
						else if (tileSafely4.nactive() && Main.tileSolid[(int)tileSafely4.type])
						{
							this.velocity.Y = -6f;
							this.netUpdate = true;
						}
						else if (flag38 && tileSafely3.nactive() && !tileSafely3.topSlope() && Main.tileSolid[(int)tileSafely3.type])
						{
							this.velocity.Y = -5f;
							this.netUpdate = true;
						}
						else if (flag24 && (!tileSafely2.nactive() || !Main.tileSolid[(int)tileSafely2.type]) && (!tileSafely.nactive() || !Main.tileSolid[(int)tileSafely.type]))
						{
							this.velocity.X = this.velocity.X * 1.5f;
							this.velocity.Y = -8f;
							this.netUpdate = true;
						}
						else if (flag8)
						{
							this.ai[0] = 0f;
							this.ai[1] = 0f;
						}
						if (this.velocity.Y == 0f && flag && this.ai[3] == 1f)
						{
							this.velocity.Y = -5f;
							this.netUpdate = true;
						}
					}
					if (flag25 && this.velocity.Y == 0f && Math.Abs(targetData.Center.X - base.Center.X) < 100f && Math.Abs(targetData.Center.Y - base.Center.Y) < 50f && Math.Abs(this.velocity.X) >= 1f && this.velocity.X * (float)this.direction > 0f)
					{
						this.velocity.X = MathHelper.Clamp(this.velocity.X * 2f, -3f, 3f);
						this.velocity.Y = -4f;
						this.netAlways = true;
					}
				}
			}
			else if (flag8)
			{
				this.ai[0] = 0f;
				this.ai[1] = 0f;
			}
			if (flag2 && this.noTileCollide)
			{
				if (flag27)
				{
					if (this.alpha < 60)
					{
						this.alpha += 20;
					}
					this.localAI[3] = 40f;
				}
				bool flag42 = this.velocity.Y == 0f;
				if (Math.Abs(base.Center.X - targetData.Center.X) > 200f)
				{
					this.spriteDirection = (this.direction = ((targetData.Center.X > base.Center.X) ? 1 : -1));
					this.velocity.X = MathHelper.Lerp(this.velocity.X, (float)this.direction, 0.05f);
				}
				int num58 = 80;
				int height2 = this.height;
				Vector2 position2 = new Vector2(base.Center.X - (float)(num58 / 2), this.position.Y + (float)this.height - (float)height2);
				bool flag43 = false;
				if (this.position.Y + (float)this.height < targetData.Position.Y + (float)targetData.Height - 16f)
				{
					flag43 = true;
				}
				if (flag43)
				{
					this.velocity.Y = this.velocity.Y + 0.5f;
				}
				else if (Collision.SolidCollision(position2, num58, height2) || targetData.Center.Y - base.Center.Y < -100f)
				{
					if (this.velocity.Y > 0f)
					{
						this.velocity.Y = 0f;
					}
					if ((double)this.velocity.Y > -0.2)
					{
						this.velocity.Y = this.velocity.Y - 0.025f;
					}
					else
					{
						this.velocity.Y = this.velocity.Y - 0.2f;
					}
					if (this.velocity.Y < -4f)
					{
						this.velocity.Y = -4f;
					}
				}
				else
				{
					if (this.velocity.Y < 0f)
					{
						this.velocity.Y = 0f;
					}
					if ((double)this.velocity.Y < 0.1)
					{
						this.velocity.Y = this.velocity.Y + 0.025f;
					}
					else
					{
						this.velocity.Y = this.velocity.Y + 0.5f;
					}
				}
				if (this.velocity.Y > 10f)
				{
					this.velocity.Y = 10f;
				}
				if (flag42)
				{
					this.velocity.Y = 0f;
				}
			}
		}

		private void AI_084_LunaticCultist()
		{
			if (this.ai[0] != -1f && Main.rand.Next(1000) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, Main.rand.Next(88, 92), 1f, 0f);
			}
			bool expertMode = Main.expertMode;
			bool flag = this.life <= this.lifeMax / 2;
			int num = 120;
			int num2 = 35;
			if (expertMode)
			{
				num = 90;
				num2 = 25;
			}
			int num3 = 18;
			int num4 = 3;
			int num5 = 30;
			if (expertMode)
			{
				num3 = 12;
				num4 = 4;
				num5 = 20;
			}
			int num6 = 80;
			int num7 = 45;
			if (expertMode)
			{
				num6 = 40;
				num7 = 30;
			}
			int num8 = 20;
			int num9 = 2;
			if (expertMode)
			{
				num8 = 30;
				num9 = 2;
			}
			int num10 = 20;
			int num11 = 3;
			bool flag2 = this.type == 439;
			bool flag3 = false;
			bool flag4 = false;
			if (flag)
			{
				this.defense = (int)((float)this.defDefense * 0.65f);
			}
			if (!flag2)
			{
				bool flag5 = this.ai[3] < 0f || !Main.npc[(int)this.ai[3]].active || Main.npc[(int)this.ai[3]].type != 439;
				if (flag5)
				{
					this.life = 0;
					this.HitEffect(0, 10.0);
					this.active = false;
					return;
				}
				this.ai[0] = Main.npc[(int)this.ai[3]].ai[0];
				this.ai[1] = Main.npc[(int)this.ai[3]].ai[1];
				if (this.ai[0] == 5f)
				{
					if (this.justHit)
					{
						this.life = 0;
						this.HitEffect(0, 10.0);
						this.active = false;
						if (Main.netMode != 1)
						{
							NetMessage.SendData(23, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
						}
						NPC nPC = Main.npc[(int)this.ai[3]];
						nPC.ai[0] = 6f;
						nPC.ai[1] = 0f;
						nPC.netUpdate = true;
					}
				}
				else
				{
					flag3 = true;
					flag4 = true;
				}
			}
			else if (this.ai[0] == 5f && this.ai[1] >= 120f && this.ai[1] < 420f && this.justHit)
			{
				this.ai[0] = 0f;
				this.ai[1] = 0f;
				this.ai[3] += 1f;
				this.velocity = Vector2.Zero;
				this.netUpdate = true;
				List<int> list = new List<int>();
				for (int i = 0; i < 200; i++)
				{
					if (Main.npc[i].active && Main.npc[i].type == 440 && Main.npc[i].ai[3] == (float)this.whoAmI)
					{
						list.Add(i);
					}
				}
				int num12 = 10;
				if (Main.expertMode)
				{
					num12 = 3;
				}
				foreach (int current in list)
				{
					NPC nPC2 = Main.npc[current];
					if (nPC2.localAI[1] == this.localAI[1] && num12 > 0)
					{
						num12--;
						nPC2.life = 0;
						nPC2.HitEffect(0, 10.0);
						nPC2.active = false;
						if (Main.netMode != 1)
						{
							NetMessage.SendData(23, -1, -1, "", current, 0f, 0f, 0f, 0, 0, 0);
						}
					}
					else if (num12 > 0)
					{
						num12--;
						nPC2.life = 0;
						nPC2.HitEffect(0, 10.0);
						nPC2.active = false;
					}
				}
				Main.projectile[(int)this.ai[2]].ai[1] = -1f;
				Main.projectile[(int)this.ai[2]].netUpdate = true;
			}
			Vector2 center = base.Center;
			Player player = Main.player[this.target];
			if (this.target < 0 || this.target == 255 || player.dead || !player.active)
			{
				this.TargetClosest(false);
				player = Main.player[this.target];
				this.netUpdate = true;
			}
			if (player.dead || Vector2.Distance(player.Center, center) > 5600f)
			{
				this.life = 0;
				this.HitEffect(0, 10.0);
				this.active = false;
				if (Main.netMode != 1)
				{
					NetMessage.SendData(28, -1, -1, "", this.whoAmI, -1f, 0f, 0f, 0, 0, 0);
				}
				List<int> list2 = new List<int>();
				list2.Add(this.whoAmI);
				for (int j = 0; j < 200; j++)
				{
					if (Main.npc[j].active && Main.npc[j].type == 440 && Main.npc[j].ai[3] == (float)this.whoAmI)
					{
						Main.npc[j].life = 0;
						Main.npc[j].HitEffect(0, 10.0);
						Main.npc[j].active = false;
						if (Main.netMode != 1)
						{
							NetMessage.SendData(28, -1, -1, "", this.whoAmI, -1f, 0f, 0f, 0, 0, 0);
						}
					}
				}
			}
			float num13 = this.ai[3];
			if (this.localAI[0] == 0f)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, 89, 1f, 0f);
				this.localAI[0] = 1f;
				this.alpha = 255;
				this.rotation = 0f;
				if (Main.netMode != 1)
				{
					this.ai[0] = -1f;
					this.netUpdate = true;
				}
			}
			if (this.ai[0] == -1f)
			{
				this.alpha -= 5;
				if (this.alpha < 0)
				{
					this.alpha = 0;
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 420f)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.netUpdate = true;
				}
				else if (this.ai[1] > 360f)
				{
					this.velocity *= 0.95f;
					if (this.localAI[2] != 13f)
					{
						Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, 105, 1f, 0f);
					}
					this.localAI[2] = 13f;
				}
				else if (this.ai[1] > 300f)
				{
					this.velocity = -Vector2.UnitY;
					this.localAI[2] = 10f;
				}
				else if (this.ai[1] > 120f)
				{
					this.localAI[2] = 1f;
				}
				else
				{
					this.localAI[2] = 0f;
				}
				flag3 = true;
				flag4 = true;
			}
			if (this.ai[0] == 0f)
			{
				if (this.ai[1] == 0f)
				{
					this.TargetClosest(false);
				}
				this.localAI[2] = 10f;
				int num14 = Math.Sign(player.Center.X - center.X);
				if (num14 != 0)
				{
					this.direction = (this.spriteDirection = num14);
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 40f && flag2)
				{
					int num15 = 0;
					if (flag)
					{
						switch ((int)this.ai[3])
						{
						case 0:
							num15 = 0;
							break;
						case 1:
							num15 = 1;
							break;
						case 2:
							num15 = 0;
							break;
						case 3:
							num15 = 5;
							break;
						case 4:
							num15 = 0;
							break;
						case 5:
							num15 = 3;
							break;
						case 6:
							num15 = 0;
							break;
						case 7:
							num15 = 5;
							break;
						case 8:
							num15 = 0;
							break;
						case 9:
							num15 = 2;
							break;
						case 10:
							num15 = 0;
							break;
						case 11:
							num15 = 3;
							break;
						case 12:
							num15 = 0;
							break;
						case 13:
							num15 = 4;
							this.ai[3] = -1f;
							break;
						default:
							this.ai[3] = -1f;
							break;
						}
					}
					else
					{
						switch ((int)this.ai[3])
						{
						case 0:
							num15 = 0;
							break;
						case 1:
							num15 = 1;
							break;
						case 2:
							num15 = 0;
							break;
						case 3:
							num15 = 2;
							break;
						case 4:
							num15 = 0;
							break;
						case 5:
							num15 = 3;
							break;
						case 6:
							num15 = 0;
							break;
						case 7:
							num15 = 1;
							break;
						case 8:
							num15 = 0;
							break;
						case 9:
							num15 = 2;
							break;
						case 10:
							num15 = 0;
							break;
						case 11:
							num15 = 4;
							this.ai[3] = -1f;
							break;
						default:
							this.ai[3] = -1f;
							break;
						}
					}
					int maxValue = 6;
					if (this.life < this.lifeMax / 3)
					{
						maxValue = 4;
					}
					if (this.life < this.lifeMax / 4)
					{
						maxValue = 3;
					}
					if (expertMode && flag && Main.rand.Next(maxValue) == 0 && num15 != 0 && num15 != 4 && num15 != 5 && NPC.CountNPCS(523) < 10)
					{
						num15 = 6;
					}
					if (num15 == 0)
					{
						float num16 = (float)Math.Ceiling((double)((player.Center + new Vector2(0f, -100f) - center).Length() / 50f));
						if (num16 == 0f)
						{
							num16 = 1f;
						}
						List<int> list3 = new List<int>();
						int num17 = 0;
						list3.Add(this.whoAmI);
						for (int k = 0; k < 200; k++)
						{
							if (Main.npc[k].active && Main.npc[k].type == 440 && Main.npc[k].ai[3] == (float)this.whoAmI)
							{
								list3.Add(k);
							}
						}
						bool flag6 = list3.Count % 2 == 0;
						foreach (int current2 in list3)
						{
							NPC nPC3 = Main.npc[current2];
							Vector2 center2 = nPC3.Center;
							float num18 = (float)((num17 + flag6.ToInt() + 1) / 2) * 6.28318548f * 0.4f / (float)list3.Count;
							if (num17 % 2 == 1)
							{
								num18 *= -1f;
							}
							if (list3.Count == 1)
							{
								num18 = 0f;
							}
							Vector2 value = new Vector2(0f, -1f).RotatedBy((double)num18, default(Vector2)) * new Vector2(300f, 200f);
							Vector2 value2 = player.Center + value - center2;
							nPC3.ai[0] = 1f;
							nPC3.ai[1] = num16 * 2f;
							nPC3.velocity = value2 / num16;
							if (this.whoAmI >= nPC3.whoAmI)
							{
								nPC3.position -= nPC3.velocity;
							}
							nPC3.netUpdate = true;
							num17++;
						}
					}
					if (num15 == 1)
					{
						this.ai[0] = 3f;
						this.ai[1] = 0f;
					}
					else if (num15 == 2)
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
					}
					else if (num15 == 3)
					{
						this.ai[0] = 4f;
						this.ai[1] = 0f;
					}
					else if (num15 == 4)
					{
						this.ai[0] = 5f;
						this.ai[1] = 0f;
					}
					if (num15 == 5)
					{
						this.ai[0] = 7f;
						this.ai[1] = 0f;
					}
					if (num15 == 6)
					{
						this.ai[0] = 8f;
						this.ai[1] = 0f;
					}
					this.netUpdate = true;
				}
			}
			else if (this.ai[0] == 1f)
			{
				flag3 = true;
				this.localAI[2] = 10f;
				if ((float)((int)this.ai[1]) % 2f != 0f && this.ai[1] != 1f)
				{
					this.position -= this.velocity;
				}
				this.ai[1] -= 1f;
				if (this.ai[1] <= 0f)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[3] += 1f;
					this.velocity = Vector2.Zero;
					this.netUpdate = true;
				}
			}
			else if (this.ai[0] == 2f)
			{
				this.localAI[2] = 11f;
				Vector2 vec = Vector2.Normalize(player.Center - center);
				if (vec.HasNaNs())
				{
					vec = new Vector2((float)this.direction, 0f);
				}
				if (this.ai[1] >= 4f && flag2 && (int)(this.ai[1] - 4f) % num == 0)
				{
					if (Main.netMode != 1)
					{
						List<int> list4 = new List<int>();
						for (int l = 0; l < 200; l++)
						{
							if (Main.npc[l].active && Main.npc[l].type == 440 && Main.npc[l].ai[3] == (float)this.whoAmI)
							{
								list4.Add(l);
							}
						}
						foreach (int current3 in list4)
						{
							NPC nPC4 = Main.npc[current3];
							Vector2 center3 = nPC4.Center;
							int num19 = Math.Sign(player.Center.X - center3.X);
							if (num19 != 0)
							{
								nPC4.direction = (nPC4.spriteDirection = num19);
							}
							if (Main.netMode != 1)
							{
								vec = Vector2.Normalize(player.Center - center3 + player.velocity * 20f);
								if (vec.HasNaNs())
								{
									vec = new Vector2((float)this.direction, 0f);
								}
								Vector2 vector = center3 + new Vector2((float)(this.direction * 30), 12f);
								for (int m = 0; m < 1; m++)
								{
									Vector2 spinninpoint = vec * (6f + (float)Main.rand.NextDouble() * 4f);
									spinninpoint = spinninpoint.RotatedByRandom(0.52359879016876221);
									Projectile.NewProjectile(vector.X, vector.Y, spinninpoint.X, spinninpoint.Y, 468, 18, 0f, Main.myPlayer, 0f, 0f);
								}
							}
						}
					}
					if (Main.netMode != 1)
					{
						vec = Vector2.Normalize(player.Center - center + player.velocity * 20f);
						if (vec.HasNaNs())
						{
							vec = new Vector2((float)this.direction, 0f);
						}
						Vector2 vector2 = base.Center + new Vector2((float)(this.direction * 30), 12f);
						for (int n = 0; n < 1; n++)
						{
							Vector2 vector3 = vec * 4f;
							Projectile.NewProjectile(vector2.X, vector2.Y, vector3.X, vector3.Y, 464, num2, 0f, Main.myPlayer, 0f, 1f);
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= (float)(4 + num))
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[3] += 1f;
					this.velocity = Vector2.Zero;
					this.netUpdate = true;
				}
			}
			else if (this.ai[0] == 3f)
			{
				this.localAI[2] = 11f;
				Vector2 vec2 = Vector2.Normalize(player.Center - center);
				if (vec2.HasNaNs())
				{
					vec2 = new Vector2((float)this.direction, 0f);
				}
				if (this.ai[1] >= 4f && flag2 && (int)(this.ai[1] - 4f) % num3 == 0)
				{
					int num20 = (int)(this.ai[1] - 4f) / num3;
					if (num20 == 2)
					{
						List<int> list5 = new List<int>();
						for (int num21 = 0; num21 < 200; num21++)
						{
							if (Main.npc[num21].active && Main.npc[num21].type == 440 && Main.npc[num21].ai[3] == (float)this.whoAmI)
							{
								list5.Add(num21);
							}
						}
						if (Main.netMode != 1)
						{
							foreach (int current4 in list5)
							{
								NPC nPC5 = Main.npc[current4];
								Vector2 center4 = nPC5.Center;
								int num22 = Math.Sign(player.Center.X - center4.X);
								if (num22 != 0)
								{
									nPC5.direction = (nPC5.spriteDirection = num22);
								}
								if (Main.netMode != 1)
								{
									vec2 = Vector2.Normalize(player.Center - center4 + player.velocity * 20f);
									if (vec2.HasNaNs())
									{
										vec2 = new Vector2((float)this.direction, 0f);
									}
									Vector2 vector4 = center4 + new Vector2((float)(this.direction * 30), 12f);
									for (int num23 = 0; num23 < 1; num23++)
									{
										Vector2 spinninpoint2 = vec2 * (6f + (float)Main.rand.NextDouble() * 4f);
										spinninpoint2 = spinninpoint2.RotatedByRandom(0.52359879016876221);
										Projectile.NewProjectile(vector4.X, vector4.Y, spinninpoint2.X, spinninpoint2.Y, 468, 18, 0f, Main.myPlayer, 0f, 0f);
									}
								}
							}
						}
					}
					int num24 = Math.Sign(player.Center.X - center.X);
					if (num24 != 0)
					{
						this.direction = (this.spriteDirection = num24);
					}
					if (Main.netMode != 1)
					{
						vec2 = Vector2.Normalize(player.Center - center + player.velocity * 20f);
						if (vec2.HasNaNs())
						{
							vec2 = new Vector2((float)this.direction, 0f);
						}
						Vector2 vector5 = base.Center + new Vector2((float)(this.direction * 30), 12f);
						for (int num25 = 0; num25 < 1; num25++)
						{
							Vector2 spinninpoint3 = vec2 * (6f + (float)Main.rand.NextDouble() * 4f);
							spinninpoint3 = spinninpoint3.RotatedByRandom(0.52359879016876221);
							Projectile.NewProjectile(vector5.X, vector5.Y, spinninpoint3.X, spinninpoint3.Y, 467, num5, 0f, Main.myPlayer, 0f, 0f);
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= (float)(4 + num3 * num4))
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[3] += 1f;
					this.velocity = Vector2.Zero;
					this.netUpdate = true;
				}
			}
			else if (this.ai[0] == 4f)
			{
				if (flag2)
				{
					this.localAI[2] = 12f;
				}
				else
				{
					this.localAI[2] = 11f;
				}
				if (this.ai[1] == 20f && flag2 && Main.netMode != 1)
				{
					List<int> list6 = new List<int>();
					for (int num26 = 0; num26 < 200; num26++)
					{
						if (Main.npc[num26].active && Main.npc[num26].type == 440 && Main.npc[num26].ai[3] == (float)this.whoAmI)
						{
							list6.Add(num26);
						}
					}
					foreach (int current5 in list6)
					{
						NPC nPC6 = Main.npc[current5];
						Vector2 center5 = nPC6.Center;
						int num27 = Math.Sign(player.Center.X - center5.X);
						if (num27 != 0)
						{
							nPC6.direction = (nPC6.spriteDirection = num27);
						}
						if (Main.netMode != 1)
						{
							Vector2 vec3 = Vector2.Normalize(player.Center - center5 + player.velocity * 20f);
							if (vec3.HasNaNs())
							{
								vec3 = new Vector2((float)this.direction, 0f);
							}
							Vector2 vector6 = center5 + new Vector2((float)(this.direction * 30), 12f);
							for (int num28 = 0; num28 < 1; num28++)
							{
								Vector2 spinninpoint4 = vec3 * (6f + (float)Main.rand.NextDouble() * 4f);
								spinninpoint4 = spinninpoint4.RotatedByRandom(0.52359879016876221);
								Projectile.NewProjectile(vector6.X, vector6.Y, spinninpoint4.X, spinninpoint4.Y, 468, 18, 0f, Main.myPlayer, 0f, 0f);
							}
						}
					}
					if ((int)(this.ai[1] - 20f) % num6 == 0)
					{
						Projectile.NewProjectile(base.Center.X, base.Center.Y - 100f, 0f, 0f, 465, num7, 0f, Main.myPlayer, 0f, 0f);
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= (float)(20 + num6))
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[3] += 1f;
					this.velocity = Vector2.Zero;
					this.netUpdate = true;
				}
			}
			else if (this.ai[0] == 5f)
			{
				this.localAI[2] = 10f;
				Vector2 vec4 = Vector2.Normalize(player.Center - center);
				if (vec4.HasNaNs())
				{
					vec4 = new Vector2((float)this.direction, 0f);
				}
				if (this.ai[1] >= 0f && this.ai[1] < 30f)
				{
					flag3 = true;
					flag4 = true;
					float num29 = (this.ai[1] - 0f) / 30f;
					this.alpha = (int)(num29 * 255f);
				}
				else if (this.ai[1] >= 30f && this.ai[1] < 90f)
				{
					if (this.ai[1] == 30f && Main.netMode != 1 && flag2)
					{
						this.localAI[1] += 1f;
						Vector2 spinningpoint = new Vector2(180f, 0f);
						List<int> list7 = new List<int>();
						for (int num30 = 0; num30 < 200; num30++)
						{
							if (Main.npc[num30].active && Main.npc[num30].type == 440 && Main.npc[num30].ai[3] == (float)this.whoAmI)
							{
								list7.Add(num30);
							}
						}
						int num31 = 6 - list7.Count;
						if (num31 > 2)
						{
							num31 = 2;
						}
						int num32 = list7.Count + num31 + 1;
						float[] array = new float[num32];
						for (int num33 = 0; num33 < array.Length; num33++)
						{
							array[num33] = Vector2.Distance(base.Center + spinningpoint.RotatedBy((double)((float)num33 * 6.28318548f / (float)num32 - 1.57079637f), default(Vector2)), player.Center);
						}
						int num34 = 0;
						for (int num35 = 1; num35 < array.Length; num35++)
						{
							if (array[num34] > array[num35])
							{
								num34 = num35;
							}
						}
						if (num34 < num32 / 2)
						{
							num34 += num32 / 2;
						}
						else
						{
							num34 -= num32 / 2;
						}
						int num36 = num31;
						for (int num37 = 0; num37 < array.Length; num37++)
						{
							if (num34 != num37)
							{
								Vector2 center6 = base.Center + spinningpoint.RotatedBy((double)((float)num37 * 6.28318548f / (float)num32 - 1.57079637f), default(Vector2));
								if (num36-- > 0)
								{
									int num38 = NPC.NewNPC((int)center6.X, (int)center6.Y + this.height / 2, 440, this.whoAmI, 0f, 0f, 0f, 0f, 255);
									Main.npc[num38].ai[3] = (float)this.whoAmI;
									Main.npc[num38].netUpdate = true;
									Main.npc[num38].localAI[1] = this.localAI[1];
								}
								else
								{
									int num39 = list7[-num36 - 1];
									Main.npc[num39].Center = center6;
									NetMessage.SendData(23, -1, -1, "", num39, 0f, 0f, 0f, 0, 0, 0);
								}
							}
						}
						this.ai[2] = (float)Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 490, 0, 0f, Main.myPlayer, 0f, (float)this.whoAmI);
						base.Center += spinningpoint.RotatedBy((double)((float)num34 * 6.28318548f / (float)num32 - 1.57079637f), default(Vector2));
						this.netUpdate = true;
						list7.Clear();
					}
					flag3 = true;
					flag4 = true;
					this.alpha = 255;
					if (flag2)
					{
						Vector2 value3 = Main.projectile[(int)this.ai[2]].Center;
						value3 -= base.Center;
						if (value3 == Vector2.Zero)
						{
							value3 = -Vector2.UnitY;
						}
						value3.Normalize();
						if (Math.Abs(value3.Y) < 0.77f)
						{
							this.localAI[2] = 11f;
						}
						else if (value3.Y < 0f)
						{
							this.localAI[2] = 12f;
						}
						else
						{
							this.localAI[2] = 10f;
						}
						int num40 = Math.Sign(value3.X);
						if (num40 != 0)
						{
							this.direction = (this.spriteDirection = num40);
						}
					}
					else
					{
						Vector2 value4 = Main.projectile[(int)Main.npc[(int)this.ai[3]].ai[2]].Center;
						value4 -= base.Center;
						if (value4 == Vector2.Zero)
						{
							value4 = -Vector2.UnitY;
						}
						value4.Normalize();
						if (Math.Abs(value4.Y) < 0.77f)
						{
							this.localAI[2] = 11f;
						}
						else if (value4.Y < 0f)
						{
							this.localAI[2] = 12f;
						}
						else
						{
							this.localAI[2] = 10f;
						}
						int num41 = Math.Sign(value4.X);
						if (num41 != 0)
						{
							this.direction = (this.spriteDirection = num41);
						}
					}
				}
				else if (this.ai[1] >= 90f && this.ai[1] < 120f)
				{
					flag3 = true;
					flag4 = true;
					float num42 = (this.ai[1] - 90f) / 30f;
					this.alpha = 255 - (int)(num42 * 255f);
				}
				else if (this.ai[1] >= 120f && this.ai[1] < 420f)
				{
					flag4 = true;
					this.alpha = 0;
					if (flag2)
					{
						Vector2 value5 = Main.projectile[(int)this.ai[2]].Center;
						value5 -= base.Center;
						if (value5 == Vector2.Zero)
						{
							value5 = -Vector2.UnitY;
						}
						value5.Normalize();
						if (Math.Abs(value5.Y) < 0.77f)
						{
							this.localAI[2] = 11f;
						}
						else if (value5.Y < 0f)
						{
							this.localAI[2] = 12f;
						}
						else
						{
							this.localAI[2] = 10f;
						}
						int num43 = Math.Sign(value5.X);
						if (num43 != 0)
						{
							this.direction = (this.spriteDirection = num43);
						}
					}
					else
					{
						Vector2 value6 = Main.projectile[(int)Main.npc[(int)this.ai[3]].ai[2]].Center;
						value6 -= base.Center;
						if (value6 == Vector2.Zero)
						{
							value6 = -Vector2.UnitY;
						}
						value6.Normalize();
						if (Math.Abs(value6.Y) < 0.77f)
						{
							this.localAI[2] = 11f;
						}
						else if (value6.Y < 0f)
						{
							this.localAI[2] = 12f;
						}
						else
						{
							this.localAI[2] = 10f;
						}
						int num44 = Math.Sign(value6.X);
						if (num44 != 0)
						{
							this.direction = (this.spriteDirection = num44);
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 420f)
				{
					flag4 = true;
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[3] += 1f;
					this.velocity = Vector2.Zero;
					this.netUpdate = true;
				}
			}
			else if (this.ai[0] == 6f)
			{
				this.localAI[2] = 13f;
				this.ai[1] += 1f;
				if (this.ai[1] >= 120f)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[3] += 1f;
					this.velocity = Vector2.Zero;
					this.netUpdate = true;
				}
			}
			else if (this.ai[0] == 7f)
			{
				this.localAI[2] = 11f;
				Vector2 vec5 = Vector2.Normalize(player.Center - center);
				if (vec5.HasNaNs())
				{
					vec5 = new Vector2((float)this.direction, 0f);
				}
				if (this.ai[1] >= 4f && flag2 && (int)(this.ai[1] - 4f) % num8 == 0)
				{
					int num45 = (int)(this.ai[1] - 4f) / num8;
					if (num45 == 2)
					{
						List<int> list8 = new List<int>();
						for (int num46 = 0; num46 < 200; num46++)
						{
							if (Main.npc[num46].active && Main.npc[num46].type == 440 && Main.npc[num46].ai[3] == (float)this.whoAmI)
							{
								list8.Add(num46);
							}
						}
						foreach (int current6 in list8)
						{
							NPC nPC7 = Main.npc[current6];
							Vector2 center7 = nPC7.Center;
							int num47 = Math.Sign(player.Center.X - center7.X);
							if (num47 != 0)
							{
								nPC7.direction = (nPC7.spriteDirection = num47);
							}
							if (Main.netMode != 1)
							{
								vec5 = Vector2.Normalize(player.Center - center7 + player.velocity * 20f);
								if (vec5.HasNaNs())
								{
									vec5 = new Vector2((float)this.direction, 0f);
								}
								Vector2 vector7 = center7 + new Vector2((float)(this.direction * 30), 12f);
								int num48 = 0;
								while ((float)num48 < 5f)
								{
									Vector2 spinninpoint5 = vec5 * (6f + (float)Main.rand.NextDouble() * 4f);
									spinninpoint5 = spinninpoint5.RotatedByRandom(1.2566370964050293);
									Projectile.NewProjectile(vector7.X, vector7.Y, spinninpoint5.X, spinninpoint5.Y, 468, 18, 0f, Main.myPlayer, 0f, 0f);
									num48++;
								}
							}
						}
					}
					int num49 = Math.Sign(player.Center.X - center.X);
					if (num49 != 0)
					{
						this.direction = (this.spriteDirection = num49);
					}
					if (Main.netMode != 1)
					{
						vec5 = Vector2.Normalize(player.Center - center + player.velocity * 20f);
						if (vec5.HasNaNs())
						{
							vec5 = new Vector2((float)this.direction, 0f);
						}
						Vector2 vector8 = base.Center + new Vector2((float)(this.direction * 30), 12f);
						float scaleFactor = 8f;
						float num50 = 0.251327425f;
						int num51 = 0;
						while ((float)num51 < 5f)
						{
							Vector2 vector9 = vec5 * scaleFactor;
							vector9 = vector9.RotatedBy((double)(num50 * (float)num51 - (1.2566371f - num50) / 2f), default(Vector2));
							float ai = (Main.rand.NextFloat() - 0.5f) * 0.3f * 6.28318548f / 60f;
							int num52 = NPC.NewNPC((int)vector8.X, (int)vector8.Y + 7, 522, 0, 0f, ai, vector9.X, vector9.Y, 255);
							Main.npc[num52].velocity = vector9;
							num51++;
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= (float)(4 + num8 * num9))
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[3] += 1f;
					this.velocity = Vector2.Zero;
					this.netUpdate = true;
				}
			}
			else if (this.ai[0] == 8f)
			{
				this.localAI[2] = 13f;
				if (this.ai[1] >= 4f && flag2 && (int)(this.ai[1] - 4f) % num10 == 0)
				{
					List<int> list9 = new List<int>();
					for (int num53 = 0; num53 < 200; num53++)
					{
						if (Main.npc[num53].active && Main.npc[num53].type == 440 && Main.npc[num53].ai[3] == (float)this.whoAmI)
						{
							list9.Add(num53);
						}
					}
					int num54 = list9.Count + 1;
					if (num54 > 3)
					{
						num54 = 3;
					}
					int num55 = Math.Sign(player.Center.X - center.X);
					if (num55 != 0)
					{
						this.direction = (this.spriteDirection = num55);
					}
					if (Main.netMode != 1)
					{
						for (int num56 = 0; num56 < num54; num56++)
						{
							Point point = base.Center.ToTileCoordinates();
							Point point2 = Main.player[this.target].Center.ToTileCoordinates();
							Vector2 vector10 = Main.player[this.target].Center - base.Center;
							int num57 = 20;
							int num58 = 3;
							int num59 = 7;
							int num60 = 2;
							int num61 = 0;
							bool flag7 = false;
							if (vector10.Length() > 2000f)
							{
								flag7 = true;
							}
							while (!flag7 && num61 < 100)
							{
								num61++;
								int num62 = Main.rand.Next(point2.X - num57, point2.X + num57 + 1);
								int num63 = Main.rand.Next(point2.Y - num57, point2.Y + num57 + 1);
								if ((num63 < point2.Y - num59 || num63 > point2.Y + num59 || num62 < point2.X - num59 || num62 > point2.X + num59) && (num63 < point.Y - num58 || num63 > point.Y + num58 || num62 < point.X - num58 || num62 > point.X + num58) && !Main.tile[num62, num63].nactive())
								{
									bool flag8 = true;
									if (flag8 && Collision.SolidTiles(num62 - num60, num62 + num60, num63 - num60, num63 + num60))
									{
										flag8 = false;
									}
									if (flag8)
									{
										NPC.NewNPC(num62 * 16 + 8, num63 * 16 + 8, 523, 0, (float)this.whoAmI, 0f, 0f, 0f, 255);
										break;
									}
								}
							}
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= (float)(4 + num10 * num11))
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[3] += 1f;
					this.velocity = Vector2.Zero;
					this.netUpdate = true;
				}
			}
			if (!flag2)
			{
				this.ai[3] = num13;
			}
			this.dontTakeDamage = flag3;
			this.chaseable = !flag4;
		}

		private void AI_108_DivingFlyer()
		{
			this.rotation = this.velocity.ToRotation();
			float num = 0.4f;
			float num2 = 10f;
			float scaleFactor = 200f;
			float num3 = 750f;
			float num4 = 30f;
			float num5 = 30f;
			float scaleFactor2 = 0.95f;
			int num6 = 50;
			float scaleFactor3 = 14f;
			float num7 = 30f;
			float num8 = 100f;
			float num9 = 20f;
			float num10 = 0f;
			float num11 = 7f;
			bool flag = true;
			bool flag2 = true;
			int num12 = 120;
			bool flag3 = false;
			bool flag4 = false;
			float num13 = 0.05f;
			float num14 = 0f;
			bool flag5 = false;
			int num15 = this.type;
			switch (num15)
			{
			case 558:
			case 559:
			case 560:
				flag4 = true;
				num = 0.7f;
				if (this.type == 559)
				{
					num = 0.5f;
				}
				if (this.type == 560)
				{
					num = 0.2f;
				}
				num2 = 3f;
				scaleFactor = 400f;
				num3 = 500f;
				num4 = 90f;
				num5 = 20f;
				scaleFactor2 = 0.95f;
				num6 = 0;
				scaleFactor3 = 8f;
				num7 = 30f;
				num8 = 150f;
				num9 = 60f;
				num10 = 0.05f;
				num11 = 6f;
				flag2 = false;
				flag5 = true;
				break;
			default:
				switch (num15)
				{
				case 574:
				case 575:
					flag4 = true;
					num = 0.6f;
					if (this.type == 575)
					{
						num = 0.4f;
					}
					num2 = 4f;
					scaleFactor = 400f;
					num3 = 500f;
					num4 = 90f;
					num5 = 30f;
					scaleFactor2 = 0.95f;
					num6 = 3;
					scaleFactor3 = 8f;
					num7 = 30f;
					num8 = 150f;
					num9 = 10f;
					num10 = 0.05f;
					num11 = 0f;
					num14 = -0.1f;
					flag3 = true;
					flag5 = true;
					break;
				}
				break;
			}
			NPCUtils.TargetClosestOldOnesInvasion(this, true, null);
			NPCAimedTarget targetData = this.GetTargetData(true);
			if (flag5)
			{
				if (this.localAI[0] == 0f)
				{
					this.alpha = 255;
				}
				if (this.localAI[0] == 30f)
				{
					Main.PlayTrackedSound(SoundID.DD2_EtherianPortalSpawnEnemy, base.Center);
				}
				if (this.localAI[0] < 60f)
				{
					this.localAI[0] += 1f;
					this.alpha -= 5;
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
					int num16 = (int)this.localAI[0] / 10;
					float num17 = base.Size.Length() / 2f;
					num17 /= 20f;
					int maxValue = 5;
					if (this.type == 576 || this.type == 577)
					{
						maxValue = 1;
					}
					for (int i = 0; i < num16; i++)
					{
						if (Main.rand.Next(maxValue) == 0)
						{
							Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 27, this.velocity.X * 1f, 0f, 100, default(Color), 1f);
							dust.scale = 0.55f;
							dust.fadeIn = 0.7f;
							dust.velocity *= 0.1f * num17;
							dust.velocity += this.velocity;
						}
					}
				}
			}
			if (flag4)
			{
				for (int j = 0; j < 200; j++)
				{
					if (j != this.whoAmI && Main.npc[j].active && Main.npc[j].type == this.type && Math.Abs(this.position.X - Main.npc[j].position.X) + Math.Abs(this.position.Y - Main.npc[j].position.Y) < (float)this.width)
					{
						if (this.position.X < Main.npc[j].position.X)
						{
							this.velocity.X = this.velocity.X - num13;
						}
						else
						{
							this.velocity.X = this.velocity.X + num13;
						}
						if (this.position.Y < Main.npc[j].position.Y)
						{
							this.velocity.Y = this.velocity.Y - num13;
						}
						else
						{
							this.velocity.Y = this.velocity.Y + num13;
						}
					}
				}
			}
			if (Math.Sign(this.velocity.X) != 0)
			{
				this.spriteDirection = -Math.Sign(this.velocity.X);
			}
			if (this.rotation < -1.57079637f)
			{
				this.rotation += 3.14159274f;
			}
			if (this.rotation > 1.57079637f)
			{
				this.rotation -= 3.14159274f;
			}
			num10 *= num9;
			if (Main.expertMode)
			{
				num *= Main.expertKnockBack;
			}
			if (this.ai[0] == 0f)
			{
				this.knockBackResist = num;
				float scaleFactor4 = num2;
				Vector2 center = base.Center;
				Vector2 center2 = targetData.Center;
				Vector2 vector = center2 - center;
				Vector2 vector2 = vector - Vector2.UnitY * scaleFactor;
				float num18 = vector.Length();
				vector = Vector2.Normalize(vector) * scaleFactor4;
				vector2 = Vector2.Normalize(vector2) * scaleFactor4;
				bool flag6 = Collision.CanHit(base.Center, 1, 1, targetData.Center, 1, 1);
				if (this.ai[3] >= (float)num12)
				{
					flag6 = true;
				}
				float num19 = 8f;
				flag6 = (flag6 && vector.ToRotation() > 3.14159274f / num19 && vector.ToRotation() < 3.14159274f - 3.14159274f / num19);
				if (num18 > num3 || !flag6)
				{
					this.velocity.X = (this.velocity.X * (num4 - 1f) + vector2.X) / num4;
					this.velocity.Y = (this.velocity.Y * (num4 - 1f) + vector2.Y) / num4;
					if (!flag6)
					{
						this.ai[3] += 1f;
						if (this.ai[3] == (float)num12)
						{
							this.netUpdate = true;
						}
					}
					else
					{
						this.ai[3] = 0f;
					}
				}
				else
				{
					this.ai[0] = 1f;
					this.ai[2] = vector.X;
					this.ai[3] = vector.Y;
					this.netUpdate = true;
				}
			}
			else if (this.ai[0] == 1f)
			{
				this.knockBackResist = 0f;
				this.velocity *= scaleFactor2;
				this.velocity.Y = this.velocity.Y + num14;
				this.ai[1] += 1f;
				if (this.ai[1] == num5)
				{
					if (this.type == 558 || this.type == 559 || this.type == 560)
					{
						this.localAI[1] = Main.PlayTrackedSound(SoundID.DD2_WyvernDiveDown, base.Center).ToFloat();
						if (Main.rand.Next(5) == 0)
						{
							this.localAI[2] = Main.PlayTrackedSound(SoundID.DD2_WyvernScream, base.Center).ToFloat();
						}
					}
					else if (this.type == 574 || this.type == 575)
					{
						this.localAI[1] = Main.PlayTrackedSound(SoundID.DD2_KoboldFlyerChargeScream, base.Center).ToFloat();
						Main.PlayTrackedSound(SoundID.DD2_KoboldIgnite, base.Center);
					}
				}
				if (this.ai[1] >= num5)
				{
					this.ai[0] = 2f;
					this.ai[1] = 0f;
					this.netUpdate = true;
					Vector2 velocity = new Vector2(this.ai[2], this.ai[3]) + new Vector2((float)Main.rand.Next(-num6, num6 + 1), (float)Main.rand.Next(-num6, num6 + 1)) * 0.04f;
					velocity.Normalize();
					velocity *= scaleFactor3;
					this.velocity = velocity;
				}
			}
			else if (this.ai[0] == 2f)
			{
				if (this.ai[1] >= 20f && (this.type == 574 || this.type == 575))
				{
					ActiveSound activeSound = Main.GetActiveSound(SlotId.FromFloat(this.localAI[2]));
					if (activeSound == null)
					{
						this.localAI[2] = Main.PlayTrackedSound(SoundID.DD2_KoboldIgniteLoop, base.Center).ToFloat();
					}
					else
					{
						activeSound.Position = base.Center;
					}
				}
				this.knockBackResist = 0f;
				float num20 = num7;
				this.ai[1] += 1f;
				bool flag7 = Vector2.Distance(base.Center, targetData.Center) > num8 && base.Center.Y > targetData.Center.Y;
				if (flag3)
				{
					flag7 = false;
				}
				if ((this.ai[1] >= num20 && flag7) || this.velocity.Length() < num11)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					this.velocity /= 2f;
					this.netUpdate = true;
					if (flag)
					{
						this.ai[1] = 45f;
						this.ai[0] = 4f;
					}
				}
				else
				{
					Vector2 center3 = base.Center;
					Vector2 center4 = targetData.Center;
					Vector2 vec = center4 - center3;
					vec.Normalize();
					if (vec.HasNaNs())
					{
						vec = new Vector2((float)this.direction, 0f);
					}
					this.velocity = (this.velocity * (num9 - 1f) + vec * (this.velocity.Length() + num10)) / num9;
				}
				if (flag2 && Collision.SolidCollision(this.position, this.width, this.height))
				{
					this.ai[0] = 3f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					this.netUpdate = true;
				}
			}
			else if (this.ai[0] == 4f)
			{
				this.ai[1] -= 3f;
				if (this.ai[1] <= 0f)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.netUpdate = true;
				}
				this.velocity *= 0.95f;
			}
			ActiveSound activeSound2 = Main.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
			if (activeSound2 != null)
			{
				activeSound2.Position = base.Center;
			}
			else
			{
				this.localAI[1] = SlotId.Invalid.ToFloat();
			}
			if (this.type == 558 || this.type == 559 || this.type == 560)
			{
				activeSound2 = Main.GetActiveSound(SlotId.FromFloat(this.localAI[2]));
				if (activeSound2 != null)
				{
					activeSound2.Position = base.Center;
				}
				else
				{
					this.localAI[2] = SlotId.Invalid.ToFloat();
				}
			}
			if (flag2 && this.ai[0] != 3f && Vector2.Distance(base.Center, targetData.Center) < 64f)
			{
				this.ai[0] = 3f;
				this.ai[1] = 0f;
				this.ai[2] = 0f;
				this.ai[3] = 0f;
				this.netUpdate = true;
			}
			if (this.ai[0] == 3f)
			{
				this.position = base.Center;
				this.width = (this.height = 192);
				this.position.X = this.position.X - (float)(this.width / 2);
				this.position.Y = this.position.Y - (float)(this.height / 2);
				this.velocity = Vector2.Zero;
				this.damage = (int)(80f * Main.damageMultiplier);
				this.alpha = 255;
				if (this.ai[1] == 0f && (this.type == 574 || this.type == 575))
				{
					for (int k = 0; k < 4; k++)
					{
						int num21 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num21].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
					}
					for (int l = 0; l < 20; l++)
					{
						int num22 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 200, default(Color), 3.7f);
						Main.dust[num22].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
						Main.dust[num22].noGravity = true;
						Main.dust[num22].velocity *= 3f;
						num22 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num22].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 4f;
						Main.dust[num22].velocity *= 2f;
						Main.dust[num22].noGravity = true;
						Main.dust[num22].fadeIn = 2.5f;
					}
					for (int m = 0; m < 6; m++)
					{
						int num23 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 0, default(Color), 2.7f);
						Main.dust[num23].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
						Main.dust[num23].noGravity = true;
						Main.dust[num23].velocity *= 3f;
					}
					for (int n = 0; n < 12; n++)
					{
						int num24 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num24].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double)this.velocity.ToRotation(), default(Vector2)) * (float)this.width / 2f;
						Main.dust[num24].noGravity = true;
						Main.dust[num24].velocity *= 3f;
					}
					for (int num25 = 0; num25 < 5; num25++)
					{
						int num26 = Gore.NewGore(this.position + new Vector2((float)(this.width * Main.rand.Next(100)) / 100f, (float)(this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64), 1f);
						Main.gore[num26].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * (float)this.width / 2f;
						Main.gore[num26].velocity *= 0.3f;
						Gore expr_128A_cp_0 = Main.gore[num26];
						expr_128A_cp_0.velocity.X = expr_128A_cp_0.velocity.X + (float)Main.rand.Next(-10, 11) * 0.05f;
						Gore expr_12B8_cp_0 = Main.gore[num26];
						expr_12B8_cp_0.velocity.Y = expr_12B8_cp_0.velocity.Y + (float)Main.rand.Next(-10, 11) * 0.05f;
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 3f)
				{
					Main.PlaySound(SoundID.Item14, this.position);
					this.life = 0;
					this.HitEffect(0, 10.0);
					this.active = false;
				}
			}
		}

		private void AI_109_DarkMage()
		{
			bool flag = false;
			bool flag2 = false;
			bool flag3 = true;
			bool flag4 = false;
			int num = 4;
			int num2 = 3;
			int num3 = 0;
			float num4 = 0.2f;
			float num5 = 2f;
			float num6 = -0.2f;
			float num7 = -4f;
			bool flag5 = true;
			float num8 = 2f;
			float num9 = 0.1f;
			float num10 = 1f;
			float num11 = 0.04f;
			bool flag6 = false;
			float scaleFactor = 0.96f;
			bool flag7 = true;
			NPCAimedTarget targetData = this.GetTargetData(true);
			if (this.type == 564 || this.type == 565)
			{
				flag5 = false;
				this.rotation = this.velocity.X * 0.04f;
				this.spriteDirection = ((this.direction > 0) ? 1 : -1);
				num3 = 2;
				num6 = -0.05f;
				num7 = -0.4f;
				num4 = 0.05f;
				num5 = 0.2f;
				num10 = 0.5f;
				num11 = 0.02f;
				num8 = 0.5f;
				num9 = 0.1f;
				this.localAI[2] = 0f;
				Vector3 v3_ = new Vector3(0.3f, 0.05f, 0.45f) * 1.5f;
				DelegateMethods.v3_1 = v3_;
				Utils.PlotTileLine(base.Top, base.Bottom, (float)this.width, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
				if (this.ai[0] < 0f)
				{
					this.ai[0] = MathHelper.Min(this.ai[0] + 1f, 0f);
				}
				if (this.ai[0] > 0f)
				{
					flag7 = false;
					flag6 = true;
					scaleFactor = 0.9f;
					this.ai[0] -= 1f;
					if (this.ai[0] == 80f && this.ai[1] == 2f)
					{
						Main.PlayTrackedSound(SoundID.DD2_DarkMageSummonSkeleton, base.Center);
					}
					if (this.ai[1] == 2f && this.ai[0] == 64f && Main.netMode != 1)
					{
						Projectile.NewProjectile(base.Center + new Vector2((float)(this.direction * 24), -40f), Vector2.Zero, 673, 0, 0f, Main.myPlayer, 0f, 0f);
						DD2Event.RaiseGoblins(base.Center);
					}
					if (this.ai[1] == 0f && this.ai[0] == 32f)
					{
						Vector2 velocity = (targetData.Center - (base.Center + new Vector2((float)(this.direction * 10), -16f))).SafeNormalize(Vector2.UnitY) * 14f;
						this.direction = ((velocity.X > 0f) ? 1 : -1);
						if (Main.netMode != 1)
						{
							Projectile.NewProjectile(base.Center + new Vector2((float)(this.direction * 10), -16f), velocity, 675, 40, 0f, Main.myPlayer, 0f, 0f);
						}
					}
					if (this.ai[0] == 126f && this.ai[1] == 1f)
					{
						Main.PlayTrackedSound(SoundID.DD2_DarkMageCastHeal, base.Center);
					}
					if (this.ai[1] == 1f && Main.netMode != 1 && (this.ai[0] == 40f || this.ai[0] == 48f || this.ai[0] == 56f))
					{
						Point origin = new Vector2(base.Center.X + (float)(this.direction * 240), base.Center.Y).ToTileCoordinates();
						Point p;
						if (WorldUtils.Find(origin, Searches.Chain(new Searches.Down(50), new GenCondition[]
						{
							new Conditions.IsSolid()
						}), out p))
						{
							Projectile.NewProjectile(p.ToWorldCoordinates(8f, 0f), Vector2.Zero, 674, 0, 0f, Main.myPlayer, 0f, 0f);
						}
					}
					if (this.ai[0] <= 0f)
					{
						float num12 = this.ai[1];
						this.ai[1] += 1f;
						if (this.ai[1] >= 3f)
						{
							this.ai[1] = 0f;
						}
						this.ai[0] = -120f;
						if (num12 == 0f)
						{
							this.ai[0] = -20f;
						}
						this.netUpdate = true;
					}
				}
				if (this.ai[0] == 0f && this.localAI[3] >= 60f)
				{
					bool flag8 = false;
					Vector2 minimum = base.Center + new Vector2(-600f, -200f);
					Vector2 maximum = base.Center + new Vector2(600f, 200f);
					int num13 = 0;
					for (int i = 0; i < 200; i++)
					{
						NPC nPC = Main.npc[i];
						if (nPC.active && nPC.lifeMax != nPC.life && nPC.Center.Between(minimum, maximum) && ++num13 >= 2)
						{
							flag8 = true;
							break;
						}
					}
					if (!flag8)
					{
						this.ai[1] = 2f;
					}
					if (this.ai[1] == 2f && !DD2Event.CanRaiseGoblinsHere(base.Center))
					{
						this.ai[1] = 0f;
					}
					bool flag9 = true;
					if (this.ai[1] == 0f && (base.Distance(targetData.Center) >= 1000f || !Collision.CanHitLine(base.Center, 0, 0, targetData.Center, 0, 0)))
					{
						flag9 = false;
					}
					if (flag9)
					{
						switch ((int)this.ai[1])
						{
						case 0:
							this.ai[0] = 97f;
							break;
						case 1:
							this.ai[0] = 127f;
							break;
						case 2:
							this.ai[0] = 183f;
							break;
						}
						this.netUpdate = true;
						flag6 = true;
					}
				}
				if (this.localAI[3] == 0f)
				{
					this.alpha = 255;
				}
				if (this.localAI[3] == 30f)
				{
					Main.PlayTrackedSound(SoundID.DD2_EtherianPortalSpawnEnemy, base.Center);
				}
				if (this.localAI[3] < 60f)
				{
					this.localAI[3] += 1f;
					this.alpha -= 5;
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
					int num14 = (int)this.localAI[3] / 10;
					float num15 = base.Size.Length() / 2f;
					num15 /= 20f;
					int maxValue = 5;
					if (this.type == 576 || this.type == 577)
					{
						maxValue = 1;
					}
					for (int j = 0; j < num14; j++)
					{
						if (Main.rand.Next(maxValue) == 0)
						{
							Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 27, this.velocity.X * 1f, 0f, 100, default(Color), 1f);
							dust.scale = 0.55f;
							dust.fadeIn = 0.7f;
							dust.velocity *= 0.1f * num15;
							dust.velocity += this.velocity;
						}
					}
				}
			}
			if (this.justHit)
			{
				this.localAI[2] = 0f;
			}
			if (!flag2)
			{
				if (this.localAI[2] >= 0f)
				{
					float num16 = 16f;
					bool flag10 = false;
					bool flag11 = false;
					if (this.position.X > this.localAI[0] - num16 && this.position.X < this.localAI[0] + num16)
					{
						flag10 = true;
					}
					else if ((this.velocity.X < 0f && this.direction > 0) || (this.velocity.X > 0f && this.direction < 0))
					{
						flag10 = true;
						num16 += 24f;
					}
					if (this.position.Y > this.localAI[1] - num16 && this.position.Y < this.localAI[1] + num16)
					{
						flag11 = true;
					}
					if (flag10 && flag11)
					{
						this.localAI[2] += 1f;
						if (this.localAI[2] >= 30f && num16 == 16f)
						{
							flag = true;
						}
						if (this.localAI[2] >= 60f)
						{
							this.localAI[2] = -180f;
							this.direction *= -1;
							this.velocity.X = this.velocity.X * -1f;
							this.collideX = false;
						}
					}
					else
					{
						this.localAI[0] = this.position.X;
						this.localAI[1] = this.position.Y;
						this.localAI[2] = 0f;
					}
					if (flag7)
					{
						NPCUtils.TargetClosestOldOnesInvasion(this, true, null);
					}
				}
				else
				{
					this.localAI[2] += 1f;
					this.direction = ((targetData.Center.X > base.Center.X) ? 1 : -1);
				}
			}
			int num17 = (int)((this.position.X + (float)(this.width / 2)) / 16f) + this.direction * 2;
			int num18 = (int)((this.position.Y + (float)this.height) / 16f);
			int num19 = (int)base.Bottom.Y / 16;
			int num20 = (int)base.Bottom.X / 16;
			if (flag6)
			{
				this.velocity *= scaleFactor;
				return;
			}
			for (int k = num18; k < num18 + num; k++)
			{
				if (Main.tile[num17, k] == null)
				{
					Main.tile[num17, k] = new Tile();
				}
				if ((Main.tile[num17, k].nactive() && Main.tileSolid[(int)Main.tile[num17, k].type]) || Main.tile[num17, k].liquid > 0)
				{
					if (k <= num18 + 1)
					{
						flag4 = true;
					}
					flag3 = false;
					break;
				}
			}
			for (int l = num19; l < num19 + num3; l++)
			{
				if (Main.tile[num20, l] == null)
				{
					Main.tile[num20, l] = new Tile();
				}
				if ((Main.tile[num20, l].nactive() && Main.tileSolid[(int)Main.tile[num20, l].type]) || Main.tile[num20, l].liquid > 0)
				{
					flag4 = true;
					flag3 = false;
					break;
				}
			}
			if (flag5)
			{
				for (int m = num18 - num2; m < num18; m++)
				{
					if (Main.tile[num17, m] == null)
					{
						Main.tile[num17, m] = new Tile();
					}
					if ((Main.tile[num17, m].nactive() && Main.tileSolid[(int)Main.tile[num17, m].type]) || Main.tile[num17, m].liquid > 0)
					{
						flag4 = false;
						flag = true;
						break;
					}
				}
			}
			if (flag)
			{
				flag4 = false;
				flag3 = true;
			}
			if (flag3)
			{
				this.velocity.Y = this.velocity.Y + num4;
				if (this.velocity.Y > num5)
				{
					this.velocity.Y = num5;
				}
			}
			else
			{
				if ((this.directionY < 0 && this.velocity.Y > 0f) || flag4)
				{
					this.velocity.Y = this.velocity.Y + num6;
				}
				if (this.velocity.Y < num7)
				{
					this.velocity.Y = num7;
				}
			}
			if (this.collideX)
			{
				this.velocity.X = this.oldVelocity.X * -0.4f;
				if (this.direction == -1 && this.velocity.X > 0f && this.velocity.X < 1f)
				{
					this.velocity.X = 1f;
				}
				if (this.direction == 1 && this.velocity.X < 0f && this.velocity.X > -1f)
				{
					this.velocity.X = -1f;
				}
			}
			if (this.collideY)
			{
				this.velocity.Y = this.oldVelocity.Y * -0.25f;
				if (this.velocity.Y > 0f && this.velocity.Y < 1f)
				{
					this.velocity.Y = 1f;
				}
				if (this.velocity.Y < 0f && this.velocity.Y > -1f)
				{
					this.velocity.Y = -1f;
				}
			}
			if (this.direction == -1 && this.velocity.X > -num8)
			{
				this.velocity.X = this.velocity.X - num9;
				if (this.velocity.X > num8)
				{
					this.velocity.X = this.velocity.X - num9;
				}
				else if (this.velocity.X > 0f)
				{
					this.velocity.X = this.velocity.X + num9 / 2f;
				}
				if (this.velocity.X < -num8)
				{
					this.velocity.X = -num8;
				}
			}
			else if (this.direction == 1 && this.velocity.X < num8)
			{
				this.velocity.X = this.velocity.X + num9;
				if (this.velocity.X < -num8)
				{
					this.velocity.X = this.velocity.X + num9;
				}
				else if (this.velocity.X < 0f)
				{
					this.velocity.X = this.velocity.X - num9 / 2f;
				}
				if (this.velocity.X > num8)
				{
					this.velocity.X = num8;
				}
			}
			if (this.directionY == -1 && this.velocity.Y > -num10)
			{
				this.velocity.Y = this.velocity.Y - num11;
				if (this.velocity.Y > num10)
				{
					this.velocity.Y = this.velocity.Y - num11 * 1.25f;
				}
				else if (this.velocity.Y > 0f)
				{
					this.velocity.Y = this.velocity.Y + num11 * 0.75f;
				}
				if (this.velocity.Y < -num10)
				{
					this.velocity.Y = -num8;
					return;
				}
			}
			else if (this.directionY == 1 && this.velocity.Y < num10)
			{
				this.velocity.Y = this.velocity.Y + num11;
				if (this.velocity.Y < -num10)
				{
					this.velocity.Y = this.velocity.Y + num11 * 1.25f;
				}
				else if (this.velocity.Y < 0f)
				{
					this.velocity.Y = this.velocity.Y - num11 * 0.75f;
				}
				if (this.velocity.Y > num10)
				{
					this.velocity.Y = num10;
				}
			}
		}

		private void AI_111_DD2LightningBug()
		{
			bool flag = true;
			float scaleFactor = 7f;
			float num = 60f;
			float num2 = 60f;
			float num3 = 1f;
			float scaleFactor2 = 0.96f;
			int num4 = 30;
			int num5 = 20;
			float num6 = 200f;
			int num7 = 40;
			int num8 = 438;
			float scaleFactor3 = 10f;
			float num9 = 100f;
			bool flag2 = false;
			float num10 = 0.05f;
			Vector2 vector = base.Center;
			NPCUtils.TargetClosestOldOnesInvasion(this, true, null);
			NPCAimedTarget targetData = this.GetTargetData(true);
			bool flag3 = false;
			int num11 = this.type;
			if (num11 == 578)
			{
				scaleFactor = 4f;
				num = 20f;
				num2 = 20f;
				flag3 = true;
				flag2 = true;
				num10 = 0.1f;
				num8 = 682;
				num7 = 10;
				scaleFactor3 = 10f;
				num9 = 50f;
				num4 = 5;
				num5 = 30;
				vector += new Vector2((float)(-(float)this.spriteDirection * 20), 10f);
				if (Main.rand.Next(15) == 0)
				{
					Vector2 position = this.position;
					if (this.direction == -1)
					{
						position.X += (float)(this.width / 2);
					}
					Dust dust = Dust.NewDustDirect(position, this.width / 2, this.height, 272, 0f, 0f, 0, default(Color), 1f);
					dust.scale = 0.65f;
					Dust expr_16C_cp_0 = dust;
					expr_16C_cp_0.velocity.Y = expr_16C_cp_0.velocity.Y - 0.8f;
					if (dust.velocity.X * (float)this.direction > 0f)
					{
						Dust expr_19F_cp_0 = dust;
						expr_19F_cp_0.velocity.X = expr_19F_cp_0.velocity.X * -1f;
					}
					if (dust.velocity.Y > 0f)
					{
						dust.velocity *= -0.5f;
					}
				}
				if (Main.rand.Next(80) == 0)
				{
					Vector2 vector2 = (Main.rand.NextFloat() * 6.28318548f).ToRotationVector2();
					Dust dust2 = Dust.NewDustPerfect(base.Center, 272, new Vector2?(vector2), 0, default(Color), 1f);
					dust2.velocity *= 1.1f;
					dust2.noGravity = true;
					dust2.customData = this;
					dust2 = Dust.NewDustPerfect(base.Center, 272, new Vector2?(vector2), 0, default(Color), 1f);
					dust2.velocity *= 1.5f;
					dust2.noGravity = true;
					dust2.customData = this;
				}
			}
			if (flag3)
			{
				if (this.localAI[1] == 0f)
				{
					this.alpha = 255;
				}
				if (this.localAI[1] == 30f)
				{
					Main.PlayTrackedSound(SoundID.DD2_EtherianPortalSpawnEnemy, base.Center);
				}
				if (this.localAI[1] < 60f)
				{
					this.localAI[1] += 1f;
					this.alpha -= 5;
					if (this.alpha < 0)
					{
						this.alpha = 0;
					}
					int num12 = (int)this.localAI[1] / 10;
					float num13 = base.Size.Length() / 2f;
					num13 /= 20f;
					int maxValue = 5;
					if (this.type == 576 || this.type == 577)
					{
						maxValue = 1;
					}
					for (int i = 0; i < num12; i++)
					{
						if (Main.rand.Next(maxValue) == 0)
						{
							Dust dust3 = Dust.NewDustDirect(this.position, this.width, this.height, 27, this.velocity.X * 1f, 0f, 100, default(Color), 1f);
							dust3.scale = 0.55f;
							dust3.fadeIn = 0.7f;
							dust3.velocity *= 0.1f * num13;
							dust3.velocity += this.velocity;
						}
					}
				}
			}
			if (flag2)
			{
				for (int j = 0; j < 200; j++)
				{
					if (j != this.whoAmI && Main.npc[j].active && Main.npc[j].type == this.type && Math.Abs(this.position.X - Main.npc[j].position.X) + Math.Abs(this.position.Y - Main.npc[j].position.Y) < (float)this.width)
					{
						if (this.position.X < Main.npc[j].position.X)
						{
							this.velocity.X = this.velocity.X - num10;
						}
						else
						{
							this.velocity.X = this.velocity.X + num10;
						}
						if (this.position.Y < Main.npc[j].position.Y)
						{
							this.velocity.Y = this.velocity.Y - num10;
						}
						else
						{
							this.velocity.Y = this.velocity.Y + num10;
						}
					}
				}
			}
			this.rotation = Math.Abs(this.velocity.X) * (float)this.direction * 0.1f;
			this.spriteDirection = this.direction;
			Vector2 vector3 = vector;
			Vector2 vector4 = targetData.Center - vector3;
			Vector2 vector5 = vector4.SafeNormalize(Vector2.UnitY) * scaleFactor;
			bool flag4 = Collision.CanHit(base.Center, 1, 1, targetData.Center, 1, 1);
			if (this.localAI[0] < 0f)
			{
				this.localAI[0] += 1f;
			}
			if (!flag)
			{
				this.velocity = (this.velocity * (num - 1f) + vector5) / num;
				if (this.timeLeft > 10)
				{
					this.timeLeft = 10;
					return;
				}
			}
			else
			{
				if (vector4.Length() > num6 || !flag4)
				{
					this.velocity = (this.velocity * (num2 - 1f) + vector5) / num2;
					return;
				}
				if (vector4.Y < num9)
				{
					this.velocity.Y = this.velocity.Y - 0.03f;
					return;
				}
				if (this.localAI[0] >= 0f)
				{
					this.velocity *= scaleFactor2;
					if (this.velocity.Length() < num3 && Main.netMode != 1)
					{
						this.localAI[0] += 1f;
						if (this.localAI[0] >= (float)num4)
						{
							this.localAI[0] = (float)(-(float)num5);
							this.direction = (this.spriteDirection = ((vector5.X > 0f) ? 1 : -1));
							vector5 = vector4 + Utils.RandomVector2(Main.rand, -25f, 25f);
							vector5.X *= 1f + (float)Main.rand.Next(-20, 21) * 0.005f;
							vector5.Y *= 1f + (float)Main.rand.Next(-20, 21) * 0.005f;
							vector5 = vector5.SafeNormalize(Vector2.UnitY) * scaleFactor3;
							vector5.X *= 1f + (float)Main.rand.Next(-20, 21) * 0.00625f;
							vector5.Y *= 1f + (float)Main.rand.Next(-20, 21) * 0.00625f;
							Projectile.NewProjectile(vector3, vector5, num8, num7, 0f, Main.myPlayer, 0f, 0f);
						}
					}
				}
			}
		}

		public void ReflectProjectiles(Rectangle myRect)
		{
			for (int i = 0; i < 1000; i++)
			{
				if (Main.projectile[i].active && Main.projectile[i].CanReflect())
				{
					Rectangle hitbox = Main.projectile[i].Hitbox;
					if (myRect.Intersects(hitbox))
					{
						this.ReflectProjectile(i);
					}
				}
			}
		}

		public void ReflectProjectile(int i)
		{
			if (this.HitSound != null)
			{
				Main.PlaySound(this.HitSound, Main.projectile[i].position);
			}
			for (int j = 0; j < 3; j++)
			{
				int num = Dust.NewDust(Main.projectile[i].position, Main.projectile[i].width, Main.projectile[i].height, 31, 0f, 0f, 0, default(Color), 1f);
				Main.dust[num].velocity *= 0.3f;
			}
			Main.projectile[i].hostile = true;
			Main.projectile[i].friendly = false;
			Vector2 vector = Main.player[Main.projectile[i].owner].Center - Main.projectile[i].Center;
			vector.Normalize();
			vector *= Main.projectile[i].oldVelocity.Length();
			Main.projectile[i].velocity = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
			Main.projectile[i].velocity.Normalize();
			Main.projectile[i].velocity *= vector.Length();
			Main.projectile[i].velocity += vector * 20f;
			Main.projectile[i].velocity.Normalize();
			Main.projectile[i].velocity *= vector.Length();
			Main.projectile[i].damage /= 2;
			Main.projectile[i].penetrate = 1;
		}

		public int GetShootingFrame(float circleY)
		{
			int num = -4;
			if (circleY < -0.3f)
			{
				num = 1;
			}
			if (circleY < -0.1f)
			{
				num = 0;
			}
			if (circleY > 0.1f)
			{
				num = 2;
			}
			if (circleY > 0.3f)
			{
				num = 3;
			}
			if (this.type == 228 || this.type == 229 || this.type == 209 || this.type == 22 || this.type == 368)
			{
				if (num == -4)
				{
					num = 1;
				}
				if (circleY >= -0.1f)
				{
					num++;
				}
			}
			return num;
		}

		public Tuple<Vector2, float> GetSwingStats(int swingMax, int swingCurrent, int aimDir, int itemWidth, int itemHeight)
		{
			Vector2 zero = Vector2.Zero;
			if ((double)swingCurrent < (double)swingMax * 0.333)
			{
				float num = 10f;
				if (itemWidth > 32)
				{
					num = 14f;
				}
				if (itemWidth >= 52)
				{
					num = 24f;
				}
				if (itemWidth >= 64)
				{
					num = 28f;
				}
				if (itemWidth >= 92)
				{
					num = 38f;
				}
				zero.X = base.Center.X + ((float)itemWidth * 0.5f - num) * (float)aimDir;
				zero.Y = this.position.Y + 24f;
			}
			else if ((double)swingCurrent < (double)swingMax * 0.666)
			{
				float num2 = 10f;
				if (itemWidth > 32)
				{
					num2 = 18f;
				}
				if (itemWidth >= 52)
				{
					num2 = 24f;
				}
				if (itemWidth >= 64)
				{
					num2 = 28f;
				}
				if (itemWidth >= 92)
				{
					num2 = 38f;
				}
				zero.X = base.Center.X + ((float)itemWidth * 0.5f - num2) * (float)aimDir;
				num2 = 10f;
				if (itemHeight > 32)
				{
					num2 = 8f;
				}
				if (itemHeight > 52)
				{
					num2 = 12f;
				}
				if (itemHeight > 64)
				{
					num2 = 14f;
				}
				zero.Y = this.position.Y + num2;
			}
			else
			{
				float num3 = 6f;
				if (itemWidth > 32)
				{
					num3 = 14f;
				}
				if (itemWidth >= 48)
				{
					num3 = 18f;
				}
				if (itemWidth >= 52)
				{
					num3 = 24f;
				}
				if (itemWidth >= 64)
				{
					num3 = 28f;
				}
				if (itemWidth >= 92)
				{
					num3 = 38f;
				}
				zero.X = base.Center.X - ((float)itemWidth * 0.5f - num3) * (float)aimDir;
				num3 = 10f;
				if (itemHeight > 32)
				{
					num3 = 10f;
				}
				if (itemHeight > 52)
				{
					num3 = 12f;
				}
				if (itemHeight > 64)
				{
					num3 = 14f;
				}
				zero.Y = this.position.Y + num3;
			}
			float item = ((float)swingCurrent / (float)swingMax - 0.5f) * (float)(-(float)aimDir) * 3.5f - (float)aimDir * 0.3f;
			return Tuple.Create<Vector2, float>(zero, item);
		}

		public void TweakSwingStats(int swingMax, int swingCurrent, int aimDir, ref Rectangle itemRectangle)
		{
			if ((double)swingCurrent < (double)swingMax * 0.333)
			{
				if (aimDir == -1)
				{
					itemRectangle.X -= (int)((double)itemRectangle.Width * 1.4 - (double)itemRectangle.Width);
				}
				itemRectangle.Width = (int)((double)itemRectangle.Width * 1.4);
				itemRectangle.Y += (int)((double)itemRectangle.Height * 0.5);
				itemRectangle.Height = (int)((double)itemRectangle.Height * 1.1);
				return;
			}
			if ((double)swingCurrent < (double)swingMax * 0.666)
			{
				return;
			}
			if (aimDir == 1)
			{
				itemRectangle.X -= (int)((double)itemRectangle.Width * 1.2);
			}
			itemRectangle.Width *= 2;
			itemRectangle.Y -= (int)((double)itemRectangle.Height * 1.4 - (double)itemRectangle.Height);
			itemRectangle.Height = (int)((double)itemRectangle.Height * 1.4);
		}

		public bool UsesPartyHat()
		{
			return this.frame.Height > 0 && this.townNPC && BirthdayParty.PartyIsUp && this.type != 441 && this.type != 37;
		}

		public PartyHatColor GetPartyHatColor()
		{
			if (!this.UsesPartyHat() || string.IsNullOrEmpty(this.displayName))
			{
				return PartyHatColor.None;
			}
			int num = this.displayName.Length + (int)this.displayName[0];
			int num2 = Main.moonPhase;
			if (Main.dayTime)
			{
				num2--;
			}
			num += this.whoAmI;
			num += num2 * (this.whoAmI % 2 == 0).ToDirectionInt();
			if (num < 0)
			{
				num += 5;
			}
			return (PartyHatColor)(num % 5);
		}

		public void FindFrame()
		{
			int num = 1;
			if (!Main.dedServ)
			{
				if (!Main.NPCLoaded[this.type] || Main.npcTexture[this.type] == null)
				{
					return;
				}
				num = Main.npcTexture[this.type].Height / Main.npcFrameCount[this.type];
			}
			int num2 = 0;
			if (this.aiAction == 0)
			{
				if (this.velocity.Y < 0f)
				{
					num2 = 2;
				}
				else if (this.velocity.Y > 0f)
				{
					num2 = 3;
				}
				else if (this.velocity.X != 0f)
				{
					num2 = 1;
				}
				else
				{
					num2 = 0;
				}
			}
			else if (this.aiAction == 1)
			{
				num2 = 4;
			}
			if (this.type == 568 || this.type == 569)
			{
				if (this.ai[0] > 0f)
				{
					int num3 = this.frame.Y / this.frame.Height;
					this.spriteDirection = this.direction;
					if (num3 < 5 || num3 > 16)
					{
						this.frameCounter = 0.0;
					}
					num3 = 7;
					this.frameCounter += 1.0;
					int num4 = 0;
					if (this.frameCounter >= (double)(5 * ++num4))
					{
						num3 = 8;
					}
					if (this.frameCounter >= (double)(5 * ++num4))
					{
						num3 = 9;
					}
					if (this.frameCounter >= (double)(5 * ++num4))
					{
						num3 = 10;
					}
					if (this.frameCounter >= (double)(5 * ++num4))
					{
						num3 = 7;
					}
					if (this.frameCounter >= (double)(5 * ++num4))
					{
						num3 = 8;
					}
					if (this.frameCounter >= (double)(5 * ++num4))
					{
						num3 = 9;
					}
					if (this.frameCounter >= (double)(5 * ++num4))
					{
						num3 = 10;
					}
					if (this.frameCounter >= (double)(5 * ++num4))
					{
						num3 = 7;
					}
					if (this.frameCounter >= (double)(5 * ++num4))
					{
						num3 = 8;
					}
					if (this.frameCounter >= (double)(5 * ++num4))
					{
						num3 = 9;
					}
					if (this.frameCounter >= (double)(5 * ++num4))
					{
						num3 = 10;
					}
					if (this.frameCounter >= (double)(5 * ++num4))
					{
						num3 = 7;
					}
					if (this.frameCounter >= (double)(5 * ++num4))
					{
						num3 = 8;
					}
					if (this.frameCounter >= (double)(5 * ++num4))
					{
						num3 = 9;
					}
					if (this.frameCounter >= (double)(5 * ++num4))
					{
						num3 = 10;
					}
					if (this.frameCounter >= (double)(5 * ++num4))
					{
						num3 = 7;
					}
					if (this.frameCounter >= (double)(5 * ++num4))
					{
						num3 = 8;
					}
					if (this.frameCounter >= (double)(5 * ++num4))
					{
						num3 = 9;
					}
					if (this.frameCounter >= (double)(5 * ++num4))
					{
						num3 = 10;
					}
					if (this.frameCounter >= (double)(5 * ++num4))
					{
						num3 = 7;
					}
					if (this.frameCounter >= (double)(5 * ++num4))
					{
						num3 = 8;
					}
					if (this.frameCounter >= (double)(5 * ++num4))
					{
						num3 = 9;
					}
					if (this.frameCounter >= (double)(5 * ++num4))
					{
						num3 = 10;
					}
					if (this.frameCounter >= (double)(5 * ++num4))
					{
						num3 = 11;
					}
					if (this.frameCounter >= (double)(5 * ++num4))
					{
						num3 = 12;
					}
					if (this.frameCounter >= (double)(5 * ++num4))
					{
						num3 = 13;
					}
					if (this.frameCounter >= (double)(5 * (num4 + 1)))
					{
						num3 = 14;
					}
					if (this.frameCounter >= 270.0)
					{
						num3 = 14;
						this.frameCounter -= 10.0;
					}
					this.frame.Y = num * num3;
				}
				else
				{
					if (this.velocity.Y == 0f)
					{
						this.spriteDirection = this.direction;
					}
					if (this.velocity.Y != 0f || (this.direction == -1 && this.velocity.X > 0f) || (this.direction == 1 && this.velocity.X < 0f))
					{
						this.frameCounter = 0.0;
						this.frame.Y = num * 4;
					}
					else if (this.velocity.X == 0f)
					{
						this.frameCounter = 0.0;
						this.frame.Y = num * 6;
					}
					else
					{
						this.frameCounter += (double)Math.Abs(this.velocity.X);
						if (this.frameCounter >= 56.0 || this.frameCounter < 0.0)
						{
							this.frameCounter = 0.0;
						}
						this.frame.Y = num * (int)(this.frameCounter / 8.0);
					}
				}
			}
			else if (this.type == 551)
			{
				int num5 = this.frame.Y / num;
				if (this.ai[0] == 4f)
				{
					float num6 = 60f;
					int num7 = 10;
					int num8 = 6 * num7;
					if (num5 < 5)
					{
						this.frameCounter = 0.0;
					}
					num5 = 5;
					this.frameCounter = (double)((int)this.ai[1]);
					int num9 = 0;
					if (this.frameCounter >= (double)(5 * (num9 + 1)))
					{
						num5 = 6;
					}
					if (this.frameCounter >= (double)(num6 - 6f))
					{
						num5 = 7;
					}
					if (this.frameCounter >= (double)(num6 - 3f))
					{
						num5 = 8;
					}
					if (this.frameCounter >= (double)num6)
					{
						num5 = 9 + (int)this.frameCounter / 3 % 2;
					}
					num9 = 0;
					if (this.frameCounter >= (double)(num6 + (float)num8 + 3f))
					{
						num5 = 8;
					}
					if (this.frameCounter >= (double)(num6 + (float)num8 + 3f + (float)(5 * ++num9)))
					{
						num5 = 7;
					}
					if (this.frameCounter >= (double)(num6 + (float)num8 + 3f + (float)(5 * (num9 + 1))))
					{
						num5 = 0;
					}
				}
				else if (this.ai[0] == 3f)
				{
					float num10 = 40f;
					float num11 = 80f;
					float num12 = num10 + num11;
					float num13 = 25f;
					if (num5 < 5)
					{
						this.frameCounter = 0.0;
					}
					num5 = 5;
					this.frameCounter = (double)((int)this.ai[1]);
					int num14 = 0;
					if (this.frameCounter >= (double)(5 * (num14 + 1)))
					{
						num5 = 6;
					}
					if (this.frameCounter >= (double)(num10 - 6f))
					{
						num5 = 7;
					}
					if (this.frameCounter >= (double)(num10 - 3f))
					{
						num5 = 8;
					}
					if (this.frameCounter >= (double)num10)
					{
						num5 = 9 + (int)this.frameCounter / 3 % 2;
					}
					num14 = 0;
					if (this.frameCounter >= (double)(num12 - num13 + 3f))
					{
						num5 = 8;
					}
					if (this.frameCounter >= (double)(num12 - num13 + 3f + (float)(5 * ++num14)))
					{
						num5 = 7;
					}
					if (this.frameCounter >= (double)(num12 - num13 + 3f + (float)(5 * (num14 + 1))))
					{
						num5 = 0;
					}
				}
				else if (this.ai[0] == 5f)
				{
					num5 = 3;
				}
				else if (this.ai[0] == 6f)
				{
					if (num5 > 4)
					{
						this.frameCounter = 0.0;
					}
					num5 = 1;
					this.frameCounter = (double)((int)this.ai[1]);
					int num15 = 0;
					if (this.frameCounter >= (double)(8 * ++num15))
					{
						num5 = 2;
					}
					if (this.frameCounter >= (double)(8 * ++num15))
					{
						num5 = 3;
					}
					if (this.frameCounter >= (double)(8 * ++num15))
					{
						num5 = 4;
					}
					if (this.frameCounter >= (double)(8 * ++num15))
					{
						num5 = 3;
					}
					if (this.frameCounter >= (double)(8 * ++num15))
					{
						num5 = 4;
					}
					if (this.frameCounter >= (double)(8 * ++num15))
					{
						num5 = 3;
					}
					if (this.frameCounter >= (double)(8 * ++num15))
					{
						num5 = 2;
					}
					if (this.frameCounter >= (double)(8 * ++num15))
					{
						num5 = 1;
					}
					if (this.frameCounter >= (double)(8 * (num15 + 1)))
					{
						num5 = 0;
					}
				}
				else
				{
					num5 = 0;
				}
				this.frame.Y = num * num5;
			}
			if (this.type == 552 || this.type == 553 || this.type == 554)
			{
				if (this.ai[0] > 0f)
				{
					this.spriteDirection = this.direction;
					if (this.frame.Y < num * 10 || this.frame.Y > num * 13 || this.ai[1] == 29f)
					{
						this.frame.Y = num * 10;
						this.frameCounter = 0.0;
					}
					if ((this.frameCounter += 1.0) >= 6.0 && this.frame.Y < num * 13)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
					}
				}
				else
				{
					if (this.velocity.Y == 0f)
					{
						this.spriteDirection = this.direction;
					}
					if (this.velocity.Y != 0f || (this.direction == -1 && this.velocity.X > 0f) || (this.direction == 1 && this.velocity.X < 0f))
					{
						this.frameCounter = 0.0;
						this.frame.Y = num * 8;
					}
					else if (this.velocity.X == 0f)
					{
						this.frameCounter = 0.0;
						this.frame.Y = num * 9;
					}
					else
					{
						this.frameCounter += (double)Math.Abs(this.velocity.X);
						if (this.frameCounter >= 64.0 || this.frameCounter < 0.0)
						{
							this.frameCounter = 0.0;
						}
						this.frame.Y = num * (int)(this.frameCounter / 8.0);
					}
				}
			}
			if (this.type == 572 || this.type == 573)
			{
				if (this.ai[0] > 0f && this.ai[1] == 0f)
				{
					this.spriteDirection = this.direction;
					if (this.frame.Y != num * 8 || this.frameCounter > 2.0)
					{
						this.frame.Y = num * 8;
						this.frameCounter = 0.0;
					}
					if (this.frameCounter == 0.0)
					{
						this.frameCounter = 1.0;
						EmoteBubble.NewBubble(3, new WorldUIAnchor(this), 60);
					}
				}
				else if (this.ai[1] == 1f)
				{
					if (this.velocity.Y == 0f)
					{
						this.spriteDirection = this.direction;
					}
					if (this.velocity.Y != 0f || (this.direction == -1 && this.velocity.X > 0f) || (this.direction == 1 && this.velocity.X < 0f))
					{
						this.frameCounter = 0.0;
						this.frame.Y = num * 17;
					}
					else if (this.velocity.X == 0f)
					{
						this.frameCounter = 0.0;
						this.frame.Y = num * 8;
					}
					else
					{
						this.frameCounter += (double)Math.Abs(this.velocity.X);
						if (this.frameCounter >= 64.0 || this.frameCounter < 0.0)
						{
							this.frameCounter = 0.0;
						}
						this.frame.Y = num * ((int)(this.frameCounter / 8.0) + 8);
					}
				}
				else
				{
					if (this.velocity.Y == 0f)
					{
						this.spriteDirection = this.direction;
					}
					if (this.velocity.Y != 0f || (this.direction == -1 && this.velocity.X > 0f) || (this.direction == 1 && this.velocity.X < 0f))
					{
						this.frameCounter = 0.0;
						this.frame.Y = num * 16;
					}
					else if (this.velocity.X == 0f)
					{
						this.frameCounter = 0.0;
						this.frame.Y = 0;
					}
					else
					{
						this.frameCounter += (double)Math.Abs(this.velocity.X);
						if (this.frameCounter >= 64.0 || this.frameCounter < 0.0)
						{
							this.frameCounter = 0.0;
						}
						this.frame.Y = num * (int)(this.frameCounter / 8.0);
					}
				}
			}
			if (this.type == 566 || this.type == 567)
			{
				if (this.velocity.Y == 0f)
				{
					this.spriteDirection = this.direction;
				}
				if (this.velocity.Y != 0f || (this.direction == -1 && this.velocity.X > 0f) || (this.direction == 1 && this.velocity.X < 0f))
				{
					this.frameCounter = 0.0;
					this.frame.Y = num * 8;
				}
				else if (this.velocity.X == 0f)
				{
					this.frameCounter = 0.0;
					this.frame.Y = 0;
				}
				else
				{
					this.frameCounter += (double)Math.Abs(this.velocity.X);
					if (this.frameCounter >= 64.0 || this.frameCounter < 0.0)
					{
						this.frameCounter = 0.0;
					}
					this.frame.Y = num * (int)(this.frameCounter / 8.0);
				}
			}
			if (this.type == 576 || this.type == 577)
			{
				int num16 = this.frame.Y;
				this.frame.Width = 80;
				if (this.ai[0] > 0f && this.ai[1] == 0f)
				{
					this.spriteDirection = this.direction;
					if (num16 < 11 || num16 > 20)
					{
						num16 = 11;
						this.frameCounter = 0.0;
					}
					int num17 = 4;
					if (num16 == 13 || num16 == 19)
					{
						num17 = 8;
					}
					if (num16 == 14 || num16 == 18)
					{
						num17 = 2;
					}
					if ((this.frameCounter += 1.0) >= (double)num17 && num16 < 20)
					{
						this.frameCounter = 0.0;
						num16++;
					}
				}
				else if (this.ai[0] > 0f && this.ai[1] == 2f)
				{
					this.spriteDirection = this.direction;
					if (num16 < 37 || num16 > 47)
					{
						num16 = 39;
						this.frameCounter = 0.0;
					}
					int num18 = 5;
					if (num16 == 42)
					{
						num18 = 6;
					}
					if (num16 == 45)
					{
						num18 = 8;
					}
					if (num16 == 46)
					{
						num18 = 4;
					}
					if (num16 == 47)
					{
						num18 = 26;
					}
					if (num16 == 37 || num16 == 38)
					{
						num18 = 7;
					}
					bool flag = true;
					if (num16 == 46 && this.velocity.Y != 0f)
					{
						flag = false;
					}
					if (num16 == 38)
					{
						flag = false;
					}
					if (flag)
					{
						this.frameCounter += 1.0;
					}
					if (this.frameCounter >= (double)num18)
					{
						if (num16 < 47)
						{
							this.frameCounter = 0.0;
							num16++;
						}
						else
						{
							num16 = 37;
							this.frameCounter = 0.0;
						}
					}
				}
				else if (this.ai[0] > 0f && this.ai[1] == 1f)
				{
					this.spriteDirection = this.direction;
					if (num16 < 21 || num16 > 38)
					{
						num16 = 21;
						this.frameCounter = 0.0;
					}
					int num19 = 5;
					if ((this.frameCounter += 1.0) >= (double)num19 && num16 < 38)
					{
						this.frameCounter = 0.0;
						num16++;
					}
				}
				else
				{
					if (this.velocity.Y == 0f)
					{
						this.spriteDirection = this.direction;
					}
					if (this.velocity.Y != 0f)
					{
						this.frameCounter = 0.0;
						num16 = 43;
					}
					else if (this.velocity.X == 0f)
					{
						this.frameCounter = 0.0;
						num16 = 0;
					}
					else
					{
						this.frameCounter += (double)Math.Abs(this.velocity.X);
						if (this.frameCounter >= 60.0 || this.frameCounter < 0.0)
						{
							this.frameCounter = 0.0;
						}
						num16 = 1 + (int)(this.frameCounter / 6.0);
					}
				}
				this.frame.Y = num16;
			}
			if (this.type == 570 || this.type == 571)
			{
				if (this.ai[1] > 0f && this.ai[0] > 0f)
				{
					this.spriteDirection = this.direction;
					if (this.frame.Y < num * 10 || this.frame.Y > num * 15 || this.ai[1] == 59f)
					{
						this.frame.Y = num * 10;
						this.frameCounter = 0.0;
					}
					int num20 = 5;
					if (this.frame.Y == num * 14)
					{
						num20 = 35;
					}
					if ((this.frameCounter += 1.0) >= (double)num20 && this.frame.Y < num * 15)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
					}
				}
				else
				{
					if (this.velocity.Y == 0f)
					{
						this.spriteDirection = this.direction;
					}
					if (this.velocity.Y != 0f || (this.direction == -1 && this.velocity.X > 0f) || (this.direction == 1 && this.velocity.X < 0f))
					{
						this.frameCounter = 0.0;
						this.frame.Y = num;
					}
					else if (this.velocity.X == 0f)
					{
						this.frameCounter = 0.0;
						this.frame.Y = num * 9;
					}
					else
					{
						this.frameCounter += (double)Math.Abs(this.velocity.X);
						if (this.frameCounter >= 64.0 || this.frameCounter < 0.0)
						{
							this.frameCounter = 0.0;
						}
						this.frame.Y = num * (int)(this.frameCounter / 8.0 + 2.0);
					}
				}
			}
			if (this.type == 561 || this.type == 562 || this.type == 563)
			{
				if (this.justHit)
				{
					this.justHit = this.justHit;
				}
				if (this.ai[1] > 0f && this.ai[0] > 0f)
				{
					this.spriteDirection = this.direction;
					if (this.frame.Y < num * 10 || this.frame.Y > num * 13 || this.ai[1] == 89f)
					{
						this.frame.Y = num * 10;
						this.frameCounter = 0.0;
					}
					if ((this.frameCounter += 1.0) >= 6.0 && this.frame.Y < num * 13)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
					}
				}
				else
				{
					if (this.velocity.Y == 0f)
					{
						this.spriteDirection = this.direction;
					}
					if (this.velocity.Y != 0f || (this.direction == -1 && this.velocity.X > 0f) || (this.direction == 1 && this.velocity.X < 0f))
					{
						this.frameCounter = 0.0;
						this.frame.Y = num * 8;
					}
					else if (this.velocity.X == 0f)
					{
						this.frameCounter = 0.0;
						this.frame.Y = num * 9;
					}
					else
					{
						this.frameCounter += (double)Math.Abs(this.velocity.X);
						if (this.frameCounter >= 64.0 || this.frameCounter < 0.0)
						{
							this.frameCounter = 0.0;
						}
						this.frame.Y = num * (int)(this.frameCounter / 8.0);
					}
				}
			}
			if (this.type == 555 || this.type == 556 || this.type == 557)
			{
				if (this.ai[1] > 0f && this.ai[0] > 0f)
				{
					this.spriteDirection = this.direction;
					if (this.frame.Y < num * 10 || this.frame.Y > num * 16 || this.ai[1] == 41f)
					{
						this.frame.Y = num * 10;
						this.frameCounter = 0.0;
					}
					if ((this.frameCounter += 1.0) >= 6.0 && this.frame.Y < num * 16)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
					}
				}
				else
				{
					if (this.velocity.Y == 0f)
					{
						this.spriteDirection = this.direction;
					}
					if (this.velocity.Y != 0f || (this.direction == -1 && this.velocity.X > 0f) || (this.direction == 1 && this.velocity.X < 0f))
					{
						this.frameCounter = 0.0;
						this.frame.Y = num;
					}
					else if (this.velocity.X == 0f)
					{
						this.frameCounter = 0.0;
						this.frame.Y = 0;
					}
					else
					{
						this.frameCounter += (double)Math.Abs(this.velocity.X);
						if (this.frameCounter >= 64.0 || this.frameCounter < 0.0)
						{
							this.frameCounter = 0.0;
						}
						this.frame.Y = num * ((int)(this.frameCounter / 8.0) + 2);
					}
				}
			}
			if (this.type == 558 || this.type == 559 || this.type == 560)
			{
				if (this.velocity.X > 0f)
				{
					this.spriteDirection = 1;
				}
				if (this.velocity.X < 0f)
				{
					this.spriteDirection = -1;
				}
				float num21 = this.velocity.ToRotation();
				if (this.velocity.X < 0f)
				{
					num21 += 3.14159274f;
				}
				if (this.ai[0] != 2f)
				{
					num21 = this.velocity.X * 0.1f;
				}
				this.rotation = num21;
				if (this.ai[0] == 2f)
				{
					this.frame.Y = num * 4;
				}
				else if ((this.frameCounter += 1.0) >= 6.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
					if (this.frame.Y >= num * 4)
					{
						this.frame.Y = 0;
					}
				}
			}
			if (this.type == 578)
			{
				this.rotation = this.velocity.X * 0.1f;
				if ((this.frameCounter += 1.0) >= 4.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
					if (this.frame.Y >= num * 4)
					{
						this.frame.Y = 0;
					}
				}
			}
			if (this.type == 574 || this.type == 575)
			{
				if (this.velocity.X > 0f)
				{
					this.spriteDirection = 1;
				}
				if (this.velocity.X < 0f)
				{
					this.spriteDirection = -1;
				}
				float num22 = this.velocity.ToRotation();
				if (this.velocity.X < 0f)
				{
					num22 += 3.14159274f;
				}
				this.rotation = this.rotation.AngleTowards(num22, 0.02f);
				if (this.ai[0] != 0f)
				{
					if (this.frame.Y < num * 2)
					{
						this.frame.Y = num * 2;
						this.frameCounter = 0.0;
					}
					int num23 = 4;
					if (this.frame.Y >= num * 5)
					{
						num23 = 8;
					}
					Vector2 vector = base.Center + new Vector2((float)(56 * this.spriteDirection), -30f).RotatedBy((double)this.rotation, default(Vector2));
					if ((this.frameCounter += 1.0) >= (double)num23 && this.frame.Y < num * 9)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
						if (this.frame.Y == num * 9)
						{
							for (int i = 0; i < 8; i++)
							{
								Dust dust = Dust.NewDustDirect(vector, 0, 0, 6, 0f, 0f, 100, default(Color), 1f);
								dust.velocity *= 3f;
								dust.scale = 0.6f;
								dust.fadeIn = 1.2f;
								dust.noGravity = true;
								dust.noLight = true;
							}
						}
					}
					if (this.frame.Y >= num * 9 && this.ai[0] < 3f)
					{
						Vector2 value = vector;
						Vector2 value2 = vector + (this.oldPos[3] - this.position);
						int maxValue = 5;
						if (this.frameCounter > 60.0)
						{
							maxValue = 4;
						}
						if (this.frameCounter > 180.0)
						{
							maxValue = 3;
						}
						if (this.frameCounter > 300.0)
						{
							maxValue = 2;
						}
						if (this.frameCounter > 600.0)
						{
							maxValue = 1;
						}
						for (int j = 0; j < 2; j++)
						{
							if (Main.rand.Next(maxValue) == 0)
							{
								Dust dust2 = Dust.NewDustDirect(Vector2.Lerp(value2, value, (float)j / 10f + 0.1f), 0, 0, 6, 0f, 0f, 50, default(Color), 1f);
								dust2.scale = 0.3f;
								dust2.fadeIn = 1.5f;
								dust2.noGravity = true;
								dust2.noLight = true;
							}
						}
					}
				}
				else if ((this.frameCounter += 1.0) >= 6.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
					if (this.frame.Y >= num * 2)
					{
						this.frame.Y = 0;
					}
				}
			}
			if (this.type == 549)
			{
				this.spriteDirection = 1;
				this.rotation = 0f;
				if ((this.frameCounter += 1.0) >= 6.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
					if (this.frame.Y >= num * Main.npcFrameCount[this.type])
					{
						this.frame.Y = 0;
					}
				}
			}
			if (this.type == 564 || this.type == 565)
			{
				int num24 = this.frame.Y;
				this.frame.Width = 80;
				this.frame.Height = 80;
				if (this.ai[0] > 0f && this.ai[1] == 0f)
				{
					this.spriteDirection = this.direction;
					if (num24 < 5 || num24 > 13)
					{
						this.frameCounter = 0.0;
					}
					num24 = 5;
					this.frameCounter += 1.0;
					int num25 = 0;
					if (this.frameCounter >= (double)(7 * ++num25))
					{
						num24 = 6;
					}
					if (this.frameCounter >= (double)(7 * ++num25))
					{
						num24 = 7;
					}
					if (this.frameCounter >= (double)(7 * ++num25))
					{
						num24 = 5;
					}
					if (this.frameCounter >= (double)(7 * ++num25))
					{
						num24 = 6;
					}
					if (this.frameCounter >= (double)(7 * ++num25))
					{
						num24 = 7;
					}
					if (this.frameCounter >= (double)(7 * ++num25))
					{
						num24 = 5;
					}
					if (this.frameCounter >= (double)(7 * ++num25))
					{
						num24 = 6;
					}
					if (this.frameCounter >= (double)(7 * ++num25))
					{
						num24 = 7;
					}
					if (this.frameCounter >= (double)(7 * ++num25))
					{
						num24 = 8;
					}
					if (this.frameCounter >= (double)(7 * ++num25))
					{
						num24 = 9;
					}
					if (this.frameCounter >= (double)(7 * ++num25))
					{
						num24 = 10;
					}
					if (this.frameCounter >= (double)(7 * ++num25))
					{
						num24 = 11;
					}
					if (this.frameCounter >= (double)(7 * ++num25))
					{
						num24 = 12;
					}
					if (this.frameCounter >= (double)(7 * (num25 + 1)))
					{
						num24 = 5;
						this.frameCounter = 0.0;
					}
				}
				else if (this.ai[0] > 0f && this.ai[1] == 1f)
				{
					this.spriteDirection = this.direction;
					if (num24 < 13 || num24 > 25)
					{
						this.frameCounter = 0.0;
					}
					num24 = 13;
					this.frameCounter += 1.0;
					int num26 = 0;
					if (this.frameCounter >= (double)(8 * ++num26))
					{
						num24 = 14;
					}
					if (this.frameCounter >= (double)(8 * ++num26))
					{
						num24 = 15;
					}
					if (this.frameCounter >= (double)(8 * ++num26))
					{
						num24 = 16;
					}
					if (this.frameCounter >= (double)(8 * ++num26))
					{
						num24 = 17;
					}
					if (this.frameCounter >= (double)(8 * ++num26))
					{
						num24 = 18;
					}
					if (this.frameCounter >= (double)(8 * ++num26))
					{
						num24 = 19;
					}
					if (this.frameCounter >= (double)(8 * ++num26))
					{
						num24 = 20;
					}
					if (this.frameCounter >= (double)(8 * ++num26))
					{
						num24 = 18;
					}
					if (this.frameCounter >= (double)(8 * ++num26))
					{
						num24 = 19;
					}
					if (this.frameCounter >= (double)(8 * ++num26))
					{
						num24 = 20;
					}
					if (this.frameCounter >= (double)(8 * ++num26))
					{
						num24 = 21;
					}
					if (this.frameCounter >= (double)(8 * ++num26))
					{
						num24 = 22;
					}
					if (this.frameCounter >= (double)(8 * ++num26))
					{
						num24 = 23;
					}
					if (this.frameCounter >= (double)(8 * ++num26))
					{
						num24 = 24;
					}
					if (this.frameCounter >= (double)(8 * ++num26))
					{
						num24 = 25;
					}
					if (this.frameCounter >= (double)(8 * (num26 + 1)))
					{
						num24 = 14;
						this.frameCounter = 0.0;
					}
				}
				else if (this.ai[0] > 0f && this.ai[1] == 2f)
				{
					this.spriteDirection = this.direction;
					if (num24 < 26 || num24 > 40)
					{
						this.frameCounter = 0.0;
					}
					num24 = 26;
					this.frameCounter += 1.0;
					int num27 = 0;
					if (this.frameCounter >= (double)(8 * ++num27))
					{
						num24 = 27;
					}
					if (this.frameCounter >= (double)(8 * ++num27))
					{
						num24 = 28;
					}
					if (this.frameCounter >= (double)(8 * ++num27))
					{
						num24 = 29;
					}
					if (this.frameCounter >= (double)(8 * ++num27))
					{
						num24 = 26;
					}
					if (this.frameCounter >= (double)(8 * ++num27))
					{
						num24 = 27;
					}
					if (this.frameCounter >= (double)(8 * ++num27))
					{
						num24 = 28;
					}
					if (this.frameCounter >= (double)(8 * ++num27))
					{
						num24 = 29;
					}
					if (this.frameCounter >= (double)(8 * ++num27))
					{
						num24 = 26;
					}
					if (this.frameCounter >= (double)(8 * ++num27))
					{
						num24 = 27;
					}
					if (this.frameCounter >= (double)(8 * ++num27))
					{
						num24 = 28;
					}
					if (this.frameCounter >= (double)(8 * ++num27))
					{
						num24 = 29;
					}
					if (this.frameCounter >= (double)(8 * ++num27))
					{
						num24 = 30;
					}
					if (this.frameCounter >= (double)(8 * ++num27))
					{
						num24 = 31;
					}
					if (this.frameCounter >= (double)(8 * ++num27))
					{
						num24 = 32;
					}
					if (this.frameCounter >= (double)(8 * ++num27))
					{
						num24 = 33;
					}
					if (this.frameCounter >= (double)(8 * ++num27))
					{
						num24 = 34;
					}
					if (this.frameCounter >= (double)(8 * ++num27))
					{
						num24 = 35;
					}
					if (this.frameCounter >= (double)(8 * ++num27))
					{
						num24 = 36;
					}
					if (this.frameCounter >= (double)(8 * ++num27))
					{
						num24 = 37;
					}
					if (this.frameCounter >= (double)(8 * ++num27))
					{
						num24 = 38;
					}
					if (this.frameCounter >= (double)(8 * ++num27))
					{
						num24 = 39;
					}
					if (this.frameCounter >= (double)(8 * ++num27))
					{
						num24 = 40;
					}
					if (this.frameCounter >= (double)(8 * (num27 + 1)))
					{
						num24 = 26;
						this.frameCounter = 0.0;
					}
				}
				else
				{
					this.frameCounter = this.frameCounter + (double)(this.velocity.Length() * 0.1f) + 1.0;
					if (this.frameCounter >= 40.0 || this.frameCounter < 0.0)
					{
						this.frameCounter = 0.0;
					}
					num24 = (int)(this.frameCounter / 8.0);
				}
				this.frame.Y = num24;
			}
			if (this.type == 338 || this.type == 339 || this.type == 340 || this.type == 17 || this.type == 18 || this.type == 19 || this.type == 20 || this.type == 22 || this.type == 142 || this.type == 353 || this.type == 178 || this.type == 38 || this.type == 26 || this.type == 27 || this.type == 28 || this.type == 31 || this.type == 294 || this.type == 295 || this.type == 296 || this.type == 21 || this.type == 44 || this.type == 54 || this.type == 37 || this.type == 73 || this.type == 77 || this.type == 78 || this.type == 79 || this.type == 80 || this.type == 104 || this.type == 107 || this.type == 108 || this.type == 120 || this.type == 124 || this.type == 140 || this.type == 159 || this.type == 160 || this.type == 167 || this.type == 181 || this.type == 185 || this.type == 196 || this.type == 197 || this.type == 198 || this.type == 201 || this.type == 202 || this.type == 203 || this.type == 207 || this.type == 208 || this.type == 209 || this.type == 212 || this.type == 213 || this.type == 227 || this.type == 228 || this.type == 229 || this.type == 287 || (this.type >= 310 && this.type <= 314) || (this.type >= 322 && this.type <= 324) || this.type == 326 || this.type == 368 || this.type == 369 || this.type == 453 || this.type == 460 || this.type == 462 || this.type == 463 || this.type == 489 || this.type == 441 || this.type == 534 || this.type == 550)
			{
				int num28 = (this.townNPC || this.type == 453) ? NPCID.Sets.ExtraFramesCount[this.type] : 0;
				if (this.velocity.Y == 0f)
				{
					if (this.direction == 1)
					{
						this.spriteDirection = 1;
					}
					if (this.direction == -1)
					{
						this.spriteDirection = -1;
					}
					int num29 = Main.npcFrameCount[this.type] - NPCID.Sets.AttackFrameCount[this.type];
					if (this.ai[0] == 2f)
					{
						this.frameCounter += 1.0;
						if (this.frame.Y / num == num29 - 1 && this.frameCounter >= 5.0)
						{
							this.frame.Y = 0;
							this.frameCounter = 0.0;
						}
						else if (this.frame.Y / num == 0 && this.frameCounter >= 40.0)
						{
							this.frame.Y = num * (num29 - 1);
							this.frameCounter = 0.0;
						}
						else if (this.frame.Y != 0 && this.frame.Y != num * (num29 - 1))
						{
							this.frame.Y = 0;
							this.frameCounter = 0.0;
						}
					}
					else if (this.ai[0] == 11f)
					{
						this.frameCounter += 1.0;
						if (this.frame.Y / num == num29 - 1 && this.frameCounter >= 20.0)
						{
							if (this.frameCounter == 20.0)
							{
								int num30 = Main.rand.Next(4);
								for (int k = 0; k < 3 + num30; k++)
								{
									int num31 = Dust.NewDust(base.Center + Vector2.UnitX * (float)(-(float)this.direction) * 8f - Vector2.One * 5f + Vector2.UnitY * 8f, 3, 6, 216, (float)(-(float)this.direction), 1f, 0, default(Color), 1f);
									Main.dust[num31].velocity /= 2f;
									Main.dust[num31].scale = 0.8f;
								}
								if (Main.rand.Next(30) == 0)
								{
									int num32 = Gore.NewGore(base.Center + Vector2.UnitX * (float)(-(float)this.direction) * 8f, Vector2.Zero, Main.rand.Next(580, 583), 1f);
									Main.gore[num32].velocity /= 2f;
									Main.gore[num32].velocity.Y = Math.Abs(Main.gore[num32].velocity.Y);
									Main.gore[num32].velocity.X = -Math.Abs(Main.gore[num32].velocity.X) * (float)this.direction;
								}
							}
							if (this.frameCounter >= 40.0 && Main.rand.Next(20) == 0)
							{
								this.frame.Y = 0;
								this.frameCounter = 0.0;
							}
						}
						else if (this.frame.Y / num == 0 && this.frameCounter >= 20.0)
						{
							this.frame.Y = num * (num29 - 1);
							this.frameCounter = 0.0;
							if (Main.netMode != 1)
							{
								EmoteBubble.NewBubble(89, new WorldUIAnchor(this), 30);
							}
						}
						else if (this.frame.Y != 0 && this.frame.Y != num * (num29 - 1))
						{
							this.frame.Y = 0;
							this.frameCounter = 0.0;
						}
					}
					else if (this.ai[0] == 5f)
					{
						this.frame.Y = num * (num29 - 3);
						this.frameCounter = 0.0;
					}
					else if (this.ai[0] == 6f)
					{
						this.frameCounter += 1.0;
						int num33 = this.frame.Y / num;
						switch (num29 - num33)
						{
						case 1:
						case 2:
						case 4:
						case 5:
							goto IL_2E2B;
						case 3:
							IL_2E0C:
							if (num33 != 0)
							{
								this.frame.Y = 0;
								this.frameCounter = 0.0;
								goto IL_2E2B;
							}
							goto IL_2E2B;
						}
						goto IL_2E0C;
						IL_2E2B:
						int num34;
						if (this.frameCounter < 10.0)
						{
							num34 = 0;
						}
						else if (this.frameCounter < 16.0)
						{
							num34 = num29 - 5;
						}
						else if (this.frameCounter < 46.0)
						{
							num34 = num29 - 4;
						}
						else if (this.frameCounter < 60.0)
						{
							num34 = num29 - 5;
						}
						else if (this.frameCounter < 66.0)
						{
							num34 = 0;
						}
						else if (this.frameCounter < 72.0)
						{
							num34 = num29 - 5;
						}
						else if (this.frameCounter < 102.0)
						{
							num34 = num29 - 4;
						}
						else if (this.frameCounter < 108.0)
						{
							num34 = num29 - 5;
						}
						else if (this.frameCounter < 114.0)
						{
							num34 = 0;
						}
						else if (this.frameCounter < 120.0)
						{
							num34 = num29 - 5;
						}
						else if (this.frameCounter < 150.0)
						{
							num34 = num29 - 4;
						}
						else if (this.frameCounter < 156.0)
						{
							num34 = num29 - 5;
						}
						else if (this.frameCounter < 162.0)
						{
							num34 = 0;
						}
						else if (this.frameCounter < 168.0)
						{
							num34 = num29 - 5;
						}
						else if (this.frameCounter < 198.0)
						{
							num34 = num29 - 4;
						}
						else if (this.frameCounter < 204.0)
						{
							num34 = num29 - 5;
						}
						else if (this.frameCounter < 210.0)
						{
							num34 = 0;
						}
						else if (this.frameCounter < 216.0)
						{
							num34 = num29 - 5;
						}
						else if (this.frameCounter < 246.0)
						{
							num34 = num29 - 4;
						}
						else if (this.frameCounter < 252.0)
						{
							num34 = num29 - 5;
						}
						else if (this.frameCounter < 258.0)
						{
							num34 = 0;
						}
						else if (this.frameCounter < 264.0)
						{
							num34 = num29 - 5;
						}
						else if (this.frameCounter < 294.0)
						{
							num34 = num29 - 4;
						}
						else if (this.frameCounter < 300.0)
						{
							num34 = num29 - 5;
						}
						else
						{
							num34 = 0;
						}
						if (num34 == num29 - 4 && num33 == num29 - 5)
						{
							Vector2 position = base.Center + new Vector2((float)(10 * this.direction), -4f);
							for (int l = 0; l < 8; l++)
							{
								int num35 = Main.rand.Next(139, 143);
								int num36 = Dust.NewDust(position, 0, 0, num35, this.velocity.X + (float)this.direction, this.velocity.Y - 2.5f, 0, default(Color), 1.2f);
								Dust expr_3150_cp_0 = Main.dust[num36];
								expr_3150_cp_0.velocity.X = expr_3150_cp_0.velocity.X + (float)this.direction * 1.5f;
								Main.dust[num36].position -= new Vector2(4f);
								Main.dust[num36].velocity *= 2f;
								Main.dust[num36].scale = 0.7f + Main.rand.NextFloat() * 0.3f;
							}
						}
						this.frame.Y = num * num34;
						if (this.frameCounter >= 300.0)
						{
							this.frameCounter = 0.0;
						}
					}
					else if (this.ai[0] == 7f)
					{
						this.frameCounter += 1.0;
						int num37 = this.frame.Y / num;
						switch (num29 - num37)
						{
						case 1:
						case 2:
						case 4:
						case 5:
							goto IL_328A;
						case 3:
							IL_326B:
							if (num37 != 0)
							{
								this.frame.Y = 0;
								this.frameCounter = 0.0;
								goto IL_328A;
							}
							goto IL_328A;
						}
						goto IL_326B;
						IL_328A:
						int num38 = 0;
						if (this.frameCounter < 16.0)
						{
							num38 = 0;
						}
						else if (this.frameCounter == 16.0 && Main.netMode != 1)
						{
							EmoteBubble.NewBubbleNPC(new WorldUIAnchor(this), 112, null);
						}
						else if (this.frameCounter < 128.0)
						{
							num38 = ((this.frameCounter % 16.0 < 8.0) ? (num29 - 2) : 0);
						}
						else if (this.frameCounter < 160.0)
						{
							num38 = 0;
						}
						else if (this.frameCounter == 160.0 && Main.netMode != 1)
						{
							EmoteBubble.NewBubbleNPC(new WorldUIAnchor(this), 60, null);
						}
						else if (this.frameCounter < 220.0)
						{
							num38 = ((this.frameCounter % 12.0 < 6.0) ? (num29 - 2) : 0);
						}
						else
						{
							num38 = 0;
						}
						this.frame.Y = num * num38;
						if (this.frameCounter >= 220.0)
						{
							this.frameCounter = 0.0;
						}
					}
					else if (this.ai[0] == 9f)
					{
						this.frameCounter += 1.0;
						int num39 = this.frame.Y / num;
						switch (num29 - num39)
						{
						case 1:
						case 2:
						case 4:
						case 5:
							goto IL_3435;
						case 3:
							IL_3416:
							if (num39 != 0)
							{
								this.frame.Y = 0;
								this.frameCounter = 0.0;
								goto IL_3435;
							}
							goto IL_3435;
						}
						goto IL_3416;
						IL_3435:
						int num40;
						if (this.frameCounter < 10.0)
						{
							num40 = 0;
						}
						else if (this.frameCounter < 16.0)
						{
							num40 = num29 - 5;
						}
						else
						{
							num40 = num29 - 4;
						}
						if (this.ai[1] < 16f)
						{
							num40 = num29 - 5;
						}
						if (this.ai[1] < 10f)
						{
							num40 = 0;
						}
						this.frame.Y = num * num40;
					}
					else if (this.ai[0] == 18f)
					{
						this.frameCounter += 1.0;
						int num41 = this.frame.Y / num;
						switch (num29 - num41)
						{
						case 1:
						case 2:
						case 4:
						case 5:
							goto IL_3522;
						case 3:
							IL_3503:
							if (num41 != 0)
							{
								this.frame.Y = 0;
								this.frameCounter = 0.0;
								goto IL_3522;
							}
							goto IL_3522;
						}
						goto IL_3503;
						IL_3522:
						int num42;
						if (this.frameCounter >= 10.0)
						{
							if (this.frameCounter < 16.0)
							{
								num42 = num29 - 1;
							}
							else
							{
								num42 = num29 - 2;
							}
						}
						if (this.ai[1] < 16f)
						{
							num42 = num29 - 1;
						}
						if (this.ai[1] < 10f)
						{
						}
						num42 = Main.npcFrameCount[this.type] - 2;
						this.frame.Y = num * num42;
					}
					else if (this.ai[0] == 10f || this.ai[0] == 13f)
					{
						this.frameCounter += 1.0;
						int num43 = this.frame.Y / num;
						switch (num43 - num29)
						{
						case 0:
						case 1:
						case 2:
						case 3:
							break;
						default:
							if (num43 != 0)
							{
								this.frame.Y = 0;
								this.frameCounter = 0.0;
							}
							break;
						}
						int num44 = 10;
						int num45 = 6;
						int num46;
						if (this.frameCounter < (double)num44)
						{
							num46 = 0;
						}
						else if (this.frameCounter < (double)(num44 + num45))
						{
							num46 = num29;
						}
						else if (this.frameCounter < (double)(num44 + num45 * 2))
						{
							num46 = num29 + 1;
						}
						else if (this.frameCounter < (double)(num44 + num45 * 3))
						{
							num46 = num29 + 2;
						}
						else if (this.frameCounter < (double)(num44 + num45 * 4))
						{
							num46 = num29 + 3;
						}
						else
						{
							num46 = 0;
						}
						this.frame.Y = num * num46;
					}
					else if (this.ai[0] == 15f)
					{
						this.frameCounter += 1.0;
						int num47 = this.frame.Y / num;
						switch (num47 - num29)
						{
						case 0:
						case 1:
						case 2:
						case 3:
							break;
						default:
							if (num47 != 0)
							{
								this.frame.Y = 0;
								this.frameCounter = 0.0;
							}
							break;
						}
						float num48 = this.ai[1] / (float)NPCID.Sets.AttackTime[this.type];
						int num49;
						if (num48 > 0.65f)
						{
							num49 = num29;
						}
						else if (num48 > 0.5f)
						{
							num49 = num29 + 1;
						}
						else if (num48 > 0.35f)
						{
							num49 = num29 + 2;
						}
						else if (num48 > 0f)
						{
							num49 = num29 + 3;
						}
						else
						{
							num49 = 0;
						}
						this.frame.Y = num * num49;
					}
					else if (this.ai[0] == 12f)
					{
						this.frameCounter += 1.0;
						int num50 = this.frame.Y / num;
						switch (num50 - num29)
						{
						case 0:
						case 1:
						case 2:
						case 3:
						case 4:
							break;
						default:
							if (num50 != 0)
							{
								this.frame.Y = 0;
								this.frameCounter = 0.0;
							}
							break;
						}
						int num51 = num29 + this.GetShootingFrame(this.ai[2]);
						this.frame.Y = num * num51;
					}
					else if (this.ai[0] == 14f)
					{
						this.frameCounter += 1.0;
						int num52 = this.frame.Y / num;
						switch (num52 - num29)
						{
						case 0:
						case 1:
							break;
						default:
							if (num52 != 0)
							{
								this.frame.Y = 0;
								this.frameCounter = 0.0;
							}
							break;
						}
						int num53 = 12;
						int num54 = (this.frameCounter % (double)num53 * 2.0 < (double)num53) ? num29 : (num29 + 1);
						this.frame.Y = num * num54;
					}
					else if (this.ai[0] == 3f || this.ai[0] == 4f)
					{
						this.frameCounter += 1.0;
						int num55 = this.frame.Y / num;
						switch (num29 - num55)
						{
						case 1:
						case 2:
						case 4:
						case 5:
							goto IL_396C;
						case 3:
							IL_394D:
							if (num55 != 0)
							{
								this.frame.Y = 0;
								this.frameCounter = 0.0;
								goto IL_396C;
							}
							goto IL_396C;
						}
						goto IL_394D;
						IL_396C:
						bool flag2 = this.ai[0] == 3f;
						int num56 = 0;
						int num57 = 0;
						int num58 = -1;
						int num59 = -1;
						if (this.frameCounter < 10.0)
						{
							num56 = 0;
						}
						else if (this.frameCounter < 16.0)
						{
							num56 = num29 - 5;
						}
						else if (this.frameCounter < 46.0)
						{
							num56 = num29 - 4;
						}
						else if (this.frameCounter < 60.0)
						{
							num56 = num29 - 5;
						}
						else if (this.frameCounter < 216.0)
						{
							num56 = 0;
						}
						else if (this.frameCounter == 216.0 && Main.netMode != 1)
						{
							num58 = 70;
						}
						else if (this.frameCounter < 286.0)
						{
							num56 = ((this.frameCounter % 12.0 < 6.0) ? (num29 - 2) : 0);
						}
						else if (this.frameCounter < 320.0)
						{
							num56 = 0;
						}
						else if (this.frameCounter == 320.0 && Main.netMode != 1)
						{
							num58 = 100;
						}
						else if (this.frameCounter < 420.0)
						{
							num56 = ((this.frameCounter % 16.0 < 8.0) ? (num29 - 2) : 0);
						}
						else
						{
							num56 = 0;
						}
						if (this.frameCounter < 70.0)
						{
							num57 = 0;
						}
						else if (this.frameCounter == 70.0 && Main.netMode != 1)
						{
							num59 = 90;
						}
						else if (this.frameCounter < 160.0)
						{
							num57 = ((this.frameCounter % 16.0 < 8.0) ? (num29 - 2) : 0);
						}
						else if (this.frameCounter < 166.0)
						{
							num57 = num29 - 5;
						}
						else if (this.frameCounter < 186.0)
						{
							num57 = num29 - 4;
						}
						else if (this.frameCounter < 200.0)
						{
							num57 = num29 - 5;
						}
						else if (this.frameCounter < 320.0)
						{
							num57 = 0;
						}
						else if (this.frameCounter < 326.0)
						{
							num57 = num29 - 1;
						}
						else
						{
							num57 = 0;
						}
						if (flag2)
						{
							if (num58 != -1)
							{
								EmoteBubble.NewBubbleNPC(new WorldUIAnchor(this), num58, new WorldUIAnchor(Main.npc[(int)this.ai[2]]));
							}
							if (num59 != -1)
							{
								EmoteBubble.NewBubbleNPC(new WorldUIAnchor(Main.npc[(int)this.ai[2]]), num59, new WorldUIAnchor(this));
							}
						}
						this.frame.Y = num * (flag2 ? num56 : num57);
						if (this.frameCounter >= 420.0)
						{
							this.frameCounter = 0.0;
						}
					}
					else if (this.ai[0] == 16f || this.ai[0] == 17f)
					{
						this.frameCounter += 1.0;
						int num60 = this.frame.Y / num;
						switch (num29 - num60)
						{
						case 1:
						case 2:
						case 4:
						case 5:
							goto IL_3CE0;
						case 3:
							IL_3CC1:
							if (num60 != 0)
							{
								this.frame.Y = 0;
								this.frameCounter = 0.0;
								goto IL_3CE0;
							}
							goto IL_3CE0;
						}
						goto IL_3CC1;
						IL_3CE0:
						bool flag3 = this.ai[0] == 16f;
						int num61 = 0;
						int num62 = -1;
						if (this.frameCounter < 10.0)
						{
							num61 = 0;
						}
						else if (this.frameCounter < 16.0)
						{
							num61 = num29 - 5;
						}
						else if (this.frameCounter < 22.0)
						{
							num61 = num29 - 4;
						}
						else if (this.frameCounter < 28.0)
						{
							num61 = num29 - 5;
						}
						else if (this.frameCounter < 34.0)
						{
							num61 = num29 - 4;
						}
						else if (this.frameCounter < 40.0)
						{
							num61 = num29 - 5;
						}
						else if (this.frameCounter == 40.0 && Main.netMode != 1)
						{
							num62 = 45;
						}
						else if (this.frameCounter < 70.0)
						{
							num61 = num29 - 4;
						}
						else if (this.frameCounter < 76.0)
						{
							num61 = num29 - 5;
						}
						else if (this.frameCounter < 82.0)
						{
							num61 = num29 - 4;
						}
						else if (this.frameCounter < 88.0)
						{
							num61 = num29 - 5;
						}
						else if (this.frameCounter < 94.0)
						{
							num61 = num29 - 4;
						}
						else if (this.frameCounter < 100.0)
						{
							num61 = num29 - 5;
						}
						else if (this.frameCounter == 100.0 && Main.netMode != 1)
						{
							num62 = 45;
						}
						else if (this.frameCounter < 130.0)
						{
							num61 = num29 - 4;
						}
						else if (this.frameCounter < 136.0)
						{
							num61 = num29 - 5;
						}
						else if (this.frameCounter < 142.0)
						{
							num61 = num29 - 4;
						}
						else if (this.frameCounter < 148.0)
						{
							num61 = num29 - 5;
						}
						else if (this.frameCounter < 154.0)
						{
							num61 = num29 - 4;
						}
						else if (this.frameCounter < 160.0)
						{
							num61 = num29 - 5;
						}
						else if (this.frameCounter == 160.0 && Main.netMode != 1)
						{
							num62 = 75;
						}
						else if (this.frameCounter < 220.0)
						{
							num61 = num29 - 4;
						}
						else if (this.frameCounter < 226.0)
						{
							num61 = num29 - 5;
						}
						else
						{
							num61 = 0;
						}
						if (flag3 && num62 != -1)
						{
							int num63 = (int)this.localAI[2];
							int num64 = (int)this.localAI[3];
							int num65 = (int)Main.npc[(int)this.ai[2]].localAI[3];
							int num66 = (int)Main.npc[(int)this.ai[2]].localAI[2];
							int num67 = 3 - num63 - num64;
							int num68 = 0;
							if (this.frameCounter == 40.0)
							{
								num68 = 1;
							}
							if (this.frameCounter == 100.0)
							{
								num68 = 2;
							}
							if (this.frameCounter == 160.0)
							{
								num68 = 3;
							}
							int num69 = 3 - num68;
							int num70 = -1;
							int num71 = 0;
							while (num70 < 0 && ++num71 < 100)
							{
								num70 = Main.rand.Next(2);
								if (num70 == 0 && num66 >= num64)
								{
									num70 = -1;
								}
								if (num70 == 1 && num65 >= num63)
								{
									num70 = -1;
								}
								if (num70 == -1 && num69 <= num67)
								{
									num70 = 2;
								}
							}
							if (num70 == 0)
							{
								Main.npc[(int)this.ai[2]].localAI[3] += 1f;
								num65++;
							}
							if (num70 == 1)
							{
								Main.npc[(int)this.ai[2]].localAI[2] += 1f;
								num66++;
							}
							int num72 = Utils.SelectRandom<int>(Main.rand, new int[]
							{
								38,
								37,
								36
							});
							int num73 = num72;
							if (num70 == 0)
							{
								switch (num72)
								{
								case 36:
									num73 = 38;
									break;
								case 37:
									num73 = 36;
									break;
								case 38:
									num73 = 37;
									break;
								}
							}
							else if (num70 == 1)
							{
								switch (num72)
								{
								case 36:
									num73 = 37;
									break;
								case 37:
									num73 = 38;
									break;
								case 38:
									num73 = 36;
									break;
								}
							}
							if (num69 == 0)
							{
								if (num65 >= 2)
								{
									num72 -= 3;
								}
								if (num66 >= 2)
								{
									num73 -= 3;
								}
							}
							EmoteBubble.NewBubble(num72, new WorldUIAnchor(this), num62);
							EmoteBubble.NewBubble(num73, new WorldUIAnchor(Main.npc[(int)this.ai[2]]), num62);
						}
						this.frame.Y = num * (flag3 ? num61 : num61);
						if (this.frameCounter >= 420.0)
						{
							this.frameCounter = 0.0;
						}
					}
					else if (this.velocity.X == 0f)
					{
						if (this.type == 140 || this.type == 287 || this.type == 489)
						{
							this.frame.Y = num;
							this.frameCounter = 0.0;
						}
						else
						{
							this.frame.Y = 0;
							this.frameCounter = 0.0;
						}
					}
					else
					{
						int num74 = 6;
						if (this.type == 534)
						{
							num74 = 12;
						}
						if (this.type == 489)
						{
							num74 = 8;
							this.frameCounter += (double)(Math.Abs(this.velocity.X) * 1f);
							this.frameCounter += 0.5;
						}
						else
						{
							this.frameCounter += (double)(Math.Abs(this.velocity.X) * 2f);
							this.frameCounter += 1.0;
						}
						if (this.type == 462)
						{
							num74 = 9;
						}
						if (this.frameCounter > (double)num74)
						{
							this.frame.Y = this.frame.Y + num;
							this.frameCounter = 0.0;
						}
						if (this.frame.Y / num >= Main.npcFrameCount[this.type] - num28)
						{
							this.frame.Y = num * 2;
						}
					}
				}
				else if (this.type == 462)
				{
					this.frameCounter = 0.0;
					if (this.velocity.Y < 0f)
					{
						this.frame.Y = num;
					}
					else
					{
						this.frame.Y = num * 2;
					}
				}
				else
				{
					this.frameCounter = 0.0;
					this.frame.Y = num;
					if (this.type == 489 || this.type == 21 || this.type == 31 || this.type == 294 || this.type == 326 || this.type == 295 || this.type == 296 || this.type == 44 || this.type == 77 || this.type == 78 || this.type == 79 || this.type == 80 || this.type == 120 || this.type == 140 || this.type == 159 || this.type == 167 || this.type == 197 || this.type == 201 || this.type == 202 || this.type == 203 || this.type == 287 || (this.type >= 322 && this.type <= 324))
					{
						this.frame.Y = 0;
					}
					if (this.type == 181)
					{
						this.frame.Y = num * 14;
					}
				}
			}
			if (this.type >= 494 && this.type <= 495)
			{
				if (this.ai[2] > 0f)
				{
					if (this.ai[2] < 7f)
					{
						this.frame.Y = num * 5;
					}
					else if (this.ai[2] < 14f)
					{
						this.frame.Y = num * 6;
					}
					else if (this.ai[2] < 20f)
					{
						this.frame.Y = num * 7;
					}
				}
				else
				{
					if (this.velocity.Y == 0f)
					{
						if (this.direction == 1)
						{
							this.spriteDirection = 1;
						}
						if (this.direction == -1)
						{
							this.spriteDirection = -1;
						}
					}
					if (this.velocity.Y != 0f || (this.direction == -1 && this.velocity.X > 0f) || (this.direction == 1 && this.velocity.X < 0f))
					{
						this.frameCounter = 0.0;
						if (this.velocity.Y < 0f)
						{
							this.frame.Y = num * 2;
						}
						else
						{
							this.frame.Y = num * 3;
						}
					}
					else if (this.velocity.X == 0f)
					{
						this.frameCounter = 0.0;
						this.frame.Y = 0;
					}
					else
					{
						this.frameCounter += (double)Math.Abs(this.velocity.X);
						if (this.frameCounter < 8.0)
						{
							this.frame.Y = 0;
						}
						else if (this.frameCounter < 16.0)
						{
							this.frame.Y = num;
						}
						else if (this.frameCounter < 24.0)
						{
							this.frame.Y = num * 2;
						}
						else if (this.frameCounter < 32.0)
						{
							this.frame.Y = num * 3;
						}
						else if (this.frameCounter < 39.0)
						{
							this.frame.Y = num * 4;
						}
						else
						{
							this.frame.Y = num * 4;
							this.frameCounter = 0.0;
						}
					}
				}
			}
			if (this.type == 541)
			{
				if (this.ai[0] > 0f)
				{
					float num75 = this.ai[0];
					if (num75 < 6f)
					{
						this.frame.Y = num * 4;
					}
					else if (num75 < 105f)
					{
						this.frame.Y = num * (int)(num75 / 8f % 4f + 5f);
					}
					else if (num75 < 114f)
					{
						this.frame.Y = num * 9;
					}
					else if (num75 < 135f)
					{
						this.frame.Y = num * (int)((num75 - 99f - 15f) / 7f + 10f);
					}
					else
					{
						this.frame.Y = num;
					}
				}
				else
				{
					this.frameCounter = this.frameCounter + (double)(this.velocity.Length() * 0.1f) + 1.0;
					if (this.frameCounter >= 8.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y >= num * 4)
					{
						this.frame.Y = 0;
					}
				}
			}
			if (this.type >= 498 && this.type <= 506)
			{
				if (this.velocity.Y == 0f)
				{
					if (this.direction == 1)
					{
						this.spriteDirection = 1;
					}
					if (this.direction == -1)
					{
						this.spriteDirection = -1;
					}
					if (this.ai[2] > 0f)
					{
						this.spriteDirection = this.direction;
						if (this.ai[1] < 12f)
						{
							this.frame.Y = num * 8;
						}
						else if (this.ai[1] < 34f)
						{
							this.frame.Y = num * 9;
						}
						else
						{
							this.frame.Y = num * 8;
						}
						this.frameCounter = 0.0;
					}
					else if (this.velocity.X == 0f)
					{
						this.frame.Y = 0;
					}
					else
					{
						this.frameCounter += (double)(Math.Abs(this.velocity.X) * 1f);
						if (this.frameCounter > 4.0)
						{
							this.frame.Y = this.frame.Y + num;
							this.frameCounter = 0.0;
						}
						if (this.frame.Y > num * 7)
						{
							this.frame.Y = 0;
						}
					}
				}
				else
				{
					this.frameCounter = 0.0;
					this.frame.Y = num * 10;
				}
			}
			else if (this.type >= 524 && this.type <= 527)
			{
				if (this.velocity.Y == 0f)
				{
					if (this.direction != 0)
					{
						this.spriteDirection = this.direction;
					}
					if (this.velocity.X == 0f)
					{
						this.frame.Y = 0;
						this.frameCounter = 0.0;
					}
					else
					{
						this.frameCounter += (double)Math.Abs(this.velocity.X);
						this.frameCounter += 1.0;
						if (this.frameCounter > 9.0)
						{
							this.frame.Y = this.frame.Y + num;
							this.frameCounter = 0.0;
						}
						if (this.frame.Y / num >= Main.npcFrameCount[this.type])
						{
							this.frame.Y = num * 2;
						}
					}
				}
				else
				{
					this.frame.Y = num;
					this.frameCounter = 0.0;
				}
			}
			else if (this.type >= 528 && this.type <= 529)
			{
				if (this.velocity.Y == 0f)
				{
					if (this.direction != 0)
					{
						this.spriteDirection = this.direction;
					}
					if (this.velocity.X == 0f)
					{
						this.frame.Y = 0;
						this.frameCounter = 0.0;
					}
					else
					{
						this.frameCounter += (double)Math.Abs(this.velocity.X);
						this.frameCounter += 1.0;
						if (this.frameCounter > 9.0)
						{
							this.frame.Y = this.frame.Y + num;
							this.frameCounter = 0.0;
						}
						if (this.frame.Y / num >= Main.npcFrameCount[this.type] - 1)
						{
							this.frame.Y = num;
						}
					}
				}
				else
				{
					this.frame.Y = num * (Main.npcFrameCount[this.type] - 1);
					this.frameCounter = 0.0;
				}
			}
			else if (this.type == 533)
			{
				if (this.velocity.Y == 0f && this.direction != 0)
				{
					this.spriteDirection = this.direction;
				}
				this.frameCounter += 1.0;
				if (this.frameCounter >= 48.0)
				{
					this.frameCounter = 0.0;
				}
				this.frame.Y = (int)(this.frameCounter / 6.0) * num;
				if (this.ai[1] > 0f)
				{
					this.frame.Y = this.frame.Y + num * 8;
				}
			}
			if (this.type >= 496 && this.type <= 497)
			{
				if (this.ai[0] == 0f)
				{
					this.rotation = 0f;
					if (this.velocity.Y == 0f)
					{
						this.spriteDirection = this.direction;
					}
					else if (this.velocity.Y < 0f)
					{
						this.frameCounter = 0.0;
					}
					this.frameCounter += (double)(Math.Abs(this.velocity.X) * 1.1f);
					if (this.frameCounter < 6.0)
					{
						this.frame.Y = 0;
					}
					else if (this.frameCounter < 12.0)
					{
						this.frame.Y = num;
					}
					else if (this.frameCounter < 18.0)
					{
						this.frame.Y = num * 2;
					}
					else if (this.frameCounter < 24.0)
					{
						this.frame.Y = num * 3;
					}
					else
					{
						this.frameCounter = 0.0;
					}
				}
				else if (this.ai[0] == 1f)
				{
					this.frameCounter = 0.0;
					if (this.ai[1] < 10f)
					{
						this.frame.Y = num * 4;
					}
					else if (this.ai[1] < 20f)
					{
						this.frame.Y = num * 5;
					}
					else
					{
						this.frame.Y = num * 6;
					}
				}
				else if (this.ai[0] == 5f)
				{
					this.frameCounter = 0.0;
					if (this.ai[1] < 10f)
					{
						this.frame.Y = num * 10;
					}
					else if (this.ai[1] < 20f)
					{
						this.frame.Y = num * 11;
					}
					else
					{
						this.frame.Y = num * 3;
					}
				}
				else
				{
					this.frameCounter = 0.0;
					this.frame.Y = num * 7;
				}
			}
			else if (this.aiStyle == 39 && this.type != 417)
			{
				if (this.ai[0] == 0f)
				{
					this.rotation = 0f;
					if (this.velocity.Y == 0f)
					{
						this.spriteDirection = this.direction;
					}
					else if (this.velocity.Y < 0f)
					{
						this.frameCounter = 0.0;
					}
					this.frameCounter += (double)(Math.Abs(this.velocity.X) * 1.1f);
					if (this.frameCounter < 6.0)
					{
						this.frame.Y = 0;
					}
					else if (this.frameCounter < 12.0)
					{
						this.frame.Y = num;
					}
					else if (this.frameCounter < 18.0)
					{
						this.frame.Y = num * 2;
					}
					else if (this.frameCounter < 24.0)
					{
						this.frame.Y = num * 3;
					}
					else if (this.frameCounter < 32.0)
					{
						this.frame.Y = num * 4;
					}
					else
					{
						this.frameCounter = 0.0;
					}
				}
				else if (this.ai[0] == 1f)
				{
					this.frameCounter = 0.0;
					if (this.ai[1] < 10f)
					{
						this.frame.Y = num * 5;
					}
					else if (this.ai[1] < 20f)
					{
						this.frame.Y = num * 6;
					}
					else
					{
						this.frame.Y = num * 7;
					}
				}
				else if (this.ai[0] == 5f)
				{
					this.frameCounter = 0.0;
					if (this.ai[1] < 10f)
					{
						this.frame.Y = num * 7;
					}
					else if (this.ai[1] < 20f)
					{
						this.frame.Y = num * 6;
					}
					else
					{
						this.frame.Y = num * 5;
					}
				}
				else
				{
					this.frameCounter = 0.0;
					this.frame.Y = num * 7;
				}
			}
			else if (this.type == 508 || this.type == 532)
			{
				if (this.velocity.Y != 0f)
				{
					this.frame.Y = num;
				}
				else if (this.velocity.X == 0f)
				{
					this.frame.Y = 0;
				}
				else
				{
					if (this.direction < 0 && this.velocity.X < 0f)
					{
						this.spriteDirection = -1;
					}
					if (this.direction > 0 && this.velocity.X > 0f)
					{
						this.spriteDirection = 1;
					}
					if (this.frame.Y / num < 2)
					{
						this.frame.Y = num * 2;
					}
					this.frameCounter += (double)(1f + Math.Abs(this.velocity.X) / 2f);
					if (this.frameCounter > 6.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y / num >= Main.npcFrameCount[this.type])
					{
						this.frame.Y = num * 2;
					}
				}
			}
			else if (this.type == 509)
			{
				if ((this.velocity.X > 0f && this.direction > 0) || (this.velocity.X < 0f && this.direction < 0))
				{
					this.spriteDirection = this.direction;
				}
				if ((this.frameCounter += 1.0) >= 3.0)
				{
					this.frameCounter = 0.0;
					this.frame.Y = this.frame.Y + num;
					if (this.frame.Y / num >= Main.npcFrameCount[this.type])
					{
						this.frame.Y = 0;
					}
				}
			}
			if (this.type == 415)
			{
				if (this.ai[2] < 0f)
				{
					if (this.frame.Y / num != 8 && this.frame.Y / num != 9 && this.frame.Y / num != 0)
					{
						this.frameCounter = 0.0;
					}
					this.frameCounter += 1.0;
					int num76 = 0;
					int num77 = 18;
					int num78 = 4;
					if (this.frameCounter > (double)(num77 - num78 * 2))
					{
						num76 = 8 + (int)this.frameCounter / 4 % 2;
					}
					if (this.frameCounter > (double)(num77 + num78 * 6))
					{
						num76 = 0;
						this.frameCounter = 0.0;
					}
					this.frame.Y = num * num76;
				}
				else if (this.velocity.Y == 0f)
				{
					if (this.direction != 0)
					{
						this.spriteDirection = this.direction;
					}
					if (this.frame.Y < num * 2)
					{
						this.frame.Y = num * 2;
					}
					this.frameCounter += (double)(Math.Abs(this.velocity.X) * 0.5f);
					if (this.frameCounter >= 8.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y / num >= Main.npcFrameCount[this.type] - 2)
					{
						this.frame.Y = num * 2;
					}
					if (this.velocity.X == 0f)
					{
						this.frame.Y = 0;
					}
				}
				else
				{
					this.frameCounter = 0.0;
					this.frame.Y = num;
				}
			}
			if (this.type == 416)
			{
				int num79 = (int)this.ai[0];
				if (Main.npc[num79].active && Main.npc[num79].type == 415 && Main.npcTexture[415] != null)
				{
					this.frame.Y = Main.npc[num79].frame.Y / (Main.npcTexture[415].Height / Main.npcFrameCount[415]) * num;
				}
			}
			else if (this.type == 417)
			{
				if (this.ai[0] == 0f)
				{
					this.rotation = 0f;
					if (this.velocity.Y == 0f)
					{
						this.spriteDirection = this.direction;
					}
					else if (this.velocity.Y < 0f)
					{
						this.frameCounter = 0.0;
					}
					this.frameCounter += (double)(Math.Abs(this.velocity.X) * 1.1f);
					this.frame.Y = (int)(this.frameCounter / 6.0) * num;
					if (this.frameCounter >= 48.0)
					{
						this.frameCounter = 0.0;
					}
				}
				else if (this.ai[0] == 1f)
				{
					this.frameCounter = 0.0;
					this.frame.Y = num * (9 + (int)(this.ai[1] / 6f));
				}
				else if (this.ai[0] == 5f)
				{
					this.frameCounter = 0.0;
					this.frame.Y = num * (13 - (int)(this.ai[1] / 6f));
				}
				else
				{
					this.frameCounter = 0.0;
					this.frame.Y = num * 14;
				}
			}
			else if (this.type == 518)
			{
				if (this.velocity.Y == 0f)
				{
					if (this.direction != 0)
					{
						this.spriteDirection = this.direction;
					}
					if (this.velocity.X == 0f)
					{
						this.frame.Y = 0;
						this.frameCounter = 0.0;
					}
					else
					{
						this.frameCounter += (double)(Math.Abs(this.velocity.X) * 1f);
						this.frameCounter += 1.0;
						if (this.frameCounter > 6.0)
						{
							this.frame.Y = this.frame.Y + num;
							this.frameCounter = 0.0;
						}
						if (this.frame.Y / num >= Main.npcFrameCount[this.type])
						{
							this.frame.Y = num * 2;
						}
					}
				}
				else
				{
					this.frame.Y = num;
					this.frameCounter = 0.0;
				}
			}
			else if (this.type == 419)
			{
				if (this.ai[2] < 0f)
				{
					int num80 = 1;
					if (this.direction != 0)
					{
						this.spriteDirection = this.direction;
					}
					if (this.frame.Y / num >= 9)
					{
						this.frame.Y = num * 2;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y / num < 2)
					{
						this.frame.Y = num * 2;
						this.frameCounter = 0.0;
					}
					this.frameCounter += 1.0;
					if (this.frameCounter >= (double)(num80 * 4 + 6))
					{
						this.frameCounter = 8.0;
					}
					if (this.frameCounter < 6.0)
					{
						this.frame.Y = num * (int)(2.0 + this.frameCounter / 3.0);
					}
					else
					{
						this.frame.Y = num * (int)(4.0 + (this.frameCounter - 6.0) / (double)num80);
					}
				}
				else if (this.velocity.Y == 0f)
				{
					if (this.direction != 0)
					{
						this.spriteDirection = this.direction;
					}
					if (this.velocity.X == 0f)
					{
						this.frame.Y = 0;
						this.frameCounter = 0.0;
					}
					else
					{
						this.frameCounter += (double)(Math.Abs(this.velocity.X) * 1f);
						this.frameCounter += 1.0;
						if (this.frameCounter > 6.0)
						{
							this.frame.Y = this.frame.Y + num;
							this.frameCounter = 0.0;
						}
						if (this.frame.Y / num >= Main.npcFrameCount[this.type])
						{
							this.frame.Y = num * 9;
						}
						if (this.frame.Y / num < 9)
						{
							this.frame.Y = num * 9;
						}
					}
				}
				else
				{
					this.frame.Y = num;
					this.frameCounter = 0.0;
				}
			}
			else if (this.type == 425)
			{
				if (this.direction != 0)
				{
					this.spriteDirection = -this.direction;
				}
				if (this.ai[2] == 1f)
				{
					this.frameCounter += 1.0;
					if (this.frameCounter >= 3.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y > num * 12 || this.frame.Y < num * 10)
					{
						this.frame.Y = num * 10;
					}
				}
				else if (this.velocity.Y != 0f)
				{
					this.frameCounter = 0.0;
					this.frame.Y = num;
				}
				else if (this.velocity.X == 0f)
				{
					this.frameCounter = 0.0;
					this.frame.Y = 0;
				}
				else
				{
					this.frameCounter += (double)Math.Abs(this.velocity.X);
					if (this.frameCounter >= 8.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y > num * 9 || this.frame.Y < num * 2)
					{
						this.frame.Y = num * 2;
					}
				}
			}
			else if (this.type == 427)
			{
				if (this.direction != 0)
				{
					this.spriteDirection = this.direction;
				}
				if (this.velocity.Y != 0f)
				{
					this.frameCounter += 1.0;
					if (this.frameCounter >= 2.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y >= num * 9 || this.frame.Y < num * 6)
					{
						this.frame.Y = num * 6;
					}
				}
				else if (this.velocity.X == 0f)
				{
					this.frameCounter = 0.0;
					this.frame.Y = 0;
				}
				else
				{
					this.frameCounter += (double)Math.Abs(this.velocity.X);
					if (this.frameCounter >= 8.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y > num * 5 || this.frame.Y < num)
					{
						this.frame.Y = num;
					}
				}
			}
			else if (this.type == 426)
			{
				if (this.direction != 0)
				{
					this.spriteDirection = this.direction;
				}
				if (this.ai[1] >= 45f)
				{
					if (this.velocity.Y == 0f)
					{
						this.frame.Y = num * 8;
					}
					else
					{
						this.frameCounter += 1.0;
						if (this.frameCounter >= 2.0)
						{
							this.frame.Y = this.frame.Y + num;
							this.frameCounter = 0.0;
						}
						if (this.frame.Y >= num * 15 || this.frame.Y < num * 12)
						{
							this.frame.Y = num * 12;
						}
					}
				}
				else if (this.velocity.Y != 0f)
				{
					this.frameCounter += 1.0;
					if (this.frameCounter >= 2.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y >= num * 12 || this.frame.Y < num * 9)
					{
						this.frame.Y = num * 9;
					}
				}
				else if (this.velocity.X == 0f)
				{
					this.frameCounter = 0.0;
					this.frame.Y = 0;
				}
				else
				{
					this.frameCounter += (double)Math.Abs(this.velocity.X);
					if (this.frameCounter >= 10.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y > num * 7 || this.frame.Y < num)
					{
						this.frame.Y = num;
					}
				}
			}
			else if (this.type == 429)
			{
				if (this.velocity.Y == 0f)
				{
					if (this.direction != 0)
					{
						this.spriteDirection = this.direction;
					}
					if (this.velocity.X == 0f)
					{
						this.frame.Y = 0;
						this.frameCounter = 0.0;
					}
					else
					{
						this.frameCounter += (double)(Math.Abs(this.velocity.X) * 1f);
						this.frameCounter += 1.0;
						if (this.frameCounter > 6.0)
						{
							this.frame.Y = this.frame.Y + num;
							this.frameCounter = 0.0;
						}
						if (this.frame.Y / num >= Main.npcFrameCount[this.type])
						{
							this.frame.Y = num * 2;
						}
					}
				}
				else
				{
					this.frame.Y = num;
					this.frameCounter = 0.0;
				}
			}
			else if (this.type == 428)
			{
				if (this.velocity.Y == 0f)
				{
					if (this.direction != 0)
					{
						this.spriteDirection = this.direction;
					}
					if (this.velocity.X == 0f)
					{
						this.frame.Y = 0;
						this.frameCounter = 0.0;
					}
					else
					{
						this.frameCounter += (double)(Math.Abs(this.velocity.X) * 1f);
						if ((this.frameCounter += 1.0) > 10.0)
						{
							this.frame.Y = this.frame.Y + num;
							this.frameCounter = 0.0;
						}
						if (this.frame.Y / num >= Main.npcFrameCount[this.type] - 1)
						{
							this.frame.Y = 0;
						}
					}
				}
				else if (this.frame.Y / num != 4)
				{
					if (this.frameCounter > 0.0)
					{
						this.frameCounter = 0.0;
					}
					if ((this.frameCounter -= 1.0) < -10.0 || this.velocity.Y > 0.6f)
					{
						this.frame.Y = num * 4;
						this.frameCounter = 0.0;
					}
				}
			}
			else if (this.type == 423)
			{
				if (this.ai[2] == 1f)
				{
					int num81 = 2;
					if (this.ai[1] >= 30f && this.ai[1] < 45f)
					{
						num81 = 3;
					}
					this.frame.Y = num81 * num;
				}
				else if (this.velocity.Y != 0f)
				{
					this.frame.Y = num;
				}
				else if (this.velocity.X == 0f)
				{
					this.frame.Y = 0;
				}
				else
				{
					if (this.velocity.X != 0f)
					{
						this.spriteDirection = Math.Sign(-this.velocity.X);
					}
					if (this.frame.Y / num < 4)
					{
						this.frame.Y = num * 4;
					}
					this.frameCounter += (double)(1f + Math.Abs(this.velocity.X) / 2f);
					if (this.frameCounter > 6.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y / num >= Main.npcFrameCount[this.type])
					{
						this.frame.Y = num * 4;
					}
				}
			}
			else if (this.type == 421)
			{
				if (this.ai[0] == 5f)
				{
					this.frameCounter += 1.0;
				}
				if ((this.frameCounter += 1.0) >= 5.0)
				{
					this.frameCounter = 0.0;
					this.frame.Y = this.frame.Y + num;
					if (this.frame.Y / num >= Main.npcFrameCount[this.type])
					{
						this.frame.Y = 0;
					}
				}
			}
			if (this.type == 424)
			{
				if (this.velocity.Y == 0f)
				{
					if (this.direction != 0)
					{
						this.spriteDirection = -this.direction;
					}
					if (this.ai[2] > 0f)
					{
						this.frame.Y = num * ((this.ai[1] > 90f) ? (Main.npcFrameCount[this.type] - 2) : (Main.npcFrameCount[this.type] - 1));
						this.frameCounter = 0.0;
					}
					else if (this.velocity.X == 0f)
					{
						this.frame.Y = 0;
					}
					else
					{
						if (this.frame.Y < num * 2)
						{
							this.frame.Y = num * 2;
						}
						this.frameCounter += (double)(Math.Abs(this.velocity.X) * 2f);
						this.frameCounter += (double)(this.velocity.X * 1.3f);
						if (this.frameCounter > 6.0)
						{
							this.frame.Y = this.frame.Y + num;
							this.frameCounter = 0.0;
						}
						if (this.frame.Y / num >= Main.npcFrameCount[this.type] - 2)
						{
							this.frame.Y = num * 2;
						}
					}
				}
				else
				{
					this.frameCounter = 0.0;
					this.frame.Y = num;
				}
			}
			else if (this.type == 420 && (this.frameCounter += 1.0) >= 5.0)
			{
				this.frameCounter = 0.0;
				this.frame.Y = this.frame.Y + num;
				if (this.frame.Y / num >= Main.npcFrameCount[this.type])
				{
					this.frame.Y = 0;
				}
			}
			if (this.type == 411)
			{
				if (this.ai[1] >= 90f && this.ai[1] < 180f)
				{
					this.spriteDirection = -this.direction;
					this.frame.Y = num * (Main.npcFrameCount[this.type] - 1);
					this.frameCounter = 0.0;
				}
				else if (this.velocity.Y == 0f)
				{
					if (this.direction != 0)
					{
						this.spriteDirection = -this.direction;
					}
					if (this.velocity.X == 0f)
					{
						this.frame.Y = 0;
						this.frameCounter = 0.0;
					}
					else
					{
						this.frameCounter += (double)(Math.Abs(this.velocity.X) * 1f);
						this.frameCounter += 1.0;
						if (this.frameCounter > 6.0)
						{
							this.frame.Y = this.frame.Y + num;
							this.frameCounter = 0.0;
						}
						if (this.frame.Y / num >= Main.npcFrameCount[this.type] - 1)
						{
							this.frame.Y = num * 2;
						}
					}
				}
				else
				{
					this.frame.Y = num;
					this.frameCounter = 0.0;
				}
			}
			else if (this.type == 409)
			{
				if (this.velocity.Y == 0f && this.ai[1] <= 30f && this.ai[1] > 0f)
				{
					this.frame.Y = num * (Main.npcFrameCount[this.type] - 1);
					this.frameCounter = 0.0;
				}
				else
				{
					if (this.velocity.Y == 0f)
					{
						this.spriteDirection = this.direction;
					}
					if ((this.frameCounter += 1.0) >= 6.0)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
						if (this.frame.Y / num >= Main.npcFrameCount[this.type] - 2)
						{
							this.frame.Y = 0;
						}
					}
				}
			}
			else if (this.type == 410)
			{
				this.frameCounter += (double)Math.Abs(this.velocity.X);
				if (this.frameCounter >= 10.0)
				{
					this.frameCounter -= 10.0;
					this.frame.Y = this.frame.Y + num;
					if (this.frame.Y / num >= Main.npcFrameCount[this.type])
					{
						this.frame.Y = 0;
					}
				}
			}
			else if (this.type == 407)
			{
				if ((this.frameCounter += 1.0) >= 6.0)
				{
					this.frameCounter = 0.0;
					this.frame.Y = this.frame.Y + num;
					if (this.frame.Y / num >= Main.npcFrameCount[this.type])
					{
						this.frame.Y = 0;
					}
				}
			}
			else if ((this.type == 405 || this.type == 406) && (this.frameCounter += 1.0) >= 4.0)
			{
				this.frameCounter = 0.0;
				this.frame.Y = this.frame.Y + num;
				if (this.frame.Y / num >= Main.npcFrameCount[this.type])
				{
					this.frame.Y = 0;
				}
			}
			if (this.type == 516)
			{
				if (this.localAI[1] == 0f)
				{
					this.localAI[1] = 1f;
					this.frame.Y = num * Main.rand.Next(3);
					this.frameCounter += (double)Main.rand.Next(3);
				}
				this.frameCounter += 1.0;
				if (this.frameCounter > 3.0)
				{
					this.frameCounter = 0.0;
					this.frame.Y = this.frame.Y + num;
					if (this.frame.Y > num * 3)
					{
						this.frame.Y = 0;
					}
				}
			}
			if (this.type == 418)
			{
				if (this.ai[0] == 0f || this.ai[0] == 1f || this.ai[0] == -1f)
				{
					this.frameCounter += 1.0;
					if (this.frameCounter > 6.0)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
					}
					if (this.frame.Y > num * 4)
					{
						this.frame.Y = 0;
					}
				}
				else if (this.ai[0] == 2f)
				{
					if (this.ai[1] < 10f)
					{
						this.frame.Y = num * 5;
					}
					else if (this.ai[1] < 20f)
					{
						this.frame.Y = num * 6;
					}
					else
					{
						this.frame.Y = num * 7;
					}
				}
				else if (this.ai[0] == -2f)
				{
					this.frameCounter += 1.0;
					if (this.frameCounter > 12.0)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
					}
					if (this.frame.Y > num * 7)
					{
						this.frame.Y = num * 5;
					}
				}
			}
			if (this.type == 1 || this.type == 537 || this.type == 16 || this.type == 59 || this.type == 71 || this.type == 81 || this.type == 138 || this.type == 147 || this.type == 183 || this.type == 184 || this.type == 204 || this.type == 225 || this.type == 302 || this.type == 304 || (this.type >= 333 && this.type <= 336) || this.type == 535)
			{
				if (this.type == 302 || this.type == 304)
				{
					this.spriteDirection = this.direction;
				}
				this.frameCounter += 1.0;
				if (num2 > 0)
				{
					this.frameCounter += 1.0;
				}
				if (num2 == 4)
				{
					this.frameCounter += 1.0;
				}
				if (this.frameCounter >= 8.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y >= num * Main.npcFrameCount[this.type])
				{
					this.frame.Y = 0;
				}
			}
			if (this.type == 488)
			{
				int num82 = (int)this.localAI[1];
				if (Framing.GetTileSafely((int)this.ai[0], (int)this.ai[1]).frameX >= 36)
				{
					num82 *= -1;
				}
				if (this.localAI[0] > 24f)
				{
					this.localAI[0] = 24f;
				}
				if (this.localAI[0] > 0f)
				{
					this.localAI[0] -= 1f;
				}
				if (this.localAI[0] < 0f)
				{
					this.localAI[0] = 0f;
				}
				int num83 = (num82 == -1) ? 4 : 6;
				int num84 = (int)this.localAI[0] / num83;
				if (this.localAI[0] % (float)num83 != 0f)
				{
					num84++;
				}
				if (num84 != 0 && num82 == 1)
				{
					num84 += 5;
				}
				this.frame.Y = num84 * num;
			}
			if (this.type >= 430 && this.type <= 436)
			{
				if (this.ai[2] > 0f)
				{
					if (this.ai[2] < 5f)
					{
						this.frame.Y = num * 3;
					}
					else if (this.ai[2] < 10f)
					{
						this.frame.Y = num * 4;
					}
					else if (this.ai[2] < 15f)
					{
						this.frame.Y = num * 5;
					}
					else
					{
						this.frame.Y = num * 6;
					}
				}
				else
				{
					if (this.velocity.Y == 0f)
					{
						if (this.direction == 1)
						{
							this.spriteDirection = 1;
						}
						if (this.direction == -1)
						{
							this.spriteDirection = -1;
						}
					}
					if (this.velocity.Y != 0f || (this.direction == -1 && this.velocity.X > 0f) || (this.direction == 1 && this.velocity.X < 0f))
					{
						this.frameCounter = 0.0;
						this.frame.Y = num * 2;
					}
					else if (this.velocity.X == 0f)
					{
						this.frameCounter = 0.0;
						this.frame.Y = 0;
					}
					else
					{
						this.frameCounter += (double)Math.Abs(this.velocity.X);
						if (this.frameCounter < 8.0)
						{
							this.frame.Y = 0;
						}
						else if (this.frameCounter < 16.0)
						{
							this.frame.Y = num;
						}
						else if (this.frameCounter < 24.0)
						{
							this.frame.Y = num * 2;
						}
						else if (this.frameCounter < 32.0)
						{
							this.frame.Y = num;
						}
						else
						{
							this.frameCounter = 0.0;
						}
					}
				}
			}
			if (this.type == 454)
			{
				int num85 = (int)(this.frameCounter / 2.0);
				this.frame.Y = num * num85;
			}
			if (this.type == 377 || this.type == 446)
			{
				if (this.velocity.Y != 0f)
				{
					this.frame.Y = num;
				}
				else
				{
					this.frame.Y = 0;
				}
				this.spriteDirection = this.direction;
			}
			if (this.type == 378)
			{
				if (this.velocity.Y != 0f && this.frame.Y < num * 2)
				{
					this.frame.Y = this.frame.Y + num * 2;
				}
				if (this.velocity.Y == 0f && this.frame.Y > num * 2)
				{
					this.frame.Y = this.frame.Y - num * 2;
				}
				this.frameCounter += 1.0;
				int num86 = 6;
				if (this.frameCounter >= (double)num86)
				{
					this.frameCounter = 0.0;
					this.frame.Y = this.frame.Y + num;
					if (this.velocity.Y != 0f && this.frame.Y >= num * 4)
					{
						this.frame.Y = num * 2;
					}
					if (this.velocity.Y == 0f && this.frame.Y >= num * 2)
					{
						this.frame.Y = 0;
					}
				}
			}
			if (this.type == 376)
			{
				this.frameCounter += 1.0;
				if (this.frameCounter > 30.0)
				{
					this.frameCounter = 0.0;
					this.frame.Y = this.frame.Y + num;
					if (this.frame.Y >= num * 2)
					{
						this.frame.Y = 0;
					}
				}
			}
			if (this.type == 375)
			{
				this.frameCounter += 1.0;
				if (this.frameCounter > 4.0)
				{
					this.frameCounter = 0.0;
					this.frame.Y = this.frame.Y + num;
					if (this.frame.Y >= num * 4)
					{
						this.frame.Y = 0;
					}
				}
			}
			if (this.type == 374)
			{
				this.localAI[0] = -2f;
				if (this.velocity.Y == 0f)
				{
					this.rotation = 0f;
					if (this.velocity.X == 0f)
					{
						this.frame.Y = 0;
						this.frameCounter = 0.0;
					}
					else
					{
						this.frameCounter += 1.0;
						if (this.frameCounter > 6.0)
						{
							this.frameCounter = 0.0;
							this.frame.Y = this.frame.Y + num;
							if (this.frame.Y >= num * 4)
							{
								this.frame.Y = num;
							}
						}
					}
				}
				else
				{
					this.rotation += (float)this.direction * 0.1f;
					this.frameCounter += 1.0;
					if (this.frameCounter > 3.0)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
						if (this.frame.Y >= num * 4)
						{
							this.frame.Y = num;
						}
					}
				}
			}
			if (this.type == 492)
			{
				this.frame.Y = num * (int)this.ai[2];
			}
			if (this.type == 473 || this.type == 474 || this.type == 475 || this.type == 476)
			{
				if (this.velocity.Y == 0f)
				{
					this.spriteDirection = this.direction;
				}
				if (this.ai[0] == 0f || this.ai[0] == 7f)
				{
					this.rotation = 0f;
					this.frameCounter = 0.0;
					this.frame.Y = 0;
				}
				else if (this.ai[0] == 1f)
				{
					this.rotation = 0f;
					this.frameCounter = 0.0;
					int num87 = 6;
					if (this.ai[1] < (float)num87)
					{
						this.frame.Y = num;
					}
					else if (this.ai[1] < (float)(num87 * 2))
					{
						this.frame.Y = num * 2;
					}
					else if (this.ai[1] < (float)(num87 * 3))
					{
						this.frame.Y = num * 3;
					}
					else if (this.ai[1] < (float)(num87 * 4))
					{
						this.frame.Y = num * 4;
					}
					else if (this.ai[1] < (float)(num87 * 5))
					{
						this.frame.Y = num * 5;
					}
					else
					{
						this.frame.Y = num * 6;
					}
				}
				else if (this.ai[0] == 2f || this.ai[0] == 6f)
				{
					this.rotation = 0f;
					if (this.velocity.Y == 0f)
					{
						int num88 = 6;
						this.frameCounter += 1.0;
						if (this.frame.Y < num * 7)
						{
							this.frame.Y = num * 12;
						}
						if (this.frame.Y < num * 10)
						{
							if (this.frameCounter > 8.0)
							{
								this.frame.Y = this.frame.Y + num;
								this.frameCounter = 0.0;
								if (this.frame.Y == num * 10)
								{
									this.frameCounter = (double)(num88 * 2);
								}
							}
						}
						else if (this.frameCounter < (double)num88)
						{
							this.frame.Y = num * 12;
						}
						else if (this.frameCounter < (double)(num88 * 2))
						{
							this.frame.Y = num * 11;
						}
						else if (this.frameCounter < (double)(num88 * 3))
						{
							this.frame.Y = num * 10;
						}
						else
						{
							this.frame.Y = num * 11;
							if (this.frameCounter >= (double)(num88 * 4 - 1))
							{
								this.frameCounter = 0.0;
							}
						}
					}
					else
					{
						this.frame.Y = num * 13;
						this.frameCounter = 0.0;
					}
				}
				else if (this.ai[0] == 3f)
				{
					this.rotation = 0f;
					this.frameCounter += 1.0;
					if (this.frameCounter > 6.0)
					{
						this.frameCounter = 0.0;
						if (this.frame.Y > num * 7)
						{
							this.frame.Y = this.frame.Y - num;
						}
					}
				}
				else if (this.ai[0] == 4f || this.ai[0] == 5f)
				{
					if (this.ai[0] == 4f && this.ai[2] == 1f)
					{
						this.rotation = 0f;
					}
					this.frame.Y = num * 13;
					this.frameCounter = 0.0;
				}
				else if (this.ai[0] == 4.1f)
				{
					this.rotation = 0f;
					if (this.frame.Y > num * 6)
					{
						this.frameCounter = 0.0;
					}
					this.frameCounter += 1.0;
					int num89 = 4;
					if (this.frameCounter < (double)num89)
					{
						this.frame.Y = num * 6;
					}
					else if (this.frameCounter < (double)(num89 * 2))
					{
						this.frame.Y = num * 5;
					}
					else if (this.frameCounter < (double)(num89 * 3))
					{
						this.frame.Y = num * 4;
					}
					else if (this.frameCounter < (double)(num89 * 4))
					{
						this.frame.Y = num * 3;
					}
					else if (this.frameCounter < (double)(num89 * 5))
					{
						this.frame.Y = num * 4;
					}
					else
					{
						this.frame.Y = num * 5;
						if (this.frameCounter >= (double)(num89 * 6 - 1))
						{
							this.frameCounter = 0.0;
						}
					}
				}
			}
			if (this.type == 477)
			{
				this.frameCounter += (double)(this.velocity.Length() / 4f);
				this.frameCounter += 1.0;
				if (this.frameCounter >= 6.0)
				{
					this.frameCounter = 0.0;
					this.frame.Y = this.frame.Y + num;
				}
				if (this.frame.Y / num > 5)
				{
					this.frame.Y = 0;
				}
			}
			if (this.type == 479)
			{
				this.frameCounter += 1.0;
				int num90 = 4;
				if (this.frameCounter < (double)num90)
				{
					this.frame.Y = 0;
				}
				else if (this.frameCounter < (double)(num90 * 2))
				{
					this.frame.Y = num;
				}
				else if (this.frameCounter < (double)(num90 * 3))
				{
					this.frame.Y = num * 2;
				}
				else if (this.frameCounter < (double)(num90 * 4 - 1))
				{
					this.frame.Y = num;
				}
				else
				{
					this.frameCounter = 0.0;
				}
			}
			if (this.type == 472)
			{
				if (this.velocity.X < 0f)
				{
					this.direction = -1;
				}
				else
				{
					this.direction = 1;
				}
				if (this.direction == 1)
				{
					this.spriteDirection = 1;
				}
				if (this.direction == -1)
				{
					this.spriteDirection = -1;
				}
				this.rotation = (float)Math.Atan2((double)(this.velocity.Y * (float)this.direction), (double)(this.velocity.X * (float)this.direction));
				this.frameCounter += 1.0;
				if (this.frameCounter > 4.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y / num >= 6)
				{
					this.frame.Y = 0;
				}
			}
			if (this.type >= 449 && this.type <= 452)
			{
				if (this.velocity.Y == 0f)
				{
					if (this.direction == 1)
					{
						this.spriteDirection = 1;
					}
					if (this.direction == -1)
					{
						this.spriteDirection = -1;
					}
					if (this.ai[2] > 0f)
					{
						this.spriteDirection = this.direction;
						int num91 = 0;
						if (this.ai[1] < 22f)
						{
							num91 = -14;
						}
						else if (this.ai[1] < 28f)
						{
							num91 = 3;
						}
						else if (this.ai[1] < 34f)
						{
							num91 = 2;
						}
						else if (this.ai[1] < 40f)
						{
							num91 = 1;
						}
						this.frame.Y = num * (15 + num91);
						this.frameCounter = 0.0;
					}
					else if (this.velocity.X == 0f)
					{
						this.frame.Y = num;
					}
					else
					{
						if (this.frame.Y < num * 2)
						{
							this.frame.Y = num * 2;
						}
						this.frameCounter += (double)(Math.Abs(this.velocity.X) * 2f);
						if (this.frameCounter > 6.0)
						{
							this.frame.Y = this.frame.Y + num;
							this.frameCounter = 0.0;
						}
						if (this.frame.Y / num >= 15)
						{
							this.frame.Y = num * 2;
						}
					}
				}
				else
				{
					this.frameCounter = 0.0;
					this.frame.Y = 0;
				}
			}
			if (this.type == 481)
			{
				if (this.velocity.Y == 0f)
				{
					if (this.direction == 1)
					{
						this.spriteDirection = 1;
					}
					if (this.direction == -1)
					{
						this.spriteDirection = -1;
					}
					if (this.ai[2] > 0f)
					{
						this.spriteDirection = this.direction;
						int num92 = 0;
						if (this.ai[1] < 22f)
						{
							num92 = -14;
						}
						else if (this.ai[1] < 28f)
						{
							num92 = 3;
						}
						else if (this.ai[1] < 34f)
						{
							num92 = 2;
						}
						else if (this.ai[1] < 40f)
						{
							num92 = 1;
						}
						this.frame.Y = num * (15 + num92);
						this.frameCounter = 0.0;
					}
					else if (this.velocity.X == 0f)
					{
						this.frame.Y = num;
					}
					else
					{
						if (this.frame.Y < num * 2)
						{
							this.frame.Y = num * 2;
						}
						this.frameCounter += (double)(Math.Abs(this.velocity.X) * 2f);
						if (this.frameCounter > 6.0)
						{
							this.frame.Y = this.frame.Y + num;
							this.frameCounter = 0.0;
						}
						if (this.frame.Y / num >= 15)
						{
							this.frame.Y = num * 2;
						}
					}
				}
				else
				{
					this.frameCounter = 0.0;
					this.frame.Y = 0;
				}
			}
			if (this.type == 468)
			{
				if (this.velocity.Y == 0f)
				{
					if (this.direction == 1)
					{
						this.spriteDirection = 1;
					}
					if (this.direction == -1)
					{
						this.spriteDirection = -1;
					}
					if (this.ai[2] > 0f)
					{
						this.spriteDirection = this.direction;
						int num93 = 0;
						if (this.ai[1] < 22f)
						{
							num93 = -15;
						}
						else if (this.ai[1] < 28f)
						{
							num93 = 3;
						}
						else if (this.ai[1] < 34f)
						{
							num93 = 2;
						}
						else if (this.ai[1] < 40f)
						{
							num93 = 1;
						}
						this.frame.Y = num * (15 + num93);
						this.frameCounter = 0.0;
					}
					else if (this.velocity.X == 0f)
					{
						this.frame.Y = 0;
					}
					else
					{
						if (this.frame.Y < num * 2)
						{
							this.frame.Y = num * 2;
						}
						this.frameCounter += (double)(Math.Abs(this.velocity.X) * 2f);
						if (this.frameCounter > 6.0)
						{
							this.frame.Y = this.frame.Y + num;
							this.frameCounter = 0.0;
						}
						if (this.frame.Y / num >= 15)
						{
							this.frame.Y = num * 2;
						}
					}
				}
				else
				{
					this.frameCounter = 0.0;
					this.frame.Y = num;
				}
			}
			if (this.type == 379 || this.type == 380)
			{
				if (this.velocity.Y == 0f)
				{
					if (this.direction == 1)
					{
						this.spriteDirection = 1;
					}
					if (this.direction == -1)
					{
						this.spriteDirection = -1;
					}
					if (this.ai[2] > 0f)
					{
						this.spriteDirection = this.direction;
						this.frame.Y = num * ((int)this.ai[2] - 1 + 2);
						this.frameCounter = 0.0;
					}
					else if (this.velocity.X == 0f)
					{
						this.frame.Y = 0;
					}
					else
					{
						if (this.frame.Y < num * 7)
						{
							this.frame.Y = num * 7;
						}
						this.frameCounter += (double)(Math.Abs(this.velocity.X) * 2f);
						if (this.frameCounter > 6.0)
						{
							this.frame.Y = this.frame.Y + num;
							this.frameCounter = 0.0;
						}
						if (this.frame.Y / num >= Main.npcFrameCount[this.type])
						{
							this.frame.Y = num * 7;
						}
					}
				}
				else
				{
					this.frameCounter = 0.0;
					this.frame.Y = num;
				}
			}
			if (this.type == 381 || this.type == 382 || this.type == 383 || this.type == 385 || this.type == 389)
			{
				if (this.velocity.Y == 0f)
				{
					this.spriteDirection = this.direction;
					if (this.frame.Y < num * 2)
					{
						this.frame.Y = num * 2;
					}
					if (this.type == 389 || this.type == 385)
					{
						this.frameCounter += (double)Math.Abs(this.velocity.X) * 1.2;
					}
					else
					{
						this.frameCounter += (double)(Math.Abs(this.velocity.X) * 2f);
					}
					if (this.frameCounter > 6.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y / num >= Main.npcFrameCount[this.type])
					{
						this.frame.Y = num * 2;
					}
					if (this.velocity.X == 0f)
					{
						this.frame.Y = 0;
					}
				}
				else
				{
					this.frameCounter = 0.0;
					this.frame.Y = num;
				}
			}
			if (this.type == 387)
			{
				if (this.ai[0] > 0f)
				{
					this.frameCounter += 1.0;
					if (this.ai[0] >= 20f)
					{
						this.frameCounter += 1.0;
					}
					if (this.ai[0] >= 40f)
					{
						this.frameCounter += 1.0;
					}
					if (this.frameCounter >= 10.0)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
						if (this.frame.Y >= num * 2)
						{
							this.frame.Y = 0;
						}
					}
				}
				else
				{
					this.frameCounter += 1.0;
					if (this.frameCounter >= 15.0)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
						if (this.frame.Y >= num * 2)
						{
							this.frame.Y = 0;
						}
					}
				}
			}
			if (this.type == 386)
			{
				if (this.ai[2] > 0f)
				{
					int num94 = (int)this.ai[2] / 12;
					this.frame.Y = num * (9 + num94 % 2);
				}
				else if (this.velocity.Y == 0f)
				{
					this.spriteDirection = this.direction;
					if (this.frame.Y < num * 2)
					{
						this.frame.Y = num * 2;
					}
					this.frameCounter += (double)(Math.Abs(this.velocity.X) * 2f);
					if (this.frameCounter > 6.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y / num >= 9)
					{
						this.frame.Y = num * 2;
					}
					if (this.velocity.X == 0f)
					{
						this.frame.Y = 0;
					}
				}
				else
				{
					this.frameCounter = 0.0;
					this.frame.Y = num;
				}
			}
			if (this.type == 388)
			{
				this.frameCounter += 1.0;
				int num95 = 6;
				if (this.frameCounter >= (double)num95)
				{
					this.frameCounter = 0.0;
					this.frame.Y = this.frame.Y + num;
					if (this.frame.Y >= num * 2)
					{
						this.frame.Y = 0;
					}
				}
			}
			if (this.type == 391)
			{
				if (this.velocity.Y == 0f)
				{
					if (this.direction == 1)
					{
						this.spriteDirection = -1;
					}
					if (this.direction == -1)
					{
						this.spriteDirection = 1;
					}
					if (this.frame.Y < num)
					{
						this.frame.Y = num;
					}
					this.frameCounter += (double)(Math.Abs(this.velocity.X) * 0.5f);
					if (this.frameCounter > 6.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y / num >= Main.npcFrameCount[this.type])
					{
						this.frame.Y = num;
					}
					if (this.velocity.X == 0f)
					{
						this.frame.Y = 0;
					}
				}
				else
				{
					this.frameCounter = 0.0;
					this.frame.Y = 0;
				}
			}
			if (this.type == 390)
			{
				if (this.direction != 0)
				{
					this.spriteDirection = -this.direction;
				}
				if (this.ai[2] > 0f)
				{
					this.frame.Y = num * ((int)this.ai[2] - 1);
				}
				else
				{
					this.frame.Y = num * 2;
				}
			}
			if (this.type == 393)
			{
				Vector2 vector2 = this.ai[2].ToRotationVector2();
				int num96;
				if (vector2.Y > Math.Abs(vector2.X) * 2f)
				{
					num96 = 4;
				}
				else if (vector2.Y > Math.Abs(vector2.X) * 1.5f)
				{
					num96 = ((vector2.X > 0f) ? 5 : 3);
				}
				else if (Math.Abs(vector2.X) > vector2.Y * 2f)
				{
					num96 = ((vector2.X > 0f) ? 8 : 0);
				}
				else if (Math.Abs(vector2.X) > vector2.Y * 1.5f)
				{
					num96 = ((vector2.X > 0f) ? 7 : 1);
				}
				else
				{
					num96 = ((vector2.X > 0f) ? 6 : 2);
				}
				this.frame.Y = num * num96;
				float num97 = 280f;
				float num98 = 140f;
				bool flag4 = this.ai[3] >= num97 && this.ai[3] < num97 + num98;
				if (flag4 && (int)this.ai[3] % 6 <= 2)
				{
					this.frame.Y = this.frame.Y + num * 9;
				}
			}
			if (this.type == 394)
			{
				int num99 = (int)this.ai[3] - 300;
				if (num99 >= 120)
				{
					num99 -= 120;
					if (num99 >= 160)
					{
						this.frame.Y = num * (7 - (num99 - 160) / 5);
					}
					else if (num99 >= 20)
					{
						this.frame.Y = num * (num99 / 4 % 4);
					}
					else
					{
						this.frame.Y = num * (4 + num99 / 5);
					}
				}
				else
				{
					this.frame.Y = num * 4;
				}
			}
			if (this.type == 395)
			{
				float num100 = 20f;
				float num101 = 240f;
				bool flag5 = this.ai[3] >= num100 && this.ai[3] < num100 + num101;
				this.frameCounter += 1.0;
				if (this.frameCounter >= 66.0)
				{
					this.frameCounter = 0.0;
				}
				if (flag5)
				{
					this.frameCounter += 1.0;
					if (this.frameCounter >= 54.0 || this.frameCounter < 36.0)
					{
						this.frameCounter = 36.0;
					}
				}
				int num102 = (int)this.frameCounter % 66;
				num102 /= 6;
				this.frame.Y = num * num102;
			}
			if (this.type == 392)
			{
				float num103 = 20f;
				float num104 = 240f;
				bool flag6 = this.ai[3] >= num103 && this.ai[3] < num103 + num104;
				this.frameCounter += 1.0;
				if (flag6)
				{
					this.frameCounter += 1.0;
				}
				if (this.frameCounter >= 12.0)
				{
					this.frameCounter = 0.0;
				}
				int num105 = (int)this.frameCounter % 12;
				num105 /= 3;
				this.frame.Y = num * num105;
			}
			if (this.type == 399)
			{
				this.frameCounter = (this.frameCounter + 0.25) % 4.0 + (double)((this.ai[0] == 0f) ? 0 : 4);
				this.frame.Y = num * (int)this.frameCounter;
			}
			else if (this.type == 520)
			{
				if (this.velocity.Y == 0f)
				{
					this.spriteDirection = this.direction;
					this.frameCounter += (double)(Math.Abs(this.velocity.X) * 1f);
					if (this.frameCounter > 6.0)
					{
						if (Math.Abs(this.velocity.X) < 0.2f)
						{
							this.frame.Y = 0;
							this.frameCounter = 0.0;
						}
						else
						{
							this.frame.Y = this.frame.Y + num;
							this.frameCounter = 0.0;
						}
					}
					if (this.frame.Y / num >= Main.npcFrameCount[this.type])
					{
						this.frame.Y = num;
					}
					if (this.velocity.X == 0f)
					{
						this.frame.Y = 0;
					}
				}
				else
				{
					this.frameCounter = 0.0;
					this.frame.Y = num;
				}
			}
			if (this.type == 398)
			{
				if (this.ai[0] <= 0f)
				{
					this.frame.Y = 0;
				}
				else
				{
					if (this.frame.Y == 0)
					{
						Gore.NewGore(this.position + new Vector2(-10f, -15f), this.velocity, 619, 1f);
						Gore.NewGore(this.position + new Vector2(10f, -15f), this.velocity, 620, 1f);
						Gore.NewGore(this.position + new Vector2(-10f, 15f), this.velocity, 621, 1f);
						Gore.NewGore(this.position + new Vector2(10f, 15f), this.velocity, 622, 1f);
						for (int m = 0; m < 50; m++)
						{
							this.frame.Y = num;
							Dust.NewDust(this.position, this.width, this.height, 209, 0f, 0f, 0, default(Color), 1f);
						}
					}
					this.frameCounter += 1.0;
					if (this.frameCounter >= 30.0)
					{
						this.frameCounter = 6.0;
					}
					int num106 = (int)this.frameCounter % 30;
					num106 /= 6;
					this.frame.Y = num * num106;
				}
			}
			if (this.type == 397)
			{
				int num107 = (int)this.frameCounter / 7;
				this.frame.Y = num * num107;
			}
			if (this.type == 400)
			{
				this.frameCounter += 1.0;
				if (this.ai[0] == 0f || this.ai[0] == 3f)
				{
					this.frameCounter += 1.0;
				}
				if (this.frameCounter >= 16.0)
				{
					this.frameCounter = 0.0;
				}
				int num108 = (int)this.frameCounter % 16;
				num108 /= 4;
				this.frame.Y = num * num108;
			}
			if (this.type == 437)
			{
				this.frameCounter += 1.0;
				if (this.frameCounter >= 20.0)
				{
					this.frameCounter = 0.0;
				}
				int num109 = (int)this.frameCounter % 20;
				num109 /= 5;
				this.frame.Y = num * num109;
			}
			if (this.type == 438)
			{
				this.frameCounter += 1.0;
				if (this.ai[1] == 1f)
				{
					this.frameCounter += 1.0;
				}
				if (this.frameCounter >= 49.0)
				{
					this.frameCounter = 0.0;
				}
				int num110 = (int)this.frameCounter % 49;
				num110 /= 7;
				if (num110 >= 4)
				{
					num110 = 6 - num110;
				}
				this.frame.Y = num * num110;
			}
			if (this.type == 439 || this.type == 440)
			{
				int num111 = (int)this.localAI[2];
				if (num111 == 0)
				{
					if (this.frameCounter >= 15.0)
					{
						this.frameCounter = 0.0;
						this.frame.Y = 0;
					}
					else if (this.frame.Y != 0)
					{
						this.frame.Y = ((int)this.frameCounter / 5 + 4) * num;
					}
				}
				else if (num111 == 10)
				{
					if (this.frameCounter >= 15.0)
					{
						this.frameCounter = 0.0;
					}
					this.frame.Y = ((int)this.frameCounter / 5 + 4) * num;
				}
				else if (num111 == 1)
				{
					if (this.frameCounter >= 15.0)
					{
						this.frameCounter = 0.0;
						this.frame.Y = num;
					}
					else if (this.frame.Y != num)
					{
						this.frame.Y = ((int)this.frameCounter / 5 + 10) * num;
					}
				}
				else if (num111 == 11)
				{
					if (this.frameCounter >= 15.0)
					{
						this.frameCounter = 0.0;
					}
					this.frame.Y = ((int)this.frameCounter / 5 + 10) * num;
				}
				else if (num111 == 2)
				{
					if (this.frameCounter >= 15.0)
					{
						this.frameCounter = 0.0;
						this.frame.Y = num * 2;
					}
					else if (this.frame.Y != num * 2)
					{
						this.frame.Y = ((int)this.frameCounter / 5 + 7) * num;
					}
				}
				else if (num111 == 12)
				{
					if (this.frameCounter >= 15.0)
					{
						this.frameCounter = 0.0;
					}
					this.frame.Y = ((int)this.frameCounter / 5 + 7) * num;
				}
				else if (num111 == 13)
				{
					if (this.frameCounter >= 15.0)
					{
						this.frameCounter = 0.0;
					}
					this.frame.Y = ((int)this.frameCounter / 5 + 13) * num;
				}
				this.frameCounter += 1.0;
			}
			if (this.type == 521)
			{
				if (this.velocity.X < 0f)
				{
					this.direction = -1;
				}
				else
				{
					this.direction = 1;
				}
				if (this.direction != 0)
				{
					this.spriteDirection = this.direction;
				}
				this.rotation = (float)Math.Atan2((double)(this.velocity.Y * (float)this.spriteDirection), (double)(this.velocity.X * (float)this.spriteDirection)) + this.velocity.X * 0.1f;
				if ((this.frameCounter += 1.0) >= 5.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
					if (this.frame.Y / num >= Main.npcFrameCount[this.type])
					{
						this.frame.Y = 0;
					}
				}
			}
			if (this.type == 523 && (this.frameCounter += 1.0) >= 6.0)
			{
				this.frame.Y = this.frame.Y + num;
				this.frameCounter = 0.0;
				if (this.frame.Y / num >= Main.npcFrameCount[this.type])
				{
					this.frame.Y = 0;
				}
			}
			if (this.type == 371 || this.type == 372 || this.type == 373)
			{
				this.frame.Y = num;
			}
			if (this.type == 370)
			{
				if (this.ai[0] == 0f || this.ai[0] == 5f)
				{
					int num112 = 5;
					if (this.ai[0] == 5f)
					{
						num112 = 4;
					}
					this.frameCounter += 1.0;
					if (this.frameCounter > (double)num112)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
					}
					if (this.frame.Y >= num * 6)
					{
						this.frame.Y = 0;
					}
				}
				if (this.ai[0] == 1f || this.ai[0] == 6f)
				{
					if (this.ai[2] < 10f)
					{
						this.frame.Y = num * 6;
					}
					else
					{
						this.frame.Y = num * 7;
					}
				}
				if (this.ai[0] == 2f || this.ai[0] == 7f)
				{
					if (this.ai[2] < 10f)
					{
						this.frame.Y = num * 6;
					}
					else
					{
						this.frame.Y = num * 7;
					}
				}
				if (this.ai[0] == 3f || this.ai[0] == 8f || this.ai[0] == -1f)
				{
					int num113 = 90;
					if (this.ai[2] < (float)(num113 - 30) || this.ai[2] > (float)(num113 - 10))
					{
						this.frameCounter += 1.0;
						if (this.frameCounter > 5.0)
						{
							this.frameCounter = 0.0;
							this.frame.Y = this.frame.Y + num;
						}
						if (this.frame.Y >= num * 6)
						{
							this.frame.Y = 0;
						}
					}
					else
					{
						this.frame.Y = num * 6;
						if (this.ai[2] > (float)(num113 - 20) && this.ai[2] < (float)(num113 - 15))
						{
							this.frame.Y = num * 7;
						}
					}
				}
				if (this.ai[0] == 4f || this.ai[0] == 9f)
				{
					int num114 = 180;
					if (this.ai[2] < (float)(num114 - 60) || this.ai[2] > (float)(num114 - 20))
					{
						this.frameCounter += 1.0;
						if (this.frameCounter > 5.0)
						{
							this.frameCounter = 0.0;
							this.frame.Y = this.frame.Y + num;
						}
						if (this.frame.Y >= num * 6)
						{
							this.frame.Y = 0;
						}
					}
					else
					{
						this.frame.Y = num * 6;
						if (this.ai[2] > (float)(num114 - 50) && this.ai[2] < (float)(num114 - 25))
						{
							this.frame.Y = num * 7;
						}
					}
				}
			}
			if (this.type == 359 || this.type == 360)
			{
				if (this.velocity.Y > 1f)
				{
					this.frameCounter += 1.0;
					int num115 = 6;
					if (this.frameCounter < (double)num115)
					{
						this.frame.Y = num * 4;
					}
					else
					{
						this.frame.Y = num * 5;
						if (this.frameCounter >= (double)(num115 * 2 - 1))
						{
							this.frameCounter = 0.0;
						}
					}
				}
				else
				{
					this.frameCounter += 1.0;
					int num116 = 10;
					if (this.frameCounter < (double)num116)
					{
						this.frame.Y = 0;
					}
					else if (this.frameCounter < (double)(num116 * 2))
					{
						this.frame.Y = num;
					}
					else if (this.frameCounter < (double)(num116 * 3))
					{
						this.frame.Y = num * 2;
					}
					else if (this.frameCounter < (double)(num116 * 4))
					{
						this.frame.Y = num * 3;
					}
					else if (this.frameCounter < (double)(num116 * 5))
					{
						this.frame.Y = num * 2;
					}
					else
					{
						this.frame.Y = num;
						if (this.frameCounter >= (double)(num116 * 6 - 1))
						{
							this.frameCounter = 0.0;
						}
					}
				}
			}
			if (this.type == 327)
			{
				if (this.ai[3] == 0f)
				{
					if (this.frame.Y > num * 5)
					{
						this.frameCounter += 1.0;
					}
					else if (this.frame.Y > 0)
					{
						this.frameCounter -= 1.0;
					}
				}
				else if (this.ai[3] == 1f)
				{
					if (this.frame.Y > num * 10)
					{
						this.frameCounter += 1.0;
					}
					else if (this.frame.Y > num * 4)
					{
						this.frameCounter -= 1.0;
					}
					else if (this.frame.Y < num * 4)
					{
						this.frameCounter += 1.0;
					}
				}
				else if (this.ai[3] == 2f)
				{
					if (this.frame.Y < num * 2)
					{
						this.frameCounter -= 1.0;
					}
					else if (this.frame.Y > num * 8)
					{
						this.frameCounter -= 1.0;
					}
					else if (this.frame.Y < num * 8)
					{
						this.frameCounter += 1.0;
					}
				}
				if (this.frameCounter > 6.0)
				{
					this.frameCounter = 0.0;
					this.frame.Y = this.frame.Y + num;
					if (this.frame.Y > num * 11)
					{
						this.frame.Y = 0;
					}
				}
				if (this.frameCounter < 0.0)
				{
					this.frameCounter = 6.0;
					this.frame.Y = this.frame.Y - num;
					if (this.frame.Y < 0)
					{
						this.frame.Y = num * 11;
					}
				}
			}
			if (this.type == 347)
			{
				this.frameCounter += 1.0;
				if (this.frameCounter > 1.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y > num * 3)
				{
					this.frame.Y = 0;
				}
			}
			if (this.type == 346)
			{
				if (this.ai[0] == 1f)
				{
					this.spriteDirection = this.direction;
					this.frameCounter += 1.0;
					if (this.frameCounter > 2.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y > num * 8)
					{
						this.frame.Y = num * 6;
					}
					if (this.frame.Y < num * 6)
					{
						this.frame.Y = num * 6;
					}
				}
				else if (this.velocity.X == 0f)
				{
					this.frame.Y = this.frame.Y;
					this.frameCounter = 0.0;
				}
				else
				{
					this.spriteDirection = this.direction;
					this.frameCounter += 1.0;
					this.frameCounter += (double)(Math.Abs(this.velocity.X) / 2f);
					if (this.frameCounter > 4.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y > num * 5)
					{
						this.frame.Y = num;
					}
					if (this.frame.Y < num)
					{
						this.frame.Y = num;
					}
				}
			}
			if (this.type == 352)
			{
				this.frameCounter += 1.0;
				if (this.frameCounter > 3.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y > num * 5)
				{
					this.frame.Y = 0;
				}
			}
			if (this.type == 345)
			{
				if (this.ai[0] == 0f)
				{
					if (this.ai[3] >= 0f)
					{
						this.frame.Y = 0;
					}
					else if (this.velocity.X < 0f)
					{
						this.frame.Y = num;
					}
					else
					{
						this.frame.Y = num * 2;
					}
				}
				else if (this.ai[0] == 1f)
				{
					this.frameCounter += 1.0;
					if (this.frameCounter > 5.0)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
					}
					if (this.frame.Y > num * 4)
					{
						this.frame.Y = num * 3;
					}
					if (this.frame.Y < num * 3)
					{
						this.frame.Y = num * 3;
					}
				}
				else if (this.ai[0] == 2f)
				{
					this.frame.Y = num * 5;
				}
			}
			if (this.type == 344)
			{
				if (this.velocity.X == 0f)
				{
					this.frameCounter += 1.0;
					if (this.frameCounter > 2.0)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
					}
					if (this.frame.Y > num * 9)
					{
						this.frame.Y = 0;
					}
				}
				else
				{
					this.frameCounter += 1.0;
					if (this.frameCounter > 3.0)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
					}
					if (this.frame.Y > num * 9)
					{
						this.frame.Y = 0;
					}
				}
			}
			if (this.type == 325)
			{
				if (this.velocity.X == 0f)
				{
					this.frameCounter += 1.0;
					if (this.frameCounter > 4.0)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
					}
					if (this.frame.Y > num * 4)
					{
						this.frame.Y = 0;
					}
				}
				else
				{
					this.frameCounter += 1.0;
					if (this.frameCounter > 4.0)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
					}
					if (this.frame.Y < num * 5)
					{
						this.frame.Y = num * 5;
					}
					if (this.frame.Y > num * 9)
					{
						this.frame.Y = num * 5;
					}
				}
			}
			if (this.type == 490)
			{
				this.rotation = this.velocity.X * 0.15f;
				this.frameCounter += 1.0;
				if (this.frameCounter > 6.0)
				{
					this.frameCounter = 0.0;
					this.frame.Y = this.frame.Y + num;
				}
				if (this.frame.Y >= num * Main.npcFrameCount[this.type])
				{
					this.frame.Y = 0;
				}
			}
			else if (this.type == 266)
			{
				this.frameCounter += 1.0;
				if (this.frameCounter > 6.0)
				{
					this.frameCounter = 0.0;
					this.frame.Y = this.frame.Y + num;
				}
				if (this.ai[0] >= 0f)
				{
					if (this.frame.Y > num * 3)
					{
						this.frame.Y = 0;
					}
				}
				else
				{
					if (this.frame.Y < num * 4)
					{
						this.frame.Y = num * 4;
					}
					if (this.frame.Y > num * 7)
					{
						this.frame.Y = num * 4;
					}
				}
			}
			else if (this.type == 262)
			{
				this.frameCounter += 1.0;
				if (this.frameCounter > 6.0)
				{
					this.frameCounter = 0.0;
					this.frame.Y = this.frame.Y + num;
				}
				if (this.life > this.lifeMax / 2)
				{
					if (this.frame.Y > num * 3)
					{
						this.frame.Y = 0;
					}
				}
				else
				{
					if (this.frame.Y < num * 4)
					{
						this.frame.Y = num * 4;
					}
					if (this.frame.Y > num * 7)
					{
						this.frame.Y = num * 4;
					}
				}
			}
			else if (this.type >= 305 && this.type <= 309)
			{
				if (this.velocity.Y == 0f)
				{
					this.spriteDirection = this.direction;
				}
				if (this.velocity.Y < -3f)
				{
					this.frame.Y = num * 5;
				}
				else if (this.velocity.Y <= 0f)
				{
					this.frame.Y = 0;
				}
				else if (this.velocity.Y < 2f)
				{
					this.frame.Y = num * 3;
				}
				else
				{
					this.frame.Y = num;
				}
				this.rotation = this.velocity.X * 0.1f;
			}
			else if (this.type == 263)
			{
				if (this.velocity.X == 0f && this.velocity.Y == 0f)
				{
					if (this.frame.Y > 0)
					{
						this.frameCounter += 1.0;
						if (this.frameCounter > 4.0)
						{
							this.frameCounter = 0.0;
							this.frame.Y = this.frame.Y - num;
						}
					}
				}
				else if (this.frame.Y < 2)
				{
					this.frameCounter += 1.0;
					if (this.frameCounter > 4.0)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
					}
				}
			}
			else if (this.type == 244)
			{
				this.frameCounter += 1.0;
				if (num2 > 0)
				{
					this.frameCounter += 1.0;
				}
				if (num2 == 4)
				{
					this.frameCounter += 1.0;
				}
				if (this.frameCounter >= 8.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y >= num * Main.npcFrameCount[this.type])
				{
					this.frame.Y = 0;
				}
			}
			else if (this.type == 289)
			{
				this.frameCounter += 1.0;
				if (this.frameCounter < 2.0)
				{
					this.frame.Y = 0;
				}
				else if (this.frameCounter < 3.0)
				{
					this.frame.Y = num;
				}
				else
				{
					this.frame.Y = num * 2;
					this.frameCounter = 0.0;
				}
				if (this.ai[3] == 1f)
				{
					this.frame.Y = this.frame.Y + num * 3;
				}
			}
			else if (this.type == 288)
			{
				this.frameCounter += 1.0;
				if (this.frameCounter >= 6.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y >= num * Main.npcFrameCount[this.type])
				{
					this.frame.Y = 0;
				}
			}
			else if (this.type == 355 || this.type == 358)
			{
				this.spriteDirection = this.direction;
				this.frameCounter += 1.0;
				if (this.frameCounter < 4.0)
				{
					this.frame.Y = 0;
				}
				else
				{
					this.frame.Y = num;
					if (this.frameCounter >= 7.0)
					{
						this.frameCounter = 0.0;
					}
				}
				if (this.localAI[2] <= 0f)
				{
					this.frame.Y = this.frame.Y + num * 2;
				}
			}
			else if (this.type == 356 || this.type == 444)
			{
				int num117 = 7;
				this.rotation = this.velocity.X * 0.3f;
				this.spriteDirection = this.direction;
				this.frameCounter = this.frameCounter + 1.0 + (double)((Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) / 2f);
				if (this.frameCounter < (double)num117)
				{
					this.frame.Y = 0;
				}
				else if (this.frameCounter < (double)(num117 * 2))
				{
					this.frame.Y = num;
				}
				else if (this.frameCounter < (double)(num117 * 3))
				{
					this.frame.Y = num * 2;
				}
				else
				{
					this.frame.Y = num;
					if (this.frameCounter >= (double)(num117 * 4 - 1))
					{
						this.frameCounter = 0.0;
					}
				}
				if (this.type != 444)
				{
					this.frame.Y = this.frame.Y + (int)((float)(num * 3) * (this.ai[2] - 1f));
				}
			}
			else if (this.type == 357 || this.type == 448 || this.type == 484)
			{
				this.localAI[0] = -2f;
				if (this.velocity.Y == 0f)
				{
					this.rotation = 0f;
					if (this.velocity.X == 0f)
					{
						this.frame.Y = num;
						this.frameCounter = 0.0;
					}
					else
					{
						this.frameCounter += 1.0;
						if (this.frameCounter > 12.0)
						{
							this.frameCounter = 0.0;
							this.frame.Y = this.frame.Y + num;
							if (this.frame.Y > num)
							{
								this.frame.Y = 0;
							}
						}
					}
				}
				else
				{
					this.rotation += (float)this.direction * 0.1f;
					this.frame.Y = num;
				}
				int num118 = (int)base.Center.X / 16;
				int num119 = (int)this.position.Y / 16;
				if (WorldGen.InWorld(num118, num119, 0) && Main.tile[num118, num119] != null)
				{
					if (Main.tile[num118, num119].slope() == 0)
					{
						num119++;
					}
					if (Main.tile[num118, num119].slope() == 1)
					{
						this.rotation = 0.785f;
						this.localAI[0] = 0f;
					}
					else if (Main.tile[num118, num119].slope() == 2)
					{
						this.rotation = -0.785f;
						this.localAI[0] = 0f;
					}
				}
			}
			else if (this.type >= 485 && this.type <= 487)
			{
				this.spriteDirection = this.direction;
				this.localAI[0] = -2f;
				if (this.velocity.Y == 0f)
				{
					this.rotation = 0f;
					if (this.velocity.X == 0f)
					{
						this.frame.Y = num;
						this.frameCounter = 0.0;
					}
					else
					{
						this.frameCounter += (double)Math.Abs(this.velocity.X * 5f);
						if (this.frameCounter > 10.0)
						{
							this.frameCounter = 0.0;
							this.frame.Y = this.frame.Y + num;
							if (this.frame.Y > num * 3)
							{
								this.frame.Y = 0;
							}
						}
					}
				}
				else
				{
					this.rotation += (float)this.direction * 0.1f;
					this.frame.Y = num;
				}
				int num120 = (int)base.Center.X / 16;
				int num121 = (int)this.position.Y / 16;
				if (Main.tile[num120, num121] != null)
				{
					if (Main.tile[num120, num121].slope() == 0)
					{
						num121++;
					}
					if (Main.tile[num120, num121].slope() == 1)
					{
						this.rotation = 0.785f;
						this.localAI[0] = 0f;
					}
					else if (Main.tile[num120, num121].slope() == 2)
					{
						this.rotation = -0.785f;
						this.localAI[0] = 0f;
					}
				}
			}
			else if (this.type == 250 || this.type == 264 || this.type == 268)
			{
				this.frameCounter += 1.0;
				if (this.frameCounter >= 6.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y >= num * Main.npcFrameCount[this.type])
				{
					this.frame.Y = 0;
				}
			}
			else if (this.type == 245)
			{
				if (this.ai[0] == 0f)
				{
					if (this.ai[1] < -16f)
					{
						this.frame.Y = 0;
					}
					else if (this.ai[1] < -12f)
					{
						this.frame.Y = num;
					}
					else if (this.ai[1] < -8f)
					{
						this.frame.Y = num * 2;
					}
					else if (this.ai[1] < -4f)
					{
						this.frame.Y = num * 3;
					}
					else if (this.ai[1] < 0f)
					{
						this.frame.Y = num * 4;
					}
					else
					{
						this.frame.Y = 0;
					}
				}
				else if (this.ai[0] == 1f)
				{
					this.frame.Y = 1;
				}
			}
			else if (this.type == 246)
			{
				if (this.ai[0] == 0f)
				{
					if (this.localAI[0] == 1f)
					{
						this.frame.Y = num;
					}
					else
					{
						this.frame.Y = 0;
					}
				}
				else if (this.ai[0] == 1f)
				{
					if (this.localAI[0] == 1f)
					{
						this.frame.Y = num;
					}
					else
					{
						this.frame.Y = 0;
					}
					if (this.localAI[1] == -1f)
					{
						this.frame.Y = this.frame.Y + num * 4;
					}
					if (this.localAI[1] == 1f)
					{
						this.frame.Y = this.frame.Y + num * 2;
					}
				}
			}
			else if (this.type == 249)
			{
				if (this.localAI[0] == 1f)
				{
					this.frame.Y = num;
				}
				else
				{
					this.frame.Y = 0;
				}
			}
			else if (this.type == 141)
			{
				this.spriteDirection = this.direction;
				if (this.velocity.Y != 0f)
				{
					this.frame.Y = num * 2;
				}
				else
				{
					this.frameCounter += 1.0;
					if (this.frameCounter >= 8.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y > num)
					{
						this.frame.Y = 0;
					}
				}
			}
			else if (this.type == 243)
			{
				if (this.frameCounter < 0.0)
				{
					if (this.velocity.Y == 0f)
					{
						this.frameCounter += 1.0;
						if (this.frameCounter < -12.0)
						{
							if (this.frame.Y > num * 9)
							{
								this.frame.Y = num * 11;
							}
						}
						else if (this.frameCounter < -6.0)
						{
							if (this.frame.Y > num * 9)
							{
								this.frame.Y = num * 12;
							}
						}
						else if (this.frameCounter < 0.0)
						{
							this.frameCounter = 0.0;
							if (this.frame.Y > num * 9)
							{
								this.frame.Y = num * 11;
							}
						}
					}
					else
					{
						this.frameCounter = -18.0;
						if (this.velocity.Y < 0f)
						{
							this.frame.Y = num * 14;
						}
						else
						{
							this.frame.Y = num * 13;
						}
					}
				}
				else
				{
					this.spriteDirection = this.direction;
					this.frameCounter += (double)Math.Abs(this.velocity.X * 1.1f);
					if (this.frameCounter >= 6.0)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
						if (this.frame.Y > num * 9)
						{
							this.frame.Y = 0;
						}
					}
					if (this.velocity.Y < -2f || this.velocity.Y > 5f)
					{
						this.frameCounter = -18.0;
					}
				}
			}
			else if (this.type == 222)
			{
				this.frameCounter += 1.0;
				if (this.localAI[0] == 1f)
				{
					if (this.frameCounter > 4.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y >= num * 4)
					{
						this.frame.Y = 0;
					}
				}
				else
				{
					if (this.frameCounter > 4.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y < num * 4)
					{
						this.frame.Y = num * 4;
					}
					if (this.frame.Y >= num * 12)
					{
						this.frame.Y = num * 4;
					}
				}
			}
			else if (this.type == 164 || this.type == 239 || this.type == 530)
			{
				if (this.velocity.Y != 0f)
				{
					this.frameCounter = 0.0;
					if (this.velocity.Y < 0f)
					{
						this.frame.Y = num * 4;
					}
					else
					{
						this.frame.Y = 0;
					}
				}
				else
				{
					this.spriteDirection = this.direction;
					this.frameCounter += (double)(Math.Abs(this.velocity.X) * 1.1f);
					if (this.frameCounter < 6.0)
					{
						this.frame.Y = num;
					}
					else if (this.frameCounter < 12.0)
					{
						this.frame.Y = num * 2;
					}
					else if (this.frameCounter < 18.0)
					{
						this.frame.Y = num * 3;
					}
					else
					{
						this.frameCounter = 0.0;
					}
				}
			}
			else if (this.type == 236)
			{
				if (this.velocity.Y == 0f)
				{
					this.spriteDirection = this.direction;
				}
				else
				{
					this.frame.Y = 0;
				}
				this.frameCounter += (double)Math.Abs(this.velocity.X);
				if (this.frameCounter > 6.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y > num || this.velocity.Y != 0f)
				{
					this.frame.Y = 0;
				}
			}
			else if (this.type == 165 || this.type == 237 || this.type == 238 || this.type == 240 || this.type == 531)
			{
				float num122 = 0.5f;
				if (this.type == 531)
				{
					num122 = 0.4f;
				}
				this.frameCounter += (double)((Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) * num122);
				if (this.frameCounter < 6.0)
				{
					this.frame.Y = 0;
				}
				else if (this.frameCounter < 12.0)
				{
					this.frame.Y = num;
				}
				else if (this.frameCounter < 18.0)
				{
					this.frame.Y = num * 2;
				}
				else if (this.frameCounter < 24.0)
				{
					this.frame.Y = num * 3;
				}
				else
				{
					this.frameCounter = 0.0;
				}
			}
			else if (this.type == 195)
			{
				if (this.ai[0] < 3f)
				{
					this.frame.Y = 0;
				}
				else if (this.ai[0] < 6f)
				{
					this.frame.Y = num;
				}
				else if (this.ai[0] < 9f)
				{
					this.frame.Y = num * 2;
				}
				else if (this.ai[0] < 12f)
				{
					this.frame.Y = num * 3;
				}
				else if (this.ai[0] < 15f)
				{
					this.frame.Y = num * 4;
				}
				else
				{
					this.frame.Y = num * 5;
				}
			}
			else if (this.type == 174)
			{
				if (this.velocity.Y == 0f)
				{
					this.frame.Y = 0;
				}
				else if ((double)this.velocity.Y < -1.5)
				{
					this.frame.Y = num;
				}
				else if ((double)this.velocity.Y > 1.5)
				{
					this.frame.Y = num * 3;
				}
				else
				{
					this.frame.Y = num * 2;
				}
			}
			else if (this.type == 177)
			{
				if (this.velocity.Y == 0f)
				{
					this.frameCounter += 1.0;
					if (this.frameCounter >= 10.0)
					{
						this.frameCounter = 30.0;
						this.frame.Y = 0;
					}
					else
					{
						this.frame.Y = num;
					}
				}
				else if (this.velocity.Y < 0f)
				{
					this.frame.Y = num * 2;
				}
				else
				{
					this.frameCounter = 0.0;
					this.frame.Y = num * 2;
				}
			}
			else if (this.type == 163)
			{
				if (this.velocity.Y != 0f)
				{
					this.frameCounter = -12.0;
					if (this.velocity.Y < 0f)
					{
						this.frame.Y = num * 5;
					}
					else
					{
						this.frame.Y = num * 6;
					}
				}
				else
				{
					this.spriteDirection = this.direction;
					this.frameCounter += (double)(Math.Abs(this.velocity.X) * 1.1f);
					if (this.frameCounter < -6.0)
					{
						this.frame.Y = num * 6;
					}
					else if (this.frameCounter < 0.0)
					{
						this.frame.Y = num * 7;
					}
					else if (this.frameCounter < 6.0)
					{
						this.frame.Y = num;
					}
					else if (this.frameCounter < 12.0)
					{
						this.frame.Y = num * 2;
					}
					else if (this.frameCounter < 18.0)
					{
						this.frame.Y = num * 3;
					}
					else
					{
						this.frameCounter = 0.0;
					}
				}
			}
			else if (this.type == 143)
			{
				if (this.velocity.Y > 0f)
				{
					this.frameCounter += 1.0;
				}
				else if (this.velocity.Y < 0f)
				{
					this.frameCounter -= 1.0;
				}
				if (this.frameCounter < 6.0)
				{
					this.frame.Y = num;
				}
				else if (this.frameCounter < 12.0)
				{
					this.frame.Y = num * 2;
				}
				else if (this.frameCounter < 18.0)
				{
					this.frame.Y = num * 3;
				}
				if (this.frameCounter < 0.0)
				{
					this.frameCounter = 0.0;
				}
				if (this.frameCounter > 17.0)
				{
					this.frameCounter = 17.0;
				}
			}
			else if (this.type == 144)
			{
				if (this.velocity.X == 0f && this.velocity.Y == 0f)
				{
					this.localAI[3] += 1f;
					if (this.localAI[3] < 6f)
					{
						this.frame.Y = 0;
					}
					else if (this.localAI[3] < 12f)
					{
						this.frame.Y = num;
					}
					if (this.localAI[3] >= 11f)
					{
						this.localAI[3] = 0f;
					}
				}
				else
				{
					if (this.velocity.Y > 0f)
					{
						this.frameCounter += 1.0;
					}
					else if (this.velocity.Y < 0f)
					{
						this.frameCounter -= 1.0;
					}
					if (this.frameCounter < 6.0)
					{
						this.frame.Y = num * 2;
					}
					else if (this.frameCounter < 12.0)
					{
						this.frame.Y = num * 3;
					}
					else if (this.frameCounter < 18.0)
					{
						this.frame.Y = num * 4;
					}
					if (this.frameCounter < 0.0)
					{
						this.frameCounter = 0.0;
					}
					if (this.frameCounter > 17.0)
					{
						this.frameCounter = 17.0;
					}
				}
			}
			else if (this.type == 145)
			{
				if (this.velocity.X == 0f && this.velocity.Y == 0f)
				{
					if (this.ai[2] < 4f)
					{
						this.frame.Y = 0;
					}
					else if (this.ai[2] < 8f)
					{
						this.frame.Y = num;
					}
					else if (this.ai[2] < 12f)
					{
						this.frame.Y = num * 2;
					}
					else if (this.ai[2] < 16f)
					{
						this.frame.Y = num * 3;
					}
				}
				else
				{
					if (this.velocity.Y > 0f)
					{
						this.frameCounter += 1.0;
					}
					else if (this.velocity.Y < 0f)
					{
						this.frameCounter -= 1.0;
					}
					if (this.frameCounter < 6.0)
					{
						this.frame.Y = num * 4;
					}
					else if (this.frameCounter < 12.0)
					{
						this.frame.Y = num * 5;
					}
					else if (this.frameCounter < 18.0)
					{
						this.frame.Y = num * 6;
					}
					if (this.frameCounter < 0.0)
					{
						this.frameCounter = 0.0;
					}
					if (this.frameCounter > 17.0)
					{
						this.frameCounter = 17.0;
					}
				}
			}
			else if (this.type == 50)
			{
				if (this.velocity.Y != 0f)
				{
					if (this.frame.Y < num * 4)
					{
						this.frame.Y = num * 4;
						this.frameCounter = 0.0;
					}
					if ((this.frameCounter += 1.0) >= 4.0)
					{
						this.frame.Y = num * 5;
					}
				}
				else
				{
					if (this.frame.Y >= num * 5)
					{
						this.frame.Y = num * 4;
						this.frameCounter = 0.0;
					}
					this.frameCounter += 1.0;
					if (num2 > 0)
					{
						this.frameCounter += 1.0;
					}
					if (num2 == 4)
					{
						this.frameCounter += 1.0;
					}
					if (this.frameCounter >= 8.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
						if (this.frame.Y >= num * 4)
						{
							this.frame.Y = 0;
						}
					}
				}
			}
			else if (this.type == 170 || this.type == 171 || this.type == 180)
			{
				this.spriteDirection = this.direction;
				this.frameCounter += 1.0;
				if (this.frameCounter >= 4.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y >= num * 14)
				{
					this.frame.Y = 0;
				}
			}
			else if (this.type == 135)
			{
				if (this.ai[2] == 0f)
				{
					this.frame.Y = 0;
				}
				else
				{
					this.frame.Y = num;
				}
			}
			else if (this.type == 85 || this.type == 341)
			{
				if (this.ai[0] == 0f)
				{
					this.frameCounter = 0.0;
					this.frame.Y = 0;
				}
				else
				{
					int num123 = 3;
					if (this.velocity.Y == 0f)
					{
						this.frameCounter -= 1.0;
					}
					else
					{
						this.frameCounter += 1.0;
					}
					if (this.frameCounter < 0.0)
					{
						this.frameCounter = 0.0;
					}
					if (this.frameCounter > (double)(num123 * 4))
					{
						this.frameCounter = (double)(num123 * 4);
					}
					if (this.frameCounter < (double)num123)
					{
						this.frame.Y = num;
					}
					else if (this.frameCounter < (double)(num123 * 2))
					{
						this.frame.Y = num * 2;
					}
					else if (this.frameCounter < (double)(num123 * 3))
					{
						this.frame.Y = num * 3;
					}
					else if (this.frameCounter < (double)(num123 * 4))
					{
						this.frame.Y = num * 4;
					}
					else if (this.frameCounter < (double)(num123 * 5))
					{
						this.frame.Y = num * 5;
					}
					else if (this.frameCounter < (double)(num123 * 6))
					{
						this.frame.Y = num * 4;
					}
					else if (this.frameCounter < (double)(num123 * 7))
					{
						this.frame.Y = num * 3;
					}
					else
					{
						this.frame.Y = num * 2;
						if (this.frameCounter >= (double)(num123 * 8))
						{
							this.frameCounter = (double)num123;
						}
					}
				}
				if (this.ai[3] == 2f)
				{
					this.frame.Y = this.frame.Y + num * 6;
				}
				else if (this.ai[3] == 3f)
				{
					this.frame.Y = this.frame.Y + num * 12;
				}
				else if (this.ai[3] == 4f)
				{
					this.frame.Y = this.frame.Y + num * 18;
				}
			}
			else if (this.type == 113 || this.type == 114)
			{
				if (this.ai[2] == 0f)
				{
					this.frameCounter += 1.0;
					if (this.frameCounter >= 12.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y >= num * Main.npcFrameCount[this.type])
					{
						this.frame.Y = 0;
					}
				}
				else
				{
					this.frame.Y = 0;
					this.frameCounter = -60.0;
				}
			}
			else if (this.type == 61)
			{
				this.spriteDirection = this.direction;
				this.rotation = this.velocity.X * 0.1f;
				if (this.velocity.X == 0f && this.velocity.Y == 0f)
				{
					this.frame.Y = 0;
					this.frameCounter = 0.0;
				}
				else
				{
					this.frameCounter += 1.0;
					if (this.frameCounter < 4.0)
					{
						this.frame.Y = num;
					}
					else
					{
						this.frame.Y = num * 2;
						if (this.frameCounter >= 7.0)
						{
							this.frameCounter = 0.0;
						}
					}
				}
			}
			else if (this.type == 252 || this.type == 301)
			{
				if (this.type == 301)
				{
					if (this.velocity.Y == 0f)
					{
						this.spriteDirection = -this.direction;
					}
					else
					{
						if ((double)this.velocity.X > 0.5)
						{
							this.spriteDirection = -1;
						}
						if ((double)this.velocity.X < -0.5)
						{
							this.spriteDirection = 1;
						}
					}
				}
				else
				{
					if ((double)this.velocity.X > 0.5)
					{
						this.spriteDirection = 1;
					}
					if ((double)this.velocity.X < -0.5)
					{
						this.spriteDirection = -1;
					}
				}
				this.rotation = this.velocity.X * 0.1f;
				if (this.velocity.X == 0f && this.velocity.Y == 0f)
				{
					this.frame.Y = 0;
					this.frameCounter = 0.0;
				}
				else
				{
					this.frameCounter += 1.0;
					if (this.frameCounter > 4.0)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
					}
					if (this.frame.Y > num * 4 || this.frame.Y == 0)
					{
						this.frame.Y = num;
					}
				}
			}
			else if (this.type == 122)
			{
				this.spriteDirection = this.direction;
				this.rotation = this.velocity.X * 0.05f;
				if (this.ai[3] > 0f)
				{
					int num124 = (int)(this.ai[3] / 8f);
					this.frameCounter = 0.0;
					this.frame.Y = (num124 + 3) * num;
				}
				else
				{
					this.frameCounter += 1.0;
					if (this.frameCounter >= 8.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y >= num * 3)
					{
						this.frame.Y = 0;
					}
				}
			}
			else if (this.type == 74 || this.type == 297 || this.type == 298 || this.type == 442)
			{
				this.spriteDirection = this.direction;
				this.rotation = this.velocity.X * 0.1f;
				if (this.velocity.X == 0f && this.velocity.Y == 0f)
				{
					this.frame.Y = num * 4;
					this.frameCounter = 0.0;
				}
				else
				{
					this.frameCounter += 1.0;
					if (this.frameCounter >= 4.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y >= num * Main.npcFrameCount[this.type])
					{
						this.frame.Y = 0;
					}
				}
			}
			else if (this.type == 362 || this.type == 364)
			{
				this.spriteDirection = this.direction;
				if (this.velocity.X == 0f)
				{
					this.frameCounter = 0.0;
					this.frame.Y = 0;
				}
				else
				{
					this.frameCounter += 1.0;
					if (this.frameCounter >= 4.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y >= num * 10)
					{
						this.frame.Y = num * 3;
					}
					if (this.frame.Y < num * 3)
					{
						this.frame.Y = num * 3;
					}
				}
			}
			else if (this.type == 363 || this.type == 365)
			{
				this.spriteDirection = this.direction;
				if (this.wet)
				{
					this.frameCounter += 1.0;
					if (this.frameCounter >= 8.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y > num * 2)
					{
						this.frame.Y = num;
					}
					if (this.frame.Y < num)
					{
						this.frame.Y = num;
					}
					this.rotation = 0f;
				}
				else if (this.velocity.X == 0f && this.velocity.Y == 0f)
				{
					this.frame.Y = num;
					this.frameCounter = 0.0;
					this.rotation = 0f;
				}
				else
				{
					this.rotation = this.velocity.X * 0.1f;
					this.frameCounter += 1.0;
					if (this.frameCounter >= 4.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y >= num * Main.npcFrameCount[this.type])
					{
						this.frame.Y = num * 11;
					}
					if (this.frame.Y < num * 11)
					{
						this.frame.Y = num * 11;
					}
				}
			}
			else if (this.type == 62 || this.type == 66)
			{
				this.spriteDirection = this.direction;
				this.rotation = this.velocity.X * 0.1f;
				this.frameCounter += 1.0;
				if (this.frameCounter < 6.0)
				{
					this.frame.Y = 0;
				}
				else
				{
					this.frame.Y = num;
					if (this.frameCounter >= 11.0)
					{
						this.frameCounter = 0.0;
					}
				}
			}
			else if (this.type == 156)
			{
				this.spriteDirection = this.direction;
				this.rotation = this.velocity.X * 0.1f;
				this.frameCounter += 1.0;
				if (this.frameCounter >= 20.0)
				{
					this.frameCounter = 0.0;
				}
				int num125 = (int)this.frameCounter / 4;
				this.frame.Y = num125 * num;
			}
			else if (this.type == 63 || this.type == 64 || this.type == 103 || this.type == 242 || this.type == 256)
			{
				if ((this.type == 63 || this.type == 64 || this.type == 103 || this.type == 242) && this.ai[1] == 1f)
				{
					this.frameCounter += 1.0;
					if (this.frameCounter > 4.0)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
					}
					if (this.frame.Y > num * 6)
					{
						this.frame.Y = num * 4;
					}
					if (this.frame.Y < num * 4)
					{
						this.frame.Y = num * 4;
					}
					return;
				}
				this.frameCounter += 1.0;
				if (this.frameCounter < 6.0)
				{
					this.frame.Y = 0;
				}
				else if (this.frameCounter < 12.0)
				{
					this.frame.Y = num;
				}
				else if (this.frameCounter < 18.0)
				{
					this.frame.Y = num * 2;
				}
				else
				{
					this.frame.Y = num * 3;
					if (this.frameCounter >= 23.0)
					{
						this.frameCounter = 0.0;
					}
				}
			}
			else if (this.type == 221)
			{
				if (this.localAI[2] == 1f)
				{
					if (this.localAI[0] == 1f)
					{
						this.frame.Y = 0;
						this.localAI[0] = 0f;
					}
					this.frameCounter += 1.0;
					if (this.frameCounter >= 8.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y >= num * Main.npcFrameCount[this.type])
					{
						this.frame.Y = num * Main.npcFrameCount[this.type] - num;
					}
				}
				else
				{
					this.frameCounter += 1.0;
					if (this.frameCounter >= 13.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y >= num * Main.npcFrameCount[this.type])
					{
						this.frame.Y = 0;
					}
				}
			}
			else if (this.type == 2 || this.type == 23 || this.type == 121 || this.type == 169 || this.type == 190 || this.type == 191 || this.type == 192 || this.type == 193 || this.type == 194 || this.type == 317 || this.type == 318)
			{
				if (this.type == 2 || this.type == 190 || this.type == 191 || this.type == 192 || this.type == 193 || this.type == 194 || this.type == 317 || this.type == 318)
				{
					if (this.velocity.X > 0f)
					{
						this.spriteDirection = 1;
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X);
					}
					if (this.velocity.X < 0f)
					{
						this.spriteDirection = -1;
						this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 3.14f;
					}
				}
				else if (this.type == 2 || this.type == 121)
				{
					if (this.velocity.X > 0f)
					{
						this.spriteDirection = 1;
					}
					if (this.velocity.X < 0f)
					{
						this.spriteDirection = -1;
					}
					this.rotation = this.velocity.X * 0.1f;
				}
				this.frameCounter += 1.0;
				if (this.frameCounter >= 8.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y >= num * Main.npcFrameCount[this.type])
				{
					this.frame.Y = 0;
				}
			}
			else if (this.type == 133)
			{
				if (this.velocity.X > 0f)
				{
					this.spriteDirection = 1;
					this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X);
				}
				if (this.velocity.X < 0f)
				{
					this.spriteDirection = -1;
					this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 3.14f;
				}
				this.frameCounter += 1.0;
				if (this.frameCounter >= 8.0)
				{
					this.frame.Y = num;
				}
				else
				{
					this.frame.Y = 0;
				}
				if (this.frameCounter >= 16.0)
				{
					this.frame.Y = 0;
					this.frameCounter = 0.0;
				}
				if ((double)this.life < (double)this.lifeMax * 0.5)
				{
					this.frame.Y = this.frame.Y + num * 2;
				}
			}
			else if (this.type == 116)
			{
				if (this.velocity.X > 0f)
				{
					this.spriteDirection = 1;
					this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X);
				}
				if (this.velocity.X < 0f)
				{
					this.spriteDirection = -1;
					this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 3.14f;
				}
				this.frameCounter += 1.0;
				if (this.frameCounter >= 5.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y >= num * Main.npcFrameCount[this.type])
				{
					this.frame.Y = 0;
				}
			}
			else if (this.type == 75)
			{
				if (this.velocity.X > 0f)
				{
					this.spriteDirection = 1;
				}
				else
				{
					this.spriteDirection = -1;
				}
				this.rotation = this.velocity.X * 0.1f;
				this.frameCounter += 1.0;
				if (this.frameCounter >= 4.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y >= num * Main.npcFrameCount[this.type])
				{
					this.frame.Y = 0;
				}
			}
			else if (this.type == 157)
			{
				this.spriteDirection = this.direction;
				this.frameCounter += 1.0;
				if (!this.wet)
				{
					this.frameCounter += 1.0;
				}
				int num126 = 5;
				if (this.frameCounter < (double)num126)
				{
					this.frame.Y = 0;
				}
				else if (this.frameCounter < (double)(num126 * 2))
				{
					this.frame.Y = num;
				}
				else if (this.frameCounter < (double)(num126 * 3))
				{
					this.frame.Y = num * 2;
				}
				else if (this.frameCounter < (double)(num126 * 4))
				{
					this.frame.Y = num;
				}
				else if (this.frameCounter < (double)(num126 * 5))
				{
					this.frame.Y = num * 3;
				}
				else if (this.frameCounter < (double)(num126 * 6))
				{
					this.frame.Y = num * 4;
				}
				else if (this.frameCounter < (double)(num126 * 7))
				{
					this.frame.Y = num * 5;
				}
				else if (this.frameCounter < (double)(num126 * 8))
				{
					this.frame.Y = num * 4;
				}
				else
				{
					this.frameCounter = 0.0;
				}
			}
			else if (this.type == 55 || this.type == 57 || this.type == 58 || this.type == 102 || this.type == 241 || this.type == 465)
			{
				this.spriteDirection = this.direction;
				this.frameCounter += 1.0;
				if (this.wet)
				{
					if (this.frameCounter < 6.0)
					{
						this.frame.Y = 0;
					}
					else if (this.frameCounter < 12.0)
					{
						this.frame.Y = num;
					}
					else if (this.frameCounter < 18.0)
					{
						this.frame.Y = num * 2;
					}
					else if (this.frameCounter < 24.0)
					{
						this.frame.Y = num * 3;
					}
					else
					{
						this.frameCounter = 0.0;
					}
				}
				else if (this.frameCounter < 6.0)
				{
					this.frame.Y = num * 4;
				}
				else if (this.frameCounter < 12.0)
				{
					this.frame.Y = num * 5;
				}
				else
				{
					this.frameCounter = 0.0;
				}
			}
			else if (this.type == 69)
			{
				if (this.ai[0] < 190f)
				{
					this.frameCounter += 1.0;
					if (this.frameCounter >= 6.0)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
						if (this.frame.Y / num >= Main.npcFrameCount[this.type] - 1)
						{
							this.frame.Y = 0;
						}
					}
				}
				else
				{
					this.frameCounter = 0.0;
					this.frame.Y = num * (Main.npcFrameCount[this.type] - 1);
				}
			}
			else if (this.type == 155)
			{
				if (this.velocity.Y > 0f)
				{
					this.frame.Y = num * 4;
					this.frameCounter = 0.0;
				}
				else if (this.velocity.Y < 0f)
				{
					this.frame.Y = num * 6;
					this.frameCounter = 0.0;
				}
				else
				{
					this.spriteDirection = this.direction;
					this.frameCounter += (double)(Math.Abs(this.velocity.X) * 0.4f);
					if ((this.direction > 0 && this.velocity.X < 0f) || (this.direction < 0 && this.velocity.X > 0f))
					{
						this.frameCounter = 0.0;
						this.frame.Y = 0;
					}
					else if (this.frameCounter < 8.0)
					{
						this.frame.Y = num * 3;
					}
					else if (this.frameCounter < 16.0)
					{
						this.frame.Y = num * 6;
					}
					else if (this.frameCounter < 24.0)
					{
						this.frame.Y = num * 4;
					}
					else if (this.frameCounter < 32.0)
					{
						this.frame.Y = num * 5;
					}
					else
					{
						this.frameCounter = 0.0;
					}
				}
			}
			else if (this.type == 329)
			{
				if (this.velocity.Y > 0f)
				{
					this.frame.Y = num * 3;
					this.frameCounter = 0.0;
				}
				else if (this.velocity.Y < 0f)
				{
					this.frame.Y = num * 2;
					this.frameCounter = 0.0;
				}
				else
				{
					this.spriteDirection = this.direction;
					this.frameCounter += (double)(Math.Abs(this.velocity.X) * 0.4f);
					if (this.frameCounter > 4.0)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
						if (this.frame.Y < num * 2)
						{
							this.frame.Y = num * 2;
						}
						if (this.frame.Y > num * 9)
						{
							this.frame.Y = num * 2;
						}
					}
				}
			}
			else if (this.type == 86)
			{
				if (this.velocity.Y == 0f || this.wet)
				{
					if (this.velocity.X < -2f)
					{
						this.spriteDirection = -1;
					}
					else if (this.velocity.X > 2f)
					{
						this.spriteDirection = 1;
					}
					else
					{
						this.spriteDirection = this.direction;
					}
				}
				if (this.velocity.Y != 0f)
				{
					this.frame.Y = num * 15;
					this.frameCounter = 0.0;
				}
				else if (this.velocity.X == 0f)
				{
					this.frameCounter = 0.0;
					this.frame.Y = 0;
				}
				else if (Math.Abs(this.velocity.X) < 3f)
				{
					this.frameCounter += (double)Math.Abs(this.velocity.X);
					if (this.frameCounter >= 6.0)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
						if (this.frame.Y / num >= 9)
						{
							this.frame.Y = num;
						}
						if (this.frame.Y / num <= 0)
						{
							this.frame.Y = num;
						}
					}
				}
				else
				{
					this.frameCounter += (double)Math.Abs(this.velocity.X);
					if (this.frameCounter >= 10.0)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
						if (this.frame.Y / num >= 15)
						{
							this.frame.Y = num * 9;
						}
						if (this.frame.Y / num <= 8)
						{
							this.frame.Y = num * 9;
						}
					}
				}
			}
			else if (this.type == 315)
			{
				if (this.velocity.Y == 0f || this.wet)
				{
					if (this.velocity.X < -1f)
					{
						this.spriteDirection = -1;
					}
					else if (this.velocity.X > 1f)
					{
						this.spriteDirection = 1;
					}
					else
					{
						this.spriteDirection = this.direction;
					}
				}
				if (this.velocity.Y != 0f)
				{
					this.frame.Y = 0;
					this.frameCounter = 0.0;
				}
				else
				{
					this.frameCounter += (double)Math.Abs(this.velocity.X);
					if (this.frameCounter >= 8.0)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
						if (this.frame.Y / num > 10)
						{
							this.frame.Y = num;
						}
					}
				}
			}
			else if (this.type == 127)
			{
				if (this.ai[1] == 0f)
				{
					this.frameCounter += 1.0;
					if (this.frameCounter >= 12.0)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
						if (this.frame.Y / num >= 2)
						{
							this.frame.Y = 0;
						}
					}
				}
				else
				{
					this.frameCounter = 0.0;
					this.frame.Y = num * 2;
				}
			}
			else if (this.type == 129)
			{
				if (this.velocity.Y == 0f)
				{
					this.spriteDirection = this.direction;
				}
				this.frameCounter += 1.0;
				if (this.frameCounter >= 2.0)
				{
					this.frameCounter = 0.0;
					this.frame.Y = this.frame.Y + num;
					if (this.frame.Y / num >= Main.npcFrameCount[this.type])
					{
						this.frame.Y = 0;
					}
				}
			}
			else if (this.type == 130)
			{
				if (this.velocity.Y == 0f)
				{
					this.spriteDirection = this.direction;
				}
				this.frameCounter += 1.0;
				if (this.frameCounter >= 8.0)
				{
					this.frameCounter = 0.0;
					this.frame.Y = this.frame.Y + num;
					if (this.frame.Y / num >= Main.npcFrameCount[this.type])
					{
						this.frame.Y = 0;
					}
				}
			}
			else if (this.type == 67 || this.type == 217 || this.type == 218 || this.type == 219)
			{
				if (this.velocity.Y == 0f)
				{
					this.spriteDirection = this.direction;
				}
				this.frameCounter += 1.0;
				if (this.frameCounter >= 6.0)
				{
					this.frameCounter = 0.0;
					this.frame.Y = this.frame.Y + num;
					if (this.frame.Y / num >= Main.npcFrameCount[this.type])
					{
						this.frame.Y = 0;
					}
				}
			}
			else if (this.type == 220)
			{
				if (this.velocity.Y == 0f)
				{
					this.spriteDirection = this.direction;
				}
				this.frameCounter += 1.0;
				if (this.frameCounter >= 10.0)
				{
					this.frameCounter = 0.0;
					this.frame.Y = this.frame.Y + num;
					if (this.frame.Y / num >= Main.npcFrameCount[this.type])
					{
						this.frame.Y = 0;
					}
				}
			}
			else if (this.type == 109)
			{
				if (this.velocity.Y == 0f && ((this.velocity.X <= 0f && this.direction < 0) || (this.velocity.X >= 0f && this.direction > 0)))
				{
					this.spriteDirection = this.direction;
				}
				this.frameCounter += (double)Math.Abs(this.velocity.X);
				if (this.frameCounter >= 7.0)
				{
					this.frameCounter -= 7.0;
					this.frame.Y = this.frame.Y + num;
					if (this.frame.Y / num >= Main.npcFrameCount[this.type])
					{
						this.frame.Y = 0;
					}
				}
			}
			else if (this.type == 83 || this.type == 84 || this.type == 179)
			{
				if (this.ai[0] == 2f)
				{
					this.frameCounter = 0.0;
					this.frame.Y = 0;
				}
				else
				{
					this.frameCounter += 1.0;
					if (this.frameCounter >= 4.0)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
						if (this.frame.Y / num >= Main.npcFrameCount[this.type])
						{
							this.frame.Y = 0;
						}
					}
				}
			}
			else if (this.type == 72)
			{
				this.frameCounter += 1.0;
				if (this.frameCounter >= 3.0)
				{
					this.frameCounter = 0.0;
					this.frame.Y = this.frame.Y + num;
					if (this.frame.Y / num >= Main.npcFrameCount[this.type])
					{
						this.frame.Y = 0;
					}
				}
			}
			else if (this.type == 65)
			{
				this.spriteDirection = this.direction;
				this.frameCounter += 1.0;
				if (this.wet && this.type == 65)
				{
					if (this.frameCounter < 6.0)
					{
						this.frame.Y = 0;
					}
					else if (this.frameCounter < 12.0)
					{
						this.frame.Y = num;
					}
					else if (this.frameCounter < 18.0)
					{
						this.frame.Y = num * 2;
					}
					else if (this.frameCounter < 24.0)
					{
						this.frame.Y = num * 3;
					}
					else
					{
						this.frameCounter = 0.0;
					}
				}
			}
			else if (this.type >= 542 && this.type <= 545)
			{
				this.spriteDirection = this.direction;
				this.frameCounter += 1.0;
				if (this.frameCounter >= 16.0)
				{
					this.frameCounter = 0.0;
				}
				this.frame.Y = num * (int)(this.frameCounter / 4.0);
			}
			else if (this.type == 224)
			{
				if (this.velocity.X > 0f)
				{
					this.spriteDirection = 1;
					this.rotation = this.velocity.Y * 0.2f;
				}
				if (this.velocity.X < 0f)
				{
					this.spriteDirection = -1;
					this.rotation = -this.velocity.Y * 0.2f;
				}
				this.frameCounter += 1.0;
				if (this.frameCounter >= 6.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y >= num * 4)
				{
					this.frame.Y = 0;
				}
			}
			else if (this.type == 150 || this.type == 151 || this.type == 152 || this.type == 158 || this.type == 226)
			{
				if (this.velocity.X > 0f)
				{
					this.spriteDirection = 1;
				}
				if (this.velocity.X < 0f)
				{
					this.spriteDirection = -1;
				}
				this.rotation = this.velocity.X * 0.1f;
				this.frameCounter += 1.0;
				if (this.frameCounter >= 6.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y >= num * 4)
				{
					this.frame.Y = 0;
				}
			}
			else if (this.type == 48 || this.type == 49 || this.type == 51 || this.type == 60 || this.type == 82 || this.type == 93 || this.type == 137 || this.type == 182 || this.type == 210 || this.type == 211 || this.type == 253 || this.type == 316)
			{
				if (this.velocity.X > 0f)
				{
					this.spriteDirection = 1;
				}
				if (this.velocity.X < 0f)
				{
					this.spriteDirection = -1;
				}
				this.rotation = this.velocity.X * 0.1f;
				if (this.type == 210 || this.type == 211)
				{
					this.frameCounter += 1.0;
					this.rotation = this.velocity.X * 0.2f;
				}
				this.frameCounter += 1.0;
				if (this.frameCounter >= 6.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y >= num * Main.npcFrameCount[this.type])
				{
					this.frame.Y = 0;
				}
			}
			else if (this.type == 330)
			{
				if (this.velocity.X > 0f)
				{
					this.spriteDirection = 1;
				}
				if (this.velocity.X < 0f)
				{
					this.spriteDirection = -1;
				}
				this.rotation = this.velocity.X * 0.15f;
				this.frameCounter += 1.0;
				if (this.frameCounter >= 8.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y >= num * Main.npcFrameCount[this.type])
				{
					this.frame.Y = 0;
				}
			}
			else if (this.type == 42 || (this.type >= 231 && this.type <= 235))
			{
				this.frameCounter += 1.0;
				if (this.frameCounter < 2.0)
				{
					this.frame.Y = 0;
				}
				else if (this.frameCounter < 4.0)
				{
					this.frame.Y = num;
				}
				else if (this.frameCounter < 6.0)
				{
					this.frame.Y = num * 2;
				}
				else if (this.frameCounter < 8.0)
				{
					this.frame.Y = num;
				}
				else
				{
					this.frameCounter = 0.0;
				}
			}
			else if (this.type == 205)
			{
				this.frameCounter += 0.5;
				if (this.frameCounter < 2.0)
				{
					this.frame.Y = 0;
				}
				else if (this.frameCounter < 4.0)
				{
					this.frame.Y = num;
				}
				else if (this.frameCounter < 6.0)
				{
					this.frame.Y = num * 2;
				}
				else if (this.frameCounter < 8.0)
				{
					this.frame.Y = num;
				}
				else
				{
					this.frameCounter = 0.0;
				}
			}
			else if (this.type == 176)
			{
				this.frameCounter += 1.0;
				if (this.frameCounter > 4.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y > num)
				{
					this.frame.Y = 0;
				}
			}
			else if (this.type == 43 || this.type == 56 || this.type == 175)
			{
				this.frameCounter += 1.0;
				if (this.frameCounter < 6.0)
				{
					this.frame.Y = 0;
				}
				else if (this.frameCounter < 12.0)
				{
					this.frame.Y = num;
				}
				else if (this.frameCounter < 18.0)
				{
					this.frame.Y = num * 2;
				}
				else if (this.frameCounter < 24.0)
				{
					this.frame.Y = num;
				}
				if (this.frameCounter == 23.0)
				{
					this.frameCounter = 0.0;
				}
			}
			else if (this.type == 115)
			{
				this.frameCounter += 1.0;
				if (this.frameCounter < 3.0)
				{
					this.frame.Y = 0;
				}
				else if (this.frameCounter < 6.0)
				{
					this.frame.Y = num;
				}
				else if (this.frameCounter < 12.0)
				{
					this.frame.Y = num * 2;
				}
				else if (this.frameCounter < 15.0)
				{
					this.frame.Y = num;
				}
				if (this.frameCounter == 15.0)
				{
					this.frameCounter = 0.0;
				}
			}
			else if (this.type == 101)
			{
				this.frameCounter += 1.0;
				if (this.frameCounter > 6.0)
				{
					this.frame.Y = this.frame.Y + num * 2;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y > num * 2)
				{
					this.frame.Y = 0;
				}
			}
			if (this.type == 199)
			{
				if (this.velocity.Y == 0f)
				{
					if (this.direction == 1)
					{
						this.spriteDirection = 1;
					}
					if (this.direction == -1)
					{
						this.spriteDirection = -1;
					}
				}
				if (this.frame.Y < num * 3)
				{
					this.frameCounter += 1.0;
					if (this.frameCounter > 6.0)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
						return;
					}
				}
				else if (this.velocity.Y == 0f)
				{
					this.frameCounter += (double)Math.Abs(this.velocity.X);
					if (this.frameCounter > 12.0)
					{
						this.frameCounter = 0.0;
						this.frame.Y = this.frame.Y + num;
						if (this.frame.Y > num * 7)
						{
							this.frame.Y = num * 3;
							return;
						}
					}
				}
			}
			else if (this.type == 467)
			{
				if (this.ai[0] == 1f)
				{
					this.frameCounter += 1.0;
					if (this.frameCounter > 4.0)
					{
						this.frameCounter = 0.0;
						if (this.frame.Y < num * 6)
						{
							this.frame.Y = this.frame.Y + num;
							this.frameCounter = 0.0;
							return;
						}
					}
				}
				else
				{
					this.frameCounter += 1.0;
					if (this.frameCounter > 4.0)
					{
						this.frameCounter = 0.0;
						if (this.frame.Y > num * 3)
						{
							this.frame.Y = num * 3;
						}
						if (this.frame.Y > 0)
						{
							this.frame.Y = this.frame.Y - num;
							this.frameCounter = 0.0;
							return;
						}
					}
				}
			}
			else if (this.type == 480)
			{
				if (this.velocity.Y != 0f)
				{
					this.frameCounter = 0.0;
					this.frame.Y = num * 8;
					return;
				}
				if (this.direction == 1)
				{
					this.spriteDirection = 1;
				}
				if (this.direction == -1)
				{
					this.spriteDirection = -1;
				}
				if (this.ai[2] < 0f)
				{
					this.frameCounter += 1.0;
					if (this.frameCounter > 3.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y >= Main.npcFrameCount[this.type] * num)
					{
						this.frame.Y = num * 21;
						return;
					}
					if (this.frame.Y < num * 21)
					{
						this.frame.Y = num * 21;
						return;
					}
				}
				else if (this.velocity.X == 0f)
				{
					this.frameCounter += 1.0;
					if (this.frameCounter > 4.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y / num > 7)
					{
						this.frame.Y = 0;
						return;
					}
				}
				else
				{
					this.frameCounter += (double)(1f + Math.Abs(this.velocity.X));
					if (this.frameCounter > 6.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y / num >= Main.npcFrameCount[this.type] - 4)
					{
						this.frame.Y = num * 10;
						return;
					}
					if (this.frame.Y / num < 10)
					{
						this.frame.Y = num * 10;
						return;
					}
				}
			}
			else if (this.type == 483)
			{
				if (this.ai[0] == -1f)
				{
					this.frameCounter += 1.0;
					if (this.frameCounter > 4.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y > num * 21)
					{
						this.frame.Y = num * 21;
					}
					else if (this.frame.Y < num * 13)
					{
						this.frame.Y = num * 13;
					}
					this.rotation += this.velocity.X * 0.2f;
					return;
				}
				this.frameCounter += 1.0;
				if (this.frameCounter > 4.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y > num * 11)
				{
					this.frame.Y = 0;
				}
				this.rotation = this.velocity.X * 0.1f;
				return;
			}
			else if (this.type == 482)
			{
				if (this.velocity.Y != 0f)
				{
					this.frameCounter = 0.0;
					this.frame.Y = num;
					return;
				}
				if (this.direction == 1)
				{
					this.spriteDirection = 1;
				}
				if (this.direction == -1)
				{
					this.spriteDirection = -1;
				}
				if (this.ai[2] < 0f)
				{
					this.frameCounter += 1.0;
					if (this.frameCounter > 3.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y >= Main.npcFrameCount[this.type] * num)
					{
						this.frame.Y = num * 11;
						return;
					}
					if (this.frame.Y < num * 11)
					{
						this.frame.Y = num * 11;
						return;
					}
				}
				else
				{
					if (this.velocity.X == 0f)
					{
						this.frameCounter += 1.0;
						this.frame.Y = 0;
						return;
					}
					this.frameCounter += (double)(0.2f + Math.Abs(this.velocity.X));
					if (this.frameCounter > 8.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y / num >= Main.npcFrameCount[this.type] - 10)
					{
						this.frame.Y = num * 2;
						return;
					}
					if (this.frame.Y / num < 2)
					{
						this.frame.Y = num * 2;
						return;
					}
				}
			}
			else if (this.type == 461)
			{
				if (this.wet)
				{
					if (this.velocity.X < 0f)
					{
						this.direction = -1;
					}
					if (this.velocity.X > 0f)
					{
						this.direction = 1;
					}
					if (this.spriteDirection != this.direction)
					{
						this.rotation *= -1f;
						this.spriteDirection = this.direction;
					}
					float num127 = (float)Math.Atan2((double)(this.velocity.Y * (float)this.direction), (double)(this.velocity.X * (float)this.direction));
					if ((double)Math.Abs(this.rotation - num127) >= 3.14)
					{
						if (num127 < this.rotation)
						{
							this.rotation -= 6.28f;
						}
						else
						{
							this.rotation += 6.28f;
						}
					}
					this.rotation = (this.rotation * 4f + num127) / 5f;
					this.frameCounter += (double)Math.Abs(this.velocity.Length());
					this.frameCounter += 1.0;
					if (this.frameCounter > 8.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y / num > 20)
					{
						this.frame.Y = num * 16;
						return;
					}
					if (this.frame.Y / num < 16)
					{
						this.frame.Y = num * 19;
						return;
					}
				}
				else
				{
					if ((double)this.rotation > 3.14)
					{
						this.rotation -= 6.28f;
					}
					if ((double)this.rotation > -0.01 && (double)this.rotation < 0.01)
					{
						this.rotation = 0f;
					}
					else
					{
						this.rotation *= 0.9f;
					}
					if (this.velocity.Y != 0f)
					{
						this.frameCounter = 0.0;
						this.frame.Y = num;
						return;
					}
					if (this.direction == 1)
					{
						this.spriteDirection = 1;
					}
					if (this.direction == -1)
					{
						this.spriteDirection = -1;
					}
					if (this.velocity.X == 0f)
					{
						this.frame.Y = 0;
						this.frameCounter = 0.0;
						return;
					}
					this.frameCounter += (double)(Math.Abs(this.velocity.X) * 2f);
					this.frameCounter += 1.0;
					if (this.frameCounter > 6.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y / num > 15)
					{
						this.frame.Y = num * 2;
						return;
					}
				}
			}
			else if (this.type == 466)
			{
				if (this.ai[2] <= 0f)
				{
					if (this.direction == 1)
					{
						this.spriteDirection = 1;
					}
					if (this.direction == -1)
					{
						this.spriteDirection = -1;
					}
					if (this.ai[2] == 0f)
					{
						this.frame.Y = 0;
						return;
					}
					if (this.ai[2] < -8f)
					{
						this.frame.Y = num;
						return;
					}
					this.frame.Y = num * 2;
					return;
				}
				else
				{
					if (this.velocity.Y != 0f)
					{
						this.frameCounter = 0.0;
						this.frame.Y = num * 3;
						return;
					}
					if (this.direction == 1)
					{
						this.spriteDirection = 1;
					}
					if (this.direction == -1)
					{
						this.spriteDirection = -1;
					}
					if (this.velocity.X == 0f)
					{
						this.frame.Y = num * 2;
						this.frameCounter = 0.0;
						return;
					}
					this.frameCounter += (double)(Math.Abs(this.velocity.X) * 2f);
					this.frameCounter += 1.0;
					if (this.frameCounter > 7.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y / num > 17)
					{
						this.frame.Y = num * 4;
					}
					if (this.frame.Y / num < 4)
					{
						this.frame.Y = num * 4;
						return;
					}
				}
			}
			else if (this.type == 471)
			{
				bool flag7 = false;
				if (this.ai[3] < 0f)
				{
					flag7 = true;
				}
				if (flag7)
				{
					if (this.direction == 1)
					{
						this.spriteDirection = 1;
					}
					if (this.direction == -1)
					{
						this.spriteDirection = -1;
					}
					this.frameCounter += (double)(Math.Abs(this.velocity.Length()) * 0.5f);
					this.frameCounter += 1.0;
					if (this.frameCounter < 6.0)
					{
						this.frame.Y = num * 17;
						return;
					}
					if (this.frameCounter < 12.0)
					{
						this.frame.Y = num * 18;
						return;
					}
					if (this.frameCounter < 18.0)
					{
						this.frame.Y = num * 19;
						return;
					}
					if (this.frameCounter < 23.0)
					{
						this.frame.Y = num * 18;
						return;
					}
					this.frame.Y = num * 18;
					this.frameCounter = 0.0;
					return;
				}
				else
				{
					if (this.ai[3] == 1f)
					{
						this.frame.Y = num * 16;
						this.frameCounter = 0.0;
						return;
					}
					if (this.velocity.Y != 0f)
					{
						this.frameCounter = 0.0;
						this.frame.Y = num;
						return;
					}
					if (this.direction == 1)
					{
						this.spriteDirection = 1;
					}
					if (this.direction == -1)
					{
						this.spriteDirection = -1;
					}
					if (this.velocity.X == 0f)
					{
						this.frame.Y = 0;
						this.frameCounter = 0.0;
						return;
					}
					this.frameCounter += (double)(Math.Abs(this.velocity.X) * 2f);
					this.frameCounter += 1.0;
					if (this.frameCounter > 7.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y / num > 15)
					{
						this.frame.Y = num * 2;
					}
					if (this.frame.Y / num < 2)
					{
						this.frame.Y = num * 2;
						return;
					}
				}
			}
			else if (this.type == 166)
			{
				if (this.velocity.Y != 0f)
				{
					this.frameCounter = 0.0;
					this.frame.Y = num * 6;
					return;
				}
				if (this.direction == 1)
				{
					this.spriteDirection = 1;
				}
				if (this.direction == -1)
				{
					this.spriteDirection = -1;
				}
				if (this.velocity.X == 0f)
				{
					this.frameCounter += 2.0;
					if (this.frameCounter > 7.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y / num > 5)
					{
						this.frame.Y = 0;
						return;
					}
				}
				else
				{
					this.frameCounter += (double)Math.Abs(this.velocity.X);
					this.frameCounter += 1.0;
					if (this.frameCounter > 9.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y / num > 12)
					{
						this.frame.Y = num * 7;
					}
					if (this.frame.Y / num < 7)
					{
						this.frame.Y = num * 7;
						return;
					}
				}
			}
			else if (this.type == 469)
			{
				if (this.ai[2] == 1f)
				{
					this.rotation = (float)Math.Atan2((double)this.velocity.Y, (double)this.velocity.X) + 1.57f;
					if (this.velocity.X < 0f)
					{
						this.direction = -1;
					}
					if (this.velocity.X > 0f)
					{
						this.direction = 1;
					}
					this.spriteDirection = this.direction;
					this.frameCounter += (double)Math.Abs(this.velocity.Length());
					if (this.frameCounter > 11.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y / num > 5)
					{
						this.frame.Y = num * 2;
					}
					if (this.frame.Y / num < 2)
					{
						this.frame.Y = num * 2;
						return;
					}
				}
				else
				{
					this.rotation = 0f;
					if (this.velocity.Y != 0f)
					{
						this.frameCounter = 0.0;
						this.frame.Y = num;
						return;
					}
					if (this.direction == 1)
					{
						this.spriteDirection = 1;
					}
					if (this.direction == -1)
					{
						this.spriteDirection = -1;
					}
					if (this.velocity.X == 0f)
					{
						this.frameCounter = 0.0;
						this.frame.Y = 0;
						return;
					}
					this.frameCounter += (double)Math.Abs(this.velocity.X);
					this.frameCounter += 1.0;
					if (this.frameCounter > 9.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y / num > 11)
					{
						this.frame.Y = num * 6;
					}
					if (this.frame.Y / num < 6)
					{
						this.frame.Y = num * 6;
						return;
					}
				}
			}
			else if (this.type == 351)
			{
				if (this.velocity.Y != 0f)
				{
					if (this.velocity.Y < 0f)
					{
						this.frame.Y = num;
					}
					else
					{
						this.frame.Y = num;
					}
					this.frameCounter = 0.0;
					return;
				}
				if (this.direction == 1)
				{
					this.spriteDirection = 1;
				}
				if (this.direction == -1)
				{
					this.spriteDirection = -1;
				}
				if (this.velocity.X == 0f)
				{
					this.frame.Y = 0;
					this.frameCounter = 0.0;
					return;
				}
				this.frameCounter += (double)(Math.Abs(this.velocity.X) * 1f);
				this.frameCounter += 1.0;
				if (this.frameCounter > 8.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y / num >= Main.npcFrameCount[this.type])
				{
					this.frame.Y = num * 2;
					return;
				}
			}
			else if (this.type == 343)
			{
				if (this.velocity.Y != 0f)
				{
					if (this.velocity.Y < 0f)
					{
						this.frame.Y = 0;
					}
					else
					{
						this.frame.Y = num;
					}
					this.frameCounter = 0.0;
					return;
				}
				if (this.direction == 1)
				{
					this.spriteDirection = 1;
				}
				if (this.direction == -1)
				{
					this.spriteDirection = -1;
				}
				if (this.velocity.X == 0f)
				{
					this.frame.Y = num * 2;
					this.frameCounter = 0.0;
					return;
				}
				this.frameCounter += (double)(Math.Abs(this.velocity.X) * 1f);
				this.frameCounter += 1.0;
				if (this.frameCounter > 6.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y / num >= Main.npcFrameCount[this.type])
				{
					this.frame.Y = num * 2;
					return;
				}
			}
			else if (this.type >= 269 && this.type <= 280)
			{
				if (this.velocity.Y != 0f)
				{
					this.frameCounter = 0.0;
					this.frame.Y = 0;
					return;
				}
				if (this.direction == 1)
				{
					this.spriteDirection = 1;
				}
				if (this.direction == -1)
				{
					this.spriteDirection = -1;
				}
				if (this.velocity.X == 0f)
				{
					if (this.type == 140)
					{
						this.frame.Y = num;
						this.frameCounter = 0.0;
						return;
					}
					this.frame.Y = 0;
					this.frameCounter = 0.0;
					return;
				}
				else
				{
					this.frameCounter += (double)(Math.Abs(this.velocity.X) * 2f);
					this.frameCounter += 1.0;
					if (this.frameCounter > 6.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y / num >= Main.npcFrameCount[this.type])
					{
						this.frame.Y = num * 2;
						return;
					}
				}
			}
			else if (this.type == 230)
			{
				if (this.velocity.Y == 0f)
				{
					this.rotation = 0f;
					if (this.direction == 1)
					{
						this.spriteDirection = 1;
					}
					if (this.direction == -1)
					{
						this.spriteDirection = -1;
					}
					if (this.velocity.X == 0f)
					{
						this.frame.Y = 0;
						this.frameCounter = 0.0;
						return;
					}
					this.frameCounter += (double)(Math.Abs(this.velocity.X) * 2f);
					this.frameCounter += 1.0;
					if (this.frameCounter > 10.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y / num >= Main.npcFrameCount[this.type])
					{
						this.frame.Y = 0;
						return;
					}
				}
				else
				{
					this.frameCounter = 0.0;
					this.frame.Y = 0;
					if (this.velocity.Y > 4f)
					{
						this.rotation -= this.velocity.Y * 0.01f;
						return;
					}
				}
			}
			else if (this.type == 290)
			{
				if (this.velocity.Y != 0f)
				{
					this.frameCounter = 0.0;
					this.frame.Y = num;
					return;
				}
				if (this.direction == 1)
				{
					this.spriteDirection = 1;
				}
				if (this.direction == -1)
				{
					this.spriteDirection = -1;
				}
				if (this.ai[2] > 0f)
				{
					if (this.ai[1] < 10f)
					{
						this.frame.Y = num * 11;
						return;
					}
					if (this.ai[1] < 20f)
					{
						this.frame.Y = num * 10;
						return;
					}
					this.frame.Y = num * 9;
					return;
				}
				else
				{
					if (this.velocity.X == 0f)
					{
						this.frameCounter = 0.0;
						this.frame.Y = 0;
						return;
					}
					if (this.frame.Y < num * 2)
					{
						this.frame.Y = num * 2;
					}
					this.frameCounter += (double)(Math.Abs(this.velocity.X) * 1f);
					if (this.frameCounter > 6.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y > num * 8)
					{
						this.frame.Y = num * 2;
						return;
					}
				}
			}
			else if (this.type == 110 || this.type == 214 || this.type == 215 || this.type == 216 || this.type == 291 || this.type == 292 || this.type == 293)
			{
				if (this.velocity.Y != 0f)
				{
					this.frameCounter = 0.0;
					this.frame.Y = 0;
					return;
				}
				if (this.direction == 1)
				{
					this.spriteDirection = 1;
				}
				if (this.direction == -1)
				{
					this.spriteDirection = -1;
				}
				if (this.ai[2] > 0f)
				{
					this.spriteDirection = this.direction;
					this.frame.Y = num * (int)this.ai[2];
					this.frameCounter = 0.0;
					return;
				}
				if (this.frame.Y < num * 6)
				{
					this.frame.Y = num * 6;
				}
				this.frameCounter += (double)(Math.Abs(this.velocity.X) * 2f);
				this.frameCounter += (double)this.velocity.X;
				if (this.frameCounter > 6.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y / num >= Main.npcFrameCount[this.type])
				{
					this.frame.Y = num * 6;
					return;
				}
			}
			else if (this.type == 206)
			{
				if (this.velocity.Y != 0f)
				{
					this.frameCounter = 0.0;
					this.frame.Y = 0;
					return;
				}
				if (this.direction == 1)
				{
					this.spriteDirection = 1;
				}
				if (this.direction == -1)
				{
					this.spriteDirection = -1;
				}
				if (this.ai[2] > 0f)
				{
					this.spriteDirection = this.direction;
					this.frame.Y = num * (int)this.ai[2];
					this.frameCounter = 0.0;
					return;
				}
				if (this.frame.Y < num * 6)
				{
					this.frame.Y = num * 6;
				}
				this.frameCounter += (double)(Math.Abs(this.velocity.X) * 2f);
				this.frameCounter += (double)this.velocity.X;
				if (this.frameCounter > 6.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y / num >= Main.npcFrameCount[this.type])
				{
					this.frame.Y = num * 6;
					return;
				}
			}
			else if (this.type == 350)
			{
				if (this.velocity.Y != 0f)
				{
					this.frameCounter = 0.0;
					this.frame.Y = num * 5;
					return;
				}
				if (this.direction == 1)
				{
					this.spriteDirection = 1;
				}
				if (this.direction == -1)
				{
					this.spriteDirection = -1;
				}
				if (this.ai[2] > 0f)
				{
					this.spriteDirection = this.direction;
					this.frame.Y = num * ((int)this.ai[2] - 1);
					this.frameCounter = 0.0;
					return;
				}
				if (this.frame.Y < num * 7)
				{
					this.frame.Y = num * 7;
				}
				this.frameCounter += (double)(Math.Abs(this.velocity.X) * 2f);
				this.frameCounter += (double)(this.velocity.X * 1.3f);
				if (this.frameCounter > 4.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y / num >= Main.npcFrameCount[this.type])
				{
					this.frame.Y = num * 7;
					return;
				}
			}
			else if (this.type == 111)
			{
				if (this.velocity.Y != 0f)
				{
					this.frameCounter = 0.0;
					this.frame.Y = num * 6;
					return;
				}
				if (this.direction == 1)
				{
					this.spriteDirection = 1;
				}
				if (this.direction == -1)
				{
					this.spriteDirection = -1;
				}
				if (this.ai[2] > 0f)
				{
					this.spriteDirection = this.direction;
					this.frame.Y = num * ((int)this.ai[2] - 1);
					this.frameCounter = 0.0;
					return;
				}
				if (this.frame.Y < num * 7)
				{
					this.frame.Y = num * 7;
				}
				this.frameCounter += (double)(Math.Abs(this.velocity.X) * 2f);
				this.frameCounter += (double)(this.velocity.X * 1.3f);
				if (this.frameCounter > 6.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y / num >= Main.npcFrameCount[this.type])
				{
					this.frame.Y = num * 7;
					return;
				}
			}
			else if (this.type == 257)
			{
				if (this.velocity.Y == 0f)
				{
					if (this.direction == 1)
					{
						this.spriteDirection = 1;
					}
					if (this.direction == -1)
					{
						this.spriteDirection = -1;
					}
				}
				if (this.velocity.Y != 0f || (this.direction == -1 && this.velocity.X > 0f) || (this.direction == 1 && this.velocity.X < 0f))
				{
					this.frameCounter = 0.0;
					this.frame.Y = num * 4;
					return;
				}
				if (this.velocity.X == 0f)
				{
					this.frameCounter = 0.0;
					this.frame.Y = 0;
					return;
				}
				this.frameCounter += (double)Math.Abs(this.velocity.X);
				if (this.frameCounter < 8.0)
				{
					this.frame.Y = 0;
					return;
				}
				if (this.frameCounter < 16.0)
				{
					this.frame.Y = num;
					return;
				}
				if (this.frameCounter < 24.0)
				{
					this.frame.Y = num * 2;
					return;
				}
				if (this.frameCounter < 32.0)
				{
					this.frame.Y = num * 3;
					return;
				}
				this.frameCounter = 0.0;
				return;
			}
			else if (this.type == 258)
			{
				if (this.velocity.Y == 0f)
				{
					if (this.direction == 1)
					{
						this.spriteDirection = 1;
					}
					if (this.direction == -1)
					{
						this.spriteDirection = -1;
					}
				}
				if (this.velocity.Y != 0f || (this.direction == -1 && this.velocity.X > 0f) || (this.direction == 1 && this.velocity.X < 0f))
				{
					this.frameCounter += 1.0;
					if (this.frameCounter > 1.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y > num * 5 || this.frame.Y < num * 3)
					{
						this.frame.Y = num * 3;
						return;
					}
				}
				else
				{
					if (this.velocity.X == 0f)
					{
						this.frameCounter = 0.0;
						this.frame.Y = 0;
						return;
					}
					this.frameCounter += (double)Math.Abs(this.velocity.X);
					if (this.frameCounter < 8.0)
					{
						this.frame.Y = 0;
						return;
					}
					if (this.frameCounter < 16.0)
					{
						this.frame.Y = num;
						return;
					}
					if (this.frameCounter < 24.0)
					{
						this.frame.Y = num * 2;
						return;
					}
					this.frameCounter = 0.0;
					return;
				}
			}
			else if (this.type == 348)
			{
				if (this.velocity.Y == 0f)
				{
					if (this.direction == 1)
					{
						this.spriteDirection = 1;
					}
					if (this.direction == -1)
					{
						this.spriteDirection = -1;
					}
				}
				if (this.velocity.Y != 0f)
				{
					this.frameCounter = 0.0;
					this.frame.Y = num * 8;
					return;
				}
				if (this.velocity.X == 0f)
				{
					this.frameCounter = 0.0;
					this.frame.Y = 0;
					return;
				}
				this.frameCounter += (double)Math.Abs(this.velocity.X);
				this.frameCounter += 1.0;
				if (this.frameCounter > 6.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y > num * 7)
				{
					this.frame.Y = num;
					return;
				}
			}
			else if (this.type == 349)
			{
				this.frameCounter += 1.0;
				if (this.frameCounter > 3.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y > num * 7)
				{
					this.frame.Y = 0;
					return;
				}
			}
			else if (this.type == 3 || this.type == 342 || this.type == 331 || this.type == 332 || this.type == 52 || this.type == 53 || this.type == 536 || this.type == 132 || this.type == 161 || this.type == 162 || this.type == 186 || this.type == 187 || this.type == 188 || this.type == 189 || this.type == 200 || this.type == 223 || this.type == 251 || this.type == 254 || this.type == 255 || (this.type >= 319 && this.type <= 321))
			{
				if (this.velocity.Y == 0f)
				{
					if (this.direction == 1)
					{
						this.spriteDirection = 1;
					}
					if (this.direction == -1)
					{
						this.spriteDirection = -1;
					}
				}
				if (this.velocity.Y != 0f || (this.direction == -1 && this.velocity.X > 0f) || (this.direction == 1 && this.velocity.X < 0f))
				{
					this.frameCounter = 0.0;
					this.frame.Y = num * 2;
					return;
				}
				if (this.velocity.X == 0f)
				{
					this.frameCounter = 0.0;
					this.frame.Y = 0;
					return;
				}
				this.frameCounter += (double)Math.Abs(this.velocity.X);
				if (this.frameCounter < 8.0)
				{
					this.frame.Y = 0;
					return;
				}
				if (this.frameCounter < 16.0)
				{
					this.frame.Y = num;
					return;
				}
				if (this.frameCounter < 24.0)
				{
					this.frame.Y = num * 2;
					return;
				}
				if (this.frameCounter < 32.0)
				{
					this.frame.Y = num;
					return;
				}
				this.frameCounter = 0.0;
				return;
			}
			else if (this.type == 148 || this.type == 149 || this.type == 168 || this.type == 470)
			{
				int num128 = 0;
				if (this.localAI[0] == 2f)
				{
					num128 = 3;
				}
				if (this.localAI[0] == 3f)
				{
					num128 = 6;
				}
				if (this.localAI[0] == 4f)
				{
					num128 = 9;
				}
				num128 *= num;
				if (this.velocity.Y == 0f)
				{
					if (this.direction == 1)
					{
						this.spriteDirection = 1;
					}
					if (this.direction == -1)
					{
						this.spriteDirection = -1;
					}
					if (this.velocity.X == 0f)
					{
						this.frame.Y = num128;
						this.frameCounter = 0.0;
						return;
					}
					this.frameCounter += (double)(Math.Abs(this.velocity.X) * 1f);
					if (this.frameCounter < 6.0)
					{
						this.frame.Y = num128;
						return;
					}
					if (this.frameCounter < 12.0)
					{
						this.frame.Y = num + num128;
						return;
					}
					if (this.frameCounter < 15.0)
					{
						this.frame.Y = num * 2 + num128;
						return;
					}
					this.frameCounter = 0.0;
					this.frame.Y = num * 2 + num128;
					return;
				}
				else
				{
					if (this.velocity.Y < 0f)
					{
						this.frameCounter = 0.0;
						this.frame.Y = num * 2 + num128;
						return;
					}
					if (this.velocity.Y > 0f)
					{
						this.frameCounter = 0.0;
						this.frame.Y = num * 2 + num128;
						return;
					}
				}
			}
			else if (this.type == 299 || this.type == 538 || this.type == 539)
			{
				if (this.velocity.Y == 0f)
				{
					if (this.direction == 1)
					{
						this.spriteDirection = 1;
					}
					if (this.direction == -1)
					{
						this.spriteDirection = -1;
					}
					if (this.velocity.X == 0f)
					{
						this.frame.Y = 0;
						this.frameCounter = 0.0;
						return;
					}
					this.frameCounter += (double)(Math.Abs(this.velocity.X) * 0.5f);
					this.frameCounter += 1.0;
					if (this.frameCounter > 6.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y / num >= Main.npcFrameCount[this.type] - 1)
					{
						this.frame.Y = num;
						return;
					}
				}
				else
				{
					if (this.velocity.Y < 0f)
					{
						this.frameCounter = 0.0;
						this.frame.Y = num * 2;
						return;
					}
					if (this.velocity.Y > 0f)
					{
						this.frameCounter = 0.0;
						this.frame.Y = num * 4;
						return;
					}
				}
			}
			else if (this.type == 300 || this.type == 447)
			{
				if (this.velocity.Y == 0f)
				{
					if (this.direction == 1)
					{
						this.spriteDirection = 1;
					}
					if (this.direction == -1)
					{
						this.spriteDirection = -1;
					}
					if (this.velocity.X == 0f)
					{
						this.frameCounter += 1.0;
						if (this.frameCounter > 8.0)
						{
							this.frame.Y = this.frame.Y + num;
							this.frameCounter = 0.0;
						}
						if (this.frame.Y / num > 1)
						{
							this.frame.Y = 0;
							return;
						}
					}
					else
					{
						this.frameCounter += (double)(Math.Abs(this.velocity.X) * 0.5f);
						this.frameCounter += 1.0;
						if (this.frameCounter > 6.0)
						{
							this.frame.Y = this.frame.Y + num;
							this.frameCounter = 0.0;
						}
						if (this.frame.Y / num >= Main.npcFrameCount[this.type])
						{
							this.frame.Y = num * 2;
							return;
						}
					}
				}
				else
				{
					this.frameCounter += (double)(Math.Abs(this.velocity.X) * 0.5f);
					this.frameCounter += 1.0;
					if (this.frameCounter > 6.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y / num >= Main.npcFrameCount[this.type])
					{
						this.frame.Y = num * 2;
						return;
					}
				}
			}
			else if (this.type == 361 || this.type == 445)
			{
				this.spriteDirection = this.direction;
				if (this.velocity.Y == 0f)
				{
					if (this.velocity.X == 0f)
					{
						this.frameCounter += 1.0;
						if (this.frameCounter > 6.0)
						{
							this.frameCounter = 0.0;
							this.frame.Y = this.frame.Y + num;
						}
						if (this.frame.Y > num * 5)
						{
							this.frame.Y = 0;
							return;
						}
					}
					else
					{
						this.frameCounter += 1.0;
						int num129 = 6;
						if (this.frameCounter < (double)num129)
						{
							this.frame.Y = 0;
							return;
						}
						if (this.frameCounter < (double)(num129 * 2))
						{
							this.frame.Y = num * 6;
							return;
						}
						if (this.frameCounter < (double)(num129 * 3))
						{
							this.frame.Y = num * 8;
							return;
						}
						this.frame.Y = num * 9;
						if (this.frameCounter >= (double)(num129 * 4 - 1))
						{
							this.frameCounter = 0.0;
							return;
						}
					}
				}
				else
				{
					if (this.velocity.Y > 0f)
					{
						this.frame.Y = num * 9;
						return;
					}
					this.frame.Y = num * 8;
					return;
				}
			}
			else if (this.type == 366 || this.type == 367)
			{
				if (this.velocity.Y == 0f)
				{
					if (this.direction == 1)
					{
						this.spriteDirection = 1;
					}
					if (this.direction == -1)
					{
						this.spriteDirection = -1;
					}
				}
				if (this.velocity.X == 0f)
				{
					this.frame.Y = 0;
					this.frameCounter = 0.0;
					return;
				}
				this.frameCounter += (double)(Math.Abs(this.velocity.X) * 1f);
				this.frameCounter += 1.0;
				if (this.frameCounter > 6.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y / num >= Main.npcFrameCount[this.type])
				{
					this.frame.Y = 0;
					return;
				}
			}
			else if (this.type == 46 || this.type == 47 || this.type == 303 || this.type == 337 || this.type == 443 || this.type == 464 || this.type == 540)
			{
				if (this.velocity.Y == 0f)
				{
					if (this.direction == 1)
					{
						this.spriteDirection = 1;
					}
					if (this.direction == -1)
					{
						this.spriteDirection = -1;
					}
					if (this.velocity.X == 0f)
					{
						this.frame.Y = 0;
						this.frameCounter = 0.0;
						return;
					}
					this.frameCounter += (double)(Math.Abs(this.velocity.X) * 1f);
					this.frameCounter += 1.0;
					if (this.frameCounter > 6.0)
					{
						this.frame.Y = this.frame.Y + num;
						this.frameCounter = 0.0;
					}
					if (this.frame.Y / num >= Main.npcFrameCount[this.type])
					{
						this.frame.Y = 0;
						return;
					}
				}
				else
				{
					if (this.velocity.Y < 0f)
					{
						this.frameCounter = 0.0;
						this.frame.Y = num * 4;
						return;
					}
					if (this.velocity.Y > 0f)
					{
						this.frameCounter = 0.0;
						this.frame.Y = num * 6;
						return;
					}
				}
			}
			else if (this.type == 4 || this.type == 125 || this.type == 126)
			{
				this.frameCounter += 1.0;
				if (this.frameCounter < 7.0)
				{
					this.frame.Y = 0;
				}
				else if (this.frameCounter < 14.0)
				{
					this.frame.Y = num;
				}
				else if (this.frameCounter < 21.0)
				{
					this.frame.Y = num * 2;
				}
				else
				{
					this.frameCounter = 0.0;
					this.frame.Y = 0;
				}
				if (this.ai[0] > 1f)
				{
					this.frame.Y = this.frame.Y + num * 3;
					return;
				}
			}
			else if (this.type == 5)
			{
				this.frameCounter += 1.0;
				if (this.frameCounter >= 8.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y >= num * Main.npcFrameCount[this.type])
				{
					this.frame.Y = 0;
					return;
				}
			}
			else if (this.type == 94)
			{
				this.frameCounter += 1.0;
				if (this.frameCounter < 6.0)
				{
					this.frame.Y = 0;
					return;
				}
				if (this.frameCounter < 12.0)
				{
					this.frame.Y = num;
					return;
				}
				if (this.frameCounter < 18.0)
				{
					this.frame.Y = num * 2;
					return;
				}
				this.frame.Y = num;
				if (this.frameCounter >= 23.0)
				{
					this.frameCounter = 0.0;
					return;
				}
			}
			else if (this.type == 6 || this.type == 173)
			{
				this.frameCounter += 1.0;
				if (this.frameCounter >= 8.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y >= num * Main.npcFrameCount[this.type])
				{
					this.frame.Y = 0;
					return;
				}
			}
			else if (this.type == 24)
			{
				if (this.velocity.Y == 0f)
				{
					if (this.direction == 1)
					{
						this.spriteDirection = 1;
					}
					if (this.direction == -1)
					{
						this.spriteDirection = -1;
					}
				}
				if (this.ai[1] > 0f)
				{
					if (this.frame.Y < 4)
					{
						this.frameCounter = 0.0;
					}
					this.frameCounter += 1.0;
					if (this.frameCounter <= 4.0)
					{
						this.frame.Y = num * 4;
						return;
					}
					if (this.frameCounter <= 8.0)
					{
						this.frame.Y = num * 5;
						return;
					}
					if (this.frameCounter <= 12.0)
					{
						this.frame.Y = num * 6;
						return;
					}
					if (this.frameCounter <= 16.0)
					{
						this.frame.Y = num * 7;
						return;
					}
					if (this.frameCounter <= 20.0)
					{
						this.frame.Y = num * 8;
						return;
					}
					this.frame.Y = num * 9;
					this.frameCounter = 100.0;
					return;
				}
				else
				{
					this.frameCounter += 1.0;
					if (this.frameCounter <= 4.0)
					{
						this.frame.Y = 0;
						return;
					}
					if (this.frameCounter <= 8.0)
					{
						this.frame.Y = num;
						return;
					}
					if (this.frameCounter <= 12.0)
					{
						this.frame.Y = num * 2;
						return;
					}
					this.frame.Y = num * 3;
					if (this.frameCounter >= 16.0)
					{
						this.frameCounter = 0.0;
						return;
					}
				}
			}
			else if (this.type == 29 || this.type == 32 || this.type == 45 || this.type == 172 || (this.type >= 281 && this.type <= 286))
			{
				if (this.velocity.Y == 0f)
				{
					if (this.direction == 1)
					{
						this.spriteDirection = 1;
					}
					if (this.direction == -1)
					{
						this.spriteDirection = -1;
					}
				}
				this.frame.Y = 0;
				if (this.velocity.Y != 0f)
				{
					this.frame.Y = this.frame.Y + num;
					return;
				}
				if (this.ai[1] > 0f)
				{
					this.frame.Y = this.frame.Y + num * 2;
					return;
				}
			}
			else if (this.type == 34)
			{
				this.frameCounter += 1.0;
				if (this.frameCounter >= 4.0)
				{
					this.frame.Y = this.frame.Y + num;
					this.frameCounter = 0.0;
				}
				if (this.frame.Y >= num * Main.npcFrameCount[this.type])
				{
					this.frame.Y = 0;
				}
			}
		}

		public void SimpleFlyMovement(Vector2 desiredVelocity, float moveSpeed)
		{
			if (this.velocity.X < desiredVelocity.X)
			{
				this.velocity.X = this.velocity.X + moveSpeed;
				if (this.velocity.X < 0f && desiredVelocity.X > 0f)
				{
					this.velocity.X = this.velocity.X + moveSpeed;
				}
			}
			else if (this.velocity.X > desiredVelocity.X)
			{
				this.velocity.X = this.velocity.X - moveSpeed;
				if (this.velocity.X > 0f && desiredVelocity.X < 0f)
				{
					this.velocity.X = this.velocity.X - moveSpeed;
				}
			}
			if (this.velocity.Y < desiredVelocity.Y)
			{
				this.velocity.Y = this.velocity.Y + moveSpeed;
				if (this.velocity.Y < 0f && desiredVelocity.Y > 0f)
				{
					this.velocity.Y = this.velocity.Y + moveSpeed;
					return;
				}
			}
			else if (this.velocity.Y > desiredVelocity.Y)
			{
				this.velocity.Y = this.velocity.Y - moveSpeed;
				if (this.velocity.Y > 0f && desiredVelocity.Y < 0f)
				{
					this.velocity.Y = this.velocity.Y - moveSpeed;
				}
			}
		}

		public void HealEffect(int healAmount, bool broadcast = true)
		{
			int num = CombatText.NewText(new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), CombatText.HealLife, string.Concat(healAmount), false, false);
			if (broadcast && Main.netMode == 2 && num != 100)
			{
				CombatText combatText = Main.combatText[num];
				NetMessage.SendData(81, -1, -1, combatText.text, (int)combatText.color.PackedValue, combatText.position.X, combatText.position.Y, 0f, 0, 0, 0);
			}
		}

		public static void HealEffect(Rectangle r, int healAmount, bool broadcast = true)
		{
			int num = CombatText.NewText(r, CombatText.HealLife, string.Concat(healAmount), false, false);
			if (broadcast && Main.netMode == 2 && num != 100)
			{
				CombatText combatText = Main.combatText[num];
				NetMessage.SendData(81, -1, -1, combatText.text, (int)combatText.color.PackedValue, combatText.position.X, combatText.position.Y, 0f, 0, 0, 0);
			}
		}

		public int FindClosestPlayer()
		{
			float num;
			return this.FindClosestPlayer(out num);
		}

		public int FindClosestPlayer(out float distanceToPlayer)
		{
			Vector2 center = base.Center;
			float num = 3.40282347E+38f;
			int num2 = -1;
			for (int i = 0; i < 255; i++)
			{
				Player player = Main.player[i];
				if (player.active && !player.dead && !player.ghost)
				{
					float num3 = Vector2.DistanceSquared(center, player.Center);
					if (num3 < num)
					{
						num = num3;
						num2 = i;
					}
				}
			}
			if (num2 < 0)
			{
				for (int j = 0; j < 255; j++)
				{
					Player player = Main.player[j];
					if (player.active)
					{
						float num4 = Vector2.DistanceSquared(center, player.Center);
						if (num4 < num)
						{
							num = num4;
							num2 = j;
						}
					}
				}
			}
			distanceToPlayer = (float)Math.Sqrt((double)num);
			return num2;
		}

		public void BigMimicSpawnSmoke()
		{
			if (Main.netMode == 2)
			{
				NetMessage.SendData(51, -1, -1, "", this.whoAmI, 4f, 0f, 0f, 0, 0, 0);
				return;
			}
			for (int i = 0; i < 20; i++)
			{
				int num = Dust.NewDust(this.position, this.width, this.height, 54, 0f, 0f, 50, default(Color), 1.5f);
				Main.dust[num].velocity *= 2f;
				Main.dust[num].noGravity = true;
			}
			for (int j = 0; j < 3; j++)
			{
				for (int k = 0; k < 2; k++)
				{
					int num2 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width * j) * 0.45f - 20f, this.position.Y + (float)(this.height * k) * 0.5f + 10f), new Vector2(0f, 0f), 99, 1.1f);
					Main.gore[num2].velocity *= 0.3f;
				}
			}
		}

		public static bool BigMimicSummonCheck(int x, int y)
		{
			if (Main.netMode == 1 || !Main.hardMode)
			{
				return false;
			}
			int num = Chest.FindChest(x, y);
			if (num < 0)
			{
				return false;
			}
			int num2 = 0;
			int num3 = 0;
			int num4 = 0;
			for (int i = 0; i < 40; i++)
			{
				ushort num5 = Main.tile[Main.chest[num].x, Main.chest[num].y].type;
				int num6 = (int)(Main.tile[Main.chest[num].x, Main.chest[num].y].frameX / 36);
				if (num5 == 21 && (num6 < 5 || num6 > 6) && Main.chest[num].item[i] != null && Main.chest[num].item[i].type > 0)
				{
					if (Main.chest[num].item[i].type == 3092)
					{
						num2 += Main.chest[num].item[i].stack;
					}
					else if (Main.chest[num].item[i].type == 3091)
					{
						num3 += Main.chest[num].item[i].stack;
					}
					else
					{
						num4++;
					}
				}
			}
			if (num4 == 0 && num2 + num3 == 1)
			{
				if (num2 != 1)
				{
				}
				if (Main.tile[x, y].type == 21)
				{
					if (Main.tile[x, y].frameX % 36 != 0)
					{
						x--;
					}
					if (Main.tile[x, y].frameY % 36 != 0)
					{
						y--;
					}
					int number = Chest.FindChest(x, y);
					for (int j = x; j <= x + 1; j++)
					{
						for (int k = y; k <= y + 1; k++)
						{
							if (Main.tile[j, k].type == 21)
							{
								Main.tile[j, k].active(false);
							}
						}
					}
					for (int l = 0; l < 40; l++)
					{
						Main.chest[num].item[l] = new Item();
					}
					Chest.DestroyChest(x, y);
					NetMessage.SendData(34, -1, -1, "", 1, (float)x, (float)y, 0f, number, 0, 0);
					NetMessage.SendTileSquare(-1, x, y, 3, TileChangeType.None);
				}
				int num7 = 475;
				if (num3 == 1)
				{
					if (WorldGen.crimson)
					{
						num7 = 474;
					}
					else
					{
						num7 = 473;
					}
				}
				int num8 = NPC.NewNPC(x * 16 + 16, y * 16 + 32, num7, 0, 0f, 0f, 0f, 0f, 255);
				Main.npc[num8].whoAmI = num8;
				NetMessage.SendData(23, -1, -1, "", num8, 0f, 0f, 0f, 0, 0, 0);
				Main.npc[num8].BigMimicSpawnSmoke();
			}
			return false;
		}

		public bool ShouldFaceTarget(ref NPCUtils.TargetSearchResults searchResults, NPCUtils.TargetType? overrideTargetType = null)
		{
			NPCUtils.TargetType nearestTargetType = searchResults.NearestTargetType;
			if (overrideTargetType.HasValue)
			{
				nearestTargetType = overrideTargetType.Value;
			}
			switch (nearestTargetType)
			{
			case NPCUtils.TargetType.NPC:
			case NPCUtils.TargetType.TankPet:
				return true;
			case NPCUtils.TargetType.Player:
			{
				bool flag = true;
				Player nearestTankOwner = searchResults.NearestTankOwner;
				if (nearestTankOwner.dead || (nearestTankOwner.npcTypeNoAggro[this.type] && this.direction != 0))
				{
					flag = false;
				}
				if (flag)
				{
					float num = (float)(nearestTankOwner.width + nearestTankOwner.height + this.width + this.height) / 4f + 800f;
					return nearestTankOwner.itemAnimation != 0 || nearestTankOwner.aggro >= 0 || searchResults.NearestTankDistance <= num || this.oldTarget < 0 || this.oldTarget >= 255;
				}
				break;
			}
			}
			return false;
		}

		public void FaceTarget()
		{
			this.direction = (((float)this.targetRect.Center.X < base.Center.X) ? -1 : 1);
			this.directionY = (((float)this.targetRect.Center.Y < base.Center.Y) ? -1 : 1);
		}

		public void TargetClosestUpgraded(bool faceTarget = true, Vector2? checkPosition = null)
		{
			int num = -1;
			int num2 = -1;
			int num3 = -1;
			Vector2 center = base.Center;
			if (checkPosition.HasValue)
			{
				center = checkPosition.Value;
			}
			bool flag = this.direction == 0;
			float num4 = 9999999f;
			for (int i = 0; i < 255; i++)
			{
				Player player = Main.player[i];
				if (player.active && !player.dead && !player.ghost)
				{
					float num5 = Vector2.Distance(center, player.Center);
					num5 -= (float)player.aggro;
					bool flag2 = player.npcTypeNoAggro[this.type];
					if (flag2 && !flag)
					{
						num5 += 1000f;
					}
					if (num5 < num4)
					{
						num = i;
						num2 = -1;
						num4 = num5;
					}
					if (player.tankPet >= 0 && !flag2)
					{
						num5 = Vector2.Distance(center, Main.projectile[player.tankPet].Center);
						num5 -= 200f;
						if (num5 < num4 && num5 < 200f && Collision.CanHit(base.Center, 0, 0, Main.projectile[player.tankPet].Center, 0, 0))
						{
							num2 = player.tankPet;
							num4 = num5;
						}
					}
				}
			}
			for (int j = 0; j < 200; j++)
			{
				NPC nPC = Main.npc[j];
				if (nPC.active && nPC.type == 548)
				{
					float num6 = Vector2.Distance(center, nPC.Center);
					if (num4 > num6)
					{
						num3 = j;
						num = -1;
						num2 = -1;
						num4 = num6;
					}
				}
			}
			if (num4 == 9999999f)
			{
				return;
			}
			if (num3 >= 0)
			{
				this.target = Main.npc[num3].WhoAmIToTargettingIndex;
				this.targetRect = Main.npc[num3].Hitbox;
				this.direction = (((float)this.targetRect.Center.X < base.Center.X) ? -1 : 1);
				this.directionY = (((float)this.targetRect.Center.Y < base.Center.Y) ? -1 : 1);
				return;
			}
			if (num2 >= 0)
			{
				this.target = Main.projectile[num2].owner;
				this.targetRect = Main.projectile[num2].Hitbox;
				this.direction = (((float)this.targetRect.Center.X < base.Center.X) ? -1 : 1);
				this.directionY = (((float)this.targetRect.Center.Y < base.Center.Y) ? -1 : 1);
				return;
			}
			if (num < 0 || num >= 255)
			{
				num = 0;
			}
			Player player2 = Main.player[num];
			this.targetRect = player2.Hitbox;
			this.target = num;
			if (player2.dead || (player2.npcTypeNoAggro[this.type] && !flag))
			{
				faceTarget = false;
			}
			if (faceTarget)
			{
				float num7 = (float)(player2.width + player2.height + this.width + this.height) / 4f + 800f;
				float num8 = num4 - (float)player2.aggro;
				if (player2.itemAnimation == 0 && player2.aggro < 0 && num8 > num7 && this.oldTarget >= 0 && this.oldTarget < 255)
				{
					return;
				}
				this.direction = (((float)this.targetRect.Center.X < base.Center.X) ? -1 : 1);
				this.directionY = (((float)this.targetRect.Center.Y < base.Center.Y) ? -1 : 1);
			}
		}

		public void TargetClosest(bool faceTarget = true)
		{
			float num = 0f;
			float num2 = 0f;
			bool flag = false;
			int num3 = -1;
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active && !Main.player[i].dead && !Main.player[i].ghost)
				{
					float num4 = Math.Abs(Main.player[i].position.X + (float)(Main.player[i].width / 2) - this.position.X + (float)(this.width / 2)) + Math.Abs(Main.player[i].position.Y + (float)(Main.player[i].height / 2) - this.position.Y + (float)(this.height / 2));
					num4 -= (float)Main.player[i].aggro;
					if (Main.player[i].npcTypeNoAggro[this.type] && this.direction != 0)
					{
						num4 += 1000f;
					}
					if (!flag || num4 < num)
					{
						flag = true;
						num3 = -1;
						num2 = Math.Abs(Main.player[i].position.X + (float)(Main.player[i].width / 2) - this.position.X + (float)(this.width / 2)) + Math.Abs(Main.player[i].position.Y + (float)(Main.player[i].height / 2) - this.position.Y + (float)(this.height / 2));
						num = num4;
						this.target = i;
					}
					if (Main.player[i].tankPet >= 0 && !Main.player[i].npcTypeNoAggro[this.type])
					{
						int tankPet = Main.player[i].tankPet;
						float num5 = Math.Abs(Main.projectile[tankPet].position.X + (float)(Main.projectile[tankPet].width / 2) - this.position.X + (float)(this.width / 2)) + Math.Abs(Main.projectile[tankPet].position.Y + (float)(Main.projectile[tankPet].height / 2) - this.position.Y + (float)(this.height / 2));
						num5 -= 200f;
						if (num5 < num && num5 < 200f && Collision.CanHit(base.Center, 1, 1, Main.projectile[tankPet].Center, 1, 1))
						{
							num3 = tankPet;
						}
					}
				}
			}
			if (num3 >= 0)
			{
				int num6 = num3;
				this.targetRect = new Rectangle((int)Main.projectile[num6].position.X, (int)Main.projectile[num6].position.Y, Main.projectile[num6].width, Main.projectile[num6].height);
				this.direction = 1;
				if ((float)(this.targetRect.X + this.targetRect.Width / 2) < this.position.X + (float)(this.width / 2))
				{
					this.direction = -1;
				}
				this.directionY = 1;
				if ((float)(this.targetRect.Y + this.targetRect.Height / 2) < this.position.Y + (float)(this.height / 2))
				{
					this.directionY = -1;
				}
			}
			else
			{
				if (this.target < 0 || this.target >= 255)
				{
					this.target = 0;
				}
				this.targetRect = new Rectangle((int)Main.player[this.target].position.X, (int)Main.player[this.target].position.Y, Main.player[this.target].width, Main.player[this.target].height);
				if (Main.player[this.target].dead)
				{
					faceTarget = false;
				}
				if (Main.player[this.target].npcTypeNoAggro[this.type] && this.direction != 0)
				{
					faceTarget = false;
				}
				if (faceTarget)
				{
					float num7 = num2 - (float)Main.player[this.target].aggro;
					float num8 = (float)((Main.player[this.target].height + Main.player[this.target].width + this.height + this.width) / 4 + 750 + 50);
					if (Main.player[this.target].itemAnimation != 0 || Main.player[this.target].aggro >= 0 || num7 <= num8 || this.oldTarget < 0 || this.oldTarget > 254)
					{
						this.direction = 1;
						if ((float)(this.targetRect.X + this.targetRect.Width / 2) < this.position.X + (float)(this.width / 2))
						{
							this.direction = -1;
						}
						this.directionY = 1;
						if ((float)(this.targetRect.Y + this.targetRect.Height / 2) < this.position.Y + (float)(this.height / 2))
						{
							this.directionY = -1;
						}
					}
				}
			}
			if (this.confused)
			{
				this.direction *= -1;
			}
			if ((this.direction != this.oldDirection || this.directionY != this.oldDirectionY || this.target != this.oldTarget) && !this.collideX && !this.collideY)
			{
				this.netUpdate = true;
			}
		}

		public void CheckActive()
		{
			if (this.active)
			{
				int num = this.type;
				if (num <= 328)
				{
					if (num <= 119)
					{
						if (num <= 41)
						{
							switch (num)
							{
							case 8:
							case 9:
							case 11:
							case 12:
							case 14:
							case 15:
								break;
							case 10:
							case 13:
								goto IL_2B1;
							default:
								switch (num)
								{
								case 40:
								case 41:
									break;
								default:
									goto IL_2B1;
								}
								break;
							}
						}
						else
						{
							switch (num)
							{
							case 88:
							case 89:
							case 90:
							case 91:
							case 92:
							case 96:
							case 97:
							case 99:
							case 100:
								break;
							case 93:
							case 94:
							case 95:
							case 98:
								goto IL_2B1;
							default:
								switch (num)
								{
								case 113:
								case 114:
								case 115:
								case 118:
								case 119:
									break;
								case 116:
								case 117:
									goto IL_2B1;
								default:
									goto IL_2B1;
								}
								break;
							}
						}
					}
					else if (num <= 249)
					{
						switch (num)
						{
						case 134:
						case 135:
						case 136:
							break;
						case 137:
						case 138:
							goto IL_2B1;
						case 139:
							if (NPC.npcsFoundForCheckActive[134])
							{
								return;
							}
							goto IL_2B1;
						default:
							switch (num)
							{
							case 246:
							case 247:
							case 248:
							case 249:
								break;
							default:
								goto IL_2B1;
							}
							break;
						}
					}
					else if (num != 263 && num != 267 && num != 328)
					{
						goto IL_2B1;
					}
				}
				else if (num <= 440)
				{
					if (num <= 400)
					{
						switch (num)
						{
						case 379:
						case 380:
							break;
						default:
							switch (num)
							{
							case 396:
							case 397:
							case 398:
							case 400:
								break;
							case 399:
								goto IL_2B1;
							default:
								goto IL_2B1;
							}
							break;
						}
					}
					else if (num != 422)
					{
						switch (num)
						{
						case 437:
						case 438:
						case 439:
						case 440:
							break;
						default:
							goto IL_2B1;
						}
					}
				}
				else if (num <= 493)
				{
					if (num != 488 && num != 493)
					{
						goto IL_2B1;
					}
				}
				else if (num != 507 && num != 517)
				{
					switch (num)
					{
					case 548:
					case 549:
					case 551:
					case 564:
					case 565:
						break;
					case 550:
						goto IL_2B1;
					case 552:
					case 553:
					case 554:
					case 555:
					case 556:
					case 557:
					case 558:
					case 559:
					case 560:
					case 561:
					case 562:
					case 563:
					case 566:
					case 567:
					case 568:
					case 569:
					case 570:
					case 571:
					case 572:
					case 573:
					case 574:
					case 575:
					case 576:
					case 577:
					case 578:
						if (NPC.npcsFoundForCheckActive[548])
						{
							return;
						}
						goto IL_2B1;
					default:
						goto IL_2B1;
					}
				}
				return;
				IL_2B1:
				if (this.townNPC)
				{
					Rectangle rectangle = new Rectangle((int)(this.position.X + (float)(this.width / 2) - (float)NPC.townRangeX), (int)(this.position.Y + (float)(this.height / 2) - (float)NPC.townRangeY), NPC.townRangeX * 2, NPC.townRangeY * 2);
					for (int i = 0; i < 255; i++)
					{
						if (Main.player[i].active && rectangle.Intersects(new Rectangle((int)Main.player[i].position.X, (int)Main.player[i].position.Y, Main.player[i].width, Main.player[i].height)))
						{
							Main.player[i].townNPCs += this.npcSlots;
						}
					}
					return;
				}
				bool flag = false;
				Rectangle rectangle2 = new Rectangle((int)(this.position.X + (float)(this.width / 2) - (float)NPC.activeRangeX), (int)(this.position.Y + (float)(this.height / 2) - (float)NPC.activeRangeY), NPC.activeRangeX * 2, NPC.activeRangeY * 2);
				Rectangle rectangle3 = new Rectangle((int)((double)(this.position.X + (float)(this.width / 2)) - (double)NPC.sWidth * 0.5 - (double)this.width), (int)((double)(this.position.Y + (float)(this.height / 2)) - (double)NPC.sHeight * 0.5 - (double)this.height), NPC.sWidth + this.width * 2, NPC.sHeight + this.height * 2);
				for (int j = 0; j < 255; j++)
				{
					if (Main.player[j].active)
					{
						if (rectangle2.Intersects(new Rectangle((int)Main.player[j].position.X, (int)Main.player[j].position.Y, Main.player[j].width, Main.player[j].height)))
						{
							flag = true;
							if (this.type != 25 && this.type != 30 && this.type != 33 && this.releaseOwner == 255 && this.lifeMax > 0)
							{
								if (Main.slimeRain && Main.slimeRainNPC[this.type])
								{
									Main.player[j].activeNPCs += this.npcSlots * Main.slimeRainNPCSlots;
								}
								else
								{
									Main.player[j].activeNPCs += this.npcSlots;
								}
							}
						}
						if (rectangle3.Intersects(new Rectangle((int)Main.player[j].position.X, (int)Main.player[j].position.Y, Main.player[j].width, Main.player[j].height)))
						{
							this.timeLeft = NPC.activeTime;
						}
						if (this.boss)
						{
							flag = true;
						}
						int num2 = this.type;
						if (num2 <= 39)
						{
							if (num2 <= 10)
							{
								if (num2 != 7 && num2 != 10)
								{
									goto IL_6A3;
								}
							}
							else if (num2 != 13)
							{
								switch (num2)
								{
								case 35:
								case 36:
								case 39:
									break;
								case 37:
								case 38:
									goto IL_6A3;
								default:
									goto IL_6A3;
								}
							}
						}
						else if (num2 <= 131)
						{
							if (num2 != 87)
							{
								switch (num2)
								{
								case 127:
								case 128:
								case 129:
								case 130:
								case 131:
									break;
								default:
									goto IL_6A3;
								}
							}
						}
						else
						{
							switch (num2)
							{
							case 392:
							case 393:
							case 394:
								break;
							default:
								if (num2 == 399)
								{
									if (this.ai[0] == 2f || this.ai[0] == 1f)
									{
										this.timeLeft = NPC.activeTime;
									}
									flag = true;
									goto IL_6A3;
								}
								switch (num2)
								{
								case 491:
								case 492:
									break;
								default:
									goto IL_6A3;
								}
								break;
							}
						}
						flag = true;
					}
					IL_6A3:;
				}
				this.timeLeft--;
				if (this.timeLeft <= 0)
				{
					flag = false;
				}
				if (!flag && Main.netMode != 1)
				{
					NPC.noSpawnCycle = true;
					this.active = false;
					if (Main.netMode == 2)
					{
						this.netSkip = -1;
						this.life = 0;
						NetMessage.SendData(23, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
					}
					if (this.aiStyle == 6)
					{
						for (int k = (int)this.ai[0]; k > 0; k = (int)Main.npc[k].ai[0])
						{
							if (Main.npc[k].active)
							{
								Main.npc[k].active = false;
								if (Main.netMode == 2)
								{
									Main.npc[k].life = 0;
									Main.npc[k].netSkip = -1;
									NetMessage.SendData(23, -1, -1, "", k, 0f, 0f, 0f, 0, 0, 0);
								}
							}
						}
					}
				}
			}
		}

		public void checkDead()
		{
			if (!this.active)
			{
				return;
			}
			if (this.realLife >= 0 && this.realLife != this.whoAmI)
			{
				return;
			}
			if (this.life <= 0)
			{
				if (this.type == 397 || this.type == 396)
				{
					if (this.ai[0] != -2f)
					{
						this.ai[0] = -2f;
						this.life = this.lifeMax;
						this.netUpdate = true;
						this.dontTakeDamage = true;
						if (Main.netMode != 1)
						{
							int num = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 400, 0, 0f, 0f, 0f, 0f, 255);
							Main.npc[num].ai[3] = this.ai[3];
							Main.npc[num].netUpdate = true;
						}
					}
					return;
				}
				if (this.type == 398 && this.ai[0] != 2f)
				{
					this.ai[0] = 2f;
					this.life = this.lifeMax;
					this.netUpdate = true;
					this.dontTakeDamage = true;
					return;
				}
				if ((this.type == 517 || this.type == 422 || this.type == 507 || this.type == 493) && this.ai[2] != 1f)
				{
					this.ai[2] = 1f;
					this.ai[1] = 0f;
					this.life = this.lifeMax;
					this.dontTakeDamage = true;
					this.netUpdate = true;
					return;
				}
				if (this.type == 548 && this.ai[1] != 1f)
				{
					this.ai[1] = 1f;
					this.ai[0] = 0f;
					this.life = this.lifeMax;
					this.dontTakeDamageFromHostiles = true;
					this.netUpdate = true;
					return;
				}
				NPC.noSpawnCycle = true;
				if (this.townNPC && this.type != 37 && this.type != 453)
				{
					string name = this.name;
					if (this.displayName != "")
					{
						name = this.displayName;
					}
					if (Main.netMode == 0)
					{
						if (this.type == 369)
						{
							Main.NewText(name + Lang.misc[36], 255, 25, 25, false);
						}
						else
						{
							Main.NewText(name + Lang.misc[19], 255, 25, 25, false);
						}
					}
					else if (Main.netMode == 2)
					{
						if (this.type == 369)
						{
							NetMessage.SendData(25, -1, -1, name + Lang.misc[36], 255, 255f, 25f, 25f, 0, 0, 0);
						}
						else
						{
							NetMessage.SendData(25, -1, -1, name + Lang.misc[19], 255, 255f, 25f, 25f, 0, 0, 0);
						}
					}
				}
				if (Main.netMode != 1 && !Main.dayTime && this.type == 54 && !NPC.AnyNPCs(35))
				{
					for (int i = 0; i < 255; i++)
					{
						if (Main.player[i].active && !Main.player[i].dead && Main.player[i].killClothier)
						{
							NPC.SpawnSkeletron();
							break;
						}
					}
				}
				if (this.townNPC && Main.netMode != 1 && this.homeless && WorldGen.spawnNPC == this.type)
				{
					WorldGen.spawnNPC = 0;
				}
				if (this.DeathSound != null)
				{
					Main.PlaySound(this.DeathSound, this.position);
				}
				if (this.type == 13 || this.type == 14 || this.type == 15)
				{
					bool flag = true;
					for (int j = 0; j < 200; j++)
					{
						if (j != this.whoAmI && Main.npc[j].active && (Main.npc[j].type == 13 || Main.npc[j].type == 14 || Main.npc[j].type == 15))
						{
							flag = false;
							break;
						}
					}
					if (flag)
					{
						this.boss = true;
						this.NPCLoot();
					}
					else
					{
						this.NPCLoot();
					}
				}
				else if (this.type == 134)
				{
					Vector2 position = this.position;
					Vector2 center = Main.player[this.target].Center;
					float num2 = 1E+08f;
					Vector2 position2 = this.position;
					for (int k = 0; k < 200; k++)
					{
						if (Main.npc[k].active && (Main.npc[k].type == 134 || Main.npc[k].type == 135 || Main.npc[k].type == 136))
						{
							float num3 = Math.Abs(Main.npc[k].Center.X - center.X) + Math.Abs(Main.npc[k].Center.Y - center.Y);
							if (num3 < num2)
							{
								num2 = num3;
								position2 = Main.npc[k].position;
							}
						}
					}
					this.position = position2;
					this.NPCLoot();
					this.position = position;
				}
				else
				{
					this.NPCLoot();
				}
				this.active = false;
				DD2Event.CheckProgress(this.type);
				this.CheckProgressFrostMoon();
				this.CheckProgressPumpkinMoon();
				int num4 = 0;
				int num5 = this.type;
				if (num5 > 145)
				{
					if (num5 <= 395)
					{
						switch (num5)
						{
						case 212:
						case 213:
						case 214:
						case 215:
						case 216:
							break;
						default:
							switch (num5)
							{
							case 381:
							case 382:
							case 383:
							case 385:
							case 386:
							case 388:
							case 389:
							case 390:
							case 391:
							case 395:
								num4 = 4;
								goto IL_686;
							case 384:
							case 387:
							case 392:
							case 393:
							case 394:
								goto IL_686;
							default:
								goto IL_686;
							}
							break;
						}
					}
					else
					{
						if (num5 == 471)
						{
							goto IL_674;
						}
						if (num5 != 491)
						{
							goto IL_686;
						}
					}
					num4 = 3;
					goto IL_686;
				}
				switch (num5)
				{
				case 26:
				case 27:
				case 28:
				case 29:
					break;
				default:
					if (num5 != 111)
					{
						switch (num5)
						{
						case 143:
						case 144:
						case 145:
							num4 = 2;
							goto IL_686;
						default:
							goto IL_686;
						}
					}
					break;
				}
				IL_674:
				num4 = 1;
				IL_686:
				if (num4 != 0 && num4 == Main.invasionType)
				{
					int num6 = 1;
					int num7 = this.type;
					if (num7 <= 395)
					{
						if (num7 != 216)
						{
							if (num7 == 395)
							{
								num6 = 10;
							}
						}
						else
						{
							num6 = 5;
						}
					}
					else if (num7 != 471)
					{
						if (num7 == 491)
						{
							num6 = 10;
						}
					}
					else
					{
						num6 = 10;
					}
					Main.invasionSize -= num6;
					if (Main.invasionSize < 0)
					{
						Main.invasionSize = 0;
					}
					if (Main.netMode != 1)
					{
						Main.ReportInvasionProgress(Main.invasionSizeStart - Main.invasionSize, Main.invasionSizeStart, num4 + 3, 0);
					}
					if (Main.netMode == 2)
					{
						NetMessage.SendData(78, -1, -1, "", Main.invasionProgress, (float)Main.invasionProgressMax, (float)Main.invasionProgressIcon, 0f, 0, 0, 0);
					}
				}
			}
		}

		private void CheckProgressFrostMoon()
		{
			if (Main.snowMoon)
			{
				string text = "";
				int[] array = new int[]
				{
					0,
					25,
					15,
					10,
					30,
					100,
					160,
					180,
					200,
					250,
					300,
					375,
					450,
					525,
					675,
					850,
					1025,
					1325,
					1550,
					2000,
					0
				};
				int num = array[NPC.waveNumber];
				switch (NPC.waveNumber)
				{
				case 1:
					text = Lang.GetInvasionWaveText(2, new short[]
					{
						338,
						350
					});
					break;
				case 2:
					text = Lang.GetInvasionWaveText(3, new short[]
					{
						338,
						350,
						342,
						348
					});
					break;
				case 3:
					text = Lang.GetInvasionWaveText(4, new short[]
					{
						344,
						338,
						350,
						342
					});
					break;
				case 4:
					text = Lang.GetInvasionWaveText(5, new short[]
					{
						344,
						338,
						350,
						348
					});
					break;
				case 5:
					text = Lang.GetInvasionWaveText(6, new short[]
					{
						344,
						350,
						348,
						347
					});
					break;
				case 6:
					text = Lang.GetInvasionWaveText(7, new short[]
					{
						346,
						342,
						350,
						338
					});
					break;
				case 7:
					text = Lang.GetInvasionWaveText(8, new short[]
					{
						346,
						347,
						350,
						348,
						351
					});
					break;
				case 8:
					text = Lang.GetInvasionWaveText(9, new short[]
					{
						346,
						344,
						348,
						347,
						342
					});
					break;
				case 9:
					text = Lang.GetInvasionWaveText(10, new short[]
					{
						346,
						344,
						351,
						338,
						347
					});
					break;
				case 10:
					text = Lang.GetInvasionWaveText(11, new short[]
					{
						345,
						352,
						338,
						342
					});
					break;
				case 11:
					text = Lang.GetInvasionWaveText(12, new short[]
					{
						345,
						344,
						342,
						343,
						338
					});
					break;
				case 12:
					text = Lang.GetInvasionWaveText(13, new short[]
					{
						345,
						346,
						342,
						352,
						343,
						347
					});
					break;
				case 13:
					text = Lang.GetInvasionWaveText(14, new short[]
					{
						345,
						346,
						344,
						343,
						351
					});
					break;
				case 14:
					text = Lang.GetInvasionWaveText(15, new short[]
					{
						345,
						346,
						344,
						343,
						347
					});
					break;
				case 15:
					text = Lang.GetInvasionWaveText(16, new short[]
					{
						345,
						346,
						344,
						343,
						352
					});
					break;
				case 16:
					text = Lang.GetInvasionWaveText(17, new short[]
					{
						345,
						346,
						344,
						343,
						351,
						347
					});
					break;
				case 17:
					text = Lang.GetInvasionWaveText(18, new short[]
					{
						345,
						346,
						344,
						343,
						348,
						351
					});
					break;
				case 18:
					text = Lang.GetInvasionWaveText(19, new short[]
					{
						345,
						346,
						344,
						343
					});
					break;
				case 19:
					text = Lang.GetInvasionWaveText(-1, new short[]
					{
						345,
						346,
						344
					});
					break;
				}
				float num2 = 0f;
				switch (this.type)
				{
				case 338:
				case 339:
				case 340:
					num2 = 1f;
					break;
				case 341:
					num2 = 20f;
					break;
				case 342:
					num2 = 2f;
					break;
				case 343:
					num2 = 18f;
					break;
				case 344:
					num2 = 50f;
					break;
				case 345:
					num2 = 150f;
					break;
				case 346:
					num2 = 100f;
					break;
				case 347:
					num2 = 8f;
					break;
				case 348:
				case 349:
					num2 = 4f;
					break;
				case 350:
					num2 = 3f;
					break;
				}
				if (Main.expertMode)
				{
					num2 *= 2f;
				}
				float num3 = NPC.waveKills;
				NPC.waveKills += num2;
				if (NPC.waveKills >= (float)num && num != 0)
				{
					NPC.waveKills = 0f;
					NPC.waveNumber++;
					num = array[NPC.waveNumber];
					if (text != "")
					{
						if (Main.netMode == 0)
						{
							Main.NewText(text, 175, 75, 255, false);
						}
						else if (Main.netMode == 2)
						{
							NetMessage.SendData(25, -1, -1, text, 255, 175f, 75f, 255f, 0, 0, 0);
						}
						if (NPC.waveNumber == 15)
						{
							AchievementsHelper.NotifyProgressionEvent(14);
						}
					}
				}
				if (NPC.waveKills != num3 && num2 != 0f)
				{
					if (Main.netMode != 1)
					{
						Main.ReportInvasionProgress((int)NPC.waveKills, num, 1, NPC.waveNumber);
					}
					if (Main.netMode == 2)
					{
						NetMessage.SendData(78, -1, -1, "", Main.invasionProgress, (float)Main.invasionProgressMax, 1f, (float)NPC.waveNumber, 0, 0, 0);
					}
				}
			}
		}

		private void CheckProgressPumpkinMoon()
		{
			if (Main.pumpkinMoon)
			{
				string text = "";
				int[] array = new int[]
				{
					0,
					25,
					40,
					50,
					80,
					100,
					160,
					180,
					200,
					250,
					300,
					375,
					450,
					525,
					675,
					0
				};
				int num = array[NPC.waveNumber];
				switch (NPC.waveNumber)
				{
				case 1:
					text = Lang.GetInvasionWaveText(2, new short[]
					{
						305,
						326
					});
					break;
				case 2:
					text = Lang.GetInvasionWaveText(3, new short[]
					{
						305,
						326,
						329
					});
					break;
				case 3:
					text = Lang.GetInvasionWaveText(4, new short[]
					{
						305,
						326,
						329,
						325
					});
					break;
				case 4:
					text = Lang.GetInvasionWaveText(5, new short[]
					{
						305,
						326,
						329,
						330,
						325
					});
					break;
				case 5:
					text = Lang.GetInvasionWaveText(6, new short[]
					{
						326,
						329,
						330,
						325
					});
					break;
				case 6:
					text = Lang.GetInvasionWaveText(7, new short[]
					{
						305,
						329,
						330,
						327
					});
					break;
				case 7:
					text = Lang.GetInvasionWaveText(8, new short[]
					{
						326,
						329,
						330,
						327
					});
					break;
				case 8:
					text = Lang.GetInvasionWaveText(9, new short[]
					{
						305,
						315,
						325,
						327
					});
					break;
				case 9:
					text = Lang.GetInvasionWaveText(10, new short[]
					{
						326,
						329,
						330,
						315,
						325,
						327
					});
					break;
				case 10:
					text = Lang.GetInvasionWaveText(11, new short[]
					{
						305,
						326,
						329,
						330,
						315,
						325,
						327
					});
					break;
				case 11:
					text = Lang.GetInvasionWaveText(12, new short[]
					{
						326,
						329,
						330,
						315,
						325,
						327
					});
					break;
				case 12:
					text = Lang.GetInvasionWaveText(13, new short[]
					{
						329,
						330,
						315,
						325,
						327
					});
					break;
				case 13:
					text = Lang.GetInvasionWaveText(14, new short[]
					{
						315,
						325,
						327
					});
					break;
				case 14:
					text = Lang.GetInvasionWaveText(-1, new short[]
					{
						325,
						327
					});
					break;
				}
				float num2 = 0f;
				switch (this.type)
				{
				case 305:
				case 306:
				case 307:
				case 308:
				case 309:
				case 310:
				case 311:
				case 312:
				case 313:
				case 314:
					num2 = 1f;
					break;
				case 315:
					num2 = 25f;
					break;
				case 325:
					num2 = 75f;
					break;
				case 326:
					num2 = 2f;
					break;
				case 327:
					num2 = 150f;
					break;
				case 329:
					num2 = 4f;
					break;
				case 330:
					num2 = 8f;
					break;
				}
				if (Main.expertMode)
				{
					num2 *= 2f;
				}
				float num3 = NPC.waveKills;
				NPC.waveKills += num2;
				if (NPC.waveKills >= (float)num && num != 0)
				{
					NPC.waveKills = 0f;
					NPC.waveNumber++;
					num = array[NPC.waveNumber];
					if (text != "")
					{
						if (Main.netMode == 0)
						{
							Main.NewText(text, 175, 75, 255, false);
						}
						else if (Main.netMode == 2)
						{
							NetMessage.SendData(25, -1, -1, text, 255, 175f, 75f, 255f, 0, 0, 0);
						}
						if (NPC.waveNumber == 15)
						{
							AchievementsHelper.NotifyProgressionEvent(15);
						}
					}
				}
				if (NPC.waveKills != num3 && num2 != 0f)
				{
					if (Main.netMode != 1)
					{
						Main.ReportInvasionProgress((int)NPC.waveKills, num, 2, NPC.waveNumber);
					}
					if (Main.netMode == 2)
					{
						NetMessage.SendData(78, -1, -1, "", Main.invasionProgress, (float)Main.invasionProgressMax, 2f, (float)NPC.waveNumber, 0, 0, 0);
					}
				}
			}
		}

		public static void ResetKillCount()
		{
			for (int i = 0; i < 580; i++)
			{
				NPC.killCount[i] = 0;
			}
		}

		public bool AnyInteractions()
		{
			if (Main.netMode == 0)
			{
				if (this.playerInteraction[Main.myPlayer])
				{
					return true;
				}
			}
			else
			{
				for (int i = 0; i < 255; i++)
				{
					if (this.playerInteraction[i])
					{
						return true;
					}
				}
			}
			return false;
		}

		public void NPCLoot()
		{
			if (Main.netMode == 1 || this.type >= 580)
			{
				return;
			}
			bool flag = NPC.downedMechBoss1 && NPC.downedMechBoss2 && NPC.downedMechBoss3;
			int num = this.type;
			switch (num)
			{
			case 13:
			case 14:
			case 15:
				if (this.boss)
				{
					AchievementsHelper.NotifyNPCKilled(this);
				}
				break;
			default:
				switch (num)
				{
				case 125:
				case 126:
				{
					int num2 = (this.type == 126) ? 125 : 126;
					if (!NPC.AnyNPCs(num2))
					{
						AchievementsHelper.NotifyNPCKilled(this);
						AchievementsHelper.CheckMechaMayhem(this.type);
						goto IL_C1;
					}
					goto IL_C1;
				}
				case 127:
					break;
				default:
					if (num != 134)
					{
						AchievementsHelper.NotifyNPCKilled(this);
						goto IL_C1;
					}
					break;
				}
				AchievementsHelper.CheckMechaMayhem(this.type);
				AchievementsHelper.NotifyNPCKilled(this);
				break;
			}
			IL_C1:
			int num3 = Item.NPCtoBanner(this.BannerID());
			if (num3 > 0 && !NPCID.Sets.ExcludedFromDeathTally[this.type])
			{
				bool flag2;
				if (this.realLife >= 0)
				{
					flag2 = Main.npc[this.realLife].AnyInteractions();
				}
				else
				{
					flag2 = this.AnyInteractions();
				}
				if (flag2)
				{
					NPC.killCount[num3]++;
					if (Main.netMode == 2)
					{
						NetMessage.SendData(83, -1, -1, "", num3, 0f, 0f, 0f, 0, 0, 0);
					}
					int num4 = ItemID.Sets.KillsToBanner[Item.BannerToItem(num3)];
					if (NPC.killCount[num3] % num4 == 0 && num3 > 0)
					{
						int l = Item.BannerToNPC(num3);
						NPC nPC = new NPC();
						nPC.netDefaults(l);
						int num5 = this.lastInteraction;
						if (!Main.player[num5].active || Main.player[num5].dead)
						{
							num5 = this.FindClosestPlayer();
						}
						string textValue = Language.GetTextValue("Game.EnemiesDefeatedAnnouncement", NPC.killCount[num3], Lang.npcName(l, false));
						if (num5 >= 0 && num5 < 255)
						{
							textValue = Language.GetTextValue("Game.EnemiesDefeatedByAnnouncement", Main.player[num5].name, NPC.killCount[num3], Lang.npcName(l, false));
						}
						if (Main.netMode == 0)
						{
							Main.NewText(textValue, 250, 250, 0, false);
						}
						else if (Main.netMode == 2)
						{
							NetMessage.SendData(25, -1, -1, textValue, 255, 250f, 250f, 0f, 0, 0, 0);
						}
						int num6 = Item.BannerToItem(num3);
						Vector2 position = this.position;
						if (num5 >= 0 && num5 < 255)
						{
							position = Main.player[num5].position;
						}
						Item.NewItem((int)position.X, (int)position.Y, this.width, this.height, num6, 1, false, 0, false, false);
					}
				}
			}
			if (this.type == 23 && Main.hardMode)
			{
				return;
			}
			if (this.SpawnedFromStatue && NPCID.Sets.NoEarlymodeLootWhenSpawnedFromStatue[this.type] && !Main.hardMode)
			{
				return;
			}
			if (this.SpawnedFromStatue && NPCID.Sets.StatueSpawnedDropRarity[this.type] != -1f && (Main.rand.NextFloat() >= NPCID.Sets.StatueSpawnedDropRarity[this.type] || !this.AnyInteractions()))
			{
				return;
			}
			if ((this.type == 170 || this.type == 180 || this.type == 171) && Main.rand.Next(3) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3532, 1, false, 0, false, false);
			}
			num = this.type;
			if (num <= 122)
			{
				if (num <= 80)
				{
					if (num != 75 && num != 80)
					{
						goto IL_46F;
					}
				}
				else
				{
					switch (num)
					{
					case 84:
					case 86:
						break;
					case 85:
						goto IL_46F;
					default:
						switch (num)
						{
						case 120:
						case 122:
							break;
						case 121:
							goto IL_46F;
						default:
							goto IL_46F;
						}
						break;
					}
				}
			}
			else if (num <= 171)
			{
				switch (num)
				{
				case 137:
				case 138:
					break;
				default:
					if (num != 171)
					{
						goto IL_46F;
					}
					break;
				}
			}
			else if (num != 244 && num != 475)
			{
				goto IL_46F;
			}
			int maxValue = Main.expertMode ? 150 : 200;
			if (Main.rand.Next(maxValue) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3260, 1, false, 0, false, false);
			}
			IL_46F:
			if (Main.slimeRain && Main.slimeRainNPC[this.type] && !NPC.AnyNPCs(50))
			{
				int num7 = 150;
				if (NPC.downedSlimeKing)
				{
					num7 /= 2;
				}
				Main.slimeRainKillCount++;
				if (Main.slimeRainKillCount >= num7)
				{
					int plr = this.FindClosestPlayer();
					NPC.SpawnOnPlayer(plr, 50);
					Main.slimeRainKillCount = -num7 / 2;
				}
			}
			if (!Main.player[(int)Player.FindClosest(this.position, this.width, this.height)].ZoneDungeon)
			{
				bool flag3 = false;
				if (Main.expertMode && Main.rand.Next(5) == 0)
				{
					flag3 = true;
				}
				else if (Main.rand.Next(5) == 0)
				{
					flag3 = true;
				}
				if (this.boss)
				{
					flag3 = false;
				}
				switch (this.type)
				{
				case 13:
				case 14:
				case 15:
					flag3 = false;
					break;
				}
				if (Main.hardMode && this.lifeMax > 1 && this.damage > 0 && !this.friendly && (double)this.position.Y > Main.rockLayer * 16.0 && flag3 && this.type != 121 && this.value > 0f)
				{
					if (Main.player[(int)Player.FindClosest(this.position, this.width, this.height)].ZoneCorrupt || Main.player[(int)Player.FindClosest(this.position, this.width, this.height)].ZoneCrimson)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 521, 1, false, 0, false, false);
					}
					if (Main.player[(int)Player.FindClosest(this.position, this.width, this.height)].ZoneHoly)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 520, 1, false, 0, false, false);
					}
				}
			}
			if (this.type == 1 && this.ai[1] > 0f)
			{
				int num8 = (int)this.ai[1];
				if (num8 > 0 && num8 < 3884)
				{
					int num9 = 1;
					if (num8 == 8)
					{
						num9 = Main.rand.Next(5, 11);
					}
					else if (num8 == 166)
					{
						num9 = Main.rand.Next(2, 7);
					}
					else if (num8 == 965)
					{
						num9 = Main.rand.Next(20, 46);
					}
					else if ((num8 >= 11 && num8 <= 14) || (num8 >= 699 && num8 <= 702))
					{
						num9 = Main.rand.Next(3, 9);
						if (Main.rand.Next(2) == 0)
						{
							num9 += 5;
						}
					}
					else if (num8 == 71)
					{
						num9 = Main.rand.Next(50, 100);
					}
					else if (num8 == 72)
					{
						num9 = Main.rand.Next(20, 100);
					}
					else if (num8 == 73)
					{
						num9 = Main.rand.Next(1, 3);
					}
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num8, num9, false, 0, false, false);
				}
			}
			if (this.type == 22 && this.displayName == "Andrew")
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 867, 1, false, 0, false, false);
			}
			if (this.type == 353 && Main.rand.Next(8) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3352, 1, false, 0, false, false);
			}
			if (this.type == 441 && Main.rand.Next(8) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3351, 1, false, 0, false, false);
			}
			if (this.type == 227 && Main.rand.Next(10) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3350, 1, false, 0, false, false);
			}
			if (this.type == 550 && Main.rand.Next(6) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3821, 1, false, 0, false, false);
			}
			if (this.type == 208 && Main.rand.Next(4) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3548, Main.rand.Next(30, 61), false, 0, false, false);
			}
			if (this.type == 207 && Main.rand.Next(8) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3349, 1, false, 0, false, false);
			}
			if (Main.hardMode && this.value > 0f)
			{
				if (!NPC.downedMechBoss1 && Main.rand.Next(2500) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 556, 1, false, 0, false, false);
				}
				else if (!NPC.downedMechBoss2 && Main.rand.Next(2500) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 544, 1, false, 0, false, false);
				}
				else if (!NPC.downedMechBoss3 && Main.rand.Next(2500) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 557, 1, false, 0, false, false);
				}
			}
			if (Main.halloween && this.value > 0f && this.value < 500f && this.damage < 40 && this.defense < 20)
			{
				if (Main.rand.Next(2000) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1825, 1, false, 0, false, false);
				}
				else if (Main.rand.Next(2000) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1827, 1, false, 0, false, false);
				}
			}
			if (Main.hardMode && this.value > 0f)
			{
				if (Main.rand.Next(2500) == 0 && Main.player[(int)Player.FindClosest(this.position, this.width, this.height)].ZoneJungle)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1533, 1, false, 0, false, false);
				}
				if (Main.rand.Next(2500) == 0 && Main.player[(int)Player.FindClosest(this.position, this.width, this.height)].ZoneCorrupt)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1534, 1, false, 0, false, false);
				}
				if (Main.rand.Next(2500) == 0 && Main.player[(int)Player.FindClosest(this.position, this.width, this.height)].ZoneCrimson)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1535, 1, false, 0, false, false);
				}
				if (Main.rand.Next(2500) == 0 && Main.player[(int)Player.FindClosest(this.position, this.width, this.height)].ZoneHoly)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1536, 1, false, 0, false, false);
				}
				if (Main.rand.Next(2500) == 0 && Main.player[(int)Player.FindClosest(this.position, this.width, this.height)].ZoneSnow)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1537, 1, false, 0, false, false);
				}
			}
			if (DD2Event.Ongoing)
			{
				switch (this.type)
				{
				case 552:
				case 553:
				case 554:
					DD2Event.AnnounceGoblinDeath(this);
					if (DD2Event.ShouldDropCrystals())
					{
						Item.NewItem(this.position, base.Size, 3822, 1, false, 0, false, false);
					}
					break;
				case 555:
				case 556:
				case 557:
				case 561:
				case 562:
				case 563:
				case 570:
				case 571:
				case 572:
				case 573:
					if (DD2Event.ShouldDropCrystals())
					{
						Item.NewItem(this.position, base.Size, 3822, 1, false, 0, false, false);
					}
					break;
				case 558:
				case 559:
				case 560:
				case 568:
				case 569:
					if (DD2Event.ShouldDropCrystals())
					{
						Item.NewItem(this.position, base.Size, 3822, 1, false, 0, false, false);
					}
					break;
				case 564:
					if (Main.rand.Next(7) == 0)
					{
						Item.NewItem(this.position, base.Size, 3864, 1, false, 0, false, false);
					}
					if (Main.rand.Next(5) == 0)
					{
						if (Main.rand.Next(2) == 0)
						{
							Item.NewItem(this.position, base.Size, 3815, 4, false, 0, false, false);
						}
						else
						{
							Item.NewItem(this.position, base.Size, 3814, 1, false, 0, false, false);
						}
					}
					if (Main.rand.Next(Main.expertMode ? 2 : 3) == 0)
					{
						Item.NewItem(this.position, base.Size, (int)Utils.SelectRandom<short>(Main.rand, new short[]
						{
							3857,
							3855
						}), 1, false, 0, false, false);
					}
					if (DD2Event.ShouldDropCrystals())
					{
						Item.NewItem(this.position, base.Size, 3822, 1, false, 0, false, false);
					}
					break;
				case 565:
					if (Main.rand.Next(14) == 0)
					{
						Item.NewItem(this.position, base.Size, 3864, 1, false, 0, false, false);
					}
					if (Main.rand.Next(10) == 0)
					{
						if (Main.rand.Next(2) == 0)
						{
							Item.NewItem(this.position, base.Size, 3815, 4, false, 0, false, false);
						}
						else
						{
							Item.NewItem(this.position, base.Size, 3814, 1, false, 0, false, false);
						}
					}
					if (Main.rand.Next(6) == 0)
					{
						Item.NewItem(this.position, base.Size, (int)Utils.SelectRandom<short>(Main.rand, new short[]
						{
							3857,
							3855
						}), 1, false, 0, false, false);
					}
					if (DD2Event.ShouldDropCrystals())
					{
						Item.NewItem(this.position, base.Size, 3822, 1, false, 0, false, false);
					}
					break;
				case 574:
				case 575:
				case 578:
					if (DD2Event.ShouldDropCrystals())
					{
						Item.NewItem(this.position, base.Size, 3822, 1, false, 0, false, false);
					}
					break;
				case 576:
					if (Main.rand.Next(7) == 0)
					{
						Item.NewItem(this.position, base.Size, 3865, 1, false, 0, false, false);
					}
					if (Main.rand.Next(Main.expertMode ? 2 : 3) == 0)
					{
						Item.NewItem(this.position, base.Size, (int)Utils.SelectRandom<short>(Main.rand, new short[]
						{
							3809,
							3811,
							3810,
							3812
						}), 1, false, 0, false, false);
					}
					if (Main.rand.Next(Main.expertMode ? 2 : 3) == 0)
					{
						Item.NewItem(this.position, base.Size, (int)Utils.SelectRandom<short>(Main.rand, new short[]
						{
							3852,
							3854,
							3823,
							3835,
							3836
						}), 1, false, 0, false, false);
					}
					if (Main.rand.Next(Main.expertMode ? 4 : 5) == 0)
					{
						Item.NewItem(this.position, base.Size, 3856, 1, false, 0, false, false);
					}
					if (DD2Event.ShouldDropCrystals())
					{
						Item.NewItem(this.position, base.Size, 3822, 1, false, 0, false, false);
					}
					break;
				case 577:
					if (Main.rand.Next(14) == 0)
					{
						Item.NewItem(this.position, base.Size, 3865, 1, false, 0, false, false);
					}
					if (Main.rand.Next(6) == 0)
					{
						Item.NewItem(this.position, base.Size, (int)Utils.SelectRandom<short>(Main.rand, new short[]
						{
							3809,
							3811,
							3810,
							3812
						}), 1, false, 0, false, false);
					}
					if (Main.rand.Next(6) == 0)
					{
						Item.NewItem(this.position, base.Size, (int)Utils.SelectRandom<short>(Main.rand, new short[]
						{
							3852,
							3854,
							3823,
							3835,
							3836
						}), 1, false, 0, false, false);
					}
					if (Main.rand.Next(10) == 0)
					{
						Item.NewItem(this.position, base.Size, 3856, 1, false, 0, false, false);
					}
					if (DD2Event.ShouldDropCrystals())
					{
						Item.NewItem(this.position, base.Size, 3822, 1, false, 0, false, false);
					}
					break;
				}
			}
			if (this.type == 68)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1169, 1, false, 0, false, false);
			}
			if (Main.snowMoon)
			{
				int num10 = NPC.waveNumber;
				if (Main.expertMode)
				{
					num10 += 7;
				}
				int num11 = (int)((double)(30 - num10) / 2.5);
				if (Main.expertMode)
				{
					num11 -= 2;
				}
				if (num11 < 1)
				{
					num11 = 1;
				}
				if (this.type == 344)
				{
					NPC.downedChristmasTree = true;
				}
				if (this.type == 345)
				{
					NPC.downedChristmasIceQueen = true;
				}
				if (this.type == 346)
				{
					NPC.downedChristmasSantank = true;
				}
				if ((this.type == 344 || this.type == 345 || this.type == 346) && Main.rand.Next(num11) == 0 && num10 >= 15)
				{
					int num12 = 4;
					if (num10 == 16)
					{
						num12 = 4;
					}
					if (num10 == 17)
					{
						num12 = 3;
					}
					if (num10 == 18)
					{
						num12 = 3;
					}
					if (num10 == 19)
					{
						num12 = 2;
					}
					if (num10 >= 20)
					{
						num12 = 2;
					}
					if (Main.expertMode && Main.rand.Next(3) == 0)
					{
						num12--;
					}
					if (Main.rand.Next(num12) == 0)
					{
						if (this.type == 344)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1962, 1, false, 0, false, false);
						}
						if (this.type == 345)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1960, 1, false, 0, false, false);
						}
						if (this.type == 346)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1961, 1, false, 0, false, false);
						}
					}
				}
				if (Main.rand.Next(num11) == 0)
				{
					if (this.type == 344)
					{
						int num13 = Main.rand.Next(3);
						if (Main.rand.Next(15) == 0)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1871, 1, false, -1, false, false);
						}
						else
						{
							if (num13 == 0)
							{
								Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1916, 1, false, 0, false, false);
							}
							if (num13 == 1)
							{
								Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1928, 1, false, -1, false, false);
							}
							if (num13 == 2)
							{
								Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1930, 1, false, -1, false, false);
							}
						}
					}
					if (this.type == 346)
					{
						int num14 = Main.rand.Next(2);
						if (num14 == 0)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1910, 1, false, -1, false, false);
						}
						if (num14 == 1)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1929, 1, false, -1, false, false);
						}
					}
					if (this.type == 345)
					{
						if (NPC.waveNumber >= 15 && Main.rand.Next(30) == 0)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1914, 1, false, 0, false, false);
						}
						else if (Main.rand.Next(15) == 0)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1959, 1, false, 0, false, false);
						}
						else
						{
							int num15 = Main.rand.Next(3);
							if (num15 == 0)
							{
								Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1931, 1, false, -1, false, false);
							}
							if (num15 == 1)
							{
								Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1946, 1, false, -1, false, false);
							}
							if (num15 == 2)
							{
								Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1947, 1, false, -1, false, false);
							}
						}
					}
				}
			}
			if (this.type == 341)
			{
				int num16 = Main.rand.Next(5, 11);
				for (int i = 0; i < num16; i++)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 58, 1, false, 0, false, false);
				}
				if (Main.xMas)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1869, 1, false, 0, false, false);
				}
			}
			if (this.type >= 338 && this.type <= 340 && Main.rand.Next(5) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 58, 1, false, 0, false, false);
			}
			if (this.type >= 338 && this.type <= 340 && Main.rand.Next(200) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1943 + Main.rand.Next(3), 1, false, 0, false, false);
			}
			if (this.type == 342 && Main.rand.Next(3) != 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 58, 1, false, 0, false, false);
			}
			if (Main.pumpkinMoon)
			{
				if (this.type == 325)
				{
					NPC.downedHalloweenTree = true;
				}
				if (this.type == 327)
				{
					NPC.downedHalloweenKing = true;
				}
				int num17 = NPC.waveNumber;
				if (Main.expertMode)
				{
					num17 += 6;
				}
				int num18 = (int)((double)(17 - num17) / 1.25);
				if (Main.expertMode)
				{
					num18--;
				}
				if (num18 < 1)
				{
					num18 = 1;
				}
				if (num17 >= 15)
				{
					if (this.type == 325)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1855, 1, false, 0, false, false);
					}
					if (this.type == 327)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1856, 1, false, 0, false, false);
					}
				}
				if (Main.rand.Next(num18) == 0)
				{
					if (this.type == 315 && Main.rand.Next(20) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1857, 1, false, 0, false, false);
					}
					if (this.type >= 305 && this.type <= 314 && Main.rand.Next(10) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Main.rand.Next(1788, 1791), 1, false, 0, false, false);
					}
					if (this.type == 325)
					{
						int num19 = Main.rand.Next(5);
						if (num19 == 0)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1829, 1, false, 0, false, false);
						}
						if (num19 == 1)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1831, 1, false, 0, false, false);
						}
						if (num19 == 2)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1835, 1, false, -1, false, false);
						}
						if (num19 == 2)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1836, Main.rand.Next(30, 61), false, 0, false, false);
						}
						if (num19 == 3)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1837, 1, false, 0, false, false);
						}
						if (num19 == 4)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1845, 1, false, -1, false, false);
						}
					}
					if (this.type == 327)
					{
						int num20 = Main.rand.Next(7);
						if (num20 == 0)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1782, 1, false, -1, false, false);
						}
						if (num20 == 0)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1783, Main.rand.Next(50, 101), false, 0, false, false);
						}
						if (num20 == 1)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1784, 1, false, -1, false, false);
						}
						if (num20 == 1)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1785, Main.rand.Next(25, 51), false, 0, false, false);
						}
						if (num20 == 2)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1811, 1, false, 0, false, false);
						}
						if (num20 == 3)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1826, 1, false, -1, false, false);
						}
						if (num20 == 4)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1801, 1, false, -1, false, false);
						}
						if (num20 == 5)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1802, 1, false, -1, false, false);
						}
						if (num20 == 6)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1798, 1, false, 0, false, false);
						}
					}
				}
			}
			if (this.type == 325)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1729, Main.rand.Next(30, 51), false, 0, false, false);
			}
			if (this.type == 326)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1729, Main.rand.Next(1, 5), false, 0, false, false);
			}
			if (this.type >= 305 && this.type <= 314 && Main.rand.Next(4) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 58, 1, false, 0, false, false);
			}
			if (this.type == 326 && Main.rand.Next(6) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 58, 1, false, 0, false, false);
			}
			if (this.type == 329 && Main.rand.Next(4) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 58, 1, false, 0, false, false);
			}
			if (this.type == 330 && Main.rand.Next(4) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 58, 1, false, 0, false, false);
			}
			if (this.type == 315)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 58, 1, false, 0, false, false);
			}
			if (Main.halloween && this.lifeMax > 1 && this.damage > 0 && !this.friendly && this.type != 121 && this.type != 23 && this.value > 0f && Main.rand.Next(80) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1774, 1, false, 0, false, false);
			}
			if (Main.xMas && this.lifeMax > 1 && this.damage > 0 && !this.friendly && this.type != 121 && this.value > 0f && Main.rand.Next(13) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1869, 1, false, 0, false, false);
			}
			if (this.lifeMax > 5 && this.value > 0f && !this.friendly && Main.hardMode && this.position.Y / 16f > (float)(Main.maxTilesY - 200) && Main.rand.Next(50) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2701, Main.rand.Next(20, 51), false, 0, false, false);
			}
			if (this.type == 325 || this.type == 327 || this.type == 344 || this.type == 345 || this.type == 346)
			{
				int num21 = Main.rand.Next(6) + 6;
				for (int j = 0; j < num21; j++)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 58, 1, false, 0, false, false);
				}
			}
			if (this.type == 156 && Main.rand.Next(75) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1518, 1, false, 0, false, false);
			}
			if (this.type == 243 && Main.rand.Next(3) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1519, 1, false, 0, false, false);
			}
			if (this.type >= 269 && this.type <= 280 && Main.rand.Next(450) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1517, 1, false, 0, false, false);
			}
			if ((this.type == 158 || this.type == 159) && Main.rand.Next(40) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1520, 1, false, 0, false, false);
			}
			if (this.type == 176 && Main.rand.Next(150) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1521, 1, false, 0, false, false);
			}
			if (this.type == 48 && Main.rand.Next(200) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1516, 1, false, 0, false, false);
			}
			if (this.type == 205 && Main.rand.Next(2) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1611, 1, false, 0, false, false);
			}
			if (this.type == 483 || this.type == 482)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3086, Main.rand.Next(5, 11), false, -1, false, false);
			}
			if (!Main.hardMode && Main.rand.Next(100) == 0 && this.HasPlayerTarget && this.lifeMax > 5 && !this.friendly && Main.rand.Next(4) == 0 && this.position.Y / 16f > (float)(Main.maxTilesY - 350) && NPC.downedBoss3)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3282, 1, false, -1, false, false);
			}
			if (Main.hardMode && this.HasPlayerTarget && Main.player[this.target].ZoneSnow && Main.rand.Next(300) == 0 && this.HasPlayerTarget && this.lifeMax > 5 && !this.friendly && this.value > 0f)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3289, 1, false, -1, false, false);
			}
			else if (Main.hardMode && Main.rand.Next(200) == 0 && this.HasPlayerTarget && this.lifeMax > 5 && !this.friendly && this.value > 0f)
			{
				if (Main.player[this.target].ZoneJungle && NPC.downedMechBossAny)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3286, 1, false, -1, false, false);
				}
				else if (Main.player[this.target].ZoneDungeon && NPC.downedPlantBoss && Main.rand.Next(2) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3291, 1, false, -1, false, false);
				}
				else if ((double)(this.position.Y / 16f) > (Main.rockLayer + (double)Main.maxTilesY) / 2.0 && !Main.player[this.target].ZoneDungeon && Main.rand.Next(2) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3290, 1, false, -1, false, false);
				}
			}
			int num22 = 1;
			if (Main.expertMode && Main.rand.Next(2) == 0)
			{
				num22 = 2;
			}
			for (int k = 0; k < num22; k++)
			{
				if (this.type == 461 && Main.rand.Next(50) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 497, 1, false, -1, false, false);
				}
				if ((this.type == 159 || this.type == 158) && Main.rand.Next(35) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 900, 1, false, -1, false, false);
				}
				if (this.type == 251 && Main.rand.Next(15) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1311, 1, false, -1, false, false);
				}
				if (NPC.downedMechBoss1 && NPC.downedMechBoss2 && NPC.downedMechBoss3)
				{
					if (this.type == 477)
					{
						if (Main.rand.Next(20) == 0 && NPC.downedPlantBoss)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2770, 1, false, -1, false, false);
							k++;
						}
						if (Main.rand.Next(4) == 0)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1570, 1, false, -1, false, false);
							k++;
						}
						else if (Main.rand.Next(3) == 0 && NPC.downedPlantBoss)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3292, 1, false, -1, false, false);
							k++;
						}
					}
					if (this.type == 253 && Main.rand.Next(40) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1327, 1, false, -1, false, false);
					}
				}
				if (NPC.downedPlantBoss)
				{
					if (this.type == 460 && Main.rand.Next(40) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3098, 1, false, -1, false, false);
					}
					if (this.type == 468 && Main.rand.Next(40) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3105, 1, false, -1, false, false);
					}
					if (this.type == 466 && Main.rand.Next(40) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3106, 1, false, -1, false, false);
					}
					if (this.type == 467 && Main.rand.Next(40) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3249, 1, false, -1, false, false);
					}
					if (this.type == 463 && Main.rand.Next(25) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3107, 1, false, -1, false, false);
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3108, Main.rand.Next(100, 201), false, -1, false, false);
					}
				}
			}
			if (Main.bloodMoon && Main.hardMode && Main.rand.Next(1000) == 0 && this.value > 0f)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1314, 1, false, -1, false, false);
			}
			if (this.type == 77 && Main.rand.Next(150) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 723, 1, false, -1, false, false);
			}
			if (Main.rand.Next(100) == 0 || (Main.expertMode && Main.rand.Next(100) == 0))
			{
				int num23 = -1;
				int num24 = -1;
				num = this.type;
				if (num <= 141)
				{
					if (num <= 94)
					{
						if (num == 34)
						{
							goto IL_3084;
						}
						if (num == 42)
						{
							goto IL_3054;
						}
						switch (num)
						{
						case 75:
							if (Main.rand.Next(2) == 0)
							{
								num23 = 889;
							}
							else
							{
								num23 = 890;
							}
							if (Main.rand.Next(100) != 0)
							{
								goto IL_3132;
							}
							if (num23 == 889)
							{
								num24 = 890;
								goto IL_3132;
							}
							num24 = 889;
							goto IL_3132;
						case 76:
						case 85:
						case 86:
						case 87:
						case 88:
						case 89:
						case 90:
						case 91:
						case 92:
							goto IL_3132;
						case 77:
							goto IL_3048;
						case 78:
						case 82:
							num23 = 889;
							goto IL_3132;
						case 79:
							if (Main.rand.Next(2) == 0)
							{
								num23 = 888;
							}
							else
							{
								num23 = 890;
							}
							if (Main.rand.Next(100) != 0)
							{
								goto IL_3132;
							}
							if (num23 == 888)
							{
								num24 = 890;
								goto IL_3132;
							}
							num24 = 888;
							goto IL_3132;
						case 80:
						case 93:
							break;
						case 81:
							num23 = 888;
							goto IL_3132;
						case 83:
						case 84:
							goto IL_3084;
						case 94:
							goto IL_3090;
						default:
							goto IL_3132;
						}
					}
					else
					{
						switch (num)
						{
						case 102:
						case 104:
							goto IL_303C;
						case 103:
							num23 = 890;
							goto IL_3132;
						default:
							if (num != 109)
							{
								if (num != 141)
								{
									goto IL_3132;
								}
								goto IL_3054;
							}
							break;
						}
					}
					num23 = 893;
					goto IL_3132;
				}
				if (num <= 182)
				{
					if (num == 176)
					{
						goto IL_3054;
					}
					if (num == 179)
					{
						goto IL_3084;
					}
					if (num != 182)
					{
						goto IL_3132;
					}
					goto IL_3090;
				}
				else
				{
					switch (num)
					{
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						goto IL_3054;
					default:
						switch (num)
						{
						case 269:
						case 270:
						case 271:
						case 272:
							break;
						case 273:
						case 274:
						case 275:
						case 276:
							goto IL_3048;
						default:
							if (num == 480)
							{
								num23 = 3781;
								goto IL_3132;
							}
							goto IL_3132;
						}
						break;
					}
				}
				IL_303C:
				num23 = 885;
				goto IL_3132;
				IL_3048:
				num23 = 886;
				goto IL_3132;
				IL_3054:
				num23 = 887;
				goto IL_3132;
				IL_3084:
				num23 = 891;
				goto IL_3132;
				IL_3090:
				num23 = 892;
				IL_3132:
				if (num23 != -1)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num23, 1, false, -1, false, false);
				}
				if (num24 != -1)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num24, 1, false, -1, false, false);
				}
			}
			int num25 = 1;
			if (Main.expertMode && Main.rand.Next(2) == 0)
			{
				num25 = 2;
			}
			for (int m = 0; m < num25; m++)
			{
				if (this.type == 290)
				{
					if (Main.rand.Next(15) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1513, 1, false, -1, false, false);
					}
					else if (Main.rand.Next(10) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 938, 1, false, -1, false, false);
					}
				}
				if (this.type == 287 && Main.rand.Next(6) == 0)
				{
					if (Main.rand.Next(2) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 963, 1, false, -1, false, false);
					}
					else
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 977, 1, false, -1, false, false);
					}
				}
				if (this.type == 291)
				{
					if (Main.rand.Next(12) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1300, 1, false, -1, false, false);
					}
					else if (Main.rand.Next(12) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1254, 1, false, -1, false, false);
					}
				}
				if (this.type == 292)
				{
					if (Main.rand.Next(12) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1514, 1, false, -1, false, false);
					}
					else if (Main.rand.Next(12) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 679, 1, false, -1, false, false);
					}
				}
				if (this.type == 293 && Main.rand.Next(18) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 759, 1, false, -1, false, false);
				}
				if ((this.type == 281 || this.type == 282) && Main.rand.Next(20) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1446, 1, false, -1, false, false);
				}
				if ((this.type == 283 || this.type == 284) && Main.rand.Next(20) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1444, 1, false, -1, false, false);
				}
				if ((this.type == 285 || this.type == 286) && Main.rand.Next(20) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1445, 1, false, -1, false, false);
				}
				if (this.type >= 269 && this.type <= 280)
				{
					if (Main.rand.Next(400) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1183, 1, false, -1, false, false);
					}
					else if (Main.rand.Next(300) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1266, 1, false, -1, false, false);
					}
					else if (Main.rand.Next(200) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 671, 1, false, -1, false, false);
					}
				}
			}
			if (this.lifeMax > 100 && this.type != 288 && this.value > 0f && this.HasPlayerTarget && Main.hardMode && NPC.downedPlantBoss && Main.player[this.target].ZoneDungeon)
			{
				int maxValue2 = 13;
				if (Main.expertMode)
				{
					maxValue2 = 9;
				}
				if (Main.rand.Next(maxValue2) == 0 && Main.wallDungeon[(int)Main.tile[(int)base.Center.X / 16, (int)base.Center.Y / 16].wall])
				{
					NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 288, 0, 0f, 0f, 0f, 0f, 255);
				}
			}
			if (this.type == 288)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1508, Main.rand.Next(1, 3), false, -1, false, false);
			}
			if (this.type == 156 && Main.rand.Next(30) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 683, 1, false, -1, false, false);
			}
			if ((this.type == 195 || this.type == 196) && (Main.expertMode || Main.rand.Next(2) == 0))
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3102, 1, false, -1, false, false);
			}
			if (this.type == 245)
			{
				if (Main.expertMode)
				{
					this.DropBossBags();
				}
				else
				{
					if (Main.rand.Next(7) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2110, 1, false, -1, false, false);
					}
					int num26 = Main.rand.Next(8);
					if (num26 == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1258, 1, false, -1, false, false);
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1261, Main.rand.Next(60, 100), false, 0, false, false);
					}
					else if (num26 == 1)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1122, 1, false, -1, false, false);
					}
					else if (num26 == 2)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 899, 1, false, -1, false, false);
					}
					else if (num26 == 3)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1248, 1, false, -1, false, false);
					}
					else if (num26 == 4)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1294, 1, false, -1, false, false);
					}
					else if (num26 == 5)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1295, 1, false, -1, false, false);
					}
					else if (num26 == 6)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1296, 1, false, -1, false, false);
					}
					else if (num26 == 7)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1297, 1, false, -1, false, false);
					}
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2218, Main.rand.Next(4, 9), false, -1, false, false);
				}
				NPC.downedGolemBoss = true;
			}
			if (this.type == 471 && (Main.expertMode || Main.rand.Next(2) == 0))
			{
				if (Main.rand.Next(3) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3052, 1, false, -1, false, false);
				}
				else if (Main.rand.Next(2) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3053, 1, false, -1, false, false);
				}
				else
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3054, 1, false, -1, false, false);
				}
			}
			if (this.type == 268)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1332, Main.rand.Next(2, 6), false, 0, false, false);
			}
			if (this.type == 370)
			{
				NPC.downedFishron = true;
				if (Main.expertMode)
				{
					this.DropBossBags();
				}
				else
				{
					if (Main.rand.Next(7) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2588, 1, false, -1, false, false);
					}
					if (Main.rand.Next(15) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2609, 1, false, -1, false, false);
					}
					int num27 = Main.rand.Next(5);
					if (num27 == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2611, 1, false, -1, false, false);
					}
					else if (num27 == 1)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2624, 1, false, -1, false, false);
					}
					else if (num27 == 2)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2622, 1, false, -1, false, false);
					}
					else if (num27 == 3)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2621, 1, false, -1, false, false);
					}
					else if (num27 == 4)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2623, 1, false, -1, false, false);
					}
				}
			}
			if (this.type == 109 && !NPC.downedClown)
			{
				NPC.downedClown = true;
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
				}
			}
			if (this.type == 153 && Main.rand.Next(17) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1328, 1, false, -1, false, false);
			}
			if (this.type == 120 && Main.rand.Next(500) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1326, 1, false, -1, false, false);
			}
			if (this.type == 49 && Main.rand.Next(250) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1325, 1, false, -1, false, false);
			}
			if (this.type == 185 && Main.rand.Next(150) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 951, 1, false, -1, false, false);
			}
			if (this.type == 44 && Main.rand.Next(50) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1320, 1, false, -1, false, false);
			}
			if (this.type == 44 && Main.rand.Next(20) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 88, 1, false, -1, false, false);
			}
			if (this.type == 110 && Main.rand.Next(80) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1321, 1, false, -1, false, false);
			}
			if (this.type == 60 && Main.rand.Next(150) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1322, 1, false, -1, false, false);
			}
			if (this.type == 151 && Main.rand.Next(50) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1322, 1, false, -1, false, false);
			}
			if (this.type == 24 && Main.rand.Next(50) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1323, 1, false, -1, false, false);
			}
			if (this.type == 109 && Main.rand.Next(30) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1324, Main.rand.Next(1, 5), false, -1, false, false);
			}
			if (this.type == 163 || this.type == 238)
			{
				if (Main.rand.Next(40) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1308, 1, false, -1, false, false);
				}
				if (Main.expertMode)
				{
					if (Main.rand.Next(3) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2607, Main.rand.Next(2, 4), false, 0, false, false);
					}
					else if (Main.rand.Next(2) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2607, Main.rand.Next(1, 4), false, 0, false, false);
					}
					else
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2607, 1, false, 0, false, false);
					}
				}
				else if (Main.rand.Next(4) != 0)
				{
					if (Main.rand.Next(3) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2607, Main.rand.Next(1, 4), false, 0, false, false);
					}
					else if (Main.rand.Next(2) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2607, Main.rand.Next(1, 3), false, 0, false, false);
					}
					else
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2607, 1, false, 0, false, false);
					}
				}
			}
			if (Main.hardMode && (this.type == 197 || this.type == 206 || this.type == 169 || this.type == 154) && Main.rand.Next(180) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1306, 1, false, -1, false, false);
			}
			if (this.type == 244)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 23, Main.rand.Next(1, 6), false, 0, false, false);
				if (Main.rand.Next(2) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 23, Main.rand.Next(1, 6), false, 0, false, false);
				}
				if (Main.rand.Next(2) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 23, Main.rand.Next(1, 6), false, 0, false, false);
				}
				if (Main.rand.Next(2) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 23, Main.rand.Next(1, 6), false, 0, false, false);
				}
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 662, Main.rand.Next(30, 60), false, 0, false, false);
			}
			if (this.type == 250 && Main.rand.Next(15) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1244, 1, false, -1, false, false);
			}
			if (this.type == 172)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 754, 1, false, -1, false, false);
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 755, 1, false, -1, false, false);
			}
			if (this.type == 110 && Main.rand.Next(200) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 682, 1, false, -1, false, false);
			}
			if (this.type == 154 && Main.rand.Next(100) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1253, 1, false, -1, false, false);
			}
			if ((this.type == 169 || this.type == 206) && Main.rand.Next(50) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 726, 1, false, -1, false, false);
			}
			if (this.type == 243)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2161, 1, false, -1, false, false);
			}
			if (this.type == 480 && Main.rand.Next(50) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3269, 1, false, -1, false, false);
			}
			if (this.type == 198 || this.type == 199 || this.type == 226)
			{
				if (Main.rand.Next(1000) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1172, 1, false, -1, false, false);
				}
				if (Main.rand.Next(50) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1293, 1, false, -1, false, false);
				}
				if (Main.rand.Next(7) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2766, Main.rand.Next(1, 3), false, -1, false, false);
				}
			}
			if (this.type == 78 || this.type == 79 || this.type == 80)
			{
				if (Main.rand.Next(75) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 870, 1, false, -1, false, false);
				}
				if (Main.rand.Next(75) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 871, 1, false, -1, false, false);
				}
				if (Main.rand.Next(75) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 872, 1, false, -1, false, false);
				}
			}
			if (this.type == 473)
			{
				int num28 = Main.rand.Next(5);
				if (num28 == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3008, 1, false, -1, false, false);
				}
				else if (num28 == 1)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3014, 1, false, -1, false, false);
				}
				else if (num28 == 2)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3012, 1, false, -1, false, false);
				}
				else if (num28 == 3)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3015, 1, false, -1, false, false);
				}
				else if (num28 == 4)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3023, 1, false, -1, false, false);
				}
			}
			else if (this.type == 474)
			{
				int num29 = Main.rand.Next(5);
				if (num29 == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3006, 1, false, -1, false, false);
				}
				else if (num29 == 1)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3007, 1, false, -1, false, false);
				}
				else if (num29 == 2)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3013, 1, false, -1, false, false);
				}
				else if (num29 == 3)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3016, 1, false, -1, false, false);
				}
				else if (num29 == 4)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3020, 1, false, -1, false, false);
				}
			}
			else if (this.type == 475)
			{
				int num30 = Main.rand.Next(4);
				if (num30 == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3029, 1, false, -1, false, false);
				}
				else if (num30 == 1)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3030, 1, false, -1, false, false);
				}
				else if (num30 == 2)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3051, 1, false, -1, false, false);
				}
				else if (num30 == 3)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3022, 1, false, -1, false, false);
				}
			}
			else
			{
				int arg_4DFB_0 = this.type;
			}
			if (this.type == 473 || this.type == 474 || this.type == 475 || this.type == 476)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 499, Main.rand.Next(5, 11), false, -1, false, false);
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 500, Main.rand.Next(5, 16), false, -1, false, false);
			}
			if (this.type == 85 && this.value > 0f)
			{
				if (this.ai[3] == 4f)
				{
					if (Main.rand.Next(20) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1312, 1, false, -1, false, false);
					}
					else
					{
						int num31 = Main.rand.Next(3);
						if (num31 == 0)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 676, 1, false, -1, false, false);
						}
						else if (num31 == 1)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 725, 1, false, -1, false, false);
						}
						else if (num31 == 2)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1264, 1, false, -1, false, false);
						}
					}
				}
				else
				{
					int num32 = Main.rand.Next(6);
					if (num32 == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 437, 1, false, -1, false, false);
					}
					else if (num32 == 1)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 517, 1, false, -1, false, false);
					}
					else if (num32 == 2)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 535, 1, false, -1, false, false);
					}
					else if (num32 == 3)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 536, 1, false, -1, false, false);
					}
					else if (num32 == 4)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 532, 1, false, -1, false, false);
					}
					else
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 554, 1, false, -1, false, false);
					}
				}
			}
			if (this.type == 87)
			{
				if (Main.expertMode)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 575, Main.rand.Next(5, 11) * 2, false, 0, false, false);
				}
				else
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 575, Main.rand.Next(5, 11), false, 0, false, false);
				}
			}
			if (this.type >= 212 && this.type <= 215)
			{
				if (Main.rand.Next(8000) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 905, 1, false, -1, false, false);
				}
				if (Main.rand.Next(4000) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 855, 1, false, -1, false, false);
				}
				if (Main.rand.Next(2000) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 854, 1, false, -1, false, false);
				}
				if (Main.rand.Next(2000) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2584, 1, false, -1, false, false);
				}
				if (Main.rand.Next(1000) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3033, 1, false, -1, false, false);
				}
				if (Main.rand.Next(200) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 672, 1, false, -1, false, false);
				}
				if (Main.rand.Next(500) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1277, 1, false, 0, false, false);
				}
				if (Main.rand.Next(500) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1278, 1, false, 0, false, false);
				}
				if (Main.rand.Next(500) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1279, 1, false, 0, false, false);
				}
				if (Main.rand.Next(500) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1280, 1, false, 0, false, false);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1704, 1, false, 0, false, false);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1705, 1, false, 0, false, false);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1710, 1, false, 0, false, false);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1716, 1, false, 0, false, false);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1720, 1, false, 0, false, false);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2379, 1, false, 0, false, false);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2389, 1, false, 0, false, false);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2405, 1, false, 0, false, false);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2843, 1, false, 0, false, false);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2663, 1, false, 0, false, false);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2238, 1, false, 0, false, false);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2133, 1, false, 0, false, false);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2137, 1, false, 0, false, false);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2143, 1, false, 0, false, false);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2147, 1, false, 0, false, false);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2151, 1, false, 0, false, false);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2155, 1, false, 0, false, false);
				}
				if (Main.rand.Next(500) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3263, 1, false, 0, false, false);
				}
				if (Main.rand.Next(500) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3264, 1, false, 0, false, false);
				}
				if (Main.rand.Next(500) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3265, 1, false, 0, false, false);
				}
			}
			else if (this.type == 216)
			{
				if (Main.rand.Next(2000) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 905, 1, false, -1, false, false);
				}
				if (Main.rand.Next(1000) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 855, 1, false, -1, false, false);
				}
				if (Main.rand.Next(500) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 854, 1, false, -1, false, false);
				}
				if (Main.rand.Next(500) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2584, 1, false, -1, false, false);
				}
				if (Main.rand.Next(250) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3033, 1, false, -1, false, false);
				}
				if (Main.rand.Next(50) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 672, 1, false, -1, false, false);
				}
			}
			else if (this.type == 491)
			{
				if (Main.rand.Next(400) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 905, 1, false, -1, false, false);
				}
				else if (Main.rand.Next(200) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 855, 1, false, -1, false, false);
				}
				else if (Main.rand.Next(100) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 854, 1, false, -1, false, false);
				}
				else if (Main.rand.Next(100) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2584, 1, false, -1, false, false);
				}
				else if (Main.rand.Next(50) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3033, 1, false, -1, false, false);
				}
				else if (Main.rand.Next(10) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 672, 1, false, -1, false, false);
				}
			}
			if ((this.type == 161 || this.type == 431) && Main.rand.Next(50) == 0)
			{
				int num33 = Main.rand.Next(3);
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 803 + num33, 1, false, 0, false, false);
			}
			if (this.type == 217)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1115, 1, false, -1, false, false);
			}
			if (this.type == 218)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1116, 1, false, -1, false, false);
			}
			if (this.type == 219)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1117, 1, false, -1, false, false);
			}
			if (this.type == 220)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1118, 1, false, -1, false, false);
			}
			if (this.type == 221)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1119, 1, false, -1, false, false);
			}
			if (this.type == 167 && Main.rand.Next(50) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 879, 1, false, -1, false, false);
			}
			if (this.type == 143 || this.type == 144 || this.type == 145)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 593, Main.rand.Next(5, 11), false, 0, false, false);
			}
			if (this.type == 79)
			{
				if (Main.rand.Next(10) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 527, 1, false, 0, false, false);
				}
			}
			else if (this.type == 80 && Main.rand.Next(10) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 528, 1, false, 0, false, false);
			}
			if (this.type == 524 && Main.rand.Next(10) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3794, Main.rand.Next(1, 4), false, 0, false, false);
			}
			if (this.type == 525)
			{
				if (Main.rand.Next(10) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3794, 1, false, 0, false, false);
				}
				if (Main.rand.Next(3) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 522, Main.rand.Next(1, 4), false, 0, false, false);
				}
				if (Main.rand.Next(15) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 527, 1, false, 0, false, false);
				}
			}
			if (this.type == 526)
			{
				if (Main.rand.Next(10) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3794, 1, false, 0, false, false);
				}
				if (Main.rand.Next(3) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1332, Main.rand.Next(1, 4), false, 0, false, false);
				}
				if (Main.rand.Next(15) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 527, 1, false, 0, false, false);
				}
			}
			if (this.type == 527)
			{
				if (Main.rand.Next(10) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3794, 1, false, 0, false, false);
				}
				if (Main.rand.Next(15) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 528, 1, false, 0, false, false);
				}
			}
			if (this.type == 532)
			{
				if (Main.rand.Next(3) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3380, 1, false, 0, false, false);
				}
				if (Main.rand.Next(50) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3771, 1, false, 0, false, false);
				}
			}
			if (this.type == 528)
			{
				if (Main.rand.Next(25) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2802, 1, false, 0, false, false);
				}
				if (Main.rand.Next(60) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3784 + Main.rand.Next(3), 1, false, 0, false, false);
				}
			}
			else if (this.type == 529)
			{
				if (Main.rand.Next(25) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2801, 1, false, 0, false, false);
				}
				if (Main.rand.Next(40) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3784 + Main.rand.Next(3), 1, false, 0, false, false);
				}
			}
			if ((this.type == 49 || this.type == 51 || this.type == 150 || this.type == 93) && Main.rand.Next(100) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 18, 1, false, -1, false, false);
			}
			if ((this.type == 16 || this.type == 185 || this.type == 167 || this.type == 197) && Main.rand.Next(50) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 393, 1, false, -1, false, false);
			}
			if (this.type == 58 && Main.rand.Next(75) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 393, 1, false, -1, false, false);
			}
			if (this.type >= 494 && this.type <= 506)
			{
				if (Main.rand.Next(80) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 18, 1, false, -1, false, false);
				}
				else if (Main.rand.Next(80) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 393, 1, false, -1, false, false);
				}
				else if (Main.rand.Next(25) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3285, 1, false, -1, false, false);
				}
			}
			if (this.type == 21 || this.type == 201 || this.type == 202 || this.type == 203 || this.type == 322 || this.type == 323 || this.type == 324 || (this.type >= 449 && this.type <= 452))
			{
				if (Main.rand.Next(100) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 954, 1, false, -1, false, false);
				}
				else if (Main.rand.Next(200) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 955, 1, false, -1, false, false);
				}
				else if (Main.rand.Next(200) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1166, 1, false, -1, false, false);
				}
				else if (Main.rand.Next(500) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1274, 1, false, -1, false, false);
				}
			}
			else if (this.type == 6)
			{
				if (Main.rand.Next(175) == 0)
				{
					int num34 = Main.rand.Next(3);
					if (num34 == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 956, 1, false, -1, false, false);
					}
					else if (num34 == 1)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 957, 1, false, -1, false, false);
					}
					else
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 958, 1, false, -1, false, false);
					}
				}
			}
			else if (this.type == 42 || this.type == 43 || (this.type >= 231 && this.type <= 235))
			{
				if (Main.rand.Next(100) == 0)
				{
					int num35 = Main.rand.Next(3);
					if (num35 == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 960, 1, false, -1, false, false);
					}
					else if (num35 == 1)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 961, 1, false, -1, false, false);
					}
					else
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 962, 1, false, -1, false, false);
					}
				}
			}
			else if (this.type == 31 || this.type == 32 || this.type == 294 || this.type == 295 || this.type == 296)
			{
				if (Main.rand.Next(450) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 959, 1, false, -1, false, false);
				}
				if (Main.rand.Next(300) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1307, 1, false, -1, false, false);
				}
			}
			if ((this.type == 174 || this.type == 179 || this.type == 182 || this.type == 183) && Main.rand.Next(200) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 996, 1, false, 0, false, false);
			}
			if (this.type == 101 || this.type == 98)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 522, Main.rand.Next(2, 6), false, 0, false, false);
			}
			if (this.type == 86)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 526, 1, false, 0, false, false);
				if (Main.rand.Next(100) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 856, 1, false, 0, false, false);
				}
			}
			if (this.type == 186 || this.type == 432)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 40, Main.rand.Next(1, 10), false, 0, false, false);
			}
			if (this.type == 225)
			{
				if (Main.rand.Next(45) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1243, 1, false, 0, false, false);
				}
				else
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 23, Main.rand.Next(2, 7), false, 0, false, false);
				}
			}
			if (this.type == 537)
			{
				int num36 = Main.rand.Next(1, 3);
				if (Main.expertMode)
				{
					if (this.netID == -7)
					{
						num36++;
					}
					if (this.netID == -8 || this.netID == -9)
					{
						num36 += Main.rand.Next(2);
					}
				}
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 23, num36, false, 0, false, false);
				int num37 = 8000;
				if (Main.expertMode)
				{
					num37 = (int)((double)num37 * 0.7);
				}
				if (Main.rand.Next(num37) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1309, 1, false, -1, false, false);
				}
			}
			if (this.type >= 333 && this.type <= 336 && Main.rand.Next(20) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1906, 1, false, 0, false, false);
			}
			if (this.netID == -4)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3111, Main.rand.Next(25, 51), false, 0, false, false);
				int num38 = 100;
				if (Main.expertMode)
				{
					num38 = (int)((double)num38 * 0.7);
				}
				if (Main.rand.Next(num38) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1309, 1, false, -1, false, false);
				}
			}
			else if (this.type == 1 || this.type == 16 || this.type == 138 || this.type == 141 || this.type == 147 || this.type == 184 || this.type == 187 || this.type == 204 || this.type == 302 || (this.type >= 333 && this.type <= 336) || this.type == 535)
			{
				int num39 = Main.rand.Next(1, 3);
				if (Main.expertMode)
				{
					if (this.netID == -7)
					{
						num39++;
					}
					if (this.netID == -8 || this.netID == -9)
					{
						num39 += Main.rand.Next(2);
					}
				}
				int num40 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 23, num39, false, 0, false, false);
				if (this.netID <= 1 && this.netID != -1 && this.netID != -2 && this.netID != -5 && this.netID != -6)
				{
					Main.item[num40].color = this.color;
					NetMessage.SendData(88, -1, -1, "", num40, 1f, 0f, 0f, 0, 0, 0);
				}
				int num41 = 10000;
				if (Main.expertMode)
				{
					num41 = (int)((double)num41 * 0.7);
				}
				if (Main.rand.Next(num41) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1309, 1, false, -1, false, false);
				}
			}
			if (this.type == 75)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 501, Main.rand.Next(1, 4), false, 0, false, false);
			}
			if (this.type == 81 || this.type == 183)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 23, Main.rand.Next(2, 5), false, 0, false, false);
			}
			if (this.type == 122)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 23, Main.rand.Next(5, 11), false, 0, false, false);
			}
			if (this.type == 71)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 327, 1, false, 0, false, false);
			}
			if (this.type == 2 || this.type == 317 || this.type == 318 || this.type == 190 || this.type == 191 || this.type == 192 || this.type == 193 || this.type == 194 || this.type == 133)
			{
				if (Main.rand.Next(3) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 38, 1, false, 0, false, false);
				}
				else if (Main.rand.Next(100) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 236, 1, false, 0, false, false);
				}
			}
			if (this.type == 104 && Main.rand.Next(60) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 485, 1, false, -1, false, false);
			}
			if (this.type == 58)
			{
				if (Main.rand.Next(250) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 263, 1, false, 0, false, false);
				}
				else if (Main.rand.Next(30) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 118, 1, false, 0, false, false);
				}
			}
			if (this.type == 102 && Main.rand.Next(250) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 263, 1, false, 0, false, false);
			}
			if (this.type == 3 || this.type == 331 || this.type == 332 || this.type == 132 || this.type == 161 || this.type == 186 || this.type == 187 || this.type == 188 || this.type == 189 || this.type == 200 || this.type == 223 || this.type == 319 || this.type == 320 || this.type == 321 || (this.type >= 430 && this.type <= 436))
			{
				if (Main.rand.Next(50) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 216, 1, false, -1, false, false);
				}
				if (Main.rand.Next(250) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1304, 1, false, -1, false, false);
				}
			}
			if ((this.type == 489 || this.type == 490) && (Main.expertMode || Main.rand.Next(2) == 0))
			{
				if (Main.rand.Next(75) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3212, 1, false, -1, false, false);
				}
				if (Main.rand.Next(100) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3213, 1, false, -1, false, false);
				}
			}
			if (this.type == 223 && Main.rand.Next(20) == 0)
			{
				if (Main.rand.Next(2) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1135, 1, false, -1, false, false);
				}
				else
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1136, 1, false, -1, false, false);
				}
			}
			if (this.type == 66)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 267, 1, false, 0, false, false);
			}
			if ((this.type == 62 || this.type == 66) && Main.rand.Next(35) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 272, 1, false, -1, false, false);
			}
			if (this.value > 0f && Main.hardMode && (double)(this.position.Y / 16f) < Main.worldSurface + 10.0 && (base.Center.X / 16f < 380f || base.Center.X / 16f > (float)(Main.maxTilesX - 380)) && Main.rand.Next(100) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1315, 1, false, 0, false, false);
			}
			if (this.type == 52)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 251, 1, false, 0, false, false);
			}
			if (this.type == 53)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 239, 1, false, 0, false, false);
			}
			if (this.type == 536)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3478, 1, false, 0, false, false);
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3479, 1, false, 0, false, false);
			}
			if (this.type == 54)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 260, 1, false, 0, false, false);
			}
			if (this.type == 368)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2222, 1, false, 0, false, false);
			}
			if ((this.type == 69 || this.type == 509 || this.type == 508) && Main.rand.Next(3) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 323, Main.rand.Next(1, 3), false, 0, false, false);
			}
			if (this.type == 508 && Main.rand.Next(50) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3772, 1, false, 0, false, false);
			}
			if (this.type == 73)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 362, Main.rand.Next(1, 3), false, 0, false, false);
			}
			if ((this.type == 483 || this.type == 482) && Main.rand.Next(30) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3109, 1, false, 0, false, false);
			}
			if ((this.type == 6 || this.type == 94) && Main.rand.Next(3) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 68, 1, false, 0, false, false);
			}
			if ((this.type == 181 || this.type == 173 || this.type == 239 || this.type == 182 || this.type == 240) && Main.rand.Next(3) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1330, 1, false, 0, false, false);
			}
			if (this.type == 7 || this.type == 8 || this.type == 9)
			{
				if (Main.rand.Next(3) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 68, Main.rand.Next(1, 3), false, 0, false, false);
				}
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 69, Main.rand.Next(3, 9), false, 0, false, false);
			}
			if ((this.type == 10 || this.type == 11 || this.type == 12 || this.type == 95 || this.type == 96 || this.type == 97) && (Main.rand.Next(50) == 0 || (Main.expertMode && Main.rand.Next(50) == 0)))
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 215, 1, false, 0, false, false);
			}
			if ((this.type == 47 || this.type == 464) && Main.rand.Next(75) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 243, 1, false, 0, false, false);
			}
			if ((this.type == 168 || this.type == 470) && Main.rand.Next(50) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, (int)Utils.SelectRandom<short>(Main.rand, new short[]
				{
					3757,
					3758,
					3759
				}), 1, false, 0, false, false);
			}
			if (this.type == 533)
			{
				if (Main.rand.Next(40) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3795, 1, false, 0, false, false);
				}
				else if (Main.rand.Next(30) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3770, 1, false, 0, false, false);
				}
			}
			if (this.type == 551)
			{
				if (Main.expertMode)
				{
					this.DropBossBags();
				}
				else
				{
					int num42 = Main.rand.Next(4);
					if (num42 == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3859, 1, false, -1, false, false);
					}
					else if (num42 == 1)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3827, 1, false, -1, false, false);
					}
					else if (num42 == 2)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3870, 1, false, -1, false, false);
					}
					else
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3858, 1, false, -1, false, false);
					}
					if (Main.rand.Next(7) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3863, 1, false, -1, false, false);
					}
					if (Main.rand.Next(4) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3883, 1, false, -1, false, false);
					}
				}
			}
			if (this.type == 4)
			{
				if (Main.expertMode)
				{
					this.DropBossBags();
				}
				else
				{
					if (Main.rand.Next(7) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2112, 1, false, -1, false, false);
					}
					if (Main.rand.Next(40) == 0 || (Main.expertMode && Main.rand.Next(20) == 0))
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1299, 1, false, 0, false, false);
					}
					if (Main.expertMode)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3097, 1, false, -1, false, false);
					}
					int num43 = 1;
					if (Main.expertMode)
					{
						num43 = 2;
					}
					for (int n = 0; n < num43; n++)
					{
						if (WorldGen.crimson)
						{
							int stack = Main.rand.Next(20) + 10;
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 880, stack, false, 0, false, false);
							stack = Main.rand.Next(20) + 10;
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 880, stack, false, 0, false, false);
							stack = Main.rand.Next(20) + 10;
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 880, stack, false, 0, false, false);
							stack = Main.rand.Next(3) + 1;
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2171, stack, false, 0, false, false);
						}
						else
						{
							int stack2 = Main.rand.Next(30) + 20;
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 47, stack2, false, 0, false, false);
							stack2 = Main.rand.Next(20) + 10;
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 56, stack2, false, 0, false, false);
							stack2 = Main.rand.Next(20) + 10;
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 56, stack2, false, 0, false, false);
							stack2 = Main.rand.Next(20) + 10;
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 56, stack2, false, 0, false, false);
							stack2 = Main.rand.Next(3) + 1;
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 59, stack2, false, 0, false, false);
						}
					}
				}
			}
			if (this.type == 266)
			{
				if (Main.expertMode)
				{
					this.DropBossBags();
				}
				else
				{
					int stack3 = Main.rand.Next(20, 46);
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 880, stack3, false, 0, false, false);
					stack3 = Main.rand.Next(20, 46);
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 880, stack3, false, 0, false, false);
					if (Main.expertMode)
					{
						stack3 = Main.rand.Next(30, 51);
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 880, stack3, false, 0, false, false);
						stack3 = Main.rand.Next(30, 51);
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 880, stack3, false, 0, false, false);
					}
					if (Main.rand.Next(7) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2104, 1, false, -1, false, false);
					}
					if (Main.rand.Next(20) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3060, 1, false, 0, false, false);
					}
					if (Main.expertMode)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3223, 1, false, 0, false, false);
					}
				}
			}
			if (this.type == 267 && NPC.AnyNPCs(266))
			{
				int num44 = Main.rand.Next(2, 6);
				if (Main.rand.Next(3) != 0)
				{
					if (Main.expertMode)
					{
						num44 += Main.rand.Next(2, 6);
					}
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1329, num44, false, 0, false, false);
				}
				if (Main.rand.Next(3) != 0)
				{
					num44 = Main.rand.Next(5, 13);
					if (Main.expertMode)
					{
						num44 += Main.rand.Next(6, 14);
					}
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 880, num44, false, 0, false, false);
				}
				if (Main.rand.Next(2) == 0 && Main.player[(int)Player.FindClosest(this.position, this.width, this.height)].statLife < Main.player[(int)Player.FindClosest(this.position, this.width, this.height)].statLifeMax2)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 58, 1, false, 0, false, false);
				}
			}
			if (this.type == 13 || this.type == 14 || this.type == 15)
			{
				int num45 = Main.rand.Next(1, 3);
				if (Main.rand.Next(2) == 0)
				{
					if (Main.expertMode)
					{
						num45++;
					}
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 86, num45, false, 0, false, false);
				}
				if (Main.rand.Next(2) == 0)
				{
					num45 = Main.rand.Next(2, 6);
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 56, num45, false, 0, false, false);
				}
				if (this.boss)
				{
					if (Main.expertMode)
					{
						this.DropBossBags();
					}
					else
					{
						num45 = Main.rand.Next(10, 30);
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 56, num45, false, 0, false, false);
						num45 = Main.rand.Next(10, 31);
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 56, num45, false, 0, false, false);
						if (Main.expertMode)
						{
							num45 = Main.rand.Next(10, 30);
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 56, num45, false, 0, false, false);
							num45 = Main.rand.Next(10, 31);
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 56, num45, false, 0, false, false);
						}
						if (Main.expertMode)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3224, 1, false, 0, false, false);
						}
						if (Main.rand.Next(20) == 0)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 994, 1, false, 0, false, false);
						}
						if (Main.rand.Next(7) == 0)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2111, 1, false, -1, false, false);
						}
					}
				}
				if (Main.rand.Next(4) == 0 && Main.player[(int)Player.FindClosest(this.position, this.width, this.height)].statLife < Main.player[(int)Player.FindClosest(this.position, this.width, this.height)].statLifeMax2)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 58, 1, false, 0, false, false);
				}
			}
			if (this.type == 222)
			{
				if (Main.expertMode)
				{
					this.DropBossBags();
				}
				else
				{
					if (Main.rand.Next(7) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2108, 1, false, -1, false, false);
					}
					int num46 = Main.rand.Next(3);
					if (num46 == 0)
					{
						num46 = 1121;
					}
					else if (num46 == 1)
					{
						num46 = 1123;
					}
					else if (num46 == 2)
					{
						num46 = 2888;
					}
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num46, 1, false, -1, false, false);
					if (Main.expertMode)
					{
						int num47 = Main.rand.Next(3);
						if (num47 == 0)
						{
							num47 = 1121;
						}
						else if (num47 == 1)
						{
							num47 = 1123;
						}
						else if (num47 == 2)
						{
							num47 = 2888;
						}
						while (num47 == num46)
						{
							num47 = Main.rand.Next(3);
							if (num47 == 0)
							{
								num47 = 1121;
							}
							else if (num47 == 1)
							{
								num47 = 1123;
							}
							else if (num47 == 2)
							{
								num47 = 2888;
							}
						}
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num47, 1, false, -1, false, false);
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1132, 1, false, -1, false, false);
					}
					else if (Main.rand.Next(3) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1132, 1, false, -1, false, false);
					}
					if ((Main.expertMode && Main.rand.Next(15) == 0) || Main.rand.Next(15) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1170, 1, false, 0, false, false);
					}
					if ((Main.expertMode && Main.rand.Next(20) == 0) || Main.rand.Next(20) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2502, 1, false, 0, false, false);
					}
					if (Main.expertMode)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1129, 1, false, 0, false, false);
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Main.rand.Next(842, 845), 1, false, 0, false, false);
					}
					else if (Main.rand.Next(3) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1129, 1, false, 0, false, false);
					}
					else if (Main.rand.Next(2) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Main.rand.Next(842, 845), 1, false, 0, false, false);
					}
					if (Main.rand.Next(4) != 0 || Main.expertMode)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1130, Main.rand.Next(10, 30), false, 0, false, false);
						if (Main.expertMode)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1130, Main.rand.Next(10, 30), false, 0, false, false);
						}
					}
					if (Main.expertMode)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2431, Main.rand.Next(44, 67), false, 0, false, false);
					}
					else
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2431, Main.rand.Next(16, 27), false, 0, false, false);
					}
				}
				NPC.downedQueenBee = true;
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
				}
			}
			if (this.type == 35)
			{
				if (Main.expertMode)
				{
					this.DropBossBags();
				}
				else if (Main.rand.Next(7) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1281, 1, false, -1, false, false);
				}
				else if (Main.rand.Next(7) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1273, 1, false, -1, false, false);
				}
				else if (Main.rand.Next(7) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1313, 1, false, -1, false, false);
				}
			}
			if (this.type == 113)
			{
				if (Main.expertMode)
				{
					this.DropBossBags();
				}
				else
				{
					if (Main.rand.Next(7) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2105, 1, false, -1, false, false);
					}
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 367, 1, false, -1, false, false);
					if (Main.expertMode)
					{
						int num48 = Main.rand.Next(4);
						if (num48 == 3)
						{
							num48 = 2998;
						}
						else
						{
							num48 = 489 + num48;
						}
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num48, 1, false, -1, false, false);
						int num49 = Main.rand.Next(3);
						if (num49 == 0)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 514, 1, false, -1, false, false);
						}
						else if (num49 == 1)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 426, 1, false, -1, false, false);
						}
						else if (num49 == 2)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 434, 1, false, -1, false, false);
						}
					}
					else if (Main.rand.Next(2) == 0)
					{
						int num50 = Main.rand.Next(4);
						if (num50 == 3)
						{
							num50 = 2998;
						}
						else
						{
							num50 = 489 + num50;
						}
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num50, 1, false, -1, false, false);
					}
					else
					{
						int num51 = Main.rand.Next(3);
						if (num51 == 0)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 514, 1, false, -1, false, false);
						}
						else if (num51 == 1)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 426, 1, false, -1, false, false);
						}
						else if (num51 == 2)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 434, 1, false, -1, false, false);
						}
					}
				}
				if (Main.netMode != 1)
				{
					int num52 = (int)(this.position.X + (float)(this.width / 2)) / 16;
					int num53 = (int)(this.position.Y + (float)(this.height / 2)) / 16;
					int num54 = this.width / 2 / 16 + 1;
					for (int num55 = num52 - num54; num55 <= num52 + num54; num55++)
					{
						for (int num56 = num53 - num54; num56 <= num53 + num54; num56++)
						{
							if ((num55 == num52 - num54 || num55 == num52 + num54 || num56 == num53 - num54 || num56 == num53 + num54) && !Main.tile[num55, num56].active())
							{
								Main.tile[num55, num56].type = (WorldGen.crimson ? 347 : 140);
								Main.tile[num55, num56].active(true);
							}
							Main.tile[num55, num56].lava(false);
							Main.tile[num55, num56].liquid = 0;
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, num55, num56, 1, TileChangeType.None);
							}
							else
							{
								WorldGen.SquareTileFrame(num55, num56, true);
							}
						}
					}
				}
			}
			if (this.type == 439)
			{
				NPC.downedAncientCultist = true;
				if (Main.rand.Next(7) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3372, 1, false, -1, false, false);
				}
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3549, 1, false, -1, false, false);
				WorldGen.TriggerLunarApocalypse();
			}
			if (this.type == 398)
			{
				NPC.downedMoonlord = true;
				NPC.LunarApocalypseIsUp = false;
				if (Main.expertMode)
				{
					this.DropBossBags();
				}
				else
				{
					if (Main.rand.Next(7) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3373, 1, false, -1, false, false);
					}
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3384, 1, false, -1, false, false);
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3460, Main.rand.Next(70, 91), false, -1, false, false);
					int num57 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						3063,
						3389,
						3065,
						1553,
						3546,
						3541,
						3570,
						3571,
						3569
					});
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num57, 1, false, -1, false, false);
				}
			}
			num = this.type;
			if (num <= 493)
			{
				switch (num)
				{
				case 402:
				case 405:
				case 407:
				case 409:
				case 411:
					if ((this.type != 406 || Main.rand.Next(3) == 0) && NPC.ShieldStrengthTowerStardust > 0)
					{
						Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 629, 0, 0f, Main.myPlayer, (float)NPC.FindFirstNPC(493), 0f);
						goto IL_9C00;
					}
					goto IL_9C00;
				case 403:
				case 404:
				case 406:
				case 408:
				case 410:
				case 428:
					goto IL_9C00;
				case 412:
				case 413:
				case 414:
				case 415:
				case 416:
				case 417:
				case 418:
				case 419:
					break;
				case 420:
				case 421:
				case 423:
				case 424:
					if (NPC.ShieldStrengthTowerNebula > 0)
					{
						Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 629, 0, 0f, Main.myPlayer, (float)NPC.FindFirstNPC(507), 0f);
						goto IL_9C00;
					}
					goto IL_9C00;
				case 422:
				{
					int num58 = Main.rand.Next(25, 41) / 2;
					if (Main.expertMode)
					{
						num58 = (int)((float)num58 * 1.5f);
					}
					for (int num59 = 0; num59 < num58; num59++)
					{
						Item.NewItem((int)this.position.X + Main.rand.Next(this.width), (int)this.position.Y + Main.rand.Next(this.height), 2, 2, 3456, Main.rand.Next(1, 4), false, 0, false, false);
					}
					NPC.downedTowerVortex = true;
					NPC.TowerActiveVortex = false;
					WorldGen.UpdateLunarApocalypse();
					WorldGen.MessageLunarApocalypse();
					goto IL_9C00;
				}
				case 425:
				case 426:
				case 427:
				case 429:
					if (NPC.ShieldStrengthTowerVortex > 0)
					{
						Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 629, 0, 0f, Main.myPlayer, (float)NPC.FindFirstNPC(422), 0f);
						goto IL_9C00;
					}
					goto IL_9C00;
				default:
				{
					if (num != 493)
					{
						goto IL_9C00;
					}
					int num60 = Main.rand.Next(25, 41) / 2;
					if (Main.expertMode)
					{
						num60 = (int)((float)num60 * 1.5f);
					}
					for (int num61 = 0; num61 < num60; num61++)
					{
						Item.NewItem((int)this.position.X + Main.rand.Next(this.width), (int)this.position.Y + Main.rand.Next(this.height), 2, 2, 3459, Main.rand.Next(1, 4), false, 0, false, false);
					}
					NPC.downedTowerStardust = true;
					NPC.TowerActiveStardust = false;
					WorldGen.UpdateLunarApocalypse();
					WorldGen.MessageLunarApocalypse();
					goto IL_9C00;
				}
				}
			}
			else
			{
				if (num == 507)
				{
					int num62 = Main.rand.Next(25, 41) / 2;
					if (Main.expertMode)
					{
						num62 = (int)((float)num62 * 1.5f);
					}
					for (int num63 = 0; num63 < num62; num63++)
					{
						Item.NewItem((int)this.position.X + Main.rand.Next(this.width), (int)this.position.Y + Main.rand.Next(this.height), 2, 2, 3457, Main.rand.Next(1, 4), false, 0, false, false);
					}
					NPC.downedTowerNebula = true;
					NPC.TowerActiveNebula = false;
					WorldGen.UpdateLunarApocalypse();
					WorldGen.MessageLunarApocalypse();
					goto IL_9C00;
				}
				switch (num)
				{
				case 517:
				{
					int num64 = Main.rand.Next(25, 41) / 2;
					if (Main.expertMode)
					{
						num64 = (int)((float)num64 * 1.5f);
					}
					for (int num65 = 0; num65 < num64; num65++)
					{
						Item.NewItem((int)this.position.X + Main.rand.Next(this.width), (int)this.position.Y + Main.rand.Next(this.height), 2, 2, 3458, Main.rand.Next(1, 4), false, 0, false, false);
					}
					NPC.downedTowerSolar = true;
					NPC.TowerActiveSolar = false;
					WorldGen.UpdateLunarApocalypse();
					WorldGen.MessageLunarApocalypse();
					goto IL_9C00;
				}
				case 518:
					break;
				default:
					goto IL_9C00;
				}
			}
			if (NPC.ShieldStrengthTowerSolar > 0)
			{
				Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 629, 0, 0f, Main.myPlayer, (float)NPC.FindFirstNPC(517), 0f);
			}
			IL_9C00:
			num = this.type;
			switch (num)
			{
			case 381:
			case 382:
			case 383:
			case 385:
			case 386:
			case 389:
			case 390:
				break;
			case 384:
			case 387:
			case 388:
				goto IL_9C93;
			default:
				if (num != 520)
				{
					goto IL_9C93;
				}
				break;
			}
			if (Main.rand.Next(8) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2860, Main.rand.Next(8, 21), false, 0, false, false);
			}
			IL_9C93:
			num = this.type;
			if (num == 383 || num == 386 || num == 389)
			{
				if (Main.rand.Next(200) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2806, 1, false, 0, false, false);
				}
				if (Main.rand.Next(200) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2807, 1, false, 0, false, false);
				}
				if (Main.rand.Next(200) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2808, 1, false, 0, false, false);
				}
			}
			num = this.type;
			switch (num)
			{
			case 381:
			case 382:
			case 385:
				break;
			case 383:
			case 384:
				goto IL_9E8C;
			default:
				if (num != 390)
				{
					goto IL_9E8C;
				}
				break;
			}
			if (Main.rand.Next(200) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2803, 1, false, 0, false, false);
			}
			if (Main.rand.Next(200) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2804, 1, false, 0, false, false);
			}
			if (Main.rand.Next(200) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2805, 1, false, 0, false, false);
			}
			IL_9E8C:
			if (this.type == 395)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Utils.SelectRandom<int>(Main.rand, new int[]
				{
					2797,
					2749,
					2795,
					2798,
					2796,
					2882,
					2880,
					2769,
					2800
				}), 1, false, 0, false, false);
			}
			if (this.type == 390 && Main.rand.Next(100) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2771, 1, false, 0, false, false);
			}
			if ((this.type == 116 || this.type == 117 || this.type == 118 || this.type == 119) && (!Main.expertMode || Main.rand.Next(5) == 0))
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 58, 1, false, 0, false, false);
			}
			if (this.type == 139 && Main.rand.Next(2) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 58, 1, false, 0, false, false);
			}
			if (this.type == 63 || this.type == 64 || this.type == 103)
			{
				if (Main.rand.Next(100) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1303, 1, false, -1, false, false);
				}
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 282, Main.rand.Next(1, 5), false, 0, false, false);
			}
			if (this.type == 481 && Main.rand.Next(2) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3094, Main.rand.Next(40, 81), false, 0, false, false);
			}
			if (this.type == 481 && Main.rand.Next(20) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3187 + Main.rand.Next(3), 1, false, 0, false, false);
			}
			if (this.type == 21 || this.type == 44 || this.type == 167 || this.type == 201 || this.type == 202 || this.type == 481 || this.type == 203 || this.type == 322 || this.type == 323 || this.type == 324 || (this.type >= 449 && this.type <= 452))
			{
				if (Main.rand.Next(25) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 118, 1, false, 0, false, false);
				}
				else if (this.type == 44)
				{
					if (Main.rand.Next(20) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Main.rand.Next(410, 412), 1, false, 0, false, false);
					}
					else
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 166, Main.rand.Next(1, 4), false, 0, false, false);
					}
				}
			}
			if (this.type == 45)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 238, 1, false, 0, false, false);
			}
			if (this.type == 50)
			{
				if (Main.slimeRain)
				{
					Main.StopSlimeRain(true);
					AchievementsHelper.NotifyProgressionEvent(16);
				}
				if (Main.expertMode)
				{
					this.DropBossBags();
				}
				else
				{
					if (Main.rand.Next(4) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2430, 1, false, 0, false, false);
					}
					if (Main.rand.Next(7) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2493, 1, false, -1, false, false);
					}
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Main.rand.Next(256, 259), 1, false, 0, false, false);
					Main.rand.Next(2);
					if (Main.rand.Next(3) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2585, 1, false, 0, false, false);
					}
					else
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2610, 1, false, 0, false, false);
					}
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 998, 1, false, 0, false, false);
				}
				NPC.downedSlimeKing = true;
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
				}
			}
			if (this.type == 23 && Main.rand.Next(50) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 116, 1, false, 0, false, false);
			}
			if (this.type == 24 && Main.rand.Next(250) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 244, 1, false, 0, false, false);
			}
			if (this.type == 31 || this.type == 32 || this.type == 34)
			{
				if (Main.rand.Next(250) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 932, 1, false, 0, false, false);
				}
				else if (Main.rand.Next(100) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3095, 1, false, 0, false, false);
				}
				else if (Main.rand.Next(65) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 327, 1, false, 0, false, false);
				}
				else if (!Main.expertMode)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 154, Main.rand.Next(1, 4), false, 0, false, false);
				}
				if (Main.expertMode)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 154, Main.rand.Next(2, 7), false, 0, false, false);
				}
			}
			if (this.type == 26 || this.type == 27 || this.type == 28 || this.type == 29 || this.type == 111)
			{
				if (Main.rand.Next(200) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 160, 1, false, 0, false, false);
				}
				else if (Main.rand.Next(2) == 0)
				{
					int stack4 = Main.rand.Next(1, 6);
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 161, stack4, false, 0, false, false);
				}
			}
			if (this.type == 175 && Main.rand.Next(100) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1265, 1, false, -1, false, false);
			}
			if ((this.type == 42 || (this.type >= 231 && this.type <= 235)) && (Main.expertMode || Main.rand.Next(3) != 0))
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 209, 1, false, 0, false, false);
			}
			if (this.type == 204 && (Main.expertMode || Main.rand.Next(2) == 0))
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 209, 1, false, 0, false, false);
			}
			if (this.type == 43 && (Main.expertMode || Main.rand.Next(2) == 0))
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 210, 1, false, 0, false, false);
			}
			if (this.type == 65)
			{
				if (Main.rand.Next(50) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 268, 1, false, 0, false, false);
				}
				else
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 319, 1, false, 0, false, false);
				}
			}
			if (this.type == 48 && Main.rand.Next(2) == 0)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 320, 1, false, 0, false, false);
			}
			if (this.type == 541)
			{
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3783, 1, false, 0, false, false);
			}
			if (this.type == 542 && Main.rand.Next(8) == 0)
			{
				int num66 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 319, 1, false, 0, false, false);
				Main.item[num66].color = new Color(189, 148, 96, 255);
				NetMessage.SendData(88, -1, -1, "", num66, 1f, 0f, 0f, 0, 0, 0);
			}
			if (this.type == 543 || this.type == 544)
			{
				if (Main.rand.Next(25) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 527, 1, false, 0, false, false);
				}
				if (Main.rand.Next(8) == 0)
				{
					int num67 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 319, 1, false, 0, false, false);
					if (this.type == 544)
					{
						Main.item[num67].color = new Color(145, 27, 40, 255);
					}
					else
					{
						Main.item[num67].color = new Color(112, 85, 89, 255);
					}
					NetMessage.SendData(88, -1, -1, "", num67, 1f, 0f, 0f, 0, 0, 0);
				}
			}
			if (this.type == 545)
			{
				if (Main.rand.Next(25) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 528, 1, false, 0, false, false);
				}
				if (Main.rand.Next(8) == 0)
				{
					int num68 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 319, 1, false, 0, false, false);
					Main.item[num68].color = new Color(158, 113, 164, 255);
					NetMessage.SendData(88, -1, -1, "", num68, 1f, 0f, 0f, 0, 0, 0);
				}
			}
			if (this.type == 125 || this.type == 126)
			{
				int num69 = 125;
				if (this.type == 125)
				{
					num69 = 126;
				}
				if (!NPC.AnyNPCs(num69))
				{
					if (Main.expertMode)
					{
						this.DropBossBags();
					}
					else
					{
						if (Main.rand.Next(7) == 0)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2106, 1, false, -1, false, false);
						}
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 549, Main.rand.Next(25, 41), false, 0, false, false);
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1225, Main.rand.Next(15, 31), false, 0, false, false);
					}
				}
				else
				{
					this.value = 0f;
					this.boss = false;
				}
			}
			else if (Main.expertMode)
			{
				if (this.type == 127 || this.type == 134)
				{
					this.DropBossBags();
				}
			}
			else if (this.type == 127)
			{
				if (Main.rand.Next(7) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2107, 1, false, -1, false, false);
				}
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 547, Main.rand.Next(25, 41), false, 0, false, false);
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1225, Main.rand.Next(15, 31), false, 0, false, false);
			}
			else if (this.type == 134)
			{
				if (Main.rand.Next(7) == 0)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2113, 1, false, -1, false, false);
				}
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 548, Main.rand.Next(25, 41), false, 0, false, false);
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1225, Main.rand.Next(15, 31), false, 0, false, false);
			}
			if (this.type == 262)
			{
				if (Main.expertMode)
				{
					this.DropBossBags();
				}
				else
				{
					if (Main.rand.Next(7) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2109, 1, false, -1, false, false);
					}
					if (Main.expertMode)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1141, Main.rand.Next(2, 4), false, -1, false, false);
					}
					else
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1141, 1, false, -1, false, false);
					}
					if (Main.rand.Next(20) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1182, 1, false, -1, false, false);
					}
					if (Main.rand.Next(50) == 0 || (Main.expertMode && Main.rand.Next(50) == 0))
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1305, 1, false, -1, false, false);
					}
					if (Main.rand.Next(4) == 0 || Main.expertMode)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1157, 1, false, -1, false, false);
					}
					if (Main.rand.Next(10) == 0)
					{
						Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3021, 1, false, -1, false, false);
					}
					int num70 = 1;
					if (Main.expertMode)
					{
						num70 = 2;
					}
					int num71 = 0;
					for (int num72 = 0; num72 < num70; num72++)
					{
						int num73 = Main.rand.Next(7);
						if (!NPC.downedPlantBoss)
						{
							num73 = 0;
						}
						if (num72 == 0)
						{
							num71 = num73;
						}
						else
						{
							while (num71 == num73)
							{
								num73 = Main.rand.Next(7);
							}
						}
						if (num73 == 0)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 758, 1, false, -1, false, false);
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 771, Main.rand.Next(50, 150), false, 0, false, false);
						}
						else if (num73 == 1)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1255, 1, false, -1, false, false);
						}
						else if (num73 == 2)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 788, 1, false, -1, false, false);
						}
						else if (num73 == 3)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1178, 1, false, -1, false, false);
						}
						else if (num73 == 4)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1259, 1, false, -1, false, false);
						}
						else if (num73 == 5)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1155, 1, false, -1, false, false);
						}
						else if (num73 == 6)
						{
							Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3018, 1, false, -1, false, false);
						}
					}
				}
				bool flag4 = NPC.downedPlantBoss;
				NPC.downedPlantBoss = true;
				if (!flag4)
				{
					if (Main.netMode == 0)
					{
						Main.NewText(Lang.misc[33], 50, 255, 130, false);
					}
					else if (Main.netMode == 2)
					{
						NetMessage.SendData(25, -1, -1, Lang.misc[33], 255, 50f, 255f, 130f, 0, 0, 0);
					}
				}
			}
			if ((this.boss || this.type == 125 || this.type == 126 || this.type == 491 || this.type == 551 || this.type == 576 || this.type == 577 || this.type == 564 || this.type == 565) && Main.rand.Next(10) == 0)
			{
				if (this.type == 4)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1360, 1, false, 0, false, false);
				}
				if (this.type == 13 || this.type == 14 || this.type == 15)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1361, 1, false, 0, false, false);
				}
				if (this.type == 266)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1362, 1, false, 0, false, false);
				}
				if (this.type == 35)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1363, 1, false, 0, false, false);
				}
				if (this.type == 222)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1364, 1, false, 0, false, false);
				}
				if (this.type == 113)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1365, 1, false, 0, false, false);
				}
				if (this.type == 134)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1366, 1, false, 0, false, false);
				}
				if (this.type == 127)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1367, 1, false, 0, false, false);
				}
				if (this.type == 125)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1368, 1, false, 0, false, false);
				}
				if (this.type == 126)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1369, 1, false, 0, false, false);
				}
				if (this.type == 262)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1370, 1, false, 0, false, false);
				}
				if (this.type == 245)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1371, 1, false, 0, false, false);
				}
				if (this.type == 50)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2489, 1, false, 0, false, false);
				}
				if (this.type == 370)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2589, 1, false, 0, false, false);
				}
				if (this.type == 439)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3357, 1, false, 0, false, false);
				}
				if (this.type == 491)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3359, 1, false, 0, false, false);
				}
				if (this.type == 395)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3358, 1, false, 0, false, false);
				}
				if (this.type == 398)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3595, 1, false, 0, false, false);
				}
				if (this.type == 551)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3866, 1, false, 0, false, false);
				}
				if (this.type == 564 || this.type == 565)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3867, 1, false, 0, false, false);
				}
				if (this.type == 576 || this.type == 577)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3868, 1, false, 0, false, false);
				}
			}
			if (this.boss)
			{
				if (this.type == 4)
				{
					NPC.downedBoss1 = true;
				}
				else if (this.type == 13 || this.type == 14 || this.type == 15)
				{
					NPC.downedBoss2 = true;
				}
				else if (this.type == 266)
				{
					NPC.downedBoss2 = true;
				}
				else if (this.type == 35)
				{
					NPC.downedBoss3 = true;
				}
				else
				{
					this.name = this.displayName;
				}
				if (this.type == 127)
				{
					NPC.downedMechBoss3 = true;
					NPC.downedMechBossAny = true;
				}
				if (this.type == 134)
				{
					NPC.downedMechBoss1 = true;
					NPC.downedMechBossAny = true;
				}
				string name = this.name;
				if (this.displayName != "")
				{
					name = this.displayName;
				}
				int stack5 = Main.rand.Next(5, 16);
				int num74 = 28;
				if (this.type == 113)
				{
					num74 = 188;
				}
				else if (this.type == 222)
				{
					num74 = 1134;
				}
				else if (this.type > 113 && this.type < 222)
				{
					num74 = 499;
				}
				else if (this.type == 245 || this.type == 262)
				{
					num74 = 499;
				}
				else if (this.type == 370)
				{
					num74 = 499;
				}
				else if (this.type == 395)
				{
					num74 = 499;
				}
				else if (this.type == 439)
				{
					num74 = 499;
				}
				else if (this.type == 398)
				{
					num74 = 499;
				}
				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num74, stack5, false, 0, false, false);
				int num75 = Main.rand.Next(5) + 5;
				for (int num76 = 0; num76 < num75; num76++)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 58, 1, false, 0, false, false);
				}
				if (this.type == 125 || this.type == 126)
				{
					NPC.downedMechBoss2 = true;
					NPC.downedMechBossAny = true;
					if (Main.netMode == 0)
					{
						Main.NewText(Language.GetTextValue("Enemies.TheTwins") + " " + Lang.misc[50], 175, 75, 255, false);
					}
					else if (Main.netMode == 2)
					{
						NetMessage.SendData(25, -1, -1, Language.GetTextValue("Enemies.TheTwins") + " " + Lang.misc[50], 255, 175f, 75f, 255f, 0, 0, 0);
					}
				}
				else if (this.type == 398)
				{
					if (Main.netMode == 0)
					{
						Main.NewText(Language.GetTextValue("Enemies.MoonLord") + " " + Lang.misc[17], 175, 75, 255, false);
					}
					else if (Main.netMode == 2)
					{
						NetMessage.SendData(25, -1, -1, Language.GetTextValue("Enemies.MoonLord") + " " + Lang.misc[17], 255, 175f, 75f, 255f, 0, 0, 0);
					}
				}
				else if (Main.netMode == 0)
				{
					Main.NewText(name + " " + Lang.misc[17], 175, 75, 255, false);
				}
				else if (Main.netMode == 2)
				{
					NetMessage.SendData(25, -1, -1, name + " " + Lang.misc[17], 255, 175f, 75f, 255f, 0, 0, 0);
				}
				if (this.type == 113 && Main.netMode != 1)
				{
					bool hardMode = Main.hardMode;
					WorldGen.StartHardmode();
					if (NPC.downedMechBoss1 && NPC.downedMechBoss2 && NPC.downedMechBoss3 && !hardMode)
					{
						if (Main.netMode == 0)
						{
							Main.NewText(Lang.misc[32], 50, 255, 130, false);
						}
						else if (Main.netMode == 2)
						{
							NetMessage.SendData(25, -1, -1, Lang.misc[32], 255, 50f, 255f, 130f, 0, 0, 0);
						}
					}
				}
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
				}
			}
			if (!flag && NPC.downedMechBoss1 && NPC.downedMechBoss2 && NPC.downedMechBoss3 && Main.hardMode)
			{
				if (Main.netMode == 0)
				{
					Main.NewText(Lang.misc[32], 50, 255, 130, false);
				}
				else if (Main.netMode == 2)
				{
					NetMessage.SendData(25, -1, -1, Lang.misc[32], 255, 50f, 255f, 130f, 0, 0, 0);
				}
			}
			if (this.type != 16 && this.type != 81 && this.type != 121 && Main.rand.Next(6) == 0 && this.lifeMax > 1 && this.damage > 0)
			{
				int num77 = (int)Player.FindClosest(this.position, this.width, this.height);
				if (Main.rand.Next(2) == 0 && Main.player[num77].statMana < Main.player[num77].statManaMax2)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 184, 1, false, 0, false, false);
				}
				else if (Main.rand.Next(2) == 0 && Main.player[num77].statLife < Main.player[num77].statLifeMax2)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 58, 1, false, 0, false, false);
				}
			}
			if (this.type != 16 && this.type != 81 && this.type != 121 && Main.rand.Next(2) == 0 && this.lifeMax > 1 && this.damage > 0)
			{
				int num78 = (int)Player.FindClosest(this.position, this.width, this.height);
				if (Main.player[num78].statMana < Main.player[num78].statManaMax2)
				{
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 184, 1, false, 0, false, false);
				}
			}
			float num79 = this.value;
			if (this.midas)
			{
				num79 *= 1f + (float)Main.rand.Next(10, 50) * 0.01f;
			}
			num79 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
			if (Main.rand.Next(5) == 0)
			{
				num79 *= 1f + (float)Main.rand.Next(5, 11) * 0.01f;
			}
			if (Main.rand.Next(10) == 0)
			{
				num79 *= 1f + (float)Main.rand.Next(10, 21) * 0.01f;
			}
			if (Main.rand.Next(15) == 0)
			{
				num79 *= 1f + (float)Main.rand.Next(15, 31) * 0.01f;
			}
			if (Main.rand.Next(20) == 0)
			{
				num79 *= 1f + (float)Main.rand.Next(20, 41) * 0.01f;
			}
			num79 += this.extraValue;
			while ((int)num79 > 0)
			{
				if (num79 > 1000000f)
				{
					int num80 = (int)(num79 / 1000000f);
					if (num80 > 50 && Main.rand.Next(5) == 0)
					{
						num80 /= Main.rand.Next(3) + 1;
					}
					if (Main.rand.Next(5) == 0)
					{
						num80 /= Main.rand.Next(3) + 1;
					}
					num79 -= (float)(1000000 * num80);
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 74, num80, false, 0, false, false);
				}
				else if (num79 > 10000f)
				{
					int num81 = (int)(num79 / 10000f);
					if (num81 > 50 && Main.rand.Next(5) == 0)
					{
						num81 /= Main.rand.Next(3) + 1;
					}
					if (Main.rand.Next(5) == 0)
					{
						num81 /= Main.rand.Next(3) + 1;
					}
					num79 -= (float)(10000 * num81);
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 73, num81, false, 0, false, false);
				}
				else if (num79 > 100f)
				{
					int num82 = (int)(num79 / 100f);
					if (num82 > 50 && Main.rand.Next(5) == 0)
					{
						num82 /= Main.rand.Next(3) + 1;
					}
					if (Main.rand.Next(5) == 0)
					{
						num82 /= Main.rand.Next(3) + 1;
					}
					num79 -= (float)(100 * num82);
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 72, num82, false, 0, false, false);
				}
				else
				{
					int num83 = (int)num79;
					if (num83 > 50 && Main.rand.Next(5) == 0)
					{
						num83 /= Main.rand.Next(3) + 1;
					}
					if (Main.rand.Next(5) == 0)
					{
						num83 /= Main.rand.Next(4) + 1;
					}
					if (num83 < 1)
					{
						num83 = 1;
					}
					num79 -= (float)num83;
					Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 71, num83, false, 0, false, false);
				}
			}
		}

		public static void CatchNPC(int i, int who = -1)
		{
			if (!Main.npc[i].active)
			{
				return;
			}
			if (Main.netMode == 1)
			{
				Main.npc[i].active = false;
				NetMessage.SendData(70, -1, -1, "", i, (float)who, 0f, 0f, 0, 0, 0);
				return;
			}
			if (Main.npc[i].catchItem > 0)
			{
				if (Main.npc[i].SpawnedFromStatue)
				{
					Vector2 position = Main.npc[i].Center - new Vector2(20f);
					Utils.PoofOfSmoke(position);
					Main.npc[i].active = false;
					NetMessage.SendData(23, -1, -1, "", i, 0f, 0f, 0f, 0, 0, 0);
					NetMessage.SendData(106, -1, -1, "", (int)position.X, position.Y, 0f, 0f, 0, 0, 0);
					return;
				}
				Item item = new Item();
				item.SetDefaults((int)Main.npc[i].catchItem, false);
				Item.NewItem((int)Main.player[who].Center.X, (int)Main.player[who].Center.Y, 0, 0, (int)Main.npc[i].catchItem, 1, false, 0, true, false);
				Main.npc[i].active = false;
				NetMessage.SendData(23, -1, -1, "", i, 0f, 0f, 0f, 0, 0, 0);
			}
		}

		public void DropBossBags()
		{
			int itemType = -1;
			if (this.type == 50)
			{
				itemType = 3318;
			}
			if (this.type == 4)
			{
				itemType = 3319;
			}
			if (this.type >= 13 && this.type <= 15)
			{
				itemType = 3320;
			}
			if (this.type == 266)
			{
				itemType = 3321;
			}
			if (this.type == 222)
			{
				itemType = 3322;
			}
			if (this.type == 35)
			{
				itemType = 3323;
			}
			if (this.type == 113)
			{
				itemType = 3324;
			}
			if (this.type == 134)
			{
				itemType = 3325;
			}
			if (this.type == 125 || this.type == 126)
			{
				itemType = 3326;
			}
			if (this.type == 127)
			{
				itemType = 3327;
			}
			if (this.type == 262)
			{
				itemType = 3328;
			}
			if (this.type == 245)
			{
				itemType = 3329;
			}
			if (this.type == 370)
			{
				itemType = 3330;
			}
			if (this.type == 439)
			{
				itemType = 3331;
			}
			if (this.type == 398)
			{
				itemType = 3332;
			}
			if (this.type == 551)
			{
				itemType = 3860;
			}
			this.DropItemInstanced(this.position, base.Size, itemType, 1, true);
		}

		public void DropItemInstanced(Vector2 Position, Vector2 HitboxSize, int itemType, int itemStack = 1, bool interactionRequired = true)
		{
			if (itemType > 0)
			{
				if (Main.netMode == 2)
				{
					int num = Item.NewItem((int)Position.X, (int)Position.Y, (int)HitboxSize.X, (int)HitboxSize.Y, itemType, itemStack, true, 0, false, false);
					Main.itemLockoutTime[num] = 54000;
					for (int i = 0; i < 255; i++)
					{
						if ((this.playerInteraction[i] || !interactionRequired) && Main.player[i].active)
						{
							NetMessage.SendData(90, i, -1, "", num, 0f, 0f, 0f, 0, 0, 0);
						}
					}
					Main.item[num].active = false;
				}
				else if (Main.netMode == 0)
				{
					Item.NewItem((int)Position.X, (int)Position.Y, (int)HitboxSize.X, (int)HitboxSize.Y, itemType, itemStack, false, 0, false, false);
				}
				this.value = 0f;
			}
		}

		public void PlayerInteraction(int player)
		{
			bool flag;
			if (this.realLife >= 0)
			{
				flag = Main.npc[this.realLife].playerInteraction[player];
			}
			else
			{
				flag = this.playerInteraction[player];
			}
			if (flag)
			{
				return;
			}
			if (this.type == 13 || this.type == 14 || this.type == 15)
			{
				for (int i = 0; i < 200; i++)
				{
					if (i != this.whoAmI && Main.npc[i].active && (Main.npc[i].type == 13 || Main.npc[i].type == 14 || Main.npc[i].type == 15))
					{
						Main.npc[i].ApplyInteraction(player);
					}
				}
			}
			if (this.type == 134 || this.type == 135 || this.type == 136)
			{
				for (int j = 0; j < 200; j++)
				{
					if (j != this.whoAmI && Main.npc[j].active && (Main.npc[j].type == 134 || Main.npc[j].type == 135 || Main.npc[j].type == 136))
					{
						Main.npc[j].ApplyInteraction(player);
					}
				}
			}
			if (this.type == 35 || this.type == 36)
			{
				for (int k = 0; k < 200; k++)
				{
					if (k != this.whoAmI && Main.npc[k].active && (Main.npc[k].type == 35 || Main.npc[k].type == 36))
					{
						Main.npc[k].ApplyInteraction(player);
					}
				}
			}
			if (this.type == 113 || this.type == 114)
			{
				for (int l = 0; l < 200; l++)
				{
					if (l != this.whoAmI && Main.npc[l].active && (Main.npc[l].type == 113 || Main.npc[l].type == 114))
					{
						Main.npc[l].ApplyInteraction(player);
					}
				}
			}
			if (this.type >= 127 && this.type <= 131)
			{
				for (int m = 0; m < 200; m++)
				{
					if (m != this.whoAmI && Main.npc[m].active && Main.npc[m].type >= 127 && Main.npc[m].type <= 131)
					{
						Main.npc[m].ApplyInteraction(player);
					}
				}
			}
			if (this.type >= 245 && this.type <= 249)
			{
				for (int n = 0; n < 200; n++)
				{
					if (n != this.whoAmI && Main.npc[n].active && Main.npc[n].type >= 245 && Main.npc[n].type <= 249)
					{
						Main.npc[n].ApplyInteraction(player);
					}
				}
			}
			if ((this.type == 396 || this.type == 397) && Main.npc[(int)this.ai[3]].active && Main.npc[(int)this.ai[3]].type == 398)
			{
				Main.npc[(int)this.ai[3]].ApplyInteraction(player);
			}
			if ((this.type == 393 || this.type == 394) && Main.npc[(int)this.ai[0]].active && Main.npc[(int)this.ai[0]].type == 395)
			{
				Main.npc[(int)this.ai[0]].ApplyInteraction(player);
			}
			if (this.type == 492 && Main.npc[(int)this.ai[0]].active && Main.npc[(int)this.ai[0]].type == 491)
			{
				Main.npc[(int)this.ai[0]].ApplyInteraction(player);
			}
			this.ApplyInteraction(player);
		}

		public void ApplyInteraction(int player)
		{
			if (this.realLife >= 0)
			{
				Main.npc[this.realLife].playerInteraction[player] = true;
			}
			else
			{
				this.playerInteraction[player] = true;
			}
			if (player < 255)
			{
				if (this.realLife >= 0)
				{
					Main.npc[this.realLife].lastInteraction = player;
					return;
				}
				this.lastInteraction = player;
			}
		}

		public static bool CanReleaseNPCs(int who)
		{
			float num = 0.7f;
			if (Main.netMode != 1)
			{
				num += 0.05f;
			}
			int num2 = 0;
			int num3 = 0;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active)
				{
					num3++;
					if ((int)Main.npc[i].releaseOwner == who)
					{
						num2++;
					}
				}
			}
			int num4 = 0;
			for (int j = 0; j < 255; j++)
			{
				if (Main.player[j].active)
				{
					num4++;
				}
			}
			int num5 = (int)(200f * num / (float)num4);
			return (float)num3 < 200f * num && num2 < num5;
		}

		public static void ReleaseNPC(int x, int y, int Type, int Style, int who)
		{
			if (Main.netMode == 1)
			{
				NetMessage.SendData(71, -1, -1, "", x, (float)y, (float)Type, (float)Style, 0, 0, 0);
				return;
			}
			if (Type >= 0 && Type < 580 && Main.npcCatchable[Type] && NPC.CanReleaseNPCs(who))
			{
				if (Type == 148)
				{
					int num = Type + Main.rand.Next(2);
					int num2 = NPC.NewNPC(x, y, num, 0, 0f, 0f, 0f, 0f, 255);
					Main.npc[num2].releaseOwner = (short)who;
					return;
				}
				int num3 = NPC.NewNPC(x, y, Type, 0, 0f, 0f, 0f, 0f, 255);
				if (Type == 356)
				{
					Main.npc[num3].ai[2] = (float)Style;
				}
				Main.npc[num3].releaseOwner = (short)who;
			}
		}

		public static void SlimeRainSpawns(int plr)
		{
			float num = 15f;
			Player player = Main.player[plr];
			if ((double)player.position.Y > Main.worldSurface * 16.0 + (double)(Main.maxScreenH / 2))
			{
				return;
			}
			if (player.activeNPCs > num)
			{
				return;
			}
			float num2 = player.activeNPCs / num;
			int num3 = 45 + (int)(450f * num2);
			if (Main.expertMode)
			{
				num3 = (int)((double)num3 * 0.85);
			}
			if (Main.rand.Next(num3) != 0)
			{
				return;
			}
			int num4 = (int)(player.Center.X - (float)Main.maxScreenW);
			int maxValue = num4 + Main.maxScreenW * 2;
			int minValue = (int)((double)player.Center.Y - (double)Main.maxScreenH * 1.5);
			int maxValue2 = (int)((double)player.Center.Y - (double)Main.maxScreenH * 0.75);
			int num5 = Main.rand.Next(num4, maxValue);
			int num6 = Main.rand.Next(minValue, maxValue2);
			num5 /= 16;
			num6 /= 16;
			if (num5 < 10 || num5 > Main.maxTilesX + 10)
			{
				return;
			}
			if ((double)num6 < Main.worldSurface * 0.3 || (double)num6 > Main.worldSurface)
			{
				return;
			}
			if (Collision.SolidTiles(num5 - 3, num5 + 3, num6 - 5, num6 + 2))
			{
				return;
			}
			if (Main.wallHouse[(int)Main.tile[num5, num6].wall])
			{
				return;
			}
			int num7 = NPC.NewNPC(num5 * 16 + 8, num6 * 16, 1, 0, 0f, 0f, 0f, 0f, 255);
			if (Main.rand.Next(200) == 0)
			{
				Main.npc[num7].netDefaults(-4);
				return;
			}
			if (Main.expertMode)
			{
				if (Main.rand.Next(7) == 0)
				{
					Main.npc[num7].netDefaults(-7);
					return;
				}
				if (Main.rand.Next(3) == 0)
				{
					Main.npc[num7].netDefaults(-3);
					return;
				}
			}
			else
			{
				if (Main.rand.Next(10) == 0)
				{
					Main.npc[num7].netDefaults(-7);
					return;
				}
				if (Main.rand.Next(5) < 2)
				{
					Main.npc[num7].netDefaults(-3);
				}
			}
		}

		public static bool Spawning_SandstoneCheck(int x, int y)
		{
			if (!WorldGen.InWorld(x, y, 10))
			{
				return false;
			}
			int num = 0;
			for (int i = 0; i < 8; i++)
			{
				Tile tile = Main.tile[x, y + i];
				if (!tile.active() || !TileID.Sets.Conversion.Sand[(int)tile.type])
				{
					break;
				}
				num++;
				for (int j = 1; j <= 4; j++)
				{
					tile = Main.tile[x + j, y + i];
					if (!tile.active() || !TileID.Sets.Conversion.Sand[(int)tile.type])
					{
						break;
					}
					num++;
				}
				for (int k = 1; k <= 4; k++)
				{
					tile = Main.tile[x - k, y + i];
					if (!tile.active() || !TileID.Sets.Conversion.Sand[(int)tile.type])
					{
						break;
					}
					num++;
				}
			}
			return num >= 40;
		}

		public static void SpawnNPC()
		{
			if (NPC.noSpawnCycle)
			{
				NPC.noSpawnCycle = false;
				return;
			}
			bool flag = false;
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			int num4 = 0;
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active)
				{
					num4++;
				}
			}
			for (int j = 0; j < 255; j++)
			{
				if (Main.player[j].active && !Main.player[j].dead)
				{
					if (Main.slimeRain)
					{
						NPC.SlimeRainSpawns(j);
					}
					bool flag2 = false;
					bool flag3 = false;
					bool flag4 = false;
					bool flag5 = false;
					bool flag6 = false;
					bool flag7 = false;
					bool flag8 = false;
					bool flag9 = false;
					bool flag10 = false;
					bool flag11 = false;
					bool flag12 = NPC.downedPlantBoss && Main.hardMode;
					if (Main.player[j].active && Main.invasionType > 0 && Main.invasionDelay == 0 && Main.invasionSize > 0 && (double)Main.player[j].position.Y < Main.worldSurface * 16.0 + (double)NPC.sHeight)
					{
						int num5 = 3000;
						if ((double)Main.player[j].position.X > Main.invasionX * 16.0 - (double)num5 && (double)Main.player[j].position.X < Main.invasionX * 16.0 + (double)num5)
						{
							flag4 = true;
						}
						else if (Main.invasionX >= (double)(Main.maxTilesX / 2 - 5) && Main.invasionX <= (double)(Main.maxTilesX / 2 + 5))
						{
							int k = 0;
							while (k < 200)
							{
								if (Main.npc[k].townNPC && Math.Abs(Main.player[j].position.X - Main.npc[k].Center.X) < (float)num5)
								{
									if (Main.rand.Next(3) == 0)
									{
										flag4 = true;
										break;
									}
									break;
								}
								else
								{
									k++;
								}
							}
						}
					}
					if (Main.player[j].ZoneTowerSolar || Main.player[j].ZoneTowerNebula || Main.player[j].ZoneTowerVortex || Main.player[j].ZoneTowerStardust)
					{
						flag4 = true;
					}
					bool flag13 = false;
					NPC.spawnRate = NPC.defaultSpawnRate;
					NPC.maxSpawns = NPC.defaultMaxSpawns;
					if (Main.hardMode)
					{
						NPC.spawnRate = (int)((double)NPC.defaultSpawnRate * 0.9);
						NPC.maxSpawns = NPC.defaultMaxSpawns + 1;
					}
					if (Main.player[j].position.Y > (float)((Main.maxTilesY - 200) * 16))
					{
						NPC.maxSpawns = (int)((float)NPC.maxSpawns * 2f);
					}
					else if ((double)Main.player[j].position.Y > Main.rockLayer * 16.0 + (double)NPC.sHeight)
					{
						NPC.spawnRate = (int)((double)NPC.spawnRate * 0.4);
						NPC.maxSpawns = (int)((float)NPC.maxSpawns * 1.9f);
					}
					else if ((double)Main.player[j].position.Y > Main.worldSurface * 16.0 + (double)NPC.sHeight)
					{
						if (Main.hardMode)
						{
							NPC.spawnRate = (int)((double)NPC.spawnRate * 0.45);
							NPC.maxSpawns = (int)((float)NPC.maxSpawns * 1.8f);
						}
						else
						{
							NPC.spawnRate = (int)((double)NPC.spawnRate * 0.5);
							NPC.maxSpawns = (int)((float)NPC.maxSpawns * 1.7f);
						}
					}
					else if (!Main.dayTime)
					{
						NPC.spawnRate = (int)((double)NPC.spawnRate * 0.6);
						NPC.maxSpawns = (int)((float)NPC.maxSpawns * 1.3f);
						if (Main.bloodMoon)
						{
							NPC.spawnRate = (int)((double)NPC.spawnRate * 0.3);
							NPC.maxSpawns = (int)((float)NPC.maxSpawns * 1.8f);
						}
						if ((Main.pumpkinMoon || Main.snowMoon) && (double)Main.player[j].position.Y < Main.worldSurface * 16.0)
						{
							NPC.spawnRate = (int)((double)NPC.spawnRate * 0.2);
							NPC.maxSpawns *= 2;
						}
					}
					else if (Main.dayTime && Main.eclipse)
					{
						NPC.spawnRate = (int)((double)NPC.spawnRate * 0.2);
						NPC.maxSpawns = (int)((float)NPC.maxSpawns * 1.9f);
					}
					if (Main.player[j].ZoneSnow && (double)(Main.player[j].position.Y / 16f) < Main.worldSurface)
					{
						NPC.maxSpawns = (int)((float)NPC.maxSpawns + (float)NPC.maxSpawns * Main.cloudAlpha);
						NPC.spawnRate = (int)((float)NPC.spawnRate * (1f - Main.cloudAlpha + 1f) / 2f);
					}
					if (Main.player[j].ZoneDungeon)
					{
						NPC.spawnRate = (int)((double)NPC.spawnRate * 0.4);
						NPC.maxSpawns = (int)((float)NPC.maxSpawns * 1.7f);
					}
					else if (Main.player[j].ZoneSandstorm)
					{
						NPC.spawnRate = (int)((float)NPC.spawnRate * (Main.hardMode ? 0.4f : 0.9f));
						NPC.maxSpawns = (int)((float)NPC.maxSpawns * (Main.hardMode ? 1.5f : 1.2f));
					}
					else if (Main.player[j].ZoneUndergroundDesert)
					{
						NPC.spawnRate = (int)((float)NPC.spawnRate * (Main.hardMode ? 0.2f : 0.3f));
						NPC.maxSpawns = (int)((float)NPC.maxSpawns * 2f);
					}
					else if (Main.player[j].ZoneJungle)
					{
						NPC.spawnRate = (int)((double)NPC.spawnRate * 0.4);
						NPC.maxSpawns = (int)((float)NPC.maxSpawns * 1.5f);
					}
					else if (Main.player[j].ZoneCorrupt || Main.player[j].ZoneCrimson)
					{
						NPC.spawnRate = (int)((double)NPC.spawnRate * 0.65);
						NPC.maxSpawns = (int)((float)NPC.maxSpawns * 1.3f);
					}
					else if (Main.player[j].ZoneMeteor)
					{
						NPC.spawnRate = (int)((double)NPC.spawnRate * 0.4);
						NPC.maxSpawns = (int)((float)NPC.maxSpawns * 1.1f);
					}
					if (Main.player[j].ZoneHoly && (double)Main.player[j].position.Y > Main.rockLayer * 16.0 + (double)NPC.sHeight)
					{
						NPC.spawnRate = (int)((double)NPC.spawnRate * 0.65);
						NPC.maxSpawns = (int)((float)NPC.maxSpawns * 1.3f);
					}
					if (Main.wof >= 0 && Main.player[j].position.Y > (float)((Main.maxTilesY - 200) * 16))
					{
						NPC.maxSpawns = (int)((float)NPC.maxSpawns * 0.3f);
						NPC.spawnRate *= 3;
					}
					if ((double)Main.player[j].activeNPCs < (double)NPC.maxSpawns * 0.2)
					{
						NPC.spawnRate = (int)((float)NPC.spawnRate * 0.6f);
					}
					else if ((double)Main.player[j].activeNPCs < (double)NPC.maxSpawns * 0.4)
					{
						NPC.spawnRate = (int)((float)NPC.spawnRate * 0.7f);
					}
					else if ((double)Main.player[j].activeNPCs < (double)NPC.maxSpawns * 0.6)
					{
						NPC.spawnRate = (int)((float)NPC.spawnRate * 0.8f);
					}
					else if ((double)Main.player[j].activeNPCs < (double)NPC.maxSpawns * 0.8)
					{
						NPC.spawnRate = (int)((float)NPC.spawnRate * 0.9f);
					}
					if ((double)(Main.player[j].position.Y / 16f) > (Main.worldSurface + Main.rockLayer) / 2.0 || Main.player[j].ZoneCorrupt || Main.player[j].ZoneCrimson)
					{
						if ((double)Main.player[j].activeNPCs < (double)NPC.maxSpawns * 0.2)
						{
							NPC.spawnRate = (int)((float)NPC.spawnRate * 0.7f);
						}
						else if ((double)Main.player[j].activeNPCs < (double)NPC.maxSpawns * 0.4)
						{
							NPC.spawnRate = (int)((float)NPC.spawnRate * 0.9f);
						}
					}
					if (Main.player[j].calmed)
					{
						NPC.spawnRate = (int)((float)NPC.spawnRate * 1.3f);
						NPC.maxSpawns = (int)((float)NPC.maxSpawns * 0.7f);
					}
					if (Main.player[j].sunflower)
					{
						NPC.spawnRate = (int)((float)NPC.spawnRate * 1.2f);
						NPC.maxSpawns = (int)((float)NPC.maxSpawns * 0.8f);
					}
					if (Main.player[j].enemySpawns)
					{
						NPC.spawnRate = (int)((double)NPC.spawnRate * 0.5);
						NPC.maxSpawns = (int)((float)NPC.maxSpawns * 2f);
					}
					if (Main.player[j].ZoneWaterCandle || Main.player[j].inventory[Main.player[j].selectedItem].type == 148)
					{
						if (!Main.player[j].ZonePeaceCandle && Main.player[j].inventory[Main.player[j].selectedItem].type != 3117)
						{
							NPC.spawnRate = (int)((double)NPC.spawnRate * 0.75);
							NPC.maxSpawns = (int)((float)NPC.maxSpawns * 1.5f);
						}
					}
					else if (Main.player[j].ZonePeaceCandle || Main.player[j].inventory[Main.player[j].selectedItem].type == 3117)
					{
						NPC.spawnRate = (int)((double)NPC.spawnRate * 1.3);
						NPC.maxSpawns = (int)((float)NPC.maxSpawns * 0.7f);
					}
					if (Main.player[j].ZoneWaterCandle && (double)(Main.player[j].position.Y / 16f) < Main.worldSurface * 0.34999999403953552)
					{
						NPC.spawnRate = (int)((double)NPC.spawnRate * 0.5);
					}
					if ((double)NPC.spawnRate < (double)NPC.defaultSpawnRate * 0.1)
					{
						NPC.spawnRate = (int)((double)NPC.defaultSpawnRate * 0.1);
					}
					if (NPC.maxSpawns > NPC.defaultMaxSpawns * 3)
					{
						NPC.maxSpawns = NPC.defaultMaxSpawns * 3;
					}
					if ((Main.pumpkinMoon || Main.snowMoon) && (double)Main.player[j].position.Y < Main.worldSurface * 16.0)
					{
						NPC.maxSpawns = (int)((double)NPC.defaultMaxSpawns * (2.0 + 0.3 * (double)num4));
						NPC.spawnRate = 20;
					}
					if (DD2Event.Ongoing && Main.player[j].ZoneOldOneArmy)
					{
						NPC.maxSpawns = NPC.defaultMaxSpawns;
						NPC.spawnRate = NPC.defaultSpawnRate;
					}
					if (flag4)
					{
						NPC.maxSpawns = (int)((double)NPC.defaultMaxSpawns * (2.0 + 0.3 * (double)num4));
						NPC.spawnRate = 20;
					}
					if (Main.player[j].ZoneDungeon && !NPC.downedBoss3)
					{
						NPC.spawnRate = 10;
					}
					if (!flag4 && ((!Main.bloodMoon && !Main.pumpkinMoon && !Main.snowMoon) || Main.dayTime) && (!Main.eclipse || !Main.dayTime) && !Main.player[j].ZoneDungeon && !Main.player[j].ZoneCorrupt && !Main.player[j].ZoneCrimson && !Main.player[j].ZoneMeteor && !Main.player[j].ZoneOldOneArmy)
					{
						if (Main.player[j].Center.Y / 16f > (float)(Main.maxTilesY - 200))
						{
							if (Main.player[j].townNPCs == 1f)
							{
								if (Main.rand.Next(2) == 0)
								{
									flag3 = true;
								}
								if (Main.rand.Next(10) == 0)
								{
									flag10 = true;
									NPC.maxSpawns = (int)((double)((float)NPC.maxSpawns) * 0.5);
								}
								else
								{
									NPC.spawnRate = (int)((double)((float)NPC.spawnRate) * 1.25);
								}
							}
							else if (Main.player[j].townNPCs == 2f)
							{
								if (Main.rand.Next(4) != 0)
								{
									flag3 = true;
								}
								if (Main.rand.Next(5) == 0)
								{
									flag10 = true;
									NPC.maxSpawns = (int)((double)((float)NPC.maxSpawns) * 0.5);
								}
								else
								{
									NPC.spawnRate = (int)((double)((float)NPC.spawnRate) * 1.5);
								}
							}
							else if (Main.player[j].townNPCs >= 3f)
							{
								if (Main.rand.Next(10) != 0)
								{
									flag3 = true;
								}
								if (Main.rand.Next(3) == 0)
								{
									flag10 = true;
									NPC.maxSpawns = (int)((double)((float)NPC.maxSpawns) * 0.5);
								}
								else
								{
									NPC.spawnRate = (int)((float)NPC.spawnRate * 2f);
								}
							}
						}
						else if (Main.player[j].townNPCs == 1f)
						{
							flag3 = true;
							if (Main.rand.Next(3) == 1)
							{
								flag10 = true;
								NPC.maxSpawns = (int)((double)((float)NPC.maxSpawns) * 0.6);
							}
							else
							{
								NPC.spawnRate = (int)((float)NPC.spawnRate * 2f);
							}
						}
						else if (Main.player[j].townNPCs == 2f)
						{
							flag3 = true;
							if (Main.rand.Next(3) != 0)
							{
								flag10 = true;
								NPC.maxSpawns = (int)((double)((float)NPC.maxSpawns) * 0.6);
							}
							else
							{
								NPC.spawnRate = (int)((float)NPC.spawnRate * 3f);
							}
						}
						else if (Main.player[j].townNPCs >= 3f)
						{
							flag3 = true;
							if (!Main.expertMode || Main.rand.Next(30) != 0)
							{
								flag10 = true;
							}
							NPC.maxSpawns = (int)((double)((float)NPC.maxSpawns) * 0.6);
						}
					}
					int num6 = (int)(Main.player[j].position.X + (float)(Main.player[j].width / 2)) / 16;
					int num7 = (int)(Main.player[j].position.Y + (float)(Main.player[j].height / 2)) / 16;
					if (Main.wallHouse[(int)Main.tile[num6, num7].wall])
					{
						flag3 = true;
					}
					if (Main.tile[num6, num7].wall == 87)
					{
						flag2 = true;
					}
					bool flag14 = false;
					if (Main.player[j].active && !Main.player[j].dead && Main.player[j].activeNPCs < (float)NPC.maxSpawns && Main.rand.Next(NPC.spawnRate) == 0)
					{
						NPC.spawnRangeX = (int)((double)(NPC.sWidth / 16) * 0.7);
						NPC.spawnRangeY = (int)((double)(NPC.sHeight / 16) * 0.7);
						NPC.safeRangeX = (int)((double)(NPC.sWidth / 16) * 0.52);
						NPC.safeRangeY = (int)((double)(NPC.sHeight / 16) * 0.52);
						if (Main.player[j].inventory[Main.player[j].selectedItem].type == 1254 || Main.player[j].inventory[Main.player[j].selectedItem].type == 1299 || Main.player[j].scope)
						{
							float num8 = 1.5f;
							if (Main.player[j].inventory[Main.player[j].selectedItem].type == 1254 && Main.player[j].scope)
							{
								num8 = 1.25f;
							}
							else if (Main.player[j].inventory[Main.player[j].selectedItem].type == 1254)
							{
								num8 = 1.5f;
							}
							else if (Main.player[j].inventory[Main.player[j].selectedItem].type == 1299)
							{
								num8 = 1.5f;
							}
							else if (Main.player[j].scope)
							{
								num8 = 2f;
							}
							NPC.spawnRangeX += (int)((double)(NPC.sWidth / 16) * 0.5 / (double)num8);
							NPC.spawnRangeY += (int)((double)(NPC.sHeight / 16) * 0.5 / (double)num8);
							NPC.safeRangeX += (int)((double)(NPC.sWidth / 16) * 0.5 / (double)num8);
							NPC.safeRangeY += (int)((double)(NPC.sHeight / 16) * 0.5 / (double)num8);
						}
						int num9 = (int)(Main.player[j].position.X / 16f) - NPC.spawnRangeX;
						int num10 = (int)(Main.player[j].position.X / 16f) + NPC.spawnRangeX;
						int num11 = (int)(Main.player[j].position.Y / 16f) - NPC.spawnRangeY;
						int num12 = (int)(Main.player[j].position.Y / 16f) + NPC.spawnRangeY;
						int num13 = (int)(Main.player[j].position.X / 16f) - NPC.safeRangeX;
						int num14 = (int)(Main.player[j].position.X / 16f) + NPC.safeRangeX;
						int num15 = (int)(Main.player[j].position.Y / 16f) - NPC.safeRangeY;
						int num16 = (int)(Main.player[j].position.Y / 16f) + NPC.safeRangeY;
						if (num9 < 0)
						{
							num9 = 0;
						}
						if (num10 > Main.maxTilesX)
						{
							num10 = Main.maxTilesX;
						}
						if (num11 < 0)
						{
							num11 = 0;
						}
						if (num12 > Main.maxTilesY)
						{
							num12 = Main.maxTilesY;
						}
						int l = 0;
						while (l < 50)
						{
							int num17 = Main.rand.Next(num9, num10);
							int num18 = Main.rand.Next(num11, num12);
							if (Main.tile[num17, num18].nactive() && Main.tileSolid[(int)Main.tile[num17, num18].type])
							{
								goto IL_1540;
							}
							if (!Main.wallHouse[(int)Main.tile[num17, num18].wall])
							{
								if (!flag4 && (double)num18 < Main.worldSurface * 0.34999999403953552 && !flag10 && ((double)num17 < (double)Main.maxTilesX * 0.45 || (double)num17 > (double)Main.maxTilesX * 0.55 || Main.hardMode))
								{
									num3 = (int)Main.tile[num17, num18].type;
									num = num17;
									num2 = num18;
									flag13 = true;
									flag = true;
								}
								else if (!flag4 && (double)num18 < Main.worldSurface * 0.44999998807907104 && !flag10 && Main.hardMode && Main.rand.Next(10) == 0)
								{
									num3 = (int)Main.tile[num17, num18].type;
									num = num17;
									num2 = num18;
									flag13 = true;
									flag = true;
								}
								else
								{
									int m = num18;
									while (m < Main.maxTilesY)
									{
										if (Main.tile[num17, m].nactive() && Main.tileSolid[(int)Main.tile[num17, m].type])
										{
											if (num17 < num13 || num17 > num14 || m < num15 || m > num16)
											{
												num3 = (int)Main.tile[num17, m].type;
												num = num17;
												num2 = m;
												flag13 = true;
												break;
											}
											break;
										}
										else
										{
											m++;
										}
									}
								}
								if (!flag13)
								{
									goto IL_1540;
								}
								int num19 = num - NPC.spawnSpaceX / 2;
								int num20 = num + NPC.spawnSpaceX / 2;
								int num21 = num2 - NPC.spawnSpaceY;
								int num22 = num2;
								if (num19 < 0)
								{
									flag13 = false;
								}
								if (num20 > Main.maxTilesX)
								{
									flag13 = false;
								}
								if (num21 < 0)
								{
									flag13 = false;
								}
								if (num22 > Main.maxTilesY)
								{
									flag13 = false;
								}
								if (flag13)
								{
									for (int n = num19; n < num20; n++)
									{
										for (int num23 = num21; num23 < num22; num23++)
										{
											if (Main.tile[n, num23].nactive() && Main.tileSolid[(int)Main.tile[n, num23].type])
											{
												flag13 = false;
												break;
											}
											if (Main.tile[n, num23].lava())
											{
												flag13 = false;
												break;
											}
										}
									}
								}
								if (num >= num13 && num <= num14)
								{
									flag14 = true;
									goto IL_1540;
								}
								goto IL_1540;
							}
							IL_1546:
							l++;
							continue;
							IL_1540:
							if (!flag13 && !flag13)
							{
								goto IL_1546;
							}
							break;
						}
					}
					if (flag13)
					{
						Rectangle rectangle = new Rectangle(num * 16, num2 * 16, 16, 16);
						for (int num24 = 0; num24 < 255; num24++)
						{
							if (Main.player[num24].active)
							{
								Rectangle rectangle2 = new Rectangle((int)(Main.player[num24].position.X + (float)(Main.player[num24].width / 2) - (float)(NPC.sWidth / 2) - (float)NPC.safeRangeX), (int)(Main.player[num24].position.Y + (float)(Main.player[num24].height / 2) - (float)(NPC.sHeight / 2) - (float)NPC.safeRangeY), NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
								if (rectangle.Intersects(rectangle2))
								{
									flag13 = false;
								}
							}
						}
					}
					if (flag13)
					{
						if (Main.player[j].ZoneDungeon && (!Main.tileDungeon[(int)Main.tile[num, num2].type] || Main.tile[num, num2 - 1].wall == 0))
						{
							flag13 = false;
						}
						if (Main.tile[num, num2 - 1].liquid > 0 && Main.tile[num, num2 - 2].liquid > 0 && !Main.tile[num, num2 - 1].lava())
						{
							if (Main.tile[num, num2 - 1].honey())
							{
								flag6 = true;
							}
							else
							{
								flag5 = true;
							}
						}
						int num25 = (int)Main.player[j].Center.X / 16;
						int num26 = (int)(Main.player[j].Bottom.Y + 8f) / 16;
						if (Main.tile[num, num2].type == 367)
						{
							flag8 = true;
						}
						else if (Main.tile[num, num2].type == 368)
						{
							flag7 = true;
						}
						else if (Main.tile[num25, num26].type == 367)
						{
							flag8 = true;
						}
						else if (Main.tile[num25, num26].type == 368)
						{
							flag7 = true;
						}
						else
						{
							int num27 = Main.rand.Next(20, 31);
							int num28 = Main.rand.Next(1, 4);
							if (num - num27 < 0)
							{
								num27 = num;
							}
							if (num2 - num27 < 0)
							{
								num27 = num2;
							}
							if (num + num27 >= Main.maxTilesX)
							{
								num27 = Main.maxTilesX - num - 1;
							}
							if (num2 + num27 >= Main.maxTilesY)
							{
								num27 = Main.maxTilesY - num2 - 1;
							}
							for (int num29 = num - num27; num29 <= num + num27; num29 += num28)
							{
								int num30 = Main.rand.Next(1, 4);
								for (int num31 = num2 - num27; num31 <= num2 + num27; num31 += num30)
								{
									if (Main.tile[num29, num31].type == 367)
									{
										flag8 = true;
									}
									if (Main.tile[num29, num31].type == 368)
									{
										flag7 = true;
									}
								}
							}
							num27 = Main.rand.Next(30, 61);
							num28 = Main.rand.Next(3, 7);
							if (num25 - num27 < 0)
							{
								num27 = num25;
							}
							if (num26 - num27 < 0)
							{
								num27 = num26;
							}
							if (num25 + num27 >= Main.maxTilesX)
							{
								num27 = Main.maxTilesX - num25 - 2;
							}
							if (num26 + num27 >= Main.maxTilesY)
							{
								num27 = Main.maxTilesY - num26 - 2;
							}
							for (int num32 = num25 - num27; num32 <= num25 + num27; num32 += num28)
							{
								int num33 = Main.rand.Next(3, 7);
								for (int num34 = num26 - num27; num34 <= num26 + num27; num34 += num33)
								{
									if (Main.tile[num32, num34].type == 367)
									{
										flag8 = true;
									}
									if (Main.tile[num32, num34].type == 368)
									{
										flag7 = true;
									}
								}
							}
						}
					}
					if (flag6)
					{
						flag13 = false;
					}
					if (flag13)
					{
						if ((double)num2 > Main.rockLayer && num2 < Main.maxTilesY - 200 && !Main.player[j].ZoneDungeon && !flag4)
						{
							if (Main.rand.Next(3) == 0)
							{
								int num35 = Main.rand.Next(5, 15);
								if (num - num35 >= 0 && num + num35 < Main.maxTilesX)
								{
									for (int num36 = num - num35; num36 < num + num35; num36++)
									{
										for (int num37 = num2 - num35; num37 < num2 + num35; num37++)
										{
											if (Main.tile[num36, num37].wall == 62)
											{
												flag9 = true;
											}
										}
									}
								}
							}
							else
							{
								int num38 = (int)Main.player[j].position.X / 16;
								int num39 = (int)Main.player[j].position.Y / 16;
								if (Main.tile[num38, num39].wall == 62)
								{
									flag9 = true;
								}
							}
						}
						if ((double)num2 < Main.rockLayer && num2 > 200 && !Main.player[j].ZoneDungeon && !flag4)
						{
							if (Main.rand.Next(3) == 0)
							{
								int num40 = Main.rand.Next(5, 15);
								if (num - num40 >= 0 && num + num40 < Main.maxTilesX)
								{
									for (int num41 = num - num40; num41 < num + num40; num41++)
									{
										for (int num42 = num2 - num40; num42 < num2 + num40; num42++)
										{
											if (WallID.Sets.Conversion.Sandstone[(int)Main.tile[num41, num42].wall] || WallID.Sets.Conversion.HardenedSand[(int)Main.tile[num41, num42].wall])
											{
												flag11 = true;
											}
										}
									}
								}
							}
							else
							{
								int num43 = (int)Main.player[j].position.X / 16;
								int num44 = (int)Main.player[j].position.Y / 16;
								if (WallID.Sets.Conversion.Sandstone[(int)Main.tile[num43, num44].wall] || WallID.Sets.Conversion.HardenedSand[(int)Main.tile[num43, num44].wall])
								{
									flag11 = true;
								}
							}
						}
						int num45 = (int)Main.tile[num, num2].type;
						int num46 = 200;
						if (Main.player[j].ZoneTowerNebula)
						{
							bool flag15 = true;
							int num47 = 0;
							while (flag15)
							{
								num47 = Utils.SelectRandom<int>(Main.rand, new int[]
								{
									424,
									424,
									424,
									423,
									423,
									423,
									421,
									421,
									421,
									421,
									421,
									420
								});
								flag15 = false;
								if (num47 == 424 && NPC.CountNPCS(num47) >= 2)
								{
									flag15 = true;
								}
								if (num47 == 423 && NPC.CountNPCS(num47) >= 3)
								{
									flag15 = true;
								}
								if (num47 == 420 && NPC.CountNPCS(num47) >= 2)
								{
									flag15 = true;
								}
							}
							if (num47 != 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, num47, 1, 0f, 0f, 0f, 0f, 255);
							}
						}
						else if (Main.player[j].ZoneTowerVortex)
						{
							bool flag16 = true;
							int num48 = 0;
							while (flag16)
							{
								num48 = Utils.SelectRandom<int>(Main.rand, new int[]
								{
									429,
									429,
									429,
									429,
									427,
									427,
									425,
									425,
									426
								});
								flag16 = false;
								if (num48 == 425 && NPC.CountNPCS(num48) >= 3)
								{
									flag16 = true;
								}
								if (num48 == 426 && NPC.CountNPCS(num48) >= 3)
								{
									flag16 = true;
								}
								if (num48 == 429 && NPC.CountNPCS(num48) >= 4)
								{
									flag16 = true;
								}
							}
							if (num48 != 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, num48, 1, 0f, 0f, 0f, 0f, 255);
							}
						}
						else if (Main.player[j].ZoneTowerStardust)
						{
							int num49 = Utils.SelectRandom<int>(Main.rand, new int[]
							{
								411,
								411,
								411,
								409,
								409,
								407,
								402,
								405
							});
							if (num49 != 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, num49, 1, 0f, 0f, 0f, 0f, 255);
							}
						}
						else if (Main.player[j].ZoneTowerSolar)
						{
							bool flag17 = true;
							int num50 = 0;
							while (flag17)
							{
								num50 = Utils.SelectRandom<int>(Main.rand, new int[]
								{
									518,
									419,
									418,
									412,
									417,
									416,
									415
								});
								flag17 = false;
								if (num50 == 415 && NPC.CountNPCS(num50) >= 2)
								{
									flag17 = true;
								}
								if (num50 == 416 && NPC.CountNPCS(num50) >= 1)
								{
									flag17 = true;
								}
								if (num50 == 518 && NPC.CountNPCS(num50) >= 2)
								{
									flag17 = true;
								}
								if (num50 == 412 && NPC.CountNPCS(num50) >= 1)
								{
									flag17 = true;
								}
							}
							if (num50 != 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, num50, 1, 0f, 0f, 0f, 0f, 255);
							}
						}
						else if (flag)
						{
							int maxValue = 8;
							int maxValue2 = 30;
							bool flag18 = (float)Math.Abs(num - Main.maxTilesX / 2) / (float)(Main.maxTilesX / 2) > 0.33f && (Main.wallLight[(int)Main.tile[num6, num7].wall] || Main.tile[num6, num7].wall == 73);
							if (flag18)
							{
								bool flag19 = NPC.AnyDanger();
								if (flag19)
								{
									flag18 = false;
								}
							}
							if (Main.player[j].ZoneWaterCandle)
							{
								maxValue = 3;
								maxValue2 = 10;
							}
							if (flag4 && Main.invasionType == 4)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 388, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (flag18 && Main.hardMode && NPC.downedGolemBoss && ((!NPC.downedMartians && Main.rand.Next(maxValue) == 0) || Main.rand.Next(maxValue2) == 0) && !NPC.AnyNPCs(399))
							{
								NPC.NewNPC(num * 16 + 8, num2 * 16, 399, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (flag18 && Main.hardMode && NPC.downedGolemBoss && ((!NPC.downedMartians && Main.rand.Next(maxValue) == 0) || Main.rand.Next(maxValue2) == 0) && !NPC.AnyNPCs(399) && (Main.player[j].inventory[Main.player[j].selectedItem].type == 148 || Main.player[j].ZoneWaterCandle))
							{
								NPC.NewNPC(num * 16 + 8, num2 * 16, 399, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.hardMode && !NPC.AnyNPCs(87) && !flag3 && Main.rand.Next(10) == 0)
							{
								NPC.NewNPC(num * 16 + 8, num2 * 16, 87, 1, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.hardMode && !NPC.AnyNPCs(87) && !flag3 && Main.rand.Next(10) == 0 && (Main.player[j].inventory[Main.player[j].selectedItem].type == 148 || Main.player[j].ZoneWaterCandle))
							{
								NPC.NewNPC(num * 16 + 8, num2 * 16, 87, 1, 0f, 0f, 0f, 0f, 255);
							}
							else
							{
								NPC.NewNPC(num * 16 + 8, num2 * 16, 48, 0, 0f, 0f, 0f, 0f, 255);
							}
						}
						else if (flag4)
						{
							if (Main.invasionType == 1)
							{
								if (Main.hardMode && !NPC.AnyNPCs(471) && Main.rand.Next(30) == 0)
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 471, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(9) == 0)
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 29, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(5) == 0)
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 26, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(3) == 0)
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 111, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(3) == 0)
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 27, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 28, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (Main.invasionType == 2)
							{
								if (Main.rand.Next(7) == 0)
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 145, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(3) == 0)
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 143, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 144, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (Main.invasionType == 3)
							{
								if (Main.invasionSize < Main.invasionSizeStart / 2 && Main.rand.Next(20) == 0 && !NPC.AnyNPCs(491) && !Collision.SolidTiles(num - 20, num + 20, num2 - 40, num2 - 10))
								{
									NPC.NewNPC(num * 16 + 8, (num2 - 10) * 16, 491, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(30) == 0 && !NPC.AnyNPCs(216))
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 216, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(11) == 0)
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 215, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(9) == 0)
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 252, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(7) == 0)
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 214, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(3) == 0)
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 213, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 212, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (Main.invasionType == 4)
							{
								int num51 = 0;
								int num52 = Main.rand.Next(7);
								if (Main.invasionSize <= 100 && Main.rand.Next(10) == 0 && !NPC.AnyNPCs(395))
								{
									num51 = 395;
								}
								else if (num52 >= 6)
								{
									if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(395))
									{
										num51 = 395;
									}
									else
									{
										int num53 = Main.rand.Next(2);
										if (num53 == 0)
										{
											num51 = 390;
										}
										if (num53 == 1)
										{
											num51 = 386;
										}
									}
								}
								else if (num52 >= 4)
								{
									int num54 = Main.rand.Next(5);
									if (num54 < 2)
									{
										num51 = 382;
									}
									else if (num54 < 4)
									{
										num51 = 381;
									}
									else
									{
										num51 = 388;
									}
								}
								else
								{
									int num55 = Main.rand.Next(4);
									if (num55 == 3)
									{
										if (!NPC.AnyNPCs(520))
										{
											num51 = 520;
										}
										else
										{
											num55 = Main.rand.Next(3);
										}
									}
									if (num55 == 0)
									{
										num51 = 385;
									}
									if (num55 == 1)
									{
										num51 = 389;
									}
									if (num55 == 2)
									{
										num51 = 383;
									}
								}
								if (num51 != 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, num51, 1, 0f, 0f, 0f, 0f, 255);
								}
							}
						}
						else if (!NPC.savedBartender && DD2Event.ReadyToFindBartender && !NPC.AnyNPCs(579) && Main.rand.Next(80) == 0 && !flag5)
						{
							NPC.NewNPC(num * 16 + 8, num2 * 16, 579, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if (Main.tile[num, num2].wall == 62 || flag9)
						{
							if (Main.tile[num, num2].wall == 62 && Main.rand.Next(8) == 0 && !flag5 && (double)num2 >= Main.rockLayer && num2 < Main.maxTilesY - 210 && !NPC.savedStylist && !NPC.AnyNPCs(354))
							{
								NPC.NewNPC(num * 16 + 8, num2 * 16, 354, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.hardMode)
							{
								NPC.NewNPC(num * 16 + 8, num2 * 16, 163, 0, 0f, 0f, 0f, 0f, 255);
							}
							else
							{
								NPC.NewNPC(num * 16 + 8, num2 * 16, 164, 0, 0f, 0f, 0f, 0f, 255);
							}
						}
						else if ((WallID.Sets.Conversion.HardenedSand[(int)Main.tile[num, num2].wall] || WallID.Sets.Conversion.Sandstone[(int)Main.tile[num, num2].wall] || flag11) && WorldGen.checkUnderground(num, num2))
						{
							if (Main.hardMode && Main.rand.Next(33) == 0 && !flag3 && (double)num2 > Main.worldSurface + 100.0)
							{
								NPC.NewNPC(num * 16 + 8, num2 * 16, 510, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.rand.Next(22) == 0 && !flag3 && (double)num2 > Main.worldSurface + 100.0)
							{
								NPC.NewNPC(num * 16 + 8, num2 * 16, 513, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.hardMode && Main.rand.Next(5) != 0)
							{
								List<int> list = new List<int>();
								if (Main.player[j].ZoneCorrupt)
								{
									list.Add(525);
									list.Add(525);
								}
								if (Main.player[j].ZoneCrimson)
								{
									list.Add(526);
									list.Add(526);
								}
								if (Main.player[j].ZoneHoly)
								{
									list.Add(527);
									list.Add(527);
								}
								if (list.Count == 0)
								{
									list.Add(524);
									list.Add(524);
								}
								if (Main.player[j].ZoneCorrupt || Main.player[j].ZoneCrimson)
								{
									list.Add(533);
									list.Add(529);
								}
								else
								{
									list.Add(530);
									list.Add(528);
								}
								list.Add(532);
								int num56 = Utils.SelectRandom<int>(Main.rand, list.ToArray());
								NPC.NewNPC(num * 16 + 8, num2 * 16, num56, 0, 0f, 0f, 0f, 0f, 255);
								list.Clear();
							}
							else
							{
								int num57 = Utils.SelectRandom<int>(Main.rand, new int[]
								{
									69,
									508,
									508,
									508,
									509
								});
								NPC.NewNPC(num * 16 + 8, num2 * 16, num57, 0, 0f, 0f, 0f, 0f, 255);
							}
						}
						else if (Main.hardMode && flag5 && Main.player[j].ZoneJungle && Main.rand.Next(3) != 0)
						{
							NPC.NewNPC(num * 16 + 8, num2 * 16, 157, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if (Main.hardMode && flag5 && Main.player[j].ZoneCrimson && Main.rand.Next(3) != 0)
						{
							NPC.NewNPC(num * 16 + 8, num2 * 16, 242, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if (Main.hardMode && flag5 && Main.player[j].ZoneCrimson && Main.rand.Next(3) != 0)
						{
							NPC.NewNPC(num * 16 + 8, num2 * 16, 241, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if (flag5 && (num < 250 || num > Main.maxTilesX - 250) && Main.tileSand[num45] && (double)num2 < Main.rockLayer)
						{
							bool flag20 = false;
							if (!NPC.savedAngler && !NPC.AnyNPCs(376))
							{
								int num58 = -1;
								for (int num59 = num2 - 1; num59 > num2 - 50; num59--)
								{
									if (Main.tile[num, num59].liquid == 0 && !WorldGen.SolidTile(num, num59) && !WorldGen.SolidTile(num, num59 + 1) && !WorldGen.SolidTile(num, num59 + 2))
									{
										num58 = num59 + 2;
										break;
									}
								}
								if (num58 > num2)
								{
									num58 = num2;
								}
								if (num58 > 0 && !flag14)
								{
									NPC.NewNPC(num * 16 + 8, num58 * 16, 376, 0, 0f, 0f, 0f, 0f, 255);
									flag20 = true;
								}
							}
							if (!flag20)
							{
								if (Main.rand.Next(60) == 0)
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 220, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(25) == 0)
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 221, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(8) == 0)
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 65, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(3) == 0)
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 67, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 64, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
						}
						else if (!flag5 && !NPC.savedAngler && !NPC.AnyNPCs(376) && (num < 340 || num > Main.maxTilesX - 340) && Main.tileSand[num45] && (double)num2 < Main.worldSurface)
						{
							NPC.NewNPC(num * 16 + 8, num2 * 16, 376, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if (flag5 && (((double)num2 > Main.rockLayer && Main.rand.Next(2) == 0) || num45 == 60))
						{
							if (Main.hardMode && Main.rand.Next(3) > 0)
							{
								NPC.NewNPC(num * 16 + 8, num2 * 16, 102, 0, 0f, 0f, 0f, 0f, 255);
							}
							else
							{
								NPC.NewNPC(num * 16 + 8, num2 * 16, 58, 0, 0f, 0f, 0f, 0f, 255);
							}
						}
						else if (flag5 && (double)num2 > Main.worldSurface && Main.rand.Next(3) == 0)
						{
							if (Main.hardMode)
							{
								NPC.NewNPC(num * 16 + 8, num2 * 16, 103, 0, 0f, 0f, 0f, 0f, 255);
							}
							else
							{
								NPC.NewNPC(num * 16 + 8, num2 * 16, 63, 0, 0f, 0f, 0f, 0f, 255);
							}
						}
						else if (flag5 && Main.rand.Next(4) == 0)
						{
							if (Main.player[j].ZoneCorrupt)
							{
								NPC.NewNPC(num * 16 + 8, num2 * 16, 57, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if ((double)num2 < Main.worldSurface && num2 > 50 && Main.rand.Next(3) != 0 && Main.dayTime)
							{
								int num60 = -1;
								for (int num61 = num2 - 1; num61 > num2 - 50; num61--)
								{
									if (Main.tile[num, num61].liquid == 0 && !WorldGen.SolidTile(num, num61) && !WorldGen.SolidTile(num, num61 + 1) && !WorldGen.SolidTile(num, num61 + 2))
									{
										num60 = num61 + 2;
										break;
									}
								}
								if (num60 > num2)
								{
									num60 = num2;
								}
								if (num60 > 0 && !flag14)
								{
									if (Main.rand.Next(2) == 0)
									{
										NPC.NewNPC(num * 16 + 8, num60 * 16, 362, 0, 0f, 0f, 0f, 0f, 255);
									}
									else
									{
										NPC.NewNPC(num * 16 + 8, num60 * 16, 364, 0, 0f, 0f, 0f, 0f, 255);
									}
								}
								else
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 55, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else
							{
								NPC.NewNPC(num * 16 + 8, num2 * 16, 55, 0, 0f, 0f, 0f, 0f, 255);
							}
						}
						else if (NPC.downedGoblins && Main.rand.Next(20) == 0 && !flag5 && (double)num2 >= Main.rockLayer && num2 < Main.maxTilesY - 210 && !NPC.savedGoblin && !NPC.AnyNPCs(105))
						{
							NPC.NewNPC(num * 16 + 8, num2 * 16, 105, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if (Main.hardMode && Main.rand.Next(20) == 0 && !flag5 && (double)num2 >= Main.rockLayer && num2 < Main.maxTilesY - 210 && !NPC.savedWizard && !NPC.AnyNPCs(106))
						{
							NPC.NewNPC(num * 16 + 8, num2 * 16, 106, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if (flag10)
						{
							if (flag5)
							{
								if ((double)num2 < Main.worldSurface && num2 > 50 && Main.rand.Next(3) != 0 && Main.dayTime)
								{
									int num62 = -1;
									for (int num63 = num2 - 1; num63 > num2 - 50; num63--)
									{
										if (Main.tile[num, num63].liquid == 0 && !WorldGen.SolidTile(num, num63) && !WorldGen.SolidTile(num, num63 + 1) && !WorldGen.SolidTile(num, num63 + 2))
										{
											num62 = num63 + 2;
											break;
										}
									}
									if (num62 > num2)
									{
										num62 = num2;
									}
									if (num62 > 0 && !flag14)
									{
										if (Main.rand.Next(2) == 0)
										{
											NPC.NewNPC(num * 16 + 8, num62 * 16, 362, 0, 0f, 0f, 0f, 0f, 255);
										}
										else
										{
											NPC.NewNPC(num * 16 + 8, num62 * 16, 364, 0, 0f, 0f, 0f, 0f, 255);
										}
									}
									else
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16, 55, 0, 0f, 0f, 0f, 0f, 255);
									}
								}
								else
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 55, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num45 == 147 || num45 == 161)
							{
								if (Main.rand.Next(2) == 0)
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 148, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 149, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num45 == 60)
							{
								if (Main.rand.Next(NPC.goldCritterChance) == 0)
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 445, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 361, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else
							{
								if (num45 != 2 && num45 != 109 && (double)num2 <= Main.worldSurface)
								{
									return;
								}
								if (Main.raining)
								{
									if (Main.rand.Next(NPC.goldCritterChance) == 0)
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16, 448, 0, 0f, 0f, 0f, 0f, 255);
									}
									else if (Main.rand.Next(3) != 0)
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16, 357, 0, 0f, 0f, 0f, 0f, 255);
									}
									else
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16, 230, 0, 0f, 0f, 0f, 0f, 255);
									}
								}
								else if (!Main.dayTime && Main.rand.Next(NPC.fireFlyFriendly) == 0 && (double)num2 <= Main.worldSurface)
								{
									int num64 = 355;
									if (num45 == 109)
									{
										num64 = 358;
									}
									NPC.NewNPC(num * 16 + 8, num2 * 16, num64, 0, 0f, 0f, 0f, 0f, 255);
									if (Main.rand.Next(NPC.fireFlyMultiple) == 0)
									{
										NPC.NewNPC(num * 16 + 8 - 16, num2 * 16, num64, 0, 0f, 0f, 0f, 0f, 255);
									}
									if (Main.rand.Next(NPC.fireFlyMultiple) == 0)
									{
										NPC.NewNPC(num * 16 + 8 + 16, num2 * 16, num64, 0, 0f, 0f, 0f, 0f, 255);
									}
									if (Main.rand.Next(NPC.fireFlyMultiple) == 0)
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16 - 16, num64, 0, 0f, 0f, 0f, 0f, 255);
									}
									if (Main.rand.Next(NPC.fireFlyMultiple) == 0)
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16 + 16, num64, 0, 0f, 0f, 0f, 0f, 255);
									}
								}
								else if (Main.dayTime && Main.time < 18000.0 && Main.rand.Next(3) != 0 && (double)num2 <= Main.worldSurface)
								{
									int num65 = Main.rand.Next(4);
									if (Main.rand.Next(NPC.goldCritterChance) == 0)
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16, 442, 0, 0f, 0f, 0f, 0f, 255);
									}
									else if (num65 == 0)
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16, 297, 0, 0f, 0f, 0f, 0f, 255);
									}
									else if (num65 == 1)
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16, 298, 0, 0f, 0f, 0f, 0f, 255);
									}
									else
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16, 74, 0, 0f, 0f, 0f, 0f, 255);
									}
								}
								else if (Main.dayTime && Main.rand.Next(NPC.butterflyChance) == 0 && (double)num2 <= Main.worldSurface)
								{
									if (Main.rand.Next(NPC.goldCritterChance) == 0)
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16, 444, 0, 0f, 0f, 0f, 0f, 255);
									}
									else
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16, 356, 0, 0f, 0f, 0f, 0f, 255);
									}
									if (Main.rand.Next(4) == 0)
									{
										NPC.NewNPC(num * 16 + 8 - 16, num2 * 16, 356, 0, 0f, 0f, 0f, 0f, 255);
									}
									if (Main.rand.Next(4) == 0)
									{
										NPC.NewNPC(num * 16 + 8 + 16, num2 * 16, 356, 0, 0f, 0f, 0f, 0f, 255);
									}
								}
								else if (Main.rand.Next(2) == 0 && (double)num2 <= Main.worldSurface)
								{
									int num66 = Main.rand.Next(4);
									if (Main.rand.Next(NPC.goldCritterChance) == 0)
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16, 442, 0, 0f, 0f, 0f, 0f, 255);
									}
									else if (num66 == 0)
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16, 297, 0, 0f, 0f, 0f, 0f, 255);
									}
									else if (num66 == 1)
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16, 298, 0, 0f, 0f, 0f, 0f, 255);
									}
									else
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16, 74, 0, 0f, 0f, 0f, 0f, 255);
									}
								}
								else if (num45 == 53)
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(366, 368), 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(NPC.goldCritterChance) == 0)
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 443, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(NPC.goldCritterChance) == 0 && (double)num2 <= Main.worldSurface)
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 539, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.halloween && Main.rand.Next(3) != 0)
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 303, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.xMas && Main.rand.Next(3) != 0)
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 337, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (BirthdayParty.PartyIsUp && Main.rand.Next(3) != 0)
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 540, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(3) == 0 && (double)num2 <= Main.worldSurface)
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, (int)Utils.SelectRandom<short>(Main.rand, new short[]
									{
										299,
										538
									}), 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, 46, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
						}
						else if (Main.player[j].ZoneDungeon)
						{
							int num67 = 0;
							if (Main.tile[num, num2].wall == 94 || Main.tile[num, num2].wall == 96 || Main.tile[num, num2].wall == 98)
							{
								num67 = 1;
							}
							if (Main.tile[num, num2].wall == 95 || Main.tile[num, num2].wall == 97 || Main.tile[num, num2].wall == 99)
							{
								num67 = 2;
							}
							if (Main.rand.Next(7) == 0)
							{
								num67 = Main.rand.Next(3);
							}
							if (!NPC.downedBoss3)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 68, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (!NPC.savedMech && Main.rand.Next(5) == 0 && !flag5 && !NPC.AnyNPCs(123) && (double)num2 > Main.rockLayer)
							{
								NPC.NewNPC(num * 16 + 8, num2 * 16, 123, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (flag12 && Main.rand.Next(30) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 287, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (flag12 && num67 == 0 && Main.rand.Next(15) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 293, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (flag12 && num67 == 1 && Main.rand.Next(15) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 291, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (flag12 && num67 == 2 && Main.rand.Next(15) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 292, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (flag12 && !NPC.AnyNPCs(290) && num67 == 0 && Main.rand.Next(35) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 290, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (flag12 && (num67 == 1 || num67 == 2) && Main.rand.Next(30) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 289, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (flag12 && Main.rand.Next(20) == 0)
							{
								int num68 = 281;
								if (num67 == 0)
								{
									num68 += 2;
								}
								if (num67 == 2)
								{
									num68 += 4;
								}
								num68 += Main.rand.Next(2);
								if (!NPC.AnyNPCs(num68))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, num68, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (flag12 && Main.rand.Next(3) != 0)
							{
								int num69 = 269;
								if (num67 == 0)
								{
									num69 += 4;
								}
								if (num67 == 2)
								{
									num69 += 8;
								}
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, num69 + Main.rand.Next(4), 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.rand.Next(37) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 71, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (num67 == 1 && Main.rand.Next(4) == 0 && !NPC.NearSpikeBall(num, num2))
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 70, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (num67 == 2 && Main.rand.Next(15) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 72, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (num67 == 0 && Main.rand.Next(9) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 34, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.rand.Next(7) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 32, 0, 0f, 0f, 0f, 0f, 255);
							}
							else
							{
								int num70 = Main.rand.Next(5);
								if (num70 == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 294, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (num70 == 1)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 295, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (num70 == 2)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 296, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 31, 0, 0f, 0f, 0f, 0f, 255);
									if (Main.rand.Next(4) == 0)
									{
										Main.npc[num46].SetDefaults("Big Boned");
									}
									else if (Main.rand.Next(5) == 0)
									{
										Main.npc[num46].SetDefaults("Short Bones");
									}
								}
							}
						}
						else if (Main.player[j].ZoneMeteor)
						{
							num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 23, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if (DD2Event.Ongoing && Main.player[j].ZoneOldOneArmy)
						{
							DD2Event.SpawnNPC(ref num46);
						}
						else if ((double)num2 <= Main.worldSurface && !Main.dayTime && Main.snowMoon)
						{
							int num71 = NPC.waveNumber;
							if (Main.rand.Next(30) == 0 && NPC.CountNPCS(341) < 4)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 341, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (num71 >= 20)
							{
								int num72 = Main.rand.Next(3);
								if (num72 == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 345, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (num72 == 1)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 346, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 344, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num71 >= 19)
							{
								if (Main.rand.Next(10) == 0 && NPC.CountNPCS(345) < 4)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 345, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(10) == 0 && NPC.CountNPCS(346) < 5)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 346, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(10) == 0 && NPC.CountNPCS(344) < 7)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 344, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 343, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num71 >= 18)
							{
								if (Main.rand.Next(10) == 0 && NPC.CountNPCS(345) < 3)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 345, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(10) == 0 && NPC.CountNPCS(346) < 4)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 346, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(10) == 0 && NPC.CountNPCS(344) < 6)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 344, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 348, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 351, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 343, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num71 >= 17)
							{
								if (Main.rand.Next(10) == 0 && NPC.CountNPCS(345) < 2)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 345, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(10) == 0 && NPC.CountNPCS(346) < 3)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 346, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(10) == 0 && NPC.CountNPCS(344) < 5)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 344, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(4) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 347, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(2) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 351, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 343, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num71 >= 16)
							{
								if (Main.rand.Next(10) == 0 && NPC.CountNPCS(345) < 2)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 345, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(10) == 0 && NPC.CountNPCS(346) < 2)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 346, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(10) == 0 && NPC.CountNPCS(344) < 4)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 344, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(2) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 352, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 343, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num71 >= 15)
							{
								if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(345))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 345, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(10) == 0 && NPC.CountNPCS(346) < 2)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 346, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(10) == 0 && NPC.CountNPCS(344) < 3)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 344, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 347, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 343, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num71 == 14)
							{
								if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(345))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 345, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(346))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 346, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(344))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 344, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 343, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num71 == 13)
							{
								if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(345))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 345, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(346))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 346, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 352, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(6) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 343, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 342, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 347, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num71 == 12)
							{
								if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(345))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 345, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(344))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 344, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(8) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 343, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 342, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(338, 341), 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num71 == 11)
							{
								if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(345))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 345, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(6) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 352, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(2) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 342, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(338, 341), 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num71 == 10)
							{
								if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(346))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 346, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(10) == 0 && NPC.CountNPCS(344) < 2)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 344, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(6) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 351, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 348, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 347, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(338, 341), 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num71 == 9)
							{
								if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(346))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 346, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(344))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 344, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(2) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 348, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 347, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 342, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num71 == 8)
							{
								if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(346))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 346, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(8) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 351, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 348, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 347, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 350, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num71 == 7)
							{
								if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(346))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 346, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 342, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(4) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 350, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(338, 341), 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num71 == 6)
							{
								if (Main.rand.Next(10) == 0 && NPC.CountNPCS(344) < 2)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 344, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(4) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 347, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(2) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 348, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 350, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num71 == 5)
							{
								if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(344))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 344, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(4) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 350, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(8) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 348, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(338, 341), 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num71 == 4)
							{
								if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(344))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 344, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(4) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 350, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 342, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(338, 341), 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num71 == 3)
							{
								if (Main.rand.Next(8) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 348, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(4) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 350, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 342, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(338, 341), 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num71 == 2)
							{
								if (Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 350, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(338, 341), 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (Main.rand.Next(3) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 342, 0, 0f, 0f, 0f, 0f, 255);
							}
							else
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(338, 341), 0, 0f, 0f, 0f, 0f, 255);
							}
						}
						else if ((double)num2 <= Main.worldSurface && !Main.dayTime && Main.pumpkinMoon)
						{
							int num73 = NPC.waveNumber;
							if (NPC.waveNumber >= 15)
							{
								if (Main.rand.Next(2) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 327, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 325, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num73 == 14)
							{
								if (Main.rand.Next(5) == 0 && NPC.CountNPCS(327) < 3)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 327, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(5) == 0 && NPC.CountNPCS(325) < 3)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 325, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 315, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num73 == 13)
							{
								if (Main.rand.Next(7) == 0 && NPC.CountNPCS(327) < 2)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 327, 0, 0f, 0f, 0f, 0f, 255);
								}
								if (Main.rand.Next(5) == 0 && NPC.CountNPCS(325) < 3)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 325, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(5) == 0 && NPC.CountNPCS(315) < 3)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 315, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 330, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 329, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num73 == 12)
							{
								if (Main.rand.Next(7) == 0 && NPC.CountNPCS(327) < 2)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 327, 0, 0f, 0f, 0f, 0f, 255);
								}
								if (Main.rand.Next(7) == 0 && NPC.CountNPCS(325) < 2)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 325, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(7) == 0 && NPC.CountNPCS(315) < 2)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 315, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(7) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 330, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(5) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 329, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 326, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num73 == 11)
							{
								if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(327))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 327, 0, 0f, 0f, 0f, 0f, 255);
								}
								if (Main.rand.Next(7) == 0 && NPC.CountNPCS(325) < 2)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 325, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(315))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 315, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(10) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 330, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(7) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 329, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 326, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(305, 315), 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num73 == 10)
							{
								if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(327))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 327, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(325))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 325, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(315))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 315, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(8) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 330, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(5) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 329, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 326, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num73 == 9)
							{
								if (Main.rand.Next(8) == 0 && !NPC.AnyNPCs(327))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 327, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(8) == 0 && !NPC.AnyNPCs(325))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 325, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(315))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 315, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(305, 315), 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num73 == 8)
							{
								if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(327))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 327, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(5) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 330, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 329, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 326, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num73 == 7)
							{
								if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(327))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 327, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(8) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 330, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(5) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 329, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(305, 315), 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num73 == 6)
							{
								if (Main.rand.Next(7) == 0 && NPC.CountNPCS(325) < 2)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 325, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(6) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 330, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 329, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 326, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num73 == 5)
							{
								if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(325))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 325, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(8) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 330, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(5) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 329, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(2) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 326, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(305, 315), 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num73 == 4)
							{
								if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(325))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 325, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(10) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 329, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(2) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 326, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(305, 315), 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num73 == 3)
							{
								if (Main.rand.Next(6) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 329, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 326, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(305, 315), 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num73 == 2)
							{
								if (Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 326, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(305, 315), 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(305, 315), 0, 0f, 0f, 0f, 0f, 255);
							}
						}
						else if ((double)num2 <= Main.worldSurface && Main.dayTime && Main.eclipse)
						{
							bool flag21 = false;
							if (NPC.downedMechBoss1 && NPC.downedMechBoss2 && NPC.downedMechBoss3)
							{
								flag21 = true;
							}
							if (flag21 && Main.rand.Next(80) == 0 && !NPC.AnyNPCs(477))
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 477, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.rand.Next(50) == 0 && !NPC.AnyNPCs(251))
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 251, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (NPC.downedPlantBoss && Main.rand.Next(5) == 0 && !NPC.AnyNPCs(466))
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 466, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (NPC.downedPlantBoss && Main.rand.Next(20) == 0 && !NPC.AnyNPCs(463))
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 463, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (NPC.downedPlantBoss && Main.rand.Next(20) == 0 && NPC.CountNPCS(467) < 2)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 467, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.rand.Next(15) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 159, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (flag21 && Main.rand.Next(13) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 253, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.rand.Next(8) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 469, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (NPC.downedPlantBoss && Main.rand.Next(7) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 468, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (NPC.downedPlantBoss && Main.rand.Next(5) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 460, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.rand.Next(4) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 162, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.rand.Next(3) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 461, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.rand.Next(2) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 462, 0, 0f, 0f, 0f, 0f, 255);
							}
							else
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 166, 0, 0f, 0f, 0f, 0f, 255);
							}
						}
						else if (Main.hardMode && num3 == 70 && flag5)
						{
							num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 256, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if (num3 == 70 && (double)num2 <= Main.worldSurface && Main.rand.Next(3) != 0)
						{
							if ((!Main.hardMode && Main.rand.Next(6) == 0) || Main.rand.Next(12) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 360, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.rand.Next(3) == 0)
							{
								if (Main.rand.Next(4) == 0)
								{
									if (Main.hardMode && Main.rand.Next(3) != 0)
									{
										num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 260, 0, 0f, 0f, 0f, 0f, 255);
										Main.npc[num46].ai[0] = (float)num;
										Main.npc[num46].ai[1] = (float)num2;
										Main.npc[num46].netUpdate = true;
									}
									else
									{
										num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 259, 0, 0f, 0f, 0f, 0f, 255);
										Main.npc[num46].ai[0] = (float)num;
										Main.npc[num46].ai[1] = (float)num2;
										Main.npc[num46].netUpdate = true;
									}
								}
								else if (Main.rand.Next(2) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 257, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 258, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (Main.rand.Next(2) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 254, 0, 0f, 0f, 0f, 0f, 255);
							}
							else
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 255, 0, 0f, 0f, 0f, 0f, 255);
							}
						}
						else if (num3 == 70 && Main.hardMode && (double)num2 >= Main.worldSurface && Main.rand.Next(3) != 0)
						{
							if (Main.hardMode && Main.rand.Next(5) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 374, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if ((!Main.hardMode && Main.rand.Next(4) == 0) || Main.rand.Next(8) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 360, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.rand.Next(4) == 0)
							{
								if (Main.hardMode && Main.rand.Next(3) != 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 260, 0, 0f, 0f, 0f, 0f, 255);
									Main.npc[num46].ai[0] = (float)num;
									Main.npc[num46].ai[1] = (float)num2;
									Main.npc[num46].netUpdate = true;
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 259, 0, 0f, 0f, 0f, 0f, 255);
									Main.npc[num46].ai[0] = (float)num;
									Main.npc[num46].ai[1] = (float)num2;
									Main.npc[num46].netUpdate = true;
								}
							}
							else if (Main.rand.Next(2) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 257, 0, 0f, 0f, 0f, 0f, 255);
							}
							else
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 258, 0, 0f, 0f, 0f, 0f, 255);
							}
						}
						else if (Main.player[j].ZoneCorrupt && Main.rand.Next(65) == 0 && !flag3)
						{
							if (Main.hardMode && Main.rand.Next(4) != 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 98, 1, 0f, 0f, 0f, 0f, 255);
							}
							else
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 7, 1, 0f, 0f, 0f, 0f, 255);
							}
						}
						else if (Main.hardMode && (double)num2 > Main.worldSurface && Main.rand.Next(75) == 0)
						{
							if (Main.rand.Next(2) == 0 && Main.player[j].ZoneCorrupt && !NPC.AnyNPCs(473))
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 473, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.rand.Next(2) == 0 && Main.player[j].ZoneCrimson && !NPC.AnyNPCs(474))
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 474, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.rand.Next(2) == 0 && Main.player[j].ZoneHoly && !NPC.AnyNPCs(475))
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 475, 0, 0f, 0f, 0f, 0f, 255);
							}
							else
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 85, 0, 0f, 0f, 0f, 0f, 255);
							}
						}
						else if (Main.hardMode && Main.tile[num, num2 - 1].wall == 2 && Main.rand.Next(20) == 0)
						{
							num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 85, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if (Main.hardMode && (double)num2 <= Main.worldSurface && !Main.dayTime && (Main.rand.Next(20) == 0 || (Main.rand.Next(5) == 0 && Main.moonPhase == 4)))
						{
							num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 82, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if (Main.hardMode && Main.halloween && (double)num2 <= Main.worldSurface && !Main.dayTime && Main.rand.Next(10) == 0)
						{
							num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 304, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if (num45 == 60 && Main.rand.Next(500) == 0 && !Main.dayTime)
						{
							num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 52, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if (num45 == 60 && (double)num2 > Main.worldSurface && Main.rand.Next(60) == 0)
						{
							num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 219, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if ((double)num2 > Main.worldSurface && num2 < Main.maxTilesY - 210 && !Main.player[j].ZoneSnow && !Main.player[j].ZoneCrimson && !Main.player[j].ZoneCorrupt && !Main.player[j].ZoneJungle && !Main.player[j].ZoneHoly && Main.rand.Next(8) == 0)
						{
							if (Main.rand.Next(NPC.goldCritterChance) == 0)
							{
								NPC.NewNPC(num * 16 + 8, num2 * 16, 448, 0, 0f, 0f, 0f, 0f, 255);
							}
							else
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 357, 0, 0f, 0f, 0f, 0f, 255);
							}
						}
						else if ((double)num2 > Main.worldSurface && num2 < Main.maxTilesY - 210 && !Main.player[j].ZoneSnow && !Main.player[j].ZoneCrimson && !Main.player[j].ZoneCorrupt && !Main.player[j].ZoneJungle && !Main.player[j].ZoneHoly && Main.rand.Next(13) == 0)
						{
							if (Main.rand.Next(NPC.goldCritterChance) == 0)
							{
								NPC.NewNPC(num * 16 + 8, num2 * 16, 447, 0, 0f, 0f, 0f, 0f, 255);
							}
							else
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 300, 0, 0f, 0f, 0f, 0f, 255);
							}
						}
						else if ((double)num2 > Main.worldSurface && (double)num2 < (Main.rockLayer + (double)Main.maxTilesY) / 2.0 && !Main.player[j].ZoneSnow && !Main.player[j].ZoneCrimson && !Main.player[j].ZoneCorrupt && !Main.player[j].ZoneHoly && Main.rand.Next(13) == 0)
						{
							num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 359, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if ((double)num2 < Main.worldSurface && Main.player[j].ZoneJungle && Main.rand.Next(9) == 0)
						{
							if (Main.rand.Next(NPC.goldCritterChance) == 0)
							{
								NPC.NewNPC(num * 16 + 8, num2 * 16, 445, 0, 0f, 0f, 0f, 0f, 255);
							}
							else
							{
								NPC.NewNPC(num * 16 + 8, num2 * 16, 361, 0, 0f, 0f, 0f, 0f, 255);
							}
						}
						else if (num45 == 60 && Main.hardMode && Main.rand.Next(3) != 0)
						{
							if ((double)num2 < Main.worldSurface && !Main.dayTime && Main.rand.Next(3) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 152, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if ((double)num2 < Main.worldSurface && Main.dayTime && Main.rand.Next(4) != 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 177, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if ((double)num2 > Main.worldSurface && Main.rand.Next(100) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 205, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if ((double)num2 > Main.worldSurface && Main.rand.Next(5) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 236, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if ((double)num2 > Main.worldSurface && Main.rand.Next(4) != 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 176, 0, 0f, 0f, 0f, 0f, 255);
								if (Main.rand.Next(10) == 0)
								{
									Main.npc[num46].SetDefaults("Tiny Moss Hornet");
								}
								if (Main.rand.Next(10) == 0)
								{
									Main.npc[num46].SetDefaults("Little Moss Hornet");
								}
								if (Main.rand.Next(10) == 0)
								{
									Main.npc[num46].SetDefaults("Big Moss Hornet");
								}
								if (Main.rand.Next(10) == 0)
								{
									Main.npc[num46].SetDefaults("Giant Moss Hornet");
								}
							}
							else if (Main.rand.Next(3) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 175, 0, 0f, 0f, 0f, 0f, 255);
								Main.npc[num46].ai[0] = (float)num;
								Main.npc[num46].ai[1] = (float)num2;
								Main.npc[num46].netUpdate = true;
							}
							else
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 153, 0, 0f, 0f, 0f, 0f, 255);
							}
						}
						else if (num45 == 226 && flag2)
						{
							if (Main.rand.Next(3) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 226, 0, 0f, 0f, 0f, 0f, 255);
							}
							else
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 198, 0, 0f, 0f, 0f, 0f, 255);
							}
						}
						else if (num45 == 60 && (double)num2 > (Main.worldSurface + Main.rockLayer) / 2.0)
						{
							if (Main.rand.Next(4) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 204, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.rand.Next(4) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 43, 0, 0f, 0f, 0f, 0f, 255);
								Main.npc[num46].ai[0] = (float)num;
								Main.npc[num46].ai[1] = (float)num2;
								Main.npc[num46].netUpdate = true;
							}
							else
							{
								int num74 = Main.rand.Next(8);
								if (num74 == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 231, 0, 0f, 0f, 0f, 0f, 255);
									if (Main.rand.Next(4) == 0)
									{
										Main.npc[num46].SetDefaults("Little Hornet Fatty");
									}
									else if (Main.rand.Next(4) == 0)
									{
										Main.npc[num46].SetDefaults("Big Hornet Fatty");
									}
								}
								else if (num74 == 1)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 232, 0, 0f, 0f, 0f, 0f, 255);
									if (Main.rand.Next(4) == 0)
									{
										Main.npc[num46].SetDefaults("Little Hornet Honey");
									}
									else if (Main.rand.Next(4) == 0)
									{
										Main.npc[num46].SetDefaults("Big Hornet Honey");
									}
								}
								else if (num74 == 2)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 233, 0, 0f, 0f, 0f, 0f, 255);
									if (Main.rand.Next(4) == 0)
									{
										Main.npc[num46].SetDefaults("Little Hornet Leafy");
									}
									else if (Main.rand.Next(4) == 0)
									{
										Main.npc[num46].SetDefaults("Big Hornet Leafy");
									}
								}
								else if (num74 == 3)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 234, 0, 0f, 0f, 0f, 0f, 255);
									if (Main.rand.Next(4) == 0)
									{
										Main.npc[num46].SetDefaults("Little Hornet Spikey");
									}
									else if (Main.rand.Next(4) == 0)
									{
										Main.npc[num46].SetDefaults("Big Hornet Spikey");
									}
								}
								else if (num74 == 4)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 235, 0, 0f, 0f, 0f, 0f, 255);
									if (Main.rand.Next(4) == 0)
									{
										Main.npc[num46].SetDefaults("Little Hornet Stingy");
									}
									else if (Main.rand.Next(4) == 0)
									{
										Main.npc[num46].SetDefaults("Big Hornet Stingy");
									}
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 42, 0, 0f, 0f, 0f, 0f, 255);
									if (Main.rand.Next(4) == 0)
									{
										Main.npc[num46].SetDefaults("Little Stinger");
									}
									else if (Main.rand.Next(4) == 0)
									{
										Main.npc[num46].SetDefaults("Big Stinger");
									}
								}
							}
						}
						else if (num45 == 60 && Main.rand.Next(4) == 0)
						{
							num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 51, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if (num45 == 60 && Main.rand.Next(8) == 0)
						{
							num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 56, 0, 0f, 0f, 0f, 0f, 255);
							Main.npc[num46].ai[0] = (float)num;
							Main.npc[num46].ai[1] = (float)num2;
							Main.npc[num46].netUpdate = true;
						}
						else if (Sandstorm.Happening && Main.player[j].ZoneSandstorm && TileID.Sets.Conversion.Sand[num45] && NPC.Spawning_SandstoneCheck(num, num2))
						{
							if (!NPC.downedBoss1 && !Main.hardMode)
							{
								if (Main.rand.Next(2) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 546, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(2) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 508, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(2) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 61, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 69, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (Main.hardMode && Main.rand.Next(20) == 0 && !NPC.AnyNPCs(541))
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 541, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.hardMode && !flag3 && Main.rand.Next(3) == 0 && NPC.CountNPCS(510) < 4)
							{
								num46 = NPC.NewNPC(num * 16 + 8, (num2 + 10) * 16, 510, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.hardMode && !flag3 && Main.rand.Next(2) == 0)
							{
								int num75 = 542;
								if (TileID.Sets.Corrupt[num45])
								{
									num75 = 543;
								}
								if (TileID.Sets.Crimson[num45])
								{
									num75 = 544;
								}
								if (TileID.Sets.Hallow[num45])
								{
									num75 = 545;
								}
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, num75, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.hardMode && num45 == 53 && Main.rand.Next(3) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 78, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.hardMode && (num45 == 112 || num45 == 234) && Main.rand.Next(3) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 79, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.hardMode && num45 == 116 && Main.rand.Next(3) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 80, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.rand.Next(2) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 546, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.rand.Next(2) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 508, 0, 0f, 0f, 0f, 0f, 255);
							}
							else
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 509, 0, 0f, 0f, 0f, 0f, 255);
							}
						}
						else if (Main.hardMode && num45 == 53 && Main.rand.Next(3) == 0)
						{
							num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 78, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if (Main.hardMode && (num45 == 112 || num45 == 234) && Main.rand.Next(2) == 0)
						{
							num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 79, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if (Main.hardMode && num45 == 116 && Main.rand.Next(2) == 0)
						{
							num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 80, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if (Main.hardMode && !flag5 && (double)num2 < Main.rockLayer && (num45 == 116 || num45 == 117 || num45 == 109 || num45 == 164))
						{
							if (!Main.dayTime && Main.rand.Next(2) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 122, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.rand.Next(10) == 0 || (Main.player[j].ZoneWaterCandle && Main.rand.Next(10) == 0))
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 86, 0, 0f, 0f, 0f, 0f, 255);
							}
							else
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 75, 0, 0f, 0f, 0f, 0f, 255);
							}
						}
						else if (!flag3 && Main.hardMode && Main.rand.Next(50) == 0 && !flag5 && (double)num2 >= Main.rockLayer && (num45 == 116 || num45 == 117 || num45 == 109 || num45 == 164))
						{
							num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 84, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if ((num45 == 204 && Main.player[j].ZoneCrimson) || num45 == 199 || num45 == 200 || num45 == 203 || num45 == 234)
						{
							if (Main.hardMode && (double)num2 >= Main.rockLayer && Main.rand.Next(5) == 0 && !flag3)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 182, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.hardMode && (double)num2 >= Main.rockLayer && Main.rand.Next(2) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 268, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.hardMode && Main.rand.Next(3) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 183, 0, 0f, 0f, 0f, 0f, 255);
								if (Main.rand.Next(3) == 0)
								{
									Main.npc[num46].SetDefaults("Little Crimslime");
								}
								else if (Main.rand.Next(3) == 0)
								{
									Main.npc[num46].SetDefaults("Big Crimslime");
								}
							}
							else if (Main.hardMode && (double)num2 >= Main.rockLayer && Main.rand.Next(40) == 0 && !flag3)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 179, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.hardMode && (Main.rand.Next(2) == 0 || (double)num2 > Main.worldSurface))
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 174, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if ((Main.tile[num, num2].wall > 0 && Main.rand.Next(4) != 0) || Main.rand.Next(8) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 239, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.rand.Next(2) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 181, 0, 0f, 0f, 0f, 0f, 255);
							}
							else
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 173, 0, 0f, 0f, 0f, 0f, 255);
								if (Main.rand.Next(3) == 0)
								{
									Main.npc[num46].SetDefaults("Little Crimera");
								}
								else if (Main.rand.Next(3) == 0)
								{
									Main.npc[num46].SetDefaults("Big Crimera");
								}
							}
						}
						else if ((num45 == 22 && Main.player[j].ZoneCorrupt) || num45 == 23 || num45 == 25 || num45 == 112 || num45 == 163)
						{
							if (Main.hardMode && (double)num2 >= Main.rockLayer && Main.rand.Next(3) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 101, 0, 0f, 0f, 0f, 0f, 255);
								Main.npc[num46].ai[0] = (float)num;
								Main.npc[num46].ai[1] = (float)num2;
								Main.npc[num46].netUpdate = true;
							}
							else if (Main.hardMode && Main.rand.Next(3) == 0)
							{
								if (Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 121, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 81, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (Main.hardMode && (double)num2 >= Main.rockLayer && Main.rand.Next(40) == 0 && !flag3)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 83, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.hardMode && (Main.rand.Next(2) == 0 || (double)num2 > Main.rockLayer))
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 94, 0, 0f, 0f, 0f, 0f, 255);
							}
							else
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 6, 0, 0f, 0f, 0f, 0f, 255);
								if (Main.rand.Next(3) == 0)
								{
									Main.npc[num46].SetDefaults("Little Eater");
								}
								else if (Main.rand.Next(3) == 0)
								{
									Main.npc[num46].SetDefaults("Big Eater");
								}
							}
						}
						else if ((double)num2 <= Main.worldSurface)
						{
							bool flag22 = (float)Math.Abs(num - Main.maxTilesX / 2) / (float)(Main.maxTilesX / 2) > 0.33f;
							if (flag22)
							{
								bool flag23 = NPC.AnyDanger();
								if (flag23)
								{
									flag22 = false;
								}
							}
							if (Main.player[j].ZoneSnow && Main.hardMode && Main.cloudAlpha > 0f && !NPC.AnyNPCs(243) && Main.rand.Next(20) == 0)
							{
								NPC.NewNPC(num * 16 + 8, num2 * 16, 243, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.player[j].ZoneHoly && Main.hardMode && Main.cloudAlpha > 0f && !NPC.AnyNPCs(244) && Main.rand.Next(20) == 0)
							{
								NPC.NewNPC(num * 16 + 8, num2 * 16, 244, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (!Main.player[j].ZoneSnow && Main.hardMode && Main.cloudAlpha > 0f && NPC.CountNPCS(250) < 2 && Main.rand.Next(10) == 0)
							{
								NPC.NewNPC(num * 16 + 8, num2 * 16, 250, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (flag22 && Main.hardMode && NPC.downedGolemBoss && ((!NPC.downedMartians && Main.rand.Next(100) == 0) || Main.rand.Next(400) == 0) && !NPC.AnyNPCs(399))
							{
								NPC.NewNPC(num * 16 + 8, num2 * 16, 399, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.dayTime)
							{
								int num76 = Math.Abs(num - Main.spawnTileX);
								if (num76 < Main.maxTilesX / 3 && Main.rand.Next(15) == 0 && (num45 == 2 || num45 == 109 || num45 == 147 || num45 == 161))
								{
									if (num45 == 147 || num45 == 161)
									{
										if (Main.rand.Next(2) == 0)
										{
											NPC.NewNPC(num * 16 + 8, num2 * 16, 148, 0, 0f, 0f, 0f, 0f, 255);
										}
										else
										{
											NPC.NewNPC(num * 16 + 8, num2 * 16, 149, 0, 0f, 0f, 0f, 0f, 255);
										}
									}
									else if (Main.dayTime && Main.rand.Next(NPC.butterflyChance) == 0 && (double)num2 <= Main.worldSurface)
									{
										if (Main.rand.Next(NPC.goldCritterChance) == 0)
										{
											NPC.NewNPC(num * 16 + 8, num2 * 16, 444, 0, 0f, 0f, 0f, 0f, 255);
										}
										else
										{
											NPC.NewNPC(num * 16 + 8, num2 * 16, 356, 0, 0f, 0f, 0f, 0f, 255);
										}
										if (Main.rand.Next(4) == 0)
										{
											NPC.NewNPC(num * 16 + 8 - 16, num2 * 16, 356, 0, 0f, 0f, 0f, 0f, 255);
										}
										if (Main.rand.Next(4) == 0)
										{
											NPC.NewNPC(num * 16 + 8 + 16, num2 * 16, 356, 0, 0f, 0f, 0f, 0f, 255);
										}
									}
									else if (Main.rand.Next(NPC.goldCritterChance) == 0)
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16, 443, 0, 0f, 0f, 0f, 0f, 255);
									}
									else if (Main.rand.Next(NPC.goldCritterChance) == 0 && (double)num2 <= Main.worldSurface)
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16, 539, 0, 0f, 0f, 0f, 0f, 255);
									}
									else if (Main.halloween && Main.rand.Next(3) != 0)
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16, 303, 0, 0f, 0f, 0f, 0f, 255);
									}
									else if (Main.xMas && Main.rand.Next(3) != 0)
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16, 337, 0, 0f, 0f, 0f, 0f, 255);
									}
									else if (BirthdayParty.PartyIsUp && Main.rand.Next(3) != 0)
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16, 540, 0, 0f, 0f, 0f, 0f, 255);
									}
									else if (Main.rand.Next(3) == 0 && (double)num2 <= Main.worldSurface)
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16, (int)Utils.SelectRandom<short>(Main.rand, new short[]
										{
											299,
											538
										}), 0, 0f, 0f, 0f, 0f, 255);
									}
									else
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16, 46, 0, 0f, 0f, 0f, 0f, 255);
									}
								}
								else if (num76 < Main.maxTilesX / 3 && Main.rand.Next(15) == 0 && num45 == 53)
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(366, 368), 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (num76 < Main.maxTilesX / 3 && Main.dayTime && Main.time < 18000.0 && (num45 == 2 || num45 == 109) && Main.rand.Next(4) == 0 && (double)num2 <= Main.worldSurface && NPC.CountNPCS(74) + NPC.CountNPCS(297) + NPC.CountNPCS(298) < 6)
								{
									int num77 = Main.rand.Next(4);
									if (Main.rand.Next(NPC.goldCritterChance) == 0)
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16, 442, 0, 0f, 0f, 0f, 0f, 255);
									}
									else if (num77 == 0)
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16, 297, 0, 0f, 0f, 0f, 0f, 255);
									}
									else if (num77 == 1)
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16, 298, 0, 0f, 0f, 0f, 0f, 255);
									}
									else
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16, 74, 0, 0f, 0f, 0f, 0f, 255);
									}
								}
								else if (num76 < Main.maxTilesX / 3 && Main.rand.Next(15) == 0 && (num45 == 2 || num45 == 109 || num45 == 147))
								{
									int num78 = Main.rand.Next(4);
									if (Main.rand.Next(NPC.goldCritterChance) == 0)
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16, 442, 0, 0f, 0f, 0f, 0f, 255);
									}
									else if (num78 == 0)
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16, 297, 0, 0f, 0f, 0f, 0f, 255);
									}
									else if (num78 == 1)
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16, 298, 0, 0f, 0f, 0f, 0f, 255);
									}
									else
									{
										NPC.NewNPC(num * 16 + 8, num2 * 16, 74, 0, 0f, 0f, 0f, 0f, 255);
									}
								}
								else if (num76 > Main.maxTilesX / 3 && num45 == 2 && Main.rand.Next(300) == 0 && !NPC.AnyNPCs(50))
								{
									NPC.SpawnOnPlayer(j, 50);
								}
								else if (num45 == 53 && Main.rand.Next(5) == 0 && NPC.Spawning_SandstoneCheck(num, num2) && !flag5)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 69, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (num45 == 53 && Main.rand.Next(3) == 0 && !flag5)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 537, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (num45 == 53 && !flag5)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 61, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (num76 > Main.maxTilesX / 3 && (Main.rand.Next(15) == 0 || (!NPC.downedGoblins && WorldGen.shadowOrbSmashed && Main.rand.Next(7) == 0)))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 73, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.raining && Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 224, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.raining && Main.rand.Next(2) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 225, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 1, 0, 0f, 0f, 0f, 0f, 255);
									if (num45 == 60)
									{
										Main.npc[num46].SetDefaults("Jungle Slime");
									}
									else if (num45 == 161 || num45 == 147)
									{
										Main.npc[num46].SetDefaults("Ice Slime");
									}
									else if (Main.halloween && Main.rand.Next(3) != 0)
									{
										Main.npc[num46].SetDefaults(302, -1f);
									}
									else if (Main.xMas && Main.rand.Next(3) != 0)
									{
										Main.npc[num46].SetDefaults(Main.rand.Next(333, 337), -1f);
									}
									else if (Main.rand.Next(3) == 0 || (num76 < 200 && !Main.expertMode))
									{
										Main.npc[num46].SetDefaults("Green Slime");
									}
									else if (Main.rand.Next(10) == 0 && (num76 > 400 || Main.expertMode))
									{
										Main.npc[num46].SetDefaults("Purple Slime");
									}
								}
							}
							else if ((num3 == 2 || num3 == 109) && Main.rand.Next(NPC.fireFlyChance) == 0 && (double)num2 <= Main.worldSurface)
							{
								int num79 = 355;
								if (num45 == 109)
								{
									num79 = 358;
								}
								NPC.NewNPC(num * 16 + 8, num2 * 16, num79, 0, 0f, 0f, 0f, 0f, 255);
								if (Main.rand.Next(NPC.fireFlyMultiple) == 0)
								{
									NPC.NewNPC(num * 16 + 8 - 16, num2 * 16, num79, 0, 0f, 0f, 0f, 0f, 255);
								}
								if (Main.rand.Next(NPC.fireFlyMultiple) == 0)
								{
									NPC.NewNPC(num * 16 + 8 + 16, num2 * 16, num79, 0, 0f, 0f, 0f, 0f, 255);
								}
								if (Main.rand.Next(NPC.fireFlyMultiple) == 0)
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16 - 16, num79, 0, 0f, 0f, 0f, 0f, 255);
								}
								if (Main.rand.Next(NPC.fireFlyMultiple) == 0)
								{
									NPC.NewNPC(num * 16 + 8, num2 * 16 + 16, num79, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (Main.rand.Next(10) == 0 && Main.halloween)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 301, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.rand.Next(6) == 0 || (Main.moonPhase == 4 && Main.rand.Next(2) == 0))
							{
								if (Main.hardMode && Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 133, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.halloween && Main.rand.Next(2) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(317, 319), 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.rand.Next(2) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 2, 0, 0f, 0f, 0f, 0f, 255);
									if (Main.rand.Next(4) == 0)
									{
										Main.npc[num46].SetDefaults("Demon Eye 2");
									}
								}
								else
								{
									int num80 = Main.rand.Next(5);
									if (num80 == 0)
									{
										num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 190, 0, 0f, 0f, 0f, 0f, 255);
										if (Main.rand.Next(3) == 0)
										{
											Main.npc[num46].SetDefaults("Cataract Eye 2");
										}
									}
									else if (num80 == 1)
									{
										num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 191, 0, 0f, 0f, 0f, 0f, 255);
										if (Main.rand.Next(3) == 0)
										{
											Main.npc[num46].SetDefaults("Sleepy Eye 2");
										}
									}
									else if (num80 == 2)
									{
										num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 192, 0, 0f, 0f, 0f, 0f, 255);
										if (Main.rand.Next(3) == 0)
										{
											Main.npc[num46].SetDefaults("Dialated Eye 2");
										}
									}
									else if (num80 == 3)
									{
										num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 193, 0, 0f, 0f, 0f, 0f, 255);
										if (Main.rand.Next(3) == 0)
										{
											Main.npc[num46].SetDefaults("Green Eye 2");
										}
									}
									else if (num80 == 4)
									{
										num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 194, 0, 0f, 0f, 0f, 0f, 255);
										if (Main.rand.Next(3) == 0)
										{
											Main.npc[num46].SetDefaults("Purple Eye 2");
										}
									}
								}
							}
							else if (Main.hardMode && Main.rand.Next(50) == 0 && Main.bloodMoon && !NPC.AnyNPCs(109))
							{
								NPC.NewNPC(num * 16 + 8, num2 * 16, 109, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.rand.Next(250) == 0 && Main.bloodMoon)
							{
								NPC.NewNPC(num * 16 + 8, num2 * 16, 53, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.rand.Next(250) == 0 && Main.bloodMoon)
							{
								NPC.NewNPC(num * 16 + 8, num2 * 16, 536, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.moonPhase == 0 && Main.hardMode && Main.rand.Next(3) != 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 104, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.hardMode && Main.rand.Next(3) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 140, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.bloodMoon && Main.rand.Next(5) < 2)
							{
								if (Main.rand.Next(2) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 489, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 490, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (num3 == 147 || num3 == 161 || num3 == 163 || num3 == 164 || num3 == 162)
							{
								if (Main.hardMode && Main.rand.Next(4) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 169, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.hardMode && Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 155, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.expertMode && Main.rand.Next(2) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 431, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 161, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (Main.raining && Main.rand.Next(2) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 223, 0, 0f, 0f, 0f, 0f, 255);
								if (Main.rand.Next(3) == 0)
								{
									if (Main.rand.Next(2) == 0)
									{
										Main.npc[num46].SetDefaults("Small Rain Zombie");
									}
									else
									{
										Main.npc[num46].SetDefaults("Big Rain Zombie");
									}
								}
							}
							else
							{
								int num81 = Main.rand.Next(7);
								if (Main.halloween && Main.rand.Next(2) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(319, 322), 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.xMas && Main.rand.Next(2) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(331, 333), 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (num81 == 0 && Main.expertMode && Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 430, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (num81 == 2 && Main.expertMode && Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 432, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (num81 == 3 && Main.expertMode && Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 433, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (num81 == 4 && Main.expertMode && Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 434, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (num81 == 5 && Main.expertMode && Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 435, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (num81 == 6 && Main.expertMode && Main.rand.Next(3) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 436, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (num81 == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 3, 0, 0f, 0f, 0f, 0f, 255);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[num46].SetDefaults("Small Zombie");
										}
										else
										{
											Main.npc[num46].SetDefaults("Big Zombie");
										}
									}
								}
								else if (num81 == 1)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 132, 0, 0f, 0f, 0f, 0f, 255);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[num46].SetDefaults("Small Bald Zombie");
										}
										else
										{
											Main.npc[num46].SetDefaults("Big Bald Zombie");
										}
									}
								}
								else if (num81 == 2)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 186, 0, 0f, 0f, 0f, 0f, 255);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[num46].SetDefaults("Small Pincushion Zombie");
										}
										else
										{
											Main.npc[num46].SetDefaults("Big Pincushion Zombie");
										}
									}
								}
								else if (num81 == 3)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 187, 0, 0f, 0f, 0f, 0f, 255);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[num46].SetDefaults("Small Slimed Zombie");
										}
										else
										{
											Main.npc[num46].SetDefaults("Big Slimed Zombie");
										}
									}
								}
								else if (num81 == 4)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 188, 0, 0f, 0f, 0f, 0f, 255);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[num46].SetDefaults("Small Swamp Zombie");
										}
										else
										{
											Main.npc[num46].SetDefaults("Big Swamp Zombie");
										}
									}
								}
								else if (num81 == 5)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 189, 0, 0f, 0f, 0f, 0f, 255);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[num46].SetDefaults("Small Twiggy Zombie");
										}
										else
										{
											Main.npc[num46].SetDefaults("Big Twiggy Zombie");
										}
									}
								}
								else if (num81 == 6)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 200, 0, 0f, 0f, 0f, 0f, 255);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[num46].SetDefaults("Small Female Zombie");
										}
										else
										{
											Main.npc[num46].SetDefaults("Big Female Zombie");
										}
									}
								}
							}
						}
						else if ((double)num2 <= Main.rockLayer)
						{
							if (!flag3 && Main.rand.Next(50) == 0 && !Main.player[j].ZoneSnow)
							{
								if (Main.hardMode)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 95, 1, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.player[j].ZoneSnow)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 185, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 10, 1, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (Main.hardMode && Main.rand.Next(3) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 140, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.hardMode && Main.rand.Next(4) != 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 141, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (num45 == 147 || num45 == 161 || Main.player[j].ZoneSnow)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 147, 0, 0f, 0f, 0f, 0f, 255);
							}
							else
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 1, 0, 0f, 0f, 0f, 0f, 255);
								if (Main.rand.Next(5) == 0)
								{
									Main.npc[num46].SetDefaults("Yellow Slime");
								}
								else if (Main.rand.Next(2) == 0)
								{
									Main.npc[num46].SetDefaults("Blue Slime");
								}
								else
								{
									Main.npc[num46].SetDefaults("Red Slime");
								}
							}
						}
						else if (num2 > Main.maxTilesY - 190)
						{
							if (Main.hardMode && !NPC.savedTaxCollector && Main.rand.Next(20) == 0 && !NPC.AnyNPCs(534))
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 534, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.rand.Next(40) == 0 && !NPC.AnyNPCs(39))
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 39, 1, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.rand.Next(14) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 24, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.rand.Next(7) == 0)
							{
								if (Main.rand.Next(7) == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 66, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (Main.hardMode && NPC.downedMechBossAny && Main.rand.Next(5) != 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 156, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 62, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (Main.rand.Next(3) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 59, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.hardMode && NPC.downedMechBossAny && Main.rand.Next(5) != 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 151, 0, 0f, 0f, 0f, 0f, 255);
							}
							else
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 60, 0, 0f, 0f, 0f, 0f, 255);
							}
						}
						else if (Main.rand.Next(60) == 0)
						{
							if (Main.player[j].ZoneSnow)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 218, 0, 0f, 0f, 0f, 0f, 255);
							}
							else
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 217, 0, 0f, 0f, 0f, 0f, 255);
							}
						}
						else if ((num45 == 116 || num45 == 117 || num45 == 164) && Main.hardMode && !flag3 && Main.rand.Next(8) == 0)
						{
							num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 120, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if ((num3 == 147 || num3 == 161 || num3 == 162 || num3 == 163 || num3 == 164) && !flag3 && Main.hardMode && Main.player[j].ZoneCorrupt && Main.rand.Next(30) == 0)
						{
							num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 170, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if ((num3 == 147 || num3 == 161 || num3 == 162 || num3 == 163 || num3 == 164) && !flag3 && Main.hardMode && Main.player[j].ZoneHoly && Main.rand.Next(30) == 0)
						{
							num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 171, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if ((num3 == 147 || num3 == 161 || num3 == 162 || num3 == 163 || num3 == 164) && !flag3 && Main.hardMode && Main.player[j].ZoneCrimson && Main.rand.Next(30) == 0)
						{
							num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 180, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if (Main.hardMode && Main.player[j].ZoneSnow && Main.rand.Next(10) == 0)
						{
							num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 154, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if (!flag3 && Main.rand.Next(100) == 0 && !Main.player[j].ZoneHoly)
						{
							if (Main.hardMode)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 95, 1, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.player[j].ZoneSnow)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 185, 0, 0f, 0f, 0f, 0f, 255);
							}
							else
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 10, 1, 0f, 0f, 0f, 0f, 255);
							}
						}
						else if (Main.player[j].ZoneSnow && Main.rand.Next(20) == 0)
						{
							num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 185, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if (!Main.hardMode && Main.rand.Next(10) == 0)
						{
							if (Main.player[j].ZoneSnow)
							{
								Main.npc[num46].SetDefaults(184, -1f);
							}
							else
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 16, 0, 0f, 0f, 0f, 0f, 255);
							}
						}
						else if (!Main.hardMode && Main.rand.Next(4) == 0)
						{
							num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 1, 0, 0f, 0f, 0f, 0f, 255);
							if (Main.player[j].ZoneJungle)
							{
								Main.npc[num46].SetDefaults("Jungle Slime");
							}
							else if (Main.player[j].ZoneSnow)
							{
								Main.npc[num46].SetDefaults(184, -1f);
							}
							else
							{
								Main.npc[num46].SetDefaults("Black Slime");
							}
						}
						else if (Main.rand.Next(2) == 0)
						{
							if (Main.rand.Next(35) == 0 && NPC.CountNPCS(453) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 453, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if ((!Main.hardMode && Main.rand.Next(80) == 0) || Main.rand.Next(200) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 195, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.hardMode && (double)num2 > (Main.rockLayer + (double)Main.maxTilesY) / 2.0 && Main.rand.Next(300) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 172, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if ((double)num2 > (Main.rockLayer + (double)Main.maxTilesY) / 2.0 && (Main.rand.Next(200) == 0 || (Main.rand.Next(50) == 0 && Main.player[j].armor[1].type >= 1282 && Main.player[j].armor[1].type <= 1287 && Main.player[j].armor[0].type != 238)))
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 45, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (flag8 && Main.rand.Next(4) != 0)
							{
								if (Main.rand.Next(6) != 0 && !NPC.AnyNPCs(480) && Main.hardMode)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 480, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 481, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (flag7 && Main.rand.Next(5) != 0)
							{
								if (Main.rand.Next(6) != 0 && !NPC.AnyNPCs(483))
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 483, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 482, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (Main.hardMode && Main.rand.Next(10) != 0)
							{
								if (Main.rand.Next(2) == 0)
								{
									if (Main.player[j].ZoneSnow)
									{
										num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 197, 0, 0f, 0f, 0f, 0f, 255);
									}
									else if (Main.halloween && Main.rand.Next(5) == 0)
									{
										num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 316, 0, 0f, 0f, 0f, 0f, 255);
									}
									else
									{
										num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 77, 0, 0f, 0f, 0f, 0f, 255);
										if ((double)num2 > (Main.rockLayer + (double)Main.maxTilesY) / 2.0 && Main.rand.Next(5) == 0)
										{
											Main.npc[num46].SetDefaults("Heavy Skeleton");
										}
									}
								}
								else if (Main.player[j].ZoneSnow)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 206, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 110, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else if (Main.rand.Next(20) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 44, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (num3 == 147 || num3 == 161 || num3 == 162)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 167, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.player[j].ZoneSnow)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 185, 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.rand.Next(3) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, NPC.cavernMonsterType[Main.rand.Next(2), Main.rand.Next(3)], 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.halloween && Main.rand.Next(2) == 0)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(322, 325), 0, 0f, 0f, 0f, 0f, 255);
							}
							else if (Main.expertMode && Main.rand.Next(3) == 0)
							{
								int num82 = Main.rand.Next(4);
								if (num82 == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 449, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (num82 == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 450, 0, 0f, 0f, 0f, 0f, 255);
								}
								else if (num82 == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 451, 0, 0f, 0f, 0f, 0f, 255);
								}
								else
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 452, 0, 0f, 0f, 0f, 0f, 255);
								}
							}
							else
							{
								int num83 = Main.rand.Next(4);
								if (num83 == 0)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 21, 0, 0f, 0f, 0f, 0f, 255);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[num46].SetDefaults("Big Skeleton");
										}
										else
										{
											Main.npc[num46].SetDefaults("Small Skeleton");
										}
									}
								}
								else if (num83 == 1)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 201, 0, 0f, 0f, 0f, 0f, 255);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[num46].SetDefaults("Big Headache Skeleton");
										}
										else
										{
											Main.npc[num46].SetDefaults("Small Headache Skeleton");
										}
									}
								}
								else if (num83 == 2)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 202, 0, 0f, 0f, 0f, 0f, 255);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[num46].SetDefaults("Big Misassembled Skeleton");
										}
										else
										{
											Main.npc[num46].SetDefaults("Small Misassembled Skeleton");
										}
									}
								}
								else if (num83 == 3)
								{
									num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 203, 0, 0f, 0f, 0f, 0f, 255);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[num46].SetDefaults("Big Pantless Skeleton");
										}
										else
										{
											Main.npc[num46].SetDefaults("Small Pantless Skeleton");
										}
									}
								}
							}
						}
						else if (Main.hardMode && (Main.player[j].ZoneHoly & Main.rand.Next(2) == 0))
						{
							num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 138, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if (Main.player[j].ZoneJungle)
						{
							num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 51, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if (Main.hardMode && Main.player[j].ZoneHoly)
						{
							num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 137, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if (Main.hardMode && Main.rand.Next(6) > 0)
						{
							num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 93, 0, 0f, 0f, 0f, 0f, 255);
						}
						else if (num3 == 147 || num3 == 161 || num3 == 162)
						{
							if (Main.hardMode)
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 169, 0, 0f, 0f, 0f, 0f, 255);
							}
							else
							{
								num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 150, 0, 0f, 0f, 0f, 0f, 255);
							}
						}
						else
						{
							num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 49, 0, 0f, 0f, 0f, 0f, 255);
						}
						if (Main.npc[num46].type == 1 && Main.rand.Next(180) == 0)
						{
							Main.npc[num46].SetDefaults("Pinky");
						}
						if (Main.netMode == 2 && num46 < 200)
						{
							NetMessage.SendData(23, -1, -1, "", num46, 0f, 0f, 0f, 0, 0, 0);
							return;
						}
						break;
					}
				}
			}
		}

		public static bool AnyDanger()
		{
			bool flag = false;
			if (NPC.MoonLordCountdown > 0)
			{
				flag = true;
			}
			if (Main.invasionType > 0)
			{
				flag = true;
			}
			if (!flag)
			{
				for (int i = 0; i < 200; i++)
				{
					if (Main.npc[i].active && (Main.npc[i].boss || NPCID.Sets.TechnicallyABoss[Main.npc[i].type]))
					{
						flag = true;
					}
				}
			}
			return flag;
		}

		public static bool AnyoneNearCultists()
		{
			int num = NPC.FindFirstNPC(437);
			if (num == -1)
			{
				return false;
			}
			Rectangle rectangle = Utils.CenteredRectangle(Main.npc[num].Center, new Vector2(2500f, 1500f));
			Rectangle r = new Rectangle(0, 0, 2500, 1500);
			Vector2 vector = r.Size() / 2f;
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active)
				{
					r.X = (int)Main.player[i].Center.X - (int)vector.X;
					r.Y = (int)Main.player[i].Center.Y - (int)vector.Y;
					if (rectangle.Intersects(r))
					{
						return true;
					}
				}
			}
			return false;
		}

		public static void SpawnWOF(Vector2 pos)
		{
			if (pos.Y / 16f < (float)(Main.maxTilesY - 205))
			{
				return;
			}
			if (Main.wof >= 0)
			{
				return;
			}
			if (Main.netMode == 1)
			{
				return;
			}
			Player.FindClosest(pos, 16, 16);
			int num = 1;
			if (pos.X / 16f > (float)(Main.maxTilesX / 2))
			{
				num = -1;
			}
			bool flag = false;
			int num2 = (int)pos.X;
			while (!flag)
			{
				flag = true;
				for (int i = 0; i < 255; i++)
				{
					if (Main.player[i].active && Main.player[i].position.X > (float)(num2 - 1200) && Main.player[i].position.X < (float)(num2 + 1200))
					{
						num2 -= num * 16;
						flag = false;
					}
				}
				if (num2 / 16 < 20 || num2 / 16 > Main.maxTilesX - 20)
				{
					flag = true;
				}
			}
			int num3 = (int)pos.Y;
			int num4 = num2 / 16;
			int num5 = num3 / 16;
			int num6 = 0;
			try
			{
				while (WorldGen.SolidTile(num4, num5 - num6) || Main.tile[num4, num5 - num6].liquid >= 100)
				{
					if (!WorldGen.SolidTile(num4, num5 + num6) && Main.tile[num4, num5 + num6].liquid < 100)
					{
						num5 += num6;
						goto IL_162;
					}
					num6++;
				}
				num5 -= num6;
			}
			catch
			{
			}
			IL_162:
			if (num5 < Main.maxTilesY - 180)
			{
				num5 = Main.maxTilesY - 180;
			}
			num3 = num5 * 16;
			int num7 = NPC.NewNPC(num2, num3, 113, 0, 0f, 0f, 0f, 0f, 255);
			if (Main.npc[num7].displayName == "")
			{
				Main.npc[num7].displayName = Main.npc[num7].name;
			}
			if (Main.netMode == 0)
			{
				Main.NewText(Main.npc[num7].displayName + " " + Lang.misc[16], 175, 75, 255, false);
				return;
			}
			if (Main.netMode == 2)
			{
				NetMessage.SendData(25, -1, -1, Main.npc[num7].displayName + " " + Lang.misc[16], 255, 175f, 75f, 255f, 0, 0, 0);
			}
		}

		public static void SpawnSkeletron()
		{
			bool flag = true;
			bool flag2 = false;
			Vector2 vector = Vector2.Zero;
			int num = 0;
			int num2 = 0;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == 35)
				{
					flag = false;
					break;
				}
			}
			for (int j = 0; j < 200; j++)
			{
				if (Main.npc[j].active)
				{
					if (Main.npc[j].type == 37)
					{
						flag2 = true;
						Main.npc[j].ai[3] = 1f;
						vector = Main.npc[j].position;
						num = Main.npc[j].width;
						num2 = Main.npc[j].height;
						if (Main.netMode == 2)
						{
							NetMessage.SendData(23, -1, -1, "", j, 0f, 0f, 0f, 0, 0, 0);
						}
					}
					else if (Main.npc[j].type == 54)
					{
						flag2 = true;
						vector = Main.npc[j].position;
						num = Main.npc[j].width;
						num2 = Main.npc[j].height;
					}
				}
			}
			if (flag && flag2)
			{
				int num3 = NPC.NewNPC((int)vector.X + num / 2, (int)vector.Y + num2 / 2, 35, 0, 0f, 0f, 0f, 0f, 255);
				Main.npc[num3].netUpdate = true;
				string str = Main.npcName[35];
				if (Main.netMode == 0)
				{
					Main.NewText(str + " " + Lang.misc[16], 175, 75, 255, false);
					return;
				}
				if (Main.netMode == 2)
				{
					NetMessage.SendData(25, -1, -1, str + " " + Lang.misc[16], 255, 175f, 75f, 255f, 0, 0, 0);
				}
			}
		}

		public static void SpawnOnPlayer(int plr, int Type)
		{
			if (Main.netMode == 1)
			{
				return;
			}
			if (Type == 262 && NPC.AnyNPCs(262))
			{
				return;
			}
			if (Type == 245)
			{
				if (NPC.AnyNPCs(245))
				{
					return;
				}
				try
				{
					int num = (int)Main.player[plr].Center.X / 16;
					int num2 = (int)Main.player[plr].Center.Y / 16;
					int num3 = 0;
					int num4 = 0;
					for (int i = num - 20; i < num + 20; i++)
					{
						for (int j = num2 - 20; j < num2 + 20; j++)
						{
							if (Main.tile[i, j].active() && Main.tile[i, j].type == 237 && Main.tile[i, j].frameX == 18 && Main.tile[i, j].frameY == 0)
							{
								num3 = i;
								num4 = j;
							}
						}
					}
					if (num3 > 0 && num4 > 0)
					{
						int num5 = num4 - 15;
						int num6 = num4 - 15;
						for (int k = num4; k > num4 - 100; k--)
						{
							if (WorldGen.SolidTile(num3, k))
							{
								num5 = k;
								break;
							}
						}
						for (int l = num4; l < num4 + 100; l++)
						{
							if (WorldGen.SolidTile(num3, l))
							{
								num6 = l;
								break;
							}
						}
						num4 = (num5 + num5 + num6) / 3;
						int num7 = NPC.NewNPC(num3 * 16 + 8, num4 * 16, 245, 100, 0f, 0f, 0f, 0f, 255);
						Main.npc[num7].target = plr;
						string name = Main.npc[num7].name;
						if (Main.netMode == 0)
						{
							Main.NewText(name + " " + Lang.misc[16], 175, 75, 255, false);
						}
						else if (Main.netMode == 2)
						{
							NetMessage.SendData(25, -1, -1, name + " " + Lang.misc[16], 255, 175f, 75f, 255f, 0, 0, 0);
						}
					}
				}
				catch
				{
				}
				return;
			}
			else if (Type == 370)
			{
				Player player = Main.player[plr];
				if (!player.active || player.dead)
				{
					return;
				}
				int m = 0;
				while (m < 1000)
				{
					Projectile projectile = Main.projectile[m];
					if (projectile.active && projectile.bobber && projectile.owner == plr)
					{
						int num8 = NPC.NewNPC((int)projectile.Center.X, (int)projectile.Center.Y + 100, 370, 0, 0f, 0f, 0f, 0f, 255);
						string name2 = Main.npc[num8].name;
						if (Main.netMode == 0)
						{
							Main.NewText(name2 + " " + Lang.misc[16], 175, 75, 255, false);
							return;
						}
						if (Main.netMode == 2)
						{
							NetMessage.SendData(25, -1, -1, name2 + " " + Lang.misc[16], 255, 175f, 75f, 255f, 0, 0, 0);
							return;
						}
						break;
					}
					else
					{
						m++;
					}
				}
				return;
			}
			else
			{
				if (Type != 398)
				{
					bool flag = false;
					int num9 = 0;
					int num10 = 0;
					int num11 = (int)(Main.player[plr].position.X / 16f) - NPC.spawnRangeX * 2;
					int num12 = (int)(Main.player[plr].position.X / 16f) + NPC.spawnRangeX * 2;
					int num13 = (int)(Main.player[plr].position.Y / 16f) - NPC.spawnRangeY * 2;
					int num14 = (int)(Main.player[plr].position.Y / 16f) + NPC.spawnRangeY * 2;
					int num15 = (int)(Main.player[plr].position.X / 16f) - NPC.safeRangeX;
					int num16 = (int)(Main.player[plr].position.X / 16f) + NPC.safeRangeX;
					int num17 = (int)(Main.player[plr].position.Y / 16f) - NPC.safeRangeY;
					int num18 = (int)(Main.player[plr].position.Y / 16f) + NPC.safeRangeY;
					if (num11 < 0)
					{
						num11 = 0;
					}
					if (num12 > Main.maxTilesX)
					{
						num12 = Main.maxTilesX;
					}
					if (num13 < 0)
					{
						num13 = 0;
					}
					if (num14 > Main.maxTilesY)
					{
						num14 = Main.maxTilesY;
					}
					for (int n = 0; n < 1000; n++)
					{
						int num19 = 0;
						while (num19 < 100)
						{
							int num20 = Main.rand.Next(num11, num12);
							int num21 = Main.rand.Next(num13, num14);
							if (Main.tile[num20, num21].nactive() && Main.tileSolid[(int)Main.tile[num20, num21].type])
							{
								goto IL_7FC;
							}
							if ((!Main.wallHouse[(int)Main.tile[num20, num21].wall] || n >= 999) && (Type != 50 || n >= 500 || Main.tile[num21, num21].wall <= 0))
							{
								int num22 = num21;
								while (num22 < Main.maxTilesY)
								{
									if (Main.tile[num20, num22].nactive() && Main.tileSolid[(int)Main.tile[num20, num22].type])
									{
										if (num20 < num15 || num20 > num16 || num22 < num17 || num22 > num18 || n == 999)
										{
											ushort arg_683_0 = Main.tile[num20, num22].type;
											num9 = num20;
											num10 = num22;
											flag = true;
											break;
										}
										break;
									}
									else
									{
										num22++;
									}
								}
								if (flag && Type == 50 && n < 900)
								{
									int num23 = 20;
									if (!Collision.CanHit(new Vector2((float)num9, (float)(num10 - 1)) * 16f, 16, 16, new Vector2((float)num9, (float)(num10 - 1 - num23)) * 16f, 16, 16) || !Collision.CanHit(new Vector2((float)num9, (float)(num10 - 1 - num23)) * 16f, 16, 16, Main.player[plr].Center, 0, 0))
									{
										num9 = 0;
										num10 = 0;
										flag = false;
									}
								}
								if (!flag || n >= 999)
								{
									goto IL_7FC;
								}
								int num24 = num9 - NPC.spawnSpaceX / 2;
								int num25 = num9 + NPC.spawnSpaceX / 2;
								int num26 = num10 - NPC.spawnSpaceY;
								int num27 = num10;
								if (num24 < 0)
								{
									flag = false;
								}
								if (num25 > Main.maxTilesX)
								{
									flag = false;
								}
								if (num26 < 0)
								{
									flag = false;
								}
								if (num27 > Main.maxTilesY)
								{
									flag = false;
								}
								if (flag)
								{
									for (int num28 = num24; num28 < num25; num28++)
									{
										for (int num29 = num26; num29 < num27; num29++)
										{
											if (Main.tile[num28, num29].nactive() && Main.tileSolid[(int)Main.tile[num28, num29].type])
											{
												flag = false;
												break;
											}
										}
									}
									goto IL_7FC;
								}
								goto IL_7FC;
							}
							IL_804:
							num19++;
							continue;
							IL_7FC:
							if (!flag && !flag)
							{
								goto IL_804;
							}
							break;
						}
						if (flag && n < 999)
						{
							Rectangle rectangle = new Rectangle(num9 * 16, num10 * 16, 16, 16);
							for (int num30 = 0; num30 < 255; num30++)
							{
								if (Main.player[num30].active)
								{
									Rectangle rectangle2 = new Rectangle((int)(Main.player[num30].position.X + (float)(Main.player[num30].width / 2) - (float)(NPC.sWidth / 2) - (float)NPC.safeRangeX), (int)(Main.player[num30].position.Y + (float)(Main.player[num30].height / 2) - (float)(NPC.sHeight / 2) - (float)NPC.safeRangeY), NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
									if (rectangle.Intersects(rectangle2))
									{
										flag = false;
									}
								}
							}
						}
						if (flag)
						{
							break;
						}
					}
					if (flag)
					{
						int num31 = NPC.NewNPC(num9 * 16 + 8, num10 * 16, Type, 1, 0f, 0f, 0f, 0f, 255);
						if (num31 == 200)
						{
							return;
						}
						Main.npc[num31].target = plr;
						Main.npc[num31].timeLeft *= 20;
						string name3 = Main.npc[num31].name;
						if (Main.npc[num31].displayName != "")
						{
							name3 = Main.npc[num31].displayName;
						}
						if (Main.netMode == 2 && num31 < 200)
						{
							NetMessage.SendData(23, -1, -1, "", num31, 0f, 0f, 0f, 0, 0, 0);
						}
						if (Type == 134 || Type == 127 || Type == 126 || Type == 125)
						{
							AchievementsHelper.CheckMechaMayhem(-1);
						}
						if (Type == 125)
						{
							if (Main.netMode == 0)
							{
								Main.NewText(Lang.misc[48], 175, 75, 255, false);
								return;
							}
							if (Main.netMode == 2)
							{
								NetMessage.SendData(25, -1, -1, Lang.misc[48], 255, 175f, 75f, 255f, 0, 0, 0);
								return;
							}
						}
						else if (Type != 82 && Type != 126 && Type != 50 && Type != 398 && Type != 551)
						{
							if (Main.netMode == 0)
							{
								Main.NewText(name3 + " " + Lang.misc[16], 175, 75, 255, false);
								return;
							}
							if (Main.netMode == 2)
							{
								NetMessage.SendData(25, -1, -1, name3 + " " + Lang.misc[16], 255, 175f, 75f, 255f, 0, 0, 0);
							}
						}
					}
					return;
				}
				if (NPC.AnyNPCs(Type))
				{
					return;
				}
				Player player2 = Main.player[plr];
				NPC.NewNPC((int)player2.Center.X, (int)player2.Center.Y - 150, Type, 0, 0f, 0f, 0f, 0f, 255);
				if (Main.netMode == 0)
				{
					Main.NewText(Language.GetTextValue("Enemies.MoonLord") + " " + Lang.misc[16], 175, 75, 255, false);
					return;
				}
				if (Main.netMode == 2)
				{
					NetMessage.SendData(25, -1, -1, Language.GetTextValue("Enemies.MoonLord") + " " + Lang.misc[16], 255, 175f, 75f, 255f, 0, 0, 0);
				}
				return;
			}
		}

		public static int NewNPC(int X, int Y, int Type, int Start = 0, float ai0 = 0f, float ai1 = 0f, float ai2 = 0f, float ai3 = 0f, int Target = 255)
		{
			int num = -1;
			if (Type == 222)
			{
				for (int i = 199; i >= 0; i--)
				{
					if (!Main.npc[i].active)
					{
						num = i;
						break;
					}
				}
			}
			else
			{
				for (int j = Start; j < 200; j++)
				{
					if (!Main.npc[j].active)
					{
						num = j;
						break;
					}
				}
			}
			if (num >= 0)
			{
				Main.npc[num] = new NPC();
				Main.npc[num].SetDefaults(Type, -1f);
				if (NPC.TypeToHeadIndex(Type) != -1 || Type == 453)
				{
					Main.npc[num].displayName = NPC.getNewNPCName(Type);
				}
				Main.npc[num].position.X = (float)(X - Main.npc[num].width / 2);
				Main.npc[num].position.Y = (float)(Y - Main.npc[num].height);
				Main.npc[num].active = true;
				Main.npc[num].timeLeft = (int)((double)NPC.activeTime * 1.25);
				Main.npc[num].wet = Collision.WetCollision(Main.npc[num].position, Main.npc[num].width, Main.npc[num].height);
				Main.npc[num].ai[0] = ai0;
				Main.npc[num].ai[1] = ai1;
				Main.npc[num].ai[2] = ai2;
				Main.npc[num].ai[3] = ai3;
				Main.npc[num].target = Target;
				if (Type == 50)
				{
					if (Main.netMode == 0)
					{
						Main.NewText(Main.npc[num].name + " " + Lang.misc[16], 175, 75, 255, false);
					}
					else if (Main.netMode == 2)
					{
						NetMessage.SendData(25, -1, -1, Main.npc[num].name + " " + Lang.misc[16], 255, 175f, 75f, 255f, 0, 0, 0);
					}
				}
				return num;
			}
			return 200;
		}

		public void TransformVisuals(int oldType, int newType)
		{
			if ((oldType == 158 && newType == 159) || (oldType == 159 && newType == 158))
			{
				Main.PlaySound(SoundID.Item8, this.position);
				int num = Gore.NewGore(new Vector2(this.position.X, this.position.Y - 10f), this.velocity, 99, this.scale);
				Main.gore[num].velocity *= 0.3f;
				num = Gore.NewGore(new Vector2(this.position.X, this.position.Y + (float)(this.height / 2) - 10f), this.velocity, 99, this.scale);
				Main.gore[num].velocity *= 0.3f;
				num = Gore.NewGore(new Vector2(this.position.X, this.position.Y + (float)this.height - 10f), this.velocity, 99, this.scale);
				Main.gore[num].velocity *= 0.3f;
			}
			else if (oldType == 478 && newType == 479)
			{
				for (int i = 0; i < 30; i++)
				{
					int num2 = Dust.NewDust(this.position, this.width, this.height, 238, 0f, -2f, 0, default(Color), 1f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num2].noGravity = true;
					}
				}
				Gore.NewGore(this.position, this.velocity, 684, this.scale);
				Gore.NewGore(this.position, this.velocity, 685, this.scale);
				Gore.NewGore(this.position, this.velocity, 686, this.scale);
				Gore.NewGore(this.position, this.velocity, 684 + Main.rand.Next(3), this.scale);
			}
			else if (oldType == 406 && newType == 405)
			{
				float num3 = (float)Main.rand.Next(10, 21);
				float num4 = 6.28318548f * Main.rand.NextFloat();
				Vector2 value = new Vector2(22f, 22f);
				for (float num5 = 0f; num5 < num3; num5 += 1f)
				{
					Dust dust = Main.dust[Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 0, default(Color), 1f)];
					Vector2 vector = Vector2.UnitY.RotatedBy((double)(num5 * 6.28318548f / num3 + num4), default(Vector2));
					dust.position = base.Center + vector * value / 2f;
					dust.velocity = vector;
					dust.noGravity = true;
					dust.scale = 0.6f + Main.rand.NextFloat() * 1.8f;
					dust.velocity *= dust.scale;
					dust.fadeIn = Main.rand.NextFloat() * 2f;
				}
			}
			if (oldType == 428 && newType == 427)
			{
				for (int j = 0; j < 20; j++)
				{
					int num6 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						229,
						240
					});
					Dust dust2 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num6, 0f, 0f, 0, default(Color), 1f)];
					dust2.noGravity = true;
					dust2.scale = 0.6f + Main.rand.NextFloat() * 1.8f;
					dust2.fadeIn = 0.25f;
					dust2.velocity *= dust2.scale / 2f;
				}
			}
			if (oldType == 427 && newType == 426)
			{
				for (int k = 0; k < 30; k++)
				{
					int num7 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						229,
						240,
						240
					});
					Dust dust3 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num7, 0f, 0f, 0, default(Color), 1f)];
					dust3.noGravity = true;
					dust3.scale = 0.6f + Main.rand.NextFloat() * 1.8f;
					dust3.fadeIn = 0.25f;
					dust3.velocity *= dust3.scale * 0.75f;
				}
			}
		}

		public void Teleport(Vector2 newPos, int Style = 0, int extraInfo = 0)
		{
			int extraInfo2 = 0;
			if (Style == 4)
			{
				extraInfo2 = this.lastPortalColorIndex;
			}
			float dustCountMult = (this.teleportTime > 0f) ? 0.3f : 1f;
			Main.TeleportEffect(this.getRect(), Style, extraInfo2, dustCountMult);
			this.position = newPos;
			if (Style == 4)
			{
				this.lastPortalColorIndex = extraInfo;
				extraInfo2 = this.lastPortalColorIndex;
			}
			Main.TeleportEffect(this.getRect(), Style, extraInfo2, dustCountMult);
			this.teleportTime = 1f;
			this.teleportStyle = Style;
			if (Main.netMode == 2 && Style != 4)
			{
				NetMessage.SendData(65, -1, -1, "", 1, (float)this.whoAmI, newPos.X, newPos.Y, Style, 0, 0);
			}
		}

		public void Transform(int newType)
		{
			if (Main.netMode != 1)
			{
				bool flag = false;
				if (this.value == 0f)
				{
					flag = true;
				}
				int[] array = new int[5];
				int[] array2 = new int[5];
				for (int i = 0; i < 5; i++)
				{
					array[i] = this.buffType[i];
					array2[i] = this.buffTime[i];
				}
				int arg_52_0 = this.height;
				int oldType = this.type;
				int num = this.life;
				int num2 = this.lifeMax;
				Vector2 velocity = this.velocity;
				this.position.Y = this.position.Y + (float)this.height;
				int num3 = this.spriteDirection;
				bool spawnedFromStatue = this.SpawnedFromStatue;
				this.SetDefaults(newType, -1f);
				this.SpawnedFromStatue = spawnedFromStatue;
				this.spriteDirection = num3;
				this.TargetClosest(true);
				this.velocity = velocity;
				this.position.Y = this.position.Y - (float)this.height;
				if (flag)
				{
					this.value = 0f;
				}
				if (this.lifeMax == num2)
				{
					this.life = num;
				}
				if (newType == 107 || newType == 108)
				{
					this.homeTileX = (int)(this.position.X + (float)(this.width / 2)) / 16;
					this.homeTileY = (int)(this.position.Y + (float)this.height) / 16;
					this.homeless = true;
				}
				for (int j = 0; j < 5; j++)
				{
					this.buffType[j] = array[j];
					this.buffTime[j] = array2[j];
				}
				if (Main.netMode == 2)
				{
					this.netUpdate = true;
					NetMessage.SendData(23, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
					NetMessage.SendData(54, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
				}
				this.TransformVisuals(oldType, newType);
				if (NPC.TypeToHeadIndex(this.type) != -1)
				{
					Main.npc[this.whoAmI].displayName = NPC.getNewNPCName(this.type);
				}
				this.npcNameLookup = 0;
				if (this.townNPC)
				{
					this.homeless = true;
				}
				this.altTexture = 0;
			}
		}

		public int checkArmorPenetration(int armorPenetration)
		{
			if (armorPenetration <= 0)
			{
				return 0;
			}
			if (armorPenetration > this.defense && this.defense >= 0)
			{
				return this.defense / 2;
			}
			return armorPenetration / 2;
		}

		public double StrikeNPCNoInteraction(int Damage, float knockBack, int hitDirection, bool crit = false, bool noEffect = false, bool fromNet = false)
		{
			if (Main.netMode == 0)
			{
				NPC.ignorePlayerInteractions++;
			}
			return this.StrikeNPC(Damage, knockBack, hitDirection, crit, noEffect, fromNet);
		}

		public double StrikeNPC(int Damage, float knockBack, int hitDirection, bool crit = false, bool noEffect = false, bool fromNet = false)
		{
			bool flag = Main.netMode == 0;
			if (flag && NPC.ignorePlayerInteractions > 0)
			{
				NPC.ignorePlayerInteractions--;
				flag = false;
			}
			if (!this.active || this.life <= 0)
			{
				return 0.0;
			}
			double num = (double)Damage;
			int num2 = this.defense;
			if (this.ichor)
			{
				num2 -= 20;
			}
			if (this.betsysCurse)
			{
				num2 -= 40;
			}
			if (num2 < 0)
			{
				num2 = 0;
			}
			num = Main.CalculateDamage((int)num, num2);
			if (crit)
			{
				num *= 2.0;
			}
			if (this.takenDamageMultiplier > 1f)
			{
				num *= (double)this.takenDamageMultiplier;
			}
			if ((this.takenDamageMultiplier > 1f || Damage != 9999) && this.lifeMax > 1)
			{
				if (this.friendly)
				{
					Color color = crit ? CombatText.DamagedFriendlyCrit : CombatText.DamagedFriendly;
					CombatText.NewText(new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), color, string.Concat((int)num), crit, false);
				}
				else
				{
					Color color2 = crit ? CombatText.DamagedHostileCrit : CombatText.DamagedHostile;
					if (fromNet)
					{
						color2 = (crit ? CombatText.OthersDamagedHostileCrit : CombatText.OthersDamagedHostile);
					}
					CombatText.NewText(new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), color2, string.Concat((int)num), crit, false);
				}
			}
			if (num >= 1.0)
			{
				if (flag)
				{
					this.PlayerInteraction(Main.myPlayer);
				}
				this.justHit = true;
				if (this.townNPC)
				{
					bool flag2 = this.aiStyle == 7 && (this.ai[0] == 3f || this.ai[0] == 4f || this.ai[0] == 16f || this.ai[0] == 17f);
					if (flag2)
					{
						NPC nPC = Main.npc[(int)this.ai[2]];
						if (nPC.active)
						{
							nPC.ai[0] = 1f;
							nPC.ai[1] = (float)(300 + Main.rand.Next(300));
							nPC.ai[2] = 0f;
							nPC.localAI[3] = 0f;
							nPC.direction = hitDirection;
							nPC.netUpdate = true;
						}
					}
					this.ai[0] = 1f;
					this.ai[1] = (float)(300 + Main.rand.Next(300));
					this.ai[2] = 0f;
					this.localAI[3] = 0f;
					this.direction = hitDirection;
					this.netUpdate = true;
				}
				if (this.aiStyle == 8 && Main.netMode != 1)
				{
					if (this.type == 172)
					{
						this.ai[0] = 450f;
					}
					else if (this.type == 283 || this.type == 284)
					{
						if (Main.rand.Next(2) == 0)
						{
							this.ai[0] = 390f;
							this.netUpdate = true;
						}
					}
					else if (this.type == 533)
					{
						if (Main.rand.Next(3) != 0)
						{
							this.ai[0] = 181f;
							this.netUpdate = true;
						}
					}
					else
					{
						this.ai[0] = 400f;
					}
					this.TargetClosest(true);
				}
				if (this.aiStyle == 97 && Main.netMode != 1)
				{
					this.localAI[1] = 1f;
					this.TargetClosest(true);
				}
				if (this.type == 371)
				{
					num = 0.0;
					this.ai[0] = 1f;
					this.ai[1] = 4f;
					this.dontTakeDamage = true;
				}
				if (this.type == 346 && (double)this.life >= (double)this.lifeMax * 0.5 && (double)this.life - num < (double)this.lifeMax * 0.5)
				{
					Gore.NewGore(this.position, this.velocity, 517, 1f);
				}
				if (this.type == 184)
				{
					this.localAI[0] = 60f;
				}
				if (this.type == 535)
				{
					this.localAI[0] = 60f;
				}
				if (this.type == 185)
				{
					this.localAI[0] = 1f;
				}
				if (!this.immortal)
				{
					if (this.realLife >= 0)
					{
						Main.npc[this.realLife].life -= (int)num;
						this.life = Main.npc[this.realLife].life;
						this.lifeMax = Main.npc[this.realLife].lifeMax;
					}
					else
					{
						this.life -= (int)num;
					}
				}
				if (knockBack > 0f && this.knockBackResist > 0f)
				{
					float num3 = knockBack * this.knockBackResist;
					if (num3 > 8f)
					{
						float num4 = num3 - 8f;
						num4 *= 0.9f;
						num3 = 8f + num4;
					}
					if (num3 > 10f)
					{
						float num5 = num3 - 10f;
						num5 *= 0.8f;
						num3 = 10f + num5;
					}
					if (num3 > 12f)
					{
						float num6 = num3 - 12f;
						num6 *= 0.7f;
						num3 = 12f + num6;
					}
					if (num3 > 14f)
					{
						float num7 = num3 - 14f;
						num7 *= 0.6f;
						num3 = 14f + num7;
					}
					if (num3 > 16f)
					{
						num3 = 16f;
					}
					if (crit)
					{
						num3 *= 1.4f;
					}
					int num8 = (int)num * 10;
					if (Main.expertMode)
					{
						num8 = (int)num * 15;
					}
					if (num8 > this.lifeMax)
					{
						if (hitDirection < 0 && this.velocity.X > -num3)
						{
							if (this.velocity.X > 0f)
							{
								this.velocity.X = this.velocity.X - num3;
							}
							this.velocity.X = this.velocity.X - num3;
							if (this.velocity.X < -num3)
							{
								this.velocity.X = -num3;
							}
						}
						else if (hitDirection > 0 && this.velocity.X < num3)
						{
							if (this.velocity.X < 0f)
							{
								this.velocity.X = this.velocity.X + num3;
							}
							this.velocity.X = this.velocity.X + num3;
							if (this.velocity.X > num3)
							{
								this.velocity.X = num3;
							}
						}
						if (this.type == 185)
						{
							num3 *= 1.5f;
						}
						if (!this.noGravity)
						{
							num3 *= -0.75f;
						}
						else
						{
							num3 *= -0.5f;
						}
						if (this.velocity.Y > num3)
						{
							this.velocity.Y = this.velocity.Y + num3;
							if (this.velocity.Y < num3)
							{
								this.velocity.Y = num3;
							}
						}
					}
					else
					{
						if (!this.noGravity)
						{
							this.velocity.Y = -num3 * 0.75f * this.knockBackResist;
						}
						else
						{
							this.velocity.Y = -num3 * 0.5f * this.knockBackResist;
						}
						this.velocity.X = num3 * (float)hitDirection * this.knockBackResist;
					}
				}
				if ((this.type == 113 || this.type == 114) && this.life <= 0)
				{
					for (int i = 0; i < 200; i++)
					{
						if (Main.npc[i].active && (Main.npc[i].type == 113 || Main.npc[i].type == 114))
						{
							Main.npc[i].HitEffect(hitDirection, num);
						}
					}
				}
				else
				{
					this.HitEffect(hitDirection, num);
				}
				if (this.HitSound != null)
				{
					Main.PlaySound(this.HitSound, this.position);
				}
				if (this.realLife >= 0)
				{
					Main.npc[this.realLife].checkDead();
				}
				else
				{
					this.checkDead();
				}
				return num;
			}
			return 0.0;
		}

		public void HitEffect(int hitDirection = 0, double dmg = 10.0)
		{
			if (!this.active)
			{
				return;
			}
			if (this.townNPC && this.life <= 0 && this.UsesPartyHat())
			{
				bool flag = true;
				int num = this.type;
				if (num <= 178)
				{
					if (num <= 38)
					{
						switch (num)
						{
						case 17:
							Gore.NewGore(this.position, this.velocity, 929, 1f);
							goto IL_27E;
						case 18:
							Gore.NewGore(this.position, this.velocity, 930, 1f);
							goto IL_27E;
						default:
							if (num == 38)
							{
								Gore.NewGore(this.position, this.velocity, 927, 1f);
								goto IL_27E;
							}
							break;
						}
					}
					else
					{
						if (num == 108)
						{
							Gore.NewGore(this.position, this.velocity, 938, 1f);
							goto IL_27E;
						}
						if (num == 142)
						{
							Gore.NewGore(this.position, this.velocity, 933, 1f);
							goto IL_27E;
						}
						if (num == 178)
						{
							Gore.NewGore(this.position, this.velocity, 935, 1f);
							goto IL_27E;
						}
					}
				}
				else if (num <= 229)
				{
					if (num == 207)
					{
						Gore.NewGore(this.position, this.velocity, 928, 1f);
						goto IL_27E;
					}
					switch (num)
					{
					case 227:
						Gore.NewGore(this.position, this.velocity, 931, 1f);
						goto IL_27E;
					case 229:
						Gore.NewGore(this.position, this.velocity, 932, 1f);
						goto IL_27E;
					}
				}
				else
				{
					if (num == 353)
					{
						Gore.NewGore(this.position, this.velocity, 936, 1f);
						goto IL_27E;
					}
					if (num == 368)
					{
						Gore.NewGore(this.position, this.velocity, 937, 1f);
						goto IL_27E;
					}
					if (num == 453)
					{
						Gore.NewGore(this.position, this.velocity, 934, 1f);
						goto IL_27E;
					}
				}
				flag = false;
				IL_27E:
				if (flag)
				{
					int num2 = 926;
					switch (this.GetPartyHatColor())
					{
					case PartyHatColor.Pink:
						num2 = 939;
						break;
					case PartyHatColor.Cyan:
						num2 = 940;
						break;
					case PartyHatColor.Purple:
						num2 = 941;
						break;
					case PartyHatColor.White:
						num2 = 942;
						break;
					}
					Gore.NewGore(this.position, this.velocity, num2, 1f);
				}
			}
			if (this.daybreak && this.life <= 0)
			{
				Rectangle hitbox = base.Hitbox;
				for (int i = 0; i < 20; i++)
				{
					int num3 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						6,
						259,
						158
					});
					int num4 = Dust.NewDust(hitbox.TopLeft(), this.width, this.height, num3, 0f, -2.5f, 0, default(Color), 1f);
					Main.dust[num4].alpha = 200;
					Main.dust[num4].velocity *= 1.4f;
					Main.dust[num4].scale += Main.rand.NextFloat();
				}
				if (Main.netMode != 1)
				{
					for (int j = 0; j < 200; j++)
					{
						NPC nPC = Main.npc[j];
						if (nPC.active && !nPC.buffImmune[189] && base.Distance(nPC.Center) < 100f && !nPC.dontTakeDamage && nPC.lifeMax > 5 && !nPC.friendly && !nPC.townNPC)
						{
							nPC.AddBuff(189, 300, false);
						}
					}
				}
			}
			if (this.type == 552 || this.type == 553 || this.type == 554)
			{
				if (this.life > 0)
				{
					int num5 = 0;
					while ((double)num5 < dmg / (double)this.lifeMax * 20.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num5++;
					}
				}
				else
				{
					int num6 = 0;
					while ((float)num6 < 20f)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num6++;
					}
					int num7 = 983;
					if (this.type == 553)
					{
						num7 = 1067;
					}
					else if (this.type == 554)
					{
						num7 = 1071;
					}
					Gore.NewGore(this.position, this.velocity, num7, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, num7 + 3, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, num7 + 2, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, num7 + 1, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, num7 + 1, this.scale);
				}
			}
			else if (this.type == 561 || this.type == 562 || this.type == 563)
			{
				if (this.life > 0)
				{
					int num8 = 0;
					while ((double)num8 < dmg / (double)this.lifeMax * 20.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num8++;
					}
				}
				else
				{
					int num9 = 0;
					while ((float)num9 < 20f)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num9++;
					}
					int num10 = 987;
					if (this.type == 562)
					{
						num10 = 1055;
					}
					else if (this.type == 563)
					{
						num10 = 1061;
					}
					Gore.NewGore(this.position, this.velocity, num10 + 3, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, num10, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, num10 + 4, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, num10 + 5, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, num10 + 2, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, num10 + 1, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, num10 + 1, this.scale);
				}
			}
			else if (this.type == 555 || this.type == 556 || this.type == 557)
			{
				if (this.life > 0)
				{
					int num11 = 0;
					while ((double)num11 < dmg / (double)this.lifeMax * 20.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num11++;
					}
				}
				else
				{
					int num12 = 1031;
					if (this.type == 556)
					{
						num12 = 1034;
					}
					if (this.type == 557)
					{
						num12 = 1037;
					}
					int num13 = 0;
					while ((float)num13 < 20f)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num13++;
					}
					Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity, num12, this.scale);
					Gore.NewGore(new Vector2(this.position.X + 10f, this.position.Y + 20f), this.velocity, num12 + 1, this.scale);
					Gore.NewGore(new Vector2(this.position.X + 10f, this.position.Y + 30f), this.velocity, num12 + 2, this.scale);
				}
			}
			else if (this.type == 551)
			{
				int num14 = (int)((float)this.life / (float)this.lifeMax * 100f);
				int num15 = (int)(((double)this.life + dmg) / (double)((float)this.lifeMax) * 100.0);
				if (num14 != num15 && this.life > 0 && Main.netMode != 1)
				{
					DD2Event.CheckProgress(this.type);
				}
				if (this.life > 0)
				{
					int num16 = 0;
					while ((double)num16 < dmg / (double)this.lifeMax * 20.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num16++;
					}
				}
				else
				{
					int num17 = 0;
					while ((float)num17 < 20f)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num17++;
					}
					if (this.spriteDirection != -1)
					{
						Gore.NewGore(this.position + new Vector2(0f, 54f), this.velocity, 1079, this.scale);
						Gore.NewGore(this.position + new Vector2(72f, 90f), this.velocity, 1080, this.scale);
						Gore.NewGore(this.position + new Vector2(102f, 94f), this.velocity, 1080, this.scale);
						Gore.NewGore(this.position + new Vector2(178f, 0f), this.velocity, 1081, this.scale);
						Gore.NewGore(this.position + new Vector2(136f, 12f), this.velocity, 1082, this.scale);
						Gore.NewGore(this.position + new Vector2(82f, 18f), this.velocity, 1083, this.scale);
						Gore.NewGore(this.position + new Vector2(100f, 26f), this.velocity, 1084, this.scale);
						Gore.NewGore(this.position + new Vector2(170f, 16f), this.velocity, 1085, this.scale);
						Gore.NewGore(this.position + new Vector2(190f, 10f), this.velocity, 1085, this.scale);
						Gore.NewGore(this.position + new Vector2(100f, 36f), this.velocity, 1086, this.scale);
					}
					else
					{
						Gore.NewGore(this.position + new Vector2(176f, 54f), this.velocity, 1079, this.scale);
						Gore.NewGore(this.position + new Vector2(158f, 90f), this.velocity, 1080, this.scale);
						Gore.NewGore(this.position + new Vector2(128f, 94f), this.velocity, 1080, this.scale);
						Gore.NewGore(this.position + new Vector2(0f, 0f), this.velocity, 1081, this.scale);
						Gore.NewGore(this.position + new Vector2(60f, 12f), this.velocity, 1082, this.scale);
						Gore.NewGore(this.position + new Vector2(88f, 18f), this.velocity, 1083, this.scale);
						Gore.NewGore(this.position + new Vector2(86f, 26f), this.velocity, 1084, this.scale);
						Gore.NewGore(this.position + new Vector2(40f, 16f), this.velocity, 1085, this.scale);
						Gore.NewGore(this.position + new Vector2(20f, 10f), this.velocity, 1085, this.scale);
						Gore.NewGore(this.position + new Vector2(142f, 36f), this.velocity, 1086, this.scale);
					}
				}
			}
			else if (this.type == 572 || this.type == 573)
			{
				if (this.life > 0)
				{
					int num18 = 0;
					while ((double)num18 < dmg / (double)this.lifeMax * 20.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num18++;
					}
				}
				else
				{
					ActiveSound activeSound = Main.GetActiveSound(SlotId.FromFloat(this.localAI[0]));
					if (activeSound != null)
					{
						activeSound.Stop();
					}
					ActiveSound activeSound2 = Main.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
					if (activeSound2 != null)
					{
						activeSound2.Stop();
					}
					int num19 = 0;
					while ((float)num19 < 20f)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num19++;
					}
					Vector2 position = base.Center - new Vector2(10f, 10f);
					Gore.NewGore(position, this.velocity, 993, this.scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), this.velocity, 996, this.scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 20f), this.velocity, 995, this.scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), this.velocity, 994, this.scale);
					Gore.NewGore(new Vector2(position.X, position.Y + 34f), this.velocity, 994, this.scale);
				}
			}
			else if (this.type == 574 || this.type == 575)
			{
				if (this.life > 0)
				{
					int num20 = 0;
					while ((double)num20 < dmg / (double)this.lifeMax * 20.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num20++;
					}
				}
				else
				{
					ActiveSound activeSound3 = Main.GetActiveSound(SlotId.FromFloat(this.localAI[2]));
					if (activeSound3 != null)
					{
						activeSound3.Stop();
					}
					int num21 = 0;
					while ((float)num21 < 20f)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num21++;
					}
					int num22 = 1050;
					Vector2 vector = base.Center - new Vector2(30f, 10f);
					Gore.NewGore(new Vector2(vector.X, vector.Y + 10f), this.velocity, num22, this.scale);
					Gore.NewGore(new Vector2(vector.X, vector.Y + 30f), this.velocity, num22 + 1, this.scale);
					Gore.NewGore(new Vector2(vector.X, vector.Y + 30f), this.velocity, num22 + 2, this.scale);
					Gore.NewGore(new Vector2(vector.X, vector.Y + 0f), this.velocity, num22 + 3, this.scale);
					Gore.NewGore(new Vector2(vector.X, vector.Y + 0f), this.velocity, num22 + 4, this.scale);
				}
			}
			else if (this.type == 570 || this.type == 571)
			{
				if (this.life > 0)
				{
					int num23 = 0;
					while ((double)num23 < dmg / (double)this.lifeMax * 20.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num23++;
					}
				}
				else
				{
					int num24 = 0;
					while ((float)num24 < 20f)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num24++;
					}
					int num25 = (this.type == 570) ? 1075 : 979;
					Gore.NewGore(this.position, this.velocity, num25, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, num25 + 2, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, num25 + 2, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, num25 + 3, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, num25 + 1, this.scale);
				}
			}
			else if (this.type == 568 || this.type == 569)
			{
				if (this.life > 0)
				{
					int num26 = 0;
					while ((double)num26 < dmg / (double)this.lifeMax * 20.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num26++;
					}
				}
				else
				{
					int num27 = 0;
					while ((float)num27 < 20f)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num27++;
					}
					Gore.NewGore(this.position, this.velocity, 1020, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 1021, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 1023, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 1022, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 1022, this.scale);
				}
			}
			else if (this.type == 558 || this.type == 559 || this.type == 560)
			{
				if (this.life > 0)
				{
					int num28 = 0;
					while ((double)num28 < dmg / (double)this.lifeMax * 20.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num28++;
					}
				}
				else
				{
					int num29 = 0;
					while ((float)num29 < 20f)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num29++;
					}
					int num30 = 974;
					if (this.type == 559)
					{
						num30 = 1040;
					}
					if (this.type == 560)
					{
						num30 = 1045;
					}
					Gore.NewGore(this.position, this.velocity, num30 + 2, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 10f), this.velocity, num30, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 10f), this.velocity, num30, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 10f), this.velocity, num30 + 4, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 24f), this.velocity, num30 + 1, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 24f), this.velocity, num30 + 3, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 24f), this.velocity, num30 + 3, this.scale);
				}
			}
			else if (this.type == 566 || this.type == 567)
			{
				if (this.life > 0)
				{
					int num31 = 0;
					while ((double)num31 < dmg / (double)this.lifeMax * 20.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 236, (float)hitDirection, -1f, 0, default(Color), 1f);
						num31++;
					}
				}
				else
				{
					int num32 = 0;
					while ((float)num32 < 20f)
					{
						Dust.NewDust(this.position, this.width, this.height, 236, (float)hitDirection, -1f, 0, default(Color), 1f);
						num32++;
					}
					Gore.NewGore(this.position, this.velocity, 970, this.scale);
					if (Main.rand.Next(2) == 0)
					{
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 972, this.scale);
					}
					if (Main.rand.Next(2) == 0)
					{
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 972, this.scale);
					}
					if (Main.rand.Next(2) == 0)
					{
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 973, this.scale);
					}
					if (Main.rand.Next(2) == 0)
					{
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 973, this.scale);
					}
					if (Main.rand.Next(2) == 0)
					{
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 971, this.scale);
					}
					if (Main.rand.Next(2) == 0)
					{
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 971, this.scale);
					}
				}
			}
			else if (this.type == 576 || this.type == 577)
			{
				if (this.life > 0)
				{
					int num33 = 0;
					while ((double)num33 < dmg / (double)this.lifeMax * 20.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 273, (float)hitDirection, -1f, 0, default(Color), 1f);
						num33++;
					}
				}
				else
				{
					int num34 = 0;
					while ((float)num34 < 20f)
					{
						Dust.NewDust(this.position, this.width, this.height, 273, (float)hitDirection, -1f, 0, default(Color), 1f);
						num34++;
					}
					if (this.spriteDirection == -1)
					{
						Gore.NewGore(this.position + new Vector2(0f, 0f), this.velocity, 1005 + ((Main.rand.Next(5) == 0) ? 1 : 0), this.scale);
						Gore.NewGore(this.position + new Vector2(18f, 28f), this.velocity, 1000, this.scale);
						int num35 = Gore.NewGore(this.position + new Vector2(-40f, 70f), this.velocity, 1001, this.scale);
						Main.gore[num35].rotation = 3.14159274f;
						num35 = Gore.NewGore(this.position + new Vector2(4f, 28f), this.velocity, 1002, this.scale);
						Main.gore[num35].rotation = 3.14159274f;
						Gore.NewGore(this.position + new Vector2(36f, 90f), this.velocity, 1003, this.scale);
						Gore.NewGore(this.position + new Vector2(32f, 90f), this.velocity, 1004, this.scale);
					}
					else
					{
						Gore.NewGore(this.position + new Vector2(48f, 0f), this.velocity, 1005 + ((Main.rand.Next(5) == 0) ? 1 : 0), this.scale);
						Gore.NewGore(this.position + new Vector2(22f, 28f), this.velocity, 1000, this.scale);
						Gore.NewGore(this.position + new Vector2(48f, 70f), this.velocity, 1001, this.scale);
						Gore.NewGore(this.position + new Vector2(4f, 28f), this.velocity, 1002, this.scale);
						Gore.NewGore(this.position + new Vector2(36f, 90f), this.velocity, 1003, this.scale);
						Gore.NewGore(this.position + new Vector2(32f, 90f), this.velocity, 1004, this.scale);
					}
				}
			}
			else if (this.type == 564 || this.type == 565)
			{
				if (this.life > 0)
				{
					int num36 = 0;
					while ((double)num36 < dmg / (double)this.lifeMax * 20.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num36++;
					}
				}
				else
				{
					int num37 = 0;
					while ((float)num37 < 20f)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num37++;
					}
					int num38 = 1009;
					Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity, num38, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 15f), this.velocity, num38 + 1, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 15f), this.velocity, num38 + 2, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 15f), this.velocity, num38 + 3, this.scale);
					Gore.NewGore(new Vector2(this.position.X - 20f, this.position.Y + 35f), this.velocity, num38 + 4, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 35f), this.velocity, num38 + 5, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 35f), this.velocity, num38 + 6, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 35f), this.velocity, num38 + 10, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 25f), this.velocity, num38 + 7, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 25f), this.velocity, num38 + 8, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 25f), this.velocity, num38 + 9, this.scale);
				}
			}
			else if (this.type == 578)
			{
				if (this.life > 0)
				{
					int num39 = 0;
					while ((double)num39 < dmg / (double)this.lifeMax * 20.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num39++;
					}
				}
				else
				{
					int num40 = 0;
					while ((float)num40 < 20f)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num40++;
					}
					Gore.NewGore(this.position, this.velocity, 999, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 10f), this.velocity, 998, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 10f), this.velocity, 998, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 10f), this.velocity, 997, this.scale);
				}
			}
			else if (this.type == 541)
			{
				Color color = new Color(222, 108, 48) * 0.7f;
				if (this.life > 0)
				{
					int num41 = 0;
					while ((double)num41 < dmg / (double)this.lifeMax * 200.0)
					{
						Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 268, 0f, 0f, 0, default(Color), 1f)];
						dust.color = color;
						dust.noGravity = true;
						dust.scale = 1.5f;
						dust.fadeIn = 0.7f;
						dust.velocity *= 3f;
						dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 268, 0f, 0f, 0, default(Color), 1f)];
						dust.color = color;
						dust.noGravity = true;
						dust.scale = 1.5f;
						dust.fadeIn = 0.7f;
						dust.velocity *= 3f;
						num41++;
					}
				}
				else
				{
					for (int k = 0; k < 30; k++)
					{
						Dust dust2 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 268, 0f, 0f, 0, default(Color), 1f)];
						dust2.color = color;
						dust2.noGravity = true;
						dust2.scale = 1.5f;
						dust2.fadeIn = 0.7f;
						dust2.velocity *= 3f;
						dust2 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 268, 0f, 0f, 0, default(Color), 1f)];
						dust2.color = color;
						dust2.noGravity = true;
						dust2.scale = 1.5f;
						dust2.fadeIn = 0.7f;
						dust2.velocity *= 3f;
					}
					Gore.NewGore(this.position, this.velocity, 960, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 961, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 963, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 40f), this.velocity, 962, this.scale);
				}
			}
			else if (this.type == 546)
			{
				Color color2 = new Color(150, 108, 78) * 0.7f;
				if (this.life > 0)
				{
					int num42 = 0;
					while ((double)num42 < dmg / (double)this.lifeMax * 50.0)
					{
						Dust dust3 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 268, 0f, 0f, 0, default(Color), 1f)];
						dust3.color = color2;
						dust3.noGravity = true;
						dust3.scale = 1.5f;
						dust3.fadeIn = 0.7f;
						dust3.velocity *= 3f;
						dust3 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 268, 0f, 0f, 0, default(Color), 1f)];
						dust3.color = color2;
						dust3.noGravity = true;
						dust3.scale = 1.5f;
						dust3.fadeIn = 0.7f;
						dust3.velocity *= 3f;
						num42++;
					}
				}
				else
				{
					for (int l = 0; l < 20; l++)
					{
						Dust dust4 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 268, 0f, 0f, 0, default(Color), 1f)];
						dust4.color = color2;
						dust4.noGravity = true;
						dust4.scale = 1.5f;
						dust4.fadeIn = 0.7f;
						dust4.velocity *= 3f;
						dust4 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 268, 0f, 0f, 0, default(Color), 1f)];
						dust4.color = color2;
						dust4.noGravity = true;
						dust4.scale = 1.5f;
						dust4.fadeIn = 0.7f;
						dust4.velocity *= 3f;
					}
					for (int m = 0; m < 20; m++)
					{
						int num43 = Dust.NewDust(this.position, this.width, this.height, 54, 0f, 0f, 50, default(Color), 1.5f);
						Main.dust[num43].velocity *= 2f;
						Main.dust[num43].noGravity = true;
					}
					Gore.NewGore(this.position, this.velocity, 964, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 965, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 966, this.scale);
				}
			}
			if (this.type == 378)
			{
				if (this.life > 0)
				{
					int num44 = 0;
					while ((double)num44 < dmg / (double)this.lifeMax * 50.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 7, 0f, 0f, 0, default(Color), 1f);
						num44++;
					}
				}
				else
				{
					for (int n = 0; n < 20; n++)
					{
						Dust.NewDust(this.position, this.width, this.height, 7, 0f, 0f, 0, default(Color), 1f);
					}
				}
			}
			if (this.type == 437 && dmg == 9999.0)
			{
				for (int num45 = 0; num45 < 6; num45++)
				{
					Gore.NewGore(base.Center - new Vector2(10f), Vector2.UnitY.RotatedByRandom(6.2831854820251465) * 5f, 728 + num45, 1f);
				}
			}
			if (this.type == 398 && dmg == 1337.0)
			{
				MoonlordDeathDrama.ThrowPieces(base.Center, Main.rand.Next(100));
			}
			if (this.type == 488)
			{
				this.localAI[0] = (float)((int)dmg);
				if (this.localAI[0] < 20f)
				{
					this.localAI[0] = 20f;
				}
				if (this.localAI[0] > 120f)
				{
					this.localAI[0] = 120f;
				}
				this.localAI[1] = (float)hitDirection;
			}
			else if (this.type >= 513 && this.type <= 515)
			{
				if (this.life > 0)
				{
					int num46 = 0;
					while ((double)num46 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 250, (float)hitDirection, -1f, this.alpha, this.color, this.scale);
						num46++;
					}
				}
				else
				{
					for (int num47 = 0; num47 < 50; num47++)
					{
						Dust.NewDust(this.position, this.width, this.height, 250, (float)hitDirection, -2f, this.alpha, this.color, this.scale);
					}
					int num48 = Gore.NewGore(this.position, this.velocity, this.type - 513 + 822, 1f);
					Main.gore[num48].alpha = this.alpha;
				}
			}
			else if (this.type >= 510 && this.type <= 512)
			{
				if (this.life > 0)
				{
					int num49 = 0;
					while ((double)num49 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 250, (float)hitDirection, -1f, this.alpha, this.color, this.scale);
						num49++;
					}
				}
				else
				{
					for (int num50 = 0; num50 < 50; num50++)
					{
						Dust.NewDust(this.position, this.width, this.height, 250, (float)hitDirection, -2f, this.alpha, this.color, this.scale);
					}
					int num51 = Gore.NewGore(this.position, this.velocity, this.type - 510 + 819, 1f);
					Main.gore[num51].alpha = this.alpha;
				}
			}
			else if (this.type == 518 || this.type == 416)
			{
				if (this.life > 0)
				{
					int num52 = 0;
					while ((double)num52 < dmg / (double)this.lifeMax * 20.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 241, (float)hitDirection, -1f, 0, default(Color), 1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust5 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 0, default(Color), 1f)];
							dust5.noGravity = true;
							dust5.scale = 1.5f;
							dust5.fadeIn = 1f;
							dust5.velocity *= 3f;
						}
						num52++;
					}
				}
				else
				{
					for (int num53 = 0; num53 < 20; num53++)
					{
						Dust.NewDust(this.position, this.width, this.height, 241, (float)hitDirection, -1f, 0, default(Color), 1f);
						if (Main.rand.Next(3) == 0)
						{
							Dust dust6 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 0, default(Color), 1f)];
							dust6.noGravity = true;
							dust6.scale = 1.5f;
							dust6.fadeIn = 1f;
							dust6.velocity *= 3f;
						}
					}
					Gore.NewGore(this.position, this.velocity, 844, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 845, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 847, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 835, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 836, this.scale);
				}
			}
			else if (this.type == 419)
			{
				if (this.life > 0)
				{
					int num54 = 0;
					while ((double)num54 < dmg / (double)this.lifeMax * 20.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 241, (float)hitDirection, -1f, 0, default(Color), 1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust7 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 0, default(Color), 1f)];
							dust7.noGravity = true;
							dust7.scale = 1.5f;
							dust7.fadeIn = 1f;
							dust7.velocity *= 3f;
						}
						num54++;
					}
				}
				else
				{
					for (int num55 = 0; num55 < 20; num55++)
					{
						Dust.NewDust(this.position, this.width, this.height, 241, (float)hitDirection, -1f, 0, default(Color), 1f);
						if (Main.rand.Next(3) == 0)
						{
							Dust dust8 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 0, default(Color), 1f)];
							dust8.noGravity = true;
							dust8.scale = 1.5f;
							dust8.fadeIn = 1f;
							dust8.velocity *= 3f;
						}
					}
					Gore.NewGore(this.position, this.velocity, 844, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 845, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 846, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 846, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 847, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 847, this.scale);
				}
			}
			else if (this.type == 412 || this.type == 413 || this.type == 414)
			{
				if (this.life > 0)
				{
					int num56 = 0;
					while ((double)num56 < dmg / (double)this.lifeMax * 50.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 241, (float)hitDirection, -1f, 0, default(Color), 1f);
						num56++;
					}
				}
				else
				{
					for (int num57 = 0; num57 < 6; num57++)
					{
						Dust.NewDust(this.position, this.width, this.height, 241, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					for (int num58 = 0; num58 < 2; num58++)
					{
						Dust.NewDust(this.position, this.width, this.height, 6, 2.5f * (float)hitDirection, -2.5f, 100, Color.Transparent, 2f);
					}
					Gore.NewGore(this.position, this.velocity, this.type - 412 + 828, 1f);
				}
			}
			else if (this.type == 415)
			{
				if (this.life > 0)
				{
					int num59 = 0;
					while ((double)num59 < dmg / (double)this.lifeMax * 20.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 241, (float)hitDirection, -1f, 0, default(Color), 1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust9 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 0, default(Color), 1f)];
							dust9.noGravity = true;
							dust9.scale = 1.5f;
							dust9.fadeIn = 1f;
							dust9.velocity *= 3f;
						}
						num59++;
					}
				}
				else
				{
					for (int num60 = 0; num60 < 40; num60++)
					{
						Dust.NewDust(this.position, this.width, this.height, 241, (float)hitDirection, -1f, 0, default(Color), 1f);
						Dust dust10 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 0, default(Color), 1f)];
						dust10.noGravity = true;
						dust10.scale = 1.5f;
						dust10.fadeIn = 1f;
						dust10.velocity *= 3f;
					}
					Gore.NewGore(base.Center, this.velocity * 0.8f, 831, 1f);
					Gore.NewGore(base.Center, this.velocity * 0.8f, 832, 1f);
					Gore.NewGore(base.Center, this.velocity * 0.9f, 833, 1f);
					Gore.NewGore(base.Center, this.velocity * 0.9f, 834, 1f);
				}
			}
			else if (this.type == 417)
			{
				if (this.life > 0)
				{
					int num61 = 0;
					while ((double)num61 < dmg / (double)this.lifeMax * 20.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 241, (float)hitDirection, -1f, 0, default(Color), 1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust11 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 0, default(Color), 1f)];
							dust11.noGravity = true;
							dust11.scale = 1.5f;
							dust11.fadeIn = 1f;
							dust11.velocity *= 3f;
						}
						num61++;
					}
				}
				else
				{
					for (int num62 = 0; num62 < 30; num62++)
					{
						Dust.NewDust(this.position, this.width, this.height, 241, (float)hitDirection, -1f, 0, default(Color), 1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust12 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 0, default(Color), 1f)];
							dust12.noGravity = true;
							dust12.scale = 1.5f;
							dust12.fadeIn = 1f;
							dust12.velocity *= 3f;
						}
					}
					Gore.NewGore(this.position, this.velocity, 837, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 838, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 838, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 838, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 839, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 839, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 38f), this.velocity, 840, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 38f), this.velocity, 840, this.scale);
				}
			}
			else if (this.type == 418)
			{
				if (this.life > 0)
				{
					int num63 = 0;
					while ((double)num63 < dmg / (double)this.lifeMax * 20.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 241, (float)hitDirection, -1f, 0, default(Color), 1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust13 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 0, default(Color), 1f)];
							dust13.noGravity = true;
							dust13.scale = 1.5f;
							dust13.fadeIn = 1f;
							dust13.velocity *= 3f;
						}
						num63++;
					}
				}
				else
				{
					for (int num64 = 0; num64 < 20; num64++)
					{
						Dust.NewDust(this.position, this.width, this.height, 241, (float)hitDirection, -1f, 0, default(Color), 1f);
						Dust dust14 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 0, default(Color), 1f)];
						dust14.noGravity = true;
						dust14.scale = 1.5f;
						dust14.fadeIn = 1f;
						dust14.velocity *= 3f;
					}
					Gore.NewGore(base.Center, this.velocity * 0.8f, 841, 1f);
					Gore.NewGore(base.Center, this.velocity * 0.8f, 842, 1f);
					Gore.NewGore(base.Center, this.velocity * 0.8f, 842, 1f);
					Gore.NewGore(base.Center, this.velocity * 0.9f, 843, 1f);
					Gore.NewGore(base.Center, this.velocity * 0.9f, 843, 1f);
				}
			}
			if (this.type == 516)
			{
				for (int num65 = 0; num65 < 20; num65++)
				{
					int num66 = Dust.NewDust(this.position, this.width, this.height, 6, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					Main.dust[num66].velocity *= 3f;
					Main.dust[num66].scale += Main.rand.NextFloat();
					if (Main.rand.Next(2) == 0)
					{
						num66 = Dust.NewDust(this.position, this.width, this.height, 259, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
						Main.dust[num66].noGravity = true;
					}
				}
			}
			if (this.type == 519)
			{
				Rectangle hitbox2 = base.Hitbox;
				for (int num67 = 0; num67 < this.oldPos.Length; num67 += 3)
				{
					hitbox2.X = (int)this.oldPos[num67].X;
					hitbox2.Y = (int)this.oldPos[num67].Y;
					for (int num68 = 0; num68 < 5; num68++)
					{
						int num69 = Utils.SelectRandom<int>(Main.rand, new int[]
						{
							6,
							259,
							158
						});
						int num70 = Dust.NewDust(hitbox2.TopLeft(), this.width, this.height, num69, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
						Main.dust[num70].alpha = 200;
						Main.dust[num70].velocity *= 2.4f;
						Main.dust[num70].scale += Main.rand.NextFloat();
					}
				}
			}
			if (this.type == 522)
			{
				Vector2 spinningpoint = new Vector2(0f, -3f).RotatedByRandom(3.1415927410125732);
				float num71 = 24f;
				Vector2 value = new Vector2(1.05f, 1f);
				for (float num72 = 0f; num72 < num71; num72 += 1f)
				{
					int num73 = Dust.NewDust(base.Center, 0, 0, 66, 0f, 0f, 0, Color.Transparent, 1f);
					Main.dust[num73].position = base.Center;
					Main.dust[num73].velocity = spinningpoint.RotatedBy((double)(6.28318548f * num72 / num71), default(Vector2)) * value * (0.8f + Main.rand.NextFloat() * 0.4f) * 2f;
					Main.dust[num73].color = Color.SkyBlue;
					Main.dust[num73].noGravity = true;
					Main.dust[num73].scale += 0.5f + Main.rand.NextFloat();
				}
			}
			else if (this.type == 426)
			{
				if (this.life > 0)
				{
					int num74 = 0;
					while ((double)num74 < dmg / (double)this.lifeMax * 50.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 241, (float)hitDirection, -1f, 0, default(Color), 1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust15 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
							dust15.noGravity = true;
							dust15.scale = 1.5f;
							dust15.fadeIn = 1f;
							dust15.velocity *= 3f;
						}
						num74++;
					}
				}
				else
				{
					for (int num75 = 0; num75 < 20; num75++)
					{
						Dust.NewDust(this.position, this.width, this.height, 241, (float)hitDirection, -1f, 0, default(Color), 1f);
					}
					for (int num76 = 0; num76 < 30; num76++)
					{
						int num77 = Utils.SelectRandom<int>(Main.rand, new int[]
						{
							229,
							240,
							161
						});
						Dust dust16 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num77, 0f, 0f, 0, default(Color), 1f)];
						dust16.noGravity = true;
						dust16.scale = 1.25f + Main.rand.NextFloat();
						dust16.fadeIn = 0.25f;
						dust16.velocity *= 2f;
						dust16.noLight = true;
					}
					Gore.NewGore(base.Top, this.velocity * 0.7f, 799, 1f);
					Gore.NewGore(base.Center, this.velocity * 0.8f, 800, 1f);
					Gore.NewGore(base.Center, this.velocity * 0.9f, 801, 1f);
					if (Main.netMode != 1)
					{
						for (int num78 = 0; num78 < 3; num78++)
						{
							int num79 = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 428, this.whoAmI, 0f, 0f, 0f, 0f, 255);
							Main.npc[num79].velocity = -Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (float)Main.rand.Next(3, 6) - Vector2.UnitY * 2f;
							Main.npc[num79].netUpdate = true;
						}
					}
				}
			}
			else if (this.type == 427)
			{
				if (this.life > 0)
				{
					int num80 = 0;
					while ((double)num80 < dmg / (double)this.lifeMax * 20.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 241, (float)hitDirection, -1f, 0, default(Color), 1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust17 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
							dust17.noGravity = true;
							dust17.scale = 1.5f;
							dust17.fadeIn = 1f;
							dust17.velocity *= 3f;
						}
						num80++;
					}
				}
				else
				{
					for (int num81 = 0; num81 < 10; num81++)
					{
						Dust.NewDust(this.position, this.width, this.height, 241, (float)hitDirection, -1f, 0, default(Color), 1f);
					}
					for (int num82 = 0; num82 < 20; num82++)
					{
						int num83 = Utils.SelectRandom<int>(Main.rand, new int[]
						{
							229,
							229,
							240
						});
						Dust dust18 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num83, 0f, 0f, 0, default(Color), 1f)];
						dust18.noGravity = true;
						dust18.scale = 1.25f + Main.rand.NextFloat();
						dust18.fadeIn = 0.25f;
						dust18.velocity *= 3f;
						dust18.noLight = true;
					}
					Gore.NewGore(base.Center, this.velocity * 0.8f, 802, 1f);
					Gore.NewGore(base.Center, this.velocity * 0.9f, 803, 1f);
					Gore.NewGore(base.Center, this.velocity * 0.9f, 804, 1f);
					Gore.NewGore(base.Center, this.velocity * 0.8f, 805, 1f);
				}
			}
			else if (this.type == 429)
			{
				if (this.life > 0)
				{
					int num84 = 0;
					while ((double)num84 < dmg / (double)this.lifeMax * 20.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 241, (float)hitDirection, -1f, 0, default(Color), 1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust19 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
							dust19.noGravity = true;
							dust19.scale = 1.5f;
							dust19.fadeIn = 1f;
							dust19.velocity *= 3f;
						}
						num84++;
					}
				}
				else
				{
					for (int num85 = 0; num85 < 20; num85++)
					{
						Dust.NewDust(this.position, this.width, this.height, 241, (float)hitDirection, -1f, 0, default(Color), 1f);
						if (Main.rand.Next(3) == 0)
						{
							Dust dust20 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
							dust20.noGravity = true;
							dust20.scale = 1.5f;
							dust20.fadeIn = 1f;
							dust20.velocity *= 3f;
						}
					}
					Gore.NewGore(this.position, this.velocity, 808, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 809, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 809, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 810, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 810, this.scale);
					if (Main.netMode != 1)
					{
						Point point = base.Center.ToTileCoordinates();
						Point point2 = Main.player[this.target].Center.ToTileCoordinates();
						Vector2 vector2 = Main.player[this.target].Center - base.Center;
						int num86 = 20;
						int num87 = 3;
						int num88 = 7;
						int num89 = 2;
						int num90 = 0;
						bool flag2 = false;
						if (vector2.Length() > 2000f)
						{
							flag2 = true;
						}
						while (!flag2)
						{
							if (num90 >= 100)
							{
								break;
							}
							num90++;
							int num91 = Main.rand.Next(point2.X - num86, point2.X + num86 + 1);
							int num92 = Main.rand.Next(point2.Y - num86, point2.Y - Math.Abs(num91 - point2.X) + 1);
							if ((num92 < point2.Y - num88 || num92 > point2.Y + num88 || num91 < point2.X - num88 || num91 > point2.X + num88) && (num92 < point.Y - num87 || num92 > point.Y + num87 || num91 < point.X - num87 || num91 > point.X + num87) && !Main.tile[num91, num92].nactive())
							{
								bool flag3 = true;
								if (flag3 && Main.tile[num91, num92].lava())
								{
									flag3 = false;
								}
								if (flag3 && Collision.SolidTiles(num91 - num89, num91 + num89, num92 - num89, num92 + num89))
								{
									flag3 = false;
								}
								if (flag3 && !Collision.CanHitLine(base.Center, 0, 0, Main.player[this.target].Center, 0, 0))
								{
									flag3 = false;
								}
								if (flag3)
								{
									Projectile.NewProjectile((float)(num91 * 16 + 8), (float)(num92 * 16 + 8), 0f, 0f, 578, 0, 1f, Main.myPlayer, 0f, 0f);
									break;
								}
							}
						}
					}
				}
			}
			else if (this.type == 425)
			{
				if (this.life > 0)
				{
					int num93 = 0;
					while ((double)num93 < dmg / (double)this.lifeMax * 20.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 241, (float)hitDirection, -1f, 0, default(Color), 1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust21 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
							dust21.noGravity = true;
							dust21.scale = 1.5f;
							dust21.fadeIn = 1f;
							dust21.velocity *= 3f;
						}
						num93++;
					}
				}
				else
				{
					for (int num94 = 0; num94 < 20; num94++)
					{
						Dust.NewDust(this.position, this.width, this.height, 241, (float)hitDirection, -1f, 0, default(Color), 1f);
						if (Main.rand.Next(3) == 0)
						{
							Dust dust22 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
							dust22.noGravity = true;
							dust22.scale = 1.5f;
							dust22.fadeIn = 1f;
							dust22.velocity *= 3f;
						}
					}
					Gore.NewGore(this.position, this.velocity, 796, this.scale);
					Gore.NewGore(base.Center, this.velocity, 797, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 798, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 809, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 809, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 810, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 810, this.scale);
				}
			}
			else if (this.type == 428)
			{
				if (this.life > 0)
				{
					int num95 = 0;
					while ((double)num95 < dmg / (double)this.lifeMax * 20.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 241, (float)hitDirection, -1f, 0, default(Color), 1f);
						num95++;
					}
				}
				else
				{
					for (int num96 = 0; num96 < 10; num96++)
					{
						Dust.NewDust(this.position, this.width, this.height, 241, (float)hitDirection, -1f, 0, default(Color), 1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust.NewDust(this.position, this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f);
						}
						else
						{
							Dust.NewDust(this.position, this.width, this.height, 240, 0f, 0f, 0, default(Color), 1f);
						}
					}
					Gore.NewGore(this.position, this.velocity * 0.8f, 806, 1f);
					Gore.NewGore(this.position, this.velocity * 0.8f, 807, 1f);
				}
			}
			else if (this.type == 424)
			{
				if (this.life > 0)
				{
					int num97 = 0;
					while ((double)num97 < dmg / (double)this.lifeMax * 20.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 249, (float)hitDirection, -1f, 0, default(Color), 1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust23 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 242, 0f, 0f, 0, default(Color), 1f)];
							dust23.noGravity = true;
							dust23.scale = 1.5f;
							dust23.fadeIn = 1f;
							dust23.velocity *= 3f;
						}
						num97++;
					}
				}
				else
				{
					for (int num98 = 0; num98 < 20; num98++)
					{
						Dust.NewDust(this.position, this.width, this.height, 249, (float)hitDirection, -1f, 0, default(Color), 1f);
						if (Main.rand.Next(3) == 0)
						{
							Dust dust24 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 242, 0f, 0f, 0, default(Color), 1f)];
							dust24.noGravity = true;
							dust24.scale = 1.5f;
							dust24.fadeIn = 1f;
							dust24.velocity *= 3f;
						}
					}
					Gore.NewGore(this.position, this.velocity, 793, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 794, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 794, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 795, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 795, this.scale);
				}
			}
			else if (this.type == 423)
			{
				if (this.life > 0)
				{
					int num99 = 0;
					while ((double)num99 < dmg / (double)this.lifeMax * 50.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 249, (float)hitDirection, -1f, 0, default(Color), 1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust25 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 242, 0f, 0f, 0, default(Color), 1f)];
							dust25.noGravity = true;
							dust25.scale = 1.5f;
							dust25.fadeIn = 1f;
							dust25.velocity *= 3f;
						}
						num99++;
					}
				}
				else
				{
					for (int num100 = 0; num100 < 20; num100++)
					{
						Dust.NewDust(this.position, this.width, this.height, 249, (float)hitDirection, -1f, 0, default(Color), 1f);
						Dust dust26 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 242, 0f, 0f, 0, default(Color), 1f)];
						dust26.noGravity = true;
						dust26.scale = 1.5f;
						dust26.fadeIn = 1f;
						dust26.velocity *= 3f;
					}
					Gore.NewGore(base.Center, this.velocity * 0.8f, 790, 1f);
					Gore.NewGore(base.Center, this.velocity * 0.8f, 791, 1f);
					Gore.NewGore(base.Center, this.velocity * 0.9f, 792, 1f);
				}
			}
			else if (this.type == 421)
			{
				if (this.life > 0)
				{
					int num101 = 0;
					while ((double)num101 < dmg / (double)this.lifeMax * 20.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 249, (float)hitDirection, -1f, 0, default(Color), 1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust27 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 242, 0f, 0f, 0, default(Color), 1f)];
							dust27.noGravity = true;
							dust27.scale = 1.5f;
							dust27.fadeIn = 1f;
							dust27.velocity *= 3f;
						}
						num101++;
					}
				}
				else
				{
					for (int num102 = 0; num102 < 10; num102++)
					{
						Dust.NewDust(this.position, this.width, this.height, 249, (float)hitDirection, -1f, 0, default(Color), 1f);
						Dust dust28 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 242, 0f, 0f, 0, default(Color), 1f)];
						dust28.noGravity = true;
						dust28.scale = 1.5f;
						dust28.fadeIn = 1f;
						dust28.velocity *= 3f;
					}
					Gore.NewGore(base.Center, this.velocity * 0.8f, 785, 1f);
					Gore.NewGore(base.Center, this.velocity * 0.8f, 786, 1f);
					Gore.NewGore(base.Center, this.velocity * 0.9f, 787, 1f);
				}
			}
			else if (this.type == 420)
			{
				if (this.life > 0)
				{
					int num103 = 0;
					while ((double)num103 < dmg / (double)this.lifeMax * 20.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 249, (float)hitDirection, -1f, 0, default(Color), 1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust29 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 242, 0f, 0f, 0, default(Color), 1f)];
							dust29.noGravity = true;
							dust29.scale = 1.5f;
							dust29.fadeIn = 1f;
							dust29.velocity *= 3f;
						}
						num103++;
					}
				}
				else
				{
					for (int num104 = 0; num104 < 10; num104++)
					{
						Dust.NewDust(this.position, this.width, this.height, 249, (float)hitDirection, -1f, 0, default(Color), 1f);
						Dust dust30 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 242, 0f, 0f, 0, default(Color), 1f)];
						dust30.noGravity = true;
						dust30.scale = 1.5f;
						dust30.fadeIn = 1f;
						dust30.velocity *= 3f;
					}
					Gore.NewGore(base.Center, this.velocity * 0.8f, 782, 1f);
					Gore.NewGore(base.Center, this.velocity * 0.8f, 783, 1f);
					Gore.NewGore(base.Center, this.velocity * 0.9f, 784, 1f);
				}
			}
			else if (this.type == 406 || this.type == 405)
			{
				if (this.life > 0)
				{
					int num105 = 0;
					while ((double)num105 < 10.0 + dmg / 10.0)
					{
						int num106 = this.width / 4;
						((float)Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() * (float)Main.rand.Next(24, 41) / 8f;
						int num107 = Dust.NewDust(base.Center - Vector2.One * (float)num106, num106 * 2, num106 * 2, 229, 0f, 0f, 0, default(Color), 1f);
						Dust dust31 = Main.dust[num107];
						Vector2 vector3 = Vector2.Normalize(dust31.position - base.Center);
						dust31.position = base.Center + vector3 * (float)num106 * this.scale - new Vector2(4f);
						if (num105 < 30)
						{
							dust31.velocity = vector3 * dust31.velocity.Length() * 2f;
						}
						else
						{
							dust31.velocity = 2f * vector3 * (float)Main.rand.Next(45, 91) / 10f;
						}
						dust31.noGravity = true;
						dust31.scale = 0.7f + Main.rand.NextFloat();
						num105++;
					}
				}
				else
				{
					for (int num108 = 0; num108 < 60; num108++)
					{
						int num109 = this.width / 4;
						((float)Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() * (float)Main.rand.Next(24, 41) / 8f;
						int num110 = Dust.NewDust(base.Center - Vector2.One * (float)num109, num109 * 2, num109 * 2, 229, 0f, 0f, 0, default(Color), 1f);
						Dust dust32 = Main.dust[num110];
						Vector2 vector4 = Vector2.Normalize(dust32.position - base.Center);
						dust32.position = base.Center + vector4 * (float)num109 * this.scale - new Vector2(4f);
						if (num108 < 30)
						{
							dust32.velocity = vector4 * dust32.velocity.Length() * 2f;
						}
						else
						{
							dust32.velocity = 2f * vector4 * (float)Main.rand.Next(45, 91) / 10f;
						}
						dust32.noGravity = true;
						dust32.scale = 0.7f;
					}
					if (this.type == 405)
					{
						int num111 = NPC.CountNPCS(406) + NPC.CountNPCS(405);
						int num112 = 4;
						if (num111 >= 4)
						{
							num112 = 3;
						}
						if (num111 >= 7)
						{
							num112 = 2;
						}
						if (num111 >= 10)
						{
							num112 = 1;
						}
						for (int num113 = 0; num113 < num112; num113++)
						{
							Vector2 velocity = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (3f + Main.rand.NextFloat() * 4f);
							int num114 = NPC.NewNPC((int)base.Center.X, (int)base.Bottom.Y, 406, this.whoAmI, 0f, 0f, 0f, 0f, 255);
							Main.npc[num114].velocity = velocity;
						}
					}
				}
			}
			else if (this.type == 409)
			{
				if (this.life > 0)
				{
					int num115 = 0;
					while ((double)num115 < dmg / (double)this.lifeMax * 50.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 17, (float)hitDirection, -1f, 0, default(Color), 1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust33 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
							dust33.noGravity = true;
						}
						num115++;
					}
				}
				else
				{
					for (int num116 = 0; num116 < 20; num116++)
					{
						Dust.NewDust(this.position, this.width, this.height, 17, (float)hitDirection, -1f, 0, default(Color), 1f);
						Dust dust34 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
						dust34.noGravity = true;
						dust34.velocity *= 3f;
					}
					Gore.NewGore(base.Center, this.velocity * 0.8f, 775, 1f);
					Gore.NewGore(base.Center, this.velocity * 0.8f, 776, 1f);
					Gore.NewGore(base.Center, this.velocity * 0.9f, 777, 1f);
				}
			}
			else if (this.type == 410)
			{
				if (this.life > 0)
				{
					int num117 = 0;
					while ((double)num117 < dmg / (double)this.lifeMax * 10.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 17, (float)hitDirection, -1f, 0, default(Color), 1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust35 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
							dust35.noGravity = true;
						}
						num117++;
					}
				}
				else
				{
					for (int num118 = 0; num118 < 5; num118++)
					{
						Dust.NewDust(this.position, this.width, this.height, 17, (float)hitDirection, -1f, 0, default(Color), 1f);
						Dust dust36 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
						dust36.noGravity = true;
						dust36.velocity *= 3f;
					}
				}
			}
			else if (this.type == 407)
			{
				if (this.life > 0)
				{
					int num119 = 0;
					while ((double)num119 < dmg / (double)this.lifeMax * 50.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 17, (float)hitDirection, -1f, 0, Color.Transparent, 0.75f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust37 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
							dust37.noGravity = true;
						}
						num119++;
					}
				}
				else
				{
					for (int num120 = 0; num120 < 20; num120++)
					{
						if (Main.rand.Next(3) != 0)
						{
							Dust.NewDust(this.position, this.width, this.height, 17, (float)hitDirection, -1f, 0, default(Color), 1f);
						}
						Dust dust38 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
						dust38.noGravity = true;
						dust38.velocity *= 3f;
					}
					Gore.NewGore(base.Top, this.velocity * 0.8f, 778, 1f);
					Gore.NewGore(base.Top, this.velocity * 0.8f, 779, 1f);
					Gore.NewGore(base.Center, this.velocity * 0.9f, 780, 1f);
					Gore.NewGore(base.Center, this.velocity * 0.9f, 781, 1f);
					Gore.NewGore(base.Center, this.velocity * 0.9f, 780, 1f);
					Gore.NewGore(base.Center, this.velocity * 0.9f, 781, 1f);
				}
			}
			else if (this.type == 402)
			{
				if (this.life > 0)
				{
					int num121 = 0;
					while ((double)num121 < dmg / (double)this.lifeMax * 3.0)
					{
						if (Main.rand.Next(3) == 0)
						{
							Dust.NewDust(this.position, this.width, this.height, 17, (float)hitDirection, -1f, 0, Color.Transparent, 0.75f);
						}
						if (Main.rand.Next(2) == 0)
						{
							Dust dust39 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
							dust39.noGravity = true;
						}
						for (int num122 = 0; num122 < this.oldPos.Length; num122++)
						{
							if (Main.rand.Next(4) == 0)
							{
								if (this.oldPos[num122] == Vector2.Zero)
								{
									break;
								}
								if (Main.rand.Next(3) == 0)
								{
									Dust.NewDust(this.oldPos[num122], this.width, this.height, 17, (float)hitDirection, -1f, 0, Color.Transparent, 0.75f);
								}
								if (Main.rand.Next(2) == 0)
								{
									Dust dust40 = Main.dust[Dust.NewDust(this.oldPos[num122], this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
									dust40.noGravity = true;
								}
							}
						}
						num121++;
					}
				}
				else
				{
					for (int num123 = 0; num123 < 5; num123++)
					{
						if (Main.rand.Next(3) == 0)
						{
							Dust.NewDust(this.position, this.width, this.height, 17, (float)hitDirection, -1f, 0, default(Color), 1f);
						}
						Dust dust41 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
						dust41.noGravity = true;
						dust41.velocity *= 3f;
					}
					for (int num124 = 0; num124 < this.oldPos.Length; num124++)
					{
						if (Main.rand.Next(4) == 0)
						{
							if (this.oldPos[num124] == Vector2.Zero)
							{
								break;
							}
							for (int num125 = 0; num125 < 2; num125++)
							{
								if (Main.rand.Next(3) == 0)
								{
									Dust.NewDust(this.oldPos[num124], this.width, this.height, 17, (float)hitDirection, -1f, 0, default(Color), 1f);
								}
								Dust dust42 = Main.dust[Dust.NewDust(this.oldPos[num124], this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
								dust42.noGravity = true;
								dust42.velocity *= 3f;
							}
						}
					}
				}
			}
			else if (this.type == 411)
			{
				if (this.life > 0)
				{
					int num126 = 0;
					while ((double)num126 < dmg / (double)this.lifeMax * 20.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 17, (float)hitDirection, -1f, 0, default(Color), 1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust43 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
							dust43.noGravity = true;
						}
						num126++;
					}
				}
				else
				{
					for (int num127 = 0; num127 < 20; num127++)
					{
						Dust.NewDust(this.position, this.width, this.height, 17, (float)hitDirection, -1f, 0, default(Color), 1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust44 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0f, 0f, 0, default(Color), 1f)];
							dust44.noGravity = true;
						}
					}
					Gore.NewGore(this.position, this.velocity, 772, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 773, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 773, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 774, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 774, this.scale);
				}
			}
			else if (this.type == 491)
			{
				if (this.life <= 0)
				{
					Vector2 value2 = base.Center - new Vector2(60f);
					Vector2 vector5 = new Vector2((float)((this.spriteDirection == 1) ? -1 : 1), 0f).RotatedBy((double)this.rotation, default(Vector2));
					Gore.NewGore(value2 + vector5 * (float)(this.width / 2), this.velocity, 858, this.scale);
					Gore.NewGore(value2 + vector5 * (float)(this.width / 3), this.velocity, 857, this.scale);
					for (int num128 = -1; num128 < 2; num128++)
					{
						Gore.NewGore(value2 + vector5 * ((float)this.width * (0.45f + (float)num128 * 0.1f)), this.velocity, 859, this.scale);
						Gore.NewGore(value2 + vector5 * ((float)this.width * (0.4f + (float)num128 * 0.1f)), this.velocity, 859, this.scale);
						Gore.NewGore(value2 + vector5 * ((float)this.width * (0.35f + (float)num128 * 0.1f)), this.velocity, 859, this.scale);
					}
					for (int num129 = -1; num129 < 2; num129++)
					{
						Gore.NewGore(value2 + vector5 * ((float)this.width * 0.35f) - new Vector2(0f, 200f) + Utils.RandomVector2(Main.rand, -40f, 40f), this.velocity, Utils.SelectRandom<int>(Main.rand, new int[]
						{
							860,
							892,
							893
						}), this.scale);
						Gore.NewGore(value2 + vector5 * ((float)this.width * 0.15f) - new Vector2(0f, 200f) + Utils.RandomVector2(Main.rand, -40f, 40f), this.velocity, Utils.SelectRandom<int>(Main.rand, new int[]
						{
							860,
							892,
							893
						}), this.scale);
						Gore.NewGore(value2 + vector5 * ((float)this.width * -0.35f) - new Vector2(0f, 200f) + Utils.RandomVector2(Main.rand, -40f, 40f), this.velocity, Utils.SelectRandom<int>(Main.rand, new int[]
						{
							860,
							892,
							893
						}), this.scale);
						Gore.NewGore(value2 + vector5 * ((float)this.width * -0.15f) - new Vector2(0f, 300f) + Utils.RandomVector2(Main.rand, -40f, 40f), this.velocity, Utils.SelectRandom<int>(Main.rand, new int[]
						{
							860,
							892,
							893
						}), this.scale);
						Gore.NewGore(value2 + vector5 * ((float)this.width * -0.15f) - new Vector2(0f, 300f) + Utils.RandomVector2(Main.rand, -40f, 40f), this.velocity, Utils.SelectRandom<int>(Main.rand, new int[]
						{
							860,
							892,
							893
						}), this.scale);
					}
					for (int num130 = 0; num130 < 2; num130++)
					{
						Gore.NewGore(value2 + vector5 * ((float)this.width * 0.15f) - new Vector2(0f, (float)(160 + 60 * num130)), this.velocity, 855, this.scale);
						Gore.NewGore(value2 + vector5 * ((float)this.width * -0.15f) - new Vector2(0f, (float)(160 + 60 * num130)), this.velocity, 855, this.scale);
					}
					for (int num131 = -1; num131 < 2; num131++)
					{
						Gore.NewGore(value2 + vector5 * ((float)this.width * (0.25f + (float)num131 * 0.1f)) - new Vector2(0f, (float)(20 + 40 * num131)), this.velocity, 854, this.scale);
						Gore.NewGore(value2 + vector5 * ((float)this.width * (-0.45f + (float)num131 * 0.1f)) - new Vector2(0f, (float)(20 + 40 * num131)), this.velocity, 853, this.scale);
						Gore.NewGore(value2 + vector5 * ((float)this.width * (0.05f + (float)num131 * 0.1f)) - new Vector2(0f, (float)(20 + 40 * num131)), this.velocity, 856, this.scale);
					}
					for (int num132 = 0; num132 < 30; num132++)
					{
						int num133 = Main.rand.Next(861, 863);
						int num134 = Gore.NewGore(base.Center - new Vector2(60f), Vector2.Zero, num133, 1f);
						Main.gore[num134].alpha = 100;
						Main.gore[num134].velocity = Vector2.Transform(new Vector2(4f, 0f), Matrix.CreateRotationZ((float)(Main.rand.NextDouble() * 6.2831854820251465)));
						Main.gore[num134].position = new Vector2(this.position.X - 20f + ((float)this.width + 40f) * Main.rand.NextFloat(), this.position.Y - 240f + (float)(this.height + 240 - 20) * Main.rand.NextFloat());
					}
					for (int num135 = 0; num135 < 120; num135++)
					{
						int num136 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num136].noGravity = true;
						Main.dust[num136].velocity *= 5f;
						num136 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num136].velocity *= 4f;
						Main.dust[num136].noGravity = true;
					}
					if (Main.netMode != 1)
					{
						for (int num137 = 0; num137 < 4; num137++)
						{
							float num138 = (float)(num137 < 2).ToDirectionInt() * (0.3926991f + 0.7853982f * Main.rand.NextFloat());
							Vector2 vector6 = new Vector2(0f, -Main.rand.NextFloat() * 0.5f - 0.5f).RotatedBy((double)num138, default(Vector2)) * 6f;
							Projectile.NewProjectile(base.Center.X, base.Center.Y, vector6.X, vector6.Y, 594, 0, 0f, Main.myPlayer, 0f, 0f);
						}
					}
				}
			}
			else if (this.type == 492)
			{
				if (this.life <= 0)
				{
					for (int num139 = 0; num139 < 7; num139++)
					{
						int num140 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num140].velocity *= 1.4f;
					}
					for (int num141 = 0; num141 < 10; num141++)
					{
						int num142 = Main.rand.Next(61, 64);
						int num143 = Gore.NewGore(this.position, Vector2.Zero, num142, 1f);
						Main.gore[num143].alpha = 100;
						Main.gore[num143].velocity = Vector2.Transform(new Vector2(1f, 0f), Matrix.CreateRotationZ((float)(Main.rand.NextDouble() * 6.2831854820251465)));
					}
				}
			}
			else if (this.type >= 524 && this.type <= 527)
			{
				int num144 = 0;
				int num145 = 5;
				int num146 = 863;
				if (this.type == 525)
				{
					num144 = 75;
					num146 = 867;
				}
				else if (this.type == 526)
				{
					num144 = 170;
					num146 = 871;
				}
				else if (this.type == 527)
				{
					num144 = 67;
					num146 = 879;
				}
				if (this.life > 0)
				{
					int num147 = 0;
					while ((double)num147 < dmg / (double)this.lifeMax * 20.0)
					{
						Dust.NewDust(this.position, this.width, this.height, num145, (float)hitDirection, -1f, 0, default(Color), 1f);
						if (Main.rand.Next(4) == 0 && num144 > 0)
						{
							Dust dust45 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num144, 0f, 0f, 0, default(Color), 1f)];
							dust45.noGravity = true;
							dust45.scale = 1.5f;
							dust45.fadeIn = 1f;
							dust45.velocity *= 3f;
						}
						num147++;
					}
				}
				else
				{
					for (int num148 = 0; num148 < 20; num148++)
					{
						Dust.NewDust(this.position, this.width, this.height, num145, (float)hitDirection, -1f, 0, default(Color), 1f);
						if (Main.rand.Next(3) == 0 && num144 > 0)
						{
							Dust dust46 = Main.dust[Dust.NewDust(this.position, this.width, this.height, num144, 0f, 0f, 0, default(Color), 1f)];
							dust46.noGravity = true;
							dust46.scale = 1.5f;
							dust46.fadeIn = 1f;
							dust46.velocity *= 3f;
						}
					}
					Gore.NewGore(this.position, this.velocity, num146, this.scale);
					Gore.NewGore(this.position, this.velocity, num146 + 1, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, num146 + 2, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, num146 + 2, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, num146 + 3, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, num146 + 3, this.scale);
				}
			}
			else if (this.type >= 528 && this.type <= 529)
			{
				int num149 = 5;
				int num150 = 875;
				if (this.type == 529)
				{
					num150 = 876;
				}
				if (this.life > 0)
				{
					int num151 = 0;
					while ((double)num151 < dmg / (double)this.lifeMax * 20.0)
					{
						Dust.NewDust(this.position, this.width, this.height, num149, (float)hitDirection, -1f, 0, default(Color), 1f);
						num151++;
					}
				}
				else
				{
					for (int num152 = 0; num152 < 20; num152++)
					{
						Dust.NewDust(this.position, this.width, this.height, num149, (float)hitDirection, -1f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, num150, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 877, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 877, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 878, this.scale);
				}
			}
			else if (this.type == 530 || this.type == 531)
			{
				if (this.life > 0)
				{
					int num153 = 0;
					while ((double)num153 < dmg / (double)this.lifeMax * 30.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 250, (float)hitDirection, -1f, 100, default(Color), 1f);
						num153++;
					}
				}
				else
				{
					for (int num154 = 0; num154 < 20; num154++)
					{
						Dust.NewDust(this.position, this.width, this.height, 250, 2.5f * (float)hitDirection, -2.5f, 100, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 883, 1f);
					Gore.NewGore(this.position, this.velocity, 884, 1f);
					Gore.NewGore(this.position, this.velocity, 885, 1f);
					Gore.NewGore(this.position, this.velocity, 886, 1f);
					Gore.NewGore(this.position, this.velocity, 887, 1f);
				}
			}
			else if (this.type == 532)
			{
				if (this.life > 0)
				{
					int num155 = 0;
					while ((double)num155 < dmg / (double)this.lifeMax * 50.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 100, default(Color), 1f);
						num155++;
					}
				}
				else
				{
					for (int num156 = 0; num156 < 50; num156++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 100, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 888, 1f);
					Gore.NewGore(this.position, this.velocity, 889, 1f);
					Gore.NewGore(this.position, this.velocity, 890, 1f);
					Gore.NewGore(this.position, this.velocity, 891, 1f);
				}
			}
			else if (this.type == 533)
			{
				if (this.life > 0)
				{
					int num157 = 0;
					while ((double)num157 < dmg / (double)this.lifeMax * 50.0)
					{
						int num158 = Dust.NewDust(this.position, this.width, this.height, 27, 0f, 0f, 50, default(Color), 1.5f);
						Main.dust[num158].velocity *= 2f;
						Main.dust[num158].noGravity = true;
						num157++;
					}
				}
				else
				{
					for (int num159 = 0; num159 < 40; num159++)
					{
						int num160 = Dust.NewDust(this.position, this.width, this.height, 27, 0f, 0f, 50, default(Color), 1.5f);
						Main.dust[num160].velocity *= 2f;
						Main.dust[num160].noGravity = true;
						Main.dust[num160].fadeIn = 1f;
					}
				}
			}
			else if (this.type == 460)
			{
				if (this.life > 0)
				{
					int num161 = 0;
					while ((double)num161 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num161++;
					}
				}
				else
				{
					for (int num162 = 0; num162 < 50; num162++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 643, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 645, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 644, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 646, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 646, this.scale);
				}
			}
			else if (this.type == 477)
			{
				if (this.life > 0)
				{
					int num163 = 0;
					while ((double)num163 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 237, (float)hitDirection, -1f, 0, default(Color), 1f);
						num163++;
					}
				}
				else
				{
					for (int num164 = 0; num164 < 50; num164++)
					{
						Dust.NewDust(this.position, this.width, this.height, 237, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 687, this.scale);
					Gore.NewGore(this.position, this.velocity, 688, this.scale);
					Gore.NewGore(this.position, this.velocity, 689, this.scale);
					Gore.NewGore(this.position, this.velocity, 690, this.scale);
					Gore.NewGore(this.position, this.velocity, 691, this.scale);
				}
			}
			else if (this.type == 479)
			{
				if (this.life > 0)
				{
					int num165 = 0;
					while ((double)num165 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 237, (float)hitDirection, -1f, 0, default(Color), 1f);
						num165++;
					}
				}
				else
				{
					for (int num166 = 0; num166 < 50; num166++)
					{
						Dust.NewDust(this.position, this.width, this.height, 237, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 681, this.scale);
					Gore.NewGore(this.position, this.velocity, 682, this.scale);
					Gore.NewGore(this.position, this.velocity, 683, this.scale);
				}
			}
			else if (this.type == 478)
			{
				if (this.life > 0)
				{
					for (int num167 = 0; num167 < 10; num167++)
					{
						int num168 = Dust.NewDust(this.position, this.width, this.height, 238, (float)hitDirection, -1f, 0, default(Color), 1f);
						Main.dust[num168].noGravity = true;
					}
				}
				else
				{
					for (int num169 = 0; num169 < 50; num169++)
					{
						Dust.NewDust(this.position, this.width, this.height, 237 + Main.rand.Next(2), 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 684, this.scale);
					Gore.NewGore(this.position, this.velocity, 685, this.scale);
					Gore.NewGore(this.position, this.velocity, 686, this.scale);
					Gore.NewGore(this.position, this.velocity, 684 + Main.rand.Next(3), this.scale);
				}
			}
			else if (this.type == 466)
			{
				if (this.life > 0)
				{
					int num170 = 0;
					while ((double)num170 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num170++;
					}
				}
				else
				{
					for (int num171 = 0; num171 < 50; num171++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 656, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 657, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 659, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 658, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 658, this.scale);
				}
			}
			else if (this.type == 468)
			{
				if (this.life > 0)
				{
					int num172 = 0;
					while ((double)num172 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num172++;
					}
				}
				else
				{
					for (int num173 = 0; num173 < 50; num173++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 662, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 663, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 663, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 664, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 664, this.scale);
				}
			}
			else if (this.type == 469)
			{
				if (this.life > 0)
				{
					int num174 = 0;
					while ((double)num174 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num174++;
					}
				}
				else
				{
					for (int num175 = 0; num175 < 50; num175++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 665, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 666, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 666, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 667, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 667, this.scale);
				}
			}
			else if (this.type == 463)
			{
				if (this.life > 0)
				{
					int num176 = 0;
					while ((double)num176 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num176++;
					}
				}
				else
				{
					for (int num177 = 0; num177 < 50; num177++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 653, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 654, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 654, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 655, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 655, this.scale);
				}
			}
			else if (this.type == 461)
			{
				if (this.life > 0)
				{
					int num178 = 0;
					while ((double)num178 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num178++;
					}
				}
				else
				{
					for (int num179 = 0; num179 < 50; num179++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 647, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 648, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 648, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 649, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 649, this.scale);
				}
			}
			else if (this.type == 462)
			{
				if (this.life > 0)
				{
					int num180 = 0;
					while ((double)num180 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num180++;
					}
				}
				else
				{
					for (int num181 = 0; num181 < 50; num181++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 650, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 651, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 651, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 652, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 652, this.scale);
				}
			}
			else if (this.type == 379 || this.type == 438)
			{
				if (this.life > 0)
				{
					int num182 = 0;
					while ((double)num182 < dmg / (double)(this.lifeMax * 50))
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num182++;
					}
				}
				else
				{
					for (int num183 = 0; num183 < 30; num183++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 900, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 901, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 901, this.scale);
				}
			}
			else if (this.type == 439)
			{
				if (this.life > 0)
				{
					int num184 = 0;
					while ((double)num184 < dmg / (double)this.lifeMax * 100.0)
					{
						int num185 = Dust.NewDust(this.position, this.width, this.height, 5, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num185].velocity *= 1.5f;
						Main.dust[num185].noGravity = true;
						num184++;
					}
				}
				else
				{
					for (int num186 = 0; num186 < 30; num186++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					for (int num187 = 0; num187 < 10; num187++)
					{
						int num188 = Dust.NewDust(this.position, this.width, this.height, 16, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num188].velocity *= 2f;
						Main.dust[num188].noGravity = true;
					}
					int num189 = Main.rand.Next(1, 4);
					for (int num190 = 0; num190 < num189; num190++)
					{
						int num191 = Gore.NewGore(new Vector2(this.position.X, this.position.Y + (float)(this.height / 2) - 10f), new Vector2((float)hitDirection, 0f), Main.rand.Next(11, 14), this.scale);
						Main.gore[num191].velocity *= 0.8f;
					}
					Gore.NewGore(this.position, this.velocity, 902, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 10f), this.velocity, 903, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 901, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 901, this.scale);
				}
			}
			else if (this.type == 440)
			{
				if (this.life <= 0)
				{
					for (int num192 = 0; num192 < 10; num192++)
					{
						int num193 = Dust.NewDust(this.position, this.width, this.height, 16, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num193].velocity *= 2f;
						Main.dust[num193].noGravity = true;
					}
					int num194 = Main.rand.Next(1, 4);
					for (int num195 = 0; num195 < num194; num195++)
					{
						int num196 = Gore.NewGore(new Vector2(this.position.X, this.position.Y + (float)(this.height / 2) - 10f), new Vector2((float)hitDirection, 0f), Main.rand.Next(11, 14), this.scale);
						Main.gore[num196].velocity *= 0.8f;
					}
				}
			}
			else if (this.type >= 454 && this.type <= 459)
			{
				if (this.life > 0)
				{
					int num197 = 0;
					while ((double)num197 < dmg / (double)this.lifeMax * 50.0)
					{
						int num198 = Dust.NewDust(this.position, this.width, this.height, 16, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num198].velocity *= 1.5f;
						Main.dust[num198].noGravity = true;
						num197++;
					}
				}
				else
				{
					for (int num199 = 0; num199 < 10; num199++)
					{
						int num200 = Dust.NewDust(this.position, this.width, this.height, 16, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num200].velocity *= 2f;
						Main.dust[num200].noGravity = true;
					}
					int num201 = Main.rand.Next(1, 4);
					for (int num202 = 0; num202 < num201; num202++)
					{
						int num203 = Gore.NewGore(new Vector2(this.position.X, this.position.Y + (float)(this.height / 2) - 10f), new Vector2((float)hitDirection, 0f), Main.rand.Next(11, 14), this.scale);
						Main.gore[num203].velocity *= 0.8f;
					}
				}
			}
			if (this.type == 372 || this.type == 373)
			{
				if (this.life > 0)
				{
					int num204 = 0;
					while ((double)num204 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num204++;
					}
				}
				else
				{
					for (int num205 = 0; num205 < 75; num205++)
					{
						int num206 = Dust.NewDust(base.Center - Vector2.One * 25f, 50, 50, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
						Main.dust[num206].velocity /= 2f;
					}
					Gore.NewGore(base.Center, this.velocity * 0.8f, 583, 1f);
					Gore.NewGore(base.Center, this.velocity * 0.8f, 577, 1f);
					Gore.NewGore(base.Center, this.velocity * 0.9f, 578, 1f);
					Gore.NewGore(base.Center, this.velocity, 579, 1f);
				}
			}
			if (this.type == 371)
			{
				Main.PlaySound(4, (int)this.position.X, (int)this.position.Y, 3, 1f, 0f);
				if (this.life <= 0)
				{
					Vector2 arg_98DC_0 = base.Center;
					for (int num207 = 0; num207 < 60; num207++)
					{
						int num208 = 25;
						((float)Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() * (float)Main.rand.Next(24, 41) / 8f;
						int num209 = Dust.NewDust(base.Center - Vector2.One * (float)num208, num208 * 2, num208 * 2, 212, 0f, 0f, 0, default(Color), 1f);
						Dust dust47 = Main.dust[num209];
						Vector2 vector7 = Vector2.Normalize(dust47.position - base.Center);
						dust47.position = base.Center + vector7 * 25f * this.scale;
						if (num207 < 30)
						{
							dust47.velocity = vector7 * dust47.velocity.Length();
						}
						else
						{
							dust47.velocity = vector7 * (float)Main.rand.Next(45, 91) / 10f;
						}
						dust47.color = Main.hslToRgb((float)(0.40000000596046448 + Main.rand.NextDouble() * 0.20000000298023224), 0.9f, 0.5f);
						dust47.color = Color.Lerp(dust47.color, Color.White, 0.3f);
						dust47.noGravity = true;
						dust47.scale = 0.7f;
					}
				}
			}
			if (this.type == 370)
			{
				if (this.life > 0)
				{
					int num210 = 0;
					while ((double)num210 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num210++;
					}
				}
				else
				{
					for (int num211 = 0; num211 < 150; num211++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					Gore.NewGore(base.Center - Vector2.UnitX * 20f * (float)this.direction, this.velocity, 576, this.scale);
					Gore.NewGore(base.Center - Vector2.UnitY * 30f, this.velocity, 574, this.scale);
					Gore.NewGore(base.Center, this.velocity, 575, this.scale);
					Gore.NewGore(base.Center + Vector2.UnitX * 20f * (float)this.direction, this.velocity, 573, this.scale);
					Gore.NewGore(base.Center - Vector2.UnitY * 30f, this.velocity, 574, this.scale);
					Gore.NewGore(base.Center, this.velocity, 575, this.scale);
				}
			}
			else if (this.type == 381)
			{
				if (this.life > 0)
				{
					int num212 = 0;
					while ((double)num212 < dmg / (double)(this.lifeMax * 50))
					{
						Dust.NewDust(this.position, this.width, this.height, 227, (float)hitDirection, -1f, 0, default(Color), 1f);
						num212++;
					}
				}
				else
				{
					for (int num213 = 0; num213 < 30; num213++)
					{
						Dust.NewDust(this.position, this.width, this.height, 227, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 587, this.scale);
					Gore.NewGore(this.position, this.velocity, 590, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 588, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 589, this.scale);
				}
			}
			else if (this.type == 382 || this.type == 390)
			{
				if (this.life > 0)
				{
					int num214 = 0;
					while ((double)num214 < dmg / (double)(this.lifeMax * 50))
					{
						Dust.NewDust(this.position, this.width, this.height, 227, (float)hitDirection, -1f, 0, default(Color), 1f);
						num214++;
					}
				}
				else
				{
					for (int num215 = 0; num215 < 30; num215++)
					{
						Dust.NewDust(this.position, this.width, this.height, 227, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 591, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 592, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 593, this.scale);
				}
			}
			else if (this.type == 383)
			{
				if (this.life > 0)
				{
					int num216 = 0;
					while ((double)num216 < dmg / (double)(this.lifeMax * 50))
					{
						Dust.NewDust(this.position, this.width, this.height, 227, (float)hitDirection, -1f, 0, default(Color), 1f);
						num216++;
					}
				}
				else
				{
					for (int num217 = 0; num217 < 30; num217++)
					{
						Dust.NewDust(this.position, this.width, this.height, 227, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 594, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 595, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 596, this.scale);
				}
			}
			else if (this.type == 384)
			{
				if (this.life > 0)
				{
					int num218 = 0;
					while ((double)num218 < dmg / (double)this.lifeMax * 50.0)
					{
						int num219 = Dust.NewDust(this.position, this.width, this.height, 226, (float)(-1 * hitDirection), -1f, 0, default(Color), 1f);
						Main.dust[num219].position = Vector2.Lerp(Main.dust[num219].position, base.Center, 0.25f);
						Main.dust[num219].scale = 0.5f;
						num218++;
					}
				}
				else
				{
					for (int num220 = 0; num220 < 70; num220++)
					{
						int num221 = Dust.NewDust(this.position, this.width, this.height, 226, -2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
						Main.dust[num221].scale = 0.5f;
					}
				}
			}
			else if (this.type == 385)
			{
				if (this.life > 0)
				{
					int num222 = 0;
					while ((double)num222 < dmg / (double)(this.lifeMax * 50))
					{
						Dust.NewDust(this.position, this.width, this.height, 227, (float)hitDirection, -1f, 0, default(Color), 1f);
						num222++;
					}
				}
				else
				{
					for (int num223 = 0; num223 < 30; num223++)
					{
						Dust.NewDust(this.position, this.width, this.height, 227, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 597, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 598, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 599, this.scale);
				}
			}
			else if (this.type == 386)
			{
				if (this.life > 0)
				{
					int num224 = 0;
					while ((double)num224 < dmg / (double)(this.lifeMax * 50))
					{
						Dust.NewDust(this.position, this.width, this.height, 227, (float)hitDirection, -1f, 0, default(Color), 1f);
						num224++;
					}
				}
				else
				{
					for (int num225 = 0; num225 < 30; num225++)
					{
						Dust.NewDust(this.position, this.width, this.height, 227, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 600, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 601, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 602, this.scale);
				}
			}
			if (this.type == 387)
			{
				if (this.life > 0)
				{
					int num226 = 0;
					while ((double)num226 < dmg / (double)this.lifeMax * 20.0)
					{
						int num227 = Dust.NewDust(this.position, this.width, this.height, 226, (float)(-1 * hitDirection), -1f, 0, default(Color), 1f);
						Main.dust[num227].position = Vector2.Lerp(Main.dust[num227].position, base.Center, 0.25f);
						Main.dust[num227].scale = 0.5f;
						num226++;
					}
				}
				else
				{
					for (int num228 = 0; num228 < 30; num228++)
					{
						int num229 = Dust.NewDust(this.position, this.width, this.height, 226, -1.5f * (float)hitDirection, -1.5f, 0, default(Color), 1f);
						Main.dust[num229].scale = 0.5f;
					}
					Gore.NewGore(this.position, this.velocity, 603, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 603, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 604, this.scale);
				}
			}
			if (this.type == 520)
			{
				if (this.life > 0)
				{
					int num230 = 0;
					while ((double)num230 < dmg / (double)this.lifeMax * 20.0)
					{
						int num231 = Dust.NewDust(this.position, this.width, this.height, 226, (float)(-1 * hitDirection), -1f, 0, default(Color), 1f);
						Main.dust[num231].position = Vector2.Lerp(Main.dust[num231].position, base.Center, 0.25f);
						Main.dust[num231].scale = 0.5f;
						num230++;
					}
				}
				else
				{
					for (int num232 = 0; num232 < 30; num232++)
					{
						int num233 = Dust.NewDust(this.position, this.width, this.height, 226, -1.5f * (float)hitDirection, -1.5f, 0, default(Color), 1f);
						Main.dust[num233].scale = 0.5f;
					}
					Gore.NewGore(this.position, this.velocity, 851, this.scale);
					Gore.NewGore(this.position, this.velocity, 852, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 80f), this.velocity, 848, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 80f), this.velocity, 849, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 80f), this.velocity, 850, this.scale);
				}
			}
			else if (this.type == 389)
			{
				if (this.life > 0)
				{
					int num234 = 0;
					while ((double)num234 < dmg / (double)(this.lifeMax * 50))
					{
						Dust.NewDust(this.position, this.width, this.height, 227, (float)hitDirection, -1f, 0, default(Color), 1f);
						num234++;
					}
				}
				else
				{
					for (int num235 = 0; num235 < 30; num235++)
					{
						Dust.NewDust(this.position, this.width, this.height, 227, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 904, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 905, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 906, this.scale);
				}
			}
			else if (this.type == 388)
			{
				if (this.life > 0)
				{
					int num236 = 0;
					while ((double)num236 < dmg / (double)(this.lifeMax * 50))
					{
						int num237 = Dust.NewDust(this.position, this.width, this.height, 226, (float)(-1 * hitDirection), -1f, 0, default(Color), 1f);
						Main.dust[num237].position = Vector2.Lerp(Main.dust[num237].position, base.Center, 0.25f);
						Main.dust[num237].scale = 0.5f;
						num236++;
					}
				}
				else
				{
					for (int num238 = 0; num238 < 10; num238++)
					{
						int num239 = Dust.NewDust(this.position, this.width, this.height, 226, -2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
						Main.dust[num239].scale = 0.5f;
					}
					Vector2 velocity2 = this.velocity;
					if (this.ai[0] == 3f)
					{
						velocity2 = this.rotation.ToRotationVector2();
						if (this.spriteDirection == 1)
						{
							velocity2.X *= -1f;
						}
						velocity2 *= 5f;
					}
					Gore.NewGore(base.Center - new Vector2(10f, 10f), velocity2, 605, this.scale);
					Gore.NewGore(base.Center - new Vector2(10f, 10f), velocity2, 606, this.scale);
				}
			}
			else if (this.type == 399)
			{
				if (this.life > 0)
				{
					int num240 = 0;
					while ((double)num240 < dmg / (double)(this.lifeMax * 50))
					{
						int num241 = Dust.NewDust(this.position, this.width, this.height, 226, (float)(-1 * hitDirection), -1f, 0, default(Color), 1f);
						Main.dust[num241].position = Vector2.Lerp(Main.dust[num241].position, base.Center, 0.25f);
						Main.dust[num241].scale = 0.5f;
						num240++;
					}
				}
				else
				{
					for (int num242 = 0; num242 < 10; num242++)
					{
						int num243 = Dust.NewDust(this.position, this.width, this.height, 226, -2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
						Main.dust[num243].scale = 0.5f;
					}
					Vector2 velocity3 = this.velocity;
					if (this.ai[0] == 3f)
					{
						velocity3 = this.rotation.ToRotationVector2();
						if (this.spriteDirection == 1)
						{
							velocity3.X *= -1f;
						}
						velocity3 *= 5f;
					}
					Gore.NewGore(base.Center - new Vector2(10f, 10f), velocity3, 898, this.scale);
					Gore.NewGore(base.Center - new Vector2(10f, 10f), velocity3, 899, this.scale);
				}
			}
			else if (this.type == 391)
			{
				if (this.life > 0)
				{
					int num244 = 0;
					while ((double)num244 < dmg / (double)(this.lifeMax * 50))
					{
						Dust.NewDust(this.position, this.width, this.height, 227, (float)hitDirection, -1f, 0, default(Color), 1f);
						num244++;
					}
				}
				else
				{
					for (int num245 = 0; num245 < 30; num245++)
					{
						Dust.NewDust(this.position, this.width, this.height, 227, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position + Vector2.UnitX * (float)this.width / 2f, this.velocity, 607, this.scale);
					Gore.NewGore(this.position + Vector2.UnitX * (float)this.width / 2f, this.velocity, 608, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 609, this.scale);
				}
			}
			if (this.type == 392 || this.type == 394 || this.type == 393 || this.type == 395)
			{
				if (this.life > 0)
				{
					int num246 = 0;
					while ((double)num246 < dmg / (double)this.lifeMax * 20.0)
					{
						int num247 = Dust.NewDust(this.position, this.width, this.height, 228, (float)(-1 * hitDirection), -1f, 0, default(Color), 1f);
						Main.dust[num247].position = Vector2.Lerp(Main.dust[num247].position, base.Center, 0.25f);
						Main.dust[num247].scale = 0.5f;
						num246++;
					}
				}
				else
				{
					for (int num248 = 0; num248 < 30; num248++)
					{
						int num249 = Dust.NewDust(this.position, this.width, this.height, 228, -1.5f * (float)hitDirection, -1.5f, 0, default(Color), 1f);
						Main.dust[num249].scale = 0.5f;
					}
					Vector2 center = base.Center;
					if (this.type == 395)
					{
						Gore.NewGore(center + new Vector2(-20f, -10f), this.velocity, 610, this.scale);
						Gore.NewGore(center + new Vector2(20f, -10f), this.velocity, 611, this.scale);
						Gore.NewGore(center + new Vector2(-50f, 0f), this.velocity, 612, this.scale);
						Gore.NewGore(center + new Vector2(50f, 0f), this.velocity, 613, this.scale);
						Gore.NewGore(center + new Vector2(-60f, 10f), this.velocity, 614, this.scale);
						Gore.NewGore(center + new Vector2(0f, 30f), this.velocity, 615, this.scale);
					}
					if (this.type == 393)
					{
						Gore.NewGore(center, this.velocity, 616, this.scale);
					}
					if (this.type == 394)
					{
						Gore.NewGore(center, this.velocity, 617, this.scale);
					}
				}
			}
			else if (this.type == 482 || this.type == 483)
			{
				if (this.life > 0)
				{
					int num250 = 0;
					while ((double)num250 < dmg / (double)(this.lifeMax * 50))
					{
						Dust.NewDust(this.position, this.width, this.height, 240, (float)hitDirection, -1f, 0, default(Color), 1f);
						num250++;
					}
				}
				else
				{
					for (int num251 = 0; num251 < 30; num251++)
					{
						Dust.NewDust(this.position, this.width, this.height, 240, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					if (this.type == 482)
					{
						Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity, 718, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 10f), this.velocity, 719, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 720, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 40f), this.velocity, 721, this.scale);
					}
				}
			}
			if ((this.type >= 442 && this.type <= 448) || this.type == 539)
			{
				if (this.life > 0)
				{
					for (int num252 = 0; num252 < 10; num252++)
					{
						Dust.NewDust(this.position, this.width, this.height, Main.rand.Next(232, 234), (float)hitDirection, -1f, 0, default(Color), 1f);
					}
				}
				else
				{
					for (int num253 = 0; num253 < 20; num253++)
					{
						Dust.NewDust(this.position, this.width, this.height, Main.rand.Next(232, 234), (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
				}
			}
			if (this.type == 333 || this.type == 334 || this.type == 335 || this.type == 336)
			{
				Color white = Color.White;
				if (this.type == 333)
				{
					white = new Color(73, 147, 221, 200);
				}
				if (this.type == 334)
				{
					white = new Color(24, 146, 79, 200);
				}
				if (this.type == 335)
				{
					white = new Color(194, 46, 50, 200);
				}
				if (this.type == 336)
				{
					white = new Color(228, 200, 1, 200);
				}
				if (this.life > 0)
				{
					int num254 = 0;
					while ((double)num254 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 4, (float)hitDirection, -1f, 150, white, 1f);
						num254++;
					}
				}
				else
				{
					for (int num255 = 0; num255 < 50; num255++)
					{
						Dust.NewDust(this.position, this.width, this.height, 4, (float)(2 * hitDirection), -2f, 150, white, 1f);
					}
				}
			}
			if (this.type == 537)
			{
				if (this.life > 0)
				{
					int num256 = 0;
					while ((double)num256 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 32, (float)hitDirection, -1f, 0, default(Color), 1f);
						num256++;
					}
				}
				else
				{
					for (int num257 = 0; num257 < 50; num257++)
					{
						Dust.NewDust(this.position, this.width, this.height, 32, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
				}
			}
			if (this.type == 1 || this.type == 16 || this.type == 71 || this.type == 244 || this.type == 535)
			{
				if (this.life > 0)
				{
					int num258 = 0;
					while ((double)num258 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 4, (float)hitDirection, -1f, this.alpha, this.color, 1f);
						num258++;
					}
				}
				else
				{
					for (int num259 = 0; num259 < 50; num259++)
					{
						Dust.NewDust(this.position, this.width, this.height, 4, (float)(2 * hitDirection), -2f, this.alpha, this.color, 1f);
					}
					if (Main.netMode != 1 && this.type == 16)
					{
						int num260 = Main.rand.Next(2) + 2;
						for (int num261 = 0; num261 < num260; num261++)
						{
							int num262 = NPC.NewNPC((int)(this.position.X + (float)(this.width / 2)), (int)(this.position.Y + (float)this.height), 1, 0, 0f, 0f, 0f, 0f, 255);
							Main.npc[num262].SetDefaults("Baby Slime");
							Main.npc[num262].velocity.X = this.velocity.X * 2f;
							Main.npc[num262].velocity.Y = this.velocity.Y;
							NPC expr_B97C_cp_0 = Main.npc[num262];
							expr_B97C_cp_0.velocity.X = expr_B97C_cp_0.velocity.X + ((float)Main.rand.Next(-20, 20) * 0.1f + (float)(num261 * this.direction) * 0.3f);
							NPC expr_B9BF_cp_0 = Main.npc[num262];
							expr_B9BF_cp_0.velocity.Y = expr_B9BF_cp_0.velocity.Y - ((float)Main.rand.Next(0, 10) * 0.1f + (float)num261);
							Main.npc[num262].ai[0] = (float)(-1000 * Main.rand.Next(3));
							if (Main.netMode == 2 && num262 < 200)
							{
								NetMessage.SendData(23, -1, -1, "", num262, 0f, 0f, 0f, 0, 0, 0);
							}
						}
					}
				}
			}
			if (this.type == 352)
			{
				if (this.life > 0)
				{
					int num263 = 0;
					while ((double)num263 < dmg / (double)this.lifeMax * 100.0)
					{
						int num264 = Dust.NewDust(this.position, this.width, this.height, 67, (float)hitDirection, -1f, 0, default(Color), 1f);
						Main.dust[num264].noGravity = true;
						num263++;
					}
				}
				else
				{
					for (int num265 = 0; num265 < 60; num265++)
					{
						int num266 = Dust.NewDust(this.position, this.width, this.height, 67, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
						Main.dust[num266].noGravity = true;
					}
				}
			}
			if (this.type >= 305 && this.type <= 314)
			{
				if (this.life > 0)
				{
					int num267 = 0;
					while ((double)num267 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 194, (float)hitDirection, -1f, 0, default(Color), 1.1f);
						num267++;
					}
				}
				else
				{
					for (int num268 = 0; num268 < 60; num268++)
					{
						Dust.NewDust(this.position, this.width, this.height, 194, (float)(2 * hitDirection), -2f, 0, default(Color), 1.1f);
					}
					Gore.NewGore(this.position, this.velocity, 441, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 442, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 443, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 444, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 445, this.scale);
				}
			}
			if (this.type == 327)
			{
				if (this.life > 0)
				{
					int num269 = 0;
					while ((double)num269 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 189, (float)hitDirection, -1f, 0, default(Color), 1.1f);
						num269++;
					}
				}
				else
				{
					for (int num270 = 0; num270 < 60; num270++)
					{
						Dust.NewDust(this.position, this.width, this.height, 189, (float)(2 * hitDirection), -2f, 0, default(Color), 1.1f);
					}
					for (int num271 = 476; num271 <= 484; num271++)
					{
						Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity * 0f, num271, this.scale);
					}
				}
			}
			if (this.type == 325)
			{
				if (this.life > 0)
				{
					int num272 = 0;
					while ((double)num272 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 191, (float)hitDirection, -1f, 0, default(Color), 1.1f);
						num272++;
					}
				}
				else
				{
					for (int num273 = 0; num273 < 60; num273++)
					{
						Dust.NewDust(this.position, this.width, this.height, 191, (float)(2 * hitDirection), -2f, 0, default(Color), 1.1f);
					}
					for (int num274 = 469; num274 <= 475; num274++)
					{
						Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity * 0f, num274, this.scale);
					}
				}
			}
			if (this.type == 345 && this.life <= 0)
			{
				Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity * 0f, 513, this.scale);
				Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity * 0f, 514, this.scale);
				Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity * 0f, 514, this.scale);
				Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity * 0f, 515, this.scale);
				Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity * 0f, 516, this.scale);
			}
			if (this.type == 344)
			{
				if (this.life > 0)
				{
					int num275 = 0;
					while ((double)num275 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 196, (float)hitDirection, -1f, 0, default(Color), 1f);
						num275++;
					}
				}
				else
				{
					for (int num276 = 0; num276 < 60; num276++)
					{
						Dust.NewDust(this.position, this.width, this.height, 196, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					for (int num277 = 508; num277 <= 512; num277++)
					{
						Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity * 0f, num277, this.scale);
					}
					for (int num278 = 509; num278 <= 512; num278++)
					{
						Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity * 0f, num278, this.scale);
					}
				}
			}
			if (this.type == 326)
			{
				if (this.life > 0)
				{
					int num279 = 0;
					while ((double)num279 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 191, (float)hitDirection, -1f, 0, default(Color), 1.1f);
						num279++;
					}
				}
				else
				{
					for (int num280 = 0; num280 < 60; num280++)
					{
						Dust.NewDust(this.position, this.width, this.height, 191, (float)(2 * hitDirection), -2f, 0, default(Color), 1.1f);
					}
				}
			}
			if (this.type == 304)
			{
				if (this.life > 0)
				{
					int num281 = 0;
					while ((double)num281 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 189, (float)hitDirection, -1f, 0, default(Color), 1.3f);
						num281++;
					}
				}
				else
				{
					for (int num282 = 0; num282 < 60; num282++)
					{
						Dust.NewDust(this.position, this.width, this.height, 189, (float)(2 * hitDirection), -2f, 0, default(Color), 1.3f);
					}
				}
			}
			if (this.type == 302)
			{
				if (this.life > 0)
				{
					int num283 = 0;
					while ((double)num283 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 192, (float)hitDirection, -1f, 100, new Color(100, 100, 100, 100), 1f);
						num283++;
					}
				}
				else
				{
					for (int num284 = 0; num284 < 50; num284++)
					{
						Dust.NewDust(this.position, this.width, this.height, 192, (float)(2 * hitDirection), -2f, 100, new Color(100, 100, 100, 100), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 440, this.scale);
				}
			}
			if (this.type >= 245 && this.type <= 249)
			{
				if (this.life > 0)
				{
					int num285 = 0;
					while ((double)num285 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 148, (float)hitDirection, -1f, 0, default(Color), 1f);
						num285++;
					}
				}
				else if (this.type == 246)
				{
					if (Main.netMode != 1)
					{
						NPC.NewNPC((int)base.Center.X, (int)this.position.Y + this.height, 249, this.whoAmI, 0f, 0f, 0f, 0f, 255);
					}
				}
				else
				{
					for (int num286 = 0; num286 < 50; num286++)
					{
						Dust.NewDust(this.position, this.width, this.height, 148, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					if (this.type == 245)
					{
						Gore.NewGore(new Vector2(this.position.X + (float)Main.rand.Next(this.width), this.position.Y + (float)Main.rand.Next(this.height)), this.velocity, 368, this.scale);
						Gore.NewGore(new Vector2(this.position.X + (float)Main.rand.Next(this.width), this.position.Y + (float)Main.rand.Next(this.height)), this.velocity, 370, this.scale);
						Gore.NewGore(new Vector2(this.position.X + (float)Main.rand.Next(this.width), this.position.Y + (float)Main.rand.Next(this.height)), this.velocity, 368, this.scale);
						Gore.NewGore(new Vector2(this.position.X + (float)Main.rand.Next(this.width), this.position.Y + (float)Main.rand.Next(this.height)), this.velocity, 370, this.scale);
						Gore.NewGore(new Vector2(this.position.X + (float)Main.rand.Next(this.width), this.position.Y + (float)Main.rand.Next(this.height)), this.velocity, 368, this.scale);
						Gore.NewGore(new Vector2(this.position.X + (float)Main.rand.Next(this.width), this.position.Y + (float)Main.rand.Next(this.height)), this.velocity, 370, this.scale);
						Gore.NewGore(this.position, this.velocity, 360, this.scale);
						Gore.NewGore(this.position, this.velocity, 361, this.scale);
						Gore.NewGore(this.position, this.velocity, 362, this.scale);
						Gore.NewGore(this.position, this.velocity, 363, this.scale);
						Gore.NewGore(this.position, this.velocity, 364, this.scale);
						Gore.NewGore(this.position, this.velocity, 367, this.scale);
						Gore.NewGore(this.position, this.velocity, 366, this.scale);
					}
					else if (this.type == 249)
					{
						Gore.NewGore(new Vector2(this.position.X + (float)Main.rand.Next(this.width), this.position.Y + (float)Main.rand.Next(this.height)), this.velocity, 368, this.scale);
						Gore.NewGore(new Vector2(this.position.X + (float)Main.rand.Next(this.width), this.position.Y + (float)Main.rand.Next(this.height)), this.velocity, 370, this.scale);
						Gore.NewGore(new Vector2(this.position.X + (float)Main.rand.Next(this.width), this.position.Y + (float)Main.rand.Next(this.height)), this.velocity, 368, this.scale);
						Gore.NewGore(new Vector2(this.position.X + (float)Main.rand.Next(this.width), this.position.Y + (float)Main.rand.Next(this.height)), this.velocity, 370, this.scale);
						Gore.NewGore(this.position, this.velocity, 365, this.scale);
						Gore.NewGore(this.position, this.velocity, 363, this.scale);
						Gore.NewGore(this.position, this.velocity, 362, this.scale);
					}
					else
					{
						Gore.NewGore(this.position, this.velocity, 369, this.scale);
						Gore.NewGore(this.position, this.velocity, 371, this.scale);
						Gore.NewGore(this.position, this.velocity, 370, this.scale);
					}
				}
			}
			if (this.type == 288 && this.life <= 0)
			{
				for (int num287 = 0; num287 < 50; num287++)
				{
					int num288 = Dust.NewDust(this.position, this.width, this.height, 180, this.velocity.X, this.velocity.Y, 0, default(Color), 1f);
					Main.dust[num288].velocity *= 2f;
					Main.dust[num288].noGravity = true;
					Main.dust[num288].scale = 1.4f;
				}
			}
			if (this.type == 204)
			{
				if (this.life > 0)
				{
					int num289 = 0;
					while ((double)num289 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 4, (float)hitDirection, -1f, 100, new Color(149, 208, 104), 1f);
						num289++;
					}
				}
				else
				{
					for (int num290 = 0; num290 < 50; num290++)
					{
						Dust.NewDust(this.position, this.width, this.height, 4, (float)(2 * hitDirection), -2f, 100, new Color(149, 208, 104), 1f);
					}
				}
			}
			if (this.type == 225)
			{
				if (this.life > 0)
				{
					int num291 = 0;
					while ((double)num291 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 4, (float)hitDirection, -1f, 100, new Color(0, 80, 255, 100), 1f);
						num291++;
					}
				}
				else
				{
					for (int num292 = 0; num292 < 50; num292++)
					{
						Dust.NewDust(this.position, this.width, this.height, 4, (float)(2 * hitDirection), -2f, 100, new Color(0, 80, 255, 100), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 314, this.scale);
				}
			}
			if (this.type == 243)
			{
				if (this.life > 0)
				{
					int num293 = 0;
					while ((double)num293 < dmg / (double)this.lifeMax * 150.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 161, (float)hitDirection, -1f, 0, default(Color), 1f);
						num293++;
					}
				}
				else
				{
					for (int num294 = 0; num294 < 200; num294++)
					{
						Dust.NewDust(this.position, this.width, this.height, 161, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 359, this.scale);
				}
			}
			if ((this.type == 210 || this.type == 211) && this.life <= 0)
			{
				for (int num295 = 0; num295 < 6; num295++)
				{
					int num296 = Dust.NewDust(this.position, this.width, this.height, 150, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num296].noGravity = true;
						Main.dust[num296].scale = 1.5f;
					}
					else
					{
						Main.dust[num296].scale = 0.8f;
					}
				}
			}
			if ((this.type == 355 || this.type == 358) && this.life <= 0)
			{
				for (int num297 = 0; num297 < 6; num297++)
				{
					int num298 = Dust.NewDust(this.position, this.width, this.height, 198, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num298].noGravity = true;
						Main.dust[num298].scale = 1.5f * this.scale;
					}
					else
					{
						Main.dust[num298].scale = 0.8f * this.scale;
					}
				}
			}
			if (this.type == 356 && this.life <= 0)
			{
				for (int num299 = 0; num299 < 6; num299++)
				{
					int num300 = Dust.NewDust(this.position, this.width, this.height, 199, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num300].noGravity = true;
						Main.dust[num300].scale = 1.5f * this.scale;
					}
					else
					{
						Main.dust[num300].scale = 0.8f * this.scale;
					}
				}
			}
			if (this.type >= 484 && this.type <= 487 && this.life <= 0)
			{
				for (int num301 = 0; num301 < 6; num301++)
				{
					int num302 = Dust.NewDust(this.position, this.width, this.height, 248 + this.type - 484, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num302].noGravity = true;
						Main.dust[num302].scale = 1.2f * this.scale;
					}
					else
					{
						Main.dust[num302].scale = 0.7f * this.scale;
					}
				}
			}
			if (this.type == 357 && this.life <= 0)
			{
				for (int num303 = 0; num303 < 6; num303++)
				{
					int num304 = Dust.NewDust(this.position, this.width, this.height, 200, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num304].noGravity = true;
						Main.dust[num304].scale = 1.2f * this.scale;
					}
					else
					{
						Main.dust[num304].scale = 0.7f * this.scale;
					}
				}
			}
			if (this.type == 377 && this.life <= 0)
			{
				for (int num305 = 0; num305 < 6; num305++)
				{
					int num306 = Dust.NewDust(this.position, this.width, this.height, 40, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num306].noGravity = true;
						Main.dust[num306].scale = 1.2f * this.scale;
					}
					else
					{
						Main.dust[num306].scale = 0.7f * this.scale;
					}
				}
			}
			if (this.type == 374 || this.type == 375)
			{
				for (int num307 = 0; num307 < 6; num307++)
				{
					int num308 = Dust.NewDust(this.position, this.width, this.height, 165, 0f, 0f, 50, default(Color), 1.5f);
					Main.dust[num308].velocity *= 2f;
					Main.dust[num308].noGravity = true;
				}
			}
			if (this.type == 359)
			{
				if (this.life <= 0)
				{
					for (int num309 = 0; num309 < 6; num309++)
					{
						int num310 = Dust.NewDust(this.position, this.width, this.height, 201, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num310].noGravity = true;
							Main.dust[num310].scale = 1.2f * this.scale;
						}
						else
						{
							Main.dust[num310].scale = 0.7f * this.scale;
						}
					}
				}
				Gore.NewGore(this.position, this.velocity, 547, this.scale);
				Gore.NewGore(this.position, this.velocity, 548, this.scale);
			}
			if (this.type == 360)
			{
				if (this.life <= 0)
				{
					for (int num311 = 0; num311 < 6; num311++)
					{
						int num312 = Dust.NewDust(this.position, this.width, this.height, 202, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num312].noGravity = true;
							Main.dust[num312].scale = 1.2f * this.scale;
						}
						else
						{
							Main.dust[num312].scale = 0.7f * this.scale;
						}
					}
				}
				Gore.NewGore(this.position, this.velocity, 549, this.scale);
				Gore.NewGore(this.position, this.velocity, 550, this.scale);
			}
			if (this.type == 154)
			{
				if (this.life > 0)
				{
					int num313 = 0;
					while ((double)num313 < dmg / (double)this.lifeMax * 50.0)
					{
						int num314 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 67, this.velocity.X, this.velocity.Y, 90, default(Color), 1.5f);
						Main.dust[num314].noGravity = true;
						Main.dust[num314].velocity *= 0.2f;
						num313++;
					}
				}
				else
				{
					for (int num315 = 0; num315 < 50; num315++)
					{
						int num316 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 67, this.velocity.X, this.velocity.Y, 90, default(Color), 1.5f);
						Main.dust[num316].noGravity = true;
						Main.dust[num316].velocity *= 0.2f;
					}
					Gore.NewGore(this.position, this.velocity, 180, this.scale);
				}
			}
			if (this.type == 147 || this.type == 184)
			{
				if (this.life > 0)
				{
					int num317 = 0;
					while ((double)num317 < dmg / (double)this.lifeMax * 50.0)
					{
						int num318 = Dust.NewDust(this.position, this.width, this.height, 76, (float)hitDirection, -1f, 0, default(Color), 1f);
						Main.dust[num318].noGravity = true;
						Dust.NewDust(this.position, this.width, this.height, 4, (float)hitDirection, -1f, 100, new Color(97, 200, 255, 100), 1f);
						num317++;
					}
				}
				else
				{
					for (int num319 = 0; num319 < 30; num319++)
					{
						int num320 = Dust.NewDust(this.position, this.width, this.height, 76, (float)hitDirection, -2f, 0, default(Color), 1f);
						Main.dust[num320].noGravity = true;
						Dust.NewDust(this.position, this.width, this.height, 4, (float)hitDirection, -2f, 100, new Color(97, 200, 255, 100), 1f);
					}
				}
			}
			if (this.type == 143 || this.type == 144 || this.type == 145)
			{
				if (this.life > 0)
				{
					int num321 = 0;
					while ((double)num321 < dmg / (double)this.lifeMax * 100.0)
					{
						int num322 = Dust.NewDust(this.position, this.width, this.height, 76, (float)hitDirection, -1f, 0, default(Color), 1f);
						Main.dust[num322].noGravity = true;
						num321++;
					}
				}
				else
				{
					for (int num323 = 0; num323 < 50; num323++)
					{
						int num324 = Dust.NewDust(this.position, this.width, this.height, 76, (float)hitDirection, -1f, 0, default(Color), 1f);
						Main.dust[num324].noGravity = true;
						Main.dust[num324].scale *= 1.2f;
					}
				}
			}
			if (this.type == 141)
			{
				if (this.life > 0)
				{
					int num325 = 0;
					while ((double)num325 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 4, (float)hitDirection, -1f, this.alpha, new Color(210, 230, 140), 1f);
						num325++;
					}
				}
				else
				{
					for (int num326 = 0; num326 < 50; num326++)
					{
						Dust.NewDust(this.position, this.width, this.height, 4, (float)(2 * hitDirection), -2f, this.alpha, new Color(210, 230, 140), 1f);
					}
				}
			}
			if (this.type == 112)
			{
				for (int num327 = 0; num327 < 20; num327++)
				{
					int num328 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 2f), this.width, this.height, 18, 0f, 0f, 100, default(Color), 2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num328].scale *= 0.6f;
					}
					else
					{
						Main.dust[num328].velocity *= 1.4f;
						Main.dust[num328].noGravity = true;
					}
				}
			}
			if (this.type == 183)
			{
				if (this.life > 0)
				{
					int num329 = 0;
					while ((double)num329 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 136, 0f, 0f, this.alpha, this.color, 1f);
						num329++;
					}
				}
				else
				{
					for (int num330 = 0; num330 < 50; num330++)
					{
						int num331 = Dust.NewDust(this.position, this.width, this.height, 136, (float)hitDirection, 0f, this.alpha, this.color, 1f);
						Main.dust[num331].velocity *= 2f;
					}
				}
			}
			if (this.type == 81 || this.type == 121)
			{
				if (this.life > 0)
				{
					int num332 = 0;
					while ((double)num332 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 14, 0f, 0f, this.alpha, this.color, 1f);
						num332++;
					}
				}
				else
				{
					for (int num333 = 0; num333 < 50; num333++)
					{
						int num334 = Dust.NewDust(this.position, this.width, this.height, 14, (float)hitDirection, 0f, this.alpha, this.color, 1f);
						Main.dust[num334].velocity *= 2f;
					}
					if (Main.netMode != 1)
					{
						if (this.type == 121)
						{
							int num335 = NPC.NewNPC((int)(this.position.X + (float)(this.width / 2)), (int)(this.position.Y + (float)this.height), 81, 0, 0f, 0f, 0f, 0f, 255);
							Main.npc[num335].SetDefaults("Slimer2");
							Main.npc[num335].velocity.X = this.velocity.X;
							Main.npc[num335].velocity.Y = this.velocity.Y;
							Gore.NewGore(this.position, this.velocity, 94, this.scale);
							if (Main.netMode == 2 && num335 < 200)
							{
								NetMessage.SendData(23, -1, -1, "", num335, 0f, 0f, 0f, 0, 0, 0);
							}
						}
						else if (this.scale >= 1f)
						{
							int num336 = Main.rand.Next(2) + 2;
							for (int num337 = 0; num337 < num336; num337++)
							{
								int num338 = NPC.NewNPC((int)(this.position.X + (float)(this.width / 2)), (int)(this.position.Y + (float)this.height), 1, 0, 0f, 0f, 0f, 0f, 255);
								Main.npc[num338].SetDefaults("Slimeling");
								Main.npc[num338].velocity.X = this.velocity.X * 3f;
								Main.npc[num338].velocity.Y = this.velocity.Y;
								NPC expr_E01B_cp_0 = Main.npc[num338];
								expr_E01B_cp_0.velocity.X = expr_E01B_cp_0.velocity.X + ((float)Main.rand.Next(-10, 10) * 0.1f + (float)(num337 * this.direction) * 0.3f);
								NPC expr_E05E_cp_0 = Main.npc[num338];
								expr_E05E_cp_0.velocity.Y = expr_E05E_cp_0.velocity.Y - ((float)Main.rand.Next(0, 10) * 0.1f + (float)num337);
								Main.npc[num338].ai[1] = (float)num337;
								if (Main.netMode == 2 && num338 < 200)
								{
									NetMessage.SendData(23, -1, -1, "", num338, 0f, 0f, 0f, 0, 0, 0);
								}
							}
						}
					}
				}
			}
			if (this.type == 120 || this.type == 137 || this.type == 138)
			{
				if (this.life > 0)
				{
					int num339 = 0;
					while ((double)num339 < dmg / (double)this.lifeMax * 50.0)
					{
						int num340 = Dust.NewDust(this.position, this.width, this.height, 71, 0f, 0f, 200, default(Color), 1f);
						Main.dust[num340].velocity *= 1.5f;
						num339++;
					}
				}
				else
				{
					for (int num341 = 0; num341 < 50; num341++)
					{
						int num342 = Dust.NewDust(this.position, this.width, this.height, 71, (float)hitDirection, 0f, 200, default(Color), 1f);
						Main.dust[num342].velocity *= 1.5f;
					}
				}
			}
			if (this.type == 122)
			{
				if (this.life > 0)
				{
					int num343 = 0;
					while ((double)num343 < dmg / (double)this.lifeMax * 50.0)
					{
						int num344 = Dust.NewDust(this.position, this.width, this.height, 72, 0f, 0f, 200, default(Color), 1f);
						Main.dust[num344].velocity *= 1.5f;
						num343++;
					}
				}
				else
				{
					for (int num345 = 0; num345 < 50; num345++)
					{
						int num346 = Dust.NewDust(this.position, this.width, this.height, 72, (float)hitDirection, 0f, 200, default(Color), 1f);
						Main.dust[num346].velocity *= 1.5f;
					}
				}
			}
			if (this.type == 75)
			{
				if (this.life > 0)
				{
					int num347 = 0;
					while ((double)num347 < dmg / (double)this.lifeMax * 50.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 55, 0f, 0f, 200, this.color, 1f);
						num347++;
					}
				}
				else
				{
					for (int num348 = 0; num348 < 50; num348++)
					{
						int num349 = Dust.NewDust(this.position, this.width, this.height, 55, (float)hitDirection, 0f, 200, this.color, 1f);
						Main.dust[num349].velocity *= 2f;
					}
				}
			}
			if (this.type != 63 && this.type != 64 && this.type != 103)
			{
				if (this.type == 59 || this.type == 60 || this.type == 151)
				{
					if (this.life > 0)
					{
						int num350 = 0;
						while ((double)num350 < dmg / (double)this.lifeMax * 80.0)
						{
							int num351 = Dust.NewDust(this.position, this.width, this.height, 6, (float)(hitDirection * 2), -1f, this.alpha, default(Color), 1.5f);
							if (Main.rand.Next(8) != 0)
							{
								Main.dust[num351].noGravity = true;
							}
							num350++;
						}
						return;
					}
					for (int num352 = 0; num352 < 40; num352++)
					{
						int num353 = Dust.NewDust(this.position, this.width, this.height, 6, (float)(hitDirection * 2), -1f, this.alpha, default(Color), 1.5f);
						if (Main.rand.Next(8) != 0)
						{
							Main.dust[num353].noGravity = true;
						}
					}
					if (!Main.expertMode || this.type != 59 || Main.netMode == 1)
					{
						return;
					}
					try
					{
						int num354 = (int)(base.Center.X / 16f);
						int num355 = (int)(base.Center.Y / 16f);
						if (!WorldGen.SolidTile(num354, num355) && Main.tile[num354, num355].liquid == 0)
						{
							Main.tile[num354, num355].liquid = (byte)Main.rand.Next(50, 150);
							Main.tile[num354, num355].lava(true);
							Main.tile[num354, num355].honey(false);
							WorldGen.SquareTileFrame(num354, num355, true);
						}
						return;
					}
					catch
					{
						return;
					}
				}
				if (this.type == 50)
				{
					if (this.life > 0)
					{
						int num356 = 0;
						while ((double)num356 < dmg / (double)this.lifeMax * 300.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 4, (float)hitDirection, -1f, 175, new Color(0, 80, 255, 100), 1f);
							num356++;
						}
						return;
					}
					for (int num357 = 0; num357 < 200; num357++)
					{
						Dust.NewDust(this.position, this.width, this.height, 4, (float)(2 * hitDirection), -2f, 175, new Color(0, 80, 255, 100), 1f);
					}
					Gore.NewGore(base.Center + new Vector2(-40f, (float)(-(float)this.height / 2)), this.velocity, 734, 1f);
					if (Main.netMode != 1)
					{
						int num358 = Main.rand.Next(4) + 4;
						for (int num359 = 0; num359 < num358; num359++)
						{
							int x = (int)(this.position.X + (float)Main.rand.Next(this.width - 32));
							int y = (int)(this.position.Y + (float)Main.rand.Next(this.height - 32));
							int num360 = NPC.NewNPC(x, y, 1, 0, 0f, 0f, 0f, 0f, 255);
							Main.npc[num360].SetDefaults(1, -1f);
							Main.npc[num360].velocity.X = (float)Main.rand.Next(-15, 16) * 0.1f;
							Main.npc[num360].velocity.Y = (float)Main.rand.Next(-30, 1) * 0.1f;
							Main.npc[num360].ai[0] = (float)(-1000 * Main.rand.Next(3));
							Main.npc[num360].ai[1] = 0f;
							if (Main.netMode == 2 && num360 < 200)
							{
								NetMessage.SendData(23, -1, -1, "", num360, 0f, 0f, 0f, 0, 0, 0);
							}
						}
						return;
					}
				}
				else if (this.type == 153)
				{
					if (this.life > 0)
					{
						int num361 = 0;
						while ((double)num361 < dmg / (double)this.lifeMax * 30.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num361++;
						}
						return;
					}
					for (int num362 = 0; num362 < 15; num362++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 177, 1f);
					Gore.NewGore(this.position, this.velocity, 178, 1f);
					Gore.NewGore(this.position, this.velocity, 179, 1f);
					Gore.NewGore(this.position, this.velocity, 179, 1f);
					return;
				}
				else if (this.type == 177)
				{
					if (this.life > 0)
					{
						int num363 = 0;
						while ((double)num363 < dmg / (double)this.lifeMax * 30.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num363++;
						}
						return;
					}
					for (int num364 = 0; num364 < 15; num364++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 234, 1f);
					Gore.NewGore(this.position, this.velocity, 235, 1f);
					Gore.NewGore(this.position, this.velocity, 236, 1f);
					Gore.NewGore(this.position, this.velocity, 236, 1f);
					return;
				}
				else if (this.type >= 494 && this.type <= 495)
				{
					if (this.life > 0)
					{
						int num365 = 0;
						while ((double)num365 < dmg / (double)this.lifeMax * 30.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num365++;
						}
						return;
					}
					for (int num366 = 0; num366 < 15; num366++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					int num367 = (this.type - 494) * 2;
					Gore.NewGore(this.position, this.velocity, 736 + num367, 1f);
					Gore.NewGore(this.position, this.velocity, 735 + num367, 1f);
					return;
				}
				else if (this.type >= 496 && this.type <= 497)
				{
					if (this.life > 0)
					{
						int num368 = 0;
						while ((double)num368 < dmg / (double)this.lifeMax * 30.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num368++;
						}
						return;
					}
					for (int num369 = 0; num369 < 15; num369++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					int num370 = this.type - 496;
					Gore.NewGore(this.position, this.velocity, 739 + num370, 1f);
					return;
				}
				else if (this.type >= 498 && this.type <= 506)
				{
					if (this.life > 0)
					{
						int num371 = 0;
						while ((double)num371 < dmg / (double)this.lifeMax * 30.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num371++;
						}
						return;
					}
					for (int num372 = 0; num372 < 15; num372++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					int num373 = this.type - 498;
					Gore.NewGore(this.position, this.velocity, 750 + num373, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 16f), this.velocity, 741 + num373, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 18f), this.velocity, 759 + num373, 1f);
					return;
				}
				else if (this.type == 49 || this.type == 51 || this.type == 93 || this.type == 150 || this.type == 152 || this.type == 226)
				{
					if (this.life > 0)
					{
						int num374 = 0;
						while ((double)num374 < dmg / (double)this.lifeMax * 30.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num374++;
						}
						return;
					}
					for (int num375 = 0; num375 < 15; num375++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					if (this.type == 51)
					{
						Gore.NewGore(this.position, this.velocity, 83, 1f);
						return;
					}
					if (this.type == 93)
					{
						Gore.NewGore(this.position, this.velocity, 107, 1f);
						return;
					}
					if (this.type == 150)
					{
						Gore.NewGore(this.position, this.velocity, 164, 1f);
						Gore.NewGore(this.position, this.velocity, 165, 1f);
						return;
					}
					if (this.type == 152)
					{
						Gore.NewGore(this.position, this.velocity, 175, 1f);
						Gore.NewGore(this.position, this.velocity, 176, 1f);
						Gore.NewGore(this.position, this.velocity, 176, 1f);
						return;
					}
					if (this.type == 226)
					{
						Gore.NewGore(this.position, this.velocity, 317, 1f);
						Gore.NewGore(this.position, this.velocity, 318, 1f);
						Gore.NewGore(this.position, this.velocity, 318, 1f);
						Gore.NewGore(this.position, this.velocity, 319, 1f);
						return;
					}
					Gore.NewGore(this.position, this.velocity, 82, 1f);
					return;
				}
				else if (this.type == 46 || this.type == 55 || this.type == 67 || this.type == 74 || this.type == 102 || this.type == 224 || this.type == 230 || this.type == 297 || this.type == 298 || this.type == 299 || this.type == 300 || this.type == 303 || this.type == 337 || this.type == 538 || this.type == 540)
				{
					if (this.life > 0)
					{
						int num376 = 0;
						while ((double)num376 < dmg / (double)this.lifeMax * 20.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num376++;
						}
						return;
					}
					for (int num377 = 0; num377 < 10; num377++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					if (this.type == 46 || this.type == 303 || this.type == 337 || this.type == 540)
					{
						Gore.NewGore(this.position, this.velocity, 76, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity, 77, 1f);
						if (this.type == 303)
						{
							for (int num378 = 0; num378 < 10; num378++)
							{
								Dust.NewDust(this.position, this.width, this.height, 193, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
							}
						}
						if (this.type == 540)
						{
							Gore.NewGore(this.position, this.velocity, 926, 1f);
							return;
						}
					}
					else
					{
						if (this.type == 67)
						{
							Gore.NewGore(this.position, this.velocity, 95, 1f);
							Gore.NewGore(this.position, this.velocity, 95, 1f);
							Gore.NewGore(this.position, this.velocity, 96, 1f);
							return;
						}
						if (this.type == 55 || this.type == 230)
						{
							Gore.NewGore(this.position, this.velocity, 553, 1f);
							Gore.NewGore(this.position, this.velocity, 554, 1f);
							return;
						}
						if (this.type == 74)
						{
							Gore.NewGore(this.position, this.velocity, 100, 1f);
							return;
						}
						if (this.type == 297)
						{
							Gore.NewGore(this.position, this.velocity, 431, 1f);
							return;
						}
						if (this.type == 298)
						{
							Gore.NewGore(this.position, this.velocity, 432, 1f);
							return;
						}
						if (this.type == 299)
						{
							Gore.NewGore(this.position, this.velocity, 433, 1f);
							return;
						}
						if (this.type == 538)
						{
							Gore.NewGore(this.position, this.velocity, 897, 1f);
							return;
						}
						if (this.type == 300)
						{
							Gore.NewGore(this.position, this.velocity, 434, 1f);
							return;
						}
						if (this.type == 102)
						{
							Gore.NewGore(this.position, this.velocity, 116, 1f);
							return;
						}
						if (this.type == 224)
						{
							Gore.NewGore(this.position, this.velocity, 312, 1f);
							Gore.NewGore(this.position, this.velocity, 313, 1f);
							return;
						}
					}
				}
				else if (this.type == 148 || this.type == 149 || this.type == 168 || this.type == 470)
				{
					if (this.life > 0)
					{
						int num379 = 0;
						while ((double)num379 < dmg / (double)this.lifeMax * 20.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num379++;
						}
						return;
					}
					for (int num380 = 0; num380 < 10; num380++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					if (this.type == 148)
					{
						Gore.NewGore(this.position, this.velocity, 160, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity, 161, 1f);
						return;
					}
					if (this.type == 149)
					{
						Gore.NewGore(this.position, this.velocity, 162, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity, 163, 1f);
						return;
					}
					if (this.type == 168)
					{
						Gore.NewGore(this.position, this.velocity, 215, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity, 216, 1f);
						return;
					}
					if (this.type == 470)
					{
						Gore.NewGore(this.position, this.velocity, 673, 1f);
						Gore.NewGore(this.position, this.velocity, 672, 1f);
						Gore.NewGore(this.position, this.velocity, 674, 1f);
						return;
					}
				}
				else if (this.type == 361)
				{
					if (this.life > 0)
					{
						int num381 = 0;
						while ((double)num381 < dmg / (double)this.lifeMax * 20.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num381++;
						}
						return;
					}
					for (int num382 = 0; num382 < 10; num382++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 551, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity, 552, 1f);
					return;
				}
				else if (this.type == 366 || this.type == 367)
				{
					if (this.life > 0)
					{
						int num383 = 0;
						while ((double)num383 < dmg / (double)this.lifeMax * 20.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 203, (float)hitDirection, -1f, 0, default(Color), 1f);
							num383++;
						}
						return;
					}
					for (int num384 = 0; num384 < 10; num384++)
					{
						Dust.NewDust(this.position, this.width, this.height, 203, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					if (this.type == 366)
					{
						Gore.NewGore(this.position, this.velocity, 561, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity, 562, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity, 563, 1f);
						return;
					}
					Gore.NewGore(this.position, this.velocity, 564, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity, 565, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity, 566, 1f);
					return;
				}
				else if (this.type >= 362 && this.type <= 365)
				{
					if (this.life > 0)
					{
						int num385 = 0;
						while ((double)num385 < dmg / (double)this.lifeMax * 20.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num385++;
						}
						return;
					}
					for (int num386 = 0; num386 < 10; num386++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					if (this.type == 362 || this.type == 363)
					{
						Gore.NewGore(this.position, this.velocity, 555, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity, 556, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity, 557, 1f);
						return;
					}
					Gore.NewGore(this.position, this.velocity, 558, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity, 559, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity, 560, 1f);
					return;
				}
				else if (this.type == 348 || this.type == 349)
				{
					if (this.life > 0)
					{
						int num387 = 0;
						while ((double)num387 < dmg / (double)this.lifeMax * 20.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num387++;
						}
						return;
					}
					for (int num388 = 0; num388 < 10; num388++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 528, 1f);
					Gore.NewGore(this.position, this.velocity, 529, 1f);
					Gore.NewGore(this.position, this.velocity, 530, 1f);
					Gore.NewGore(this.position, this.velocity, 531, 1f);
					Gore.NewGore(this.position, this.velocity, 532, 1f);
					return;
				}
				else if (this.type == 351)
				{
					if (this.life > 0)
					{
						int num389 = 0;
						while ((double)num389 < dmg / (double)this.lifeMax * 20.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num389++;
						}
						return;
					}
					for (int num390 = 0; num390 < 10; num390++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 538, 1f);
					Gore.NewGore(this.position, this.velocity, 539, 1f);
					Gore.NewGore(this.position, this.velocity, 540, 1f);
					Gore.NewGore(this.position, this.velocity, 541, 1f);
					Gore.NewGore(this.position, this.velocity, 542, 1f);
					return;
				}
				else if (this.type == 350)
				{
					if (this.life > 0)
					{
						int num391 = 0;
						while ((double)num391 < dmg / (double)this.lifeMax * 20.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num391++;
						}
						return;
					}
					for (int num392 = 0; num392 < 10; num392++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 533, 1f);
					Gore.NewGore(this.position, this.velocity, 534, 1f);
					Gore.NewGore(this.position, this.velocity, 535, 1f);
					Gore.NewGore(this.position, this.velocity, 536, 1f);
					return;
				}
				else if (this.type == 47 || this.type == 57 || this.type == 58 || this.type == 464 || this.type == 465)
				{
					if (this.life > 0)
					{
						int num393 = 0;
						while ((double)num393 < dmg / (double)this.lifeMax * 20.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num393++;
						}
						return;
					}
					for (int num394 = 0; num394 < 10; num394++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					if (this.type == 57)
					{
						Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity, 84, 1f);
						return;
					}
					if (this.type == 58)
					{
						Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity, 85, 1f);
						return;
					}
					if (this.type == 464)
					{
						Gore.NewGore(this.position, this.velocity, 668, 1f);
						Gore.NewGore(this.position, this.velocity, 669, 1f);
						return;
					}
					if (this.type == 465)
					{
						Gore.NewGore(this.position, this.velocity, 670, 1f);
						Gore.NewGore(this.position, this.velocity, 671, 1f);
						return;
					}
					Gore.NewGore(this.position, this.velocity, 78, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity, 79, 1f);
					return;
				}
				else if (this.type == 173 || this.type == 174 || this.type == 181 || this.type == 182 || this.type == 268)
				{
					if (this.life > 0)
					{
						int num395 = 0;
						while ((double)num395 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, this.alpha, default(Color), 1f);
							num395++;
						}
						return;
					}
					for (int num396 = 0; num396 < 50; num396++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, this.alpha, default(Color), 1f);
					}
					if (this.type == 173)
					{
						Gore.NewGore(this.position, this.velocity, 223, 1f);
						Gore.NewGore(this.position, this.velocity, 224, 1f);
						return;
					}
					if (this.type == 174)
					{
						Gore.NewGore(this.position, this.velocity, 225, 1f);
						Gore.NewGore(this.position, this.velocity, 226, 1f);
						return;
					}
					if (this.type == 181)
					{
						Gore.NewGore(this.position, this.velocity, 237, 1f);
						return;
					}
					if (this.type == 182)
					{
						Gore.NewGore(this.position, this.velocity, 238, 1f);
						Gore.NewGore(this.position, this.velocity, 239, 1f);
						return;
					}
					if (this.type == 268)
					{
						Gore.NewGore(this.position, this.velocity, 403, 1f);
						Gore.NewGore(this.position, this.velocity, 404, 1f);
						Gore.NewGore(this.position, this.velocity, 405, 1f);
						return;
					}
				}
				else if (this.type == 2 || this.type == 190 || this.type == 191 || this.type == 192 || this.type == 193 || this.type == 194 || this.type == 317 || this.type == 318)
				{
					if (this.life > 0)
					{
						int num397 = 0;
						while ((double)num397 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num397++;
						}
						return;
					}
					for (int num398 = 0; num398 < 50; num398++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					if (this.type == 190)
					{
						Gore.NewGore(this.position, this.velocity, 249, this.scale);
						Gore.NewGore(new Vector2(this.position.X + 14f, this.position.Y), this.velocity, 2, this.scale);
						return;
					}
					if (this.type == 191)
					{
						Gore.NewGore(this.position, this.velocity, 248, this.scale);
						Gore.NewGore(new Vector2(this.position.X + 14f, this.position.Y), this.velocity, 2, this.scale);
						return;
					}
					if (this.type == 192)
					{
						Gore.NewGore(this.position, this.velocity, 247, this.scale);
						Gore.NewGore(new Vector2(this.position.X + 14f, this.position.Y), this.velocity, 2, this.scale);
						return;
					}
					if (this.type == 193)
					{
						Gore.NewGore(this.position, this.velocity, 252, this.scale);
						Gore.NewGore(new Vector2(this.position.X + 14f, this.position.Y), this.velocity, 253, this.scale);
						return;
					}
					if (this.type == 194)
					{
						Gore.NewGore(this.position, this.velocity, 250, this.scale);
						Gore.NewGore(new Vector2(this.position.X + 14f, this.position.Y), this.velocity, 251, this.scale);
						return;
					}
					if (this.type == 317)
					{
						Gore.NewGore(this.position, this.velocity, 447, this.scale);
						Gore.NewGore(new Vector2(this.position.X + 14f, this.position.Y), this.velocity, 448, this.scale);
						return;
					}
					if (this.type == 318)
					{
						Gore.NewGore(this.position, this.velocity, 449, this.scale);
						Gore.NewGore(new Vector2(this.position.X + 14f, this.position.Y), this.velocity, 450, this.scale);
						return;
					}
					Gore.NewGore(this.position, this.velocity, 1, this.scale);
					Gore.NewGore(new Vector2(this.position.X + 14f, this.position.Y), this.velocity, 2, this.scale);
					return;
				}
				else if (this.type == 157)
				{
					if (this.life > 0)
					{
						int num399 = 0;
						while ((double)num399 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num399++;
						}
						return;
					}
					for (int num400 = 0; num400 < 50; num400++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 186, 1f);
					Gore.NewGore(new Vector2(this.position.X + 14f, this.position.Y), this.velocity, 187, 1f);
					return;
				}
				else if (this.type == 133)
				{
					if (this.life <= 0)
					{
						for (int num401 = 0; num401 < 50; num401++)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
						}
						Gore.NewGore(this.position, this.velocity, 155, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 14f), this.velocity, 155, 1f);
						return;
					}
					int num402 = 0;
					while ((double)num402 < dmg / (double)this.lifeMax * 100.0)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						num402++;
					}
					if ((float)this.life < (float)this.lifeMax * 0.5f && this.localAI[0] == 0f)
					{
						this.localAI[0] = 1f;
						Gore.NewGore(this.position, this.velocity, 1, 1f);
						return;
					}
				}
				else if (this.type == 69 || this.type == 509 || this.type == 508)
				{
					if (this.life > 0)
					{
						int num403 = 0;
						while ((double)num403 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 250, (float)hitDirection, -1f, 0, default(Color), 1f);
							num403++;
						}
						return;
					}
					for (int num404 = 0; num404 < 50; num404++)
					{
						Dust.NewDust(this.position, this.width, this.height, 250, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					if (this.type == 69)
					{
						Gore.NewGore(this.position, this.velocity, 97, 1f);
						Gore.NewGore(this.position, this.velocity, 98, 1f);
						return;
					}
					if (this.type == 508)
					{
						Gore.NewGore(this.position, this.velocity, 811, 1f);
						Gore.NewGore(this.position, this.velocity, 812, 1f);
						Gore.NewGore(this.position, this.velocity, 813, 1f);
						Gore.NewGore(this.position, this.velocity, 814, 1f);
						return;
					}
					if (this.type == 509)
					{
						Gore.NewGore(this.position, this.velocity, 815, 1f);
						Gore.NewGore(this.position, this.velocity, 816, 1f);
						Gore.NewGore(this.position, this.velocity, 817, 1f);
						Gore.NewGore(this.position, this.velocity, 818, 1f);
						Gore.NewGore(this.position, this.velocity, 818, 1f);
						return;
					}
				}
				else if (this.type == 61)
				{
					if (this.life > 0)
					{
						int num405 = 0;
						while ((double)num405 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num405++;
						}
						return;
					}
					for (int num406 = 0; num406 < 50; num406++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 86, 1f);
					Gore.NewGore(new Vector2(this.position.X + 14f, this.position.Y), this.velocity, 87, 1f);
					Gore.NewGore(new Vector2(this.position.X + 14f, this.position.Y), this.velocity, 88, 1f);
					return;
				}
				else if (this.type == 301)
				{
					if (this.life > 0)
					{
						int num407 = 0;
						while ((double)num407 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num407++;
						}
						return;
					}
					for (int num408 = 0; num408 < 50; num408++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 438, 1f);
					Gore.NewGore(new Vector2(this.position.X + 14f, this.position.Y), this.velocity, 439, 1f);
					return;
				}
				else if (this.type == 252)
				{
					if (this.life > 0)
					{
						int num409 = 0;
						while ((double)num409 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num409++;
						}
						return;
					}
					for (int num410 = 0; num410 < 50; num410++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 373, 1f);
					Gore.NewGore(this.position, this.velocity, 374, 1f);
					return;
				}
				else if (this.type == 489)
				{
					if (this.life > 0)
					{
						int num411 = 0;
						while ((double)num411 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num411++;
						}
						return;
					}
					for (int num412 = 0; num412 < 50; num412++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 722, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 723, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 723, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 724, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 724, this.scale);
					return;
				}
				else if (this.type == 534)
				{
					if (this.life > 0)
					{
						int num413 = 0;
						while ((double)num413 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num413++;
						}
						return;
					}
					for (int num414 = 0; num414 < 50; num414++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 894, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 895, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 895, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 896, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 896, this.scale);
					return;
				}
				else if (this.type == 490)
				{
					if (this.life > 0)
					{
						int num415 = 0;
						while ((double)num415 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num415++;
						}
						return;
					}
					for (int num416 = 0; num416 < 50; num416++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 725, this.scale);
					Gore.NewGore(this.position, this.velocity, 726, this.scale);
					Gore.NewGore(this.position, this.velocity, 727, this.scale);
					Gore.NewGore(this.position, this.velocity, 725 + Main.rand.Next(3), this.scale);
					Gore.NewGore(this.position, this.velocity, 725 + Main.rand.Next(3), this.scale);
					return;
				}
				else if (this.type == 65 || (this.type >= 542 && this.type <= 545))
				{
					if (this.life > 0)
					{
						int num417 = 0;
						while ((double)num417 < dmg / (double)this.lifeMax * 150.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num417++;
						}
						return;
					}
					for (int num418 = 0; num418 < 75; num418++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					if (this.type == 65)
					{
						Gore.NewGore(this.position, this.velocity * 0.8f, 89, 1f);
						Gore.NewGore(new Vector2(this.position.X + 14f, this.position.Y), this.velocity * 0.8f, 90, 1f);
						Gore.NewGore(new Vector2(this.position.X + 14f, this.position.Y), this.velocity * 0.8f, 91, 1f);
						Gore.NewGore(new Vector2(this.position.X + 14f, this.position.Y), this.velocity * 0.8f, 92, 1f);
					}
					if (this.type == 542)
					{
						Gore.NewGore(this.position, this.velocity * 0.8f, 944, 1f);
						Gore.NewGore(new Vector2(this.position.X + 14f, this.position.Y), this.velocity * 0.8f, 945, 1f);
						Gore.NewGore(new Vector2(this.position.X + 14f, this.position.Y), this.velocity * 0.8f, 946, 1f);
						Gore.NewGore(new Vector2(this.position.X + 14f, this.position.Y), this.velocity * 0.8f, 947, 1f);
					}
					if (this.type == 543)
					{
						Gore.NewGore(this.position, this.velocity * 0.8f, 948, 1f);
						Gore.NewGore(new Vector2(this.position.X + 14f, this.position.Y), this.velocity * 0.8f, 949, 1f);
						Gore.NewGore(new Vector2(this.position.X + 14f, this.position.Y), this.velocity * 0.8f, 950, 1f);
						Gore.NewGore(new Vector2(this.position.X + 14f, this.position.Y), this.velocity * 0.8f, 951, 1f);
					}
					if (this.type == 544)
					{
						Gore.NewGore(this.position, this.velocity * 0.8f, 952, 1f);
						Gore.NewGore(new Vector2(this.position.X + 14f, this.position.Y), this.velocity * 0.8f, 953, 1f);
						Gore.NewGore(new Vector2(this.position.X + 14f, this.position.Y), this.velocity * 0.8f, 954, 1f);
						Gore.NewGore(new Vector2(this.position.X + 14f, this.position.Y), this.velocity * 0.8f, 955, 1f);
					}
					if (this.type == 545)
					{
						Gore.NewGore(this.position, this.velocity * 0.8f, 956, 1f);
						Gore.NewGore(new Vector2(this.position.X + 14f, this.position.Y), this.velocity * 0.8f, 957, 1f);
						Gore.NewGore(new Vector2(this.position.X + 14f, this.position.Y), this.velocity * 0.8f, 958, 1f);
						Gore.NewGore(new Vector2(this.position.X + 14f, this.position.Y), this.velocity * 0.8f, 959, 1f);
						return;
					}
				}
				else if (this.type == 195 || this.type == 196)
				{
					if (this.life > 0)
					{
						int num419 = 0;
						while ((double)num419 < dmg / (double)this.lifeMax * 150.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num419++;
						}
						return;
					}
					for (int num420 = 0; num420 < 75; num420++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 254, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 255, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 255, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 256, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 256, this.scale);
					return;
				}
				else if (this.type == 198 || this.type == 199)
				{
					if (this.life > 0)
					{
						int num421 = 0;
						while ((double)num421 < dmg / (double)this.lifeMax * 150.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num421++;
						}
						return;
					}
					for (int num422 = 0; num422 < 75; num422++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 258, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 259, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 259, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 260, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 260, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 261, this.scale);
					return;
				}
				else if (this.type == 206)
				{
					if (this.life > 0)
					{
						int num423 = 0;
						while ((double)num423 < dmg / (double)this.lifeMax * 150.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 137, (float)hitDirection, -1f, 0, default(Color), 1f);
							num423++;
						}
						return;
					}
					for (int num424 = 0; num424 < 75; num424++)
					{
						Dust.NewDust(this.position, this.width, this.height, 137, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 273, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 274, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 274, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 275, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 275, this.scale);
					return;
				}
				else if (this.type == 342)
				{
					if (this.life > 0)
					{
						int num425 = 0;
						while ((double)num425 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 0, (float)hitDirection, -1f, 0, default(Color), 1f);
							num425++;
						}
						return;
					}
					for (int num426 = 0; num426 < 50; num426++)
					{
						Dust.NewDust(this.position, this.width, this.height, 0, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 500, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 501, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 501, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 502, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 502, this.scale);
					return;
				}
				else if (this.type >= 338 && this.type <= 340)
				{
					if (this.life > 0)
					{
						int num427 = 0;
						while ((double)num427 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num427++;
						}
						return;
					}
					for (int num428 = 0; num428 < 50; num428++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					if (this.type == 338)
					{
						Gore.NewGore(this.position, this.velocity, 494, this.scale);
					}
					if (this.type == 339)
					{
						Gore.NewGore(this.position, this.velocity, 495, this.scale);
					}
					if (this.type == 340)
					{
						Gore.NewGore(this.position, this.velocity, 496, this.scale);
					}
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 497, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 498, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 499, this.scale);
					return;
				}
				else if (this.type == 343)
				{
					if (this.life > 0)
					{
						int num429 = 0;
						while ((double)num429 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num429++;
						}
						return;
					}
					for (int num430 = 0; num430 < 50; num430++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 503, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 504, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 505, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 506, this.scale);
					return;
				}
				else if ((this.type >= 430 && this.type <= 436) || this.type == 3 || this.type == 52 || this.type == 53 || this.type == 536 || this.type == 104 || this.type == 109 || this.type == 331 || this.type == 332 || this.type == 132 || this.type == 161 || this.type == 162 || this.type == 186 || this.type == 187 || this.type == 188 || this.type == 189 || this.type == 200 || this.type == 223 || this.type == 251 || this.type == 319 || this.type == 320 || this.type == 321)
				{
					if (this.life > 0)
					{
						int num431 = 0;
						while ((double)num431 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num431++;
						}
						if (this.type == 186 && Main.rand.Next(5) == 0)
						{
							Gore.NewGore(this.position, this.velocity, 242, 1f);
						}
						if (this.type == 187)
						{
							int num432 = 0;
							while ((double)num432 < dmg / (double)this.lifeMax * 200.0)
							{
								Dust.NewDust(this.position, this.width, 24, 4, (float)hitDirection, -1f, 125, new Color(0, 80, 255, 100), 1f);
								num432++;
							}
							return;
						}
					}
					else
					{
						for (int num433 = 0; num433 < 50; num433++)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
						}
						if (this.type == 187 || this.type == 433)
						{
							for (int num434 = 0; num434 < 25; num434++)
							{
								Dust.NewDust(this.position, this.width, 24, 4, (float)hitDirection, -1f, 125, new Color(0, 80, 255, 100), 1f);
							}
						}
						if (this.type == 104)
						{
							Gore.NewGore(this.position, this.velocity, 117, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 118, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 118, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 119, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 119, this.scale);
							return;
						}
						if (this.type == 331)
						{
							Gore.NewGore(this.position, this.velocity, 488, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 489, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 489, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 490, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 490, this.scale);
							return;
						}
						if (this.type == 332)
						{
							Gore.NewGore(this.position, this.velocity, 491, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 492, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 492, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 493, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 493, this.scale);
							return;
						}
						if (this.type == 109)
						{
							Gore.NewGore(this.position, this.velocity, 121, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 122, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 122, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 123, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 123, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 46f), this.velocity, 120, this.scale);
							return;
						}
						if (this.type == 161 || this.type == 431)
						{
							Gore.NewGore(this.position, this.velocity, 191, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 192, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 192, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 193, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 193, this.scale);
							return;
						}
						if (this.type == 162)
						{
							Gore.NewGore(this.position, this.velocity, 194, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 195, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 195, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 196, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 196, this.scale);
							return;
						}
						if (this.type == 188 || this.type == 434)
						{
							Gore.NewGore(this.position, this.velocity, 243, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 244, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 244, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 245, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 245, this.scale);
							return;
						}
						if (this.type == 200 || this.type == 436)
						{
							Gore.NewGore(this.position, this.velocity, 262, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 263, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 263, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 264, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 264, this.scale);
							return;
						}
						if (this.type == 319)
						{
							Gore.NewGore(this.position, this.velocity, 451, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 453, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 453, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 452, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 452, this.scale);
							return;
						}
						if (this.type == 320)
						{
							Gore.NewGore(this.position, this.velocity, 454, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 455, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 456, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 456, this.scale);
							return;
						}
						if (this.type == 321)
						{
							Gore.NewGore(this.position, this.velocity, 457, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 458, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 458, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 459, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 459, this.scale);
							return;
						}
						if (this.type == 223)
						{
							Gore.NewGore(this.position, this.velocity, 309, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 310, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 310, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 311, this.scale);
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 311, this.scale);
							return;
						}
						if (this.type == 132)
						{
							Gore.NewGore(this.position, this.velocity, 154, 1f);
						}
						else if (this.type == 186 || this.type == 432)
						{
							Gore.NewGore(this.position, this.velocity, 241, 1f);
						}
						else if (this.type == 189 || this.type == 435)
						{
							Gore.NewGore(this.position, this.velocity, 246, 1f);
						}
						else if (this.type == 251)
						{
							Gore.NewGore(this.position, this.velocity, 372, 1f);
						}
						else if (this.type != 187 && this.type != 433)
						{
							Gore.NewGore(this.position, this.velocity, 3, 1f);
						}
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 4, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 4, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 5, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 5, 1f);
						if (this.type == 186 || this.type == 432)
						{
							Gore.NewGore(this.position, this.velocity, 242, 1f);
						}
						if ((this.type == 186 || this.type == 432) && Main.rand.Next(2) == 0)
						{
							Gore.NewGore(this.position, this.velocity, 242, 1f);
							return;
						}
					}
				}
				else if (this.type == 83 || this.type == 84 || this.type == 179)
				{
					if (this.life > 0)
					{
						int num435 = 0;
						while ((double)num435 < dmg / (double)this.lifeMax * 50.0)
						{
							int num436 = Dust.NewDust(this.position, this.width, this.height, 31, 0f, 0f, 0, default(Color), 1.5f);
							Main.dust[num436].noGravity = true;
							num435++;
						}
						return;
					}
					for (int num437 = 0; num437 < 20; num437++)
					{
						int num438 = Dust.NewDust(this.position, this.width, this.height, 31, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num438].velocity *= 2f;
						Main.dust[num438].noGravity = true;
					}
					int num439 = Gore.NewGore(new Vector2(this.position.X, this.position.Y + (float)(this.height / 2) - 10f), new Vector2((float)Main.rand.Next(-2, 3), (float)Main.rand.Next(-2, 3)), 61, this.scale);
					Main.gore[num439].velocity *= 0.5f;
					num439 = Gore.NewGore(new Vector2(this.position.X, this.position.Y + (float)(this.height / 2) - 10f), new Vector2((float)Main.rand.Next(-2, 3), (float)Main.rand.Next(-2, 3)), 61, this.scale);
					Main.gore[num439].velocity *= 0.5f;
					num439 = Gore.NewGore(new Vector2(this.position.X, this.position.Y + (float)(this.height / 2) - 10f), new Vector2((float)Main.rand.Next(-2, 3), (float)Main.rand.Next(-2, 3)), 61, this.scale);
					Main.gore[num439].velocity *= 0.5f;
					return;
				}
				else if (this.type == 262 || this.type == 263 || this.type == 264)
				{
					if (this.life > 0)
					{
						int num440 = 0;
						while ((double)num440 < dmg / (double)this.lifeMax * 100.0)
						{
							if (this.type == 262 && this.life > this.lifeMax / 2 && Main.rand.Next(3) != 0)
							{
								Dust.NewDust(this.position, this.width, this.height, 166, (float)hitDirection, -1f, 0, default(Color), 1f);
							}
							else if (this.type == 265 && Main.rand.Next(3) != 0)
							{
								Dust.NewDust(this.position, this.width, this.height, 166, (float)hitDirection, -1f, 0, default(Color), 1f);
							}
							else
							{
								Dust.NewDust(this.position, this.width, this.height, 167, (float)hitDirection, -1f, 0, default(Color), 1f);
							}
							num440++;
						}
						return;
					}
					for (int num441 = 0; num441 < 150; num441++)
					{
						if (this.type == 265 && Main.rand.Next(3) != 0)
						{
							Dust.NewDust(this.position, this.width, this.height, 166, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
						}
						else
						{
							Dust.NewDust(this.position, this.width, this.height, 167, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
						}
					}
					if (this.type == 262)
					{
						Gore.NewGore(new Vector2(this.position.X + (float)Main.rand.Next(this.width), this.position.Y + (float)Main.rand.Next(this.height)), this.velocity, 381, this.scale);
						Gore.NewGore(new Vector2(this.position.X + (float)Main.rand.Next(this.width), this.position.Y + (float)Main.rand.Next(this.height)), this.velocity, 382, this.scale);
						Gore.NewGore(new Vector2(this.position.X + (float)Main.rand.Next(this.width), this.position.Y + (float)Main.rand.Next(this.height)), this.velocity, 383, this.scale);
						Gore.NewGore(new Vector2(this.position.X + (float)Main.rand.Next(this.width), this.position.Y + (float)Main.rand.Next(this.height)), this.velocity, 384, this.scale);
						Gore.NewGore(new Vector2(this.position.X + (float)Main.rand.Next(this.width), this.position.Y + (float)Main.rand.Next(this.height)), this.velocity, 385, this.scale);
						Gore.NewGore(new Vector2(this.position.X + (float)Main.rand.Next(this.width), this.position.Y + (float)Main.rand.Next(this.height)), this.velocity, 386, this.scale);
						Gore.NewGore(new Vector2(this.position.X + (float)Main.rand.Next(this.width), this.position.Y + (float)Main.rand.Next(this.height)), this.velocity, 386, this.scale);
						Gore.NewGore(new Vector2(this.position.X + (float)Main.rand.Next(this.width), this.position.Y + (float)Main.rand.Next(this.height)), this.velocity, 387, this.scale);
						Gore.NewGore(new Vector2(this.position.X + (float)Main.rand.Next(this.width), this.position.Y + (float)Main.rand.Next(this.height)), this.velocity, 387, this.scale);
					}
					if (this.type == 263)
					{
						Gore.NewGore(new Vector2(this.position.X + (float)Main.rand.Next(this.width), this.position.Y + (float)Main.rand.Next(this.height)), this.velocity, 390, this.scale);
						Gore.NewGore(new Vector2(this.position.X + (float)Main.rand.Next(this.width), this.position.Y + (float)Main.rand.Next(this.height)), this.velocity, 391, this.scale);
					}
					if (this.type == 264)
					{
						Gore.NewGore(new Vector2(this.position.X + (float)Main.rand.Next(this.width), this.position.Y + (float)Main.rand.Next(this.height)), this.velocity, 388, this.scale);
						Gore.NewGore(new Vector2(this.position.X + (float)Main.rand.Next(this.width), this.position.Y + (float)Main.rand.Next(this.height)), this.velocity, 389, this.scale);
						return;
					}
				}
				else if (this.type == 265)
				{
					if (this.life < 0)
					{
						for (int num442 = 0; num442 < 15; num442++)
						{
							if (Main.rand.Next(3) != 0)
							{
								Dust.NewDust(this.position, this.width, this.height, 166, (float)hitDirection, -1f, 0, default(Color), 1f);
							}
							else
							{
								Dust.NewDust(this.position, this.width, this.height, 167, (float)hitDirection, -1f, 0, default(Color), 1f);
							}
						}
						return;
					}
				}
				else if (this.type == 266)
				{
					if (this.life > 0)
					{
						int num443 = 0;
						while ((double)num443 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num443++;
						}
						return;
					}
					for (int num444 = 0; num444 < 150; num444++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 396, 1f);
					Gore.NewGore(this.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 397, 1f);
					Gore.NewGore(this.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 398, 1f);
					Gore.NewGore(this.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 399, 1f);
					Gore.NewGore(this.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 400, 1f);
					Gore.NewGore(this.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 401, 1f);
					return;
				}
				else if (this.type == 267)
				{
					if (this.life > 0)
					{
						int num445 = 0;
						while ((double)num445 < dmg / (double)this.lifeMax * 50.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num445++;
						}
						return;
					}
					for (int num446 = 0; num446 < 20; num446++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 402, 1f);
					return;
				}
				else if (this.type == 4 || this.type == 126 || this.type == 125)
				{
					if (this.life > 0)
					{
						int num447 = 0;
						while ((double)num447 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num447++;
						}
						return;
					}
					for (int num448 = 0; num448 < 150; num448++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					for (int num449 = 0; num449 < 2; num449++)
					{
						Gore.NewGore(this.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 2, 1f);
						Gore.NewGore(this.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 7, 1f);
						Gore.NewGore(this.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 9, 1f);
						if (this.type == 4)
						{
							Gore.NewGore(this.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 10, 1f);
							Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
						}
						else if (this.type == 125)
						{
							Gore.NewGore(this.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 146, 1f);
						}
						else if (this.type == 126)
						{
							Gore.NewGore(this.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 145, 1f);
						}
					}
					if (this.type == 125 || this.type == 126)
					{
						for (int num450 = 0; num450 < 10; num450++)
						{
							int num451 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num451].velocity *= 1.4f;
						}
						for (int num452 = 0; num452 < 5; num452++)
						{
							int num453 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num453].noGravity = true;
							Main.dust[num453].velocity *= 5f;
							num453 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num453].velocity *= 3f;
						}
						int num454 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Main.gore[num454].velocity *= 0.4f;
						Gore expr_14D44_cp_0 = Main.gore[num454];
						expr_14D44_cp_0.velocity.X = expr_14D44_cp_0.velocity.X + 1f;
						Gore expr_14D64_cp_0 = Main.gore[num454];
						expr_14D64_cp_0.velocity.Y = expr_14D64_cp_0.velocity.Y + 1f;
						num454 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Main.gore[num454].velocity *= 0.4f;
						Gore expr_14DE8_cp_0 = Main.gore[num454];
						expr_14DE8_cp_0.velocity.X = expr_14DE8_cp_0.velocity.X - 1f;
						Gore expr_14E08_cp_0 = Main.gore[num454];
						expr_14E08_cp_0.velocity.Y = expr_14E08_cp_0.velocity.Y + 1f;
						num454 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Main.gore[num454].velocity *= 0.4f;
						Gore expr_14E8C_cp_0 = Main.gore[num454];
						expr_14E8C_cp_0.velocity.X = expr_14E8C_cp_0.velocity.X + 1f;
						Gore expr_14EAC_cp_0 = Main.gore[num454];
						expr_14EAC_cp_0.velocity.Y = expr_14EAC_cp_0.velocity.Y - 1f;
						num454 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Main.gore[num454].velocity *= 0.4f;
						Gore expr_14F30_cp_0 = Main.gore[num454];
						expr_14F30_cp_0.velocity.X = expr_14F30_cp_0.velocity.X - 1f;
						Gore expr_14F50_cp_0 = Main.gore[num454];
						expr_14F50_cp_0.velocity.Y = expr_14F50_cp_0.velocity.Y - 1f;
						return;
					}
				}
				else if (this.type == 5)
				{
					if (this.life > 0)
					{
						int num455 = 0;
						while ((double)num455 < dmg / (double)this.lifeMax * 50.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num455++;
						}
						return;
					}
					for (int num456 = 0; num456 < 20; num456++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 6, 1f);
					Gore.NewGore(this.position, this.velocity, 7, 1f);
					return;
				}
				else if (this.type == 113 || this.type == 114)
				{
					if (this.life > 0)
					{
						for (int num457 = 0; num457 < 20; num457++)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						}
						return;
					}
					for (int num458 = 0; num458 < 50; num458++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -1f, 0, default(Color), 1f);
					}
					if (this.type == 114)
					{
						Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity, 137, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + (float)(this.height / 2)), this.velocity, 139, this.scale);
						Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2), this.position.Y), this.velocity, 139, this.scale);
						Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2)), this.velocity, 137, this.scale);
						return;
					}
					Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity, 137, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + (float)(this.height / 2)), this.velocity, 138, this.scale);
					Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2), this.position.Y), this.velocity, 138, this.scale);
					Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2)), this.velocity, 137, this.scale);
					if (Main.player[Main.myPlayer].position.Y / 16f > (float)(Main.maxTilesY - 250))
					{
						int num459 = (int)Main.screenPosition.Y;
						int num460 = num459 + Main.screenWidth;
						int num461 = (int)this.position.X;
						if (this.direction > 0)
						{
							num461 -= 80;
						}
						int num462 = num461 + 140;
						int num463 = num461;
						for (int num464 = num459; num464 < num460; num464 += 50)
						{
							while (num463 < num462)
							{
								for (int num465 = 0; num465 < 5; num465++)
								{
									Dust.NewDust(new Vector2((float)num463, (float)num464), 32, 32, 5, (float)Main.rand.Next(-60, 61) * 0.1f, (float)Main.rand.Next(-60, 61) * 0.1f, 0, default(Color), 1f);
								}
								Vector2 velocity4 = new Vector2((float)Main.rand.Next(-80, 81) * 0.1f, (float)Main.rand.Next(-60, 21) * 0.1f);
								Gore.NewGore(new Vector2((float)num463, (float)num464), velocity4, Main.rand.Next(140, 143), 1f);
								num463 += 46;
							}
							num463 = num461;
						}
						return;
					}
				}
				else if (this.type == 115 || this.type == 116)
				{
					if (this.life > 0)
					{
						for (int num466 = 0; num466 < 5; num466++)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						}
						return;
					}
					if (this.type == 115 && Main.netMode != 1)
					{
						NPC.NewNPC((int)(this.position.X + (float)(this.width / 2)), (int)(this.position.Y + (float)this.height), 116, 0, 0f, 0f, 0f, 0f, 255);
						for (int num467 = 0; num467 < 10; num467++)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						}
						return;
					}
					for (int num468 = 0; num468 < 20; num468++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 132, this.scale);
					Gore.NewGore(this.position, this.velocity, 133, this.scale);
					return;
				}
				else if (this.type >= 117 && this.type <= 119)
				{
					if (this.life > 0)
					{
						for (int num469 = 0; num469 < 5; num469++)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
						}
						return;
					}
					for (int num470 = 0; num470 < 10; num470++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 134 + this.type - 117, this.scale);
					return;
				}
				else if (this.type == 217 || this.type == 218 || this.type == 219)
				{
					if (this.life > 0)
					{
						int num471 = 0;
						while ((double)num471 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 18, (float)hitDirection, -1f, this.alpha, this.color, this.scale);
							num471++;
						}
						return;
					}
					for (int num472 = 0; num472 < 50; num472++)
					{
						Dust.NewDust(this.position, this.width, this.height, 18, (float)hitDirection, -2f, this.alpha, this.color, this.scale);
					}
					if (this.type == 217)
					{
						Gore.NewGore(this.position, this.velocity, 292, this.scale);
						Gore.NewGore(this.position, this.velocity, 293, this.scale);
					}
					if (this.type == 218)
					{
						Gore.NewGore(this.position, this.velocity, 295, this.scale);
						Gore.NewGore(this.position, this.velocity, 296, this.scale);
					}
					if (this.type == 219)
					{
						Gore.NewGore(this.position, this.velocity, 294, this.scale);
						return;
					}
				}
				else if (this.type == 222)
				{
					if (this.life > 0)
					{
						int num473 = 0;
						while ((double)num473 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 18, (float)hitDirection, -1f, this.alpha, this.color, this.scale);
							num473++;
						}
						return;
					}
					for (int num474 = 0; num474 < 50; num474++)
					{
						Dust.NewDust(this.position, this.width, this.height, 18, (float)hitDirection, -2f, this.alpha, this.color, this.scale);
					}
					Gore.NewGore(new Vector2(this.position.X, this.position.Y - 35f), this.velocity, 303, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y - 45f), this.velocity, 304, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y), this.velocity, 305, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 306, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 10f), this.velocity, 307, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y - 10f), this.velocity, 308, this.scale);
					return;
				}
				else if (this.type == 6 || this.type == 94 || this.type == 166)
				{
					if (this.life > 0)
					{
						int num475 = 0;
						while ((double)num475 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 18, (float)hitDirection, -1f, this.alpha, this.color, this.scale);
							num475++;
						}
						return;
					}
					for (int num476 = 0; num476 < 50; num476++)
					{
						Dust.NewDust(this.position, this.width, this.height, 18, (float)hitDirection, -2f, this.alpha, this.color, this.scale);
					}
					int num477;
					if (this.type == 94)
					{
						num477 = Gore.NewGore(this.position, this.velocity, 108, this.scale);
						num477 = Gore.NewGore(this.position, this.velocity, 108, this.scale);
						num477 = Gore.NewGore(this.position, this.velocity, 109, this.scale);
						num477 = Gore.NewGore(this.position, this.velocity, 110, this.scale);
						return;
					}
					if (this.type == 166)
					{
						num477 = Gore.NewGore(this.position, this.velocity, 209, this.scale);
						num477 = Gore.NewGore(this.position, this.velocity, 210, this.scale);
						num477 = Gore.NewGore(this.position, this.velocity, 211, this.scale);
						return;
					}
					num477 = Gore.NewGore(this.position, this.velocity, 14, this.scale);
					Main.gore[num477].alpha = this.alpha;
					num477 = Gore.NewGore(this.position, this.velocity, 15, this.scale);
					Main.gore[num477].alpha = this.alpha;
					return;
				}
				else if (this.type == 101)
				{
					if (this.life > 0)
					{
						int num478 = 0;
						while ((double)num478 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 18, (float)hitDirection, -1f, this.alpha, this.color, this.scale);
							num478++;
						}
						return;
					}
					for (int num479 = 0; num479 < 50; num479++)
					{
						Dust.NewDust(this.position, this.width, this.height, 18, (float)hitDirection, -2f, this.alpha, this.color, this.scale);
					}
					Gore.NewGore(this.position, this.velocity, 110, this.scale);
					Gore.NewGore(this.position, this.velocity, 114, this.scale);
					Gore.NewGore(this.position, this.velocity, 114, this.scale);
					Gore.NewGore(this.position, this.velocity, 115, this.scale);
					return;
				}
				else if (this.type == 7 || this.type == 8 || this.type == 9)
				{
					if (this.life > 0)
					{
						int num480 = 0;
						while ((double)num480 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 18, (float)hitDirection, -1f, this.alpha, this.color, this.scale);
							num480++;
						}
						return;
					}
					for (int num481 = 0; num481 < 50; num481++)
					{
						Dust.NewDust(this.position, this.width, this.height, 18, (float)hitDirection, -2f, this.alpha, this.color, this.scale);
					}
					int num482 = Gore.NewGore(this.position, this.velocity, this.type - 7 + 18, 1f);
					Main.gore[num482].alpha = this.alpha;
					return;
				}
				else if (this.type == 98 || this.type == 99 || this.type == 100)
				{
					if (this.life > 0)
					{
						int num483 = 0;
						while ((double)num483 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 18, (float)hitDirection, -1f, this.alpha, this.color, this.scale);
							num483++;
						}
						return;
					}
					for (int num484 = 0; num484 < 50; num484++)
					{
						Dust.NewDust(this.position, this.width, this.height, 18, (float)hitDirection, -2f, this.alpha, this.color, this.scale);
					}
					int num485 = Gore.NewGore(this.position, this.velocity, 110, 1f);
					Main.gore[num485].alpha = this.alpha;
					return;
				}
				else if (this.type == 10 || this.type == 11 || this.type == 12)
				{
					if (this.life > 0)
					{
						int num486 = 0;
						while ((double)num486 < dmg / (double)this.lifeMax * 50.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num486++;
						}
						return;
					}
					for (int num487 = 0; num487 < 10; num487++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, this.type - 7 + 18, 1f);
					return;
				}
				else if (this.type == 95 || this.type == 96 || this.type == 97)
				{
					if (this.life > 0)
					{
						int num488 = 0;
						while ((double)num488 < dmg / (double)this.lifeMax * 50.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num488++;
						}
						return;
					}
					for (int num489 = 0; num489 < 10; num489++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, this.type - 95 + 111, 1f);
					return;
				}
				else if (this.type == 13 || this.type == 14 || this.type == 15)
				{
					if (this.life > 0)
					{
						int num490 = 0;
						while ((double)num490 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 18, (float)hitDirection, -1f, this.alpha, this.color, this.scale);
							num490++;
						}
						return;
					}
					for (int num491 = 0; num491 < 50; num491++)
					{
						Dust.NewDust(this.position, this.width, this.height, 18, (float)hitDirection, -2f, this.alpha, this.color, this.scale);
					}
					if (this.type == 13)
					{
						Gore.NewGore(this.position, this.velocity, 24, 1f);
						Gore.NewGore(this.position, this.velocity, 25, 1f);
						return;
					}
					if (this.type == 14)
					{
						Gore.NewGore(this.position, this.velocity, 26, 1f);
						Gore.NewGore(this.position, this.velocity, 27, 1f);
						return;
					}
					Gore.NewGore(this.position, this.velocity, 28, 1f);
					Gore.NewGore(this.position, this.velocity, 29, 1f);
					return;
				}
				else if (this.type == 17)
				{
					if (this.life > 0)
					{
						int num492 = 0;
						while ((double)num492 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num492++;
						}
						return;
					}
					for (int num493 = 0; num493 < 50; num493++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					if (this.altTexture == 0)
					{
						Gore.NewGore(this.position, this.velocity, 30, 1f);
					}
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 31, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 31, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 32, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 32, 1f);
					return;
				}
				else if (this.type == 441)
				{
					if (this.life > 0)
					{
						int num494 = 0;
						while ((double)num494 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num494++;
						}
						return;
					}
					for (int num495 = 0; num495 < 50; num495++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 768, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 769, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 770, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 771, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 771, 1f);
					return;
				}
				else if (this.type == 86)
				{
					if (this.life > 0)
					{
						int num496 = 0;
						while ((double)num496 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num496++;
						}
						return;
					}
					for (int num497 = 0; num497 < 50; num497++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 101, 1f);
					Gore.NewGore(this.position, this.velocity, 102, 1f);
					Gore.NewGore(this.position, this.velocity, 103, 1f);
					Gore.NewGore(this.position, this.velocity, 103, 1f);
					Gore.NewGore(this.position, this.velocity, 104, 1f);
					Gore.NewGore(this.position, this.velocity, 104, 1f);
					Gore.NewGore(this.position, this.velocity, 105, 1f);
					return;
				}
				else if (this.type == 155)
				{
					if (this.life > 0)
					{
						int num498 = 0;
						while ((double)num498 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num498++;
						}
						return;
					}
					for (int num499 = 0; num499 < 50; num499++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 181, 1f);
					Gore.NewGore(this.position, this.velocity, 182, 1f);
					Gore.NewGore(this.position, this.velocity, 183, 1f);
					Gore.NewGore(this.position, this.velocity, 183, 1f);
					return;
				}
				else if (this.type == 329)
				{
					if (this.life > 0)
					{
						int num500 = 0;
						while ((double)num500 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num500++;
						}
						return;
					}
					for (int num501 = 0; num501 < 50; num501++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 485, 1f);
					Gore.NewGore(this.position, this.velocity, 486, 1f);
					Gore.NewGore(this.position, this.velocity, 487, 1f);
					return;
				}
				else if (this.type == 163 || this.type == 238)
				{
					if (this.life > 0)
					{
						int num502 = 0;
						while ((double)num502 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 18, (float)hitDirection, -1f, 0, default(Color), 1f);
							num502++;
						}
						return;
					}
					for (int num503 = 0; num503 < 50; num503++)
					{
						Dust.NewDust(this.position, this.width, this.height, 18, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 205, 1f);
					Gore.NewGore(this.position, this.velocity, 206, 1f);
					Gore.NewGore(this.position, this.velocity, 206, 1f);
					Gore.NewGore(this.position, this.velocity, 206, 1f);
					Gore.NewGore(this.position, this.velocity, 206, 1f);
					return;
				}
				else if (this.type == 164 || this.type == 165)
				{
					if (this.life > 0)
					{
						int num504 = 0;
						while ((double)num504 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 18, (float)hitDirection, -1f, 0, default(Color), 1f);
							num504++;
						}
						return;
					}
					for (int num505 = 0; num505 < 50; num505++)
					{
						Dust.NewDust(this.position, this.width, this.height, 18, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 207, 1f);
					Gore.NewGore(this.position, this.velocity, 208, 1f);
					Gore.NewGore(this.position, this.velocity, 208, 1f);
					Gore.NewGore(this.position, this.velocity, 208, 1f);
					Gore.NewGore(this.position, this.velocity, 208, 1f);
					return;
				}
				else if (this.type == 239 || this.type == 240)
				{
					if (this.life > 0)
					{
						int num506 = 0;
						while ((double)num506 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num506++;
						}
						return;
					}
					for (int num507 = 0; num507 < 50; num507++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 351, 1f);
					Gore.NewGore(this.position, this.velocity, 352, 1f);
					Gore.NewGore(this.position, this.velocity, 352, 1f);
					Gore.NewGore(this.position, this.velocity, 353, 1f);
					Gore.NewGore(this.position, this.velocity, 353, 1f);
					return;
				}
				else if (this.type == 236 || this.type == 237)
				{
					if (this.life > 0)
					{
						int num508 = 0;
						while ((double)num508 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 18, (float)hitDirection, -1f, 0, default(Color), 1f);
							num508++;
						}
						return;
					}
					for (int num509 = 0; num509 < 50; num509++)
					{
						Dust.NewDust(this.position, this.width, this.height, 18, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 332, 1f);
					Gore.NewGore(this.position, this.velocity, 333, 1f);
					Gore.NewGore(this.position, this.velocity, 334, 1f);
					Gore.NewGore(this.position, this.velocity, 335, 1f);
					Gore.NewGore(this.position, this.velocity, 335, 1f);
					return;
				}
				else if (this.type == 241)
				{
					if (this.life > 0)
					{
						int num510 = 0;
						while ((double)num510 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num510++;
						}
						return;
					}
					for (int num511 = 0; num511 < 50; num511++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 354, 1f);
					Gore.NewGore(this.position, this.velocity, 355, 1f);
					return;
				}
				else if (this.type == 242)
				{
					if (this.life > 0)
					{
						int num512 = 0;
						while ((double)num512 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num512++;
						}
						return;
					}
					for (int num513 = 0; num513 < 50; num513++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 356, 1f);
					Gore.NewGore(this.position, this.velocity, 357, 1f);
					Gore.NewGore(this.position, this.velocity, 357, 1f);
					Gore.NewGore(this.position, this.velocity, 358, 1f);
					Gore.NewGore(this.position, this.velocity, 358, 1f);
					return;
				}
				else if (this.type >= 105 && this.type <= 108)
				{
					if (this.life > 0)
					{
						int num514 = 0;
						while ((double)num514 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num514++;
						}
						return;
					}
					for (int num515 = 0; num515 < 50; num515++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					if (this.type == 105 || this.type == 107)
					{
						Gore.NewGore(this.position, this.velocity, 124, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 125, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 125, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 126, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 126, 1f);
						return;
					}
					if (this.altTexture == 0 || this.type == 106)
					{
						Gore.NewGore(this.position, this.velocity, 127, 1f);
					}
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 128, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 128, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 129, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 129, 1f);
					return;
				}
				else if (this.type == 123 || this.type == 124)
				{
					if (this.life > 0)
					{
						int num516 = 0;
						while ((double)num516 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num516++;
						}
						return;
					}
					for (int num517 = 0; num517 < 50; num517++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 151, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 152, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 152, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 153, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 153, 1f);
					return;
				}
				else if (this.type == 22)
				{
					if (this.life > 0)
					{
						int num518 = 0;
						while ((double)num518 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num518++;
						}
						return;
					}
					for (int num519 = 0; num519 < 50; num519++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 73, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 74, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 74, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 75, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 75, 1f);
					return;
				}
				else if (this.type == 550)
				{
					if (this.life > 0)
					{
						int num520 = 0;
						while ((double)num520 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num520++;
						}
						return;
					}
					for (int num521 = 0; num521 < 50; num521++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 0f), this.velocity, 967, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 968, 1f);
					Gore.NewGore(new Vector2(this.position.X + 8f, this.position.Y + 20f), this.velocity, 968, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 969, 1f);
					Gore.NewGore(new Vector2(this.position.X + 8f, this.position.Y + 34f), this.velocity, 969, 1f);
					return;
				}
				else if (this.type == 368)
				{
					if (this.life > 0)
					{
						int num522 = 0;
						while ((double)num522 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num522++;
						}
						return;
					}
					for (int num523 = 0; num523 < 50; num523++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					if (this.altTexture == 0)
					{
						Gore.NewGore(this.position, this.velocity, 567, 1f);
					}
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 568, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 568, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 569, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 569, 1f);
					return;
				}
				else if (this.type == 369 || this.type == 376)
				{
					if (this.life > 0)
					{
						return;
					}
					for (int num524 = 0; num524 < 25; num524++)
					{
						int num525 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num525].velocity *= 1.4f;
						Main.dust[num525].noLight = true;
						Main.dust[num525].noGravity = true;
					}
					int num526 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
					Main.gore[num526].scale = 1f;
					Gore expr_17E8A_cp_0 = Main.gore[num526];
					expr_17E8A_cp_0.velocity.X = expr_17E8A_cp_0.velocity.X + 1f;
					Gore expr_17EAA_cp_0 = Main.gore[num526];
					expr_17EAA_cp_0.velocity.Y = expr_17EAA_cp_0.velocity.Y + 1f;
					num526 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
					Main.gore[num526].scale = 1f;
					Gore expr_17F43_cp_0 = Main.gore[num526];
					expr_17F43_cp_0.velocity.X = expr_17F43_cp_0.velocity.X - 1f;
					Gore expr_17F63_cp_0 = Main.gore[num526];
					expr_17F63_cp_0.velocity.Y = expr_17F63_cp_0.velocity.Y + 1f;
					num526 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
					Main.gore[num526].scale = 1f;
					Gore expr_17FFC_cp_0 = Main.gore[num526];
					expr_17FFC_cp_0.velocity.X = expr_17FFC_cp_0.velocity.X + 1f;
					Gore expr_1801C_cp_0 = Main.gore[num526];
					expr_1801C_cp_0.velocity.Y = expr_1801C_cp_0.velocity.Y - 1f;
					num526 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
					Main.gore[num526].scale = 1f;
					Gore expr_180B5_cp_0 = Main.gore[num526];
					expr_180B5_cp_0.velocity.X = expr_180B5_cp_0.velocity.X - 1f;
					Gore expr_180D5_cp_0 = Main.gore[num526];
					expr_180D5_cp_0.velocity.Y = expr_180D5_cp_0.velocity.Y - 1f;
					return;
				}
				else if (this.type == 227)
				{
					if (this.life > 0)
					{
						int num527 = 0;
						while ((double)num527 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num527++;
						}
						return;
					}
					for (int num528 = 0; num528 < 50; num528++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					if (this.altTexture == 0)
					{
						Gore.NewGore(this.position, this.velocity, 320, 1f);
					}
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 321, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 322, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 323, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 323, 1f);
					return;
				}
				else if (this.type == 228)
				{
					if (this.life > 0)
					{
						int num529 = 0;
						while ((double)num529 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num529++;
						}
						return;
					}
					for (int num530 = 0; num530 < 50; num530++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 324, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 325, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 326, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 327, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 327, 1f);
					return;
				}
				else if (this.type == 229)
				{
					if (this.life > 0)
					{
						int num531 = 0;
						while ((double)num531 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num531++;
						}
						return;
					}
					for (int num532 = 0; num532 < 50; num532++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					if (this.altTexture == 0)
					{
						Gore.NewGore(this.position, this.velocity, 328, 1f);
					}
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 329, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 329, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 330, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 330, 1f);
					return;
				}
				else if (this.type == 142)
				{
					if (this.life > 0)
					{
						int num533 = 0;
						while ((double)num533 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num533++;
						}
						return;
					}
					for (int num534 = 0; num534 < 50; num534++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					if (this.altTexture == 0)
					{
						Gore.NewGore(this.position, this.velocity, 157, 1f);
					}
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 158, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 158, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 159, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 159, 1f);
					return;
				}
				else if (this.type == 178)
				{
					if (this.life > 0)
					{
						int num535 = 0;
						while ((double)num535 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num535++;
						}
						return;
					}
					for (int num536 = 0; num536 < 50; num536++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					if (this.altTexture == 0)
					{
						Gore.NewGore(this.position, this.velocity, 231, 1f);
					}
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 232, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 232, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 233, 1f);
					return;
				}
				else if (this.type == 353 || this.type == 354)
				{
					if (this.life > 0)
					{
						int num537 = 0;
						while ((double)num537 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num537++;
						}
						return;
					}
					for (int num538 = 0; num538 < 50; num538++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					if (this.altTexture == 0)
					{
						Gore.NewGore(this.position, this.velocity, 544, 1f);
					}
					Gore.NewGore(this.position, this.velocity, 543, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 546, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 546, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 545, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 545, 1f);
					return;
				}
				else if (this.type == 37 || this.type == 54)
				{
					if (this.life > 0)
					{
						int num539 = 0;
						while ((double)num539 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num539++;
						}
						return;
					}
					for (int num540 = 0; num540 < 50; num540++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 58, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 59, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 59, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 60, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 60, 1f);
					return;
				}
				else if (this.type == 441)
				{
					if (this.life > 0)
					{
						int num541 = 0;
						while ((double)num541 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num541++;
						}
						return;
					}
					for (int num542 = 0; num542 < 50; num542++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 768, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 769, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 770, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 771, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 771, 1f);
					return;
				}
				else if (this.type == 160)
				{
					if (this.life > 0)
					{
						int num543 = 0;
						while ((double)num543 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 26, (float)hitDirection, -1f, 0, default(Color), 1f);
							num543++;
						}
						return;
					}
					for (int num544 = 0; num544 < 50; num544++)
					{
						Dust.NewDust(this.position, this.width, this.height, 26, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 188, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 189, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 189, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 190, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 190, 1f);
					return;
				}
				else if (this.type == 18)
				{
					if (this.life > 0)
					{
						int num545 = 0;
						while ((double)num545 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num545++;
						}
						return;
					}
					for (int num546 = 0; num546 < 50; num546++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					if (this.altTexture == 0)
					{
						Gore.NewGore(this.position, this.velocity, 33, 1f);
					}
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 34, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 34, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 35, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 35, 1f);
					return;
				}
				else if (this.type == 19)
				{
					if (this.life > 0)
					{
						int num547 = 0;
						while ((double)num547 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num547++;
						}
						return;
					}
					for (int num548 = 0; num548 < 50; num548++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 36, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 37, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 37, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 38, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 38, 1f);
					return;
				}
				else if (this.type == 38)
				{
					if (this.life > 0)
					{
						int num549 = 0;
						while ((double)num549 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num549++;
						}
						return;
					}
					for (int num550 = 0; num550 < 50; num550++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					if (this.altTexture == 0)
					{
						Gore.NewGore(this.position, this.velocity, 64, 1f);
					}
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 65, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 65, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 66, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 66, 1f);
					return;
				}
				else if (this.type == 20)
				{
					if (this.life > 0)
					{
						int num551 = 0;
						while ((double)num551 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num551++;
						}
						return;
					}
					for (int num552 = 0; num552 < 50; num552++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 39, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 40, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 40, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 41, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 41, 1f);
					return;
				}
				else if (this.type == 207)
				{
					if (this.life > 0)
					{
						int num553 = 0;
						while ((double)num553 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num553++;
						}
						return;
					}
					for (int num554 = 0; num554 < 50; num554++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					if (this.altTexture == 0)
					{
						Gore.NewGore(this.position, this.velocity, 283, 1f);
					}
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 284, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 284, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 285, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 285, 1f);
					return;
				}
				else if (this.type == 208)
				{
					if (this.life > 0)
					{
						int num555 = 0;
						while ((double)num555 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num555++;
						}
						return;
					}
					for (int num556 = 0; num556 < 50; num556++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 286, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 287, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 287, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 288, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 288, 1f);
					return;
				}
				else if (this.type == 209)
				{
					if (this.life > 0)
					{
						int num557 = 0;
						while ((double)num557 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num557++;
						}
						return;
					}
					for (int num558 = 0; num558 < 50; num558++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 289, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 290, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 290, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 291, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 291, 1f);
					return;
				}
				else if (this.type >= 212 && this.type <= 216)
				{
					if (this.life > 0)
					{
						int num559 = 0;
						while ((double)num559 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
							num559++;
						}
						return;
					}
					for (int num560 = 0; num560 < 50; num560++)
					{
						Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					if (this.type == 212)
					{
						Gore.NewGore(this.position, this.velocity, 336, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 337, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 337, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 338, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 338, 1f);
						return;
					}
					if (this.type == 213)
					{
						Gore.NewGore(this.position, this.velocity, 339, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 340, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 340, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 341, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 341, 1f);
						return;
					}
					if (this.type == 214)
					{
						Gore.NewGore(this.position, this.velocity, 342, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 343, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 343, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 344, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 344, 1f);
						return;
					}
					if (this.type == 215)
					{
						Gore.NewGore(this.position, this.velocity, 345, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 346, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 346, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 347, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 347, 1f);
						return;
					}
					if (this.type == 216)
					{
						Gore.NewGore(this.position, this.velocity, 348, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 349, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 349, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 350, 1f);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 350, 1f);
						return;
					}
				}
				else if (this.type == 220 || this.type == 221)
				{
					if (this.life > 0)
					{
						int num561 = 0;
						while ((double)num561 < dmg / (double)this.lifeMax * 50.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 151, (float)hitDirection, -1f, 0, default(Color), 0.7f);
							num561++;
						}
						return;
					}
					for (int num562 = 0; num562 < 20; num562++)
					{
						Dust.NewDust(this.position, this.width, this.height, 151, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 0.7f);
					}
					if (this.type == 221)
					{
						Gore.NewGore(this.position, this.velocity, 298, this.scale);
						Gore.NewGore(this.position, this.velocity, 299, this.scale);
						return;
					}
					Gore.NewGore(this.position, this.velocity, 297, this.scale);
					return;
				}
				else if (this.type == 21 || this.type == 31 || this.type == 294 || this.type == 295 || this.type == 296 || this.type == 32 || this.type == 44 || this.type == 45 || this.type == 77 || this.type == 110 || this.type == 167 || this.type == 197 || this.type == 201 || this.type == 202 || this.type == 203 || this.type == 287 || this.type == 291 || this.type == 292 || this.type == 293 || (this.type >= 322 && this.type <= 324) || this.type == 481 || (this.type >= 449 && this.type <= 452))
				{
					if (this.life > 0)
					{
						int num563 = 0;
						while ((double)num563 < dmg / (double)this.lifeMax * 50.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 26, (float)hitDirection, -1f, 0, default(Color), 1f);
							num563++;
						}
						return;
					}
					for (int num564 = 0; num564 < 20; num564++)
					{
						Dust.NewDust(this.position, this.width, this.height, 26, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					if (this.type == 167)
					{
						Gore.NewGore(this.position, this.velocity, 213, this.scale);
						Gore.NewGore(this.position, this.velocity, 214, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 43, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 43, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 212, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 212, this.scale);
						return;
					}
					if (this.type == 197)
					{
						Gore.NewGore(this.position, this.velocity, 257, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 43, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 43, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 212, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 212, this.scale);
						return;
					}
					if (this.type == 481)
					{
						Gore.NewGore(this.position, this.velocity, 695, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 696, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 696, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 697, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 697, this.scale);
						return;
					}
					if (this.type == 201 || this.type == 450)
					{
						Gore.NewGore(this.position, this.velocity, 265, this.scale);
						Gore.NewGore(this.position, this.velocity, 267, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 43, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 43, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 44, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 44, this.scale);
						return;
					}
					if (this.type == 202 || this.type == 451)
					{
						Gore.NewGore(this.position, this.velocity, 268, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 43, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 43, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 44, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 44, this.scale);
						return;
					}
					if (this.type == 203 || this.type == 452)
					{
						Gore.NewGore(this.position, this.velocity, 269, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 43, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 43, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 266, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 266, this.scale);
						return;
					}
					if (this.type == 322)
					{
						Gore.NewGore(this.position, this.velocity, 460, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 461, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 462, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 461, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 462, this.scale);
						return;
					}
					if (this.type == 323)
					{
						Gore.NewGore(this.position, this.velocity, 463, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 465, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 464, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 464, this.scale);
						return;
					}
					if (this.type == 324)
					{
						Gore.NewGore(this.position, this.velocity, 466, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 467, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 467, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 468, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 468, this.scale);
						return;
					}
					Gore.NewGore(this.position, this.velocity, 42, this.scale);
					if (this.type == 77)
					{
						Gore.NewGore(this.position, this.velocity, 106, this.scale);
					}
					if (this.type == 110)
					{
						Gore.NewGore(this.position, this.velocity, 130, this.scale);
					}
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 43, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 43, this.scale);
					if (this.type == 110)
					{
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 131, this.scale);
					}
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 44, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 44, this.scale);
					return;
				}
				else if (this.type == 453)
				{
					if (this.life > 0)
					{
						int num565 = 0;
						while ((double)num565 < dmg / (double)this.lifeMax * 50.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 26, (float)hitDirection, -1f, 0, default(Color), 1f);
							num565++;
						}
						return;
					}
					for (int num566 = 0; num566 < 20; num566++)
					{
						Dust.NewDust(this.position, this.width, this.height, 26, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					if (this.altTexture == 0)
					{
						Gore.NewGore(this.position, this.velocity, 638, this.scale);
					}
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 639, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 640, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 641, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 642, this.scale);
					return;
				}
				else if ((this.type >= 269 && this.type <= 276) || (this.type >= 281 && this.type <= 286))
				{
					if (this.life > 0)
					{
						int num567 = 0;
						while ((double)num567 < dmg / (double)this.lifeMax * 50.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 26, (float)hitDirection, -1f, 0, default(Color), 1f);
							num567++;
						}
						return;
					}
					for (int num568 = 0; num568 < 20; num568++)
					{
						Dust.NewDust(this.position, this.width, this.height, 26, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, 42, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 43, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 43, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 44, this.scale);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 44, this.scale);
					if (this.type == 269)
					{
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 406, this.scale);
					}
					if (this.type == 270)
					{
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 407, this.scale);
					}
					if (this.type == 271 || this.type == 272)
					{
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 408, this.scale);
					}
					if (this.type == 274)
					{
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 409, this.scale);
					}
					if (this.type == 276)
					{
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 410, this.scale);
						return;
					}
				}
				else if (this.type >= 277 && this.type <= 280)
				{
					if (this.life > 0)
					{
						int num569 = 0;
						while ((double)num569 < dmg / (double)this.lifeMax * 100.0)
						{
							int num570 = Dust.NewDust(this.position, this.width, this.height, 174, (float)hitDirection, -1f, 0, default(Color), 1f);
							Main.dust[num570].scale = 1.1f;
							Main.dust[num570].noGravity = true;
							num569++;
						}
						return;
					}
					for (int num571 = 0; num571 < 75; num571++)
					{
						int num572 = Dust.NewDust(this.position, this.width, this.height, 174, 1.5f * (float)hitDirection, -0.5f, 0, default(Color), 1f);
						Main.dust[num572].velocity *= 2f;
						Main.dust[num572].scale = 1.4f;
						Main.dust[num572].noGravity = true;
					}
					return;
				}
				else if (this.type == 341)
				{
					int num573 = 196;
					if (this.life > 0)
					{
						int num574 = 0;
						while ((double)num574 < dmg / (double)this.lifeMax * 50.0)
						{
							Dust.NewDust(this.position, this.width, this.height, num573, 0f, 0f, 0, default(Color), 1f);
							num574++;
						}
						return;
					}
					for (int num575 = 0; num575 < 20; num575++)
					{
						Dust.NewDust(this.position, this.width, this.height, num573, 0f, 0f, 0, default(Color), 1f);
					}
					int num576 = Gore.NewGore(new Vector2(this.position.X, this.position.Y - 10f), new Vector2((float)hitDirection, 0f), 61, this.scale);
					Main.gore[num576].velocity *= 0.3f;
					num576 = Gore.NewGore(new Vector2(this.position.X, this.position.Y + (float)(this.height / 2) - 10f), new Vector2((float)hitDirection, 0f), 62, this.scale);
					Main.gore[num576].velocity *= 0.3f;
					num576 = Gore.NewGore(new Vector2(this.position.X, this.position.Y + (float)this.height - 10f), new Vector2((float)hitDirection, 0f), 63, this.scale);
					Main.gore[num576].velocity *= 0.3f;
					return;
				}
				else if (this.type == 85)
				{
					int num577 = 7;
					if (this.ai[3] == 2f)
					{
						num577 = 10;
					}
					if (this.ai[3] == 3f)
					{
						num577 = 37;
					}
					if (this.life > 0)
					{
						int num578 = 0;
						while ((double)num578 < dmg / (double)this.lifeMax * 50.0)
						{
							Dust.NewDust(this.position, this.width, this.height, num577, 0f, 0f, 0, default(Color), 1f);
							num578++;
						}
						return;
					}
					for (int num579 = 0; num579 < 20; num579++)
					{
						Dust.NewDust(this.position, this.width, this.height, num577, 0f, 0f, 0, default(Color), 1f);
					}
					int num580 = Gore.NewGore(new Vector2(this.position.X, this.position.Y - 10f), new Vector2((float)hitDirection, 0f), 61, this.scale);
					Main.gore[num580].velocity *= 0.3f;
					num580 = Gore.NewGore(new Vector2(this.position.X, this.position.Y + (float)(this.height / 2) - 10f), new Vector2((float)hitDirection, 0f), 62, this.scale);
					Main.gore[num580].velocity *= 0.3f;
					num580 = Gore.NewGore(new Vector2(this.position.X, this.position.Y + (float)this.height - 10f), new Vector2((float)hitDirection, 0f), 63, this.scale);
					Main.gore[num580].velocity *= 0.3f;
					return;
				}
				else if (this.type == 473 || this.type == 474 || this.type == 475 || this.type == 476)
				{
					int num581 = 31;
					if (this.life > 0)
					{
						int num582 = 0;
						while ((double)num582 < dmg / (double)this.lifeMax * 50.0)
						{
							Dust.NewDust(this.position, this.width, this.height, num581, 0f, 0f, 0, default(Color), 1f);
							num582++;
						}
						return;
					}
					for (int num583 = 0; num583 < 20; num583++)
					{
						Dust.NewDust(this.position, this.width, this.height, num581, 0f, 0f, 0, default(Color), 1f);
					}
					int num584 = Gore.NewGore(base.Center, new Vector2((float)hitDirection, 0f), 61, this.scale);
					Main.gore[num584].velocity *= 0.3f;
					num584 = Gore.NewGore(base.Center, new Vector2((float)hitDirection, 0f), 62, this.scale);
					Main.gore[num584].velocity *= 0.3f;
					num584 = Gore.NewGore(base.Center, new Vector2((float)hitDirection, 0f), 63, this.scale);
					Main.gore[num584].velocity *= 0.3f;
					return;
				}
				else if (this.type == 169)
				{
					if (this.life > 0)
					{
						int num585 = 0;
						while ((double)num585 < dmg / (double)this.lifeMax * 50.0)
						{
							int num586 = Dust.NewDust(this.position, this.width, this.height, 92, 0f, 0f, 0, default(Color), 1.5f);
							Main.dust[num586].velocity *= 1.5f;
							Main.dust[num586].noGravity = true;
							num585++;
						}
						return;
					}
					for (int num587 = 0; num587 < 100; num587++)
					{
						int num588 = Dust.NewDust(this.position, this.width, this.height, 92, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num588].scale = 1.5f;
						Main.dust[num588].velocity *= 2f;
						Main.dust[num588].noGravity = true;
					}
					return;
				}
				else if (this.type == 170 || this.type == 180)
				{
					if (this.life > 0)
					{
						int num589 = 0;
						while ((double)num589 < dmg / (double)this.lifeMax * 50.0)
						{
							int num590 = Dust.NewDust(this.position, this.width, this.height, 54, 0f, 0f, 0, default(Color), 1.5f);
							Main.dust[num590].velocity *= 1.5f;
							Main.dust[num590].noGravity = true;
							num589++;
						}
						return;
					}
					for (int num591 = 0; num591 < 10; num591++)
					{
						int num592 = Dust.NewDust(this.position, this.width, this.height, 54, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num592].velocity *= 2f;
						Main.dust[num592].noGravity = true;
					}
					for (int num593 = 0; num593 < 4; num593++)
					{
						int num594 = Gore.NewGore(new Vector2(this.position.X, this.position.Y + (float)(this.height / 2) - 10f), new Vector2((float)hitDirection, 0f), 99, this.scale);
						Main.gore[num594].velocity *= 0.3f;
					}
					return;
				}
				else if (this.type == 171)
				{
					if (this.life > 0)
					{
						int num595 = 0;
						while ((double)num595 < dmg / (double)this.lifeMax * 50.0)
						{
							int num596 = Dust.NewDust(this.position, this.width, this.height, 16, 0f, 0f, 0, default(Color), 1.5f);
							Main.dust[num596].velocity *= 1.5f;
							Main.dust[num596].noGravity = true;
							num595++;
						}
						return;
					}
					for (int num597 = 0; num597 < 10; num597++)
					{
						int num598 = Dust.NewDust(this.position, this.width, this.height, 16, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num598].velocity *= 2f;
						Main.dust[num598].noGravity = true;
					}
					for (int num599 = 0; num599 < 4; num599++)
					{
						int num600 = 11 + num599;
						if (num600 > 13)
						{
							num600 = Main.rand.Next(11, 14);
						}
						int num601 = Gore.NewGore(new Vector2(this.position.X, this.position.Y + (float)(this.height / 2) - 10f), new Vector2((float)hitDirection, 0f), num600, this.scale);
						Main.gore[num601].velocity *= 0.3f;
					}
					return;
				}
				else if (this.type == 290)
				{
					if (this.life <= 0)
					{
						for (int num602 = 0; num602 < 10; num602++)
						{
							int num603 = Dust.NewDust(this.position, this.width, this.height, 16, 0f, 0f, 0, default(Color), 1.5f);
							Main.dust[num603].velocity *= 2f;
							Main.dust[num603].noGravity = true;
						}
						int num604 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(11, 14), this.scale);
						Main.gore[num604].velocity *= 0.5f;
						num604 = Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), default(Vector2), Main.rand.Next(11, 14), this.scale);
						Main.gore[num604].velocity *= 0.5f;
						num604 = Gore.NewGore(new Vector2(this.position.X, this.position.Y + 40f), default(Vector2), Main.rand.Next(11, 14), this.scale);
						Main.gore[num604].velocity *= 0.5f;
						return;
					}
				}
				else if (this.type >= 87 && this.type <= 92)
				{
					if (this.life > 0)
					{
						int num605 = 0;
						while ((double)num605 < dmg / (double)this.lifeMax * 50.0)
						{
							int num606 = Dust.NewDust(this.position, this.width, this.height, 16, 0f, 0f, 0, default(Color), 1.5f);
							Main.dust[num606].velocity *= 1.5f;
							Main.dust[num606].noGravity = true;
							num605++;
						}
						return;
					}
					for (int num607 = 0; num607 < 10; num607++)
					{
						int num608 = Dust.NewDust(this.position, this.width, this.height, 16, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num608].velocity *= 2f;
						Main.dust[num608].noGravity = true;
					}
					int num609 = Main.rand.Next(1, 4);
					for (int num610 = 0; num610 < num609; num610++)
					{
						int num611 = Gore.NewGore(new Vector2(this.position.X, this.position.Y + (float)(this.height / 2) - 10f), new Vector2((float)hitDirection, 0f), Main.rand.Next(11, 14), this.scale);
						Main.gore[num611].velocity *= 0.8f;
					}
					return;
				}
				else if (this.type == 78 || this.type == 79 || this.type == 80)
				{
					if (this.life > 0)
					{
						int num612 = 0;
						while ((double)num612 < dmg / (double)this.lifeMax * 50.0)
						{
							int num613 = Dust.NewDust(this.position, this.width, this.height, 31, 0f, 0f, 0, default(Color), 1.5f);
							Main.dust[num613].velocity *= 2f;
							Main.dust[num613].noGravity = true;
							num612++;
						}
						return;
					}
					for (int num614 = 0; num614 < 20; num614++)
					{
						int num615 = Dust.NewDust(this.position, this.width, this.height, 31, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num615].velocity *= 2f;
						Main.dust[num615].noGravity = true;
					}
					int num616 = Gore.NewGore(new Vector2(this.position.X, this.position.Y - 10f), new Vector2((float)hitDirection, 0f), 61, this.scale);
					Main.gore[num616].velocity *= 0.3f;
					num616 = Gore.NewGore(new Vector2(this.position.X, this.position.Y + (float)(this.height / 2) - 10f), new Vector2((float)hitDirection, 0f), 62, this.scale);
					Main.gore[num616].velocity *= 0.3f;
					num616 = Gore.NewGore(new Vector2(this.position.X, this.position.Y + (float)this.height - 10f), new Vector2((float)hitDirection, 0f), 63, this.scale);
					Main.gore[num616].velocity *= 0.3f;
					return;
				}
				else if (this.type == 82 || this.type == 158 || this.type == 159 || this.type == 250 || this.type == 253)
				{
					if (this.life > 0)
					{
						int num617 = 0;
						while ((double)num617 < dmg / (double)this.lifeMax * 50.0)
						{
							int num618 = Dust.NewDust(this.position, this.width, this.height, 54, 0f, 0f, 50, default(Color), 1.5f);
							Main.dust[num618].velocity *= 2f;
							Main.dust[num618].noGravity = true;
							num617++;
						}
						return;
					}
					for (int num619 = 0; num619 < 20; num619++)
					{
						int num620 = Dust.NewDust(this.position, this.width, this.height, 54, 0f, 0f, 50, default(Color), 1.5f);
						Main.dust[num620].velocity *= 2f;
						Main.dust[num620].noGravity = true;
					}
					int num621 = Gore.NewGore(new Vector2(this.position.X, this.position.Y - 10f), new Vector2((float)hitDirection, 0f), 99, this.scale);
					Main.gore[num621].velocity *= 0.3f;
					num621 = Gore.NewGore(new Vector2(this.position.X, this.position.Y + (float)(this.height / 2) - 15f), new Vector2((float)hitDirection, 0f), 99, this.scale);
					Main.gore[num621].velocity *= 0.3f;
					num621 = Gore.NewGore(new Vector2(this.position.X, this.position.Y + (float)this.height - 20f), new Vector2((float)hitDirection, 0f), 99, this.scale);
					Main.gore[num621].velocity *= 0.3f;
					return;
				}
				else if (this.type == 316 || this.type == 330)
				{
					if (this.life > 0)
					{
						int num622 = 0;
						while ((double)num622 < dmg / (double)this.lifeMax * 100.0)
						{
							int num623 = Dust.NewDust(this.position, this.width, this.height, 192, (float)hitDirection, -1f, 100, new Color(100, 100, 100, 100), 1f);
							Main.dust[num623].noGravity = true;
							num622++;
						}
						return;
					}
					for (int num624 = 0; num624 < 50; num624++)
					{
						int num625 = Dust.NewDust(this.position, this.width, this.height, 192, (float)(2 * hitDirection), -2f, 100, new Color(100, 100, 100, 100), 1f);
						Main.dust[num625].noGravity = true;
					}
					return;
				}
				else if (this.type == 315)
				{
					if (this.life > 0)
					{
						int num626 = 0;
						while ((double)num626 < dmg / (double)this.lifeMax * 50.0)
						{
							int num627 = Dust.NewDust(this.position, this.width, this.height, 54, 0f, 0f, 50, default(Color), 1.5f);
							Main.dust[num627].velocity *= 2f;
							Main.dust[num627].noGravity = true;
							num626++;
						}
						return;
					}
					for (int num628 = 0; num628 < 20; num628++)
					{
						int num629 = Dust.NewDust(this.position, this.width, this.height, 54, 0f, 0f, 50, default(Color), 1.5f);
						Main.dust[num629].velocity *= 2f;
						Main.dust[num629].noGravity = true;
					}
					int num630 = Gore.NewGore(new Vector2(this.position.X, this.position.Y - 10f), new Vector2((float)hitDirection, 0f), 99, this.scale);
					Main.gore[num630].velocity *= 0.3f;
					num630 = Gore.NewGore(new Vector2(this.position.X, this.position.Y + (float)(this.height / 2) - 15f), new Vector2((float)hitDirection, 0f), 99, this.scale);
					Main.gore[num630].velocity *= 0.3f;
					num630 = Gore.NewGore(new Vector2(this.position.X, this.position.Y + (float)this.height - 20f), new Vector2((float)hitDirection, 0f), 99, this.scale);
					Main.gore[num630].velocity *= 0.3f;
					num630 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2((float)hitDirection, 0f), 446, this.scale);
					Main.gore[num630].velocity *= 0.1f;
					return;
				}
				else if (this.type == 254 || this.type == 255 || this.type == 256 || this.type == 257 || this.type == 258 || this.type == 259 || this.type == 260 || this.type == 261)
				{
					if (this.life > 0)
					{
						int num631 = 0;
						while ((double)num631 < dmg / (double)this.lifeMax * 50.0)
						{
							int num632 = Dust.NewDust(this.position, this.width, this.height, 165, 0f, 0f, 50, default(Color), 1.5f);
							Main.dust[num632].velocity *= 2f;
							Main.dust[num632].noGravity = true;
							num631++;
						}
						return;
					}
					for (int num633 = 0; num633 < 20; num633++)
					{
						int num634 = Dust.NewDust(this.position, this.width, this.height, 165, 0f, 0f, 50, default(Color), 1.5f);
						Main.dust[num634].velocity *= 2f;
						Main.dust[num634].noGravity = true;
					}
					if (this.type != 261)
					{
						int num635 = Gore.NewGore(new Vector2(this.position.X, this.position.Y - 10f), new Vector2((float)hitDirection, 0f), 375, this.scale);
						Main.gore[num635].velocity *= 0.3f;
						num635 = Gore.NewGore(new Vector2(this.position.X, this.position.Y + (float)(this.height / 2) - 15f), new Vector2((float)hitDirection, 0f), 376, this.scale);
						Main.gore[num635].velocity *= 0.3f;
						num635 = Gore.NewGore(new Vector2(this.position.X, this.position.Y + (float)this.height - 20f), new Vector2((float)hitDirection, 0f), 377, this.scale);
						Main.gore[num635].velocity *= 0.3f;
						return;
					}
				}
				else if (this.type == 140)
				{
					if (this.life <= 0)
					{
						for (int num636 = 0; num636 < 20; num636++)
						{
							int num637 = Dust.NewDust(this.position, this.width, this.height, 54, 0f, 0f, 50, default(Color), 1.5f);
							Main.dust[num637].velocity *= 2f;
							Main.dust[num637].noGravity = true;
						}
						int num638 = Gore.NewGore(new Vector2(this.position.X, this.position.Y - 10f), new Vector2((float)hitDirection, 0f), 99, this.scale);
						Main.gore[num638].velocity *= 0.3f;
						num638 = Gore.NewGore(new Vector2(this.position.X, this.position.Y + (float)(this.height / 2) - 15f), new Vector2((float)hitDirection, 0f), 99, this.scale);
						Main.gore[num638].velocity *= 0.3f;
						num638 = Gore.NewGore(new Vector2(this.position.X, this.position.Y + (float)this.height - 20f), new Vector2((float)hitDirection, 0f), 99, this.scale);
						Main.gore[num638].velocity *= 0.3f;
						return;
					}
				}
				else if (this.type == 39 || this.type == 40 || this.type == 41)
				{
					if (this.life > 0)
					{
						int num639 = 0;
						while ((double)num639 < dmg / (double)this.lifeMax * 50.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 26, (float)hitDirection, -1f, 0, default(Color), 1f);
							num639++;
						}
						return;
					}
					for (int num640 = 0; num640 < 20; num640++)
					{
						Dust.NewDust(this.position, this.width, this.height, 26, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					Gore.NewGore(this.position, this.velocity, this.type - 39 + 67, 1f);
					return;
				}
				else if (this.type == 34)
				{
					if (this.life > 0)
					{
						int num641 = 0;
						while ((double)num641 < dmg / (double)this.lifeMax * 30.0)
						{
							int num642 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 15, -this.velocity.X * 0.2f, -this.velocity.Y * 0.2f, 100, default(Color), 1.8f);
							Main.dust[num642].noLight = true;
							Main.dust[num642].noGravity = true;
							Main.dust[num642].velocity *= 1.3f;
							num642 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 26, -this.velocity.X * 0.2f, -this.velocity.Y * 0.2f, 0, default(Color), 0.9f);
							Main.dust[num642].noLight = true;
							Main.dust[num642].velocity *= 1.3f;
							num641++;
						}
						return;
					}
					for (int num643 = 0; num643 < 15; num643++)
					{
						int num644 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 15, -this.velocity.X * 0.2f, -this.velocity.Y * 0.2f, 100, default(Color), 1.8f);
						Main.dust[num644].noLight = true;
						Main.dust[num644].noGravity = true;
						Main.dust[num644].velocity *= 1.3f;
						num644 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 26, -this.velocity.X * 0.2f, -this.velocity.Y * 0.2f, 0, default(Color), 0.9f);
						Main.dust[num644].noLight = true;
						Main.dust[num644].velocity *= 1.3f;
					}
					return;
				}
				else if (this.type == 289)
				{
					if (this.life > 0)
					{
						int num645 = 0;
						while ((double)num645 < dmg / (double)this.lifeMax * 30.0)
						{
							int num646 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 181, -this.velocity.X * 0.2f, -this.velocity.Y * 0.2f, 100, default(Color), 1.8f);
							Main.dust[num646].noLight = true;
							Main.dust[num646].noGravity = true;
							Main.dust[num646].velocity *= 1.3f;
							num645++;
						}
						return;
					}
					for (int num647 = 0; num647 < 50; num647++)
					{
						int num648 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 181, -this.velocity.X * 0.2f, -this.velocity.Y * 0.2f, 100, default(Color), 1.8f);
						Main.dust[num648].noLight = true;
						Main.dust[num648].noGravity = true;
						Main.dust[num648].velocity *= 1.3f;
					}
					return;
				}
				else if (this.type == 35 || this.type == 36)
				{
					if (this.life > 0)
					{
						int num649 = 0;
						while ((double)num649 < dmg / (double)this.lifeMax * 100.0)
						{
							Dust.NewDust(this.position, this.width, this.height, 26, (float)hitDirection, -1f, 0, default(Color), 1f);
							num649++;
						}
						return;
					}
					for (int num650 = 0; num650 < 150; num650++)
					{
						Dust.NewDust(this.position, this.width, this.height, 26, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
					}
					if (this.type == 35)
					{
						Gore.NewGore(this.position, this.velocity, 54, 1f);
						Gore.NewGore(this.position, this.velocity, 55, 1f);
						return;
					}
					Gore.NewGore(this.position, this.velocity, 56, 1f);
					Gore.NewGore(this.position, this.velocity, 57, 1f);
					Gore.NewGore(this.position, this.velocity, 57, 1f);
					Gore.NewGore(this.position, this.velocity, 57, 1f);
					return;
				}
				else if (this.type == 139)
				{
					if (this.life <= 0)
					{
						for (int num651 = 0; num651 < 10; num651++)
						{
							int num652 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num652].velocity *= 1.4f;
						}
						for (int num653 = 0; num653 < 5; num653++)
						{
							int num654 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num654].noGravity = true;
							Main.dust[num654].velocity *= 5f;
							num654 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num654].velocity *= 3f;
						}
						int num655 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Main.gore[num655].velocity *= 0.4f;
						Gore expr_1DD75_cp_0 = Main.gore[num655];
						expr_1DD75_cp_0.velocity.X = expr_1DD75_cp_0.velocity.X + 1f;
						Gore expr_1DD95_cp_0 = Main.gore[num655];
						expr_1DD95_cp_0.velocity.Y = expr_1DD95_cp_0.velocity.Y + 1f;
						num655 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Main.gore[num655].velocity *= 0.4f;
						Gore expr_1DE19_cp_0 = Main.gore[num655];
						expr_1DE19_cp_0.velocity.X = expr_1DE19_cp_0.velocity.X - 1f;
						Gore expr_1DE39_cp_0 = Main.gore[num655];
						expr_1DE39_cp_0.velocity.Y = expr_1DE39_cp_0.velocity.Y + 1f;
						num655 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Main.gore[num655].velocity *= 0.4f;
						Gore expr_1DEBD_cp_0 = Main.gore[num655];
						expr_1DEBD_cp_0.velocity.X = expr_1DEBD_cp_0.velocity.X + 1f;
						Gore expr_1DEDD_cp_0 = Main.gore[num655];
						expr_1DEDD_cp_0.velocity.Y = expr_1DEDD_cp_0.velocity.Y - 1f;
						num655 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Main.gore[num655].velocity *= 0.4f;
						Gore expr_1DF61_cp_0 = Main.gore[num655];
						expr_1DF61_cp_0.velocity.X = expr_1DF61_cp_0.velocity.X - 1f;
						Gore expr_1DF81_cp_0 = Main.gore[num655];
						expr_1DF81_cp_0.velocity.Y = expr_1DF81_cp_0.velocity.Y - 1f;
						return;
					}
				}
				else if (this.type == 467)
				{
					if (this.life <= 0)
					{
						for (int num656 = 0; num656 < 7; num656++)
						{
							int num657 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num657].velocity *= 1.4f;
						}
						for (int num658 = 0; num658 < 3; num658++)
						{
							int num659 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num659].noGravity = true;
							Main.dust[num659].velocity *= 5f;
							num659 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num659].velocity *= 3f;
						}
						Gore.NewGore(this.position, this.velocity, 660, 1f);
						Gore.NewGore(this.position, this.velocity, 660, 1f);
						return;
					}
				}
				else if (this.type >= 134 && this.type <= 136)
				{
					if (this.type == 135 && this.life > 0 && Main.netMode != 1 && this.ai[2] == 0f && Main.rand.Next(25) == 0)
					{
						this.ai[2] = 1f;
						int num660 = NPC.NewNPC((int)(this.position.X + (float)(this.width / 2)), (int)(this.position.Y + (float)this.height), 139, 0, 0f, 0f, 0f, 0f, 255);
						if (Main.netMode == 2 && num660 < 200)
						{
							NetMessage.SendData(23, -1, -1, "", num660, 0f, 0f, 0f, 0, 0, 0);
						}
						this.netUpdate = true;
					}
					if (this.life <= 0)
					{
						Gore.NewGore(this.position, this.velocity, 156, 1f);
						if (Main.rand.Next(2) == 0)
						{
							for (int num661 = 0; num661 < 10; num661++)
							{
								int num662 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
								Main.dust[num662].velocity *= 1.4f;
							}
							for (int num663 = 0; num663 < 5; num663++)
							{
								int num664 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
								Main.dust[num664].noGravity = true;
								Main.dust[num664].velocity *= 5f;
								num664 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
								Main.dust[num664].velocity *= 3f;
							}
							int num665 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
							Main.gore[num665].velocity *= 0.4f;
							Gore expr_1E4C9_cp_0 = Main.gore[num665];
							expr_1E4C9_cp_0.velocity.X = expr_1E4C9_cp_0.velocity.X + 1f;
							Gore expr_1E4E9_cp_0 = Main.gore[num665];
							expr_1E4E9_cp_0.velocity.Y = expr_1E4E9_cp_0.velocity.Y + 1f;
							num665 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
							Main.gore[num665].velocity *= 0.4f;
							Gore expr_1E56D_cp_0 = Main.gore[num665];
							expr_1E56D_cp_0.velocity.X = expr_1E56D_cp_0.velocity.X - 1f;
							Gore expr_1E58D_cp_0 = Main.gore[num665];
							expr_1E58D_cp_0.velocity.Y = expr_1E58D_cp_0.velocity.Y + 1f;
							num665 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
							Main.gore[num665].velocity *= 0.4f;
							Gore expr_1E611_cp_0 = Main.gore[num665];
							expr_1E611_cp_0.velocity.X = expr_1E611_cp_0.velocity.X + 1f;
							Gore expr_1E631_cp_0 = Main.gore[num665];
							expr_1E631_cp_0.velocity.Y = expr_1E631_cp_0.velocity.Y - 1f;
							num665 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
							Main.gore[num665].velocity *= 0.4f;
							Gore expr_1E6B5_cp_0 = Main.gore[num665];
							expr_1E6B5_cp_0.velocity.X = expr_1E6B5_cp_0.velocity.X - 1f;
							Gore expr_1E6D5_cp_0 = Main.gore[num665];
							expr_1E6D5_cp_0.velocity.Y = expr_1E6D5_cp_0.velocity.Y - 1f;
							return;
						}
					}
				}
				else if (this.type == 347)
				{
					if (this.life <= 0)
					{
						Gore.NewGore(this.position, this.velocity, 524, 1f);
						Gore.NewGore(this.position, this.velocity, 525, 1f);
						Gore.NewGore(this.position, this.velocity, 526, 1f);
						Gore.NewGore(this.position, this.velocity, 527, 1f);
						for (int num666 = 0; num666 < 7; num666++)
						{
							int num667 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num667].velocity *= 1.4f;
						}
						for (int num668 = 0; num668 < 4; num668++)
						{
							int num669 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num669].noGravity = true;
							Main.dust[num669].velocity *= 5f;
							num669 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num669].velocity *= 3f;
						}
						int num670 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Main.gore[num670].velocity *= 0.4f;
						Gore expr_1E97D_cp_0 = Main.gore[num670];
						expr_1E97D_cp_0.velocity.X = expr_1E97D_cp_0.velocity.X + 1f;
						Gore expr_1E99D_cp_0 = Main.gore[num670];
						expr_1E99D_cp_0.velocity.Y = expr_1E99D_cp_0.velocity.Y + 1f;
						num670 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Main.gore[num670].velocity *= 0.4f;
						Gore expr_1EA21_cp_0 = Main.gore[num670];
						expr_1EA21_cp_0.velocity.X = expr_1EA21_cp_0.velocity.X - 1f;
						Gore expr_1EA41_cp_0 = Main.gore[num670];
						expr_1EA41_cp_0.velocity.Y = expr_1EA41_cp_0.velocity.Y - 1f;
						return;
					}
				}
				else if (this.type == 346)
				{
					if (this.life <= 0)
					{
						Gore.NewGore(this.position, this.velocity, 518, 1f);
						Gore.NewGore(this.position, this.velocity, 519, 1f);
						Gore.NewGore(this.position, this.velocity, 520, 1f);
						Gore.NewGore(this.position, this.velocity, 521, 1f);
						Gore.NewGore(this.position, this.velocity, 522, 1f);
						Gore.NewGore(this.position, this.velocity, 523, 1f);
						for (int num671 = 0; num671 < 10; num671++)
						{
							int num672 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num672].velocity *= 1.4f;
						}
						for (int num673 = 0; num673 < 5; num673++)
						{
							int num674 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num674].noGravity = true;
							Main.dust[num674].velocity *= 5f;
							num674 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num674].velocity *= 3f;
						}
						int num675 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Main.gore[num675].velocity *= 0.4f;
						Gore expr_1ED22_cp_0 = Main.gore[num675];
						expr_1ED22_cp_0.velocity.X = expr_1ED22_cp_0.velocity.X + 1f;
						Gore expr_1ED42_cp_0 = Main.gore[num675];
						expr_1ED42_cp_0.velocity.Y = expr_1ED42_cp_0.velocity.Y + 1f;
						num675 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Main.gore[num675].velocity *= 0.4f;
						Gore expr_1EDC6_cp_0 = Main.gore[num675];
						expr_1EDC6_cp_0.velocity.X = expr_1EDC6_cp_0.velocity.X - 1f;
						Gore expr_1EDE6_cp_0 = Main.gore[num675];
						expr_1EDE6_cp_0.velocity.Y = expr_1EDE6_cp_0.velocity.Y + 1f;
						num675 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Main.gore[num675].velocity *= 0.4f;
						Gore expr_1EE6A_cp_0 = Main.gore[num675];
						expr_1EE6A_cp_0.velocity.X = expr_1EE6A_cp_0.velocity.X + 1f;
						Gore expr_1EE8A_cp_0 = Main.gore[num675];
						expr_1EE8A_cp_0.velocity.Y = expr_1EE8A_cp_0.velocity.Y - 1f;
						num675 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Main.gore[num675].velocity *= 0.4f;
						Gore expr_1EF0E_cp_0 = Main.gore[num675];
						expr_1EF0E_cp_0.velocity.X = expr_1EF0E_cp_0.velocity.X - 1f;
						Gore expr_1EF2E_cp_0 = Main.gore[num675];
						expr_1EF2E_cp_0.velocity.Y = expr_1EF2E_cp_0.velocity.Y - 1f;
						return;
					}
				}
				else if (this.type == 127)
				{
					if (this.life <= 0)
					{
						Gore.NewGore(this.position, this.velocity, 149, 1f);
						Gore.NewGore(this.position, this.velocity, 150, 1f);
						for (int num676 = 0; num676 < 10; num676++)
						{
							int num677 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num677].velocity *= 1.4f;
						}
						for (int num678 = 0; num678 < 5; num678++)
						{
							int num679 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num679].noGravity = true;
							Main.dust[num679].velocity *= 5f;
							num679 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num679].velocity *= 3f;
						}
						int num680 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Main.gore[num680].velocity *= 0.4f;
						Gore expr_1F19C_cp_0 = Main.gore[num680];
						expr_1F19C_cp_0.velocity.X = expr_1F19C_cp_0.velocity.X + 1f;
						Gore expr_1F1BC_cp_0 = Main.gore[num680];
						expr_1F1BC_cp_0.velocity.Y = expr_1F1BC_cp_0.velocity.Y + 1f;
						num680 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Main.gore[num680].velocity *= 0.4f;
						Gore expr_1F240_cp_0 = Main.gore[num680];
						expr_1F240_cp_0.velocity.X = expr_1F240_cp_0.velocity.X - 1f;
						Gore expr_1F260_cp_0 = Main.gore[num680];
						expr_1F260_cp_0.velocity.Y = expr_1F260_cp_0.velocity.Y + 1f;
						num680 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Main.gore[num680].velocity *= 0.4f;
						Gore expr_1F2E4_cp_0 = Main.gore[num680];
						expr_1F2E4_cp_0.velocity.X = expr_1F2E4_cp_0.velocity.X + 1f;
						Gore expr_1F304_cp_0 = Main.gore[num680];
						expr_1F304_cp_0.velocity.Y = expr_1F304_cp_0.velocity.Y - 1f;
						num680 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Main.gore[num680].velocity *= 0.4f;
						Gore expr_1F388_cp_0 = Main.gore[num680];
						expr_1F388_cp_0.velocity.X = expr_1F388_cp_0.velocity.X - 1f;
						Gore expr_1F3A8_cp_0 = Main.gore[num680];
						expr_1F3A8_cp_0.velocity.Y = expr_1F3A8_cp_0.velocity.Y - 1f;
						return;
					}
				}
				else if (this.type >= 128 && this.type <= 131)
				{
					if (this.life <= 0)
					{
						Gore.NewGore(this.position, this.velocity, 147, 1f);
						Gore.NewGore(this.position, this.velocity, 148, 1f);
						for (int num681 = 0; num681 < 10; num681++)
						{
							int num682 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num682].velocity *= 1.4f;
						}
						for (int num683 = 0; num683 < 5; num683++)
						{
							int num684 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num684].noGravity = true;
							Main.dust[num684].velocity *= 5f;
							num684 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num684].velocity *= 3f;
						}
						int num685 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Main.gore[num685].velocity *= 0.4f;
						Gore expr_1F629_cp_0 = Main.gore[num685];
						expr_1F629_cp_0.velocity.X = expr_1F629_cp_0.velocity.X + 1f;
						Gore expr_1F649_cp_0 = Main.gore[num685];
						expr_1F649_cp_0.velocity.Y = expr_1F649_cp_0.velocity.Y + 1f;
						num685 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Main.gore[num685].velocity *= 0.4f;
						Gore expr_1F6CD_cp_0 = Main.gore[num685];
						expr_1F6CD_cp_0.velocity.X = expr_1F6CD_cp_0.velocity.X - 1f;
						Gore expr_1F6ED_cp_0 = Main.gore[num685];
						expr_1F6ED_cp_0.velocity.Y = expr_1F6ED_cp_0.velocity.Y + 1f;
						num685 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Main.gore[num685].velocity *= 0.4f;
						Gore expr_1F771_cp_0 = Main.gore[num685];
						expr_1F771_cp_0.velocity.X = expr_1F771_cp_0.velocity.X + 1f;
						Gore expr_1F791_cp_0 = Main.gore[num685];
						expr_1F791_cp_0.velocity.Y = expr_1F791_cp_0.velocity.Y - 1f;
						num685 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), default(Vector2), Main.rand.Next(61, 64), 1f);
						Main.gore[num685].velocity *= 0.4f;
						Gore expr_1F815_cp_0 = Main.gore[num685];
						expr_1F815_cp_0.velocity.X = expr_1F815_cp_0.velocity.X - 1f;
						Gore expr_1F835_cp_0 = Main.gore[num685];
						expr_1F835_cp_0.velocity.Y = expr_1F835_cp_0.velocity.Y - 1f;
						return;
					}
				}
				else if (this.type == 23)
				{
					if (this.life > 0)
					{
						int num686 = 0;
						while ((double)num686 < dmg / (double)this.lifeMax * 100.0)
						{
							int num687 = 25;
							if (Main.rand.Next(2) == 0)
							{
								num687 = 6;
							}
							Dust.NewDust(this.position, this.width, this.height, num687, (float)hitDirection, -1f, 0, default(Color), 1f);
							int num688 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 2f);
							Main.dust[num688].noGravity = true;
							num686++;
						}
						return;
					}
					for (int num689 = 0; num689 < 50; num689++)
					{
						int num690 = 25;
						if (Main.rand.Next(2) == 0)
						{
							num690 = 6;
						}
						Dust.NewDust(this.position, this.width, this.height, num690, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					}
					for (int num691 = 0; num691 < 50; num691++)
					{
						int num692 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, default(Color), 2.5f);
						Main.dust[num692].velocity *= 6f;
						Main.dust[num692].noGravity = true;
					}
					return;
				}
				else if (this.type == 24)
				{
					if (this.life > 0)
					{
						int num693 = 0;
						while ((double)num693 < dmg / (double)this.lifeMax * 100.0)
						{
							int num694 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, this.velocity.X, this.velocity.Y, 100, default(Color), 2.5f);
							Main.dust[num694].noGravity = true;
							num693++;
						}
						return;
					}
					for (int num695 = 0; num695 < 50; num695++)
					{
						int num696 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, this.velocity.X, this.velocity.Y, 100, default(Color), 2.5f);
						Main.dust[num696].noGravity = true;
						Main.dust[num696].velocity *= 2f;
					}
					Gore.NewGore(this.position, this.velocity, 45, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 46, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 46, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 47, 1f);
					Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 47, 1f);
					return;
				}
				else
				{
					if (this.type == 25)
					{
						Main.PlaySound(SoundID.Item10, this.position);
						for (int num697 = 0; num697 < 20; num697++)
						{
							int num698 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, -this.velocity.X * 0.2f, -this.velocity.Y * 0.2f, 100, default(Color), 2f);
							Main.dust[num698].noGravity = true;
							Main.dust[num698].velocity *= 2f;
							num698 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, -this.velocity.X * 0.2f, -this.velocity.Y * 0.2f, 100, default(Color), 1f);
							Main.dust[num698].velocity *= 2f;
						}
						return;
					}
					if (this.type == 33)
					{
						Main.PlaySound(SoundID.Item10, this.position);
						for (int num699 = 0; num699 < 20; num699++)
						{
							int num700 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 172, -this.velocity.X * 0.2f, -this.velocity.Y * 0.2f, 100, default(Color), 1.2f);
							Main.dust[num700].noGravity = true;
							Main.dust[num700].velocity *= 2f;
							num700 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 172, -this.velocity.X * 0.2f, -this.velocity.Y * 0.2f, 100, default(Color), 0.6f);
							Main.dust[num700].velocity *= 2f;
						}
						return;
					}
					if (this.type == 26 || this.type == 27 || this.type == 28 || this.type == 29 || this.type == 73 || this.type == 111)
					{
						if (this.life > 0)
						{
							int num701 = 0;
							while ((double)num701 < dmg / (double)this.lifeMax * 100.0)
							{
								Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
								num701++;
							}
							return;
						}
						for (int num702 = 0; num702 < 50; num702++)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
						}
						int num703 = 48;
						int num704 = 49;
						int num705 = 50;
						if (this.type == 111)
						{
							num703 = 623;
							num704 = 624;
							num705 = 625;
						}
						else if (this.type == 26)
						{
							num703 = 626;
							num704 = 627;
							num705 = 628;
						}
						else if (this.type == 73)
						{
							num703 = 629;
							num704 = 630;
							num705 = 631;
						}
						else if (this.type == 27)
						{
							num703 = 632;
							num704 = 633;
							num705 = 634;
						}
						else if (this.type == 28)
						{
							num703 = 635;
							num704 = 636;
							num705 = 637;
						}
						Gore.NewGore(this.position, this.velocity, num703, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, num704, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, num704, this.scale);
						if (this.type == 111)
						{
							Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 131, this.scale);
						}
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, num705, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, num705, this.scale);
						return;
					}
					else if (this.type == 471)
					{
						if (this.life > 0)
						{
							int num706 = 0;
							while ((double)num706 < dmg / (double)this.lifeMax * 100.0)
							{
								Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
								num706++;
							}
							return;
						}
						for (int num707 = 0; num707 < 50; num707++)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
						}
						Gore.NewGore(this.position, this.velocity, 675, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 676, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 677, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 678, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 678, this.scale);
						return;
					}
					else if (this.type == 472)
					{
						if (this.life > 0)
						{
							int num708 = 0;
							while ((double)num708 < dmg / (double)this.lifeMax * 100.0)
							{
								int num709 = Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
								if (Main.rand.Next(3) != 0)
								{
									Main.dust[num709].noGravity = true;
								}
								Main.dust[num709].alpha = 100;
								num708++;
							}
							return;
						}
						for (int num710 = 0; num710 < 50; num710++)
						{
							int num711 = Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
							if (Main.rand.Next(3) != 0)
							{
								Main.dust[num711].noGravity = true;
							}
							Main.dust[num711].alpha = 100;
						}
						Gore.NewGore(this.position, this.velocity, 679, this.scale);
						Gore.NewGore(this.position, this.velocity, 680, this.scale);
						return;
					}
					else if (this.type == 480)
					{
						if (this.life > 0)
						{
							int num712 = 0;
							while ((double)num712 < dmg / (double)this.lifeMax * 100.0)
							{
								Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
								num712++;
							}
							return;
						}
						for (int num713 = 0; num713 < 50; num713++)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
						}
						Gore.NewGore(this.position, this.velocity, 692, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 693, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 20f), this.velocity, 693, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 694, this.scale);
						Gore.NewGore(new Vector2(this.position.X, this.position.Y + 34f), this.velocity, 694, this.scale);
						return;
					}
					else if (this.type == 185)
					{
						if (this.life > 0)
						{
							int num714 = 0;
							while ((double)num714 < dmg / (double)this.lifeMax * 100.0)
							{
								Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
								num714++;
							}
							return;
						}
						for (int num715 = 0; num715 < 50; num715++)
						{
							Dust.NewDust(this.position, this.width, this.height, 5, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 1f);
						}
						Gore.NewGore(this.position, this.velocity, 240, this.scale);
						return;
					}
					else
					{
						if (this.type == 30)
						{
							Main.PlaySound(SoundID.Item10, this.position);
							for (int num716 = 0; num716 < 20; num716++)
							{
								int num717 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, -this.velocity.X * 0.2f, -this.velocity.Y * 0.2f, 100, default(Color), 2f);
								Main.dust[num717].noGravity = true;
								Main.dust[num717].velocity *= 2f;
								num717 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, -this.velocity.X * 0.2f, -this.velocity.Y * 0.2f, 100, default(Color), 1f);
								Main.dust[num717].velocity *= 2f;
							}
							return;
						}
						if (this.type == 42 || this.type == 176 || this.type == 205 || (this.type >= 231 && this.type <= 235))
						{
							if (this.life > 0)
							{
								int num718 = 0;
								while ((double)num718 < dmg / (double)this.lifeMax * 100.0)
								{
									Dust.NewDust(this.position, this.width, this.height, 18, (float)hitDirection, -1f, this.alpha, this.color, this.scale);
									num718++;
								}
								return;
							}
							for (int num719 = 0; num719 < 50; num719++)
							{
								Dust.NewDust(this.position, this.width, this.height, 18, (float)hitDirection, -2f, this.alpha, this.color, this.scale);
							}
							if (this.type == 205)
							{
								Gore.NewGore(this.position, this.velocity, 270, this.scale);
								Gore.NewGore(this.position, this.velocity, 271, this.scale);
								Gore.NewGore(this.position, this.velocity, 271, this.scale);
								Gore.NewGore(this.position, this.velocity, 272, this.scale);
								return;
							}
							if (this.type == 176)
							{
								Gore.NewGore(this.position, this.velocity, 229, this.scale);
								Gore.NewGore(this.position, this.velocity, 230, this.scale);
								return;
							}
							Gore.NewGore(this.position, this.velocity, 70, this.scale);
							Gore.NewGore(this.position, this.velocity, 71, this.scale);
							return;
						}
						else if (this.type == 43 || this.type == 56)
						{
							if (this.life > 0)
							{
								int num720 = 0;
								while ((double)num720 < dmg / (double)this.lifeMax * 100.0)
								{
									Dust.NewDust(this.position, this.width, this.height, 40, (float)hitDirection, -1f, this.alpha, this.color, 1.2f);
									num720++;
								}
								return;
							}
							for (int num721 = 0; num721 < 50; num721++)
							{
								Dust.NewDust(this.position, this.width, this.height, 40, (float)hitDirection, -2f, this.alpha, this.color, 1.2f);
							}
							Gore.NewGore(this.position, this.velocity, 72, 1f);
							Gore.NewGore(this.position, this.velocity, 72, 1f);
							return;
						}
						else if (this.type == 175)
						{
							if (this.life > 0)
							{
								int num722 = 0;
								while ((double)num722 < dmg / (double)this.lifeMax * 100.0)
								{
									Dust.NewDust(this.position, this.width, this.height, 40, (float)hitDirection, -1f, this.alpha, this.color, 1.2f);
									num722++;
								}
								return;
							}
							for (int num723 = 0; num723 < 50; num723++)
							{
								Dust.NewDust(this.position, this.width, this.height, 40, (float)hitDirection, -2f, this.alpha, this.color, 1.2f);
							}
							Gore.NewGore(this.position, this.velocity, 227, 1f);
							Gore.NewGore(this.position, this.velocity, 228, 1f);
							return;
						}
						else if (this.type == 48)
						{
							if (this.life > 0)
							{
								int num724 = 0;
								while ((double)num724 < dmg / (double)this.lifeMax * 100.0)
								{
									Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
									num724++;
								}
								return;
							}
							for (int num725 = 0; num725 < 50; num725++)
							{
								Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
							}
							Gore.NewGore(this.position, this.velocity, 80, 1f);
							Gore.NewGore(this.position, this.velocity, 81, 1f);
							return;
						}
						else if (this.type == 62 || this.type == 66)
						{
							if (this.life > 0)
							{
								int num726 = 0;
								while ((double)num726 < dmg / (double)this.lifeMax * 100.0)
								{
									Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
									num726++;
								}
								return;
							}
							for (int num727 = 0; num727 < 50; num727++)
							{
								Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
							}
							Gore.NewGore(this.position, this.velocity, 93, 1f);
							Gore.NewGore(this.position, this.velocity, 94, 1f);
							Gore.NewGore(this.position, this.velocity, 94, 1f);
							return;
						}
						else if (this.type == 156)
						{
							if (this.life > 0)
							{
								int num728 = 0;
								while ((double)num728 < dmg / (double)this.lifeMax * 100.0)
								{
									Dust.NewDust(this.position, this.width, this.height, 5, (float)hitDirection, -1f, 0, default(Color), 1f);
									num728++;
								}
								return;
							}
							for (int num729 = 0; num729 < 50; num729++)
							{
								Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
							}
							Gore.NewGore(this.position, this.velocity, 184, 1f);
							Gore.NewGore(this.position, this.velocity, 185, 1f);
							Gore.NewGore(this.position, this.velocity, 185, 1f);
						}
					}
				}
				return;
			}
			Color newColor = new Color(50, 120, 255, 100);
			if (this.type == 64)
			{
				newColor = new Color(225, 70, 140, 100);
			}
			if (this.type == 103)
			{
				newColor = new Color(70, 225, 140, 100);
			}
			if (this.life > 0)
			{
				int num730 = 0;
				while ((double)num730 < dmg / (double)this.lifeMax * 50.0)
				{
					Dust.NewDust(this.position, this.width, this.height, 4, (float)hitDirection, -1f, 0, newColor, 1f);
					num730++;
				}
				return;
			}
			for (int num731 = 0; num731 < 25; num731++)
			{
				Dust.NewDust(this.position, this.width, this.height, 4, (float)(2 * hitDirection), -2f, 0, newColor, 1f);
			}
		}

		public static int CountNPCS(int Type)
		{
			int num = 0;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == Type)
				{
					num++;
				}
			}
			return num;
		}

		public static bool AnyNPCs(int Type)
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == Type)
				{
					return true;
				}
			}
			return false;
		}

		public static int FindFirstNPC(int Type)
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == Type)
				{
					return i;
				}
			}
			return -1;
		}

		public static bool NearSpikeBall(int x, int y)
		{
			Rectangle rectangle = new Rectangle(x * 16 - 300, y * 16 - 300, 600, 600);
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].aiStyle == 20)
				{
					Rectangle rectangle2 = new Rectangle((int)Main.npc[i].ai[1], (int)Main.npc[i].ai[2], 20, 20);
					if (rectangle.Intersects(rectangle2))
					{
						return true;
					}
				}
			}
			return false;
		}

		public int FindBuffIndex(int type)
		{
			if (this.buffImmune[type])
			{
				return -1;
			}
			for (int i = 0; i < 5; i++)
			{
				if (this.buffTime[i] >= 1 && this.buffType[i] == type)
				{
					return i;
				}
			}
			return -1;
		}

		public void AddBuff(int type, int time, bool quiet = false)
		{
			if (this.buffImmune[type])
			{
				return;
			}
			if (!quiet)
			{
				if (Main.netMode == 1)
				{
					NetMessage.SendData(53, -1, -1, "", this.whoAmI, (float)type, (float)time, 0f, 0, 0, 0);
				}
				else if (Main.netMode == 2)
				{
					NetMessage.SendData(54, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
				}
			}
			int num = -1;
			for (int i = 0; i < 5; i++)
			{
				if (this.buffType[i] == type)
				{
					if (this.buffTime[i] < time)
					{
						this.buffTime[i] = time;
					}
					return;
				}
			}
			while (num == -1)
			{
				int num2 = -1;
				for (int j = 0; j < 5; j++)
				{
					if (!Main.debuff[this.buffType[j]])
					{
						num2 = j;
						break;
					}
				}
				if (num2 == -1)
				{
					return;
				}
				for (int k = num2; k < 5; k++)
				{
					if (this.buffType[k] == 0)
					{
						num = k;
						break;
					}
				}
				if (num == -1)
				{
					this.DelBuff(num2);
				}
			}
			this.buffType[num] = type;
			this.buffTime[num] = time;
		}

		public void DelBuff(int b)
		{
			this.buffTime[b] = 0;
			this.buffType[b] = 0;
			for (int i = 0; i < 4; i++)
			{
				if (this.buffTime[i] == 0 || this.buffType[i] == 0)
				{
					for (int j = i + 1; j < 5; j++)
					{
						this.buffTime[j - 1] = this.buffTime[j];
						this.buffType[j - 1] = this.buffType[j];
						this.buffTime[j] = 0;
						this.buffType[j] = 0;
					}
				}
			}
			if (Main.netMode == 2)
			{
				NetMessage.SendData(54, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
			}
		}

		public Rectangle getRect()
		{
			return new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height);
		}

		public bool CanBeChasedBy(object attacker = null, bool ignoreDontTakeDamage = false)
		{
			return this.active && this.chaseable && this.lifeMax > 5 && (!this.dontTakeDamage || ignoreDontTakeDamage) && !this.friendly && !this.immortal;
		}

		public void moneyPing(Vector2 pos)
		{
			Main.PlaySound(38, pos, 1);
			int num = 244;
			if (this.extraValue >= 1000000f)
			{
				num = 247;
			}
			else if (this.extraValue >= 10000f)
			{
				num = 246;
			}
			else if (this.extraValue >= 100f)
			{
				num = 245;
			}
			for (int i = 0; i < 20; i++)
			{
				int num2 = Dust.NewDust(pos - new Vector2(1f, 2f), 10, 14, num, 0f, 0f, 254, default(Color), 0.25f);
				Main.dust[num2].velocity *= 0.2f;
			}
		}

		public void IdleSounds()
		{
			if ((this.type == 239 || this.type == 240) && Main.rand.Next(900) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, Main.rand.Next(24, 26), 1f, 0f);
				return;
			}
			if ((this.type == 62 || this.type == 156) && Main.rand.Next(700) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, Main.rand.Next(26, 30), 1f, 0f);
				return;
			}
			if (this.type == 177 && Main.rand.Next(600) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, Main.rand.Next(30, 32), 1f, 0f);
				return;
			}
			if (this.type == 226 && Main.rand.Next(800) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, 32, 1f, 0f);
				return;
			}
			if (this.type == 153 && Main.rand.Next(1000) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, 33, 1f, 0f);
				return;
			}
			if (this.wet && (this.type == 63 || this.type == 64 || this.type == 103) && Main.rand.Next(1000) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, Main.rand.Next(34, 36), 1f, 0f);
				return;
			}
			if ((this.type == 198 || this.type == 199) && Main.rand.Next(1000) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, Main.rand.Next(36, 38), 1f, 0f);
				return;
			}
			if ((this.type == 170 || this.type == 180 || this.type == 171) && Main.rand.Next(600) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, Main.rand.Next(38, 41), 1f, 0f);
				return;
			}
			if (this.type == 250 && Main.rand.Next(700) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, Main.rand.Next(41, 44), 1f, 0f);
				return;
			}
			if (this.type == 508 && Main.rand.Next(800) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, 44, 1f, 0f);
				return;
			}
			if (this.type == 509 && Main.rand.Next(800) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, Main.rand.Next(44, 47), 1f, 0f);
				return;
			}
			if (this.type == 494 && Main.rand.Next(600) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, 47, 1f, 0f);
				return;
			}
			if (this.type == 467 && Main.rand.Next(700) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, Main.rand.Next(48, 50), 1f, 0f);
				return;
			}
			if (this.type == 468 && Main.rand.Next(700) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, Main.rand.Next(50, 53), 1f, 0f);
				return;
			}
			if (this.type == 288 && Main.rand.Next(400) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, Main.rand.Next(53, 55), 1f, 0f);
				return;
			}
			if ((this.type == 524 || this.type == 525 || this.type == 526 || this.type == 527) && Main.rand.Next(700) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, Main.rand.Next(55, 57), 1f, 0f);
				return;
			}
			if ((this.type == 496 || this.type == 497) && Main.rand.Next(600) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, Main.rand.Next(57, 59), 1f, 0f);
				return;
			}
			if (this.type == 389 && Main.rand.Next(800) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, Main.rand.Next(59, 61), 1f, 0f);
				return;
			}
			if (this.type == 471 && Main.rand.Next(600) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, Main.rand.Next(61, 63), 1f, 0f);
				return;
			}
			if (this.type == 482 && Main.rand.Next(600) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, Main.rand.Next(63, 66), 1f, 0f);
				return;
			}
			if (this.type == 388 && Main.rand.Next(700) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, Main.rand.Next(66, 69), 1f, 0f);
				return;
			}
			if (this.type == 520 && Main.rand.Next(800) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, Main.rand.Next(69, 73), 1f, 0f);
				return;
			}
			if (this.type == 477 && Main.rand.Next(600) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, 73, 1f, 0f);
				return;
			}
			if (this.type == 258 && Main.rand.Next(700) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, Main.rand.Next(74, 78), 1f, 0f);
				return;
			}
			if (this.type == 252 && Main.rand.Next(700) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, 78, 1f, 0f);
				return;
			}
			if (this.type == 469 && Main.rand.Next(700) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, Main.rand.Next(79, 81), 1f, 0f);
				return;
			}
			if ((this.type == 253 || this.type == 82) && Main.rand.Next(700) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, Main.rand.Next(81, 84), 1f, 0f);
				return;
			}
			if (this.type >= 498 && this.type <= 506 && Main.rand.Next(600) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, Main.rand.Next(84, 86), 1f, 0f);
				return;
			}
			if (this.type == 391 && Main.rand.Next(700) == 0)
			{
				Main.PlaySound(29, (int)this.position.X, (int)this.position.Y, Main.rand.Next(86, 87), 1f, 0f);
			}
		}

		private void UpdateAltTexture()
		{
			if (this.townNPC)
			{
				int num = this.altTexture;
				if (BirthdayParty.PartyIsUp)
				{
					this.altTexture = 1;
				}
				else
				{
					this.altTexture = 0;
				}
				if (this.type == 441 || this.type == 453)
				{
					this.altTexture = 0;
				}
				if (num == 0 && this.altTexture == 1)
				{
					for (int i = 0; i < 20; i++)
					{
						Dust.NewDust(this.position, this.width, this.height / 4, 139 + Main.rand.Next(4), 0f, -2f, 0, default(Color), 1f);
					}
				}
				if (num == 1 && this.altTexture == 0)
				{
					for (int j = 0; j < 4; j++)
					{
						Utils.PoofOfSmoke(this.position);
					}
				}
			}
		}

		public void UpdateNPC(int i)
		{
			this.whoAmI = i;
			if (this.active)
			{
				this.UpdateAltTexture();
				if (this.type == 368)
				{
					NPC.travelNPC = true;
				}
				this.UpdateNPC_CastLights();
				this.UpdateNPC_TeleportVisuals();
				this.UpdateNPC_CritterSounds();
				if (Main.netMode == 1 && (this.townNPC || this.type == 453) && this.type != 37 && this.npcNameLookup == 0)
				{
					this.npcNameLookup = 1;
					int number = -1;
					for (int j = 0; j < 200; j++)
					{
						if (Main.npc[j] == this)
						{
							number = j;
							break;
						}
					}
					NetMessage.SendData(56, -1, -1, "", number, 0f, 0f, 0f, 0, 0, 0);
				}
				if (this.displayName == "" && Main.netMode != 1)
				{
					this.displayName = this.name;
				}
				if (Main.netMode == 1)
				{
					bool flag = false;
					int num = (int)(this.position.X + (float)(this.width / 2)) / 16;
					int num2 = (int)(this.position.Y + (float)(this.height / 2)) / 16;
					try
					{
						if (num >= 4 && num <= Main.maxTilesX - 4 && num2 >= 4 && num2 <= Main.maxTilesY - 4)
						{
							if (Main.tile[num, num2] == null)
							{
								flag = true;
							}
							else if (Main.tile[num - 3, num2] == null)
							{
								flag = true;
							}
							else if (Main.tile[num + 3, num2] == null)
							{
								flag = true;
							}
							else if (Main.tile[num, num2 - 3] == null)
							{
								flag = true;
							}
							else if (Main.tile[num, num2 + 3] == null)
							{
								flag = true;
							}
						}
					}
					catch
					{
						flag = true;
					}
					if (flag)
					{
						return;
					}
				}
				this.UpdateNPC_BuffFlagsReset();
				this.UpdateNPC_BuffSetFlags();
				this.UpdateNPC_SoulDrainDebuff();
				this.UpdateNPC_BuffClearExpiredBuffs();
				this.UpdateNPC_BuffApplyDOTs();
				this.UpdateNPC_BloodMoonTransformations();
				float num3;
				this.UpdateNPC_UpdateGravity(out num3);
				if (this.soundDelay > 0)
				{
					this.soundDelay--;
				}
				if (this.life <= 0)
				{
					this.active = false;
				}
				this.oldTarget = this.target;
				this.oldDirection = this.direction;
				this.oldDirectionY = this.directionY;
				float num4 = 1f + Math.Abs(this.velocity.X) / 3f;
				if (this.gfxOffY > 0f)
				{
					this.gfxOffY -= num4 * this.stepSpeed;
					if (this.gfxOffY < 0f)
					{
						this.gfxOffY = 0f;
					}
				}
				else if (this.gfxOffY < 0f)
				{
					this.gfxOffY += num4 * this.stepSpeed;
					if (this.gfxOffY > 0f)
					{
						this.gfxOffY = 0f;
					}
				}
				if (this.gfxOffY > 16f)
				{
					this.gfxOffY = 16f;
				}
				if (this.gfxOffY < -16f)
				{
					this.gfxOffY = -16f;
				}
				this.TryPortalJumping();
				this.IdleSounds();
				this.AI();
				if (Main.netMode != 2 && this.extraValue > 0f)
				{
					int num5 = 244;
					float num6 = 30f;
					if (this.extraValue >= 1000000f)
					{
						num5 = 247;
						num6 *= 0.25f;
					}
					else if (this.extraValue >= 10000f)
					{
						num5 = 246;
						num6 *= 0.5f;
					}
					else if (this.extraValue >= 100f)
					{
						num5 = 245;
						num6 *= 0.75f;
					}
					if (Main.rand.Next((int)num6) == 0)
					{
						int num7 = Dust.NewDust(this.position, this.width, this.height, num5, 0f, 0f, 254, default(Color), 0.25f);
						Main.dust[num7].velocity *= 0.1f;
					}
				}
				for (int k = 0; k < 256; k++)
				{
					if (this.immune[k] > 0)
					{
						this.immune[k]--;
					}
				}
				if (!this.noGravity && !this.noTileCollide)
				{
					int num8 = (int)(this.position.X + (float)(this.width / 2)) / 16;
					int num9 = (int)(this.position.Y + (float)(this.height / 2)) / 16;
					if (WorldGen.InWorld(num8, num9, 0) && Main.tile[num8, num9] == null)
					{
						NPC.gravity = 0f;
						this.velocity.X = 0f;
						this.velocity.Y = 0f;
					}
				}
				if (!this.noGravity)
				{
					this.velocity.Y = this.velocity.Y + NPC.gravity;
					if (this.velocity.Y > num3)
					{
						this.velocity.Y = num3;
					}
				}
				if ((double)this.velocity.X < 0.005 && (double)this.velocity.X > -0.005)
				{
					this.velocity.X = 0f;
				}
				if ((Main.netMode != 1 && this.type != 37 && (this.friendly || this.type == 46 || this.type == 55 || this.type == 74 || this.type == 148 || this.type == 149 || this.type == 230 || this.type == 297 || this.type == 298 || this.type == 299 || this.type == 303 || this.type == 355 || this.type == 356 || this.type == 358 || this.type == 359 || this.type == 360 || this.type == 361 || this.type == 362 || this.type == 363 || this.type == 364 || this.type == 365 || this.type == 366 || this.type == 367 || this.type == 377 || this.type == 357 || this.type == 374 || (this.type >= 442 && this.type <= 448 && this.type != 447))) || this.type == 538 || this.type == 539 || this.type == 337 || this.type == 540 || (this.type >= 484 && this.type <= 487))
				{
					if (this.townNPC)
					{
						this.CheckDrowning();
					}
					this.CheckLifeRegen();
					this.CheckMeleeCollision();
				}
				if (!this.noTileCollide)
				{
					this.UpdateCollision();
				}
				else
				{
					this.oldPosition = this.position;
					this.oldDirection = this.direction;
					this.position += this.velocity;
					if (this.onFire && this.boss && Main.netMode != 1)
					{
						bool flag2 = Collision.WetCollision(this.position, this.width, this.height);
						if (flag2)
						{
							for (int l = 0; l < 5; l++)
							{
								if (this.buffType[l] == 24)
								{
									this.DelBuff(l);
								}
							}
						}
					}
				}
				if (Main.netMode != 1 && !this.noTileCollide && this.lifeMax > 1 && Collision.SwitchTiles(this.position, this.width, this.height, this.oldPosition, 2) && (this.type == 46 || this.type == 148 || this.type == 149 || this.type == 303 || this.type == 361 || this.type == 362 || this.type == 364 || this.type == 366 || this.type == 367 || (this.type >= 442 && this.type <= 448)))
				{
					this.ai[0] = 1f;
					this.ai[1] = 400f;
					this.ai[2] = 0f;
				}
				this.FindFrame();
				this.UpdateNPC_UpdateTrails();
				if (!this.active)
				{
					this.netUpdate = true;
				}
				if (Main.netMode == 2)
				{
					if (Main.npcStreamSpeed > 0 && !this.townNPC && Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) > 1f)
					{
						this.netStream += 1;
						if ((int)this.netStream > Main.npcStreamSpeed)
						{
							for (int m = 0; m < 255; m++)
							{
								if (Main.player[m].active)
								{
									float num10 = Math.Abs(base.Center.X - Main.player[m].Center.X) + Math.Abs(base.Center.Y - Main.player[m].Center.Y);
									if (num10 < 250f)
									{
										byte[] expr_9F3_cp_0 = this.streamPlayer;
										int expr_9F3_cp_1 = m;
										expr_9F3_cp_0[expr_9F3_cp_1] -= 8;
									}
									else if (num10 < 500f)
									{
										byte[] expr_A19_cp_0 = this.streamPlayer;
										int expr_A19_cp_1 = m;
										expr_A19_cp_0[expr_A19_cp_1] -= 4;
									}
									else if (num10 < 1000f)
									{
										byte[] expr_A3F_cp_0 = this.streamPlayer;
										int expr_A3F_cp_1 = m;
										expr_A3F_cp_0[expr_A3F_cp_1] -= 2;
									}
									else if (num10 < 1500f)
									{
										byte[] expr_A65_cp_0 = this.streamPlayer;
										int expr_A65_cp_1 = m;
										expr_A65_cp_0[expr_A65_cp_1] -= 1;
									}
									if (this.streamPlayer[m] <= 0)
									{
										this.streamPlayer[m] = 8;
										NetMessage.SendData(23, m, -1, "", i, 0f, 0f, 0f, 0, 0, 0);
									}
								}
							}
						}
					}
					if (this.townNPC)
					{
						this.netSpam = 0;
					}
					if (this.netUpdate2)
					{
						this.netUpdate = true;
					}
					if (!this.active)
					{
						this.netSpam = 0;
					}
					if (this.netUpdate)
					{
						if (this.boss)
						{
							this.oldPosition - this.position;
							if (this.netSpam <= 15)
							{
								this.netSpam += 5;
								NetMessage.SendData(23, -1, -1, "", i, 0f, 0f, 0f, 0, 0, 0);
								this.netUpdate2 = false;
							}
							else
							{
								this.netUpdate2 = true;
							}
						}
						else if (this.netSpam <= 90)
						{
							this.netSpam += 30;
							NetMessage.SendData(23, -1, -1, "", i, 0f, 0f, 0f, 0, 0, 0);
							this.netUpdate2 = false;
						}
						else
						{
							this.netUpdate2 = true;
						}
					}
					if (this.netSpam > 0)
					{
						this.netSpam--;
					}
					if (this.active && this.townNPC && NPC.TypeToHeadIndex(this.type) != -1)
					{
						if (this.homeless != this.oldHomeless || this.homeTileX != this.oldHomeTileX || this.homeTileY != this.oldHomeTileY)
						{
							int num11 = 0;
							if (this.homeless)
							{
								num11 = 1;
							}
							NetMessage.SendData(60, -1, -1, "", i, (float)Main.npc[i].homeTileX, (float)Main.npc[i].homeTileY, (float)num11, 0, 0, 0);
						}
						this.oldHomeless = this.homeless;
						this.oldHomeTileX = this.homeTileX;
						this.oldHomeTileY = this.homeTileY;
					}
				}
				this.CheckActive();
				this.netUpdate = false;
				this.justHit = false;
			}
		}

		private void UpdateNPC_UpdateTrails()
		{
			int num = NPCID.Sets.TrailingMode[this.type];
			if (num == 0)
			{
				if (this.localAI[3] <= 0f)
				{
					this.localAI[3] = 2f;
					for (int i = this.oldPos.Length - 1; i > 0; i--)
					{
						this.oldPos[i] = this.oldPos[i - 1];
					}
					this.oldPos[0] = this.position;
				}
				this.localAI[3] -= 1f;
			}
			if (num == 1)
			{
				for (int j = this.oldPos.Length - 1; j > 0; j--)
				{
					this.oldPos[j] = this.oldPos[j - 1];
				}
				this.oldPos[0] = this.position;
			}
			if (num == 2)
			{
				if ((int)this.ai[0] == 4 || this.ai[0] == 5f || this.ai[0] == 6f)
				{
					for (int k = this.oldPos.Length - 1; k > 0; k--)
					{
						this.oldPos[k] = this.oldPos[k - 1];
						this.oldRot[k] = this.oldRot[k - 1];
					}
					this.oldPos[0] = this.position;
					this.oldRot[0] = this.rotation;
				}
				else
				{
					for (int l = this.oldPos.Length - 1; l >= 0; l--)
					{
						this.oldPos[l] = this.position;
						this.oldRot[l] = this.rotation;
					}
				}
			}
			if (num == 3)
			{
				for (int m = this.oldPos.Length - 1; m > 0; m--)
				{
					this.oldPos[m] = this.oldPos[m - 1];
					this.oldRot[m] = this.oldRot[m - 1];
				}
				this.oldPos[0] = this.position;
				this.oldRot[0] = this.rotation;
			}
			if (num == 4)
			{
				for (int n = this.oldPos.Length - 1; n > 0; n--)
				{
					this.oldPos[n] = this.oldPos[n - 1];
					Lighting.AddLight((int)this.position.X / 16, (int)this.position.Y / 16, 0.3f, 0f, 0.2f);
				}
				this.oldPos[0] = this.position;
				return;
			}
			if (num == 5)
			{
				for (int num2 = this.oldPos.Length - 1; num2 > 0; num2--)
				{
					this.oldPos[num2] = this.oldPos[num2 - 1];
				}
				this.oldPos[0] = this.position;
				return;
			}
			if (num == 6)
			{
				for (int num3 = this.oldPos.Length - 1; num3 > 0; num3--)
				{
					this.oldPos[num3] = this.oldPos[num3 - 1];
				}
				this.oldPos[0] = this.position;
				return;
			}
			if (num == 7)
			{
				for (int num4 = this.oldPos.Length - 1; num4 > 0; num4--)
				{
					this.oldPos[num4] = this.oldPos[num4 - 1];
					this.oldRot[num4] = this.oldRot[num4 - 1];
				}
				this.oldPos[0] = this.position;
				this.oldRot[0] = this.rotation;
			}
		}

		private void UpdateNPC_UpdateGravity(out float maxFallSpeed)
		{
			maxFallSpeed = 10f;
			NPC.gravity = 0.3f;
			if (this.type == 258)
			{
				NPC.gravity = 0.1f;
				if (this.velocity.Y > 3f)
				{
					this.velocity.Y = 3f;
				}
			}
			else if (this.type == 425 && this.ai[2] == 1f)
			{
				NPC.gravity = 0.1f;
				if (this.velocity.Y > 2f)
				{
					this.velocity.Y = 2f;
				}
			}
			else if ((this.type == 576 || this.type == 577) && this.ai[0] > 0f && this.ai[1] == 2f)
			{
				NPC.gravity = 0.45f;
				if (this.velocity.Y > 32f)
				{
					this.velocity.Y = 32f;
				}
			}
			else if (this.type == 427 && this.ai[2] == 1f)
			{
				NPC.gravity = 0.1f;
				if (this.velocity.Y > 4f)
				{
					this.velocity.Y = 4f;
				}
			}
			else if (this.type == 426)
			{
				NPC.gravity = 0.1f;
				if (this.velocity.Y > 3f)
				{
					this.velocity.Y = 3f;
				}
			}
			else if (this.type == 541)
			{
				NPC.gravity = 0f;
			}
			float num = (float)(Main.maxTilesX / 4200);
			num *= num;
			float num2 = (float)((double)(this.position.Y / 16f - (60f + 10f * num)) / (Main.worldSurface / 6.0));
			if ((double)num2 < 0.25)
			{
				num2 = 0.25f;
			}
			if (num2 > 1f)
			{
				num2 = 1f;
			}
			NPC.gravity *= num2;
			if (this.wet)
			{
				if (this.honeyWet)
				{
					NPC.gravity = 0.1f;
					maxFallSpeed = 4f;
					return;
				}
				NPC.gravity = 0.2f;
				maxFallSpeed = 7f;
			}
		}

		private void UpdateNPC_SoulDrainDebuff()
		{
			if (this.soulDrain)
			{
				int num = 1100;
				for (int i = 0; i < 255; i++)
				{
					if (Main.player[i].active && !Main.player[i].dead && (base.Center - Main.player[i].position).Length() < (float)num && Main.player[i].inventory[Main.player[i].selectedItem].type == 3006 && Main.player[i].itemAnimation > 0)
					{
						if (i == Main.myPlayer)
						{
							Main.player[i].soulDrain++;
						}
						if (Main.rand.Next(3) != 0)
						{
							Vector2 vector = base.Center;
							vector.X += (float)Main.rand.Next(-100, 100) * 0.05f;
							vector.Y += (float)Main.rand.Next(-100, 100) * 0.05f;
							vector += this.velocity;
							int num2 = Dust.NewDust(vector, 1, 1, 235, 0f, 0f, 0, default(Color), 1f);
							Main.dust[num2].velocity *= 0f;
							Main.dust[num2].scale = (float)Main.rand.Next(70, 85) * 0.01f;
							Main.dust[num2].fadeIn = (float)(i + 1);
						}
					}
				}
			}
		}

		private void UpdateNPC_BuffApplyDOTs()
		{
			if (!this.dontTakeDamage)
			{
				int num = this.lifeRegenExpectedLossPerSecond;
				if (this.poisoned)
				{
					if (this.lifeRegen > 0)
					{
						this.lifeRegen = 0;
					}
					this.lifeRegen -= 4;
				}
				if (this.onFire)
				{
					if (this.lifeRegen > 0)
					{
						this.lifeRegen = 0;
					}
					this.lifeRegen -= 8;
				}
				if (this.onFrostBurn)
				{
					if (this.lifeRegen > 0)
					{
						this.lifeRegen = 0;
					}
					this.lifeRegen -= 16;
					if (num < 2)
					{
						num = 2;
					}
				}
				if (this.onFire2)
				{
					if (this.lifeRegen > 0)
					{
						this.lifeRegen = 0;
					}
					this.lifeRegen -= 12;
				}
				if (this.venom)
				{
					if (this.lifeRegen > 0)
					{
						this.lifeRegen = 0;
					}
					this.lifeRegen -= 12;
					if (num < 2)
					{
						num = 2;
					}
				}
				if (this.shadowFlame)
				{
					if (this.lifeRegen > 0)
					{
						this.lifeRegen = 0;
					}
					this.lifeRegen -= 30;
					if (num < 5)
					{
						num = 5;
					}
				}
				if (this.oiled)
				{
					int num2 = this.onFire ? 2 : 0;
					num2 += (this.onFrostBurn ? 4 : 0);
					num2 += (this.onFire2 ? 3 : 0);
					num2 += (this.shadowFlame ? 8 : 0);
					if (num2 > 0)
					{
						int num3 = num2 * 4 + 12;
						this.lifeRegen -= num3;
						int num4 = num3 / 6;
						if (num < num4)
						{
							num = num4;
						}
					}
				}
				if (this.javelined)
				{
					if (this.lifeRegen > 0)
					{
						this.lifeRegen = 0;
					}
					int num5 = 0;
					int num6 = 1;
					for (int i = 0; i < 1000; i++)
					{
						if (Main.projectile[i].active && Main.projectile[i].type == 598 && Main.projectile[i].ai[0] == 1f && Main.projectile[i].ai[1] == (float)this.whoAmI)
						{
							num5++;
						}
					}
					this.lifeRegen -= num5 * 2 * 3;
					if (num < num5 * 3 / num6)
					{
						num = num5 * 3 / num6;
					}
				}
				if (this.daybreak)
				{
					if (this.lifeRegen > 0)
					{
						this.lifeRegen = 0;
					}
					int num7 = 0;
					int num8 = 4;
					for (int j = 0; j < 1000; j++)
					{
						if (Main.projectile[j].active && Main.projectile[j].type == 636 && Main.projectile[j].ai[0] == 1f && Main.projectile[j].ai[1] == (float)this.whoAmI)
						{
							num7++;
						}
					}
					if (num7 == 0)
					{
						num7 = 1;
					}
					this.lifeRegen -= num7 * 2 * 100;
					if (num < num7 * 100 / num8)
					{
						num = num7 * 100 / num8;
					}
				}
				if (this.celled)
				{
					if (this.lifeRegen > 0)
					{
						this.lifeRegen = 0;
					}
					int num9 = 0;
					for (int k = 0; k < 1000; k++)
					{
						if (Main.projectile[k].active && Main.projectile[k].type == 614 && Main.projectile[k].ai[0] == 1f && Main.projectile[k].ai[1] == (float)this.whoAmI)
						{
							num9++;
						}
					}
					this.lifeRegen -= num9 * 2 * 20;
					if (num < num9 * 20)
					{
						num = num9 * 20 / 2;
					}
				}
				if (this.dryadBane)
				{
					int num10 = 4;
					float num11 = 1f;
					if (this.lifeRegen > 0)
					{
						this.lifeRegen = 0;
					}
					if (NPC.downedBoss1)
					{
						num11 += 0.1f;
					}
					if (NPC.downedBoss2)
					{
						num11 += 0.1f;
					}
					if (NPC.downedBoss3)
					{
						num11 += 0.1f;
					}
					if (NPC.downedQueenBee)
					{
						num11 += 0.1f;
					}
					if (Main.hardMode)
					{
						num11 += 0.4f;
					}
					if (NPC.downedMechBoss1)
					{
						num11 += 0.15f;
					}
					if (NPC.downedMechBoss2)
					{
						num11 += 0.15f;
					}
					if (NPC.downedMechBoss3)
					{
						num11 += 0.15f;
					}
					if (NPC.downedPlantBoss)
					{
						num11 += 0.15f;
					}
					if (NPC.downedGolemBoss)
					{
						num11 += 0.15f;
					}
					if (NPC.downedAncientCultist)
					{
						num11 += 0.15f;
					}
					if (Main.expertMode)
					{
						num11 *= Main.expertNPCDamage;
					}
					num10 = (int)((float)num10 * num11);
					this.lifeRegen -= 2 * num10;
					if (num < num10)
					{
						num = num10 / 3;
					}
				}
				if (this.soulDrain && this.realLife == -1)
				{
					if (this.lifeRegen > 0)
					{
						this.lifeRegen = 0;
					}
					this.lifeRegen -= 50;
					if (num < 5)
					{
						num = 5;
					}
				}
				if (this.lifeRegen <= -240 && num < 2)
				{
					num = 2;
				}
				this.lifeRegenCount += this.lifeRegen;
				while (this.lifeRegenCount >= 120)
				{
					this.lifeRegenCount -= 120;
					if (!this.immortal)
					{
						if (this.life < this.lifeMax)
						{
							this.life++;
						}
						if (this.life > this.lifeMax)
						{
							this.life = this.lifeMax;
						}
					}
				}
				if (num > 0)
				{
					while (this.lifeRegenCount <= -120 * num)
					{
						this.lifeRegenCount += 120 * num;
						int whoAmI = this.whoAmI;
						if (this.realLife >= 0)
						{
							whoAmI = this.realLife;
						}
						if (!Main.npc[whoAmI].immortal)
						{
							Main.npc[whoAmI].life -= num;
						}
						CombatText.NewText(new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), CombatText.LifeRegenNegative, string.Concat(num), false, true);
						if (Main.npc[whoAmI].life <= 0 && !Main.npc[whoAmI].immortal)
						{
							Main.npc[whoAmI].life = 1;
							if (Main.netMode != 1)
							{
								Main.npc[whoAmI].StrikeNPCNoInteraction(9999, 0f, 0, false, false, false);
								if (Main.netMode == 2)
								{
									NetMessage.SendData(28, -1, -1, "", whoAmI, 9999f, 0f, 0f, 0, 0, 0);
								}
							}
						}
					}
					return;
				}
				while (this.lifeRegenCount <= -120)
				{
					this.lifeRegenCount += 120;
					int whoAmI2 = this.whoAmI;
					if (this.realLife >= 0)
					{
						whoAmI2 = this.realLife;
					}
					if (!Main.npc[whoAmI2].immortal)
					{
						Main.npc[whoAmI2].life--;
					}
					CombatText.NewText(new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), CombatText.LifeRegenNegative, string.Concat(1), false, true);
					if (Main.npc[whoAmI2].life <= 0 && !Main.npc[whoAmI2].immortal)
					{
						Main.npc[whoAmI2].life = 1;
						if (Main.netMode != 1)
						{
							Main.npc[whoAmI2].StrikeNPCNoInteraction(9999, 0f, 0, false, false, false);
							if (Main.netMode == 2)
							{
								NetMessage.SendData(28, -1, -1, "", whoAmI2, 9999f, 0f, 0f, 0, 0, 0);
							}
						}
					}
				}
			}
		}

		private void UpdateNPC_BuffClearExpiredBuffs()
		{
			if (Main.netMode != 1)
			{
				for (int i = 0; i < 5; i++)
				{
					if (this.buffType[i] > 0 && this.buffTime[i] <= 0)
					{
						this.DelBuff(i);
						if (Main.netMode == 2)
						{
							NetMessage.SendData(54, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
						}
					}
				}
			}
		}

		private void UpdateNPC_BloodMoonTransformations()
		{
			if (Main.netMode != 1 && Main.bloodMoon)
			{
				bool flag = false;
				if (this.value == 0f)
				{
					flag = true;
				}
				if (this.type == 46 || this.type == 303 || this.type == 337 || this.type == 443 || this.type == 540)
				{
					if (WorldGen.crimson)
					{
						this.Transform(464);
					}
					else
					{
						this.Transform(47);
					}
				}
				else if (this.type == 55 || this.type == 230)
				{
					if (WorldGen.crimson)
					{
						this.Transform(465);
					}
					else
					{
						this.Transform(57);
					}
				}
				else if (this.type == 148 || this.type == 149)
				{
					if (WorldGen.crimson)
					{
						this.Transform(470);
					}
					else
					{
						this.Transform(168);
					}
				}
				if (flag)
				{
					this.value = 0f;
				}
			}
		}

		private void UpdateNPC_BuffSetFlags()
		{
			for (int i = 0; i < 5; i++)
			{
				if (this.buffType[i] > 0 && this.buffTime[i] > 0)
				{
					this.buffTime[i]--;
					if (this.buffType[i] == 20)
					{
						this.poisoned = true;
					}
					if (this.buffType[i] == 70)
					{
						this.venom = true;
					}
					if (this.buffType[i] == 24)
					{
						this.onFire = true;
					}
					if (this.buffType[i] == 72)
					{
						this.midas = true;
					}
					if (this.buffType[i] == 69)
					{
						this.ichor = true;
					}
					if (this.buffType[i] == 31)
					{
						this.confused = true;
					}
					if (this.buffType[i] == 39)
					{
						this.onFire2 = true;
					}
					if (this.buffType[i] == 44)
					{
						this.onFrostBurn = true;
					}
					if (this.buffType[i] == 103)
					{
						this.dripping = true;
					}
					if (this.buffType[i] == 137)
					{
						this.drippingSlime = true;
					}
					if (this.buffType[i] == 119)
					{
						this.loveStruck = true;
					}
					if (this.buffType[i] == 120)
					{
						this.stinky = true;
					}
					if (this.buffType[i] == 151)
					{
						this.soulDrain = true;
					}
					if (this.buffType[i] == 153)
					{
						this.shadowFlame = true;
					}
					if (this.buffType[i] == 165)
					{
						this.dryadWard = true;
					}
					if (this.buffType[i] == 169)
					{
						this.javelined = true;
					}
					if (this.buffType[i] == 183)
					{
						this.celled = true;
					}
					if (this.buffType[i] == 186)
					{
						this.dryadBane = true;
					}
					if (this.buffType[i] == 189)
					{
						this.daybreak = true;
					}
					if (this.buffType[i] == 203)
					{
						this.betsysCurse = true;
					}
					if (this.buffType[i] == 204)
					{
						this.oiled = true;
					}
				}
			}
		}

		private void UpdateNPC_BuffFlagsReset()
		{
			this.lifeRegen = 0;
			this.soulDrain = false;
			this.poisoned = false;
			this.venom = false;
			this.shadowFlame = false;
			this.onFire = false;
			this.midas = false;
			this.ichor = false;
			this.onFrostBurn = false;
			this.onFire2 = false;
			this.confused = false;
			this.loveStruck = false;
			this.dryadWard = false;
			this.stinky = false;
			this.dripping = false;
			this.drippingSlime = false;
			this.daybreak = false;
			this.javelined = false;
			this.celled = false;
			this.dryadBane = false;
			this.betsysCurse = false;
			this.oiled = false;
			this.lifeRegenExpectedLossPerSecond = -1;
		}

		private void UpdateNPC_TeleportVisuals()
		{
			if (this.teleportTime > 0f)
			{
				if (this.teleportStyle == 0)
				{
					if ((float)Main.rand.Next(100) <= 100f * this.teleportTime * 2f)
					{
						int num = Dust.NewDust(new Vector2((float)this.getRect().X, (float)this.getRect().Y), this.getRect().Width, this.getRect().Height, 159, 0f, 0f, 0, default(Color), 1f);
						Main.dust[num].scale = this.teleportTime * 1.5f;
						Main.dust[num].noGravity = true;
						Main.dust[num].velocity *= 1.1f;
					}
				}
				else if (this.teleportStyle == 4)
				{
					this.teleportTime -= 0.02f;
					if ((float)Main.rand.Next(100) <= 100f * this.teleportTime)
					{
						Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 263, 0f, 0f, 0, default(Color), 1f)];
						dust.color = PortalHelper.GetPortalColor(this.lastPortalColorIndex);
						dust.noLight = true;
						dust.noGravity = true;
						dust.scale = 1.2f;
						dust.fadeIn = 0.4f;
					}
				}
				this.teleportTime -= 0.005f;
			}
		}

		private void UpdateNPC_CritterSounds()
		{
			if (Main.netMode != 2)
			{
				if (this.type >= 362 && this.type <= 365)
				{
					if (Main.dayTime && Main.rand.Next(200) == 0)
					{
						Main.PlaySound(30, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						return;
					}
				}
				else if (this.type == 361 || this.type == 445)
				{
					if ((double)Math.Abs(this.velocity.X) < 0.5 && (!Main.dayTime || (double)this.position.Y > Main.worldSurface * 16.0) && Main.rand.Next(200) == 0)
					{
						Main.PlaySound(31, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						return;
					}
				}
				else if (this.type == 74 || this.type == 297 || this.type == 298 || this.type == 442)
				{
					if (Main.dayTime && Main.time < 18000.0 && Main.rand.Next(400) == 0)
					{
						if (this.type == 74)
						{
							if (Main.rand.Next(3) != 0)
							{
								Main.PlaySound(32, (int)this.position.X, (int)this.position.Y, 14, 1f, 0f);
							}
							else
							{
								Main.PlaySound(32, (int)this.position.X, (int)this.position.Y, 18, 1f, 0f);
							}
						}
						if (this.type == 297)
						{
							Main.PlaySound(32, (int)this.position.X, (int)this.position.Y, 16, 1f, 0f);
						}
						if (this.type == 298)
						{
							if (Main.rand.Next(3) != 0)
							{
								Main.PlaySound(32, (int)this.position.X, (int)this.position.Y, 17, 1f, 0f);
							}
							else
							{
								Main.PlaySound(32, (int)this.position.X, (int)this.position.Y, 19, 1f, 0f);
							}
						}
						if (this.type == 442)
						{
							int num = Main.rand.Next(5);
							if (num == 0)
							{
								Main.PlaySound(32, (int)this.position.X, (int)this.position.Y, 16, 1f, 0f);
								return;
							}
							if (num == 1)
							{
								Main.PlaySound(32, (int)this.position.X, (int)this.position.Y, 17, 1f, 0f);
								return;
							}
							if (num == 2)
							{
								Main.PlaySound(32, (int)this.position.X, (int)this.position.Y, 19, 1f, 0f);
								return;
							}
							if (num == 3)
							{
								Main.PlaySound(32, (int)this.position.X, (int)this.position.Y, 14, 1f, 0f);
								return;
							}
							Main.PlaySound(32, (int)this.position.X, (int)this.position.Y, 18, 1f, 0f);
							return;
						}
					}
				}
				else if ((this.type == 300 || this.type == 447) && Main.rand.Next(1800) == 0)
				{
					Main.PlaySound(33, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				}
			}
		}

		private void UpdateNPC_CastLights()
		{
			if ((this.type >= 442 && this.type <= 448) || this.type == 539)
			{
				Color color = Lighting.GetColor((int)base.Center.X / 16, (int)base.Center.Y / 16);
				if (color.R > 20 || color.B > 20 || color.G > 20)
				{
					int num = (int)color.R;
					if ((int)color.G > num)
					{
						num = (int)color.G;
					}
					if ((int)color.B > num)
					{
						num = (int)color.B;
					}
					num /= 30;
					if (Main.rand.Next(300) < num)
					{
						int num2 = Dust.NewDust(this.position, this.width, this.height, 43, 0f, 0f, 254, new Color(255, 255, 0), 0.5f);
						Main.dust[num2].velocity *= 0f;
					}
				}
			}
			if ((this.type >= 254 && this.type <= 261) || this.type == 160)
			{
				float num3 = (float)Main.rand.Next(28, 42) * 0.005f;
				num3 += (float)(270 - (int)Main.mouseTextColor) / 500f;
				float num4 = 0.1f;
				float num5 = 0.3f + num3 / 2f;
				float num6 = 0.6f + num3;
				float num7 = 0.35f;
				num4 *= num7;
				num5 *= num7;
				num6 *= num7;
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, num4, num5, num6);
			}
			if (this.type == 209)
			{
				float num8 = (float)Main.rand.Next(28, 42) * 0.005f;
				num8 += (float)(270 - (int)Main.mouseTextColor) / 500f;
				float num9 = 0.1f;
				float num10 = 0.3f + num8 / 2f;
				float num11 = 0.4f + num8 / 2f;
				float num12 = 0.35f;
				num9 *= num12;
				num10 *= num12;
				num11 *= num12;
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, num9, num10, num11);
				if (this.ai[0] == 12f)
				{
					Lighting.AddLight(base.Top, 0.3f, 0.1f, 0.1f);
				}
			}
			if (this.type == 44)
			{
				Lighting.AddLight((int)(this.position.X + (float)(this.width / 2)) / 16, (int)(this.position.Y + 4f) / 16, 0.9f, 0.75f, 0.5f);
			}
		}

		private void CheckMeleeCollision()
		{
			if (this.dontTakeDamageFromHostiles)
			{
				return;
			}
			int num = 1;
			if (this.immune[255] == 0)
			{
				int num2 = 30;
				if (this.type == 548)
				{
					num2 = 20;
				}
				Rectangle hitbox = base.Hitbox;
				for (int i = 0; i < 200; i++)
				{
					NPC nPC = Main.npc[i];
					if (nPC.active && !nPC.friendly && nPC.damage > 0)
					{
						Rectangle hitbox2 = nPC.Hitbox;
						float num3 = 1f;
						NPC.GetMeleeCollisionData(hitbox, i, ref num, ref num3, ref hitbox2);
						if (hitbox.Intersects(hitbox2) && (this.type != 453 || !NPCID.Sets.Skeletons.Contains(nPC.netID)))
						{
							int num4 = nPC.damage;
							int num5 = 6;
							int num6 = 1;
							if (nPC.position.X + (float)(nPC.width / 2) > this.position.X + (float)(this.width / 2))
							{
								num6 = -1;
							}
							double num7 = this.StrikeNPCNoInteraction(num4, (float)num5, num6, false, false, false);
							if (Main.netMode != 0)
							{
								NetMessage.SendData(28, -1, -1, "", this.whoAmI, (float)num4, (float)num5, (float)num6, 0, 0, 0);
							}
							this.netUpdate = true;
							this.immune[255] = num2;
							if (this.dryadWard)
							{
								num4 = (int)num7 / 3;
								num5 = 6;
								num6 *= -1;
								nPC.StrikeNPCNoInteraction(num4, (float)num5, num6, false, false, false);
								if (Main.netMode != 0)
								{
									NetMessage.SendData(28, -1, -1, "", i, (float)num4, (float)num5, (float)num6, 0, 0, 0);
								}
								nPC.netUpdate = true;
								nPC.immune[255] = num2;
							}
						}
					}
				}
			}
		}

		private void CheckLifeRegen()
		{
			if (this.life < this.lifeMax)
			{
				this.friendlyRegen++;
				if (this.dryadWard)
				{
					this.friendlyRegen += 10;
				}
				if (this.friendlyRegen > 180)
				{
					this.friendlyRegen = 0;
					this.life++;
					this.netUpdate = true;
				}
			}
		}

		private void UpdateCollision()
		{
			this.Collision_WalkDownSlopes();
			bool lava = this.Collision_LavaCollision();
			lava = this.Collision_WaterCollision(lava);
			if (!this.wet)
			{
				this.lavaWet = false;
				this.honeyWet = false;
			}
			if (this.wetCount > 0)
			{
				this.wetCount -= 1;
			}
			bool fall = this.Collision_DecideFallThroughPlatforms();
			this.oldVelocity = this.velocity;
			this.collideX = false;
			this.collideY = false;
			this.FishTransformationDuringRain();
			Vector2 cPosition;
			int cWidth;
			int cHeight;
			this.GetTileCollisionParameters(out cPosition, out cWidth, out cHeight);
			Vector2 velocity = this.velocity;
			this.ApplyTileCollision(fall, cPosition, cWidth, cHeight);
			if (this.wet)
			{
				if (this.honeyWet)
				{
					this.Collision_MoveWhileWet(velocity, this.honeyMovementSpeed);
				}
				else if (this.lavaWet)
				{
					this.Collision_MoveWhileWet(velocity, this.lavaMovementSpeed);
				}
				else
				{
					this.Collision_MoveWhileWet(velocity, this.waterMovementSpeed);
				}
			}
			else
			{
				this.Collision_MoveWhileDry();
			}
			if (this.aiStyle == 67)
			{
				this.Collision_MoveSnailOnSlopes();
				return;
			}
			if (this.type != 72 && this.type != 247 && this.type != 248 && (this.type < 542 || this.type > 545) && (!NPCID.Sets.BelongsToInvasionOldOnesArmy[this.type] || !this.noGravity))
			{
				this.Collision_MoveSlopesAndStairFall(fall);
				if (this.townNPC)
				{
					Collision.StepConveyorBelt(this, 1f);
				}
			}
		}

		private void Collision_MoveWhileDry()
		{
			if (Collision.up)
			{
				this.velocity.Y = 0.01f;
			}
			if (this.oldVelocity.X != this.velocity.X)
			{
				this.collideX = true;
			}
			if (this.oldVelocity.Y != this.velocity.Y)
			{
				this.collideY = true;
			}
			this.oldPosition = this.position;
			this.oldDirection = this.direction;
			this.position += this.velocity;
		}

		private void ApplyTileCollision(bool fall, Vector2 cPosition, int cWidth, int cHeight)
		{
			if (this.type == 72)
			{
				this.Collision_MoveBlazingWheel();
				return;
			}
			if (this.type >= 542 && this.type <= 545)
			{
				this.Collision_MoveSandshark(fall, cPosition, cWidth, cHeight);
				return;
			}
			if (this.type == 405 || this.type == 406)
			{
				this.Collision_MoveStardustCell(fall, cPosition, cWidth, cHeight);
				return;
			}
			if (this.type == 417)
			{
				this.Collision_MoveSolarSroller(fall, cPosition, cWidth, cHeight);
				return;
			}
			this.Collision_MoveNormal(fall, cPosition, cWidth, cHeight);
		}

		private void Collision_MoveSlopesAndStairFall(bool fall)
		{
			if (fall)
			{
				this.stairFall = true;
			}
			if (this.aiStyle == 7)
			{
				int num = (int)base.Center.X / 16;
				int num2 = (int)this.position.Y / 16;
				if (WorldGen.InWorld(num, num2, 0))
				{
					int num3 = 16;
					bool flag = false;
					if (Main.tile[num, num2] != null && Main.tile[num, num2].active() && Main.tileSolid[(int)Main.tile[num, num2].type])
					{
						flag = true;
					}
					if (!Main.dayTime || Main.eclipse)
					{
						flag = true;
					}
					else
					{
						int num4 = (int)(this.position.Y + (float)this.height) / 16;
						if (this.homeTileY - num4 > num3)
						{
							flag = true;
						}
					}
					if (flag)
					{
						if ((this.position.Y + (float)this.height - 8f) / 16f < (float)this.homeTileY)
						{
							this.stairFall = true;
						}
						else
						{
							this.stairFall = false;
						}
					}
				}
			}
			Vector2 vector;
			int width;
			int height;
			this.GetTileCollisionParameters(out vector, out width, out height);
			Vector2 value = this.position - vector;
			Vector4 vector2 = Collision.SlopeCollision(vector, this.velocity, width, height, NPC.gravity, this.stairFall);
			if (Collision.stairFall)
			{
				this.stairFall = true;
			}
			else if (!fall)
			{
				this.stairFall = false;
			}
			if (Collision.stair && Math.Abs(vector2.Y - this.position.Y) > 8f)
			{
				this.gfxOffY -= vector2.Y - this.position.Y;
				this.stepSpeed = 2f;
			}
			this.position.X = vector2.X;
			this.position.Y = vector2.Y;
			this.velocity.X = vector2.Z;
			this.velocity.Y = vector2.W;
			this.position += value;
		}

		private void Collision_MoveSnailOnSlopes()
		{
			Vector4 vector = Collision.SlopeCollision(this.position, this.velocity, this.width, this.height, NPC.gravity, false);
			if (this.position.X != vector.X || this.position.Y != vector.Y)
			{
				if (this.ai[2] == 0f && this.velocity.Y > 0f && ((this.direction < 0 && this.rotation == 1.57f && this.spriteDirection == 1) || (this.direction > 0 && this.rotation == 4.71f && this.spriteDirection == -1)))
				{
					this.direction *= -this.direction;
				}
				this.ai[2] = 2f;
				this.directionY = 1;
				this.rotation = 0f;
			}
			this.position.X = vector.X;
			this.position.Y = vector.Y;
			this.velocity.X = vector.Z;
			this.velocity.Y = vector.W;
		}

		private void Collision_MoveNormal(bool fall, Vector2 cPosition, int cWidth, int cHeight)
		{
			this.velocity = Collision.TileCollision(cPosition, this.velocity, cWidth, cHeight, fall, fall, 1);
		}

		private void Collision_MoveSandshark(bool fall, Vector2 cPosition, int cWidth, int cHeight)
		{
			this.velocity = Collision.AdvancedTileCollision(TileID.Sets.ForAdvancedCollision.ForSandshark, cPosition, this.velocity, cWidth, cHeight, fall, fall, 1);
		}

		private void Collision_MoveSolarSroller(bool fall, Vector2 cPosition, int cWidth, int cHeight)
		{
			this.velocity = Collision.TileCollision(cPosition, this.velocity, cWidth, cHeight, fall, fall, 1);
			if (this.ai[0] == 6f && this.velocity != this.oldVelocity)
			{
				this.ai[2] -= 1f;
				this.ai[3] = 1f;
				if (this.ai[2] > 0f)
				{
					if (this.velocity.X != 0f && this.velocity.X != this.oldVelocity.X)
					{
						this.velocity.X = -this.oldVelocity.X * 0.9f;
						this.direction *= -1;
					}
					if (this.velocity.Y != 0f && this.velocity.Y != this.oldVelocity.Y)
					{
						this.velocity.Y = -this.oldVelocity.Y * 0.9f;
					}
				}
			}
		}

		private void Collision_MoveStardustCell(bool fall, Vector2 cPosition, int cWidth, int cHeight)
		{
			this.velocity = Collision.TileCollision(cPosition, this.velocity, cWidth, cHeight, fall, fall, 1);
			if (this.velocity != this.oldVelocity)
			{
				if (this.velocity.X != 0f && this.velocity.X != this.oldVelocity.X)
				{
					this.velocity.X = -this.oldVelocity.X * 0.8f;
				}
				if (this.velocity.Y != 0f && this.velocity.Y != this.oldVelocity.Y)
				{
					this.velocity.Y = -this.oldVelocity.Y * 0.8f;
				}
			}
		}

		private void Collision_MoveBlazingWheel()
		{
			Vector2 position = new Vector2(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2));
			int num = 12;
			int num2 = 12;
			position.X -= (float)(num / 2);
			position.Y -= (float)(num2 / 2);
			this.velocity = Collision.noSlopeCollision(position, this.velocity, num, num2, true, true);
		}

		private void Collision_MoveWaterOrLavaOld(bool fall, Vector2 cPosition, int cWidth, int cHeight)
		{
			Vector2 velocity = this.velocity;
			this.velocity = Collision.TileCollision(cPosition, this.velocity, cWidth, cHeight, fall, fall, 1);
			if (Collision.up)
			{
				this.velocity.Y = 0.01f;
			}
			Vector2 value = this.velocity * 0.5f;
			if (this.velocity.X != velocity.X)
			{
				value.X = this.velocity.X;
				this.collideX = true;
			}
			if (this.velocity.Y != velocity.Y)
			{
				value.Y = this.velocity.Y;
				this.collideY = true;
			}
			this.oldPosition = this.position;
			this.oldDirection = this.direction;
			this.position += value;
		}

		private void Collision_MoveHoneyOld(bool fall, Vector2 cPosition, int cWidth, int cHeight)
		{
			Vector2 velocity = this.velocity;
			this.velocity = Collision.TileCollision(cPosition, this.velocity, cWidth, cHeight, fall, fall, 1);
			if (Collision.up)
			{
				this.velocity.Y = 0.01f;
			}
			Vector2 value = this.velocity * 0.25f;
			if (this.velocity.X != velocity.X)
			{
				value.X = this.velocity.X;
				this.collideX = true;
			}
			if (this.velocity.Y != velocity.Y)
			{
				value.Y = this.velocity.Y;
				this.collideY = true;
			}
			this.oldPosition = this.position;
			this.oldDirection = this.direction;
			this.position += value;
		}

		private void Collision_MoveWhileWet(Vector2 oldDryVelocity, float Slowdown = 0.5f)
		{
			if (Collision.up)
			{
				this.velocity.Y = 0.01f;
			}
			Vector2 value = this.velocity * Slowdown;
			if (this.velocity.X != oldDryVelocity.X)
			{
				value.X = this.velocity.X;
				this.collideX = true;
			}
			if (this.velocity.Y != oldDryVelocity.Y)
			{
				value.Y = this.velocity.Y;
				this.collideY = true;
			}
			this.oldPosition = this.position;
			this.oldDirection = this.direction;
			this.position += value;
		}

		private void GetTileCollisionParameters(out Vector2 cPosition, out int cWidth, out int cHeight)
		{
			cPosition = this.position;
			cWidth = this.width;
			cHeight = this.height;
			if (this.type == 243)
			{
				cHeight = 90;
			}
			if (this.type == 290)
			{
				cHeight = 40;
			}
			if (this.type == 351)
			{
				cHeight = 40;
			}
			if (this.type == 482)
			{
				cHeight = 40;
			}
			if (this.type == 351 || this.type == 343 || this.type == 348 || this.type == 349)
			{
				cHeight = 40;
			}
			if (this.type == 391)
			{
				for (int i = 0; i < 200; i++)
				{
					if (Main.npc[i].active && Main.npc[i].type == 390 && Main.npc[i].ai[0] == (float)this.whoAmI)
					{
						cHeight = 62;
						break;
					}
				}
			}
			if (this.type == 415)
			{
				for (int j = 0; j < 200; j++)
				{
					if (Main.npc[j].active && Main.npc[j].type == 416 && Main.npc[j].ai[0] == (float)this.whoAmI)
					{
						cHeight = 62;
						break;
					}
				}
			}
			if (this.type == 576 || this.type == 577)
			{
				cPosition.X += 32f;
				cWidth -= 64;
			}
			if (cHeight != this.height)
			{
				cPosition.Y += (float)(this.height - cHeight);
			}
		}

		private void FishTransformationDuringRain()
		{
			if (Main.netMode != 1)
			{
				if (this.type == 230 && this.wet)
				{
					int direction = this.direction;
					Vector2 velocity = this.velocity;
					this.Transform(55);
					this.direction = direction;
					this.velocity = velocity;
					this.wet = true;
					if (this.velocity.Y < 0f)
					{
						this.velocity.Y = 0f;
						return;
					}
				}
				else if (this.type == 55 && !this.wet && Main.raining)
				{
					int direction2 = this.direction;
					Vector2 velocity2 = this.velocity;
					this.Transform(230);
					this.direction = direction2;
					this.velocity = velocity2;
					this.homeTileX = (int)(this.position.X / 16f) + 10 * this.direction;
				}
			}
		}

		private bool Collision_DecideFallThroughPlatforms()
		{
			bool result = false;
			if (this.type == 2 || this.type == -43 || this.type == 317 || this.type == 318 || this.type == 133)
			{
				result = true;
			}
			if (this.aiStyle == 10)
			{
				result = true;
			}
			if (this.aiStyle == 40)
			{
				result = true;
			}
			if (this.type == 467)
			{
				result = true;
			}
			if (this.type == 477)
			{
				result = true;
			}
			if (this.aiStyle == 14)
			{
				result = true;
			}
			if (this.type == 173)
			{
				result = true;
			}
			if (this.type == 469 && this.ai[2] == 1f)
			{
				result = true;
			}
			if (this.aiStyle == 3 && this.directionY == 1)
			{
				result = true;
			}
			if (this.type == 210 || this.type == 211)
			{
				result = true;
			}
			if (this.type == 50 && this.target >= 0 && Main.player[this.target].position.Y > this.position.Y + (float)this.height)
			{
				result = true;
			}
			if (this.type == 247 || this.type == 248)
			{
				result = true;
			}
			if (this.type == 245 && this.target >= 0 && Main.player[this.target].position.Y > this.position.Y + (float)this.height)
			{
				result = true;
			}
			if (this.type >= 542 && this.type <= 545)
			{
				result = true;
			}
			if (this.aiStyle == 107 && this.directionY == 1)
			{
				result = true;
			}
			if (this.type == 418)
			{
				result = true;
			}
			if (this.aiStyle == 87 && Main.player[this.target].position.Y > this.position.Y + (float)this.height)
			{
				result = true;
			}
			if (this.aiStyle == 7)
			{
				int num = 16;
				bool flag = false;
				if (!Main.dayTime || Main.invasionType > 0 || Main.eclipse)
				{
					flag = true;
				}
				else
				{
					int num2 = (int)(this.position.Y + (float)this.height) / 16;
					if (this.homeTileY - num2 > num)
					{
						result = true;
					}
				}
				if (flag && (this.position.Y + (float)this.height - 8f) / 16f < (float)(this.homeTileY - 1))
				{
					result = true;
				}
			}
			return result;
		}

		private bool Collision_WaterCollision(bool lava)
		{
			bool flag;
			if (this.type == 72 || this.aiStyle == 21 || this.aiStyle == 67 || this.type == 376 || this.type == 579 || this.type == 541)
			{
				flag = false;
				this.wetCount = 0;
				lava = false;
			}
			else
			{
				flag = Collision.WetCollision(this.position, this.width, this.height);
				if (Collision.honey)
				{
					this.honeyWet = true;
				}
			}
			if (flag)
			{
				if (this.onFire && !this.lavaWet && Main.netMode != 1)
				{
					for (int i = 0; i < 5; i++)
					{
						if (this.buffType[i] == 24)
						{
							this.DelBuff(i);
						}
					}
				}
				if (!this.wet && this.wetCount == 0)
				{
					this.wetCount = 10;
					if (!lava)
					{
						if (this.honeyWet)
						{
							for (int j = 0; j < 10; j++)
							{
								int num = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, 152, 0f, 0f, 0, default(Color), 1f);
								Dust expr_15B_cp_0 = Main.dust[num];
								expr_15B_cp_0.velocity.Y = expr_15B_cp_0.velocity.Y - 1f;
								Dust expr_178_cp_0 = Main.dust[num];
								expr_178_cp_0.velocity.X = expr_178_cp_0.velocity.X * 2.5f;
								Main.dust[num].scale = 1.3f;
								Main.dust[num].alpha = 100;
								Main.dust[num].noGravity = true;
							}
							if (this.aiStyle != 1 && this.type != 1 && this.type != 16 && this.type != 147 && this.type != 59 && this.type != 300 && this.aiStyle != 39 && !this.noGravity)
							{
								Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
							}
						}
						else
						{
							for (int k = 0; k < 30; k++)
							{
								int num2 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, Dust.dustWater(), 0f, 0f, 0, default(Color), 1f);
								Dust expr_2D2_cp_0 = Main.dust[num2];
								expr_2D2_cp_0.velocity.Y = expr_2D2_cp_0.velocity.Y - 4f;
								Dust expr_2F0_cp_0 = Main.dust[num2];
								expr_2F0_cp_0.velocity.X = expr_2F0_cp_0.velocity.X * 2.5f;
								Main.dust[num2].scale *= 0.8f;
								Main.dust[num2].alpha = 100;
								Main.dust[num2].noGravity = true;
							}
							if (this.type != 376 && this.type != 579 && this.aiStyle != 1 && this.type != 1 && this.type != 16 && this.type != 147 && this.type != 59 && this.type != 300 && this.aiStyle != 39 && this.aiStyle != 68 && this.type != 362 && this.type != 364 && this.type != 361 && this.type != 445 && !this.noGravity)
							{
								Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
							}
						}
					}
					else
					{
						for (int l = 0; l < 10; l++)
						{
							int num3 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, 35, 0f, 0f, 0, default(Color), 1f);
							Dust expr_4C1_cp_0 = Main.dust[num3];
							expr_4C1_cp_0.velocity.Y = expr_4C1_cp_0.velocity.Y - 1.5f;
							Dust expr_4DF_cp_0 = Main.dust[num3];
							expr_4DF_cp_0.velocity.X = expr_4DF_cp_0.velocity.X * 2.5f;
							Main.dust[num3].scale = 1.3f;
							Main.dust[num3].alpha = 100;
							Main.dust[num3].noGravity = true;
						}
						if (this.aiStyle != 1 && this.type != 1 && this.type != 16 && this.type != 147 && this.type != 59 && this.type != 300 && this.aiStyle != 39 && !this.noGravity)
						{
							Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						}
					}
				}
				this.wet = true;
			}
			else if (this.wet)
			{
				this.velocity.X = this.velocity.X * 0.5f;
				this.wet = false;
				if (this.wetCount == 0)
				{
					this.wetCount = 10;
					if (!this.lavaWet)
					{
						if (this.honeyWet)
						{
							for (int m = 0; m < 10; m++)
							{
								int num4 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, 152, 0f, 0f, 0, default(Color), 1f);
								Dust expr_680_cp_0 = Main.dust[num4];
								expr_680_cp_0.velocity.Y = expr_680_cp_0.velocity.Y - 1f;
								Dust expr_69E_cp_0 = Main.dust[num4];
								expr_69E_cp_0.velocity.X = expr_69E_cp_0.velocity.X * 2.5f;
								Main.dust[num4].scale = 1.3f;
								Main.dust[num4].alpha = 100;
								Main.dust[num4].noGravity = true;
							}
							if (this.aiStyle != 1 && this.type != 1 && this.type != 16 && this.type != 147 && this.type != 300 && this.type != 59 && this.aiStyle != 39 && !this.noGravity)
							{
								Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
							}
						}
						else
						{
							for (int n = 0; n < 30; n++)
							{
								int num5 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, Dust.dustWater(), 0f, 0f, 0, default(Color), 1f);
								Dust expr_7FE_cp_0 = Main.dust[num5];
								expr_7FE_cp_0.velocity.Y = expr_7FE_cp_0.velocity.Y - 4f;
								Dust expr_81C_cp_0 = Main.dust[num5];
								expr_81C_cp_0.velocity.X = expr_81C_cp_0.velocity.X * 2.5f;
								Main.dust[num5].scale *= 0.8f;
								Main.dust[num5].alpha = 100;
								Main.dust[num5].noGravity = true;
							}
							if (this.type != 376 && this.type != 579 && this.aiStyle != 1 && this.type != 1 && this.type != 16 && this.type != 59 && this.type != 300 && this.aiStyle != 39 && this.aiStyle != 68 && this.type != 362 && this.type != 364 && this.type != 361 && this.type != 445 && !this.noGravity)
							{
								Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
							}
						}
					}
					else
					{
						for (int num6 = 0; num6 < 10; num6++)
						{
							int num7 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, 35, 0f, 0f, 0, default(Color), 1f);
							Dust expr_9DD_cp_0 = Main.dust[num7];
							expr_9DD_cp_0.velocity.Y = expr_9DD_cp_0.velocity.Y - 1.5f;
							Dust expr_9FB_cp_0 = Main.dust[num7];
							expr_9FB_cp_0.velocity.X = expr_9FB_cp_0.velocity.X * 2.5f;
							Main.dust[num7].scale = 1.3f;
							Main.dust[num7].alpha = 100;
							Main.dust[num7].noGravity = true;
						}
						if (this.aiStyle != 1 && this.type != 1 && this.type != 16 && this.type != 59 && this.type != 300 && this.aiStyle != 39 && !this.noGravity)
						{
							Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						}
					}
				}
			}
			return lava;
		}

		private bool Collision_LavaCollision()
		{
			bool flag = Collision.LavaCollision(this.position, this.width, this.height);
			if (flag)
			{
				this.lavaWet = true;
				if (!this.lavaImmune && !this.dontTakeDamage && Main.netMode != 1 && this.immune[255] == 0)
				{
					this.AddBuff(24, 420, false);
					this.immune[255] = 30;
					this.StrikeNPCNoInteraction(50, 0f, 0, false, false, false);
					if (Main.netMode == 2 && Main.netMode != 0)
					{
						NetMessage.SendData(28, -1, -1, "", this.whoAmI, 50f, 0f, 0f, 0, 0, 0);
					}
				}
			}
			return flag;
		}

		private void Collision_WalkDownSlopes()
		{
			float arg_0B_0 = this.velocity.Y;
			Vector4 vector = Collision.WalkDownSlope(this.position, this.velocity, this.width, this.height, NPC.gravity);
			this.position.X = vector.X;
			this.position.Y = vector.Y;
			this.velocity.X = vector.Z;
			this.velocity.Y = vector.W;
		}

		public static void setFireFlyChance()
		{
			if (Main.rand == null)
			{
				Main.rand = new UnifiedRandom((int)DateTime.Now.Ticks);
			}
			if (WorldGen.genRand.Next(9) == 0)
			{
				NPC.fireFlyChance = Main.rand.Next(5, 10);
				NPC.fireFlyFriendly = Main.rand.Next(1, 4);
				NPC.fireFlyMultiple = Main.rand.Next(3, 8);
			}
			else if (WorldGen.genRand.Next(3) == 0)
			{
				NPC.fireFlyChance = 999999;
				NPC.fireFlyFriendly = 999999;
				NPC.fireFlyMultiple = 999999;
			}
			else
			{
				NPC.fireFlyChance = Main.rand.Next(10, 60);
				NPC.fireFlyFriendly = Main.rand.Next(2, 15);
				NPC.fireFlyMultiple = Main.rand.Next(6, 30);
			}
			NPC.butterflyChance = Main.rand.Next(1, 25);
			if (WorldGen.genRand.Next(3) == 0)
			{
				NPC.butterflyChance = 999999;
			}
		}

		public Color GetAlpha(Color newColor)
		{
			float num = (float)(255 - this.alpha) / 255f;
			int num2 = (int)((float)newColor.R * num);
			int num3 = (int)((float)newColor.G * num);
			int num4 = (int)((float)newColor.B * num);
			int num5 = (int)newColor.A - this.alpha;
			if (this.type == 402)
			{
				return new Color(255, 255, 255, 255);
			}
			if (this.type == 484)
			{
				return new Color(250, 250, 250, 200);
			}
			if (this.type >= 542 && this.type <= 545 && num2 + num3 + num4 > 10 && num2 + num3 + num4 >= 60)
			{
				num2 *= 2;
				num3 *= 2;
				num4 *= 2;
				if (num2 > 255)
				{
					num2 = 255;
				}
				if (num3 > 255)
				{
					num3 = 255;
				}
				if (num4 > 255)
				{
					num4 = 255;
				}
			}
			if ((this.type >= 454 && this.type <= 459) || this.type == 521)
			{
				newColor = Color.Lerp(newColor, Color.White, 0.4f);
				newColor.A = 150;
				newColor *= (float)num5 / 255f;
				return newColor;
			}
			if (this.type == 440)
			{
				byte b = 180;
				if (Main.expertMode)
				{
					b = 210;
				}
				b = (byte)((float)b * num);
				return new Color((int)b, (int)b, (int)b, (int)b);
			}
			if (this.type == 516)
			{
				return new Color(this.alpha, this.alpha, this.alpha, this.alpha);
			}
			if (this.type == 522)
			{
				return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 255 - this.alpha);
			}
			if (this.type == 523)
			{
				return new Color(255 - this.alpha, 255 - this.alpha, 255 - this.alpha, 255 - this.alpha);
			}
			if (this.type == 395 || this.type == 519)
			{
				newColor = Color.Lerp(newColor, Color.White, 0.4f);
				return newColor;
			}
			if (this.type == 370 && this.ai[0] != -1f && this.ai[0] < 9f)
			{
				float num6 = MathHelper.Lerp(num, 1f, 0.25f);
				if (num6 > 1f)
				{
					num6 = 1f;
				}
				num4 = (int)((float)newColor.B * num6);
			}
			if (this.type == 30)
			{
				return new Color(250, 250, 250, 100);
			}
			if (this.type == 25 || this.type == 30 || this.type == 59 || this.type == 60)
			{
				return new Color(200, 200, 200, 0);
			}
			if (this.type == 360)
			{
				num2 = (int)newColor.R;
				num3 = (int)newColor.G;
				num4 = (int)newColor.B;
				if (num2 < 75)
				{
					num2 = 75;
				}
				if (num3 < 175)
				{
					num3 = 175;
				}
				if (num4 < 255)
				{
					num4 = 255;
				}
				return new Color(num2, num3, num4, 255);
			}
			if (this.type == 352)
			{
				return new Color(255, 255, 255, 200);
			}
			if (this.type == 72)
			{
				num2 = (int)newColor.R;
				num3 = (int)newColor.G;
				num4 = (int)newColor.B;
			}
			else
			{
				if (this.type == 288)
				{
					return new Color(200, 200, 200, 0);
				}
				if (this.type == 289)
				{
					return new Color(250, 250, 250, 50);
				}
				if (this.type >= 254 && this.type <= 261)
				{
					num4 = 255;
					if (num2 < 100)
					{
						num2 = 100;
					}
					if (num3 < 150)
					{
						num3 = 150;
					}
				}
				else if (this.type == 374)
				{
					num4 = 255;
					if (num2 < 100)
					{
						num2 = 100;
					}
					if (num3 < 150)
					{
						num3 = 150;
					}
				}
				else
				{
					if (this.type == 549)
					{
						newColor = Color.Lerp(newColor, Color.White, 0.4f);
						newColor *= (float)num5 / 255f;
						return newColor;
					}
					if (this.type == 64 || this.type == 63 || this.type == 75 || this.type == 103 || this.type == 400)
					{
						num2 = (int)((double)newColor.R * 1.5);
						num3 = (int)((double)newColor.G * 1.5);
						num4 = (int)((double)newColor.B * 1.5);
						if (num2 > 255)
						{
							num2 = 255;
						}
						if (num3 > 255)
						{
							num3 = 255;
						}
						if (num4 > 255)
						{
							num4 = 255;
						}
					}
				}
			}
			if (num5 < 0)
			{
				num5 = 0;
			}
			if (num5 > 255)
			{
				num5 = 255;
			}
			return new Color(num2, num3, num4, num5);
		}

		public Color GetColor(Color newColor)
		{
			int num = (int)(this.color.R - (255 - newColor.R));
			int num2 = (int)(this.color.G - (255 - newColor.G));
			int num3 = (int)(this.color.B - (255 - newColor.B));
			int num4 = (int)(this.color.A - (255 - newColor.A));
			if (num < 0)
			{
				num = 0;
			}
			if (num > 255)
			{
				num = 255;
			}
			if (num2 < 0)
			{
				num2 = 0;
			}
			if (num2 > 255)
			{
				num2 = 255;
			}
			if (num3 < 0)
			{
				num3 = 0;
			}
			if (num3 > 255)
			{
				num3 = 255;
			}
			if (num4 < 0)
			{
				num4 = 0;
			}
			if (num4 > 255)
			{
				num4 = 255;
			}
			return new Color(num, num2, num3, num4);
		}

		public string GetChat()
		{
			Recipe.FindRecipes();
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			bool flag5 = false;
			bool flag6 = false;
			bool flag7 = false;
			bool flag8 = false;
			bool flag9 = false;
			bool flag10 = false;
			bool flag11 = false;
			bool flag12 = false;
			bool flag13 = false;
			bool flag14 = false;
			bool flag15 = false;
			bool flag16 = false;
			object obj = Lang.CreateDialogSubstitutionObject(this);
			bool flag17 = false;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active)
				{
					if (Main.npc[i].type == 17)
					{
						flag = true;
					}
					else if (Main.npc[i].type == 18)
					{
						flag2 = true;
					}
					else if (Main.npc[i].type == 19)
					{
						flag3 = true;
					}
					else if (Main.npc[i].type == 20)
					{
						flag4 = true;
					}
					else if (Main.npc[i].type == 37)
					{
						flag5 = true;
					}
					else if (Main.npc[i].type == 38)
					{
						flag6 = true;
					}
					else if (Main.npc[i].type == 124)
					{
						flag7 = true;
					}
					else if (Main.npc[i].type == 107)
					{
						flag8 = true;
					}
					else if (Main.npc[i].type == 54)
					{
						flag9 = true;
					}
					else if (Main.npc[i].type == 160)
					{
						flag10 = true;
					}
					else if (Main.npc[i].type == 178)
					{
						flag11 = true;
					}
					else if (Main.npc[i].type == 229)
					{
						flag12 = true;
					}
					else if (Main.npc[i].type == 209)
					{
						flag13 = true;
					}
					else if (Main.npc[i].type == 208)
					{
						flag14 = true;
					}
					else if (Main.npc[i].type == 353)
					{
						flag15 = true;
					}
					else if (Main.npc[i].type == 22)
					{
						flag16 = true;
					}
					else if (Main.npc[i].type == 2)
					{
						flag17 = true;
					}
					else
					{
						int arg_210_0 = Main.npc[i].type;
					}
				}
			}
			string result = "";
			if (this.type == 17)
			{
				if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
				{
					result = Lang.GetBirthdayDialog(this, false);
				}
				else if (!NPC.downedBoss1 && Main.rand.Next(3) == 0)
				{
					if (Main.player[Main.myPlayer].statLifeMax < 200)
					{
						result = Lang.dialog(1, false);
					}
					else if (Main.player[Main.myPlayer].statDefense <= 10)
					{
						result = Lang.dialog(2, false);
					}
					else
					{
						result = Lang.dialog(3, false);
					}
				}
				else if (Main.dayTime)
				{
					if (Main.time < 16200.0)
					{
						int num = Main.rand.Next(3);
						if (num == 0)
						{
							result = Lang.dialog(4, false);
						}
						else if (num == 1)
						{
							result = Lang.dialog(5, false);
						}
						else
						{
							result = Lang.dialog(6, false);
						}
					}
					else if (Main.time > 37800.0)
					{
						int num2 = Main.rand.Next(3);
						if (num2 == 0)
						{
							result = Lang.dialog(7, false);
						}
						else if (num2 == 1)
						{
							result = Lang.dialog(8, false);
						}
						else
						{
							result = Lang.dialog(9, false);
						}
					}
					else
					{
						int num3 = Main.rand.Next(3);
						if (num3 == 0)
						{
							result = Lang.dialog(10, false);
						}
						else if (num3 == 1)
						{
							result = Lang.dialog(11, false);
						}
						else
						{
							result = Lang.dialog(12, false);
						}
					}
				}
				else if (Main.bloodMoon)
				{
					if (flag2 && flag7 && Main.rand.Next(3) == 0)
					{
						result = Lang.dialog(13, false);
					}
					else
					{
						int num4 = Main.rand.Next(4);
						if (num4 == 0)
						{
							result = Lang.dialog(14, false);
						}
						else if (num4 == 1)
						{
							result = Lang.dialog(15, false);
						}
						else if (num4 == 2)
						{
							result = Lang.dialog(16, false);
						}
						else
						{
							result = Lang.dialog(17, false);
						}
					}
				}
				else if (Main.time < 9720.0)
				{
					if (Main.rand.Next(2) == 0)
					{
						result = Lang.dialog(18, false);
					}
					else
					{
						result = Lang.dialog(19, false);
					}
				}
				else if (Main.time > 22680.0)
				{
					if (Main.rand.Next(2) == 0)
					{
						result = Lang.dialog(20, false);
					}
					else
					{
						result = Lang.dialog(21, false);
					}
				}
				else
				{
					int num5 = Main.rand.Next(3);
					if (num5 == 0)
					{
						result = Lang.dialog(22, false);
					}
					else if (num5 == 1)
					{
						result = Lang.dialog(23, false);
					}
					else
					{
						result = Lang.dialog(24, false);
					}
				}
			}
			else if (this.type == 18)
			{
				if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
				{
					result = Lang.GetBirthdayDialog(this, false);
				}
				else if (Main.bloodMoon)
				{
					if ((double)Main.player[Main.myPlayer].statLife < (double)Main.player[Main.myPlayer].statLifeMax2 * 0.66)
					{
						int num6 = Main.rand.Next(3);
						if (num6 == 0)
						{
							result = Lang.dialog(25, false);
						}
						else if (num6 == 1)
						{
							result = Lang.dialog(26, false);
						}
						else
						{
							result = Lang.dialog(27, false);
						}
					}
					else
					{
						int num7 = Main.rand.Next(4);
						if (num7 == 0)
						{
							result = Lang.dialog(28, false);
						}
						else if (num7 == 1)
						{
							result = Lang.dialog(29, false);
						}
						else if (num7 == 2)
						{
							result = Lang.dialog(30, false);
						}
						else
						{
							result = Lang.dialog(31, false);
						}
					}
				}
				else if (Main.rand.Next(3) == 0 && !NPC.downedBoss3)
				{
					result = Lang.dialog(32, false);
				}
				else if (flag6 && Main.rand.Next(4) == 0)
				{
					result = Lang.dialog(33, false);
				}
				else if (flag3 && Main.rand.Next(4) == 0)
				{
					result = Lang.dialog(34, false);
				}
				else if (flag17 && Main.rand.Next(4) == 0)
				{
					result = Lang.dialog(35, false);
				}
				else if ((double)Main.player[Main.myPlayer].statLife < (double)Main.player[Main.myPlayer].statLifeMax2 * 0.33)
				{
					int num8 = Main.rand.Next(5);
					if (num8 == 0)
					{
						result = Lang.dialog(36, false);
					}
					else if (num8 == 1)
					{
						result = Lang.dialog(37, false);
					}
					else if (num8 == 2)
					{
						result = Lang.dialog(38, false);
					}
					else if (num8 == 3)
					{
						result = Lang.dialog(39, false);
					}
					else
					{
						result = Lang.dialog(40, false);
					}
				}
				else if ((double)Main.player[Main.myPlayer].statLife < (double)Main.player[Main.myPlayer].statLifeMax2 * 0.66)
				{
					int num9 = Main.rand.Next(7);
					if (num9 == 0)
					{
						result = Lang.dialog(41, false);
					}
					else if (num9 == 1)
					{
						result = Lang.dialog(42, false);
					}
					else if (num9 == 2)
					{
						result = Lang.dialog(43, false);
					}
					else if (num9 == 3)
					{
						result = Lang.dialog(44, false);
					}
					else if (num9 == 4)
					{
						result = Lang.dialog(45, false);
					}
					else if (num9 == 5)
					{
						result = Lang.dialog(46, false);
					}
					else
					{
						result = Lang.dialog(47, false);
					}
				}
				else
				{
					LocalizedText[] array = Language.FindAll(Lang.CreateDialogFilter("NurseChatter.", obj));
					int num10 = Main.rand.Next(4 + array.Length);
					if (num10 >= 4)
					{
						result = array[num10 - 4].FormatWith(obj);
					}
					else if (num10 == 0)
					{
						result = Lang.dialog(48, false);
					}
					else if (num10 == 1)
					{
						result = Lang.dialog(49, false);
					}
					else if (num10 == 2)
					{
						result = Lang.dialog(50, false);
					}
					else
					{
						result = Lang.dialog(51, false);
					}
				}
			}
			else if (this.type == 19)
			{
				if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
				{
					result = Lang.GetBirthdayDialog(this, false);
				}
				else if (NPC.downedBoss3 && !Main.hardMode)
				{
					result = Lang.dialog(58, false);
				}
				else if (flag2 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(59, false);
				}
				else if (flag2 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(60, false);
				}
				else if (flag4 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(61, false);
				}
				else if (flag6 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(62, false);
				}
				else if (flag6 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(63, false);
				}
				else if (Main.bloodMoon)
				{
					if (Main.rand.Next(2) == 0)
					{
						result = Lang.dialog(64, false);
					}
					else
					{
						result = Lang.dialog(65, false);
					}
				}
				else
				{
					int num11 = Main.rand.Next(3);
					if (num11 == 0)
					{
						result = Lang.dialog(66, false);
					}
					else if (num11 == 1)
					{
						result = Lang.dialog(67, false);
					}
					else
					{
						result = Lang.dialog(68, false);
					}
				}
			}
			else if (this.type == 20)
			{
				if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
				{
					result = Lang.GetBirthdayDialog(this, false);
				}
				else if (DD2Event.DownedInvasionT1 && Main.rand.Next(6) == 0)
				{
					if (DD2Event.DownedInvasionT2)
					{
						result = Language.GetTextValueWith("DryadSpecialText.AfterDD2Tier2", obj);
					}
					else
					{
						result = Language.GetTextValueWith("DryadSpecialText.AfterDD2Tier1", obj);
					}
				}
				else if (!NPC.downedBoss2 && Main.rand.Next(3) == 0)
				{
					if (WorldGen.crimson)
					{
						result = Lang.dialog(332, false);
					}
					else
					{
						result = Lang.dialog(69, false);
					}
				}
				else if (flag3 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(70, false);
				}
				else if (flag && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(71, false);
				}
				else if (flag5 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(72, false);
				}
				else if (flag10 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(238, false);
				}
				else if (Main.bloodMoon)
				{
					int num12 = Main.rand.Next(4);
					if (num12 == 0)
					{
						result = Lang.dialog(73, false);
					}
					else if (num12 == 1)
					{
						result = Lang.dialog(74, false);
					}
					else if (num12 == 2)
					{
						result = Lang.dialog(75, false);
					}
					else
					{
						result = Lang.dialog(76, false);
					}
				}
				else
				{
					int num13 = Main.rand.Next(5);
					if (num13 == 0)
					{
						if (WorldGen.crimson)
						{
							result = Lang.dialog(333, false);
						}
						else
						{
							result = Lang.dialog(77, false);
						}
					}
					else if (num13 == 1)
					{
						result = Lang.dialog(78, false);
					}
					else if (num13 == 2)
					{
						result = Lang.dialog(79, false);
					}
					else if (num13 == 3)
					{
						result = Lang.dialog(80, false);
					}
					else
					{
						result = Lang.dialog(81, false);
					}
				}
			}
			else if (this.type == 37)
			{
				if (Main.dayTime)
				{
					int num14 = Main.rand.Next(3);
					if (num14 == 0)
					{
						result = Lang.dialog(82, false);
					}
					else if (num14 == 1)
					{
						result = Lang.dialog(83, false);
					}
					else
					{
						result = Lang.dialog(84, false);
					}
				}
				else if (Main.player[Main.myPlayer].statLifeMax < 300 || Main.player[Main.myPlayer].statDefense < 10)
				{
					int num15 = Main.rand.Next(4);
					if (num15 == 0)
					{
						result = Lang.dialog(85, false);
					}
					else if (num15 == 1)
					{
						result = Lang.dialog(86, false);
					}
					else if (num15 == 2)
					{
						result = Lang.dialog(87, false);
					}
					else
					{
						result = Lang.dialog(88, false);
					}
				}
				else
				{
					int num16 = Main.rand.Next(4);
					if (num16 == 0)
					{
						result = Lang.dialog(89, false);
					}
					else if (num16 == 1)
					{
						result = Lang.dialog(90, false);
					}
					else if (num16 == 2)
					{
						result = Lang.dialog(91, false);
					}
					else
					{
						result = Lang.dialog(92, false);
					}
				}
			}
			else if (this.type == 38)
			{
				if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
				{
					result = Lang.GetBirthdayDialog(this, false);
				}
				else if (!NPC.downedBoss2 && Main.rand.Next(3) == 0)
				{
					result = Lang.dialog(93, false);
				}
				else if (Main.bloodMoon)
				{
					int num17 = Main.rand.Next(3);
					if (num17 == 0)
					{
						result = Lang.dialog(94, false);
					}
					else if (num17 == 1)
					{
						result = Lang.dialog(95, false);
					}
					else
					{
						result = Lang.dialog(96, false);
					}
				}
				else if ((DD2Event.DownedInvasionT1 || DD2Event.Ongoing) && Main.rand.Next(5) == 0)
				{
					result = Language.GetTextValueWith("DemolitionistSpecialText.AfterDD2Start", obj);
				}
				else if (flag3 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(97, false);
				}
				else if (flag3 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(98, false);
				}
				else if (flag2 && Main.rand.Next(4) == 0)
				{
					result = Lang.dialog(99, false);
				}
				else if (flag4 && Main.rand.Next(4) == 0)
				{
					result = Lang.dialog(100, false);
				}
				else if (!Main.dayTime)
				{
					int num18 = Main.rand.Next(4);
					if (num18 == 0)
					{
						result = Lang.dialog(101, false);
					}
					else if (num18 == 1)
					{
						result = Lang.dialog(102, false);
					}
					else if (num18 == 2)
					{
						result = Lang.dialog(103, false);
					}
					else
					{
						result = Lang.dialog(104, false);
					}
				}
				else
				{
					int num19 = Main.rand.Next(5);
					if (num19 == 0)
					{
						result = Lang.dialog(105, false);
					}
					else if (num19 == 1)
					{
						result = Lang.dialog(106, false);
					}
					else if (num19 == 2)
					{
						result = Lang.dialog(107, false);
					}
					else if (num19 == 3)
					{
						result = Lang.dialog(108, false);
					}
					else
					{
						result = Lang.dialog(109, false);
					}
				}
			}
			else if (this.type == 54)
			{
				if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
				{
					result = Lang.GetBirthdayDialog(this, false);
				}
				else if (!flag7 && Main.rand.Next(2) == 0)
				{
					result = Lang.dialog(110, false);
				}
				else if (flag10 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(237, false);
				}
				else if (Main.bloodMoon)
				{
					result = Lang.dialog(111, false);
				}
				else if (flag2 && Main.rand.Next(4) == 0)
				{
					result = Lang.dialog(112, false);
				}
				else if (Main.player[Main.myPlayer].head == 24)
				{
					result = Lang.dialog(113, false);
				}
				else
				{
					int num20 = Main.rand.Next(6);
					if (num20 == 0)
					{
						result = Lang.dialog(114, false);
					}
					else if (num20 == 1)
					{
						result = Lang.dialog(115, false);
					}
					else if (num20 == 2)
					{
						result = Lang.dialog(116, false);
					}
					else if (num20 == 3)
					{
						result = Lang.dialog(117, false);
					}
					else if (num20 == 4)
					{
						result = Lang.dialog(118, false);
					}
					else
					{
						result = Lang.dialog(119, false);
					}
				}
			}
			else if (this.type == 105)
			{
				result = Lang.dialog(120, false);
			}
			else if (this.type == 107)
			{
				if (this.homeless)
				{
					int num21 = Main.rand.Next(5);
					if (num21 == 0)
					{
						result = Lang.dialog(121, false);
					}
					else if (num21 == 1)
					{
						result = Lang.dialog(122, false);
					}
					else if (num21 == 2)
					{
						result = Lang.dialog(123, false);
					}
					else if (num21 == 3)
					{
						result = Lang.dialog(124, false);
					}
					else
					{
						result = Lang.dialog(125, false);
					}
				}
				else if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
				{
					result = Lang.GetBirthdayDialog(this, false);
				}
				else if (flag7 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(126, false);
				}
				else if (flag15 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(309, false);
				}
				else
				{
					LocalizedText[] array2 = Language.FindAll(Lang.CreateDialogFilter("GoblinTinkererChatter.", obj));
					int num22 = Main.rand.Next(array2.Length + 5);
					if (num22 >= 5)
					{
						result = array2[num22 - 5].FormatWith(obj);
					}
					else if (!Main.dayTime)
					{
						if (num22 == 0)
						{
							result = Lang.dialog(127, false);
						}
						else if (num22 == 1)
						{
							result = Lang.dialog(128, false);
						}
						else if (num22 == 2)
						{
							result = Lang.dialog(129, false);
						}
						else if (num22 == 3)
						{
							result = Lang.dialog(130, false);
						}
						else
						{
							result = Lang.dialog(131, false);
						}
					}
					else if (num22 == 0)
					{
						result = Lang.dialog(132, false);
					}
					else if (num22 == 1)
					{
						result = Lang.dialog(133, false);
					}
					else if (num22 == 2)
					{
						result = Lang.dialog(134, false);
					}
					else if (num22 == 3)
					{
						result = Lang.dialog(135, false);
					}
					else
					{
						result = Lang.dialog(136, false);
					}
				}
			}
			else if (this.type == 106)
			{
				result = Lang.dialog(137, false);
			}
			else if (this.type == 108)
			{
				if (this.homeless)
				{
					int num23 = Main.rand.Next(3);
					if (num23 == 0)
					{
						result = Lang.dialog(138, false);
					}
					else if (num23 == 1 && !Main.player[Main.myPlayer].Male)
					{
						result = Lang.dialog(139, false);
					}
					else if (num23 == 1)
					{
						result = Lang.dialog(140, false);
					}
					else if (num23 == 2)
					{
						result = Lang.dialog(141, false);
					}
				}
				else if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
				{
					result = Lang.GetBirthdayDialog(this, false);
				}
				else if (DD2Event.DownedInvasionT1 && Main.rand.Next(6) == 0)
				{
					result = Language.GetTextValueWith("WizardSpecialText.AfterDD2Tier1", obj);
				}
				else if (Main.player[Main.myPlayer].Male && flag17 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(142, false);
				}
				else if (Main.player[Main.myPlayer].Male && flag6 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(143, false);
				}
				else if (Main.player[Main.myPlayer].Male && flag8 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(144, false);
				}
				else if (!Main.player[Main.myPlayer].Male && flag2 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(145, false);
				}
				else if (!Main.player[Main.myPlayer].Male && flag7 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(146, false);
				}
				else if (!Main.player[Main.myPlayer].Male && flag4 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(147, false);
				}
				else if (!Main.dayTime)
				{
					int num24 = Main.rand.Next(3);
					if (num24 == 0)
					{
						result = Lang.dialog(148, false);
					}
					else if (num24 == 1)
					{
						result = Lang.dialog(149, false);
					}
					else if (num24 == 2)
					{
						result = Lang.dialog(150, false);
					}
				}
				else
				{
					int num25 = Main.rand.Next(5);
					if (num25 == 0)
					{
						result = Lang.dialog(151, false);
					}
					else if (num25 == 1)
					{
						result = Lang.dialog(152, false);
					}
					else if (num25 == 2)
					{
						result = Lang.dialog(153, false);
					}
					else if (num25 == 3)
					{
						result = Lang.dialog(154, false);
					}
					else
					{
						result = Lang.dialog(155, false);
					}
				}
			}
			else if (this.type == 123)
			{
				result = Lang.dialog(156, false);
			}
			else if (this.type == 124)
			{
				if (this.homeless)
				{
					int num26 = Main.rand.Next(4);
					if (num26 == 0)
					{
						result = Lang.dialog(157, false);
					}
					else if (num26 == 1)
					{
						result = Lang.dialog(158, false);
					}
					else if (num26 == 2)
					{
						result = Lang.dialog(159, false);
					}
					else
					{
						result = Lang.dialog(160, false);
					}
				}
				else if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
				{
					result = Lang.GetBirthdayDialog(this, false);
				}
				else if (Main.bloodMoon)
				{
					int num27 = Main.rand.Next(4);
					if (num27 == 0)
					{
						result = Lang.dialog(161, false);
					}
					else if (num27 == 1)
					{
						result = Lang.dialog(162, false);
					}
					else if (num27 == 2)
					{
						result = Lang.dialog(163, false);
					}
					else
					{
						result = Lang.dialog(164, false);
					}
				}
				else if (flag8 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(165, false);
				}
				else if (flag3 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(166, false);
				}
				else
				{
					LocalizedText[] array3 = Language.FindAll(Lang.CreateDialogFilter("MechanicChatter.", obj));
					int num28 = Main.rand.Next(3 + array3.Length);
					if (num28 >= 3)
					{
						result = array3[num28 - 3].FormatWith(obj);
					}
					else if (num28 == 0)
					{
						result = Lang.dialog(167, false);
					}
					else if (num28 == 1)
					{
						result = Lang.dialog(168, false);
					}
					else
					{
						result = Lang.dialog(169, false);
					}
				}
			}
			else if (this.type == 22)
			{
				if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
				{
					result = Lang.GetBirthdayDialog(this, false);
				}
				else if (Main.bloodMoon)
				{
					int num29 = Main.rand.Next(3);
					if (num29 == 0)
					{
						result = Lang.dialog(170, false);
					}
					else if (num29 == 1)
					{
						result = Lang.dialog(171, false);
					}
					else
					{
						result = Lang.dialog(172, false);
					}
				}
				else if (!Main.dayTime)
				{
					result = Lang.dialog(173, false);
				}
				else
				{
					int num30 = Main.rand.Next(3);
					if (num30 == 0)
					{
						result = Lang.dialog(174, false);
					}
					else if (num30 == 1)
					{
						result = Lang.dialog(175, false);
					}
					else
					{
						result = Lang.dialog(176, false);
					}
				}
			}
			else if (this.type == 142)
			{
				int num31 = Main.rand.Next(3);
				if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
				{
					result = Lang.GetBirthdayDialog(this, false);
				}
				else if (num31 == 0)
				{
					result = Lang.dialog(224, false);
				}
				else if (num31 == 1)
				{
					result = Lang.dialog(225, false);
				}
				else if (num31 == 2)
				{
					result = Lang.dialog(226, false);
				}
			}
			else if (this.type == 160)
			{
				int num32 = Main.rand.Next(6);
				if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
				{
					result = Lang.GetBirthdayDialog(this, false);
				}
				else if (flag4 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(232, false);
				}
				else if (flag9 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(236, false);
				}
				else if (num32 == 0)
				{
					result = Lang.dialog(231, false);
				}
				else if (num32 == 1)
				{
					result = Lang.dialog(233, false);
				}
				else if (num32 == 2)
				{
					result = Lang.dialog(234, false);
				}
				else if (num32 == 3)
				{
					result = Lang.dialog(235, false);
				}
				else if (num32 == 4)
				{
					result = Lang.dialog(240, false);
				}
				else if (num32 == 5)
				{
					result = Lang.dialog(241, false);
				}
			}
			else if (this.type == 178)
			{
				int num33 = Main.rand.Next(5);
				if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
				{
					result = Lang.GetBirthdayDialog(this, false);
				}
				else if (Main.bloodMoon && Main.rand.Next(3) == 0)
				{
					result = Lang.dialog(245, false);
				}
				else if (flag13 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(246, false);
				}
				else if (flag12 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(247, false);
				}
				else if (num33 == 0)
				{
					result = Lang.dialog(242, false);
				}
				else if (num33 == 1)
				{
					result = Lang.dialog(243, false);
				}
				else if (num33 == 2)
				{
					result = Lang.dialog(244, false);
				}
				else if (num33 == 3)
				{
					result = Lang.dialog(248, false);
				}
				else if (num33 == 4)
				{
					result = Lang.dialog(249, false);
				}
			}
			else if (this.type == 207)
			{
				int num34 = Main.rand.Next(3);
				if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
				{
					result = Lang.GetBirthdayDialog(this, false);
				}
				else if (flag12 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(260, false);
				}
				else if (num34 == 0)
				{
					result = Lang.dialog(257, false);
				}
				else if (num34 == 1)
				{
					result = Lang.dialog(258, false);
				}
				else if (num34 == 2)
				{
					result = Lang.dialog(259, false);
				}
			}
			else if (this.type == 208)
			{
				int num35 = Main.rand.Next(7);
				if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
				{
					result = Lang.GetBirthdayDialog(this, false);
				}
				else if (DD2Event.DownedInvasionT1 && Main.rand.Next(5) == 0)
				{
					result = Language.GetTextValueWith("PartyGirlSpecialText.AfterDD2Tier1", obj);
				}
				else if (Main.player[Main.myPlayer].Male && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(268, false);
				}
				else if (flag15 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(310, false);
				}
				else if (num35 == 0)
				{
					result = Lang.dialog(265, false);
				}
				else if (num35 == 1)
				{
					result = Lang.dialog(266, false);
				}
				else if (num35 == 2)
				{
					result = Lang.dialog(267, false);
				}
				else if (num35 == 3)
				{
					result = Lang.dialog(269, false);
				}
				else if (num35 == 4)
				{
					result = Lang.dialog(270, false);
				}
				else if (num35 == 5)
				{
					result = Lang.dialog(271, false);
				}
				else if (num35 == 6)
				{
					result = Lang.dialog(272, false);
				}
			}
			else if (this.type == 209)
			{
				if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
				{
					result = Lang.GetBirthdayDialog(this, false);
				}
				else if (flag12 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(284, false);
				}
				else if (flag11 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(283, false);
				}
				else
				{
					LocalizedText[] array4 = Language.FindAll(Lang.CreateDialogFilter("CyborgChatter.", obj));
					int num36 = Main.rand.Next(5 + array4.Length);
					if (num36 >= 5)
					{
						result = array4[num36 - 5].FormatWith(obj);
					}
					else if (num36 == 0)
					{
						result = Lang.dialog(280, false);
					}
					else if (num36 == 1)
					{
						result = Lang.dialog(281, false);
					}
					else if (num36 == 2)
					{
						result = Lang.dialog(282, false);
					}
					else if (num36 == 3)
					{
						result = Lang.dialog(285, false);
					}
					else if (num36 == 4)
					{
						result = Lang.dialog(286, false);
					}
				}
			}
			else if (this.type == 227)
			{
				int num37 = Main.rand.Next(5);
				if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
				{
					result = Lang.GetBirthdayDialog(this, false);
				}
				else if (Main.hardMode && Main.rand.Next(7) == 0)
				{
					result = Lang.dialog(250, false);
				}
				else if (flag14 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(251, false);
				}
				else if (num37 == 0)
				{
					result = Lang.dialog(252, false);
				}
				else if (num37 == 1)
				{
					result = Lang.dialog(253, false);
				}
				else if (num37 == 2)
				{
					result = Lang.dialog(254, false);
				}
				else if (num37 == 3)
				{
					result = Lang.dialog(255, false);
				}
				else if (num37 == 4)
				{
					result = Lang.dialog(256, false);
				}
			}
			else if (this.type == 228)
			{
				int num38 = Main.rand.Next(4);
				if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
				{
					result = Lang.GetBirthdayDialog(this, false);
				}
				else if (flag2 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(263, false);
				}
				else if (num38 == 0)
				{
					result = Lang.dialog(261, false);
				}
				else if (num38 == 1)
				{
					result = Lang.dialog(262, false);
				}
				else if (num38 == 2)
				{
					result = Lang.dialog(264, false);
				}
				else if (num38 == 3)
				{
					result = Language.GetTextValueWith("WitchDoctorSpecialText.AfterDD2Tier1", obj);
				}
			}
			else if (this.type == 229)
			{
				LocalizedText[] array5 = Language.FindAll(Lang.CreateDialogFilter("PirateChatter.", obj));
				int num39 = Main.rand.Next(6 + array5.Length);
				if (num39 >= 6)
				{
					result = array5[num39 - 6].FormatWith(obj);
				}
				else if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
				{
					result = Lang.GetBirthdayDialog(this, false);
				}
				else if (!Main.player[Main.myPlayer].Male && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(276, false);
				}
				else if (num39 == 0)
				{
					result = Lang.dialog(273, false);
				}
				else if (num39 == 1)
				{
					result = Lang.dialog(274, false);
				}
				else if (num39 == 2)
				{
					result = Lang.dialog(275, false);
				}
				else if (num39 == 3)
				{
					result = Lang.dialog(277, false);
				}
				else if (num39 == 4)
				{
					result = Lang.dialog(278, false);
				}
				else if (num39 == 5)
				{
					result = Lang.dialog(279, false);
				}
			}
			else if (this.type == 354)
			{
				result = Lang.dialog(Main.rand.Next(315, 319), false);
			}
			else if (this.type == 353)
			{
				if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
				{
					result = Lang.GetBirthdayDialog(this, false);
				}
				else if (Main.bloodMoon)
				{
					int num40 = Main.rand.Next(3);
					if (num40 == 0)
					{
						result = Lang.dialog(304, false);
					}
					else if (num40 == 1)
					{
						result = Lang.dialog(305, false);
					}
					else if (num40 == 2)
					{
						result = Lang.dialog(306, false);
					}
				}
				else if (Main.dayTime && Main.time < 16200.0 && Main.rand.Next(3) == 0)
				{
					result = Lang.dialog(311, false);
				}
				else if (Main.player[Main.myPlayer].Male && Main.rand.Next(3) == 0)
				{
					int num41 = Main.rand.Next(2);
					if (num41 == 0)
					{
						result = Lang.dialog(293, false);
					}
					else if (num41 == 1)
					{
						result = Lang.dialog(300, false);
					}
				}
				else if (!Main.player[Main.myPlayer].Male && Main.rand.Next(3) == 0)
				{
					int num42 = Main.rand.Next(3);
					if (num42 == 0)
					{
						result = Lang.dialog(291, false);
					}
					else if (num42 == 1)
					{
						result = Lang.dialog(292, false);
					}
					else if (num42 == 2)
					{
						result = Lang.dialog(312, false);
					}
				}
				else if (flag14 && flag7 && flag2 && flag3 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(307, false);
				}
				else if (flag14 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(302, false);
				}
				else if (flag6 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(303, false);
				}
				else if (flag13 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(308, false);
				}
				else
				{
					LocalizedText[] array6 = Language.FindAll(Lang.CreateDialogFilter("StylistChatter.", obj));
					int num43 = (Main.moonPhase < 3) ? 5 : 4;
					int num44 = Main.rand.Next(num43 + array6.Length);
					if (num44 >= num43)
					{
						result = array6[num44 - num43].FormatWith(obj);
					}
					else if (Main.moonPhase < 3)
					{
						if (num44 == 0)
						{
							result = Lang.dialog(287, false);
						}
						else if (num44 == 1)
						{
							result = Lang.dialog(288, false);
						}
						else if (num44 == 2)
						{
							result = Lang.dialog(289, false);
						}
						else if (num44 == 3)
						{
							result = Lang.dialog(290, false);
						}
						else if (num44 == 4)
						{
							result = Lang.dialog(294, false);
						}
					}
					else if (Main.moonPhase < 6)
					{
						if (num44 == 0)
						{
							result = Lang.dialog(295, false);
						}
						else if (num44 == 1)
						{
							result = Lang.dialog(296, false);
						}
						else if (num44 == 2)
						{
							result = Lang.dialog(297, false);
						}
						else if (num44 == 3)
						{
							result = Lang.dialog(298, false);
						}
					}
					else if (num44 == 0)
					{
						result = Lang.dialog(299, false);
					}
					else if (num44 == 1)
					{
						result = Lang.dialog(301, false);
					}
					else if (num44 == 2)
					{
						result = Lang.dialog(313, false);
					}
					else if (num44 == 3)
					{
						result = Lang.dialog(314, false);
					}
				}
			}
			else if (this.type == 368)
			{
				if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
				{
					result = Lang.GetBirthdayDialog(this, false);
				}
				else if (flag16 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(319, false);
				}
				else if (flag && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(320, false);
				}
				else if (flag9 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(321, false);
				}
				else
				{
					result = Lang.dialog(Main.rand.Next(322, 331), false);
				}
			}
			else if (this.type == 376)
			{
				result = Lang.dialog(Main.rand.Next(353, 356), false);
			}
			else if (this.type == 369)
			{
				if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
				{
					result = Lang.GetBirthdayDialog(this, false);
				}
				else if (Main.bloodMoon)
				{
					if (!Main.anglerQuestFinished)
					{
						result = Lang.dialog(Main.rand.Next(348, 350), false);
					}
					else
					{
						result = Lang.dialog(Main.rand.Next(350, 353), false);
					}
				}
				else if (!Main.anglerQuestFinished)
				{
					result = Lang.dialog(Main.rand.Next(334, 338), false);
				}
				else if (flag4 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(347, false);
				}
				else
				{
					LocalizedText[] array7 = Language.FindAll(Lang.CreateDialogFilter("AnglerChatter.", obj));
					int num45 = Main.rand.Next(array7.Length + 9);
					if (num45 >= 9)
					{
						result = array7[num45 - 9].FormatWith(obj);
					}
					else
					{
						result = Lang.dialog(338 + num45, false);
					}
				}
			}
			else if (this.type == 453)
			{
				result = Lang.dialog(Main.rand.Next(356, 364), false);
			}
			else if (this.type == 441)
			{
				if (Main.rand.Next(6) == 0 && flag4)
				{
					result = Lang.dialog(371, false);
				}
				else if (Main.rand.Next(6) == 0 && flag3)
				{
					result = Lang.dialog(372, false);
				}
				else if (Main.rand.Next(6) == 0 && flag6)
				{
					result = Lang.dialog(373, false);
				}
				else if (Main.rand.Next(6) == 0 && flag)
				{
					result = Lang.dialog(374, false);
				}
				else
				{
					result = Lang.dialog(Main.rand.Next(364, 370), false);
				}
			}
			else if (this.type == 579)
			{
				result = Language.GetTextValue("BartenderSpecialText.FirstMeeting");
			}
			else if (this.type == 550)
			{
				result = Lang.BartenderChat(this);
			}
			return result;
		}

		public object Clone()
		{
			return base.MemberwiseClone();
		}

		public void CheckDrowning()
		{
			bool flag = Collision.DrownCollision(this.position, this.width, this.height, 1f);
			if (Main.netMode != 1)
			{
				if (flag)
				{
					if (++this.breathCounter >= 7)
					{
						this.breathCounter = 0;
						this.breath--;
						if (this.breath <= 0)
						{
							this.friendlyRegen = 0;
							this.breath = 0;
							this.life -= 2;
							if (this.life % 24 < 2)
							{
								this.netUpdate = true;
							}
							if (this.life <= 0)
							{
								this.life = 1;
								this.StrikeNPCNoInteraction(2, 0f, 0, false, false, false);
								if (Main.netMode != 0)
								{
									NetMessage.SendData(28, -1, -1, "", this.whoAmI, 2f, 0f, 0f, 0, 0, 0);
								}
							}
						}
					}
				}
				else
				{
					this.breath += 3;
					if (this.breath > 200)
					{
						this.breath = 200;
					}
					this.breathCounter = 0;
				}
			}
			if (flag && Main.rand.Next(20) == 0 && !this.lavaWet && !this.honeyWet)
			{
				int num = 0;
				int num2 = 0;
				if (this.type == 369)
				{
					num2 = 8;
				}
				Dust.NewDust(new Vector2(this.position.X + (float)((10 + num) * this.direction), this.position.Y + (float)num2 + 4f), this.width - 8, 8, 34, 0f, 0f, 0, default(Color), 1.2f);
			}
		}

		public void TryPortalJumping()
		{
			if (!this.townNPC || Main.netMode == 1)
			{
				return;
			}
			PortalHelper.TryGoingThroughPortals(this);
		}

		public static void GetMeleeCollisionData(Rectangle victimHitbox, int enemyIndex, ref int specialHitSetter, ref float damageMultiplier, ref Rectangle npcRect)
		{
			NPC nPC = Main.npc[enemyIndex];
			if (nPC.type >= 430 && nPC.type <= 436 && nPC.ai[2] > 5f)
			{
				int num = 34;
				if (nPC.spriteDirection < 0)
				{
					npcRect.X -= num;
					npcRect.Width += num;
				}
				else
				{
					npcRect.Width += num;
				}
				damageMultiplier *= 1.25f;
				return;
			}
			if (nPC.type >= 494 && nPC.type <= 495 && nPC.ai[2] > 5f)
			{
				int num2 = 18;
				if (nPC.spriteDirection < 0)
				{
					npcRect.X -= num2;
					npcRect.Width += num2;
				}
				else
				{
					npcRect.Width += num2;
				}
				damageMultiplier *= 1.25f;
				return;
			}
			if (nPC.type == 460)
			{
				Rectangle rectangle = new Rectangle(0, 0, 30, 14);
				rectangle.X = (int)nPC.Center.X;
				if (nPC.direction < 0)
				{
					rectangle.X -= rectangle.Width;
				}
				rectangle.Y = (int)nPC.position.Y + nPC.height - 20;
				if (victimHitbox.Intersects(rectangle))
				{
					npcRect = rectangle;
					damageMultiplier *= 1.35f;
					return;
				}
			}
			else if (nPC.type == 417 && nPC.ai[0] == 6f && nPC.ai[3] > 0f && nPC.ai[3] < 4f)
			{
				Rectangle rectangle2 = Utils.CenteredRectangle(nPC.Center, new Vector2(100f));
				if (victimHitbox.Intersects(rectangle2))
				{
					npcRect = rectangle2;
					damageMultiplier *= 1.35f;
					return;
				}
			}
			else if (nPC.type == 466)
			{
				Rectangle rectangle3 = new Rectangle(0, 0, 30, 8);
				rectangle3.X = (int)nPC.Center.X;
				if (nPC.direction < 0)
				{
					rectangle3.X -= rectangle3.Width;
				}
				rectangle3.Y = (int)nPC.position.Y + nPC.height - 32;
				if (victimHitbox.Intersects(rectangle3))
				{
					npcRect = rectangle3;
					damageMultiplier *= 1.75f;
					return;
				}
			}
			else if (nPC.type == 576 || nPC.type == 577)
			{
				NPC nPC2 = nPC;
				bool flag = true;
				int y = nPC2.frame.Y;
				int num3 = 0;
				int num4 = 0;
				Rectangle rectangle4 = new Rectangle(0, 0, 30, 8);
				switch (y)
				{
				case 15:
					specialHitSetter = 2;
					rectangle4.Width = 120;
					rectangle4.Height = 30;
					num4 = 24;
					break;
				case 16:
					specialHitSetter = 2;
					rectangle4.Width = 120;
					rectangle4.Height = 60;
					num3 = 10;
					break;
				case 17:
					specialHitSetter = 2;
					rectangle4.Width = 100;
					rectangle4.Height = 90;
					num3 = 50;
					break;
				case 18:
					specialHitSetter = 2;
					rectangle4.Width = 100;
					rectangle4.Height = 50;
					num3 = 90;
					num4 = 10;
					break;
				default:
					flag = false;
					break;
				}
				if (flag)
				{
					rectangle4.X = (int)nPC2.Center.X - num3 * nPC2.direction;
					if (nPC2.direction < 0)
					{
						rectangle4.X -= rectangle4.Width;
					}
					rectangle4.Y = (int)nPC2.Center.Y - rectangle4.Height + num4;
					if (victimHitbox.Intersects(rectangle4))
					{
						npcRect = rectangle4;
						damageMultiplier *= 1.75f;
						return;
					}
				}
			}
			else if ((nPC.type == 552 || nPC.type == 553 || nPC.type == 554) && nPC.ai[0] > 0f && nPC.ai[0] < 24f)
			{
				Rectangle rectangle5 = new Rectangle(0, 0, 34, 14);
				rectangle5.X = (int)nPC.Center.X;
				if (nPC.direction < 0)
				{
					rectangle5.X -= rectangle5.Width;
				}
				rectangle5.Y = (int)nPC.position.Y + nPC.height - 20;
				if (victimHitbox.Intersects(rectangle5))
				{
					npcRect = rectangle5;
					damageMultiplier *= 1.35f;
				}
			}
		}

		public override string ToString()
		{
			return string.Concat(new object[]
			{
				"name:",
				this.name,
				", active:",
				this.active,
				", whoAmI:",
				this.whoAmI
			});
		}
	}
}
