using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Input;
using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using Terraria.Audio;
using Terraria.DataStructures;
using Terraria.Enums;
using Terraria.GameContent;
using Terraria.GameContent.Achievements;
using Terraria.GameContent.Events;
using Terraria.GameContent.Tile_Entities;
using Terraria.GameContent.UI;
using Terraria.GameInput;
using Terraria.Graphics.Capture;
using Terraria.Graphics.Effects;
using Terraria.Graphics.Shaders;
using Terraria.ID;
using Terraria.IO;
using Terraria.Localization;
using Terraria.ObjectData;
using Terraria.Social;
using Terraria.UI;
using Terraria.UI.Chat;
using Terraria.UI.Gamepad;
using Terraria.Utilities;
using Terraria.World.Generation;
using Terraria.ModLoader;
using Terraria.ModLoader.Exceptions;
using Terraria.ModLoader.IO;

namespace Terraria
{
	public class Player : Entity
	{
		public static class Hooks
		{
			public static event Action<Player> OnEnterWorld;

			public static void PlayerConnect(int playerIndex)
			{
				PressurePlateHelper.ResetPlayer(playerIndex);
				PlayerHooks.PlayerConnect(playerIndex);
			}

			public static void PlayerDisconnect(int playerIndex)
			{
				PressurePlateHelper.ResetPlayer(playerIndex);
				PlayerHooks.PlayerDisconnect(playerIndex);
			}

			public static void EnterWorld(int playerIndex)
			{
				if (Player.Hooks.OnEnterWorld != null)
				{
					Player.Hooks.OnEnterWorld(Main.player[playerIndex]);
				}
				PlayerHooks.OnEnterWorld(playerIndex);
			}
		}

		public class SmartCursorSettings
		{
			public static bool SmartBlocksEnabled = false;
			public static bool SmartWallReplacement = true;
			public static bool SmartAxeAfterPickaxe = false;
		}

		public class SelectionRadial
		{
			public enum SelectionMode
			{
				Dpad4,
				RadialCircular,
				RadialQuicks
			}

			private int _SelectedBinding = -1;
			public int RadialCount;
			public int[] Bindings;
			public Player.SelectionRadial.SelectionMode Mode;

			public int SelectedBinding
			{
				get
				{
					return this._SelectedBinding;
				}
			}

			public int SelectedItem
			{
				get
				{
					if (this._SelectedBinding == -1)
					{
						return -1;
					}
					return this.Bindings[this._SelectedBinding];
				}
			}

			public SelectionRadial(Player.SelectionRadial.SelectionMode mode = Player.SelectionRadial.SelectionMode.Dpad4)
			{
				this.Mode = mode;
				int radialCount = 0;
				switch (mode)
				{
					case Player.SelectionRadial.SelectionMode.Dpad4:
						radialCount = 4;
						break;
					case Player.SelectionRadial.SelectionMode.RadialCircular:
						radialCount = 10;
						break;
					case Player.SelectionRadial.SelectionMode.RadialQuicks:
						radialCount = 3;
						break;
				}
				this.RadialCount = radialCount;
				this.Bindings = new int[this.RadialCount];
				for (int i = 0; i < this.RadialCount; i++)
				{
					this.Bindings[i] = -1;
				}
			}

			public void Update()
			{
				switch (this.Mode)
				{
					case Player.SelectionRadial.SelectionMode.Dpad4:
						if (PlayerInput.Triggers.JustPressed.DpadRadial1)
						{
							this.ChangeSelection(0);
						}
						if (PlayerInput.Triggers.JustPressed.DpadRadial2)
						{
							this.ChangeSelection(1);
						}
						if (PlayerInput.Triggers.JustPressed.DpadRadial3)
						{
							this.ChangeSelection(2);
						}
						if (PlayerInput.Triggers.JustPressed.DpadRadial4)
						{
							this.ChangeSelection(3);
							return;
						}
						break;
					case Player.SelectionRadial.SelectionMode.RadialCircular:
					case Player.SelectionRadial.SelectionMode.RadialQuicks:
						{
							for (int i = 0; i < this.RadialCount; i++)
							{
								this.Bindings[i] = i;
							}
							bool flag = (this.Mode == Player.SelectionRadial.SelectionMode.RadialCircular && PlayerInput.Triggers.Current.RadialHotbar) || (this.Mode == Player.SelectionRadial.SelectionMode.RadialQuicks && PlayerInput.Triggers.Current.RadialQuickbar);
							if (flag)
							{
								bool flag2 = this.Mode == Player.SelectionRadial.SelectionMode.RadialCircular;
								float num = 6.28318548f / (float)this.RadialCount / 2f;
								Vector2 vector = PlayerInput.GamepadThumbstickRight.RotatedBy((double)(-1.57079637f + num), default(Vector2));
								if (vector.Length() == 0f)
								{
									vector = PlayerInput.GamepadThumbstickLeft.RotatedBy((double)(-1.57079637f + num), default(Vector2));
								}
								int num2 = -1;
								if (vector.Length() > 0.3f)
								{
									float num3 = vector.ToRotation();
									num3 += 3.14159274f;
									num2 = (int)(num3 / (6.28318548f / (float)this.RadialCount));
									if (num2 >= this.RadialCount)
									{
										num2 -= this.RadialCount;
									}
								}
								if ((num2 != -1 || !flag2) && this._SelectedBinding != num2 && (num2 != -1 || !(vector != Vector2.Zero)))
								{
									this.ChangeSelection(num2);
								}
							}
							break;
						}
					default:
						return;
				}
			}

			public void ChangeBinding(int itemSlot)
			{
				if (itemSlot < 0 || itemSlot >= 50)
				{
					return;
				}
				Player.SelectionRadial.SelectionMode mode = this.Mode;
				if (mode != Player.SelectionRadial.SelectionMode.Dpad4)
				{
					return;
				}
				if (PlayerInput.Triggers.JustPressed.DpadRadial1)
				{
					this.Bind(itemSlot, 0);
				}
				if (PlayerInput.Triggers.JustPressed.DpadRadial2)
				{
					this.Bind(itemSlot, 1);
				}
				if (PlayerInput.Triggers.JustPressed.DpadRadial3)
				{
					this.Bind(itemSlot, 2);
				}
				if (PlayerInput.Triggers.JustPressed.DpadRadial4)
				{
					this.Bind(itemSlot, 3);
				}
			}

			public void ChangeSelection(int to)
			{
				if (this._SelectedBinding == to)
				{
					this._SelectedBinding = -1;
					return;
				}
				this._SelectedBinding = to;
			}

			private void Bind(int itemslot, int radialslot)
			{
				this.ChangeSelection(-1);
				if (this.Bindings[radialslot] == itemslot)
				{
					this.Bindings[radialslot] = -1;
					return;
				}
				for (int i = 0; i < this.RadialCount; i++)
				{
					if (this.Bindings[i] == itemslot)
					{
						this.Bindings[i] = -1;
					}
				}
				this.Bindings[radialslot] = itemslot;
			}

			public int GetDrawMode(int itemslot)
			{
				if (this.SelectedBinding != -1 && this.Bindings[this.SelectedBinding] == itemslot)
				{
					return 2;
				}
				for (int i = 0; i < this.RadialCount; i++)
				{
					if (this.Bindings[i] == itemslot)
					{
						return 1;
					}
				}
				return 0;
			}

			public void CopyTo(Player.SelectionRadial that)
			{
				that._SelectedBinding = this._SelectedBinding;
				that.Mode = this.Mode;
				that.RadialCount = this.RadialCount;
				Array.Resize<int>(ref that.Bindings, this.RadialCount);
				for (int i = 0; i < this.RadialCount; i++)
				{
					that.Bindings[i] = this.Bindings[i];
				}
			}
		}

		public struct OverheadMessage
		{
			public string chatText;
			public TextSnippet[] snippets;
			public Vector2 messageSize;
			public int timeLeft;

			public void NewMessage(string message, int displayTime)
			{
				this.chatText = message;
				this.snippets = ChatManager.ParseMessage(this.chatText, Color.White);
				this.messageSize = ChatManager.GetStringSize(Main.fontMouseText, this.snippets, Vector2.One, -1f);
				this.timeLeft = displayTime;
			}
		}

		public const int maxSolarShields = 3;
		public const int nebulaMaxLevel = 3;
		public const int SupportedSlotsArmor = 3;
		public const int SupportedSlotsAccs = 7;
		public const int SupportedSlotSets = 10;
		public const int InitialAccSlotCount = 5;
		public const int miscSlotPet = 0;
		public const int miscSlotLight = 1;
		public const int miscSlotCart = 2;
		public const int miscSlotMount = 3;
		public const int miscSlotHook = 4;
		public const int maxBuffs = 22;
		public const int defaultWidth = 20;
		public const int defaultHeight = 42;
		public const int shadowMax = 3;
		public const int SHIELD_PARRY_DURATION = 20;
		public const int SHIELD_PARRY_DURATION_DRAWING_TWEAKER = 20;
		public const int SHIELD_PARRY_DAMAGE_BUFF_MULTIPLIER = 5;
		internal static byte[] ENCRYPTION_KEY = new UnicodeEncoding().GetBytes("h3y_gUyZ");
		public Player.OverheadMessage chatOverhead = default(Player.OverheadMessage);
		public Player.SelectionRadial DpadRadial = new Player.SelectionRadial(Player.SelectionRadial.SelectionMode.Dpad4);
		public Player.SelectionRadial CircularRadial = new Player.SelectionRadial(Player.SelectionRadial.SelectionMode.RadialCircular);
		public Player.SelectionRadial QuicksRadial = new Player.SelectionRadial(Player.SelectionRadial.SelectionMode.RadialQuicks);
		public bool alchemyTable;
		public int HotbarOffset;
		public bool GoingDownWithGrapple;
		public byte spelunkerTimer;
		public bool[] hideInfo = new bool[13];
		public int[] builderAccStatus;
		public int lostCoins;
		public string lostCoinString;
		public int soulDrain;
		public float drainBoost;
		public bool dd2Accessory;
		private static float _blizzardSoundVolume = 0f;
		private static SlotId _strongBlizzardSound = SlotId.Invalid;
		private static SlotId _weakBlizzardSound = SlotId.Invalid;
		private static SlotId _insideBlizzardSound = SlotId.Invalid;
		public int taxMoney;
		public int taxTimer;
		public static int taxRate = 3600;
		public static int crystalLeafDamage = 100;
		public static int crystalLeafKB = 10;
		public float basiliskCharge;
		public bool[] NPCBannerBuff;
		public bool hasBanner;
		public Vector2 lastDeathPostion;
		public DateTime lastDeathTime;
		public bool showLastDeath;
		public int extraAccessorySlots;
		public bool extraAccessory;
		public int tankPet;
		public bool tankPetReset;
		public int stringColor;
		public int counterWeight;
		public bool yoyoString;
		public bool yoyoGlove;
		public int beetleOrbs;
		public float beetleCounter;
		public int beetleCountdown;
		public bool beetleDefense;
		public bool beetleOffense;
		public bool beetleBuff;
		public int solarShields;
		public int solarCounter;
		public Vector2[] solarShieldPos;
		public Vector2[] solarShieldVel;
		public bool solarDashing;
		public bool solarDashConsumedFlare;
		public int nebulaLevelLife;
		public int nebulaLevelMana;
		public int nebulaManaCounter;
		public int nebulaLevelDamage;
		public bool manaMagnet;
		public bool lifeMagnet;
		public bool lifeForce;
		public bool calmed;
		public bool inferno;
		public float flameRingRot;
		public float flameRingScale;
		public byte flameRingFrame;
		public byte flameRingAlpha;
		public int netManaTime;
		public int netLifeTime;
		public bool netMana;
		public bool netLife;
		public Vector2[] beetlePos;
		public Vector2[] beetleVel;
		public int beetleFrame;
		public int beetleFrameCounter;
		public static int manaSickTime = 300;
		public static int manaSickTimeMax = 600;
		public static float manaSickLessDmg = 0.25f;
		public float manaSickReduction;
		public bool manaSick;
		public bool stairFall;
		public int loadStatus;
		public Vector2[] itemFlamePos;
		public int itemFlameCount;
		public bool outOfRange;
		public float lifeSteal;
		public float ghostDmg;
		public bool teleporting;
		public float teleportTime;
		public int teleportStyle;
		public bool sloping;
		public bool chilled;
		public bool dazed;
		public bool frozen;
		public bool stoned;
		public bool lastStoned;
		public bool ichor;
		public bool webbed;
		public bool noBuilding;
		public int ropeCount;
		public int manaRegenBonus;
		public int manaRegenDelayBonus;
		public int dash;
		public int dashTime;
		public int dashDelay;
		public int eocDash;
		public int eocHit;
		public float accRunSpeed;
		public bool cordage;
		public int gem;
		public int gemCount;
		public BitsByte ownedLargeGems;
		public byte meleeEnchant;
		public byte pulleyDir;
		public bool pulley;
		public int pulleyFrame;
		public float pulleyFrameCounter;
		public bool blackBelt;
		public bool sliding;
		public int slideDir;
		public int launcherWait;
		public bool iceSkate;
		public bool carpet;
		public int spikedBoots;
		public int carpetFrame;
		public float carpetFrameCounter;
		public bool canCarpet;
		public int carpetTime;
		public int miscCounter;
		public int infernoCounter;
		public bool sandStorm;
		public bool crimsonRegen;
		public bool ghostHeal;
		public bool ghostHurt;
		public bool sticky;
		public bool slippy;
		public bool slippy2;
		public bool powerrun;
		public bool flapSound;
		public bool iceBarrier;
		public bool dangerSense;
		public float endurance;
		public bool loveStruck;
		public bool stinky;
		public bool resistCold;
		public bool electrified;
		public bool dryadWard;
		public bool panic;
		public bool brainOfConfusion;
		public byte iceBarrierFrame;
		public byte iceBarrierFrameCounter;
		public bool shadowDodge;
		public float shadowDodgeCount;
		public bool palladiumRegen;
		public bool onHitDodge;
		public bool onHitRegen;
		public bool onHitPetal;
		public int petalTimer;
		public int shadowDodgeTimer;
		public int phantomPhoneixCounter;
		public int fishingSkill;
		public bool cratePotion;
		public bool sonarPotion;
		public bool accFishingLine;
		public bool accTackleBox;
		public int maxMinions;
		public int numMinions;
		public float slotsMinions;
		public bool pygmy;
		public bool raven;
		public bool slime;
		public bool hornetMinion;
		public bool impMinion;
		public bool twinsMinion;
		public bool spiderMinion;
		public bool pirateMinion;
		public bool sharknadoMinion;
		public bool UFOMinion;
		public bool DeadlySphereMinion;
		public bool stardustMinion;
		public bool stardustGuardian;
		public bool stardustDragon;
		public float wingTime;
		public int wings;
		public int wingsLogic;
		public int wingTimeMax;
		public int wingFrame;
		public int wingFrameCounter;
		public int skinVariant;
		public bool ghost;
		public int ghostFrame;
		public int ghostFrameCounter;
		public int miscTimer;
		public bool pvpDeath;
		public BitsByte zone1;
		public BitsByte zone2;
		public BitsByte zone3;
		public BitsByte zone4;
		public bool boneArmor;
		public bool frostArmor;
		public bool honey;
		public bool crystalLeaf;
		public int[] doubleTapCardinalTimer;
		public int[] holdDownCardinalTimer;
		public bool defendedByPaladin;
		public bool hasPaladinShield;
		public float[] speedSlice;
		public float townNPCs;
		public double headFrameCounter;
		public double bodyFrameCounter;
		public double legFrameCounter;
		public int netSkip;
		public int oldSelectItem;
		public bool immune;
		public bool immuneNoBlink;
		public int immuneTime;
		public int immuneAlphaDirection;
		public int immuneAlpha;
		public int team;
		public bool hbLocked;
		public static int nameLen = 20;
		public float maxRegenDelay;
		public int sign;
		public bool editedChestName;
		public int reuseDelay;
		public int aggro;
		public float activeNPCs;
		public bool mouseInterface;
		public bool lastMouseInterface;
		public int noThrow;
		public int changeItem;
		public int selectedItem;
		public Item[] armor;
		public Item[] dye;
		public Item[] miscEquips;
		public Item[] miscDyes;
		public Item trashItem;
		public int itemAnimation;
		public int itemAnimationMax;
		public int itemTime;
		public int toolTime;
		public float itemRotation;
		public int itemWidth;
		public int itemHeight;
		public Vector2 itemLocation;
		public bool poundRelease;
		public float ghostFade;
		public float ghostDir;
		public int[] buffType;
		public int[] buffTime;
		public bool[] buffImmune;
		public int heldProj;
		public int breathCD;
		public int breathMax;
		public int breath;
		public int lavaCD;
		public int lavaMax;
		public int lavaTime;
		public bool ignoreWater;
		public bool armorEffectDrawShadow;
		public bool armorEffectDrawShadowSubtle;
		public bool armorEffectDrawOutlines;
		public bool armorEffectDrawShadowLokis;
		public bool armorEffectDrawShadowBasilisk;
		public bool armorEffectDrawOutlinesForbidden;
		public bool armorEffectDrawShadowEOCShield;
		public bool socialShadowRocketBoots;
		public bool socialGhost;
		public bool shroomiteStealth;
		public bool socialIgnoreLight;
		public int stealthTimer;
		public float stealth;
		public string setBonus;
		public Item[] inventory;
		public bool[] inventoryChestStack;
		public Chest bank;
		public Chest bank2;
		public Chest bank3;
		public float headRotation;
		public float bodyRotation;
		public float legRotation;
		public Vector2 headPosition;
		public Vector2 bodyPosition;
		public Vector2 legPosition;
		public Vector2 headVelocity;
		public Vector2 bodyVelocity;
		public Vector2 legVelocity;
		public float fullRotation;
		public Vector2 fullRotationOrigin;
		public int nonTorch;
		public float gfxOffY;
		public float stepSpeed;
		public static bool deadForGood = false;
		public bool dead;
		public int respawnTimer;
		public int attackCD;
		public int potionDelay;
		public byte difficulty;
		public byte wetSlime;
		public HitTile hitTile;
		public int jump;
		public int head;
		public int body;
		public int legs;
		public sbyte handon;
		public sbyte handoff;
		public sbyte back;
		public sbyte front;
		public sbyte shoe;
		public sbyte waist;
		public sbyte shield;
		public sbyte neck;
		public sbyte face;
		public sbyte balloon;
		public bool[] hideVisual;
		public BitsByte hideMisc;
		public Rectangle headFrame;
		public Rectangle bodyFrame;
		public Rectangle legFrame;
		public Rectangle hairFrame;
		public bool controlLeft;
		public bool controlRight;
		public bool controlUp;
		public bool controlDown;
		public bool controlJump;
		public bool controlUseItem;
		public bool controlUseTile;
		public bool controlThrow;
		public bool controlInv;
		public bool controlHook;
		public bool controlTorch;
		public bool controlMap;
		public bool controlSmart;
		public bool controlMount;
		public bool releaseJump;
		public bool releaseUp;
		public bool releaseUseItem;
		public bool releaseUseTile;
		public bool releaseInventory;
		public bool releaseHook;
		public bool releaseThrow;
		public bool releaseQuickMana;
		public bool releaseQuickHeal;
		public bool releaseLeft;
		public bool releaseRight;
		public bool releaseSmart;
		public bool releaseMount;
		public bool releaseDown;
		public bool controlQuickMana;
		public bool controlQuickHeal;
		public bool tileInteractionHappened;
		public bool tileInteractAttempted;
		public int altFunctionUse;
		public bool mapZoomIn;
		public bool mapZoomOut;
		public bool mapAlphaUp;
		public bool mapAlphaDown;
		public bool mapFullScreen;
		public bool mapStyle;
		public bool releaseMapFullscreen;
		public bool releaseMapStyle;
		public int leftTimer;
		public int rightTimer;
		public bool delayUseItem;
		public bool showItemIcon;
		public bool showItemIconR;
		public int showItemIcon2;
		public string showItemIconText;
		public int runSoundDelay;
		public float shadow;
		public Vector2[] shadowPos;
		public float[] shadowRotation;
		public Vector2[] shadowOrigin;
		public int[] shadowDirection;
		public int shadowCount;
		public float manaCost;
		public bool fireWalk;
		public bool channel;
		public int step;
		public int anglerQuestsFinished;
		public int bartenderQuestLog;
		public bool downedDD2EventAnyDifficulty;
		public int armorPenetration;
		public int statDefense;
		public int statLifeMax;
		public int statLifeMax2;
		public int statLife;
		public int statMana;
		public int statManaMax;
		public int statManaMax2;
		public int lifeRegen;
		public int lifeRegenCount;
		public int lifeRegenTime;
		public int manaRegen;
		public int manaRegenCount;
		public int manaRegenDelay;
		public bool manaRegenBuff;
		public bool noKnockback;
		public bool spaceGun;
		public float gravDir;
		public bool ammoCost80;
		public bool ammoCost75;
		public int stickyBreak;
		public bool magicQuiver;
		public bool magmaStone;
		public bool lavaRose;
		public int phantasmTime;
		public bool ammoBox;
		public bool ammoPotion;
		public bool chaosState;
		public bool strongBees;
		public bool sporeSac;
		public bool shinyStone;
		public int yoraiz0rEye;
		public bool yoraiz0rDarkness;
		public bool suspiciouslookingTentacle;
		public bool crimsonHeart;
		public bool lightOrb;
		public bool blueFairy;
		public bool redFairy;
		public bool greenFairy;
		public bool bunny;
		public bool turtle;
		public bool eater;
		public bool penguin;
		public bool magicLantern;
		public bool rabid;
		public bool sunflower;
		public bool wellFed;
		public bool puppy;
		public bool grinch;
		public bool miniMinotaur;
		public bool arcticDivingGear;
		public bool wearsRobe;
		public bool minecartLeft;
		public bool onWrongGround;
		public bool onTrack;
		public int cartRampTime;
		public bool cartFlip;
		public float trackBoost;
		public Vector2 lastBoost;
		public Mount mount;
		public bool blackCat;
		public bool spider;
		public bool squashling;
		public bool petFlagDD2Gato;
		public bool petFlagDD2Ghost;
		public bool petFlagDD2Dragon;
		public bool companionCube;
		public bool babyFaceMonster;
		public bool magicCuffs;
		public bool coldDash;
		public bool sailDash;
		public bool eyeSpring;
		public bool snowman;
		public bool scope;
		public bool dino;
		public bool skeletron;
		public bool hornet;
		public bool zephyrfish;
		public bool tiki;
		public bool parrot;
		public bool truffle;
		public bool sapling;
		public bool cSapling;
		public bool wisp;
		public bool lizard;
		public bool archery;
		public bool poisoned;
		public bool venom;
		public bool blind;
		public bool blackout;
		public bool headcovered;
		public bool frostBurn;
		public bool onFrostBurn;
		public bool burned;
		public bool suffocating;
		public byte suffocateDelay;
		public bool dripping;
		public bool drippingSlime;
		public bool onFire;
		public bool onFire2;
		public bool noItems;
		public bool windPushed;
		public bool wereWolf;
		public bool wolfAcc;
		public bool hideMerman;
		public bool hideWolf;
		public bool forceMerman;
		public bool forceWerewolf;
		public bool rulerGrid;
		public bool rulerLine;
		public bool bleed;
		public bool confused;
		public bool accMerman;
		public bool merman;
		public bool brokenArmor;
		public bool silence;
		public bool slow;
		public bool gross;
		public bool tongued;
		public bool kbGlove;
		public bool kbBuff;
		public bool starCloak;
		public bool longInvince;
		public bool pStone;
		public bool manaFlower;
		public bool moonLeech;
		public bool vortexDebuff;
		public bool trapDebuffSource;
		public bool witheredArmor;
		public bool witheredWeapon;
		public bool slowOgreSpit;
		public bool parryDamageBuff;
		public bool ballistaPanic;
		public int meleeCrit;
		public int rangedCrit;
		public int magicCrit;
		public int thrownCrit;
		public float meleeDamage;
		public float rangedDamage;
		public float thrownDamage;
		public float bulletDamage;
		public float arrowDamage;
		public float rocketDamage;
		public float magicDamage;
		public float minionDamage;
		public float minionKB;
		public float meleeSpeed;
		public float thrownVelocity;
		public bool thrownCost50;
		public bool thrownCost33;
		public float moveSpeed;
		public float pickSpeed;
		public float wallSpeed;
		public float tileSpeed;
		public bool autoPaint;
		public bool autoActuator;
		public int SpawnX;
		public int SpawnY;
		public int[] spX;
		public int[] spY;
		public string[] spN;
		public int[] spI;
		public static int tileRangeX = 5;
		public static int tileRangeY = 4;
		public int lastTileRangeX;
		public int lastTileRangeY;
		public static int tileTargetX;
		public static int tileTargetY;
		public static float defaultGravity = 0.4f;
		public static int jumpHeight = 15;
		public static float jumpSpeed = 5.01f;
		public float gravity;
		public float maxFallSpeed;
		public float maxRunSpeed;
		public float runAcceleration;
		public float runSlowdown;
		public bool adjWater;
		public bool adjHoney;
		public bool adjLava;
		public bool oldAdjWater;
		public bool oldAdjHoney;
		public bool oldAdjLava;
		private bool[] _adjTile = new bool[TileLoader.TileCount];
		public bool[] adjTile
		{
			get
			{
				if (_adjTile.Length != TileLoader.TileCount)
					Array.Resize(ref _adjTile, TileLoader.TileCount);
				return _adjTile;
			}
			set { _adjTile = value; }
		}
		private bool[] _oldAdjTile = new bool[TileLoader.TileCount];
		public bool[] oldAdjTile
		{
			get
			{
				if (_oldAdjTile.Length != TileLoader.TileCount)
					Array.Resize(ref _oldAdjTile, TileLoader.TileCount);
				return _oldAdjTile;
			}
			set { _oldAdjTile = value; }
		}
		public static int defaultItemGrabRange = 38;
		private static float itemGrabSpeed = 0.45f;
		private static float itemGrabSpeedMax = 4f;
		public byte hairDye;
		public Color hairDyeColor;
		public float hairDyeVar;
		public Color hairColor;
		public Color skinColor;
		public Color eyeColor;
		public Color shirtColor;
		public Color underShirtColor;
		public Color pantsColor;
		public Color shoeColor;
		public int hair;
		public bool hostile;
		public SoundPlaySet hermesStepSound;
		public int accCompass;
		public int accWatch;
		public int accDepthMeter;
		public bool accFishFinder;
		public bool accWeatherRadio;
		public bool accJarOfSouls;
		public bool accCalendar;
		public int lastCreatureHit;
		public bool accThirdEye;
		public byte accThirdEyeCounter;
		public byte accThirdEyeNumber;
		public bool accStopwatch;
		public bool accOreFinder;
		public int bestOre;
		public bool accCritterGuide;
		public byte accCritterGuideCounter;
		public byte accCritterGuideNumber;
		public bool accDreamCatcher;
		public bool ActuationRodLock;
		public bool ActuationRodLockSetting;
		public bool InfoAccMechShowWires;
		public DateTime dpsStart;
		public DateTime dpsEnd;
		public DateTime dpsLastHit;
		public int dpsDamage;
		public bool dpsStarted;
		public string displayedFishingInfo;
		public bool discount;
		public bool coins;
		public bool goldRing;
		public bool accDivingHelm;
		public bool accFlipper;
		public bool doubleJumpCloud;
		public bool jumpAgainCloud;
		public bool dJumpEffectCloud;
		public bool doubleJumpSandstorm;
		public bool jumpAgainSandstorm;
		public bool dJumpEffectSandstorm;
		public bool doubleJumpBlizzard;
		public bool jumpAgainBlizzard;
		public bool dJumpEffectBlizzard;
		public bool doubleJumpFart;
		public bool jumpAgainFart;
		public bool dJumpEffectFart;
		public bool doubleJumpSail;
		public bool jumpAgainSail;
		public bool dJumpEffectSail;
		public bool doubleJumpUnicorn;
		public bool jumpAgainUnicorn;
		public bool dJumpEffectUnicorn;
		public bool autoJump;
		public bool justJumped;
		public float jumpSpeedBoost;
		public int extraFall;
		public bool spawnMax;
		public int blockRange;
		public int[] grappling;
		public int grapCount;
		public int rocketTime;
		public int rocketTimeMax;
		public int rocketDelay;
		public int rocketDelay2;
		public bool rocketRelease;
		public bool rocketFrame;
		public int rocketBoots;
		public bool canRocket;
		public bool jumpBoost;
		public bool noFallDmg;
		public int swimTime;
		public bool killGuide;
		public bool killClothier;
		public bool lavaImmune;
		public bool gills;
		public bool slowFall;
		public bool findTreasure;
		public bool invis;
		public bool detectCreature;
		public bool nightVision;
		public bool enemySpawns;
		public float thorns;
		public bool turtleArmor;
		public bool turtleThorns;
		public bool spiderArmor;
		public bool setSolar;
		public bool setVortex;
		public bool setNebula;
		public int nebulaCD;
		public bool setStardust;
		public bool setForbidden;
		public bool setForbiddenCooldownLocked;
		public bool setSquireT3;
		public bool setHuntressT3;
		public bool setApprenticeT3;
		public bool setMonkT3;
		public bool setSquireT2;
		public bool setHuntressT2;
		public bool setApprenticeT2;
		public bool setMonkT2;
		public int maxTurrets;
		public int maxTurretsOld;
		public bool vortexStealthActive;
		public bool waterWalk;
		public bool waterWalk2;
		public bool gravControl;
		public bool gravControl2;
		public bool bee;
		public int wireOperationsCooldown;
		public int lastChest;
		public int flyingPigChest;
		public int chest;
		public int chestX;
		public int chestY;
		public int talkNPC;
		public int fallStart;
		public int fallStart2;
		public int potionDelayTime;
		public int restorationDelayTime;
		public int cHead;
		public int cBody;
		public int cLegs;
		public int cHandOn;
		public int cHandOff;
		public int cBack;
		public int cFront;
		public int cShoe;
		public int cWaist;
		public int cShield;
		public int cNeck;
		public int cFace;
		public int cBalloon;
		public int cWings;
		public int cCarpet;
		public int cGrapple;
		public int cMount;
		public int cMinecart;
		public int cPet;
		public int cLight;
		public int cYorai;
		public int[] ownedProjectileCounts;
		public bool[] npcTypeNoAggro;
		public int lastPortalColorIndex;
		public int _portalPhysicsTime;
		public bool portalPhysicsFlag;
		public float MountFishronSpecialCounter;
		public Vector2 MinionRestTargetPoint;
		public int MinionAttackTargetNPC;
		public List<Point> TouchedTiles;
		public static int StopMoneyTroughFromWorking = 3;
		private bool makeStrongBee;
		public bool behindBackWall;
		public int _funkytownCheckCD;
		private float _stormShaderObstruction;
		private float _shaderObstructionInternalValue;
		private int _quickGrappleCooldown;
		public bool hasRaisableShield;
		public bool shieldRaised;
		public int shieldParryTimeLeft;
		public int shield_parry_cooldown;
		public int[] hurtCooldowns;
		public static bool lastPound = true;

		public Vector2 BlehOldPositionFixer
		{
			get
			{
				return -Vector2.UnitY;
			}
		}

		public Vector2 MountedCenter
		{
			get
			{
				return new Vector2(this.position.X + (float)(this.width / 2), this.position.Y + 21f + (float)this.mount.PlayerOffsetHitbox);
			}
			set
			{
				this.position = new Vector2(value.X - (float)(this.width / 2), value.Y - 21f - (float)this.mount.PlayerOffsetHitbox);
			}
		}

		public bool CCed
		{
			get
			{
				return this.frozen || this.webbed || this.stoned;
			}
		}

		public bool Male
		{
			get
			{
				return PlayerVariantID.Sets.Male[this.skinVariant];
			}
			set
			{
				if (value)
				{
					if (!this.Male)
					{
						this.skinVariant = PlayerVariantID.Sets.AltGenderReference[this.skinVariant];
						return;
					}
				}
				else if (this.Male)
				{
					this.skinVariant = PlayerVariantID.Sets.AltGenderReference[this.skinVariant];
				}
			}
		}

		public bool ZoneDungeon
		{
			get
			{
				return this.zone1[0];
			}
			set
			{
				this.zone1[0] = value;
			}
		}

		public bool ZoneCorrupt
		{
			get
			{
				return this.zone1[1];
			}
			set
			{
				this.zone1[1] = value;
			}
		}

		public bool ZoneHoly
		{
			get
			{
				return this.zone1[2];
			}
			set
			{
				this.zone1[2] = value;
			}
		}

		public bool ZoneMeteor
		{
			get
			{
				return this.zone1[3];
			}
			set
			{
				this.zone1[3] = value;
			}
		}

		public bool ZoneJungle
		{
			get
			{
				return this.zone1[4];
			}
			set
			{
				this.zone1[4] = value;
			}
		}

		public bool ZoneSnow
		{
			get
			{
				return this.zone1[5];
			}
			set
			{
				this.zone1[5] = value;
			}
		}

		public bool ZoneCrimson
		{
			get
			{
				return this.zone1[6];
			}
			set
			{
				this.zone1[6] = value;
			}
		}

		public bool ZoneWaterCandle
		{
			get
			{
				return this.zone1[7];
			}
			set
			{
				this.zone1[7] = value;
			}
		}

		public bool ZonePeaceCandle
		{
			get
			{
				return this.zone2[0];
			}
			set
			{
				this.zone2[0] = value;
			}
		}

		public bool ZoneTowerSolar
		{
			get
			{
				return this.zone2[1];
			}
			set
			{
				this.zone2[1] = value;
			}
		}

		public bool ZoneTowerVortex
		{
			get
			{
				return this.zone2[2];
			}
			set
			{
				this.zone2[2] = value;
			}
		}

		public bool ZoneTowerNebula
		{
			get
			{
				return this.zone2[3];
			}
			set
			{
				this.zone2[3] = value;
			}
		}

		public bool ZoneTowerStardust
		{
			get
			{
				return this.zone2[4];
			}
			set
			{
				this.zone2[4] = value;
			}
		}

		public bool ZoneDesert
		{
			get
			{
				return this.zone2[5];
			}
			set
			{
				this.zone2[5] = value;
			}
		}

		public bool ZoneGlowshroom
		{
			get
			{
				return this.zone2[6];
			}
			set
			{
				this.zone2[6] = value;
			}
		}

		public bool ZoneUndergroundDesert
		{
			get
			{
				return this.zone2[7];
			}
			set
			{
				this.zone2[7] = value;
			}
		}

		public bool ZoneSkyHeight
		{
			get
			{
				return this.zone3[0];
			}
			set
			{
				this.zone3[0] = value;
			}
		}

		public bool ZoneOverworldHeight
		{
			get
			{
				return this.zone3[1];
			}
			set
			{
				this.zone3[1] = value;
			}
		}

		public bool ZoneDirtLayerHeight
		{
			get
			{
				return this.zone3[2];
			}
			set
			{
				this.zone3[2] = value;
			}
		}

		public bool ZoneRockLayerHeight
		{
			get
			{
				return this.zone3[3];
			}
			set
			{
				this.zone3[3] = value;
			}
		}

		public bool ZoneUnderworldHeight
		{
			get
			{
				return this.zone3[4];
			}
			set
			{
				this.zone3[4] = value;
			}
		}

		public bool ZoneBeach
		{
			get
			{
				return this.zone3[5];
			}
			set
			{
				this.zone3[5] = value;
			}
		}

		public bool ZoneRain
		{
			get
			{
				return this.zone3[6];
			}
			set
			{
				this.zone3[6] = value;
			}
		}

		public bool ZoneSandstorm
		{
			get
			{
				return this.zone3[7];
			}
			set
			{
				this.zone3[7] = value;
			}
		}

		public bool ZoneOldOneArmy
		{
			get
			{
				return this.zone4[0];
			}
			set
			{
				this.zone4[0] = value;
			}
		}

		public Vector2 Directions
		{
			get
			{
				return new Vector2((float)this.direction, this.gravDir);
			}
		}

		public Item HeldItem
		{
			get
			{
				return this.inventory[this.selectedItem];
			}
		}

		public Vector2 DefaultSize
		{
			get
			{
				return new Vector2(20f, 42f);
			}
		}

		public bool PortalPhysicsEnabled
		{
			get
			{
				return this._portalPhysicsTime > 0 && !this.mount.Active;
			}
		}

		public bool MountFishronSpecial
		{
			get
			{
				return this.statLife < this.statLifeMax2 / 2 || (this.wet && !this.lavaWet && !this.honeyWet) || this.dripping || this.MountFishronSpecialCounter > 0f;
			}
		}

		public bool HasMinionRestTarget
		{
			get
			{
				return this.MinionRestTargetPoint != Vector2.Zero;
			}
		}

		public bool HasMinionAttackTargetNPC
		{
			get
			{
				return this.MinionAttackTargetNPC != -1;
			}
		}

		public bool SlimeDontHyperJump
		{
			get
			{
				return this.mount.Active && this.mount.Type == 3 && this.wetSlime > 0 && !this.controlJump;
			}
		}

		public void RotateRelativePoint(ref float x, ref float y)
		{
			Vector2 vector = this.RotatedRelativePoint(new Vector2(x, y), true);
			x = vector.X;
			y = vector.Y;
		}

		public Vector2 RotatedRelativePoint(Vector2 pos, bool rotateForward = true)
		{
			Vector2 value = this.position + this.fullRotationOrigin;
			Matrix matrix = Matrix.CreateRotationZ(this.fullRotation * (float)rotateForward.ToInt());
			pos -= this.position + this.fullRotationOrigin;
			pos = Vector2.Transform(pos, matrix);
			return pos + value;
		}

		public bool TeamChangeAllowed()
		{
			return true;
		}

		public void HealEffect(int healAmount, bool broadcast = true)
		{
			CombatText.NewText(new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), CombatText.HealLife, string.Concat(healAmount), false, false);
			if (broadcast && Main.netMode == 1 && this.whoAmI == Main.myPlayer)
			{
				NetMessage.SendData(35, -1, -1, "", this.whoAmI, (float)healAmount, 0f, 0f, 0, 0, 0);
			}
		}

		public void ManaEffect(int manaAmount)
		{
			CombatText.NewText(new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), CombatText.HealMana, string.Concat(manaAmount), false, false);
			if (Main.netMode == 1 && this.whoAmI == Main.myPlayer)
			{
				NetMessage.SendData(43, -1, -1, "", this.whoAmI, (float)manaAmount, 0f, 0f, 0, 0, 0);
			}
		}

		public static byte FindClosest(Vector2 Position, int Width, int Height)
		{
			byte result = 0;
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active)
				{
					result = (byte)i;
					break;
				}
			}
			float num = -1f;
			for (int j = 0; j < 255; j++)
			{
				if (Main.player[j].active && !Main.player[j].dead)
				{
					float num2 = Math.Abs(Main.player[j].position.X + (float)(Main.player[j].width / 2) - (Position.X + (float)(Width / 2))) + Math.Abs(Main.player[j].position.Y + (float)(Main.player[j].height / 2) - (Position.Y + (float)(Height / 2)));
					if (num == -1f || num2 < num)
					{
						num = num2;
						result = (byte)j;
					}
				}
			}
			return result;
		}

		public void ToggleInv()
		{
			bool grappleAndInteractAreShared = PlayerInput.GrappleAndInteractAreShared;
			if (Main.mapFullscreen)
			{
				Main.mapFullscreen = false;
				this.releaseInventory = false;
				Main.PlaySound(11, -1, -1, 1, 1f, 0f);
			}
			else if (PlayerInput.InBuildingMode)
			{
				PlayerInput.ExitBuildingMode();
				Main.PlaySound(11, -1, -1, 1, 1f, 0f);
			}
			else if (Main.ingameOptionsWindow)
			{
				if (PlayerInput.UsingGamepadUI && UILinkPointNavigator.CurrentPage == 1002)
				{
					UILinkPointNavigator.ChangePage(1001);
				}
				else
				{
					IngameOptions.Close();
				}
			}
			else if (Main.inFancyUI)
			{
				IngameFancyUI.Close();
			}
			else if (CaptureManager.Instance.Active)
			{
				CaptureManager.Instance.Active = false;
			}
			else if (this.talkNPC >= 0)
			{
				this.talkNPC = -1;
				Main.npcChatCornerItem = 0;
				Main.npcChatText = "";
				Main.PlaySound(11, -1, -1, 1, 1f, 0f);
				if (PlayerInput.UsingGamepad)
				{
					Main.npcChatRelease = false;
				}
			}
			else if (this.sign >= 0)
			{
				this.sign = -1;
				Main.editSign = false;
				Main.npcChatText = "";
				Main.PlaySound(11, -1, -1, 1, 1f, 0f);
			}
			else if (Main.clothesWindow)
			{
				Main.CancelClothesWindow(false);
			}
			else if (!Main.playerInventory)
			{
				Recipe.FindRecipes();
				Main.playerInventory = true;
				Main.EquipPageSelected = 0;
				Main.PlaySound(10, -1, -1, 1, 1f, 0f);
			}
			else
			{
				Main.playerInventory = false;
				if (!PlayerInput.UsingGamepad)
				{
					Main.EquipPageSelected = 0;
				}
				else
				{
					PlayerInput.NavigatorUnCachePosition();
					Main.GamepadCursorAlpha = 0f;
					Player.StopMoneyTroughFromWorking = 3;
				}
				Main.PlaySound(11, -1, -1, 1, 1f, 0f);
				if (ItemSlot.Options.HighlightNewItems)
				{
					Item[] array = this.inventory;
					for (int i = 0; i < array.Length; i++)
					{
						Item item = array[i];
						item.newAndShiny = false;
					}
				}
			}
			if (grappleAndInteractAreShared)
			{
				this.GamepadEnableGrappleCooldown();
			}
		}

		public void dropItemCheck()
		{
			if (!Main.playerInventory)
			{
				this.noThrow = 0;
			}
			if (this.noThrow > 0)
			{
				this.noThrow--;
			}
			if (!Main.InGuideCraftMenu && Main.guideItem.type > 0)
			{
				Main.guideItem.position = base.Center;
				Item item = this.GetItem(this.whoAmI, Main.guideItem, false, true);
				if (item.stack > 0)
				{
					int num = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, item.type, item.stack, false, (int)Main.guideItem.prefix, true, false);
					Main.item[num].newAndShiny = false;
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", num, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				Main.guideItem = new Item();
			}
			if (!Main.InReforgeMenu && Main.reforgeItem.type > 0)
			{
				Main.reforgeItem.position = base.Center;
				Item item2 = this.GetItem(this.whoAmI, Main.reforgeItem, false, true);
				if (item2.stack > 0)
				{
					int num2 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, item2.type, item2.stack, false, (int)Main.reforgeItem.prefix, true, false);
					Main.item[num2].newAndShiny = false;
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", num2, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				Main.reforgeItem = new Item();
			}
			if (Main.myPlayer == this.whoAmI)
			{
				this.inventory[58] = Main.mouseItem.Clone();
			}
			bool flag = true;
			if (Main.mouseItem.type > 0 && Main.mouseItem.stack > 0)
			{
				if (!Main.gamePaused)
				{
					Player.tileTargetX = (int)(((float)Main.mouseX + Main.screenPosition.X) / 16f);
					Player.tileTargetY = (int)(((float)Main.mouseY + Main.screenPosition.Y) / 16f);
					if (this.gravDir == -1f)
					{
						Player.tileTargetY = (int)((Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY) / 16f);
					}
				}
				if (this.selectedItem != 58)
				{
					this.oldSelectItem = this.selectedItem;
				}
				this.selectedItem = 58;
				flag = false;
			}
			if (flag && this.selectedItem == 58 && this.itemTime == 0 && this.itemAnimation == 0)
			{
				this.selectedItem = this.oldSelectItem;
			}
			if (WorldGen.InWorld(Player.tileTargetX, Player.tileTargetY, 0) && Main.tile[Player.tileTargetX, Player.tileTargetY] != null && Main.tile[Player.tileTargetX, Player.tileTargetY].type == 334 && this.ItemFitsWeaponRack(this.inventory[this.selectedItem]))
			{
				this.noThrow = 2;
			}
			if (WorldGen.InWorld(Player.tileTargetX, Player.tileTargetY, 0) && Main.tile[Player.tileTargetX, Player.tileTargetY] != null && Main.tile[Player.tileTargetX, Player.tileTargetY].type == 395 && this.ItemFitsItemFrame(this.inventory[this.selectedItem]))
			{
				this.noThrow = 2;
			}
			if (Main.mouseItem.type > 0 && !Main.playerInventory)
			{
				Main.mouseItem.position = base.Center;
				Item item3 = this.GetItem(this.whoAmI, Main.mouseItem, false, true);
				if (item3.stack > 0)
				{
					int num3 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, item3.type, item3.stack, false, 0, true, false);
					Main.item[num3].newAndShiny = false;
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", num3, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				Main.mouseItem = new Item();
				this.inventory[58] = new Item();
				Recipe.FindRecipes();
			}
			if (((this.controlThrow && this.releaseThrow && !this.inventory[this.selectedItem].favorited && this.inventory[this.selectedItem].type > 0 && !Main.drawingPlayerChat) || (((Main.mouseRight && !this.mouseInterface && Main.mouseRightRelease) || !Main.playerInventory) && Main.mouseItem.type > 0 && Main.mouseItem.stack > 0)) && this.noThrow <= 0)
			{
				this.DropSelectedItem();
			}
		}

		public void DropSelectedItem()
		{
			bool flag = false;
			if (this.inventory[this.selectedItem].favorited)
			{
				this.inventory[this.selectedItem] = this.GetItem(this.whoAmI, this.inventory[this.selectedItem], false, true);
				if (this.selectedItem == 58)
				{
					Main.mouseItem = this.inventory[this.selectedItem];
				}
				Recipe.FindRecipes();
				if (this.inventory[this.selectedItem].type == 0)
				{
					flag = true;
				}
			}
			if (!flag)
			{
				Item item = new Item();
				bool flag2 = false;
				if (((Main.mouseRight && !this.mouseInterface && Main.mouseRightRelease) || !Main.playerInventory) && Main.mouseItem.type > 0 && Main.mouseItem.stack > 0)
				{
					item = this.inventory[this.selectedItem];
					this.inventory[this.selectedItem] = Main.mouseItem;
					this.delayUseItem = true;
					this.controlUseItem = false;
					flag2 = true;
				}
				int num = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, this.inventory[this.selectedItem].type, 1, false, 0, false, false);
				if (!flag2 && this.inventory[this.selectedItem].type == 8 && this.inventory[this.selectedItem].stack > 1)
				{
					this.inventory[this.selectedItem].stack--;
				}
				else
				{
					this.inventory[this.selectedItem].position = Main.item[num].position;
					Main.item[num] = this.inventory[this.selectedItem];
					this.inventory[this.selectedItem] = new Item();
					if (this.selectedItem == 58)
					{
						Main.mouseItem = new Item();
					}
				}
				if (Main.netMode == 0)
				{
					Main.item[num].noGrabDelay = 100;
				}
				Main.item[num].velocity.Y = -2f;
				Main.item[num].velocity.X = (float)(4 * this.direction) + this.velocity.X;
				Main.item[num].favorited = false;
				Main.item[num].newAndShiny = false;
				if (((Main.mouseRight && !this.mouseInterface) || !Main.playerInventory) && Main.mouseItem.type > 0)
				{
					this.inventory[this.selectedItem] = item;
					Main.mouseItem = new Item();
				}
				else
				{
					this.itemAnimation = 10;
					this.itemAnimationMax = 10;
				}
				Recipe.FindRecipes();
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, "", num, 0f, 0f, 0f, 0, 0, 0);
				}
			}
		}

		public int FindBuffIndex(int type)
		{
			if (this.buffImmune[type])
			{
				return -1;
			}
			for (int i = 0; i < 22; i++)
			{
				if (this.buffTime[i] >= 1 && this.buffType[i] == type)
				{
					return i;
				}
			}
			return -1;
		}

		public void AddBuff(int type, int time1, bool quiet = true)
		{
			if (this.buffImmune[type])
			{
				return;
			}
			int num = time1;
			if (Main.expertMode && this.whoAmI == Main.myPlayer && BuffLoader.LongerExpertDebuff(type))
			{
				num = (int)(Main.expertDebuffTime * (float)num);
			}
			if (!quiet && Main.netMode == 1)
			{
				bool flag = true;
				for (int i = 0; i < 22; i++)
				{
					if (this.buffType[i] == type)
					{
						flag = false;
						break;
					}
				}
				if (flag)
				{
					NetMessage.SendData(55, -1, -1, "", this.whoAmI, (float)type, (float)num, 0f, 0, 0, 0);
				}
			}
			int num2 = -1;
			for (int j = 0; j < 22; j++)
			{
				if (this.buffType[j] == type)
				{
					if (BuffLoader.ReApply(type, this, num, j))
					{
					}
					else if (type == 94)
					{
						this.buffTime[j] += num;
						if (this.buffTime[j] > Player.manaSickTimeMax)
						{
							this.buffTime[j] = Player.manaSickTimeMax;
							return;
						}
					}
					else if (this.buffTime[j] < num)
					{
						this.buffTime[j] = num;
					}
					return;
				}
			}
			if (Main.vanityPet[type] || Main.lightPet[type])
			{
				for (int k = 0; k < 22; k++)
				{
					if (Main.vanityPet[type] && Main.vanityPet[this.buffType[k]])
					{
						this.DelBuff(k);
					}
					if (Main.lightPet[type] && Main.lightPet[this.buffType[k]])
					{
						this.DelBuff(k);
					}
				}
			}
			while (num2 == -1)
			{
				int num3 = -1;
				for (int l = 0; l < 22; l++)
				{
					if (!Main.debuff[this.buffType[l]])
					{
						num3 = l;
						break;
					}
				}
				if (num3 == -1)
				{
					return;
				}
				for (int m = num3; m < 22; m++)
				{
					if (this.buffType[m] == 0)
					{
						num2 = m;
						break;
					}
				}
				if (num2 == -1)
				{
					this.DelBuff(num3);
				}
			}
			this.buffType[num2] = type;
			this.buffTime[num2] = num;
			if (Main.meleeBuff[type])
			{
				for (int n = 0; n < 22; n++)
				{
					if (n != num2 && Main.meleeBuff[this.buffType[n]])
					{
						this.DelBuff(n);
					}
				}
			}
		}

		public void DelBuff(int b)
		{
			this.buffTime[b] = 0;
			this.buffType[b] = 0;
			for (int i = 0; i < 21; i++)
			{
				if (this.buffTime[i] == 0 || this.buffType[i] == 0)
				{
					for (int j = i + 1; j < 22; j++)
					{
						this.buffTime[j - 1] = this.buffTime[j];
						this.buffType[j - 1] = this.buffType[j];
						this.buffTime[j] = 0;
						this.buffType[j] = 0;
					}
				}
			}
		}

		public void ClearBuff(int type)
		{
			for (int i = 0; i < 22; i++)
			{
				if (this.buffType[i] == type)
				{
					this.DelBuff(i);
				}
			}
		}

		public int CountBuffs()
		{
			int num = 0;
			for (int i = 0; i < 22; i++)
			{
				if (this.buffType[num] > 0)
				{
					num++;
				}
			}
			return num;
		}

		public void QuickHeal()
		{
			if (this.noItems)
			{
				return;
			}
			if (this.statLife == this.statLifeMax2 || this.potionDelay > 0)
			{
				return;
			}
			Item item = this.QuickHeal_GetItemToUse();
			if (item == null)
			{
				return;
			}
			Main.PlaySound(item.UseSound, this.position);
			if (item.potion)
			{
				if (item.type == 227)
				{
					this.potionDelay = this.restorationDelayTime;
					this.AddBuff(21, this.potionDelay, true);
				}
				else
				{
					this.potionDelay = this.potionDelayTime;
					this.AddBuff(21, this.potionDelay, true);
				}
			}
			ItemLoader.UseItem(item, this);
			this.statLife += item.healLife;
			this.statMana += item.healMana;
			if (this.statLife > this.statLifeMax2)
			{
				this.statLife = this.statLifeMax2;
			}
			if (this.statMana > this.statManaMax2)
			{
				this.statMana = this.statManaMax2;
			}
			if (item.healLife > 0 && Main.myPlayer == this.whoAmI)
			{
				this.HealEffect(item.healLife, true);
			}
			if (item.healMana > 0 && Main.myPlayer == this.whoAmI)
			{
				this.ManaEffect(item.healMana);
			}
			if (ItemLoader.ConsumeItem(item, this))
			{
				item.stack--;
			}
			if (item.stack <= 0)
			{
				item.TurnToAir();
			}
			Recipe.FindRecipes();
		}

		public Item QuickHeal_GetItemToUse()
		{
			int num = this.statLifeMax2 - this.statLife;
			Item result = null;
			int num2 = -this.statLifeMax2;
			for (int i = 0; i < 58; i++)
			{
				Item item = this.inventory[i];
				if (item.stack > 0 && item.type > 0 && item.potion && item.healLife > 0 && ItemLoader.CanUseItem(item, this))
				{
					int num3 = item.healLife - num;
					if (num2 < 0)
					{
						if (num3 > num2)
						{
							result = item;
							num2 = num3;
						}
					}
					else if (num3 < num2 && num3 >= 0)
					{
						result = item;
						num2 = num3;
					}
				}
			}
			return result;
		}

		public void QuickMana()
		{
			if (this.noItems)
			{
				return;
			}
			if (this.statMana == this.statManaMax2)
			{
				return;
			}
			for (int i = 0; i < 58; i++)
			{
				if (this.inventory[i].stack > 0 && this.inventory[i].type > 0 && this.inventory[i].healMana > 0 && (this.potionDelay == 0 || !this.inventory[i].potion) && ItemLoader.CanUseItem(this.inventory[i], this))
				{
					Main.PlaySound(this.inventory[i].UseSound, this.position);
					if (this.inventory[i].potion)
					{
						if (this.inventory[i].type == 227)
						{
							this.potionDelay = this.restorationDelayTime;
							this.AddBuff(21, this.potionDelay, true);
						}
						else
						{
							this.potionDelay = this.potionDelayTime;
							this.AddBuff(21, this.potionDelay, true);
						}
					}
					ItemLoader.UseItem(this.inventory[i], this);
					this.statLife += this.inventory[i].healLife;
					this.statMana += this.inventory[i].healMana;
					if (this.statLife > this.statLifeMax2)
					{
						this.statLife = this.statLifeMax2;
					}
					if (this.statMana > this.statManaMax2)
					{
						this.statMana = this.statManaMax2;
					}
					if (this.inventory[i].healLife > 0 && Main.myPlayer == this.whoAmI)
					{
						this.HealEffect(this.inventory[i].healLife, true);
					}
					if (this.inventory[i].healMana > 0)
					{
						this.AddBuff(94, Player.manaSickTime, true);
						if (Main.myPlayer == this.whoAmI)
						{
							this.ManaEffect(this.inventory[i].healMana);
						}
					}
					if (ItemLoader.ConsumeItem(this.inventory[i], this))
					{
						this.inventory[i].stack--;
					}
					if (this.inventory[i].stack <= 0)
					{
						this.inventory[i].TurnToAir();
					}
					Recipe.FindRecipes();
					return;
				}
			}
		}

		public Item QuickMana_GetItemToUse()
		{
			for (int i = 0; i < 58; i++)
			{
				if (this.inventory[i].stack > 0 && this.inventory[i].type > 0 && this.inventory[i].healMana > 0 && (this.potionDelay == 0 || !this.inventory[i].potion) && ItemLoader.CanUseItem(this.inventory[i], this))
				{
					return this.inventory[i];
				}
			}
			return null;
		}

		public void QuickBuff()
		{
			if (this.noItems)
			{
				return;
			}
			LegacySoundStyle legacySoundStyle = null;
			for (int i = 0; i < 58; i++)
			{
				if (this.CountBuffs() == 22)
				{
					return;
				}
				if (this.inventory[i].stack > 0 && this.inventory[i].type > 0 && this.inventory[i].buffType > 0 && !this.inventory[i].summon && this.inventory[i].buffType != 90)
				{
					int num = this.inventory[i].buffType;
					bool flag = ItemLoader.CanUseItem(this.inventory[i], this);
					for (int j = 0; j < 22; j++)
					{
						if (num == 27 && (this.buffType[j] == num || this.buffType[j] == 101 || this.buffType[j] == 102))
						{
							flag = false;
							break;
						}
						if (this.buffType[j] == num)
						{
							flag = false;
							break;
						}
						if (Main.meleeBuff[num] && Main.meleeBuff[this.buffType[j]])
						{
							flag = false;
							break;
						}
					}
					if (Main.lightPet[this.inventory[i].buffType] || Main.vanityPet[this.inventory[i].buffType])
					{
						for (int k = 0; k < 22; k++)
						{
							if (Main.lightPet[this.buffType[k]] && Main.lightPet[this.inventory[i].buffType])
							{
								flag = false;
							}
							if (Main.vanityPet[this.buffType[k]] && Main.vanityPet[this.inventory[i].buffType])
							{
								flag = false;
							}
						}
					}
					if (this.inventory[i].mana > 0 && flag)
					{
						if (this.statMana >= (int)((float)this.inventory[i].mana * this.manaCost))
						{
							this.manaRegenDelay = (int)this.maxRegenDelay;
							this.statMana -= (int)((float)this.inventory[i].mana * this.manaCost);
						}
						else
						{
							flag = false;
						}
					}
					if (this.whoAmI == Main.myPlayer && this.inventory[i].type == 603 && !Main.cEd)
					{
						flag = false;
					}
					if (num == 27)
					{
						num = Main.rand.Next(3);
						if (num == 0)
						{
							num = 27;
						}
						if (num == 1)
						{
							num = 101;
						}
						if (num == 2)
						{
							num = 102;
						}
					}
					if (flag)
					{
						ItemLoader.UseItem(this.inventory[i], this);
						legacySoundStyle = this.inventory[i].UseSound;
						int num2 = this.inventory[i].buffTime;
						if (num2 == 0)
						{
							num2 = 3600;
						}
						this.AddBuff(num, num2, true);
						if (this.inventory[i].consumable)
						{
							if (ItemLoader.ConsumeItem(this.inventory[i], this))
							{
								this.inventory[i].stack--;
							}
							if (this.inventory[i].stack <= 0)
							{
								this.inventory[i].TurnToAir();
							}
						}
					}
				}
			}
			if (legacySoundStyle != null)
			{
				Main.PlaySound(legacySoundStyle, this.position);
				Recipe.FindRecipes();
			}
		}

		public void QuickMount()
		{
			if (this.mount.Active)
			{
				this.mount.Dismount(this);
				return;
			}
			if (this.frozen || this.tongued || this.webbed || this.stoned || this.gravDir == -1f)
			{
				return;
			}
			if (this.noItems)
			{
				return;
			}
			Item item = this.QuickMount_GetItemToUse();
			if (item != null && item.mountType != -1 && this.mount.CanMount(item.mountType, this))
			{
				bool flag = false;
				List<Point> tilesIn = Collision.GetTilesIn(base.TopLeft - new Vector2(24f), base.BottomRight + new Vector2(24f));
				if (tilesIn.Count > 0)
				{
					Point? point = null;
					Rectangle arg_CD_0 = base.Hitbox;
					for (int i = 0; i < tilesIn.Count; i++)
					{
						Point point2 = tilesIn[i];
						Tile tileSafely = Framing.GetTileSafely(point2.X, point2.Y);
						if (tileSafely.active() && tileSafely.type == 314)
						{
							Vector2 vector = tilesIn[i].ToVector2() * 16f + new Vector2(8f);
							if (!point.HasValue || (base.Distance(vector) < base.Distance(point.Value.ToVector2() * 16f + new Vector2(8f)) && Collision.CanHitLine(base.Center, 0, 0, vector, 0, 0)))
							{
								point = new Point?(tilesIn[i]);
							}
						}
					}
					if (point.HasValue)
					{
						this.LaunchMinecartHook(point.Value.X, point.Value.Y);
						flag = true;
					}
				}
				if (!flag)
				{
					this.mount.SetMount(item.mountType, this, false);
					ItemLoader.UseItem(item, this);
					if (item.UseSound != null)
					{
						Main.PlaySound(item.UseSound, base.Center);
						return;
					}
				}
			}
			else
			{
				int num = 0;
				int num2 = (int)(this.position.X / 16f) - Player.tileRangeX - num + 1;
				int num3 = (int)((this.position.X + (float)this.width) / 16f) + Player.tileRangeX + num - 1;
				int num4 = (int)(this.position.Y / 16f) - Player.tileRangeY - num + 1;
				int num5 = (int)((this.position.Y + (float)this.height) / 16f) + Player.tileRangeY + num - 2;
				num2 = Utils.Clamp<int>(num2, 10, Main.maxTilesX - 10);
				num3 = Utils.Clamp<int>(num3, 10, Main.maxTilesX - 10);
				num4 = Utils.Clamp<int>(num4, 10, Main.maxTilesY - 10);
				num5 = Utils.Clamp<int>(num5, 10, Main.maxTilesY - 10);
				List<Point> tilesIn2 = Collision.GetTilesIn(new Vector2((float)num2, (float)num4) * 16f, new Vector2((float)(num3 + 1), (float)(num5 + 1)) * 16f);
				if (tilesIn2.Count > 0)
				{
					Point? point3 = null;
					Rectangle arg_338_0 = base.Hitbox;
					for (int j = 0; j < tilesIn2.Count; j++)
					{
						Point point4 = tilesIn2[j];
						Tile tileSafely2 = Framing.GetTileSafely(point4.X, point4.Y);
						if (tileSafely2.active() && tileSafely2.type == 314)
						{
							Vector2 vector2 = tilesIn2[j].ToVector2() * 16f + new Vector2(8f);
							if (!point3.HasValue || (base.Distance(vector2) < base.Distance(point3.Value.ToVector2() * 16f + new Vector2(8f)) && Collision.CanHitLine(base.Center, 0, 0, vector2, 0, 0)))
							{
								point3 = new Point?(tilesIn2[j]);
							}
						}
					}
					if (point3.HasValue)
					{
						this.LaunchMinecartHook(point3.Value.X, point3.Value.Y);
					}
				}
			}
		}

		public Item QuickMount_GetItemToUse()
		{
			Item item = null;
			if (item == null && this.miscEquips[3].mountType != -1 && !MountID.Sets.Cart[this.miscEquips[3].mountType] && ItemLoader.CanUseItem(this.miscEquips[3], this))
			{
				item = this.miscEquips[3];
			}
			if (item == null)
			{
				for (int i = 0; i < 58; i++)
				{
					if (this.inventory[i].mountType != -1 && !MountID.Sets.Cart[this.inventory[i].mountType] && ItemLoader.CanUseItem(this.inventory[i], this))
					{
						item = this.inventory[i];
						break;
					}
				}
			}
			return item;
		}

		public void QuickGrapple()
		{
			if (this.frozen || this.tongued || this.webbed || this.stoned)
			{
				return;
			}
			if (PlayerInput.GrappleAndInteractAreShared)
			{
				if (Main.HoveringOverAnNPC)
				{
					return;
				}
				if (Main.SmartInteractShowingGenuine || Main.SmartInteractShowingFake)
				{
					return;
				}
				if (this._quickGrappleCooldown > 0 && !Main.mapFullscreen)
				{
					return;
				}
				if (WiresUI.Settings.DrawToolModeUI)
				{
					return;
				}
				bool flag = this.controlUseTile;
				bool flag2 = this.releaseUseTile;
				if (!flag && !flag2)
				{
					return;
				}
				Tile tileSafely = Framing.GetTileSafely(Player.tileTargetX, Player.tileTargetY);
				if (tileSafely.active() && (tileSafely.type == 4 || tileSafely.type == 33 || tileSafely.type == 372 || tileSafely.type == 174 || tileSafely.type == 49))
				{
					return;
				}
				if (this.inventory[this.selectedItem].type == 3384)
				{
					return;
				}
			}
			if (this.mount.Active)
			{
				this.mount.Dismount(this);
			}
			if (this.noItems)
			{
				return;
			}
			Item item = null;
			if (item == null && Main.projHook[this.miscEquips[4].shoot])
			{
				item = this.miscEquips[4];
			}
			if (item == null)
			{
				for (int i = 0; i < 58; i++)
				{
					if (Main.projHook[this.inventory[i].shoot])
					{
						item = this.inventory[i];
						break;
					}
				}
			}
			if (item == null)
			{
				return;
			}
			bool? modCanGrapple = ProjectileLoader.CanUseGrapple(item.shoot, this);
			if (modCanGrapple.HasValue)
			{
				if (!modCanGrapple.Value)
				{
					item = null;
				}
			}
			else if (item.shoot == 73)
			{
				int num = 0;
				for (int j = 0; j < 1000; j++)
				{
					if (Main.projectile[j].active && Main.projectile[j].owner == Main.myPlayer && (Main.projectile[j].type == 73 || Main.projectile[j].type == 74))
					{
						num++;
					}
				}
				if (num > 1)
				{
					item = null;
				}
			}
			else if (item.shoot == 165)
			{
				int num2 = 0;
				for (int k = 0; k < 1000; k++)
				{
					if (Main.projectile[k].active && Main.projectile[k].owner == Main.myPlayer && Main.projectile[k].type == 165)
					{
						num2++;
					}
				}
				if (num2 > 8)
				{
					item = null;
				}
			}
			else if (item.shoot == 372)
			{
				int num3 = 0;
				for (int l = 0; l < 1000; l++)
				{
					if (Main.projectile[l].active && Main.projectile[l].owner == Main.myPlayer && Main.projectile[l].type == 372)
					{
						num3++;
					}
				}
				if (num3 > 2)
				{
					item = null;
				}
			}
			else if (item.shoot == 652)
			{
				int num4 = 0;
				for (int m = 0; m < 1000; m++)
				{
					if (Main.projectile[m].active && Main.projectile[m].owner == Main.myPlayer && Main.projectile[m].type == 652)
					{
						num4++;
					}
				}
				if (num4 > 1)
				{
					item = null;
				}
			}
			else if (item.type == 3572)
			{
				int num5 = 0;
				bool flag3 = false;
				for (int n = 0; n < 1000; n++)
				{
					if (Main.projectile[n].active && Main.projectile[n].owner == Main.myPlayer && Main.projectile[n].type >= 646 && Main.projectile[n].type <= 649)
					{
						num5++;
						if (Main.projectile[n].ai[0] == 2f)
						{
							flag3 = true;
						}
					}
				}
				if (num5 > 4 || (!flag3 && num5 > 3))
				{
					item = null;
				}
			}
			else
			{
				for (int num6 = 0; num6 < 1000; num6++)
				{
					if (Main.projectile[num6].active && Main.projectile[num6].owner == Main.myPlayer && Main.projectile[num6].type == item.shoot && Main.projectile[num6].ai[0] != 2f)
					{
						item = null;
						break;
					}
				}
			}
			if (item != null)
			{
				Main.PlaySound(item.UseSound, this.position);
				if (Main.netMode == 1 && this.whoAmI == Main.myPlayer)
				{
					NetMessage.SendData(51, -1, -1, "", this.whoAmI, 2f, 0f, 0f, 0, 0, 0);
				}
				int num7 = item.shoot;
				float shootSpeed = item.shootSpeed;
				int damage = item.damage;
				float knockBack = item.knockBack;
				bool? modSingleHook = ProjectileLoader.SingleGrappleHook(num7, this);
				bool modSingleHookFalse = modSingleHook.HasValue ? !modSingleHook.Value : false;
				bool modSingleHookTrue = modSingleHook.HasValue ? modSingleHook.Value : false;
				if ((num7 == 13 || num7 == 32 || num7 == 315 || (num7 >= 230 && num7 <= 235) || num7 == 331 || modSingleHookTrue) && !modSingleHookFalse)
				{
					this.grappling[0] = -1;
					this.grapCount = 0;
					for (int num8 = 0; num8 < 1000; num8++)
					{
						if (Main.projectile[num8].active && Main.projectile[num8].owner == this.whoAmI)
						{
							bool? modSingleHook2 = ProjectileLoader.SingleGrappleHook(Main.projectile[num8].type, this);
							if (modSingleHook2.HasValue && !modSingleHook2.Value)
							{
								continue;
							}
							if (Main.projectile[num8].type == 13)
							{
								Main.projectile[num8].Kill();
							}
							if (Main.projectile[num8].type == 331)
							{
								Main.projectile[num8].Kill();
							}
							if (Main.projectile[num8].type == 315)
							{
								Main.projectile[num8].Kill();
							}
							if (Main.projectile[num8].type >= 230 && Main.projectile[num8].type <= 235)
							{
								Main.projectile[num8].Kill();
							}
							if (modSingleHook2.HasValue && modSingleHook2.Value)
							{
								Main.projectile[num8].Kill();
							}
						}
					}
				}
				if (num7 == 256)
				{
					int num9 = 0;
					int num10 = -1;
					int num11 = 100000;
					for (int num12 = 0; num12 < 1000; num12++)
					{
						if (Main.projectile[num12].active && Main.projectile[num12].owner == this.whoAmI && Main.projectile[num12].type == 256)
						{
							num9++;
							if (Main.projectile[num12].timeLeft < num11)
							{
								num10 = num12;
								num11 = Main.projectile[num12].timeLeft;
							}
						}
					}
					if (num9 > 1)
					{
						Main.projectile[num10].Kill();
					}
				}
				if (num7 == 652)
				{
					int num13 = 0;
					int num14 = -1;
					int num15 = 100000;
					for (int num16 = 0; num16 < 1000; num16++)
					{
						if (Main.projectile[num16].active && Main.projectile[num16].owner == this.whoAmI && Main.projectile[num16].type == 652)
						{
							num13++;
							if (Main.projectile[num16].timeLeft < num15)
							{
								num14 = num16;
								num15 = Main.projectile[num16].timeLeft;
							}
						}
					}
					if (num13 > 1)
					{
						Main.projectile[num14].Kill();
					}
				}
				if (num7 == 73)
				{
					for (int num17 = 0; num17 < 1000; num17++)
					{
						if (Main.projectile[num17].active && Main.projectile[num17].owner == this.whoAmI && Main.projectile[num17].type == 73)
						{
							num7 = 74;
						}
					}
				}
				if (item.type == 3572)
				{
					int num18 = -1;
					int num19 = -1;
					for (int num20 = 0; num20 < 1000; num20++)
					{
						Projectile projectile = Main.projectile[num20];
						if (projectile.active && projectile.owner == this.whoAmI && projectile.type >= 646 && projectile.type <= 649 && (num19 == -1 || num19 < projectile.timeLeft))
						{
							num18 = projectile.type;
							num19 = projectile.timeLeft;
						}
					}
					int num21 = num18;
					if (num21 != -1)
					{
						switch (num21)
						{
							case 646:
								num7 = 647;
								goto IL_828;
							case 647:
								num7 = 648;
								goto IL_828;
							case 648:
								num7 = 649;
								goto IL_828;
							case 649:
								break;
							default:
								goto IL_828;
						}
					}
					num7 = 646;
				}
				IL_828:
				ProjectileLoader.UseGrapple(this, ref num7);
				Vector2 vector = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
				float num22 = (float)Main.mouseX + Main.screenPosition.X - vector.X;
				float num23 = (float)Main.mouseY + Main.screenPosition.Y - vector.Y;
				if (this.gravDir == -1f)
				{
					num23 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - vector.Y;
				}
				float num24 = (float)Math.Sqrt((double)(num22 * num22 + num23 * num23));
				if ((float.IsNaN(num22) && float.IsNaN(num23)) || (num22 == 0f && num23 == 0f))
				{
					num22 = (float)this.direction;
					num23 = 0f;
					num24 = shootSpeed;
				}
				else
				{
					num24 = shootSpeed / num24;
				}
				num22 *= num24;
				num23 *= num24;
				Projectile.NewProjectile(vector.X, vector.Y, num22, num23, num7, damage, knockBack, this.whoAmI, 0f, 0f);
			}
		}

		public void StatusNPC(int type, int i)
		{
			if (this.meleeEnchant > 0)
			{
				if (this.meleeEnchant == 1)
				{
					Main.npc[i].AddBuff(70, 60 * Main.rand.Next(5, 10), false);
				}
				if (this.meleeEnchant == 2)
				{
					Main.npc[i].AddBuff(39, 60 * Main.rand.Next(3, 7), false);
				}
				if (this.meleeEnchant == 3)
				{
					Main.npc[i].AddBuff(24, 60 * Main.rand.Next(3, 7), false);
				}
				if (this.meleeEnchant == 5)
				{
					Main.npc[i].AddBuff(69, 60 * Main.rand.Next(10, 20), false);
				}
				if (this.meleeEnchant == 6)
				{
					Main.npc[i].AddBuff(31, 60 * Main.rand.Next(1, 4), false);
				}
				if (this.meleeEnchant == 8)
				{
					Main.npc[i].AddBuff(20, 60 * Main.rand.Next(5, 10), false);
				}
				if (this.meleeEnchant == 4)
				{
					Main.npc[i].AddBuff(72, 120, false);
				}
			}
			if (this.frostBurn)
			{
				Main.npc[i].AddBuff(44, 60 * Main.rand.Next(5, 15), false);
			}
			if (this.magmaStone)
			{
				if (Main.rand.Next(4) == 0)
				{
					Main.npc[i].AddBuff(24, 360, false);
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.npc[i].AddBuff(24, 240, false);
				}
				else
				{
					Main.npc[i].AddBuff(24, 120, false);
				}
			}
			if (type == 3211)
			{
				Main.npc[i].AddBuff(69, 60 * Main.rand.Next(5, 10), false);
			}
			if (type == 121)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.npc[i].AddBuff(24, 180, false);
					return;
				}
			}
			else if (type == 3823)
			{
				if (Main.rand.Next(4) == 0)
				{
					Main.npc[i].AddBuff(24, 300, false);
					return;
				}
			}
			else if (type == 122)
			{
				if (Main.rand.Next(10) == 0)
				{
					Main.npc[i].AddBuff(24, 180, false);
					return;
				}
			}
			else if (type == 190)
			{
				if (Main.rand.Next(4) == 0)
				{
					Main.npc[i].AddBuff(20, 420, false);
					return;
				}
			}
			else if (type == 217)
			{
				if (Main.rand.Next(5) == 0)
				{
					Main.npc[i].AddBuff(24, 180, false);
					return;
				}
			}
			else if (type == 1123 && Main.rand.Next(10) != 0)
			{
				Main.npc[i].AddBuff(31, 120, false);
			}
		}

		public void StatusPvP(int type, int i)
		{
			if (this.meleeEnchant > 0)
			{
				if (this.meleeEnchant == 1)
				{
					Main.player[i].AddBuff(70, 60 * Main.rand.Next(5, 10), true);
				}
				if (this.meleeEnchant == 2)
				{
					Main.player[i].AddBuff(39, 60 * Main.rand.Next(3, 7), true);
				}
				if (this.meleeEnchant == 3)
				{
					Main.player[i].AddBuff(24, 60 * Main.rand.Next(3, 7), true);
				}
				if (this.meleeEnchant == 5)
				{
					Main.player[i].AddBuff(69, 60 * Main.rand.Next(10, 20), true);
				}
				if (this.meleeEnchant == 6)
				{
					Main.player[i].AddBuff(31, 60 * Main.rand.Next(1, 4), true);
				}
				if (this.meleeEnchant == 8)
				{
					Main.player[i].AddBuff(20, 60 * Main.rand.Next(5, 10), true);
				}
			}
			if (this.frostBurn)
			{
				Main.player[i].AddBuff(44, 60 * Main.rand.Next(1, 8), true);
			}
			if (this.magmaStone)
			{
				if (Main.rand.Next(7) == 0)
				{
					Main.player[i].AddBuff(24, 360, true);
				}
				else if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(24, 120, true);
				}
				else
				{
					Main.player[i].AddBuff(24, 60, true);
				}
			}
			if (type == 121)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(24, 180, false);
					return;
				}
			}
			else if (type == 3823)
			{
				if (Main.rand.Next(4) == 0)
				{
					Main.player[i].AddBuff(24, 300, true);
					return;
				}
			}
			else if (type == 122)
			{
				if (Main.rand.Next(10) == 0)
				{
					Main.player[i].AddBuff(24, 180, false);
					return;
				}
			}
			else if (type == 190)
			{
				if (Main.rand.Next(4) == 0)
				{
					Main.player[i].AddBuff(20, 420, false);
					return;
				}
			}
			else if (type == 217)
			{
				if (Main.rand.Next(5) == 0)
				{
					Main.player[i].AddBuff(24, 180, false);
					return;
				}
			}
			else if (type == 1123 && Main.rand.Next(9) != 0)
			{
				Main.player[i].AddBuff(31, 120, false);
			}
		}

		public void Ghost()
		{
			this.immune = false;
			this.immuneAlpha = 0;
			this.controlUp = false;
			this.controlLeft = false;
			this.controlDown = false;
			this.controlRight = false;
			this.controlJump = false;
			if (Main.hasFocus && !Main.drawingPlayerChat && !Main.editSign && !Main.editChest && !Main.blockInput)
			{
				PlayerInput.Triggers.Current.CopyInto(this);
			}
			if (this.controlUp || this.controlJump)
			{
				if (this.velocity.Y > 0f)
				{
					this.velocity.Y = this.velocity.Y * 0.9f;
				}
				this.velocity.Y = this.velocity.Y - 0.1f;
				if (this.velocity.Y < -3f)
				{
					this.velocity.Y = -3f;
				}
			}
			else if (this.controlDown)
			{
				if (this.velocity.Y < 0f)
				{
					this.velocity.Y = this.velocity.Y * 0.9f;
				}
				this.velocity.Y = this.velocity.Y + 0.1f;
				if (this.velocity.Y > 3f)
				{
					this.velocity.Y = 3f;
				}
			}
			else if ((double)this.velocity.Y < -0.1 || (double)this.velocity.Y > 0.1)
			{
				this.velocity.Y = this.velocity.Y * 0.9f;
			}
			else
			{
				this.velocity.Y = 0f;
			}
			if (this.controlLeft && !this.controlRight)
			{
				if (this.velocity.X > 0f)
				{
					this.velocity.X = this.velocity.X * 0.9f;
				}
				this.velocity.X = this.velocity.X - 0.1f;
				if (this.velocity.X < -3f)
				{
					this.velocity.X = -3f;
				}
			}
			else if (this.controlRight && !this.controlLeft)
			{
				if (this.velocity.X < 0f)
				{
					this.velocity.X = this.velocity.X * 0.9f;
				}
				this.velocity.X = this.velocity.X + 0.1f;
				if (this.velocity.X > 3f)
				{
					this.velocity.X = 3f;
				}
			}
			else if ((double)this.velocity.X < -0.1 || (double)this.velocity.X > 0.1)
			{
				this.velocity.X = this.velocity.X * 0.9f;
			}
			else
			{
				this.velocity.X = 0f;
			}
			this.position += this.velocity;
			this.ghostFrameCounter++;
			if (this.velocity.X < 0f)
			{
				this.direction = -1;
			}
			else if (this.velocity.X > 0f)
			{
				this.direction = 1;
			}
			if (this.ghostFrameCounter >= 8)
			{
				this.ghostFrameCounter = 0;
				this.ghostFrame++;
				if (this.ghostFrame >= 4)
				{
					this.ghostFrame = 0;
				}
			}
			if (this.position.X < Main.leftWorld + (float)(Lighting.offScreenTiles * 16) + 16f)
			{
				this.position.X = Main.leftWorld + (float)(Lighting.offScreenTiles * 16) + 16f;
				this.velocity.X = 0f;
			}
			if (this.position.X + (float)this.width > Main.rightWorld - (float)(Lighting.offScreenTiles * 16) - 32f)
			{
				this.position.X = Main.rightWorld - (float)(Lighting.offScreenTiles * 16) - 32f - (float)this.width;
				this.velocity.X = 0f;
			}
			if (this.position.Y < Main.topWorld + (float)(Lighting.offScreenTiles * 16) + 16f)
			{
				this.position.Y = Main.topWorld + (float)(Lighting.offScreenTiles * 16) + 16f;
				if ((double)this.velocity.Y < -0.1)
				{
					this.velocity.Y = -0.1f;
				}
			}
			if (this.position.Y > Main.bottomWorld - (float)(Lighting.offScreenTiles * 16) - 32f - (float)this.height)
			{
				this.position.Y = Main.bottomWorld - (float)(Lighting.offScreenTiles * 16) - 32f - (float)this.height;
				this.velocity.Y = 0f;
			}
		}

		private void OldInputGhost()
		{
			Keys[] pressedKeys = Main.keyState.GetPressedKeys();
			if (Main.blockKey != Keys.None.ToString())
			{
				bool flag = false;
				for (int i = 0; i < pressedKeys.Length; i++)
				{
					if (pressedKeys[i].ToString() == Main.blockKey)
					{
						pressedKeys[i] = Keys.None;
						flag = true;
					}
				}
				if (!flag)
				{
					Main.blockKey = Keys.None.ToString();
				}
			}
			for (int j = 0; j < pressedKeys.Length; j++)
			{
				string a = string.Concat(pressedKeys[j]);
				if (a == Main.cUp)
				{
					this.controlUp = true;
				}
				if (a == Main.cLeft)
				{
					this.controlLeft = true;
				}
				if (a == Main.cDown)
				{
					this.controlDown = true;
				}
				if (a == Main.cRight)
				{
					this.controlRight = true;
				}
				if (a == Main.cJump)
				{
					this.controlJump = true;
				}
			}
		}

		public void OnHit(float x, float y, Entity victim)
		{
			if (Main.myPlayer != this.whoAmI)
			{
				return;
			}
			if (this.onHitDodge && this.shadowDodgeTimer == 0 && Main.rand.Next(4) == 0)
			{
				if (!this.shadowDodge)
				{
					this.shadowDodgeTimer = 1800;
				}
				this.AddBuff(59, 1800, true);
			}
			if (this.onHitRegen)
			{
				this.AddBuff(58, 300, true);
			}
			if (this.stardustMinion && victim is NPC)
			{
				for (int i = 0; i < 1000; i++)
				{
					Projectile projectile = Main.projectile[i];
					if (projectile.active && projectile.owner == this.whoAmI && projectile.type == 613 && projectile.localAI[1] <= 0f && Main.rand.Next(2) == 0)
					{
						Vector2 value = new Vector2(x, y) - projectile.Center;
						if (value.Length() > 0f)
						{
							value.Normalize();
						}
						value *= 20f;
						Projectile.NewProjectile(projectile.Center.X, projectile.Center.Y, value.X, value.Y, 614, projectile.damage / 3, 0f, projectile.owner, 0f, (float)victim.whoAmI);
						projectile.localAI[1] = (float)(30 + Main.rand.Next(4) * 10);
					}
				}
			}
			if (this.onHitPetal && this.petalTimer == 0)
			{
				this.petalTimer = 20;
				if (x < this.position.X + (float)(this.width / 2))
				{
				}
				int direction = this.direction;
				float num = Main.screenPosition.X;
				if (direction < 0)
				{
					num += (float)Main.screenWidth;
				}
				float num2 = Main.screenPosition.Y;
				num2 += (float)Main.rand.Next(Main.screenHeight);
				Vector2 vector = new Vector2(num, num2);
				float num3 = x - vector.X;
				float num4 = y - vector.Y;
				num3 += (float)Main.rand.Next(-50, 51) * 0.1f;
				num4 += (float)Main.rand.Next(-50, 51) * 0.1f;
				int num5 = 24;
				float num6 = (float)Math.Sqrt((double)(num3 * num3 + num4 * num4));
				num6 = (float)num5 / num6;
				num3 *= num6;
				num4 *= num6;
				Projectile.NewProjectile(num, num2, num3, num4, 221, 36, 0f, this.whoAmI, 0f, 0f);
			}
			if (this.crystalLeaf && this.petalTimer == 0)
			{
				int arg_2D2_0 = this.inventory[this.selectedItem].type;
				for (int j = 0; j < 1000; j++)
				{
					if (Main.projectile[j].owner == this.whoAmI && Main.projectile[j].type == 226)
					{
						this.petalTimer = 50;
						float num7 = 12f;
						Vector2 vector2 = new Vector2(Main.projectile[j].position.X + (float)this.width * 0.5f, Main.projectile[j].position.Y + (float)this.height * 0.5f);
						float num8 = x - vector2.X;
						float num9 = y - vector2.Y;
						float num10 = (float)Math.Sqrt((double)(num8 * num8 + num9 * num9));
						num10 = num7 / num10;
						num8 *= num10;
						num9 *= num10;
						Projectile.NewProjectile(Main.projectile[j].Center.X - 4f, Main.projectile[j].Center.Y, num8, num9, 227, Player.crystalLeafDamage, (float)Player.crystalLeafKB, this.whoAmI, 0f, 0f);
						return;
					}
				}
			}
			PlayerHooks.OnHitAnything(this, x, y, victim);
		}

		public void openPresent()
		{
			if (!ItemLoader.PreOpenVanillaBag("present", this, 0))
			{
				return;
			}
			ItemLoader.OpenVanillaBag("present", this, 0);
			if (Main.rand.Next(15) == 0 && Main.hardMode)
			{
				int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 602, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, "", number, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(30) == 0)
			{
				int number2 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1922, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, "", number2, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(400) == 0)
			{
				int number3 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1927, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, "", number3, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(150) == 0)
			{
				int number4 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1870, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, "", number4, 1f, 0f, 0f, 0, 0, 0);
				}
				number4 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 97, Main.rand.Next(30, 61), false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, "", number4, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(150) == 0)
			{
				int number5 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1909, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, "", number5, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(150) == 0)
			{
				int number6 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1917, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, "", number6, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(150) == 0)
			{
				int number7 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1915, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, "", number7, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(150) == 0)
			{
				int number8 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1918, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, "", number8, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(150) == 0)
			{
				int number9 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1921, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, "", number9, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(300) == 0)
			{
				int number10 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1923, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, "", number10, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(40) == 0)
			{
				int number11 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1907, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, "", number11, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(10) == 0)
			{
				int number12 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1908, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, "", number12, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(15) == 0)
			{
				int num = Main.rand.Next(5);
				if (num == 0)
				{
					int number13 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1932, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number13, 1f, 0f, 0f, 0, 0, 0);
					}
					number13 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1933, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number13, 1f, 0f, 0f, 0, 0, 0);
					}
					number13 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1934, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number13, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 1)
				{
					int number14 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1935, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number14, 1f, 0f, 0f, 0, 0, 0);
					}
					number14 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1936, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number14, 1f, 0f, 0f, 0, 0, 0);
					}
					number14 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1937, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number14, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 2)
				{
					int number15 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1940, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number15, 1f, 0f, 0f, 0, 0, 0);
					}
					number15 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1941, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number15, 1f, 0f, 0f, 0, 0, 0);
					}
					number15 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1942, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number15, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 3)
				{
					int number16 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1938, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number16, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 4)
				{
					int number17 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1939, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number17, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
			}
			else if (Main.rand.Next(7) == 0)
			{
				int num2 = Main.rand.Next(3);
				if (num2 == 0)
				{
					num2 = 1911;
				}
				if (num2 == 1)
				{
					num2 = 1919;
				}
				if (num2 == 2)
				{
					num2 = 1920;
				}
				int number18 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num2, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, "", number18, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(8) == 0)
			{
				int number19 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1912, Main.rand.Next(1, 4), false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, "", number19, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(9) == 0)
			{
				int number20 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1913, Main.rand.Next(20, 41), false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, "", number20, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else
			{
				int num3 = Main.rand.Next(3);
				if (num3 == 0)
				{
					int number21 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1872, Main.rand.Next(20, 50), false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number21, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num3 == 1)
				{
					int number22 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 586, Main.rand.Next(20, 50), false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number22, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else
				{
					int number23 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 591, Main.rand.Next(20, 50), false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number23, 1f, 0f, 0f, 0, 0, 0);
					}
				}
			}
		}

		public void QuickSpawnItem(int item, int stack = 1)
		{
			int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, item, stack, false, -1, false, false);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, "", number, 1f, 0f, 0f, 0, 0, 0);
			}
		}

		public void OpenBossBag(int type)
		{
			if (!ItemLoader.PreOpenVanillaBag("bossBag", this, type))
			{
				return;
			}
			ItemLoader.OpenVanillaBag("bossBag", this, type);
			if (type == 3318)
			{
				if (Main.rand.Next(2) == 0)
				{
					this.QuickSpawnItem(2430, 1);
				}
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(2493, 1);
				}
				int num = Main.rand.Next(256, 259);
				int num2;
				for (num2 = Main.rand.Next(256, 259); num2 == num; num2 = Main.rand.Next(256, 259))
				{
				}
				this.QuickSpawnItem(num, 1);
				this.QuickSpawnItem(num2, 1);
				if (Main.rand.Next(2) == 0)
				{
					this.QuickSpawnItem(2610, 1);
				}
				else
				{
					this.QuickSpawnItem(2585, 1);
				}
				this.QuickSpawnItem(998, 1);
				this.QuickSpawnItem(3090, 1);
			}
			else if (type == 3319)
			{
				if (this.difficulty == 2)
				{
					this.QuickSpawnItem(3763, 1);
				}
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(2112, 1);
				}
				if (Main.rand.Next(30) == 0)
				{
					this.QuickSpawnItem(1299, 1);
				}
				if (WorldGen.crimson)
				{
					int num3 = Main.rand.Next(20) + 10;
					num3 += Main.rand.Next(20) + 10;
					num3 += Main.rand.Next(20) + 10;
					this.QuickSpawnItem(880, num3);
					num3 = Main.rand.Next(3) + 1;
					this.QuickSpawnItem(2171, num3);
				}
				else
				{
					int num4 = Main.rand.Next(20) + 10;
					num4 += Main.rand.Next(20) + 10;
					num4 += Main.rand.Next(20) + 10;
					this.QuickSpawnItem(56, num4);
					num4 = Main.rand.Next(3) + 1;
					this.QuickSpawnItem(59, num4);
					num4 = Main.rand.Next(30) + 20;
					this.QuickSpawnItem(47, num4);
				}
				this.QuickSpawnItem(3097, 1);
			}
			else if (type == 3320)
			{
				int num5 = Main.rand.Next(15, 30);
				num5 += Main.rand.Next(15, 31);
				this.QuickSpawnItem(56, num5);
				num5 = Main.rand.Next(10, 20);
				this.QuickSpawnItem(86, num5);
				if (Main.rand.Next(20) == 0)
				{
					this.QuickSpawnItem(994, 1);
				}
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(2111, 1);
				}
				this.QuickSpawnItem(3224, 1);
			}
			else if (type == 3321)
			{
				int num6 = Main.rand.Next(20, 46);
				num6 += Main.rand.Next(20, 46);
				this.QuickSpawnItem(880, num6);
				num6 = Main.rand.Next(10, 20);
				this.QuickSpawnItem(1329, num6);
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(2104, 1);
				}
				if (Main.rand.Next(20) == 0)
				{
					this.QuickSpawnItem(3060, 1);
				}
				this.QuickSpawnItem(3223, 1);
			}
			else if (type == 3322)
			{
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(2108, 1);
				}
				int num7 = Main.rand.Next(3);
				if (num7 == 0)
				{
					num7 = 1121;
				}
				else if (num7 == 1)
				{
					num7 = 1123;
				}
				else if (num7 == 2)
				{
					num7 = 2888;
				}
				this.QuickSpawnItem(num7, 1);
				this.QuickSpawnItem(3333, 1);
				if (Main.rand.Next(3) == 0)
				{
					this.QuickSpawnItem(1132, 1);
				}
				if (Main.rand.Next(9) == 0)
				{
					this.QuickSpawnItem(1170, 1);
				}
				if (Main.rand.Next(9) == 0)
				{
					this.QuickSpawnItem(2502, 1);
				}
				this.QuickSpawnItem(1129, 1);
				this.QuickSpawnItem(Main.rand.Next(842, 845), 1);
				this.QuickSpawnItem(1130, Main.rand.Next(10, 30));
				this.QuickSpawnItem(2431, Main.rand.Next(17, 30));
			}
			else if (type == 3323)
			{
				this.QuickSpawnItem(3245, 1);
				int num8 = Main.rand.Next(3);
				if (num8 == 0)
				{
					this.QuickSpawnItem(1281, 1);
				}
				else if (num8 == 1)
				{
					this.QuickSpawnItem(1273, 1);
				}
				else
				{
					this.QuickSpawnItem(1313, 1);
				}
			}
			else if (type == 3324)
			{
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(2105, 1);
				}
				this.QuickSpawnItem(367, 1);
				if (!this.extraAccessory)
				{
					this.QuickSpawnItem(3335, 1);
				}
				int num9 = Main.rand.Next(4);
				if (num9 == 3)
				{
					num9 = 2998;
				}
				else
				{
					num9 = 489 + num9;
				}
				this.QuickSpawnItem(num9, 1);
				int num10 = Main.rand.Next(3);
				if (num10 == 0)
				{
					this.QuickSpawnItem(514, 1);
				}
				else if (num10 == 1)
				{
					this.QuickSpawnItem(426, 1);
				}
				else if (num10 == 2)
				{
					this.QuickSpawnItem(434, 1);
				}
			}
			else if (type == 3325)
			{
				this.TryGettingDevArmor();
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(2113, 1);
				}
				this.QuickSpawnItem(548, Main.rand.Next(25, 41));
				this.QuickSpawnItem(1225, Main.rand.Next(20, 36));
				this.QuickSpawnItem(3355, 1);
			}
			else if (type == 3326)
			{
				this.TryGettingDevArmor();
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(2106, 1);
				}
				this.QuickSpawnItem(549, Main.rand.Next(25, 41));
				this.QuickSpawnItem(1225, Main.rand.Next(20, 36));
				this.QuickSpawnItem(3354, 1);
			}
			else if (type == 3327)
			{
				this.TryGettingDevArmor();
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(2107, 1);
				}
				this.QuickSpawnItem(547, Main.rand.Next(25, 41));
				this.QuickSpawnItem(1225, Main.rand.Next(20, 36));
				this.QuickSpawnItem(3356, 1);
			}
			else if (type == 3328)
			{
				this.TryGettingDevArmor();
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(2109, 1);
				}
				this.QuickSpawnItem(1141, 1);
				this.QuickSpawnItem(3336, 1);
				if (Main.rand.Next(15) == 0)
				{
					this.QuickSpawnItem(1182, 1);
				}
				if (Main.rand.Next(20) == 0)
				{
					this.QuickSpawnItem(1305, 1);
				}
				if (Main.rand.Next(2) == 0)
				{
					this.QuickSpawnItem(1157, 1);
				}
				if (Main.rand.Next(10) == 0)
				{
					this.QuickSpawnItem(3021, 1);
				}
				int num11 = Main.rand.Next(7);
				if (num11 == 0)
				{
					this.QuickSpawnItem(758, 1);
					this.QuickSpawnItem(771, Main.rand.Next(50, 150));
				}
				else if (num11 == 1)
				{
					this.QuickSpawnItem(1255, 1);
				}
				else if (num11 == 2)
				{
					this.QuickSpawnItem(788, 1);
				}
				else if (num11 == 3)
				{
					this.QuickSpawnItem(1178, 1);
				}
				else if (num11 == 4)
				{
					this.QuickSpawnItem(1259, 1);
				}
				else if (num11 == 5)
				{
					this.QuickSpawnItem(1155, 1);
				}
				else if (num11 == 6)
				{
					this.QuickSpawnItem(3018, 1);
				}
			}
			else if (type == 3329)
			{
				this.TryGettingDevArmor();
				this.QuickSpawnItem(3337, 1);
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(2110, 1);
				}
				int num12 = Main.rand.Next(8);
				if (num12 == 0)
				{
					this.QuickSpawnItem(1258, 1);
					this.QuickSpawnItem(1261, Main.rand.Next(60, 100));
				}
				else if (num12 == 1)
				{
					this.QuickSpawnItem(1122, 1);
				}
				else if (num12 == 2)
				{
					this.QuickSpawnItem(899, 1);
				}
				else if (num12 == 3)
				{
					this.QuickSpawnItem(1248, 1);
				}
				else if (num12 == 4)
				{
					this.QuickSpawnItem(1294, 1);
				}
				else if (num12 == 5)
				{
					this.QuickSpawnItem(1295, 1);
				}
				else if (num12 == 6)
				{
					this.QuickSpawnItem(1296, 1);
				}
				else if (num12 == 7)
				{
					this.QuickSpawnItem(1297, 1);
				}
				this.QuickSpawnItem(2218, Main.rand.Next(18, 24));
			}
			else if (type == 3330)
			{
				this.TryGettingDevArmor();
				this.QuickSpawnItem(3367, 1);
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(2588, 1);
				}
				if (Main.rand.Next(10) == 0)
				{
					this.QuickSpawnItem(2609, 1);
				}
				int num13 = Main.rand.Next(5);
				if (num13 == 0)
				{
					this.QuickSpawnItem(2611, 1);
				}
				else if (num13 == 1)
				{
					this.QuickSpawnItem(2624, 1);
				}
				else if (num13 == 2)
				{
					this.QuickSpawnItem(2622, 1);
				}
				else if (num13 == 3)
				{
					this.QuickSpawnItem(2621, 1);
				}
				else if (num13 == 4)
				{
					this.QuickSpawnItem(2623, 1);
				}
			}
			else if (type == 3331)
			{
				this.TryGettingDevArmor();
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(3372, 1);
				}
			}
			else if (type == 3860)
			{
				this.TryGettingDevArmor();
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(3863, 1);
				}
				int num14 = Main.rand.Next(4);
				if (num14 == 0)
				{
					this.QuickSpawnItem(3859, 1);
				}
				else if (num14 == 1)
				{
					this.QuickSpawnItem(3827, 1);
				}
				else if (num14 == 2)
				{
					this.QuickSpawnItem(3870, 1);
				}
				else
				{
					this.QuickSpawnItem(3858, 1);
				}
				if (Main.rand.Next(4) == 0)
				{
					this.QuickSpawnItem(3883, 1);
				}
				this.QuickSpawnItem(3817, Main.rand.Next(30, 50));
			}
			else if (type == 3332)
			{
				this.TryGettingDevArmor();
				if (Main.rand.Next(7) == 0)
				{
					this.QuickSpawnItem(3373, 1);
				}
				if (!this.HasItem(3384))
				{
					this.QuickSpawnItem(3384, 1);
				}
				this.QuickSpawnItem(3460, Main.rand.Next(90, 111));
				this.QuickSpawnItem(1131, 1);
				this.QuickSpawnItem(3577, 1);
				int item = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						3063,
						3389,
						3065,
						1553,
						3546,
						3541,
						3570,
						3571,
						3569
					});
				this.QuickSpawnItem(item, 1);
			}
			int num15 = -1;
			if (type == 3318)
			{
				num15 = 50;
			}
			if (type == 3319)
			{
				num15 = 4;
			}
			if (type == 3320)
			{
				num15 = 13;
			}
			if (type == 3321)
			{
				num15 = 266;
			}
			if (type == 3322)
			{
				num15 = 222;
			}
			if (type == 3323)
			{
				num15 = 35;
			}
			if (type == 3324)
			{
				num15 = 113;
			}
			if (type == 3325)
			{
				num15 = 134;
			}
			if (type == 3326)
			{
				num15 = 125;
			}
			if (type == 3327)
			{
				num15 = 127;
			}
			if (type == 3328)
			{
				num15 = 262;
			}
			if (type == 3329)
			{
				num15 = 245;
			}
			if (type == 3330)
			{
				num15 = 370;
			}
			if (type == 3331)
			{
				num15 = 439;
			}
			if (type == 3332)
			{
				num15 = 398;
			}
			if (type == 3860)
			{
				num15 = 551;
			}
			if (type == 3861)
			{
				num15 = 576;
			}
			if (type == 3862)
			{
				num15 = 564;
			}
			ItemLoader.OpenBossBag(type, this, ref num15);
			if (num15 > 0)
			{
				NPC nPC = new NPC();
				nPC.SetDefaults(num15, -1f);
				float num16 = nPC.value;
				num16 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
				if (Main.rand.Next(5) == 0)
				{
					num16 *= 1f + (float)Main.rand.Next(5, 11) * 0.01f;
				}
				if (Main.rand.Next(10) == 0)
				{
					num16 *= 1f + (float)Main.rand.Next(10, 21) * 0.01f;
				}
				if (Main.rand.Next(15) == 0)
				{
					num16 *= 1f + (float)Main.rand.Next(15, 31) * 0.01f;
				}
				if (Main.rand.Next(20) == 0)
				{
					num16 *= 1f + (float)Main.rand.Next(20, 41) * 0.01f;
				}
				while ((int)num16 > 0)
				{
					if (num16 > 1000000f)
					{
						int num17 = (int)(num16 / 1000000f);
						num16 -= (float)(1000000 * num17);
						this.QuickSpawnItem(74, num17);
					}
					else if (num16 > 10000f)
					{
						int num18 = (int)(num16 / 10000f);
						num16 -= (float)(10000 * num18);
						this.QuickSpawnItem(73, num18);
					}
					else if (num16 > 100f)
					{
						int num19 = (int)(num16 / 100f);
						num16 -= (float)(100 * num19);
						this.QuickSpawnItem(72, num19);
					}
					else
					{
						int num20 = (int)num16;
						if (num20 < 1)
						{
							num20 = 1;
						}
						num16 -= (float)num20;
						this.QuickSpawnItem(71, num20);
					}
				}
			}
		}

		public void TryGettingDevArmor()
		{
			if (Main.rand.Next(20) != 0)
			{
				return;
			}
			switch (Main.rand.Next(12))
			{
				case 0:
					this.QuickSpawnItem(666, 1);
					this.QuickSpawnItem(667, 1);
					this.QuickSpawnItem(668, 1);
					this.QuickSpawnItem(665, 1);
					this.QuickSpawnItem(3287, 1);
					return;
				case 1:
					this.QuickSpawnItem(1554, 1);
					this.QuickSpawnItem(1555, 1);
					this.QuickSpawnItem(1556, 1);
					this.QuickSpawnItem(1586, 1);
					return;
				case 2:
					this.QuickSpawnItem(1587, 1);
					this.QuickSpawnItem(1588, 1);
					this.QuickSpawnItem(1586, 1);
					return;
				case 3:
					this.QuickSpawnItem(1557, 1);
					this.QuickSpawnItem(1558, 1);
					this.QuickSpawnItem(1559, 1);
					this.QuickSpawnItem(1585, 1);
					return;
				case 4:
					this.QuickSpawnItem(1560, 1);
					this.QuickSpawnItem(1561, 1);
					this.QuickSpawnItem(1562, 1);
					this.QuickSpawnItem(1584, 1);
					return;
				case 5:
					this.QuickSpawnItem(1563, 1);
					this.QuickSpawnItem(1564, 1);
					this.QuickSpawnItem(1565, 1);
					this.QuickSpawnItem(3582, 1);
					return;
				case 6:
					this.QuickSpawnItem(1566, 1);
					this.QuickSpawnItem(1567, 1);
					this.QuickSpawnItem(1568, 1);
					return;
				case 7:
					this.QuickSpawnItem(1580, 1);
					this.QuickSpawnItem(1581, 1);
					this.QuickSpawnItem(1582, 1);
					this.QuickSpawnItem(1583, 1);
					return;
				case 8:
					this.QuickSpawnItem(3226, 1);
					this.QuickSpawnItem(3227, 1);
					this.QuickSpawnItem(3228, 1);
					this.QuickSpawnItem(3288, 1);
					return;
				case 9:
					this.QuickSpawnItem(3583, 1);
					this.QuickSpawnItem(3581, 1);
					this.QuickSpawnItem(3578, 1);
					this.QuickSpawnItem(3579, 1);
					this.QuickSpawnItem(3580, 1);
					return;
				case 10:
					this.QuickSpawnItem(3585, 1);
					this.QuickSpawnItem(3586, 1);
					this.QuickSpawnItem(3587, 1);
					this.QuickSpawnItem(3588, 1);
					this.QuickSpawnItem(3024, 4);
					return;
				case 11:
					this.QuickSpawnItem(3589, 1);
					this.QuickSpawnItem(3590, 1);
					this.QuickSpawnItem(3591, 1);
					this.QuickSpawnItem(3592, 1);
					this.QuickSpawnItem(3599, 4);
					return;
				default:
					return;
			}
		}

		public void openCrate(int type)
		{
			if (!ItemLoader.PreOpenVanillaBag("crate", this, type))
			{
				return;
			}
			ItemLoader.OpenVanillaBag("crate", this, type);
			int num = type - 2334;
			if (type >= 3203)
			{
				num = type - 3203 + 3;
			}
			if (num == 0)
			{
				bool flag = true;
				while (flag)
				{
					if (Main.hardMode && flag && Main.rand.Next(200) == 0)
					{
						int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3064, 1, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number, 1f, 0f, 0f, 0, 0, 0);
						}
						flag = false;
					}
					if (flag && Main.rand.Next(40) == 0)
					{
						int type2 = 3200;
						int stack = 1;
						int number2 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, type2, stack, false, -1, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number2, 1f, 0f, 0f, 0, 0, 0);
						}
						flag = false;
					}
					if (flag && Main.rand.Next(40) == 0)
					{
						int type3 = 3201;
						int stack2 = 1;
						int number3 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, type3, stack2, false, -1, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number3, 1f, 0f, 0f, 0, 0, 0);
						}
						flag = false;
					}
					if (Main.hardMode && flag && Main.rand.Next(25) == 0)
					{
						int type4 = 2424;
						int stack3 = 1;
						int number4 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, type4, stack3, false, -1, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number4, 1f, 0f, 0f, 0, 0, 0);
						}
						flag = false;
					}
					if (Main.rand.Next(45) == 0)
					{
						int num2 = Main.rand.Next(5);
						if (num2 == 0)
						{
							num2 = 285;
						}
						else if (num2 == 1)
						{
							num2 = 953;
						}
						else if (num2 == 2)
						{
							num2 = 946;
						}
						else if (num2 == 3)
						{
							num2 = 3068;
						}
						else if (num2 == 4)
						{
							num2 = 3084;
						}
						int number5 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num2, 1, false, -1, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number5, 1f, 0f, 0f, 0, 0, 0);
						}
						flag = false;
					}
					if (!Main.hardMode && flag && Main.rand.Next(50) == 0)
					{
						int type5 = 997;
						int stack4 = 1;
						int number6 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, type5, stack4, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number6, 1f, 0f, 0f, 0, 0, 0);
						}
						flag = false;
					}
					if (Main.rand.Next(7) == 0)
					{
						int type6;
						int stack5;
						if (Main.rand.Next(3) == 0)
						{
							type6 = 73;
							stack5 = Main.rand.Next(1, 6);
						}
						else
						{
							type6 = 72;
							stack5 = Main.rand.Next(20, 91);
						}
						int number7 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, type6, stack5, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number7, 1f, 0f, 0f, 0, 0, 0);
						}
						flag = false;
					}
					if (Main.rand.Next(7) == 0)
					{
						int num3 = Main.rand.Next(8);
						if (num3 == 0)
						{
							num3 = 12;
						}
						else if (num3 == 1)
						{
							num3 = 11;
						}
						else if (num3 == 2)
						{
							num3 = 14;
						}
						else if (num3 == 3)
						{
							num3 = 13;
						}
						else if (num3 == 4)
						{
							num3 = 699;
						}
						else if (num3 == 5)
						{
							num3 = 700;
						}
						else if (num3 == 6)
						{
							num3 = 701;
						}
						else if (num3 == 7)
						{
							num3 = 702;
						}
						if (Main.hardMode && Main.rand.Next(2) == 0)
						{
							num3 = Main.rand.Next(6);
							if (num3 == 0)
							{
								num3 = 364;
							}
							else if (num3 == 1)
							{
								num3 = 365;
							}
							else if (num3 == 2)
							{
								num3 = 366;
							}
							else if (num3 == 3)
							{
								num3 = 1104;
							}
							else if (num3 == 4)
							{
								num3 = 1105;
							}
							else if (num3 == 5)
							{
								num3 = 1106;
							}
						}
						int stack6 = Main.rand.Next(8, 21);
						int number8 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num3, stack6, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number8, 1f, 0f, 0f, 0, 0, 0);
						}
						flag = false;
					}
					if (Main.rand.Next(8) == 0)
					{
						int num4 = Main.rand.Next(8);
						if (num4 == 0)
						{
							num4 = 20;
						}
						else if (num4 == 1)
						{
							num4 = 22;
						}
						else if (num4 == 2)
						{
							num4 = 21;
						}
						else if (num4 == 3)
						{
							num4 = 19;
						}
						else if (num4 == 4)
						{
							num4 = 703;
						}
						else if (num4 == 5)
						{
							num4 = 704;
						}
						else if (num4 == 6)
						{
							num4 = 705;
						}
						else if (num4 == 7)
						{
							num4 = 706;
						}
						int num5 = Main.rand.Next(2, 8);
						if (Main.hardMode && Main.rand.Next(2) == 0)
						{
							num4 = Main.rand.Next(6);
							if (num4 == 0)
							{
								num4 = 381;
							}
							else if (num4 == 1)
							{
								num4 = 382;
							}
							else if (num4 == 2)
							{
								num4 = 391;
							}
							else if (num4 == 3)
							{
								num4 = 1184;
							}
							else if (num4 == 4)
							{
								num4 = 1191;
							}
							else if (num4 == 5)
							{
								num4 = 1198;
							}
							num5 -= Main.rand.Next(2);
						}
						int number9 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num4, num5, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number9, 1f, 0f, 0f, 0, 0, 0);
						}
						flag = false;
					}
					if (Main.rand.Next(7) == 0)
					{
						int num6 = Main.rand.Next(10);
						if (num6 == 0)
						{
							num6 = 288;
						}
						else if (num6 == 1)
						{
							num6 = 290;
						}
						else if (num6 == 2)
						{
							num6 = 292;
						}
						else if (num6 == 3)
						{
							num6 = 299;
						}
						else if (num6 == 4)
						{
							num6 = 298;
						}
						else if (num6 == 5)
						{
							num6 = 304;
						}
						else if (num6 == 6)
						{
							num6 = 291;
						}
						else if (num6 == 7)
						{
							num6 = 2322;
						}
						else if (num6 == 8)
						{
							num6 = 2323;
						}
						else if (num6 == 9)
						{
							num6 = 2329;
						}
						int stack7 = Main.rand.Next(1, 4);
						int number10 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num6, stack7, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number10, 1f, 0f, 0f, 0, 0, 0);
						}
						flag = false;
					}
				}
				if (Main.rand.Next(3) == 0)
				{
					int num7 = Main.rand.Next(2);
					if (num7 == 0)
					{
						num7 = 28;
					}
					else if (num7 == 1)
					{
						num7 = 110;
					}
					int stack8 = Main.rand.Next(5, 16);
					int number11 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num7, stack8, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number11, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				if (Main.rand.Next(3) == 0)
				{
					int type7;
					if (Main.rand.Next(3) == 0)
					{
						type7 = 2675;
					}
					else
					{
						type7 = 2674;
					}
					int stack9 = Main.rand.Next(1, 5);
					int number12 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, type7, stack9, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number12, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
			}
			else if (num == 1)
			{
				bool flag2 = true;
				while (flag2)
				{
					if (Main.hardMode && flag2 && Main.rand.Next(60) == 0)
					{
						int number13 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3064, 1, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number13, 1f, 0f, 0f, 0, 0, 0);
						}
						flag2 = false;
					}
					if (flag2 && Main.rand.Next(25) == 0)
					{
						int type8 = 2501;
						int stack10 = 1;
						int number14 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, type8, stack10, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number14, 1f, 0f, 0f, 0, 0, 0);
						}
						flag2 = false;
					}
					if (flag2 && Main.rand.Next(20) == 0)
					{
						int type9 = 2587;
						int stack11 = 1;
						int number15 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, type9, stack11, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number15, 1f, 0f, 0f, 0, 0, 0);
						}
						flag2 = false;
					}
					if (flag2 && Main.rand.Next(15) == 0)
					{
						int type10 = 2608;
						int stack12 = 1;
						int number16 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, type10, stack12, false, -1, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number16, 1f, 0f, 0f, 0, 0, 0);
						}
						flag2 = false;
					}
					if (flag2 && Main.rand.Next(20) == 0)
					{
						int type11 = 3200;
						int stack13 = 1;
						int number17 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, type11, stack13, false, -1, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number17, 1f, 0f, 0f, 0, 0, 0);
						}
						flag2 = false;
					}
					if (flag2 && Main.rand.Next(20) == 0)
					{
						int type12 = 3201;
						int stack14 = 1;
						int number18 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, type12, stack14, false, -1, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number18, 1f, 0f, 0f, 0, 0, 0);
						}
						flag2 = false;
					}
					if (Main.rand.Next(4) == 0)
					{
						int type13 = 73;
						int stack15 = Main.rand.Next(5, 11);
						int number19 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, type13, stack15, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number19, 1f, 0f, 0f, 0, 0, 0);
						}
						flag2 = false;
					}
					if (Main.rand.Next(4) == 0)
					{
						int num8 = Main.rand.Next(8);
						if (num8 == 0)
						{
							num8 = 20;
						}
						else if (num8 == 1)
						{
							num8 = 22;
						}
						else if (num8 == 2)
						{
							num8 = 21;
						}
						else if (num8 == 3)
						{
							num8 = 19;
						}
						else if (num8 == 4)
						{
							num8 = 703;
						}
						else if (num8 == 5)
						{
							num8 = 704;
						}
						else if (num8 == 6)
						{
							num8 = 705;
						}
						else if (num8 == 7)
						{
							num8 = 706;
						}
						int num9 = Main.rand.Next(6, 15);
						if (Main.hardMode && Main.rand.Next(3) != 0)
						{
							num8 = Main.rand.Next(6);
							if (num8 == 0)
							{
								num8 = 381;
							}
							else if (num8 == 1)
							{
								num8 = 382;
							}
							else if (num8 == 2)
							{
								num8 = 391;
							}
							else if (num8 == 3)
							{
								num8 = 1184;
							}
							else if (num8 == 4)
							{
								num8 = 1191;
							}
							else if (num8 == 5)
							{
								num8 = 1198;
							}
							num9 -= Main.rand.Next(2);
						}
						int number20 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num8, num9, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number20, 1f, 0f, 0f, 0, 0, 0);
						}
						flag2 = false;
					}
					if (Main.rand.Next(4) == 0)
					{
						int num10 = Main.rand.Next(8);
						if (num10 == 0)
						{
							num10 = 288;
						}
						else if (num10 == 1)
						{
							num10 = 296;
						}
						else if (num10 == 2)
						{
							num10 = 304;
						}
						else if (num10 == 3)
						{
							num10 = 305;
						}
						else if (num10 == 4)
						{
							num10 = 2322;
						}
						else if (num10 == 5)
						{
							num10 = 2323;
						}
						else if (num10 == 6)
						{
							num10 = 2324;
						}
						else if (num10 == 7)
						{
							num10 = 2327;
						}
						int stack16 = Main.rand.Next(2, 5);
						int number21 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num10, stack16, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number21, 1f, 0f, 0f, 0, 0, 0);
						}
						flag2 = false;
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					int type14 = Main.rand.Next(188, 190);
					int stack17 = Main.rand.Next(5, 16);
					int number22 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, type14, stack17, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number22, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					int type15;
					if (Main.rand.Next(3) == 0)
					{
						type15 = 2676;
					}
					else
					{
						type15 = 2675;
					}
					int stack18 = Main.rand.Next(2, 5);
					int number23 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, type15, stack18, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number23, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
			}
			else if (num == 2)
			{
				bool flag3 = true;
				while (flag3)
				{
					if (Main.hardMode && flag3 && Main.rand.Next(20) == 0)
					{
						int number24 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3064, 1, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number24, 1f, 0f, 0f, 0, 0, 0);
						}
						flag3 = false;
					}
					if (flag3 && Main.rand.Next(10) == 0)
					{
						int type16 = 2491;
						int stack19 = 1;
						int number25 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, type16, stack19, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number25, 1f, 0f, 0f, 0, 0, 0);
						}
						flag3 = false;
					}
					if (Main.rand.Next(3) == 0)
					{
						int type17 = 73;
						int stack20 = Main.rand.Next(8, 21);
						int number26 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, type17, stack20, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number26, 1f, 0f, 0f, 0, 0, 0);
						}
						flag3 = false;
					}
					if (Main.rand.Next(3) == 0)
					{
						int num11 = Main.rand.Next(4);
						if (num11 == 0)
						{
							num11 = 21;
						}
						else if (num11 == 1)
						{
							num11 = 19;
						}
						else if (num11 == 2)
						{
							num11 = 705;
						}
						else if (num11 == 3)
						{
							num11 = 706;
						}
						if (Main.hardMode && Main.rand.Next(3) != 0)
						{
							num11 = Main.rand.Next(4);
							if (num11 == 0)
							{
								num11 = 382;
							}
							else if (num11 == 1)
							{
								num11 = 391;
							}
							else if (num11 == 2)
							{
								num11 = 1191;
							}
							else if (num11 == 3)
							{
								num11 = 1198;
							}
						}
						int stack21 = Main.rand.Next(15, 31);
						int number27 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num11, stack21, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number27, 1f, 0f, 0f, 0, 0, 0);
						}
						flag3 = false;
					}
				}
				if (Main.rand.Next(3) == 0)
				{
					int num12 = Main.rand.Next(5);
					if (num12 == 0)
					{
						num12 = 288;
					}
					else if (num12 == 1)
					{
						num12 = 296;
					}
					else if (num12 == 2)
					{
						num12 = 305;
					}
					else if (num12 == 3)
					{
						num12 = 2322;
					}
					else if (num12 == 4)
					{
						num12 = 2323;
					}
					int stack22 = Main.rand.Next(2, 6);
					int number28 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num12, stack22, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number28, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					int type18 = Main.rand.Next(499, 501);
					int stack23 = Main.rand.Next(5, 21);
					int number29 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, type18, stack23, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number29, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				if (Main.rand.Next(3) != 0)
				{
					int type19 = 2676;
					int stack24 = Main.rand.Next(3, 8);
					int number30 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, type19, stack24, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number30, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
			}
			else
			{
				int maxValue = 6;
				bool flag4 = true;
				while (flag4)
				{
					if (num == 3 && flag4 && Main.rand.Next(maxValue) == 0)
					{
						int num13 = Main.rand.Next(5);
						if (num13 == 0)
						{
							num13 = 162;
						}
						else if (num13 == 1)
						{
							num13 = 111;
						}
						else if (num13 == 2)
						{
							num13 = 96;
						}
						else if (num13 == 3)
						{
							num13 = 115;
						}
						else
						{
							num13 = 64;
						}
						int number31 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num13, 1, false, -1, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number31, 1f, 0f, 0f, 0, 0, 0);
						}
						flag4 = false;
					}
					if (num == 4 && flag4 && Main.rand.Next(maxValue) == 0)
					{
						int num14 = Main.rand.Next(5);
						if (num14 == 0)
						{
							num14 = 800;
						}
						else if (num14 == 1)
						{
							num14 = 802;
						}
						else if (num14 == 2)
						{
							num14 = 1256;
						}
						else if (num14 == 3)
						{
							num14 = 1290;
						}
						else
						{
							num14 = 3062;
						}
						int number32 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num14, 1, false, -1, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number32, 1f, 0f, 0f, 0, 0, 0);
						}
						flag4 = false;
					}
					if (num == 5 && flag4 && Main.rand.Next(maxValue) == 0)
					{
						int type20 = 3085;
						int number33 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, type20, 1, false, -1, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number33, 1f, 0f, 0f, 0, 0, 0);
						}
						flag4 = false;
					}
					if (num == 6 && flag4 && Main.rand.Next(maxValue) == 0)
					{
						int num15 = Main.rand.Next(3);
						if (num15 == 0)
						{
							num15 = 158;
						}
						else if (num15 == 1)
						{
							num15 = 65;
						}
						else
						{
							num15 = 159;
						}
						int number34 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num15, 1, false, -1, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number34, 1f, 0f, 0f, 0, 0, 0);
						}
						flag4 = false;
					}
					if (num == 8 && flag4 && Main.rand.Next(maxValue) == 0)
					{
						int num16 = Main.rand.Next(5);
						if (num16 == 0)
						{
							num16 = 212;
						}
						else if (num16 == 1)
						{
							num16 = 964;
						}
						else if (num16 == 2)
						{
							num16 = 211;
						}
						else if (num16 == 3)
						{
							num16 = 213;
						}
						else
						{
							num16 = 2292;
						}
						int number35 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num16, 1, false, -1, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number35, 1f, 0f, 0f, 0, 0, 0);
						}
						flag4 = false;
					}
					if (Main.rand.Next(4) == 0)
					{
						int type21 = 73;
						int stack25 = Main.rand.Next(5, 13);
						int number36 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, type21, stack25, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number36, 1f, 0f, 0f, 0, 0, 0);
						}
						flag4 = false;
					}
					if (Main.rand.Next(4) == 0)
					{
						int num17 = Main.rand.Next(6);
						if (num17 == 0)
						{
							num17 = 22;
						}
						else if (num17 == 1)
						{
							num17 = 21;
						}
						else if (num17 == 2)
						{
							num17 = 19;
						}
						else if (num17 == 3)
						{
							num17 = 704;
						}
						else if (num17 == 4)
						{
							num17 = 705;
						}
						else if (num17 == 5)
						{
							num17 = 706;
						}
						int num18 = Main.rand.Next(10, 21);
						if (Main.hardMode && Main.rand.Next(3) != 0)
						{
							num17 = Main.rand.Next(6);
							if (num17 == 0)
							{
								num17 = 381;
							}
							else if (num17 == 1)
							{
								num17 = 382;
							}
							else if (num17 == 2)
							{
								num17 = 391;
							}
							else if (num17 == 3)
							{
								num17 = 1184;
							}
							else if (num17 == 4)
							{
								num17 = 1191;
							}
							else if (num17 == 5)
							{
								num17 = 1198;
							}
							num18 -= Main.rand.Next(3);
						}
						int number37 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num17, num18, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number37, 1f, 0f, 0f, 0, 0, 0);
						}
						flag4 = false;
					}
				}
				if (Main.rand.Next(4) == 0)
				{
					int num19 = Main.rand.Next(6);
					if (num19 == 0)
					{
						num19 = 288;
					}
					else if (num19 == 1)
					{
						num19 = 296;
					}
					else if (num19 == 2)
					{
						num19 = 304;
					}
					else if (num19 == 3)
					{
						num19 = 305;
					}
					else if (num19 == 4)
					{
						num19 = 2322;
					}
					else if (num19 == 5)
					{
						num19 = 2323;
					}
					int stack26 = Main.rand.Next(2, 5);
					int number38 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num19, stack26, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number38, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					int type22 = Main.rand.Next(188, 190);
					int stack27 = Main.rand.Next(5, 18);
					int number39 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, type22, stack27, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number39, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					int type23;
					if (Main.rand.Next(2) == 0)
					{
						type23 = 2676;
					}
					else
					{
						type23 = 2675;
					}
					int stack28 = Main.rand.Next(2, 7);
					int number40 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, type23, stack28, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number40, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				if (num == 3 || num == 4 || num == 7)
				{
					if (Main.hardMode && Main.rand.Next(2) == 0)
					{
						int type24 = 521;
						if (num == 7)
						{
							type24 = 520;
						}
						int stack29 = Main.rand.Next(2, 6);
						int number41 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, type24, stack29, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number41, 1f, 0f, 0f, 0, 0, 0);
						}
					}
					if (Main.hardMode && Main.rand.Next(2) == 0)
					{
						int type25 = 522;
						int stack30 = Main.rand.Next(2, 6);
						if (num == 4)
						{
							type25 = 1332;
						}
						else if (num == 7)
						{
							type25 = 502;
							stack30 = Main.rand.Next(4, 11);
						}
						int number42 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, type25, stack30, false, 0, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", number42, 1f, 0f, 0f, 0, 0, 0);
						}
					}
				}
			}
		}

		public int CountItem(int type, int stopCountingAt = 0)
		{
			int num = 0;
			for (int num2 = 0; num2 != 58; num2++)
			{
				if (this.inventory[num2].stack > 0 && this.inventory[num2].type == type)
				{
					num += this.inventory[num2].stack;
					if (num >= stopCountingAt)
					{
						return num;
					}
				}
			}
			return num;
		}

		public bool ConsumeItem(int type, bool reverseOrder = false)
		{
			int num = 0;
			int num2 = 58;
			int num3 = 1;
			if (reverseOrder)
			{
				num = 57;
				num2 = -1;
				num3 = -1;
			}
			for (int num4 = num; num4 != num2; num4 += num3)
			{
				if (this.inventory[num4].stack > 0 && this.inventory[num4].type == type)
				{
					this.inventory[num4].stack--;
					if (this.inventory[num4].stack <= 0)
					{
						this.inventory[num4].SetDefaults(0, false);
					}
					return true;
				}
			}
			return false;
		}

		public void openLockBox()
		{
			if (!ItemLoader.PreOpenVanillaBag("lockBox", this, 0))
			{
				return;
			}
			ItemLoader.OpenVanillaBag("lockBox", this, 0);
			bool flag = true;
			while (flag)
			{
				flag = false;
				int num = Main.rand.Next(7);
				int type;
				if (num == 1)
				{
					type = 329;
				}
				else if (num == 2)
				{
					type = 155;
				}
				else if (num == 3)
				{
					type = 156;
				}
				else if (num == 4)
				{
					type = 157;
				}
				else if (num == 5)
				{
					type = 163;
				}
				else if (num == 6)
				{
					type = 113;
				}
				else
				{
					type = 164;
				}
				int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, type, 1, false, -1, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, "", number, 1f, 0f, 0f, 0, 0, 0);
				}
				if (Main.rand.Next(3) == 0)
				{
					flag = false;
					int num2 = Main.rand.Next(1, 4);
					if (Main.rand.Next(2) == 0)
					{
						num2 += Main.rand.Next(2);
					}
					if (Main.rand.Next(3) == 0)
					{
						num2 += Main.rand.Next(3);
					}
					if (Main.rand.Next(4) == 0)
					{
						num2 += Main.rand.Next(3);
					}
					if (Main.rand.Next(5) == 0)
					{
						num2 += Main.rand.Next(1, 3);
					}
					int number2 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 73, num2, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number2, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					flag = false;
					int number3 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 72, Main.rand.Next(10, 100), false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number3, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				if (Main.rand.Next(3) == 0)
				{
					flag = false;
					int number4 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 188, Main.rand.Next(2, 6), false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number4, 1f, 0f, 0f, 0, 0, 0);
					}
				}
				if (Main.rand.Next(3) == 0)
				{
					flag = false;
					int num3 = Main.rand.Next(9);
					if (num3 == 0)
					{
						num3 = 296;
					}
					else if (num3 == 1)
					{
						num3 = 2346;
					}
					else if (num3 == 2)
					{
						num3 = 305;
					}
					else if (num3 == 3)
					{
						num3 = 2323;
					}
					else if (num3 == 4)
					{
						num3 = 292;
					}
					else if (num3 == 5)
					{
						num3 = 294;
					}
					else if (num3 == 6)
					{
						num3 = 288;
					}
					else if (Main.netMode == 1)
					{
						num3 = 2997;
					}
					else
					{
						num3 = 2350;
					}
					int number5 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num3, Main.rand.Next(1, 4), false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number5, 1f, 0f, 0f, 0, 0, 0);
					}
				}
			}
		}

		public void openHerbBag()
		{
			if (!ItemLoader.PreOpenVanillaBag("herbBag", this, 0))
			{
				return;
			}
			ItemLoader.OpenVanillaBag("herbBag", this, 0);
			int num = Main.rand.Next(2, 5);
			if (Main.rand.Next(3) == 0)
			{
				num++;
			}
			for (int i = 0; i < num; i++)
			{
				int num2 = Main.rand.Next(14);
				if (num2 == 0)
				{
					num2 = 313;
				}
				if (num2 == 1)
				{
					num2 = 314;
				}
				if (num2 == 2)
				{
					num2 = 315;
				}
				if (num2 == 3)
				{
					num2 = 317;
				}
				if (num2 == 4)
				{
					num2 = 316;
				}
				if (num2 == 5)
				{
					num2 = 318;
				}
				if (num2 == 6)
				{
					num2 = 2358;
				}
				if (num2 == 7)
				{
					num2 = 307;
				}
				if (num2 == 8)
				{
					num2 = 308;
				}
				if (num2 == 9)
				{
					num2 = 309;
				}
				if (num2 == 10)
				{
					num2 = 311;
				}
				if (num2 == 11)
				{
					num2 = 310;
				}
				if (num2 == 12)
				{
					num2 = 312;
				}
				if (num2 == 13)
				{
					num2 = 2357;
				}
				int num3 = Main.rand.Next(2, 5);
				if (Main.rand.Next(3) == 0)
				{
					num3 += Main.rand.Next(1, 5);
				}
				int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num2, num3, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, "", number, 1f, 0f, 0f, 0, 0, 0);
				}
			}
		}

		public void openGoodieBag()
		{
			if (!ItemLoader.PreOpenVanillaBag("goodieBag", this, 0))
			{
				return;
			}
			ItemLoader.OpenVanillaBag("goodieBag", this, 0);
			if (Main.rand.Next(150) == 0)
			{
				int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1810, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, "", number, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(150) == 0)
			{
				int number2 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1800, 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, "", number2, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(4) == 0)
			{
				int number3 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1809, Main.rand.Next(10, 41), false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, "", number3, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else if (Main.rand.Next(10) == 0)
			{
				int number4 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Main.rand.Next(1846, 1851), 1, false, 0, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, "", number4, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else
			{
				int num = Main.rand.Next(19);
				if (num == 0)
				{
					int number5 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1749, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number5, 1f, 0f, 0f, 0, 0, 0);
					}
					number5 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1750, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number5, 1f, 0f, 0f, 0, 0, 0);
					}
					number5 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1751, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number5, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 1)
				{
					int number6 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1746, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number6, 1f, 0f, 0f, 0, 0, 0);
					}
					number6 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1747, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number6, 1f, 0f, 0f, 0, 0, 0);
					}
					number6 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1748, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number6, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 2)
				{
					int number7 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1752, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number7, 1f, 0f, 0f, 0, 0, 0);
					}
					number7 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1753, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number7, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 3)
				{
					int number8 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1767, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number8, 1f, 0f, 0f, 0, 0, 0);
					}
					number8 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1768, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number8, 1f, 0f, 0f, 0, 0, 0);
					}
					number8 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1769, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number8, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 4)
				{
					int number9 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1770, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number9, 1f, 0f, 0f, 0, 0, 0);
					}
					number9 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1771, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number9, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 5)
				{
					int number10 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1772, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number10, 1f, 0f, 0f, 0, 0, 0);
					}
					number10 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1773, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number10, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 6)
				{
					int number11 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1754, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number11, 1f, 0f, 0f, 0, 0, 0);
					}
					number11 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1755, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number11, 1f, 0f, 0f, 0, 0, 0);
					}
					number11 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1756, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number11, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 7)
				{
					int number12 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1757, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number12, 1f, 0f, 0f, 0, 0, 0);
					}
					number12 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1758, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number12, 1f, 0f, 0f, 0, 0, 0);
					}
					number12 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1759, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number12, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 8)
				{
					int number13 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1760, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number13, 1f, 0f, 0f, 0, 0, 0);
					}
					number13 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1761, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number13, 1f, 0f, 0f, 0, 0, 0);
					}
					number13 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1762, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number13, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 9)
				{
					int number14 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1763, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number14, 1f, 0f, 0f, 0, 0, 0);
					}
					number14 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1764, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number14, 1f, 0f, 0f, 0, 0, 0);
					}
					number14 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1765, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number14, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 10)
				{
					int number15 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1766, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number15, 1f, 0f, 0f, 0, 0, 0);
					}
					number15 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1775, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number15, 1f, 0f, 0f, 0, 0, 0);
					}
					number15 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1776, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number15, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 11)
				{
					int number16 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1777, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number16, 1f, 0f, 0f, 0, 0, 0);
					}
					number16 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1778, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number16, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 12)
				{
					int number17 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1779, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number17, 1f, 0f, 0f, 0, 0, 0);
					}
					number17 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1780, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number17, 1f, 0f, 0f, 0, 0, 0);
					}
					number17 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1781, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number17, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 13)
				{
					int number18 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1819, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number18, 1f, 0f, 0f, 0, 0, 0);
					}
					number18 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1820, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number18, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 14)
				{
					int number19 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1821, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number19, 1f, 0f, 0f, 0, 0, 0);
					}
					number19 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1822, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number19, 1f, 0f, 0f, 0, 0, 0);
					}
					number19 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1823, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number19, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 15)
				{
					int number20 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1824, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number20, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 16)
				{
					int number21 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1838, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number21, 1f, 0f, 0f, 0, 0, 0);
					}
					number21 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1839, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number21, 1f, 0f, 0f, 0, 0, 0);
					}
					number21 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1840, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number21, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 17)
				{
					int number22 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1841, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number22, 1f, 0f, 0f, 0, 0, 0);
					}
					number22 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1842, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number22, 1f, 0f, 0f, 0, 0, 0);
					}
					number22 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1843, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number22, 1f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (num == 18)
				{
					int number23 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1851, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number23, 1f, 0f, 0f, 0, 0, 0);
					}
					number23 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1852, 1, false, 0, false, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number23, 1f, 0f, 0f, 0, 0, 0);
					}
				}
			}
		}

		public void UpdateDyes(int plr)
		{
			this.cHead = 0;
			this.cBody = 0;
			this.cLegs = 0;
			this.cHandOn = 0;
			this.cHandOff = 0;
			this.cBack = 0;
			this.cFront = 0;
			this.cShoe = 0;
			this.cWaist = 0;
			this.cShield = 0;
			this.cNeck = 0;
			this.cFace = 0;
			this.cBalloon = 0;
			this.cWings = 0;
			this.cCarpet = 0;
			this.cGrapple = (this.cMount = (this.cMinecart = (this.cPet = (this.cLight = (this.cYorai = 0)))));
			if (this.dye[0] != null)
			{
				this.cHead = (int)this.dye[0].dye;
			}
			if (this.dye[1] != null)
			{
				this.cBody = (int)this.dye[1].dye;
			}
			if (this.dye[2] != null)
			{
				this.cLegs = (int)this.dye[2].dye;
			}
			if (this.wearsRobe)
			{
				this.cLegs = this.cBody;
			}
			if (this.miscDyes[0] != null)
			{
				this.cPet = (int)this.miscDyes[0].dye;
			}
			if (this.miscDyes[1] != null)
			{
				this.cLight = (int)this.miscDyes[1].dye;
			}
			if (this.miscDyes[2] != null)
			{
				this.cMinecart = (int)this.miscDyes[2].dye;
			}
			if (this.miscDyes[3] != null)
			{
				this.cMount = (int)this.miscDyes[3].dye;
			}
			if (this.miscDyes[4] != null)
			{
				this.cGrapple = (int)this.miscDyes[4].dye;
			}
			for (int i = 0; i < 20; i++)
			{
				int num = i % 10;
				if (this.dye[num] != null && this.armor[i].type > 0 && this.armor[i].stack > 0 && (i / 10 >= 1 || !this.hideVisual[num] || this.armor[i].wingSlot > 0 || this.armor[i].type == 934))
				{
					if (this.armor[i].handOnSlot > 0)
					{
						this.cHandOn = (int)this.dye[num].dye;
					}
					if (this.armor[i].handOffSlot > 0)
					{
						this.cHandOff = (int)this.dye[num].dye;
					}
					if (this.armor[i].backSlot > 0)
					{
						this.cBack = (int)this.dye[num].dye;
					}
					if (this.armor[i].frontSlot > 0)
					{
						this.cFront = (int)this.dye[num].dye;
					}
					if (this.armor[i].shoeSlot > 0)
					{
						this.cShoe = (int)this.dye[num].dye;
					}
					if (this.armor[i].waistSlot > 0)
					{
						this.cWaist = (int)this.dye[num].dye;
					}
					if (this.armor[i].shieldSlot > 0)
					{
						this.cShield = (int)this.dye[num].dye;
					}
					if (this.armor[i].neckSlot > 0)
					{
						this.cNeck = (int)this.dye[num].dye;
					}
					if (this.armor[i].faceSlot > 0)
					{
						this.cFace = (int)this.dye[num].dye;
					}
					if (this.armor[i].balloonSlot > 0)
					{
						this.cBalloon = (int)this.dye[num].dye;
					}
					if (this.armor[i].wingSlot > 0)
					{
						this.cWings = (int)this.dye[num].dye;
					}
					if (this.armor[i].type == 934)
					{
						this.cCarpet = (int)this.dye[num].dye;
					}
				}
			}
			this.cYorai = this.cPet;
		}

		public int ArmorSetDye()
		{
			switch (Main.rand.Next(3))
			{
				case 0:
					return this.cHead;
				case 1:
					return this.cBody;
				case 2:
					return this.cLegs;
				default:
					return this.cBody;
			}
		}

		public void UpdateBuffs(int i)
		{
			if (this.soulDrain > 0 && this.whoAmI == Main.myPlayer)
			{
				this.AddBuff(151, 2, true);
			}
			for (int j = 0; j < 1000; j++)
			{
				if (Main.projectile[j].active && Main.projectile[j].owner == i)
				{
					this.ownedProjectileCounts[Main.projectile[j].type]++;
				}
			}
			for (int k = 0; k < 22; k++)
			{
				if (this.buffType[k] > 0 && this.buffTime[k] > 0)
				{
					if (this.whoAmI == Main.myPlayer && this.buffType[k] != 28)
					{
						this.buffTime[k]--;
					}
					int originalIndex = k;
					if (this.buffType[k] == 1)
					{
						this.lavaImmune = true;
						this.fireWalk = true;
						this.buffImmune[24] = true;
					}
					else if (this.buffType[k] == 158)
					{
						this.manaRegenBonus += 2;
					}
					else if (this.buffType[k] == 159 && this.inventory[this.selectedItem].melee)
					{
						this.armorPenetration = 4;
					}
					else if (this.buffType[k] == 2)
					{
						this.lifeRegen += 4;
					}
					else if (this.buffType[k] == 3)
					{
						this.moveSpeed += 0.25f;
					}
					else if (this.buffType[k] == 4)
					{
						this.gills = true;
					}
					else if (this.buffType[k] == 5)
					{
						this.statDefense += 8;
					}
					else if (this.buffType[k] == 6)
					{
						this.manaRegenBuff = true;
					}
					else if (this.buffType[k] == 7)
					{
						this.magicDamage += 0.2f;
					}
					else if (this.buffType[k] == 8)
					{
						this.slowFall = true;
					}
					else if (this.buffType[k] == 9)
					{
						this.findTreasure = true;
					}
					else if (this.buffType[k] == 10)
					{
						this.invis = true;
					}
					else if (this.buffType[k] == 11)
					{
						Lighting.AddLight((int)(this.position.X + (float)(this.width / 2)) / 16, (int)(this.position.Y + (float)(this.height / 2)) / 16, 0.8f, 0.95f, 1f);
					}
					else if (this.buffType[k] == 12)
					{
						this.nightVision = true;
					}
					else if (this.buffType[k] == 13)
					{
						this.enemySpawns = true;
					}
					else if (this.buffType[k] == 14)
					{
						if (this.thorns < 1f)
						{
							this.thorns = 0.333333343f;
						}
					}
					else if (this.buffType[k] == 15)
					{
						this.waterWalk = true;
					}
					else if (this.buffType[k] == 16)
					{
						this.archery = true;
					}
					else if (this.buffType[k] == 17)
					{
						this.detectCreature = true;
					}
					else if (this.buffType[k] == 18)
					{
						this.gravControl = true;
					}
					else if (this.buffType[k] == 30)
					{
						this.bleed = true;
					}
					else if (this.buffType[k] == 31)
					{
						this.confused = true;
					}
					else if (this.buffType[k] == 32)
					{
						this.slow = true;
					}
					else if (this.buffType[k] == 35)
					{
						this.silence = true;
					}
					else if (this.buffType[k] == 160)
					{
						this.dazed = true;
					}
					else if (this.buffType[k] == 46)
					{
						this.chilled = true;
					}
					else if (this.buffType[k] == 47)
					{
						this.frozen = true;
					}
					else if (this.buffType[k] == 156)
					{
						this.stoned = true;
					}
					else if (this.buffType[k] == 69)
					{
						this.ichor = true;
						this.statDefense -= 20;
					}
					else if (this.buffType[k] == 36)
					{
						this.brokenArmor = true;
					}
					else if (this.buffType[k] == 48)
					{
						this.honey = true;
					}
					else if (this.buffType[k] == 59)
					{
						this.shadowDodge = true;
					}
					else if (this.buffType[k] == 93)
					{
						this.ammoBox = true;
					}
					else if (this.buffType[k] == 58)
					{
						this.palladiumRegen = true;
					}
					else if (this.buffType[k] == 88)
					{
						this.chaosState = true;
					}
					else if (this.buffType[k] == 63)
					{
						this.moveSpeed += 1f;
					}
					else if (this.buffType[k] == 104)
					{
						this.pickSpeed -= 0.25f;
					}
					else if (this.buffType[k] == 105)
					{
						this.lifeMagnet = true;
					}
					else if (this.buffType[k] == 106)
					{
						this.calmed = true;
					}
					else if (this.buffType[k] == 121)
					{
						this.fishingSkill += 15;
					}
					else if (this.buffType[k] == 122)
					{
						this.sonarPotion = true;
					}
					else if (this.buffType[k] == 123)
					{
						this.cratePotion = true;
					}
					else if (this.buffType[k] == 107)
					{
						this.tileSpeed += 0.25f;
						this.wallSpeed += 0.25f;
						this.blockRange++;
					}
					else if (this.buffType[k] == 108)
					{
						this.kbBuff = true;
					}
					else if (this.buffType[k] == 109)
					{
						this.ignoreWater = true;
						this.accFlipper = true;
					}
					else if (this.buffType[k] == 110)
					{
						this.maxMinions++;
					}
					else if (this.buffType[k] == 150)
					{
						this.maxMinions++;
					}
					else if (this.buffType[k] == 111)
					{
						this.dangerSense = true;
					}
					else if (this.buffType[k] == 112)
					{
						this.ammoPotion = true;
					}
					else if (this.buffType[k] == 113)
					{
						this.lifeForce = true;
						this.statLifeMax2 += this.statLifeMax / 5 / 20 * 20;
					}
					else if (this.buffType[k] == 114)
					{
						this.endurance += 0.1f;
					}
					else if (this.buffType[k] == 115)
					{
						this.meleeCrit += 10;
						this.rangedCrit += 10;
						this.magicCrit += 10;
						this.thrownCrit += 10;
					}
					else if (this.buffType[k] == 116)
					{
						this.inferno = true;
						Lighting.AddLight((int)(base.Center.X / 16f), (int)(base.Center.Y / 16f), 0.65f, 0.4f, 0.1f);
						int num = 24;
						float num2 = 200f;
						bool flag = this.infernoCounter % 60 == 0;
						int damage = 10;
						if (this.whoAmI == Main.myPlayer)
						{
							for (int l = 0; l < 200; l++)
							{
								NPC nPC = Main.npc[l];
								if (nPC.active && !nPC.friendly && nPC.damage > 0 && !nPC.dontTakeDamage && !nPC.buffImmune[num] && Vector2.Distance(base.Center, nPC.Center) <= num2)
								{
									if (nPC.FindBuffIndex(num) == -1)
									{
										nPC.AddBuff(num, 120, false);
									}
									if (flag)
									{
										this.ApplyDamageToNPC(nPC, damage, 0f, 0, false);
									}
								}
							}
							if (this.hostile)
							{
								for (int m = 0; m < 255; m++)
								{
									Player player = Main.player[m];
									if (player != this && player.active && !player.dead && player.hostile && !player.buffImmune[num] && (player.team != this.team || player.team == 0) && Vector2.Distance(base.Center, player.Center) <= num2)
									{
										if (player.FindBuffIndex(num) == -1)
										{
											player.AddBuff(num, 120, true);
										}
										if (flag)
										{
											player.Hurt(PlayerDeathReason.LegacyEmpty(), damage, 0, true, false, false, -1);
											if (Main.netMode != 0)
											{
												PlayerDeathReason reason = PlayerDeathReason.ByPlayer(this.whoAmI);
												NetMessage.SendPlayerHurt(m, reason, damage, 0, false, true, 0, -1, -1);
											}
										}
									}
								}
							}
						}
					}
					else if (this.buffType[k] == 117)
					{
						this.thrownDamage += 0.1f;
						this.meleeDamage += 0.1f;
						this.rangedDamage += 0.1f;
						this.magicDamage += 0.1f;
						this.minionDamage += 0.1f;
					}
					else if (this.buffType[k] == 119)
					{
						this.loveStruck = true;
					}
					else if (this.buffType[k] == 120)
					{
						this.stinky = true;
					}
					else if (this.buffType[k] == 124)
					{
						this.resistCold = true;
					}
					else if (this.buffType[k] == 165)
					{
						this.lifeRegen += 6;
						this.statDefense += 8;
						this.dryadWard = true;
						if (this.thorns < 1f)
						{
							this.thorns += 0.2f;
						}
					}
					else if (this.buffType[k] == 144)
					{
						this.electrified = true;
						Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f, 0.8f, 1.1f);
					}
					else if (this.buffType[k] == 94)
					{
						this.manaSick = true;
						this.manaSickReduction = Player.manaSickLessDmg * ((float)this.buffTime[k] / (float)Player.manaSickTime);
					}
					else if (this.buffType[k] >= 95 && this.buffType[k] <= 97)
					{
						this.buffTime[k] = 5;
						int num3 = (int)((byte)(1 + this.buffType[k] - 95));
						if (this.beetleOrbs > 0 && this.beetleOrbs != num3)
						{
							if (this.beetleOrbs > num3)
							{
								this.DelBuff(k);
								k--;
							}
							else
							{
								for (int n = 0; n < 22; n++)
								{
									if (this.buffType[n] >= 95 && this.buffType[n] <= 95 + num3 - 1)
									{
										this.DelBuff(n);
										n--;
									}
								}
							}
						}
						this.beetleOrbs = num3;
						if (!this.beetleDefense)
						{
							this.beetleOrbs = 0;
							this.DelBuff(k);
							k--;
						}
						else
						{
							this.beetleBuff = true;
						}
					}
					else if (this.buffType[k] >= 170 && this.buffType[k] <= 172)
					{
						this.buffTime[k] = 5;
						int num4 = (int)((byte)(1 + this.buffType[k] - 170));
						if (this.solarShields > 0 && this.solarShields != num4)
						{
							if (this.solarShields > num4)
							{
								this.DelBuff(k);
								k--;
							}
							else
							{
								for (int num5 = 0; num5 < 22; num5++)
								{
									if (this.buffType[num5] >= 170 && this.buffType[num5] <= 170 + num4 - 1)
									{
										this.DelBuff(num5);
										num5--;
									}
								}
							}
						}
						this.solarShields = num4;
						if (!this.setSolar)
						{
							this.solarShields = 0;
							this.DelBuff(k);
							k--;
						}
					}
					else if (this.buffType[k] >= 98 && this.buffType[k] <= 100)
					{
						int num6 = (int)((byte)(1 + this.buffType[k] - 98));
						if (this.beetleOrbs > 0 && this.beetleOrbs != num6)
						{
							if (this.beetleOrbs > num6)
							{
								this.DelBuff(k);
								k--;
							}
							else
							{
								for (int num7 = 0; num7 < 22; num7++)
								{
									if (this.buffType[num7] >= 98 && this.buffType[num7] <= 98 + num6 - 1)
									{
										this.DelBuff(num7);
										num7--;
									}
								}
							}
						}
						this.beetleOrbs = num6;
						this.meleeDamage += 0.1f * (float)this.beetleOrbs;
						this.meleeSpeed += 0.1f * (float)this.beetleOrbs;
						if (!this.beetleOffense)
						{
							this.beetleOrbs = 0;
							this.DelBuff(k);
							k--;
						}
						else
						{
							this.beetleBuff = true;
						}
					}
					else if (this.buffType[k] >= 176 && this.buffType[k] <= 178)
					{
						int num8 = this.nebulaLevelMana;
						int num9 = (int)((byte)(1 + this.buffType[k] - 176));
						if (num8 > 0 && num8 != num9)
						{
							if (num8 > num9)
							{
								this.DelBuff(k);
								k--;
							}
							else
							{
								for (int num10 = 0; num10 < 22; num10++)
								{
									if (this.buffType[num10] >= 176 && this.buffType[num10] <= 178 + num9 - 1)
									{
										this.DelBuff(num10);
										num10--;
									}
								}
							}
						}
						this.nebulaLevelMana = num9;
						if (this.buffTime[k] == 2 && this.nebulaLevelMana > 1)
						{
							this.nebulaLevelMana--;
							this.buffType[k]--;
							this.buffTime[k] = 480;
						}
					}
					else if (this.buffType[k] >= 173 && this.buffType[k] <= 175)
					{
						int num11 = this.nebulaLevelLife;
						int num12 = (int)((byte)(1 + this.buffType[k] - 173));
						if (num11 > 0 && num11 != num12)
						{
							if (num11 > num12)
							{
								this.DelBuff(k);
								k--;
							}
							else
							{
								for (int num13 = 0; num13 < 22; num13++)
								{
									if (this.buffType[num13] >= 173 && this.buffType[num13] <= 175 + num12 - 1)
									{
										this.DelBuff(num13);
										num13--;
									}
								}
							}
						}
						this.nebulaLevelLife = num12;
						if (this.buffTime[k] == 2 && this.nebulaLevelLife > 1)
						{
							this.nebulaLevelLife--;
							this.buffType[k]--;
							this.buffTime[k] = 480;
						}
						this.lifeRegen += 10 * this.nebulaLevelLife;
					}
					else if (this.buffType[k] >= 179 && this.buffType[k] <= 181)
					{
						int num14 = this.nebulaLevelDamage;
						int num15 = (int)((byte)(1 + this.buffType[k] - 179));
						if (num14 > 0 && num14 != num15)
						{
							if (num14 > num15)
							{
								this.DelBuff(k);
								k--;
							}
							else
							{
								for (int num16 = 0; num16 < 22; num16++)
								{
									if (this.buffType[num16] >= 179 && this.buffType[num16] <= 181 + num15 - 1)
									{
										this.DelBuff(num16);
										num16--;
									}
								}
							}
						}
						this.nebulaLevelDamage = num15;
						if (this.buffTime[k] == 2 && this.nebulaLevelDamage > 1)
						{
							this.nebulaLevelDamage--;
							this.buffType[k]--;
							this.buffTime[k] = 480;
						}
						float num17 = 0.15f * (float)this.nebulaLevelDamage;
						this.meleeDamage += num17;
						this.rangedDamage += num17;
						this.magicDamage += num17;
						this.minionDamage += num17;
						this.thrownDamage += num17;
					}
					else if (this.buffType[k] == 62)
					{
						if ((double)this.statLife <= (double)this.statLifeMax2 * 0.5)
						{
							Lighting.AddLight((int)(base.Center.X / 16f), (int)(base.Center.Y / 16f), 0.1f, 0.2f, 0.45f);
							this.iceBarrier = true;
							this.endurance += 0.25f;
							this.iceBarrierFrameCounter += 1;
							if (this.iceBarrierFrameCounter > 2)
							{
								this.iceBarrierFrameCounter = 0;
								this.iceBarrierFrame += 1;
								if (this.iceBarrierFrame >= 12)
								{
									this.iceBarrierFrame = 0;
								}
							}
						}
						else
						{
							this.DelBuff(k);
							k--;
						}
					}
					else if (this.buffType[k] == 49)
					{
						for (int num18 = 191; num18 <= 194; num18++)
						{
							if (this.ownedProjectileCounts[num18] > 0)
							{
								this.pygmy = true;
							}
						}
						if (!this.pygmy)
						{
							this.DelBuff(k);
							k--;
						}
						else
						{
							this.buffTime[k] = 18000;
						}
					}
					else if (this.buffType[k] == 83)
					{
						if (this.ownedProjectileCounts[317] > 0)
						{
							this.raven = true;
						}
						if (!this.raven)
						{
							this.DelBuff(k);
							k--;
						}
						else
						{
							this.buffTime[k] = 18000;
						}
					}
					else if (this.buffType[k] == 64)
					{
						if (this.ownedProjectileCounts[266] > 0)
						{
							this.slime = true;
						}
						if (!this.slime)
						{
							this.DelBuff(k);
							k--;
						}
						else
						{
							this.buffTime[k] = 18000;
						}
					}
					else if (this.buffType[k] == 125)
					{
						if (this.ownedProjectileCounts[373] > 0)
						{
							this.hornetMinion = true;
						}
						if (!this.hornetMinion)
						{
							this.DelBuff(k);
							k--;
						}
						else
						{
							this.buffTime[k] = 18000;
						}
					}
					else if (this.buffType[k] == 126)
					{
						if (this.ownedProjectileCounts[375] > 0)
						{
							this.impMinion = true;
						}
						if (!this.impMinion)
						{
							this.DelBuff(k);
							k--;
						}
						else
						{
							this.buffTime[k] = 18000;
						}
					}
					else if (this.buffType[k] == 133)
					{
						if (this.ownedProjectileCounts[390] > 0 || this.ownedProjectileCounts[391] > 0 || this.ownedProjectileCounts[392] > 0)
						{
							this.spiderMinion = true;
						}
						if (!this.spiderMinion)
						{
							this.DelBuff(k);
							k--;
						}
						else
						{
							this.buffTime[k] = 18000;
						}
					}
					else if (this.buffType[k] == 134)
					{
						if (this.ownedProjectileCounts[387] > 0 || this.ownedProjectileCounts[388] > 0)
						{
							this.twinsMinion = true;
						}
						if (!this.twinsMinion)
						{
							this.DelBuff(k);
							k--;
						}
						else
						{
							this.buffTime[k] = 18000;
						}
					}
					else if (this.buffType[k] == 135)
					{
						if (this.ownedProjectileCounts[393] > 0 || this.ownedProjectileCounts[394] > 0 || this.ownedProjectileCounts[395] > 0)
						{
							this.pirateMinion = true;
						}
						if (!this.pirateMinion)
						{
							this.DelBuff(k);
							k--;
						}
						else
						{
							this.buffTime[k] = 18000;
						}
					}
					else if (this.buffType[k] == 139)
					{
						if (this.ownedProjectileCounts[407] > 0)
						{
							this.sharknadoMinion = true;
						}
						if (!this.sharknadoMinion)
						{
							this.DelBuff(k);
							k--;
						}
						else
						{
							this.buffTime[k] = 18000;
						}
					}
					else if (this.buffType[k] == 140)
					{
						if (this.ownedProjectileCounts[423] > 0)
						{
							this.UFOMinion = true;
						}
						if (!this.UFOMinion)
						{
							this.DelBuff(k);
							k--;
						}
						else
						{
							this.buffTime[k] = 18000;
						}
					}
					else if (this.buffType[k] == 182)
					{
						if (this.ownedProjectileCounts[613] > 0)
						{
							this.stardustMinion = true;
						}
						if (!this.stardustMinion)
						{
							this.DelBuff(k);
							k--;
						}
						else
						{
							this.buffTime[k] = 18000;
						}
					}
					else if (this.buffType[k] == 187)
					{
						if (this.ownedProjectileCounts[623] > 0)
						{
							this.stardustGuardian = true;
						}
						if (!this.stardustGuardian)
						{
							this.DelBuff(k);
							k--;
						}
						else
						{
							this.buffTime[k] = 18000;
						}
					}
					else if (this.buffType[k] == 188)
					{
						if (this.ownedProjectileCounts[625] > 0)
						{
							this.stardustDragon = true;
						}
						if (!this.stardustDragon)
						{
							this.DelBuff(k);
							k--;
						}
						else
						{
							this.buffTime[k] = 18000;
						}
					}
					else if (this.buffType[k] == 161)
					{
						if (this.ownedProjectileCounts[533] > 0)
						{
							this.DeadlySphereMinion = true;
						}
						if (!this.DeadlySphereMinion)
						{
							this.DelBuff(k);
							k--;
						}
						else
						{
							this.buffTime[k] = 18000;
						}
					}
					else if (this.buffType[k] == 90)
					{
						this.mount.SetMount(0, this, false);
						this.buffTime[k] = 10;
					}
					else if (this.buffType[k] == 128)
					{
						this.mount.SetMount(1, this, false);
						this.buffTime[k] = 10;
					}
					else if (this.buffType[k] == 129)
					{
						this.mount.SetMount(2, this, false);
						this.buffTime[k] = 10;
					}
					else if (this.buffType[k] == 130)
					{
						this.mount.SetMount(3, this, false);
						this.buffTime[k] = 10;
					}
					else if (this.buffType[k] == 118)
					{
						this.mount.SetMount(6, this, true);
						this.buffTime[k] = 10;
					}
					else if (this.buffType[k] == 138)
					{
						this.mount.SetMount(6, this, false);
						this.buffTime[k] = 10;
					}
					else if (this.buffType[k] == 167)
					{
						this.mount.SetMount(11, this, true);
						this.buffTime[k] = 10;
					}
					else if (this.buffType[k] == 166)
					{
						this.mount.SetMount(11, this, false);
						this.buffTime[k] = 10;
					}
					else if (this.buffType[k] == 184)
					{
						this.mount.SetMount(13, this, true);
						this.buffTime[k] = 10;
					}
					else if (this.buffType[k] == 185)
					{
						this.mount.SetMount(13, this, false);
						this.buffTime[k] = 10;
					}
					else if (this.buffType[k] == 131)
					{
						this.ignoreWater = true;
						this.accFlipper = true;
						this.mount.SetMount(4, this, false);
						this.buffTime[k] = 10;
					}
					else if (this.buffType[k] == 132)
					{
						this.mount.SetMount(5, this, false);
						this.buffTime[k] = 10;
					}
					else if (this.buffType[k] == 168)
					{
						this.ignoreWater = true;
						this.accFlipper = true;
						this.mount.SetMount(12, this, false);
						this.buffTime[k] = 10;
					}
					else if (this.buffType[k] == 141)
					{
						this.mount.SetMount(7, this, false);
						this.buffTime[k] = 10;
					}
					else if (this.buffType[k] == 142)
					{
						this.mount.SetMount(8, this, false);
						this.buffTime[k] = 10;
					}
					else if (this.buffType[k] == 143)
					{
						this.mount.SetMount(9, this, false);
						this.buffTime[k] = 10;
					}
					else if (this.buffType[k] == 162)
					{
						this.mount.SetMount(10, this, false);
						this.buffTime[k] = 10;
					}
					else if (this.buffType[k] == 193)
					{
						this.mount.SetMount(14, this, false);
						this.buffTime[k] = 10;
					}
					else if (this.buffType[k] == 37)
					{
						if (Main.wof >= 0 && Main.npc[Main.wof].type == 113)
						{
							this.gross = true;
							this.buffTime[k] = 10;
						}
						else
						{
							this.DelBuff(k);
							k--;
						}
					}
					else if (this.buffType[k] == 38)
					{
						this.buffTime[k] = 10;
						this.tongued = true;
					}
					else if (this.buffType[k] == 146)
					{
						this.moveSpeed += 0.1f;
						this.moveSpeed *= 1.1f;
						this.sunflower = true;
					}
					else if (this.buffType[k] == 19)
					{
						this.buffTime[k] = 18000;
						this.lightOrb = true;
						bool flag2 = true;
						if (this.ownedProjectileCounts[18] > 0)
						{
							flag2 = false;
						}
						if (flag2 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 18, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 155)
					{
						this.buffTime[k] = 18000;
						this.crimsonHeart = true;
						bool flag3 = true;
						if (this.ownedProjectileCounts[500] > 0)
						{
							flag3 = false;
						}
						if (flag3 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 500, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 191)
					{
						this.CommonPetBuffHandle(k, ref this.companionCube, 653);
					}
					else if (this.buffType[k] == 202)
					{
						this.CommonPetBuffHandle(k, ref this.petFlagDD2Dragon, 701);
					}
					else if (this.buffType[k] == 200)
					{
						this.CommonPetBuffHandle(k, ref this.petFlagDD2Gato, 703);
					}
					else if (this.buffType[k] == 201)
					{
						this.CommonPetBuffHandle(k, ref this.petFlagDD2Ghost, 702);
					}
					else if (this.buffType[k] == 190)
					{
						this.buffTime[k] = 18000;
						this.suspiciouslookingTentacle = true;
						bool flag4 = true;
						if (this.ownedProjectileCounts[650] > 0)
						{
							flag4 = false;
						}
						if (flag4 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 650, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 27 || this.buffType[k] == 101 || this.buffType[k] == 102)
					{
						this.buffTime[k] = 18000;
						bool flag5 = true;
						int num19 = 72;
						if (this.buffType[k] == 27)
						{
							this.blueFairy = true;
						}
						if (this.buffType[k] == 101)
						{
							num19 = 86;
							this.redFairy = true;
						}
						if (this.buffType[k] == 102)
						{
							num19 = 87;
							this.greenFairy = true;
						}
						if (this.head == 45 && this.body == 26 && this.legs == 25)
						{
							num19 = 72;
						}
						if (this.ownedProjectileCounts[num19] > 0)
						{
							flag5 = false;
						}
						if (flag5 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, num19, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 40)
					{
						this.buffTime[k] = 18000;
						this.bunny = true;
						bool flag6 = true;
						if (this.ownedProjectileCounts[111] > 0)
						{
							flag6 = false;
						}
						if (flag6 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 111, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 148)
					{
						this.rabid = true;
						if (Main.rand.Next(1200) == 0)
						{
							int num20 = Main.rand.Next(6);
							float num21 = (float)Main.rand.Next(60, 100) * 0.01f;
							if (num20 == 0)
							{
								this.AddBuff(22, (int)(60f * num21 * 3f), true);
							}
							else if (num20 == 1)
							{
								this.AddBuff(23, (int)(60f * num21 * 0.75f), true);
							}
							else if (num20 == 2)
							{
								this.AddBuff(31, (int)(60f * num21 * 1.5f), true);
							}
							else if (num20 == 3)
							{
								this.AddBuff(32, (int)(60f * num21 * 3.5f), true);
							}
							else if (num20 == 4)
							{
								this.AddBuff(33, (int)(60f * num21 * 5f), true);
							}
							else if (num20 == 5)
							{
								this.AddBuff(35, (int)(60f * num21 * 1f), true);
							}
						}
						this.meleeDamage += 0.2f;
						this.magicDamage += 0.2f;
						this.rangedDamage += 0.2f;
						this.thrownDamage += 0.2f;
						this.minionDamage += 0.2f;
					}
					else if (this.buffType[k] == 41)
					{
						this.buffTime[k] = 18000;
						this.penguin = true;
						bool flag7 = true;
						if (this.ownedProjectileCounts[112] > 0)
						{
							flag7 = false;
						}
						if (flag7 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 112, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 152)
					{
						this.buffTime[k] = 18000;
						this.magicLantern = true;
						if (this.ownedProjectileCounts[492] == 0 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 492, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 91)
					{
						this.buffTime[k] = 18000;
						this.puppy = true;
						bool flag8 = true;
						if (this.ownedProjectileCounts[334] > 0)
						{
							flag8 = false;
						}
						if (flag8 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 334, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 92)
					{
						this.buffTime[k] = 18000;
						this.grinch = true;
						bool flag9 = true;
						if (this.ownedProjectileCounts[353] > 0)
						{
							flag9 = false;
						}
						if (flag9 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 353, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 84)
					{
						this.buffTime[k] = 18000;
						this.blackCat = true;
						bool flag10 = true;
						if (this.ownedProjectileCounts[319] > 0)
						{
							flag10 = false;
						}
						if (flag10 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 319, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 61)
					{
						this.buffTime[k] = 18000;
						this.dino = true;
						bool flag11 = true;
						if (this.ownedProjectileCounts[236] > 0)
						{
							flag11 = false;
						}
						if (flag11 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 236, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 154)
					{
						this.buffTime[k] = 18000;
						this.babyFaceMonster = true;
						bool flag12 = true;
						if (this.ownedProjectileCounts[499] > 0)
						{
							flag12 = false;
						}
						if (flag12 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 499, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 65)
					{
						this.buffTime[k] = 18000;
						this.eyeSpring = true;
						bool flag13 = true;
						if (this.ownedProjectileCounts[268] > 0)
						{
							flag13 = false;
						}
						if (flag13 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 268, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 66)
					{
						this.buffTime[k] = 18000;
						this.snowman = true;
						bool flag14 = true;
						if (this.ownedProjectileCounts[269] > 0)
						{
							flag14 = false;
						}
						if (flag14 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 269, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 42)
					{
						this.buffTime[k] = 18000;
						this.turtle = true;
						bool flag15 = true;
						if (this.ownedProjectileCounts[127] > 0)
						{
							flag15 = false;
						}
						if (flag15 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 127, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 45)
					{
						this.buffTime[k] = 18000;
						this.eater = true;
						bool flag16 = true;
						if (this.ownedProjectileCounts[175] > 0)
						{
							flag16 = false;
						}
						if (flag16 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 175, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 50)
					{
						this.buffTime[k] = 18000;
						this.skeletron = true;
						bool flag17 = true;
						if (this.ownedProjectileCounts[197] > 0)
						{
							flag17 = false;
						}
						if (flag17 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 197, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 51)
					{
						this.buffTime[k] = 18000;
						this.hornet = true;
						bool flag18 = true;
						if (this.ownedProjectileCounts[198] > 0)
						{
							flag18 = false;
						}
						if (flag18 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 198, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 52)
					{
						this.buffTime[k] = 18000;
						this.tiki = true;
						bool flag19 = true;
						if (this.ownedProjectileCounts[199] > 0)
						{
							flag19 = false;
						}
						if (flag19 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 199, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 53)
					{
						this.buffTime[k] = 18000;
						this.lizard = true;
						bool flag20 = true;
						if (this.ownedProjectileCounts[200] > 0)
						{
							flag20 = false;
						}
						if (flag20 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 200, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 54)
					{
						this.buffTime[k] = 18000;
						this.parrot = true;
						bool flag21 = true;
						if (this.ownedProjectileCounts[208] > 0)
						{
							flag21 = false;
						}
						if (flag21 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 208, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 55)
					{
						this.buffTime[k] = 18000;
						this.truffle = true;
						bool flag22 = true;
						if (this.ownedProjectileCounts[209] > 0)
						{
							flag22 = false;
						}
						if (flag22 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 209, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 56)
					{
						this.buffTime[k] = 18000;
						this.sapling = true;
						bool flag23 = true;
						if (this.ownedProjectileCounts[210] > 0)
						{
							flag23 = false;
						}
						if (flag23 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 210, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 85)
					{
						this.buffTime[k] = 18000;
						this.cSapling = true;
						bool flag24 = true;
						if (this.ownedProjectileCounts[324] > 0)
						{
							flag24 = false;
						}
						if (flag24 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 324, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 81)
					{
						this.buffTime[k] = 18000;
						this.spider = true;
						bool flag25 = true;
						if (this.ownedProjectileCounts[313] > 0)
						{
							flag25 = false;
						}
						if (flag25 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 313, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 82)
					{
						this.buffTime[k] = 18000;
						this.squashling = true;
						bool flag26 = true;
						if (this.ownedProjectileCounts[314] > 0)
						{
							flag26 = false;
						}
						if (flag26 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 314, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 57)
					{
						this.buffTime[k] = 18000;
						this.wisp = true;
						bool flag27 = true;
						if (this.ownedProjectileCounts[211] > 0)
						{
							flag27 = false;
						}
						if (flag27 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 211, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 60)
					{
						this.buffTime[k] = 18000;
						this.crystalLeaf = true;
						bool flag28 = true;
						for (int num22 = 0; num22 < 1000; num22++)
						{
							if (Main.projectile[num22].active && Main.projectile[num22].owner == this.whoAmI && Main.projectile[num22].type == 226)
							{
								if (!flag28)
								{
									Main.projectile[num22].Kill();
								}
								flag28 = false;
							}
						}
						if (flag28 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 226, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 127)
					{
						this.buffTime[k] = 18000;
						this.zephyrfish = true;
						bool flag29 = true;
						if (this.ownedProjectileCounts[380] > 0)
						{
							flag29 = false;
						}
						if (flag29 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 380, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 136)
					{
						this.buffTime[k] = 18000;
						this.miniMinotaur = true;
						bool flag30 = true;
						if (this.ownedProjectileCounts[398] > 0)
						{
							flag30 = false;
						}
						if (flag30 && this.whoAmI == Main.myPlayer)
						{
							Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 398, 0, 0f, this.whoAmI, 0f, 0f);
						}
					}
					else if (this.buffType[k] == 70)
					{
						this.venom = true;
					}
					else if (this.buffType[k] == 20)
					{
						this.poisoned = true;
					}
					else if (this.buffType[k] == 21)
					{
						this.potionDelay = this.buffTime[k];
					}
					else if (this.buffType[k] == 22)
					{
						this.blind = true;
					}
					else if (this.buffType[k] == 80)
					{
						this.blackout = true;
					}
					else if (this.buffType[k] == 23)
					{
						this.noItems = true;
					}
					else if (this.buffType[k] == 24)
					{
						this.onFire = true;
					}
					else if (this.buffType[k] == 103)
					{
						this.dripping = true;
					}
					else if (this.buffType[k] == 137)
					{
						this.drippingSlime = true;
					}
					else if (this.buffType[k] == 67)
					{
						this.burned = true;
					}
					else if (this.buffType[k] == 68)
					{
						this.suffocating = true;
					}
					else if (this.buffType[k] == 39)
					{
						this.onFire2 = true;
					}
					else if (this.buffType[k] == 44)
					{
						this.onFrostBurn = true;
					}
					else if (this.buffType[k] == 163)
					{
						this.headcovered = true;
						this.bleed = true;
					}
					else if (this.buffType[k] == 164)
					{
						this.vortexDebuff = true;
					}
					else if (this.buffType[k] == 194)
					{
						this.windPushed = true;
					}
					else if (this.buffType[k] == 195)
					{
						this.witheredArmor = true;
					}
					else if (this.buffType[k] == 205)
					{
						this.ballistaPanic = true;
					}
					else if (this.buffType[k] == 196)
					{
						this.witheredWeapon = true;
					}
					else if (this.buffType[k] == 197)
					{
						this.slowOgreSpit = true;
					}
					else if (this.buffType[k] == 198)
					{
						this.parryDamageBuff = true;
					}
					else if (this.buffType[k] == 145)
					{
						this.moonLeech = true;
					}
					else if (this.buffType[k] == 149)
					{
						this.webbed = true;
						if (this.velocity.Y != 0f)
						{
							this.velocity = new Vector2(0f, 1E-06f);
						}
						else
						{
							this.velocity = Vector2.Zero;
						}
						Player.jumpHeight = 0;
						this.gravity = 0f;
						this.moveSpeed = 0f;
						this.dash = 0;
						this.noKnockback = true;
						this.grappling[0] = -1;
						this.grapCount = 0;
						for (int num23 = 0; num23 < 1000; num23++)
						{
							if (Main.projectile[num23].active && Main.projectile[num23].owner == this.whoAmI && Main.projectile[num23].aiStyle == 7)
							{
								Main.projectile[num23].Kill();
							}
						}
					}
					else if (this.buffType[k] == 43)
					{
						this.defendedByPaladin = true;
					}
					else if (this.buffType[k] == 29)
					{
						this.magicCrit += 2;
						this.magicDamage += 0.05f;
						this.statManaMax2 += 20;
						this.manaCost -= 0.02f;
					}
					else if (this.buffType[k] == 28)
					{
						if (!Main.dayTime && this.wolfAcc && !this.merman)
						{
							this.lifeRegen++;
							this.wereWolf = true;
							this.meleeCrit += 2;
							this.meleeDamage += 0.051f;
							this.meleeSpeed += 0.051f;
							this.statDefense += 3;
							this.moveSpeed += 0.05f;
						}
						else
						{
							this.DelBuff(k);
							k--;
						}
					}
					else if (this.buffType[k] == 33)
					{
						this.meleeDamage -= 0.051f;
						this.meleeSpeed -= 0.051f;
						this.statDefense -= 4;
						this.moveSpeed -= 0.1f;
					}
					else if (this.buffType[k] == 25)
					{
						this.statDefense -= 4;
						this.meleeCrit += 2;
						this.meleeDamage += 0.1f;
						this.meleeSpeed += 0.1f;
					}
					else if (this.buffType[k] == 26)
					{
						this.wellFed = true;
						this.statDefense += 2;
						this.meleeCrit += 2;
						this.meleeDamage += 0.05f;
						this.meleeSpeed += 0.05f;
						this.magicCrit += 2;
						this.magicDamage += 0.05f;
						this.rangedCrit += 2;
						this.rangedDamage += 0.05f;
						this.thrownCrit += 2;
						this.thrownDamage += 0.05f;
						this.minionDamage += 0.05f;
						this.minionKB += 0.5f;
						this.moveSpeed += 0.2f;
					}
					else if (this.buffType[k] == 71)
					{
						this.meleeEnchant = 1;
					}
					else if (this.buffType[k] == 73)
					{
						this.meleeEnchant = 2;
					}
					else if (this.buffType[k] == 74)
					{
						this.meleeEnchant = 3;
					}
					else if (this.buffType[k] == 75)
					{
						this.meleeEnchant = 4;
					}
					else if (this.buffType[k] == 76)
					{
						this.meleeEnchant = 5;
					}
					else if (this.buffType[k] == 77)
					{
						this.meleeEnchant = 6;
					}
					else if (this.buffType[k] == 78)
					{
						this.meleeEnchant = 7;
					}
					else if (this.buffType[k] == 79)
					{
						this.meleeEnchant = 8;
					}
					if (k == originalIndex)
					{
						BuffLoader.Update(this.buffType[k], this, ref k);
					}
				}
			}
		}

		private void CommonPetBuffHandle(int buffIndex, ref bool petBool, int petProjID)
		{
			this.buffTime[buffIndex] = 18000;
			petBool = true;
			bool flag = true;
			if (this.ownedProjectileCounts[petProjID] > 0)
			{
				flag = false;
			}
			if (flag && this.whoAmI == Main.myPlayer)
			{
				Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, petProjID, 0, 0f, this.whoAmI, 0f, 0f);
			}
		}

		public void Counterweight(Vector2 hitPos, int dmg, float kb)
		{
			if (!this.yoyoGlove && this.counterWeight <= 0)
			{
				return;
			}
			int num = -1;
			int num2 = 0;
			int num3 = 0;
			for (int i = 0; i < 1000; i++)
			{
				if (Main.projectile[i].active && Main.projectile[i].owner == this.whoAmI)
				{
					if (Main.projectile[i].counterweight)
					{
						num3++;
					}
					else if (Main.projectile[i].aiStyle == 99)
					{
						num2++;
						num = i;
					}
				}
			}
			if (this.yoyoGlove && num2 < 2)
			{
				if (num >= 0)
				{
					Vector2 value = hitPos - base.Center;
					value.Normalize();
					value *= 16f;
					Projectile.NewProjectile(base.Center.X, base.Center.Y, value.X, value.Y, Main.projectile[num].type, Main.projectile[num].damage, Main.projectile[num].knockBack, this.whoAmI, 1f, 0f);
					return;
				}
			}
			else if (num3 < num2)
			{
				Vector2 value2 = hitPos - base.Center;
				value2.Normalize();
				value2 *= 16f;
				float knockBack = (kb + 6f) / 2f;
				if (num3 > 0)
				{
					Projectile.NewProjectile(base.Center.X, base.Center.Y, value2.X, value2.Y, this.counterWeight, (int)((double)dmg * 0.8), knockBack, this.whoAmI, 1f, 0f);
					return;
				}
				Projectile.NewProjectile(base.Center.X, base.Center.Y, value2.X, value2.Y, this.counterWeight, (int)((double)dmg * 0.8), knockBack, this.whoAmI, 0f, 0f);
			}
		}

		public int beeType()
		{
			if (this.strongBees && Main.rand.Next(2) == 0)
			{
				this.makeStrongBee = true;
				return 566;
			}
			this.makeStrongBee = false;
			return 181;
		}

		public int beeDamage(int dmg)
		{
			if (this.makeStrongBee)
			{
				return dmg + Main.rand.Next(1, 4);
			}
			return dmg + Main.rand.Next(2);
		}

		public float beeKB(float KB)
		{
			if (this.makeStrongBee)
			{
				return 0.5f + KB * 1.1f;
			}
			return KB;
		}

		public void Yoraiz0rEye()
		{
			int num = 0;
			num += this.bodyFrame.Y / 56;
			if (num >= Main.OffsetsPlayerHeadgear.Length)
			{
				num = 0;
			}
			Vector2 vector = new Vector2((float)(3 * this.direction - ((this.direction == 1) ? 1 : 0)), -11.5f * this.gravDir) + Vector2.UnitY * this.gfxOffY + base.Size / 2f + Main.OffsetsPlayerHeadgear[num];
			Vector2 vector2 = new Vector2((float)(3 * this.shadowDirection[1] - ((this.direction == 1) ? 1 : 0)), -11.5f * this.gravDir) + base.Size / 2f + Main.OffsetsPlayerHeadgear[num];
			Vector2 vector3 = Vector2.Zero;
			if (this.mount.Active && this.mount.Cart)
			{
				int num2 = Math.Sign(this.velocity.X);
				if (num2 == 0)
				{
					num2 = this.direction;
				}
				vector3 = new Vector2(MathHelper.Lerp(0f, -8f, this.fullRotation / 0.7853982f), MathHelper.Lerp(0f, 2f, Math.Abs(this.fullRotation / 0.7853982f))).RotatedBy((double)this.fullRotation, default(Vector2));
				if (num2 == Math.Sign(this.fullRotation))
				{
					vector3 *= MathHelper.Lerp(1f, 0.6f, Math.Abs(this.fullRotation / 0.7853982f));
				}
			}
			if (this.fullRotation != 0f)
			{
				vector = vector.RotatedBy((double)this.fullRotation, this.fullRotationOrigin);
				vector2 = vector2.RotatedBy((double)this.fullRotation, this.fullRotationOrigin);
			}
			float num3 = 0f;
			if (this.mount.Active)
			{
				num3 = (float)this.mount.PlayerOffset;
			}
			Vector2 vector4 = this.position + vector + vector3;
			Vector2 vector5 = this.oldPosition + vector2 + vector3;
			vector5.Y -= num3 / 2f;
			vector4.Y -= num3 / 2f;
			float num4 = 1f;
			switch (this.yoraiz0rEye % 10)
			{
				case 1:
					return;
				case 2:
					num4 = 0.5f;
					break;
				case 3:
					num4 = 0.625f;
					break;
				case 4:
					num4 = 0.75f;
					break;
				case 5:
					num4 = 0.875f;
					break;
				case 6:
					num4 = 1f;
					break;
				case 7:
					num4 = 1.1f;
					break;
			}
			if (this.yoraiz0rEye < 7)
			{
				DelegateMethods.v3_1 = Main.hslToRgb(Main.rgbToHsl(this.eyeColor).X, 1f, 0.5f).ToVector3() * 0.5f * num4;
				if (this.velocity != Vector2.Zero)
				{
					Utils.PlotTileLine(base.Center, base.Center + this.velocity * 2f, 4f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
				}
				else
				{
					Utils.PlotTileLine(base.Left, base.Right, 4f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
				}
			}
			int num5 = (int)Vector2.Distance(vector4, vector5) / 3 + 1;
			if (Vector2.Distance(vector4, vector5) % 3f != 0f)
			{
				num5++;
			}
			for (float num6 = 1f; num6 <= (float)num5; num6 += 1f)
			{
				Dust dust = Main.dust[Dust.NewDust(base.Center, 0, 0, 182, 0f, 0f, 0, default(Color), 1f)];
				dust.position = Vector2.Lerp(vector5, vector4, num6 / (float)num5);
				dust.noGravity = true;
				dust.velocity = Vector2.Zero;
				dust.customData = this;
				dust.scale = num4;
				dust.shader = GameShaders.Armor.GetSecondaryShader(this.cYorai, this);
			}
		}

		//public void UpdateEquips(int i)
		public void VanillaUpdateInventory(Item item)
		{
			//for (int j = 0; j < 58; j++)
			{
				int type = item.type;
				if ((type == 15 || type == 707) && this.accWatch < 1)
				{
					this.accWatch = 1;
				}
				if ((type == 16 || type == 708) && this.accWatch < 2)
				{
					this.accWatch = 2;
				}
				if ((type == 17 || type == 709) && this.accWatch < 3)
				{
					this.accWatch = 3;
				}
				if (type == 393)
				{
					this.accCompass = 1;
				}
				if (type == 18)
				{
					this.accDepthMeter = 1;
				}
				if (type == 395 || type == 3123 || type == 3124)
				{
					this.accWatch = 3;
					this.accDepthMeter = 1;
					this.accCompass = 1;
				}
				if (type == 3120 || type == 3036 || type == 3123 || type == 3124)
				{
					this.accFishFinder = true;
				}
				if (type == 3037 || type == 3036 || type == 3123 || type == 3124)
				{
					this.accWeatherRadio = true;
				}
				if (type == 3096 || type == 3036 || type == 3123 || type == 3124)
				{
					this.accCalendar = true;
				}
				if (type == 3084 || type == 3122 || type == 3123 || type == 3124)
				{
					this.accThirdEye = true;
				}
				if (type == 3095 || type == 3122 || type == 3123 || type == 3124)
				{
					this.accJarOfSouls = true;
				}
				if (type == 3118 || type == 3122 || type == 3123 || type == 3124)
				{
					this.accCritterGuide = true;
				}
				if (type == 3099 || type == 3121 || type == 3123 || type == 3124)
				{
					this.accStopwatch = true;
				}
				if (type == 3102 || type == 3121 || type == 3123 || type == 3124)
				{
					this.accOreFinder = true;
				}
				if (type == 3119 || type == 3121 || type == 3123 || type == 3124)
				{
					this.accDreamCatcher = true;
				}
				if (type == 3619 || type == 3611)
				{
					this.InfoAccMechShowWires = true;
				}
				if (type == 486 || type == 3611)
				{
					this.rulerLine = true;
				}
				if (type == 2799)
				{
					this.rulerGrid = true;
				}
				if (type == 2216 || type == 3061)
				{
					this.autoPaint = true;
				}
				if (type == 3624)
				{
					this.autoActuator = true;
				}
				ItemLoader.UpdateInventory(item, this);
			}
		}

		public void VanillaUpdateEquip(Item item)
		{
			//for (int k = 0; k < 8 + this.extraAccessorySlots; k++)
			{
				if (!item.expertOnly || Main.expertMode)
				{
					int type2 = item.type;
					if ((type2 == 15 || type2 == 707) && this.accWatch < 1)
					{
						this.accWatch = 1;
					}
					if ((type2 == 16 || type2 == 708) && this.accWatch < 2)
					{
						this.accWatch = 2;
					}
					if ((type2 == 17 || type2 == 709) && this.accWatch < 3)
					{
						this.accWatch = 3;
					}
					if (type2 == 393)
					{
						this.accCompass = 1;
					}
					if (type2 == 18)
					{
						this.accDepthMeter = 1;
					}
					if (type2 == 395 || type2 == 3123 || type2 == 3124)
					{
						this.accWatch = 3;
						this.accDepthMeter = 1;
						this.accCompass = 1;
					}
					if (type2 == 3120 || type2 == 3036 || type2 == 3123 || type2 == 3124)
					{
						this.accFishFinder = true;
					}
					if (type2 == 3037 || type2 == 3036 || type2 == 3123 || type2 == 3124)
					{
						this.accWeatherRadio = true;
					}
					if (type2 == 3096 || type2 == 3036 || type2 == 3123 || type2 == 3124)
					{
						this.accCalendar = true;
					}
					if (type2 == 3084 || type2 == 3122 || type2 == 3123 || type2 == 3124)
					{
						this.accThirdEye = true;
					}
					if (type2 == 3095 || type2 == 3122 || type2 == 3123 || type2 == 3124)
					{
						this.accJarOfSouls = true;
					}
					if (type2 == 3118 || type2 == 3122 || type2 == 3123 || type2 == 3124)
					{
						this.accCritterGuide = true;
					}
					if (type2 == 3099 || type2 == 3121 || type2 == 3123 || type2 == 3124)
					{
						this.accStopwatch = true;
					}
					if (type2 == 3102 || type2 == 3121 || type2 == 3123 || type2 == 3124)
					{
						this.accOreFinder = true;
					}
					if (type2 == 3119 || type2 == 3121 || type2 == 3123 || type2 == 3124)
					{
						this.accDreamCatcher = true;
					}
					if (type2 == 3619)
					{
						this.InfoAccMechShowWires = true;
					}
					if (item.type == 3017 && this.whoAmI == Main.myPlayer && this.velocity.Y == 0f && this.grappling[0] == -1)
					{
						int num = (int)base.Center.X / 16;
						int num2 = (int)(this.position.Y + (float)this.height - 1f) / 16;
						if (Main.tile[num, num2] == null)
						{
							Main.tile[num, num2] = new Tile();
						}
						if (!Main.tile[num, num2].active() && Main.tile[num, num2].liquid == 0 && Main.tile[num, num2 + 1] != null && WorldGen.SolidTile(num, num2 + 1))
						{
							Main.tile[num, num2].frameY = 0;
							Main.tile[num, num2].slope(0);
							Main.tile[num, num2].halfBrick(false);
							if (Main.tile[num, num2 + 1].type == 2)
							{
								if (Main.rand.Next(2) == 0)
								{
									Main.tile[num, num2].active(true);
									Main.tile[num, num2].type = 3;
									Main.tile[num, num2].frameX = (short)(18 * Main.rand.Next(6, 11));
									while (Main.tile[num, num2].frameX == 144)
									{
										Main.tile[num, num2].frameX = (short)(18 * Main.rand.Next(6, 11));
									}
								}
								else
								{
									Main.tile[num, num2].active(true);
									Main.tile[num, num2].type = 73;
									Main.tile[num, num2].frameX = (short)(18 * Main.rand.Next(6, 21));
									while (Main.tile[num, num2].frameX == 144)
									{
										Main.tile[num, num2].frameX = (short)(18 * Main.rand.Next(6, 21));
									}
								}
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num, num2, 1, TileChangeType.None);
								}
							}
							else if (Main.tile[num, num2 + 1].type == 109)
							{
								if (Main.rand.Next(2) == 0)
								{
									Main.tile[num, num2].active(true);
									Main.tile[num, num2].type = 110;
									Main.tile[num, num2].frameX = (short)(18 * Main.rand.Next(4, 7));
									while (Main.tile[num, num2].frameX == 90)
									{
										Main.tile[num, num2].frameX = (short)(18 * Main.rand.Next(4, 7));
									}
								}
								else
								{
									Main.tile[num, num2].active(true);
									Main.tile[num, num2].type = 113;
									Main.tile[num, num2].frameX = (short)(18 * Main.rand.Next(2, 8));
									while (Main.tile[num, num2].frameX == 90)
									{
										Main.tile[num, num2].frameX = (short)(18 * Main.rand.Next(2, 8));
									}
								}
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num, num2, 1, TileChangeType.None);
								}
							}
							else if (Main.tile[num, num2 + 1].type == 60)
							{
								Main.tile[num, num2].active(true);
								Main.tile[num, num2].type = 74;
								Main.tile[num, num2].frameX = (short)(18 * Main.rand.Next(9, 17));
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num, num2, 1, TileChangeType.None);
								}
							}
						}
					}
					this.statDefense += item.defense;
					this.lifeRegen += item.lifeRegen;
					if (item.shieldSlot > 0)
					{
						this.hasRaisableShield = true;
					}
					int type3 = item.type;
					int num3 = type3;
					switch (num3)
					{
						case 3797:
							this.maxTurrets++;
							this.manaCost -= 0.1f;
							break;
						case 3798:
							this.magicDamage += 0.1f;
							this.minionDamage += 0.2f;
							break;
						case 3799:
							this.minionDamage += 0.1f;
							this.magicCrit += 20;
							break;
						case 3800:
							this.maxTurrets++;
							this.lifeRegen += 8;
							break;
						case 3801:
							this.meleeDamage += 0.15f;
							this.minionDamage += 0.15f;
							break;
						case 3802:
							this.minionDamage += 0.15f;
							this.meleeCrit += 20;
							this.moveSpeed += 0.2f;
							break;
						case 3803:
							this.maxTurrets++;
							this.rangedCrit += 10;
							break;
						case 3804:
							this.rangedDamage += 0.2f;
							this.minionDamage += 0.2f;
							break;
						case 3805:
							this.minionDamage += 0.1f;
							this.moveSpeed += 0.2f;
							break;
						case 3806:
							this.maxTurrets++;
							this.meleeSpeed += 0.2f;
							break;
						case 3807:
							this.meleeDamage += 0.2f;
							this.minionDamage += 0.2f;
							break;
						case 3808:
							this.minionDamage += 0.1f;
							this.meleeCrit += 10;
							this.moveSpeed += 0.2f;
							break;
						default:
							switch (num3)
							{
								case 3871:
									this.maxTurrets += 2;
									this.minionDamage += 0.1f;
									break;
								case 3872:
									this.minionDamage += 0.3f;
									this.lifeRegen += 16;
									break;
								case 3873:
									this.minionDamage += 0.2f;
									this.meleeCrit += 20;
									this.moveSpeed += 0.3f;
									break;
								case 3874:
									this.maxTurrets += 2;
									this.magicDamage += 0.1f;
									this.minionDamage += 0.1f;
									break;
								case 3875:
									this.minionDamage += 0.3f;
									this.magicDamage += 0.15f;
									break;
								case 3876:
									this.minionDamage += 0.2f;
									this.magicCrit += 25;
									break;
								case 3877:
									this.maxTurrets += 2;
									this.minionDamage += 0.1f;
									this.rangedCrit += 10;
									break;
								case 3878:
									this.minionDamage += 0.25f;
									this.rangedDamage += 0.25f;
									break;
								case 3879:
									this.minionDamage += 0.25f;
									this.moveSpeed += 0.2f;
									break;
								case 3880:
									this.maxTurrets += 2;
									this.minionDamage += 0.2f;
									this.meleeDamage += 0.2f;
									break;
								case 3881:
									this.meleeSpeed += 0.2f;
									this.minionDamage += 0.2f;
									break;
								case 3882:
									this.minionDamage += 0.2f;
									this.meleeCrit += 20;
									this.moveSpeed += 0.2f;
									break;
							}
							break;
					}
					if (item.type == 268)
					{
						this.accDivingHelm = true;
					}
					if (item.type == 238)
					{
						this.magicDamage += 0.15f;
					}
					if (item.type == 3770)
					{
						this.slowFall = true;
					}
					if (item.type == 3776)
					{
						this.magicDamage += 0.15f;
						this.minionDamage += 0.15f;
					}
					if (item.type == 3777)
					{
						this.statManaMax2 += 80;
					}
					if (item.type == 3778)
					{
						this.maxMinions += 2;
					}
					if (item.type == 3212)
					{
						this.armorPenetration += 5;
					}
					if (item.type == 2277)
					{
						this.magicDamage += 0.05f;
						this.meleeDamage += 0.05f;
						this.rangedDamage += 0.05f;
						this.thrownDamage += 0.05f;
						this.magicCrit += 5;
						this.rangedCrit += 5;
						this.meleeCrit += 5;
						this.thrownCrit += 5;
						this.meleeSpeed += 0.1f;
						this.moveSpeed += 0.1f;
					}
					if (item.type == 2279)
					{
						this.magicDamage += 0.06f;
						this.magicCrit += 6;
						this.manaCost -= 0.1f;
					}
					if (item.type == 3109)
					{
						this.nightVision = true;
					}
					if (item.type == 256)
					{
						this.thrownVelocity += 0.15f;
					}
					if (item.type == 257)
					{
						this.thrownDamage += 0.15f;
					}
					if (item.type == 258)
					{
						this.thrownCrit += 10;
					}
					if (item.type == 3374)
					{
						this.thrownVelocity += 0.2f;
					}
					if (item.type == 3375)
					{
						this.thrownDamage += 0.2f;
					}
					if (item.type == 3376)
					{
						this.thrownCrit += 15;
					}
					if (item.type == 2275)
					{
						this.magicDamage += 0.07f;
						this.magicCrit += 7;
					}
					if (item.type == 123 || item.type == 124 || item.type == 125)
					{
						this.magicDamage += 0.07f;
					}
					if (item.type == 151 || item.type == 152 || item.type == 153 || item.type == 959)
					{
						this.rangedDamage += 0.05f;
					}
					if (item.type == 111 || item.type == 228 || item.type == 229 || item.type == 230 || item.type == 960 || item.type == 961 || item.type == 962)
					{
						this.statManaMax2 += 20;
					}
					if (item.type == 228 || item.type == 960)
					{
						this.statManaMax2 += 20;
					}
					if (item.type == 228 || item.type == 229 || item.type == 230 || item.type == 960 || item.type == 961 || item.type == 962)
					{
						this.magicCrit += 4;
					}
					if (item.type == 100 || item.type == 101 || item.type == 102)
					{
						this.meleeSpeed += 0.07f;
					}
					if (item.type == 956 || item.type == 957 || item.type == 958)
					{
						this.meleeSpeed += 0.07f;
					}
					if (item.type == 792 || item.type == 793 || item.type == 794)
					{
						this.meleeDamage += 0.02f;
						this.rangedDamage += 0.02f;
						this.magicDamage += 0.02f;
						this.thrownDamage += 0.02f;
					}
					if (item.type == 371)
					{
						this.magicCrit += 9;
						this.statManaMax2 += 40;
					}
					if (item.type == 372)
					{
						this.moveSpeed += 0.07f;
						this.meleeSpeed += 0.12f;
					}
					if (item.type == 373)
					{
						this.rangedDamage += 0.1f;
						this.rangedCrit += 6;
					}
					if (item.type == 374)
					{
						this.magicCrit += 3;
						this.meleeCrit += 3;
						this.rangedCrit += 3;
					}
					if (item.type == 375)
					{
						this.moveSpeed += 0.1f;
					}
					if (item.type == 376)
					{
						this.magicDamage += 0.15f;
						this.statManaMax2 += 60;
					}
					if (item.type == 377)
					{
						this.meleeCrit += 5;
						this.meleeDamage += 0.1f;
					}
					if (item.type == 378)
					{
						this.rangedDamage += 0.12f;
						this.rangedCrit += 7;
					}
					if (item.type == 379)
					{
						this.rangedDamage += 0.05f;
						this.meleeDamage += 0.05f;
						this.magicDamage += 0.05f;
					}
					if (item.type == 380)
					{
						this.magicCrit += 3;
						this.meleeCrit += 3;
						this.rangedCrit += 3;
					}
					if (item.type >= 2367 && item.type <= 2369)
					{
						this.fishingSkill += 5;
					}
					if (item.type == 400)
					{
						this.magicDamage += 0.11f;
						this.magicCrit += 11;
						this.statManaMax2 += 80;
					}
					if (item.type == 401)
					{
						this.meleeCrit += 7;
						this.meleeDamage += 0.14f;
					}
					if (item.type == 402)
					{
						this.rangedDamage += 0.14f;
						this.rangedCrit += 8;
					}
					if (item.type == 403)
					{
						this.rangedDamage += 0.06f;
						this.meleeDamage += 0.06f;
						this.magicDamage += 0.06f;
					}
					if (item.type == 404)
					{
						this.magicCrit += 4;
						this.meleeCrit += 4;
						this.rangedCrit += 4;
						this.moveSpeed += 0.05f;
					}
					if (item.type == 1205)
					{
						this.meleeDamage += 0.08f;
						this.meleeSpeed += 0.12f;
					}
					if (item.type == 1206)
					{
						this.rangedDamage += 0.09f;
						this.rangedCrit += 9;
					}
					if (item.type == 1207)
					{
						this.magicDamage += 0.07f;
						this.magicCrit += 7;
						this.statManaMax2 += 60;
					}
					if (item.type == 1208)
					{
						this.meleeDamage += 0.03f;
						this.rangedDamage += 0.03f;
						this.magicDamage += 0.03f;
						this.magicCrit += 2;
						this.meleeCrit += 2;
						this.rangedCrit += 2;
					}
					if (item.type == 1209)
					{
						this.meleeDamage += 0.02f;
						this.rangedDamage += 0.02f;
						this.magicDamage += 0.02f;
						this.magicCrit++;
						this.meleeCrit++;
						this.rangedCrit++;
					}
					if (item.type == 1210)
					{
						this.meleeDamage += 0.07f;
						this.meleeSpeed += 0.07f;
						this.moveSpeed += 0.07f;
					}
					if (item.type == 1211)
					{
						this.rangedCrit += 15;
						this.moveSpeed += 0.08f;
					}
					if (item.type == 1212)
					{
						this.magicCrit += 18;
						this.statManaMax2 += 80;
					}
					if (item.type == 1213)
					{
						this.magicCrit += 6;
						this.meleeCrit += 6;
						this.rangedCrit += 6;
					}
					if (item.type == 1214)
					{
						this.moveSpeed += 0.11f;
					}
					if (item.type == 1215)
					{
						this.meleeDamage += 0.08f;
						this.meleeCrit += 8;
						this.meleeSpeed += 0.08f;
					}
					if (item.type == 1216)
					{
						this.rangedDamage += 0.16f;
						this.rangedCrit += 7;
					}
					if (item.type == 1217)
					{
						this.magicDamage += 0.16f;
						this.magicCrit += 7;
						this.statManaMax2 += 100;
					}
					if (item.type == 1218)
					{
						this.meleeDamage += 0.04f;
						this.rangedDamage += 0.04f;
						this.magicDamage += 0.04f;
						this.magicCrit += 3;
						this.meleeCrit += 3;
						this.rangedCrit += 3;
					}
					if (item.type == 1219)
					{
						this.meleeDamage += 0.03f;
						this.rangedDamage += 0.03f;
						this.magicDamage += 0.03f;
						this.magicCrit += 3;
						this.meleeCrit += 3;
						this.rangedCrit += 3;
						this.moveSpeed += 0.06f;
					}
					if (item.type == 558)
					{
						this.magicDamage += 0.12f;
						this.magicCrit += 12;
						this.statManaMax2 += 100;
					}
					if (item.type == 559)
					{
						this.meleeCrit += 10;
						this.meleeDamage += 0.1f;
						this.meleeSpeed += 0.1f;
					}
					if (item.type == 553)
					{
						this.rangedDamage += 0.15f;
						this.rangedCrit += 8;
					}
					if (item.type == 551)
					{
						this.magicCrit += 7;
						this.meleeCrit += 7;
						this.rangedCrit += 7;
					}
					if (item.type == 552)
					{
						this.rangedDamage += 0.07f;
						this.meleeDamage += 0.07f;
						this.magicDamage += 0.07f;
						this.moveSpeed += 0.08f;
					}
					if (item.type == 1001)
					{
						this.meleeDamage += 0.16f;
						this.meleeCrit += 6;
					}
					if (item.type == 1002)
					{
						this.rangedDamage += 0.16f;
						this.ammoCost80 = true;
					}
					if (item.type == 1003)
					{
						this.statManaMax2 += 80;
						this.manaCost -= 0.17f;
						this.magicDamage += 0.16f;
					}
					if (item.type == 1004)
					{
						this.meleeDamage += 0.05f;
						this.magicDamage += 0.05f;
						this.rangedDamage += 0.05f;
						this.magicCrit += 7;
						this.meleeCrit += 7;
						this.rangedCrit += 7;
					}
					if (item.type == 1005)
					{
						this.magicCrit += 8;
						this.meleeCrit += 8;
						this.rangedCrit += 8;
						this.moveSpeed += 0.05f;
					}
					if (item.type == 2189)
					{
						this.statManaMax2 += 60;
						this.manaCost -= 0.13f;
						this.magicDamage += 0.05f;
						this.magicCrit += 5;
					}
					if (item.type == 1503)
					{
						this.magicDamage -= 0.4f;
					}
					if (item.type == 1504)
					{
						this.magicDamage += 0.07f;
						this.magicCrit += 7;
					}
					if (item.type == 1505)
					{
						this.magicDamage += 0.08f;
						this.moveSpeed += 0.08f;
					}
					if (item.type == 1546)
					{
						this.rangedCrit += 5;
						this.arrowDamage += 0.15f;
					}
					if (item.type == 1547)
					{
						this.rangedCrit += 5;
						this.bulletDamage += 0.15f;
					}
					if (item.type == 1548)
					{
						this.rangedCrit += 5;
						this.rocketDamage += 0.15f;
					}
					if (item.type == 1549)
					{
						this.rangedCrit += 13;
						this.rangedDamage += 0.13f;
						this.ammoCost80 = true;
					}
					if (item.type == 1550)
					{
						this.rangedCrit += 7;
						this.moveSpeed += 0.12f;
					}
					if (item.type == 1282)
					{
						this.statManaMax2 += 20;
						this.manaCost -= 0.05f;
					}
					if (item.type == 1283)
					{
						this.statManaMax2 += 40;
						this.manaCost -= 0.07f;
					}
					if (item.type == 1284)
					{
						this.statManaMax2 += 40;
						this.manaCost -= 0.09f;
					}
					if (item.type == 1285)
					{
						this.statManaMax2 += 60;
						this.manaCost -= 0.11f;
					}
					if (item.type == 1286)
					{
						this.statManaMax2 += 60;
						this.manaCost -= 0.13f;
					}
					if (item.type == 1287)
					{
						this.statManaMax2 += 80;
						this.manaCost -= 0.15f;
					}
					if (item.type == 1316 || item.type == 1317 || item.type == 1318)
					{
						this.aggro += 250;
					}
					if (item.type == 1316)
					{
						this.meleeDamage += 0.06f;
					}
					if (item.type == 1317)
					{
						this.meleeDamage += 0.08f;
						this.meleeCrit += 8;
					}
					if (item.type == 1318)
					{
						this.meleeCrit += 4;
					}
					if (item.type == 2199 || item.type == 2202)
					{
						this.aggro += 250;
					}
					if (item.type == 2201)
					{
						this.aggro += 400;
					}
					if (item.type == 2199)
					{
						this.meleeDamage += 0.06f;
					}
					if (item.type == 2200)
					{
						this.meleeDamage += 0.08f;
						this.meleeCrit += 8;
						this.meleeSpeed += 0.06f;
						this.moveSpeed += 0.06f;
					}
					if (item.type == 2201)
					{
						this.meleeDamage += 0.05f;
						this.meleeCrit += 5;
					}
					if (item.type == 2202)
					{
						this.meleeSpeed += 0.06f;
						this.moveSpeed += 0.06f;
					}
					if (item.type == 684)
					{
						this.rangedDamage += 0.16f;
						this.meleeDamage += 0.16f;
					}
					if (item.type == 685)
					{
						this.meleeCrit += 11;
						this.rangedCrit += 11;
					}
					if (item.type == 686)
					{
						this.moveSpeed += 0.08f;
						this.meleeSpeed += 0.07f;
					}
					if (item.type == 2361)
					{
						this.maxMinions++;
						this.minionDamage += 0.04f;
					}
					if (item.type == 2362)
					{
						this.maxMinions++;
						this.minionDamage += 0.04f;
					}
					if (item.type == 2363)
					{
						this.minionDamage += 0.05f;
					}
					if (item.type >= 1158 && item.type <= 1161)
					{
						this.maxMinions++;
					}
					if (item.type >= 1159 && item.type <= 1161)
					{
						this.minionDamage += 0.1f;
					}
					if (item.type >= 2370 && item.type <= 2371)
					{
						this.minionDamage += 0.05f;
						this.maxMinions++;
					}
					if (item.type == 2372)
					{
						this.minionDamage += 0.06f;
						this.maxMinions++;
					}
					if (item.type == 3381 || item.type == 3382 || item.type == 3383)
					{
						if (item.type != 3381)
						{
							this.maxMinions++;
						}
						this.maxMinions++;
						this.minionDamage += 0.22f;
					}
					if (item.type == 2763)
					{
						this.aggro += 300;
						this.meleeCrit += 17;
					}
					if (item.type == 2764)
					{
						this.aggro += 300;
						this.meleeDamage += 0.22f;
					}
					if (item.type == 2765)
					{
						this.aggro += 300;
						this.meleeSpeed += 0.15f;
						this.moveSpeed += 0.15f;
					}
					if (item.type == 2757)
					{
						this.rangedCrit += 7;
						this.rangedDamage += 0.16f;
					}
					if (item.type == 2758)
					{
						this.ammoCost75 = true;
						this.rangedCrit += 12;
						this.rangedDamage += 0.12f;
					}
					if (item.type == 2759)
					{
						this.rangedCrit += 8;
						this.rangedDamage += 0.08f;
						this.moveSpeed += 0.1f;
					}
					if (item.type == 2760)
					{
						this.statManaMax2 += 60;
						this.manaCost -= 0.15f;
						this.magicCrit += 7;
						this.magicDamage += 0.07f;
					}
					if (item.type == 2761)
					{
						this.magicDamage += 0.09f;
						this.magicCrit += 9;
					}
					if (item.type == 2762)
					{
						this.moveSpeed += 0.1f;
						this.magicDamage += 0.1f;
					}
					if (item.type >= 1832 && item.type <= 1834)
					{
						this.maxMinions++;
					}
					if (item.type >= 1832 && item.type <= 1834)
					{
						this.minionDamage += 0.11f;
					}
					if (item.prefix == 62)
					{
						this.statDefense++;
					}
					if (item.prefix == 63)
					{
						this.statDefense += 2;
					}
					if (item.prefix == 64)
					{
						this.statDefense += 3;
					}
					if (item.prefix == 65)
					{
						this.statDefense += 4;
					}
					if (item.prefix == 66)
					{
						this.statManaMax2 += 20;
					}
					if (item.prefix == 67)
					{
						this.meleeCrit += 2;
						this.rangedCrit += 2;
						this.magicCrit += 2;
						this.thrownCrit += 2;
					}
					if (item.prefix == 68)
					{
						this.meleeCrit += 4;
						this.rangedCrit += 4;
						this.magicCrit += 4;
						this.thrownCrit += 4;
					}
					if (item.prefix == 69)
					{
						this.meleeDamage += 0.01f;
						this.rangedDamage += 0.01f;
						this.magicDamage += 0.01f;
						this.minionDamage += 0.01f;
						this.thrownDamage += 0.01f;
					}
					if (item.prefix == 70)
					{
						this.meleeDamage += 0.02f;
						this.rangedDamage += 0.02f;
						this.magicDamage += 0.02f;
						this.minionDamage += 0.02f;
						this.thrownDamage += 0.02f;
					}
					if (item.prefix == 71)
					{
						this.meleeDamage += 0.03f;
						this.rangedDamage += 0.03f;
						this.magicDamage += 0.03f;
						this.minionDamage += 0.03f;
						this.thrownDamage += 0.03f;
					}
					if (item.prefix == 72)
					{
						this.meleeDamage += 0.04f;
						this.rangedDamage += 0.04f;
						this.magicDamage += 0.04f;
						this.minionDamage += 0.04f;
						this.thrownDamage += 0.04f;
					}
					if (item.prefix == 73)
					{
						this.moveSpeed += 0.01f;
					}
					if (item.prefix == 74)
					{
						this.moveSpeed += 0.02f;
					}
					if (item.prefix == 75)
					{
						this.moveSpeed += 0.03f;
					}
					if (item.prefix == 76)
					{
						this.moveSpeed += 0.04f;
					}
					if (item.prefix == 77)
					{
						this.meleeSpeed += 0.01f;
					}
					if (item.prefix == 78)
					{
						this.meleeSpeed += 0.02f;
					}
					if (item.prefix == 79)
					{
						this.meleeSpeed += 0.03f;
					}
					if (item.prefix == 80)
					{
						this.meleeSpeed += 0.04f;
					}
					ItemLoader.UpdateEquip(item, this);
				}
			}
		}

		public void VanillaUpdateAccessory(int i, Item item, bool hideVisual, ref bool flag, ref bool flag2, ref bool flag3)
		{
			//for (int l = 3; l < 8 + this.extraAccessorySlots; l++)
			{
				if (!item.expertOnly || Main.expertMode)
				{
					if (item.type == 3810 || item.type == 3809 || item.type == 3812 || item.type == 3811)
					{
						this.dd2Accessory = true;
					}
					if (item.type == 3015)
					{
						this.aggro -= 400;
						this.meleeCrit += 5;
						this.magicCrit += 5;
						this.rangedCrit += 5;
						this.thrownCrit += 5;
						this.meleeDamage += 0.05f;
						this.magicDamage += 0.05f;
						this.rangedDamage += 0.05f;
						this.thrownDamage += 0.05f;
						this.minionDamage += 0.05f;
					}
					if (item.type == 3016)
					{
						this.aggro += 400;
					}
					if (item.type == 2373)
					{
						this.accFishingLine = true;
					}
					if (item.type == 2374)
					{
						this.fishingSkill += 10;
					}
					if (item.type == 2375)
					{
						this.accTackleBox = true;
					}
					if (item.type == 3721)
					{
						this.accFishingLine = true;
						this.accTackleBox = true;
						this.fishingSkill += 10;
					}
					if (item.type == 3090)
					{
						this.npcTypeNoAggro[1] = true;
						this.npcTypeNoAggro[16] = true;
						this.npcTypeNoAggro[59] = true;
						this.npcTypeNoAggro[71] = true;
						this.npcTypeNoAggro[81] = true;
						this.npcTypeNoAggro[138] = true;
						this.npcTypeNoAggro[121] = true;
						this.npcTypeNoAggro[122] = true;
						this.npcTypeNoAggro[141] = true;
						this.npcTypeNoAggro[147] = true;
						this.npcTypeNoAggro[183] = true;
						this.npcTypeNoAggro[184] = true;
						this.npcTypeNoAggro[204] = true;
						this.npcTypeNoAggro[225] = true;
						this.npcTypeNoAggro[244] = true;
						this.npcTypeNoAggro[302] = true;
						this.npcTypeNoAggro[333] = true;
						this.npcTypeNoAggro[335] = true;
						this.npcTypeNoAggro[334] = true;
						this.npcTypeNoAggro[336] = true;
						this.npcTypeNoAggro[537] = true;
					}
					if (item.stringColor > 0)
					{
						this.yoyoString = true;
					}
					if (item.type == 3366)
					{
						this.counterWeight = 556 + Main.rand.Next(6);
						this.yoyoGlove = true;
						this.yoyoString = true;
					}
					if (item.type >= 3309 && item.type <= 3314)
					{
						this.counterWeight = 556 + item.type - 3309;
					}
					if (item.type == 3334)
					{
						this.yoyoGlove = true;
					}
					if (item.type == 3337)
					{
						this.shinyStone = true;
					}
					if (item.type == 3336)
					{
						this.SporeSac();
						this.sporeSac = true;
					}
					if (item.type == 2423)
					{
						this.autoJump = true;
						this.jumpSpeedBoost += 2.4f;
						this.extraFall += 15;
					}
					if (item.type == 857)
					{
						this.doubleJumpSandstorm = true;
					}
					if (item.type == 983)
					{
						this.doubleJumpSandstorm = true;
						this.jumpBoost = true;
					}
					if (item.type == 987)
					{
						this.doubleJumpBlizzard = true;
					}
					if (item.type == 1163)
					{
						this.doubleJumpBlizzard = true;
						this.jumpBoost = true;
					}
					if (item.type == 1724)
					{
						this.doubleJumpFart = true;
					}
					if (item.type == 1863)
					{
						this.doubleJumpFart = true;
						this.jumpBoost = true;
					}
					if (item.type == 1164)
					{
						this.doubleJumpCloud = true;
						this.doubleJumpSandstorm = true;
						this.doubleJumpBlizzard = true;
						this.jumpBoost = true;
					}
					if (item.type == 1250)
					{
						this.jumpBoost = true;
						this.doubleJumpCloud = true;
						this.noFallDmg = true;
					}
					if (item.type == 1252)
					{
						this.doubleJumpSandstorm = true;
						this.jumpBoost = true;
						this.noFallDmg = true;
					}
					if (item.type == 1251)
					{
						this.doubleJumpBlizzard = true;
						this.jumpBoost = true;
						this.noFallDmg = true;
					}
					if (item.type == 3250)
					{
						this.doubleJumpFart = true;
						this.jumpBoost = true;
						this.noFallDmg = true;
					}
					if (item.type == 3252)
					{
						this.doubleJumpSail = true;
						this.jumpBoost = true;
						this.noFallDmg = true;
					}
					if (item.type == 3251)
					{
						this.jumpBoost = true;
						this.bee = true;
						this.noFallDmg = true;
					}
					if (item.type == 1249)
					{
						this.jumpBoost = true;
						this.bee = true;
					}
					if (item.type == 3241)
					{
						this.jumpBoost = true;
						this.doubleJumpSail = true;
					}
					if (item.type == 1253 && (double)this.statLife <= (double)this.statLifeMax2 * 0.5)
					{
						this.AddBuff(62, 5, true);
					}
					if (item.type == 1290)
					{
						this.panic = true;
					}
					if ((item.type == 1300 || item.type == 1858) && (this.inventory[this.selectedItem].useAmmo == AmmoID.Bullet || this.inventory[this.selectedItem].useAmmo == AmmoID.CandyCorn || this.inventory[this.selectedItem].useAmmo == AmmoID.Stake || this.inventory[this.selectedItem].useAmmo == 23))
					{
						this.scope = true;
					}
					if (item.type == 1858)
					{
						this.rangedCrit += 10;
						this.rangedDamage += 0.1f;
					}
					if (item.type == 1303 && this.wet)
					{
						Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.9f, 0.2f, 0.6f);
					}
					if (item.type == 1301)
					{
						this.meleeCrit += 8;
						this.rangedCrit += 8;
						this.magicCrit += 8;
						this.thrownCrit += 8;
						this.meleeDamage += 0.1f;
						this.rangedDamage += 0.1f;
						this.magicDamage += 0.1f;
						this.minionDamage += 0.1f;
						this.thrownDamage += 0.1f;
					}
					if (item.type == 982)
					{
						this.statManaMax2 += 20;
						this.manaRegenDelayBonus++;
						this.manaRegenBonus += 25;
					}
					if (item.type == 1595)
					{
						this.statManaMax2 += 20;
						this.magicCuffs = true;
					}
					if (item.type == 2219)
					{
						this.manaMagnet = true;
					}
					if (item.type == 2220)
					{
						this.manaMagnet = true;
						this.magicDamage += 0.15f;
					}
					if (item.type == 2221)
					{
						this.manaMagnet = true;
						this.magicCuffs = true;
					}
					if (this.whoAmI == Main.myPlayer && item.type == 1923)
					{
						Player.tileRangeX++;
						Player.tileRangeY++;
					}
					if (item.type == 1247)
					{
						this.starCloak = true;
						this.bee = true;
					}
					if (item.type == 1248)
					{
						this.meleeCrit += 10;
						this.rangedCrit += 10;
						this.magicCrit += 10;
						this.thrownCrit += 10;
					}
					if (item.type == 854)
					{
						this.discount = true;
					}
					if (item.type == 855)
					{
						this.coins = true;
					}
					if (item.type == 3033)
					{
						this.goldRing = true;
					}
					if (item.type == 3034)
					{
						this.goldRing = true;
						this.coins = true;
					}
					if (item.type == 3035)
					{
						this.goldRing = true;
						this.coins = true;
						this.discount = true;
					}
					if (item.type == 53)
					{
						this.doubleJumpCloud = true;
					}
					if (item.type == 3201)
					{
						this.doubleJumpSail = true;
					}
					if (item.type == 54)
					{
						this.accRunSpeed = 6f;
					}
					if (item.type == 3068)
					{
						this.cordage = true;
					}
					if (item.type == 1579)
					{
						this.accRunSpeed = 6f;
						this.coldDash = true;
					}
					if (item.type == 3200)
					{
						this.accRunSpeed = 6f;
						this.sailDash = true;
					}
					if (item.type == 128)
					{
						this.rocketBoots = 1;
					}
					if (item.type == 156)
					{
						this.noKnockback = true;
					}
					if (item.type == 158)
					{
						this.noFallDmg = true;
					}
					if (item.type == 934)
					{
						this.carpet = true;
					}
					if (item.type == 953)
					{
						this.spikedBoots++;
					}
					if (item.type == 975)
					{
						this.spikedBoots++;
					}
					if (item.type == 976)
					{
						this.spikedBoots += 2;
					}
					if (item.type == 977)
					{
						this.dash = 1;
					}
					if (item.type == 3097)
					{
						this.dash = 2;
					}
					if (item.type == 963)
					{
						this.blackBelt = true;
					}
					if (item.type == 984)
					{
						this.blackBelt = true;
						this.dash = 1;
						this.spikedBoots = 2;
					}
					if (item.type == 1131)
					{
						this.gravControl2 = true;
					}
					if (item.type == 1132)
					{
						this.bee = true;
					}
					if (item.type == 1578)
					{
						this.bee = true;
						this.panic = true;
					}
					if (item.type == 3224)
					{
						this.endurance += 0.17f;
					}
					if (item.type == 3223)
					{
						this.brainOfConfusion = true;
					}
					if (item.type == 950)
					{
						this.iceSkate = true;
					}
					if (item.type == 159)
					{
						this.jumpBoost = true;
					}
					if (item.type == 3225)
					{
						this.jumpBoost = true;
					}
					if (item.type == 187)
					{
						this.accFlipper = true;
					}
					if (item.type == 211)
					{
						this.meleeSpeed += 0.12f;
					}
					if (item.type == 223)
					{
						this.manaCost -= 0.06f;
					}
					if (item.type == 285)
					{
						this.moveSpeed += 0.05f;
					}
					if (item.type == 212)
					{
						this.moveSpeed += 0.1f;
					}
					if (item.type == 267)
					{
						this.killGuide = true;
					}
					if (item.type == 1307)
					{
						this.killClothier = true;
					}
					if (item.type == 193)
					{
						this.fireWalk = true;
					}
					if (item.type == 861)
					{
						this.accMerman = true;
						this.wolfAcc = true;
						if (hideVisual)
						{
							this.hideMerman = true;
							this.hideWolf = true;
						}
					}
					if (item.type == 862)
					{
						this.starCloak = true;
						this.longInvince = true;
					}
					if (item.type == 860)
					{
						this.pStone = true;
					}
					if (item.type == 863)
					{
						this.waterWalk2 = true;
					}
					if (item.type == 907)
					{
						this.waterWalk2 = true;
						this.fireWalk = true;
					}
					if (item.type == 908)
					{
						this.waterWalk = true;
						this.fireWalk = true;
						this.lavaMax += 420;
					}
					if (item.type == 906)
					{
						this.lavaMax += 420;
					}
					if (item.type == 485)
					{
						this.wolfAcc = true;
						if (hideVisual)
						{
							this.hideWolf = true;
						}
					}
					if (item.type == 486)
					{
						this.rulerLine = true;
					}
					if (item.type == 2799)
					{
						this.rulerGrid = true;
					}
					if (item.type == 394)
					{
						this.accFlipper = true;
						this.accDivingHelm = true;
					}
					if (item.type == 396)
					{
						this.noFallDmg = true;
						this.fireWalk = true;
					}
					if (item.type == 397)
					{
						this.noKnockback = true;
						this.fireWalk = true;
					}
					if (item.type == 399)
					{
						this.jumpBoost = true;
						this.doubleJumpCloud = true;
					}
					if (item.type == 405)
					{
						this.accRunSpeed = 6f;
						this.rocketBoots = 2;
					}
					if (item.type == 1860)
					{
						this.accFlipper = true;
						this.accDivingHelm = true;
						if (this.wet)
						{
							Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.9f, 0.2f, 0.6f);
						}
					}
					if (item.type == 1861)
					{
						this.arcticDivingGear = true;
						this.accFlipper = true;
						this.accDivingHelm = true;
						this.iceSkate = true;
						if (this.wet)
						{
							Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.2f, 0.8f, 0.9f);
						}
					}
					if (item.type == 2214)
					{
						flag2 = true;
					}
					if (item.type == 2215)
					{
						flag3 = true;
					}
					if (item.type == 2216)
					{
						this.autoPaint = true;
					}
					if (item.type == 2217)
					{
						flag = true;
					}
					if (item.type == 3061)
					{
						flag = true;
						flag2 = true;
						this.autoPaint = true;
						flag3 = true;
					}
					if (item.type == 3624)
					{
						this.autoActuator = true;
					}
					if (item.type == 897)
					{
						this.kbGlove = true;
						this.meleeSpeed += 0.12f;
					}
					if (item.type == 1343)
					{
						this.kbGlove = true;
						this.meleeSpeed += 0.1f;
						this.meleeDamage += 0.1f;
						this.magmaStone = true;
					}
					if (item.type == 1167)
					{
						this.minionKB += 2f;
						this.minionDamage += 0.15f;
					}
					if (item.type == 1864)
					{
						this.minionKB += 2f;
						this.minionDamage += 0.15f;
						this.maxMinions++;
					}
					if (item.type == 1845)
					{
						this.minionDamage += 0.1f;
						this.maxMinions++;
					}
					if (item.type == 1321)
					{
						this.magicQuiver = true;
						this.arrowDamage += 0.1f;
					}
					if (item.type == 1322)
					{
						this.magmaStone = true;
					}
					if (item.type == 1323)
					{
						this.lavaRose = true;
					}
					if (item.type == 3333)
					{
						this.strongBees = true;
					}
					if (item.type == 938)
					{
						this.noKnockback = true;
						if ((float)this.statLife > (float)this.statLifeMax2 * 0.25f)
						{
							this.hasPaladinShield = true;
							if (i != Main.myPlayer && this.miscCounter % 10 == 0)
							{
								int myPlayer = Main.myPlayer;
								if (Main.player[myPlayer].team == this.team && this.team != 0)
								{
									float num4 = this.position.X - Main.player[myPlayer].position.X;
									float num5 = this.position.Y - Main.player[myPlayer].position.Y;
									float num6 = (float)Math.Sqrt((double)(num4 * num4 + num5 * num5));
									if (num6 < 800f)
									{
										Main.player[myPlayer].AddBuff(43, 20, true);
									}
								}
							}
						}
					}
					if (item.type == 936)
					{
						this.kbGlove = true;
						this.meleeSpeed += 0.12f;
						this.meleeDamage += 0.12f;
					}
					if (item.type == 898)
					{
						this.accRunSpeed = 6.75f;
						this.rocketBoots = 2;
						this.moveSpeed += 0.08f;
					}
					if (item.type == 1862)
					{
						this.accRunSpeed = 6.75f;
						this.rocketBoots = 3;
						this.moveSpeed += 0.08f;
						this.iceSkate = true;
					}
					if (item.type == 3110)
					{
						this.accMerman = true;
						this.wolfAcc = true;
						if (hideVisual)
						{
							this.hideMerman = true;
							this.hideWolf = true;
						}
					}
					if (item.type == 1865 || item.type == 3110)
					{
						this.lifeRegen += 2;
						this.statDefense += 4;
						this.meleeSpeed += 0.1f;
						this.meleeDamage += 0.1f;
						this.meleeCrit += 2;
						this.rangedDamage += 0.1f;
						this.rangedCrit += 2;
						this.magicDamage += 0.1f;
						this.magicCrit += 2;
						this.pickSpeed -= 0.15f;
						this.minionDamage += 0.1f;
						this.minionKB += 0.5f;
						this.thrownDamage += 0.1f;
						this.thrownCrit += 2;
					}
					if (item.type == 899 && Main.dayTime)
					{
						this.lifeRegen += 2;
						this.statDefense += 4;
						this.meleeSpeed += 0.1f;
						this.meleeDamage += 0.1f;
						this.meleeCrit += 2;
						this.rangedDamage += 0.1f;
						this.rangedCrit += 2;
						this.magicDamage += 0.1f;
						this.magicCrit += 2;
						this.pickSpeed -= 0.15f;
						this.minionDamage += 0.1f;
						this.minionKB += 0.5f;
						this.thrownDamage += 0.1f;
						this.thrownCrit += 2;
					}
					if (item.type == 900 && (!Main.dayTime || Main.eclipse))
					{
						this.lifeRegen += 2;
						this.statDefense += 4;
						this.meleeSpeed += 0.1f;
						this.meleeDamage += 0.1f;
						this.meleeCrit += 2;
						this.rangedDamage += 0.1f;
						this.rangedCrit += 2;
						this.magicDamage += 0.1f;
						this.magicCrit += 2;
						this.pickSpeed -= 0.15f;
						this.minionDamage += 0.1f;
						this.minionKB += 0.5f;
						this.thrownDamage += 0.1f;
						this.thrownCrit += 2;
					}
					if (item.type == 407)
					{
						this.blockRange = 1;
					}
					if (item.type == 489)
					{
						this.magicDamage += 0.15f;
					}
					if (item.type == 490)
					{
						this.meleeDamage += 0.15f;
					}
					if (item.type == 491)
					{
						this.rangedDamage += 0.15f;
					}
					if (item.type == 2998)
					{
						this.minionDamage += 0.15f;
					}
					if (item.type == 935)
					{
						this.magicDamage += 0.12f;
						this.meleeDamage += 0.12f;
						this.rangedDamage += 0.12f;
						this.minionDamage += 0.12f;
						this.thrownDamage += 0.12f;
					}
					if (item.type == 492)
					{
						this.wingTimeMax = 100;
					}
					if (item.type == 493)
					{
						this.wingTimeMax = 100;
					}
					if (item.type == 748)
					{
						this.wingTimeMax = 115;
					}
					if (item.type == 749)
					{
						this.wingTimeMax = 130;
					}
					if (item.type == 761)
					{
						this.wingTimeMax = 130;
					}
					if (item.type == 785)
					{
						this.wingTimeMax = 140;
					}
					if (item.type == 786)
					{
						this.wingTimeMax = 140;
					}
					if (item.type == 821)
					{
						this.wingTimeMax = 160;
					}
					if (item.type == 822)
					{
						this.wingTimeMax = 160;
					}
					if (item.type == 823)
					{
						this.wingTimeMax = 160;
					}
					if (item.type == 2280)
					{
						this.wingTimeMax = 160;
					}
					if (item.type == 2494)
					{
						this.wingTimeMax = 100;
					}
					if (item.type == 2609)
					{
						this.wingTimeMax = 180;
						this.ignoreWater = true;
					}
					if (item.type == 948)
					{
						this.wingTimeMax = 180;
					}
					if (item.type == 1162)
					{
						this.wingTimeMax = 160;
					}
					if (item.type == 1165)
					{
						this.wingTimeMax = 140;
					}
					if (item.type == 1515)
					{
						this.wingTimeMax = 130;
					}
					if (item.type == 665)
					{
						this.wingTimeMax = 150;
					}
					if (item.type == 1583)
					{
						this.wingTimeMax = 150;
					}
					if (item.type == 1584)
					{
						this.wingTimeMax = 150;
					}
					if (item.type == 1585)
					{
						this.wingTimeMax = 150;
					}
					if (item.type == 1586)
					{
						this.wingTimeMax = 150;
					}
					if (item.type == 3228)
					{
						this.wingTimeMax = 150;
					}
					if (item.type == 3580)
					{
						this.wingTimeMax = 150;
					}
					if (item.type == 3582)
					{
						this.wingTimeMax = 150;
					}
					if (item.type == 3588)
					{
						this.wingTimeMax = 150;
					}
					if (item.type == 3592)
					{
						this.wingTimeMax = 150;
					}
					if (item.type == 1797)
					{
						this.wingTimeMax = 180;
					}
					if (item.type == 1830)
					{
						this.wingTimeMax = 180;
					}
					if (item.type == 1866)
					{
						this.wingTimeMax = 170;
					}
					if (item.type == 1871)
					{
						this.wingTimeMax = 170;
					}
					if (item.type == 2770)
					{
						this.wingTimeMax = 160;
					}
					if (item.type == 3468)
					{
						this.wingTimeMax = 180;
					}
					if (item.type == 3469)
					{
						this.wingTimeMax = 160;
					}
					if (item.type == 3470)
					{
						this.wingTimeMax = 160;
					}
					if (item.type == 3471)
					{
						this.wingTimeMax = 180;
					}
					if (item.type == 3883)
					{
						this.wingTimeMax = 150;
					}
					if (item.type == 885)
					{
						this.buffImmune[30] = true;
					}
					if (item.type == 886)
					{
						this.buffImmune[36] = true;
					}
					if (item.type == 887)
					{
						this.buffImmune[20] = true;
					}
					if (item.type == 888)
					{
						this.buffImmune[22] = true;
					}
					if (item.type == 889)
					{
						this.buffImmune[32] = true;
					}
					if (item.type == 890)
					{
						this.buffImmune[35] = true;
					}
					if (item.type == 891)
					{
						this.buffImmune[23] = true;
					}
					if (item.type == 892)
					{
						this.buffImmune[33] = true;
					}
					if (item.type == 893)
					{
						this.buffImmune[31] = true;
					}
					if (item.type == 3781)
					{
						this.buffImmune[156] = true;
					}
					if (item.type == 901)
					{
						this.buffImmune[33] = true;
						this.buffImmune[36] = true;
					}
					if (item.type == 902)
					{
						this.buffImmune[30] = true;
						this.buffImmune[20] = true;
					}
					if (item.type == 903)
					{
						this.buffImmune[32] = true;
						this.buffImmune[31] = true;
					}
					if (item.type == 904)
					{
						this.buffImmune[35] = true;
						this.buffImmune[23] = true;
					}
					if (item.type == 1921)
					{
						this.buffImmune[46] = true;
						this.buffImmune[47] = true;
					}
					if (item.type == 1612)
					{
						this.buffImmune[33] = true;
						this.buffImmune[36] = true;
						this.buffImmune[30] = true;
						this.buffImmune[20] = true;
						this.buffImmune[32] = true;
						this.buffImmune[31] = true;
						this.buffImmune[35] = true;
						this.buffImmune[23] = true;
						this.buffImmune[22] = true;
					}
					if (item.type == 1613)
					{
						this.buffImmune[46] = true;
						this.noKnockback = true;
						this.fireWalk = true;
						this.buffImmune[33] = true;
						this.buffImmune[36] = true;
						this.buffImmune[30] = true;
						this.buffImmune[20] = true;
						this.buffImmune[32] = true;
						this.buffImmune[31] = true;
						this.buffImmune[35] = true;
						this.buffImmune[23] = true;
						this.buffImmune[22] = true;
					}
					if (item.type == 497)
					{
						this.accMerman = true;
						if (hideVisual)
						{
							this.hideMerman = true;
						}
					}
					if (item.type == 535)
					{
						this.pStone = true;
					}
					if (item.type == 536)
					{
						this.kbGlove = true;
					}
					if (item.type == 532)
					{
						this.starCloak = true;
					}
					if (item.type == 554)
					{
						this.longInvince = true;
					}
					if (item.type == 555)
					{
						this.manaFlower = true;
						this.manaCost -= 0.08f;
					}
					if (Main.myPlayer == this.whoAmI)
					{
						if (item.type == 576 && Main.rand.Next(10800) == 0 && Main.curMusic > 0 && Main.curMusic <= 41)
						{
							int num7 = 0;
							if (Main.curMusic == 1)
							{
								num7 = 0;
							}
							if (Main.curMusic == 2)
							{
								num7 = 1;
							}
							if (Main.curMusic == 3)
							{
								num7 = 2;
							}
							if (Main.curMusic == 4)
							{
								num7 = 4;
							}
							if (Main.curMusic == 5)
							{
								num7 = 5;
							}
							if (Main.curMusic == 6)
							{
								num7 = 3;
							}
							if (Main.curMusic == 7)
							{
								num7 = 6;
							}
							if (Main.curMusic == 8)
							{
								num7 = 7;
							}
							if (Main.curMusic == 9)
							{
								num7 = 9;
							}
							if (Main.curMusic == 10)
							{
								num7 = 8;
							}
							if (Main.curMusic == 11)
							{
								num7 = 11;
							}
							if (Main.curMusic == 12)
							{
								num7 = 10;
							}
							if (Main.curMusic == 13)
							{
								num7 = 12;
							}
							if (Main.curMusic == 28)
							{
								item.SetDefaults(1963, false);
							}
							else if (Main.curMusic == 29)
							{
								item.SetDefaults(1610, false);
							}
							else if (Main.curMusic == 30)
							{
								item.SetDefaults(1963, false);
							}
							else if (Main.curMusic == 31)
							{
								item.SetDefaults(1964, false);
							}
							else if (Main.curMusic == 32)
							{
								item.SetDefaults(1965, false);
							}
							else if (Main.curMusic == 33)
							{
								item.SetDefaults(2742, false);
							}
							else if (Main.curMusic == 34)
							{
								item.SetDefaults(3370, false);
							}
							else if (Main.curMusic == 35)
							{
								item.SetDefaults(3236, false);
							}
							else if (Main.curMusic == 36)
							{
								item.SetDefaults(3237, false);
							}
							else if (Main.curMusic == 37)
							{
								item.SetDefaults(3235, false);
							}
							else if (Main.curMusic == 38)
							{
								item.SetDefaults(3044, false);
							}
							else if (Main.curMusic == 39)
							{
								item.SetDefaults(3371, false);
							}
							else if (Main.curMusic == 40)
							{
								item.SetDefaults(3796, false);
							}
							else if (Main.curMusic == 41)
							{
								item.SetDefaults(3869, false);
							}
							else if (Main.curMusic > 13)
							{
								item.SetDefaults(1596 + Main.curMusic - 14, false);
							}
							else
							{
								item.SetDefaults(num7 + 562, false);
							}
						}
						if (item.type >= 562 && item.type <= 574)
						{
							Main.musicBox2 = item.type - 562;
						}
						if (item.type >= 1596 && item.type <= 1609)
						{
							Main.musicBox2 = item.type - 1596 + 13;
						}
						if (item.type == 1610)
						{
							Main.musicBox2 = 27;
						}
						if (item.type == 1963)
						{
							Main.musicBox2 = 28;
						}
						if (item.type == 1964)
						{
							Main.musicBox2 = 29;
						}
						if (item.type == 1965)
						{
							Main.musicBox2 = 30;
						}
						if (item.type == 2742)
						{
							Main.musicBox2 = 31;
						}
						if (item.type == 3044)
						{
							Main.musicBox2 = 32;
						}
						if (item.type == 3235)
						{
							Main.musicBox2 = 33;
						}
						if (item.type == 3236)
						{
							Main.musicBox2 = 34;
						}
						if (item.type == 3237)
						{
							Main.musicBox2 = 35;
						}
						if (item.type == 3370)
						{
							Main.musicBox2 = 36;
						}
						if (item.type == 3371)
						{
							Main.musicBox2 = 37;
						}
						if (item.type == 3796)
						{
							Main.musicBox2 = 38;
						}
						if (item.type == 3869)
						{
							Main.musicBox2 = 39;
						}
						if (SoundLoader.itemToMusic.ContainsKey(item.type))
						{
							Main.musicBox2 = SoundLoader.itemToMusic[item.type];
						}
					}
					if (this.dd2Accessory)
					{
						this.minionDamage += 0.1f;
						this.maxTurrets++;
					}
					if (item.wingSlot > 0)
					{
						if (!hideVisual || (this.velocity.Y != 0f && !this.mount.Active))
						{
							this.wings = item.wingSlot;
						}
						this.wingsLogic = item.wingSlot;
					}
					ItemLoader.UpdateAccessory(item, this, hideVisual);
				}
			}
		}

		public void VanillaUpdateVanityAccessory(Item item)
		{
			//for (int n = 13; n < 18 + this.extraAccessorySlots; n++)
			{
				int type4 = item.type;
				if (item.wingSlot > 0)
				{
					this.wings = item.wingSlot;
				}
				if (type4 == 861 || type4 == 3110 || type4 == 485)
				{
					this.hideWolf = false;
					this.forceWerewolf = true;
				}
				if (((this.wet && !this.lavaWet && (!this.mount.Active || this.mount.Type != 3)) || !this.forceWerewolf) && (type4 == 861 || type4 == 3110 || type4 == 497))
				{
					this.hideMerman = false;
					this.forceMerman = true;
				}
			}
		}

		public void UpdateEquips(int i) //Noise for the Diff
		{
			for (int j = 0; j < 58; j++)
			{
				VanillaUpdateInventory(this.inventory[j]);
			}
			for (int k = 0; k < 8 + this.extraAccessorySlots; k++)
			{
				VanillaUpdateEquip(this.armor[k]);
			}
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			for (int l = 3; l < 8 + this.extraAccessorySlots; l++)
			{
				VanillaUpdateAccessory(i, this.armor[l], this.hideVisual[l], ref flag, ref flag2, ref flag3);
			}
			PlayerHooks.UpdateEquips(this, ref flag, ref flag2, ref flag3);
			//wing loop merged into VanillaUpdateAccessory
			for (int n = 13; n < 18 + this.extraAccessorySlots; n++)
			{
				VanillaUpdateVanityAccessory(this.armor[n]);
			}
			PlayerHooks.UpdateVanityAccessories(this);
			if (this.whoAmI == Main.myPlayer && Main.clock && this.accWatch < 3)
			{
				this.accWatch++;
			}
			if (flag2)
			{
				this.tileSpeed += 0.5f;
			}
			if (flag)
			{
				this.wallSpeed += 0.5f;
			}
			if (flag3 && this.whoAmI == Main.myPlayer)
			{
				Player.tileRangeX += 3;
				Player.tileRangeY += 2;
			}
			if (!this.accThirdEye)
			{
				this.accThirdEyeCounter = 0;
			}
			if (Main.netMode == 1 && this.whoAmI == Main.myPlayer)
			{
				for (int num8 = 0; num8 < 255; num8++)
				{
					if (num8 != this.whoAmI && Main.player[num8].active && !Main.player[num8].dead && Main.player[num8].team == this.team && Main.player[num8].team != 0)
					{
						int num9 = 800;
						if ((Main.player[num8].Center - base.Center).Length() < (float)num9)
						{
							if (Main.player[num8].accWatch > this.accWatch)
							{
								this.accWatch = Main.player[num8].accWatch;
							}
							if (Main.player[num8].accCompass > this.accCompass)
							{
								this.accCompass = Main.player[num8].accCompass;
							}
							if (Main.player[num8].accDepthMeter > this.accDepthMeter)
							{
								this.accDepthMeter = Main.player[num8].accDepthMeter;
							}
							if (Main.player[num8].accFishFinder)
							{
								this.accFishFinder = true;
							}
							if (Main.player[num8].accWeatherRadio)
							{
								this.accWeatherRadio = true;
							}
							if (Main.player[num8].accThirdEye)
							{
								this.accThirdEye = true;
							}
							if (Main.player[num8].accJarOfSouls)
							{
								this.accJarOfSouls = true;
							}
							if (Main.player[num8].accCalendar)
							{
								this.accCalendar = true;
							}
							if (Main.player[num8].accStopwatch)
							{
								this.accStopwatch = true;
							}
							if (Main.player[num8].accOreFinder)
							{
								this.accOreFinder = true;
							}
							if (Main.player[num8].accCritterGuide)
							{
								this.accCritterGuide = true;
							}
							if (Main.player[num8].accDreamCatcher)
							{
								this.accDreamCatcher = true;
							}
						}
					}
				}
			}
			if (!this.accDreamCatcher && this.dpsStarted)
			{
				this.dpsStarted = false;
				this.dpsEnd = DateTime.Now;
			}
		}

		public void UpdateArmorSets(int i)
		{
			this.setBonus = "";
			if (this.body == 67 && this.legs == 56 && this.head >= 103 && this.head <= 105)
			{
				this.setBonus = Lang.setBonus(31, false);
				this.shroomiteStealth = true;
			}
			if ((this.head == 52 && this.body == 32 && this.legs == 31) || (this.head == 53 && this.body == 33 && this.legs == 32) || (this.head == 54 && this.body == 34 && this.legs == 33) || (this.head == 55 && this.body == 35 && this.legs == 34) || (this.head == 70 && this.body == 46 && this.legs == 42) || (this.head == 71 && this.body == 47 && this.legs == 43) || (this.head == 166 && this.body == 173 && this.legs == 108) || (this.head == 167 && this.body == 174 && this.legs == 109))
			{
				this.setBonus = Lang.setBonus(20, false);
				this.statDefense++;
			}
			if ((this.head == 1 && this.body == 1 && this.legs == 1) || ((this.head == 72 || this.head == 2) && this.body == 2 && this.legs == 2) || (this.head == 47 && this.body == 28 && this.legs == 27))
			{
				this.setBonus = Lang.setBonus(0, false);
				this.statDefense += 2;
			}
			if ((this.head == 3 && this.body == 3 && this.legs == 3) || ((this.head == 73 || this.head == 4) && this.body == 4 && this.legs == 4) || (this.head == 48 && this.body == 29 && this.legs == 28) || (this.head == 49 && this.body == 30 && this.legs == 29))
			{
				this.setBonus = Lang.setBonus(1, false);
				this.statDefense += 3;
			}
			if (this.head == 188 && this.body == 189 && this.legs == 129)
			{
				this.setBonus = Lang.setBonus(42, false);
				this.thrownCost50 = true;
			}
			if (this.head == 50 && this.body == 31 && this.legs == 30)
			{
				this.setBonus = Lang.setBonus(32, false);
				this.statDefense += 4;
			}
			if (this.head == 112 && this.body == 75 && this.legs == 64)
			{
				this.setBonus = Lang.setBonus(33, false);
				this.meleeDamage += 0.1f;
				this.magicDamage += 0.1f;
				this.rangedDamage += 0.1f;
				this.thrownDamage += 0.1f;
			}
			if (this.head == 22 && this.body == 14 && this.legs == 14)
			{
				this.thrownCost33 = true;
				this.setBonus = Lang.setBonus(41, false);
			}
			if (this.head == 157 && this.body == 105 && this.legs == 98)
			{
				int num = 0;
				this.setBonus = Lang.setBonus(38, false);
				this.beetleOffense = true;
				this.beetleCounter -= 3f;
				this.beetleCounter -= (float)(this.beetleCountdown / 10);
				this.beetleCountdown++;
				if (this.beetleCounter < 0f)
				{
					this.beetleCounter = 0f;
				}
				int num2 = 400;
				int num3 = 1200;
				int num4 = 4600;
				if (this.beetleCounter > (float)(num2 + num3 + num4 + num3))
				{
					this.beetleCounter = (float)(num2 + num3 + num4 + num3);
				}
				if (this.beetleCounter > (float)(num2 + num3 + num4))
				{
					this.AddBuff(100, 5, false);
					num = 3;
				}
				else if (this.beetleCounter > (float)(num2 + num3))
				{
					this.AddBuff(99, 5, false);
					num = 2;
				}
				else if (this.beetleCounter > (float)num2)
				{
					this.AddBuff(98, 5, false);
					num = 1;
				}
				if (num < this.beetleOrbs)
				{
					this.beetleCountdown = 0;
				}
				else if (num > this.beetleOrbs)
				{
					this.beetleCounter += 200f;
				}
				if (num != this.beetleOrbs && this.beetleOrbs > 0)
				{
					for (int j = 0; j < 22; j++)
					{
						if (this.buffType[j] >= 98 && this.buffType[j] <= 100 && this.buffType[j] != 97 + num)
						{
							this.DelBuff(j);
						}
					}
				}
			}
			else if (this.head == 157 && this.body == 106 && this.legs == 98)
			{
				this.setBonus = Lang.setBonus(37, false);
				this.beetleDefense = true;
				this.beetleCounter += 1f;
				int num5 = 180;
				if (this.beetleCounter >= (float)num5)
				{
					if (this.beetleOrbs > 0 && this.beetleOrbs < 3)
					{
						for (int k = 0; k < 22; k++)
						{
							if (this.buffType[k] >= 95 && this.buffType[k] <= 96)
							{
								this.DelBuff(k);
							}
						}
					}
					if (this.beetleOrbs < 3)
					{
						this.AddBuff(95 + this.beetleOrbs, 5, false);
						this.beetleCounter = 0f;
					}
					else
					{
						this.beetleCounter = (float)num5;
					}
				}
			}
			if (!this.beetleDefense && !this.beetleOffense)
			{
				this.beetleCounter = 0f;
			}
			else
			{
				this.beetleFrameCounter++;
				if (this.beetleFrameCounter >= 1)
				{
					this.beetleFrameCounter = 0;
					this.beetleFrame++;
					if (this.beetleFrame > 2)
					{
						this.beetleFrame = 0;
					}
				}
				for (int l = this.beetleOrbs; l < 3; l++)
				{
					this.beetlePos[l].X = 0f;
					this.beetlePos[l].Y = 0f;
				}
				for (int m = 0; m < this.beetleOrbs; m++)
				{
					this.beetlePos[m] += this.beetleVel[m];
					Vector2[] expr_6EC_cp_0 = this.beetleVel;
					int expr_6EC_cp_1 = m;
					expr_6EC_cp_0[expr_6EC_cp_1].X = expr_6EC_cp_0[expr_6EC_cp_1].X + (float)Main.rand.Next(-100, 101) * 0.005f;
					Vector2[] expr_71A_cp_0 = this.beetleVel;
					int expr_71A_cp_1 = m;
					expr_71A_cp_0[expr_71A_cp_1].Y = expr_71A_cp_0[expr_71A_cp_1].Y + (float)Main.rand.Next(-100, 101) * 0.005f;
					float num6 = this.beetlePos[m].X;
					float num7 = this.beetlePos[m].Y;
					float num8 = (float)Math.Sqrt((double)(num6 * num6 + num7 * num7));
					if (num8 > 100f)
					{
						num8 = 20f / num8;
						num6 *= -num8;
						num7 *= -num8;
						int num9 = 10;
						this.beetleVel[m].X = (this.beetleVel[m].X * (float)(num9 - 1) + num6) / (float)num9;
						this.beetleVel[m].Y = (this.beetleVel[m].Y * (float)(num9 - 1) + num7) / (float)num9;
					}
					else if (num8 > 30f)
					{
						num8 = 10f / num8;
						num6 *= -num8;
						num7 *= -num8;
						int num10 = 20;
						this.beetleVel[m].X = (this.beetleVel[m].X * (float)(num10 - 1) + num6) / (float)num10;
						this.beetleVel[m].Y = (this.beetleVel[m].Y * (float)(num10 - 1) + num7) / (float)num10;
					}
					num6 = this.beetleVel[m].X;
					num7 = this.beetleVel[m].Y;
					num8 = (float)Math.Sqrt((double)(num6 * num6 + num7 * num7));
					if (num8 > 2f)
					{
						this.beetleVel[m] *= 0.9f;
					}
					this.beetlePos[m] -= this.velocity * 0.25f;
				}
			}
			if (this.head == 14 && ((this.body >= 58 && this.body <= 63) || this.body == 167))
			{
				this.setBonus = Lang.setBonus(28, false);
				this.magicCrit += 10;
			}
			if (this.head == 159 && ((this.body >= 58 && this.body <= 63) || this.body == 167))
			{
				this.setBonus = Lang.setBonus(36, false);
				this.statManaMax2 += 60;
			}
			if ((this.head == 5 || this.head == 74) && (this.body == 5 || this.body == 48) && (this.legs == 5 || this.legs == 44))
			{
				this.setBonus = Lang.setBonus(2, false);
				this.moveSpeed += 0.15f;
			}
			if (this.head == 57 && this.body == 37 && this.legs == 35)
			{
				this.setBonus = Lang.setBonus(21, false);
				this.crimsonRegen = true;
			}
			if (this.head == 101 && this.body == 66 && this.legs == 55)
			{
				this.setBonus = Lang.setBonus(30, false);
				this.ghostHeal = true;
			}
			if (this.head == 156 && this.body == 66 && this.legs == 55)
			{
				this.setBonus = Lang.setBonus(35, false);
				this.ghostHurt = true;
			}
			if (this.head == 6 && this.body == 6 && this.legs == 6)
			{
				this.setBonus = Lang.setBonus(3, false);
				this.spaceGun = true;
			}
			if (this.head == 46 && this.body == 27 && this.legs == 26)
			{
				this.frostArmor = true;
				this.setBonus = Lang.setBonus(22, false);
				this.frostBurn = true;
			}
			if ((this.head == 75 || this.head == 7) && this.body == 7 && this.legs == 7)
			{
				this.boneArmor = true;
				this.setBonus = Lang.setBonus(4, false);
				this.ammoCost80 = true;
			}
			if ((this.head == 76 || this.head == 8) && (this.body == 49 || this.body == 8) && (this.legs == 45 || this.legs == 8))
			{
				this.setBonus = Lang.setBonus(5, false);
				this.manaCost -= 0.16f;
			}
			if (this.head == 9 && this.body == 9 && this.legs == 9)
			{
				this.setBonus = Lang.setBonus(6, false);
				this.meleeDamage += 0.17f;
			}
			if (this.head == 11 && this.body == 20 && this.legs == 19)
			{
				this.setBonus = Lang.setBonus(7, false);
				this.pickSpeed -= 0.3f;
			}
			if ((this.head == 78 || this.head == 79 || this.head == 80) && this.body == 51 && this.legs == 47)
			{
				this.setBonus = Lang.setBonus(27, false);
				this.AddBuff(60, 18000, true);
			}
			else if (this.crystalLeaf)
			{
				for (int n = 0; n < 22; n++)
				{
					if (this.buffType[n] == 60)
					{
						this.DelBuff(n);
					}
				}
			}
			if (this.head == 99 && this.body == 65 && this.legs == 54)
			{
				this.setBonus = Lang.setBonus(29, false);
				this.thorns = 1f;
				this.turtleThorns = true;
			}
			if (this.body == 17 && this.legs == 16)
			{
				if (this.head == 29)
				{
					this.setBonus = Lang.setBonus(8, false);
					this.manaCost -= 0.14f;
				}
				else if (this.head == 30)
				{
					this.setBonus = Lang.setBonus(9, false);
					this.meleeSpeed += 0.15f;
				}
				else if (this.head == 31)
				{
					this.setBonus = Lang.setBonus(10, false);
					this.ammoCost80 = true;
				}
			}
			if (this.body == 18 && this.legs == 17)
			{
				if (this.head == 32)
				{
					this.setBonus = Lang.setBonus(11, false);
					this.manaCost -= 0.17f;
				}
				else if (this.head == 33)
				{
					this.setBonus = Lang.setBonus(12, false);
					this.meleeCrit += 5;
				}
				else if (this.head == 34)
				{
					this.setBonus = Lang.setBonus(13, false);
					this.ammoCost80 = true;
				}
			}
			if (this.body == 19 && this.legs == 18)
			{
				if (this.head == 35)
				{
					this.setBonus = Lang.setBonus(14, false);
					this.manaCost -= 0.19f;
				}
				else if (this.head == 36)
				{
					this.setBonus = Lang.setBonus(15, false);
					this.meleeSpeed += 0.18f;
					this.moveSpeed += 0.18f;
				}
				else if (this.head == 37)
				{
					this.setBonus = Lang.setBonus(16, false);
					this.ammoCost75 = true;
				}
			}
			if (this.body == 54 && this.legs == 49 && (this.head == 83 || this.head == 84 || this.head == 85))
			{
				this.setBonus = Lang.setBonus(24, false);
				this.onHitRegen = true;
			}
			if (this.body == 55 && this.legs == 50 && (this.head == 86 || this.head == 87 || this.head == 88))
			{
				this.setBonus = Lang.setBonus(25, false);
				this.onHitPetal = true;
			}
			if (this.body == 56 && this.legs == 51 && (this.head == 89 || this.head == 90 || this.head == 91))
			{
				this.setBonus = Lang.setBonus(26, false);
				this.onHitDodge = true;
			}
			if (this.body == 24 && this.legs == 23)
			{
				if (this.head == 42)
				{
					this.setBonus = Lang.setBonus(17, false);
					this.manaCost -= 0.2f;
				}
				else if (this.head == 43)
				{
					this.setBonus = Lang.setBonus(18, false);
					this.meleeSpeed += 0.19f;
					this.moveSpeed += 0.19f;
				}
				else if (this.head == 41)
				{
					this.setBonus = Lang.setBonus(19, false);
					this.ammoCost75 = true;
				}
			}
			if (this.head == 82 && this.body == 53 && this.legs == 48)
			{
				this.setBonus = Lang.setBonus(23, false);
				this.maxMinions++;
			}
			if (this.head == 134 && this.body == 95 && this.legs == 79)
			{
				this.setBonus = Lang.setBonus(34, false);
				this.minionDamage += 0.25f;
			}
			if (this.head == 160 && this.body == 168 && this.legs == 103)
			{
				this.setBonus = Lang.setBonus(39, false);
				this.minionDamage += 0.1f;
				if (this.itemAnimation > 0 && this.inventory[this.selectedItem].type == 1121)
				{
					AchievementsHelper.HandleSpecialEvent(this, 3);
				}
			}
			if (this.head == 162 && this.body == 170 && this.legs == 105)
			{
				this.setBonus = Lang.setBonus(40, false);
				this.minionDamage += 0.12f;
			}
			if (this.head == 171 && this.body == 177 && this.legs == 112)
			{
				this.setSolar = true;
				this.setBonus = Lang.setBonus(43, false);
				this.solarCounter++;
				int num11 = 240;
				if (this.solarCounter >= num11)
				{
					if (this.solarShields > 0 && this.solarShields < 3)
					{
						for (int num12 = 0; num12 < 22; num12++)
						{
							if (this.buffType[num12] >= 170 && this.buffType[num12] <= 171)
							{
								this.DelBuff(num12);
							}
						}
					}
					if (this.solarShields < 3)
					{
						this.AddBuff(170 + this.solarShields, 5, false);
						for (int num13 = 0; num13 < 16; num13++)
						{
							Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 6, 0f, 0f, 100, default(Color), 1f)];
							dust.noGravity = true;
							dust.scale = 1.7f;
							dust.fadeIn = 0.5f;
							dust.velocity *= 5f;
							dust.shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
						}
						this.solarCounter = 0;
					}
					else
					{
						this.solarCounter = num11;
					}
				}
				for (int num14 = this.solarShields; num14 < 3; num14++)
				{
					this.solarShieldPos[num14] = Vector2.Zero;
				}
				for (int num15 = 0; num15 < this.solarShields; num15++)
				{
					this.solarShieldPos[num15] += this.solarShieldVel[num15];
					Vector2 value = ((float)this.miscCounter / 100f * 6.28318548f + (float)num15 * (6.28318548f / (float)this.solarShields)).ToRotationVector2() * 6f;
					value.X = (float)(this.direction * 20);
					this.solarShieldVel[num15] = (value - this.solarShieldPos[num15]) * 0.2f;
				}
				if (this.dashDelay >= 0)
				{
					this.solarDashing = false;
					this.solarDashConsumedFlare = false;
				}
				bool flag = this.solarDashing && this.dashDelay < 0;
				if (this.solarShields > 0 || flag)
				{
					this.dash = 3;
				}
			}
			else
			{
				this.solarCounter = 0;
			}
			if (this.head == 169 && this.body == 175 && this.legs == 110)
			{
				this.setVortex = true;
				this.setBonus = Lang.setBonus(44, false);
			}
			else
			{
				this.vortexStealthActive = false;
			}
			if (this.head == 170 && this.body == 176 && this.legs == 111)
			{
				if (this.nebulaCD > 0)
				{
					this.nebulaCD--;
				}
				this.setNebula = true;
				this.setBonus = Lang.setBonus(45, false);
			}
			if (this.head == 189 && this.body == 190 && this.legs == 130)
			{
				this.setBonus = Lang.setBonus(46, false);
				this.setStardust = true;
				if (this.whoAmI == Main.myPlayer)
				{
					if (this.FindBuffIndex(187) == -1)
					{
						this.AddBuff(187, 3600, true);
					}
					if (this.ownedProjectileCounts[623] < 1)
					{
						Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, -1f, 623, 0, 0f, Main.myPlayer, 0f, 0f);
					}
				}
			}
			else if (this.FindBuffIndex(187) != -1)
			{
				this.DelBuff(this.FindBuffIndex(187));
			}
			if (this.head == 200 && this.body == 198 && this.legs == 142)
			{
				this.setBonus = Lang.setBonus(47, false);
				this.setForbidden = true;
				this.UpdateForbiddenSetLock();
				Lighting.AddLight(base.Center, 0.8f, 0.7f, 0.2f);
			}
			if (this.head == 204 && this.body == 201 && this.legs == 145)
			{
				this.setBonus = Lang.setBonus(52, false);
				this.setSquireT2 = true;
				this.maxTurrets++;
			}
			if (this.head == 203 && this.body == 200 && this.legs == 144)
			{
				this.setBonus = Lang.setBonus(53, false);
				this.setApprenticeT2 = true;
				this.maxTurrets++;
			}
			if (this.head == 205 && this.body == 202 && (this.legs == 147 || this.legs == 146))
			{
				this.setBonus = Lang.setBonus(54, false);
				this.setHuntressT2 = true;
				this.maxTurrets++;
			}
			if (this.head == 206 && this.body == 203 && this.legs == 148)
			{
				this.setBonus = Lang.setBonus(55, false);
				this.setMonkT2 = true;
				this.maxTurrets++;
			}
			if (this.head == 210 && this.body == 204 && this.legs == 152)
			{
				this.setBonus = Lang.setBonus(48, false);
				this.setSquireT3 = true;
				this.setSquireT2 = true;
				this.maxTurrets++;
			}
			if (this.head == 211 && this.body == 205 && this.legs == 153)
			{
				this.setBonus = Lang.setBonus(49, false);
				this.setApprenticeT3 = true;
				this.setApprenticeT2 = true;
				this.maxTurrets++;
			}
			if (this.head == 212 && this.body == 206 && (this.legs == 154 || this.legs == 155))
			{
				this.setBonus = Lang.setBonus(50, false);
				this.setHuntressT3 = true;
				this.setHuntressT2 = true;
				this.maxTurrets++;
			}
			if (this.head == 213 && this.body == 207 && this.legs == 156)
			{
				this.setBonus = Lang.setBonus(51, false);
				this.setMonkT3 = true;
				this.setMonkT2 = true;
				this.maxTurrets++;
			}
			ItemLoader.UpdateArmorSet(this, this.armor[0], this.armor[1], this.armor[2]);
		}

		public void UpdateSocialShadow()
		{
			for (int i = 2; i > 0; i--)
			{
				this.shadowDirection[i] = this.shadowDirection[i - 1];
			}
			this.shadowDirection[0] = this.direction;
			this.shadowCount++;
			if (this.shadowCount == 1)
			{
				this.shadowPos[2] = this.shadowPos[1];
				this.shadowRotation[2] = this.shadowRotation[1];
				this.shadowOrigin[2] = this.shadowOrigin[1];
				return;
			}
			if (this.shadowCount == 2)
			{
				this.shadowPos[1] = this.shadowPos[0];
				this.shadowRotation[1] = this.shadowRotation[0];
				this.shadowOrigin[1] = this.shadowOrigin[0];
				return;
			}
			if (this.shadowCount >= 3)
			{
				this.shadowCount = 0;
				this.shadowPos[0] = this.position;
				Vector2[] expr_129_cp_0 = this.shadowPos;
				int expr_129_cp_1 = 0;
				expr_129_cp_0[expr_129_cp_1].Y = expr_129_cp_0[expr_129_cp_1].Y + this.gfxOffY;
				this.shadowRotation[0] = this.fullRotation;
				this.shadowOrigin[0] = this.fullRotationOrigin;
			}
		}

		public void UpdateTeleportVisuals()
		{
			if (this.teleportTime > 0f)
			{
				if (this.teleportStyle == 0)
				{
					if ((float)Main.rand.Next(100) <= 100f * this.teleportTime * 2f)
					{
						int num = Dust.NewDust(new Vector2((float)this.getRect().X, (float)this.getRect().Y), this.getRect().Width, this.getRect().Height, 159, 0f, 0f, 0, default(Color), 1f);
						Main.dust[num].scale = this.teleportTime * 1.5f;
						Main.dust[num].noGravity = true;
						Main.dust[num].velocity *= 1.1f;
					}
				}
				else if (this.teleportStyle == 1)
				{
					if ((float)Main.rand.Next(100) <= 100f * this.teleportTime)
					{
						int num2 = Dust.NewDust(new Vector2((float)this.getRect().X, (float)this.getRect().Y), this.getRect().Width, this.getRect().Height, 164, 0f, 0f, 0, default(Color), 1f);
						Main.dust[num2].scale = this.teleportTime * 1.5f;
						Main.dust[num2].noGravity = true;
						Main.dust[num2].velocity *= 1.1f;
					}
				}
				else if (this.teleportStyle == 2)
				{
					this.teleportTime = 0.005f;
				}
				else if (this.teleportStyle == 3)
				{
					this.teleportTime = 0.005f;
				}
				else if (this.teleportStyle == 4)
				{
					this.teleportTime -= 0.02f;
					if ((float)Main.rand.Next(100) <= 100f * this.teleportTime)
					{
						Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 263, 0f, 0f, 0, default(Color), 1f)];
						dust.color = PortalHelper.GetPortalColor(this.lastPortalColorIndex);
						dust.noLight = true;
						dust.noGravity = true;
						dust.scale = 1.2f;
						dust.fadeIn = 0.4f;
					}
				}
				this.teleportTime -= 0.005f;
			}
		}

		public void UpdateBiomes()
		{
			Point point = base.Center.ToTileCoordinates();
			this.ZoneDungeon = false;
			if (Main.dungeonTiles >= 250 && (double)base.Center.Y > Main.worldSurface * 16.0)
			{
				int num = (int)base.Center.X / 16;
				int num2 = (int)base.Center.Y / 16;
				if (Main.wallDungeon[(int)Main.tile[num, num2].wall])
				{
					this.ZoneDungeon = true;
				}
			}
			Tile tileSafely = Framing.GetTileSafely(base.Center);
			if (tileSafely != null)
			{
				this.behindBackWall = (tileSafely.wall > 0);
			}
			if (Main.sandTiles > 1000 && base.Center.Y > 3200f)
			{
				if (WallID.Sets.Conversion.Sandstone[(int)tileSafely.wall] || WallID.Sets.Conversion.HardenedSand[(int)tileSafely.wall])
				{
					this.ZoneUndergroundDesert = true;
				}
			}
			else
			{
				this.ZoneUndergroundDesert = false;
			}
			this.ZoneCorrupt = (Main.evilTiles >= 200);
			this.ZoneHoly = (Main.holyTiles >= 100);
			this.ZoneMeteor = (Main.meteorTiles >= 50);
			this.ZoneJungle = (Main.jungleTiles >= 80);
			this.ZoneSnow = (Main.snowTiles >= 300);
			this.ZoneCrimson = (Main.bloodTiles >= 200);
			this.ZoneWaterCandle = (Main.waterCandles > 0);
			this.ZonePeaceCandle = (Main.peaceCandles > 0);
			this.ZoneDesert = (Main.sandTiles > 1000);
			this.ZoneGlowshroom = (Main.shroomTiles > 100);
			this.ZoneUnderworldHeight = (point.Y > Main.maxTilesY - 200);
			this.ZoneRockLayerHeight = (point.Y <= Main.maxTilesY - 200 && (double)point.Y > Main.rockLayer);
			this.ZoneDirtLayerHeight = ((double)point.Y <= Main.rockLayer && (double)point.Y > Main.worldSurface);
			this.ZoneOverworldHeight = ((double)point.Y <= Main.worldSurface && (double)point.Y > Main.worldSurface * 0.34999999403953552);
			this.ZoneSkyHeight = ((double)point.Y <= Main.worldSurface * 0.34999999403953552);
			this.ZoneBeach = (this.ZoneOverworldHeight && (point.X < 380 || point.X > Main.maxTilesX - 380));
			this.ZoneRain = (Main.raining && (double)point.Y <= Main.worldSurface);
			this.ZoneSandstorm = ((double)point.Y <= Main.worldSurface && this.ZoneDesert && !this.ZoneBeach && Sandstorm.Happening);
			this.ZoneTowerSolar = (this.ZoneTowerVortex = (this.ZoneTowerNebula = (this.ZoneTowerStardust = false)));
			this.ZoneOldOneArmy = false;
			Vector2 value = Vector2.Zero;
			Vector2 value2 = Vector2.Zero;
			Vector2 value3 = Vector2.Zero;
			Vector2 value4 = Vector2.Zero;
			Vector2 arg_32B_0 = Vector2.Zero;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active)
				{
					if (Main.npc[i].type == 493)
					{
						if (base.Distance(Main.npc[i].Center) <= 4000f)
						{
							this.ZoneTowerStardust = true;
							value4 = Main.npc[i].Center;
						}
					}
					else if (Main.npc[i].type == 507)
					{
						if (base.Distance(Main.npc[i].Center) <= 4000f)
						{
							this.ZoneTowerNebula = true;
							value3 = Main.npc[i].Center;
						}
					}
					else if (Main.npc[i].type == 422)
					{
						if (base.Distance(Main.npc[i].Center) <= 4000f)
						{
							this.ZoneTowerVortex = true;
							value2 = Main.npc[i].Center;
						}
					}
					else if (Main.npc[i].type == 517)
					{
						if (base.Distance(Main.npc[i].Center) <= 4000f)
						{
							this.ZoneTowerSolar = true;
							value = Main.npc[i].Center;
						}
					}
					else if (Main.npc[i].type == 549 && base.Distance(Main.npc[i].Center) <= 4000f)
					{
						this.ZoneOldOneArmy = true;
						value = Main.npc[i].Center;
					}
				}
			}
			bool flag = this.ZoneRain && this.ZoneSnow;
			bool flag2 = point.Y > Main.maxTilesY - 320;
			bool flag3 = this.ZoneOverworldHeight && (point.X < 380 || point.X > Main.maxTilesX - 380);
			// TODO, are these flags a problem?
			PlayerHooks.UpdateBiomes(this);
			this.ManageSpecialBiomeVisuals("Stardust", this.ZoneTowerStardust, value4 - new Vector2(0f, 10f));
			this.ManageSpecialBiomeVisuals("Nebula", this.ZoneTowerNebula, value3 - new Vector2(0f, 10f));
			this.ManageSpecialBiomeVisuals("Vortex", this.ZoneTowerVortex, value2 - new Vector2(0f, 10f));
			this.ManageSpecialBiomeVisuals("Solar", this.ZoneTowerSolar, value - new Vector2(0f, 10f));
			this.ManageSpecialBiomeVisuals("MoonLord", NPC.AnyNPCs(398), default(Vector2));
			this.ManageSpecialBiomeVisuals("BloodMoon", Main.bloodMoon, default(Vector2));
			this.ManageSpecialBiomeVisuals("Blizzard", Main.UseStormEffects && flag, default(Vector2));
			this.ManageSpecialBiomeVisuals("HeatDistortion", Main.UseHeatDistortion && (flag2 || ((double)point.Y < Main.worldSurface && this.ZoneDesert && !flag3 && !Main.raining && !Filters.Scene["Sandstorm"].IsActive())), default(Vector2));
			if (!Filters.Scene["WaterDistortion"].IsActive() && Main.WaveQuality > 0)
			{
				Filters.Scene.Activate("WaterDistortion", default(Vector2), new object[0]);
			}
			else if (Filters.Scene["WaterDistortion"].IsActive() && Main.WaveQuality == 0)
			{
				Filters.Scene.Deactivate("WaterDistortion", new object[0]);
			}
			if (Filters.Scene["WaterDistortion"].IsActive())
			{
				float num3 = (float)Main.maxTilesX * 0.5f - Math.Abs((float)point.X - (float)Main.maxTilesX * 0.5f);
				float num4 = 1f;
				float num5 = Math.Abs(Main.windSpeed);
				num4 += num5 * 1f;
				float num6 = MathHelper.Clamp(Main.maxRaining, 0f, 1f);
				num4 += num6 * 1.5f;
				float num7 = -(MathHelper.Clamp((num3 - 380f) / 100f, 0f, 1f) * 0.5f - 0.25f);
				num4 += num7;
				float num8 = 1f - MathHelper.Clamp(3f * ((float)((double)point.Y - Main.worldSurface) / (float)(Main.rockLayer - Main.worldSurface)), 0f, 1f);
				num4 *= num8;
				float num9 = 0.9f - MathHelper.Clamp((float)(Main.maxTilesY - point.Y - 200) / 300f, 0f, 1f) * 0.9f;
				num4 += num9;
				num4 += (1f - num8) * 0.75f;
				num4 = MathHelper.Clamp(num4, 0f, 2.5f);
				Filters.Scene["WaterDistortion"].GetShader().UseIntensity(num4);
			}
			if (flag2)
			{
				float num10 = (float)(point.Y - (Main.maxTilesY - 320)) / 120f;
				num10 = Math.Min(1f, num10) * 2f;
				Filters.Scene["HeatDistortion"].GetShader().UseIntensity(num10);
			}
			this._shaderObstructionInternalValue = Utils.Clamp<float>(this._shaderObstructionInternalValue + (float)this.behindBackWall.ToDirectionInt() * -0.005f, -0.1f, 1.1f);
			this._stormShaderObstruction = Utils.Clamp<float>(this._shaderObstructionInternalValue, 0f, 1f);
			if (Filters.Scene["Sandstorm"].IsActive())
			{
				Filters.Scene["Sandstorm"].GetShader().UseIntensity(this._stormShaderObstruction * 0.4f * Math.Min(1f, Sandstorm.Severity));
				Filters.Scene["Sandstorm"].GetShader().UseOpacity(Math.Min(1f, Sandstorm.Severity * 1.5f) * this._stormShaderObstruction);
				((SimpleOverlay)Overlays.Scene["Sandstorm"]).GetShader().UseOpacity(Math.Min(1f, Sandstorm.Severity * 1.5f) * (1f - this._stormShaderObstruction));
			}
			else if (this.ZoneDesert && !flag3 && !Main.raining && !flag2)
			{
				Vector3 vector = Main.tileColor.ToVector3();
				float num11 = (vector.X + vector.Y + vector.Z) / 3f;
				float num12 = this._stormShaderObstruction * 4f * Math.Max(0f, 0.5f - Main.cloudAlpha) * num11;
				Filters.Scene["HeatDistortion"].GetShader().UseIntensity(num12);
				if (num12 <= 0f)
				{
					Filters.Scene["HeatDistortion"].IsHidden = true;
				}
				else
				{
					Filters.Scene["HeatDistortion"].IsHidden = false;
				}
			}
			if (flag)
			{
				ActiveSound activeSound = Main.GetActiveSound(Player._strongBlizzardSound);
				ActiveSound activeSound2 = Main.GetActiveSound(Player._insideBlizzardSound);
				if (activeSound == null)
				{
					Player._strongBlizzardSound = Main.PlayTrackedSound(SoundID.BlizzardStrongLoop);
				}
				if (activeSound2 == null)
				{
					Player._insideBlizzardSound = Main.PlayTrackedSound(SoundID.BlizzardInsideBuildingLoop);
				}
				activeSound = Main.GetActiveSound(Player._strongBlizzardSound);
				activeSound2 = Main.GetActiveSound(Player._insideBlizzardSound);
				float num13 = Math.Min(1f, Main.cloudAlpha * 2f) * this._stormShaderObstruction;
				Filters.Scene["Blizzard"].GetShader().UseIntensity(this._stormShaderObstruction * 0.4f * Math.Min(1f, Main.cloudAlpha * 2f) * 0.9f + 0.1f);
				Filters.Scene["Blizzard"].GetShader().UseOpacity(num13);
				((SimpleOverlay)Overlays.Scene["Blizzard"]).GetShader().UseOpacity(1f - num13);
			}
			if (flag)
			{
				Player._blizzardSoundVolume = Math.Min(Player._blizzardSoundVolume + 0.01f, 1f);
			}
			else
			{
				Player._blizzardSoundVolume = Math.Max(Player._blizzardSoundVolume - 0.01f, 0f);
			}
			float num14 = Math.Min(1f, Main.cloudAlpha * 2f) * this._stormShaderObstruction;
			ActiveSound activeSound3 = Main.GetActiveSound(Player._strongBlizzardSound);
			ActiveSound activeSound4 = Main.GetActiveSound(Player._insideBlizzardSound);
			if (Player._blizzardSoundVolume > 0f)
			{
				if (activeSound3 == null)
				{
					Player._strongBlizzardSound = Main.PlayTrackedSound(SoundID.BlizzardStrongLoop);
					activeSound3 = Main.GetActiveSound(Player._strongBlizzardSound);
				}
				activeSound3.Volume = num14 * Player._blizzardSoundVolume;
				if (activeSound4 == null)
				{
					Player._insideBlizzardSound = Main.PlayTrackedSound(SoundID.BlizzardInsideBuildingLoop);
					activeSound4 = Main.GetActiveSound(Player._insideBlizzardSound);
				}
				activeSound4.Volume = (1f - num14) * Player._blizzardSoundVolume;
			}
			else
			{
				if (activeSound3 != null)
				{
					activeSound3.Volume = 0f;
				}
				else
				{
					Player._strongBlizzardSound = SlotId.Invalid;
				}
				if (activeSound4 != null)
				{
					activeSound4.Volume = 0f;
				}
				else
				{
					Player._insideBlizzardSound = SlotId.Invalid;
				}
			}
			PlayerHooks.UpdateBiomeVisuals(this);
			if (!this.dead)
			{
				Point point2 = base.Center.ToTileCoordinates();
				if (WorldGen.InWorld(point2.X, point2.Y, 1))
				{
					int num15 = 0;
					if (Main.tile[point2.X, point2.Y] != null)
					{
						num15 = (int)Main.tile[point2.X, point2.Y].wall;
					}
					int num16 = num15;
					if (num16 != 62)
					{
						if (num16 == 86)
						{
							AchievementsHelper.HandleSpecialEvent(this, 12);
						}
					}
					else
					{
						AchievementsHelper.HandleSpecialEvent(this, 13);
					}
				}
				if (this._funkytownCheckCD > 0)
				{
					this._funkytownCheckCD--;
				}
				if (this.position.Y / 16f > (float)(Main.maxTilesY - 200))
				{
					AchievementsHelper.HandleSpecialEvent(this, 14);
					return;
				}
				if (this._funkytownCheckCD == 0 && (double)(this.position.Y / 16f) < Main.worldSurface && Main.shroomTiles >= 200)
				{
					AchievementsHelper.HandleSpecialEvent(this, 15);
					return;
				}
			}
			else
			{
				this._funkytownCheckCD = 100;
			}
		}

		public void ManageSpecialBiomeVisuals(string biomeName, bool inZone, Vector2 activationSource = default(Vector2))
		{
			if (SkyManager.Instance[biomeName] != null && inZone != SkyManager.Instance[biomeName].IsActive())
			{
				if (inZone)
				{
					SkyManager.Instance.Activate(biomeName, activationSource, new object[0]);
				}
				else
				{
					SkyManager.Instance.Deactivate(biomeName, new object[0]);
				}
			}
			if (inZone != Filters.Scene[biomeName].IsActive())
			{
				if (inZone)
				{
					Filters.Scene.Activate(biomeName, activationSource, new object[0]);
				}
				else
				{
					Filters.Scene[biomeName].Deactivate(new object[0]);
				}
			}
			else if (inZone)
			{
				Filters.Scene[biomeName].GetShader().UseTargetPosition(activationSource);
			}
			if (Overlays.Scene[biomeName] != null && inZone != (Overlays.Scene[biomeName].Mode != OverlayMode.Inactive))
			{
				if (inZone)
				{
					Overlays.Scene.Activate(biomeName, activationSource, new object[0]);
					return;
				}
				Overlays.Scene[biomeName].Deactivate(new object[0]);
			}
		}

		public void UpdateDead()
		{
			this._portalPhysicsTime = 0;
			this.MountFishronSpecialCounter = 0f;
			this.gem = -1;
			this.ownedLargeGems = 0;
			this.slippy = false;
			this.slippy2 = false;
			this.powerrun = false;
			this.wings = 0;
			this.wingsLogic = 0;
			this.face = (this.neck = (this.back = (this.front = (this.handoff = (this.handon = (this.shoe = (this.waist = (this.balloon = (this.shield = 0)))))))));
			this.poisoned = false;
			this.venom = false;
			this.onFire = false;
			this.dripping = false;
			this.drippingSlime = false;
			this.burned = false;
			this.suffocating = false;
			this.onFire2 = false;
			this.onFrostBurn = false;
			this.blind = false;
			this.blackout = false;
			this.loveStruck = false;
			this.dryadWard = false;
			this.stinky = false;
			this.resistCold = false;
			this.electrified = false;
			this.moonLeech = false;
			this.headcovered = false;
			this.vortexDebuff = false;
			this.windPushed = false;
			this.setForbidden = false;
			this.setMonkT3 = false;
			this.setHuntressT3 = false;
			this.setApprenticeT3 = false;
			this.setSquireT3 = false;
			this.setForbiddenCooldownLocked = false;
			this.setSolar = (this.setVortex = (this.setNebula = (this.setStardust = false)));
			this.nebulaLevelDamage = (this.nebulaLevelLife = (this.nebulaLevelMana = 0));
			this.trapDebuffSource = false;
			this.yoraiz0rEye = 0;
			this.yoraiz0rDarkness = false;
			PlayerHooks.UpdateDead(this);
			this.gravDir = 1f;
			for (int i = 0; i < 22; i++)
			{
				if (this.buffType[i] <= 0 || !Main.persistentBuff[this.buffType[i]])
				{
					this.buffTime[i] = 0;
					this.buffType[i] = 0;
				}
			}
			if (this.whoAmI == Main.myPlayer)
			{
				Main.npcChatText = "";
				Main.editSign = false;
			}
			this.grappling[0] = -1;
			this.grappling[1] = -1;
			this.grappling[2] = -1;
			this.sign = -1;
			this.talkNPC = -1;
			Main.npcChatCornerItem = 0;
			this.statLife = 0;
			this.channel = false;
			this.potionDelay = 0;
			this.chest = -1;
			this.changeItem = -1;
			this.itemAnimation = 0;
			this.immuneAlpha += 2;
			if (this.immuneAlpha > 255)
			{
				this.immuneAlpha = 255;
			}
			this.headPosition += this.headVelocity;
			this.bodyPosition += this.bodyVelocity;
			this.legPosition += this.legVelocity;
			this.headRotation += this.headVelocity.X * 0.1f;
			this.bodyRotation += this.bodyVelocity.X * 0.1f;
			this.legRotation += this.legVelocity.X * 0.1f;
			this.headVelocity.Y = this.headVelocity.Y + 0.1f;
			this.bodyVelocity.Y = this.bodyVelocity.Y + 0.1f;
			this.legVelocity.Y = this.legVelocity.Y + 0.1f;
			this.headVelocity.X = this.headVelocity.X * 0.99f;
			this.bodyVelocity.X = this.bodyVelocity.X * 0.99f;
			this.legVelocity.X = this.legVelocity.X * 0.99f;
			for (int j = 0; j < this.npcTypeNoAggro.Length; j++)
			{
				this.npcTypeNoAggro[j] = false;
			}
			if (this.difficulty == 2)
			{
				if (this.respawnTimer > 0)
				{
					this.respawnTimer--;
					return;
				}
				if (this.whoAmI == Main.myPlayer || Main.netMode == 2)
				{
					this.ghost = true;
					return;
				}
			}
			else
			{
				this.respawnTimer--;
				if (this.respawnTimer <= 0 && Main.myPlayer == this.whoAmI)
				{
					if (Main.mouseItem.type > 0)
					{
						Main.playerInventory = true;
					}
					this.Spawn();
				}
			}
		}

		public void UpdatePet(int i)
		{
			if (i != Main.myPlayer)
			{
				return;
			}
			if (this.miscEquips[0].buffType < 1 || this.miscEquips[0].stack < 1)
			{
				return;
			}
			int num = this.miscEquips[0].buffType;
			if (!Main.vanityPet[num] && !Main.lightPet[num])
			{
				return;
			}
			if (this.hideMisc[0])
			{
				return;
			}
			if (this.miscEquips[0].type == 603 && !Main.cEd)
			{
				return;
			}
			int num2 = this.FindBuffIndex(num);
			if (num2 == -1)
			{
				this.AddBuff(num, 3600, true);
				Main.PlaySound(this.miscEquips[0].UseSound, this.position);
			}
		}

		public void UpdatePetLight(int i)
		{
			if (i != Main.myPlayer)
			{
				return;
			}
			if (this.miscEquips[1].buffType < 1 || this.miscEquips[1].stack < 1)
			{
				return;
			}
			int num = this.miscEquips[1].buffType;
			if (!Main.vanityPet[num] && !Main.lightPet[num])
			{
				return;
			}
			if (this.hideMisc[1])
			{
				return;
			}
			if (this.miscEquips[1].type == 603 && !Main.cEd)
			{
				return;
			}
			int num2 = this.FindBuffIndex(num);
			if (num == 27 && num2 == -1)
			{
				num2 = this.FindBuffIndex(102);
			}
			if (num == 27 && num2 == -1)
			{
				num2 = this.FindBuffIndex(101);
			}
			if (num2 == -1)
			{
				if (num == 27)
				{
					num = Utils.SelectRandom<int>(Main.rand, new int[]
						{
							27,
							102,
							101
						});
				}
				this.AddBuff(num, 3600, true);
				Main.PlaySound(this.miscEquips[1].UseSound, this.position);
			}
		}

		public void TogglePet()
		{
			this.hideMisc[0] = !this.hideMisc[0];
			if (this.hideMisc[0])
			{
				this.ClearBuff(this.miscEquips[0].buffType);
			}
		}

		public void ToggleLight()
		{
			this.hideMisc[1] = !this.hideMisc[1];
			if (this.hideMisc[1])
			{
				this.ClearBuff(this.miscEquips[1].buffType);
				if (this.miscEquips[1].buffType == 27)
				{
					this.ClearBuff(102);
					this.ClearBuff(101);
				}
			}
		}

		public void SmartCursorLookup()
		{
			if (this.whoAmI != Main.myPlayer)
			{
				return;
			}
			Main.SmartCursorShowing = false;
			if (!Main.SmartCursorEnabled)
			{
				return;
			}
			Item item = this.inventory[this.selectedItem];
			Vector2 vector = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY);
			if (this.gravDir == -1f)
			{
				vector.Y = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY;
			}
			int num = Player.tileTargetX;
			int num2 = Player.tileTargetY;
			if (num < 10)
			{
				num = 10;
			}
			if (num > Main.maxTilesX - 10)
			{
				num = Main.maxTilesX - 10;
			}
			if (num2 < 10)
			{
				num2 = 10;
			}
			if (num2 > Main.maxTilesY - 10)
			{
				num2 = Main.maxTilesY - 10;
			}
			bool flag = false;
			if (Main.tile[num, num2] == null)
			{
				return;
			}
			if (Main.tile[num, num2].active())
			{
				ushort type = Main.tile[num, num2].type;
				if (type <= 139)
				{
					if (type <= 79)
					{
						if (type <= 29)
						{
							if (type <= 13)
							{
								if (type != 4)
								{
									switch (type)
									{
										case 10:
										case 11:
										case 13:
											break;
										case 12:
											goto IL_3BC;
										default:
											goto IL_3BC;
									}
								}
							}
							else if (type != 21 && type != 29)
							{
								goto IL_3BC;
							}
						}
						else if (type <= 50)
						{
							if (type != 33)
							{
								switch (type)
								{
									case 49:
									case 50:
										break;
									default:
										goto IL_3BC;
								}
							}
						}
						else if (type != 55 && type != 79)
						{
							goto IL_3BC;
						}
					}
					else if (type <= 104)
					{
						if (type <= 88)
						{
							if (type != 85 && type != 88)
							{
								goto IL_3BC;
							}
						}
						else if (type != 97 && type != 104)
						{
							goto IL_3BC;
						}
					}
					else if (type <= 132)
					{
						if (type != 125 && type != 132)
						{
							goto IL_3BC;
						}
					}
					else if (type != 136 && type != 139)
					{
						goto IL_3BC;
					}
				}
				else if (type <= 287)
				{
					if (type <= 212)
					{
						if (type <= 174)
						{
							if (type != 144 && type != 174)
							{
								goto IL_3BC;
							}
						}
						else
						{
							switch (type)
							{
								case 207:
								case 209:
									break;
								case 208:
									goto IL_3BC;
								default:
									if (type != 212)
									{
										goto IL_3BC;
									}
									break;
							}
						}
					}
					else if (type <= 219)
					{
						if (type != 216 && type != 219)
						{
							goto IL_3BC;
						}
					}
					else if (type != 237 && type != 287)
					{
						goto IL_3BC;
					}
				}
				else if (type <= 389)
				{
					if (type <= 338)
					{
						if (type != 314)
						{
							switch (type)
							{
								case 334:
								case 335:
								case 338:
									break;
								case 336:
								case 337:
									goto IL_3BC;
								default:
									goto IL_3BC;
							}
						}
						else
						{
							if (this.gravDir == 1f)
							{
								flag = true;
								goto IL_3BC;
							}
							goto IL_3BC;
						}
					}
					else if (type != 354)
					{
						switch (type)
						{
							case 386:
							case 387:
							case 388:
							case 389:
								break;
							default:
								goto IL_3BC;
						}
					}
				}
				else if (type <= 425)
				{
					if (type != 411 && type != 425)
					{
						goto IL_3BC;
					}
				}
				else if (type != 441 && type != 463)
				{
					goto IL_3BC;
				}
				flag = true;
			}
			IL_3BC:
			TileLoader.DisableSmartCursor(Main.tile[num, num2], ref flag);
			int tileBoost = item.tileBoost;
			int num3 = 0;
			if (item.type == 1071 || item.type == 1543 || item.type == 1072 || item.type == 1544)
			{
				for (int i = 0; i < 58; i++)
				{
					if (this.inventory[i].stack > 0 && this.inventory[i].paint > 0)
					{
						num3 = (int)this.inventory[i].paint;
						break;
					}
				}
			}
			int num4 = (int)(this.position.X / 16f) - Player.tileRangeX - tileBoost + 1;
			int num5 = (int)((this.position.X + (float)this.width) / 16f) + Player.tileRangeX + tileBoost - 1;
			int num6 = (int)(this.position.Y / 16f) - Player.tileRangeY - tileBoost + 1;
			int num7 = (int)((this.position.Y + (float)this.height) / 16f) + Player.tileRangeY + tileBoost - 2;
			num4 = Utils.Clamp<int>(num4, 10, Main.maxTilesX - 10);
			num5 = Utils.Clamp<int>(num5, 10, Main.maxTilesX - 10);
			num6 = Utils.Clamp<int>(num6, 10, Main.maxTilesY - 10);
			num7 = Utils.Clamp<int>(num7, 10, Main.maxTilesY - 10);
			if (flag && num >= num4 && num <= num5 && num2 >= num6 && num2 <= num7)
			{
				return;
			}
			List<Tuple<int, int>> list = new List<Tuple<int, int>>();
			for (int j = 0; j < this.grapCount; j++)
			{
				Projectile projectile = Main.projectile[this.grappling[j]];
				int item2 = (int)projectile.Center.X / 16;
				int item3 = (int)projectile.Center.Y / 16;
				list.Add(new Tuple<int, int>(item2, item3));
			}
			int num8 = -1;
			int num9 = -1;
			if (!Player.SmartCursorSettings.SmartAxeAfterPickaxe)
			{
				Player.SmartCursor_Axe(item, ref vector, num4, num5, num6, num7, ref num8, ref num9);
			}
			if (item.pick > 0 && num8 == -1 && num9 == -1)
			{
				if (PlayerInput.UsingGamepad)
				{
					Vector2 navigatorDirections = PlayerInput.Triggers.Current.GetNavigatorDirections();
					Vector2 gamepadThumbstickLeft = PlayerInput.GamepadThumbstickLeft;
					Vector2 gamepadThumbstickRight = PlayerInput.GamepadThumbstickRight;
					if (navigatorDirections == Vector2.Zero && gamepadThumbstickLeft.Length() < 0.05f && gamepadThumbstickRight.Length() < 0.05f)
					{
						vector = base.Center + new Vector2((float)(this.direction * 1000), 0f);
					}
				}
				Vector2 vector2 = vector - base.Center;
				int num10 = Math.Sign(vector2.X);
				int num11 = Math.Sign(vector2.Y);
				if (Math.Abs(vector2.X) > Math.Abs(vector2.Y) * 3f)
				{
					num11 = 0;
					vector.Y = base.Center.Y;
				}
				if (Math.Abs(vector2.Y) > Math.Abs(vector2.X) * 3f)
				{
					num10 = 0;
					vector.X = base.Center.X;
				}
				int arg_6E5_0 = (int)base.Center.X / 16;
				int arg_6F5_0 = (int)base.Center.Y / 16;
				List<Tuple<int, int>> list2 = new List<Tuple<int, int>>();
				List<Tuple<int, int>> list3 = new List<Tuple<int, int>>();
				int num12 = 1;
				if (num11 == -1 && num10 != 0)
				{
					num12 = -1;
				}
				int num13 = (int)((this.position.X + (float)(this.width / 2) + (float)((this.width / 2 - 1) * num10)) / 16f);
				int num14 = (int)(((double)this.position.Y + 0.1) / 16.0);
				if (num12 == -1)
				{
					num14 = (int)((this.position.Y + (float)this.height - 1f) / 16f);
				}
				int num15 = this.width / 16 + ((this.width % 16 == 0) ? 0 : 1);
				int num16 = this.height / 16 + ((this.height % 16 == 0) ? 0 : 1);
				if (num10 != 0)
				{
					for (int k = 0; k < num16; k++)
					{
						if (Main.tile[num13, num14 + k * num12] == null)
						{
							return;
						}
						list2.Add(new Tuple<int, int>(num13, num14 + k * num12));
					}
				}
				if (num11 != 0)
				{
					for (int l = 0; l < num15; l++)
					{
						if (Main.tile[(int)(this.position.X / 16f) + l, num14] == null)
						{
							return;
						}
						list2.Add(new Tuple<int, int>((int)(this.position.X / 16f) + l, num14));
					}
				}
				int num17 = (int)((vector.X + (float)((this.width / 2 - 1) * num10)) / 16f);
				int num18 = (int)(((double)vector.Y + 0.1 - (double)(this.height / 2 + 1)) / 16.0);
				if (num12 == -1)
				{
					num18 = (int)((vector.Y + (float)(this.height / 2) - 1f) / 16f);
				}
				if (this.gravDir == -1f && num11 == 0)
				{
					num18++;
				}
				if (num18 < 10)
				{
					num18 = 10;
				}
				if (num18 > Main.maxTilesY - 10)
				{
					num18 = Main.maxTilesY - 10;
				}
				int num19 = this.width / 16 + ((this.width % 16 == 0) ? 0 : 1);
				int num20 = this.height / 16 + ((this.height % 16 == 0) ? 0 : 1);
				if (num10 != 0)
				{
					for (int m = 0; m < num20; m++)
					{
						if (Main.tile[num17, num18 + m * num12] == null)
						{
							return;
						}
						list3.Add(new Tuple<int, int>(num17, num18 + m * num12));
					}
				}
				if (num11 != 0)
				{
					for (int n = 0; n < num19; n++)
					{
						if (Main.tile[(int)((vector.X - (float)(this.width / 2)) / 16f) + n, num18] == null)
						{
							return;
						}
						list3.Add(new Tuple<int, int>((int)((vector.X - (float)(this.width / 2)) / 16f) + n, num18));
					}
				}
				List<Tuple<int, int>> list4 = new List<Tuple<int, int>>();
				while (list2.Count > 0)
				{
					Tuple<int, int> tuple = list2[0];
					Tuple<int, int> tuple2 = list3[0];
					Tuple<int, int> tuple3;
					if (!Collision.TupleHitLine(tuple.Item1, tuple.Item2, tuple2.Item1, tuple2.Item2, num10 * (int)this.gravDir, -num11 * (int)this.gravDir, list, out tuple3))
					{
						list2.Remove(tuple);
						list3.Remove(tuple2);
					}
					else
					{
						if (tuple3.Item1 != tuple2.Item1 || tuple3.Item2 != tuple2.Item2)
						{
							list4.Add(tuple3);
						}
						Tile tile = Main.tile[tuple3.Item1, tuple3.Item2];
						if (!tile.inActive() && tile.active() && Main.tileSolid[(int)tile.type] && !Main.tileSolidTop[(int)tile.type] && !list.Contains(tuple3))
						{
							list4.Add(tuple3);
						}
						list2.Remove(tuple);
						list3.Remove(tuple2);
					}
				}
				List<Tuple<int, int>> list5 = new List<Tuple<int, int>>();
				for (int num21 = 0; num21 < list4.Count; num21++)
				{
					if (!WorldGen.CanKillTile(list4[num21].Item1, list4[num21].Item2))
					{
						list5.Add(list4[num21]);
					}
				}
				for (int num22 = 0; num22 < list5.Count; num22++)
				{
					list4.Remove(list5[num22]);
				}
				list5.Clear();
				if (list4.Count > 0)
				{
					float num23 = -1f;
					Tuple<int, int> tuple4 = list4[0];
					for (int num24 = 0; num24 < list4.Count; num24++)
					{
						float num25 = Vector2.Distance(new Vector2((float)list4[num24].Item1, (float)list4[num24].Item2) * 16f + Vector2.One * 8f, base.Center);
						if (num23 == -1f || num25 < num23)
						{
							num23 = num25;
							tuple4 = list4[num24];
						}
					}
					if (Collision.InTileBounds(tuple4.Item1, tuple4.Item2, num4, num6, num5, num7))
					{
						num8 = tuple4.Item1;
						num9 = tuple4.Item2;
					}
				}
				list2.Clear();
				list3.Clear();
				list4.Clear();
			}
			if (Player.SmartCursorSettings.SmartAxeAfterPickaxe)
			{
				Player.SmartCursor_Axe(item, ref vector, num4, num5, num6, num7, ref num8, ref num9);
			}
			if ((item.type == 509 || item.type == 850 || item.type == 851 || item.type == 3612) && num8 == -1 && num9 == -1)
			{
				List<Tuple<int, int>> list6 = new List<Tuple<int, int>>();
				int num26 = 0;
				if (item.type == 509)
				{
					num26 = 1;
				}
				if (item.type == 850)
				{
					num26 = 2;
				}
				if (item.type == 851)
				{
					num26 = 3;
				}
				if (item.type == 3612)
				{
					num26 = 4;
				}
				bool flag2 = false;
				if (Main.tile[num, num2].wire() && num26 == 1)
				{
					flag2 = true;
				}
				if (Main.tile[num, num2].wire2() && num26 == 2)
				{
					flag2 = true;
				}
				if (Main.tile[num, num2].wire3() && num26 == 3)
				{
					flag2 = true;
				}
				if (Main.tile[num, num2].wire4() && num26 == 4)
				{
					flag2 = true;
				}
				if (!flag2)
				{
					for (int num27 = num4; num27 <= num5; num27++)
					{
						for (int num28 = num6; num28 <= num7; num28++)
						{
							Tile tile2 = Main.tile[num27, num28];
							if ((tile2.wire() && num26 == 1) || (tile2.wire2() && num26 == 2) || (tile2.wire3() && num26 == 3) || (tile2.wire4() && num26 == 4))
							{
								if (num26 == 1)
								{
									if (!Main.tile[num27 - 1, num28].wire())
									{
										list6.Add(new Tuple<int, int>(num27 - 1, num28));
									}
									if (!Main.tile[num27 + 1, num28].wire())
									{
										list6.Add(new Tuple<int, int>(num27 + 1, num28));
									}
									if (!Main.tile[num27, num28 - 1].wire())
									{
										list6.Add(new Tuple<int, int>(num27, num28 - 1));
									}
									if (!Main.tile[num27, num28 + 1].wire())
									{
										list6.Add(new Tuple<int, int>(num27, num28 + 1));
									}
								}
								if (num26 == 2)
								{
									if (!Main.tile[num27 - 1, num28].wire2())
									{
										list6.Add(new Tuple<int, int>(num27 - 1, num28));
									}
									if (!Main.tile[num27 + 1, num28].wire2())
									{
										list6.Add(new Tuple<int, int>(num27 + 1, num28));
									}
									if (!Main.tile[num27, num28 - 1].wire2())
									{
										list6.Add(new Tuple<int, int>(num27, num28 - 1));
									}
									if (!Main.tile[num27, num28 + 1].wire2())
									{
										list6.Add(new Tuple<int, int>(num27, num28 + 1));
									}
								}
								if (num26 == 3)
								{
									if (!Main.tile[num27 - 1, num28].wire3())
									{
										list6.Add(new Tuple<int, int>(num27 - 1, num28));
									}
									if (!Main.tile[num27 + 1, num28].wire3())
									{
										list6.Add(new Tuple<int, int>(num27 + 1, num28));
									}
									if (!Main.tile[num27, num28 - 1].wire3())
									{
										list6.Add(new Tuple<int, int>(num27, num28 - 1));
									}
									if (!Main.tile[num27, num28 + 1].wire3())
									{
										list6.Add(new Tuple<int, int>(num27, num28 + 1));
									}
								}
								if (num26 == 4)
								{
									if (!Main.tile[num27 - 1, num28].wire4())
									{
										list6.Add(new Tuple<int, int>(num27 - 1, num28));
									}
									if (!Main.tile[num27 + 1, num28].wire4())
									{
										list6.Add(new Tuple<int, int>(num27 + 1, num28));
									}
									if (!Main.tile[num27, num28 - 1].wire4())
									{
										list6.Add(new Tuple<int, int>(num27, num28 - 1));
									}
									if (!Main.tile[num27, num28 + 1].wire4())
									{
										list6.Add(new Tuple<int, int>(num27, num28 + 1));
									}
								}
							}
						}
					}
				}
				if (list6.Count > 0)
				{
					float num29 = -1f;
					Tuple<int, int> tuple5 = list6[0];
					for (int num30 = 0; num30 < list6.Count; num30++)
					{
						float num31 = Vector2.Distance(new Vector2((float)list6[num30].Item1, (float)list6[num30].Item2) * 16f + Vector2.One * 8f, vector);
						if (num29 == -1f || num31 < num29)
						{
							num29 = num31;
							tuple5 = list6[num30];
						}
					}
					if (Collision.InTileBounds(tuple5.Item1, tuple5.Item2, num4, num6, num5, num7))
					{
						num8 = tuple5.Item1;
						num9 = tuple5.Item2;
					}
				}
				list6.Clear();
			}
			if (item.type == 3625 && num8 == -1 && num9 == -1)
			{
				List<Tuple<int, int>> list7 = new List<Tuple<int, int>>();
				WiresUI.Settings.MultiToolMode multiToolMode = WiresUI.Settings.ToolMode;
				WiresUI.Settings.MultiToolMode multiToolMode2 = (WiresUI.Settings.MultiToolMode)0;
				if (Main.tile[num, num2].wire())
				{
					multiToolMode2 |= WiresUI.Settings.MultiToolMode.Red;
				}
				if (Main.tile[num, num2].wire2())
				{
					multiToolMode2 |= WiresUI.Settings.MultiToolMode.Blue;
				}
				if (Main.tile[num, num2].wire3())
				{
					multiToolMode2 |= WiresUI.Settings.MultiToolMode.Green;
				}
				if (Main.tile[num, num2].wire4())
				{
					multiToolMode2 |= WiresUI.Settings.MultiToolMode.Yellow;
				}
				multiToolMode &= ~WiresUI.Settings.MultiToolMode.Cutter;
				bool flag3 = multiToolMode == multiToolMode2;
				multiToolMode = WiresUI.Settings.ToolMode;
				if (!flag3)
				{
					bool flag4 = multiToolMode.HasFlag(WiresUI.Settings.MultiToolMode.Red);
					bool flag5 = multiToolMode.HasFlag(WiresUI.Settings.MultiToolMode.Blue);
					bool flag6 = multiToolMode.HasFlag(WiresUI.Settings.MultiToolMode.Green);
					bool flag7 = multiToolMode.HasFlag(WiresUI.Settings.MultiToolMode.Yellow);
					bool flag8 = multiToolMode.HasFlag(WiresUI.Settings.MultiToolMode.Cutter);
					for (int num32 = num4; num32 <= num5; num32++)
					{
						for (int num33 = num6; num33 <= num7; num33++)
						{
							Tile tile3 = Main.tile[num32, num33];
							if (flag8)
							{
								if ((tile3.wire() && flag4) || (tile3.wire2() && flag5) || (tile3.wire3() && flag6) || (tile3.wire4() && flag7))
								{
									list7.Add(new Tuple<int, int>(num32, num33));
								}
							}
							else if ((tile3.wire() && flag4) || (tile3.wire2() && flag5) || (tile3.wire3() && flag6) || (tile3.wire4() && flag7))
							{
								if (flag4)
								{
									if (!Main.tile[num32 - 1, num33].wire())
									{
										list7.Add(new Tuple<int, int>(num32 - 1, num33));
									}
									if (!Main.tile[num32 + 1, num33].wire())
									{
										list7.Add(new Tuple<int, int>(num32 + 1, num33));
									}
									if (!Main.tile[num32, num33 - 1].wire())
									{
										list7.Add(new Tuple<int, int>(num32, num33 - 1));
									}
									if (!Main.tile[num32, num33 + 1].wire())
									{
										list7.Add(new Tuple<int, int>(num32, num33 + 1));
									}
								}
								if (flag5)
								{
									if (!Main.tile[num32 - 1, num33].wire2())
									{
										list7.Add(new Tuple<int, int>(num32 - 1, num33));
									}
									if (!Main.tile[num32 + 1, num33].wire2())
									{
										list7.Add(new Tuple<int, int>(num32 + 1, num33));
									}
									if (!Main.tile[num32, num33 - 1].wire2())
									{
										list7.Add(new Tuple<int, int>(num32, num33 - 1));
									}
									if (!Main.tile[num32, num33 + 1].wire2())
									{
										list7.Add(new Tuple<int, int>(num32, num33 + 1));
									}
								}
								if (flag6)
								{
									if (!Main.tile[num32 - 1, num33].wire3())
									{
										list7.Add(new Tuple<int, int>(num32 - 1, num33));
									}
									if (!Main.tile[num32 + 1, num33].wire3())
									{
										list7.Add(new Tuple<int, int>(num32 + 1, num33));
									}
									if (!Main.tile[num32, num33 - 1].wire3())
									{
										list7.Add(new Tuple<int, int>(num32, num33 - 1));
									}
									if (!Main.tile[num32, num33 + 1].wire3())
									{
										list7.Add(new Tuple<int, int>(num32, num33 + 1));
									}
								}
								if (flag7)
								{
									if (!Main.tile[num32 - 1, num33].wire4())
									{
										list7.Add(new Tuple<int, int>(num32 - 1, num33));
									}
									if (!Main.tile[num32 + 1, num33].wire4())
									{
										list7.Add(new Tuple<int, int>(num32 + 1, num33));
									}
									if (!Main.tile[num32, num33 - 1].wire4())
									{
										list7.Add(new Tuple<int, int>(num32, num33 - 1));
									}
									if (!Main.tile[num32, num33 + 1].wire4())
									{
										list7.Add(new Tuple<int, int>(num32, num33 + 1));
									}
								}
							}
						}
					}
				}
				if (list7.Count > 0)
				{
					float num34 = -1f;
					Tuple<int, int> tuple6 = list7[0];
					for (int num35 = 0; num35 < list7.Count; num35++)
					{
						float num36 = Vector2.Distance(new Vector2((float)list7[num35].Item1, (float)list7[num35].Item2) * 16f + Vector2.One * 8f, vector);
						if (num34 == -1f || num36 < num34)
						{
							num34 = num36;
							tuple6 = list7[num35];
						}
					}
					if (Collision.InTileBounds(tuple6.Item1, tuple6.Item2, num4, num6, num5, num7))
					{
						num8 = tuple6.Item1;
						num9 = tuple6.Item2;
					}
				}
				list7.Clear();
			}
			if (item.hammer > 0 && num8 == -1 && num9 == -1)
			{
				Vector2 vector3 = vector - base.Center;
				int num37 = Math.Sign(vector3.X);
				int num38 = Math.Sign(vector3.Y);
				if (Math.Abs(vector3.X) > Math.Abs(vector3.Y) * 3f)
				{
					num38 = 0;
					vector.Y = base.Center.Y;
				}
				if (Math.Abs(vector3.Y) > Math.Abs(vector3.X) * 3f)
				{
					num37 = 0;
					vector.X = base.Center.X;
				}
				int arg_17A4_0 = (int)base.Center.X / 16;
				int arg_17B4_0 = (int)base.Center.Y / 16;
				List<Tuple<int, int>> list8 = new List<Tuple<int, int>>();
				List<Tuple<int, int>> list9 = new List<Tuple<int, int>>();
				int num39 = 1;
				if (num38 == -1 && num37 != 0)
				{
					num39 = -1;
				}
				int num40 = (int)((this.position.X + (float)(this.width / 2) + (float)((this.width / 2 - 1) * num37)) / 16f);
				int num41 = (int)(((double)this.position.Y + 0.1) / 16.0);
				if (num39 == -1)
				{
					num41 = (int)((this.position.Y + (float)this.height - 1f) / 16f);
				}
				int num42 = this.width / 16 + ((this.width % 16 == 0) ? 0 : 1);
				int num43 = this.height / 16 + ((this.height % 16 == 0) ? 0 : 1);
				if (num37 != 0)
				{
					for (int num44 = 0; num44 < num43; num44++)
					{
						if (Main.tile[num40, num41 + num44 * num39] == null)
						{
							return;
						}
						list8.Add(new Tuple<int, int>(num40, num41 + num44 * num39));
					}
				}
				if (num38 != 0)
				{
					for (int num45 = 0; num45 < num42; num45++)
					{
						if (Main.tile[(int)(this.position.X / 16f) + num45, num41] == null)
						{
							return;
						}
						list8.Add(new Tuple<int, int>((int)(this.position.X / 16f) + num45, num41));
					}
				}
				int num46 = (int)((vector.X + (float)((this.width / 2 - 1) * num37)) / 16f);
				int num47 = (int)(((double)vector.Y + 0.1 - (double)(this.height / 2 + 1)) / 16.0);
				if (num39 == -1)
				{
					num47 = (int)((vector.Y + (float)(this.height / 2) - 1f) / 16f);
				}
				if (this.gravDir == -1f && num38 == 0)
				{
					num47++;
				}
				if (num47 < 10)
				{
					num47 = 10;
				}
				if (num47 > Main.maxTilesY - 10)
				{
					num47 = Main.maxTilesY - 10;
				}
				int num48 = this.width / 16 + ((this.width % 16 == 0) ? 0 : 1);
				int num49 = this.height / 16 + ((this.height % 16 == 0) ? 0 : 1);
				if (num37 != 0)
				{
					for (int num50 = 0; num50 < num49; num50++)
					{
						if (Main.tile[num46, num47 + num50 * num39] == null)
						{
							return;
						}
						list9.Add(new Tuple<int, int>(num46, num47 + num50 * num39));
					}
				}
				if (num38 != 0)
				{
					for (int num51 = 0; num51 < num48; num51++)
					{
						if (Main.tile[(int)((vector.X - (float)(this.width / 2)) / 16f) + num51, num47] == null)
						{
							return;
						}
						list9.Add(new Tuple<int, int>((int)((vector.X - (float)(this.width / 2)) / 16f) + num51, num47));
					}
				}
				List<Tuple<int, int>> list10 = new List<Tuple<int, int>>();
				while (list8.Count > 0)
				{
					Tuple<int, int> tuple7 = list8[0];
					Tuple<int, int> tuple8 = list9[0];
					Tuple<int, int> tuple9 = Collision.TupleHitLineWall(tuple7.Item1, tuple7.Item2, tuple8.Item1, tuple8.Item2);
					if (tuple9.Item1 == -1 || tuple9.Item2 == -1)
					{
						list8.Remove(tuple7);
						list9.Remove(tuple8);
					}
					else
					{
						if (tuple9.Item1 != tuple8.Item1 || tuple9.Item2 != tuple8.Item2)
						{
							list10.Add(tuple9);
						}
						Tile _ = Main.tile[tuple9.Item1, tuple9.Item2];
						if (Collision.HitWallSubstep(tuple9.Item1, tuple9.Item2))
						{
							list10.Add(tuple9);
						}
						list8.Remove(tuple7);
						list9.Remove(tuple8);
					}
				}
				if (list10.Count > 0)
				{
					float num52 = -1f;
					Tuple<int, int> tuple10 = list10[0];
					for (int num53 = 0; num53 < list10.Count; num53++)
					{
						float num54 = Vector2.Distance(new Vector2((float)list10[num53].Item1, (float)list10[num53].Item2) * 16f + Vector2.One * 8f, base.Center);
						if (num52 == -1f || num54 < num52)
						{
							num52 = num54;
							tuple10 = list10[num53];
						}
					}
					if (Collision.InTileBounds(tuple10.Item1, tuple10.Item2, num4, num6, num5, num7))
					{
						this.poundRelease = false;
						num8 = tuple10.Item1;
						num9 = tuple10.Item2;
					}
				}
				list10.Clear();
				list8.Clear();
				list9.Clear();
			}
			if (item.hammer > 0 && num8 == -1 && num9 == -1)
			{
				List<Tuple<int, int>> list11 = new List<Tuple<int, int>>();
				for (int num55 = num4; num55 <= num5; num55++)
				{
					for (int num56 = num6; num56 <= num7; num56++)
					{
						if (Main.tile[num55, num56].wall > 0 && Collision.HitWallSubstep(num55, num56))
						{
							list11.Add(new Tuple<int, int>(num55, num56));
						}
					}
				}
				if (list11.Count > 0)
				{
					float num57 = -1f;
					Tuple<int, int> tuple11 = list11[0];
					for (int num58 = 0; num58 < list11.Count; num58++)
					{
						float num59 = Vector2.Distance(new Vector2((float)list11[num58].Item1, (float)list11[num58].Item2) * 16f + Vector2.One * 8f, vector);
						if (num57 == -1f || num59 < num57)
						{
							num57 = num59;
							tuple11 = list11[num58];
						}
					}
					if (Collision.InTileBounds(tuple11.Item1, tuple11.Item2, num4, num6, num5, num7))
					{
						this.poundRelease = false;
						num8 = tuple11.Item1;
						num9 = tuple11.Item2;
					}
				}
				list11.Clear();
			}
			if (item.type == 3620 && num8 == -1 && num9 == -1)
			{
				List<Tuple<int, int>> list12 = new List<Tuple<int, int>>();
				for (int num60 = num4; num60 <= num5; num60++)
				{
					for (int num61 = num6; num61 <= num7; num61++)
					{
						Tile tile4 = Main.tile[num60, num61];
						if (tile4.active() && tile4.actuator() && (!this.ActuationRodLock || this.ActuationRodLockSetting == tile4.inActive()))
						{
							list12.Add(new Tuple<int, int>(num60, num61));
						}
					}
				}
				if (list12.Count > 0)
				{
					float num62 = -1f;
					Tuple<int, int> tuple12 = list12[0];
					for (int num63 = 0; num63 < list12.Count; num63++)
					{
						float num64 = Vector2.Distance(new Vector2((float)list12[num63].Item1, (float)list12[num63].Item2) * 16f + Vector2.One * 8f, vector);
						if (num62 == -1f || num64 < num62)
						{
							num62 = num64;
							tuple12 = list12[num63];
						}
					}
					if (Collision.InTileBounds(tuple12.Item1, tuple12.Item2, num4, num6, num5, num7))
					{
						num8 = tuple12.Item1;
						num9 = tuple12.Item2;
					}
				}
				list12.Clear();
			}
			if (item.type == 510 && num8 == -1 && num9 == -1)
			{
				List<Tuple<int, int>> list13 = new List<Tuple<int, int>>();
				for (int num65 = num4; num65 <= num5; num65++)
				{
					for (int num66 = num6; num66 <= num7; num66++)
					{
						Tile tile5 = Main.tile[num65, num66];
						if (tile5.wire() || tile5.wire2() || tile5.wire3() || tile5.wire4() || tile5.actuator())
						{
							list13.Add(new Tuple<int, int>(num65, num66));
						}
					}
				}
				if (list13.Count > 0)
				{
					float num67 = -1f;
					Tuple<int, int> tuple13 = list13[0];
					for (int num68 = 0; num68 < list13.Count; num68++)
					{
						float num69 = Vector2.Distance(new Vector2((float)list13[num68].Item1, (float)list13[num68].Item2) * 16f + Vector2.One * 8f, vector);
						if (num67 == -1f || num69 < num67)
						{
							num67 = num69;
							tuple13 = list13[num68];
						}
					}
					if (Collision.InTileBounds(tuple13.Item1, tuple13.Item2, num4, num6, num5, num7))
					{
						num8 = tuple13.Item1;
						num9 = tuple13.Item2;
					}
				}
				list13.Clear();
			}
			if (item.createTile >= 0 && TileID.Sets.Platforms[item.createTile] && num8 == -1 && num9 == -1)
			{
				List<Tuple<int, int>> list14 = new List<Tuple<int, int>>();
				bool flag9 = false;
				if (Main.tile[num, num2].active() && TileID.Sets.Platforms[(int)Main.tile[num, num2].type])
				{
					flag9 = true;
				}
				if (!flag9)
				{
					for (int num70 = num4; num70 <= num5; num70++)
					{
						for (int num71 = num6; num71 <= num7; num71++)
						{
							Tile tile6 = Main.tile[num70, num71];
							if (tile6.active() && TileID.Sets.Platforms[(int)tile6.type])
							{
								int num72 = (int)tile6.slope();
								if (num72 != 2 && !Main.tile[num70 - 1, num71 - 1].active())
								{
									list14.Add(new Tuple<int, int>(num70 - 1, num71 - 1));
								}
								if (!Main.tile[num70 - 1, num71].active())
								{
									list14.Add(new Tuple<int, int>(num70 - 1, num71));
								}
								if (num72 != 1 && !Main.tile[num70 - 1, num71 + 1].active())
								{
									list14.Add(new Tuple<int, int>(num70 - 1, num71 + 1));
								}
								if (num72 != 1 && !Main.tile[num70 + 1, num71 - 1].active())
								{
									list14.Add(new Tuple<int, int>(num70 + 1, num71 - 1));
								}
								if (!Main.tile[num70 + 1, num71].active())
								{
									list14.Add(new Tuple<int, int>(num70 + 1, num71));
								}
								if (num72 != 2 && !Main.tile[num70 + 1, num71 + 1].active())
								{
									list14.Add(new Tuple<int, int>(num70 + 1, num71 + 1));
								}
							}
							if (!tile6.active())
							{
								int num73 = 0;
								int num74 = 1;
								Tile tile7 = Main.tile[num70 + num73, num71 + num74];
								if (tile7.active() && Main.tileSolid[(int)tile7.type] && !Main.tileSolidTop[(int)tile7.type])
								{
									list14.Add(new Tuple<int, int>(num70, num71));
								}
								num73 = -1;
								num74 = 0;
								tile7 = Main.tile[num70 + num73, num71 + num74];
								if (tile7.active() && Main.tileSolid[(int)tile7.type] && !Main.tileSolidTop[(int)tile7.type])
								{
									list14.Add(new Tuple<int, int>(num70, num71));
								}
								num73 = 1;
								num74 = 0;
								tile7 = Main.tile[num70 + num73, num71 + num74];
								if (tile7.active() && Main.tileSolid[(int)tile7.type] && !Main.tileSolidTop[(int)tile7.type])
								{
									list14.Add(new Tuple<int, int>(num70, num71));
								}
							}
						}
					}
				}
				if (list14.Count > 0)
				{
					float num75 = -1f;
					Tuple<int, int> tuple14 = list14[0];
					for (int num76 = 0; num76 < list14.Count; num76++)
					{
						float num77 = Vector2.Distance(new Vector2((float)list14[num76].Item1, (float)list14[num76].Item2) * 16f + Vector2.One * 8f, vector);
						if (num75 == -1f || num77 < num75)
						{
							num75 = num77;
							tuple14 = list14[num76];
						}
					}
					if (Collision.InTileBounds(tuple14.Item1, tuple14.Item2, num4, num6, num5, num7))
					{
						num8 = tuple14.Item1;
						num9 = tuple14.Item2;
					}
				}
				list14.Clear();
			}
			if ((item.type == 2340 || item.type == 2739) && num8 == -1 && num9 == -1)
			{
				List<Tuple<int, int>> list15 = new List<Tuple<int, int>>();
				bool flag10 = false;
				if (Main.tile[num, num2].active() && Main.tile[num, num2].type == 314)
				{
					flag10 = true;
				}
				if (!flag10)
				{
					for (int num78 = num4; num78 <= num5; num78++)
					{
						for (int num79 = num6; num79 <= num7; num79++)
						{
							Tile tile8 = Main.tile[num78, num79];
							if (tile8.active() && tile8.type == 314)
							{
								bool flag11 = Main.tile[num78 + 1, num79 + 1].active() && Main.tile[num78 + 1, num79 + 1].type == 314;
								bool flag12 = Main.tile[num78 + 1, num79 - 1].active() && Main.tile[num78 + 1, num79 - 1].type == 314;
								bool flag13 = Main.tile[num78 - 1, num79 + 1].active() && Main.tile[num78 - 1, num79 + 1].type == 314;
								bool flag14 = Main.tile[num78 - 1, num79 - 1].active() && Main.tile[num78 - 1, num79 - 1].type == 314;
								if ((!Main.tile[num78 - 1, num79 - 1].active() || Main.tileCut[(int)Main.tile[num78 - 1, num79 - 1].type] || TileID.Sets.BreakableWhenPlacing[(int)Main.tile[num78 - 1, num79 - 1].type]) && (flag11 || !flag12))
								{
									list15.Add(new Tuple<int, int>(num78 - 1, num79 - 1));
								}
								if (!Main.tile[num78 - 1, num79].active() || Main.tileCut[(int)Main.tile[num78 - 1, num79].type] || TileID.Sets.BreakableWhenPlacing[(int)Main.tile[num78 - 1, num79].type])
								{
									list15.Add(new Tuple<int, int>(num78 - 1, num79));
								}
								if ((!Main.tile[num78 - 1, num79 + 1].active() || Main.tileCut[(int)Main.tile[num78 - 1, num79 + 1].type] || TileID.Sets.BreakableWhenPlacing[(int)Main.tile[num78 - 1, num79 + 1].type]) && (flag12 || !flag11))
								{
									list15.Add(new Tuple<int, int>(num78 - 1, num79 + 1));
								}
								if ((!Main.tile[num78 + 1, num79 - 1].active() || Main.tileCut[(int)Main.tile[num78 + 1, num79 - 1].type] || TileID.Sets.BreakableWhenPlacing[(int)Main.tile[num78 + 1, num79 - 1].type]) && (flag13 || !flag14))
								{
									list15.Add(new Tuple<int, int>(num78 + 1, num79 - 1));
								}
								if (!Main.tile[num78 + 1, num79].active() || Main.tileCut[(int)Main.tile[num78 + 1, num79].type] || TileID.Sets.BreakableWhenPlacing[(int)Main.tile[num78 + 1, num79].type])
								{
									list15.Add(new Tuple<int, int>(num78 + 1, num79));
								}
								if ((!Main.tile[num78 + 1, num79 + 1].active() || Main.tileCut[(int)Main.tile[num78 + 1, num79 + 1].type] || TileID.Sets.BreakableWhenPlacing[(int)Main.tile[num78 + 1, num79 + 1].type]) && (flag14 || !flag13))
								{
									list15.Add(new Tuple<int, int>(num78 + 1, num79 + 1));
								}
							}
						}
					}
				}
				if (list15.Count > 0)
				{
					float num80 = -1f;
					Tuple<int, int> tuple15 = list15[0];
					for (int num81 = 0; num81 < list15.Count; num81++)
					{
						if ((!Main.tile[list15[num81].Item1, list15[num81].Item2 - 1].active() || Main.tile[list15[num81].Item1, list15[num81].Item2 - 1].type != 314) && (!Main.tile[list15[num81].Item1, list15[num81].Item2 + 1].active() || Main.tile[list15[num81].Item1, list15[num81].Item2 + 1].type != 314))
						{
							float num82 = Vector2.Distance(new Vector2((float)list15[num81].Item1, (float)list15[num81].Item2) * 16f + Vector2.One * 8f, vector);
							if (num80 == -1f || num82 < num80)
							{
								num80 = num82;
								tuple15 = list15[num81];
							}
						}
					}
					if (Collision.InTileBounds(tuple15.Item1, tuple15.Item2, num4, num6, num5, num7) && num80 != -1f)
					{
						num8 = tuple15.Item1;
						num9 = tuple15.Item2;
					}
				}
				list15.Clear();
			}
			if (item.type == 2492 && num8 == -1 && num9 == -1)
			{
				List<Tuple<int, int>> list16 = new List<Tuple<int, int>>();
				bool flag15 = false;
				if (Main.tile[num, num2].active() && Main.tile[num, num2].type == 314)
				{
					flag15 = true;
				}
				if (!flag15)
				{
					for (int num83 = num4; num83 <= num5; num83++)
					{
						for (int num84 = num6; num84 <= num7; num84++)
						{
							Tile tile9 = Main.tile[num83, num84];
							if (tile9.active() && tile9.type == 314)
							{
								if (!Main.tile[num83 - 1, num84].active() || Main.tileCut[(int)Main.tile[num83 - 1, num84].type] || TileID.Sets.BreakableWhenPlacing[(int)Main.tile[num83 - 1, num84].type])
								{
									list16.Add(new Tuple<int, int>(num83 - 1, num84));
								}
								if (!Main.tile[num83 + 1, num84].active() || Main.tileCut[(int)Main.tile[num83 + 1, num84].type] || TileID.Sets.BreakableWhenPlacing[(int)Main.tile[num83 + 1, num84].type])
								{
									list16.Add(new Tuple<int, int>(num83 + 1, num84));
								}
							}
						}
					}
				}
				if (list16.Count > 0)
				{
					float num85 = -1f;
					Tuple<int, int> tuple16 = list16[0];
					for (int num86 = 0; num86 < list16.Count; num86++)
					{
						if ((!Main.tile[list16[num86].Item1, list16[num86].Item2 - 1].active() || Main.tile[list16[num86].Item1, list16[num86].Item2 - 1].type != 314) && (!Main.tile[list16[num86].Item1, list16[num86].Item2 + 1].active() || Main.tile[list16[num86].Item1, list16[num86].Item2 + 1].type != 314))
						{
							float num87 = Vector2.Distance(new Vector2((float)list16[num86].Item1, (float)list16[num86].Item2) * 16f + Vector2.One * 8f, vector);
							if (num85 == -1f || num87 < num85)
							{
								num85 = num87;
								tuple16 = list16[num86];
							}
						}
					}
					if (Collision.InTileBounds(tuple16.Item1, tuple16.Item2, num4, num6, num5, num7) && num85 != -1f)
					{
						num8 = tuple16.Item1;
						num9 = tuple16.Item2;
					}
				}
				list16.Clear();
			}
			if (item.createWall > 0 && num8 == -1 && num9 == -1)
			{
				List<Tuple<int, int>> list17 = new List<Tuple<int, int>>();
				for (int num88 = num4; num88 <= num5; num88++)
				{
					for (int num89 = num6; num89 <= num7; num89++)
					{
						Tile tile10 = Main.tile[num88, num89];
						if (tile10.wall == 0 && (!tile10.active() || !Main.tileSolid[(int)tile10.type] || Main.tileSolidTop[(int)tile10.type]) && Collision.CanHitWithCheck(this.position, this.width, this.height, new Vector2((float)num88, (float)num89) * 16f, 16, 16, new Utils.PerLinePoint(DelegateMethods.NotDoorStand)))
						{
							bool flag16 = false;
							if (Main.tile[num88 - 1, num89].active() || Main.tile[num88 - 1, num89].wall > 0)
							{
								flag16 = true;
							}
							if (Main.tile[num88 + 1, num89].active() || Main.tile[num88 + 1, num89].wall > 0)
							{
								flag16 = true;
							}
							if (Main.tile[num88, num89 - 1].active() || Main.tile[num88, num89 - 1].wall > 0)
							{
								flag16 = true;
							}
							if (Main.tile[num88, num89 + 1].active() || Main.tile[num88, num89 + 1].wall > 0)
							{
								flag16 = true;
							}
							if (Main.tile[num88, num89].active() && Main.tile[num88, num89].type == 11 && (Main.tile[num88, num89].frameX < 18 || Main.tile[num88, num89].frameX >= 54))
							{
								flag16 = false;
							}
							if (flag16)
							{
								list17.Add(new Tuple<int, int>(num88, num89));
							}
						}
					}
				}
				if (list17.Count > 0)
				{
					float num90 = -1f;
					Tuple<int, int> tuple17 = list17[0];
					for (int num91 = 0; num91 < list17.Count; num91++)
					{
						float num92 = Vector2.Distance(new Vector2((float)list17[num91].Item1, (float)list17[num91].Item2) * 16f + Vector2.One * 8f, vector);
						if (num90 == -1f || num92 < num90)
						{
							num90 = num92;
							tuple17 = list17[num91];
						}
					}
					if (Collision.InTileBounds(tuple17.Item1, tuple17.Item2, num4, num6, num5, num7))
					{
						num8 = tuple17.Item1;
						num9 = tuple17.Item2;
					}
				}
				list17.Clear();
			}
			if (item.createTile == 254 && num8 == -1 && num9 == -1)
			{
				List<Tuple<int, int>> list18 = new List<Tuple<int, int>>();
				for (int num93 = num4; num93 <= num5; num93++)
				{
					for (int num94 = num6; num94 <= num7; num94++)
					{
						Tile tile11 = Main.tile[num93, num94 + 1];
						Tile tile12 = Main.tile[num93 - 1, num94 + 1];
						if ((double)num94 > Main.worldSurface - 2.0)
						{
							break;
						}
						bool flag17 = true;
						if (!tile12.active() || !tile11.active())
						{
							flag17 = false;
						}
						if (tile12.slope() > 0 || tile11.slope() > 0 || tile12.halfBrick() || tile11.halfBrick())
						{
							flag17 = false;
						}
						if (tile12.type != 2 && tile12.type != 109)
						{
							flag17 = false;
						}
						if (tile11.type != 2 && tile11.type != 109)
						{
							flag17 = false;
						}
						for (int num95 = num93 - 1; num95 <= num93; num95++)
						{
							for (int num96 = num94 - 1; num96 <= num94; num96++)
							{
								Tile tile13 = Main.tile[num95, num96];
								if (tile13.active() && !WorldGen.CanCutTile(num95, num96, TileCuttingContext.AttackMelee))
								{
									flag17 = false;
								}
							}
						}
						if (flag17)
						{
							list18.Add(new Tuple<int, int>(num93, num94));
						}
					}
				}
				if (list18.Count > 0)
				{
					float num97 = -1f;
					Tuple<int, int> tuple18 = list18[0];
					for (int num98 = 0; num98 < list18.Count; num98++)
					{
						float num99 = Vector2.Distance(new Vector2((float)list18[num98].Item1, (float)list18[num98].Item2) * 16f + Vector2.One * 8f, vector);
						if (num97 == -1f || num99 < num97)
						{
							num97 = num99;
							tuple18 = list18[num98];
						}
					}
					if (Collision.InTileBounds(tuple18.Item1, tuple18.Item2, num4, num6, num5, num7))
					{
						num8 = tuple18.Item1;
						num9 = tuple18.Item2;
					}
				}
				list18.Clear();
			}
			if (item.createTile == 454 && num8 == -1 && num9 == -1)
			{
				List<Tuple<int, int>> list19 = new List<Tuple<int, int>>();
				for (int num100 = num4; num100 <= num5; num100++)
				{
					int num101 = num6;
					while (num101 <= num7 && (double)num101 <= Main.worldSurface - 2.0)
					{
						bool flag18 = true;
						for (int num102 = num100 - 2; num102 <= num100 + 1; num102++)
						{
							for (int num103 = num101 - 1; num103 <= num101 + 2; num103++)
							{
								Tile tile14 = Main.tile[num102, num103];
								if (num103 == num101 - 1)
								{
									if (!WorldGen.SolidTile(tile14))
									{
										flag18 = false;
									}
								}
								else if (tile14.active() && (!Main.tileCut[(int)tile14.type] || tile14.type == 454))
								{
									flag18 = false;
								}
							}
						}
						if (flag18)
						{
							list19.Add(new Tuple<int, int>(num100, num101));
						}
						num101++;
					}
				}
				if (list19.Count > 0)
				{
					float num104 = -1f;
					Tuple<int, int> tuple19 = list19[0];
					for (int num105 = 0; num105 < list19.Count; num105++)
					{
						float num106 = Vector2.Distance(new Vector2((float)list19[num105].Item1, (float)list19[num105].Item2) * 16f + Vector2.One * 8f, vector);
						if (num104 == -1f || num106 < num104)
						{
							num104 = num106;
							tuple19 = list19[num105];
						}
					}
					if (Collision.InTileBounds(tuple19.Item1, tuple19.Item2, num4, num6, num5, num7))
					{
						num8 = tuple19.Item1;
						num9 = tuple19.Item2;
					}
				}
				list19.Clear();
			}
			if (item.createTile == 138 && num8 == -1 && num9 == -1)
			{
				List<Tuple<int, int>> list20 = new List<Tuple<int, int>>();
				for (int num107 = num4; num107 <= num5; num107++)
				{
					for (int num108 = num6; num108 <= num7; num108++)
					{
						Tile tile15 = Main.tile[num107, num108 + 1];
						Tile tile16 = Main.tile[num107 - 1, num108 + 1];
						bool flag19 = true;
						if (!tile16.nactive() || !tile15.nactive())
						{
							flag19 = false;
						}
						if (tile16.slope() > 0 || tile15.slope() > 0 || tile16.halfBrick() || tile15.halfBrick())
						{
							flag19 = false;
						}
						if (Main.tileNoAttach[(int)tile16.type] || Main.tileNoAttach[(int)tile15.type])
						{
							flag19 = false;
						}
						for (int num109 = num107 - 1; num109 <= num107; num109++)
						{
							for (int num110 = num108 - 1; num110 <= num108; num110++)
							{
								Tile tile17 = Main.tile[num109, num110];
								if (tile17.active() && !Main.tileCut[(int)tile17.type])
								{
									flag19 = false;
								}
							}
						}
						int x = num107 * 16 - 16;
						int y = num108 * 16 - 16;
						int width = 32;
						int height = 32;
						Rectangle value = new Rectangle(x, y, width, height);
						for (int num111 = 0; num111 < 255; num111++)
						{
							Player player = Main.player[num111];
							if (player.active && !player.dead && player.Hitbox.Intersects(value))
							{
								flag19 = false;
								break;
							}
						}
						if (flag19)
						{
							list20.Add(new Tuple<int, int>(num107, num108));
						}
					}
				}
				if (list20.Count > 0)
				{
					float num112 = -1f;
					Tuple<int, int> tuple20 = list20[0];
					for (int num113 = 0; num113 < list20.Count; num113++)
					{
						float num114 = Vector2.Distance(new Vector2((float)list20[num113].Item1, (float)list20[num113].Item2) * 16f + Vector2.One * 8f, vector);
						if (num112 == -1f || num114 < num112)
						{
							num112 = num114;
							tuple20 = list20[num113];
						}
					}
					if (Collision.InTileBounds(tuple20.Item1, tuple20.Item2, num4, num6, num5, num7))
					{
						num8 = tuple20.Item1;
						num9 = tuple20.Item2;
					}
				}
				list20.Clear();
			}
			Player.SmartCursor_Torch(item, ref vector, num4, num5, num6, num7, ref num8, ref num9, num, num2);
			Player.SmartCursor_Filling(item, ref vector, num4, num5, num6, num7, ref num8, ref num9, num, num2);
			if (Player.SmartCursorSettings.SmartBlocksEnabled && item.createTile > -1 && item.type != 213 && Main.tileSolid[item.createTile] && !Main.tileSolidTop[item.createTile] && !Main.tileFrameImportant[item.createTile] && num8 == -1 && num9 == -1)
			{
				List<Tuple<int, int>> list21 = new List<Tuple<int, int>>();
				bool flag20 = false;
				if (Main.tile[num, num2].active())
				{
					flag20 = true;
				}
				if (!Collision.InTileBounds(num, num2, num4, num6, num5, num7))
				{
					flag20 = true;
				}
				if (!flag20)
				{
					for (int num115 = num4; num115 <= num5; num115++)
					{
						for (int num116 = num6; num116 <= num7; num116++)
						{
							Tile tile18 = Main.tile[num115, num116];
							if (!tile18.active() || Main.tileCut[(int)tile18.type] || TileID.Sets.BreakableWhenPlacing[(int)tile18.type])
							{
								bool flag21 = false;
								if (Main.tile[num115 - 1, num116].active() && Main.tileSolid[(int)Main.tile[num115 - 1, num116].type] && !Main.tileSolidTop[(int)Main.tile[num115 - 1, num116].type])
								{
									flag21 = true;
								}
								if (Main.tile[num115 + 1, num116].active() && Main.tileSolid[(int)Main.tile[num115 + 1, num116].type] && !Main.tileSolidTop[(int)Main.tile[num115 + 1, num116].type])
								{
									flag21 = true;
								}
								if (Main.tile[num115, num116 - 1].active() && Main.tileSolid[(int)Main.tile[num115, num116 - 1].type] && !Main.tileSolidTop[(int)Main.tile[num115, num116 - 1].type])
								{
									flag21 = true;
								}
								if (Main.tile[num115, num116 + 1].active() && Main.tileSolid[(int)Main.tile[num115, num116 + 1].type] && !Main.tileSolidTop[(int)Main.tile[num115, num116 + 1].type])
								{
									flag21 = true;
								}
								if (flag21)
								{
									list21.Add(new Tuple<int, int>(num115, num116));
								}
							}
						}
					}
				}
				if (list21.Count > 0)
				{
					float num117 = -1f;
					Tuple<int, int> tuple21 = list21[0];
					for (int num118 = 0; num118 < list21.Count; num118++)
					{
						if (Collision.EmptyTile(list21[num118].Item1, list21[num118].Item2, false))
						{
							float num119 = Vector2.Distance(new Vector2((float)list21[num118].Item1, (float)list21[num118].Item2) * 16f + Vector2.One * 8f, vector);
							if (num117 == -1f || num119 < num117)
							{
								num117 = num119;
								tuple21 = list21[num118];
							}
						}
					}
					if (Collision.InTileBounds(tuple21.Item1, tuple21.Item2, num4, num6, num5, num7) && num117 != -1f)
					{
						num8 = tuple21.Item1;
						num9 = tuple21.Item2;
					}
				}
				list21.Clear();
			}
			if ((item.type == 1072 || item.type == 1544) && num3 != 0 && num8 == -1 && num9 == -1)
			{
				List<Tuple<int, int>> list22 = new List<Tuple<int, int>>();
				for (int num120 = num4; num120 <= num5; num120++)
				{
					for (int num121 = num6; num121 <= num7; num121++)
					{
						Tile tile19 = Main.tile[num120, num121];
						if (tile19.wall > 0 && (int)tile19.wallColor() != num3 && (!tile19.active() || !Main.tileSolid[(int)tile19.type] || Main.tileSolidTop[(int)tile19.type]))
						{
							list22.Add(new Tuple<int, int>(num120, num121));
						}
					}
				}
				if (list22.Count > 0)
				{
					float num122 = -1f;
					Tuple<int, int> tuple22 = list22[0];
					for (int num123 = 0; num123 < list22.Count; num123++)
					{
						float num124 = Vector2.Distance(new Vector2((float)list22[num123].Item1, (float)list22[num123].Item2) * 16f + Vector2.One * 8f, vector);
						if (num122 == -1f || num124 < num122)
						{
							num122 = num124;
							tuple22 = list22[num123];
						}
					}
					if (Collision.InTileBounds(tuple22.Item1, tuple22.Item2, num4, num6, num5, num7))
					{
						num8 = tuple22.Item1;
						num9 = tuple22.Item2;
					}
				}
				list22.Clear();
			}
			if ((item.type == 1071 || item.type == 1543) && num3 != 0 && num8 == -1 && num9 == -1)
			{
				List<Tuple<int, int>> list23 = new List<Tuple<int, int>>();
				for (int num125 = num4; num125 <= num5; num125++)
				{
					for (int num126 = num6; num126 <= num7; num126++)
					{
						Tile tile20 = Main.tile[num125, num126];
						if (tile20.active() && (int)tile20.color() != num3)
						{
							list23.Add(new Tuple<int, int>(num125, num126));
						}
					}
				}
				if (list23.Count > 0)
				{
					float num127 = -1f;
					Tuple<int, int> tuple23 = list23[0];
					for (int num128 = 0; num128 < list23.Count; num128++)
					{
						float num129 = Vector2.Distance(new Vector2((float)list23[num128].Item1, (float)list23[num128].Item2) * 16f + Vector2.One * 8f, vector);
						if (num127 == -1f || num129 < num127)
						{
							num127 = num129;
							tuple23 = list23[num128];
						}
					}
					if (Collision.InTileBounds(tuple23.Item1, tuple23.Item2, num4, num6, num5, num7))
					{
						num8 = tuple23.Item1;
						num9 = tuple23.Item2;
					}
				}
				list23.Clear();
			}
			if ((item.type == 1100 || item.type == 1545) && num8 == -1 && num9 == -1)
			{
				List<Tuple<int, int>> list24 = new List<Tuple<int, int>>();
				for (int num130 = num4; num130 <= num5; num130++)
				{
					for (int num131 = num6; num131 <= num7; num131++)
					{
						Tile tile21 = Main.tile[num130, num131];
						if ((tile21.active() && tile21.color() > 0) || (tile21.wall > 0 && tile21.wallColor() > 0))
						{
							list24.Add(new Tuple<int, int>(num130, num131));
						}
					}
				}
				if (list24.Count > 0)
				{
					float num132 = -1f;
					Tuple<int, int> tuple24 = list24[0];
					for (int num133 = 0; num133 < list24.Count; num133++)
					{
						float num134 = Vector2.Distance(new Vector2((float)list24[num133].Item1, (float)list24[num133].Item2) * 16f + Vector2.One * 8f, vector);
						if (num132 == -1f || num134 < num132)
						{
							num132 = num134;
							tuple24 = list24[num133];
						}
					}
					if (Collision.InTileBounds(tuple24.Item1, tuple24.Item2, num4, num6, num5, num7))
					{
						num8 = tuple24.Item1;
						num9 = tuple24.Item2;
					}
				}
				list24.Clear();
			}
			if (item.type == 27 && num8 == -1 && num9 == -1 && num6 > 20)
			{
				List<Tuple<int, int>> list25 = new List<Tuple<int, int>>();
				for (int num135 = num4; num135 <= num5; num135++)
				{
					for (int num136 = num6; num136 <= num7; num136++)
					{
						Tile tile22 = Main.tile[num135, num136];
						Tile tile23 = Main.tile[num135, num136 - 1];
						Tile tile24 = Main.tile[num135, num136 + 1];
						Tile tile25 = Main.tile[num135 - 1, num136];
						Tile tile26 = Main.tile[num135 + 1, num136];
						Tile tile27 = Main.tile[num135 - 2, num136];
						Tile tile28 = Main.tile[num135 + 2, num136];
						Tile tile29 = Main.tile[num135 - 3, num136];
						Tile tile30 = Main.tile[num135 + 3, num136];
						if ((!tile22.active() || Main.tileCut[(int)tile22.type] || TileID.Sets.BreakableWhenPlacing[(int)tile22.type]) && (!tile23.active() || Main.tileCut[(int)tile23.type] || TileID.Sets.BreakableWhenPlacing[(int)tile23.type]) && (!tile25.active() || tile25.type != 20) && (!tile26.active() || tile26.type != 20) && (!tile27.active() || tile27.type != 20) && (!tile28.active() || tile28.type != 20) && (!tile29.active() || tile29.type != 20) && (!tile30.active() || tile30.type != 20) && tile24.active() && WorldGen.SolidTile2(tile24))
						{
							ushort type = tile24.type;
							if (type <= 109)
							{
								if (type <= 23)
								{
									if (type != 2 && type != 23)
									{
										goto IL_41FD;
									}
								}
								else if (type != 53)
								{
									if (type != 60)
									{
										if (type != 109)
										{
											goto IL_41FD;
										}
									}
									else
									{
										if (WorldGen.EmptyTileCheck(num135 - 2, num135 + 2, num136 - 20, num136, 20))
										{
											list25.Add(new Tuple<int, int>(num135, num136));
											goto IL_41FD;
										}
										goto IL_41FD;
									}
								}
							}
							else if (type <= 116)
							{
								if (type != 112 && type != 116)
								{
									goto IL_41FD;
								}
							}
							else if (type != 147 && type != 199 && type != 234)
							{
								goto IL_41FD;
							}
							if (tile25.liquid == 0 && tile22.liquid == 0 && tile26.liquid == 0 && WorldGen.EmptyTileCheck(num135 - 2, num135 + 2, num136 - 20, num136, 20))
							{
								list25.Add(new Tuple<int, int>(num135, num136));
							}
						}
						IL_41FD:
						;
					}
				}
				List<Tuple<int, int>> list26 = new List<Tuple<int, int>>();
				for (int num137 = 0; num137 < list25.Count; num137++)
				{
					bool flag22 = false;
					for (int num138 = -1; num138 < 2; num138 += 2)
					{
						Tile tile31 = Main.tile[list25[num137].Item1 + num138, list25[num137].Item2 + 1];
						if (tile31.active())
						{
							ushort type = tile31.type;
							if (type <= 109)
							{
								if (type <= 23)
								{
									if (type != 2 && type != 23)
									{
										goto IL_4308;
									}
								}
								else if (type != 53 && type != 60 && type != 109)
								{
									goto IL_4308;
								}
							}
							else if (type <= 116)
							{
								if (type != 112 && type != 116)
								{
									goto IL_4308;
								}
							}
							else if (type != 147 && type != 199 && type != 234)
							{
								goto IL_4308;
							}
							flag22 = true;
						}
						IL_4308:
						;
					}
					if (!flag22)
					{
						list26.Add(list25[num137]);
					}
				}
				for (int num139 = 0; num139 < list26.Count; num139++)
				{
					list25.Remove(list26[num139]);
				}
				list26.Clear();
				if (list25.Count > 0)
				{
					float num140 = -1f;
					Tuple<int, int> tuple25 = list25[0];
					for (int num141 = 0; num141 < list25.Count; num141++)
					{
						float num142 = Vector2.Distance(new Vector2((float)list25[num141].Item1, (float)list25[num141].Item2) * 16f + Vector2.One * 8f, vector);
						if (num140 == -1f || num142 < num140)
						{
							num140 = num142;
							tuple25 = list25[num141];
						}
					}
					if (Collision.InTileBounds(tuple25.Item1, tuple25.Item2, num4, num6, num5, num7))
					{
						num8 = tuple25.Item1;
						num9 = tuple25.Item2;
					}
				}
				list25.Clear();
			}
			if (item.type == 205 && num8 == -1 && num9 == -1)
			{
				List<Tuple<int, int>> list27 = new List<Tuple<int, int>>();
				for (int num143 = num4; num143 <= num5; num143++)
				{
					for (int num144 = num6; num144 <= num7; num144++)
					{
						Tile tile32 = Main.tile[num143, num144];
						if (tile32.liquid > 0)
						{
							int num145 = (int)tile32.liquidType();
							int num146 = 0;
							for (int num147 = num143 - 1; num147 <= num143 + 1; num147++)
							{
								for (int num148 = num144 - 1; num148 <= num144 + 1; num148++)
								{
									if ((int)Main.tile[num147, num148].liquidType() == num145)
									{
										num146 += (int)Main.tile[num147, num148].liquid;
									}
								}
							}
							if (num146 > 100)
							{
								list27.Add(new Tuple<int, int>(num143, num144));
							}
						}
					}
				}
				if (list27.Count > 0)
				{
					float num149 = -1f;
					Tuple<int, int> tuple26 = list27[0];
					for (int num150 = 0; num150 < list27.Count; num150++)
					{
						float num151 = Vector2.Distance(new Vector2((float)list27[num150].Item1, (float)list27[num150].Item2) * 16f + Vector2.One * 8f, vector);
						if (num149 == -1f || num151 < num149)
						{
							num149 = num151;
							tuple26 = list27[num150];
						}
					}
					if (Collision.InTileBounds(tuple26.Item1, tuple26.Item2, num4, num6, num5, num7))
					{
						num8 = tuple26.Item1;
						num9 = tuple26.Item2;
					}
				}
				list27.Clear();
			}
			if (item.type == 849 && num8 == -1 && num9 == -1)
			{
				List<Tuple<int, int>> list28 = new List<Tuple<int, int>>();
				for (int num152 = num4; num152 <= num5; num152++)
				{
					for (int num153 = num6; num153 <= num7; num153++)
					{
						Tile tile33 = Main.tile[num152, num153];
						if ((tile33.wire() || tile33.wire2() || tile33.wire3() || tile33.wire4()) && !tile33.actuator() && tile33.active())
						{
							list28.Add(new Tuple<int, int>(num152, num153));
						}
					}
				}
				if (list28.Count > 0)
				{
					float num154 = -1f;
					Tuple<int, int> tuple27 = list28[0];
					for (int num155 = 0; num155 < list28.Count; num155++)
					{
						float num156 = Vector2.Distance(new Vector2((float)list28[num155].Item1, (float)list28[num155].Item2) * 16f + Vector2.One * 8f, vector);
						if (num154 == -1f || num156 < num154)
						{
							num154 = num156;
							tuple27 = list28[num155];
						}
					}
					if (Collision.InTileBounds(tuple27.Item1, tuple27.Item2, num4, num6, num5, num7))
					{
						num8 = tuple27.Item1;
						num9 = tuple27.Item2;
					}
				}
				list28.Clear();
			}
			if (item.createTile == 82 && num8 == -1 && num9 == -1)
			{
				int placeStyle = item.placeStyle;
				List<Tuple<int, int>> list29 = new List<Tuple<int, int>>();
				for (int num157 = num4; num157 <= num5; num157++)
				{
					for (int num158 = num6; num158 <= num7; num158++)
					{
						Tile tile34 = Main.tile[num157, num158];
						Tile tile35 = Main.tile[num157, num158 + 1];
						if ((!tile34.active() || TileID.Sets.BreakableWhenPlacing[(int)tile34.type] || (Main.tileCut[(int)tile34.type] && tile34.type != 82 && tile34.type != 83)) && tile35.nactive() && !tile35.halfBrick() && tile35.slope() == 0)
						{
							if (placeStyle == 0)
							{
								if (tile35.type != 78 && tile35.type != 380 && tile35.type != 2 && tile35.type != 109)
								{
									goto IL_4C65;
								}
								if (tile34.liquid > 0)
								{
									goto IL_4C65;
								}
							}
							else if (placeStyle == 1)
							{
								if (tile35.type != 78 && tile35.type != 380 && tile35.type != 60)
								{
									goto IL_4C65;
								}
								if (tile34.liquid > 0)
								{
									goto IL_4C65;
								}
							}
							else if (placeStyle == 2)
							{
								if (tile35.type != 78 && tile35.type != 380 && tile35.type != 0 && tile35.type != 59)
								{
									goto IL_4C65;
								}
								if (tile34.liquid > 0)
								{
									goto IL_4C65;
								}
							}
							else if (placeStyle == 3)
							{
								if (tile35.type != 78 && tile35.type != 380 && tile35.type != 203 && tile35.type != 199 && tile35.type != 23 && tile35.type != 25)
								{
									goto IL_4C65;
								}
								if (tile34.liquid > 0)
								{
									goto IL_4C65;
								}
							}
							else if (placeStyle == 4)
							{
								if (tile35.type != 78 && tile35.type != 380 && tile35.type != 53 && tile35.type != 116)
								{
									goto IL_4C65;
								}
								if (tile34.liquid > 0 && tile34.lava())
								{
									goto IL_4C65;
								}
							}
							else if (placeStyle == 5)
							{
								if (tile35.type != 78 && tile35.type != 380 && tile35.type != 57)
								{
									goto IL_4C65;
								}
								if (tile34.liquid > 0 && !tile34.lava())
								{
									goto IL_4C65;
								}
							}
							else if (placeStyle == 6 && ((tile35.type != 78 && tile35.type != 380 && tile35.type != 147 && tile35.type != 161 && tile35.type != 163 && tile35.type != 164 && tile35.type != 200) || (tile34.liquid > 0 && tile34.lava())))
							{
								goto IL_4C65;
							}
							list29.Add(new Tuple<int, int>(num157, num158));
						}
						IL_4C65:
						;
					}
				}
				if (list29.Count > 0)
				{
					float num159 = -1f;
					Tuple<int, int> tuple28 = list29[0];
					for (int num160 = 0; num160 < list29.Count; num160++)
					{
						float num161 = Vector2.Distance(new Vector2((float)list29[num160].Item1, (float)list29[num160].Item2) * 16f + Vector2.One * 8f, vector);
						if (num159 == -1f || num161 < num159)
						{
							num159 = num161;
							tuple28 = list29[num160];
						}
					}
					if (Collision.InTileBounds(tuple28.Item1, tuple28.Item2, num4, num6, num5, num7))
					{
						num8 = tuple28.Item1;
						num9 = tuple28.Item2;
					}
				}
				list29.Clear();
			}
			if (item.createTile == 380 && num8 == -1 && num9 == -1)
			{
				List<Tuple<int, int>> list30 = new List<Tuple<int, int>>();
				bool flag23 = false;
				if (Main.tile[num, num2].active() && Main.tile[num, num2].type == 380)
				{
					flag23 = true;
				}
				if (!flag23)
				{
					for (int num162 = num4; num162 <= num5; num162++)
					{
						for (int num163 = num6; num163 <= num7; num163++)
						{
							Tile tile36 = Main.tile[num162, num163];
							if (tile36.active() && tile36.type == 380)
							{
								if (!Main.tile[num162 - 1, num163].active() || Main.tileCut[(int)Main.tile[num162 - 1, num163].type] || TileID.Sets.BreakableWhenPlacing[(int)Main.tile[num162 - 1, num163].type])
								{
									list30.Add(new Tuple<int, int>(num162 - 1, num163));
								}
								if (!Main.tile[num162 + 1, num163].active() || Main.tileCut[(int)Main.tile[num162 + 1, num163].type] || TileID.Sets.BreakableWhenPlacing[(int)Main.tile[num162 + 1, num163].type])
								{
									list30.Add(new Tuple<int, int>(num162 + 1, num163));
								}
							}
						}
					}
				}
				if (list30.Count > 0)
				{
					float num164 = -1f;
					Tuple<int, int> tuple29 = list30[0];
					for (int num165 = 0; num165 < list30.Count; num165++)
					{
						float num166 = Vector2.Distance(new Vector2((float)list30[num165].Item1, (float)list30[num165].Item2) * 16f + Vector2.One * 8f, vector);
						if (num164 == -1f || num166 < num164)
						{
							num164 = num166;
							tuple29 = list30[num165];
						}
					}
					if (Collision.InTileBounds(tuple29.Item1, tuple29.Item2, num4, num6, num5, num7) && num164 != -1f)
					{
						num8 = tuple29.Item1;
						num9 = tuple29.Item2;
					}
				}
				list30.Clear();
			}
			if (item.createTile == 78 && num8 == -1 && num9 == -1)
			{
				List<Tuple<int, int>> list31 = new List<Tuple<int, int>>();
				bool flag24 = false;
				if (Main.tile[num, num2].active())
				{
					flag24 = true;
				}
				if (!Collision.InTileBounds(num, num2, num4, num6, num5, num7))
				{
					flag24 = true;
				}
				if (!flag24)
				{
					for (int num167 = num4; num167 <= num5; num167++)
					{
						for (int num168 = num6; num168 <= num7; num168++)
						{
							Tile tile37 = Main.tile[num167, num168];
							Tile tile38 = Main.tile[num167, num168 + 1];
							if ((!tile37.active() || Main.tileCut[(int)tile37.type] || TileID.Sets.BreakableWhenPlacing[(int)tile37.type]) && tile38.nactive() && !tile38.halfBrick() && tile38.slope() == 0 && Main.tileSolid[(int)tile38.type])
							{
								list31.Add(new Tuple<int, int>(num167, num168));
							}
						}
					}
				}
				if (list31.Count > 0)
				{
					float num169 = -1f;
					Tuple<int, int> tuple30 = list31[0];
					for (int num170 = 0; num170 < list31.Count; num170++)
					{
						if (Collision.EmptyTile(list31[num170].Item1, list31[num170].Item2, true))
						{
							float num171 = Vector2.Distance(new Vector2((float)list31[num170].Item1, (float)list31[num170].Item2) * 16f + Vector2.One * 8f, vector);
							if (num169 == -1f || num171 < num169)
							{
								num169 = num171;
								tuple30 = list31[num170];
							}
						}
					}
					if (Collision.InTileBounds(tuple30.Item1, tuple30.Item2, num4, num6, num5, num7) && num169 != -1f)
					{
						num8 = tuple30.Item1;
						num9 = tuple30.Item2;
					}
				}
				list31.Clear();
			}
			if (item.type == 213 && num8 == -1 && num9 == -1)
			{
				List<Tuple<int, int>> list32 = new List<Tuple<int, int>>();
				for (int num172 = num4; num172 <= num5; num172++)
				{
					for (int num173 = num6; num173 <= num7; num173++)
					{
						Tile tile39 = Main.tile[num172, num173];
						bool flag25 = !Main.tile[num172 - 1, num173].active() || !Main.tile[num172, num173 + 1].active() || !Main.tile[num172 + 1, num173].active() || !Main.tile[num172, num173 - 1].active();
						bool flag26 = !Main.tile[num172 - 1, num173 - 1].active() || !Main.tile[num172 - 1, num173 + 1].active() || !Main.tile[num172 + 1, num173 + 1].active() || !Main.tile[num172 + 1, num173 - 1].active();
						if (tile39.active() && !tile39.inActive() && (tile39.type == 0 || tile39.type == 1) && (flag25 || (tile39.type == 0 && flag26)))
						{
							list32.Add(new Tuple<int, int>(num172, num173));
						}
					}
				}
				if (list32.Count > 0)
				{
					float num174 = -1f;
					Tuple<int, int> tuple31 = list32[0];
					for (int num175 = 0; num175 < list32.Count; num175++)
					{
						float num176 = Vector2.Distance(new Vector2((float)list32[num175].Item1, (float)list32[num175].Item2) * 16f + Vector2.One * 8f, vector);
						if (num174 == -1f || num176 < num174)
						{
							num174 = num176;
							tuple31 = list32[num175];
						}
					}
					if (Collision.InTileBounds(tuple31.Item1, tuple31.Item2, num4, num6, num5, num7))
					{
						num8 = tuple31.Item1;
						num9 = tuple31.Item2;
					}
				}
				list32.Clear();
			}
			if (num8 != -1 && num9 != -1)
			{
				Main.SmartCursorX = (Player.tileTargetX = num8);
				Main.SmartCursorY = (Player.tileTargetY = num9);
				Main.SmartCursorShowing = true;
			}
			list.Clear();
		}

		public void SmartInteractLookup()
		{
			if (this.whoAmI != Main.myPlayer)
			{
				return;
			}
			Main.SmartInteractShowingGenuine = false;
			Main.SmartInteractShowingFake = false;
			Main.SmartInteractNPC = -1;
			Main.SmartInteractNPCsNearby.Clear();
			Main.SmartInteractTileCoords.Clear();
			Main.SmartInteractTileCoordsSelected.Clear();
			Main.TileInteractionLX = (Main.TileInteractionHX = (Main.TileInteractionLY = (Main.TileInteractionHY = -1)));
			bool smartCursorEnabled = Main.SmartCursorEnabled;
			if (!smartCursorEnabled && !PlayerInput.UsingGamepad)
			{
				return;
			}
			Item arg_74_0 = this.inventory[this.selectedItem];
			Vector2 value = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY);
			if (this.gravDir == -1f)
			{
				value.Y = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY;
			}
			int num = Player.tileTargetX;
			int num2 = Player.tileTargetY;
			if (num < 10)
			{
				num = 10;
			}
			if (num > Main.maxTilesX - 10)
			{
				num = Main.maxTilesX - 10;
			}
			if (num2 < 10)
			{
				num2 = 10;
			}
			if (num2 > Main.maxTilesY - 10)
			{
				num2 = Main.maxTilesY - 10;
			}
			bool flag = false;
			if (Main.tile[num, num2] == null)
			{
				return;
			}
			if (Main.tile[num, num2].active())
			{
				ushort type = Main.tile[num, num2].type;
				if (type <= 334)
				{
					if (type != 4 && type != 33 && type != 334)
					{
						goto IL_176;
					}
				}
				else if (type != 395 && type != 410 && type != 455)
				{
					goto IL_176;
				}
				flag = true;
			}
			IL_176:
			if (flag)
			{
				return;
			}
			int num3 = 0;
			int num4 = (int)(this.position.X / 16f) - Player.tileRangeX - num3 + 1;
			int num5 = (int)((this.position.X + (float)this.width) / 16f) + Player.tileRangeX + num3 - 1;
			int num6 = (int)(this.position.Y / 16f) - Player.tileRangeY - num3 + 1;
			int num7 = (int)((this.position.Y + (float)this.height) / 16f) + Player.tileRangeY + num3 - 2;
			num4 = Utils.Clamp<int>(num4, 10, Main.maxTilesX - 10);
			num5 = Utils.Clamp<int>(num5, 10, Main.maxTilesX - 10);
			num6 = Utils.Clamp<int>(num6, 10, Main.maxTilesY - 10);
			num7 = Utils.Clamp<int>(num7, 10, Main.maxTilesY - 10);
			List<Tuple<int, int>> list = new List<Tuple<int, int>>();
			for (int i = 0; i < this.grapCount; i++)
			{
				Projectile projectile = Main.projectile[this.grappling[i]];
				int item = (int)projectile.Center.X / 16;
				int item2 = (int)projectile.Center.Y / 16;
				list.Add(new Tuple<int, int>(item, item2));
			}
			int num8 = -1;
			int num9 = -1;
			int num10 = -1;
			Vector2 point = Main.ReverseGravitySupport(Main.MouseScreen, 0f) + Main.screenPosition;
			if (num8 == -1 && num9 == -1)
			{
				List<Tuple<int, int>> list2 = new List<Tuple<int, int>>();
				for (int j = num4; j <= num5; j++)
				{
					for (int k = num6; k <= num7; k++)
					{
						Tile tile = Main.tile[j, k];
						if (tile.active())
						{
							ushort type2 = tile.type;
							if (type2 <= 144)
							{
								if (type2 <= 88)
								{
									if (type2 <= 29)
									{
										switch (type2)
										{
											case 10:
											case 11:
												break;
											default:
												if (type2 != 21 && type2 != 29)
												{
													goto IL_5A8;
												}
												break;
										}
									}
									else if (type2 <= 79)
									{
										if (type2 != 55 && type2 != 79)
										{
											goto IL_5A8;
										}
									}
									else if (type2 != 85 && type2 != 88)
									{
										goto IL_5A8;
									}
								}
								else if (type2 <= 125)
								{
									if (type2 != 97 && type2 != 104 && type2 != 125)
									{
										goto IL_5A8;
									}
								}
								else if (type2 <= 136)
								{
									if (type2 != 132 && type2 != 136)
									{
										goto IL_5A8;
									}
								}
								else if (type2 != 139 && type2 != 144)
								{
									goto IL_5A8;
								}
							}
							else if (type2 <= 356)
							{
								if (type2 <= 237)
								{
									switch (type2)
									{
										case 207:
										case 209:
											break;
										case 208:
											goto IL_5A8;
										default:
											switch (type2)
											{
												case 212:
													if (this.HasItem(949))
													{
														list2.Add(new Tuple<int, int>(j, k));
														goto IL_5A8;
													}
													goto IL_5A8;
												case 213:
												case 214:
													goto IL_5A8;
												case 215:
												case 216:
													break;
												default:
													if (type2 != 237)
													{
														goto IL_5A8;
													}
													if (this.HasItem(1293))
													{
														list2.Add(new Tuple<int, int>(j, k));
														goto IL_5A8;
													}
													goto IL_5A8;
											}
											break;
									}
								}
								else if (type2 <= 335)
								{
									if (type2 != 287 && type2 != 335)
									{
										goto IL_5A8;
									}
								}
								else if (type2 != 338)
								{
									switch (type2)
									{
										case 354:
											break;
										case 355:
											goto IL_5A8;
										case 356:
											if (!Main.fastForwardTime && (Main.netMode == 1 || Main.sundialCooldown == 0))
											{
												list2.Add(new Tuple<int, int>(j, k));
												goto IL_5A8;
											}
											goto IL_5A8;
										default:
											goto IL_5A8;
									}
								}
							}
							else if (type2 <= 411)
							{
								if (type2 != 377)
								{
									switch (type2)
									{
										case 386:
										case 387:
										case 388:
										case 389:
											break;
										default:
											switch (type2)
											{
												case 410:
												case 411:
													break;
												default:
													goto IL_5A8;
											}
											break;
									}
								}
							}
							else if (type2 <= 441)
							{
								if (type2 != 425 && type2 != 441)
								{
									goto IL_5A8;
								}
							}
							else if (type2 != 455 && type2 != 463)
							{
								goto IL_5A8;
							}
							list2.Add(new Tuple<int, int>(j, k));
						}
						IL_5A8:
						;
					}
				}
				if (list2.Count > 0)
				{
					float num11 = -1f;
					Tuple<int, int> tuple = list2[0];
					for (int l = 0; l < list2.Count; l++)
					{
						float num12 = Vector2.Distance(new Vector2((float)list2[l].Item1, (float)list2[l].Item2) * 16f + Vector2.One * 8f, value);
						if (num11 == -1f || num12 < num11)
						{
							num11 = num12;
							tuple = list2[l];
						}
					}
					if (Collision.InTileBounds(tuple.Item1, tuple.Item2, num4, num6, num5, num7))
					{
						num8 = tuple.Item1;
						num9 = tuple.Item2;
					}
				}
				bool flag2 = false;
				int m = 0;
				while (m < list2.Count)
				{
					int item3 = list2[m].Item1;
					int item4 = list2[m].Item2;
					Tile tile2 = Main.tile[item3, item4];
					int num13 = 0;
					int num14 = 0;
					int num15 = 18;
					int num16 = 18;
					int num17 = 0;
					int num18 = 2;
					ushort type3 = tile2.type;
					if (type3 <= 144)
					{
						if (type3 <= 88)
						{
							if (type3 <= 29)
							{
								switch (type3)
								{
									case 10:
										num13 = 1;
										num14 = 3;
										num18 = 0;
										break;
									case 11:
										goto IL_943;
									default:
										if (type3 == 21)
										{
											goto IL_930;
										}
										if (type3 == 29)
										{
											goto IL_928;
										}
										break;
								}
							}
							else if (type3 <= 79)
							{
								if (type3 == 55)
								{
									goto IL_930;
								}
								if (type3 == 79)
								{
									num13 = 4;
									num14 = 2;
									num18 = 0;
								}
							}
							else
							{
								if (type3 == 85)
								{
									goto IL_930;
								}
								if (type3 == 88)
								{
									num13 = 3;
									num14 = 1;
									num18 = 0;
								}
							}
						}
						else if (type3 <= 125)
						{
							if (type3 == 97)
							{
								goto IL_930;
							}
							if (type3 != 104)
							{
								if (type3 == 125)
								{
									goto IL_930;
								}
							}
							else
							{
								num13 = 2;
								num14 = 5;
							}
						}
						else
						{
							if (type3 <= 136)
							{
								if (type3 == 132)
								{
									goto IL_930;
								}
								if (type3 != 136)
								{
									goto IL_99B;
								}
							}
							else
							{
								if (type3 == 139)
								{
									num13 = 2;
									num14 = 2;
									num18 = 0;
									goto IL_99B;
								}
								if (type3 != 144)
								{
									goto IL_99B;
								}
							}
							num13 = 1;
							num14 = 1;
							num18 = 0;
						}
					}
					else
					{
						if (type3 <= 356)
						{
							if (type3 <= 237)
							{
								switch (type3)
								{
									case 207:
										num13 = 2;
										num14 = 4;
										num18 = 0;
										goto IL_99B;
									case 208:
										goto IL_99B;
									case 209:
										num13 = 4;
										num14 = 3;
										num18 = 0;
										goto IL_99B;
									default:
										switch (type3)
										{
											case 212:
												num13 = 4;
												num14 = 3;
												goto IL_99B;
											case 213:
											case 214:
												goto IL_99B;
											case 215:
												goto IL_96C;
											case 216:
												break;
											default:
												if (type3 != 237)
												{
													goto IL_99B;
												}
												goto IL_96C;
										}
										break;
								}
							}
							else if (type3 <= 335)
							{
								if (type3 != 287 && type3 != 335)
								{
									goto IL_99B;
								}
								goto IL_930;
							}
							else if (type3 != 338)
							{
								switch (type3)
								{
									case 354:
										goto IL_974;
									case 355:
										goto IL_99B;
									case 356:
										goto IL_943;
									default:
										goto IL_99B;
								}
							}
							num13 = 1;
							num14 = 2;
							goto IL_99B;
						}
						if (type3 <= 411)
						{
							if (type3 != 377)
							{
								switch (type3)
								{
									case 386:
										goto IL_930;
									case 387:
										goto IL_928;
									case 388:
									case 389:
										num13 = 1;
										num14 = 5;
										goto IL_99B;
									default:
										switch (type3)
										{
											case 410:
												goto IL_943;
											case 411:
												goto IL_930;
											default:
												goto IL_99B;
										}
										break;
								}
							}
						}
						else if (type3 <= 441)
						{
							if (type3 != 425 && type3 != 441)
							{
								goto IL_99B;
							}
							goto IL_930;
						}
						else
						{
							if (type3 == 455)
							{
								goto IL_974;
							}
							if (type3 != 463)
							{
								goto IL_99B;
							}
							goto IL_930;
						}
						IL_96C:
						num13 = 3;
						num14 = 2;
						goto IL_99B;
						IL_974:
						num13 = 3;
						num14 = 3;
						num18 = 0;
					}
					IL_99B:
					if (num13 != 0 && num14 != 0)
					{
						int num19 = item3 - (int)tile2.frameX % (num15 * num13 + num17) / num15;
						int num20 = item4 - (int)tile2.frameY % (num16 * num14 + num18) / num16;
						bool flag3 = Collision.InTileBounds(num8, num9, num19, num20, num19 + num13 - 1, num20 + num14 - 1);
						if (!smartCursorEnabled)
						{
							flag3 = (flag3 && Collision.InTileBounds((int)value.X / 16, (int)value.Y / 16, num19, num20, num19 + num13 - 1, num20 + num14 - 1));
						}
						if (flag2)
						{
							flag3 = false;
						}
						if (!flag2 && flag3)
						{
							flag2 = true;
						}
						for (int n = num19; n < num19 + num13; n++)
						{
							for (int num21 = num20; num21 < num20 + num14; num21++)
							{
								Point item5 = new Point(n, num21);
								if (!Main.SmartInteractTileCoords.Contains(item5))
								{
									if (flag3)
									{
										Main.SmartInteractTileCoordsSelected.Add(item5);
									}
									if (flag3 || smartCursorEnabled)
									{
										Main.SmartInteractTileCoords.Add(item5);
									}
								}
							}
						}
					}
					m++;
					continue;
					IL_928:
					num13 = 2;
					num14 = 1;
					goto IL_99B;
					IL_930:
					num13 = 2;
					num14 = 2;
					goto IL_99B;
					IL_943:
					num13 = 2;
					num14 = 3;
					num18 = 0;
					goto IL_99B;
				}
				list2.Clear();
			}
			if (num10 == -1 && smartCursorEnabled)
			{
				Rectangle value2 = new Rectangle(num4 * 16, num6 * 16, (num5 - num4) * 16 + 16, (num7 - num6) * 16 + 16);
				bool flag4 = false;
				for (int num22 = 0; num22 < 200; num22++)
				{
					NPC nPC = Main.npc[num22];
					if (nPC.active && nPC.townNPC && nPC.Hitbox.Intersects(value2))
					{
						Main.SmartInteractNPCsNearby.Add(num22);
						if (!flag4)
						{
							float num23 = nPC.Hitbox.Distance(point);
							bool flag5 = num10 == -1 || Main.npc[num10].Hitbox.Distance(point) > num23;
							if (flag5)
							{
								num10 = num22;
							}
							if (num23 == 0f)
							{
								flag4 = true;
								num10 = num22;
								break;
							}
						}
					}
				}
				if (flag4)
				{
					num9 = (num8 = -1);
					Main.SmartInteractTileCoordsSelected.Clear();
				}
			}
			if (num8 != -1 && num9 != -1 && num10 != -1)
			{
				Rectangle r = new Rectangle(num8 * 16, num9 * 16, 16, 16);
				Rectangle hitbox = Main.npc[num10].Hitbox;
				if (r.Distance(point) < hitbox.Distance(point))
				{
					num10 = -1;
				}
				else
				{
					num9 = (num8 = -1);
					Main.SmartInteractTileCoordsSelected.Clear();
				}
			}
			if (UILinkPointNavigator.InUse || (PlayerInput.UsingGamepad && Main.HoveringOverAnNPC))
			{
				Main.SmartInteractTileCoordsSelected.Clear();
			}
			if (PlayerInput.UsingGamepad && !Main.SmartCursorEnabled)
			{
				if (num8 != -1 && num9 != -1)
				{
					Main.TileInteractionLX = num4 - 10;
					Main.TileInteractionLY = num6 - 10;
					Main.TileInteractionHX = num5 + 10;
					Main.TileInteractionHY = num7 + 10;
					Main.SmartInteractShowingFake = (Main.SmartInteractTileCoords.Count > 0);
				}
			}
			else
			{
				if (num8 != -1 && num9 != -1)
				{
					Main.SmartInteractX = num8;
					Main.SmartInteractY = num9;
					Main.SmartInteractShowingGenuine = true;
					Main.TileInteractionLX = num4 - 10;
					Main.TileInteractionLY = num6 - 10;
					Main.TileInteractionHX = num5 + 10;
					Main.TileInteractionHY = num7 + 10;
				}
				if (num10 != -1)
				{
					Main.SmartInteractNPC = num10;
					Main.SmartInteractShowingGenuine = true;
				}
			}
			list.Clear();
		}

		private static void SmartCursor_Axe(Item item, ref Vector2 mouse, int LX, int HX, int LY, int HY, ref int fX, ref int fY)
		{
			if (item.axe > 0 && fX == -1 && fY == -1)
			{
				float num = -1f;
				for (int i = LX; i <= HX; i++)
				{
					for (int j = LY; j <= HY; j++)
					{
						if (Main.tile[i, j].active())
						{
							Tile tile = Main.tile[i, j];
							if (Main.tileAxe[(int)tile.type])
							{
								int num2 = i;
								int num3 = j;
								if (tile.type == 5)
								{
									if (Collision.InTileBounds(num2 + 1, num3, LX, LY, HX, HY))
									{
										if (Main.tile[num2, num3].frameY >= 198 && Main.tile[num2, num3].frameX == 44)
										{
											num2++;
										}
										if (Main.tile[num2, num3].frameX == 66 && Main.tile[num2, num3].frameY <= 44)
										{
											num2++;
										}
										if (Main.tile[num2, num3].frameX == 44 && Main.tile[num2, num3].frameY >= 132 && Main.tile[num2, num3].frameY <= 176)
										{
											num2++;
										}
									}
									if (Collision.InTileBounds(num2 - 1, num3, LX, LY, HX, HY))
									{
										if (Main.tile[num2, num3].frameY >= 198 && Main.tile[num2, num3].frameX == 66)
										{
											num2--;
										}
										if (Main.tile[num2, num3].frameX == 88 && Main.tile[num2, num3].frameY >= 66 && Main.tile[num2, num3].frameY <= 110)
										{
											num2--;
										}
										if (Main.tile[num2, num3].frameX == 22 && Main.tile[num2, num3].frameY >= 132 && Main.tile[num2, num3].frameY <= 176)
										{
											num2--;
										}
									}
									while (Main.tile[num2, num3].active() && Main.tile[num2, num3].type == 5 && Main.tile[num2, num3 + 1].type == 5 && Collision.InTileBounds(num2, num3 + 1, LX, LY, HX, HY))
									{
										num3++;
									}
								}
								if (tile.type == 80)
								{
									if (Collision.InTileBounds(num2 + 1, num3, LX, LY, HX, HY))
									{
										if (Main.tile[num2, num3].frameX == 54)
										{
											num2++;
										}
										if (Main.tile[num2, num3].frameX == 108 && Main.tile[num2, num3].frameY == 36)
										{
											num2++;
										}
									}
									if (Collision.InTileBounds(num2 - 1, num3, LX, LY, HX, HY))
									{
										if (Main.tile[num2, num3].frameX == 36)
										{
											num2--;
										}
										if (Main.tile[num2, num3].frameX == 108 && Main.tile[num2, num3].frameY == 18)
										{
											num2--;
										}
									}
									while (Main.tile[num2, num3].active() && Main.tile[num2, num3].type == 80 && Main.tile[num2, num3 + 1].type == 80 && Collision.InTileBounds(num2, num3 + 1, LX, LY, HX, HY))
									{
										num3++;
									}
								}
								if (tile.type != 323)
								{
									if (tile.type != 72)
									{
										goto IL_47A;
									}
								}
								while (Main.tile[num2, num3].active() && ((Main.tile[num2, num3].type == 323 && Main.tile[num2, num3 + 1].type == 323) || (Main.tile[num2, num3].type == 72 && Main.tile[num2, num3 + 1].type == 72)) && Collision.InTileBounds(num2, num3 + 1, LX, LY, HX, HY))
								{
									num3++;
								}
								IL_47A:
								float num4 = Vector2.Distance(new Vector2((float)num2, (float)num3) * 16f + Vector2.One * 8f, mouse);
								if (num == -1f || num4 < num)
								{
									num = num4;
									fX = num2;
									fY = num3;
								}
							}
						}
					}
				}
			}
		}

		private static void SmartCursor_Filling(Item item, ref Vector2 mouse, int LX, int HX, int LY, int HY, ref int fX, ref int fY, int tX, int tY)
		{
			if (!Player.SmartCursorSettings.SmartBlocksEnabled && item.createTile > -1 && item.type != 213 && Main.tileSolid[item.createTile] && !Main.tileSolidTop[item.createTile] && !Main.tileFrameImportant[item.createTile] && fX == -1 && fY == -1)
			{
				List<Tuple<int, int>> list = new List<Tuple<int, int>>();
				bool flag = false;
				if (Main.tile[tX, tY].active())
				{
					flag = true;
				}
				if (!Collision.InTileBounds(tX, tY, LX, LY, HX, HY))
				{
					flag = true;
				}
				if (!flag)
				{
					for (int i = LX; i <= HX; i++)
					{
						for (int j = LY; j <= HY; j++)
						{
							Tile tile = Main.tile[i, j];
							if (!tile.active() || Main.tileCut[(int)tile.type] || TileID.Sets.BreakableWhenPlacing[(int)tile.type])
							{
								int num = 0;
								if (Main.tile[i - 1, j].active() && Main.tileSolid[(int)Main.tile[i - 1, j].type] && !Main.tileSolidTop[(int)Main.tile[i - 1, j].type])
								{
									num++;
								}
								if (Main.tile[i + 1, j].active() && Main.tileSolid[(int)Main.tile[i + 1, j].type] && !Main.tileSolidTop[(int)Main.tile[i + 1, j].type])
								{
									num++;
								}
								if (Main.tile[i, j - 1].active() && Main.tileSolid[(int)Main.tile[i, j - 1].type] && !Main.tileSolidTop[(int)Main.tile[i, j - 1].type])
								{
									num++;
								}
								if (Main.tile[i, j + 1].active() && Main.tileSolid[(int)Main.tile[i, j + 1].type] && !Main.tileSolidTop[(int)Main.tile[i, j + 1].type])
								{
									num++;
								}
								if (num >= 2)
								{
									list.Add(new Tuple<int, int>(i, j));
								}
							}
						}
					}
				}
				if (list.Count > 0)
				{
					float num2 = -1f;
					float num3 = float.PositiveInfinity;
					Tuple<int, int> tuple = list[0];
					for (int k = 0; k < list.Count; k++)
					{
						if (Collision.EmptyTile(list[k].Item1, list[k].Item2, true))
						{
							Vector2 vector = new Vector2((float)list[k].Item1, (float)list[k].Item2) * 16f + Vector2.One * 8f - mouse;
							bool flag2 = false;
							float num4 = Math.Abs(vector.X);
							float num5 = vector.Length();
							if (num4 < num3)
							{
								flag2 = true;
							}
							if (num4 == num3 && (num2 == -1f || num5 < num2))
							{
								flag2 = true;
							}
							if (flag2)
							{
								num2 = num5;
								num3 = num4;
								tuple = list[k];
							}
						}
					}
					if (Collision.InTileBounds(tuple.Item1, tuple.Item2, LX, LY, HX, HY) && num2 != -1f)
					{
						fX = tuple.Item1;
						fY = tuple.Item2;
					}
				}
				list.Clear();
			}
		}

		private static void SmartCursor_Torch(Item item, ref Vector2 mouse, int LX, int HX, int LY, int HY, ref int fX, ref int fY, int tX, int tY)
		{
			if (item.createTile == 4 && fX == -1 && fY == -1)
			{
				List<Tuple<int, int>> list = new List<Tuple<int, int>>();
				bool flag = item.type != 1333 && item.type != 523;
				for (int i = LX; i <= HX; i++)
				{
					for (int j = LY; j <= HY; j++)
					{
						Tile tile = Main.tile[i, j];
						Tile tile2 = Main.tile[i - 1, j];
						Tile tile3 = Main.tile[i + 1, j];
						Tile tile4 = Main.tile[i, j + 1];
						if (!tile.active() || TileID.Sets.BreakableWhenPlacing[(int)tile.type] || (Main.tileCut[(int)tile.type] && tile.type != 82 && tile.type != 83))
						{
							bool flag2 = false;
							for (int k = i - 7; k <= i + 7; k++)
							{
								for (int l = j - 7; l <= j + 7; l++)
								{
									if (Main.tile[k, l] != null && Main.tile[k, l].type == 4)
									{
										flag2 = true;
										break;
									}
								}
								if (flag2)
								{
									break;
								}
							}
							if (!flag2 && (!flag || tile.liquid <= 0) && (tile.wall > 0 || (tile2.active() && (tile2.slope() == 0 || tile2.slope() % 2 != 1) && ((Main.tileSolid[(int)tile2.type] && !Main.tileNoAttach[(int)tile2.type] && !Main.tileSolidTop[(int)tile2.type] && !TileID.Sets.NotReallySolid[(int)tile2.type]) || tile2.type == 124 || (tile2.type == 5 && Main.tile[i - 1, j - 1].type == 5 && Main.tile[i - 1, j + 1].type == 5))) || (tile3.active() && (tile3.slope() == 0 || tile3.slope() % 2 != 0) && ((Main.tileSolid[(int)tile3.type] && !Main.tileNoAttach[(int)tile3.type] && !Main.tileSolidTop[(int)tile3.type] && !TileID.Sets.NotReallySolid[(int)tile3.type]) || tile3.type == 124 || (tile3.type == 5 && Main.tile[i + 1, j - 1].type == 5 && Main.tile[i + 1, j + 1].type == 5))) || (tile4.active() && Main.tileSolid[(int)tile4.type] && !Main.tileNoAttach[(int)tile4.type] && (!Main.tileSolidTop[(int)tile4.type] || (TileID.Sets.Platforms[(int)tile4.type] && tile4.slope() == 0)) && !TileID.Sets.NotReallySolid[(int)tile4.type] && !tile4.halfBrick() && tile4.slope() == 0)) && tile.type != 4)
							{
								list.Add(new Tuple<int, int>(i, j));
							}
						}
					}
				}
				if (list.Count > 0)
				{
					float num = -1f;
					Tuple<int, int> tuple = list[0];
					for (int m = 0; m < list.Count; m++)
					{
						float num2 = Vector2.Distance(new Vector2((float)list[m].Item1, (float)list[m].Item2) * 16f + Vector2.One * 8f, mouse);
						if (num == -1f || num2 < num)
						{
							num = num2;
							tuple = list[m];
						}
					}
					if (Collision.InTileBounds(tuple.Item1, tuple.Item2, LX, LY, HX, HY))
					{
						fX = tuple.Item1;
						fY = tuple.Item2;
					}
				}
				list.Clear();
			}
		}

		public void SmartSelectLookup()
		{
			if (this.controlTorch && this.itemAnimation == 0)
			{
				int num = 0;
				//patch file: num2, num3
				int num2 = (int)(((float)Main.mouseX + Main.screenPosition.X) / 16f);
				int num3 = (int)(((float)Main.mouseY + Main.screenPosition.Y) / 16f);
				if (this.gravDir == -1f)
				{
					num3 = (int)((Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY) / 16f);
				}
				int num4 = -10;
				int num5 = -10;
				int num6 = -10;
				int num7 = -10;
				int num8 = -10;
				for (int i = 0; i < 50; i++)
				{
					if (this.inventory[i].pick > 0 && num4 == -10)
					{
						num4 = this.inventory[i].tileBoost;
					}
					if (this.inventory[i].axe > 0 && num5 == -10)
					{
						num5 = this.inventory[i].tileBoost;
					}
					if (this.inventory[i].hammer > 0 && num6 == -10)
					{
						num6 = this.inventory[i].tileBoost;
					}
					if ((this.inventory[i].type == 929 || this.inventory[i].type == 1338 || this.inventory[i].type == 1345) && num7 == -10)
					{
						num7 = this.inventory[i].tileBoost;
					}
					if (ItemID.Sets.ExtractinatorMode[this.inventory[i].type] >= 0 && num8 == -10)
					{
						num8 = this.inventory[i].tileBoost;
					}
				}
				int num9 = 0;
				int num10 = 0;
				if (this.position.X / 16f >= (float)num2)
				{
					num9 = (int)(this.position.X / 16f) - num2;
				}
				if ((this.position.X + (float)this.width) / 16f <= (float)num2)
				{
					num9 = num2 - (int)((this.position.X + (float)this.width) / 16f);
				}
				if (this.position.Y / 16f >= (float)num3)
				{
					num10 = (int)(this.position.Y / 16f) - num3;
				}
				if ((this.position.Y + (float)this.height) / 16f <= (float)num3)
				{
					num10 = num3 - (int)((this.position.Y + (float)this.height) / 16f);
				}
				bool flag = false;
				bool flag2 = false;
				try
				{
					flag2 = (Main.tile[num2, num3].liquid > 0);
					if (Main.tile[num2, num3].active())
					{
						int type = (int)Main.tile[num2, num3].type;
						if (type == 219 && num9 <= num8 + Player.tileRangeX && num10 <= num8 + Player.tileRangeY)
						{
							num = 7;
							flag = true;
						}
						else if (type == 209 && num9 <= num7 + Player.tileRangeX && num10 <= num7 + Player.tileRangeY)
						{
							num = 6;
							flag = true;
						}
						else if (Main.tileHammer[type] && num9 <= num6 + Player.tileRangeX && num10 <= num6 + Player.tileRangeY)
						{
							num = 1;
							flag = true;
						}
						else if (Main.tileAxe[type] && num9 <= num5 + Player.tileRangeX && num10 <= num5 + Player.tileRangeY)
						{
							num = 2;
							flag = true;
						}
						else if (num9 <= num4 + Player.tileRangeX && num10 <= num4 + Player.tileRangeY)
						{
							num = 3;
							flag = true;
						}
					}
					else if (flag2 && this.wet)
					{
						num = 4;
						flag = true;
					}
				}
				catch
				{
				}
				if (!flag && this.wet)
				{
					num = 4;
				}
				if (num == 0 || num == 4)
				{
					float num11 = Math.Abs((float)Main.mouseX + Main.screenPosition.X - (this.position.X + (float)(this.width / 2)));
					float num12 = Math.Abs((float)Main.mouseY + Main.screenPosition.Y - (this.position.Y + (float)(this.height / 2))) * 1.3f;
					float num13 = (float)Math.Sqrt((double)(num11 * num11 + num12 * num12));
					if (num13 > 200f)
					{
						num = 5;
					}
				}
				int modSelect = TileLoader.AutoSelect(num2, num3, this);
				if (modSelect >= 0)
				{
					if (this.nonTorch == -1)
					{
						this.nonTorch = this.selectedItem;
					}
					this.selectedItem = modSelect;
					return;
				}
				for (int j = 0; j < 50; j++)
				{
					int type2 = this.inventory[j].type;
					bool dryTorch = false;
					bool wetTorch = false;
					bool glowstick = false;
					ItemLoader.AutoLightSelect(this.inventory[j], ref dryTorch, ref wetTorch, ref glowstick);
					if (num == 0)
					{
						if (type2 == 8 || type2 == 427 || type2 == 428 || type2 == 429 || type2 == 430 || type2 == 431 || type2 == 432 || type2 == 433 || type2 == 523 || type2 == 974 || type2 == 1245 || type2 == 1333 || type2 == 2274 || type2 == 3004 || type2 == 3045 || type2 == 3114 || dryTorch || wetTorch)
						{
							if (this.nonTorch == -1)
							{
								this.nonTorch = this.selectedItem;
							}
							this.selectedItem = j;
							return;
						}
						if (type2 == 282 || type2 == 286 || type2 == 3002 || type2 == 3112 || glowstick)
						{
							if (this.nonTorch == -1)
							{
								this.nonTorch = this.selectedItem;
							}
							this.selectedItem = j;
						}
					}
					else if (num == 1)
					{
						if (this.inventory[j].hammer > 0)
						{
							if (this.nonTorch == -1)
							{
								this.nonTorch = this.selectedItem;
							}
							this.selectedItem = j;
							return;
						}
					}
					else if (num == 2)
					{
						if (this.inventory[j].axe > 0)
						{
							if (this.nonTorch == -1)
							{
								this.nonTorch = this.selectedItem;
							}
							this.selectedItem = j;
							return;
						}
					}
					else if (num == 3)
					{
						if (this.inventory[j].pick > 0)
						{
							if (this.nonTorch == -1)
							{
								this.nonTorch = this.selectedItem;
							}
							this.selectedItem = j;
							return;
						}
					}
					else if (num == 4)
					{
						if (this.inventory[j].type != 282 && this.inventory[j].type != 286 && this.inventory[j].type != 3002 && this.inventory[j].type != 3112 && this.inventory[j].type != 930 && !glowstick && (type2 == 8 || type2 == 427 || type2 == 428 || type2 == 429 || type2 == 430 || type2 == 431 || type2 == 432 || type2 == 433 || type2 == 974 || type2 == 1245 || type2 == 2274 || type2 == 3004 || type2 == 3045 || type2 == 3114 || dryTorch))
						{
							if (this.nonTorch == -1)
							{
								this.nonTorch = this.selectedItem;
							}
							if (!TileLoader.IsTorch(this.inventory[this.selectedItem].createTile))
							{
								this.selectedItem = j;
							}
						}
						else
						{
							if ((type2 == 282 || type2 == 286 || type2 == 3002 || type2 == 3112 || glowstick) && flag2)
							{
								if (this.nonTorch == -1)
								{
									this.nonTorch = this.selectedItem;
								}
								this.selectedItem = j;
								return;
							}
							if (type2 == 930 && flag2)
							{
								bool flag3 = false;
								for (int k = 57; k >= 0; k--)
								{
									if (this.inventory[k].ammo == this.inventory[j].useAmmo)
									{
										flag3 = true;
										break;
									}
								}
								if (flag3)
								{
									if (this.nonTorch == -1)
									{
										this.nonTorch = this.selectedItem;
									}
									this.selectedItem = j;
									return;
								}
							}
							else if (type2 == 1333 || type2 == 523 || wetTorch)
							{
								if (this.nonTorch == -1)
								{
									this.nonTorch = this.selectedItem;
								}
								this.selectedItem = j;
								return;
							}
						}
					}
					else if (num == 5)
					{
						if (type2 == 8 || type2 == 427 || type2 == 428 || type2 == 429 || type2 == 430 || type2 == 431 || type2 == 432 || type2 == 433 || type2 == 523 || type2 == 974 || type2 == 1245 || type2 == 1333 || type2 == 2274 || type2 == 3004 || type2 == 3045 || type2 == 3114 || dryTorch || wetTorch)
						{
							if (this.nonTorch == -1)
							{
								this.nonTorch = this.selectedItem;
							}
							if (!TileLoader.IsTorch(this.inventory[this.selectedItem].createTile))
							{
								this.selectedItem = j;
							}
						}
						else if (type2 == 930)
						{
							bool flag4 = false;
							for (int l = 57; l >= 0; l--)
							{
								if (this.inventory[l].ammo == this.inventory[j].useAmmo)
								{
									flag4 = true;
									break;
								}
							}
							if (flag4)
							{
								if (this.nonTorch == -1)
								{
									this.nonTorch = this.selectedItem;
								}
								this.selectedItem = j;
								return;
							}
						}
						else if (type2 == 282 || type2 == 286 || type2 == 3002 || type2 == 3112 || glowstick)
						{
							if (this.nonTorch == -1)
							{
								this.nonTorch = this.selectedItem;
							}
							this.selectedItem = j;
							return;
						}
					}
					else if (num == 6)
					{
						int num14 = 929;
						if (Main.tile[num2, num3].frameX >= 144)
						{
							num14 = 1345;
						}
						else if (Main.tile[num2, num3].frameX >= 72)
						{
							num14 = 1338;
						}
						if (type2 == num14)
						{
							if (this.nonTorch == -1)
							{
								this.nonTorch = this.selectedItem;
							}
							this.selectedItem = j;
							return;
						}
					}
					else if (num == 7 && ItemID.Sets.ExtractinatorMode[type2] >= 0)
					{
						if (this.nonTorch == -1)
						{
							this.nonTorch = this.selectedItem;
						}
						this.selectedItem = j;
						return;
					}
				}
				return;
			}
			if (this.itemAnimation == 0 && this.DpadRadial.SelectedItem != -1 && this.inventory[this.DpadRadial.SelectedItem].stack > 0)
			{
				if (this.nonTorch == -1)
				{
					this.nonTorch = this.selectedItem;
				}
				this.selectedItem = this.DpadRadial.SelectedItem;
				return;
			}
			if (this.itemAnimation == 0 && this.CircularRadial.SelectedItem != -1 && this.inventory[this.CircularRadial.SelectedItem].stack > 0)
			{
				if (this.nonTorch == -1)
				{
					this.nonTorch = this.selectedItem;
				}
				this.selectedItem = this.CircularRadial.SelectedItem;
				return;
			}
			if (this.nonTorch > -1 && this.itemAnimation == 0)
			{
				this.selectedItem = this.nonTorch;
				this.nonTorch = -1;
			}
		}

		public void ResetEffects()
		{
			if (this.extraAccessory && (Main.expertMode || Main.gameMenu))
			{
				this.extraAccessorySlots = 1;
			}
			else
			{
				this.extraAccessorySlots = 0;
			}
			this.arcticDivingGear = false;
			this.noBuilding = false;
			this.strongBees = false;
			this.armorPenetration = 0;
			this.shroomiteStealth = false;
			this.statDefense = 0;
			this.accWatch = 0;
			this.accCompass = 0;
			this.accDepthMeter = 0;
			this.accDivingHelm = false;
			this.lifeRegen = 0;
			this.manaCost = 1f;
			this.meleeSpeed = 1f;
			this.meleeDamage = 1f;
			this.rangedDamage = 1f;
			this.thrownDamage = 1f;
			this.magicDamage = 1f;
			this.minionDamage = 1f;
			this.meleeCrit = 4;
			this.rangedCrit = 4;
			this.magicCrit = 4;
			this.thrownCrit = 4;
			this.thrownVelocity = 1f;
			this.minionKB = 0f;
			this.moveSpeed = 1f;
			this.boneArmor = false;
			this.honey = false;
			this.frostArmor = false;
			this.rocketBoots = 0;
			this.fireWalk = false;
			this.noKnockback = false;
			this.jumpBoost = false;
			this.noFallDmg = false;
			this.accFlipper = false;
			this.spawnMax = false;
			this.spaceGun = false;
			this.killGuide = false;
			this.killClothier = false;
			this.lavaImmune = false;
			this.gills = false;
			this.slowFall = false;
			this.findTreasure = false;
			this.invis = false;
			this.nightVision = false;
			this.enemySpawns = false;
			this.thorns = 0f;
			this.aggro = 0;
			this.waterWalk = false;
			this.waterWalk2 = false;
			this.detectCreature = false;
			this.gravControl = false;
			this.bee = false;
			this.gravControl2 = false;
			this.statLifeMax2 = this.statLifeMax;
			this.statManaMax2 = this.statManaMax;
			this.ammoCost80 = false;
			this.ammoCost75 = false;
			this.thrownCost50 = false;
			this.thrownCost33 = false;
			this.manaRegenBuff = false;
			this.arrowDamage = 1f;
			this.bulletDamage = 1f;
			this.rocketDamage = 1f;
			this.yoraiz0rEye = 0;
			this.yoraiz0rDarkness = false;
			this.suspiciouslookingTentacle = false;
			this.crimsonHeart = false;
			this.lightOrb = false;
			this.blueFairy = false;
			this.redFairy = false;
			this.greenFairy = false;
			this.wisp = false;
			this.bunny = false;
			this.turtle = false;
			this.eater = false;
			this.skeletron = false;
			this.hornet = false;
			this.zephyrfish = false;
			this.tiki = false;
			this.lizard = false;
			this.parrot = false;
			this.sapling = false;
			this.cSapling = false;
			this.truffle = false;
			this.yoyoGlove = false;
			this.counterWeight = 0;
			this.stringColor = 0;
			this.yoyoString = false;
			this.shadowDodge = false;
			this.palladiumRegen = false;
			this.chaosState = false;
			this.onHitDodge = false;
			this.onHitRegen = false;
			this.onHitPetal = false;
			this.iceBarrier = false;
			this.maxMinions = 1;
			this.maxTurrets = 1;
			this.ammoBox = false;
			this.ammoPotion = false;
			this.penguin = false;
			this.sporeSac = false;
			this.shinyStone = false;
			this.dd2Accessory = false;
			this.magicLantern = false;
			this.rabid = false;
			this.sunflower = false;
			this.wellFed = false;
			this.inferno = false;
			this.manaMagnet = false;
			this.lifeMagnet = false;
			this.lifeForce = false;
			this.dangerSense = false;
			this.endurance = 0f;
			this.calmed = false;
			this.beetleOrbs = 0;
			this.beetleBuff = false;
			this.miniMinotaur = false;
			this.goldRing = false;
			this.solarShields = 0;
			this.GoingDownWithGrapple = false;
			this.fishingSkill = 0;
			this.cratePotion = false;
			this.sonarPotion = false;
			this.accTackleBox = false;
			this.accFishingLine = false;
			this.accFishFinder = false;
			this.accWeatherRadio = false;
			this.accThirdEye = false;
			this.InfoAccMechShowWires = false;
			this.accJarOfSouls = false;
			this.accCalendar = false;
			this.accStopwatch = false;
			this.accOreFinder = false;
			this.accCritterGuide = false;
			this.accDreamCatcher = false;
			this.wallSpeed = 1f;
			this.tileSpeed = 1f;
			this.autoPaint = false;
			this.autoActuator = false;
			this.petFlagDD2Gato = false;
			this.petFlagDD2Dragon = false;
			this.petFlagDD2Ghost = false;
			this.companionCube = false;
			this.babyFaceMonster = false;
			this.manaSick = false;
			this.puppy = false;
			this.grinch = false;
			this.blackCat = false;
			this.spider = false;
			this.squashling = false;
			this.magicCuffs = false;
			this.coldDash = false;
			this.sailDash = false;
			this.cordage = false;
			this.magicQuiver = false;
			this.magmaStone = false;
			this.hasRaisableShield = false;
			this.lavaRose = false;
			this.eyeSpring = false;
			this.snowman = false;
			this.scope = false;
			this.panic = false;
			this.brainOfConfusion = false;
			this.dino = false;
			this.crystalLeaf = false;
			this.pygmy = false;
			this.raven = false;
			this.slime = false;
			this.hornetMinion = false;
			this.impMinion = false;
			this.twinsMinion = false;
			this.spiderMinion = false;
			this.pirateMinion = false;
			this.sharknadoMinion = false;
			this.stardustMinion = false;
			this.stardustGuardian = false;
			this.stardustDragon = false;
			this.UFOMinion = false;
			this.DeadlySphereMinion = false;
			this.chilled = false;
			this.dazed = false;
			this.frozen = false;
			this.stoned = false;
			this.webbed = false;
			this.ichor = false;
			this.manaRegenBonus = 0;
			this.manaRegenDelayBonus = 0;
			this.carpet = false;
			this.iceSkate = false;
			this.dash = 0;
			this.spikedBoots = 0;
			this.blackBelt = false;
			this.lavaMax = 0;
			this.archery = false;
			this.poisoned = false;
			this.venom = false;
			this.blind = false;
			this.blackout = false;
			this.onFire = false;
			this.dripping = false;
			this.drippingSlime = false;
			this.burned = false;
			this.suffocating = false;
			this.onFire2 = false;
			this.onFrostBurn = false;
			this.frostBurn = false;
			this.noItems = false;
			this.blockRange = 0;
			this.pickSpeed = 1f;
			this.wereWolf = false;
			this.rulerGrid = false;
			this.rulerLine = false;
			this.bleed = false;
			this.confused = false;
			this.witheredArmor = false;
			this.witheredWeapon = false;
			this.parryDamageBuff = false;
			this.slowOgreSpit = false;
			this.wings = 0;
			this.wingsLogic = 0;
			this.wingTimeMax = 0;
			this.brokenArmor = false;
			this.silence = false;
			this.slow = false;
			this.gross = false;
			this.tongued = false;
			this.kbGlove = false;
			this.kbBuff = false;
			this.starCloak = false;
			this.longInvince = false;
			this.pStone = false;
			this.manaFlower = false;
			this.crimsonRegen = false;
			this.ghostHeal = false;
			this.ghostHurt = false;
			this.turtleArmor = false;
			this.turtleThorns = false;
			this.spiderArmor = false;
			this.loveStruck = false;
			this.stinky = false;
			this.dryadWard = false;
			this.resistCold = false;
			this.electrified = false;
			this.moonLeech = false;
			this.headcovered = false;
			this.vortexDebuff = false;
			this.windPushed = false;
			this.ballistaPanic = false;
			this.setVortex = (this.setNebula = (this.setStardust = false));
			this.setForbidden = false;
			this.setHuntressT3 = false;
			this.setSquireT3 = false;
			this.setMonkT3 = false;
			this.setApprenticeT3 = false;
			this.setHuntressT2 = false;
			this.setSquireT2 = false;
			this.setMonkT2 = false;
			this.setApprenticeT2 = false;
			this.setForbiddenCooldownLocked = false;
			this.nebulaLevelDamage = (this.nebulaLevelLife = (this.nebulaLevelMana = 0));
			this.ignoreWater = false;
			this.meleeEnchant = 0;
			this.discount = false;
			this.coins = false;
			this.doubleJumpSail = false;
			this.doubleJumpSandstorm = false;
			this.doubleJumpBlizzard = false;
			this.doubleJumpFart = false;
			this.doubleJumpUnicorn = false;
			this.defendedByPaladin = false;
			this.hasPaladinShield = false;
			this.autoJump = false;
			this.justJumped = false;
			this.jumpSpeedBoost = 0f;
			this.extraFall = 0;
			if (this.phantasmTime > 0)
			{
				this.phantasmTime--;
			}
			if (this.wireOperationsCooldown > 0)
			{
				this.wireOperationsCooldown--;
			}
			if (this.releaseUseItem)
			{
				this.ActuationRodLock = false;
			}
			for (int i = 0; i < this.npcTypeNoAggro.Length; i++)
			{
				this.npcTypeNoAggro[i] = false;
			}
			for (int j = 0; j < this.ownedProjectileCounts.Length; j++)
			{
				this.ownedProjectileCounts[j] = 0;
			}
			if (this.whoAmI == Main.myPlayer)
			{
				Player.tileRangeX = 5;
				Player.tileRangeY = 4;
			}
			this.mount.CheckMountBuff(this);
			PlayerHooks.ResetEffects(this);
		}

		public void UpdateImmunity()
		{
			if (this.immune)
			{
				this.immuneTime--;
				if (this.immuneTime <= 0)
				{
					this.immune = false;
					this.immuneNoBlink = false;
				}
				if (this.immuneNoBlink)
				{
					this.immuneAlpha = 0;
				}
				else
				{
					this.immuneAlpha += this.immuneAlphaDirection * 50;
					if (this.immuneAlpha <= 50)
					{
						this.immuneAlphaDirection = 1;
					}
					else if (this.immuneAlpha >= 205)
					{
						this.immuneAlphaDirection = -1;
					}
				}
			}
			else
			{
				this.immuneAlpha = 0;
			}
			for (int i = 0; i < this.hurtCooldowns.Length; i++)
			{
				if (this.hurtCooldowns[i] > 0)
				{
					this.hurtCooldowns[i]--;
				}
			}
		}

		public void UpdateLifeRegen()
		{
			bool flag = false;
			if (this.shinyStone && (double)Math.Abs(this.velocity.X) < 0.05 && (double)Math.Abs(this.velocity.Y) < 0.05 && this.itemAnimation == 0)
			{
				flag = true;
			}
			if (this.poisoned)
			{
				if (this.lifeRegen > 0)
				{
					this.lifeRegen = 0;
				}
				this.lifeRegenTime = 0;
				this.lifeRegen -= 4;
			}
			if (this.venom)
			{
				if (this.lifeRegen > 0)
				{
					this.lifeRegen = 0;
				}
				this.lifeRegenTime = 0;
				this.lifeRegen -= 12;
			}
			if (this.onFire)
			{
				if (this.lifeRegen > 0)
				{
					this.lifeRegen = 0;
				}
				this.lifeRegenTime = 0;
				this.lifeRegen -= 8;
			}
			if (this.onFrostBurn)
			{
				if (this.lifeRegen > 0)
				{
					this.lifeRegen = 0;
				}
				this.lifeRegenTime = 0;
				this.lifeRegen -= 12;
			}
			if (this.onFire2)
			{
				if (this.lifeRegen > 0)
				{
					this.lifeRegen = 0;
				}
				this.lifeRegenTime = 0;
				this.lifeRegen -= 12;
			}
			if (this.burned)
			{
				if (this.lifeRegen > 0)
				{
					this.lifeRegen = 0;
				}
				this.lifeRegenTime = 0;
				this.lifeRegen -= 60;
				this.moveSpeed *= 0.5f;
			}
			if (this.suffocating)
			{
				if (this.lifeRegen > 0)
				{
					this.lifeRegen = 0;
				}
				this.lifeRegenTime = 0;
				this.lifeRegen -= 40;
			}
			if (this.electrified)
			{
				if (this.lifeRegen > 0)
				{
					this.lifeRegen = 0;
				}
				this.lifeRegenTime = 0;
				this.lifeRegen -= 8;
				if (this.controlLeft || this.controlRight)
				{
					this.lifeRegen -= 32;
				}
			}
			if (this.tongued && Main.expertMode)
			{
				if (this.lifeRegen > 0)
				{
					this.lifeRegen = 0;
				}
				this.lifeRegenTime = 0;
				this.lifeRegen -= 100;
			}
			PlayerHooks.UpdateBadLifeRegen(this);
			if (this.honey && this.lifeRegen < 0)
			{
				this.lifeRegen += 4;
				if (this.lifeRegen > 0)
				{
					this.lifeRegen = 0;
				}
			}
			if (this.lifeRegen < 0 && this.nebulaLevelLife > 0)
			{
				this.lifeRegen = 0;
			}
			if (flag && this.lifeRegen < 0)
			{
				this.lifeRegen /= 2;
			}
			this.lifeRegenTime++;
			if (this.crimsonRegen)
			{
				this.lifeRegenTime++;
			}
			if (this.soulDrain > 0)
			{
				this.lifeRegenTime += 2;
			}
			if (flag)
			{
				if (this.lifeRegenTime > 90 && this.lifeRegenTime < 1800)
				{
					this.lifeRegenTime = 1800;
				}
				this.lifeRegenTime += 4;
				this.lifeRegen += 4;
			}
			if (this.honey)
			{
				this.lifeRegenTime += 2;
				this.lifeRegen += 2;
			}
			if (this.soulDrain > 0)
			{
				int num = (5 + this.soulDrain) / 2;
				this.lifeRegenTime += num;
				this.lifeRegen += num;
			}
			if (this.whoAmI == Main.myPlayer && Main.campfire)
			{
				this.lifeRegen++;
			}
			if (this.whoAmI == Main.myPlayer && Main.heartLantern)
			{
				this.lifeRegen += 2;
			}
			PlayerHooks.UpdateLifeRegen(this);
			if (this.bleed)
			{
				this.lifeRegenTime = 0;
			}
			float num2 = 0f;
			if (this.lifeRegenTime >= 300)
			{
				num2 += 1f;
			}
			if (this.lifeRegenTime >= 600)
			{
				num2 += 1f;
			}
			if (this.lifeRegenTime >= 900)
			{
				num2 += 1f;
			}
			if (this.lifeRegenTime >= 1200)
			{
				num2 += 1f;
			}
			if (this.lifeRegenTime >= 1500)
			{
				num2 += 1f;
			}
			if (this.lifeRegenTime >= 1800)
			{
				num2 += 1f;
			}
			if (this.lifeRegenTime >= 2400)
			{
				num2 += 1f;
			}
			if (this.lifeRegenTime >= 3000)
			{
				num2 += 1f;
			}
			if (flag)
			{
				float num3 = (float)(this.lifeRegenTime - 3000);
				num3 /= 300f;
				if (num3 > 0f)
				{
					if (num3 > 30f)
					{
						num3 = 30f;
					}
					num2 += num3;
				}
			}
			else if (this.lifeRegenTime >= 3600)
			{
				num2 += 1f;
				this.lifeRegenTime = 3600;
			}
			if (this.velocity.X == 0f || this.grappling[0] > 0)
			{
				num2 *= 1.25f;
			}
			else
			{
				num2 *= 0.5f;
			}
			if (this.crimsonRegen)
			{
				num2 *= 1.5f;
			}
			if (this.shinyStone)
			{
				num2 *= 1.1f;
			}
			if (this.whoAmI == Main.myPlayer && Main.campfire)
			{
				num2 *= 1.1f;
			}
			if (Main.expertMode && !this.wellFed)
			{
				if (this.shinyStone)
				{
					num2 *= 0.75f;
				}
				else
				{
					num2 /= 2f;
				}
			}
			if (this.rabid)
			{
				if (this.shinyStone)
				{
					num2 *= 0.75f;
				}
				else
				{
					num2 /= 2f;
				}
			}
			PlayerHooks.NaturalLifeRegen(this, ref num2);
			float num4 = (float)this.statLifeMax2 / 400f * 0.85f + 0.15f;
			num2 *= num4;
			this.lifeRegen += (int)Math.Round((double)num2);
			this.lifeRegenCount += this.lifeRegen;
			if (this.palladiumRegen)
			{
				this.lifeRegenCount += 6;
			}
			if (flag && this.lifeRegen > 0 && this.statLife < this.statLifeMax2)
			{
				this.lifeRegenCount++;
				if (flag && (Main.rand.Next(30000) < this.lifeRegenTime || Main.rand.Next(30) == 0))
				{
					int num5 = Dust.NewDust(this.position, this.width, this.height, 55, 0f, 0f, 200, default(Color), 0.5f);
					Main.dust[num5].noGravity = true;
					Main.dust[num5].velocity *= 0.75f;
					Main.dust[num5].fadeIn = 1.3f;
					Vector2 vector = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
					vector.Normalize();
					vector *= (float)Main.rand.Next(50, 100) * 0.04f;
					Main.dust[num5].velocity = vector;
					vector.Normalize();
					vector *= 34f;
					Main.dust[num5].position = base.Center - vector;
				}
			}
			while (this.lifeRegenCount >= 120)
			{
				this.lifeRegenCount -= 120;
				if (this.statLife < this.statLifeMax2)
				{
					this.statLife++;
					if (this.crimsonRegen)
					{
						for (int i = 0; i < 10; i++)
						{
							int num6 = Dust.NewDust(this.position, this.width, this.height, 5, 0f, 0f, 175, default(Color), 1.75f);
							Main.dust[num6].noGravity = true;
							Main.dust[num6].velocity *= 0.75f;
							int num7 = Main.rand.Next(-40, 41);
							int num8 = Main.rand.Next(-40, 41);
							Dust expr_7EE_cp_0 = Main.dust[num6];
							expr_7EE_cp_0.position.X = expr_7EE_cp_0.position.X + (float)num7;
							Dust expr_80A_cp_0 = Main.dust[num6];
							expr_80A_cp_0.position.Y = expr_80A_cp_0.position.Y + (float)num8;
							Main.dust[num6].velocity.X = (float)(-(float)num7) * 0.075f;
							Main.dust[num6].velocity.Y = (float)(-(float)num8) * 0.075f;
						}
					}
				}
				if (this.statLife > this.statLifeMax2)
				{
					this.statLife = this.statLifeMax2;
				}
			}
			if (!this.burned && !this.suffocating)
			{
				if (!this.tongued || !Main.expertMode)
				{
					while (this.lifeRegenCount <= -120)
					{
						if (this.lifeRegenCount <= -480)
						{
							this.lifeRegenCount += 480;
							this.statLife -= 4;
							CombatText.NewText(new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), CombatText.LifeRegen, string.Concat(4), false, true);
						}
						else if (this.lifeRegenCount <= -360)
						{
							this.lifeRegenCount += 360;
							this.statLife -= 3;
							CombatText.NewText(new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), CombatText.LifeRegen, string.Concat(3), false, true);
						}
						else if (this.lifeRegenCount <= -240)
						{
							this.lifeRegenCount += 240;
							this.statLife -= 2;
							CombatText.NewText(new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), CombatText.LifeRegen, string.Concat(2), false, true);
						}
						else
						{
							this.lifeRegenCount += 120;
							this.statLife--;
							CombatText.NewText(new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), CombatText.LifeRegen, string.Concat(1), false, true);
						}
						if (this.statLife <= 0 && this.whoAmI == Main.myPlayer)
						{
							if (this.poisoned || this.venom)
							{
								this.KillMe(PlayerDeathReason.ByOther(9), 10.0, 0, false);
							}
							else if (this.electrified)
							{
								this.KillMe(PlayerDeathReason.ByOther(10), 10.0, 0, false);
							}
							else
							{
								this.KillMe(PlayerDeathReason.ByOther(8), 10.0, 0, false);
							}
						}
					}
					return;
				}
			}
			while (this.lifeRegenCount <= -600)
			{
				this.lifeRegenCount += 600;
				this.statLife -= 5;
				CombatText.NewText(new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), CombatText.LifeRegen, string.Concat(5), false, true);
				if (this.statLife <= 0 && this.whoAmI == Main.myPlayer)
				{
					if (this.suffocating)
					{
						this.KillMe(PlayerDeathReason.ByOther(7), 10.0, 0, false);
					}
					else
					{
						this.KillMe(PlayerDeathReason.ByOther(8), 10.0, 0, false);
					}
				}
			}
		}

		public void UpdateManaRegen()
		{
			if (this.nebulaLevelMana > 0)
			{
				int num = 6;
				this.nebulaManaCounter += this.nebulaLevelMana;
				if (this.nebulaManaCounter >= num)
				{
					this.nebulaManaCounter -= num;
					this.statMana++;
					if (this.statMana >= this.statManaMax2)
					{
						this.statMana = this.statManaMax2;
					}
				}
			}
			else
			{
				this.nebulaManaCounter = 0;
			}
			if (this.manaRegenDelay > 0)
			{
				this.manaRegenDelay--;
				this.manaRegenDelay -= this.manaRegenDelayBonus;
				if ((this.velocity.X == 0f && this.velocity.Y == 0f) || this.grappling[0] >= 0 || this.manaRegenBuff)
				{
					this.manaRegenDelay--;
				}
			}
			if (this.manaRegenBuff && this.manaRegenDelay > 20)
			{
				this.manaRegenDelay = 20;
			}
			if (this.manaRegenDelay <= 0)
			{
				this.manaRegenDelay = 0;
				this.manaRegen = this.statManaMax2 / 7 + 1 + this.manaRegenBonus;
				if ((this.velocity.X == 0f && this.velocity.Y == 0f) || this.grappling[0] >= 0 || this.manaRegenBuff)
				{
					this.manaRegen += this.statManaMax2 / 2;
				}
				float num2 = (float)this.statMana / (float)this.statManaMax2 * 0.8f + 0.2f;
				if (this.manaRegenBuff)
				{
					num2 = 1f;
				}
				this.manaRegen = (int)((double)((float)this.manaRegen * num2) * 1.15);
			}
			else
			{
				this.manaRegen = 0;
			}
			this.manaRegenCount += this.manaRegen;
			while (this.manaRegenCount >= 120)
			{
				bool flag = false;
				this.manaRegenCount -= 120;
				if (this.statMana < this.statManaMax2)
				{
					this.statMana++;
					flag = true;
				}
				if (this.statMana >= this.statManaMax2)
				{
					if (this.whoAmI == Main.myPlayer && flag)
					{
						Main.PlaySound(25, -1, -1, 1, 1f, 0f);
						for (int i = 0; i < 5; i++)
						{
							int num3 = Dust.NewDust(this.position, this.width, this.height, 45, 0f, 0f, 255, default(Color), (float)Main.rand.Next(20, 26) * 0.1f);
							Main.dust[num3].noLight = true;
							Main.dust[num3].noGravity = true;
							Main.dust[num3].velocity *= 0.5f;
						}
					}
					this.statMana = this.statManaMax2;
				}
			}
		}

		public void UpdateJumpHeight()
		{
			if (this.mount.Active)
			{
				Player.jumpHeight = this.mount.JumpHeight(this.velocity.X);
				Player.jumpSpeed = this.mount.JumpSpeed(this.velocity.X);
			}
			else
			{
				if (this.jumpBoost)
				{
					Player.jumpHeight = 20;
					Player.jumpSpeed = 6.51f;
				}
				if (this.wereWolf)
				{
					Player.jumpHeight += 2;
					Player.jumpSpeed += 0.2f;
				}
				Player.jumpSpeed += this.jumpSpeedBoost;
			}
			if (this.sticky)
			{
				Player.jumpHeight /= 10;
				Player.jumpSpeed /= 5f;
			}
			if (this.dazed)
			{
				Player.jumpHeight /= 5;
				Player.jumpSpeed /= 2f;
			}
		}

		public void FindPulley()
		{
			if (this.controlUp || this.controlDown)
			{
				int num = (int)(this.position.X + (float)(this.width / 2)) / 16;
				int num2 = (int)(this.position.Y - 8f) / 16;
				if (Main.tile[num, num2] != null && Main.tile[num, num2].active() && Main.tileRope[(int)Main.tile[num, num2].type])
				{
					float num3 = this.position.Y;
					if (Main.tile[num, num2 - 1] == null)
					{
						Main.tile[num, num2 - 1] = new Tile();
					}
					if (Main.tile[num, num2 + 1] == null)
					{
						Main.tile[num, num2 + 1] = new Tile();
					}
					if ((!Main.tile[num, num2 - 1].active() || !Main.tileRope[(int)Main.tile[num, num2 - 1].type]) && (!Main.tile[num, num2 + 1].active() || !Main.tileRope[(int)Main.tile[num, num2 + 1].type]))
					{
						num3 = (float)(num2 * 16 + 22);
					}
					float num4 = (float)(num * 16 + 8 - this.width / 2 + 6 * this.direction);
					int num5 = num * 16 + 8 - this.width / 2 + 6;
					int num6 = num * 16 + 8 - this.width / 2;
					int num7 = num * 16 + 8 - this.width / 2 + -6;
					int num8 = 1;
					float num9 = Math.Abs(this.position.X - (float)num5);
					if (Math.Abs(this.position.X - (float)num6) < num9)
					{
						num8 = 2;
						num9 = Math.Abs(this.position.X - (float)num6);
					}
					if (Math.Abs(this.position.X - (float)num7) < num9)
					{
						num8 = 3;
						num9 = Math.Abs(this.position.X - (float)num7);
					}
					if (num8 == 1)
					{
						num4 = (float)num5;
						this.pulleyDir = 2;
						this.direction = 1;
					}
					if (num8 == 2)
					{
						num4 = (float)num6;
						this.pulleyDir = 1;
					}
					if (num8 == 3)
					{
						num4 = (float)num7;
						this.pulleyDir = 2;
						this.direction = -1;
					}
					if (!Collision.SolidCollision(new Vector2(num4, this.position.Y), this.width, this.height))
					{
						if (this.whoAmI == Main.myPlayer)
						{
							Main.cameraX = Main.cameraX + this.position.X - num4;
						}
						this.pulley = true;
						this.position.X = num4;
						this.gfxOffY = this.position.Y - num3;
						this.stepSpeed = 2.5f;
						this.position.Y = num3;
						this.velocity.X = 0f;
						return;
					}
					num4 = (float)num5;
					this.pulleyDir = 2;
					this.direction = 1;
					if (!Collision.SolidCollision(new Vector2(num4, this.position.Y), this.width, this.height))
					{
						if (this.whoAmI == Main.myPlayer)
						{
							Main.cameraX = Main.cameraX + this.position.X - num4;
						}
						this.pulley = true;
						this.position.X = num4;
						this.gfxOffY = this.position.Y - num3;
						this.stepSpeed = 2.5f;
						this.position.Y = num3;
						this.velocity.X = 0f;
						return;
					}
					num4 = (float)num7;
					this.pulleyDir = 2;
					this.direction = -1;
					if (!Collision.SolidCollision(new Vector2(num4, this.position.Y), this.width, this.height))
					{
						if (this.whoAmI == Main.myPlayer)
						{
							Main.cameraX = Main.cameraX + this.position.X - num4;
						}
						this.pulley = true;
						this.position.X = num4;
						this.gfxOffY = this.position.Y - num3;
						this.stepSpeed = 2.5f;
						this.position.Y = num3;
						this.velocity.X = 0f;
					}
				}
			}
		}

		public void HorizontalMovement()
		{
			if (this.chilled)
			{
				this.accRunSpeed = this.maxRunSpeed;
			}
			bool flag = (this.itemAnimation == 0 || this.inventory[this.selectedItem].useTurn) && this.mount.AllowDirectionChange;
			bool flag2 = this.controlLeft || this.controlRight;
			float num = (this.accRunSpeed + this.maxRunSpeed) / 2f;
			float num2 = 0f;
			bool flag3 = false;
			if (this.windPushed && (!this.mount.Active || this.velocity.Y != 0f || !flag2))
			{
				num2 = (float)Math.Sign(Main.windSpeed) * 0.07f;
				if (Math.Abs(Main.windSpeed) > 0.5f)
				{
					num2 *= 1.37f;
				}
				if (this.velocity.Y != 0f)
				{
					num2 *= 1.5f;
				}
				if (flag2)
				{
					num2 *= 0.8f;
				}
				flag3 = true;
				if (Math.Sign(this.direction) != Math.Sign(num2))
				{
					num -= Math.Abs(num2) * 40f;
				}
			}
			if (this.trackBoost != 0f)
			{
				this.velocity.X = this.velocity.X + this.trackBoost;
				this.trackBoost = 0f;
				if (this.velocity.X < 0f)
				{
					if (this.velocity.X < -this.maxRunSpeed)
					{
						this.velocity.X = -this.maxRunSpeed;
					}
				}
				else if (this.velocity.X > this.maxRunSpeed)
				{
					this.velocity.X = this.maxRunSpeed;
				}
			}
			if (this.controlLeft && this.velocity.X > -this.maxRunSpeed)
			{
				if (!this.mount.Active || !this.mount.Cart || this.velocity.Y == 0f)
				{
					if (this.velocity.X > this.runSlowdown)
					{
						this.velocity.X = this.velocity.X - this.runSlowdown;
					}
					this.velocity.X = this.velocity.X - this.runAcceleration;
				}
				if (this.onWrongGround)
				{
					if (this.velocity.X < -this.runSlowdown)
					{
						this.velocity.X = this.velocity.X + this.runSlowdown;
					}
					else
					{
						this.velocity.X = 0f;
					}
				}
				if (this.mount.Active && this.mount.Cart && !this.onWrongGround)
				{
					if (this.velocity.X < 0f && flag)
					{
						this.direction = -1;
					}
					else if (this.itemAnimation <= 0 && this.velocity.Y == 0f)
					{
						Main.PlaySound(SoundID.Item55, (int)this.position.X + this.width / 2, (int)this.position.Y + this.height / 2);
						DelegateMethods.Minecart.rotation = this.fullRotation;
						DelegateMethods.Minecart.rotationOrigin = this.fullRotationOrigin;
						if ((double)Math.Abs(this.velocity.X) > (double)this.maxRunSpeed * 0.66)
						{
							if (Main.rand.Next(2) == 0)
							{
								Minecart.WheelSparks(this.mount.MinecartDust, this.position + this.velocity * 0.66f, this.width, this.height, 1);
							}
							if (Main.rand.Next(2) == 0)
							{
								Minecart.WheelSparks(this.mount.MinecartDust, this.position + this.velocity * 0.33f, this.width, this.height, 1);
							}
							if (Main.rand.Next(2) == 0)
							{
								Minecart.WheelSparks(this.mount.MinecartDust, this.position, this.width, this.height, 1);
							}
						}
						else if ((double)Math.Abs(this.velocity.X) > (double)this.maxRunSpeed * 0.33)
						{
							if (Main.rand.Next(3) != 0)
							{
								Minecart.WheelSparks(this.mount.MinecartDust, this.position + this.velocity * 0.5f, this.width, this.height, 1);
							}
							if (Main.rand.Next(3) != 0)
							{
								Minecart.WheelSparks(this.mount.MinecartDust, this.position, this.width, this.height, 1);
							}
						}
						else
						{
							Minecart.WheelSparks(this.mount.MinecartDust, this.position, this.width, this.height, 1);
						}
					}
				}
				else if (!this.sandStorm && (this.itemAnimation == 0 || this.inventory[this.selectedItem].useTurn) && this.mount.AllowDirectionChange)
				{
					this.direction = -1;
				}
			}
			else if (this.controlRight && this.velocity.X < this.maxRunSpeed)
			{
				if (!this.mount.Active || !this.mount.Cart || this.velocity.Y == 0f)
				{
					if (this.velocity.X < -this.runSlowdown)
					{
						this.velocity.X = this.velocity.X + this.runSlowdown;
					}
					this.velocity.X = this.velocity.X + this.runAcceleration;
				}
				if (this.onWrongGround)
				{
					if (this.velocity.X > this.runSlowdown)
					{
						this.velocity.X = this.velocity.X - this.runSlowdown;
					}
					else
					{
						this.velocity.X = 0f;
					}
				}
				if (this.mount.Active && this.mount.Cart && !this.onWrongGround)
				{
					if (this.velocity.X > 0f && flag)
					{
						this.direction = 1;
					}
					else if (this.itemAnimation <= 0 && this.velocity.Y == 0f)
					{
						Main.PlaySound(SoundID.Item55, (int)this.position.X + this.width / 2, (int)this.position.Y + this.height / 2);
						DelegateMethods.Minecart.rotation = this.fullRotation;
						DelegateMethods.Minecart.rotationOrigin = this.fullRotationOrigin;
						if ((double)Math.Abs(this.velocity.X) > (double)this.maxRunSpeed * 0.66)
						{
							if (Main.rand.Next(2) == 0)
							{
								Minecart.WheelSparks(this.mount.MinecartDust, this.position + this.velocity * 0.66f, this.width, this.height, 1);
							}
							if (Main.rand.Next(2) == 0)
							{
								Minecart.WheelSparks(this.mount.MinecartDust, this.position + this.velocity * 0.33f, this.width, this.height, 1);
							}
							if (Main.rand.Next(2) == 0)
							{
								Minecart.WheelSparks(this.mount.MinecartDust, this.position, this.width, this.height, 1);
							}
						}
						else if ((double)Math.Abs(this.velocity.X) > (double)this.maxRunSpeed * 0.33)
						{
							if (Main.rand.Next(3) != 0)
							{
								Minecart.WheelSparks(this.mount.MinecartDust, this.position + this.velocity * 0.5f, this.width, this.height, 1);
							}
							if (Main.rand.Next(3) != 0)
							{
								Minecart.WheelSparks(this.mount.MinecartDust, this.position, this.width, this.height, 1);
							}
						}
						else
						{
							Minecart.WheelSparks(this.mount.MinecartDust, this.position, this.width, this.height, 1);
						}
					}
				}
				else if (!this.sandStorm && (this.itemAnimation == 0 || this.inventory[this.selectedItem].useTurn) && this.mount.AllowDirectionChange)
				{
					this.direction = 1;
				}
			}
			else if (this.controlLeft && this.velocity.X > -this.accRunSpeed && this.dashDelay >= 0)
			{
				if (this.mount.Active && this.mount.Cart)
				{
					if (this.velocity.X < 0f)
					{
						this.direction = -1;
					}
				}
				else if ((this.itemAnimation == 0 || this.inventory[this.selectedItem].useTurn) && this.mount.AllowDirectionChange)
				{
					this.direction = -1;
				}
				if (this.velocity.Y == 0f || this.wingsLogic > 0 || this.mount.CanFly)
				{
					if (this.velocity.X > this.runSlowdown)
					{
						this.velocity.X = this.velocity.X - this.runSlowdown;
					}
					this.velocity.X = this.velocity.X - this.runAcceleration * 0.2f;
					if (this.wingsLogic > 0)
					{
						this.velocity.X = this.velocity.X - this.runAcceleration * 0.2f;
					}
				}
				if (this.onWrongGround)
				{
					if (this.velocity.X < this.runSlowdown)
					{
						this.velocity.X = this.velocity.X + this.runSlowdown;
					}
					else
					{
						this.velocity.X = 0f;
					}
				}
				if (this.velocity.X < -num && this.velocity.Y == 0f && !this.mount.Active)
				{
					int num3 = 0;
					if (this.gravDir == -1f)
					{
						num3 -= this.height;
					}
					if (this.runSoundDelay == 0 && this.velocity.Y == 0f)
					{
						Main.PlaySound(this.hermesStepSound.SoundType, (int)this.position.X, (int)this.position.Y, this.hermesStepSound.SoundStyle, 1f, 0f);
						this.runSoundDelay = this.hermesStepSound.IntendedCooldown;
					}
					if (this.wings == 3)
					{
						int num4 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y + (float)this.height + (float)num3), this.width + 8, 4, 186, -this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 50, default(Color), 1.5f);
						Main.dust[num4].velocity *= 0.025f;
						Main.dust[num4].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
						num4 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y + (float)this.height + (float)num3), this.width + 8, 4, 186, -this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 50, default(Color), 1.5f);
						Main.dust[num4].velocity *= 0.2f;
						Main.dust[num4].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
					}
					else if (this.sailDash)
					{
						for (int i = 0; i < 4; i++)
						{
							int num5 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y), this.width + 8, this.height, 253, -this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 100, default(Color), 1.5f);
							Main.dust[num5].noGravity = true;
							Main.dust[num5].velocity.X = Main.dust[num5].velocity.X * 0.2f;
							Main.dust[num5].velocity.Y = Main.dust[num5].velocity.Y * 0.2f;
							Main.dust[num5].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
							Main.dust[num5].scale += (float)Main.rand.Next(-5, 3) * 0.1f;
							Vector2 value = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
							value.Normalize();
							value *= (float)Main.rand.Next(81) * 0.1f;
						}
					}
					else if (this.coldDash)
					{
						for (int j = 0; j < 2; j++)
						{
							int num6;
							if (j == 0)
							{
								num6 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height + this.gfxOffY), this.width / 2, 6, 76, 0f, 0f, 0, default(Color), 1.35f);
							}
							else
							{
								num6 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2), this.position.Y + (float)this.height + this.gfxOffY), this.width / 2, 6, 76, 0f, 0f, 0, default(Color), 1.35f);
							}
							Main.dust[num6].scale *= 1f + (float)Main.rand.Next(20, 40) * 0.01f;
							Main.dust[num6].noGravity = true;
							Main.dust[num6].noLight = true;
							Main.dust[num6].velocity *= 0.001f;
							Dust expr_F15_cp_0 = Main.dust[num6];
							expr_F15_cp_0.velocity.Y = expr_F15_cp_0.velocity.Y - 0.003f;
							Main.dust[num6].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
						}
					}
					else
					{
						int num7 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y + (float)this.height + (float)num3), this.width + 8, 4, 16, -this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 50, default(Color), 1.5f);
						Main.dust[num7].velocity.X = Main.dust[num7].velocity.X * 0.2f;
						Main.dust[num7].velocity.Y = Main.dust[num7].velocity.Y * 0.2f;
						Main.dust[num7].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
					}
				}
			}
			else if (this.controlRight && this.velocity.X < this.accRunSpeed && this.dashDelay >= 0)
			{
				if (this.mount.Active && this.mount.Cart)
				{
					if (this.velocity.X > 0f)
					{
						this.direction = -1;
					}
				}
				else if ((this.itemAnimation == 0 || this.inventory[this.selectedItem].useTurn) && this.mount.AllowDirectionChange)
				{
					this.direction = 1;
				}
				if (this.velocity.Y == 0f || this.wingsLogic > 0 || this.mount.CanFly)
				{
					if (this.velocity.X < -this.runSlowdown)
					{
						this.velocity.X = this.velocity.X + this.runSlowdown;
					}
					this.velocity.X = this.velocity.X + this.runAcceleration * 0.2f;
					if (this.wingsLogic > 0)
					{
						this.velocity.X = this.velocity.X + this.runAcceleration * 0.2f;
					}
				}
				if (this.onWrongGround)
				{
					if (this.velocity.X > this.runSlowdown)
					{
						this.velocity.X = this.velocity.X - this.runSlowdown;
					}
					else
					{
						this.velocity.X = 0f;
					}
				}
				if (this.velocity.X > num && this.velocity.Y == 0f && !this.mount.Active)
				{
					int num8 = 0;
					if (this.gravDir == -1f)
					{
						num8 -= this.height;
					}
					if (this.runSoundDelay == 0 && this.velocity.Y == 0f)
					{
						Main.PlaySound(this.hermesStepSound.SoundType, (int)this.position.X, (int)this.position.Y, this.hermesStepSound.SoundStyle, 1f, 0f);
						this.runSoundDelay = this.hermesStepSound.IntendedCooldown;
					}
					if (this.wings == 3)
					{
						int num9 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y + (float)this.height + (float)num8), this.width + 8, 4, 186, -this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 50, default(Color), 1.5f);
						Main.dust[num9].velocity *= 0.025f;
						Main.dust[num9].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
						num9 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y + (float)this.height + (float)num8), this.width + 8, 4, 186, -this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 50, default(Color), 1.5f);
						Main.dust[num9].velocity *= 0.2f;
						Main.dust[num9].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
					}
					else if (this.sailDash)
					{
						for (int k = 0; k < 4; k++)
						{
							int num10 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y), this.width + 8, this.height, 253, -this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 100, default(Color), 1.5f);
							Main.dust[num10].noGravity = true;
							Main.dust[num10].velocity.X = Main.dust[num10].velocity.X * 0.2f;
							Main.dust[num10].velocity.Y = Main.dust[num10].velocity.Y * 0.2f;
							Main.dust[num10].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
							Main.dust[num10].scale += (float)Main.rand.Next(-5, 3) * 0.1f;
							Vector2 value2 = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
							value2.Normalize();
							value2 *= (float)Main.rand.Next(81) * 0.1f;
						}
					}
					else if (this.coldDash)
					{
						for (int l = 0; l < 2; l++)
						{
							int num11;
							if (l == 0)
							{
								num11 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height + this.gfxOffY), this.width / 2, 6, 76, 0f, 0f, 0, default(Color), 1.35f);
							}
							else
							{
								num11 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2), this.position.Y + (float)this.height + this.gfxOffY), this.width / 2, 6, 76, 0f, 0f, 0, default(Color), 1.35f);
							}
							Main.dust[num11].scale *= 1f + (float)Main.rand.Next(20, 40) * 0.01f;
							Main.dust[num11].noGravity = true;
							Main.dust[num11].noLight = true;
							Main.dust[num11].velocity *= 0.001f;
							Dust expr_16A7_cp_0 = Main.dust[num11];
							expr_16A7_cp_0.velocity.Y = expr_16A7_cp_0.velocity.Y - 0.003f;
							Main.dust[num11].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
						}
					}
					else
					{
						int num12 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y + (float)this.height + (float)num8), this.width + 8, 4, 16, -this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 50, default(Color), 1.5f);
						Main.dust[num12].velocity.X = Main.dust[num12].velocity.X * 0.2f;
						Main.dust[num12].velocity.Y = Main.dust[num12].velocity.Y * 0.2f;
						Main.dust[num12].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
					}
				}
			}
			else if (this.mount.Active && this.mount.Cart && Math.Abs(this.velocity.X) >= 1f)
			{
				if (this.onWrongGround)
				{
					if (this.velocity.X > 0f)
					{
						if (this.velocity.X > this.runSlowdown)
						{
							this.velocity.X = this.velocity.X - this.runSlowdown;
						}
						else
						{
							this.velocity.X = 0f;
						}
					}
					else if (this.velocity.X < 0f)
					{
						if (this.velocity.X < -this.runSlowdown)
						{
							this.velocity.X = this.velocity.X + this.runSlowdown;
						}
						else
						{
							this.velocity.X = 0f;
						}
					}
				}
				if (this.velocity.X > this.maxRunSpeed)
				{
					this.velocity.X = this.maxRunSpeed;
				}
				if (this.velocity.X < -this.maxRunSpeed)
				{
					this.velocity.X = -this.maxRunSpeed;
				}
			}
			else if (this.velocity.Y == 0f)
			{
				if (this.velocity.X > this.runSlowdown)
				{
					this.velocity.X = this.velocity.X - this.runSlowdown;
				}
				else if (this.velocity.X < -this.runSlowdown)
				{
					this.velocity.X = this.velocity.X + this.runSlowdown;
				}
				else
				{
					this.velocity.X = 0f;
				}
			}
			else if (!this.PortalPhysicsEnabled)
			{
				if ((double)this.velocity.X > (double)this.runSlowdown * 0.5)
				{
					this.velocity.X = this.velocity.X - this.runSlowdown * 0.5f;
				}
				else if ((double)this.velocity.X < (double)(-(double)this.runSlowdown) * 0.5)
				{
					this.velocity.X = this.velocity.X + this.runSlowdown * 0.5f;
				}
				else
				{
					this.velocity.X = 0f;
				}
			}
			if (flag3)
			{
				if (num2 < 0f && this.velocity.X > num2)
				{
					this.velocity.X = this.velocity.X + num2;
					if (this.velocity.X < num2)
					{
						this.velocity.X = num2;
					}
				}
				if (num2 > 0f && this.velocity.X < num2)
				{
					this.velocity.X = this.velocity.X + num2;
					if (this.velocity.X > num2)
					{
						this.velocity.X = num2;
					}
				}
			}
			if (this.mount.Active && this.mount.Type == 10 && Math.Abs(this.velocity.X) > this.mount.DashSpeed - this.mount.RunSpeed / 2f)
			{
				Rectangle rect = this.getRect();
				if (this.direction == 1)
				{
					rect.Offset(this.width - 1, 0);
				}
				rect.Width = 2;
				rect.Inflate(6, 12);
				float damage = 80f * this.minionDamage;
				float knockback = 10f;
				int nPCImmuneTime = 30;
				int playerImmuneTime = 6;
				this.CollideWithNPCs(rect, damage, knockback, nPCImmuneTime, playerImmuneTime);
			}
			if (this.mount.Active && this.mount.Type == 14 && Math.Abs(this.velocity.X) > this.mount.RunSpeed / 2f)
			{
				Rectangle rect2 = this.getRect();
				if (this.direction == 1)
				{
					rect2.Offset(this.width - 1, 0);
				}
				rect2.Width = 2;
				rect2.Inflate(6, 12);
				float damage2 = 90f * this.minionDamage;
				float knockback2 = 10f;
				int nPCImmuneTime2 = 30;
				int playerImmuneTime2 = 6;
				this.CollideWithNPCs(rect2, damage2, knockback2, nPCImmuneTime2, playerImmuneTime2);
			}
		}

		private int CollideWithNPCs(Rectangle myRect, float Damage, float Knockback, int NPCImmuneTime, int PlayerImmuneTime)
		{
			int num = 0;
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.active && !nPC.dontTakeDamage && !nPC.friendly && nPC.immune[this.whoAmI] == 0)
				{
					Rectangle rect = nPC.getRect();
					if (myRect.Intersects(rect) && (nPC.noTileCollide || Collision.CanHit(this.position, this.width, this.height, nPC.position, nPC.width, nPC.height)))
					{
						int direction = this.direction;
						if (this.velocity.X < 0f)
						{
							direction = -1;
						}
						if (this.velocity.X > 0f)
						{
							direction = 1;
						}
						if (this.whoAmI == Main.myPlayer)
						{
							this.ApplyDamageToNPC(nPC, (int)Damage, Knockback, direction, false);
						}
						nPC.immune[this.whoAmI] = NPCImmuneTime;
						this.immune = true;
						this.immuneNoBlink = true;
						this.immuneTime = PlayerImmuneTime;
						num++;
						break;
					}
				}
			}
			return num;
		}

		public void ApplyDamageToNPC(NPC npc, int damage, float knockback, int direction, bool crit)
		{
			npc.StrikeNPC(damage, knockback, direction, crit, false, false);
			if (Main.netMode != 0)
			{
				NetMessage.SendData(28, -1, -1, "", npc.whoAmI, (float)damage, knockback, (float)direction, crit.ToInt(), 0, 0);
			}
			int num = Item.NPCtoBanner(npc.BannerID());
			if (num >= 0)
			{
				this.lastCreatureHit = num;
			}
		}

		public void JumpMovement()
		{
			if (this.mount.Active && this.mount.Type == 3 && this.wetSlime == 0 && this.velocity.Y > 0f)
			{
				Rectangle rect = this.getRect();
				rect.Offset(0, this.height - 1);
				rect.Height = 2;
				rect.Inflate(12, 6);
				for (int i = 0; i < 200; i++)
				{
					NPC nPC = Main.npc[i];
					if (nPC.active && !nPC.dontTakeDamage && !nPC.friendly && nPC.immune[this.whoAmI] == 0)
					{
						Rectangle rect2 = nPC.getRect();
						if (rect.Intersects(rect2) && (nPC.noTileCollide || Collision.CanHit(this.position, this.width, this.height, nPC.position, nPC.width, nPC.height)))
						{
							float num = 40f * this.minionDamage;
							float knockback = 5f;
							int direction = this.direction;
							if (this.velocity.X < 0f)
							{
								direction = -1;
							}
							if (this.velocity.X > 0f)
							{
								direction = 1;
							}
							if (this.whoAmI == Main.myPlayer)
							{
								this.ApplyDamageToNPC(nPC, (int)num, knockback, direction, false);
							}
							nPC.immune[this.whoAmI] = 10;
							this.velocity.Y = -10f;
							this.immune = true;
							this.immuneNoBlink = true;
							this.immuneTime = 6;
							break;
						}
					}
				}
			}
			if (this.controlJump)
			{
				bool flag = false;
				if (this.mount.Active && this.mount.Type == 3 && this.wetSlime > 0)
				{
					flag = true;
				}
				if (this.jump > 0)
				{
					if (this.velocity.Y == 0f)
					{
						this.jump = 0;
					}
					else
					{
						this.velocity.Y = -Player.jumpSpeed * this.gravDir;
						if (this.merman && (!this.mount.Active || !this.mount.Cart))
						{
							if (this.swimTime <= 10)
							{
								this.swimTime = 30;
							}
						}
						else
						{
							this.jump--;
						}
					}
				}
				else if ((this.sliding || this.velocity.Y == 0f || flag || this.jumpAgainCloud || this.jumpAgainSandstorm || this.jumpAgainBlizzard || this.jumpAgainFart || this.jumpAgainSail || this.jumpAgainUnicorn || (this.wet && this.accFlipper && (!this.mount.Active || !this.mount.Cart))) && (this.releaseJump || (this.autoJump && (this.velocity.Y == 0f || this.sliding))))
				{
					if (this.sliding || this.velocity.Y == 0f)
					{
						this.justJumped = true;
					}
					bool flag2 = false;
					if (this.wet && this.accFlipper)
					{
						if (this.swimTime == 0)
						{
							this.swimTime = 30;
						}
						flag2 = true;
					}
					bool flag3 = false;
					bool flag4 = false;
					bool flag5 = false;
					bool flag6 = false;
					bool flag7 = false;
					if (!flag)
					{
						if (this.jumpAgainUnicorn)
						{
							flag7 = true;
							this.jumpAgainUnicorn = false;
						}
						else if (this.jumpAgainSandstorm)
						{
							flag3 = true;
							this.jumpAgainSandstorm = false;
						}
						else if (this.jumpAgainBlizzard)
						{
							flag4 = true;
							this.jumpAgainBlizzard = false;
						}
						else if (this.jumpAgainFart)
						{
							this.jumpAgainFart = false;
							flag5 = true;
						}
						else if (this.jumpAgainSail)
						{
							this.jumpAgainSail = false;
							flag6 = true;
						}
						else
						{
							this.jumpAgainCloud = false;
						}
					}
					this.canRocket = false;
					this.rocketRelease = false;
					if ((this.velocity.Y == 0f || this.sliding || (this.autoJump && this.justJumped)) && this.doubleJumpCloud)
					{
						this.jumpAgainCloud = true;
					}
					if ((this.velocity.Y == 0f || this.sliding || (this.autoJump && this.justJumped)) && this.doubleJumpSandstorm)
					{
						this.jumpAgainSandstorm = true;
					}
					if ((this.velocity.Y == 0f || this.sliding || (this.autoJump && this.justJumped)) && this.doubleJumpBlizzard)
					{
						this.jumpAgainBlizzard = true;
					}
					if ((this.velocity.Y == 0f || this.sliding || (this.autoJump && this.justJumped)) && this.doubleJumpFart)
					{
						this.jumpAgainFart = true;
					}
					if ((this.velocity.Y == 0f || this.sliding || (this.autoJump && this.justJumped)) && this.doubleJumpSail)
					{
						this.jumpAgainSail = true;
					}
					if ((this.velocity.Y == 0f || this.sliding || (this.autoJump && this.justJumped)) && this.doubleJumpUnicorn)
					{
						this.jumpAgainUnicorn = true;
					}
					if (this.velocity.Y == 0f || flag2 || this.sliding || flag)
					{
						this.velocity.Y = -Player.jumpSpeed * this.gravDir;
						this.jump = Player.jumpHeight;
						if (this.sliding)
						{
							this.velocity.X = (float)(3 * -(float)this.slideDir);
						}
					}
					else if (flag3)
					{
						this.dJumpEffectSandstorm = true;
						int arg_5B9_0 = this.height;
						float arg_5C6_0 = this.gravDir;
						Main.PlaySound(16, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						this.velocity.Y = -Player.jumpSpeed * this.gravDir;
						this.jump = Player.jumpHeight * 3;
					}
					else if (flag4)
					{
						this.dJumpEffectBlizzard = true;
						int arg_62D_0 = this.height;
						float arg_63A_0 = this.gravDir;
						Main.PlaySound(16, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						this.velocity.Y = -Player.jumpSpeed * this.gravDir;
						this.jump = (int)((double)Player.jumpHeight * 1.5);
					}
					else if (flag6)
					{
						this.dJumpEffectSail = true;
						int num2 = this.height;
						if (this.gravDir == -1f)
						{
							num2 = 0;
						}
						Main.PlaySound(16, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						this.velocity.Y = -Player.jumpSpeed * this.gravDir;
						this.jump = (int)((double)Player.jumpHeight * 1.25);
						for (int j = 0; j < 30; j++)
						{
							int num3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)num2), this.width, 12, 253, this.velocity.X * 0.3f, this.velocity.Y * 0.3f, 100, default(Color), 1.5f);
							if (j % 2 == 0)
							{
								Dust expr_79B_cp_0 = Main.dust[num3];
								expr_79B_cp_0.velocity.X = expr_79B_cp_0.velocity.X + (float)Main.rand.Next(30, 71) * 0.1f;
							}
							else
							{
								Dust expr_7CB_cp_0 = Main.dust[num3];
								expr_7CB_cp_0.velocity.X = expr_7CB_cp_0.velocity.X - (float)Main.rand.Next(30, 71) * 0.1f;
							}
							Dust expr_7F9_cp_0 = Main.dust[num3];
							expr_7F9_cp_0.velocity.Y = expr_7F9_cp_0.velocity.Y + (float)Main.rand.Next(-10, 31) * 0.1f;
							Main.dust[num3].noGravity = true;
							Main.dust[num3].scale += (float)Main.rand.Next(-10, 41) * 0.01f;
							Main.dust[num3].velocity *= Main.dust[num3].scale * 0.7f;
							Vector2 value = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
							value.Normalize();
							value *= (float)Main.rand.Next(81) * 0.1f;
						}
					}
					else if (flag5)
					{
						this.dJumpEffectFart = true;
						int num4 = this.height;
						if (this.gravDir == -1f)
						{
							num4 = 0;
						}
						Main.PlaySound(SoundID.Item16, this.position);
						this.velocity.Y = -Player.jumpSpeed * this.gravDir;
						this.jump = Player.jumpHeight * 2;
						for (int k = 0; k < 10; k++)
						{
							int num5 = Dust.NewDust(new Vector2(this.position.X - 34f, this.position.Y + (float)num4 - 16f), 102, 32, 188, -this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 100, default(Color), 1.5f);
							Main.dust[num5].velocity.X = Main.dust[num5].velocity.X * 0.5f - this.velocity.X * 0.1f;
							Main.dust[num5].velocity.Y = Main.dust[num5].velocity.Y * 0.5f - this.velocity.Y * 0.3f;
						}
						int num6 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 16f, this.position.Y + (float)num4 - 16f), new Vector2(-this.velocity.X, -this.velocity.Y), Main.rand.Next(435, 438), 1f);
						Main.gore[num6].velocity.X = Main.gore[num6].velocity.X * 0.1f - this.velocity.X * 0.1f;
						Main.gore[num6].velocity.Y = Main.gore[num6].velocity.Y * 0.1f - this.velocity.Y * 0.05f;
						num6 = Gore.NewGore(new Vector2(this.position.X - 36f, this.position.Y + (float)num4 - 16f), new Vector2(-this.velocity.X, -this.velocity.Y), Main.rand.Next(435, 438), 1f);
						Main.gore[num6].velocity.X = Main.gore[num6].velocity.X * 0.1f - this.velocity.X * 0.1f;
						Main.gore[num6].velocity.Y = Main.gore[num6].velocity.Y * 0.1f - this.velocity.Y * 0.05f;
						num6 = Gore.NewGore(new Vector2(this.position.X + (float)this.width + 4f, this.position.Y + (float)num4 - 16f), new Vector2(-this.velocity.X, -this.velocity.Y), Main.rand.Next(435, 438), 1f);
						Main.gore[num6].velocity.X = Main.gore[num6].velocity.X * 0.1f - this.velocity.X * 0.1f;
						Main.gore[num6].velocity.Y = Main.gore[num6].velocity.Y * 0.1f - this.velocity.Y * 0.05f;
					}
					else if (flag7)
					{
						this.dJumpEffectUnicorn = true;
						int arg_CFD_0 = this.height;
						float arg_D0A_0 = this.gravDir;
						Main.PlaySound(16, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						this.velocity.Y = -Player.jumpSpeed * this.gravDir;
						this.jump = Player.jumpHeight * 2;
						Vector2 center = base.Center;
						Vector2 value2 = new Vector2(50f, 20f);
						float num7 = 6.28318548f * Main.rand.NextFloat();
						for (int l = 0; l < 5; l++)
						{
							for (float num8 = 0f; num8 < 14f; num8 += 1f)
							{
								Dust dust = Main.dust[Dust.NewDust(center, 0, 0, Utils.SelectRandom<int>(Main.rand, new int[]
											{
												176,
												177,
												179
											}), 0f, 0f, 0, default(Color), 1f)];
								Vector2 vector = Vector2.UnitY.RotatedBy((double)(num8 * 6.28318548f / 14f + num7), default(Vector2));
								vector *= 0.2f * (float)l;
								dust.position = center + vector * value2;
								dust.velocity = vector + new Vector2(0f, this.gravDir * 4f);
								dust.noGravity = true;
								dust.scale = 1f + Main.rand.NextFloat() * 0.8f;
								dust.fadeIn = Main.rand.NextFloat() * 2f;
								dust.shader = GameShaders.Armor.GetSecondaryShader(this.cMount, this);
							}
						}
					}
					else
					{
						this.dJumpEffectCloud = true;
						int num9 = this.height;
						if (this.gravDir == -1f)
						{
							num9 = 0;
						}
						Main.PlaySound(16, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						this.velocity.Y = -Player.jumpSpeed * this.gravDir;
						this.jump = (int)((double)Player.jumpHeight * 0.75);
						for (int m = 0; m < 10; m++)
						{
							int num10 = Dust.NewDust(new Vector2(this.position.X - 34f, this.position.Y + (float)num9 - 16f), 102, 32, 16, -this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 100, default(Color), 1.5f);
							Main.dust[num10].velocity.X = Main.dust[num10].velocity.X * 0.5f - this.velocity.X * 0.1f;
							Main.dust[num10].velocity.Y = Main.dust[num10].velocity.Y * 0.5f - this.velocity.Y * 0.3f;
						}
						int num11 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 16f, this.position.Y + (float)num9 - 16f), new Vector2(-this.velocity.X, -this.velocity.Y), Main.rand.Next(11, 14), 1f);
						Main.gore[num11].velocity.X = Main.gore[num11].velocity.X * 0.1f - this.velocity.X * 0.1f;
						Main.gore[num11].velocity.Y = Main.gore[num11].velocity.Y * 0.1f - this.velocity.Y * 0.05f;
						num11 = Gore.NewGore(new Vector2(this.position.X - 36f, this.position.Y + (float)num9 - 16f), new Vector2(-this.velocity.X, -this.velocity.Y), Main.rand.Next(11, 14), 1f);
						Main.gore[num11].velocity.X = Main.gore[num11].velocity.X * 0.1f - this.velocity.X * 0.1f;
						Main.gore[num11].velocity.Y = Main.gore[num11].velocity.Y * 0.1f - this.velocity.Y * 0.05f;
						num11 = Gore.NewGore(new Vector2(this.position.X + (float)this.width + 4f, this.position.Y + (float)num9 - 16f), new Vector2(-this.velocity.X, -this.velocity.Y), Main.rand.Next(11, 14), 1f);
						Main.gore[num11].velocity.X = Main.gore[num11].velocity.X * 0.1f - this.velocity.X * 0.1f;
						Main.gore[num11].velocity.Y = Main.gore[num11].velocity.Y * 0.1f - this.velocity.Y * 0.05f;
					}
				}
				this.releaseJump = false;
				return;
			}
			this.jump = 0;
			this.releaseJump = true;
			this.rocketRelease = true;
		}

		public void DashMovement()
		{
			if (this.dash == 2 && this.eocDash > 0)
			{
				if (this.eocHit < 0)
				{
					Rectangle rectangle = new Rectangle((int)((double)this.position.X + (double)this.velocity.X * 0.5 - 4.0), (int)((double)this.position.Y + (double)this.velocity.Y * 0.5 - 4.0), this.width + 8, this.height + 8);
					for (int i = 0; i < 200; i++)
					{
						if (Main.npc[i].active && !Main.npc[i].dontTakeDamage && !Main.npc[i].friendly)
						{
							NPC nPC = Main.npc[i];
							Rectangle rect = nPC.getRect();
							if (rectangle.Intersects(rect) && (nPC.noTileCollide || this.CanHit(nPC)))
							{
								float num = 30f * this.meleeDamage;
								float num2 = 9f;
								bool crit = false;
								if (this.kbGlove)
								{
									num2 *= 2f;
								}
								if (this.kbBuff)
								{
									num2 *= 1.5f;
								}
								if (Main.rand.Next(100) < this.meleeCrit)
								{
									crit = true;
								}
								int num3 = this.direction;
								if (this.velocity.X < 0f)
								{
									num3 = -1;
								}
								if (this.velocity.X > 0f)
								{
									num3 = 1;
								}
								if (this.whoAmI == Main.myPlayer)
								{
									this.ApplyDamageToNPC(nPC, (int)num, num2, num3, crit);
								}
								this.eocDash = 10;
								this.dashDelay = 30;
								this.velocity.X = (float)(-(float)num3 * 9);
								this.velocity.Y = -4f;
								this.immune = true;
								this.immuneNoBlink = true;
								this.immuneTime = 4;
								this.eocHit = i;
							}
						}
					}
				}
				else if ((!this.controlLeft || this.velocity.X >= 0f) && (!this.controlRight || this.velocity.X <= 0f))
				{
					this.velocity.X = this.velocity.X * 0.95f;
				}
			}
			if (this.dash == 3 && this.dashDelay < 0 && this.whoAmI == Main.myPlayer)
			{
				Rectangle rectangle2 = new Rectangle((int)((double)this.position.X + (double)this.velocity.X * 0.5 - 4.0), (int)((double)this.position.Y + (double)this.velocity.Y * 0.5 - 4.0), this.width + 8, this.height + 8);
				for (int j = 0; j < 200; j++)
				{
					if (Main.npc[j].active && !Main.npc[j].dontTakeDamage && !Main.npc[j].friendly && Main.npc[j].immune[this.whoAmI] <= 0)
					{
						NPC nPC2 = Main.npc[j];
						Rectangle rect2 = nPC2.getRect();
						if (rectangle2.Intersects(rect2) && (nPC2.noTileCollide || this.CanHit(nPC2)))
						{
							if (!this.solarDashConsumedFlare)
							{
								this.solarDashConsumedFlare = true;
								this.ConsumeSolarFlare();
							}
							float num4 = 150f * this.meleeDamage;
							float num5 = 9f;
							bool crit2 = false;
							if (this.kbGlove)
							{
								num5 *= 2f;
							}
							if (this.kbBuff)
							{
								num5 *= 1.5f;
							}
							if (Main.rand.Next(100) < this.meleeCrit)
							{
								crit2 = true;
							}
							int direction = this.direction;
							if (this.velocity.X < 0f)
							{
								direction = -1;
							}
							if (this.velocity.X > 0f)
							{
								direction = 1;
							}
							if (this.whoAmI == Main.myPlayer)
							{
								this.ApplyDamageToNPC(nPC2, (int)num4, num5, direction, crit2);
								int num6 = Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 608, 150, 15f, Main.myPlayer, 0f, 0f);
								Main.projectile[num6].Kill();
							}
							nPC2.immune[this.whoAmI] = 6;
							this.immune = true;
							this.immuneNoBlink = true;
							this.immuneTime = 4;
						}
					}
				}
			}
			if (this.dashDelay > 0)
			{
				if (this.eocDash > 0)
				{
					this.eocDash--;
				}
				if (this.eocDash == 0)
				{
					this.eocHit = -1;
				}
				this.dashDelay--;
				return;
			}
			if (this.dashDelay < 0)
			{
				float num7 = 12f;
				float num8 = 0.992f;
				float num9 = Math.Max(this.accRunSpeed, this.maxRunSpeed);
				float num10 = 0.96f;
				int num11 = 20;
				if (this.dash == 1)
				{
					for (int k = 0; k < 2; k++)
					{
						int num12;
						if (this.velocity.Y == 0f)
						{
							num12 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height - 4f), this.width, 8, 31, 0f, 0f, 100, default(Color), 1.4f);
						}
						else
						{
							num12 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)(this.height / 2) - 8f), this.width, 16, 31, 0f, 0f, 100, default(Color), 1.4f);
						}
						Main.dust[num12].velocity *= 0.1f;
						Main.dust[num12].scale *= 1f + (float)Main.rand.Next(20) * 0.01f;
						Main.dust[num12].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
					}
				}
				else if (this.dash == 2)
				{
					for (int l = 0; l < 0; l++)
					{
						int num13;
						if (this.velocity.Y == 0f)
						{
							num13 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height - 4f), this.width, 8, 31, 0f, 0f, 100, default(Color), 1.4f);
						}
						else
						{
							num13 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)(this.height / 2) - 8f), this.width, 16, 31, 0f, 0f, 100, default(Color), 1.4f);
						}
						Main.dust[num13].velocity *= 0.1f;
						Main.dust[num13].scale *= 1f + (float)Main.rand.Next(20) * 0.01f;
						Main.dust[num13].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
					}
					num8 = 0.985f;
					num10 = 0.94f;
					num11 = 30;
				}
				else if (this.dash == 3)
				{
					for (int m = 0; m < 4; m++)
					{
						int num14 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 4f), this.width, this.height - 8, 6, 0f, 0f, 100, default(Color), 1.7f);
						Main.dust[num14].velocity *= 0.1f;
						Main.dust[num14].scale *= 1f + (float)Main.rand.Next(20) * 0.01f;
						Main.dust[num14].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
						Main.dust[num14].noGravity = true;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num14].fadeIn = 0.5f;
						}
					}
					num7 = 14f;
					num8 = 0.985f;
					num10 = 0.94f;
					num11 = 20;
				}
				else if (this.dash == 4)
				{
					for (int n = 0; n < 2; n++)
					{
						int num15 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 4f), this.width, this.height - 8, 229, 0f, 0f, 100, default(Color), 1.2f);
						Main.dust[num15].velocity *= 0.1f;
						Main.dust[num15].scale *= 1f + (float)Main.rand.Next(20) * 0.01f;
						Main.dust[num15].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
						Main.dust[num15].noGravity = true;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num15].fadeIn = 0.3f;
						}
					}
					num8 = 0.985f;
					num10 = 0.94f;
					num11 = 20;
				}
				if (this.dash > 0)
				{
					this.vortexStealthActive = false;
					if (this.velocity.X > num7 || this.velocity.X < -num7)
					{
						this.velocity.X = this.velocity.X * num8;
						return;
					}
					if (this.velocity.X > num9 || this.velocity.X < -num9)
					{
						this.velocity.X = this.velocity.X * num10;
						return;
					}
					this.dashDelay = num11;
					if (this.velocity.X < 0f)
					{
						this.velocity.X = -num9;
						return;
					}
					if (this.velocity.X > 0f)
					{
						this.velocity.X = num9;
						return;
					}
				}
			}
			else if (this.dash > 0 && !this.mount.Active)
			{
				if (this.dash == 1)
				{
					int num16 = 0;
					bool flag = false;
					if (this.dashTime > 0)
					{
						this.dashTime--;
					}
					if (this.dashTime < 0)
					{
						this.dashTime++;
					}
					if (this.controlRight && this.releaseRight)
					{
						if (this.dashTime > 0)
						{
							num16 = 1;
							flag = true;
							this.dashTime = 0;
						}
						else
						{
							this.dashTime = 15;
						}
					}
					else if (this.controlLeft && this.releaseLeft)
					{
						if (this.dashTime < 0)
						{
							num16 = -1;
							flag = true;
							this.dashTime = 0;
						}
						else
						{
							this.dashTime = -15;
						}
					}
					if (flag)
					{
						this.velocity.X = 16.9f * (float)num16;
						Point point = (base.Center + new Vector2((float)(num16 * this.width / 2 + 2), this.gravDir * (float)(-(float)this.height) / 2f + this.gravDir * 2f)).ToTileCoordinates();
						Point point2 = (base.Center + new Vector2((float)(num16 * this.width / 2 + 2), 0f)).ToTileCoordinates();
						if (WorldGen.SolidOrSlopedTile(point.X, point.Y) || WorldGen.SolidOrSlopedTile(point2.X, point2.Y))
						{
							this.velocity.X = this.velocity.X / 2f;
						}
						this.dashDelay = -1;
						for (int num17 = 0; num17 < 20; num17++)
						{
							int num18 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 2f);
							Dust expr_CDB_cp_0 = Main.dust[num18];
							expr_CDB_cp_0.position.X = expr_CDB_cp_0.position.X + (float)Main.rand.Next(-5, 6);
							Dust expr_D02_cp_0 = Main.dust[num18];
							expr_D02_cp_0.position.Y = expr_D02_cp_0.position.Y + (float)Main.rand.Next(-5, 6);
							Main.dust[num18].velocity *= 0.2f;
							Main.dust[num18].scale *= 1f + (float)Main.rand.Next(20) * 0.01f;
							Main.dust[num18].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
						}
						int num19 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 34f), default(Vector2), Main.rand.Next(61, 64), 1f);
						Main.gore[num19].velocity.X = (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.gore[num19].velocity.Y = (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.gore[num19].velocity *= 0.4f;
						num19 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 14f), default(Vector2), Main.rand.Next(61, 64), 1f);
						Main.gore[num19].velocity.X = (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.gore[num19].velocity.Y = (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.gore[num19].velocity *= 0.4f;
						return;
					}
				}
				else if (this.dash == 2)
				{
					int num20 = 0;
					bool flag2 = false;
					if (this.dashTime > 0)
					{
						this.dashTime--;
					}
					if (this.dashTime < 0)
					{
						this.dashTime++;
					}
					if (this.controlRight && this.releaseRight)
					{
						if (this.dashTime > 0)
						{
							num20 = 1;
							flag2 = true;
							this.dashTime = 0;
						}
						else
						{
							this.dashTime = 15;
						}
					}
					else if (this.controlLeft && this.releaseLeft)
					{
						if (this.dashTime < 0)
						{
							num20 = -1;
							flag2 = true;
							this.dashTime = 0;
						}
						else
						{
							this.dashTime = -15;
						}
					}
					if (flag2)
					{
						this.velocity.X = 14.5f * (float)num20;
						Point point3 = (base.Center + new Vector2((float)(num20 * this.width / 2 + 2), this.gravDir * (float)(-(float)this.height) / 2f + this.gravDir * 2f)).ToTileCoordinates();
						Point point4 = (base.Center + new Vector2((float)(num20 * this.width / 2 + 2), 0f)).ToTileCoordinates();
						if (WorldGen.SolidOrSlopedTile(point3.X, point3.Y) || WorldGen.SolidOrSlopedTile(point4.X, point4.Y))
						{
							this.velocity.X = this.velocity.X / 2f;
						}
						this.dashDelay = -1;
						this.eocDash = 15;
						for (int num21 = 0; num21 < 0; num21++)
						{
							int num22 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 2f);
							Dust expr_1106_cp_0 = Main.dust[num22];
							expr_1106_cp_0.position.X = expr_1106_cp_0.position.X + (float)Main.rand.Next(-5, 6);
							Dust expr_112D_cp_0 = Main.dust[num22];
							expr_112D_cp_0.position.Y = expr_112D_cp_0.position.Y + (float)Main.rand.Next(-5, 6);
							Main.dust[num22].velocity *= 0.2f;
							Main.dust[num22].scale *= 1f + (float)Main.rand.Next(20) * 0.01f;
							Main.dust[num22].shader = GameShaders.Armor.GetSecondaryShader(this.cShield, this);
						}
						return;
					}
				}
				else if (this.dash == 3)
				{
					int num23 = 0;
					bool flag3 = false;
					if (this.dashTime > 0)
					{
						this.dashTime--;
					}
					if (this.dashTime < 0)
					{
						this.dashTime++;
					}
					if (this.controlRight && this.releaseRight)
					{
						if (this.dashTime > 0)
						{
							num23 = 1;
							flag3 = true;
							this.dashTime = 0;
							this.solarDashing = true;
							this.solarDashConsumedFlare = false;
						}
						else
						{
							this.dashTime = 15;
						}
					}
					else if (this.controlLeft && this.releaseLeft)
					{
						if (this.dashTime < 0)
						{
							num23 = -1;
							flag3 = true;
							this.dashTime = 0;
							this.solarDashing = true;
							this.solarDashConsumedFlare = false;
						}
						else
						{
							this.dashTime = -15;
						}
					}
					if (flag3)
					{
						this.velocity.X = 21.9f * (float)num23;
						Point point5 = (base.Center + new Vector2((float)(num23 * this.width / 2 + 2), this.gravDir * (float)(-(float)this.height) / 2f + this.gravDir * 2f)).ToTileCoordinates();
						Point point6 = (base.Center + new Vector2((float)(num23 * this.width / 2 + 2), 0f)).ToTileCoordinates();
						if (WorldGen.SolidOrSlopedTile(point5.X, point5.Y) || WorldGen.SolidOrSlopedTile(point6.X, point6.Y))
						{
							this.velocity.X = this.velocity.X / 2f;
						}
						this.dashDelay = -1;
						for (int num24 = 0; num24 < 20; num24++)
						{
							int num25 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2f);
							Dust expr_13AF_cp_0 = Main.dust[num25];
							expr_13AF_cp_0.position.X = expr_13AF_cp_0.position.X + (float)Main.rand.Next(-5, 6);
							Dust expr_13D6_cp_0 = Main.dust[num25];
							expr_13D6_cp_0.position.Y = expr_13D6_cp_0.position.Y + (float)Main.rand.Next(-5, 6);
							Main.dust[num25].velocity *= 0.2f;
							Main.dust[num25].scale *= 1f + (float)Main.rand.Next(20) * 0.01f;
							Main.dust[num25].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
							Main.dust[num25].noGravity = true;
							Main.dust[num25].fadeIn = 0.5f;
						}
					}
				}
			}
		}

		public void WallslideMovement()
		{
			this.sliding = false;
			if (this.slideDir != 0 && this.spikedBoots > 0 && !this.mount.Active && ((this.controlLeft && this.slideDir == -1) || (this.controlRight && this.slideDir == 1)))
			{
				bool flag = false;
				float num = this.position.X;
				if (this.slideDir == 1)
				{
					num += (float)this.width;
				}
				num += (float)this.slideDir;
				float num2 = this.position.Y + (float)this.height + 1f;
				if (this.gravDir < 0f)
				{
					num2 = this.position.Y - 1f;
				}
				num /= 16f;
				num2 /= 16f;
				if (WorldGen.SolidTile((int)num, (int)num2) && WorldGen.SolidTile((int)num, (int)num2 - 1))
				{
					flag = true;
				}
				if (this.spikedBoots >= 2)
				{
					if (flag && ((this.velocity.Y > 0f && this.gravDir == 1f) || (this.velocity.Y < this.gravity && this.gravDir == -1f)))
					{
						float num3 = this.gravity;
						if (this.slowFall)
						{
							if (this.controlUp)
							{
								num3 = this.gravity / 10f * this.gravDir;
							}
							else
							{
								num3 = this.gravity / 3f * this.gravDir;
							}
						}
						this.fallStart = (int)(this.position.Y / 16f);
						if ((this.controlDown && this.gravDir == 1f) || (this.controlUp && this.gravDir == -1f))
						{
							this.velocity.Y = 4f * this.gravDir;
							int num4 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)((this.width / 2 - 4) * this.slideDir), this.position.Y + (float)(this.height / 2) + (float)(this.height / 2 - 4) * this.gravDir), 8, 8, 31, 0f, 0f, 0, default(Color), 1f);
							if (this.slideDir < 0)
							{
								Dust expr_26B_cp_0 = Main.dust[num4];
								expr_26B_cp_0.position.X = expr_26B_cp_0.position.X - 10f;
							}
							if (this.gravDir < 0f)
							{
								Dust expr_296_cp_0 = Main.dust[num4];
								expr_296_cp_0.position.Y = expr_296_cp_0.position.Y - 12f;
							}
							Main.dust[num4].velocity *= 0.1f;
							Main.dust[num4].scale *= 1.2f;
							Main.dust[num4].noGravity = true;
							Main.dust[num4].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
						}
						else if (this.gravDir == -1f)
						{
							this.velocity.Y = (-num3 + 1E-05f) * this.gravDir;
						}
						else
						{
							this.velocity.Y = (-num3 + 1E-05f) * this.gravDir;
						}
						this.sliding = true;
						return;
					}
				}
				else if ((flag && (double)this.velocity.Y > 0.5 && this.gravDir == 1f) || ((double)this.velocity.Y < -0.5 && this.gravDir == -1f))
				{
					this.fallStart = (int)(this.position.Y / 16f);
					if (this.controlDown)
					{
						this.velocity.Y = 4f * this.gravDir;
					}
					else
					{
						this.velocity.Y = 0.5f * this.gravDir;
					}
					this.sliding = true;
					int num5 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)((this.width / 2 - 4) * this.slideDir), this.position.Y + (float)(this.height / 2) + (float)(this.height / 2 - 4) * this.gravDir), 8, 8, 31, 0f, 0f, 0, default(Color), 1f);
					if (this.slideDir < 0)
					{
						Dust expr_48E_cp_0 = Main.dust[num5];
						expr_48E_cp_0.position.X = expr_48E_cp_0.position.X - 10f;
					}
					if (this.gravDir < 0f)
					{
						Dust expr_4B9_cp_0 = Main.dust[num5];
						expr_4B9_cp_0.position.Y = expr_4B9_cp_0.position.Y - 12f;
					}
					Main.dust[num5].velocity *= 0.1f;
					Main.dust[num5].scale *= 1.2f;
					Main.dust[num5].noGravity = true;
					Main.dust[num5].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
				}
			}
		}

		public void CarpetMovement()
		{
			bool flag = false;
			if (this.grappling[0] == -1 && this.carpet && !this.jumpAgainCloud && !this.jumpAgainSandstorm && !this.jumpAgainBlizzard && !this.jumpAgainFart && !this.jumpAgainSail && !this.jumpAgainUnicorn && this.jump == 0 && this.velocity.Y != 0f && this.rocketTime == 0 && this.wingTime == 0f && !this.mount.Active)
			{
				if (this.controlJump && this.canCarpet)
				{
					this.canCarpet = false;
					this.carpetTime = 300;
				}
				if (this.carpetTime > 0 && this.controlJump)
				{
					this.fallStart = (int)(this.position.Y / 16f);
					flag = true;
					this.carpetTime--;
					float num = this.gravity;
					if (this.gravDir == 1f && this.velocity.Y > -num)
					{
						this.velocity.Y = -(num + 1E-06f);
					}
					else if (this.gravDir == -1f && this.velocity.Y < num)
					{
						this.velocity.Y = num + 1E-06f;
					}
					this.carpetFrameCounter += 1f + Math.Abs(this.velocity.X * 0.5f);
					if (this.carpetFrameCounter > 8f)
					{
						this.carpetFrameCounter = 0f;
						this.carpetFrame++;
					}
					if (this.carpetFrame < 0)
					{
						this.carpetFrame = 0;
					}
					if (this.carpetFrame > 5)
					{
						this.carpetFrame = 0;
					}
				}
			}
			if (!flag)
			{
				this.carpetFrame = -1;
				return;
			}
			this.slowFall = false;
		}

		public void DoubleJumpVisuals()
		{
			if (this.dJumpEffectCloud && this.doubleJumpCloud && !this.jumpAgainCloud && (this.jumpAgainSandstorm || !this.doubleJumpSandstorm) && ((this.gravDir == 1f && this.velocity.Y < 0f) || (this.gravDir == -1f && this.velocity.Y > 0f)))
			{
				int num = this.height;
				if (this.gravDir == -1f)
				{
					num = -6;
				}
				int num2 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y + (float)num), this.width + 8, 4, 16, -this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 100, default(Color), 1.5f);
				Main.dust[num2].velocity.X = Main.dust[num2].velocity.X * 0.5f - this.velocity.X * 0.1f;
				Main.dust[num2].velocity.Y = Main.dust[num2].velocity.Y * 0.5f - this.velocity.Y * 0.3f;
			}
			if (this.dJumpEffectSandstorm && this.doubleJumpSandstorm && !this.jumpAgainSandstorm && ((this.gravDir == 1f && this.velocity.Y < 0f) || (this.gravDir == -1f && this.velocity.Y > 0f)))
			{
				int num3 = this.height;
				if (this.gravDir == -1f)
				{
					num3 = -6;
				}
				float num4 = ((float)this.jump / 75f + 1f) / 2f;
				for (int i = 0; i < 3; i++)
				{
					int num5 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)(num3 / 2)), this.width, 32, 124, this.velocity.X * 0.3f, this.velocity.Y * 0.3f, 150, default(Color), 1f * num4);
					Main.dust[num5].velocity *= 0.5f * num4;
					Main.dust[num5].fadeIn = 1.5f * num4;
				}
				this.sandStorm = true;
				if (this.miscCounter % 3 == 0)
				{
					int num6 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 18f, this.position.Y + (float)(num3 / 2)), new Vector2(-this.velocity.X, -this.velocity.Y), Main.rand.Next(220, 223), num4);
					Main.gore[num6].velocity = this.velocity * 0.3f * num4;
					Main.gore[num6].alpha = 100;
				}
			}
			if (this.dJumpEffectFart && this.doubleJumpFart && !this.jumpAgainFart && ((this.gravDir == 1f && this.velocity.Y < 0f) || (this.gravDir == -1f && this.velocity.Y > 0f)))
			{
				int num7 = this.height;
				if (this.gravDir == -1f)
				{
					num7 = -6;
				}
				int num8 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y + (float)num7), this.width + 8, 4, 188, -this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 100, default(Color), 1.5f);
				Main.dust[num8].velocity.X = Main.dust[num8].velocity.X * 0.5f - this.velocity.X * 0.1f;
				Main.dust[num8].velocity.Y = Main.dust[num8].velocity.Y * 0.5f - this.velocity.Y * 0.3f;
				Main.dust[num8].velocity *= 0.5f;
			}
			if (this.dJumpEffectUnicorn && this.doubleJumpUnicorn && !this.jumpAgainUnicorn && ((this.gravDir == 1f && this.velocity.Y < 0f) || (this.gravDir == -1f && this.velocity.Y > 0f)))
			{
				Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, Utils.SelectRandom<int>(Main.rand, new int[]
							{
								176,
								177,
								179
							}), 0f, 0f, 0, default(Color), 1f)];
				dust.velocity = Vector2.Zero;
				dust.noGravity = true;
				dust.scale = 0.5f + Main.rand.NextFloat() * 0.8f;
				dust.fadeIn = 1f + Main.rand.NextFloat() * 2f;
				dust.shader = GameShaders.Armor.GetSecondaryShader(this.cMount, this);
			}
			if (this.dJumpEffectSail && this.doubleJumpSail && !this.jumpAgainSail && ((this.gravDir == 1f && this.velocity.Y < 1f) || (this.gravDir == -1f && this.velocity.Y > 1f)))
			{
				int num9 = 1;
				if (this.jump > 0)
				{
					num9 = 2;
				}
				int num10 = this.height - 6;
				if (this.gravDir == -1f)
				{
					num10 = 6;
				}
				for (int j = 0; j < num9; j++)
				{
					int num11 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)num10), this.width, 12, 253, this.velocity.X * 0.3f, this.velocity.Y * 0.3f, 100, default(Color), 1.5f);
					Main.dust[num11].scale += (float)Main.rand.Next(-5, 3) * 0.1f;
					if (this.jump <= 0)
					{
						Main.dust[num11].scale *= 0.8f;
					}
					else
					{
						Main.dust[num11].velocity -= this.velocity / 5f;
					}
					Main.dust[num11].noGravity = true;
					Vector2 value = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
					value.Normalize();
					value *= (float)Main.rand.Next(81) * 0.1f;
				}
			}
			if (this.dJumpEffectBlizzard && this.doubleJumpBlizzard && !this.jumpAgainBlizzard && ((this.gravDir == 1f && this.velocity.Y < 0f) || (this.gravDir == -1f && this.velocity.Y > 0f)))
			{
				int num12 = this.height - 6;
				if (this.gravDir == -1f)
				{
					num12 = 6;
				}
				for (int k = 0; k < 2; k++)
				{
					int num13 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)num12), this.width, 12, 76, this.velocity.X * 0.3f, this.velocity.Y * 0.3f, 0, default(Color), 1f);
					Main.dust[num13].velocity *= 0.1f;
					if (k == 0)
					{
						Main.dust[num13].velocity += this.velocity * 0.03f;
					}
					else
					{
						Main.dust[num13].velocity -= this.velocity * 0.03f;
					}
					Main.dust[num13].velocity -= this.velocity * 0.1f;
					Main.dust[num13].noGravity = true;
					Main.dust[num13].noLight = true;
				}
				for (int l = 0; l < 3; l++)
				{
					int num14 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)num12), this.width, 12, 76, this.velocity.X * 0.3f, this.velocity.Y * 0.3f, 0, default(Color), 1f);
					Main.dust[num14].fadeIn = 1.5f;
					Main.dust[num14].velocity *= 0.6f;
					Main.dust[num14].velocity += this.velocity * 0.8f;
					Main.dust[num14].noGravity = true;
					Main.dust[num14].noLight = true;
				}
				for (int m = 0; m < 3; m++)
				{
					int num15 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)num12), this.width, 12, 76, this.velocity.X * 0.3f, this.velocity.Y * 0.3f, 0, default(Color), 1f);
					Main.dust[num15].fadeIn = 1.5f;
					Main.dust[num15].velocity *= 0.6f;
					Main.dust[num15].velocity -= this.velocity * 0.8f;
					Main.dust[num15].noGravity = true;
					Main.dust[num15].noLight = true;
				}
			}
		}

		public void WingMovement()
		{
			if (this.wingsLogic == 4 && this.controlUp)
			{
				this.velocity.Y = this.velocity.Y - 0.2f * this.gravDir;
				if (this.gravDir == 1f)
				{
					if (this.velocity.Y > 0f)
					{
						this.velocity.Y = this.velocity.Y - 1f;
					}
					else if (this.velocity.Y > -Player.jumpSpeed)
					{
						this.velocity.Y = this.velocity.Y - 0.2f;
					}
					if (this.velocity.Y < -Player.jumpSpeed * 3f)
					{
						this.velocity.Y = -Player.jumpSpeed * 3f;
					}
				}
				else
				{
					if (this.velocity.Y < 0f)
					{
						this.velocity.Y = this.velocity.Y + 1f;
					}
					else if (this.velocity.Y < Player.jumpSpeed)
					{
						this.velocity.Y = this.velocity.Y + 0.2f;
					}
					if (this.velocity.Y > Player.jumpSpeed * 3f)
					{
						this.velocity.Y = Player.jumpSpeed * 3f;
					}
				}
				this.wingTime -= 2f;
				return;
			}
			float num = 0.1f;
			float num2 = 0.5f;
			float num3 = 1.5f;
			float num4 = 0.5f;
			float num5 = 0.1f;
			if (this.wingsLogic == 26)
			{
				num2 = 0.75f;
				//patch file: num2, num5
				num5 = 0.15f;
				num4 = 1f;
				//patch file: num, num3, num4
				num3 = 2.5f;
				num = 0.125f;
			}
			if (this.wingsLogic == 37)
			{
				num2 = 0.75f;
				num5 = 0.15f;
				num4 = 1f;
				num3 = 2.5f;
				num = 0.125f;
			}
			if (this.wingsLogic == 29 || this.wingsLogic == 32)
			{
				num2 = 0.85f;
				num5 = 0.15f;
				num4 = 1f;
				num3 = 3f;
				num = 0.135f;
			}
			if (this.wingsLogic == 30 || this.wingsLogic == 31)
			{
				num4 = 1f;
				num3 = 2f;
				num = 0.15f;
			}
			ItemLoader.VerticalWingSpeeds(this, ref num2, ref num5, ref num4, ref num3, ref num);
			this.velocity.Y = this.velocity.Y - num * this.gravDir;
			if (this.gravDir == 1f)
			{
				if (this.velocity.Y > 0f)
				{
					this.velocity.Y = this.velocity.Y - num2;
				}
				else if (this.velocity.Y > -Player.jumpSpeed * num4)
				{
					this.velocity.Y = this.velocity.Y - num5;
				}
				if (this.velocity.Y < -Player.jumpSpeed * num3)
				{
					this.velocity.Y = -Player.jumpSpeed * num3;
				}
			}
			else
			{
				if (this.velocity.Y < 0f)
				{
					this.velocity.Y = this.velocity.Y + num2;
				}
				else if (this.velocity.Y < Player.jumpSpeed * num4)
				{
					this.velocity.Y = this.velocity.Y + num5;
				}
				if (this.velocity.Y > Player.jumpSpeed * num3)
				{
					this.velocity.Y = Player.jumpSpeed * num3;
				}
			}
			if ((this.wingsLogic == 22 || this.wingsLogic == 28 || this.wingsLogic == 30 || this.wingsLogic == 31 || this.wingsLogic == 37) && this.controlDown && !this.controlLeft && !this.controlRight)
			{
				this.wingTime -= 0.5f;
				return;
			}
			this.wingTime -= 1f;
		}

		public void MoonLeechRope()
		{
			int num = -1;
			for (int i = 0; i < 1000; i++)
			{
				if (Main.projectile[i].active && Main.projectile[i].type == 456 && Main.projectile[i].ai[1] == (float)this.whoAmI)
				{
					num = i;
					break;
				}
			}
			if (num == -1)
			{
				return;
			}
			if (Main.projectile[num].ai[0] < 0f)
			{
				return;
			}
			Projectile projectile = Main.projectile[num];
			Vector2 value = new Vector2(0f, 216f);
			Vector2 value2 = Main.npc[(int)Math.Abs(projectile.ai[0]) - 1].Center - base.Center + value;
			if (value2.Length() > 200f)
			{
				Vector2 value3 = Vector2.Normalize(value2);
				this.position += value3 * (value2.Length() - 200f);
			}
		}

		public void WOFTongue()
		{
			if (Main.wof >= 0 && Main.npc[Main.wof].active)
			{
				float num = Main.npc[Main.wof].position.X + 40f;
				if (Main.npc[Main.wof].direction > 0)
				{
					num -= 96f;
				}
				if (this.position.X + (float)this.width > num && this.position.X < num + 140f && this.gross)
				{
					this.noKnockback = false;
					this.Hurt(PlayerDeathReason.LegacyDefault(), 50, Main.npc[Main.wof].direction, false, false, false, -1);
				}
				if (!this.gross && this.position.Y > (float)((Main.maxTilesY - 250) * 16) && this.position.X > num - 1920f && this.position.X < num + 1920f)
				{
					this.AddBuff(37, 10, true);
					Main.PlaySound(4, (int)Main.npc[Main.wof].position.X, (int)Main.npc[Main.wof].position.Y, 10, 1f, 0f);
				}
				if (this.gross)
				{
					if (this.position.Y < (float)((Main.maxTilesY - 200) * 16))
					{
						this.AddBuff(38, 10, true);
					}
					if (Main.npc[Main.wof].direction < 0)
					{
						if (this.position.X + (float)(this.width / 2) > Main.npc[Main.wof].position.X + (float)(Main.npc[Main.wof].width / 2) + 40f)
						{
							this.AddBuff(38, 10, true);
						}
					}
					else if (this.position.X + (float)(this.width / 2) < Main.npc[Main.wof].position.X + (float)(Main.npc[Main.wof].width / 2) - 40f)
					{
						this.AddBuff(38, 10, true);
					}
				}
				if (this.tongued)
				{
					this.controlHook = false;
					this.controlUseItem = false;
					for (int i = 0; i < 1000; i++)
					{
						if (Main.projectile[i].active && Main.projectile[i].owner == Main.myPlayer && Main.projectile[i].aiStyle == 7)
						{
							Main.projectile[i].Kill();
						}
					}
					Vector2 center = base.Center;
					float num2 = Main.npc[Main.wof].position.X + (float)(Main.npc[Main.wof].width / 2) - center.X;
					float num3 = Main.npc[Main.wof].position.Y + (float)(Main.npc[Main.wof].height / 2) - center.Y;
					float num4 = (float)Math.Sqrt((double)(num2 * num2 + num3 * num3));
					if (num4 > 3000f)
					{
						this.KillMe(PlayerDeathReason.ByOther(11), 1000.0, 0, false);
						return;
					}
					if (Main.npc[Main.wof].position.X < 608f || Main.npc[Main.wof].position.X > (float)((Main.maxTilesX - 38) * 16))
					{
						this.KillMe(PlayerDeathReason.ByOther(12), 1000.0, 0, false);
					}
				}
			}
		}

		public void StatusPlayer(NPC npc)
		{
			if (Main.expertMode && ((npc.type == 266 && Main.rand.Next(3) == 0) || npc.type == 267))
			{
				int num = Main.rand.Next(9);
				if (num == 2 || num == 4)
				{
					num = Main.rand.Next(9);
				}
				float num2 = (float)Main.rand.Next(75, 150) * 0.01f;
				if (num == 0)
				{
					this.AddBuff(20, (int)(60f * num2 * 3.5f), true);
				}
				else if (num == 1)
				{
					this.AddBuff(22, (int)(60f * num2 * 2f), true);
				}
				else if (num == 2)
				{
					this.AddBuff(23, (int)(60f * num2 * 0.5f), true);
				}
				else if (num == 3)
				{
					this.AddBuff(30, (int)(60f * num2 * 5f), true);
				}
				else if (num == 4)
				{
					this.AddBuff(31, (int)(60f * num2 * 1f), true);
				}
				else if (num == 5)
				{
					this.AddBuff(32, (int)(60f * num2 * 3.5f), true);
				}
				else if (num == 6)
				{
					this.AddBuff(33, (int)(60f * num2 * 7.5f), true);
				}
				else if (num == 7)
				{
					this.AddBuff(35, (int)(60f * num2 * 1f), true);
				}
				else if (num == 8)
				{
					this.AddBuff(36, (int)((double)(60f * num2) * 6.5), true);
				}
			}
			if (npc.type == 530 || npc.type == 531)
			{
				this.AddBuff(70, Main.rand.Next(240, 481), true);
			}
			if (npc.type == 159 || npc.type == 158)
			{
				this.AddBuff(30, Main.rand.Next(300, 600), true);
			}
			if (npc.type == 525)
			{
				this.AddBuff(39, 420, true);
			}
			if (npc.type == 526)
			{
				this.AddBuff(69, 420, true);
			}
			if (npc.type == 527)
			{
				this.AddBuff(31, 840, true);
			}
			if (Main.expertMode && (npc.type == 49 || npc.type == 93 || npc.type == 51 || npc.type == 152) && Main.rand.Next(10) == 0)
			{
				this.AddBuff(148, Main.rand.Next(1800, 5400), true);
			}
			if (Main.expertMode && npc.type == 222)
			{
				this.AddBuff(20, Main.rand.Next(60, 240), true);
			}
			if (Main.expertMode && (npc.type == 210 || npc.type == 211))
			{
				this.AddBuff(20, Main.rand.Next(60, 180), true);
			}
			if (Main.expertMode && npc.type == 35)
			{
				this.AddBuff(30, Main.rand.Next(180, 300), true);
			}
			if (Main.expertMode && npc.type == 36 && Main.rand.Next(2) == 0)
			{
				this.AddBuff(32, Main.rand.Next(30, 60), true);
			}
			if (npc.type >= 269 && npc.type <= 272)
			{
				if (Main.rand.Next(3) == 0)
				{
					this.AddBuff(30, 600, true);
				}
				else if (Main.rand.Next(3) == 0)
				{
					this.AddBuff(32, 300, true);
				}
			}
			if (npc.type >= 273 && npc.type <= 276 && Main.rand.Next(2) == 0)
			{
				this.AddBuff(36, 600, true);
			}
			if (npc.type >= 277 && npc.type <= 280)
			{
				this.AddBuff(24, 600, true);
			}
			if (npc.type == 371)
			{
				this.AddBuff(103, 60 * Main.rand.Next(3, 8), true);
			}
			if (npc.type == 370 && Main.expertMode)
			{
				int num3 = Utils.SelectRandom<int>(Main.rand, new int[]
					{
						0,
						148,
						30
					});
				if (num3 != 0)
				{
					this.AddBuff(num3, 60 * Main.rand.Next(3, 11), true);
				}
			}
			if (((npc.type == 1 && npc.netID == -6) || npc.type == 81 || npc.type == 79) && Main.rand.Next(4) == 0)
			{
				this.AddBuff(22, 900, true);
			}
			if ((npc.type == 23 || npc.type == 25) && Main.rand.Next(3) == 0)
			{
				this.AddBuff(24, 420, true);
			}
			if ((npc.type == 34 || npc.type == 83 || npc.type == 84) && Main.rand.Next(3) == 0)
			{
				this.AddBuff(23, 240, true);
			}
			if ((npc.type == 104 || npc.type == 102) && Main.rand.Next(8) == 0)
			{
				this.AddBuff(30, 2700, true);
			}
			if (npc.type == 75 && Main.rand.Next(10) == 0)
			{
				this.AddBuff(35, 420, true);
			}
			if ((npc.type == 163 || npc.type == 238) && Main.rand.Next(10) == 0)
			{
				this.AddBuff(70, 480, true);
			}
			if ((npc.type == 79 || npc.type == 103) && Main.rand.Next(5) == 0)
			{
				this.AddBuff(35, 420, true);
			}
			if ((npc.type == 75 || npc.type == 78 || npc.type == 82) && Main.rand.Next(8) == 0)
			{
				this.AddBuff(32, 900, true);
			}
			if ((npc.type == 93 || npc.type == 109 || npc.type == 80) && Main.rand.Next(14) == 0)
			{
				this.AddBuff(31, 300, true);
			}
			if (npc.type >= 305 && npc.type <= 314 && Main.rand.Next(10) == 0)
			{
				this.AddBuff(33, 3600, true);
			}
			if (npc.type == 77 && Main.rand.Next(6) == 0)
			{
				this.AddBuff(36, 7200, true);
			}
			if (npc.type == 112 && Main.rand.Next(20) == 0)
			{
				this.AddBuff(33, 18000, true);
			}
			if (npc.type == 182 && Main.rand.Next(25) == 0)
			{
				this.AddBuff(33, 7200, true);
			}
			if (npc.type == 141 && Main.rand.Next(2) == 0)
			{
				this.AddBuff(20, 600, true);
			}
			if (npc.type == 147 && !this.frozen && Main.rand.Next(12) == 0)
			{
				this.AddBuff(46, 600, true);
			}
			if (npc.type == 150)
			{
				if (Main.rand.Next(2) == 0)
				{
					this.AddBuff(46, 900, true);
				}
				if (!this.frozen && Main.rand.Next(35) == 0)
				{
					this.AddBuff(47, 60, true);
				}
				else if (!this.frozen && Main.expertMode && Main.rand.Next(35) == 0)
				{
					this.AddBuff(47, 60, true);
				}
			}
			if (npc.type == 184)
			{
				this.AddBuff(46, 1200, true);
				if (!this.frozen && Main.rand.Next(15) == 0)
				{
					this.AddBuff(47, 60, true);
					return;
				}
				if (!this.frozen && Main.expertMode && Main.rand.Next(25) == 0)
				{
					this.AddBuff(47, 60, true);
				}
			}
		}

		public void GrappleMovement()
		{
			if (this.grappling[0] >= 0)
			{
				if (Main.myPlayer == this.whoAmI && this.mount.Active)
				{
					this.mount.Dismount(this);
				}
				this.canCarpet = true;
				this.carpetFrame = -1;
				this.wingFrame = 1;
				if (this.velocity.Y == 0f || (this.wet && (double)this.velocity.Y > -0.02 && (double)this.velocity.Y < 0.02))
				{
					this.wingFrame = 0;
				}
				if (this.wings == 4)
				{
					this.wingFrame = 3;
				}
				if (this.wings == 30)
				{
					this.wingFrame = 0;
				}
				this.wingTime = (float)this.wingTimeMax;
				this.rocketTime = this.rocketTimeMax;
				this.rocketDelay = 0;
				this.rocketFrame = false;
				this.canRocket = false;
				this.rocketRelease = false;
				this.fallStart = (int)(this.position.Y / 16f);
				int num = -1;
				float num2 = 0f;
				float num3 = 0f;
				for (int i = 0; i < this.grapCount; i++)
				{
					Projectile projectile = Main.projectile[this.grappling[i]];
					num2 += projectile.position.X + (float)(projectile.width / 2);
					num3 += projectile.position.Y + (float)(projectile.height / 2);
					if (projectile.type == 403)
					{
						num = i;
					}
					else if (projectile.type == 446)
					{
						Vector2 vector = new Vector2((float)(this.controlRight.ToInt() - this.controlLeft.ToInt()), (float)(this.controlDown.ToInt() - this.controlUp.ToInt()) * this.gravDir);
						if (vector != Vector2.Zero)
						{
							vector.Normalize();
						}
						vector *= 100f;
						Vector2 vector2 = Vector2.Normalize(base.Center - projectile.Center + vector);
						if (float.IsNaN(vector2.X) || float.IsNaN(vector2.Y))
						{
							vector2 = -Vector2.UnitY;
						}
						float num4 = 200f;
						num2 += vector2.X * num4;
						num3 += vector2.Y * num4;
					}
					else if (projectile.type == 652)
					{
						Vector2 vector3 = new Vector2((float)(this.controlRight.ToInt() - this.controlLeft.ToInt()), (float)(this.controlDown.ToInt() - this.controlUp.ToInt()) * this.gravDir);
						if (vector3 != Vector2.Zero)
						{
							vector3.Normalize();
						}
						Vector2 vector4 = projectile.Center - base.Center;
						Vector2 vector5 = vector4;
						if (vector5 != Vector2.Zero)
						{
							vector5.Normalize();
						}
						Vector2 value = Vector2.Zero;
						if (vector3 != Vector2.Zero)
						{
							value = vector5 * Vector2.Dot(vector5, vector3);
						}
						float num5 = 6f;
						if (Vector2.Dot(value, vector4) < 0f && vector4.Length() >= 600f)
						{
							num5 = 0f;
						}
						num2 += -vector4.X + value.X * num5;
						num3 += -vector4.Y + value.Y * num5;
					}
				}
				num2 /= (float)this.grapCount;
				num3 /= (float)this.grapCount;
				Vector2 vector6 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
				float num6 = num2 - vector6.X;
				float num7 = num3 - vector6.Y;
				float num8 = (float)Math.Sqrt((double)(num6 * num6 + num7 * num7));
				float num9 = 11f;
				if (Main.projectile[this.grappling[0]].type == 315)
				{
					num9 = 16f;
				}
				if (Main.projectile[this.grappling[0]].type >= 646 && Main.projectile[this.grappling[0]].type <= 649)
				{
					num9 = 13f;
				}
				ProjectileLoader.GrapplePullSpeed(Main.projectile[this.grappling[0]], this, ref num9);
				float num10;
				if (num8 > num9)
				{
					num10 = num9 / num8;
				}
				else
				{
					num10 = 1f;
				}
				num6 *= num10;
				num7 *= num10;
				if (num7 > 0f)
				{
					this.GoingDownWithGrapple = true;
				}
				this.velocity.X = num6;
				this.velocity.Y = num7;
				if (num != -1)
				{
					Projectile projectile2 = Main.projectile[this.grappling[num]];
					if (projectile2.position.X < this.position.X + (float)this.width && projectile2.position.X + (float)projectile2.width >= this.position.X && projectile2.position.Y < this.position.Y + (float)this.height && projectile2.position.Y + (float)projectile2.height >= this.position.Y)
					{
						int num11 = (int)(projectile2.position.X + (float)(projectile2.width / 2)) / 16;
						int num12 = (int)(projectile2.position.Y + (float)(projectile2.height / 2)) / 16;
						this.velocity = Vector2.Zero;
						if (Main.tile[num11, num12].type == 314)
						{
							Vector2 position;
							position.X = projectile2.position.X + (float)(projectile2.width / 2) - (float)(this.width / 2);
							position.Y = projectile2.position.Y + (float)(projectile2.height / 2) - (float)(this.height / 2);
							this.grappling[0] = -1;
							this.grapCount = 0;
							for (int j = 0; j < 1000; j++)
							{
								if (Main.projectile[j].active && Main.projectile[j].owner == this.whoAmI && Main.projectile[j].aiStyle == 7)
								{
									Main.projectile[j].Kill();
								}
							}
							int num13 = 13;
							if (this.miscEquips[2].stack > 0 && this.miscEquips[2].mountType >= 0 && MountID.Sets.Cart[this.miscEquips[2].mountType] && (!this.miscEquips[2].expertOnly || Main.expertMode))
							{
								num13 = this.miscEquips[2].mountType;
							}
							int num14 = this.height + Mount.GetHeightBoost(num13);
							if (Minecart.GetOnTrack(num11, num12, ref position, this.width, num14) && !Collision.SolidCollision(position, this.width, num14 - 20))
							{
								this.position = position;
								DelegateMethods.Minecart.rotation = this.fullRotation;
								DelegateMethods.Minecart.rotationOrigin = this.fullRotationOrigin;
								this.mount.SetMount(num13, this, this.minecartLeft);
								Minecart.WheelSparks(this.mount.MinecartDust, this.position, this.width, this.height, 25);
							}
						}
					}
				}
				if (this.itemAnimation == 0)
				{
					if (this.velocity.X > 0f)
					{
						this.ChangeDir(1);
					}
					if (this.velocity.X < 0f)
					{
						this.ChangeDir(-1);
					}
				}
				if (this.controlJump)
				{
					if (this.releaseJump)
					{
						if ((this.velocity.Y == 0f || (this.wet && (double)this.velocity.Y > -0.02 && (double)this.velocity.Y < 0.02)) && !this.controlDown)
						{
							this.velocity.Y = -Player.jumpSpeed;
							this.jump = Player.jumpHeight / 2;
							this.releaseJump = false;
						}
						else
						{
							this.velocity.Y = this.velocity.Y + 0.01f;
							this.releaseJump = false;
						}
						if (this.doubleJumpCloud)
						{
							this.jumpAgainCloud = true;
						}
						if (this.doubleJumpSandstorm)
						{
							this.jumpAgainSandstorm = true;
						}
						if (this.doubleJumpBlizzard)
						{
							this.jumpAgainBlizzard = true;
						}
						if (this.doubleJumpFart)
						{
							this.jumpAgainFart = true;
						}
						if (this.doubleJumpSail)
						{
							this.jumpAgainSail = true;
						}
						if (this.doubleJumpUnicorn)
						{
							this.jumpAgainUnicorn = true;
						}
						this.grappling[0] = 0;
						this.grapCount = 0;
						for (int k = 0; k < 1000; k++)
						{
							if (Main.projectile[k].active && Main.projectile[k].owner == this.whoAmI && Main.projectile[k].aiStyle == 7)
							{
								Main.projectile[k].Kill();
							}
						}
						return;
					}
				}
				else
				{
					this.releaseJump = true;
				}
			}
		}

		public void StickyMovement()
		{
			bool flag = false;
			if (this.mount.Type == 6 && Math.Abs(this.velocity.X) > 5f)
			{
				flag = true;
			}
			if (this.mount.Type == 13 && Math.Abs(this.velocity.X) > 5f)
			{
				flag = true;
			}
			if (this.mount.Type == 11 && Math.Abs(this.velocity.X) > 5f)
			{
				flag = true;
			}
			int num = this.width / 2;
			int num2 = this.height / 2;
			new Vector2(this.position.X + (float)(this.width / 2) - (float)(num / 2), this.position.Y + (float)(this.height / 2) - (float)(num2 / 2));
			Vector2 vector = Collision.StickyTiles(this.position, this.velocity, this.width, this.height);
			if (vector.Y != -1f && vector.X != -1f)
			{
				int num3 = (int)vector.X;
				int num4 = (int)vector.Y;
				int type = (int)Main.tile[num3, num4].type;
				if (this.whoAmI == Main.myPlayer && type == 51 && (this.velocity.X != 0f || this.velocity.Y != 0f))
				{
					this.stickyBreak++;
					if (this.stickyBreak > Main.rand.Next(20, 100) || flag)
					{
						this.stickyBreak = 0;
						WorldGen.KillTile(num3, num4, false, false, false);
						if (Main.netMode == 1 && !Main.tile[num3, num4].active() && Main.netMode == 1)
						{
							NetMessage.SendData(17, -1, -1, "", 0, (float)num3, (float)num4, 0f, 0, 0, 0);
						}
					}
				}
				if (flag)
				{
					return;
				}
				this.fallStart = (int)(this.position.Y / 16f);
				if (type != 229)
				{
					this.jump = 0;
				}
				if (this.velocity.X > 1f)
				{
					this.velocity.X = 1f;
				}
				if (this.velocity.X < -1f)
				{
					this.velocity.X = -1f;
				}
				if (this.velocity.Y > 1f)
				{
					this.velocity.Y = 1f;
				}
				if (this.velocity.Y < -5f)
				{
					this.velocity.Y = -5f;
				}
				if ((double)this.velocity.X > 0.75 || (double)this.velocity.X < -0.75)
				{
					this.velocity.X = this.velocity.X * 0.85f;
				}
				else
				{
					this.velocity.X = this.velocity.X * 0.6f;
				}
				if (this.velocity.Y < 0f)
				{
					this.velocity.Y = this.velocity.Y * 0.96f;
				}
				else
				{
					this.velocity.Y = this.velocity.Y * 0.3f;
				}
				if (type == 229 && Main.rand.Next(5) == 0 && ((double)this.velocity.Y > 0.15 || this.velocity.Y < 0f))
				{
					if ((float)(num3 * 16) < this.position.X + (float)(this.width / 2))
					{
						int num5 = Dust.NewDust(new Vector2(this.position.X - 4f, (float)(num4 * 16)), 4, 16, 153, 0f, 0f, 50, default(Color), 1f);
						Main.dust[num5].scale += (float)Main.rand.Next(0, 6) * 0.1f;
						Main.dust[num5].velocity *= 0.1f;
						Main.dust[num5].noGravity = true;
					}
					else
					{
						int num6 = Dust.NewDust(new Vector2(this.position.X + (float)this.width - 2f, (float)(num4 * 16)), 4, 16, 153, 0f, 0f, 50, default(Color), 1f);
						Main.dust[num6].scale += (float)Main.rand.Next(0, 6) * 0.1f;
						Main.dust[num6].velocity *= 0.1f;
						Main.dust[num6].noGravity = true;
					}
					if (Main.tile[num3, num4 + 1] != null && Main.tile[num3, num4 + 1].type == 229 && this.position.Y + (float)this.height > (float)((num4 + 1) * 16))
					{
						if ((float)(num3 * 16) < this.position.X + (float)(this.width / 2))
						{
							int num7 = Dust.NewDust(new Vector2(this.position.X - 4f, (float)(num4 * 16 + 16)), 4, 16, 153, 0f, 0f, 50, default(Color), 1f);
							Main.dust[num7].scale += (float)Main.rand.Next(0, 6) * 0.1f;
							Main.dust[num7].velocity *= 0.1f;
							Main.dust[num7].noGravity = true;
						}
						else
						{
							int num8 = Dust.NewDust(new Vector2(this.position.X + (float)this.width - 2f, (float)(num4 * 16 + 16)), 4, 16, 153, 0f, 0f, 50, default(Color), 1f);
							Main.dust[num8].scale += (float)Main.rand.Next(0, 6) * 0.1f;
							Main.dust[num8].velocity *= 0.1f;
							Main.dust[num8].noGravity = true;
						}
					}
					if (Main.tile[num3, num4 + 2] != null && Main.tile[num3, num4 + 2].type == 229 && this.position.Y + (float)this.height > (float)((num4 + 2) * 16))
					{
						if ((float)(num3 * 16) < this.position.X + (float)(this.width / 2))
						{
							int num9 = Dust.NewDust(new Vector2(this.position.X - 4f, (float)(num4 * 16 + 32)), 4, 16, 153, 0f, 0f, 50, default(Color), 1f);
							Main.dust[num9].scale += (float)Main.rand.Next(0, 6) * 0.1f;
							Main.dust[num9].velocity *= 0.1f;
							Main.dust[num9].noGravity = true;
							return;
						}
						int num10 = Dust.NewDust(new Vector2(this.position.X + (float)this.width - 2f, (float)(num4 * 16 + 32)), 4, 16, 153, 0f, 0f, 50, default(Color), 1f);
						Main.dust[num10].scale += (float)Main.rand.Next(0, 6) * 0.1f;
						Main.dust[num10].velocity *= 0.1f;
						Main.dust[num10].noGravity = true;
						return;
					}
				}
			}
			else
			{
				this.stickyBreak = 0;
			}
		}

		public bool IsStackingItems()
		{
			for (int i = 0; i < this.inventoryChestStack.Length; i++)
			{
				if (this.inventoryChestStack[i])
				{
					if (this.inventory[i].type != 0 && this.inventory[i].stack != 0)
					{
						return true;
					}
					this.inventoryChestStack[i] = false;
				}
			}
			return false;
		}

		public void QuickStackAllChests()
		{
			if (this.IsStackingItems())
			{
				return;
			}
			if (Main.netMode == 1)
			{
				for (int i = 10; i < 50; i++)
				{
					if (this.inventory[i].type > 0 && this.inventory[i].stack > 0 && !this.inventory[i].favorited && (this.inventory[i].type < 71 || this.inventory[i].type > 74))
					{
						NetMessage.SendData(5, -1, -1, "", this.whoAmI, (float)i, (float)this.inventory[i].prefix, 0f, 0, 0, 0);
						NetMessage.SendData(85, -1, -1, "", i, 0f, 0f, 0f, 0, 0, 0);
						this.inventoryChestStack[i] = true;
					}
				}
				return;
			}
			bool flag = false;
			for (int j = 10; j < 50; j++)
			{
				if (this.inventory[j].type > 0 && this.inventory[j].stack > 0 && !this.inventory[j].favorited)
				{
					int type = this.inventory[j].type;
					int stack = this.inventory[j].stack;
					this.inventory[j] = Chest.PutItemInNearbyChest(Main.player[j].inventory[j], Main.player[j].Center, Main.player[j]);
					if (this.inventory[j].type != type || this.inventory[j].stack != stack)
					{
						flag = true;
					}
				}
			}
			if (flag)
			{
				Main.PlaySound(7, -1, -1, 1, 1f, 0f);
			}
		}

		public void CheckDrowning()
		{
			bool flag = Collision.DrownCollision(this.position, this.width, this.height, this.gravDir);
			if (this.armor[0].type == 250)
			{
				flag = true;
			}
			if (this.inventory[this.selectedItem].type == 186)
			{
				try
				{
					int num = (int)((this.position.X + (float)(this.width / 2) + (float)(6 * this.direction)) / 16f);
					int num2 = 0;
					if (this.gravDir == -1f)
					{
						num2 = this.height;
					}
					int num3 = (int)((this.position.Y + (float)num2 - 44f * this.gravDir) / 16f);
					if (Main.tile[num, num3].liquid < 128)
					{
						if (Main.tile[num, num3] == null)
						{
							Main.tile[num, num3] = new Tile();
						}
						if (!Main.tile[num, num3].active() || !Main.tileSolid[(int)Main.tile[num, num3].type] || Main.tileSolidTop[(int)Main.tile[num, num3].type])
						{
							flag = false;
						}
					}
				}
				catch
				{
				}
			}
			if (this.gills)
			{
				flag = false;
			}
			if (Main.myPlayer == this.whoAmI)
			{
				if (this.merman)
				{
					flag = false;
				}
				if (flag)
				{
					this.breathCD++;
					int num4 = 7;
					if (this.inventory[this.selectedItem].type == 186)
					{
						num4 *= 2;
					}
					if (this.accDivingHelm)
					{
						num4 *= 4;
					}
					if (this.breathCD >= num4)
					{
						this.breathCD = 0;
						this.breath--;
						if (this.breath == 0)
						{
							Main.PlaySound(23, -1, -1, 1, 1f, 0f);
						}
						if (this.breath <= 0)
						{
							this.lifeRegenTime = 0;
							this.breath = 0;
							this.statLife -= 2;
							if (this.statLife <= 0)
							{
								this.statLife = 0;
								this.KillMe(PlayerDeathReason.ByOther(1), 10.0, 0, false);
							}
						}
					}
				}
				else
				{
					this.breath += 3;
					if (this.breath > this.breathMax)
					{
						this.breath = this.breathMax;
					}
					this.breathCD = 0;
				}
			}
			if (flag && Main.rand.Next(20) == 0 && !this.lavaWet && !this.honeyWet)
			{
				int num5 = 0;
				if (this.gravDir == -1f)
				{
					num5 += this.height - 12;
				}
				if (this.inventory[this.selectedItem].type == 186)
				{
					Dust.NewDust(new Vector2(this.position.X + (float)(10 * this.direction) + 4f, this.position.Y + (float)num5 - 54f * this.gravDir), this.width - 8, 8, 34, 0f, 0f, 0, default(Color), 1.2f);
					return;
				}
				Dust.NewDust(new Vector2(this.position.X + (float)(12 * this.direction), this.position.Y + (float)num5 + 4f * this.gravDir), this.width - 8, 8, 34, 0f, 0f, 0, default(Color), 1.2f);
			}
		}

		public void CheckIceBreak()
		{
			if (this.velocity.Y > 7f)
			{
				Vector2 vector = this.position + this.velocity;
				int num = (int)(vector.X / 16f);
				int num2 = (int)((vector.X + (float)this.width) / 16f);
				int num3 = (int)((this.position.Y + (float)this.height + 1f) / 16f);
				for (int i = num; i <= num2; i++)
				{
					for (int j = num3; j <= num3 + 1; j++)
					{
						if (Main.tile[i, j].nactive() && Main.tile[i, j].type == 162 && !WorldGen.SolidTile(i, j - 1))
						{
							WorldGen.KillTile(i, j, false, false, false);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(17, -1, -1, "", 0, (float)i, (float)j, 0f, 0, 0, 0);
							}
						}
					}
				}
			}
		}

		public void SlopeDownMovement()
		{
			this.sloping = false;
			float y = this.velocity.Y;
			Vector4 vector = Collision.WalkDownSlope(this.position, this.velocity, this.width, this.height, this.gravity * this.gravDir);
			this.position.X = vector.X;
			this.position.Y = vector.Y;
			this.velocity.X = vector.Z;
			this.velocity.Y = vector.W;
			if (this.velocity.Y != y)
			{
				this.sloping = true;
			}
		}

		public void HoneyCollision(bool fallThrough, bool ignorePlats)
		{
			int height;
			if (this.onTrack)
			{
				height = this.height - 20;
			}
			else
			{
				height = this.height;
			}
			Vector2 velocity = this.velocity;
			this.velocity = Collision.TileCollision(this.position, this.velocity, this.width, height, fallThrough, ignorePlats, (int)this.gravDir);
			Vector2 value = this.velocity * 0.25f;
			if (this.velocity.X != velocity.X)
			{
				value.X = this.velocity.X;
			}
			if (this.velocity.Y != velocity.Y)
			{
				value.Y = this.velocity.Y;
			}
			this.position += value;
		}

		public void WaterCollision(bool fallThrough, bool ignorePlats)
		{
			int height;
			if (this.onTrack)
			{
				height = this.height - 20;
			}
			else
			{
				height = this.height;
			}
			Vector2 velocity = this.velocity;
			this.velocity = Collision.TileCollision(this.position, this.velocity, this.width, height, fallThrough, ignorePlats, (int)this.gravDir);
			Vector2 value = this.velocity * 0.5f;
			if (this.velocity.X != velocity.X)
			{
				value.X = this.velocity.X;
			}
			if (this.velocity.Y != velocity.Y)
			{
				value.Y = this.velocity.Y;
			}
			this.position += value;
		}

		public void DryCollision(bool fallThrough, bool ignorePlats)
		{
			int height;
			if (this.onTrack)
			{
				height = this.height - 10;
			}
			else
			{
				height = this.height;
			}
			if (this.velocity.Length() > 16f)
			{
				Vector2 vector = Collision.TileCollision(this.position, this.velocity, this.width, height, fallThrough, ignorePlats, (int)this.gravDir);
				float num = this.velocity.Length();
				Vector2 value = Vector2.Normalize(this.velocity);
				if (vector.Y == 0f)
				{
					value.Y = 0f;
				}
				Vector2 vector2 = Vector2.Zero;
				bool flag = this.mount.Type == 7 || this.mount.Type == 8 || this.mount.Type == 12;
				Vector2 arg_C0_0 = Vector2.Zero;
				while (num > 0f)
				{
					float num2 = num;
					if (num2 > 16f)
					{
						num2 = 16f;
					}
					num -= num2;
					Vector2 velocity = value * num2;
					this.velocity = velocity;
					this.SlopeDownMovement();
					velocity = this.velocity;
					if (this.velocity.Y == this.gravity && (!this.mount.Active || (!this.mount.Cart && !flag)))
					{
						Collision.StepDown(ref this.position, ref velocity, this.width, this.height, ref this.stepSpeed, ref this.gfxOffY, (int)this.gravDir, this.waterWalk || this.waterWalk2);
					}
					if (this.gravDir == -1f)
					{
						if ((this.carpetFrame != -1 || this.velocity.Y <= this.gravity) && !this.controlUp)
						{
							Collision.StepUp(ref this.position, ref velocity, this.width, this.height, ref this.stepSpeed, ref this.gfxOffY, (int)this.gravDir, this.controlUp, 0);
						}
					}
					else if (flag || ((this.carpetFrame != -1 || this.velocity.Y >= this.gravity) && !this.controlDown && !this.mount.Cart))
					{
						Collision.StepUp(ref this.position, ref velocity, this.width, this.height, ref this.stepSpeed, ref this.gfxOffY, (int)this.gravDir, this.controlUp, 0);
					}
					Vector2 vector3 = Collision.TileCollision(this.position, velocity, this.width, height, fallThrough, ignorePlats, (int)this.gravDir);
					if (Collision.up && this.gravDir == 1f)
					{
						this.jump = 0;
					}
					if (this.waterWalk || this.waterWalk2)
					{
						Vector2 velocity2 = this.velocity;
						vector3 = Collision.WaterCollision(this.position, vector3, this.width, this.height, fallThrough, false, this.waterWalk);
						if (velocity2 != this.velocity)
						{
							this.fallStart = (int)(this.position.Y / 16f);
						}
					}
					this.position += vector3;
					bool falling = false;
					if (vector3.Y > this.gravity)
					{
						falling = true;
					}
					if (vector3.Y < -this.gravity)
					{
						falling = true;
					}
					this.velocity = vector3;
					this.UpdateTouchingTiles();
					this.TryBouncingBlocks(falling);
					this.TryLandingOnDetonator();
					this.SlopingCollision(fallThrough);
					Collision.StepConveyorBelt(this, this.gravDir);
					vector3 = this.velocity;
					vector2 += vector3;
				}
				this.velocity = vector2;
				return;
			}
			this.velocity = Collision.TileCollision(this.position, this.velocity, this.width, height, fallThrough, ignorePlats, (int)this.gravDir);
			if (Collision.up && this.gravDir == 1f)
			{
				this.jump = 0;
			}
			if (this.waterWalk || this.waterWalk2)
			{
				Vector2 velocity3 = this.velocity;
				this.velocity = Collision.WaterCollision(this.position, this.velocity, this.width, this.height, fallThrough, false, this.waterWalk);
				if (velocity3 != this.velocity)
				{
					this.fallStart = (int)(this.position.Y / 16f);
				}
			}
			this.position += this.velocity;
		}

		public void SlopingCollision(bool fallThrough)
		{
			if (this.controlDown || this.grappling[0] >= 0 || this.gravDir == -1f)
			{
				this.stairFall = true;
			}
			Vector4 vector = Collision.SlopeCollision(this.position, this.velocity, this.width, this.height, this.gravity, this.stairFall);
			if (Collision.stairFall)
			{
				this.stairFall = true;
			}
			else if (!fallThrough)
			{
				this.stairFall = false;
			}
			if (Collision.stair && Math.Abs(vector.Y - this.position.Y) > 8f + Math.Abs(this.velocity.X))
			{
				this.gfxOffY -= vector.Y - this.position.Y;
				this.stepSpeed = 4f;
			}
			float arg_D8_0 = this.velocity.Y;
			this.position.X = vector.X;
			this.position.Y = vector.Y;
			this.velocity.X = vector.Z;
			this.velocity.Y = vector.W;
			if (this.gravDir == -1f && this.velocity.Y == 0.0101f)
			{
				this.velocity.Y = 0f;
			}
		}

		public void FloorVisuals(bool Falling)
		{
			int num = (int)((this.position.X + (float)(this.width / 2)) / 16f);
			int num2 = (int)((this.position.Y + (float)this.height) / 16f);
			if (this.gravDir == -1f)
			{
				num2 = (int)(this.position.Y - 0.1f) / 16;
			}
			int num3 = -1;
			if (Main.tile[num - 1, num2] == null)
			{
				Main.tile[num - 1, num2] = new Tile();
			}
			if (Main.tile[num + 1, num2] == null)
			{
				Main.tile[num + 1, num2] = new Tile();
			}
			if (Main.tile[num, num2] == null)
			{
				Main.tile[num, num2] = new Tile();
			}
			if (Main.tile[num, num2].nactive() && Main.tileSolid[(int)Main.tile[num, num2].type])
			{
				num3 = (int)Main.tile[num, num2].type;
			}
			else if (Main.tile[num - 1, num2].nactive() && Main.tileSolid[(int)Main.tile[num - 1, num2].type])
			{
				num3 = (int)Main.tile[num - 1, num2].type;
			}
			else if (Main.tile[num + 1, num2].nactive() && Main.tileSolid[(int)Main.tile[num + 1, num2].type])
			{
				num3 = (int)Main.tile[num + 1, num2].type;
			}
			if (num3 <= -1)
			{
				this.slippy = false;
				this.slippy2 = false;
				this.sticky = false;
				this.powerrun = false;
				return;
			}
			this.sticky = (num3 == 229);
			this.slippy = (num3 == 161 || num3 == 162 || num3 == 163 || num3 == 164 || num3 == 200 || num3 == 127);
			this.slippy2 = (num3 == 197);
			this.powerrun = (num3 == 198);
			TileLoader.FloorVisuals(num3, this);
			if (Main.tile[num - 1, num2].slope() != 0 || Main.tile[num, num2].slope() != 0 || Main.tile[num + 1, num2].slope() != 0)
			{
				num3 = -1;
			}
			bool flag = !this.wet && !this.mount.Cart;
			if (flag)
			{
				this.MakeFloorDust(Falling, num3);
			}
		}

		private void MakeFloorDust(bool Falling, int type)
		{
			if (type == 147 || type == 25 || type == 53 || type == 189 || type == 0 || type == 123 || type == 57 || type == 112 || type == 116 || type == 196 || type == 193 || type == 195 || type == 197 || type == 199 || type == 229 || type == 371 || TileLoader.HasWalkDust(type))
			{
				int num = 1;
				if (Falling)
				{
					num = 20;
				}
				for (int i = 0; i < num; i++)
				{
					bool flag = true;
					int num2 = 76;
					//patch file: type, num2, flag
					if (type == 53)
					{
						num2 = 32;
					}
					if (type == 189)
					{
						num2 = 16;
					}
					if (type == 0)
					{
						num2 = 0;
					}
					if (type == 123)
					{
						num2 = 53;
					}
					if (type == 57)
					{
						num2 = 36;
					}
					if (type == 112)
					{
						num2 = 14;
					}
					if (type == 116)
					{
						num2 = 51;
					}
					if (type == 196)
					{
						num2 = 108;
					}
					if (type == 193)
					{
						num2 = 4;
					}
					if (type == 195 || type == 199)
					{
						num2 = 5;
					}
					if (type == 197)
					{
						num2 = 4;
					}
					if (type == 229)
					{
						num2 = 153;
					}
					if (type == 371)
					{
						num2 = 243;
					}
					if (type == 25)
					{
						num2 = 37;
					}
					if (num2 == 32 && Main.rand.Next(2) == 0)
					{
						flag = false;
					}
					if (num2 == 14 && Main.rand.Next(2) == 0)
					{
						flag = false;
					}
					if (num2 == 51 && Main.rand.Next(2) == 0)
					{
						flag = false;
					}
					if (num2 == 36 && Main.rand.Next(2) == 0)
					{
						flag = false;
					}
					if (num2 == 0 && Main.rand.Next(3) != 0)
					{
						flag = false;
					}
					if (num2 == 53 && Main.rand.Next(3) != 0)
					{
						flag = false;
					}
					Color newColor = default(Color);
					if (type == 193)
					{
						newColor = new Color(30, 100, 255, 100);
					}
					if (type == 197)
					{
						newColor = new Color(97, 200, 255, 100);
					}
					TileLoader.WalkDust(type, ref num2, ref flag, ref newColor);
					if (!Falling)
					{
						float num3 = Math.Abs(this.velocity.X) / 3f;
						if ((float)Main.rand.Next(100) > num3 * 100f)
						{
							flag = false;
						}
					}
					if (flag)
					{
						float num4 = this.velocity.X;
						if (num4 > 6f)
						{
							num4 = 6f;
						}
						if (num4 < -6f)
						{
							num4 = -6f;
						}
						if (this.velocity.X != 0f || Falling)
						{
							int num5 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height - 2f), this.width, 6, num2, 0f, 0f, 50, newColor, 1f);
							if (this.gravDir == -1f)
							{
								Dust expr_2A6_cp_0 = Main.dust[num5];
								expr_2A6_cp_0.position.Y = expr_2A6_cp_0.position.Y - (float)(this.height + 4);
							}
							if (num2 == 76)
							{
								Main.dust[num5].scale += (float)Main.rand.Next(3) * 0.1f;
								Main.dust[num5].noLight = true;
							}
							if (num2 == 16 || num2 == 108 || num2 == 153)
							{
								Main.dust[num5].scale += (float)Main.rand.Next(6) * 0.1f;
							}
							if (num2 == 37)
							{
								Main.dust[num5].scale += 0.25f;
								Main.dust[num5].alpha = 50;
							}
							if (num2 == 5)
							{
								Main.dust[num5].scale += (float)Main.rand.Next(2, 8) * 0.1f;
							}
							Main.dust[num5].noGravity = true;
							if (num > 1)
							{
								Dust expr_3A6_cp_0 = Main.dust[num5];
								expr_3A6_cp_0.velocity.X = expr_3A6_cp_0.velocity.X * 1.2f;
								Dust expr_3C4_cp_0 = Main.dust[num5];
								expr_3C4_cp_0.velocity.Y = expr_3C4_cp_0.velocity.Y * 0.8f;
								Dust expr_3E2_cp_0 = Main.dust[num5];
								expr_3E2_cp_0.velocity.Y = expr_3E2_cp_0.velocity.Y - 1f;
								Main.dust[num5].velocity *= 0.8f;
								Main.dust[num5].scale += (float)Main.rand.Next(3) * 0.1f;
								Main.dust[num5].velocity.X = (Main.dust[num5].position.X - (this.position.X + (float)(this.width / 2))) * 0.2f;
								if (Main.dust[num5].velocity.Y > 0f)
								{
									Dust expr_49C_cp_0 = Main.dust[num5];
									expr_49C_cp_0.velocity.Y = expr_49C_cp_0.velocity.Y * -1f;
								}
								Dust expr_4BA_cp_0 = Main.dust[num5];
								expr_4BA_cp_0.velocity.X = expr_4BA_cp_0.velocity.X + num4 * 0.3f;
							}
							else
							{
								Main.dust[num5].velocity *= 0.2f;
							}
							Dust expr_4FA_cp_0 = Main.dust[num5];
							expr_4FA_cp_0.position.X = expr_4FA_cp_0.position.X - num4 * 1f;
							if (this.gravDir == -1f)
							{
								Dust expr_528_cp_0 = Main.dust[num5];
								expr_528_cp_0.velocity.Y = expr_528_cp_0.velocity.Y * -1f;
							}
						}
					}
				}
			}
		}

		public void BordersMovement()
		{
			if (this.position.X < Main.leftWorld + 640f + 16f)
			{
				this.position.X = Main.leftWorld + 640f + 16f;
				this.velocity.X = 0f;
			}
			if (this.position.X + (float)this.width > Main.rightWorld - 640f - 32f)
			{
				this.position.X = Main.rightWorld - 640f - 32f - (float)this.width;
				this.velocity.X = 0f;
			}
			if (this.position.Y < Main.topWorld + 640f + 16f)
			{
				this.position.Y = Main.topWorld + 640f + 16f;
				if ((double)this.velocity.Y < 0.11)
				{
					this.velocity.Y = 0.11f;
				}
				this.gravDir = 1f;
				AchievementsHelper.HandleSpecialEvent(this, 11);
			}
			if (this.position.Y > Main.bottomWorld - 640f - 32f - (float)this.height)
			{
				this.position.Y = Main.bottomWorld - 640f - 32f - (float)this.height;
				this.velocity.Y = 0f;
			}
			if (this.position.Y > Main.bottomWorld - 640f - 150f - (float)this.height)
			{
				AchievementsHelper.HandleSpecialEvent(this, 10);
			}
		}

		public void CollectTaxes()
		{
			int num = Item.buyPrice(0, 0, 0, 50);
			int num2 = Item.buyPrice(0, 10, 0, 0);
			if (!NPC.taxCollector)
			{
				return;
			}
			if (this.taxMoney >= num2)
			{
				return;
			}
			int num3 = 0;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && !Main.npc[i].homeless && NPC.TypeToHeadIndex(Main.npc[i].type) > 0)
				{
					num3++;
				}
			}
			this.taxMoney += num * num3;
			if (this.taxMoney > num2)
			{
				this.taxMoney = num2;
			}
		}

		public void GamepadEnableGrappleCooldown()
		{
			this._quickGrappleCooldown = 3;
		}

		public void Update(int i)
		{
			if (i == Main.myPlayer && Main.netMode != 2)
			{
				LockOnHelper.Update();
			}
			if (this.launcherWait > 0)
			{
				this.launcherWait--;
			}
			this.maxFallSpeed = 10f;
			this.gravity = Player.defaultGravity;
			Player.jumpHeight = 15;
			Player.jumpSpeed = 5.01f;
			this.maxRunSpeed = 3f;
			this.runAcceleration = 0.08f;
			this.runSlowdown = 0.2f;
			this.accRunSpeed = this.maxRunSpeed;
			if (!this.mount.Active || !this.mount.Cart)
			{
				this.onWrongGround = false;
			}
			this.heldProj = -1;
			if (this.PortalPhysicsEnabled)
			{
				this.maxFallSpeed = 35f;
			}
			if (this.wet)
			{
				if (this.honeyWet)
				{
					this.gravity = 0.1f;
					this.maxFallSpeed = 3f;
				}
				else if (this.merman)
				{
					this.gravity = 0.3f;
					this.maxFallSpeed = 7f;
				}
				else
				{
					this.gravity = 0.2f;
					this.maxFallSpeed = 5f;
					Player.jumpHeight = 30;
					Player.jumpSpeed = 6.01f;
				}
			}
			if (this.vortexDebuff)
			{
				this.gravity = 0f;
			}
			this.maxFallSpeed += 0.01f;
			bool flag = false;
			if (Main.mapFullscreen)
			{
				this.GamepadEnableGrappleCooldown();
			}
			else if (this._quickGrappleCooldown > 0)
			{
				this._quickGrappleCooldown--;
			}
			if (Main.myPlayer == i)
			{
				TileObject.objectPreview.Reset();
				if (DD2Event.DownedInvasionAnyDifficulty)
				{
					this.downedDD2EventAnyDifficulty = true;
				}
			}
			if (this.active)
			{
				if (this.ghostDmg > 0f)
				{
					this.ghostDmg -= 2.5f;
				}
				if (this.ghostDmg < 0f)
				{
					this.ghostDmg = 0f;
				}
				if (Main.expertMode)
				{
					if (this.lifeSteal < 70f)
					{
						this.lifeSteal += 0.5f;
					}
					if (this.lifeSteal > 70f)
					{
						this.lifeSteal = 70f;
					}
				}
				else
				{
					if (this.lifeSteal < 80f)
					{
						this.lifeSteal += 0.6f;
					}
					if (this.lifeSteal > 80f)
					{
						this.lifeSteal = 80f;
					}
				}
				if (this.mount.Active)
				{
					this.position.Y = this.position.Y + (float)this.height;
					this.height = 42 + this.mount.HeightBoost;
					this.position.Y = this.position.Y - (float)this.height;
					if (this.mount.Type == 0)
					{
						int num = (int)(this.position.X + (float)(this.width / 2)) / 16;
						int j = (int)(this.position.Y + (float)(this.height / 2) - 14f) / 16;
						Lighting.AddLight(num, j, 0.5f, 0.2f, 0.05f);
						Lighting.AddLight(num + this.direction, j, 0.5f, 0.2f, 0.05f);
						Lighting.AddLight(num + this.direction * 2, j, 0.5f, 0.2f, 0.05f);
					}
				}
				else
				{
					this.position.Y = this.position.Y + (float)this.height;
					this.height = 42;
					this.position.Y = this.position.Y - (float)this.height;
				}
				Main.ActivePlayersCount++;
				this.outOfRange = false;
				if (this.whoAmI != Main.myPlayer)
				{
					int num2 = (int)(this.position.X + (float)(this.width / 2)) / 16;
					int num3 = (int)(this.position.Y + (float)(this.height / 2)) / 16;
					if (!WorldGen.InWorld(num2, num3, 4))
					{
						flag = true;
					}
					else if (Main.tile[num2, num3] == null)
					{
						flag = true;
					}
					else if (Main.tile[num2 - 3, num3] == null)
					{
						flag = true;
					}
					else if (Main.tile[num2 + 3, num3] == null)
					{
						flag = true;
					}
					else if (Main.tile[num2, num3 - 3] == null)
					{
						flag = true;
					}
					else if (Main.tile[num2, num3 + 3] == null)
					{
						flag = true;
					}
					if (flag)
					{
						this.outOfRange = true;
						this.numMinions = 0;
						this.slotsMinions = 0f;
						this.itemAnimation = 0;
						this.PlayerFrame();
					}
				}
				if (this.tankPet >= 0)
				{
					if (!this.tankPetReset)
					{
						this.tankPetReset = true;
					}
					else
					{
						this.tankPet = -1;
					}
				}
			}
			if (this.chatOverhead.timeLeft > 0)
			{
				this.chatOverhead.timeLeft = this.chatOverhead.timeLeft - 1;
			}
			if (!this.active || flag)
			{
				return;
			}
			PlayerHooks.PreUpdate(this);
			this.miscCounter++;
			if (this.miscCounter >= 300)
			{
				this.miscCounter = 0;
			}
			this.infernoCounter++;
			if (this.infernoCounter >= 180)
			{
				this.infernoCounter = 0;
			}
			float num4 = (float)(Main.maxTilesX / 4200);
			num4 *= num4;
			float num5 = (float)((double)(this.position.Y / 16f - (60f + 10f * num4)) / (Main.worldSurface / 6.0));
			if ((double)num5 < 0.25)
			{
				num5 = 0.25f;
			}
			if (num5 > 1f)
			{
				num5 = 1f;
			}
			this.gravity *= num5;
			this.maxRegenDelay = (1f - (float)this.statMana / (float)this.statManaMax2) * 60f * 4f + 45f;
			this.maxRegenDelay *= 0.7f;
			this.UpdateSocialShadow();
			this.UpdateTeleportVisuals();
			this.whoAmI = i;
			if (this.whoAmI == Main.myPlayer)
			{
				if (!DD2Event.Ongoing)
				{
					this.PurgeDD2EnergyCrystals();
				}
				this.TryPortalJumping();
			}
			if (this.runSoundDelay > 0)
			{
				this.runSoundDelay--;
			}
			if (this.attackCD > 0)
			{
				this.attackCD--;
			}
			if (this.itemAnimation == 0)
			{
				this.attackCD = 0;
			}
			if (this.potionDelay > 0)
			{
				this.potionDelay--;
			}
			if (i == Main.myPlayer)
			{
				if (this.trashItem.type >= 1522 && this.trashItem.type <= 1527)
				{
					this.trashItem.SetDefaults(0, false);
				}
				if (this.trashItem.type == 3643)
				{
					this.trashItem.SetDefaults(0, false);
				}
				this.UpdateBiomes();
				this.UpdateMinionTarget();
			}
			if (this.ghost)
			{
				this.Ghost();
				return;
			}
			if (this.dead)
			{
				this.UpdateDead();
				return;
			}
			if (i == Main.myPlayer)
			{
				this.controlUp = false;
				this.controlLeft = false;
				this.controlDown = false;
				this.controlRight = false;
				this.controlJump = false;
				this.controlUseItem = false;
				this.controlUseTile = false;
				this.controlThrow = false;
				this.controlInv = false;
				this.controlHook = false;
				this.controlTorch = false;
				this.controlSmart = false;
				this.controlMount = false;
				this.controlQuickHeal = false;
				this.controlQuickMana = false;
				this.mapStyle = false;
				this.mapAlphaDown = false;
				this.mapAlphaUp = false;
				this.mapFullScreen = false;
				this.mapZoomIn = false;
				this.mapZoomOut = false;
				if (Main.hasFocus)
				{
					if (!Main.drawingPlayerChat && !Main.editSign && !Main.editChest && !Main.blockInput)
					{
						PlayerInput.Triggers.Current.CopyInto(this);
						if (Main.mapFullscreen)
						{
							if (this.controlUp)
							{
								Main.mapFullscreenPos.Y = Main.mapFullscreenPos.Y - 1f * (16f / Main.mapFullscreenScale);
							}
							if (this.controlDown)
							{
								Main.mapFullscreenPos.Y = Main.mapFullscreenPos.Y + 1f * (16f / Main.mapFullscreenScale);
							}
							if (this.controlLeft)
							{
								Main.mapFullscreenPos.X = Main.mapFullscreenPos.X - 1f * (16f / Main.mapFullscreenScale);
							}
							if (this.controlRight)
							{
								Main.mapFullscreenPos.X = Main.mapFullscreenPos.X + 1f * (16f / Main.mapFullscreenScale);
							}
							this.controlUp = false;
							this.controlLeft = false;
							this.controlDown = false;
							this.controlRight = false;
							this.controlJump = false;
							this.controlUseItem = false;
							this.controlUseTile = false;
							this.controlThrow = false;
							this.controlHook = false;
							this.controlTorch = false;
							this.controlSmart = false;
							this.controlMount = false;
						}
						if (this.controlQuickHeal)
						{
							if (this.releaseQuickHeal)
							{
								this.QuickHeal();
							}
							this.releaseQuickHeal = false;
						}
						else
						{
							this.releaseQuickHeal = true;
						}
						if (this.controlQuickMana)
						{
							if (this.releaseQuickMana)
							{
								this.QuickMana();
							}
							this.releaseQuickMana = false;
						}
						else
						{
							this.releaseQuickMana = true;
						}
						if (this.controlLeft && this.controlRight)
						{
							this.controlLeft = false;
							this.controlRight = false;
						}
						if (Main.cSmartCursorToggle)
						{
							if (this.controlSmart && this.releaseSmart)
							{
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								Main.SmartCursorEnabled = !Main.SmartCursorEnabled;
							}
						}
						else
						{
							if (Main.SmartCursorEnabled != this.controlSmart)
							{
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							}
							Main.SmartCursorEnabled = this.controlSmart;
						}
						if (this.controlSmart)
						{
							this.releaseSmart = false;
						}
						else
						{
							this.releaseSmart = true;
						}
						if (this.controlMount)
						{
							if (this.releaseMount)
							{
								this.QuickMount();
							}
							this.releaseMount = false;
						}
						else
						{
							this.releaseMount = true;
						}
						if (Main.mapFullscreen)
						{
							if (this.mapZoomIn)
							{
								Main.mapFullscreenScale *= 1.05f;
							}
							if (this.mapZoomOut)
							{
								Main.mapFullscreenScale *= 0.95f;
							}
						}
						else
						{
							if (Main.mapStyle == 1)
							{
								if (this.mapZoomIn)
								{
									Main.mapMinimapScale *= 1.025f;
								}
								if (this.mapZoomOut)
								{
									Main.mapMinimapScale *= 0.975f;
								}
								if (this.mapAlphaUp)
								{
									Main.mapMinimapAlpha += 0.015f;
								}
								if (this.mapAlphaDown)
								{
									Main.mapMinimapAlpha -= 0.015f;
								}
							}
							else if (Main.mapStyle == 2)
							{
								if (this.mapZoomIn)
								{
									Main.mapOverlayScale *= 1.05f;
								}
								if (this.mapZoomOut)
								{
									Main.mapOverlayScale *= 0.95f;
								}
								if (this.mapAlphaUp)
								{
									Main.mapOverlayAlpha += 0.015f;
								}
								if (this.mapAlphaDown)
								{
									Main.mapOverlayAlpha -= 0.015f;
								}
							}
							if (this.mapStyle)
							{
								if (this.releaseMapStyle)
								{
									Main.PlaySound(12, -1, -1, 1, 1f, 0f);
									Main.mapStyle++;
									if (Main.mapStyle > 2)
									{
										Main.mapStyle = 0;
									}
								}
								this.releaseMapStyle = false;
							}
							else
							{
								this.releaseMapStyle = true;
							}
						}
						if (this.mapFullScreen)
						{
							if (this.releaseMapFullscreen)
							{
								if (Main.mapFullscreen)
								{
									Main.PlaySound(11, -1, -1, 1, 1f, 0f);
									Main.mapFullscreen = false;
								}
								else if (Main.mapEnabled)
								{
									Main.playerInventory = false;
									this.talkNPC = -1;
									Main.npcChatCornerItem = 0;
									Main.PlaySound(10, -1, -1, 1, 1f, 0f);
									float mapFullscreenScale = 2.5f;
									Main.mapFullscreenScale = mapFullscreenScale;
									Main.mapFullscreen = true;
									Main.resetMapFull = true;
									Main.buffString = string.Empty;
								}
							}
							this.releaseMapFullscreen = false;
						}
						else
						{
							this.releaseMapFullscreen = true;
						}
					}
					else if (!PlayerInput.UsingGamepad && !Main.editSign && !Main.editChest && !Main.blockInput)
					{
						PlayerInput.Triggers.Current.CopyIntoDuringChat(this);
					}
					if (this.confused)
					{
						bool flag2 = this.controlLeft;
						bool flag3 = this.controlUp;
						this.controlLeft = this.controlRight;
						this.controlRight = flag2;
						this.controlUp = this.controlRight;
						this.controlDown = flag3;
					}
					else if (this.cartFlip)
					{
						if (this.controlRight || this.controlLeft)
						{
							bool flag4 = this.controlLeft;
							this.controlLeft = this.controlRight;
							this.controlRight = flag4;
						}
						else
						{
							this.cartFlip = false;
						}
					}
					for (int k = 0; k < this.doubleTapCardinalTimer.Length; k++)
					{
						this.doubleTapCardinalTimer[k]--;
						if (this.doubleTapCardinalTimer[k] < 0)
						{
							this.doubleTapCardinalTimer[k] = 0;
						}
					}
					for (int l = 0; l < 4; l++)
					{
						bool flag5 = false;
						bool flag6 = false;
						switch (l)
						{
							case 0:
								flag5 = (this.controlDown && this.releaseDown);
								flag6 = this.controlDown;
								break;
							case 1:
								flag5 = (this.controlUp && this.releaseUp);
								flag6 = this.controlUp;
								break;
							case 2:
								flag5 = (this.controlRight && this.releaseRight);
								flag6 = this.controlRight;
								break;
							case 3:
								flag5 = (this.controlLeft && this.releaseLeft);
								flag6 = this.controlLeft;
								break;
						}
						if (flag5)
						{
							if (this.doubleTapCardinalTimer[l] > 0)
							{
								this.KeyDoubleTap(l);
							}
							else
							{
								this.doubleTapCardinalTimer[l] = 15;
							}
						}
						if (flag6)
						{
							this.holdDownCardinalTimer[l]++;
							this.KeyHoldDown(l, this.holdDownCardinalTimer[l]);
						}
						else
						{
							this.holdDownCardinalTimer[l] = 0;
						}
					}
					PlayerHooks.SetControls(this);
					if (this.controlInv)
					{
						if (this.releaseInventory)
						{
							this.ToggleInv();
						}
						this.releaseInventory = false;
					}
					else
					{
						this.releaseInventory = true;
					}
					if (this.delayUseItem)
					{
						if (!this.controlUseItem)
						{
							this.delayUseItem = false;
						}
						this.controlUseItem = false;
					}
					if (this.itemAnimation == 0 && this.itemTime == 0 && this.reuseDelay == 0)
					{
						this.dropItemCheck();
						int num6 = this.selectedItem;
						bool flag7 = false;
						if (!Main.drawingPlayerChat && this.selectedItem != 58 && !Main.editSign && !Main.editChest)
						{
							if (PlayerInput.Triggers.Current.Hotbar1)
							{
								this.selectedItem = 0;
								flag7 = true;
							}
							if (PlayerInput.Triggers.Current.Hotbar2)
							{
								this.selectedItem = 1;
								flag7 = true;
							}
							if (PlayerInput.Triggers.Current.Hotbar3)
							{
								this.selectedItem = 2;
								flag7 = true;
							}
							if (PlayerInput.Triggers.Current.Hotbar4)
							{
								this.selectedItem = 3;
								flag7 = true;
							}
							if (PlayerInput.Triggers.Current.Hotbar5)
							{
								this.selectedItem = 4;
								flag7 = true;
							}
							if (PlayerInput.Triggers.Current.Hotbar6)
							{
								this.selectedItem = 5;
								flag7 = true;
							}
							if (PlayerInput.Triggers.Current.Hotbar7)
							{
								this.selectedItem = 6;
								flag7 = true;
							}
							if (PlayerInput.Triggers.Current.Hotbar8)
							{
								this.selectedItem = 7;
								flag7 = true;
							}
							if (PlayerInput.Triggers.Current.Hotbar9)
							{
								this.selectedItem = 8;
								flag7 = true;
							}
							if (PlayerInput.Triggers.Current.Hotbar10)
							{
								this.selectedItem = 9;
								flag7 = true;
							}
							int selectedBinding = this.DpadRadial.SelectedBinding;
							int selectedBinding2 = this.CircularRadial.SelectedBinding;
							int arg_F8E_0 = this.QuicksRadial.SelectedBinding;
							this.DpadRadial.Update();
							this.CircularRadial.Update();
							this.QuicksRadial.Update();
							if (this.CircularRadial.SelectedBinding >= 0 && selectedBinding2 != this.CircularRadial.SelectedBinding)
							{
								this.DpadRadial.ChangeSelection(-1);
							}
							if (this.DpadRadial.SelectedBinding >= 0 && selectedBinding != this.DpadRadial.SelectedBinding)
							{
								this.CircularRadial.ChangeSelection(-1);
							}
							if (this.QuicksRadial.SelectedBinding != -1 && PlayerInput.Triggers.JustReleased.RadialQuickbar && !PlayerInput.MiscSettingsTEMP.HotbarRadialShouldBeUsed)
							{
								switch (this.QuicksRadial.SelectedBinding)
								{
									case 0:
										this.QuickHeal();
										break;
									case 1:
										this.QuickBuff();
										break;
									case 2:
										this.QuickMana();
										break;
								}
							}
							if (this.controlTorch || flag7)
							{
								this.DpadRadial.ChangeSelection(-1);
								this.CircularRadial.ChangeSelection(-1);
							}
							if (this.controlTorch && flag7)
							{
								if (this.selectedItem != this.nonTorch)
								{
									Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								}
								this.nonTorch = this.selectedItem;
								this.selectedItem = num6;
								flag7 = false;
							}
						}
						bool flag8 = Main.hairWindow;
						if (flag8)
						{
							int y = Main.screenHeight / 2 + 60;
							int x = Main.screenWidth / 2 - Main.hairStyleBackTexture.Width / 2;
							flag8 = new Rectangle(x, y, Main.hairStyleBackTexture.Width, Main.hairStyleBackTexture.Height).Contains(Main.MouseScreen.ToPoint());
						}
						if (flag7 && CaptureManager.Instance.Active)
						{
							CaptureManager.Instance.Active = false;
						}
						if (num6 != this.selectedItem)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
						}
						if (Main.mapFullscreen)
						{
							float num7 = (float)(PlayerInput.ScrollWheelDelta / 120);
							if (PlayerInput.UsingGamepad)
							{
								num7 += (float)(PlayerInput.Triggers.Current.HotbarPlus.ToInt() - PlayerInput.Triggers.Current.HotbarMinus.ToInt()) * 0.1f;
							}
							Main.mapFullscreenScale *= 1f + num7 * 0.3f;
						}
						else if (CaptureManager.Instance.Active)
						{
							CaptureManager.Instance.Scrolling();
						}
						else if (!flag8)
						{
							if (!Main.playerInventory)
							{
								this.HandleHotbar();
							}
							else
							{
								int num8 = PlayerInput.ScrollWheelDelta / 120;
								bool flag9 = true;
								if (Main.recBigList)
								{
									int num9 = 42;
									int num10 = 340;
									int num11 = 310;
									int num12 = (Main.screenWidth - num11 - 280) / num9;
									int num13 = (Main.screenHeight - num10 - 20) / num9;
									if (new Rectangle(num11, num10, num12 * num9, num13 * num9).Contains(Main.MouseScreen.ToPoint()))
									{
										num8 *= -1;
										int num14 = Math.Sign(num8);
										while (num8 != 0)
										{
											if (num8 < 0)
											{
												Main.recStart -= num12;
												if (Main.recStart < 0)
												{
													Main.recStart = 0;
												}
											}
											else
											{
												Main.recStart += num12;
												if (Main.recStart > Main.numAvailableRecipes - num12)
												{
													Main.recStart = Main.numAvailableRecipes - num12;
												}
											}
											num8 -= num14;
										}
									}
								}
								if (flag9)
								{
									Main.focusRecipe += num8;
									if (Main.focusRecipe > Main.numAvailableRecipes - 1)
									{
										Main.focusRecipe = Main.numAvailableRecipes - 1;
									}
									if (Main.focusRecipe < 0)
									{
										Main.focusRecipe = 0;
									}
								}
							}
						}
					}
					else
					{
						bool flag10 = false;
						if (!Main.drawingPlayerChat && this.selectedItem != 58 && !Main.editSign && !Main.editChest)
						{
							int num15 = -1;
							if (Main.keyState.IsKeyDown(Keys.D1))
							{
								num15 = 0;
								flag10 = true;
							}
							if (Main.keyState.IsKeyDown(Keys.D2))
							{
								num15 = 1;
								flag10 = true;
							}
							if (Main.keyState.IsKeyDown(Keys.D3))
							{
								num15 = 2;
								flag10 = true;
							}
							if (Main.keyState.IsKeyDown(Keys.D4))
							{
								num15 = 3;
								flag10 = true;
							}
							if (Main.keyState.IsKeyDown(Keys.D5))
							{
								num15 = 4;
								flag10 = true;
							}
							if (Main.keyState.IsKeyDown(Keys.D6))
							{
								num15 = 5;
								flag10 = true;
							}
							if (Main.keyState.IsKeyDown(Keys.D7))
							{
								num15 = 6;
								flag10 = true;
							}
							if (Main.keyState.IsKeyDown(Keys.D8))
							{
								num15 = 7;
								flag10 = true;
							}
							if (Main.keyState.IsKeyDown(Keys.D9))
							{
								num15 = 8;
								flag10 = true;
							}
							if (Main.keyState.IsKeyDown(Keys.D0))
							{
								num15 = 9;
								flag10 = true;
							}
							if (flag10)
							{
								if (num15 != this.nonTorch)
								{
									Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								}
								this.nonTorch = num15;
							}
						}
					}
				}
				if (this.selectedItem == 58)
				{
					this.nonTorch = -1;
				}
				else
				{
					this.SmartSelectLookup();
				}
				if (this.stoned != this.lastStoned)
				{
					if (this.whoAmI == Main.myPlayer && this.stoned)
					{
						int damage = (int)(20.0 * (double)Main.damageMultiplier);
						this.Hurt(PlayerDeathReason.ByOther(4), damage, 0, false, false, false, -1);
					}
					Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					for (int m = 0; m < 20; m++)
					{
						int num16 = Dust.NewDust(this.position, this.width, this.height, 1, 0f, 0f, 0, default(Color), 1f);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num16].noGravity = true;
						}
					}
				}
				this.lastStoned = this.stoned;
				if (this.frozen || this.webbed || this.stoned)
				{
					this.controlJump = false;
					this.controlDown = false;
					this.controlLeft = false;
					this.controlRight = false;
					this.controlUp = false;
					this.controlUseItem = false;
					this.controlUseTile = false;
					this.controlThrow = false;
					this.gravDir = 1f;
				}
				if (!this.controlThrow)
				{
					this.releaseThrow = true;
				}
				else
				{
					this.releaseThrow = false;
				}
				if (Main.netMode == 1)
				{
					bool flag11 = false;
					if (this.controlUp != Main.clientPlayer.controlUp)
					{
						flag11 = true;
					}
					if (this.controlDown != Main.clientPlayer.controlDown)
					{
						flag11 = true;
					}
					if (this.controlLeft != Main.clientPlayer.controlLeft)
					{
						flag11 = true;
					}
					if (this.controlRight != Main.clientPlayer.controlRight)
					{
						flag11 = true;
					}
					if (this.controlJump != Main.clientPlayer.controlJump)
					{
						flag11 = true;
					}
					if (this.controlUseItem != Main.clientPlayer.controlUseItem)
					{
						flag11 = true;
					}
					if (this.selectedItem != Main.clientPlayer.selectedItem)
					{
						flag11 = true;
					}
					if (flag11)
					{
						NetMessage.SendData(13, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
					}
				}
				if (Main.playerInventory)
				{
					this.AdjTiles();
				}
				if (this.chest != -1)
				{
					if (this.chest != -2)
					{
						this.flyingPigChest = -1;
					}
					if (this.flyingPigChest >= 0)
					{
						if (!Main.projectile[this.flyingPigChest].active || Main.projectile[this.flyingPigChest].type != 525)
						{
							Main.PlaySound(SoundID.Item59, -1, -1);
							this.chest = -1;
							Recipe.FindRecipes();
						}
						else
						{
							int num17 = (int)(((double)this.position.X + (double)this.width * 0.5) / 16.0);
							int num18 = (int)(((double)this.position.Y + (double)this.height * 0.5) / 16.0);
							this.chestX = (int)Main.projectile[this.flyingPigChest].Center.X / 16;
							this.chestY = (int)Main.projectile[this.flyingPigChest].Center.Y / 16;
							if (num17 < this.chestX - Player.tileRangeX || num17 > this.chestX + Player.tileRangeX + 1 || num18 < this.chestY - Player.tileRangeY || num18 > this.chestY + Player.tileRangeY + 1)
							{
								if (this.chest != -1)
								{
									Main.PlaySound(SoundID.Item59, -1, -1);
								}
								this.chest = -1;
								Recipe.FindRecipes();
							}
						}
					}
					else
					{
						int num19 = (int)(((double)this.position.X + (double)this.width * 0.5) / 16.0);
						int num20 = (int)(((double)this.position.Y + (double)this.height * 0.5) / 16.0);
						if (num19 < this.chestX - Player.tileRangeX || num19 > this.chestX + Player.tileRangeX + 1 || num20 < this.chestY - Player.tileRangeY || num20 > this.chestY + Player.tileRangeY + 1)
						{
							if (this.chest != -1)
							{
								Main.PlaySound(11, -1, -1, 1, 1f, 0f);
							}
							this.chest = -1;
							Recipe.FindRecipes();
						}
						else if (!Main.tile[this.chestX, this.chestY].active())
						{
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
							this.chest = -1;
							Recipe.FindRecipes();
						}
					}
				}
				else
				{
					this.flyingPigChest = -1;
				}
				if (this.velocity.Y <= 0f)
				{
					this.fallStart2 = (int)(this.position.Y / 16f);
				}
				if (this.velocity.Y == 0f)
				{
					int num21 = 25;
					num21 += this.extraFall;
					int num22 = (int)(this.position.Y / 16f) - this.fallStart;
					if (this.mount.CanFly)
					{
						num22 = 0;
					}
					if (this.mount.Cart && Minecart.OnTrack(this.position, this.width, this.height))
					{
						num22 = 0;
					}
					if (this.mount.Type == 1)
					{
						num22 = 0;
					}
					this.mount.FatigueRecovery();
					if (this.stoned)
					{
						int num23 = (int)(((float)num22 * this.gravDir - 2f) * 20f);
						if (num23 > 0)
						{
							this.Hurt(PlayerDeathReason.ByOther(4), num23, 0, false, false, false, -1);
							this.immune = false;
						}
					}
					else if (((this.gravDir == 1f && num22 > num21) || (this.gravDir == -1f && num22 < -num21)) && !this.noFallDmg && this.wingsLogic == 0)
					{
						this.immune = false;
						int num24 = (int)((float)num22 * this.gravDir - (float)num21) * 10;
						if (this.mount.Active)
						{
							num24 = (int)((float)num24 * this.mount.FallDamage);
						}
						this.Hurt(PlayerDeathReason.ByOther(0), num24, 0, false, false, false, -1);
						if (!this.dead && this.statLife <= this.statLifeMax2 / 10)
						{
							AchievementsHelper.HandleSpecialEvent(this, 8);
						}
					}
					this.fallStart = (int)(this.position.Y / 16f);
				}
				if (this.jump > 0 || this.rocketDelay > 0 || this.wet || this.slowFall || (double)num5 < 0.8 || this.tongued)
				{
					this.fallStart = (int)(this.position.Y / 16f);
				}
			}
			if (Main.netMode != 1)
			{
				if (this.chest == -1 && this.lastChest >= 0 && Main.chest[this.lastChest] != null && Main.chest[this.lastChest] != null)
				{
					int x2 = Main.chest[this.lastChest].x;
					int y2 = Main.chest[this.lastChest].y;
					NPC.BigMimicSummonCheck(x2, y2);
				}
				this.lastChest = this.chest;
			}
			if (this.mouseInterface)
			{
				this.delayUseItem = true;
			}
			Player.tileTargetX = (int)(((float)Main.mouseX + Main.screenPosition.X) / 16f);
			Player.tileTargetY = (int)(((float)Main.mouseY + Main.screenPosition.Y) / 16f);
			if (this.gravDir == -1f)
			{
				Player.tileTargetY = (int)((Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY) / 16f);
			}
			if (Player.tileTargetX >= Main.maxTilesX - 5)
			{
				Player.tileTargetX = Main.maxTilesX - 5;
			}
			if (Player.tileTargetY >= Main.maxTilesY - 5)
			{
				Player.tileTargetY = Main.maxTilesY - 5;
			}
			if (Player.tileTargetX < 5)
			{
				Player.tileTargetX = 5;
			}
			if (Player.tileTargetY < 5)
			{
				Player.tileTargetY = 5;
			}
			if (Main.tile[Player.tileTargetX - 1, Player.tileTargetY] == null)
			{
				Main.tile[Player.tileTargetX - 1, Player.tileTargetY] = new Tile();
			}
			if (Main.tile[Player.tileTargetX + 1, Player.tileTargetY] == null)
			{
				Main.tile[Player.tileTargetX + 1, Player.tileTargetY] = new Tile();
			}
			if (Main.tile[Player.tileTargetX, Player.tileTargetY] == null)
			{
				Main.tile[Player.tileTargetX, Player.tileTargetY] = new Tile();
			}
			if (!Main.tile[Player.tileTargetX, Player.tileTargetY].active())
			{
				if (Main.tile[Player.tileTargetX - 1, Player.tileTargetY].active() && Main.tile[Player.tileTargetX - 1, Player.tileTargetY].type == 323)
				{
					int frameY = (int)Main.tile[Player.tileTargetX - 1, Player.tileTargetY].frameY;
					if (frameY < -4)
					{
						Player.tileTargetX++;
					}
					if (frameY > 4)
					{
						Player.tileTargetX--;
					}
				}
				else if (Main.tile[Player.tileTargetX + 1, Player.tileTargetY].active() && Main.tile[Player.tileTargetX + 1, Player.tileTargetY].type == 323)
				{
					int frameY2 = (int)Main.tile[Player.tileTargetX + 1, Player.tileTargetY].frameY;
					if (frameY2 < -4)
					{
						Player.tileTargetX++;
					}
					if (frameY2 > 4)
					{
						Player.tileTargetX--;
					}
				}
			}
			try
			{
				this.SmartCursorLookup();
				this.SmartInteractLookup();
			}
			catch
			{
				Main.SmartCursorEnabled = false;
			}
			this.UpdateImmunity();
			if (this.petalTimer > 0)
			{
				this.petalTimer--;
			}
			if (this.shadowDodgeTimer > 0)
			{
				this.shadowDodgeTimer--;
			}
			if (this.jump > 0 || this.velocity.Y != 0f)
			{
				this.slippy = false;
				this.slippy2 = false;
				this.powerrun = false;
				this.sticky = false;
			}
			this.potionDelayTime = Item.potionDelay;
			this.restorationDelayTime = Item.restorationDelay;
			if (this.pStone)
			{
				this.potionDelayTime = (int)((double)this.potionDelayTime * 0.75);
				this.restorationDelayTime = (int)((double)this.restorationDelayTime * 0.75);
			}
			if (this.yoraiz0rEye > 0)
			{
				this.Yoraiz0rEye();
			}
			this.ResetEffects();
			this.UpdateDyes(i);
			this.meleeCrit += this.inventory[this.selectedItem].crit;
			this.magicCrit += this.inventory[this.selectedItem].crit;
			this.rangedCrit += this.inventory[this.selectedItem].crit;
			this.thrownCrit += this.inventory[this.selectedItem].crit;
			if (this.whoAmI == Main.myPlayer)
			{
				Main.musicBox2 = -1;
				if (Main.waterCandles > 0)
				{
					this.AddBuff(86, 2, false);
				}
				if (Main.peaceCandles > 0)
				{
					this.AddBuff(157, 2, false);
				}
				if (Main.campfire)
				{
					this.AddBuff(87, 2, false);
				}
				if (Main.starInBottle)
				{
					this.AddBuff(158, 2, false);
				}
				if (Main.heartLantern)
				{
					this.AddBuff(89, 2, false);
				}
				if (Main.sunflower)
				{
					this.AddBuff(146, 2, false);
				}
				if (this.hasBanner)
				{
					this.AddBuff(147, 2, false);
				}
				if (!this.behindBackWall && this.ZoneSandstorm)
				{
					this.AddBuff(194, 2, false);
				}
			}
			PlayerHooks.PreUpdateBuffs(this);
			for (int num25 = 0; num25 < BuffLoader.BuffCount; num25++)
			{
				this.buffImmune[num25] = false;
			}
			this.UpdateBuffs(i);
			PlayerHooks.PostUpdateBuffs(this);
			if (this.whoAmI == Main.myPlayer)
			{
				if (!this.onFire && !this.poisoned)
				{
					this.trapDebuffSource = false;
				}
				this.UpdatePet(i);
				this.UpdatePetLight(i);
			}
			bool flag13 = this.wet && !this.lavaWet && (!this.mount.Active || this.mount.Type != 3);
			if (this.accMerman && flag13)
			{
				this.releaseJump = true;
				this.wings = 0;
				this.merman = true;
				this.accFlipper = true;
				this.AddBuff(34, 2, true);
			}
			else
			{
				this.merman = false;
			}
			if (!flag13 && this.forceWerewolf)
			{
				this.forceMerman = false;
			}
			if (this.forceMerman && flag13)
			{
				this.wings = 0;
			}
			this.accMerman = false;
			this.hideMerman = false;
			this.forceMerman = false;
			if (this.wolfAcc && !this.merman && !Main.dayTime && !this.wereWolf)
			{
				this.AddBuff(28, 60, true);
			}
			this.wolfAcc = false;
			this.hideWolf = false;
			this.forceWerewolf = false;
			if (this.whoAmI == Main.myPlayer)
			{
				for (int num26 = 0; num26 < 22; num26++)
				{
					if (this.buffType[num26] > 0 && this.buffTime[num26] <= 0)
					{
						this.DelBuff(num26);
					}
				}
			}
			this.beetleDefense = false;
			this.beetleOffense = false;
			this.doubleJumpCloud = false;
			this.setSolar = false;
			this.head = this.armor[0].headSlot;
			this.body = this.armor[1].bodySlot;
			this.legs = this.armor[2].legSlot;
			this.handon = -1;
			this.handoff = -1;
			this.back = -1;
			this.front = -1;
			this.shoe = -1;
			this.waist = -1;
			this.shield = -1;
			this.neck = -1;
			this.face = -1;
			this.balloon = -1;
			if (this.MountFishronSpecialCounter > 0f)
			{
				this.MountFishronSpecialCounter -= 1f;
			}
			if (this._portalPhysicsTime > 0)
			{
				this._portalPhysicsTime--;
			}
			this.UpdateEquips(i);
			if (this.velocity.Y == 0f || this.controlJump)
			{
				this.portalPhysicsFlag = false;
			}
			if (this.inventory[this.selectedItem].type == 3384 || this.portalPhysicsFlag)
			{
				this._portalPhysicsTime = 30;
			}
			if (this.mount.Active)
			{
				this.mount.UpdateEffects(this);
			}
			this.gemCount++;
			if (this.gemCount >= 10)
			{
				this.gem = -1;
				this.ownedLargeGems = 0;
				this.gemCount = 0;
				for (int num27 = 0; num27 <= 58; num27++)
				{
					if (this.inventory[num27].type == 0 || this.inventory[num27].stack == 0)
					{
						this.inventory[num27].TurnToAir();
					}
					if (this.inventory[num27].type >= 1522 && this.inventory[num27].type <= 1527)
					{
						this.gem = this.inventory[num27].type - 1522;
						this.ownedLargeGems[this.gem] = true;
					}
					if (this.inventory[num27].type == 3643)
					{
						this.gem = 6;
						this.ownedLargeGems[this.gem] = true;
					}
				}
			}
			this.UpdateArmorLights();
			this.UpdateArmorSets(i);
			PlayerHooks.PostUpdateEquips(this); // TODO, move down?
			if (this.maxTurretsOld != this.maxTurrets)
			{
				this.UpdateMaxTurrets();
				this.maxTurretsOld = this.maxTurrets;
			}
			if (this.shieldRaised)
			{
				this.statDefense += 20;
			}
			if ((this.merman || this.forceMerman) && flag13)
			{
				this.wings = 0;
			}
			if (this.invis)
			{
				if (this.itemAnimation == 0 && this.aggro > -750)
				{
					this.aggro = -750;
				}
				else if (this.aggro > -250)
				{
					this.aggro = -250;
				}
			}
			if (this.inventory[this.selectedItem].type == 3106)
			{
				if (this.itemAnimation > 0)
				{
					this.stealthTimer = 15;
					if (this.stealth > 0f)
					{
						this.stealth += 0.1f;
					}
				}
				else if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1 && (double)this.velocity.Y > -0.1 && (double)this.velocity.Y < 0.1 && !this.mount.Active)
				{
					if (this.stealthTimer == 0 && this.stealth > 0f)
					{
						this.stealth -= 0.02f;
						if ((double)this.stealth <= 0.0)
						{
							this.stealth = 0f;
							if (Main.netMode == 1)
							{
								NetMessage.SendData(84, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
							}
						}
					}
				}
				else
				{
					if (this.stealth > 0f)
					{
						this.stealth += 0.1f;
					}
					if (this.mount.Active)
					{
						this.stealth = 1f;
					}
				}
				if (this.stealth > 1f)
				{
					this.stealth = 1f;
				}
				this.meleeDamage += (1f - this.stealth) * 3f;
				this.meleeCrit += (int)((1f - this.stealth) * 30f);
				if (this.meleeCrit > 100)
				{
					this.meleeCrit = 100;
				}
				this.aggro -= (int)((1f - this.stealth) * 750f);
				if (this.stealthTimer > 0)
				{
					this.stealthTimer--;
				}
			}
			else if (this.shroomiteStealth)
			{
				if (this.itemAnimation > 0)
				{
					this.stealthTimer = 5;
				}
				if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1 && (double)this.velocity.Y > -0.1 && (double)this.velocity.Y < 0.1 && !this.mount.Active)
				{
					if (this.stealthTimer == 0 && this.stealth > 0f)
					{
						this.stealth -= 0.015f;
						if ((double)this.stealth <= 0.0)
						{
							this.stealth = 0f;
							if (Main.netMode == 1)
							{
								NetMessage.SendData(84, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
							}
						}
					}
				}
				else
				{
					float num28 = Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y);
					this.stealth += num28 * 0.0075f;
					if (this.stealth > 1f)
					{
						this.stealth = 1f;
					}
					if (this.mount.Active)
					{
						this.stealth = 1f;
					}
				}
				this.rangedDamage += (1f - this.stealth) * 0.6f;
				this.rangedCrit += (int)((1f - this.stealth) * 10f);
				this.aggro -= (int)((1f - this.stealth) * 750f);
				if (this.stealthTimer > 0)
				{
					this.stealthTimer--;
				}
			}
			else if (this.setVortex)
			{
				bool flag14 = false;
				if (this.vortexStealthActive)
				{
					float num29 = this.stealth;
					this.stealth -= 0.04f;
					if (this.stealth < 0f)
					{
						this.stealth = 0f;
					}
					else
					{
						flag14 = true;
					}
					if (this.stealth == 0f && num29 != this.stealth && Main.netMode == 1)
					{
						NetMessage.SendData(84, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
					}
					this.rangedDamage += (1f - this.stealth) * 0.8f;
					this.rangedCrit += (int)((1f - this.stealth) * 20f);
					this.aggro -= (int)((1f - this.stealth) * 1200f);
					this.moveSpeed *= 0.3f;
					if (this.mount.Active)
					{
						this.vortexStealthActive = false;
					}
				}
				else
				{
					float num30 = this.stealth;
					this.stealth += 0.04f;
					if (this.stealth > 1f)
					{
						this.stealth = 1f;
					}
					else
					{
						flag14 = true;
					}
					if (this.stealth == 1f && num30 != this.stealth && Main.netMode == 1)
					{
						NetMessage.SendData(84, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
					}
				}
				if (flag14)
				{
					if (Main.rand.Next(2) == 0)
					{
						Vector2 vector = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust = Main.dust[Dust.NewDust(base.Center - vector * 30f, 0, 0, 229, 0f, 0f, 0, default(Color), 1f)];
						dust.noGravity = true;
						dust.position = base.Center - vector * (float)Main.rand.Next(5, 11);
						dust.velocity = vector.RotatedBy(1.5707963705062866, default(Vector2)) * 4f;
						dust.scale = 0.5f + Main.rand.NextFloat();
						dust.fadeIn = 0.5f;
					}
					if (Main.rand.Next(2) == 0)
					{
						Vector2 vector2 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust2 = Main.dust[Dust.NewDust(base.Center - vector2 * 30f, 0, 0, 240, 0f, 0f, 0, default(Color), 1f)];
						dust2.noGravity = true;
						dust2.position = base.Center - vector2 * 12f;
						dust2.velocity = vector2.RotatedBy(-1.5707963705062866, default(Vector2)) * 2f;
						dust2.scale = 0.5f + Main.rand.NextFloat();
						dust2.fadeIn = 0.5f;
					}
				}
			}
			else
			{
				this.stealth = 1f;
			}
			if (this.manaSick)
			{
				this.magicDamage *= 1f - this.manaSickReduction;
			}
			if (this.inventory[this.selectedItem].type == 1947)
			{
				this.meleeSpeed = (1f + this.meleeSpeed) / 2f;
			}
			if ((double)this.pickSpeed < 0.3)
			{
				this.pickSpeed = 0.3f;
			}
			if (this.meleeSpeed > 3f)
			{
				this.meleeSpeed = 3f;
			}
			if ((double)this.moveSpeed > 1.6)
			{
				this.moveSpeed = 1.6f;
			}
			if (this.tileSpeed > 3f)
			{
				this.tileSpeed = 3f;
			}
			this.tileSpeed = 1f / this.tileSpeed;
			if (this.wallSpeed > 3f)
			{
				this.wallSpeed = 3f;
			}
			this.wallSpeed = 1f / this.wallSpeed;
			if (this.statManaMax2 > 400)
			{
				this.statManaMax2 = 400;
			}
			if (this.statDefense < 0)
			{
				this.statDefense = 0;
			}
			if (this.slowOgreSpit)
			{
				this.moveSpeed /= 3f;
				if (this.velocity.Y == 0f && Math.Abs(this.velocity.X) > 1f)
				{
					this.velocity.X = this.velocity.X / 2f;
				}
			}
			else if (this.dazed)
			{
				this.moveSpeed /= 3f;
			}
			else if (this.slow)
			{
				this.moveSpeed /= 2f;
			}
			else if (this.chilled)
			{
				this.moveSpeed *= 0.75f;
			}
			if (this.shieldRaised)
			{
				this.moveSpeed /= 3f;
				if (this.velocity.Y == 0f && Math.Abs(this.velocity.X) > 3f)
				{
					this.velocity.X = this.velocity.X / 2f;
				}
			}
			if (DD2Event.Ongoing)
			{
				DD2Event.FindArenaHitbox();
				if (DD2Event.ShouldBlockBuilding(base.Center))
				{
					this.noBuilding = true;
					this.AddBuff(199, 3, true);
				}
			}
			this.meleeSpeed = 1f / this.meleeSpeed;
			PlayerHooks.PostUpdateMiscEffects(this);
			this.UpdateLifeRegen();
			this.soulDrain = 0;
			this.UpdateManaRegen();
			if (this.manaRegenCount < 0)
			{
				this.manaRegenCount = 0;
			}
			if (this.statMana > this.statManaMax2)
			{
				this.statMana = this.statManaMax2;
			}
			this.runAcceleration *= this.moveSpeed;
			this.maxRunSpeed *= this.moveSpeed;
			this.UpdateJumpHeight();
			for (int num31 = 0; num31 < 22; num31++)
			{
				if (this.buffType[num31] > 0 && this.buffTime[num31] > 0 && this.buffImmune[this.buffType[num31]])
				{
					this.DelBuff(num31);
				}
			}
			if (this.brokenArmor)
			{
				this.statDefense /= 2;
			}
			if (this.witheredArmor)
			{
				this.statDefense /= 2;
			}
			if (this.witheredWeapon)
			{
				this.meleeDamage *= 0.5f;
				this.rangedDamage *= 0.5f;
				this.magicDamage *= 0.5f;
				this.minionDamage *= 0.5f;
				this.thrownDamage *= 0.5f;
			}
			this.lastTileRangeX = Player.tileRangeX;
			this.lastTileRangeY = Player.tileRangeY;
			if (this.mount.Active && this.mount.BlockExtraJumps)
			{
				this.jumpAgainCloud = false;
				this.jumpAgainSandstorm = false;
				this.jumpAgainBlizzard = false;
				this.jumpAgainFart = false;
				this.jumpAgainSail = false;
				this.jumpAgainUnicorn = false;
			}
			else
			{
				if (!this.doubleJumpCloud)
				{
					this.jumpAgainCloud = false;
				}
				else if (this.velocity.Y == 0f || this.sliding)
				{
					this.jumpAgainCloud = true;
				}
				if (!this.doubleJumpSandstorm)
				{
					this.jumpAgainSandstorm = false;
				}
				else if (this.velocity.Y == 0f || this.sliding)
				{
					this.jumpAgainSandstorm = true;
				}
				if (!this.doubleJumpBlizzard)
				{
					this.jumpAgainBlizzard = false;
				}
				else if (this.velocity.Y == 0f || this.sliding)
				{
					this.jumpAgainBlizzard = true;
				}
				if (!this.doubleJumpFart)
				{
					this.jumpAgainFart = false;
				}
				else if (this.velocity.Y == 0f || this.sliding)
				{
					this.jumpAgainFart = true;
				}
				if (!this.doubleJumpSail)
				{
					this.jumpAgainSail = false;
				}
				else if (this.velocity.Y == 0f || this.sliding)
				{
					this.jumpAgainSail = true;
				}
				if (!this.doubleJumpUnicorn)
				{
					this.jumpAgainUnicorn = false;
				}
				else if (this.velocity.Y == 0f || this.sliding)
				{
					this.jumpAgainUnicorn = true;
				}
			}
			if (!this.carpet)
			{
				this.canCarpet = false;
				this.carpetFrame = -1;
			}
			else if (this.velocity.Y == 0f || this.sliding)
			{
				this.canCarpet = true;
				this.carpetTime = 0;
				this.carpetFrame = -1;
				this.carpetFrameCounter = 0f;
			}
			if (this.gravDir == -1f)
			{
				this.canCarpet = false;
			}
			if (this.ropeCount > 0)
			{
				this.ropeCount--;
			}
			if (!this.pulley && !this.frozen && !this.webbed && !this.stoned && !this.controlJump && this.gravDir == 1f && this.ropeCount == 0 && this.grappling[0] == -1 && !this.tongued && !this.mount.Active)
			{
				this.FindPulley();
			}
			if (this.pulley)
			{
				if (this.mount.Active)
				{
					this.pulley = false;
				}
				this.sandStorm = false;
				this.dJumpEffectCloud = false;
				this.dJumpEffectSandstorm = false;
				this.dJumpEffectBlizzard = false;
				this.dJumpEffectFart = false;
				this.dJumpEffectSail = false;
				this.dJumpEffectUnicorn = false;
				int num32 = (int)(this.position.X + (float)(this.width / 2)) / 16;
				int num33 = (int)(this.position.Y - 8f) / 16;
				bool flag15 = false;
				if (this.pulleyDir == 0)
				{
					this.pulleyDir = 1;
				}
				if (this.pulleyDir == 1)
				{
					if (this.direction == -1 && this.controlLeft && (this.releaseLeft || this.leftTimer == 0))
					{
						this.pulleyDir = 2;
						flag15 = true;
					}
					else if ((this.direction == 1 && this.controlRight && this.releaseRight) || this.rightTimer == 0)
					{
						this.pulleyDir = 2;
						flag15 = true;
					}
					else
					{
						if (this.direction == 1 && this.controlLeft)
						{
							this.direction = -1;
							flag15 = true;
						}
						if (this.direction == -1 && this.controlRight)
						{
							this.direction = 1;
							flag15 = true;
						}
					}
				}
				else if (this.pulleyDir == 2)
				{
					if (this.direction == 1 && this.controlLeft)
					{
						flag15 = true;
						int num34 = num32 * 16 + 8 - this.width / 2;
						if (!Collision.SolidCollision(new Vector2((float)num34, this.position.Y), this.width, this.height))
						{
							this.pulleyDir = 1;
							this.direction = -1;
							flag15 = true;
						}
					}
					if (this.direction == -1 && this.controlRight)
					{
						flag15 = true;
						int num35 = num32 * 16 + 8 - this.width / 2;
						if (!Collision.SolidCollision(new Vector2((float)num35, this.position.Y), this.width, this.height))
						{
							this.pulleyDir = 1;
							this.direction = 1;
							flag15 = true;
						}
					}
				}
				bool flag16 = false;
				if (!flag15 && ((this.controlLeft && (this.releaseLeft || this.leftTimer == 0)) || (this.controlRight && (this.releaseRight || this.rightTimer == 0))))
				{
					int num36 = 1;
					if (this.controlLeft)
					{
						num36 = -1;
					}
					int num37 = num32 + num36;
					if (Main.tile[num37, num33].active() && Main.tileRope[(int)Main.tile[num37, num33].type])
					{
						this.pulleyDir = 1;
						this.direction = num36;
						int num38 = num37 * 16 + 8 - this.width / 2;
						float num39 = this.position.Y;
						num39 = (float)(num33 * 16 + 22);
						if ((!Main.tile[num37, num33 - 1].active() || !Main.tileRope[(int)Main.tile[num37, num33 - 1].type]) && (!Main.tile[num37, num33 + 1].active() || !Main.tileRope[(int)Main.tile[num37, num33 + 1].type]))
						{
							num39 = (float)(num33 * 16 + 22);
						}
						if (Collision.SolidCollision(new Vector2((float)num38, num39), this.width, this.height))
						{
							this.pulleyDir = 2;
							this.direction = -num36;
							if (this.direction == 1)
							{
								num38 = num37 * 16 + 8 - this.width / 2 + 6;
							}
							else
							{
								num38 = num37 * 16 + 8 - this.width / 2 + -6;
							}
						}
						if (i == Main.myPlayer)
						{
							Main.cameraX = Main.cameraX + this.position.X - (float)num38;
						}
						this.position.X = (float)num38;
						this.gfxOffY = this.position.Y - num39;
						this.position.Y = num39;
						flag16 = true;
					}
				}
				if (!flag16 && !flag15 && !this.controlUp && ((this.controlLeft && this.releaseLeft) || (this.controlRight && this.releaseRight)))
				{
					this.pulley = false;
					if (this.controlLeft && this.velocity.X == 0f)
					{
						this.velocity.X = -1f;
					}
					if (this.controlRight && this.velocity.X == 0f)
					{
						this.velocity.X = 1f;
					}
				}
				if (this.velocity.X != 0f)
				{
					this.pulley = false;
				}
				if (Main.tile[num32, num33] == null)
				{
					Main.tile[num32, num33] = new Tile();
				}
				if (!Main.tile[num32, num33].active() || !Main.tileRope[(int)Main.tile[num32, num33].type])
				{
					this.pulley = false;
				}
				if (this.gravDir != 1f)
				{
					this.pulley = false;
				}
				if (this.frozen || this.webbed || this.stoned)
				{
					this.pulley = false;
				}
				if (!this.pulley)
				{
					this.velocity.Y = this.velocity.Y - this.gravity;
				}
				if (this.controlJump)
				{
					this.pulley = false;
					this.jump = Player.jumpHeight;
					this.velocity.Y = -Player.jumpSpeed;
				}
			}
			if (this.pulley)
			{
				this.fallStart = (int)this.position.Y / 16;
				this.wingFrame = 0;
				if (this.wings == 4)
				{
					this.wingFrame = 3;
				}
				int num40 = (int)(this.position.X + (float)(this.width / 2)) / 16;
				int num41 = (int)(this.position.Y - 16f) / 16;
				int num42 = (int)(this.position.Y - 8f) / 16;
				bool flag17 = true;
				bool flag18 = false;
				if ((Main.tile[num40, num42 - 1].active() && Main.tileRope[(int)Main.tile[num40, num42 - 1].type]) || (Main.tile[num40, num42 + 1].active() && Main.tileRope[(int)Main.tile[num40, num42 + 1].type]))
				{
					flag18 = true;
				}
				if (Main.tile[num40, num41] == null)
				{
					Main.tile[num40, num41] = new Tile();
				}
				if (!Main.tile[num40, num41].active() || !Main.tileRope[(int)Main.tile[num40, num41].type])
				{
					flag17 = false;
					if (this.velocity.Y < 0f)
					{
						this.velocity.Y = 0f;
					}
				}
				if (flag18)
				{
					if (this.controlUp && flag17)
					{
						float num43 = this.position.X;
						float y3 = this.position.Y - Math.Abs(this.velocity.Y) - 2f;
						if (Collision.SolidCollision(new Vector2(num43, y3), this.width, this.height))
						{
							num43 = (float)(num40 * 16 + 8 - this.width / 2 + 6);
							if (!Collision.SolidCollision(new Vector2(num43, y3), this.width, (int)((float)this.height + Math.Abs(this.velocity.Y) + 2f)))
							{
								if (i == Main.myPlayer)
								{
									Main.cameraX = Main.cameraX + this.position.X - num43;
								}
								this.pulleyDir = 2;
								this.direction = 1;
								this.position.X = num43;
								this.velocity.X = 0f;
							}
							else
							{
								num43 = (float)(num40 * 16 + 8 - this.width / 2 + -6);
								if (!Collision.SolidCollision(new Vector2(num43, y3), this.width, (int)((float)this.height + Math.Abs(this.velocity.Y) + 2f)))
								{
									if (i == Main.myPlayer)
									{
										Main.cameraX = Main.cameraX + this.position.X - num43;
									}
									this.pulleyDir = 2;
									this.direction = -1;
									this.position.X = num43;
									this.velocity.X = 0f;
								}
							}
						}
						if (this.velocity.Y > 0f)
						{
							this.velocity.Y = this.velocity.Y * 0.7f;
						}
						if (this.velocity.Y > -3f)
						{
							this.velocity.Y = this.velocity.Y - 0.2f;
						}
						else
						{
							this.velocity.Y = this.velocity.Y - 0.02f;
						}
						if (this.velocity.Y < -8f)
						{
							this.velocity.Y = -8f;
						}
					}
					else if (this.controlDown)
					{
						float num44 = this.position.X;
						float y4 = this.position.Y;
						if (Collision.SolidCollision(new Vector2(num44, y4), this.width, (int)((float)this.height + Math.Abs(this.velocity.Y) + 2f)))
						{
							num44 = (float)(num40 * 16 + 8 - this.width / 2 + 6);
							if (!Collision.SolidCollision(new Vector2(num44, y4), this.width, (int)((float)this.height + Math.Abs(this.velocity.Y) + 2f)))
							{
								if (i == Main.myPlayer)
								{
									Main.cameraX = Main.cameraX + this.position.X - num44;
								}
								this.pulleyDir = 2;
								this.direction = 1;
								this.position.X = num44;
								this.velocity.X = 0f;
							}
							else
							{
								num44 = (float)(num40 * 16 + 8 - this.width / 2 + -6);
								if (!Collision.SolidCollision(new Vector2(num44, y4), this.width, (int)((float)this.height + Math.Abs(this.velocity.Y) + 2f)))
								{
									if (i == Main.myPlayer)
									{
										Main.cameraX = Main.cameraX + this.position.X - num44;
									}
									this.pulleyDir = 2;
									this.direction = -1;
									this.position.X = num44;
									this.velocity.X = 0f;
								}
							}
						}
						if (this.velocity.Y < 0f)
						{
							this.velocity.Y = this.velocity.Y * 0.7f;
						}
						if (this.velocity.Y < 3f)
						{
							this.velocity.Y = this.velocity.Y + 0.2f;
						}
						else
						{
							this.velocity.Y = this.velocity.Y + 0.1f;
						}
						if (this.velocity.Y > this.maxFallSpeed)
						{
							this.velocity.Y = this.maxFallSpeed;
						}
					}
					else
					{
						this.velocity.Y = this.velocity.Y * 0.7f;
						if ((double)this.velocity.Y > -0.1 && (double)this.velocity.Y < 0.1)
						{
							this.velocity.Y = 0f;
						}
					}
				}
				else if (this.controlDown)
				{
					this.ropeCount = 10;
					this.pulley = false;
					this.velocity.Y = 1f;
				}
				else
				{
					this.velocity.Y = 0f;
					this.position.Y = (float)(num41 * 16 + 22);
				}
				float num45 = (float)(num40 * 16 + 8 - this.width / 2);
				if (this.pulleyDir == 1)
				{
					num45 = (float)(num40 * 16 + 8 - this.width / 2);
				}
				if (this.pulleyDir == 2)
				{
					num45 = (float)(num40 * 16 + 8 - this.width / 2 + 6 * this.direction);
				}
				if (i == Main.myPlayer)
				{
					Main.cameraX = Main.cameraX + this.position.X - num45;
				}
				this.position.X = num45;
				this.pulleyFrameCounter += Math.Abs(this.velocity.Y * 0.75f);
				if (this.velocity.Y != 0f)
				{
					this.pulleyFrameCounter += 0.75f;
				}
				if (this.pulleyFrameCounter > 10f)
				{
					this.pulleyFrame++;
					this.pulleyFrameCounter = 0f;
				}
				if (this.pulleyFrame > 1)
				{
					this.pulleyFrame = 0;
				}
				this.canCarpet = true;
				this.carpetFrame = -1;
				this.wingTime = (float)this.wingTimeMax;
				this.rocketTime = this.rocketTimeMax;
				this.rocketDelay = 0;
				this.rocketFrame = false;
				this.canRocket = false;
				this.rocketRelease = false;
				this.DashMovement();
			}
			else if (this.grappling[0] == -1 && !this.tongued)
			{
				if (this.wingsLogic > 0 && this.velocity.Y != 0f && !this.merman)
				{
					if (this.wingsLogic == 1 || this.wingsLogic == 2)
					{
						this.accRunSpeed = 6.25f;
					}
					if (this.wingsLogic == 4)
					{
						this.accRunSpeed = 6.5f;
					}
					if (this.wingsLogic == 5 || this.wingsLogic == 6 || this.wingsLogic == 13 || this.wingsLogic == 15)
					{
						this.accRunSpeed = 6.75f;
					}
					if (this.wingsLogic == 7 || this.wingsLogic == 8)
					{
						this.accRunSpeed = 7f;
					}
					if (this.wingsLogic == 9 || this.wingsLogic == 10 || this.wingsLogic == 11 || this.wingsLogic == 20 || this.wingsLogic == 21 || this.wingsLogic == 23 || this.wingsLogic == 24)
					{
						this.accRunSpeed = 7.5f;
					}
					if (this.wingsLogic == 22)
					{
						if (this.controlDown && this.controlJump && this.wingTime > 0f)
						{
							this.accRunSpeed = 10f;
							this.runAcceleration *= 10f;
						}
						else
						{
							this.accRunSpeed = 6.25f;
						}
					}
					if (this.wingsLogic == 30 || this.wingsLogic == 31)
					{
						if (this.controlDown && this.controlJump && this.wingTime > 0f)
						{
							this.accRunSpeed = 12f;
							this.runAcceleration *= 12f;
						}
						else
						{
							this.accRunSpeed = 6.5f;
							this.runAcceleration *= 1.5f;
						}
					}
					if (this.wingsLogic == 26)
					{
						this.accRunSpeed = 8f;
						this.runAcceleration *= 2f;
					}
					if (this.wingsLogic == 37)
					{
						if (this.controlDown && this.controlJump && this.wingTime > 0f)
						{
							this.accRunSpeed = 12f;
							this.runAcceleration *= 12f;
						}
						else
						{
							this.accRunSpeed = 6f;
							this.runAcceleration *= 2.5f;
						}
					}
					if (this.wingsLogic == 29 || this.wingsLogic == 32)
					{
						this.accRunSpeed = 9f;
						this.runAcceleration *= 2.5f;
					}
					if (this.wingsLogic == 12)
					{
						this.accRunSpeed = 7.75f;
					}
					if (this.wingsLogic == 16 || this.wingsLogic == 17 || this.wingsLogic == 18 || this.wingsLogic == 19 || this.wingsLogic == 34 || this.wingsLogic == 3 || this.wingsLogic == 28 || this.wingsLogic == 33 || this.wingsLogic == 34 || this.wingsLogic == 35 || this.wingsLogic == 36)
					{
						this.accRunSpeed = 7f;
					}
					ItemLoader.HorizontalWingSpeeds(this);
				}
				if (this.sticky)
				{
					this.maxRunSpeed *= 0.25f;
					this.runAcceleration *= 0.25f;
					this.runSlowdown *= 2f;
					if (this.velocity.X > this.maxRunSpeed)
					{
						this.velocity.X = this.maxRunSpeed;
					}
					if (this.velocity.X < -this.maxRunSpeed)
					{
						this.velocity.X = -this.maxRunSpeed;
					}
				}
				else if (this.powerrun)
				{
					this.maxRunSpeed *= 3.5f;
					this.runAcceleration *= 1f;
					this.runSlowdown *= 2f;
				}
				else if (this.slippy2)
				{
					this.runAcceleration *= 0.6f;
					this.runSlowdown = 0f;
					if (this.iceSkate)
					{
						this.runAcceleration *= 3.5f;
						this.maxRunSpeed *= 1.25f;
					}
				}
				else if (this.slippy)
				{
					this.runAcceleration *= 0.7f;
					if (this.iceSkate)
					{
						this.runAcceleration *= 3.5f;
						this.maxRunSpeed *= 1.25f;
					}
					else
					{
						this.runSlowdown *= 0.1f;
					}
				}
				if (this.sandStorm)
				{
					this.runAcceleration *= 1.5f;
					this.maxRunSpeed *= 2f;
				}
				if (this.dJumpEffectBlizzard && this.doubleJumpBlizzard)
				{
					this.runAcceleration *= 3f;
					this.maxRunSpeed *= 1.5f;
				}
				if (this.dJumpEffectFart && this.doubleJumpFart)
				{
					this.runAcceleration *= 3f;
					this.maxRunSpeed *= 1.75f;
				}
				if (this.dJumpEffectUnicorn && this.doubleJumpUnicorn)
				{
					this.runAcceleration *= 3f;
					this.maxRunSpeed *= 1.5f;
				}
				if (this.dJumpEffectSail && this.doubleJumpSail)
				{
					this.runAcceleration *= 1.5f;
					this.maxRunSpeed *= 1.25f;
				}
				if (this.carpetFrame != -1)
				{
					this.runAcceleration *= 1.25f;
					this.maxRunSpeed *= 1.5f;
				}
				if (this.inventory[this.selectedItem].type == 3106 && this.stealth < 1f)
				{
					float num46 = this.maxRunSpeed / 2f * (1f - this.stealth);
					this.maxRunSpeed -= num46;
					this.accRunSpeed = this.maxRunSpeed;
				}
				if (this.mount.Active)
				{
					this.rocketBoots = 0;
					this.wings = 0;
					this.wingsLogic = 0;
					this.maxRunSpeed = this.mount.RunSpeed;
					this.accRunSpeed = this.mount.DashSpeed;
					this.runAcceleration = this.mount.Acceleration;
					if (this.mount.Type == 12 && !this.MountFishronSpecial)
					{
						this.runAcceleration /= 2f;
						this.maxRunSpeed /= 2f;
					}
					this.mount.AbilityRecovery();
					if (this.mount.Cart && this.velocity.Y == 0f)
					{
						if (!Minecart.OnTrack(this.position, this.width, this.height))
						{
							this.fullRotation = 0f;
							this.onWrongGround = true;
							this.runSlowdown = 0.2f;
							if ((this.controlLeft && this.releaseLeft) || (this.controlRight && this.releaseRight))
							{
								this.mount.Dismount(this);
							}
						}
						else
						{
							this.runSlowdown = this.runAcceleration;
							this.onWrongGround = false;
						}
					}
					if (this.mount.Type == 8)
					{
						this.mount.UpdateDrill(this, this.controlUp, this.controlDown);
					}
				}
				PlayerHooks.PostUpdateRunSpeeds(this);
				this.HorizontalMovement();
				if (this.gravControl)
				{
					if (this.controlUp && this.releaseUp)
					{
						if (this.gravDir == 1f)
						{
							this.gravDir = -1f;
							this.fallStart = (int)(this.position.Y / 16f);
							this.jump = 0;
							Main.PlaySound(SoundID.Item8, this.position);
						}
						else
						{
							this.gravDir = 1f;
							this.fallStart = (int)(this.position.Y / 16f);
							this.jump = 0;
							Main.PlaySound(SoundID.Item8, this.position);
						}
					}
				}
				else if (this.gravControl2)
				{
					if (this.controlUp && this.releaseUp && this.velocity.Y == 0f)
					{
						if (this.gravDir == 1f)
						{
							this.gravDir = -1f;
							this.fallStart = (int)(this.position.Y / 16f);
							this.jump = 0;
							Main.PlaySound(SoundID.Item8, this.position);
						}
						else
						{
							this.gravDir = 1f;
							this.fallStart = (int)(this.position.Y / 16f);
							this.jump = 0;
							Main.PlaySound(SoundID.Item8, this.position);
						}
					}
				}
				else
				{
					this.gravDir = 1f;
				}
				if (this.velocity.Y == 0f && this.mount.Active && this.mount.CanHover && this.controlUp && this.releaseUp)
				{
					this.velocity.Y = -(this.mount.Acceleration + this.gravity + 0.001f);
				}
				if (this.controlUp)
				{
					this.releaseUp = false;
				}
				else
				{
					this.releaseUp = true;
				}
				this.sandStorm = false;
				this.JumpMovement();
				if (this.wingsLogic == 0)
				{
					this.wingTime = 0f;
				}
				if (this.rocketBoots == 0)
				{
					this.rocketTime = 0;
				}
				if (this.jump == 0)
				{
					this.dJumpEffectCloud = false;
					this.dJumpEffectSandstorm = false;
					this.dJumpEffectBlizzard = false;
					this.dJumpEffectFart = false;
					this.dJumpEffectSail = false;
					this.dJumpEffectUnicorn = false;
				}
				this.DashMovement();
				this.WallslideMovement();
				this.CarpetMovement();
				this.DoubleJumpVisuals();
				if (this.wings > 0 || this.mount.Active)
				{
					this.sandStorm = false;
				}
				if (((this.gravDir == 1f && this.velocity.Y > -Player.jumpSpeed) || (this.gravDir == -1f && this.velocity.Y < Player.jumpSpeed)) && this.velocity.Y != 0f)
				{
					this.canRocket = true;
				}
				bool flag19 = false;
				if (((this.velocity.Y == 0f || this.sliding) && this.releaseJump) || (this.autoJump && this.justJumped))
				{
					this.mount.ResetFlightTime(this.velocity.X);
					this.wingTime = (float)this.wingTimeMax;
				}
				if (this.wingsLogic > 0 && this.controlJump && this.wingTime > 0f && !this.jumpAgainCloud && this.jump == 0 && this.velocity.Y != 0f)
				{
					flag19 = true;
				}
				if ((this.wingsLogic == 22 || this.wingsLogic == 28 || this.wingsLogic == 30 || this.wingsLogic == 32 || this.wingsLogic == 29 || this.wingsLogic == 33 || this.wingsLogic == 35 || this.wingsLogic == 37) && this.controlJump && this.controlDown && this.wingTime > 0f)
				{
					flag19 = true;
				}
				if (this.frozen || this.webbed || this.stoned)
				{
					if (this.mount.Active)
					{
						this.mount.Dismount(this);
					}
					this.velocity.Y = this.velocity.Y + this.gravity;
					if (this.velocity.Y > this.maxFallSpeed)
					{
						this.velocity.Y = this.maxFallSpeed;
					}
					this.sandStorm = false;
					this.dJumpEffectCloud = false;
					this.dJumpEffectSandstorm = false;
					this.dJumpEffectBlizzard = false;
					this.dJumpEffectFart = false;
					this.dJumpEffectSail = false;
					this.dJumpEffectUnicorn = false;
				}
				else
				{
					bool isCustomWings = ItemLoader.WingUpdate(this, flag19);
					if (flag19)
					{
						if (this.wings == 10 && Main.rand.Next(2) == 0)
						{
							int num47 = 4;
							if (this.direction == 1)
							{
								num47 = -40;
							}
							int num48 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num47, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 76, 0f, 0f, 50, default(Color), 0.6f);
							Main.dust[num48].fadeIn = 1.1f;
							Main.dust[num48].noGravity = true;
							Main.dust[num48].noLight = true;
							Main.dust[num48].velocity *= 0.3f;
							Main.dust[num48].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
						}
						if (this.wings == 34 && Main.rand.Next(2) == 0)
						{
							int num49 = 4;
							if (this.direction == 1)
							{
								num49 = -40;
							}
							int num50 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num49, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 261, 0f, 0f, 50, default(Color), 0.6f);
							Main.dust[num50].fadeIn = 1.1f;
							Main.dust[num50].noGravity = true;
							Main.dust[num50].noLight = true;
							Main.dust[num50].velocity *= 0.3f;
							Main.dust[num50].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
						}
						if (this.wings == 9 && Main.rand.Next(2) == 0)
						{
							int num51 = 4;
							if (this.direction == 1)
							{
								num51 = -40;
							}
							int num52 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num51, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 6, 0f, 0f, 200, default(Color), 2f);
							Main.dust[num52].noGravity = true;
							Main.dust[num52].velocity *= 0.3f;
							Main.dust[num52].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
						}
						if (this.wings == 6 && Main.rand.Next(4) == 0)
						{
							int num53 = 4;
							if (this.direction == 1)
							{
								num53 = -40;
							}
							int num54 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num53, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 55, 0f, 0f, 200, default(Color), 1f);
							Main.dust[num54].velocity *= 0.3f;
							Main.dust[num54].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
						}
						if (this.wings == 5 && Main.rand.Next(3) == 0)
						{
							int num55 = 6;
							if (this.direction == 1)
							{
								num55 = -30;
							}
							int num56 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num55, this.position.Y), 18, this.height, 58, 0f, 0f, 255, default(Color), 1.2f);
							Main.dust[num56].velocity *= 0.3f;
							Main.dust[num56].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
						}
						if (this.wings == 26)
						{
							int num57 = 6;
							if (this.direction == 1)
							{
								num57 = -30;
							}
							int num58 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num57, this.position.Y), 18, this.height, 217, 0f, 0f, 100, default(Color), 1.4f);
							Main.dust[num58].noGravity = true;
							Main.dust[num58].noLight = true;
							Main.dust[num58].velocity /= 4f;
							Main.dust[num58].velocity -= this.velocity;
							Main.dust[num58].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
							if (Main.rand.Next(2) == 0)
							{
								num57 = -24;
								if (this.direction == 1)
								{
									num57 = 12;
								}
								float num59 = this.position.Y;
								if (this.gravDir == -1f)
								{
									num59 += (float)(this.height / 2);
								}
								num58 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num57, num59), 12, this.height / 2, 217, 0f, 0f, 100, default(Color), 1.4f);
								Main.dust[num58].noGravity = true;
								Main.dust[num58].noLight = true;
								Main.dust[num58].velocity /= 4f;
								Main.dust[num58].velocity -= this.velocity;
								Main.dust[num58].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
							}
						}
						if (this.wings == 37)
						{
							int num60 = 6;
							if (this.direction == 1)
							{
								num60 = -30;
							}
							Dust dust3 = Dust.NewDustDirect(new Vector2(this.position.X + (float)(this.width / 2) + (float)num60, this.position.Y), 24, this.height, Utils.SelectRandom<int>(Main.rand, new int[]
									{
										31,
										31,
										31
									}), 0f, 0f, 100, default(Color), 1f);
							dust3.noGravity = true;
							dust3.noLight = true;
							dust3.velocity /= 4f;
							dust3.velocity -= this.velocity / 2f;
							dust3.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
							if (dust3.type == 55)
							{
								dust3.noGravity = true;
								dust3.velocity *= 2f;
								dust3.color = Color.Red;
							}
							if (Main.rand.Next(3) == 0)
							{
								num60 = -24;
								if (this.direction == 1)
								{
									num60 = 12;
								}
								float num61 = this.position.Y;
								if (this.gravDir == -1f)
								{
									num61 += (float)(this.height / 2);
								}
								dust3 = Dust.NewDustDirect(new Vector2(this.position.X + (float)(this.width / 2) + (float)num60, num61), 16, this.height / 2, Utils.SelectRandom<int>(Main.rand, new int[]
										{
											31,
											31,
											31
										}), 0f, 0f, 100, default(Color), 1f);
								dust3.noGravity = true;
								dust3.noLight = true;
								dust3.velocity /= 4f;
								dust3.velocity -= this.velocity / 2f;
								dust3.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
								if (dust3.type == 55)
								{
									dust3.noGravity = true;
									dust3.velocity *= 2f;
									dust3.color = Color.Red;
								}
							}
						}
						if (this.wings == 29 && Main.rand.Next(3) == 0)
						{
							int num62 = 4;
							if (this.direction == 1)
							{
								num62 = -40;
							}
							int num63 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num62, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 6, 0f, 0f, 100, default(Color), 2.4f);
							Main.dust[num63].noGravity = true;
							Main.dust[num63].velocity *= 0.3f;
							if (Main.rand.Next(10) == 0)
							{
								Main.dust[num63].fadeIn = 2f;
							}
							Main.dust[num63].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
						}
						if (this.wings == 31)
						{
							if (Main.rand.Next(6) == 0)
							{
								int num64 = 4;
								if (this.direction == 1)
								{
									num64 = -40;
								}
								Dust dust4 = Main.dust[Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num64, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 86, 0f, 0f, 0, default(Color), 1f)];
								dust4.noGravity = true;
								dust4.scale = 1f;
								dust4.fadeIn = 1.2f;
								dust4.velocity *= 0.2f;
								dust4.noLight = true;
								dust4.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
							}
							if (Main.rand.Next(3) == 0)
							{
								int num65 = 4;
								if (this.direction == 1)
								{
									num65 = -40;
								}
								Dust dust5 = Main.dust[Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num65, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 240, 0f, 0f, 0, default(Color), 1f)];
								dust5.noGravity = true;
								dust5.scale = 1.2f;
								dust5.velocity *= 0.2f;
								dust5.alpha = 200;
								dust5.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
							}
							if (Main.rand.Next(2) == 0)
							{
								if (Main.rand.Next(6) == 0)
								{
									int num66 = -24;
									if (this.direction == 1)
									{
										num66 = 12;
									}
									float num67 = this.position.Y;
									if (this.gravDir == -1f)
									{
										num67 += (float)(this.height / 2);
									}
									Dust dust6 = Main.dust[Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num66, num67), 12, this.height / 2, 86, 0f, 0f, 0, default(Color), 1f)];
									dust6.noGravity = true;
									dust6.scale = 1f;
									dust6.fadeIn = 1.2f;
									dust6.velocity *= 0.2f;
									dust6.noLight = true;
									dust6.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
								}
								if (Main.rand.Next(3) == 0)
								{
									int num66 = -24;
									if (this.direction == 1)
									{
										num66 = 12;
									}
									float num68 = this.position.Y;
									if (this.gravDir == -1f)
									{
										num68 += (float)(this.height / 2);
									}
									Dust dust7 = Main.dust[Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num66, num68), 12, this.height / 2, 240, 0f, 0f, 0, default(Color), 1f)];
									dust7.noGravity = true;
									dust7.scale = 1.2f;
									dust7.velocity *= 0.2f;
									dust7.alpha = 200;
									dust7.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
								}
							}
						}
						this.WingMovement();
					}
					if (this.wings == 4)
					{
						if (flag19 || this.jump > 0)
						{
							this.rocketDelay2--;
							if (this.rocketDelay2 <= 0)
							{
								Main.PlaySound(SoundID.Item13, this.position);
								this.rocketDelay2 = 60;
							}
							int num69 = 2;
							if (this.controlUp)
							{
								num69 = 4;
							}
							for (int num70 = 0; num70 < num69; num70++)
							{
								int type = 6;
								if (this.head == 41)
								{
									int arg_599C_0 = this.body;
								}
								float scale = 1.75f;
								int alpha = 100;
								float x3 = this.position.X + (float)(this.width / 2) + 16f;
								if (this.direction > 0)
								{
									x3 = this.position.X + (float)(this.width / 2) - 26f;
								}
								float num71 = this.position.Y + (float)this.height - 18f;
								if (num70 == 1 || num70 == 3)
								{
									x3 = this.position.X + (float)(this.width / 2) + 8f;
									if (this.direction > 0)
									{
										x3 = this.position.X + (float)(this.width / 2) - 20f;
									}
									num71 += 6f;
								}
								if (num70 > 1)
								{
									num71 += this.velocity.Y;
								}
								int num72 = Dust.NewDust(new Vector2(x3, num71), 8, 8, type, 0f, 0f, alpha, default(Color), scale);
								Dust expr_5AAB_cp_0 = Main.dust[num72];
								expr_5AAB_cp_0.velocity.X = expr_5AAB_cp_0.velocity.X * 0.1f;
								Main.dust[num72].velocity.Y = Main.dust[num72].velocity.Y * 1f + 2f * this.gravDir - this.velocity.Y * 0.3f;
								Main.dust[num72].noGravity = true;
								Main.dust[num72].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
								if (num69 == 4)
								{
									Dust expr_5B43_cp_0 = Main.dust[num72];
									expr_5B43_cp_0.velocity.Y = expr_5B43_cp_0.velocity.Y + 6f;
								}
							}
							this.wingFrameCounter++;
							if (this.wingFrameCounter > 4)
							{
								this.wingFrame++;
								this.wingFrameCounter = 0;
								if (this.wingFrame >= 3)
								{
									this.wingFrame = 0;
								}
							}
						}
						else if (!this.controlJump || this.velocity.Y == 0f)
						{
							this.wingFrame = 3;
						}
					}
					else if (this.wings == 28)
					{
						if (this.velocity.Y != 0f)
						{
							Lighting.AddLight(base.Bottom, 0.3f, 0.1f, 0.4f);
						}
					}
					else if (this.wings == 22)
					{
						if (!this.controlJump)
						{
							this.wingFrame = 0;
							this.wingFrameCounter = 0;
						}
						else if (this.wingTime > 0f)
						{
							if (this.controlDown)
							{
								if (this.velocity.X != 0f)
								{
									this.wingFrameCounter++;
									int num73 = 2;
									if (this.wingFrameCounter < num73)
									{
										this.wingFrame = 1;
									}
									else if (this.wingFrameCounter < num73 * 2)
									{
										this.wingFrame = 2;
									}
									else if (this.wingFrameCounter < num73 * 3)
									{
										this.wingFrame = 3;
									}
									else if (this.wingFrameCounter < num73 * 4 - 1)
									{
										this.wingFrame = 2;
									}
									else
									{
										this.wingFrame = 2;
										this.wingFrameCounter = 0;
									}
								}
								else
								{
									this.wingFrameCounter++;
									int num74 = 6;
									if (this.wingFrameCounter < num74)
									{
										this.wingFrame = 4;
									}
									else if (this.wingFrameCounter < num74 * 2)
									{
										this.wingFrame = 5;
									}
									else if (this.wingFrameCounter < num74 * 3 - 1)
									{
										this.wingFrame = 4;
									}
									else
									{
										this.wingFrame = 4;
										this.wingFrameCounter = 0;
									}
								}
							}
							else
							{
								this.wingFrameCounter++;
								int num75 = 2;
								if (this.wingFrameCounter < num75)
								{
									this.wingFrame = 4;
								}
								else if (this.wingFrameCounter < num75 * 2)
								{
									this.wingFrame = 5;
								}
								else if (this.wingFrameCounter < num75 * 3)
								{
									this.wingFrame = 6;
								}
								else if (this.wingFrameCounter < num75 * 4 - 1)
								{
									this.wingFrame = 5;
								}
								else
								{
									this.wingFrame = 5;
									this.wingFrameCounter = 0;
								}
							}
						}
						else
						{
							this.wingFrameCounter++;
							int num76 = 6;
							if (this.wingFrameCounter < num76)
							{
								this.wingFrame = 4;
							}
							else if (this.wingFrameCounter < num76 * 2)
							{
								this.wingFrame = 5;
							}
							else if (this.wingFrameCounter < num76 * 3 - 1)
							{
								this.wingFrame = 4;
							}
							else
							{
								this.wingFrame = 4;
								this.wingFrameCounter = 0;
							}
						}
					}
					else if (this.wings == 12)
					{
						if (flag19 || this.jump > 0)
						{
							this.wingFrameCounter++;
							int num77 = 5;
							if (this.wingFrameCounter < num77)
							{
								this.wingFrame = 1;
							}
							else if (this.wingFrameCounter < num77 * 2)
							{
								this.wingFrame = 2;
							}
							else if (this.wingFrameCounter < num77 * 3)
							{
								this.wingFrame = 3;
							}
							else if (this.wingFrameCounter < num77 * 4 - 1)
							{
								this.wingFrame = 2;
							}
							else
							{
								this.wingFrame = 2;
								this.wingFrameCounter = 0;
							}
						}
						else if (this.velocity.Y != 0f)
						{
							this.wingFrame = 2;
						}
						else
						{
							this.wingFrame = 0;
						}
					}
					else if (this.wings == 24)
					{
						if (flag19 || this.jump > 0)
						{
							this.wingFrameCounter++;
							int num78 = 1;
							if (this.wingFrameCounter < num78)
							{
								this.wingFrame = 1;
							}
							else if (this.wingFrameCounter < num78 * 2)
							{
								this.wingFrame = 2;
							}
							else if (this.wingFrameCounter < num78 * 3)
							{
								this.wingFrame = 3;
							}
							else
							{
								this.wingFrame = 2;
								if (this.wingFrameCounter >= num78 * 4 - 1)
								{
									this.wingFrameCounter = 0;
								}
							}
						}
						else if (this.velocity.Y != 0f)
						{
							if (this.controlJump)
							{
								this.wingFrameCounter++;
								int num79 = 3;
								if (this.wingFrameCounter < num79)
								{
									this.wingFrame = 1;
								}
								else if (this.wingFrameCounter < num79 * 2)
								{
									this.wingFrame = 2;
								}
								else if (this.wingFrameCounter < num79 * 3)
								{
									this.wingFrame = 3;
								}
								else
								{
									this.wingFrame = 2;
									if (this.wingFrameCounter >= num79 * 4 - 1)
									{
										this.wingFrameCounter = 0;
									}
								}
							}
							else if (this.wingTime == 0f)
							{
								this.wingFrame = 0;
							}
							else
							{
								this.wingFrame = 1;
							}
						}
						else
						{
							this.wingFrame = 0;
						}
					}
					else if (this.wings == 30)
					{
						bool flag20 = false;
						if (flag19 || this.jump > 0)
						{
							this.wingFrameCounter++;
							int num80 = 2;
							if (this.wingFrameCounter >= num80 * 3)
							{
								this.wingFrameCounter = 0;
							}
							this.wingFrame = 1 + this.wingFrameCounter / num80;
							flag20 = true;
						}
						else if (this.velocity.Y != 0f)
						{
							if (this.controlJump)
							{
								this.wingFrameCounter++;
								int num81 = 2;
								if (this.wingFrameCounter >= num81 * 3)
								{
									this.wingFrameCounter = 0;
								}
								this.wingFrame = 1 + this.wingFrameCounter / num81;
								flag20 = true;
							}
							else if (this.wingTime == 0f)
							{
								this.wingFrame = 0;
							}
							else
							{
								this.wingFrame = 0;
							}
						}
						else
						{
							this.wingFrame = 0;
						}
						if (flag20)
						{
							for (int num82 = 0; num82 < 4; num82++)
							{
								if (Main.rand.Next(4) == 0)
								{
									Vector2 value = (-0.745398164f + 0.3926991f * (float)num82 + 0.03f * (float)num82).ToRotationVector2() * new Vector2((float)(-(float)this.direction * 20), 20f);
									Dust dust8 = Main.dust[Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, Color.White, 0.8f)];
									dust8.noGravity = true;
									dust8.position = base.Center + value;
									dust8.velocity = base.DirectionTo(dust8.position) * 2f;
									if (Main.rand.Next(10) != 0)
									{
										dust8.customData = this;
									}
									else
									{
										dust8.fadeIn = 0.5f;
									}
									dust8.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
								}
							}
							for (int num83 = 0; num83 < 4; num83++)
							{
								if (Main.rand.Next(8) == 0)
								{
									Vector2 value2 = (-0.7053982f + 0.3926991f * (float)num83 + 0.03f * (float)num83).ToRotationVector2() * new Vector2((float)(this.direction * 20), 24f) + new Vector2((float)(-(float)this.direction) * 16f, 0f);
									Dust dust9 = Main.dust[Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, Color.White, 0.5f)];
									dust9.noGravity = true;
									dust9.position = base.Center + value2;
									dust9.velocity = Vector2.Normalize(dust9.position - base.Center - new Vector2((float)(-(float)this.direction) * 16f, 0f)) * 2f;
									dust9.position += dust9.velocity * 5f;
									if (Main.rand.Next(10) != 0)
									{
										dust9.customData = this;
									}
									else
									{
										dust9.fadeIn = 0.5f;
									}
									dust9.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
								}
							}
						}
					}
					else if (this.wings == 34)
					{
						if (flag19 || this.jump > 0)
						{
							this.wingFrameCounter++;
							int num84 = 4;
							if (this.wingFrameCounter >= num84 * 6)
							{
								this.wingFrameCounter = 0;
							}
							this.wingFrame = this.wingFrameCounter / num84;
						}
						else if (this.velocity.Y != 0f)
						{
							if (this.controlJump)
							{
								this.wingFrameCounter++;
								int num85 = 9;
								if (this.wingFrameCounter >= num85 * 6)
								{
									this.wingFrameCounter = 0;
								}
								this.wingFrame = this.wingFrameCounter / num85;
							}
							else
							{
								this.wingFrameCounter++;
								int num86 = 6;
								if (this.wingFrameCounter >= num86 * 6)
								{
									this.wingFrameCounter = 0;
								}
								this.wingFrame = this.wingFrameCounter / num86;
							}
						}
						else
						{
							this.wingFrameCounter++;
							int num87 = 4;
							if (this.wingFrameCounter >= num87 * 6)
							{
								this.wingFrameCounter = 0;
							}
							this.wingFrame = this.wingFrameCounter / num87;
						}
					}
					else if (this.wings == 33)
					{
						bool flag21 = false;
						if (flag19 || this.jump > 0)
						{
							flag21 = true;
						}
						else if (this.velocity.Y != 0f && this.controlJump)
						{
							flag21 = true;
						}
						if (flag21)
						{
							Color newColor = Main.hslToRgb(Main.rgbToHsl(this.eyeColor).X, 1f, 0.5f);
							int num88 = (this.direction == 1) ? 0 : -4;
							int num89 = (this.gravDir == 1f) ? this.height : 0;
							for (int num90 = 0; num90 < 2; num90++)
							{
								Dust dust10 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 182, this.velocity.X, this.velocity.Y, 127, newColor, 1f)];
								dust10.noGravity = true;
								dust10.fadeIn = 1f;
								dust10.scale = 1f;
								dust10.noLight = true;
								if (num90 == 0)
								{
									dust10.position = new Vector2(this.position.X + (float)num88, this.position.Y + (float)num89);
									dust10.velocity.X = dust10.velocity.X * 1f - 2f - this.velocity.X * 0.3f;
									dust10.velocity.Y = dust10.velocity.Y * 1f + 2f * this.gravDir - this.velocity.Y * 0.3f;
								}
								else if (num90 == 1)
								{
									dust10.position = new Vector2(this.position.X + (float)this.width + (float)num88, this.position.Y + (float)num89);
									dust10.velocity.X = dust10.velocity.X * 1f + 2f - this.velocity.X * 0.3f;
									dust10.velocity.Y = dust10.velocity.Y * 1f + 2f * this.gravDir - this.velocity.Y * 0.3f;
								}
								Dust dust11 = Dust.CloneDust(dust10);
								dust11.scale *= 0.65f;
								dust11.fadeIn *= 0.65f;
								dust11.color = new Color(255, 255, 255, 255);
								dust10.noLight = true;
								dust10.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
							}
						}
					}
					else if (!isCustomWings)
					{
						int num91 = 4;
						if (this.wings == 32)
						{
							num91 = 3;
						}
						if (flag19 || this.jump > 0)
						{
							this.wingFrameCounter++;
							if (this.wingFrameCounter > num91)
							{
								this.wingFrame++;
								this.wingFrameCounter = 0;
								if (this.wingFrame >= 4)
								{
									this.wingFrame = 0;
								}
							}
						}
						else if (this.velocity.Y != 0f)
						{
							this.wingFrame = 1;
							if (this.wings == 32)
							{
								this.wingFrame = 3;
							}
							if (this.wings == 29 && Main.rand.Next(5) == 0)
							{
								int num92 = 4;
								if (this.direction == 1)
								{
									num92 = -40;
								}
								int num93 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num92, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 6, 0f, 0f, 100, default(Color), 2.4f);
								Main.dust[num93].noGravity = true;
								Main.dust[num93].velocity *= 0.3f;
								if (Main.rand.Next(10) == 0)
								{
									Main.dust[num93].fadeIn = 2f;
								}
								Main.dust[num93].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
							}
						}
						else
						{
							this.wingFrame = 0;
						}
					}
					if (this.wingsLogic > 0 && this.rocketBoots > 0 && this.velocity.Y != 0f)
					{
						int num94 = 6;
						this.wingTime += (float)(this.rocketTime * num94);
						if (this.wingTime > (float)(this.wingTimeMax + this.rocketTimeMax * num94))
						{
							this.wingTime = (float)(this.wingTimeMax + this.rocketTimeMax * num94);
						}
						this.rocketTime = 0;
					}
					if (flag19 && this.wings != 4 && this.wings != 22 && this.wings != 0 && this.wings != 24 && this.wings != 28 && this.wings != 30 && this.wings != 33 && !isCustomWings)
					{
						if (this.wingFrame == 3)
						{
							if (!this.flapSound)
							{
								Main.PlaySound(SoundID.Item32, this.position);
							}
							this.flapSound = true;
						}
						else
						{
							this.flapSound = false;
						}
					}
					if (this.velocity.Y == 0f || this.sliding || (this.autoJump && this.justJumped))
					{
						this.rocketTime = this.rocketTimeMax;
					}
					if ((this.wingTime == 0f || this.wingsLogic == 0) && this.rocketBoots > 0 && this.controlJump && this.rocketDelay == 0 && this.canRocket && this.rocketRelease && !this.jumpAgainCloud)
					{
						if (this.rocketTime > 0)
						{
							this.rocketTime--;
							this.rocketDelay = 10;
							if (this.rocketDelay2 <= 0)
							{
								if (this.rocketBoots == 1)
								{
									Main.PlaySound(SoundID.Item13, this.position);
									this.rocketDelay2 = 30;
								}
								else if (this.rocketBoots == 2 || this.rocketBoots == 3)
								{
									Main.PlaySound(SoundID.Item24, this.position);
									this.rocketDelay2 = 15;
								}
							}
						}
						else
						{
							this.canRocket = false;
						}
					}
					if (this.rocketDelay2 > 0)
					{
						this.rocketDelay2--;
					}
					if (this.rocketDelay == 0)
					{
						this.rocketFrame = false;
					}
					if (this.rocketDelay > 0)
					{
						int num95 = this.height;
						if (this.gravDir == -1f)
						{
							num95 = 4;
						}
						this.rocketFrame = true;
						for (int num96 = 0; num96 < 2; num96++)
						{
							int type2 = 6;
							float scale2 = 2.5f;
							int alpha2 = 100;
							if (this.rocketBoots == 2)
							{
								type2 = 16;
								scale2 = 1.5f;
								alpha2 = 20;
							}
							else if (this.rocketBoots == 3)
							{
								type2 = 76;
								scale2 = 1f;
								alpha2 = 20;
							}
							else if (this.socialShadowRocketBoots)
							{
								type2 = 27;
								scale2 = 1.5f;
							}
							if (num96 == 0)
							{
								int num97 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y + (float)num95 - 10f), 8, 8, type2, 0f, 0f, alpha2, default(Color), scale2);
								Main.dust[num97].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
								if (this.rocketBoots == 1)
								{
									Main.dust[num97].noGravity = true;
								}
								Main.dust[num97].velocity.X = Main.dust[num97].velocity.X * 1f - 2f - this.velocity.X * 0.3f;
								Main.dust[num97].velocity.Y = Main.dust[num97].velocity.Y * 1f + 2f * this.gravDir - this.velocity.Y * 0.3f;
								if (this.rocketBoots == 2)
								{
									Main.dust[num97].velocity *= 0.1f;
								}
								if (this.rocketBoots == 3)
								{
									Main.dust[num97].velocity *= 0.05f;
									Dust expr_6D5F_cp_0 = Main.dust[num97];
									expr_6D5F_cp_0.velocity.Y = expr_6D5F_cp_0.velocity.Y + 0.15f;
									Main.dust[num97].noLight = true;
									if (Main.rand.Next(2) == 0)
									{
										Main.dust[num97].noGravity = true;
										Main.dust[num97].scale = 1.75f;
									}
								}
							}
							else
							{
								int num98 = Dust.NewDust(new Vector2(this.position.X + (float)this.width - 4f, this.position.Y + (float)num95 - 10f), 8, 8, type2, 0f, 0f, alpha2, default(Color), scale2);
								Main.dust[num98].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
								if (this.rocketBoots == 1)
								{
									Main.dust[num98].noGravity = true;
								}
								Main.dust[num98].velocity.X = Main.dust[num98].velocity.X * 1f + 2f - this.velocity.X * 0.3f;
								Main.dust[num98].velocity.Y = Main.dust[num98].velocity.Y * 1f + 2f * this.gravDir - this.velocity.Y * 0.3f;
								if (this.rocketBoots == 2)
								{
									Main.dust[num98].velocity *= 0.1f;
								}
								if (this.rocketBoots == 3)
								{
									Main.dust[num98].velocity *= 0.05f;
									Dust expr_6F22_cp_0 = Main.dust[num98];
									expr_6F22_cp_0.velocity.Y = expr_6F22_cp_0.velocity.Y + 0.15f;
									Main.dust[num98].noLight = true;
									if (Main.rand.Next(2) == 0)
									{
										Main.dust[num98].noGravity = true;
										Main.dust[num98].scale = 1.75f;
									}
								}
							}
						}
						if (this.rocketDelay == 0)
						{
							this.releaseJump = true;
						}
						this.rocketDelay--;
						this.velocity.Y = this.velocity.Y - 0.1f * this.gravDir;
						if (this.gravDir == 1f)
						{
							if (this.velocity.Y > 0f)
							{
								this.velocity.Y = this.velocity.Y - 0.5f;
							}
							else if ((double)this.velocity.Y > (double)(-(double)Player.jumpSpeed) * 0.5)
							{
								this.velocity.Y = this.velocity.Y - 0.1f;
							}
							if (this.velocity.Y < -Player.jumpSpeed * 1.5f)
							{
								this.velocity.Y = -Player.jumpSpeed * 1.5f;
							}
						}
						else
						{
							if (this.velocity.Y < 0f)
							{
								this.velocity.Y = this.velocity.Y + 0.5f;
							}
							else if ((double)this.velocity.Y < (double)Player.jumpSpeed * 0.5)
							{
								this.velocity.Y = this.velocity.Y + 0.1f;
							}
							if (this.velocity.Y > Player.jumpSpeed * 1.5f)
							{
								this.velocity.Y = Player.jumpSpeed * 1.5f;
							}
						}
					}
					else if (!flag19)
					{
						if (this.mount.CanHover)
						{
							this.mount.Hover(this);
						}
						else if (this.mount.CanFly && this.controlJump && this.jump == 0)
						{
							if (this.mount.Flight())
							{
								if (this.controlDown)
								{
									this.velocity.Y = this.velocity.Y * 0.9f;
									if (this.velocity.Y > -1f && (double)this.velocity.Y < 0.5)
									{
										this.velocity.Y = 1E-05f;
									}
								}
								else
								{
									if (this.velocity.Y > 0f)
									{
										this.velocity.Y = this.velocity.Y - 0.5f;
									}
									else if ((double)this.velocity.Y > (double)(-(double)Player.jumpSpeed) * 1.5)
									{
										this.velocity.Y = this.velocity.Y - 0.1f;
									}
									if (this.velocity.Y < -Player.jumpSpeed * 1.5f)
									{
										this.velocity.Y = -Player.jumpSpeed * 1.5f;
									}
								}
							}
							else
							{
								this.velocity.Y = this.velocity.Y + this.gravity / 3f * this.gravDir;
								if (this.gravDir == 1f)
								{
									if (this.velocity.Y > this.maxFallSpeed / 3f && !this.controlDown)
									{
										this.velocity.Y = this.maxFallSpeed / 3f;
									}
								}
								else if (this.velocity.Y < -this.maxFallSpeed / 3f && !this.controlUp)
								{
									this.velocity.Y = -this.maxFallSpeed / 3f;
								}
							}
						}
						else if (this.slowFall && ((!this.controlDown && this.gravDir == 1f) || (!this.controlDown && this.gravDir == -1f)))
						{
							if ((this.controlUp && this.gravDir == 1f) || (this.controlUp && this.gravDir == -1f))
							{
								this.gravity = this.gravity / 10f * this.gravDir;
							}
							else
							{
								this.gravity = this.gravity / 3f * this.gravDir;
							}
							this.velocity.Y = this.velocity.Y + this.gravity;
						}
						else if (this.wingsLogic > 0 && this.controlJump && this.velocity.Y > 0f)
						{
							this.fallStart = (int)(this.position.Y / 16f);
							if (this.velocity.Y > 0f)
							{
								if (this.wings == 10 && Main.rand.Next(3) == 0)
								{
									int num99 = 4;
									if (this.direction == 1)
									{
										num99 = -40;
									}
									int num100 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num99, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 76, 0f, 0f, 50, default(Color), 0.6f);
									Main.dust[num100].fadeIn = 1.1f;
									Main.dust[num100].noGravity = true;
									Main.dust[num100].noLight = true;
									Main.dust[num100].velocity *= 0.3f;
									Main.dust[num100].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
								}
								if (this.wings == 34 && Main.rand.Next(3) == 0)
								{
									int num101 = 4;
									if (this.direction == 1)
									{
										num101 = -40;
									}
									int num102 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num101, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 261, 0f, 0f, 50, default(Color), 0.6f);
									Main.dust[num102].fadeIn = 1.1f;
									Main.dust[num102].noGravity = true;
									Main.dust[num102].noLight = true;
									Main.dust[num102].velocity *= 0.3f;
									Main.dust[num102].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
								}
								if (this.wings == 9 && Main.rand.Next(3) == 0)
								{
									int num103 = 8;
									if (this.direction == 1)
									{
										num103 = -40;
									}
									int num104 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num103, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 6, 0f, 0f, 200, default(Color), 2f);
									Main.dust[num104].noGravity = true;
									Main.dust[num104].velocity *= 0.3f;
									Main.dust[num104].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
								}
								if (this.wings == 29 && Main.rand.Next(3) == 0)
								{
									int num105 = 8;
									if (this.direction == 1)
									{
										num105 = -40;
									}
									int num106 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num105, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 6, 0f, 0f, 100, default(Color), 2.4f);
									Main.dust[num106].noGravity = true;
									Main.dust[num106].velocity *= 0.3f;
									if (Main.rand.Next(10) == 0)
									{
										Main.dust[num106].fadeIn = 2f;
									}
									Main.dust[num106].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
								}
								if (this.wings == 6)
								{
									if (Main.rand.Next(10) == 0)
									{
										int num107 = 4;
										if (this.direction == 1)
										{
											num107 = -40;
										}
										int num108 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num107, this.position.Y + (float)(this.height / 2) - 12f), 30, 20, 55, 0f, 0f, 200, default(Color), 1f);
										Main.dust[num108].velocity *= 0.3f;
										Main.dust[num108].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
									}
								}
								else if (this.wings == 5 && Main.rand.Next(6) == 0)
								{
									int num109 = 6;
									if (this.direction == 1)
									{
										num109 = -30;
									}
									int num110 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num109, this.position.Y), 18, this.height, 58, 0f, 0f, 255, default(Color), 1.2f);
									Main.dust[num110].velocity *= 0.3f;
									Main.dust[num110].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
								}
								if (this.wings == 4)
								{
									this.rocketDelay2--;
									if (this.rocketDelay2 <= 0)
									{
										Main.PlaySound(SoundID.Item13, this.position);
										this.rocketDelay2 = 60;
									}
									int type3 = 6;
									float scale3 = 1.5f;
									int alpha3 = 100;
									float x4 = this.position.X + (float)(this.width / 2) + 16f;
									if (this.direction > 0)
									{
										x4 = this.position.X + (float)(this.width / 2) - 26f;
									}
									float num111 = this.position.Y + (float)this.height - 18f;
									if (Main.rand.Next(2) == 1)
									{
										x4 = this.position.X + (float)(this.width / 2) + 8f;
										if (this.direction > 0)
										{
											x4 = this.position.X + (float)(this.width / 2) - 20f;
										}
										num111 += 6f;
									}
									int num112 = Dust.NewDust(new Vector2(x4, num111), 8, 8, type3, 0f, 0f, alpha3, default(Color), scale3);
									Dust expr_7AA0_cp_0 = Main.dust[num112];
									expr_7AA0_cp_0.velocity.X = expr_7AA0_cp_0.velocity.X * 0.3f;
									Dust expr_7ABE_cp_0 = Main.dust[num112];
									expr_7ABE_cp_0.velocity.Y = expr_7ABE_cp_0.velocity.Y + 10f;
									Main.dust[num112].noGravity = true;
									Main.dust[num112].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
									this.wingFrameCounter++;
									if (this.wingFrameCounter > 4)
									{
										this.wingFrame++;
										this.wingFrameCounter = 0;
										if (this.wingFrame >= 3)
										{
											this.wingFrame = 0;
										}
									}
								}
								else if (this.wings != 22 && this.wings != 28 && !isCustomWings)
								{
									if (this.wings == 30)
									{
										this.wingFrameCounter++;
										int num113 = 5;
										if (this.wingFrameCounter >= num113 * 3)
										{
											this.wingFrameCounter = 0;
										}
										this.wingFrame = 1 + this.wingFrameCounter / num113;
									}
									else if (this.wings == 34)
									{
										this.wingFrameCounter++;
										int num114 = 7;
										if (this.wingFrameCounter >= num114 * 6)
										{
											this.wingFrameCounter = 0;
										}
										this.wingFrame = this.wingFrameCounter / num114;
									}
									else if (this.wings == 26)
									{
										int num115 = 6;
										if (this.direction == 1)
										{
											num115 = -30;
										}
										int num116 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num115, this.position.Y), 18, this.height, 217, 0f, 0f, 100, default(Color), 1.4f);
										Main.dust[num116].noGravity = true;
										Main.dust[num116].noLight = true;
										Main.dust[num116].velocity /= 4f;
										Main.dust[num116].velocity -= this.velocity;
										Main.dust[num116].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
										if (Main.rand.Next(2) == 0)
										{
											num115 = -24;
											if (this.direction == 1)
											{
												num115 = 12;
											}
											float num117 = this.position.Y;
											if (this.gravDir == -1f)
											{
												num117 += (float)(this.height / 2);
											}
											num116 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num115, num117), 12, this.height / 2, 217, 0f, 0f, 100, default(Color), 1.4f);
											Main.dust[num116].noGravity = true;
											Main.dust[num116].noLight = true;
											Main.dust[num116].velocity /= 4f;
											Main.dust[num116].velocity -= this.velocity;
											Main.dust[num116].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
										}
										this.wingFrame = 2;
									}
									else if (this.wings == 37)
									{
										Color color = Color.Lerp(Color.Black, Color.White, Main.rand.NextFloat());
										int num118 = 6;
										if (this.direction == 1)
										{
											num118 = -30;
										}
										int num119 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num118, this.position.Y), 24, this.height, Utils.SelectRandom<int>(Main.rand, new int[]
												{
													31,
													31,
													31
												}), 0f, 0f, 100, default(Color), 0.7f);
										Main.dust[num119].noGravity = true;
										Main.dust[num119].noLight = true;
										Main.dust[num119].velocity /= 4f;
										Main.dust[num119].velocity -= this.velocity;
										Main.dust[num119].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
										if (Main.dust[num119].type == 55)
										{
											Main.dust[num119].color = color;
										}
										if (Main.rand.Next(3) == 0)
										{
											num118 = -24;
											if (this.direction == 1)
											{
												num118 = 12;
											}
											float num120 = this.position.Y;
											if (this.gravDir == -1f)
											{
												num120 += (float)(this.height / 2);
											}
											num119 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num118, num120), 12, this.height / 2, Utils.SelectRandom<int>(Main.rand, new int[]
													{
														31,
														31,
														31
													}), 0f, 0f, 140, default(Color), 0.7f);
											Main.dust[num119].noGravity = true;
											Main.dust[num119].noLight = true;
											Main.dust[num119].velocity /= 4f;
											Main.dust[num119].velocity -= this.velocity;
											Main.dust[num119].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
											if (Main.dust[num119].type == 55)
											{
												Main.dust[num119].color = color;
											}
										}
										this.wingFrame = 2;
									}
									else if (this.wings != 24)
									{
										if (this.wings == 12)
										{
											this.wingFrame = 3;
										}
										else
										{
											this.wingFrame = 2;
										}
									}
								}
							}
							this.velocity.Y = this.velocity.Y + this.gravity / 3f * this.gravDir;
							if (this.gravDir == 1f)
							{
								if (this.velocity.Y > this.maxFallSpeed / 3f && !this.controlDown)
								{
									this.velocity.Y = this.maxFallSpeed / 3f;
								}
							}
							else if (this.velocity.Y < -this.maxFallSpeed / 3f && !this.controlUp)
							{
								this.velocity.Y = -this.maxFallSpeed / 3f;
							}
						}
						else if (this.cartRampTime <= 0)
						{
							this.velocity.Y = this.velocity.Y + this.gravity * this.gravDir;
						}
						else
						{
							this.cartRampTime--;
						}
					}
					if (!this.mount.Active || this.mount.Type != 5)
					{
						if (this.gravDir == 1f)
						{
							if (this.velocity.Y > this.maxFallSpeed)
							{
								this.velocity.Y = this.maxFallSpeed;
							}
							if (this.slowFall && this.velocity.Y > this.maxFallSpeed / 3f && !this.controlDown)
							{
								this.velocity.Y = this.maxFallSpeed / 3f;
							}
							if (this.slowFall && this.velocity.Y > this.maxFallSpeed / 5f && this.controlUp)
							{
								this.velocity.Y = this.maxFallSpeed / 10f;
							}
						}
						else
						{
							if (this.velocity.Y < -this.maxFallSpeed)
							{
								this.velocity.Y = -this.maxFallSpeed;
							}
							if (this.slowFall && this.velocity.Y < -this.maxFallSpeed / 3f && !this.controlDown)
							{
								this.velocity.Y = -this.maxFallSpeed / 3f;
							}
							if (this.slowFall && this.velocity.Y < -this.maxFallSpeed / 5f && this.controlUp)
							{
								this.velocity.Y = -this.maxFallSpeed / 10f;
							}
						}
					}
				}
			}
			if (this.mount.Active)
			{
				this.wingFrame = 0;
			}
			if ((this.wingsLogic == 22 || this.wingsLogic == 28 || this.wingsLogic == 30 || this.wingsLogic == 31 || this.wingsLogic == 33 || this.wingsLogic == 35 || this.wingsLogic == 37) && this.controlDown && this.controlJump && this.wingTime > 0f && !this.merman)
			{
				this.velocity.Y = this.velocity.Y * 0.9f;
				if (this.velocity.Y > -2f && this.velocity.Y < 1f)
				{
					this.velocity.Y = 1E-05f;
				}
			}
			if (this.wingsLogic == 37 && this.controlDown && this.controlJump && this.wingTime > 0f && !this.merman)
			{
				this.velocity.Y = this.velocity.Y * 0.92f;
				if (this.velocity.Y > -2f && this.velocity.Y < 1f)
				{
					this.velocity.Y = 1E-05f;
				}
			}
			this.GrabItems(i);
			this.LookForTileInteractions();
			if (this.tongued)
			{
				bool flag22 = false;
				if (Main.wof >= 0)
				{
					float num121 = Main.npc[Main.wof].position.X + (float)(Main.npc[Main.wof].width / 2);
					num121 += (float)(Main.npc[Main.wof].direction * 200);
					float num122 = Main.npc[Main.wof].position.Y + (float)(Main.npc[Main.wof].height / 2);
					Vector2 center = base.Center;
					float num123 = num121 - center.X;
					float num124 = num122 - center.Y;
					float num125 = (float)Math.Sqrt((double)(num123 * num123 + num124 * num124));
					float num126 = 11f;
					float num127;
					if (num125 > num126)
					{
						num127 = num126 / num125;
					}
					else
					{
						num127 = 1f;
						flag22 = true;
					}
					num123 *= num127;
					num124 *= num127;
					this.velocity.X = num123;
					this.velocity.Y = num124;
				}
				else
				{
					flag22 = true;
				}
				if (flag22 && Main.myPlayer == this.whoAmI)
				{
					for (int num128 = 0; num128 < 22; num128++)
					{
						if (this.buffType[num128] == 38)
						{
							this.DelBuff(num128);
						}
					}
				}
			}
			if (Main.myPlayer == this.whoAmI)
			{
				this.WOFTongue();
				if (this.controlHook)
				{
					if (this.releaseHook)
					{
						this.QuickGrapple();
					}
					this.releaseHook = false;
				}
				else
				{
					this.releaseHook = true;
				}
				if (this.talkNPC >= 0)
				{
					Rectangle rectangle = new Rectangle((int)(this.position.X + (float)(this.width / 2) - (float)(Player.tileRangeX * 16)), (int)(this.position.Y + (float)(this.height / 2) - (float)(Player.tileRangeY * 16)), Player.tileRangeX * 16 * 2, Player.tileRangeY * 16 * 2);
					Rectangle value3 = new Rectangle((int)Main.npc[this.talkNPC].position.X, (int)Main.npc[this.talkNPC].position.Y, Main.npc[this.talkNPC].width, Main.npc[this.talkNPC].height);
					if (!rectangle.Intersects(value3) || this.chest != -1 || !Main.npc[this.talkNPC].active)
					{
						if (this.chest == -1)
						{
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
						}
						this.talkNPC = -1;
						Main.npcChatCornerItem = 0;
						Main.npcChatText = "";
					}
				}
				if (this.sign >= 0)
				{
					Rectangle value4 = new Rectangle((int)(this.position.X + (float)(this.width / 2) - (float)(Player.tileRangeX * 16)), (int)(this.position.Y + (float)(this.height / 2) - (float)(Player.tileRangeY * 16)), Player.tileRangeX * 16 * 2, Player.tileRangeY * 16 * 2);
					try
					{
						bool flag23 = false;
						if (Main.sign[this.sign] == null)
						{
							flag23 = true;
						}
						if (!flag23 && !new Rectangle(Main.sign[this.sign].x * 16, Main.sign[this.sign].y * 16, 32, 32).Intersects(value4))
						{
							flag23 = true;
						}
						if (flag23)
						{
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
							this.sign = -1;
							Main.editSign = false;
							Main.npcChatText = "";
						}
					}
					catch
					{
						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
						this.sign = -1;
						Main.editSign = false;
						Main.npcChatText = "";
					}
				}
				if (Main.editSign)
				{
					if (this.sign == -1)
					{
						Main.editSign = false;
					}
					else
					{
						Main.InputTextSign();
					}
				}
				else if (Main.editChest)
				{
					Main.InputTextChest();
					if (Main.player[Main.myPlayer].chest == -1)
					{
						Main.editChest = false;
					}
				}
				if (this.mount.Active && this.mount.Cart && Math.Abs(this.velocity.X) > 4f)
				{
					Rectangle rectangle2 = new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height);
					for (int num129 = 0; num129 < 200; num129++)
					{
						if (Main.npc[num129].active && !Main.npc[num129].dontTakeDamage && !Main.npc[num129].friendly && Main.npc[num129].immune[i] == 0 && rectangle2.Intersects(new Rectangle((int)Main.npc[num129].position.X, (int)Main.npc[num129].position.Y, Main.npc[num129].width, Main.npc[num129].height)))
						{
							float num130 = (float)this.meleeCrit;
							if (num130 < (float)this.rangedCrit)
							{
								num130 = (float)this.rangedCrit;
							}
							if (num130 < (float)this.magicCrit)
							{
								num130 = (float)this.magicCrit;
							}
							bool crit = false;
							if ((float)Main.rand.Next(1, 101) <= num130)
							{
								crit = true;
							}
							float num131 = Math.Abs(this.velocity.X) / this.maxRunSpeed;
							int damage2 = Main.DamageVar(25f + 55f * num131);
							if (this.mount.Type == 11)
							{
								damage2 = Main.DamageVar(50f + 100f * num131);
							}
							if (this.mount.Type == 13)
							{
								damage2 = Main.DamageVar(15f + 30f * num131);
							}
							float knockback = 5f + 25f * num131;
							int direction = 1;
							if (this.velocity.X < 0f)
							{
								direction = -1;
							}
							if (this.whoAmI == Main.myPlayer)
							{
								this.ApplyDamageToNPC(Main.npc[num129], damage2, knockback, direction, crit);
							}
							Main.npc[num129].immune[i] = 30;
							if (!Main.npc[num129].active)
							{
								AchievementsHelper.HandleSpecialEvent(this, 9);
							}
						}
					}
				}
				this.Update_NPCCollision();
				Vector2 vector3;
				if (!this.mount.Active || !this.mount.Cart)
				{
					vector3 = Collision.HurtTiles(this.position, this.velocity, this.width, this.height, this.fireWalk);
				}
				else
				{
					vector3 = Collision.HurtTiles(this.position, this.velocity, this.width, this.height - 16, this.fireWalk);
				}
				if (vector3.Y == 0f && !this.fireWalk)
				{
					foreach (Point current in this.TouchedTiles)
					{
						Tile tile = Main.tile[current.X, current.Y];
						if (tile != null && tile.active() && tile.nactive() && !this.fireWalk && TileID.Sets.TouchDamageHot[(int)tile.type] != 0)
						{
							vector3.Y = (float)TileID.Sets.TouchDamageHot[(int)tile.type];
							vector3.X = (float)((base.Center.X / 16f < (float)current.X + 0.5f) ? -1 : 1);
							break;
						}
					}
				}
				if (vector3.Y == 20f)
				{
					this.AddBuff(67, 20, true);
				}
				else if (vector3.Y == 15f)
				{
					if (this.suffocateDelay < 5)
					{
						this.suffocateDelay += 1;
					}
					else
					{
						this.AddBuff(68, 1, true);
					}
				}
				else if (vector3.Y != 0f)
				{
					int damage3 = Main.DamageVar(vector3.Y);
					this.Hurt(PlayerDeathReason.ByOther(3), damage3, 0, false, false, false, 0);
				}
				else
				{
					this.suffocateDelay = 0;
				}
			}
			if (this.controlRight)
			{
				this.releaseRight = false;
			}
			else
			{
				this.releaseRight = true;
				this.rightTimer = 7;
			}
			if (this.controlLeft)
			{
				this.releaseLeft = false;
			}
			else
			{
				this.releaseLeft = true;
				this.leftTimer = 7;
			}
			this.releaseDown = !this.controlDown;
			if (this.rightTimer > 0)
			{
				this.rightTimer--;
			}
			else if (this.controlRight)
			{
				this.rightTimer = 7;
			}
			if (this.leftTimer > 0)
			{
				this.leftTimer--;
			}
			else if (this.controlLeft)
			{
				this.leftTimer = 7;
			}
			this.GrappleMovement();
			this.StickyMovement();
			this.CheckDrowning();
			if (this.gravDir == -1f)
			{
				this.waterWalk = false;
				this.waterWalk2 = false;
			}
			int num132 = this.height;
			if (this.waterWalk)
			{
				num132 -= 6;
			}
			bool flag24 = Collision.LavaCollision(this.position, this.width, num132);
			if (flag24)
			{
				if (!this.lavaImmune && Main.myPlayer == i && !this.immune)
				{
					if (this.lavaTime > 0)
					{
						this.lavaTime--;
					}
					else if (this.lavaRose)
					{
						this.Hurt(PlayerDeathReason.ByOther(2), 50, 0, false, false, false, -1);
						this.AddBuff(24, 210, true);
					}
					else
					{
						this.Hurt(PlayerDeathReason.ByOther(2), 80, 0, false, false, false, -1);
						this.AddBuff(24, 420, true);
					}
				}
				this.lavaWet = true;
			}
			else
			{
				this.lavaWet = false;
				if (this.lavaTime < this.lavaMax)
				{
					this.lavaTime++;
				}
			}
			if (this.lavaTime > this.lavaMax)
			{
				this.lavaTime = this.lavaMax;
			}
			if (this.waterWalk2 && !this.waterWalk)
			{
				num132 -= 6;
			}
			bool flag25 = Collision.WetCollision(this.position, this.width, this.height);
			bool flag26 = Collision.honey;
			if (flag26)
			{
				this.AddBuff(48, 1800, true);
				this.honeyWet = true;
			}
			if (flag25)
			{
				if (this.onFire && !this.lavaWet)
				{
					for (int num133 = 0; num133 < 22; num133++)
					{
						if (this.buffType[num133] == 24)
						{
							this.DelBuff(num133);
						}
					}
				}
				if (!this.wet)
				{
					if (this.wetCount == 0)
					{
						this.wetCount = 10;
						if (!flag24)
						{
							if (this.honeyWet)
							{
								for (int num134 = 0; num134 < 20; num134++)
								{
									int num135 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, 152, 0f, 0f, 0, default(Color), 1f);
									Dust expr_8F85_cp_0 = Main.dust[num135];
									expr_8F85_cp_0.velocity.Y = expr_8F85_cp_0.velocity.Y - 1f;
									Dust expr_8FA3_cp_0 = Main.dust[num135];
									expr_8FA3_cp_0.velocity.X = expr_8FA3_cp_0.velocity.X * 2.5f;
									Main.dust[num135].scale = 1.3f;
									Main.dust[num135].alpha = 100;
									Main.dust[num135].noGravity = true;
								}
								Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
							}
							else
							{
								for (int num136 = 0; num136 < 50; num136++)
								{
									int num137 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, Dust.dustWater(), 0f, 0f, 0, default(Color), 1f);
									Dust expr_9099_cp_0 = Main.dust[num137];
									expr_9099_cp_0.velocity.Y = expr_9099_cp_0.velocity.Y - 3f;
									Dust expr_90B7_cp_0 = Main.dust[num137];
									expr_90B7_cp_0.velocity.X = expr_90B7_cp_0.velocity.X * 2.5f;
									Main.dust[num137].scale = 0.8f;
									Main.dust[num137].alpha = 100;
									Main.dust[num137].noGravity = true;
								}
								Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
							}
						}
						else
						{
							for (int num138 = 0; num138 < 20; num138++)
							{
								int num139 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, 35, 0f, 0f, 0, default(Color), 1f);
								Dust expr_91AA_cp_0 = Main.dust[num139];
								expr_91AA_cp_0.velocity.Y = expr_91AA_cp_0.velocity.Y - 1.5f;
								Dust expr_91C8_cp_0 = Main.dust[num139];
								expr_91C8_cp_0.velocity.X = expr_91C8_cp_0.velocity.X * 2.5f;
								Main.dust[num139].scale = 1.3f;
								Main.dust[num139].alpha = 100;
								Main.dust[num139].noGravity = true;
							}
							Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						}
					}
					this.wet = true;
				}
			}
			else if (this.wet)
			{
				this.wet = false;
				if (this.jump > Player.jumpHeight / 5 && this.wetSlime == 0)
				{
					this.jump = Player.jumpHeight / 5;
				}
				if (this.wetCount == 0)
				{
					this.wetCount = 10;
					if (!this.lavaWet)
					{
						if (this.honeyWet)
						{
							for (int num140 = 0; num140 < 20; num140++)
							{
								int num141 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, 152, 0f, 0f, 0, default(Color), 1f);
								Dust expr_9324_cp_0 = Main.dust[num141];
								expr_9324_cp_0.velocity.Y = expr_9324_cp_0.velocity.Y - 1f;
								Dust expr_9342_cp_0 = Main.dust[num141];
								expr_9342_cp_0.velocity.X = expr_9342_cp_0.velocity.X * 2.5f;
								Main.dust[num141].scale = 1.3f;
								Main.dust[num141].alpha = 100;
								Main.dust[num141].noGravity = true;
							}
							Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						}
						else
						{
							for (int num142 = 0; num142 < 50; num142++)
							{
								int num143 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2)), this.width + 12, 24, Dust.dustWater(), 0f, 0f, 0, default(Color), 1f);
								Dust expr_9432_cp_0 = Main.dust[num143];
								expr_9432_cp_0.velocity.Y = expr_9432_cp_0.velocity.Y - 4f;
								Dust expr_9450_cp_0 = Main.dust[num143];
								expr_9450_cp_0.velocity.X = expr_9450_cp_0.velocity.X * 2.5f;
								Main.dust[num143].scale = 0.8f;
								Main.dust[num143].alpha = 100;
								Main.dust[num143].noGravity = true;
							}
							Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
						}
					}
					else
					{
						for (int num144 = 0; num144 < 20; num144++)
						{
							int num145 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, 35, 0f, 0f, 0, default(Color), 1f);
							Dust expr_9543_cp_0 = Main.dust[num145];
							expr_9543_cp_0.velocity.Y = expr_9543_cp_0.velocity.Y - 1.5f;
							Dust expr_9561_cp_0 = Main.dust[num145];
							expr_9561_cp_0.velocity.X = expr_9561_cp_0.velocity.X * 2.5f;
							Main.dust[num145].scale = 1.3f;
							Main.dust[num145].alpha = 100;
							Main.dust[num145].noGravity = true;
						}
						Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					}
				}
			}
			if (!flag26)
			{
				this.honeyWet = false;
			}
			if (!this.wet)
			{
				this.lavaWet = false;
				this.honeyWet = false;
			}
			if (this.wetCount > 0)
			{
				this.wetCount -= 1;
			}
			if (this.wetSlime > 0)
			{
				this.wetSlime -= 1;
			}
			if (this.wet && this.mount.Active)
			{
				switch (this.mount.Type)
				{
					case 3:
						this.wetSlime = 30;
						if (this.velocity.Y > 2f)
						{
							this.velocity.Y = this.velocity.Y * 0.9f;
						}
						this.velocity.Y = this.velocity.Y - 0.5f;
						if (this.velocity.Y < -4f)
						{
							this.velocity.Y = -4f;
						}
						break;
					case 5:
					case 7:
						if (this.whoAmI == Main.myPlayer)
						{
							this.mount.Dismount(this);
						}
						break;
				}
			}
			if (Main.expertMode && this.ZoneSnow && this.wet && !this.lavaWet && !this.honeyWet && !this.arcticDivingGear)
			{
				this.AddBuff(46, 150, true);
			}
			float num146 = 1f + Math.Abs(this.velocity.X) / 3f;
			if (this.gfxOffY > 0f)
			{
				this.gfxOffY -= num146 * this.stepSpeed;
				if (this.gfxOffY < 0f)
				{
					this.gfxOffY = 0f;
				}
			}
			else if (this.gfxOffY < 0f)
			{
				this.gfxOffY += num146 * this.stepSpeed;
				if (this.gfxOffY > 0f)
				{
					this.gfxOffY = 0f;
				}
			}
			if (this.gfxOffY > 32f)
			{
				this.gfxOffY = 32f;
			}
			if (this.gfxOffY < -32f)
			{
				this.gfxOffY = -32f;
			}
			if (Main.myPlayer == i && !this.iceSkate)
			{
				this.CheckIceBreak();
			}
			this.SlopeDownMovement();
			bool flag27 = this.mount.Type == 7 || this.mount.Type == 8 || this.mount.Type == 12;
			if (this.velocity.Y == this.gravity && (!this.mount.Active || (!this.mount.Cart && !flag27)))
			{
				Collision.StepDown(ref this.position, ref this.velocity, this.width, this.height, ref this.stepSpeed, ref this.gfxOffY, (int)this.gravDir, this.waterWalk || this.waterWalk2);
			}
			if (this.gravDir == -1f)
			{
				if ((this.carpetFrame != -1 || this.velocity.Y <= this.gravity) && !this.controlUp)
				{
					Collision.StepUp(ref this.position, ref this.velocity, this.width, this.height, ref this.stepSpeed, ref this.gfxOffY, (int)this.gravDir, this.controlUp, 0);
				}
			}
			else if (flag27 || ((this.carpetFrame != -1 || this.velocity.Y >= this.gravity) && !this.controlDown && !this.mount.Cart))
			{
				Collision.StepUp(ref this.position, ref this.velocity, this.width, this.height, ref this.stepSpeed, ref this.gfxOffY, (int)this.gravDir, this.controlUp, 0);
			}
			this.oldPosition = this.position;
			this.oldDirection = this.direction;
			bool falling = false;
			if (this.velocity.Y > this.gravity)
			{
				falling = true;
			}
			if (this.velocity.Y < -this.gravity)
			{
				falling = true;
			}
			Vector2 velocity = this.velocity;
			this.slideDir = 0;
			bool ignorePlats = false;
			bool fallThrough = this.controlDown;
			if (this.gravDir == -1f || (this.mount.Active && this.mount.Cart) || this.GoingDownWithGrapple)
			{
				ignorePlats = true;
				fallThrough = true;
			}
			this.onTrack = false;
			bool flag28 = false;
			if (this.mount.Active && this.mount.Cart)
			{
				float num147;
				if (!this.ignoreWater && !this.merman)
				{
					if (this.honeyWet)
					{
						num147 = 0.25f;
					}
					else if (this.wet)
					{
						num147 = 0.5f;
					}
					else
					{
						num147 = 1f;
					}
				}
				else
				{
					num147 = 1f;
				}
				this.velocity *= num147;
				DelegateMethods.Minecart.rotation = this.fullRotation;
				DelegateMethods.Minecart.rotationOrigin = this.fullRotationOrigin;
				BitsByte bitsByte = Minecart.TrackCollision(ref this.position, ref this.velocity, ref this.lastBoost, this.width, this.height, this.controlDown, this.controlUp, this.fallStart2, false, this.mount.MinecartDust);
				if (bitsByte[0])
				{
					this.onTrack = true;
					this.gfxOffY = Minecart.TrackRotation(ref this.fullRotation, this.position + this.velocity, this.width, this.height, this.controlDown, this.controlUp, this.mount.MinecartDust);
					this.fullRotationOrigin = new Vector2((float)(this.width / 2), (float)this.height);
				}
				if (bitsByte[1])
				{
					if (this.controlLeft || this.controlRight)
					{
						if (this.cartFlip)
						{
							this.cartFlip = false;
						}
						else
						{
							this.cartFlip = true;
						}
					}
					if (this.velocity.X > 0f)
					{
						this.direction = 1;
					}
					else if (this.velocity.X < 0f)
					{
						this.direction = -1;
					}
					Main.PlaySound(SoundID.Item56, (int)this.position.X + this.width / 2, (int)this.position.Y + this.height / 2);
				}
				this.velocity /= num147;
				if (bitsByte[3] && this.whoAmI == Main.myPlayer)
				{
					flag28 = true;
				}
				if (bitsByte[2])
				{
					this.cartRampTime = (int)(Math.Abs(this.velocity.X) / this.mount.RunSpeed * 20f);
				}
				if (bitsByte[4])
				{
					this.trackBoost -= 4f;
				}
				if (bitsByte[5])
				{
					this.trackBoost += 4f;
				}
			}
			bool flag29 = this.whoAmI == Main.myPlayer && !this.mount.Active;
			Vector2 position = this.position;
			if (this.vortexDebuff)
			{
				this.velocity.Y = this.velocity.Y * 0.8f + (float)Math.Cos((double)(base.Center.X % 120f / 120f * 6.28318548f)) * 5f * 0.2f;
			}
			if (this.tongued)
			{
				this.position += this.velocity;
				flag29 = false;
			}
			else if (this.honeyWet && !this.ignoreWater)
			{
				this.HoneyCollision(fallThrough, ignorePlats);
			}
			else if (this.wet && !this.merman && !this.ignoreWater)
			{
				this.WaterCollision(fallThrough, ignorePlats);
			}
			else
			{
				this.DryCollision(fallThrough, ignorePlats);
				if (this.mount.Active && this.mount.Type == 3 && this.velocity.Y != 0f && !this.SlimeDontHyperJump)
				{
					Vector2 velocity2 = this.velocity;
					this.velocity.X = 0f;
					this.DryCollision(fallThrough, ignorePlats);
					this.velocity.X = velocity2.X;
				}
			}
			this.UpdateTouchingTiles();
			this.TryBouncingBlocks(falling);
			this.TryLandingOnDetonator();
			this.SlopingCollision(fallThrough);
			Collision.StepConveyorBelt(this, this.gravDir);
			if (flag29 && this.velocity.Y == 0f)
			{
				AchievementsHelper.HandleRunning(Math.Abs(this.position.X - position.X));
			}
			if (flag28)
			{
				NetMessage.SendData(13, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
				Minecart.HitTrackSwitch(new Vector2(this.position.X, this.position.Y), this.width, this.height);
			}
			if (velocity.X != this.velocity.X)
			{
				if (velocity.X < 0f)
				{
					this.slideDir = -1;
				}
				else if (velocity.X > 0f)
				{
					this.slideDir = 1;
				}
			}
			if (this.gravDir == 1f && Collision.up)
			{
				this.velocity.Y = 0.01f;
				if (!this.merman)
				{
					this.jump = 0;
				}
			}
			else if (this.gravDir == -1f && Collision.down)
			{
				this.velocity.Y = -0.01f;
				if (!this.merman)
				{
					this.jump = 0;
				}
			}
			if (this.velocity.Y == 0f && this.grappling[0] == -1)
			{
				this.FloorVisuals(falling);
			}
			if (this.whoAmI == Main.myPlayer)
			{
				Collision.SwitchTiles(this.position, this.width, this.height, this.oldPosition, 1);
			}
			PressurePlateHelper.UpdatePlayerPosition(this);
			this.BordersMovement();
			this.numMinions = 0;
			this.slotsMinions = 0f;
			this.ItemCheck_ManageRightClickFeatures();
			this.ItemCheckWrapped(i);
			this.PlayerFrame();
			if (this.mount.Type == 8)
			{
				this.mount.UseDrill(this);
			}
			if (this.statLife > this.statLifeMax2)
			{
				this.statLife = this.statLifeMax2;
			}
			if (this.statMana > this.statManaMax2)
			{
				this.statMana = this.statManaMax2;
			}
			this.grappling[0] = -1;
			this.grapCount = 0;
			this.releaseUseTile = !this.tileInteractAttempted;
			PlayerHooks.PostUpdate(this);
		}

		private void UpdateArmorLights()
		{
			if (this.vortexStealthActive)
			{
				return;
			}
			float num = 0f;
			float num2 = 0f;
			float num3 = 0f;
			int num4 = this.head;
			if (num4 <= 171)
			{
				if (num4 != 11)
				{
					switch (num4)
					{
						case 169:
							num = 0f;
							num2 = 0.36f;
							num3 = 0.4f;
							break;
						case 170:
							num = 0.4f;
							num2 = 0.16f;
							num3 = 0.36f;
							break;
						case 171:
							num = 0.5f;
							num2 = 0.25f;
							num3 = 0.05f;
							break;
					}
				}
				else
				{
					num = 0.92f;
					num2 = 0.8f;
					num3 = 0.65f;
				}
			}
			else if (num4 != 178)
			{
				if (num4 != 189)
				{
					if (num4 == 211)
					{
						num = 0.2f;
						num2 = 0.4f;
						num3 = 0.8f;
					}
				}
				else
				{
					num = 0.9f;
					num2 = 0.9f;
					num3 = 0.7f;
				}
			}
			else
			{
				num = 0.1f;
				num2 = 0.2f;
				num3 = 0.3f;
			}
			float num5 = 0f;
			float num6 = 0f;
			float num7 = 0f;
			int num8 = this.body;
			switch (num8)
			{
				case 175:
					num5 = 0f;
					num6 = 0.36f;
					num7 = 0.4f;
					break;
				case 176:
					num5 = 0.4f;
					num6 = 0.16f;
					num7 = 0.36f;
					break;
				case 177:
					num5 = 0.5f;
					num6 = 0.25f;
					num7 = 0.05f;
					break;
				default:
					if (num8 != 190)
					{
						if (num8 == 205)
						{
							num5 = 0.2f;
							num6 = 0.4f;
							num7 = 0.8f;
						}
					}
					else
					{
						num = 0.9f;
						num2 = 0.9f;
						num3 = 0.7f;
					}
					break;
			}
			float num9 = 0f;
			float num10 = 0f;
			float num11 = 0f;
			int num12 = this.legs;
			switch (num12)
			{
				case 110:
					num9 = 0f;
					num10 = 0.36f;
					num11 = 0.4f;
					break;
				case 111:
					num9 = 0.4f;
					num10 = 0.16f;
					num11 = 0.36f;
					break;
				case 112:
					num9 = 0.5f;
					num10 = 0.25f;
					num11 = 0.05f;
					break;
				default:
					if (num12 == 130)
					{
						num = 0.9f;
						num2 = 0.9f;
						num3 = 0.7f;
					}
					break;
			}
			if (num != 0f || num2 != 0f || num3 != 0f)
			{
				float num13 = 1f;
				if (num == num5 && num2 == num6 && num3 == num7)
				{
					num13 += 0.5f;
				}
				if (num == num9 && num2 == num10 && num3 == num11)
				{
					num13 += 0.5f;
				}
				Vector2 spinningpoint = new Vector2((float)(this.width / 2 + 8 * this.direction), 2f);
				if (this.fullRotation != 0f)
				{
					spinningpoint = spinningpoint.RotatedBy((double)this.fullRotation, this.fullRotationOrigin);
				}
				int i = (int)(this.position.X + spinningpoint.X) / 16;
				int j = (int)(this.position.Y + spinningpoint.Y) / 16;
				Lighting.AddLight(i, j, num * num13, num2 * num13, num3 * num13);
			}
			if (num5 != 0f || num6 != 0f || num7 != 0f)
			{
				float num14 = 1f;
				if (num5 == num && num6 == num2 && num7 == num3)
				{
					num14 += 0.5f;
				}
				if (num5 == num9 && num6 == num10 && num7 == num11)
				{
					num14 += 0.5f;
				}
				Vector2 spinningpoint2 = new Vector2((float)(this.width / 2 + 8), (float)(this.height / 2));
				if (this.fullRotation != 0f)
				{
					spinningpoint2 = spinningpoint2.RotatedBy((double)this.fullRotation, this.fullRotationOrigin);
				}
				int i2 = (int)(this.position.X + spinningpoint2.X) / 16;
				int j2 = (int)(this.position.Y + spinningpoint2.Y) / 16;
				Lighting.AddLight(i2, j2, num5 * num14, num6 * num14, num7 * num14);
			}
			if (num9 != 0f || num10 != 0f || num11 != 0f)
			{
				float num15 = 1f;
				if (num9 == num5 && num10 == num6 && num11 == num7)
				{
					num15 += 0.5f;
				}
				if (num9 == num && num10 == num2 && num11 == num3)
				{
					num15 += 0.5f;
				}
				Vector2 spinningpoint3 = new Vector2((float)(this.width / 2 + 8 * this.direction), (float)this.height * 0.75f);
				if (this.fullRotation != 0f)
				{
					spinningpoint3 = spinningpoint3.RotatedBy((double)this.fullRotation, this.fullRotationOrigin);
				}
				int i3 = (int)(this.position.X + spinningpoint3.X) / 16;
				int j3 = (int)(this.position.Y + spinningpoint3.Y) / 16;
				Lighting.AddLight(i3, j3, num9 * num15, num10 * num15, num11 * num15);
			}
		}

		private void Update_NPCCollision()
		{
			Rectangle rectangle = new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height);
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && !Main.npc[i].friendly && Main.npc[i].damage > 0)
				{
					int num = -1;
					int type = Main.npc[i].type;
					if (type == 398 || type == 400 || type == 397 || type == 396 || type == 401)
					{
						num = 1;
					}
					if (NPCLoader.CanHitPlayer(Main.npc[i], this, ref num) && PlayerHooks.CanBeHitByNPC(this, Main.npc[i], ref num)
						&& (num != -1 || !this.immune) && (this.dash != 2 || i != this.eocHit || this.eocDash <= 0) && !this.npcTypeNoAggro[Main.npc[i].type])
					{
						float num2 = 1f;
						Rectangle rectangle2 = new Rectangle((int)Main.npc[i].position.X, (int)Main.npc[i].position.Y, Main.npc[i].width, Main.npc[i].height);
						NPC.GetMeleeCollisionData(rectangle, i, ref num, ref num2, ref rectangle2);
						if (rectangle.Intersects(rectangle2) && !this.npcTypeNoAggro[Main.npc[i].type])
						{
							bool flag = true;
							bool flag2 = false;
							bool flag3 = this.CanParryAgainst(rectangle, rectangle2, Main.npc[i].velocity);
							float num3 = this.thorns;
							float knockback = 10f;
							if (this.turtleThorns)
							{
								num3 = 1f;
							}
							if (flag3)
							{
								num3 = 2f;
								knockback = 5f;
								flag = false;
								flag2 = true;
							}
							int num4 = -1;
							if (Main.npc[i].position.X + (float)(Main.npc[i].width / 2) < this.position.X + (float)(this.width / 2))
							{
								num4 = 1;
							}
							int num5 = Main.DamageVar((float)Main.npc[i].damage * num2);
							int num6 = Item.NPCtoBanner(Main.npc[i].BannerID());
							if (num6 > 0 && this.NPCBannerBuff[num6])
							{
								if (Main.expertMode)
								{
									num5 = (int)((float)num5 * ItemID.Sets.BannerStrength[Item.BannerToItem(num6)].ExpertDamageReceived);
								}
								else
								{
									num5 = (int)((float)num5 * ItemID.Sets.BannerStrength[Item.BannerToItem(num6)].NormalDamageReceived);
								}
							}
							bool crit = false;
							NPCLoader.ModifyHitPlayer(Main.npc[i], this, ref num5, ref crit);
							PlayerHooks.ModifyHitByNPC(this, Main.npc[i], ref num5, ref crit);
							if (this.whoAmI == Main.myPlayer && num3 > 0f && !this.immune && !Main.npc[i].dontTakeDamage)
							{
								int damage = (int)((float)num5 * num3);
								this.ApplyDamageToNPC(Main.npc[i], damage, knockback, -num4, false);
							}
							if (this.resistCold && Main.npc[i].coldDamage)
							{
								num5 = (int)((float)num5 * 0.7f);
							}
							if (!this.immune && !flag2)
							{
								this.StatusPlayer(Main.npc[i]);
							}
							if (flag)
							{
								int realDamage = (int)this.Hurt(PlayerDeathReason.ByNPC(i), num5, num4, false, false, false, num);
								//TODO, what is this flag?, have these parameters changed? (int)this.Hurt(num146, num145, false, false, Lang.deathMsg(-1, num140, -1, -1, 0, 0), crit, num141);
								NPCLoader.OnHitPlayer(Main.npc[i], this, realDamage, crit);
								PlayerHooks.OnHitByNPC(this, Main.npc[i], realDamage, crit);
							}
							if (flag3)
							{
								this.immune = true;
								this.immuneNoBlink = true;
								this.immuneTime = 30;
								if (this.longInvince)
								{
									this.immuneTime = 60;
								}
								this.AddBuff(198, 300, false);
							}
						}
					}
				}
			}
		}

		public bool CanParryAgainst(Rectangle blockingPlayerRect, Rectangle enemyRect, Vector2 enemyVelocity)
		{
			return this.shieldParryTimeLeft > 0 && Math.Sign(enemyRect.Center.X - blockingPlayerRect.Center.X) == this.direction && enemyVelocity != Vector2.Zero && !this.immune;
		}

		private void PurgeDD2EnergyCrystals()
		{
			if (this.trashItem.type == 3822)
			{
				this.trashItem.TurnToAir();
			}
			for (int i = 0; i < 58; i++)
			{
				Item item = this.inventory[i];
				if (item.stack > 0 && item.type == 3822)
				{
					item.TurnToAir();
				}
			}
			if (this.chest == -2)
			{
				Chest chest = this.bank;
				for (int j = 0; j < 40; j++)
				{
					if (chest.item[j].stack > 0 && chest.item[j].type == 3822)
					{
						chest.item[j].TurnToAir();
					}
				}
			}
			if (this.chest == -4)
			{
				Chest chest2 = this.bank3;
				for (int k = 0; k < 40; k++)
				{
					if (chest2.item[k].stack > 0 && chest2.item[k].type == 3822)
					{
						chest2.item[k].TurnToAir();
					}
				}
			}
			if (this.chest == -3)
			{
				Chest chest3 = this.bank2;
				for (int l = 0; l < 40; l++)
				{
					if (chest3.item[l].stack > 0 && chest3.item[l].type == 3822)
					{
						chest3.item[l].TurnToAir();
					}
				}
			}
			if (this.chest > -1)
			{
				Chest chest4 = Main.chest[this.chest];
				for (int m = 0; m < 40; m++)
				{
					if (chest4.item[m].stack > 0 && chest4.item[m].type == 3822)
					{
						chest4.item[m].TurnToAir();
						if (Main.netMode == 1)
						{
							NetMessage.SendData(32, -1, -1, "", this.chest, (float)m, 0f, 0f, 0, 0, 0);
						}
					}
				}
			}
		}

		public void ItemCheck_ManageRightClickFeatures()
		{
			//ItemLoader.AltFunctionUse(this.inventory[this.selectedItem], this)
			// TODO, reintegrate AltFunctionUse
			bool flag = this.selectedItem != 58 && this.controlUseTile && !this.tileInteractionHappened && this.releaseUseItem && !this.controlUseItem && !this.mouseInterface && !CaptureManager.Instance.Active && !Main.HoveringOverAnNPC && !Main.SmartInteractShowingGenuine;
			if (flag && this.altFunctionUse == 0 && this.inventory[this.selectedItem].type == 3384)
			{
				this.altFunctionUse = 1;
				this.controlUseItem = true;
			}
			if (flag && this.altFunctionUse == 0 && this.inventory[this.selectedItem].type == 3858)
			{
				this.altFunctionUse = 1;
				this.controlUseItem = true;
			}
			if (flag && this.altFunctionUse == 0 && this.inventory[this.selectedItem].type == 3852 && this.itemAnimation == 0 && this.CheckMana(20, true, false))
			{
				this.altFunctionUse = 1;
				this.controlUseItem = true;
			}
			if (flag && this.altFunctionUse == 0 && this.inventory[this.selectedItem].shoot > 0 && ProjectileID.Sets.TurretFeature[this.inventory[this.selectedItem].shoot])
			{
				this.altFunctionUse = 1;
				this.controlUseItem = true;
			}
			if (flag && this.altFunctionUse == 0 && this.inventory[this.selectedItem].shoot > 0 && ProjectileID.Sets.MinionTargettingFeature[this.inventory[this.selectedItem].shoot])
			{
				this.altFunctionUse = 1;
				this.controlUseItem = true;
			}
			if(flag && this.altFunctionUse == 0 && ItemLoader.AltFunctionUse(this.inventory[this.selectedItem], this))
			{
				this.altFunctionUse = 1;
				this.controlUseItem = true;
			}
			if (!this.controlUseItem && this.altFunctionUse == 1)
			{
				this.altFunctionUse = 0;
			}
			this.ItemCheck_ManageRightClickFeatures_ShieldRaise(flag);
		}

		public void ItemCheck_ManageRightClickFeatures_ShieldRaise(bool theGeneralCheck)
		{
			bool flag = false;
			if (theGeneralCheck && this.inventory[this.selectedItem].type == 3823 && this.hasRaisableShield && !this.mount.Active && (this.itemAnimation == 0 || PlayerInput.Triggers.JustPressed.MouseRight))
			{
				flag = true;
			}
			if (this.shield_parry_cooldown > 0)
			{
				this.shield_parry_cooldown--;
				if (this.shield_parry_cooldown == 0)
				{
					Main.PlaySound(25, -1, -1, 1, 1f, 0f);
					for (int i = 0; i < 10; i++)
					{
						int num = Dust.NewDust(base.Center + new Vector2((float)(this.direction * 6 + ((this.direction == -1) ? -10 : 0)), -14f), 10, 16, 45, 0f, 0f, 255, new Color(255, 100, 0, 127), (float)Main.rand.Next(10, 16) * 0.1f);
						Main.dust[num].noLight = true;
						Main.dust[num].noGravity = true;
						Main.dust[num].velocity *= 0.5f;
					}
				}
			}
			if (this.shieldParryTimeLeft > 0 && ++this.shieldParryTimeLeft > 20)
			{
				this.shieldParryTimeLeft = 0;
			}
			if (flag != this.shieldRaised)
			{
				this.shieldRaised = flag;
				if (this.shieldRaised)
				{
					if (this.shield_parry_cooldown == 0)
					{
						this.shieldParryTimeLeft = 1;
					}
					this.itemAnimation = 0;
					this.itemTime = 0;
					this.reuseDelay = 0;
				}
				else
				{
					this.shield_parry_cooldown = 15;
					this.shieldParryTimeLeft = 0;
					if (this.attackCD < 20)
					{
						this.attackCD = 20;
					}
				}
			}
			bool arg_1C7_0 = this.shieldRaised;
		}

		private void HandleHotbar()
		{
			int num = PlayerInput.Triggers.Current.HotbarPlus.ToInt() - PlayerInput.Triggers.Current.HotbarMinus.ToInt();
			if (PlayerInput.CurrentProfile.HotbarAllowsRadial && num != 0 && PlayerInput.Triggers.Current.HotbarHoldTime > PlayerInput.CurrentProfile.HotbarRadialHoldTimeRequired && PlayerInput.CurrentProfile.HotbarRadialHoldTimeRequired != -1)
			{
				PlayerInput.MiscSettingsTEMP.HotbarRadialShouldBeUsed = true;
				PlayerInput.Triggers.Current.HotbarScrollCD = 2;
			}
			if (PlayerInput.CurrentProfile.HotbarRadialHoldTimeRequired != -1)
			{
				num = PlayerInput.Triggers.JustReleased.HotbarPlus.ToInt() - PlayerInput.Triggers.JustReleased.HotbarMinus.ToInt();
				int hotbarScrollCD = PlayerInput.Triggers.Current.HotbarScrollCD;
				if (hotbarScrollCD == 1 && num != 0)
				{
					num = 0;
				}
			}
			if (PlayerInput.Triggers.Current.HotbarScrollCD == 0 && num != 0)
			{
				this.HotbarOffset += num;
				PlayerInput.Triggers.Current.HotbarScrollCD = 8;
			}
			if (!Main.inFancyUI && !Main.ingameOptionsWindow)
			{
				this.HotbarOffset += PlayerInput.ScrollWheelDelta / -120;
			}
			this.ScrollHotbar(this.HotbarOffset);
			this.HotbarOffset = 0;
		}

		private void ItemCheckWrapped(int i)
		{
			LockOnHelper.SetUP();
			int stack = this.inventory[this.selectedItem].stack;
			if (Main.ignoreErrors)
			{
				try
				{
					this.ItemCheck(i);
					goto IL_32;
				}
				catch
				{
					goto IL_32;
				}
			}
			this.ItemCheck(i);
			IL_32:
			if (stack != this.inventory[this.selectedItem].stack)
			{
				Recipe.FindRecipes();
			}
			LockOnHelper.SetDOWN();
		}

		public void ScrollHotbar(int Offset)
		{
			//disable hotbar scrolling when using auto select
			//previously it only worked when scrolling between 0 and 9, and made the sound
			if (selectedItem >= 10) return;
			while (Offset > 9)
			{
				Offset -= 10;
			}
			while (Offset < 0)
			{
				Offset += 10;
			}
			this.selectedItem += Offset;
			if (Offset != 0)
			{
				Main.PlaySound(12, -1, -1, 1, 1f, 0f);
				int num = this.selectedItem - Offset;
				this.DpadRadial.ChangeSelection(-1);
				this.CircularRadial.ChangeSelection(-1);
				this.selectedItem = num + Offset;
				this.nonTorch = -1;
			}
			if (this.changeItem >= 0)
			{
				if (this.selectedItem != this.changeItem)
				{
					Main.PlaySound(12, -1, -1, 1, 1f, 0f);
				}
				this.selectedItem = this.changeItem;
				this.changeItem = -1;
			}
			if (this.itemAnimation == 0 && this.selectedItem != 58)
			{
				while (this.selectedItem > 9)
				{
					this.selectedItem -= 10;
				}
				while (this.selectedItem < 0)
				{
					this.selectedItem += 10;
				}
			}
		}

		private void OldInput()
		{
			bool flag = false;
			bool flag2 = false;
			Keys[] pressedKeys = Main.keyState.GetPressedKeys();
			for (int i = 0; i < pressedKeys.Length; i++)
			{
				if (pressedKeys[i] == Keys.LeftShift || pressedKeys[i] == Keys.RightShift)
				{
					flag = true;
				}
				else if (pressedKeys[i] == Keys.LeftAlt || pressedKeys[i] == Keys.RightAlt)
				{
					flag2 = true;
				}
			}
			if (Main.blockKey != Keys.None.ToString())
			{
				bool flag3 = false;
				for (int j = 0; j < pressedKeys.Length; j++)
				{
					if (pressedKeys[j].ToString() == Main.blockKey)
					{
						pressedKeys[j] = Keys.None;
						flag3 = true;
					}
				}
				if (!flag3)
				{
					Main.blockKey = Keys.None.ToString();
				}
			}
			for (int k = 0; k < pressedKeys.Length; k++)
			{
				string a = string.Concat(pressedKeys[k]);
				if (pressedKeys[k] != Keys.Tab || ((!flag || SocialAPI.Mode != SocialMode.Steam) && !flag2))
				{
					if (a == Main.cUp)
					{
						this.controlUp = true;
					}
					if (a == Main.cLeft)
					{
						this.controlLeft = true;
					}
					if (a == Main.cDown)
					{
						this.controlDown = true;
					}
					if (a == Main.cRight)
					{
						this.controlRight = true;
					}
					if (a == Main.cJump)
					{
						this.controlJump = true;
					}
					if (a == Main.cThrowItem)
					{
						this.controlThrow = true;
					}
					if (a == Main.cInv)
					{
						this.controlInv = true;
					}
					if (a == Main.cBuff)
					{
						this.QuickBuff();
					}
					if (a == Main.cHeal)
					{
						this.controlQuickHeal = true;
					}
					if (a == Main.cMana)
					{
						this.controlQuickMana = true;
					}
					if (a == Main.cHook)
					{
						this.controlHook = true;
					}
					if (a == Main.cTorch)
					{
						this.controlTorch = true;
					}
					if (a == Main.cSmart)
					{
						this.controlSmart = true;
					}
					if (a == Main.cMount)
					{
						this.controlMount = true;
					}
					if (Main.mapEnabled)
					{
						if (a == Main.cMapZoomIn)
						{
							this.mapZoomIn = true;
						}
						if (a == Main.cMapZoomOut)
						{
							this.mapZoomOut = true;
						}
						if (a == Main.cMapAlphaUp)
						{
							this.mapAlphaUp = true;
						}
						if (a == Main.cMapAlphaDown)
						{
							this.mapAlphaDown = true;
						}
						if (a == Main.cMapFull)
						{
							this.mapFullScreen = true;
						}
						if (a == Main.cMapStyle)
						{
							this.mapStyle = true;
						}
					}
				}
			}
			if (Main.gamePad)
			{
				GamePadState state = GamePad.GetState(PlayerIndex.One);
				if (state.DPad.Up == ButtonState.Pressed)
				{
					this.controlUp = true;
				}
				if (state.DPad.Down == ButtonState.Pressed)
				{
					this.controlDown = true;
				}
				if (state.DPad.Left == ButtonState.Pressed)
				{
					this.controlLeft = true;
				}
				if (state.DPad.Right == ButtonState.Pressed)
				{
					this.controlRight = true;
				}
				if (state.Triggers.Left > 0f)
				{
					this.controlJump = true;
				}
				if (state.Triggers.Right > 0f)
				{
					this.controlUseItem = true;
				}
				Main.mouseX = (int)((float)(Main.screenWidth / 2) + state.ThumbSticks.Right.X * (float)Player.tileRangeX * 16f);
				Main.mouseY = (int)((float)(Main.screenHeight / 2) - state.ThumbSticks.Right.Y * (float)Player.tileRangeX * 16f);
				if (state.ThumbSticks.Right.X == 0f)
				{
					Main.mouseX = Main.screenWidth / 2 + this.direction * 2;
				}
			}
			if (Main.mouseLeft)
			{
				if (!Main.blockMouse && !this.mouseInterface)
				{
					this.controlUseItem = true;
				}
			}
			else
			{
				Main.blockMouse = false;
			}
			if (Main.mouseRight && !this.mouseInterface && !Main.blockMouse)
			{
				this.controlUseTile = true;
			}
		}

		private void LookForTileInteractions()
		{
			if (!Main.mapFullscreen)
			{
				int smartInteractX = Player.tileTargetX;
				int smartInteractY = Player.tileTargetY;
				if (Main.SmartInteractShowingGenuine && Main.SmartInteractNPC == -1)
				{
					smartInteractX = Main.SmartInteractX;
					smartInteractY = Main.SmartInteractY;
				}
				bool flag = this.controlUseTile;
				if (PlayerInput.UsingGamepad && Main.HoveringOverAnNPC)
				{
					flag = false;
				}
				if (this.releaseUseTile)
				{
					this.tileInteractionHappened = false;
				}
				this.tileInteractAttempted = flag;
				if (this.position.X / 16f - (float)Player.tileRangeX <= (float)smartInteractX && (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX - 1f >= (float)smartInteractX && this.position.Y / 16f - (float)Player.tileRangeY <= (float)smartInteractY && (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY - 2f >= (float)smartInteractY)
				{
					this.TileInteractionsCheckLongDistance(Player.tileTargetX, Player.tileTargetY);
					this.TileInteractionsCheck(smartInteractX, smartInteractY);
					return;
				}
				this.TileInteractionsCheckLongDistance(smartInteractX, smartInteractY);
			}
		}

		public void TileInteractionsCheck(int myX, int myY)
		{
			if (Main.tile[myX, myY] == null)
			{
				Main.tile[myX, myY] = new Tile();
			}
			if (Main.tile[myX, myY].active())
			{
				this.TileInteractionsMouseOver(myX, myY);
				this.TileInteractionsUse(myX, myY);
			}
		}

		private void TileInteractionsCheckLongDistance(int myX, int myY)
		{
			if (Main.tile[myX, myY] == null)
			{
				Main.tile[myX, myY] = new Tile();
			}
			if (Main.tile[myX, myY].type == 21)
			{
				Tile tile = Main.tile[myX, myY];
				int num = myX;
				int num2 = myY;
				if (tile.frameX % 36 != 0)
				{
					num--;
				}
				if (tile.frameY % 36 != 0)
				{
					num2--;
				}
				int num3 = Chest.FindChest(num, num2);
				this.showItemIcon2 = -1;
				if (num3 < 0)
				{
					this.showItemIconText = Lang.chestType[0];
				}
				else
				{
					if (Main.chest[num3].name != "")
					{
						this.showItemIconText = Main.chest[num3].name;
					}
					else
					{
						this.showItemIconText = Lang.chestType[(int)(tile.frameX / 36)];
					}
					if (this.showItemIconText == Lang.chestType[(int)(tile.frameX / 36)])
					{
						this.showItemIcon2 = Chest.chestTypeToIcon[(int)(tile.frameX / 36)];
						this.showItemIconText = "";
					}
				}
				this.noThrow = 2;
				this.showItemIcon = true;
				if (this.showItemIconText == "")
				{
					this.showItemIcon = false;
					this.showItemIcon2 = 0;
				}
			}
			if (Main.tile[myX, myY].type == 88)
			{
				Tile tile2 = Main.tile[myX, myY];
				int num4 = myY;
				int x = myX - (int)(tile2.frameX % 54 / 18);
				if (tile2.frameY % 36 != 0)
				{
					num4--;
				}
				int num5 = Chest.FindChest(x, num4);
				this.showItemIcon2 = -1;
				if (num5 < 0)
				{
					this.showItemIconText = Lang.dresserType[0];
				}
				else
				{
					if (Main.chest[num5].name != "")
					{
						this.showItemIconText = Main.chest[num5].name;
					}
					else
					{
						this.showItemIconText = Lang.dresserType[(int)(tile2.frameX / 54)];
					}
					if (this.showItemIconText == Lang.dresserType[(int)(tile2.frameX / 54)])
					{
						this.showItemIcon2 = Chest.dresserTypeToIcon[(int)(tile2.frameX / 54)];
						this.showItemIconText = "";
					}
				}
				this.noThrow = 2;
				this.showItemIcon = true;
				if (this.showItemIconText == "")
				{
					this.showItemIcon = false;
					this.showItemIcon2 = 0;
				}
			}
			if (Main.tileSign[(int)Main.tile[myX, myY].type])
			{
				this.noThrow = 2;
				int num6 = (int)(Main.tile[myX, myY].frameX / 18);
				int num7 = (int)(Main.tile[myX, myY].frameY / 18);
				num6 %= 2;
				int num8 = myX - num6;
				int num9 = myY - num7;
				Main.signBubble = true;
				Main.signX = num8 * 16 + 16;
				Main.signY = num9 * 16;
				int num10 = Sign.ReadSign(num8, num9, true);
				if (num10 != -1)
				{
					Main.signHover = num10;
					this.showItemIcon = false;
					this.showItemIcon2 = -1;
				}
			}
			TileLoader.MouseOverFar(myX, myY);
		}

		private void TileInteractionsUse(int myX, int myY)
		{
			if (WiresUI.Open)
			{
				return;
			}
			if (this.ownedProjectileCounts[651] > 0)
			{
				return;
			}
			bool flag = this.releaseUseTile;
			if (this.tileInteractAttempted)
			{
				bool flag2 = false;
				if (Main.tile[myX, myY].type == 212 && this.launcherWait <= 0)
				{
					bool flag3 = false;
					for (int i = 0; i < 58; i++)
					{
						if (this.inventory[i].type == 949 && this.inventory[i].stack > 0)
						{
							this.inventory[i].stack--;
							if (this.inventory[i].stack <= 0)
							{
								this.inventory[i].SetDefaults(0, false);
							}
							flag3 = true;
							break;
						}
					}
					if (flag3)
					{
						flag2 = true;
						this.launcherWait = 10;
						Main.PlaySound(SoundID.Item11, this.position);
						int j = (int)(Main.tile[myX, myY].frameX / 18);
						int num = 0;
						while (j >= 3)
						{
							num++;
							j -= 3;
						}
						j = myX - j;
						int k;
						for (k = (int)(Main.tile[myX, myY].frameY / 18); k >= 3; k -= 3)
						{
						}
						k = myY - k;
						float num2 = 12f + (float)Main.rand.Next(450) * 0.01f;
						float num3 = (float)Main.rand.Next(85, 105);
						float num4 = (float)Main.rand.Next(-35, 11);
						int type = 166;
						int damage = 35;
						float knockBack = 3.5f;
						Vector2 vector = new Vector2((float)((j + 2) * 16 - 8), (float)((k + 2) * 16 - 8));
						if (num == 0)
						{
							num3 *= -1f;
							vector.X -= 12f;
						}
						else
						{
							vector.X += 12f;
						}
						float num5 = num3;
						float num6 = num4;
						float num7 = (float)Math.Sqrt((double)(num5 * num5 + num6 * num6));
						num7 = num2 / num7;
						num5 *= num7;
						num6 *= num7;
						Projectile.NewProjectile(vector.X, vector.Y, num5, num6, type, damage, knockBack, Main.myPlayer, 0f, 0f);
					}
				}
				if (flag)
				{
					if (Main.tile[myX, myY].type == 132 || Main.tile[myX, myY].type == 136 || Main.tile[myX, myY].type == 144)
					{
						flag2 = true;
						Wiring.HitSwitch(myX, myY);
						NetMessage.SendData(59, -1, -1, "", myX, (float)myY, 0f, 0f, 0, 0, 0);
					}
					else if (Main.tile[myX, myY].type == 441)
					{
						flag2 = true;
						int l;
						for (l = (int)(Main.tile[myX, myY].frameX / 18); l > 1; l -= 2)
						{
						}
						l = myX - l;
						int num8 = myY - (int)(Main.tile[myX, myY].frameY / 18);
						Animation.NewTemporaryAnimation(2, 441, l, num8);
						NetMessage.SendTemporaryAnimation(-1, 2, 441, l, num8);
						Wiring.HitSwitch(myX, myY);
						NetMessage.SendData(59, -1, -1, "", myX, (float)myY, 0f, 0f, 0, 0, 0);
					}
					else if (Main.tile[myX, myY].type == 139 || TileLoader.IsModMusicBox(Main.tile[myX, myY]))
					{
						flag2 = true;
						Main.PlaySound(28, myX * 16, myY * 16, 0, 1f, 0f);
						WorldGen.SwitchMB(myX, myY);
					}
					else if (Main.tile[myX, myY].type == 215)
					{
						flag2 = true;
						Main.PlaySound(28, myX * 16, myY * 16, 0, 1f, 0f);
						int num9 = (int)(Main.tile[myX, myY].frameX % 54 / 18);
						int num10 = (int)(Main.tile[myX, myY].frameY % 36 / 18);
						int num11 = myX - num9;
						int num12 = myY - num10;
						int num13 = 36;
						if (Main.tile[num11, num12].frameY >= 36)
						{
							num13 = -36;
						}
						for (int m = num11; m < num11 + 3; m++)
						{
							for (int n = num12; n < num12 + 2; n++)
							{
								Main.tile[m, n].frameY = (short)((int)Main.tile[m, n].frameY + num13);
							}
						}
						NetMessage.SendTileSquare(-1, num11 + 1, num12 + 1, 3, TileChangeType.None);
					}
					else if (Main.tile[myX, myY].type == 207)
					{
						flag2 = true;
						Main.PlaySound(28, myX * 16, myY * 16, 0, 1f, 0f);
						WorldGen.SwitchFountain(myX, myY);
					}
					else if (Main.tile[myX, myY].type == 410)
					{
						flag2 = true;
						Main.PlaySound(28, myX * 16, myY * 16, 0, 1f, 0f);
						this.GamepadEnableGrappleCooldown();
						WorldGen.SwitchMonolith(myX, myY);
					}
					else if (Main.tile[myX, myY].type == 455)
					{
						flag2 = true;
						Main.PlaySound(28, myX * 16, myY * 16, 0, 1f, 0f);
						this.GamepadEnableGrappleCooldown();
						BirthdayParty.ToggleManualParty();
					}
					else if (Main.tile[myX, myY].type == 216)
					{
						flag2 = true;
						WorldGen.LaunchRocket(myX, myY);
					}
					else if (Main.tile[myX, myY].type == 386 || Main.tile[myX, myY].type == 387)
					{
						flag2 = true;
						bool value = Main.tile[myX, myY].type == 387;
						int num14 = WorldGen.ShiftTrapdoor(myX, myY, (float)(myY * 16) > base.Center.Y, -1).ToInt();
						if (num14 == 0)
						{
							num14 = -WorldGen.ShiftTrapdoor(myX, myY, (float)(myY * 16) <= base.Center.Y, -1).ToInt();
						}
						if (num14 != 0)
						{
							NetMessage.SendData(19, -1, -1, "", 2 + value.ToInt(), (float)myX, (float)myY, (float)(num14 * Math.Sign((float)(myY * 16) - base.Center.Y)), 0, 0, 0);
						}
					}
					else if (Main.tile[myX, myY].type == 388 || Main.tile[myX, myY].type == 389)
					{
						flag2 = true;
						bool flag4 = Main.tile[myX, myY].type == 389;
						WorldGen.ShiftTallGate(myX, myY, flag4);
						NetMessage.SendData(19, -1, -1, "", 4 + flag4.ToInt(), (float)myX, (float)myY, 0f, 0, 0, 0);
					}
					else if (Main.tile[myX, myY].type == 335)
					{
						flag2 = true;
						WorldGen.LaunchRocketSmall(myX, myY);
					}
					else if (Main.tile[myX, myY].type == 411 && Main.tile[myX, myY].frameX < 36)
					{
						flag2 = true;
						Wiring.HitSwitch(myX, myY);
						NetMessage.SendData(59, -1, -1, "", myX, (float)myY, 0f, 0f, 0, 0, 0);
					}
					else if (Main.tile[myX, myY].type == 338)
					{
						flag2 = true;
						int num15 = myY;
						if (Main.tile[myX, num15].frameY == 18)
						{
							num15--;
						}
						bool flag5 = false;
						for (int num16 = 0; num16 < 1000; num16++)
						{
							if (Main.projectile[num16].active && Main.projectile[num16].aiStyle == 73 && Main.projectile[num16].ai[0] == (float)myX && Main.projectile[num16].ai[1] == (float)num15)
							{
								flag5 = true;
								break;
							}
						}
						if (!flag5)
						{
							Projectile.NewProjectile((float)(myX * 16 + 8), (float)(num15 * 16 + 2), 0f, 0f, 419 + Main.rand.Next(4), 0, 0f, this.whoAmI, (float)myX, (float)num15);
						}
					}
					else if (TileLoader.IsTorch(Main.tile[myX, myY].type) || Main.tile[myX, myY].type == 13 || Main.tile[myX, myY].type == 33 || Main.tile[myX, myY].type == 49 || (Main.tile[myX, myY].type == 50 && Main.tile[myX, myY].frameX == 90) || Main.tile[myX, myY].type == 174)
					{
						flag2 = true;
						WorldGen.KillTile(myX, myY, false, false, false);
						this.GamepadEnableGrappleCooldown();
						if (Main.netMode == 1)
						{
							NetMessage.SendData(17, -1, -1, "", 0, (float)myX, (float)myY, 0f, 0, 0, 0);
						}
					}
					else if (Main.tile[myX, myY].type == 466)
					{
						flag2 = true;
						this.GamepadEnableGrappleCooldown();
						int num17 = myY;
						Tile tileSafely = Framing.GetTileSafely(myX, myY);
						if (tileSafely.frameY == 0)
						{
							num17 += 3;
						}
						if (tileSafely.frameY == 18)
						{
							num17 += 2;
						}
						if (tileSafely.frameY == 36)
						{
							num17++;
						}
						bool flag6 = !DD2Event.Ongoing && !NPC.AnyNPCs(548) && !Main.pumpkinMoon && !Main.snowMoon;
						if (flag6)
						{
							flag6 = this.HasItem(3828);
						}
						if (flag6)
						{
							flag6 = !DD2Event.WouldFailSpawningHere(myX, num17);
							if (!flag6)
							{
								DD2Event.FailureMessage(-1);
							}
						}
						if (flag6)
						{
							flag6 = this.ConsumeItem(3828, true);
						}
						if (flag6)
						{
							DD2Event.SummonCrystal(myX, num17);
						}
					}
					else if (Main.tile[myX, myY].type == 334)
					{
						flag2 = true;
						if (this.ItemFitsWeaponRack(this.inventory[this.selectedItem]))
						{
							this.GamepadEnableGrappleCooldown();
							this.PlaceWeapon(myX, myY);
						}
						else
						{
							int num18 = myX;
							int num19 = myY;
							if (Main.tile[myX, myY].frameY == 0)
							{
								num19++;
							}
							if (Main.tile[myX, myY].frameY == 36)
							{
								num19--;
							}
							int frameX = (int)Main.tile[myX, num19].frameX;
							int num20 = (int)Main.tile[myX, num19].frameX;
							int num21 = 0;
							while (num20 >= 5000)
							{
								num20 -= 5000;
								num21++;
							}
							if (num21 != 0)
							{
								num20 = (num21 - 1) * 18;
							}
							num20 %= 54;
							if (num20 == 18)
							{
								frameX = (int)Main.tile[myX - 1, num19].frameX;
								num18--;
							}
							if (num20 == 36)
							{
								frameX = (int)Main.tile[myX - 2, num19].frameX;
								num18 -= 2;
							}
							if (frameX >= 5000)
							{
								this.GamepadEnableGrappleCooldown();
								WorldGen.KillTile(myX, num19, true, false, false);
								if (Main.netMode == 1)
								{
									NetMessage.SendData(17, -1, -1, "", 0, (float)myX, (float)num19, 1f, 0, 0, 0);
								}
							}
						}
					}
					else if (Main.tile[myX, myY].type == 440)
					{
						flag2 = true;
						int num22 = (int)(Main.tile[myX, myY].frameX / 54);
						int num23 = (int)(Main.tile[myX, myY].frameY / 54);
						short arg_BE9_0 = (short)(Main.tile[myX, myY].frameX % 54 / 18);
						short arg_C03_0 = (short)(Main.tile[myX, myY].frameY % 54 / 18);
						int num24 = -1;
						switch (num22)
						{
							case 0:
								num24 = 1526;
								break;
							case 1:
								num24 = 1524;
								break;
							case 2:
								num24 = 1525;
								break;
							case 3:
								num24 = 1523;
								break;
							case 4:
								num24 = 1522;
								break;
							case 5:
								num24 = 1527;
								break;
							case 6:
								num24 = 3643;
								break;
						}
						if (num24 != -1)
						{
							if (num23 == 0 && this.HasItem(num24) && this.selectedItem != 58)
							{
								this.GamepadEnableGrappleCooldown();
								if (Main.netMode != 1)
								{
									this.ConsumeItem(num24, false);
									WorldGen.ToggleGemLock(myX, myY, true);
								}
								else
								{
									this.ConsumeItem(num24, false);
									NetMessage.SendData(105, -1, -1, "", myX, (float)myY, 1f, 0f, 0, 0, 0);
								}
							}
							else if (num23 == 1)
							{
								this.GamepadEnableGrappleCooldown();
								if (Main.netMode != 1)
								{
									WorldGen.ToggleGemLock(myX, myY, false);
								}
								else
								{
									NetMessage.SendData(105, -1, -1, "", myX, (float)myY, 0f, 0f, 0, 0, 0);
								}
							}
						}
					}
					else if (Main.tile[myX, myY].type == 395)
					{
						flag2 = true;
						if (this.ItemFitsItemFrame(this.inventory[this.selectedItem]) && !this.inventory[this.selectedItem].favorited)
						{
							this.GamepadEnableGrappleCooldown();
							this.PlaceItemInFrame(myX, myY);
						}
						else
						{
							int num25 = myX;
							int num26 = myY;
							if (Main.tile[num25, num26].frameX % 36 != 0)
							{
								num25--;
							}
							if (Main.tile[num25, num26].frameY % 36 != 0)
							{
								num26--;
							}
							int num27 = TEItemFrame.Find(num25, num26);
							if (num27 != -1 && ((TEItemFrame)TileEntity.ByID[num27]).item.stack > 0)
							{
								this.GamepadEnableGrappleCooldown();
								WorldGen.KillTile(myX, num26, true, false, false);
								if (Main.netMode == 1)
								{
									NetMessage.SendData(17, -1, -1, "", 0, (float)myX, (float)num26, 1f, 0, 0, 0);
								}
							}
						}
					}
					else if (Main.tile[myX, myY].type == 125)
					{
						flag2 = true;
						this.AddBuff(29, 36000, true);
						Main.PlaySound(SoundID.Item4, this.position);
					}
					else if (Main.tile[myX, myY].type == 377)
					{
						flag2 = true;
						this.AddBuff(159, 36000, true);
						Main.PlaySound(SoundID.Item37, this.position);
					}
					else if (Main.tile[myX, myY].type == 354)
					{
						flag2 = true;
						this.AddBuff(150, 36000, true);
						Main.PlaySound(SoundID.Item4, this.position);
					}
					else if (Main.tile[myX, myY].type == 287)
					{
						flag2 = true;
						this.AddBuff(93, 36000, true);
						Main.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					}
					else if (Main.tile[myX, myY].type == 356)
					{
						flag2 = true;
						if (!Main.fastForwardTime && (Main.netMode == 1 || Main.sundialCooldown == 0))
						{
							Main.Sundialing();
							Main.PlaySound(SoundID.Item4, this.position);
						}
					}
					else if (Main.tile[myX, myY].type == 79)
					{
						flag2 = true;
						int num28 = myX + (int)(Main.tile[myX, myY].frameX / 18 * -1);
						if (Main.tile[myX, myY].frameX >= 72)
						{
							num28 += 4;
							num28++;
						}
						else
						{
							num28 += 2;
						}
						int num29 = (int)(Main.tile[myX, myY].frameY / 18);
						int num30 = 0;
						while (num29 > 1)
						{
							num29 -= 2;
							num30++;
						}
						int num31 = myY - num29;
						num31 += 2;
						this.FindSpawn();
						if (this.SpawnX == num28 && this.SpawnY == num31)
						{
							this.RemoveSpawn();
							Main.NewText(Language.GetTextValue("Game.SpawnPointRemoved"), 255, 240, 20, false);
						}
						else if (Player.CheckSpawn(num28, num31))
						{
							this.ChangeSpawn(num28, num31);
							Main.NewText(Language.GetTextValue("Game.SpawnPointSet"), 255, 240, 20, false);
						}
					}
					else if (Main.tileSign[(int)Main.tile[myX, myY].type])
					{
						flag2 = true;
						bool flag7 = true;
						if (this.sign >= 0)
						{
							int num32 = Sign.ReadSign(myX, myY, true);
							if (num32 == this.sign)
							{
								this.sign = -1;
								Main.npcChatText = "";
								Main.editSign = false;
								Main.PlaySound(11, -1, -1, 1, 1f, 0f);
								flag7 = false;
							}
						}
						if (flag7)
						{
							if (Main.netMode == 0)
							{
								this.talkNPC = -1;
								Main.npcChatCornerItem = 0;
								Main.playerInventory = false;
								Main.editSign = false;
								Main.PlaySound(10, -1, -1, 1, 1f, 0f);
								int num33 = Sign.ReadSign(myX, myY, true);
								this.sign = num33;
								Main.npcChatText = Main.sign[num33].text;
							}
							else
							{
								int num34 = (int)(Main.tile[myX, myY].frameX / 18);
								int num35 = (int)(Main.tile[myX, myY].frameY / 18);
								while (num34 > 1)
								{
									num34 -= 2;
								}
								int num36 = myX - num34;
								int num37 = myY - num35;
								if (Main.tileSign[(int)Main.tile[num36, num37].type])
								{
									NetMessage.SendData(46, -1, -1, "", num36, (float)num37, 0f, 0f, 0, 0, 0);
								}
							}
						}
					}
					else if (Main.tile[myX, myY].type == 104)
					{
						flag2 = true;
						string text = "AM";
						double num38 = Main.time;
						if (!Main.dayTime)
						{
							num38 += 54000.0;
						}
						num38 = num38 / 86400.0 * 24.0;
						double num39 = 7.5;
						num38 = num38 - num39 - 12.0;
						if (num38 < 0.0)
						{
							num38 += 24.0;
						}
						if (num38 >= 12.0)
						{
							text = "PM";
						}
						int num40 = (int)num38;
						double num41 = num38 - (double)num40;
						num41 = (double)((int)(num41 * 60.0));
						string text2 = string.Concat(num41);
						if (num41 < 10.0)
						{
							text2 = "0" + text2;
						}
						if (num40 > 12)
						{
							num40 -= 12;
						}
						if (num40 == 0)
						{
							num40 = 12;
						}
						string textValue = Language.GetTextValue("Game.Time", string.Concat(new object[]
								{
									num40,
									":",
									text2,
									" ",
									text
								}));
						Main.NewText(textValue, 255, 240, 20, false);
					}
					else if (Main.tile[myX, myY].type == 237)
					{
						flag2 = true;
						bool flag8 = false;
						if (!NPC.AnyNPCs(245) && Main.hardMode && NPC.downedPlantBoss)
						{
							for (int num42 = 0; num42 < 58; num42++)
							{
								if (this.inventory[num42].type == 1293)
								{
									this.inventory[num42].stack--;
									if (this.inventory[num42].stack <= 0)
									{
										this.inventory[num42].SetDefaults(0, false);
									}
									flag8 = true;
									break;
								}
							}
						}
						if (flag8)
						{
							Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
							if (Main.netMode != 1)
							{
								NPC.SpawnOnPlayer(this.whoAmI, 245);
							}
							else
							{
								NetMessage.SendData(61, -1, -1, "", this.whoAmI, 245f, 0f, 0f, 0, 0, 0);
							}
						}
					}
					else if (Main.tile[myX, myY].type == TileID.ClosedDoor || TileLoader.OpenDoorID(Main.tile[myX, myY]) >= 0)
					{
						flag2 = true;
						if (Main.tile[myX, myY].type == TileID.ClosedDoor && Main.tile[myX, myY].frameY >= 594 && Main.tile[myX, myY].frameY <= 646)
						{
							int num43 = 1141;
							for (int num44 = 0; num44 < 58; num44++)
							{
								if (this.inventory[num44].type == num43 && this.inventory[num44].stack > 0)
								{
									this.inventory[num44].stack--;
									if (this.inventory[num44].stack <= 0)
									{
										this.inventory[num44] = new Item();
									}
									WorldGen.UnlockDoor(myX, myY);
									if (Main.netMode == 1)
									{
										NetMessage.SendData(52, -1, -1, "", this.whoAmI, 2f, (float)myX, (float)myY, 0, 0, 0);
									}
								}
							}
						}
						else
						{
							WorldGen.OpenDoor(myX, myY, this.direction);
							NetMessage.SendData(19, -1, -1, "", 0, (float)myX, (float)myY, (float)this.direction, 0, 0, 0);
						}
					}
					else if (TileLoader.CloseDoorID(Main.tile[myX, myY]) >= 0)
					{
						flag2 = true;
						if (WorldGen.CloseDoor(myX, myY, false))
						{
							NetMessage.SendData(19, -1, -1, "", 1, (float)myX, (float)myY, (float)this.direction, 0, 0, 0);
						}
					}
					else if (Main.tile[myX, myY].type == 88)
					{
						flag2 = true;
						if (Main.tile[myX, myY].frameY == 0)
						{
							Main.CancelClothesWindow(true);
							Main.mouseRightRelease = false;
							int num45 = (int)(Main.tile[myX, myY].frameX / 18);
							num45 %= 3;
							num45 = myX - num45;
							int num46 = myY - (int)(Main.tile[myX, myY].frameY / 18);
							if (this.sign > -1)
							{
								Main.PlaySound(11, -1, -1, 1, 1f, 0f);
								this.sign = -1;
								Main.editSign = false;
								Main.npcChatText = string.Empty;
							}
							if (Main.editChest)
							{
								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
								Main.editChest = false;
								Main.npcChatText = string.Empty;
							}
							if (this.editedChestName)
							{
								NetMessage.SendData(33, -1, -1, Main.chest[this.chest].name, this.chest, 1f, 0f, 0f, 0, 0, 0);
								this.editedChestName = false;
							}
							if (Main.netMode == 1)
							{
								if (num45 == this.chestX && num46 == this.chestY && this.chest != -1)
								{
									this.chest = -1;
									Recipe.FindRecipes();
									Main.PlaySound(11, -1, -1, 1, 1f, 0f);
								}
								else
								{
									NetMessage.SendData(31, -1, -1, "", num45, (float)num46, 0f, 0f, 0, 0, 0);
									Main.stackSplit = 600;
								}
							}
							else
							{
								this.flyingPigChest = -1;
								int num47 = Chest.FindChest(num45, num46);
								if (num47 != -1)
								{
									Main.stackSplit = 600;
									if (num47 == this.chest)
									{
										this.chest = -1;
										Recipe.FindRecipes();
										Main.PlaySound(11, -1, -1, 1, 1f, 0f);
									}
									else if (num47 != this.chest && this.chest == -1)
									{
										this.chest = num47;
										Main.playerInventory = true;
										if (PlayerInput.GrappleAndInteractAreShared)
										{
											PlayerInput.Triggers.JustPressed.Grapple = false;
										}
										Main.recBigList = false;
										Main.PlaySound(10, -1, -1, 1, 1f, 0f);
										this.chestX = num45;
										this.chestY = num46;
									}
									else
									{
										this.chest = num47;
										Main.playerInventory = true;
										if (PlayerInput.GrappleAndInteractAreShared)
										{
											PlayerInput.Triggers.JustPressed.Grapple = false;
										}
										Main.recBigList = false;
										Main.PlaySound(12, -1, -1, 1, 1f, 0f);
										this.chestX = num45;
										this.chestY = num46;
									}
									Recipe.FindRecipes();
								}
							}
						}
						else
						{
							Main.playerInventory = false;
							this.chest = -1;
							Recipe.FindRecipes();
							Main.dresserX = myX;
							Main.dresserY = myY;
							Main.OpenClothesWindow();
						}
					}
					else if (Main.tile[myX, myY].type == 209)
					{
						flag2 = true;
						Tile tile = Main.tile[myX, myY];
						int num48 = (int)(tile.frameX % 72 / 18);
						int num49 = (int)(tile.frameY % 54 / 18);
						int num50 = myX - num48;
						int num51 = myY - num49;
						int num52 = (int)(tile.frameY / 54);
						int num53 = (int)(tile.frameX / 72);
						int num54 = -1;
						if (num48 == 1 || num48 == 2)
						{
							num54 = num49;
						}
						int num55 = 0;
						if (num48 == 3 || (num48 == 2 && num53 != 3 && num53 != 4))
						{
							num55 = -54;
						}
						if (num48 == 0 || (num48 == 1 && num53 != 3 && num53 != 4))
						{
							num55 = 54;
						}
						if (num52 >= 8 && num55 > 0)
						{
							num55 = 0;
						}
						if (num52 == 0 && num55 < 0)
						{
							num55 = 0;
						}
						bool flag9 = false;
						if (num55 != 0)
						{
							for (int num56 = num50; num56 < num50 + 4; num56++)
							{
								for (int num57 = num51; num57 < num51 + 3; num57++)
								{
									Main.tile[num56, num57].frameY = (short)((int)Main.tile[num56, num57].frameY + num55);
								}
							}
							flag9 = true;
						}
						if ((num53 == 3 || num53 == 4) && (num54 == 1 || num54 == 0))
						{
							num55 = ((num53 == 3) ? 72 : -72);
							for (int num58 = num50; num58 < num50 + 4; num58++)
							{
								for (int num59 = num51; num59 < num51 + 3; num59++)
								{
									Main.tile[num58, num59].frameX = (short)((int)Main.tile[num58, num59].frameX + num55);
								}
							}
							flag9 = true;
						}
						if (flag9)
						{
							NetMessage.SendTileSquare(-1, num50 + 1, num51 + 1, 4, TileChangeType.None);
						}
						if (num54 != -1)
						{
							bool flag10 = false;
							if ((num53 == 3 || num53 == 4) && num54 == 2)
							{
								flag10 = true;
							}
							if (flag10)
							{
								WorldGen.ShootFromCannon(num50, num51, num52, num53 + 1, 0, 0f, this.whoAmI);
							}
						}
					}
					else if ((Main.tile[myX, myY].type == 21 || Main.tile[myX, myY].type == 29 || Main.tile[myX, myY].type == 97 || Main.tile[myX, myY].type == 463) && this.talkNPC == -1)
					{
						flag2 = true;
						Main.mouseRightRelease = false;
						int num60 = 0;
						int num61;
						for (num61 = (int)(Main.tile[myX, myY].frameX / 18); num61 > 1; num61 -= 2)
						{
						}
						num61 = myX - num61;
						int num62 = myY - (int)(Main.tile[myX, myY].frameY / 18);
						if (Main.tile[myX, myY].type == 29)
						{
							num60 = 1;
						}
						else if (Main.tile[myX, myY].type == 97)
						{
							num60 = 2;
						}
						else if (Main.tile[myX, myY].type == 463)
						{
							num60 = 3;
						}
						if (this.sign > -1)
						{
							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
							this.sign = -1;
							Main.editSign = false;
							Main.npcChatText = string.Empty;
						}
						if (Main.editChest)
						{
							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
							Main.editChest = false;
							Main.npcChatText = string.Empty;
						}
						if (this.editedChestName)
						{
							NetMessage.SendData(33, -1, -1, Main.chest[this.chest].name, this.chest, 1f, 0f, 0f, 0, 0, 0);
							this.editedChestName = false;
						}
						if (Main.netMode == 1 && num60 == 0 && (Main.tile[num61, num62].frameX < 72 || Main.tile[num61, num62].frameX > 106) && (Main.tile[num61, num62].frameX < 144 || Main.tile[num61, num62].frameX > 178) && (Main.tile[num61, num62].frameX < 828 || Main.tile[num61, num62].frameX > 1006) && (Main.tile[num61, num62].frameX < 1296 || Main.tile[num61, num62].frameX > 1330) && (Main.tile[num61, num62].frameX < 1368 || Main.tile[num61, num62].frameX > 1402) && (Main.tile[num61, num62].frameX < 1440 || Main.tile[num61, num62].frameX > 1474))
						{
							if (num61 == this.chestX && num62 == this.chestY && this.chest != -1)
							{
								this.chest = -1;
								Recipe.FindRecipes();
								Main.PlaySound(11, -1, -1, 1, 1f, 0f);
							}
							else
							{
								NetMessage.SendData(31, -1, -1, "", num61, (float)num62, 0f, 0f, 0, 0, 0);
								Main.stackSplit = 600;
							}
						}
						else
						{
							int num63 = -1;
							if (num60 == 1)
							{
								num63 = -2;
							}
							else if (num60 == 2)
							{
								num63 = -3;
							}
							else if (num60 == 3)
							{
								num63 = -4;
							}
							else
							{
								bool flag11 = false;
								if (Chest.isLocked(num61, num62))
								{
									int num64 = 327;
									if (Main.tile[num61, num62].frameX >= 144 && Main.tile[num61, num62].frameX <= 178)
									{
										num64 = 329;
									}
									if (Main.tile[num61, num62].frameX >= 828 && Main.tile[num61, num62].frameX <= 1006)
									{
										int num65 = (int)(Main.tile[num61, num62].frameX / 18);
										int num66 = 0;
										while (num65 >= 2)
										{
											num65 -= 2;
											num66++;
										}
										num66 -= 23;
										num64 = 1533 + num66;
									}
									flag11 = true;
									for (int num67 = 0; num67 < 58; num67++)
									{
										if (this.inventory[num67].type == num64 && this.inventory[num67].stack > 0 && Chest.Unlock(num61, num62))
										{
											if (num64 != 329)
											{
												this.inventory[num67].stack--;
												if (this.inventory[num67].stack <= 0)
												{
													this.inventory[num67] = new Item();
												}
											}
											if (Main.netMode == 1)
											{
												NetMessage.SendData(52, -1, -1, "", this.whoAmI, 1f, (float)num61, (float)num62, 0, 0, 0);
											}
										}
									}
								}
								if (!flag11)
								{
									num63 = Chest.FindChest(num61, num62);
								}
							}
							if (num63 != -1)
							{
								Main.stackSplit = 600;
								if (num63 == this.chest)
								{
									this.chest = -1;
									Main.PlaySound(11, -1, -1, 1, 1f, 0f);
								}
								else if (num63 != this.chest && this.chest == -1)
								{
									this.chest = num63;
									Main.playerInventory = true;
									if (PlayerInput.GrappleAndInteractAreShared)
									{
										PlayerInput.Triggers.JustPressed.Grapple = false;
									}
									Main.recBigList = false;
									Main.PlaySound(10, -1, -1, 1, 1f, 0f);
									this.chestX = num61;
									this.chestY = num62;
									if (Main.tile[num61, num62].frameX >= 36 && Main.tile[num61, num62].frameX < 72)
									{
										AchievementsHelper.HandleSpecialEvent(this, 16);
									}
								}
								else
								{
									this.chest = num63;
									Main.playerInventory = true;
									if (PlayerInput.GrappleAndInteractAreShared)
									{
										PlayerInput.Triggers.JustPressed.Grapple = false;
									}
									Main.recBigList = false;
									Main.PlaySound(12, -1, -1, 1, 1f, 0f);
									this.chestX = num61;
									this.chestY = num62;
								}
								Recipe.FindRecipes();
							}
						}
					}
					else if (Main.tile[myX, myY].type == 314 && this.gravDir == 1f)
					{
						flag2 = true;
						bool flag12 = true;
						if (this.mount.Active)
						{
							if (this.mount.Cart)
							{
								flag12 = false;
							}
							else
							{
								this.mount.Dismount(this);
							}
						}
						if (flag12)
						{
							this.LaunchMinecartHook(myX, myY);
						}
					}
					TileLoader.RightClick(myX, myY);
					// todo check out this flag2. return? "this.releaseUseTile = false;"
				}
				if (flag2)
				{
					this.tileInteractionHappened = true;
				}
			}
		}

		private void LaunchMinecartHook(int myX, int myY)
		{
			Vector2 vector = new Vector2((float)Main.mouseX + Main.screenPosition.X, (float)Main.mouseY + Main.screenPosition.Y);
			vector = new Vector2((float)(myX * 16 + 8), (float)(myY * 16 + 8));
			if (this.direction > 0)
			{
				this.minecartLeft = false;
			}
			else
			{
				this.minecartLeft = true;
			}
			this.grappling[0] = -1;
			this.grapCount = 0;
			for (int i = 0; i < 1000; i++)
			{
				if (Main.projectile[i].active && Main.projectile[i].owner == this.whoAmI && Main.projectile[i].aiStyle == 7)
				{
					Main.projectile[i].Kill();
				}
			}
			Projectile.NewProjectile(vector.X, vector.Y, 0f, 0f, 403, 0, 0f, this.whoAmI, 0f, 0f);
		}

		private void TileInteractionsMouseOver(int myX, int myY)
		{
			if (myX != Player.tileTargetX || myY != Player.tileTargetY)
			{
				return;
			}
			if (Main.tile[myX, myY].type == 79)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				int num = (int)(Main.tile[myX, myY].frameY / 36);
				if (num == 0)
				{
					this.showItemIcon2 = 224;
				}
				else if (num == 1)
				{
					this.showItemIcon2 = 644;
				}
				else if (num == 2)
				{
					this.showItemIcon2 = 645;
				}
				else if (num == 3)
				{
					this.showItemIcon2 = 646;
				}
				else if (num == 4)
				{
					this.showItemIcon2 = 920;
				}
				else if (num == 5)
				{
					this.showItemIcon2 = 1470;
				}
				else if (num == 6)
				{
					this.showItemIcon2 = 1471;
				}
				else if (num == 7)
				{
					this.showItemIcon2 = 1472;
				}
				else if (num == 8)
				{
					this.showItemIcon2 = 1473;
				}
				else if (num == 9)
				{
					this.showItemIcon2 = 1719;
				}
				else if (num == 10)
				{
					this.showItemIcon2 = 1720;
				}
				else if (num == 11)
				{
					this.showItemIcon2 = 1721;
				}
				else if (num == 12)
				{
					this.showItemIcon2 = 1722;
				}
				else if (num >= 13 && num <= 18)
				{
					this.showItemIcon2 = 2066 + num - 13;
				}
				else if (num >= 19 && num <= 20)
				{
					this.showItemIcon2 = 2139 + num - 19;
				}
				else if (num == 21)
				{
					this.showItemIcon2 = 2231;
				}
				else if (num == 22)
				{
					this.showItemIcon2 = 2520;
				}
				else if (num == 23)
				{
					this.showItemIcon2 = 2538;
				}
				else if (num == 24)
				{
					this.showItemIcon2 = 2553;
				}
				else if (num == 25)
				{
					this.showItemIcon2 = 2568;
				}
				else if (num == 26)
				{
					this.showItemIcon2 = 2669;
				}
				else if (num == 27)
				{
					this.showItemIcon2 = 2811;
				}
				else if (num == 28)
				{
					this.showItemIcon2 = 3162;
				}
				else if (num == 29)
				{
					this.showItemIcon2 = 3164;
				}
				else if (num == 30)
				{
					this.showItemIcon2 = 3163;
				}
				else
				{
					this.showItemIcon2 = 646;
				}
			}
			if (Main.tile[myX, myY].type == 33)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				this.showItemIcon2 = 105;
				int num2 = (int)(Main.tile[myX, myY].frameY / 22);
				if (num2 == 1)
				{
					this.showItemIcon2 = 1405;
				}
				if (num2 == 2)
				{
					this.showItemIcon2 = 1406;
				}
				if (num2 == 3)
				{
					this.showItemIcon2 = 1407;
				}
				if (num2 >= 4 && num2 <= 13)
				{
					this.showItemIcon2 = 2045 + num2 - 4;
				}
				if (num2 >= 14 && num2 <= 16)
				{
					this.showItemIcon2 = 2153 + num2 - 14;
				}
				if (num2 == 17)
				{
					this.showItemIcon2 = 2236;
				}
				if (num2 == 18)
				{
					this.showItemIcon2 = 2523;
				}
				if (num2 == 19)
				{
					this.showItemIcon2 = 2542;
				}
				if (num2 == 20)
				{
					this.showItemIcon2 = 2556;
				}
				if (num2 == 21)
				{
					this.showItemIcon2 = 2571;
				}
				if (num2 == 22)
				{
					this.showItemIcon2 = 2648;
				}
				if (num2 == 23)
				{
					this.showItemIcon2 = 2649;
				}
				if (num2 == 24)
				{
					this.showItemIcon2 = 2650;
				}
				if (num2 == 25)
				{
					this.showItemIcon2 = 2651;
				}
				else if (num2 == 26)
				{
					this.showItemIcon2 = 2818;
				}
				else if (num2 == 27)
				{
					this.showItemIcon2 = 3171;
				}
				else if (num2 == 28)
				{
					this.showItemIcon2 = 3173;
				}
				else if (num2 == 29)
				{
					this.showItemIcon2 = 3172;
				}
			}
			if (Main.tile[myX, myY].type == 21)
			{
				Tile tile = Main.tile[myX, myY];
				int num3 = myX;
				int num4 = myY;
				if (tile.frameX % 36 != 0)
				{
					num3--;
				}
				if (tile.frameY % 36 != 0)
				{
					num4--;
				}
				int num5 = Chest.FindChest(num3, num4);
				this.showItemIcon2 = -1;
				if (num5 < 0)
				{
					this.showItemIconText = Lang.chestType[0];
				}
				else
				{
					if (Main.chest[num5].name != "")
					{
						this.showItemIconText = Main.chest[num5].name;
					}
					else
					{
						this.showItemIconText = Lang.chestType[(int)(tile.frameX / 36)];
					}
					if (this.showItemIconText == Lang.chestType[(int)(tile.frameX / 36)])
					{
						this.showItemIcon2 = Chest.chestTypeToIcon[(int)(tile.frameX / 36)];
						this.showItemIconText = "";
					}
				}
				this.noThrow = 2;
				this.showItemIcon = true;
			}
			if (Main.tile[myX, myY].type == 441)
			{
				Tile tile2 = Main.tile[myX, myY];
				if (tile2.frameX % 36 != 0)
				{
					int num6 = myX - 1;
				}
				if (tile2.frameY % 36 != 0)
				{
					int num7 = myY - 1;
				}
				this.showItemIcon2 = -1;
				this.showItemIcon2 = Chest.chestTypeToIcon[(int)(tile2.frameX / 36)];
				this.noThrow = 2;
				this.showItemIcon = true;
			}
			if (Main.tile[myX, myY].type == 88)
			{
				Tile tile3 = Main.tile[myX, myY];
				int num8 = myY;
				int x = myX - (int)(tile3.frameX % 54 / 18);
				if (tile3.frameY % 36 != 0)
				{
					num8--;
				}
				int num9 = Chest.FindChest(x, num8);
				this.showItemIcon2 = -1;
				if (num9 < 0)
				{
					this.showItemIconText = Lang.dresserType[0];
				}
				else
				{
					if (Main.chest[num9].name != "")
					{
						this.showItemIconText = Main.chest[num9].name;
					}
					else
					{
						this.showItemIconText = Lang.dresserType[(int)(tile3.frameX / 54)];
					}
					if (this.showItemIconText == Lang.dresserType[(int)(tile3.frameX / 54)])
					{
						this.showItemIcon2 = Chest.dresserTypeToIcon[(int)(tile3.frameX / 54)];
						this.showItemIconText = "";
					}
				}
				this.noThrow = 2;
				this.showItemIcon = true;
				if (Main.tile[myX, myY].frameY > 0)
				{
					this.showItemIcon2 = 269;
				}
			}
			if (Main.tile[myX, myY].type == 10 || Main.tile[myX, myY].type == 11)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				int i = (int)Main.tile[myX, myY].frameY;
				int num10 = 0;
				while (i >= 54)
				{
					i -= 54;
					num10++;
				}
				if (num10 == 0)
				{
					this.showItemIcon2 = 25;
				}
				else if (num10 == 9)
				{
					this.showItemIcon2 = 837;
				}
				else if (num10 == 10)
				{
					this.showItemIcon2 = 912;
				}
				else if (num10 == 11)
				{
					this.showItemIcon2 = 1141;
				}
				else if (num10 == 12)
				{
					this.showItemIcon2 = 1137;
				}
				else if (num10 == 13)
				{
					this.showItemIcon2 = 1138;
				}
				else if (num10 == 14)
				{
					this.showItemIcon2 = 1139;
				}
				else if (num10 == 15)
				{
					this.showItemIcon2 = 1140;
				}
				else if (num10 == 16)
				{
					this.showItemIcon2 = 1411;
				}
				else if (num10 == 17)
				{
					this.showItemIcon2 = 1412;
				}
				else if (num10 == 18)
				{
					this.showItemIcon2 = 1413;
				}
				else if (num10 == 19)
				{
					this.showItemIcon2 = 1458;
				}
				else if (num10 >= 20 && num10 <= 23)
				{
					this.showItemIcon2 = 1709 + num10 - 20;
				}
				else if (num10 == 24)
				{
					this.showItemIcon2 = 1793;
				}
				else if (num10 == 25)
				{
					this.showItemIcon2 = 1815;
				}
				else if (num10 == 26)
				{
					this.showItemIcon2 = 1924;
				}
				else if (num10 == 27)
				{
					this.showItemIcon2 = 2044;
				}
				else if (num10 == 28)
				{
					this.showItemIcon2 = 2265;
				}
				else if (num10 == 29)
				{
					this.showItemIcon2 = 2528;
				}
				else if (num10 == 30)
				{
					this.showItemIcon2 = 2561;
				}
				else if (num10 == 31)
				{
					this.showItemIcon2 = 2576;
				}
				else if (num10 == 32)
				{
					this.showItemIcon2 = 2815;
				}
				else if (num10 == 33)
				{
					this.showItemIcon2 = 3129;
				}
				else if (num10 == 34)
				{
					this.showItemIcon2 = 3131;
				}
				else if (num10 == 35)
				{
					this.showItemIcon2 = 3130;
				}
				else if (num10 >= 4 && num10 <= 8)
				{
					this.showItemIcon2 = 812 + num10;
				}
				else
				{
					this.showItemIcon2 = 649 + num10;
				}
			}
			if (Main.tile[myX, myY].type == 104)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				switch (Main.tile[myX, myY].frameX / 36)
				{
					case 0:
						this.showItemIcon2 = 359;
						break;
					case 1:
						this.showItemIcon2 = 2237;
						break;
					case 2:
						this.showItemIcon2 = 2238;
						break;
					case 3:
						this.showItemIcon2 = 2239;
						break;
					case 4:
						this.showItemIcon2 = 2240;
						break;
					case 5:
						this.showItemIcon2 = 2241;
						break;
					case 6:
						this.showItemIcon2 = 2560;
						break;
					case 7:
						this.showItemIcon2 = 2575;
						break;
					case 8:
						this.showItemIcon2 = 2591;
						break;
					case 9:
						this.showItemIcon2 = 2592;
						break;
					case 10:
						this.showItemIcon2 = 2593;
						break;
					case 11:
						this.showItemIcon2 = 2594;
						break;
					case 12:
						this.showItemIcon2 = 2595;
						break;
					case 13:
						this.showItemIcon2 = 2596;
						break;
					case 14:
						this.showItemIcon2 = 2597;
						break;
					case 15:
						this.showItemIcon2 = 2598;
						break;
					case 16:
						this.showItemIcon2 = 2599;
						break;
					case 17:
						this.showItemIcon2 = 2600;
						break;
					case 18:
						this.showItemIcon2 = 2601;
						break;
					case 19:
						this.showItemIcon2 = 2602;
						break;
					case 20:
						this.showItemIcon2 = 2603;
						break;
					case 21:
						this.showItemIcon2 = 2604;
						break;
					case 22:
						this.showItemIcon2 = 2605;
						break;
					case 23:
						this.showItemIcon2 = 2606;
						break;
					case 24:
						this.showItemIcon2 = 2809;
						break;
					case 25:
						this.showItemIcon2 = 3126;
						break;
					case 26:
						this.showItemIcon2 = 3128;
						break;
					case 27:
						this.showItemIcon2 = 3127;
						break;
				}
			}
			if (Main.tile[myX, myY].type == 356)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				this.showItemIcon2 = 3064;
			}
			if (Main.tile[myX, myY].type == 377)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				this.showItemIcon2 = 3198;
			}
			if (Main.tile[myX, myY].type == 209)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				if (Main.tile[myX, myY].frameX < 72)
				{
					this.showItemIcon2 = 928;
				}
				else if (Main.tile[myX, myY].frameX < 144)
				{
					this.showItemIcon2 = 1337;
				}
				else if (Main.tile[myX, myY].frameX < 216)
				{
					this.showItemIcon2 = 3369;
				}
				else if (Main.tile[myX, myY].frameX < 360)
				{
					this.showItemIcon2 = 3664;
				}
				int j;
				for (j = (int)(Main.tile[myX, myY].frameX / 18); j >= 4; j -= 4)
				{
				}
				if (j < 2)
				{
					this.showItemIconR = true;
				}
				else
				{
					this.showItemIconR = false;
				}
			}
			if (Main.tile[myX, myY].type == 216)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				int k = (int)Main.tile[myX, myY].frameY;
				int num11 = 0;
				while (k >= 40)
				{
					k -= 40;
					num11++;
				}
				this.showItemIcon2 = 970 + num11;
			}
			if (Main.tile[myX, myY].type == 387 || Main.tile[myX, myY].type == 386)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				int num12 = 0;
				int num13 = 0;
				WorldGen.GetTopLeftAndStyles(ref num12, ref num13, 2, 1 + (Main.tile[myX, myY].type == 386).ToInt(), 18, 18);
				this.showItemIcon2 = 3239;
			}
			if (Main.tile[myX, myY].type == 389 || Main.tile[myX, myY].type == 388)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				this.showItemIcon2 = 3240;
			}
			if (Main.tile[myX, myY].type == 335)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				this.showItemIcon2 = 2700;
			}
			if (Main.tile[myX, myY].type == 410)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				this.showItemIcon2 = 3536 + Math.Min((int)(Main.tile[myX, myY].frameX / 36), 3);
			}
			if (Main.tile[myX, myY].type == 463)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				this.showItemIcon2 = 3813;
			}
			if (Main.tile[myX, myY].type == 411 && Main.tile[myX, myY].frameX < 36)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				this.showItemIcon2 = 3545;
			}
			if (Main.tile[myX, myY].type == 338)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				this.showItemIcon2 = 2738;
			}
			if (Main.tile[myX, myY].type == 455)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				this.showItemIcon2 = 3747;
			}
			if (Main.tile[myX, myY].type == 219 && ItemID.Sets.ExtractinatorMode[this.inventory[this.selectedItem].type] > -1)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				this.showItemIcon2 = this.inventory[this.selectedItem].type;
			}
			if (Main.tile[myX, myY].type == 212)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				this.showItemIcon2 = 949;
			}
			if (Main.tile[myX, myY].type == 314 && this.gravDir == 1f)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				this.showItemIcon2 = 2343;
			}
			if (Main.tile[myX, myY].type == 215)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				int num14 = (int)(Main.tile[myX, myY].frameX / 54);
				if (num14 == 0)
				{
					this.showItemIcon2 = 966;
				}
				else if (num14 == 7)
				{
					this.showItemIcon2 = 3724;
				}
				else if (num14 == 6)
				{
					this.showItemIcon2 = 3723;
				}
				else if (num14 == 5)
				{
					this.showItemIcon2 = 3050;
				}
				else
				{
					this.showItemIcon2 = 3046 + num14 - 1;
				}
			}
			if (Main.tile[myX, myY].type == 4)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				int num15 = (int)(Main.tile[myX, myY].frameY / 22);
				if (num15 == 0)
				{
					this.showItemIcon2 = 8;
				}
				else if (num15 == 8)
				{
					this.showItemIcon2 = 523;
				}
				else if (num15 == 9)
				{
					this.showItemIcon2 = 974;
				}
				else if (num15 == 10)
				{
					this.showItemIcon2 = 1245;
				}
				else if (num15 == 11)
				{
					this.showItemIcon2 = 1333;
				}
				else if (num15 == 12)
				{
					this.showItemIcon2 = 2274;
				}
				else if (num15 == 13)
				{
					this.showItemIcon2 = 3004;
				}
				else if (num15 == 14)
				{
					this.showItemIcon2 = 3045;
				}
				else if (num15 == 15)
				{
					this.showItemIcon2 = 3114;
				}
				else
				{
					this.showItemIcon2 = 426 + num15;
				}
			}
			if (Main.tile[myX, myY].type == 13)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				int num16 = (int)(Main.tile[myX, myY].frameX / 18);
				if (num16 == 1)
				{
					this.showItemIcon2 = 28;
				}
				else if (num16 == 2)
				{
					this.showItemIcon2 = 110;
				}
				else if (num16 == 3)
				{
					this.showItemIcon2 = 350;
				}
				else if (num16 == 4)
				{
					this.showItemIcon2 = 351;
				}
				else if (num16 == 5)
				{
					this.showItemIcon2 = 2234;
				}
				else if (num16 == 6)
				{
					this.showItemIcon2 = 2244;
				}
				else if (num16 == 7)
				{
					this.showItemIcon2 = 2257;
				}
				else if (num16 == 8)
				{
					this.showItemIcon2 = 2258;
				}
				else
				{
					this.showItemIcon2 = 31;
				}
			}
			if (Main.tile[myX, myY].type == 29)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				this.showItemIcon2 = 87;
			}
			if (Main.tile[myX, myY].type == 97)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				this.showItemIcon2 = 346;
			}
			if (Main.tile[myX, myY].type == 49)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				this.showItemIcon2 = 148;
			}
			if (Main.tile[myX, myY].type == 174)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				this.showItemIcon2 = 713;
			}
			if (Main.tile[myX, myY].type == 50)
			{
				this.noThrow = 2;
				if (Main.tile[myX, myY].frameX == 90)
				{
					this.showItemIcon = true;
					this.showItemIcon2 = 165;
				}
			}
			if (Main.tile[myX, myY].type == 139)
			{
				this.noThrow = 2;
				int num17 = 0;
				for (int l = (int)(Main.tile[myX, myY].frameY / 18); l >= 2; l -= 2)
				{
					num17++;
				}
				this.showItemIcon = true;
				if (num17 == 28)
				{
					this.showItemIcon2 = 1963;
				}
				else if (num17 == 29)
				{
					this.showItemIcon2 = 1964;
				}
				else if (num17 == 30)
				{
					this.showItemIcon2 = 1965;
				}
				else if (num17 == 31)
				{
					this.showItemIcon2 = 2742;
				}
				else if (num17 == 32)
				{
					this.showItemIcon2 = 3044;
				}
				else if (num17 == 33)
				{
					this.showItemIcon2 = 3235;
				}
				else if (num17 == 34)
				{
					this.showItemIcon2 = 3236;
				}
				else if (num17 == 35)
				{
					this.showItemIcon2 = 3237;
				}
				else if (num17 == 36)
				{
					this.showItemIcon2 = 3370;
				}
				else if (num17 == 37)
				{
					this.showItemIcon2 = 3371;
				}
				else if (num17 == 38)
				{
					this.showItemIcon2 = 3796;
				}
				else if (num17 == 39)
				{
					this.showItemIcon2 = 3869;
				}
				else if (num17 >= 13)
				{
					this.showItemIcon2 = 1596 + num17 - 13;
				}
				else
				{
					this.showItemIcon2 = 562 + num17;
				}
			}
			if (Main.tile[myX, myY].type == 207)
			{
				this.noThrow = 2;
				int num18 = 0;
				for (int m = (int)(Main.tile[myX, myY].frameX / 18); m >= 2; m -= 2)
				{
					num18++;
				}
				this.showItemIcon = true;
				if (num18 == 0)
				{
					this.showItemIcon2 = 909;
				}
				else if (num18 == 1)
				{
					this.showItemIcon2 = 910;
				}
				else if (num18 == 2)
				{
					this.showItemIcon2 = 940;
				}
				else if (num18 == 3)
				{
					this.showItemIcon2 = 941;
				}
				else if (num18 == 4)
				{
					this.showItemIcon2 = 942;
				}
				else if (num18 == 5)
				{
					this.showItemIcon2 = 943;
				}
				else if (num18 == 6)
				{
					this.showItemIcon2 = 944;
				}
				else if (num18 == 7)
				{
					this.showItemIcon2 = 945;
				}
			}
			if (Main.tileSign[(int)Main.tile[myX, myY].type])
			{
				this.noThrow = 2;
				int num19 = (int)(Main.tile[myX, myY].frameX / 18);
				int num20 = (int)(Main.tile[myX, myY].frameY / 18);
				num19 %= 2;
				int num21 = myX - num19;
				int num22 = myY - num20;
				Main.signBubble = true;
				Main.signX = num21 * 16 + 16;
				Main.signY = num22 * 16;
				int num23 = Sign.ReadSign(num21, num22, false);
				if (num23 != -1)
				{
					Main.signHover = num23;
				}
				if (num23 != -1)
				{
					Main.signHover = num23;
					this.showItemIcon = false;
					this.showItemIcon2 = -1;
				}
			}
			if (Main.tile[myX, myY].type == 237)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				this.showItemIcon2 = 1293;
			}
			if (Main.tile[myX, myY].type == 466)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				this.showItemIcon2 = 3828;
			}
			if (Main.tile[myX, myY].type == 125)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				this.showItemIcon2 = 487;
			}
			if (Main.tile[myX, myY].type == 354)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				this.showItemIcon2 = 2999;
			}
			if (Main.tile[myX, myY].type == 287)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				this.showItemIcon2 = 2177;
			}
			if (Main.tile[myX, myY].type == 132)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				this.showItemIcon2 = 513;
			}
			if (Main.tile[myX, myY].type == 136)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				this.showItemIcon2 = 538;
			}
			if (Main.tile[myX, myY].type == 144)
			{
				this.noThrow = 2;
				this.showItemIcon = true;
				this.showItemIcon2 = (int)(583 + Main.tile[myX, myY].frameX / 18);
			}
			if (Main.tile[myX, myY].type == 440)
			{
				int num24 = (int)(Main.tile[myX, myY].frameX / 54);
				int num25 = (int)(Main.tile[myX, myY].frameY / 54);
				int num26 = -1;
				switch (num24)
				{
					case 0:
						num26 = 1526;
						break;
					case 1:
						num26 = 1524;
						break;
					case 2:
						num26 = 1525;
						break;
					case 3:
						num26 = 1523;
						break;
					case 4:
						num26 = 1522;
						break;
					case 5:
						num26 = 1527;
						break;
					case 6:
						num26 = 3643;
						break;
				}
				if (num26 != -1 && (num25 == 1 || this.HasItem(num26)))
				{
					this.noThrow = 2;
					this.showItemIcon = true;
					this.showItemIcon2 = num26;
				}
			}
			TileLoader.MouseOver(myX, myY);
		}

		private void TryLandingOnDetonator()
		{
			if (this.whoAmI != Main.myPlayer)
			{
				return;
			}
			if (this.velocity.Y >= 3f)
			{
				Point point = (base.Bottom + new Vector2(0f, 0.01f)).ToTileCoordinates();
				Tile tileSafely = Framing.GetTileSafely(point.X, point.Y);
				if (tileSafely.active() && tileSafely.type == 411 && tileSafely.frameY == 0 && tileSafely.frameX < 36)
				{
					Wiring.HitSwitch(point.X, point.Y);
					NetMessage.SendData(59, -1, -1, "", point.X, (float)point.Y, 0f, 0f, 0, 0, 0);
				}
			}
		}

		private void TryBouncingBlocks(bool Falling)
		{
			if ((this.velocity.Y >= 5f || this.velocity.Y <= -5f) && !this.wet)
			{
				int num = 0;
				bool flag = false;
				foreach (Point current in this.TouchedTiles)
				{
					Tile tile = Main.tile[current.X, current.Y];
					if (tile != null && tile.active() && tile.nactive() && Main.tileBouncy[(int)tile.type])
					{
						flag = true;
						num = current.Y;
						break;
					}
				}
				if (flag)
				{
					this.velocity.Y = this.velocity.Y * -0.8f;
					if (this.controlJump)
					{
						this.velocity.Y = MathHelper.Clamp(this.velocity.Y, -13f, 13f);
					}
					this.position.Y = (float)(num * 16 - ((this.velocity.Y < 0f) ? this.height : -16));
					this.FloorVisuals(Falling);
					this.velocity.Y = MathHelper.Clamp(this.velocity.Y, -20f, 20f);
					if (this.velocity.Y * this.gravDir < 0f)
					{
						this.fallStart = (int)this.position.Y / 16;
					}
				}
			}
		}

		private void GrabItems(int i)
		{
			for (int j = 0; j < 400; j++)
			{
				if (Main.item[j].active && Main.item[j].noGrabDelay == 0 && Main.item[j].owner == i && ItemLoader.CanPickup(Main.item[j], this))
				{
					int num = Player.defaultItemGrabRange;
					if (this.goldRing && Main.item[j].type >= 71 && Main.item[j].type <= 74)
					{
						num += Item.coinGrabRange;
					}
					if (this.manaMagnet && (Main.item[j].type == 184 || Main.item[j].type == 1735 || Main.item[j].type == 1868))
					{
						num += Item.manaGrabRange;
					}
					if (this.lifeMagnet && (Main.item[j].type == 58 || Main.item[j].type == 1734 || Main.item[j].type == 1867))
					{
						num += Item.lifeGrabRange;
					}
					if (Main.item[j].type == 3822)
					{
						num += 50;
					}
					if (ItemID.Sets.NebulaPickup[Main.item[j].type])
					{
						num += 100;
					}
					ItemLoader.GrabRange(Main.item[j], this, ref num);
					if (new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height).Intersects(new Rectangle((int)Main.item[j].position.X, (int)Main.item[j].position.Y, Main.item[j].width, Main.item[j].height)))
					{
						if (i == Main.myPlayer && (this.inventory[this.selectedItem].type != 0 || this.itemAnimation <= 0))
						{
							if (!ItemLoader.OnPickup(Main.item[j], this))
							{
								Main.item[j] = new Item();
								if (Main.netMode == 1)
								{
									NetMessage.SendData(21, -1, -1, "", j, 0f, 0f, 0f, 0, 0, 0);
								}
								continue;
							}
							if (ItemID.Sets.NebulaPickup[Main.item[j].type])
							{
								Main.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
								int num2 = Main.item[j].buffType;
								Main.item[j] = new Item();
								if (Main.netMode == 1)
								{
									NetMessage.SendData(102, -1, -1, "", i, (float)num2, base.Center.X, base.Center.Y, 0, 0, 0);
									NetMessage.SendData(21, -1, -1, "", j, 0f, 0f, 0f, 0, 0, 0);
								}
								else
								{
									this.NebulaLevelup(num2);
								}
							}
							if (Main.item[j].type == 58 || Main.item[j].type == 1734 || Main.item[j].type == 1867)
							{
								Main.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
								this.statLife += 20;
								if (Main.myPlayer == this.whoAmI)
								{
									this.HealEffect(20, true);
								}
								if (this.statLife > this.statLifeMax2)
								{
									this.statLife = this.statLifeMax2;
								}
								Main.item[j] = new Item();
								if (Main.netMode == 1)
								{
									NetMessage.SendData(21, -1, -1, "", j, 0f, 0f, 0f, 0, 0, 0);
								}
							}
							else if (Main.item[j].type == 184 || Main.item[j].type == 1735 || Main.item[j].type == 1868)
							{
								Main.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
								this.statMana += 100;
								if (Main.myPlayer == this.whoAmI)
								{
									this.ManaEffect(100);
								}
								if (this.statMana > this.statManaMax2)
								{
									this.statMana = this.statManaMax2;
								}
								Main.item[j] = new Item();
								if (Main.netMode == 1)
								{
									NetMessage.SendData(21, -1, -1, "", j, 0f, 0f, 0f, 0, 0, 0);
								}
							}
							else
							{
								Main.item[j] = this.GetItem(i, Main.item[j], false, false);
								if (Main.netMode == 1)
								{
									NetMessage.SendData(21, -1, -1, "", j, 0f, 0f, 0f, 0, 0, 0);
								}
							}
						}
					}
					else if (new Rectangle((int)this.position.X - num, (int)this.position.Y - num, this.width + num * 2, this.height + num * 2).Intersects(new Rectangle((int)Main.item[j].position.X, (int)Main.item[j].position.Y, Main.item[j].width, Main.item[j].height)) && (this.ItemSpace(Main.item[j]) || ItemLoader.ExtraPickupSpace(Main.item[j], this)))
					{
						Main.item[j].beingGrabbed = true;
						if (ItemLoader.GrabStyle(Main.item[j], this))
						{
						}
						else if (this.manaMagnet && (Main.item[j].type == 184 || Main.item[j].type == 1735 || Main.item[j].type == 1868))
						{
							float num3 = 12f;
							Vector2 vector = new Vector2(Main.item[j].position.X + (float)(Main.item[j].width / 2), Main.item[j].position.Y + (float)(Main.item[j].height / 2));
							float num4 = base.Center.X - vector.X;
							float num5 = base.Center.Y - vector.Y;
							float num6 = (float)Math.Sqrt((double)(num4 * num4 + num5 * num5));
							num6 = num3 / num6;
							num4 *= num6;
							num5 *= num6;
							int num7 = 5;
							Main.item[j].velocity.X = (Main.item[j].velocity.X * (float)(num7 - 1) + num4) / (float)num7;
							Main.item[j].velocity.Y = (Main.item[j].velocity.Y * (float)(num7 - 1) + num5) / (float)num7;
						}
						else if (this.lifeMagnet && (Main.item[j].type == 58 || Main.item[j].type == 1734 || Main.item[j].type == 1867))
						{
							float num8 = 15f;
							Vector2 vector2 = new Vector2(Main.item[j].position.X + (float)(Main.item[j].width / 2), Main.item[j].position.Y + (float)(Main.item[j].height / 2));
							float num9 = base.Center.X - vector2.X;
							float num10 = base.Center.Y - vector2.Y;
							float num11 = (float)Math.Sqrt((double)(num9 * num9 + num10 * num10));
							num11 = num8 / num11;
							num9 *= num11;
							num10 *= num11;
							int num12 = 5;
							Main.item[j].velocity.X = (Main.item[j].velocity.X * (float)(num12 - 1) + num9) / (float)num12;
							Main.item[j].velocity.Y = (Main.item[j].velocity.Y * (float)(num12 - 1) + num10) / (float)num12;
						}
						else if (this.goldRing && Main.item[j].type >= 71 && Main.item[j].type <= 74)
						{
							float num13 = 12f;
							Vector2 vector3 = new Vector2(Main.item[j].position.X + (float)(Main.item[j].width / 2), Main.item[j].position.Y + (float)(Main.item[j].height / 2));
							float num14 = base.Center.X - vector3.X;
							float num15 = base.Center.Y - vector3.Y;
							float num16 = (float)Math.Sqrt((double)(num14 * num14 + num15 * num15));
							num16 = num13 / num16;
							num14 *= num16;
							num15 *= num16;
							int num17 = 5;
							Main.item[j].velocity.X = (Main.item[j].velocity.X * (float)(num17 - 1) + num14) / (float)num17;
							Main.item[j].velocity.Y = (Main.item[j].velocity.Y * (float)(num17 - 1) + num15) / (float)num17;
						}
						else if (ItemID.Sets.NebulaPickup[Main.item[j].type])
						{
							float num18 = 12f;
							Vector2 vector4 = new Vector2(Main.item[j].position.X + (float)(Main.item[j].width / 2), Main.item[j].position.Y + (float)(Main.item[j].height / 2));
							float num19 = base.Center.X - vector4.X;
							float num20 = base.Center.Y - vector4.Y;
							float num21 = (float)Math.Sqrt((double)(num19 * num19 + num20 * num20));
							num21 = num18 / num21;
							num19 *= num21;
							num20 *= num21;
							int num22 = 5;
							Main.item[j].velocity.X = (Main.item[j].velocity.X * (float)(num22 - 1) + num19) / (float)num22;
							Main.item[j].velocity.Y = (Main.item[j].velocity.Y * (float)(num22 - 1) + num20) / (float)num22;
						}
						else
						{
							if ((double)this.position.X + (double)this.width * 0.5 > (double)Main.item[j].position.X + (double)Main.item[j].width * 0.5)
							{
								if (Main.item[j].velocity.X < Player.itemGrabSpeedMax + this.velocity.X)
								{
									Item expr_AA7_cp_0 = Main.item[j];
									expr_AA7_cp_0.velocity.X = expr_AA7_cp_0.velocity.X + Player.itemGrabSpeed;
								}
								if (Main.item[j].velocity.X < 0f)
								{
									Item expr_ADF_cp_0 = Main.item[j];
									expr_ADF_cp_0.velocity.X = expr_ADF_cp_0.velocity.X + Player.itemGrabSpeed * 0.75f;
								}
							}
							else
							{
								if (Main.item[j].velocity.X > -Player.itemGrabSpeedMax + this.velocity.X)
								{
									Item expr_B29_cp_0 = Main.item[j];
									expr_B29_cp_0.velocity.X = expr_B29_cp_0.velocity.X - Player.itemGrabSpeed;
								}
								if (Main.item[j].velocity.X > 0f)
								{
									Item expr_B5E_cp_0 = Main.item[j];
									expr_B5E_cp_0.velocity.X = expr_B5E_cp_0.velocity.X - Player.itemGrabSpeed * 0.75f;
								}
							}
							if ((double)this.position.Y + (double)this.height * 0.5 > (double)Main.item[j].position.Y + (double)Main.item[j].height * 0.5)
							{
								if (Main.item[j].velocity.Y < Player.itemGrabSpeedMax)
								{
									Item expr_BE3_cp_0 = Main.item[j];
									expr_BE3_cp_0.velocity.Y = expr_BE3_cp_0.velocity.Y + Player.itemGrabSpeed;
								}
								if (Main.item[j].velocity.Y < 0f)
								{
									Item expr_C1B_cp_0 = Main.item[j];
									expr_C1B_cp_0.velocity.Y = expr_C1B_cp_0.velocity.Y + Player.itemGrabSpeed * 0.75f;
								}
							}
							else
							{
								if (Main.item[j].velocity.Y > -Player.itemGrabSpeedMax)
								{
									Item expr_C59_cp_0 = Main.item[j];
									expr_C59_cp_0.velocity.Y = expr_C59_cp_0.velocity.Y - Player.itemGrabSpeed;
								}
								if (Main.item[j].velocity.Y > 0f)
								{
									Item expr_C8E_cp_0 = Main.item[j];
									expr_C8E_cp_0.velocity.Y = expr_C8E_cp_0.velocity.Y - Player.itemGrabSpeed * 0.75f;
								}
							}
						}
					}
				}
			}
		}

		public bool SellItem(int price, int stack)
		{
			if (price <= 0)
			{
				return false;
			}
			Item[] array = new Item[58];
			for (int i = 0; i < 58; i++)
			{
				array[i] = new Item();
				array[i] = this.inventory[i].Clone();
			}
			int j = price / 5;
			if (j < 1)
			{
				j = 1;
			}
			j *= stack;
			bool flag = false;
			while (j >= 1000000)
			{
				if (flag)
				{
					break;
				}
				int num = -1;
				for (int k = 53; k >= 0; k--)
				{
					if (num == -1 && (this.inventory[k].type == 0 || this.inventory[k].stack == 0))
					{
						num = k;
					}
					while (this.inventory[k].type == 74 && this.inventory[k].stack < this.inventory[k].maxStack && j >= 1000000)
					{
						this.inventory[k].stack++;
						j -= 1000000;
						this.DoCoins(k);
						if (this.inventory[k].stack == 0 && num == -1)
						{
							num = k;
						}
					}
				}
				if (j >= 1000000)
				{
					if (num == -1)
					{
						flag = true;
					}
					else
					{
						this.inventory[num].SetDefaults(74, false);
						j -= 1000000;
					}
				}
			}
			while (j >= 10000)
			{
				if (flag)
				{
					break;
				}
				int num2 = -1;
				for (int l = 53; l >= 0; l--)
				{
					if (num2 == -1 && (this.inventory[l].type == 0 || this.inventory[l].stack == 0))
					{
						num2 = l;
					}
					while (this.inventory[l].type == 73 && this.inventory[l].stack < this.inventory[l].maxStack && j >= 10000)
					{
						this.inventory[l].stack++;
						j -= 10000;
						this.DoCoins(l);
						if (this.inventory[l].stack == 0 && num2 == -1)
						{
							num2 = l;
						}
					}
				}
				if (j >= 10000)
				{
					if (num2 == -1)
					{
						flag = true;
					}
					else
					{
						this.inventory[num2].SetDefaults(73, false);
						j -= 10000;
					}
				}
			}
			while (j >= 100)
			{
				if (flag)
				{
					break;
				}
				int num3 = -1;
				for (int m = 53; m >= 0; m--)
				{
					if (num3 == -1 && (this.inventory[m].type == 0 || this.inventory[m].stack == 0))
					{
						num3 = m;
					}
					while (this.inventory[m].type == 72 && this.inventory[m].stack < this.inventory[m].maxStack && j >= 100)
					{
						this.inventory[m].stack++;
						j -= 100;
						this.DoCoins(m);
						if (this.inventory[m].stack == 0 && num3 == -1)
						{
							num3 = m;
						}
					}
				}
				if (j >= 100)
				{
					if (num3 == -1)
					{
						flag = true;
					}
					else
					{
						this.inventory[num3].SetDefaults(72, false);
						j -= 100;
					}
				}
			}
			while (j >= 1 && !flag)
			{
				int num4 = -1;
				for (int n = 53; n >= 0; n--)
				{
					if (num4 == -1 && (this.inventory[n].type == 0 || this.inventory[n].stack == 0))
					{
						num4 = n;
					}
					while (this.inventory[n].type == 71 && this.inventory[n].stack < this.inventory[n].maxStack && j >= 1)
					{
						this.inventory[n].stack++;
						j--;
						this.DoCoins(n);
						if (this.inventory[n].stack == 0 && num4 == -1)
						{
							num4 = n;
						}
					}
				}
				if (j >= 1)
				{
					if (num4 == -1)
					{
						flag = true;
					}
					else
					{
						this.inventory[num4].SetDefaults(71, false);
						j--;
					}
				}
			}
			if (flag)
			{
				for (int num5 = 0; num5 < 58; num5++)
				{
					this.inventory[num5] = array[num5].Clone();
				}
				return false;
			}
			return true;
		}

		public bool BuyItem(int price, int customCurrency = -1)
		{
			if (customCurrency != -1)
			{
				return CustomCurrencyManager.BuyItem(this, price, customCurrency);
			}
			bool flag;
			long num = Utils.CoinsCount(out flag, this.inventory, new int[]
				{
					58,
					57,
					56,
					55,
					54
				});
			long num2 = Utils.CoinsCount(out flag, this.bank.item, new int[0]);
			long num3 = Utils.CoinsCount(out flag, this.bank2.item, new int[0]);
			long num4 = Utils.CoinsCount(out flag, this.bank3.item, new int[0]);
			long num5 = Utils.CoinsCombineStacks(out flag, new long[]
				{
					num,
					num2,
					num3,
					num4
				});
			if (num5 < (long)price)
			{
				return false;
			}
			List<Item[]> list = new List<Item[]>();
			Dictionary<int, List<int>> dictionary = new Dictionary<int, List<int>>();
			List<Point> list2 = new List<Point>();
			List<Point> list3 = new List<Point>();
			List<Point> list4 = new List<Point>();
			List<Point> list5 = new List<Point>();
			List<Point> list6 = new List<Point>();
			list.Add(this.inventory);
			list.Add(this.bank.item);
			list.Add(this.bank2.item);
			list.Add(this.bank3.item);
			for (int i = 0; i < list.Count; i++)
			{
				dictionary[i] = new List<int>();
			}
			dictionary[0] = new List<int>
			{
				58,
				57,
				56,
				55,
				54
			};
			for (int j = 0; j < list.Count; j++)
			{
				for (int k = 0; k < list[j].Length; k++)
				{
					if (!dictionary[j].Contains(k) && list[j][k].type >= 71 && list[j][k].type <= 74)
					{
						list3.Add(new Point(j, k));
					}
				}
			}
			int num6 = 0;
			for (int l = list[num6].Length - 1; l >= 0; l--)
			{
				if (!dictionary[num6].Contains(l) && (list[num6][l].type == 0 || list[num6][l].stack == 0))
				{
					list2.Add(new Point(num6, l));
				}
			}
			num6 = 1;
			for (int m = list[num6].Length - 1; m >= 0; m--)
			{
				if (!dictionary[num6].Contains(m) && (list[num6][m].type == 0 || list[num6][m].stack == 0))
				{
					list4.Add(new Point(num6, m));
				}
			}
			num6 = 2;
			for (int n = list[num6].Length - 1; n >= 0; n--)
			{
				if (!dictionary[num6].Contains(n) && (list[num6][n].type == 0 || list[num6][n].stack == 0))
				{
					list5.Add(new Point(num6, n));
				}
			}
			num6 = 3;
			for (int num7 = list[num6].Length - 1; num7 >= 0; num7--)
			{
				if (!dictionary[num6].Contains(num7) && (list[num6][num7].type == 0 || list[num6][num7].stack == 0))
				{
					list6.Add(new Point(num6, num7));
				}
			}
			bool flag2 = Player.TryPurchasing(price, list, list3, list2, list4, list5, list6);
			return !flag2;
		}

		private static bool TryPurchasing(int price, List<Item[]> inv, List<Point> slotCoins, List<Point> slotsEmpty, List<Point> slotEmptyBank, List<Point> slotEmptyBank2, List<Point> slotEmptyBank3)
		{
			long num = (long)price;
			Dictionary<Point, Item> dictionary = new Dictionary<Point, Item>();
			bool result = false;
			while (num > 0L)
			{
				long num2 = 1000000L;
				for (int i = 0; i < 4; i++)
				{
					if (num >= num2)
					{
						foreach (Point current in slotCoins)
						{
							if (inv[current.X][current.Y].type == 74 - i)
							{
								long num3 = num / num2;
								dictionary[current] = inv[current.X][current.Y].Clone();
								if (num3 < (long)inv[current.X][current.Y].stack)
								{
									inv[current.X][current.Y].stack -= (int)num3;
								}
								else
								{
									inv[current.X][current.Y].SetDefaults(0, false);
									slotsEmpty.Add(current);
								}
								num -= num2 * (long)(dictionary[current].stack - inv[current.X][current.Y].stack);
							}
						}
					}
					num2 /= 100L;
				}
				if (num > 0L)
				{
					if (slotsEmpty.Count <= 0)
					{
						foreach (KeyValuePair<Point, Item> current2 in dictionary)
						{
							inv[current2.Key.X][current2.Key.Y] = current2.Value.Clone();
						}
						result = true;
						break;
					}
					slotsEmpty.Sort(new Comparison<Point>(DelegateMethods.CompareYReverse));
					Point item = new Point(-1, -1);
					for (int j = 0; j < inv.Count; j++)
					{
						num2 = 10000L;
						for (int k = 0; k < 3; k++)
						{
							if (num >= num2)
							{
								foreach (Point current3 in slotCoins)
								{
									if (current3.X == j && inv[current3.X][current3.Y].type == 74 - k && inv[current3.X][current3.Y].stack >= 1)
									{
										List<Point> list = slotsEmpty;
										if (j == 1 && slotEmptyBank.Count > 0)
										{
											list = slotEmptyBank;
										}
										if (j == 2 && slotEmptyBank2.Count > 0)
										{
											list = slotEmptyBank2;
										}
										if (--inv[current3.X][current3.Y].stack <= 0)
										{
											inv[current3.X][current3.Y].SetDefaults(0, false);
											list.Add(current3);
										}
										dictionary[list[0]] = inv[list[0].X][list[0].Y].Clone();
										inv[list[0].X][list[0].Y].SetDefaults(73 - k, false);
										inv[list[0].X][list[0].Y].stack = 100;
										item = list[0];
										list.RemoveAt(0);
										break;
									}
								}
							}
							if (item.X != -1 || item.Y != -1)
							{
								break;
							}
							num2 /= 100L;
						}
						for (int l = 0; l < 2; l++)
						{
							if (item.X == -1 && item.Y == -1)
							{
								foreach (Point current4 in slotCoins)
								{
									if (current4.X == j && inv[current4.X][current4.Y].type == 73 + l && inv[current4.X][current4.Y].stack >= 1)
									{
										List<Point> list2 = slotsEmpty;
										if (j == 1 && slotEmptyBank.Count > 0)
										{
											list2 = slotEmptyBank;
										}
										if (j == 2 && slotEmptyBank2.Count > 0)
										{
											list2 = slotEmptyBank2;
										}
										if (j == 3 && slotEmptyBank3.Count > 0)
										{
											list2 = slotEmptyBank3;
										}
										if (--inv[current4.X][current4.Y].stack <= 0)
										{
											inv[current4.X][current4.Y].SetDefaults(0, false);
											list2.Add(current4);
										}
										dictionary[list2[0]] = inv[list2[0].X][list2[0].Y].Clone();
										inv[list2[0].X][list2[0].Y].SetDefaults(72 + l, false);
										inv[list2[0].X][list2[0].Y].stack = 100;
										item = list2[0];
										list2.RemoveAt(0);
										break;
									}
								}
							}
						}
						if (item.X != -1 && item.Y != -1)
						{
							slotCoins.Add(item);
							break;
						}
					}
					slotsEmpty.Sort(new Comparison<Point>(DelegateMethods.CompareYReverse));
					slotEmptyBank.Sort(new Comparison<Point>(DelegateMethods.CompareYReverse));
					slotEmptyBank2.Sort(new Comparison<Point>(DelegateMethods.CompareYReverse));
					slotEmptyBank3.Sort(new Comparison<Point>(DelegateMethods.CompareYReverse));
				}
			}
			return result;
		}

		public bool BuyItemOld(int price)
		{
			if (price == 0)
			{
				return true;
			}
			long num = 0L;
			Item[] array = new Item[54];
			for (int i = 0; i < 54; i++)
			{
				array[i] = new Item();
				array[i] = this.inventory[i].Clone();
				if (this.inventory[i].type == 71)
				{
					num += (long)this.inventory[i].stack;
				}
				if (this.inventory[i].type == 72)
				{
					num += (long)(this.inventory[i].stack * 100);
				}
				if (this.inventory[i].type == 73)
				{
					num += (long)(this.inventory[i].stack * 10000);
				}
				if (this.inventory[i].type == 74)
				{
					num += (long)(this.inventory[i].stack * 1000000);
				}
			}
			if (num >= (long)price)
			{
				int j = price;
				while (j > 0)
				{
					if (j >= 1000000)
					{
						for (int k = 0; k < 54; k++)
						{
							if (this.inventory[k].type == 74)
							{
								while (this.inventory[k].stack > 0 && j >= 1000000)
								{
									j -= 1000000;
									this.inventory[k].stack--;
									if (this.inventory[k].stack == 0)
									{
										this.inventory[k].type = 0;
									}
								}
							}
						}
					}
					if (j >= 10000)
					{
						for (int l = 0; l < 54; l++)
						{
							if (this.inventory[l].type == 73)
							{
								while (this.inventory[l].stack > 0 && j >= 10000)
								{
									j -= 10000;
									this.inventory[l].stack--;
									if (this.inventory[l].stack == 0)
									{
										this.inventory[l].type = 0;
									}
								}
							}
						}
					}
					if (j >= 100)
					{
						for (int m = 0; m < 54; m++)
						{
							if (this.inventory[m].type == 72)
							{
								while (this.inventory[m].stack > 0 && j >= 100)
								{
									j -= 100;
									this.inventory[m].stack--;
									if (this.inventory[m].stack == 0)
									{
										this.inventory[m].type = 0;
									}
								}
							}
						}
					}
					if (j >= 1)
					{
						for (int n = 0; n < 54; n++)
						{
							if (this.inventory[n].type == 71)
							{
								while (this.inventory[n].stack > 0 && j >= 1)
								{
									j--;
									this.inventory[n].stack--;
									if (this.inventory[n].stack == 0)
									{
										this.inventory[n].type = 0;
									}
								}
							}
						}
					}
					if (j > 0)
					{
						int num2 = -1;
						for (int num3 = 53; num3 >= 0; num3--)
						{
							if (this.inventory[num3].type == 0 || this.inventory[num3].stack == 0)
							{
								num2 = num3;
								break;
							}
						}
						if (num2 < 0)
						{
							for (int num4 = 0; num4 < 54; num4++)
							{
								this.inventory[num4] = array[num4].Clone();
							}
							return false;
						}
						bool flag = true;
						if (j >= 10000)
						{
							for (int num5 = 0; num5 < 58; num5++)
							{
								if (this.inventory[num5].type == 74 && this.inventory[num5].stack >= 1)
								{
									this.inventory[num5].stack--;
									if (this.inventory[num5].stack == 0)
									{
										this.inventory[num5].type = 0;
									}
									this.inventory[num2].SetDefaults(73, false);
									this.inventory[num2].stack = 100;
									flag = false;
									break;
								}
							}
						}
						else if (j >= 100)
						{
							for (int num6 = 0; num6 < 54; num6++)
							{
								if (this.inventory[num6].type == 73 && this.inventory[num6].stack >= 1)
								{
									this.inventory[num6].stack--;
									if (this.inventory[num6].stack == 0)
									{
										this.inventory[num6].type = 0;
									}
									this.inventory[num2].SetDefaults(72, false);
									this.inventory[num2].stack = 100;
									flag = false;
									break;
								}
							}
						}
						else if (j >= 1)
						{
							for (int num7 = 0; num7 < 54; num7++)
							{
								if (this.inventory[num7].type == 72 && this.inventory[num7].stack >= 1)
								{
									this.inventory[num7].stack--;
									if (this.inventory[num7].stack == 0)
									{
										this.inventory[num7].type = 0;
									}
									this.inventory[num2].SetDefaults(71, false);
									this.inventory[num2].stack = 100;
									flag = false;
									break;
								}
							}
						}
						if (flag)
						{
							if (j < 10000)
							{
								for (int num8 = 0; num8 < 54; num8++)
								{
									if (this.inventory[num8].type == 73 && this.inventory[num8].stack >= 1)
									{
										this.inventory[num8].stack--;
										if (this.inventory[num8].stack == 0)
										{
											this.inventory[num8].type = 0;
										}
										this.inventory[num2].SetDefaults(72, false);
										this.inventory[num2].stack = 100;
										flag = false;
										break;
									}
								}
							}
							if (flag && j < 1000000)
							{
								for (int num9 = 0; num9 < 54; num9++)
								{
									if (this.inventory[num9].type == 74 && this.inventory[num9].stack >= 1)
									{
										this.inventory[num9].stack--;
										if (this.inventory[num9].stack == 0)
										{
											this.inventory[num9].type = 0;
										}
										this.inventory[num2].SetDefaults(73, false);
										this.inventory[num2].stack = 100;
										break;
									}
								}
							}
						}
					}
				}
				return true;
			}
			return false;
		}

		public void AdjTiles()
		{
			int num = 4;
			int num2 = 3;
			for (int i = 0; i < this.adjTile.Length; i++)
			{
				this.oldAdjTile[i] = this.adjTile[i];
				this.adjTile[i] = false;
			}
			this.oldAdjWater = this.adjWater;
			this.adjWater = false;
			this.oldAdjHoney = this.adjHoney;
			this.adjHoney = false;
			this.oldAdjLava = this.adjLava;
			this.adjLava = false;
			this.alchemyTable = false;
			int num3 = (int)((this.position.X + (float)(this.width / 2)) / 16f);
			int num4 = (int)((this.position.Y + (float)this.height) / 16f);
			for (int j = num3 - num; j <= num3 + num; j++)
			{
				for (int k = num4 - num2; k < num4 + num2; k++)
				{
					if (Main.tile[j, k].active())
					{
						this.adjTile[(int)Main.tile[j, k].type] = true;
						if (Main.tile[j, k].type == 302)
						{
							this.adjTile[17] = true;
						}
						if (Main.tile[j, k].type == 77)
						{
							this.adjTile[17] = true;
						}
						if (Main.tile[j, k].type == 133)
						{
							this.adjTile[17] = true;
							this.adjTile[77] = true;
						}
						if (Main.tile[j, k].type == 134)
						{
							this.adjTile[16] = true;
						}
						if (Main.tile[j, k].type == 354)
						{
							this.adjTile[14] = true;
						}
						if (Main.tile[j, k].type == 355)
						{
							this.adjTile[13] = true;
							this.adjTile[14] = true;
							this.alchemyTable = true;
						}
						TileLoader.AdjTiles(this, Main.tile[j, k].type);
					}
					if (Main.tile[j, k].liquid > 200 && Main.tile[j, k].liquidType() == 0)
					{
						this.adjWater = true;
					}
					if (Main.tile[j, k].liquid > 200 && Main.tile[j, k].liquidType() == 2)
					{
						this.adjHoney = true;
					}
					if (Main.tile[j, k].liquid > 200 && Main.tile[j, k].liquidType() == 1)
					{
						this.adjLava = true;
					}
				}
			}
			if (Main.playerInventory)
			{
				bool flag = false;
				for (int l = 0; l < this.adjTile.Length; l++)
				{
					if (this.oldAdjTile[l] != this.adjTile[l])
					{
						flag = true;
						break;
					}
				}
				if (this.adjWater != this.oldAdjWater)
				{
					flag = true;
				}
				if (this.adjHoney != this.oldAdjHoney)
				{
					flag = true;
				}
				if (this.adjLava != this.oldAdjLava)
				{
					flag = true;
				}
				if (flag)
				{
					Recipe.FindRecipes();
				}
			}
		}

		public void PlayerFrame()
		{
			if (this.swimTime > 0)
			{
				this.swimTime--;
				if (!this.wet)
				{
					this.swimTime = 0;
				}
			}
			this.head = this.armor[0].headSlot;
			this.body = this.armor[1].bodySlot;
			this.legs = this.armor[2].legSlot;
			for (int i = 3; i < 8 + this.extraAccessorySlots; i++)
			{
				if (this.armor[i].shieldSlot == 5 && this.eocDash > 0 && this.shield == -1)
				{
					this.shield = this.armor[i].shieldSlot;
				}
				if (this.shieldRaised && this.shield == -1 && this.armor[i].shieldSlot != -1)
				{
					this.shield = this.armor[i].shieldSlot;
				}
				if ((this.shield <= 0 || this.armor[i].frontSlot < 1 || this.armor[i].frontSlot > 4) && (this.front < 1 || this.front > 4 || this.armor[i].shieldSlot <= 0))
				{
					if (this.armor[i].wingSlot > 0)
					{
						if (this.hideVisual[i] && (this.velocity.Y == 0f || this.mount.Active))
						{
							goto IL_33F;
						}
						this.wings = (int)this.armor[i].wingSlot;
					}
					if (!this.hideVisual[i])
					{
						if (this.armor[i].stringColor > 0)
						{
							this.stringColor = this.armor[i].stringColor;
						}
						if (this.armor[i].handOnSlot > 0)
						{
							this.handon = this.armor[i].handOnSlot;
						}
						if (this.armor[i].handOffSlot > 0)
						{
							this.handoff = this.armor[i].handOffSlot;
						}
						if (this.armor[i].backSlot > 0)
						{
							this.back = this.armor[i].backSlot;
							this.front = -1;
						}
						if (this.armor[i].frontSlot > 0)
						{
							this.front = this.armor[i].frontSlot;
						}
						if (this.armor[i].shoeSlot > 0)
						{
							this.shoe = this.armor[i].shoeSlot;
						}
						if (this.armor[i].waistSlot > 0)
						{
							this.waist = this.armor[i].waistSlot;
						}
						if (this.armor[i].shieldSlot > 0)
						{
							this.shield = this.armor[i].shieldSlot;
						}
						if (this.armor[i].neckSlot > 0)
						{
							this.neck = this.armor[i].neckSlot;
						}
						if (this.armor[i].faceSlot > 0)
						{
							this.face = this.armor[i].faceSlot;
						}
						if (this.armor[i].balloonSlot > 0)
						{
							this.balloon = this.armor[i].balloonSlot;
						}
						if (this.armor[i].type == 3580)
						{
							this.yoraiz0rEye = i - 2;
						}
						if (this.armor[i].type == 3581)
						{
							this.yoraiz0rDarkness = true;
						}
					}
				}
				IL_33F:
				;
			}
			for (int j = 13; j < 18 + this.extraAccessorySlots; j++)
			{
				if (this.armor[j].stringColor > 0)
				{
					this.stringColor = this.armor[j].stringColor;
				}
				if (this.armor[j].handOnSlot > 0)
				{
					this.handon = this.armor[j].handOnSlot;
				}
				if (this.armor[j].handOffSlot > 0)
				{
					this.handoff = this.armor[j].handOffSlot;
				}
				if (this.armor[j].backSlot > 0)
				{
					this.back = this.armor[j].backSlot;
					this.front = -1;
				}
				if (this.armor[j].frontSlot > 0)
				{
					this.front = this.armor[j].frontSlot;
				}
				if (this.armor[j].shoeSlot > 0)
				{
					this.shoe = this.armor[j].shoeSlot;
				}
				if (this.armor[j].waistSlot > 0)
				{
					this.waist = this.armor[j].waistSlot;
				}
				if (this.armor[j].shieldSlot > 0)
				{
					this.shield = this.armor[j].shieldSlot;
				}
				if (this.armor[j].neckSlot > 0)
				{
					this.neck = this.armor[j].neckSlot;
				}
				if (this.armor[j].faceSlot > 0)
				{
					this.face = this.armor[j].faceSlot;
				}
				if (this.armor[j].balloonSlot > 0)
				{
					this.balloon = this.armor[j].balloonSlot;
				}
				if (this.armor[j].wingSlot > 0)
				{
					this.wings = (int)this.armor[j].wingSlot;
				}
				if (this.armor[j].type == 3580)
				{
					this.yoraiz0rEye = j - 2;
				}
				if (this.armor[j].type == 3581)
				{
					this.yoraiz0rDarkness = true;
				}
			}
			if (this.armor[10].headSlot >= 0)
			{
				this.head = this.armor[10].headSlot;
			}
			if (this.armor[11].bodySlot >= 0)
			{
				this.body = this.armor[11].bodySlot;
			}
			if (this.armor[12].legSlot >= 0)
			{
				this.legs = this.armor[12].legSlot;
			}
			this.wearsRobe = false;
			bool flag = false;
			int num = Player.SetMatch(1, this.body, this.Male, ref this.wearsRobe);
			if (num != -1)
			{
				this.legs = num;
			}
			num = Player.SetMatch(2, this.legs, this.Male, ref flag);
			if (num != -1)
			{
				this.legs = num;
			}
			num = Player.SetMatch(0, this.head, this.Male, ref flag);
			if (num != -1)
			{
				this.head = num;
			}
			if (this.body == 93)
			{
				this.shield = 0;
				this.handoff = 0;
			}
			if (this.body == 206 && this.back == -1)
			{
				this.back = 12;
			}
			if (this.body == 207 && this.back == -1)
			{
				this.back = 13;
			}
			if (this.body == 205 && this.back == -1)
			{
				this.back = 11;
			}
			if (this.legs == 67)
			{
				this.shoe = 0;
			}
			if (this.legs == 140)
			{
				this.shoe = 0;
			}
			if ((this.wereWolf || this.forceWerewolf) && !this.hideWolf)
			{
				this.legs = 20;
				this.body = 21;
				this.head = 38;
			}
			bool flag2 = this.wet && !this.lavaWet && (!this.mount.Active || this.mount.Type != 3);
			if (this.merman || this.forceMerman)
			{
				if (!this.hideMerman)
				{
					this.head = 39;
					this.legs = 21;
					this.body = 22;
				}
				if (flag2)
				{
					this.wings = 0;
				}
			}
			this.socialShadowRocketBoots = false;
			this.socialIgnoreLight = false;
			this.socialGhost = false;
			this.armorEffectDrawShadow = false;
			this.armorEffectDrawShadowSubtle = false;
			this.armorEffectDrawOutlines = false;
			this.armorEffectDrawShadowLokis = false;
			this.armorEffectDrawShadowBasilisk = false;
			this.armorEffectDrawOutlinesForbidden = false;
			this.armorEffectDrawShadowEOCShield = false;
			if (this.head == 101 && this.body == 66 && this.legs == 55)
			{
				this.socialGhost = true;
			}
			if (this.head == 156 && this.body == 66 && this.legs == 55)
			{
				this.socialGhost = true;
			}
			this.SetArmorEffectVisuals(this);
			this.hermesStepSound.SoundType = 17;
			this.hermesStepSound.SoundStyle = -1;
			this.hermesStepSound.IntendedCooldown = 9;
			if (this.head == 99 && this.body == 65 && this.legs == 54)
			{
				this.turtleArmor = true;
			}
			if (this.head == 162 && this.body == 170 && this.legs == 105)
			{
				this.spiderArmor = true;
			}
			if ((this.head == 75 || this.head == 7) && this.body == 7 && this.legs == 7)
			{
				this.boneArmor = true;
			}
			if (this.legs == 140)
			{
				this.hermesStepSound.SoundType = 2;
				this.hermesStepSound.SoundStyle = 24;
				this.hermesStepSound.IntendedCooldown = 6;
			}
			ItemLoader.PreUpdateVanitySet(this);
			if (this.wings > 0)
			{
				this.back = -1;
				this.front = -1;
			}
			if (this.head > 0 && this.face != 7)
			{
				this.face = -1;
			}
			if (this.webbed || this.frozen || this.stoned)
			{
				return;
			}
			if (Main.gamePaused && !Main.gameMenu)
			{
				return;
			}
			PlayerHooks.FrameEffects(this);
			ItemLoader.UpdateVanity(this);
			if (((this.body == 68 && this.legs == 57 && this.head == 106) || (this.body == 74 && this.legs == 63 && this.head == 106)) && Main.rand.Next(10) == 0)
			{
				int num2 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X * 2f, this.position.Y - 2f - this.velocity.Y * 2f), this.width, this.height, 43, 0f, 0f, 100, new Color(255, 0, 255), 0.3f);
				Main.dust[num2].fadeIn = 0.8f;
				Main.dust[num2].noGravity = true;
				Main.dust[num2].velocity *= 2f;
				Main.dust[num2].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
			}
			if (this.wings == 27)
			{
				float num3 = 0.4f * this.stealth;
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, num3, num3 * 0.9f, num3 * 0.2f);
			}
			if (this.head == 5 && this.body == 5 && this.legs == 5)
			{
				this.socialShadowRocketBoots = true;
			}
			if (this.head == 5 && this.body == 5 && this.legs == 5 && Main.rand.Next(10) == 0)
			{
				int num4 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 14, 0f, 0f, 200, default(Color), 1.2f);
				Main.dust[num4].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
			}
			if (this.head == 76 && this.body == 49 && this.legs == 45)
			{
				this.socialShadowRocketBoots = true;
			}
			if (this.head == 74 && this.body == 48 && this.legs == 44)
			{
				this.socialShadowRocketBoots = true;
			}
			if (this.head == 74 && this.body == 48 && this.legs == 44 && Main.rand.Next(10) == 0)
			{
				int num5 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 14, 0f, 0f, 200, default(Color), 1.2f);
				Main.dust[num5].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
			}
			if (this.head == 57 && this.body == 37 && this.legs == 35)
			{
				int maxValue = 10;
				if (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) > 1f)
				{
					maxValue = 2;
				}
				if (Main.rand.Next(maxValue) == 0)
				{
					int num6 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 115, 0f, 0f, 140, default(Color), 0.75f);
					Main.dust[num6].noGravity = true;
					Main.dust[num6].fadeIn = 1.5f;
					Main.dust[num6].velocity *= 0.3f;
					Main.dust[num6].velocity += this.velocity * 0.2f;
					Main.dust[num6].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
				}
			}
			if (this.head == 6 && this.body == 6 && this.legs == 6 && Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) > 1f && !this.rocketFrame)
			{
				for (int k = 0; k < 2; k++)
				{
					int num7 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X * 2f, this.position.Y - 2f - this.velocity.Y * 2f), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num7].noGravity = true;
					Main.dust[num7].noLight = true;
					Dust expr_E7E_cp_0 = Main.dust[num7];
					expr_E7E_cp_0.velocity.X = expr_E7E_cp_0.velocity.X - this.velocity.X * 0.5f;
					Dust expr_EA8_cp_0 = Main.dust[num7];
					expr_EA8_cp_0.velocity.Y = expr_EA8_cp_0.velocity.Y - this.velocity.Y * 0.5f;
					Main.dust[num7].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
				}
			}
			if (this.head == 8 && this.body == 8 && this.legs == 8 && Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) > 1f)
			{
				int num8 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X * 2f, this.position.Y - 2f - this.velocity.Y * 2f), this.width, this.height, 40, 0f, 0f, 50, default(Color), 1.4f);
				Main.dust[num8].noGravity = true;
				Main.dust[num8].velocity.X = this.velocity.X * 0.25f;
				Main.dust[num8].velocity.Y = this.velocity.Y * 0.25f;
				Main.dust[num8].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
			}
			if (this.head == 9 && this.body == 9 && this.legs == 9 && Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y) > 1f && !this.rocketFrame)
			{
				for (int l = 0; l < 2; l++)
				{
					int num9 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X * 2f, this.position.Y - 2f - this.velocity.Y * 2f), this.width, this.height, 6, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num9].noGravity = true;
					Main.dust[num9].noLight = true;
					Dust expr_1129_cp_0 = Main.dust[num9];
					expr_1129_cp_0.velocity.X = expr_1129_cp_0.velocity.X - this.velocity.X * 0.5f;
					Dust expr_1153_cp_0 = Main.dust[num9];
					expr_1153_cp_0.velocity.Y = expr_1153_cp_0.velocity.Y - this.velocity.Y * 0.5f;
					Main.dust[num9].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
				}
			}
			if (this.body == 18 && this.legs == 17 && (this.head == 32 || this.head == 33 || this.head == 34) && Main.rand.Next(10) == 0)
			{
				int num10 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X * 2f, this.position.Y - 2f - this.velocity.Y * 2f), this.width, this.height, 43, 0f, 0f, 100, default(Color), 0.3f);
				Main.dust[num10].fadeIn = 0.8f;
				Main.dust[num10].velocity *= 0f;
				Main.dust[num10].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
			}
			if (this.body == 24 && this.legs == 23 && (this.head == 42 || this.head == 43 || this.head == 41) && this.velocity.X != 0f && this.velocity.Y != 0f && Main.rand.Next(10) == 0)
			{
				int num11 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X * 2f, this.position.Y - 2f - this.velocity.Y * 2f), this.width, this.height, 43, 0f, 0f, 100, default(Color), 0.3f);
				Main.dust[num11].fadeIn = 0.8f;
				Main.dust[num11].velocity *= 0f;
				Main.dust[num11].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
			}
			if (this.body == 36 && this.head == 56 && this.velocity.X != 0f && this.velocity.Y == 0f)
			{
				for (int m = 0; m < 2; m++)
				{
					int num12 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)((this.gravDir == 1f) ? (this.height - 2) : -4)), this.width, 6, 106, 0f, 0f, 100, default(Color), 0.1f);
					Main.dust[num12].fadeIn = 1f;
					Main.dust[num12].noGravity = true;
					Main.dust[num12].velocity *= 0.2f;
					Main.dust[num12].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
				}
			}
			if (this.body == 27 && this.head == 46 && this.legs == 26)
			{
				this.frostArmor = true;
				if (this.velocity.X != 0f && this.velocity.Y == 0f && this.miscCounter % 2 == 0)
				{
					for (int n = 0; n < 2; n++)
					{
						int num13;
						if (n == 0)
						{
							num13 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height + this.gfxOffY), this.width / 2, 6, 76, 0f, 0f, 0, default(Color), 1.35f);
						}
						else
						{
							num13 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2), this.position.Y + (float)this.height + this.gfxOffY), this.width / 2, 6, 76, 0f, 0f, 0, default(Color), 1.35f);
						}
						Main.dust[num13].scale *= 1f + (float)Main.rand.Next(20, 40) * 0.01f;
						Main.dust[num13].noGravity = true;
						Main.dust[num13].noLight = true;
						Main.dust[num13].velocity *= 0.001f;
						Dust expr_1696_cp_0 = Main.dust[num13];
						expr_1696_cp_0.velocity.Y = expr_1696_cp_0.velocity.Y - 0.003f;
						Main.dust[num13].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
					}
				}
			}
			ItemLoader.UpdateVanitySet(this);
			this.bodyFrame.Width = 40;
			this.bodyFrame.Height = 56;
			this.legFrame.Width = 40;
			this.legFrame.Height = 56;
			this.bodyFrame.X = 0;
			this.legFrame.X = 0;
			if (this.mount.Active)
			{
				this.legFrameCounter = 0.0;
				this.legFrame.Y = this.legFrame.Height * 6;
				if (this.velocity.Y != 0f)
				{
					if (this.mount.FlyTime > 0 && this.jump == 0 && this.controlJump && !this.mount.CanHover)
					{
						if (this.mount.Type == 0)
						{
							if (this.direction > 0)
							{
								if (Main.rand.Next(4) == 0)
								{
									int num14 = Dust.NewDust(new Vector2(base.Center.X - 22f, this.position.Y + (float)this.height - 6f), 20, 10, 64, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, 255, default(Color), 1f);
									Main.dust[num14].velocity *= 0.1f;
									Main.dust[num14].noLight = true;
								}
								if (Main.rand.Next(4) == 0)
								{
									int num15 = Dust.NewDust(new Vector2(base.Center.X + 12f, this.position.Y + (float)this.height - 6f), 20, 10, 64, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, 255, default(Color), 1f);
									Main.dust[num15].velocity *= 0.1f;
									Main.dust[num15].noLight = true;
								}
							}
							else
							{
								if (Main.rand.Next(4) == 0)
								{
									int num16 = Dust.NewDust(new Vector2(base.Center.X - 32f, this.position.Y + (float)this.height - 6f), 20, 10, 64, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, 255, default(Color), 1f);
									Main.dust[num16].velocity *= 0.1f;
									Main.dust[num16].noLight = true;
								}
								if (Main.rand.Next(4) == 0)
								{
									int num17 = Dust.NewDust(new Vector2(base.Center.X + 2f, this.position.Y + (float)this.height - 6f), 20, 10, 64, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, 255, default(Color), 1f);
									Main.dust[num17].velocity *= 0.1f;
									Main.dust[num17].noLight = true;
								}
							}
						}
						this.mount.UpdateFrame(this, 3, this.velocity);
					}
					else if (this.wet)
					{
						this.mount.UpdateFrame(this, 4, this.velocity);
					}
					else
					{
						this.mount.UpdateFrame(this, 2, this.velocity);
					}
				}
				else if (this.velocity.X == 0f || ((this.slippy || this.slippy2 || this.windPushed) && !this.controlLeft && !this.controlRight))
				{
					this.mount.UpdateFrame(this, 0, this.velocity);
				}
				else
				{
					this.mount.UpdateFrame(this, 1, this.velocity);
				}
			}
			else if (this.legs == 140)
			{
				this.legFrameCounter = 0.0;
				this.legFrame.Y = this.legFrame.Height * (this.velocity.Y != 0f).ToInt();
				if (this.wings == 22 || this.wings == 28)
				{
					this.legFrame.Y = 0;
				}
			}
			else if (this.swimTime > 0)
			{
				this.legFrameCounter += 2.0;
				while (this.legFrameCounter > 8.0)
				{
					this.legFrameCounter -= 8.0;
					this.legFrame.Y = this.legFrame.Y + this.legFrame.Height;
				}
				if (this.legFrame.Y < this.legFrame.Height * 7)
				{
					this.legFrame.Y = this.legFrame.Height * 19;
				}
				else if (this.legFrame.Y > this.legFrame.Height * 19)
				{
					this.legFrame.Y = this.legFrame.Height * 7;
				}
			}
			else if (this.velocity.Y != 0f || this.grappling[0] > -1)
			{
				this.legFrameCounter = 0.0;
				this.legFrame.Y = this.legFrame.Height * 5;
				if (this.wings == 22 || this.wings == 28)
				{
					this.legFrame.Y = 0;
				}
			}
			else if (this.velocity.X != 0f)
			{
				if ((this.slippy || this.slippy2 || this.windPushed) && !this.controlLeft && !this.controlRight)
				{
					this.legFrameCounter = 0.0;
					this.legFrame.Y = 0;
				}
				else
				{
					this.legFrameCounter += (double)Math.Abs(this.velocity.X) * 1.3;
					while (this.legFrameCounter > 8.0)
					{
						this.legFrameCounter -= 8.0;
						this.legFrame.Y = this.legFrame.Y + this.legFrame.Height;
					}
					if (this.legFrame.Y < this.legFrame.Height * 7)
					{
						this.legFrame.Y = this.legFrame.Height * 19;
					}
					else if (this.legFrame.Y > this.legFrame.Height * 19)
					{
						this.legFrame.Y = this.legFrame.Height * 7;
					}
				}
			}
			else
			{
				this.legFrameCounter = 0.0;
				this.legFrame.Y = 0;
			}
			if (this.carpetFrame >= 0)
			{
				this.legFrameCounter = 0.0;
				this.legFrame.Y = 0;
			}
			if (this.sandStorm)
			{
				if (this.miscCounter % 4 == 0 && this.itemAnimation == 0)
				{
					this.ChangeDir(this.direction * -1);
					if (this.inventory[this.selectedItem].holdStyle == 2)
					{
						if (this.inventory[this.selectedItem].type == 946)
						{
							this.itemLocation.X = this.position.X + (float)this.width * 0.5f - (float)(16 * this.direction);
						}
						if (this.inventory[this.selectedItem].type == 186)
						{
							this.itemLocation.X = this.position.X + (float)this.width * 0.5f + (float)(6 * this.direction);
							this.itemRotation = 0.79f * (float)(-(float)this.direction);
						}
					}
				}
				this.legFrameCounter = 0.0;
				this.legFrame.Y = 0;
			}
			if (this.itemAnimation > 0 && this.inventory[this.selectedItem].useStyle != 10)
			{
				if (this.inventory[this.selectedItem].useStyle == 1 || this.inventory[this.selectedItem].type == 0)
				{
					if ((double)this.itemAnimation < (double)this.itemAnimationMax * 0.333)
					{
						this.bodyFrame.Y = this.bodyFrame.Height * 3;
						return;
					}
					if ((double)this.itemAnimation < (double)this.itemAnimationMax * 0.666)
					{
						this.bodyFrame.Y = this.bodyFrame.Height * 2;
						return;
					}
					this.bodyFrame.Y = this.bodyFrame.Height;
					return;
				}
				else if (this.inventory[this.selectedItem].useStyle == 2)
				{
					if ((double)this.itemAnimation > (double)this.itemAnimationMax * 0.5)
					{
						this.bodyFrame.Y = this.bodyFrame.Height * 3;
						return;
					}
					this.bodyFrame.Y = this.bodyFrame.Height * 2;
					return;
				}
				else if (this.inventory[this.selectedItem].useStyle == 3)
				{
					if ((double)this.itemAnimation > (double)this.itemAnimationMax * 0.666)
					{
						this.bodyFrame.Y = this.bodyFrame.Height * 3;
						return;
					}
					this.bodyFrame.Y = this.bodyFrame.Height * 3;
					return;
				}
				else
				{
					if (this.inventory[this.selectedItem].useStyle == 4)
					{
						this.bodyFrame.Y = this.bodyFrame.Height * 2;
						return;
					}
					if (this.inventory[this.selectedItem].useStyle == 5)
					{
						if (this.inventory[this.selectedItem].type == 281 || this.inventory[this.selectedItem].type == 986)
						{
							this.bodyFrame.Y = this.bodyFrame.Height * 2;
							return;
						}
						float num18 = this.itemRotation * (float)this.direction;
						this.bodyFrame.Y = this.bodyFrame.Height * 3;
						if ((double)num18 < -0.75)
						{
							this.bodyFrame.Y = this.bodyFrame.Height * 2;
							if (this.gravDir == -1f)
							{
								this.bodyFrame.Y = this.bodyFrame.Height * 4;
							}
						}
						if ((double)num18 > 0.6)
						{
							this.bodyFrame.Y = this.bodyFrame.Height * 4;
							if (this.gravDir == -1f)
							{
								this.bodyFrame.Y = this.bodyFrame.Height * 2;
								return;
								//patch file
							}
						}
					}
					else if (ItemLoader.UseItemFrame(this.inventory[this.selectedItem], this))
					{
						return;
					}
				}
			}
			else
			{
				if (this.mount.Active)
				{
					this.bodyFrameCounter = 0.0;
					this.bodyFrame.Y = this.bodyFrame.Height * this.mount.BodyFrame;
					return;
				}
				if (this.pulley)
				{
					if (this.pulleyDir == 2)
					{
						this.bodyFrame.Y = this.bodyFrame.Height;
						return;
					}
					this.bodyFrame.Y = this.bodyFrame.Height * 2;
					return;
				}
				else
				{
					if (this.inventory[this.selectedItem].holdStyle == 1 && (!this.wet || !this.inventory[this.selectedItem].noWet))
					{
						this.bodyFrame.Y = this.bodyFrame.Height * 3;
						return;
					}
					if (this.inventory[this.selectedItem].holdStyle == 2 && (!this.wet || !this.inventory[this.selectedItem].noWet))
					{
						this.bodyFrame.Y = this.bodyFrame.Height * 2;
						return;
					}
					if (this.inventory[this.selectedItem].holdStyle == 3)
					{
						this.bodyFrame.Y = this.bodyFrame.Height * 3;
						return;
					}
					if (ItemLoader.HoldItemFrame(this.inventory[this.selectedItem], this))
					{
						return;
					}
					if (this.shieldRaised)
					{
						this.bodyFrame.Y = this.bodyFrame.Height * 10;
						return;
					}
					if (this.grappling[0] >= 0)
					{
						this.sandStorm = false;
						this.dJumpEffectCloud = false;
						this.dJumpEffectSandstorm = false;
						this.dJumpEffectBlizzard = false;
						this.dJumpEffectFart = false;
						this.dJumpEffectSail = false;
						this.dJumpEffectUnicorn = false;
						Vector2 vector = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
						float num19 = 0f;
						float num20 = 0f;
						for (int num21 = 0; num21 < this.grapCount; num21++)
						{
							num19 += Main.projectile[this.grappling[num21]].position.X + (float)(Main.projectile[this.grappling[num21]].width / 2);
							num20 += Main.projectile[this.grappling[num21]].position.Y + (float)(Main.projectile[this.grappling[num21]].height / 2);
						}
						num19 /= (float)this.grapCount;
						num20 /= (float)this.grapCount;
						num19 -= vector.X;
						num20 -= vector.Y;
						if (num20 < 0f && Math.Abs(num20) > Math.Abs(num19))
						{
							this.bodyFrame.Y = this.bodyFrame.Height * 2;
							if (this.gravDir == -1f)
							{
								this.bodyFrame.Y = this.bodyFrame.Height * 4;
								return;
							}
						}
						else
						{
							if (num20 <= 0f || Math.Abs(num20) <= Math.Abs(num19))
							{
								this.bodyFrame.Y = this.bodyFrame.Height * 3;
								return;
							}
							this.bodyFrame.Y = this.bodyFrame.Height * 4;
							if (this.gravDir == -1f)
							{
								this.bodyFrame.Y = this.bodyFrame.Height * 2;
								return;
							}
						}
					}
					else if (this.swimTime > 0)
					{
						if (this.swimTime > 20)
						{
							this.bodyFrame.Y = 0;
							return;
						}
						if (this.swimTime > 10)
						{
							this.bodyFrame.Y = this.bodyFrame.Height * 5;
							return;
						}
						this.bodyFrame.Y = 0;
						return;
					}
					else
					{
						if (this.velocity.Y != 0f)
						{
							if (this.sliding)
							{
								this.bodyFrame.Y = this.bodyFrame.Height * 3;
							}
							else if (this.sandStorm || this.carpetFrame >= 0)
							{
								this.bodyFrame.Y = this.bodyFrame.Height * 6;
							}
							else if (this.eocDash > 0)
							{
								this.bodyFrame.Y = this.bodyFrame.Height * 6;
							}
							else if (this.wings > 0)
							{
								if (this.wings == 22 || this.wings == 28)
								{
									this.bodyFrame.Y = 0;
								}
								else if (this.velocity.Y > 0f)
								{
									if (this.controlJump)
									{
										this.bodyFrame.Y = this.bodyFrame.Height * 6;
									}
									else
									{
										this.bodyFrame.Y = this.bodyFrame.Height * 5;
									}
								}
								else
								{
									this.bodyFrame.Y = this.bodyFrame.Height * 6;
								}
							}
							else
							{
								this.bodyFrame.Y = this.bodyFrame.Height * 5;
							}
							this.bodyFrameCounter = 0.0;
							return;
						}
						if (this.velocity.X != 0f)
						{
							if (this.legs != 140)
							{
								this.bodyFrameCounter += (double)Math.Abs(this.velocity.X) * 1.5;
								this.bodyFrame.Y = this.legFrame.Y;
								return;
							}
							this.bodyFrameCounter += (double)(Math.Abs(this.velocity.X) * 0.5f);
							while (this.bodyFrameCounter > 8.0)
							{
								this.bodyFrameCounter -= 8.0;
								this.bodyFrame.Y = this.bodyFrame.Y + this.bodyFrame.Height;
							}
							if (this.bodyFrame.Y < this.bodyFrame.Height * 7)
							{
								this.bodyFrame.Y = this.bodyFrame.Height * 19;
								return;
							}
							if (this.bodyFrame.Y > this.bodyFrame.Height * 19)
							{
								this.bodyFrame.Y = this.bodyFrame.Height * 7;
								return;
							}
						}
						else
						{
							this.bodyFrameCounter = 0.0;
							this.bodyFrame.Y = 0;
						}
					}
				}
			}
		}

		public void SetArmorEffectVisuals(Player drawPlayer)
		{
			if (drawPlayer.head == 111 && drawPlayer.body == 73 && drawPlayer.legs == 62)
			{
				this.armorEffectDrawShadowSubtle = true;
				this.armorEffectDrawOutlines = true;
			}
			if (drawPlayer.head == 134 && drawPlayer.body == 95 && drawPlayer.legs == 79)
			{
				this.armorEffectDrawShadowSubtle = true;
				this.armorEffectDrawOutlines = true;
			}
			if (drawPlayer.head == 107 && drawPlayer.body == 69 && drawPlayer.legs == 58)
			{
				this.armorEffectDrawShadowSubtle = true;
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 108 && drawPlayer.body == 70 && drawPlayer.legs == 59)
			{
				this.armorEffectDrawShadowSubtle = true;
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 109 && drawPlayer.body == 71 && drawPlayer.legs == 60)
			{
				this.armorEffectDrawShadowSubtle = true;
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 110 && drawPlayer.body == 72 && drawPlayer.legs == 61)
			{
				this.armorEffectDrawShadowSubtle = true;
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 193 && drawPlayer.body == 194 && drawPlayer.legs == 134)
			{
				this.armorEffectDrawShadowSubtle = true;
				this.armorEffectDrawShadowLokis = true;
				this.armorEffectDrawOutlines = true;
			}
			if (drawPlayer.mount.Active && drawPlayer.mount.Type == 3 && drawPlayer.velocity.Y != 0f && !drawPlayer.SlimeDontHyperJump)
			{
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.mount.Active && drawPlayer.mount.Type == 10 && Math.Abs(drawPlayer.velocity.X) > drawPlayer.mount.DashSpeed - drawPlayer.mount.RunSpeed / 2f)
			{
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.mount.Active && drawPlayer.mount.Type == 14 && Math.Abs(drawPlayer.velocity.X) > drawPlayer.mount.RunSpeed / 2f)
			{
				this.armorEffectDrawShadowBasilisk = true;
			}
			if (drawPlayer.body == 67 && drawPlayer.legs == 56 && drawPlayer.head >= 103 && drawPlayer.head <= 105)
			{
				this.armorEffectDrawShadow = true;
			}
			if ((drawPlayer.head == 78 || drawPlayer.head == 79 || drawPlayer.head == 80) && drawPlayer.body == 51 && drawPlayer.legs == 47)
			{
				this.armorEffectDrawShadowSubtle = true;
			}
			if (drawPlayer.head == 200 && drawPlayer.body == 198 && drawPlayer.legs == 142)
			{
				this.armorEffectDrawShadowLokis = true;
				this.armorEffectDrawOutlinesForbidden = true;
			}
			if (drawPlayer.head == 171 && drawPlayer.body == 177 && drawPlayer.legs == 112)
			{
				this.armorEffectDrawShadow = true;
				this.armorEffectDrawOutlines = true;
			}
			if (drawPlayer.head == 169 && drawPlayer.body == 175 && drawPlayer.legs == 110)
			{
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 170 && drawPlayer.body == 176 && drawPlayer.legs == 111)
			{
				this.armorEffectDrawShadowLokis = true;
				this.armorEffectDrawOutlines = true;
			}
			if (drawPlayer.eocDash > 0)
			{
				this.armorEffectDrawShadowEOCShield = true;
			}
			else if (drawPlayer.dashDelay < 0)
			{
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 5 && drawPlayer.body == 5 && drawPlayer.legs == 5)
			{
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 74 && drawPlayer.body == 48 && drawPlayer.legs == 44)
			{
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 76 && drawPlayer.body == 49 && drawPlayer.legs == 45)
			{
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 7 && drawPlayer.body == 7 && drawPlayer.legs == 7)
			{
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 22 && drawPlayer.body == 14 && drawPlayer.legs == 14)
			{
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.dye[0].dye == 30 && drawPlayer.dye[1].dye == 30 && drawPlayer.dye[2].dye == 30 && drawPlayer.head == 4 && drawPlayer.body == 27 && drawPlayer.legs == 26)
			{
				this.armorEffectDrawShadow = true;
				this.armorEffectDrawOutlines = true;
			}
			if (drawPlayer.head == 189 && drawPlayer.body == 190 && drawPlayer.legs == 130)
			{
				this.armorEffectDrawOutlines = true;
			}
			if (drawPlayer.body == 17 && drawPlayer.legs == 16 && (drawPlayer.head == 29 || drawPlayer.head == 30 || drawPlayer.head == 31))
			{
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.body == 19 && drawPlayer.legs == 18 && (drawPlayer.head == 35 || drawPlayer.head == 36 || drawPlayer.head == 37))
			{
				this.armorEffectDrawOutlines = true;
			}
			if (drawPlayer.body == 24 && drawPlayer.legs == 23 && (drawPlayer.head == 41 || drawPlayer.head == 42 || drawPlayer.head == 43))
			{
				this.armorEffectDrawOutlines = true;
				this.armorEffectDrawShadow = true;
			}
			if (drawPlayer.head == 157 && drawPlayer.legs == 98 && drawPlayer.body != 105)
			{
				int arg_584_0 = drawPlayer.body;
			}
			if (drawPlayer.body == 36 && drawPlayer.head == 56)
			{
				this.armorEffectDrawOutlines = true;
			}
			ItemLoader.ArmorSetShadows(drawPlayer);
			// TODO, rename to this? SetArmorEffectVisuals
			if (drawPlayer.stoned || drawPlayer.stealth != 1f)
			{
				this.armorEffectDrawOutlines = false;
				this.armorEffectDrawShadow = false;
				this.armorEffectDrawShadowSubtle = false;
			}
		}

		public static int SetMatch(int armorslot, int type, bool male, ref bool somethingSpecial)
		{
			int num = -1;
			if (armorslot == 0 && type == 201)
			{
				num = (male ? 201 : 202);
			}
			if (armorslot == 1)
			{
				if (type <= 63)
				{
					if (type <= 36)
					{
						if (type != 15)
						{
							if (type == 36)
							{
								num = 89;
							}
						}
						else
						{
							num = 88;
						}
					}
					else
					{
						switch (type)
						{
							case 41:
								num = 97;
								break;
							case 42:
								num = 90;
								break;
							default:
								switch (type)
								{
									case 58:
										num = 91;
										break;
									case 59:
										num = 92;
										break;
									case 60:
										num = 93;
										break;
									case 61:
										num = 94;
										break;
									case 62:
										num = 95;
										break;
									case 63:
										num = 96;
										break;
								}
								break;
						}
					}
				}
				else if (type <= 167)
				{
					if (type != 77)
					{
						switch (type)
						{
							case 165:
								if (male)
								{
									num = 118;
								}
								else
								{
									num = 99;
								}
								break;
							case 166:
								if (male)
								{
									num = 119;
								}
								else
								{
									num = 100;
								}
								break;
							case 167:
								if (!male)
								{
									num = 102;
								}
								else
								{
									num = 101;
								}
								break;
						}
					}
					else
					{
						num = 121;
					}
				}
				else
				{
					switch (type)
					{
						case 180:
							num = 115;
							break;
						case 181:
							num = 116;
							break;
						case 182:
							break;
						case 183:
							num = (male ? 136 : 123);
							break;
						default:
							if (type == 191)
							{
								num = 131;
							}
							break;
					}
				}
				if (num != -1)
				{
					somethingSpecial = true;
				}
			}
			if (armorslot == 2)
			{
				if (type <= 84)
				{
					if (type != 57)
					{
						switch (type)
						{
							case 83:
								if (male)
								{
									num = 117;
								}
								break;
							case 84:
								if (male)
								{
									num = 120;
								}
								break;
						}
					}
					else if (male)
					{
						num = 137;
					}
				}
				else if (type != 132)
				{
					if (type != 146)
					{
						if (type == 154)
						{
							num = (male ? 155 : 154);
						}
					}
					else
					{
						num = (male ? 146 : 147);
					}
				}
				else if (male)
				{
					num = 135;
				}
			}
			ItemLoader.SetMatch(armorslot, type, male, ref num, ref somethingSpecial);
			return num;
		}

		public void Teleport(Vector2 newPos, int Style = 0, int extraInfo = 0)
		{
			try
			{
				this.grappling[0] = -1;
				this.grapCount = 0;
				for (int i = 0; i < 1000; i++)
				{
					if (Main.projectile[i].active && Main.projectile[i].owner == this.whoAmI && Main.projectile[i].aiStyle == 7)
					{
						Main.projectile[i].Kill();
					}
				}
				int extraInfo2 = 0;
				if (Style == 4)
				{
					extraInfo2 = this.lastPortalColorIndex;
				}
				float num = MathHelper.Clamp(1f - this.teleportTime * 0.99f, 0.01f, 1f);
				Main.TeleportEffect(this.getRect(), Style, extraInfo2, num);
				float num2 = Vector2.Distance(this.position, newPos);
				PressurePlateHelper.UpdatePlayerPosition(this);
				this.position = newPos;
				this.fallStart = (int)(this.position.Y / 16f);
				if (this.whoAmI == Main.myPlayer)
				{
					bool flag = false;
					if (num2 < new Vector2((float)Main.screenWidth, (float)Main.screenHeight).Length() / 2f + 100f)
					{
						int time = 0;
						if (Style == 1)
						{
							time = 10;
						}
						Main.SetCameraLerp(0.1f, time);
						flag = true;
					}
					else
					{
						Main.BlackFadeIn = 255;
						Lighting.BlackOut();
						Main.screenLastPosition = Main.screenPosition;
						Main.screenPosition.X = this.position.X + (float)(this.width / 2) - (float)(Main.screenWidth / 2);
						Main.screenPosition.Y = this.position.Y + (float)(this.height / 2) - (float)(Main.screenHeight / 2);
						Main.quickBG = 10;
					}
					if (num > 0.1f || !flag || Style != 0)
					{
						if (Main.mapTime < 5)
						{
							Main.mapTime = 5;
						}
						Main.maxQ = true;
						Main.renderNow = true;
					}
				}
				if (Style == 4)
				{
					this.lastPortalColorIndex = extraInfo;
					extraInfo2 = this.lastPortalColorIndex;
					this.portalPhysicsFlag = true;
					this.gravity = 0f;
				}
				PressurePlateHelper.UpdatePlayerPosition(this);
				for (int j = 0; j < 3; j++)
				{
					this.UpdateSocialShadow();
				}
				this.oldPosition = this.position + this.BlehOldPositionFixer;
				Main.TeleportEffect(this.getRect(), Style, extraInfo2, num);
				this.teleportTime = 1f;
				this.teleportStyle = Style;
			}
			catch
			{
			}
		}

		public void Spawn()
		{
			Main.InitLifeBytes();
			if (this.whoAmI == Main.myPlayer)
			{
				if (Main.mapTime < 5)
				{
					Main.mapTime = 5;
				}
				Main.quickBG = 10;
				this.FindSpawn();
				if (!Player.CheckSpawn(this.SpawnX, this.SpawnY))
				{
					this.SpawnX = -1;
					this.SpawnY = -1;
				}
				Main.maxQ = true;
			}
			if (Main.netMode == 1 && this.whoAmI == Main.myPlayer)
			{
				NetMessage.SendData(12, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
				Main.gameMenu = false;
			}
			this.headPosition = Vector2.Zero;
			this.bodyPosition = Vector2.Zero;
			this.legPosition = Vector2.Zero;
			this.headRotation = 0f;
			this.bodyRotation = 0f;
			this.legRotation = 0f;
			this.lavaTime = this.lavaMax;
			if (this.statLife <= 0)
			{
				int num = this.statLifeMax2 / 2;
				this.statLife = 100;
				if (num > this.statLife)
				{
					this.statLife = num;
				}
				this.breath = this.breathMax;
				if (this.spawnMax)
				{
					this.statLife = this.statLifeMax2;
					this.statMana = this.statManaMax2;
				}
			}
			this.immune = true;
			this.dead = false;
			this.immuneTime = 0;
			this.active = true;
			if (this.SpawnX >= 0 && this.SpawnY >= 0)
			{
				this.position.X = (float)(this.SpawnX * 16 + 8 - this.width / 2);
				this.position.Y = (float)(this.SpawnY * 16 - this.height);
			}
			else
			{
				this.position.X = (float)(Main.spawnTileX * 16 + 8 - this.width / 2);
				this.position.Y = (float)(Main.spawnTileY * 16 - this.height);
				for (int i = Main.spawnTileX - 1; i < Main.spawnTileX + 2; i++)
				{
					for (int j = Main.spawnTileY - 3; j < Main.spawnTileY; j++)
					{
						if (Main.tile[i, j] != null)
						{
							if (Main.tileSolid[(int)Main.tile[i, j].type] && !Main.tileSolidTop[(int)Main.tile[i, j].type])
							{
								WorldGen.KillTile(i, j, false, false, false);
							}
							if (Main.tile[i, j].liquid > 0)
							{
								Main.tile[i, j].lava(false);
								Main.tile[i, j].liquid = 0;
								WorldGen.SquareTileFrame(i, j, true);
							}
						}
					}
				}
			}
			this.wet = false;
			this.wetCount = 0;
			this.lavaWet = false;
			this.fallStart = (int)(this.position.Y / 16f);
			this.fallStart2 = this.fallStart;
			this.velocity.X = 0f;
			this.velocity.Y = 0f;
			for (int k = 0; k < 3; k++)
			{
				this.UpdateSocialShadow();
			}
			this.oldPosition = this.position + this.BlehOldPositionFixer;
			this.talkNPC = -1;
			if (this.whoAmI == Main.myPlayer)
			{
				Main.npcChatCornerItem = 0;
			}
			if (this.pvpDeath)
			{
				this.pvpDeath = false;
				this.immuneTime = 300;
				this.statLife = this.statLifeMax;
			}
			else
			{
				this.immuneTime = 60;
			}
			if (this.whoAmI == Main.myPlayer)
			{
				Main.BlackFadeIn = 255;
				Main.renderNow = true;
				if (Main.netMode == 1)
				{
					Netplay.newRecent();
				}
				Main.screenPosition.X = this.position.X + (float)(this.width / 2) - (float)(Main.screenWidth / 2);
				Main.screenPosition.Y = this.position.Y + (float)(this.height / 2) - (float)(Main.screenHeight / 2);
			}
		}

		public void ShadowDodge()
		{
			this.immune = true;
			this.immuneTime = 80;
			if (this.longInvince)
			{
				this.immuneTime += 40;
			}
			for (int i = 0; i < this.hurtCooldowns.Length; i++)
			{
				this.hurtCooldowns[i] = this.immuneTime;
			}
			if (this.whoAmI == Main.myPlayer)
			{
				for (int j = 0; j < 22; j++)
				{
					if (this.buffTime[j] > 0 && this.buffType[j] == 59)
					{
						this.DelBuff(j);
					}
				}
				NetMessage.SendData(62, -1, -1, "", this.whoAmI, 2f, 0f, 0f, 0, 0, 0);
			}
		}

		public void NinjaDodge()
		{
			this.immune = true;
			this.immuneTime = 80;
			if (this.longInvince)
			{
				this.immuneTime += 40;
			}
			for (int i = 0; i < this.hurtCooldowns.Length; i++)
			{
				this.hurtCooldowns[i] = this.immuneTime;
			}
			for (int j = 0; j < 100; j++)
			{
				int num = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0f, 0f, 100, default(Color), 2f);
				Dust expr_A4_cp_0 = Main.dust[num];
				expr_A4_cp_0.position.X = expr_A4_cp_0.position.X + (float)Main.rand.Next(-20, 21);
				Dust expr_CB_cp_0 = Main.dust[num];
				expr_CB_cp_0.position.Y = expr_CB_cp_0.position.Y + (float)Main.rand.Next(-20, 21);
				Main.dust[num].velocity *= 0.4f;
				Main.dust[num].scale *= 1f + (float)Main.rand.Next(40) * 0.01f;
				Main.dust[num].shader = GameShaders.Armor.GetSecondaryShader(this.cWaist, this);
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num].scale *= 1f + (float)Main.rand.Next(40) * 0.01f;
					Main.dust[num].noGravity = true;
				}
			}
			int num2 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
			Main.gore[num2].scale = 1.5f;
			Main.gore[num2].velocity.X = (float)Main.rand.Next(-50, 51) * 0.01f;
			Main.gore[num2].velocity.Y = (float)Main.rand.Next(-50, 51) * 0.01f;
			Main.gore[num2].velocity *= 0.4f;
			num2 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
			Main.gore[num2].scale = 1.5f;
			Main.gore[num2].velocity.X = 1.5f + (float)Main.rand.Next(-50, 51) * 0.01f;
			Main.gore[num2].velocity.Y = 1.5f + (float)Main.rand.Next(-50, 51) * 0.01f;
			Main.gore[num2].velocity *= 0.4f;
			num2 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
			Main.gore[num2].scale = 1.5f;
			Main.gore[num2].velocity.X = -1.5f - (float)Main.rand.Next(-50, 51) * 0.01f;
			Main.gore[num2].velocity.Y = 1.5f + (float)Main.rand.Next(-50, 51) * 0.01f;
			Main.gore[num2].velocity *= 0.4f;
			num2 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
			Main.gore[num2].scale = 1.5f;
			Main.gore[num2].velocity.X = 1.5f + (float)Main.rand.Next(-50, 51) * 0.01f;
			Main.gore[num2].velocity.Y = -1.5f - (float)Main.rand.Next(-50, 51) * 0.01f;
			Main.gore[num2].velocity *= 0.4f;
			num2 = Gore.NewGore(new Vector2(this.position.X + (float)(this.width / 2) - 24f, this.position.Y + (float)(this.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64), 1f);
			Main.gore[num2].scale = 1.5f;
			Main.gore[num2].velocity.X = -1.5f - (float)Main.rand.Next(-50, 51) * 0.01f;
			Main.gore[num2].velocity.Y = -1.5f - (float)Main.rand.Next(-50, 51) * 0.01f;
			Main.gore[num2].velocity *= 0.4f;
			if (this.whoAmI == Main.myPlayer)
			{
				NetMessage.SendData(62, -1, -1, "", this.whoAmI, 1f, 0f, 0f, 0, 0, 0);
			}
		}

		public double HurtOld(int Damage, int hitDirection, bool pvp = false, bool quiet = false, string deathText = " was slain...", bool Crit = false, int cooldownCounter = -1)
		{
			return 0.0;
		}

		public double Hurt(PlayerDeathReason damageSource, int Damage, int hitDirection, bool pvp = false, bool quiet = false, bool Crit = false, int cooldownCounter = -1)
		{
			bool flag = !this.immune;
			bool flag2 = false;
			int hitContext = cooldownCounter;
			if (cooldownCounter == 0)
			{
				flag = (this.hurtCooldowns[cooldownCounter] <= 0);
			}
			if (cooldownCounter == 1)
			{
				flag = (this.hurtCooldowns[cooldownCounter] <= 0);
			}
			if (cooldownCounter == 2)
			{
				flag2 = true;
				cooldownCounter = -1;
			}
			if (!flag)
			{
				return 0.0;
			}
			if (this.whoAmI == Main.myPlayer && this.blackBelt && Main.rand.Next(10) == 0)
			{
				this.NinjaDodge();
				return 0.0;
			}
			if (this.whoAmI == Main.myPlayer && this.shadowDodge)
			{
				this.ShadowDodge();
				return 0.0;
			}
			bool customDamage = false;
			bool playSound = true;
			bool genGore = true;
			if (!PlayerHooks.PreHurt(this, pvp, quiet, ref Damage, ref hitDirection, ref Crit, ref customDamage,
					ref playSound, ref genGore, ref damageSource))
			{
				return 0.0;
			}
			if (this.whoAmI == Main.myPlayer && this.panic)
			{
				this.AddBuff(63, 300, true);
			}
			if (this.whoAmI == Main.myPlayer && this.setSquireT2)
			{
				this.AddBuff(205, 300, true);
			}
			this.stealth = 1f;
			if (Main.netMode == 1)
			{
				NetMessage.SendData(84, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
			}
			int num = Damage;
			double num2 = customDamage ? num : Main.CalculatePlayerDamage(num, this.statDefense);
			if (Crit)
			{
				num *= 2;
			}
			if (num2 >= 1.0)
			{
				if (this.invis)
				{
					for (int i = 0; i < 22; i++)
					{
						if (this.buffType[i] == 10)
						{
							this.DelBuff(i);
						}
					}
				}
				num2 = (double)((int)((double)(1f - this.endurance) * num2));
				if (num2 < 1.0)
				{
					num2 = 1.0;
				}
				if (this.ConsumeSolarFlare())
				{
					float num3 = 0.3f;
					num2 = (double)((int)((double)(1f - num3) * num2));
					if (num2 < 1.0)
					{
						num2 = 1.0;
					}
					if (this.whoAmI == Main.myPlayer)
					{
						int num4 = Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 608, 150, 15f, Main.myPlayer, 0f, 0f);
						Main.projectile[num4].Kill();
					}
				}
				if (this.beetleDefense && this.beetleOrbs > 0)
				{
					float num5 = 0.15f * (float)this.beetleOrbs;
					num2 = (double)((int)((double)(1f - num5) * num2));
					this.beetleOrbs--;
					for (int j = 0; j < 22; j++)
					{
						if (this.buffType[j] >= 95 && this.buffType[j] <= 97)
						{
							this.DelBuff(j);
						}
					}
					if (this.beetleOrbs > 0)
					{
						this.AddBuff(95 + this.beetleOrbs - 1, 5, false);
					}
					this.beetleCounter = 0f;
					if (num2 < 1.0)
					{
						num2 = 1.0;
					}
				}
				if (this.magicCuffs)
				{
					int num6 = num;
					this.statMana += num6;
					if (this.statMana > this.statManaMax2)
					{
						this.statMana = this.statManaMax2;
					}
					this.ManaEffect(num6);
				}
				if (this.defendedByPaladin)
				{
					if (this.whoAmI != Main.myPlayer)
					{
						if (Main.player[Main.myPlayer].hasPaladinShield)
						{
							Player player = Main.player[Main.myPlayer];
							if (player.team == this.team && this.team != 0)
							{
								float num7 = player.Distance(base.Center);
								bool flag3 = num7 < 800f;
								if (flag3)
								{
									for (int k = 0; k < 255; k++)
									{
										if (k != Main.myPlayer && Main.player[k].active && !Main.player[k].dead && !Main.player[k].immune && Main.player[k].hasPaladinShield && Main.player[k].team == this.team && (float)Main.player[k].statLife > (float)Main.player[k].statLifeMax2 * 0.25f)
										{
											float num8 = Main.player[k].Distance(base.Center);
											if (num7 > num8 || (num7 == num8 && k < Main.myPlayer))
											{
												flag3 = false;
												break;
											}
										}
									}
								}
								if (flag3)
								{
									int damage = (int)(num2 * 0.25);
									num2 = (double)((int)(num2 * 0.75));
									player.Hurt(PlayerDeathReason.LegacyEmpty(), damage, 0, false, false, false, -1);
								}
							}
						}
					}
					else
					{
						bool flag4 = false;
						for (int l = 0; l < 255; l++)
						{
							if (l != Main.myPlayer && Main.player[l].active && !Main.player[l].dead && !Main.player[l].immune && Main.player[l].hasPaladinShield && Main.player[l].team == this.team && (float)Main.player[l].statLife > (float)Main.player[l].statLifeMax2 * 0.25f)
							{
								flag4 = true;
								break;
							}
						}
						if (flag4)
						{
							num2 = (double)((int)(num2 * 0.75));
						}
					}
				}
				if (this.brainOfConfusion && Main.myPlayer == this.whoAmI)
				{
					for (int m = 0; m < 200; m++)
					{
						if (Main.npc[m].active && !Main.npc[m].friendly)
						{
							int num9 = 300;
							num9 += (int)num2 * 2;
							if (Main.rand.Next(500) < num9)
							{
								float num10 = (Main.npc[m].Center - base.Center).Length();
								float num11 = (float)Main.rand.Next(200 + (int)num2 / 2, 301 + (int)num2 * 2);
								if (num11 > 500f)
								{
									num11 = 500f + (num11 - 500f) * 0.75f;
								}
								if (num11 > 700f)
								{
									num11 = 700f + (num11 - 700f) * 0.5f;
								}
								if (num11 > 900f)
								{
									num11 = 900f + (num11 - 900f) * 0.25f;
								}
								if (num10 < num11)
								{
									float num12 = (float)Main.rand.Next(90 + (int)num2 / 3, 300 + (int)num2 / 2);
									Main.npc[m].AddBuff(31, (int)num12, false);
								}
							}
						}
					}
					Projectile.NewProjectile(base.Center.X + (float)Main.rand.Next(-40, 40), base.Center.Y - (float)Main.rand.Next(20, 60), this.velocity.X * 0.3f, this.velocity.Y * 0.3f, 565, 0, 0f, this.whoAmI, 0f, 0f);
				}
				PlayerHooks.Hurt(this, pvp, quiet, num2, hitDirection, Crit);
				if (Main.netMode == 1 && this.whoAmI == Main.myPlayer && !quiet)
				{
					NetMessage.SendData(13, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
					NetMessage.SendData(16, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
					NetMessage.SendPlayerHurt(this.whoAmI, damageSource, Damage, hitDirection, Crit, pvp, hitContext, -1, -1);
				}
				Color color = Crit ? CombatText.DamagedFriendlyCrit : CombatText.DamagedFriendly;
				CombatText.NewText(new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), color, string.Concat((int)num2), Crit, false);
				this.statLife -= (int)num2;
				if (cooldownCounter == -1)
				{
					this.immune = true;
					if (num2 == 1.0)
					{
						this.immuneTime = 20;
						if (this.longInvince)
						{
							this.immuneTime += 20;
						}
					}
					else
					{
						this.immuneTime = 40;
						if (this.longInvince)
						{
							this.immuneTime += 40;
						}
					}
					if (pvp)
					{
						this.immuneTime = 8;
					}
				}
				else if (cooldownCounter == 0)
				{
					if (num2 == 1.0)
					{
						this.hurtCooldowns[cooldownCounter] = (this.longInvince ? 40 : 20);
					}
					else
					{
						this.hurtCooldowns[cooldownCounter] = (this.longInvince ? 80 : 40);
					}
				}
				else if (cooldownCounter == 1)
				{
					if (num2 == 1.0)
					{
						this.hurtCooldowns[cooldownCounter] = (this.longInvince ? 40 : 20);
					}
					else
					{
						this.hurtCooldowns[cooldownCounter] = (this.longInvince ? 80 : 40);
					}
				}
				this.lifeRegenTime = 0;
				if (this.whoAmI == Main.myPlayer)
				{
					if (this.starCloak)
					{
						for (int n = 0; n < 3; n++)
						{
							float x = this.position.X + (float)Main.rand.Next(-400, 400);
							float y = this.position.Y - (float)Main.rand.Next(500, 800);
							Vector2 vector = new Vector2(x, y);
							float num13 = this.position.X + (float)(this.width / 2) - vector.X;
							float num14 = this.position.Y + (float)(this.height / 2) - vector.Y;
							num13 += (float)Main.rand.Next(-100, 101);
							int num15 = 23;
							float num16 = (float)Math.Sqrt((double)(num13 * num13 + num14 * num14));
							num16 = (float)num15 / num16;
							num13 *= num16;
							num14 *= num16;
							int num17 = Projectile.NewProjectile(x, y, num13, num14, 92, 30, 5f, this.whoAmI, 0f, 0f);
							Main.projectile[num17].ai[1] = this.position.Y;
						}
					}
					if (this.bee)
					{
						int num18 = 1;
						if (Main.rand.Next(3) == 0)
						{
							num18++;
						}
						if (Main.rand.Next(3) == 0)
						{
							num18++;
						}
						if (this.strongBees && Main.rand.Next(3) == 0)
						{
							num18++;
						}
						for (int num19 = 0; num19 < num18; num19++)
						{
							float speedX = (float)Main.rand.Next(-35, 36) * 0.02f;
							float speedY = (float)Main.rand.Next(-35, 36) * 0.02f;
							Projectile.NewProjectile(this.position.X, this.position.Y, speedX, speedY, this.beeType(), this.beeDamage(7), this.beeKB(0f), Main.myPlayer, 0f, 0f);
						}
					}
				}
				if (flag2 && hitDirection != 0)
				{
					if (!this.mount.Active || !this.mount.Cart)
					{
						float num20 = 10.5f;
						float y2 = -7.5f;
						if (this.noKnockback)
						{
							num20 = 2.5f;
							y2 = -1.5f;
						}
						this.velocity.X = num20 * (float)hitDirection;
						this.velocity.Y = y2;
					}
				}
				else if (!this.noKnockback && hitDirection != 0 && (!this.mount.Active || !this.mount.Cart))
				{
					this.velocity.X = 4.5f * (float)hitDirection;
					this.velocity.Y = -3.5f;
				}
				if (!playSound)
				{
					goto postSound; //gotos are ugly but minimize the diff file
				}
				if (this.stoned)
				{
					Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				}
				else if (this.frostArmor)
				{
					Main.PlaySound(SoundID.Item27, this.position);
				}
				else if ((this.wereWolf || this.forceWerewolf) && !this.hideWolf)
				{
					Main.PlaySound(3, (int)this.position.X, (int)this.position.Y, 6, 1f, 0f);
				}
				else if (this.boneArmor)
				{
					Main.PlaySound(3, (int)this.position.X, (int)this.position.Y, 2, 1f, 0f);
				}
				else if (!this.Male)
				{
					Main.PlaySound(20, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				}
				else
				{
					Main.PlaySound(1, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
				}
				postSound:
				if (this.statLife > 0)
				{
					if (!genGore)
					{
						goto postGore; //gotta minimize diff files
					}
					double num21 = num2 / (double)this.statLifeMax2 * 100.0;
					float num22 = (float)(2 * hitDirection);
					float num23 = 0f;
					if (flag2)
					{
						num21 *= 12.0;
						num23 = 6f;
					}
					int num24 = 0;
					while ((double)num24 < num21)
					{
						if (this.stoned)
						{
							Dust.NewDust(this.position, this.width, this.height, 1, num22 + (float)hitDirection * num23 * Main.rand.NextFloat(), -2f, 0, default(Color), 1f);
						}
						else if (this.frostArmor)
						{
							int num25 = Dust.NewDust(this.position, this.width, this.height, 135, num22 + (float)hitDirection * num23 * Main.rand.NextFloat(), -2f, 0, default(Color), 1f);
							Main.dust[num25].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
						}
						else if (this.boneArmor)
						{
							int num26 = Dust.NewDust(this.position, this.width, this.height, 26, num22 + (float)hitDirection * num23 * Main.rand.NextFloat(), -2f, 0, default(Color), 1f);
							Main.dust[num26].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
						}
						else
						{
							Dust.NewDust(this.position, this.width, this.height, 5, num22 + (float)hitDirection * num23 * Main.rand.NextFloat(), -2f, 0, default(Color), 1f);
						}
						num24++;
					}
					postGore:
					PlayerHooks.PostHurt(this, pvp, quiet, num2, hitDirection, Crit);
				}
				else
				{
					this.statLife = 0;
					if (this.whoAmI == Main.myPlayer)
					{
						this.KillMe(damageSource, num2, hitDirection, pvp);
					}
				}
			}
			if (pvp)
			{
				num2 = Main.CalculateDamage(num, this.statDefense);
			}
			return num2;
		}

		public void KillMeForGood()
		{
			bool isCloudSave = Main.ActivePlayerFileData.IsCloudSave;
			if (FileUtilities.Exists(Main.playerPathName, isCloudSave))
			{
				FileUtilities.Delete(Main.playerPathName, isCloudSave);
			}
			if (FileUtilities.Exists(Main.playerPathName + ".bak", isCloudSave))
			{
				FileUtilities.Delete(Main.playerPathName + ".bak", isCloudSave);
			}
			Main.ActivePlayerFileData = new PlayerFileData();
		}

		public void KillMeOld(double dmg, int hitDirection, bool pvp = false, string deathText = " was slain...")
		{
		}

		public void KillMe(PlayerDeathReason damageSource, double dmg, int hitDirection, bool pvp = false)
		{
			if (this.dead)
			{
				return;
			}
			bool playSound = true;
			bool genGore = true;
			if (!PlayerHooks.PreKill(this, dmg, hitDirection, pvp, ref playSound, ref genGore, ref damageSource))
			{
				return;
			}
			if (pvp)
			{
				this.pvpDeath = true;
			}
			if (this.trapDebuffSource)
			{
				AchievementsHelper.HandleSpecialEvent(this, 4);
			}
			this.lastDeathPostion = base.Center;
			this.lastDeathTime = DateTime.Now;
			this.showLastDeath = true;
			bool flag;
			int coinsOwned = (int)Utils.CoinsCount(out flag, this.inventory, new int[0]);
			if (Main.myPlayer == this.whoAmI)
			{
				this.lostCoins = coinsOwned;
				this.lostCoinString = Main.ValueToCoins(this.lostCoins);
			}
			if (Main.myPlayer == this.whoAmI)
			{
				Main.mapFullscreen = false;
			}
			if (Main.myPlayer == this.whoAmI)
			{
				this.trashItem.SetDefaults(0, false);
				if (this.difficulty == 0)
				{
					for (int i = 0; i < 59; i++)
					{
						bool flag2 = this.inventory[i].stack > 0 && ((this.inventory[i].type >= 1522 && this.inventory[i].type <= 1527) || this.inventory[i].type == 3643);
						if (flag2)
						{
							int num = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, this.inventory[i].type, 1, false, 0, false, false);
							Main.item[num].netDefaults(this.inventory[i].netID);
							Main.item[num].Prefix((int)this.inventory[i].prefix);
							Main.item[num].stack = this.inventory[i].stack;
							Main.item[num].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
							Main.item[num].velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
							Main.item[num].noGrabDelay = 100;
							Main.item[num].favorited = false;
							Main.item[num].newAndShiny = false;
							if (Main.netMode == 1)
							{
								NetMessage.SendData(21, -1, -1, "", num, 0f, 0f, 0f, 0, 0, 0);
							}
							this.inventory[i].SetDefaults(0, false);
						}
					}
				}
				else if (this.difficulty == 1)
				{
					this.DropItems();
				}
				else if (this.difficulty == 2)
				{
					this.DropItems();
					this.KillMeForGood();
				}
			}
			if (playSound)
			{
				Main.PlaySound(5, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
			}
			this.headVelocity.Y = (float)Main.rand.Next(-40, -10) * 0.1f;
			this.bodyVelocity.Y = (float)Main.rand.Next(-40, -10) * 0.1f;
			this.legVelocity.Y = (float)Main.rand.Next(-40, -10) * 0.1f;
			this.headVelocity.X = (float)Main.rand.Next(-20, 21) * 0.1f + (float)(2 * hitDirection);
			this.bodyVelocity.X = (float)Main.rand.Next(-20, 21) * 0.1f + (float)(2 * hitDirection);
			this.legVelocity.X = (float)Main.rand.Next(-20, 21) * 0.1f + (float)(2 * hitDirection);
			if (this.stoned || !genGore)
			{
				this.headPosition = Vector2.Zero;
				this.bodyPosition = Vector2.Zero;
				this.legPosition = Vector2.Zero;
			}
			if (!genGore)
			{
				goto postGore; //goto minimizes diff file size
			}
			for (int j = 0; j < 100; j++)
			{
				if (this.stoned)
				{
					Dust.NewDust(this.position, this.width, this.height, 1, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
				}
				else if (this.frostArmor)
				{
					int num2 = Dust.NewDust(this.position, this.width, this.height, 135, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					Main.dust[num2].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
				}
				else if (this.boneArmor)
				{
					int num3 = Dust.NewDust(this.position, this.width, this.height, 26, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
					Main.dust[num3].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
				}
				else
				{
					Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, default(Color), 1f);
				}
			}
			postGore:
			this.mount.Dismount(this);
			this.dead = true;
			this.respawnTimer = 600;
			bool flag3 = false;
			if (Main.netMode != 0 && !pvp)
			{
				for (int k = 0; k < 200; k++)
				{
					if (Main.npc[k].active && (Main.npc[k].boss || Main.npc[k].type == 13 || Main.npc[k].type == 14 || Main.npc[k].type == 15) && Math.Abs(base.Center.X - Main.npc[k].Center.X) + Math.Abs(base.Center.Y - Main.npc[k].Center.Y) < 4000f)
					{
						flag3 = true;
						break;
					}
				}
			}
			if (flag3)
			{
				this.respawnTimer += 600;
			}
			if (Main.expertMode)
			{
				this.respawnTimer = (int)((double)this.respawnTimer * 1.5);
			}
			PlayerHooks.Kill(this, dmg, hitDirection, pvp, damageSource);
			this.immuneAlpha = 0;
			this.palladiumRegen = false;
			this.iceBarrier = false;
			this.crystalLeaf = false;
			string deathText = damageSource.GetDeathText();
			if (Main.netMode == 2)
			{
				NetMessage.SendData(25, -1, -1, this.name + deathText, 255, 225f, 25f, 25f, 0, 0, 0);
			}
			else if (Main.netMode == 0)
			{
				Main.NewText(this.name + deathText, 225, 25, 25, false);
			}
			if (Main.netMode == 1 && this.whoAmI == Main.myPlayer)
			{
				NetMessage.SendPlayerDeath(this.whoAmI, damageSource, (int)dmg, hitDirection, pvp, -1, -1);
			}
			if (this.whoAmI == Main.myPlayer && this.difficulty == 0)
			{
				if (!pvp)
				{
					this.DropCoins();
				}
				else
				{
					this.lostCoins = 0;
					this.lostCoinString = Main.ValueToCoins(this.lostCoins);
				}
			}
			this.DropTombstone(coinsOwned, deathText, hitDirection);
			if (this.whoAmI == Main.myPlayer)
			{
				try
				{
					WorldGen.saveToonWhilePlaying();
				}
				catch
				{
				}
			}
		}

		public void DropTombstone(int coinsOwned, string deathText, int hitDirection)
		{
			if (Main.netMode != 1)
			{
				float num = (float)Main.rand.Next(-35, 36) * 0.1f;
				while (num < 2f && num > -2f)
				{
					num += (float)Main.rand.Next(-30, 31) * 0.1f;
				}
				int num2 = Main.rand.Next(6);
				if (coinsOwned > 100000)
				{
					num2 = Main.rand.Next(5);
					num2 += 527;
				}
				else if (num2 == 0)
				{
					num2 = 43;
				}
				else
				{
					num2 = 200 + num2;
				}
				int num3 = Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), (float)Main.rand.Next(10, 30) * 0.1f * (float)hitDirection + num, (float)Main.rand.Next(-40, -20) * 0.1f, num2, 0, 0f, Main.myPlayer, 0f, 0f);
				Main.projectile[num3].miscText = this.name + deathText;
			}
		}

		public bool ItemSpace(Item newItem)
		{
			if (newItem.uniqueStack && this.HasItem(newItem.type))
			{
				return false;
			}
			if (newItem.type == 58 || newItem.type == 184 || newItem.type == 1734 || newItem.type == 1735 || newItem.type == 1867 || newItem.type == 1868)
			{
				return true;
			}
			if (ItemID.Sets.NebulaPickup[newItem.type])
			{
				return true;
			}
			int num = 50;
			if (newItem.type == 71 || newItem.type == 72 || newItem.type == 73 || newItem.type == 74)
			{
				num = 54;
			}
			for (int i = 0; i < num; i++)
			{
				if (this.inventory[i].type == 0)
				{
					return true;
				}
			}
			for (int j = 0; j < num; j++)
			{
				if (this.inventory[j].type > 0 && this.inventory[j].stack < this.inventory[j].maxStack && newItem.IsTheSameAs(this.inventory[j]))
				{
					return true;
				}
			}
			if (newItem.ammo > 0 && !newItem.notAmmo)
			{
				if (newItem.type != 75 && newItem.type != 169 && newItem.type != 23 && newItem.type != 408 && newItem.type != 370 && newItem.type != 1246)
				{
					for (int k = 54; k < 58; k++)
					{
						if (this.inventory[k].type == 0)
						{
							return true;
						}
					}
				}
				for (int l = 54; l < 58; l++)
				{
					if (this.inventory[l].type > 0 && this.inventory[l].stack < this.inventory[l].maxStack && newItem.IsTheSameAs(this.inventory[l]))
					{
						return true;
					}
				}
			}
			for (int m = 54; m < 58; m++)
			{
				if (this.inventory[m].type > 0 && this.inventory[m].stack < this.inventory[m].maxStack && newItem.IsTheSameAs(this.inventory[m]))
				{
					return true;
				}
			}
			return false;
		}

		public void DoCoins(int i)
		{
			if (this.inventory[i].stack == 100 && (this.inventory[i].type == 71 || this.inventory[i].type == 72 || this.inventory[i].type == 73))
			{
				this.inventory[i].SetDefaults(this.inventory[i].type + 1, false);
				for (int j = 0; j < 54; j++)
				{
					if (this.inventory[j].IsTheSameAs(this.inventory[i]) && j != i && this.inventory[j].type == this.inventory[i].type && this.inventory[j].stack < this.inventory[j].maxStack)
					{
						this.inventory[j].stack++;
						this.inventory[i].SetDefaults(0, false);
						this.inventory[i].active = false;
						this.inventory[i].TurnToAir();
						this.DoCoins(j);
					}
				}
			}
		}

		public Item FillAmmo(int plr, Item newItem, bool noText = false)
		{
			for (int i = 54; i < 58; i++)
			{
				if (this.inventory[i].type > 0 && this.inventory[i].stack < this.inventory[i].maxStack && newItem.IsTheSameAs(this.inventory[i]))
				{
					Main.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					if (newItem.stack + this.inventory[i].stack <= this.inventory[i].maxStack)
					{
						this.inventory[i].stack += newItem.stack;
						if (!noText)
						{
							ItemText.NewText(newItem, newItem.stack, false, false);
						}
						this.DoCoins(i);
						if (plr == Main.myPlayer)
						{
							Recipe.FindRecipes();
						}
						return new Item();
					}
					newItem.stack -= this.inventory[i].maxStack - this.inventory[i].stack;
					if (!noText)
					{
						ItemText.NewText(newItem, this.inventory[i].maxStack - this.inventory[i].stack, false, false);
					}
					this.inventory[i].stack = this.inventory[i].maxStack;
					this.DoCoins(i);
					if (plr == Main.myPlayer)
					{
						Recipe.FindRecipes();
					}
				}
			}
			if (newItem.bait <= 0 && newItem.type != 169 && newItem.type != 75 && newItem.type != 23 && newItem.type != 408 && newItem.type != 370 && newItem.type != 1246 && newItem.type != 154 && !newItem.notAmmo)
			{
				for (int j = 54; j < 58; j++)
				{
					if (this.inventory[j].type == 0)
					{
						this.inventory[j] = newItem;
						if (!noText)
						{
							ItemText.NewText(newItem, newItem.stack, false, false);
						}
						this.DoCoins(j);
						Main.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						if (plr == Main.myPlayer)
						{
							Recipe.FindRecipes();
						}
						return new Item();
					}
				}
			}
			return newItem;
		}

		public Item GetItem(int plr, Item newItem, bool longText = false, bool noText = false)
		{
			bool flag = newItem.type >= 71 && newItem.type <= 74;
			Item item = newItem;
			int num = 50;
			if (newItem.noGrabDelay > 0)
			{
				return item;
			}
			int num2 = 0;
			if (newItem.uniqueStack && this.HasItem(newItem.type))
			{
				return item;
			}
			if (newItem.type == 71 || newItem.type == 72 || newItem.type == 73 || newItem.type == 74)
			{
				num2 = -4;
				num = 54;
			}
			if (((item.ammo > 0 || item.bait > 0) && !item.notAmmo) || item.type == 530)
			{
				item = this.FillAmmo(plr, item, noText);
				if (item.type == 0 || item.stack == 0)
				{
					return new Item();
				}
			}
			for (int i = num2; i < 50; i++)
			{
				int num3 = i;
				if (num3 < 0)
				{
					num3 = 54 + i;
				}
				if (this.inventory[num3].type > 0 && this.inventory[num3].stack < this.inventory[num3].maxStack && item.IsTheSameAs(this.inventory[num3]))
				{
					if (flag)
					{
						Main.PlaySound(38, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					}
					else
					{
						Main.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
					}
					if (item.stack + this.inventory[num3].stack <= this.inventory[num3].maxStack)
					{
						this.inventory[num3].stack += item.stack;
						if (!noText)
						{
							ItemText.NewText(newItem, item.stack, false, longText);
						}
						this.DoCoins(num3);
						if (plr == Main.myPlayer)
						{
							Recipe.FindRecipes();
						}
						AchievementsHelper.NotifyItemPickup(this, item);
						return new Item();
					}
					AchievementsHelper.NotifyItemPickup(this, item, this.inventory[num3].maxStack - this.inventory[num3].stack);
					item.stack -= this.inventory[num3].maxStack - this.inventory[num3].stack;
					if (!noText)
					{
						ItemText.NewText(newItem, this.inventory[num3].maxStack - this.inventory[num3].stack, false, longText);
					}
					this.inventory[num3].stack = this.inventory[num3].maxStack;
					this.DoCoins(num3);
					if (plr == Main.myPlayer)
					{
						Recipe.FindRecipes();
					}
				}
			}
			if (newItem.type != 71 && newItem.type != 72 && newItem.type != 73 && newItem.type != 74 && newItem.useStyle > 0)
			{
				for (int j = 0; j < 10; j++)
				{
					if (this.inventory[j].type == 0)
					{
						this.inventory[j] = item;
						if (!noText)
						{
							ItemText.NewText(newItem, newItem.stack, false, longText);
						}
						this.DoCoins(j);
						if (flag)
						{
							Main.PlaySound(38, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						}
						else
						{
							Main.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						}
						if (plr == Main.myPlayer)
						{
							Recipe.FindRecipes();
						}
						AchievementsHelper.NotifyItemPickup(this, item);
						return new Item();
					}
				}
			}
			if (newItem.favorited)
			{
				for (int k = 0; k < num; k++)
				{
					if (this.inventory[k].type == 0)
					{
						this.inventory[k] = item;
						if (!noText)
						{
							ItemText.NewText(newItem, newItem.stack, false, longText);
						}
						this.DoCoins(k);
						if (flag)
						{
							Main.PlaySound(38, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						}
						else
						{
							Main.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						}
						if (plr == Main.myPlayer)
						{
							Recipe.FindRecipes();
						}
						AchievementsHelper.NotifyItemPickup(this, item);
						return new Item();
					}
				}
			}
			else
			{
				for (int l = num - 1; l >= 0; l--)
				{
					if (this.inventory[l].type == 0)
					{
						this.inventory[l] = item;
						if (!noText)
						{
							ItemText.NewText(newItem, newItem.stack, false, longText);
						}
						this.DoCoins(l);
						if (flag)
						{
							Main.PlaySound(38, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						}
						else
						{
							Main.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
						}
						if (plr == Main.myPlayer)
						{
							Recipe.FindRecipes();
						}
						AchievementsHelper.NotifyItemPickup(this, item);
						return new Item();
					}
				}
			}
			return item;
		}

		public void PlaceThing()
		{
			if ((this.inventory[this.selectedItem].type == 1071 || this.inventory[this.selectedItem].type == 1543) && this.position.X / 16f - (float)Player.tileRangeX - (float)this.inventory[this.selectedItem].tileBoost - (float)this.blockRange <= (float)Player.tileTargetX && (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX + (float)this.inventory[this.selectedItem].tileBoost - 1f + (float)this.blockRange >= (float)Player.tileTargetX && this.position.Y / 16f - (float)Player.tileRangeY - (float)this.inventory[this.selectedItem].tileBoost - (float)this.blockRange <= (float)Player.tileTargetY && (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY + (float)this.inventory[this.selectedItem].tileBoost - 2f + (float)this.blockRange >= (float)Player.tileTargetY)
			{
				int num = Player.tileTargetX;
				int num2 = Player.tileTargetY;
				if (Main.tile[num, num2] != null && Main.tile[num, num2].active())
				{
					this.showItemIcon = true;
					if (this.itemTime == 0 && this.itemAnimation > 0 && this.controlUseItem)
					{
						int num3 = -1;
						int num4 = -1;
						for (int i = 0; i < 58; i++)
						{
							if (this.inventory[i].stack > 0 && this.inventory[i].paint > 0)
							{
								num3 = (int)this.inventory[i].paint;
								num4 = i;
								break;
							}
						}
						if (num3 > 0 && (int)Main.tile[num, num2].color() != num3 && WorldGen.paintTile(num, num2, (byte)num3, true))
						{
							int num5 = num4;
							this.inventory[num5].stack--;
							if (this.inventory[num5].stack <= 0)
							{
								this.inventory[num5].SetDefaults(0, false);
							}
							this.itemTime = (int)(this.inventory[this.selectedItem].useTime / PlayerHooks.TotalUseTimeMultiplier(this, this.inventory[this.selectedItem]));
						}
					}
				}
			}
			if ((this.inventory[this.selectedItem].type == 1072 || this.inventory[this.selectedItem].type == 1544) && this.position.X / 16f - (float)Player.tileRangeX - (float)this.inventory[this.selectedItem].tileBoost - (float)this.blockRange <= (float)Player.tileTargetX && (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX + (float)this.inventory[this.selectedItem].tileBoost - 1f + (float)this.blockRange >= (float)Player.tileTargetX && this.position.Y / 16f - (float)Player.tileRangeY - (float)this.inventory[this.selectedItem].tileBoost - (float)this.blockRange <= (float)Player.tileTargetY && (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY + (float)this.inventory[this.selectedItem].tileBoost - 2f + (float)this.blockRange >= (float)Player.tileTargetY)
			{
				int num6 = Player.tileTargetX;
				int num7 = Player.tileTargetY;
				if (Main.tile[num6, num7] != null && Main.tile[num6, num7].wall > 0)
				{
					this.showItemIcon = true;
					if (this.itemTime == 0 && this.itemAnimation > 0 && this.controlUseItem)
					{
						int num8 = -1;
						int num9 = -1;
						for (int j = 0; j < 58; j++)
						{
							if (this.inventory[j].stack > 0 && this.inventory[j].paint > 0)
							{
								num8 = (int)this.inventory[j].paint;
								num9 = j;
								break;
							}
						}
						if (num8 > 0 && (int)Main.tile[num6, num7].wallColor() != num8 && WorldGen.paintWall(num6, num7, (byte)num8, true))
						{
							int num10 = num9;
							this.inventory[num10].stack--;
							if (this.inventory[num10].stack <= 0)
							{
								this.inventory[num10].SetDefaults(0, false);
							}
							this.itemTime = (int)(this.inventory[this.selectedItem].useTime / PlayerHooks.TotalUseTimeMultiplier(this, this.inventory[this.selectedItem]));
						}
					}
				}
			}
			if ((this.inventory[this.selectedItem].type == 1100 || this.inventory[this.selectedItem].type == 1545) && this.position.X / 16f - (float)Player.tileRangeX - (float)this.inventory[this.selectedItem].tileBoost - (float)this.blockRange <= (float)Player.tileTargetX && (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX + (float)this.inventory[this.selectedItem].tileBoost - 1f + (float)this.blockRange >= (float)Player.tileTargetX && this.position.Y / 16f - (float)Player.tileRangeY - (float)this.inventory[this.selectedItem].tileBoost - (float)this.blockRange <= (float)Player.tileTargetY && (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY + (float)this.inventory[this.selectedItem].tileBoost - 2f + (float)this.blockRange >= (float)Player.tileTargetY)
			{
				int num11 = Player.tileTargetX;
				int num12 = Player.tileTargetY;
				if (Main.tile[num11, num12] != null && ((Main.tile[num11, num12].wallColor() > 0 && Main.tile[num11, num12].wall > 0) || (Main.tile[num11, num12].color() > 0 && Main.tile[num11, num12].active())))
				{
					this.showItemIcon = true;
					if (this.itemTime == 0 && this.itemAnimation > 0 && this.controlUseItem)
					{
						if (Main.tile[num11, num12].color() > 0 && Main.tile[num11, num12].active() && WorldGen.paintTile(num11, num12, 0, true))
						{
							this.itemTime = (int)(this.inventory[this.selectedItem].useTime / PlayerHooks.TotalUseTimeMultiplier(this, this.inventory[this.selectedItem]));
						}
						else if (Main.tile[num11, num12].wallColor() > 0 && Main.tile[num11, num12].wall > 0 && WorldGen.paintWall(num11, num12, 0, true))
						{
							this.itemTime = (int)(this.inventory[this.selectedItem].useTime / PlayerHooks.TotalUseTimeMultiplier(this, this.inventory[this.selectedItem]));
						}
					}
				}
			}
			if ((this.inventory[this.selectedItem].type == 929 || this.inventory[this.selectedItem].type == 1338 || this.inventory[this.selectedItem].type == 1345) && this.position.X / 16f - (float)Player.tileRangeX - (float)this.inventory[this.selectedItem].tileBoost - (float)this.blockRange <= (float)Player.tileTargetX && (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX + (float)this.inventory[this.selectedItem].tileBoost - 1f + (float)this.blockRange >= (float)Player.tileTargetX && this.position.Y / 16f - (float)Player.tileRangeY - (float)this.inventory[this.selectedItem].tileBoost - (float)this.blockRange <= (float)Player.tileTargetY && (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY + (float)this.inventory[this.selectedItem].tileBoost - 2f + (float)this.blockRange >= (float)Player.tileTargetY)
			{
				int num13 = Player.tileTargetX;
				int num14 = Player.tileTargetY;
				if (Main.tile[num13, num14].active() && Main.tile[num13, num14].type == 209)
				{
					this.ShootFromCannon(num13, num14);
				}
			}
			if (this.inventory[this.selectedItem].type >= 1874 && this.inventory[this.selectedItem].type <= 1905 && Main.tile[Player.tileTargetX, Player.tileTargetY].active() && Main.tile[Player.tileTargetX, Player.tileTargetY].type == 171 && this.position.X / 16f - (float)Player.tileRangeX - (float)this.inventory[this.selectedItem].tileBoost - (float)this.blockRange <= (float)Player.tileTargetX && (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX + (float)this.inventory[this.selectedItem].tileBoost - 1f + (float)this.blockRange >= (float)Player.tileTargetX && this.position.Y / 16f - (float)Player.tileRangeY - (float)this.inventory[this.selectedItem].tileBoost - (float)this.blockRange <= (float)Player.tileTargetY && (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY + (float)this.inventory[this.selectedItem].tileBoost - 2f + (float)this.blockRange >= (float)Player.tileTargetY && this.itemTime == 0 && this.itemAnimation > 0 && this.controlUseItem)
			{
				int num15 = this.inventory[this.selectedItem].type;
				if (num15 >= 1874 && num15 <= 1877)
				{
					num15 -= 1873;
					if (WorldGen.checkXmasTreeDrop(Player.tileTargetX, Player.tileTargetY, 0) != num15)
					{
						this.itemTime = (int)(this.inventory[this.selectedItem].useTime / PlayerHooks.TotalUseTimeMultiplier(this, this.inventory[this.selectedItem]));
						WorldGen.dropXmasTree(Player.tileTargetX, Player.tileTargetY, 0);
						WorldGen.setXmasTree(Player.tileTargetX, Player.tileTargetY, 0, num15);
						int num16 = Player.tileTargetX;
						int num17 = Player.tileTargetY;
						if (Main.tile[Player.tileTargetX, Player.tileTargetY].frameX < 10)
						{
							num16 -= (int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameX;
							num17 -= (int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameY;
						}
						NetMessage.SendTileSquare(-1, num16, num17, 1, TileChangeType.None);
					}
				}
				else if (num15 >= 1878 && num15 <= 1883)
				{
					num15 -= 1877;
					if (WorldGen.checkXmasTreeDrop(Player.tileTargetX, Player.tileTargetY, 1) != num15)
					{
						this.itemTime = (int)(this.inventory[this.selectedItem].useTime / PlayerHooks.TotalUseTimeMultiplier(this, this.inventory[this.selectedItem]));
						WorldGen.dropXmasTree(Player.tileTargetX, Player.tileTargetY, 1);
						WorldGen.setXmasTree(Player.tileTargetX, Player.tileTargetY, 1, num15);
						int num18 = Player.tileTargetX;
						int num19 = Player.tileTargetY;
						if (Main.tile[Player.tileTargetX, Player.tileTargetY].frameX < 10)
						{
							num18 -= (int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameX;
							num19 -= (int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameY;
						}
						NetMessage.SendTileSquare(-1, num18, num19, 1, TileChangeType.None);
					}
				}
				else if (num15 >= 1884 && num15 <= 1894)
				{
					num15 -= 1883;
					if (WorldGen.checkXmasTreeDrop(Player.tileTargetX, Player.tileTargetY, 2) != num15)
					{
						this.itemTime = (int)(this.inventory[this.selectedItem].useTime / PlayerHooks.TotalUseTimeMultiplier(this, this.inventory[this.selectedItem]));
						WorldGen.dropXmasTree(Player.tileTargetX, Player.tileTargetY, 2);
						WorldGen.setXmasTree(Player.tileTargetX, Player.tileTargetY, 2, num15);
						int num20 = Player.tileTargetX;
						int num21 = Player.tileTargetY;
						if (Main.tile[Player.tileTargetX, Player.tileTargetY].frameX < 10)
						{
							num20 -= (int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameX;
							num21 -= (int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameY;
						}
						NetMessage.SendTileSquare(-1, num20, num21, 1, TileChangeType.None);
					}
				}
				else if (num15 >= 1895 && num15 <= 1905)
				{
					num15 -= 1894;
					if (WorldGen.checkXmasTreeDrop(Player.tileTargetX, Player.tileTargetY, 3) != num15)
					{
						this.itemTime = (int)(this.inventory[this.selectedItem].useTime / PlayerHooks.TotalUseTimeMultiplier(this, this.inventory[this.selectedItem]));
						WorldGen.dropXmasTree(Player.tileTargetX, Player.tileTargetY, 3);
						WorldGen.setXmasTree(Player.tileTargetX, Player.tileTargetY, 3, num15);
						int num22 = Player.tileTargetX;
						int num23 = Player.tileTargetY;
						if (Main.tile[Player.tileTargetX, Player.tileTargetY].frameX < 10)
						{
							num22 -= (int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameX;
							num23 -= (int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameY;
						}
						NetMessage.SendTileSquare(-1, num22, num23, 1, TileChangeType.None);
					}
				}
			}
			if (ItemID.Sets.ExtractinatorMode[this.inventory[this.selectedItem].type] >= 0 && Main.tile[Player.tileTargetX, Player.tileTargetY].active() && Main.tile[Player.tileTargetX, Player.tileTargetY].type == 219)
			{
				if (this.position.X / 16f - (float)Player.tileRangeX - (float)this.inventory[this.selectedItem].tileBoost - (float)this.blockRange <= (float)Player.tileTargetX && (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX + (float)this.inventory[this.selectedItem].tileBoost - 1f + (float)this.blockRange >= (float)Player.tileTargetX && this.position.Y / 16f - (float)Player.tileRangeY - (float)this.inventory[this.selectedItem].tileBoost - (float)this.blockRange <= (float)Player.tileTargetY && (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY + (float)this.inventory[this.selectedItem].tileBoost - 2f + (float)this.blockRange >= (float)Player.tileTargetY && this.itemTime == 0 && this.itemAnimation > 0 && this.controlUseItem)
				{
					this.itemTime = (int)(this.inventory[this.selectedItem].useTime / PlayerHooks.TotalUseTimeMultiplier(this, this.inventory[this.selectedItem]));
					Main.PlaySound(7, -1, -1, 1, 1f, 0f);
					int extractType = ItemID.Sets.ExtractinatorMode[this.inventory[this.selectedItem].type];
					Player.ExtractinatorUse(extractType);
				}
			}
			else if (!this.noBuilding && this.inventory[this.selectedItem].createTile >= 0 && this.position.X / 16f - (float)Player.tileRangeX - (float)this.inventory[this.selectedItem].tileBoost - (float)this.blockRange <= (float)Player.tileTargetX && (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX + (float)this.inventory[this.selectedItem].tileBoost - 1f + (float)this.blockRange >= (float)Player.tileTargetX && this.position.Y / 16f - (float)Player.tileRangeY - (float)this.inventory[this.selectedItem].tileBoost - (float)this.blockRange <= (float)Player.tileTargetY && (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY + (float)this.inventory[this.selectedItem].tileBoost - 2f + (float)this.blockRange >= (float)Player.tileTargetY)
			{
				this.showItemIcon = true;
				bool flag = false;
				if (Main.tile[Player.tileTargetX, Player.tileTargetY].liquid > 0 && Main.tile[Player.tileTargetX, Player.tileTargetY].lava())
				{
					if (Main.tileSolid[this.inventory[this.selectedItem].createTile])
					{
						flag = true;
					}
					else if (!TileObjectData.CheckLiquidPlacement(this.inventory[this.selectedItem].createTile, this.inventory[this.selectedItem].placeStyle, Main.tile[Player.tileTargetX, Player.tileTargetY]))
					{
						flag = true;
					}
				}
				bool flag2 = true;
				if (PlayerInput.UsingGamepad && this.inventory[this.selectedItem].createTile == 4 && Main.SmartCursorEnabled && !Main.SmartCursorShowing)
				{
					flag2 = false;
				}
				if (this.inventory[this.selectedItem].tileWand > 0)
				{
					int tileWand = this.inventory[this.selectedItem].tileWand;
					flag2 = false;
					for (int k = 0; k < 58; k++)
					{
						if (tileWand == this.inventory[k].type && this.inventory[k].stack > 0)
						{
							flag2 = true;
							break;
						}
					}
				}
				if (Main.tileRope[this.inventory[this.selectedItem].createTile] && flag2 && Main.tile[Player.tileTargetX, Player.tileTargetY].active() && Main.tileRope[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type])
				{
					int num24 = Player.tileTargetY;
					int num25 = Player.tileTargetX;
					int arg_1379_0 = this.inventory[this.selectedItem].createTile;
					while (Main.tile[num25, num24].active() && Main.tileRope[(int)Main.tile[num25, num24].type] && num24 < Main.maxTilesX - 5 && Main.tile[num25, num24 + 2] != null && !Main.tile[num25, num24 + 1].lava())
					{
						num24++;
						if (Main.tile[num25, num24] == null)
						{
							flag2 = false;
							num24 = Player.tileTargetY;
						}
					}
					if (!Main.tile[num25, num24].active())
					{
						Player.tileTargetY = num24;
					}
				}
				if (flag2 && ((!Main.tile[Player.tileTargetX, Player.tileTargetY].active() && !flag) || (Main.tileCut[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type] || (Main.tile[Player.tileTargetX, Player.tileTargetY].type >= 373 && Main.tile[Player.tileTargetX, Player.tileTargetY].type <= 375)) || Main.tile[Player.tileTargetX, Player.tileTargetY].type == 461 || this.inventory[this.selectedItem].createTile == 199 || this.inventory[this.selectedItem].createTile == 23 || this.inventory[this.selectedItem].createTile == 2 || this.inventory[this.selectedItem].createTile == 109 || this.inventory[this.selectedItem].createTile == 60 || this.inventory[this.selectedItem].createTile == 70 || TileID.Sets.BreakableWhenPlacing[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type]) && this.itemTime == 0 && this.itemAnimation > 0 && this.controlUseItem)
				{
					bool flag3 = false;
					bool flag4 = false;
					TileObject tileObject = default(TileObject);
					if (!TileLoader.CanPlace(Player.tileTargetX, Player.tileTargetY))
					{
					}
					else if (TileObjectData.CustomPlace(this.inventory[this.selectedItem].createTile, this.inventory[this.selectedItem].placeStyle) && this.inventory[this.selectedItem].createTile != 82)
					{
						flag4 = true;
						int hackCreateTile = this.inventory[this.selectedItem].createTile;
						int hackPlaceStyle = this.inventory[this.selectedItem].placeStyle;
						if (hackCreateTile == TileID.Saplings)
						{
							Tile soil = Main.tile[Player.tileTargetX, Player.tileTargetY + 1];
							if (soil.active())
							{
								TileLoader.SaplingGrowthType(soil.type, ref hackCreateTile, ref hackPlaceStyle);
							}
						}
						flag3 = TileObject.CanPlace(Player.tileTargetX, Player.tileTargetY, hackCreateTile, hackPlaceStyle, this.direction, out tileObject, false);
						int num26 = 0;
						int num27 = 0;
						int x = 0;
						int y = 0;
						int type = tileObject.type;
						if (type != 138)
						{
							if (type == 235)
							{
								num26 = 48;
								num27 = 16;
								x = tileObject.xCoord * 16;
								y = tileObject.yCoord * 16;
							}
						}
						else
						{
							num26 = 32;
							num27 = 32;
							x = tileObject.xCoord * 16;
							y = tileObject.yCoord * 16;
						}
						if (num26 != 0 && num27 != 0)
						{
							Rectangle value = new Rectangle(x, y, num26, num27);
							for (int l = 0; l < 255; l++)
							{
								Player player = Main.player[l];
								if (player.active && !player.dead && player.Hitbox.Intersects(value))
								{
									flag3 = false;
									break;
								}
							}
						}
						if (tileObject.type == 454)
						{
							for (int m = -2; m < 2; m++)
							{
								Tile tile = Main.tile[Player.tileTargetX + m, Player.tileTargetY];
								if (tile.active() && tile.type == 454)
								{
									flag3 = false;
								}
							}
						}
						if (tileObject.type == 254)
						{
							for (int n = -1; n < 1; n++)
							{
								for (int num28 = -1; num28 < 1; num28++)
								{
									if (!WorldGen.CanCutTile(Player.tileTargetX + num28, Player.tileTargetY + n, TileCuttingContext.TilePlacement))
									{
										flag3 = false;
									}
								}
							}
						}
					}
					else
					{
						if (this.inventory[this.selectedItem].type == 213)
						{
							if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 0 || Main.tile[Player.tileTargetX, Player.tileTargetY].type == 1)
							{
								flag3 = true;
							}
						}
						else if (this.inventory[this.selectedItem].createTile == 23 || this.inventory[this.selectedItem].createTile == 2 || this.inventory[this.selectedItem].createTile == 109 || this.inventory[this.selectedItem].createTile == 199)
						{
							if (Main.tile[Player.tileTargetX, Player.tileTargetY].nactive() && Main.tile[Player.tileTargetX, Player.tileTargetY].type == 0)
							{
								flag3 = true;
							}
						}
						else if (this.inventory[this.selectedItem].createTile == 227)
						{
							flag3 = true;
						}
						else if (this.inventory[this.selectedItem].createTile >= 373 && this.inventory[this.selectedItem].createTile <= 375)
						{
							int num29 = Player.tileTargetX;
							int num30 = Player.tileTargetY - 1;
							if (Main.tile[num29, num30].nactive() && Main.tileSolid[(int)Main.tile[num29, num30].type] && !Main.tileSolidTop[(int)Main.tile[num29, num30].type])
							{
								flag3 = true;
							}
						}
						else if (this.inventory[this.selectedItem].createTile == 461)
						{
							int num31 = Player.tileTargetX;
							int num32 = Player.tileTargetY - 1;
							if (Main.tile[num31, num32].nactive() && Main.tileSolid[(int)Main.tile[num31, num32].type] && !Main.tileSolidTop[(int)Main.tile[num31, num32].type])
							{
								flag3 = true;
							}
						}
						else if (this.inventory[this.selectedItem].createTile == 60 || this.inventory[this.selectedItem].createTile == 70)
						{
							if (Main.tile[Player.tileTargetX, Player.tileTargetY].nactive() && Main.tile[Player.tileTargetX, Player.tileTargetY].type == 59)
							{
								flag3 = true;
							}
						}
						else if (TileLoader.IsTorch(this.inventory[this.selectedItem].createTile) || this.inventory[this.selectedItem].createTile == 136)
						{
							if (Main.tile[Player.tileTargetX, Player.tileTargetY].wall > 0)
							{
								flag3 = true;
							}
							else
							{
								if (!WorldGen.SolidTileNoAttach(Player.tileTargetX, Player.tileTargetY + 1) && !WorldGen.SolidTileNoAttach(Player.tileTargetX - 1, Player.tileTargetY) && !WorldGen.SolidTileNoAttach(Player.tileTargetX + 1, Player.tileTargetY))
								{
									if (!WorldGen.SolidTileNoAttach(Player.tileTargetX, Player.tileTargetY + 1) && (Main.tile[Player.tileTargetX, Player.tileTargetY + 1].halfBrick() || Main.tile[Player.tileTargetX, Player.tileTargetY + 1].slope() != 0))
									{
										if (!TileID.Sets.Platforms[(int)Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type])
										{
											WorldGen.SlopeTile(Player.tileTargetX, Player.tileTargetY + 1, 0);
											if (Main.netMode == 1)
											{
												NetMessage.SendData(17, -1, -1, "", 14, (float)Player.tileTargetX, (float)(Player.tileTargetY + 1), 0f, 0, 0, 0);
											}
										}
									}
									else if (!WorldGen.SolidTileNoAttach(Player.tileTargetX, Player.tileTargetY + 1) && !WorldGen.SolidTileNoAttach(Player.tileTargetX - 1, Player.tileTargetY) && (Main.tile[Player.tileTargetX - 1, Player.tileTargetY].halfBrick() || Main.tile[Player.tileTargetX - 1, Player.tileTargetY].slope() != 0))
									{
										if (!TileID.Sets.Platforms[(int)Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type])
										{
											WorldGen.SlopeTile(Player.tileTargetX - 1, Player.tileTargetY, 0);
											if (Main.netMode == 1)
											{
												NetMessage.SendData(17, -1, -1, "", 14, (float)(Player.tileTargetX - 1), (float)Player.tileTargetY, 0f, 0, 0, 0);
											}
										}
									}
									else if (!WorldGen.SolidTileNoAttach(Player.tileTargetX, Player.tileTargetY + 1) && !WorldGen.SolidTileNoAttach(Player.tileTargetX - 1, Player.tileTargetY) && !WorldGen.SolidTileNoAttach(Player.tileTargetX + 1, Player.tileTargetY) && (Main.tile[Player.tileTargetX + 1, Player.tileTargetY].halfBrick() || Main.tile[Player.tileTargetX + 1, Player.tileTargetY].slope() != 0) && TileID.Sets.Platforms[(int)Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type])
									{
										WorldGen.SlopeTile(Player.tileTargetX + 1, Player.tileTargetY, 0);
										if (Main.netMode == 1)
										{
											NetMessage.SendData(17, -1, -1, "", 14, (float)(Player.tileTargetX + 1), (float)Player.tileTargetY, 0f, 0, 0, 0);
										}
									}
								}
								int num33 = (int)Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type;
								if (Main.tile[Player.tileTargetX, Player.tileTargetY].halfBrick())
								{
									num33 = -1;
								}
								int num34 = (int)Main.tile[Player.tileTargetX - 1, Player.tileTargetY].type;
								int num35 = (int)Main.tile[Player.tileTargetX + 1, Player.tileTargetY].type;
								int num36 = (int)Main.tile[Player.tileTargetX - 1, Player.tileTargetY - 1].type;
								int num37 = (int)Main.tile[Player.tileTargetX + 1, Player.tileTargetY - 1].type;
								int num38 = (int)Main.tile[Player.tileTargetX - 1, Player.tileTargetY - 1].type;
								int num39 = (int)Main.tile[Player.tileTargetX + 1, Player.tileTargetY + 1].type;
								if (!Main.tile[Player.tileTargetX, Player.tileTargetY + 1].nactive())
								{
									num33 = -1;
								}
								if (!Main.tile[Player.tileTargetX - 1, Player.tileTargetY].nactive())
								{
									num34 = -1;
								}
								if (!Main.tile[Player.tileTargetX + 1, Player.tileTargetY].nactive())
								{
									num35 = -1;
								}
								if (!Main.tile[Player.tileTargetX - 1, Player.tileTargetY - 1].nactive())
								{
									num36 = -1;
								}
								if (!Main.tile[Player.tileTargetX + 1, Player.tileTargetY - 1].nactive())
								{
									num37 = -1;
								}
								if (!Main.tile[Player.tileTargetX - 1, Player.tileTargetY + 1].nactive())
								{
									num38 = -1;
								}
								if (!Main.tile[Player.tileTargetX + 1, Player.tileTargetY + 1].nactive())
								{
									num39 = -1;
								}
								if (num33 >= 0 && Main.tileSolid[num33] && (!Main.tileNoAttach[num33] || (num33 >= 0 && TileID.Sets.Platforms[num33])))
								{
									flag3 = true;
								}
								else if ((num34 >= 0 && Main.tileSolid[num34] && !Main.tileNoAttach[num34]) || (num34 == 5 && num36 == 5 && num38 == 5) || num34 == 124)
								{
									flag3 = true;
								}
								else if ((num35 >= 0 && Main.tileSolid[num35] && !Main.tileNoAttach[num35]) || (num35 == 5 && num37 == 5 && num39 == 5) || num35 == 124)
								{
									flag3 = true;
								}
							}
						}
						else if (this.inventory[this.selectedItem].createTile == 78 || this.inventory[this.selectedItem].createTile == 98 || this.inventory[this.selectedItem].createTile == 100 || this.inventory[this.selectedItem].createTile == 173 || this.inventory[this.selectedItem].createTile == 174 || this.inventory[this.selectedItem].createTile == 324)
						{
							if (Main.tile[Player.tileTargetX, Player.tileTargetY + 1].nactive() && (Main.tileSolid[(int)Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type] || Main.tileTable[(int)Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type]))
							{
								flag3 = true;
							}
						}
						else if (this.inventory[this.selectedItem].createTile == 419)
						{
							if (Main.tile[Player.tileTargetX, Player.tileTargetY + 1].active() && (Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type == 419 || (this.inventory[this.selectedItem].placeStyle != 2 && Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type == 420)))
							{
								flag3 = true;
							}
						}
						else if (this.inventory[this.selectedItem].createTile == 13 || this.inventory[this.selectedItem].createTile == 29 || this.inventory[this.selectedItem].createTile == 33 || this.inventory[this.selectedItem].createTile == 49 || this.inventory[this.selectedItem].createTile == 50 || this.inventory[this.selectedItem].createTile == 103)
						{
							if (Main.tile[Player.tileTargetX, Player.tileTargetY + 1].nactive() && Main.tileTable[(int)Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type])
							{
								flag3 = true;
							}
						}
						else if (this.inventory[this.selectedItem].createTile == 275 || this.inventory[this.selectedItem].createTile == 276 || this.inventory[this.selectedItem].createTile == 277)
						{
							flag3 = true;
						}
						else if (this.inventory[this.selectedItem].createTile == 51 || this.inventory[this.selectedItem].createTile == 330 || this.inventory[this.selectedItem].createTile == 331 || this.inventory[this.selectedItem].createTile == 332 || this.inventory[this.selectedItem].createTile == 333 || this.inventory[this.selectedItem].createTile == 336 || this.inventory[this.selectedItem].createTile == 340 || this.inventory[this.selectedItem].createTile == 342 || this.inventory[this.selectedItem].createTile == 341 || this.inventory[this.selectedItem].createTile == 343 || this.inventory[this.selectedItem].createTile == 344 || this.inventory[this.selectedItem].createTile == 379 || this.inventory[this.selectedItem].createTile == 351)
						{
							if (Main.tile[Player.tileTargetX + 1, Player.tileTargetY].active() || Main.tile[Player.tileTargetX + 1, Player.tileTargetY].wall > 0 || Main.tile[Player.tileTargetX - 1, Player.tileTargetY].active() || Main.tile[Player.tileTargetX - 1, Player.tileTargetY].wall > 0 || Main.tile[Player.tileTargetX, Player.tileTargetY + 1].active() || Main.tile[Player.tileTargetX, Player.tileTargetY + 1].wall > 0 || Main.tile[Player.tileTargetX, Player.tileTargetY - 1].active() || Main.tile[Player.tileTargetX, Player.tileTargetY - 1].wall > 0)
							{
								flag3 = true;
							}
						}
						else if (this.inventory[this.selectedItem].createTile == 314)
						{
							for (int num40 = Player.tileTargetX - 1; num40 <= Player.tileTargetX + 1; num40++)
							{
								for (int num41 = Player.tileTargetY - 1; num41 <= Player.tileTargetY + 1; num41++)
								{
									Tile tile2 = Main.tile[num40, num41];
									if (tile2.active() || tile2.wall > 0)
									{
										flag3 = true;
										break;
									}
								}
							}
						}
						else
						{
							Tile tile3 = Main.tile[Player.tileTargetX - 1, Player.tileTargetY];
							Tile tile4 = Main.tile[Player.tileTargetX + 1, Player.tileTargetY];
							Tile tile5 = Main.tile[Player.tileTargetX, Player.tileTargetY - 1];
							Tile tile6 = Main.tile[Player.tileTargetX, Player.tileTargetY + 1];
							if ((tile4.active() && (Main.tileSolid[(int)tile4.type] || Main.tileRope[(int)tile4.type] || tile4.type == 314)) || (tile4.wall > 0 || (tile3.active() && (Main.tileSolid[(int)tile3.type] || Main.tileRope[(int)tile3.type] || tile3.type == 314))) || (tile3.wall > 0 || (tile6.active() && (Main.tileSolid[(int)tile6.type] || tile6.type == 124 || Main.tileRope[(int)tile6.type] || tile6.type == 314))) || (tile6.wall > 0 || (tile5.active() && (Main.tileSolid[(int)tile5.type] || tile5.type == 124 || Main.tileRope[(int)tile5.type] || tile5.type == 314))) || tile5.wall > 0)
							{
								flag3 = true;
							}
						}
						if (this.inventory[this.selectedItem].type == 213 && Main.tile[Player.tileTargetX, Player.tileTargetY].active())
						{
							int num42 = Player.tileTargetX;
							int num43 = Player.tileTargetY;
							if (Main.tile[num42, num43].type == 3 || Main.tile[num42, num43].type == 73 || Main.tile[num42, num43].type == 84)
							{
								WorldGen.KillTile(Player.tileTargetX, Player.tileTargetY, false, false, false);
								if (!Main.tile[Player.tileTargetX, Player.tileTargetY].active() && Main.netMode == 1)
								{
									NetMessage.SendData(17, -1, -1, "", 0, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
								}
							}
							else if (Main.tile[num42, num43].type == 83)
							{
								bool flag5 = false;
								int num44 = (int)(Main.tile[num42, num43].frameX / 18);
								if (num44 == 0 && Main.dayTime)
								{
									flag5 = true;
								}
								if (num44 == 1 && !Main.dayTime)
								{
									flag5 = true;
								}
								if (num44 == 3 && !Main.dayTime && (Main.bloodMoon || Main.moonPhase == 0))
								{
									flag5 = true;
								}
								if (num44 == 4 && (Main.raining || Main.cloudAlpha > 0f))
								{
									flag5 = true;
								}
								if (num44 == 5 && !Main.raining && Main.dayTime && Main.time > 40500.0)
								{
									flag5 = true;
								}
								if (flag5)
								{
									WorldGen.KillTile(Player.tileTargetX, Player.tileTargetY, false, false, false);
									NetMessage.SendData(17, -1, -1, "", 0, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
								}
							}
						}
						if (Main.tileAlch[this.inventory[this.selectedItem].createTile])
						{
							flag3 = true;
						}
						if (Main.tile[Player.tileTargetX, Player.tileTargetY].active() && (Main.tileCut[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type] || TileID.Sets.BreakableWhenPlacing[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type] || (Main.tile[Player.tileTargetX, Player.tileTargetY].type >= 373 && Main.tile[Player.tileTargetX, Player.tileTargetY].type <= 375) || Main.tile[Player.tileTargetX, Player.tileTargetY].type == 461))
						{
							if ((int)Main.tile[Player.tileTargetX, Player.tileTargetY].type != this.inventory[this.selectedItem].createTile)
							{
								if ((Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type != 78 && Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type != 380) || ((Main.tile[Player.tileTargetX, Player.tileTargetY].type == 3 || Main.tile[Player.tileTargetX, Player.tileTargetY].type == 73) && Main.tileAlch[this.inventory[this.selectedItem].createTile]))
								{
									WorldGen.KillTile(Player.tileTargetX, Player.tileTargetY, false, false, false);
									if (!Main.tile[Player.tileTargetX, Player.tileTargetY].active() && Main.netMode == 1)
									{
										NetMessage.SendData(17, -1, -1, "", 4, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
									}
								}
								else
								{
									flag3 = false;
								}
							}
							else
							{
								flag3 = false;
							}
						}
						if (!flag3 && this.inventory[this.selectedItem].createTile >= 0 && TileID.Sets.Platforms[this.inventory[this.selectedItem].createTile])
						{
							for (int num45 = Player.tileTargetX - 1; num45 <= Player.tileTargetX + 1; num45++)
							{
								for (int num46 = Player.tileTargetY - 1; num46 <= Player.tileTargetY + 1; num46++)
								{
									if (Main.tile[num45, num46].active())
									{
										flag3 = true;
										break;
									}
								}
							}
						}
					}
					if (flag3)
					{
						int num47 = this.inventory[this.selectedItem].placeStyle;
						if (!flag4)
						{
							if (this.inventory[this.selectedItem].createTile == 36)
							{
								num47 = Main.rand.Next(7);
							}
							if (this.inventory[this.selectedItem].createTile == 212 && this.direction > 0)
							{
								num47 = 1;
							}
							if (this.inventory[this.selectedItem].createTile == 141)
							{
								num47 = Main.rand.Next(2);
							}
							if (this.inventory[this.selectedItem].createTile == 128 || this.inventory[this.selectedItem].createTile == 269 || this.inventory[this.selectedItem].createTile == 334)
							{
								if (this.direction < 0)
								{
									num47 = -1;
								}
								else
								{
									num47 = 1;
								}
							}
							if (this.inventory[this.selectedItem].createTile == 241 && this.inventory[this.selectedItem].placeStyle == 0)
							{
								num47 = Main.rand.Next(0, 9);
							}
							if (this.inventory[this.selectedItem].createTile == 35 && this.inventory[this.selectedItem].placeStyle == 0)
							{
								num47 = Main.rand.Next(9);
							}
						}
						if (this.inventory[this.selectedItem].createTile == 314 && num47 == 2 && this.direction == 1)
						{
							num47++;
						}
						int[,] array = null;
						if (this.autoPaint || this.autoActuator)
						{
							array = new int[11, 11];
							for (int num48 = 0; num48 < 11; num48++)
							{
								for (int num49 = 0; num49 < 11; num49++)
								{
									int num50 = Player.tileTargetX - 5 + num48;
									int num51 = Player.tileTargetY - 5 + num49;
									if (Main.tile[num50, num51].active())
									{
										array[num48, num49] = (int)Main.tile[num50, num51].type;
									}
									else
									{
										array[num48, num49] = -1;
									}
								}
							}
						}
						bool forced = false;
						bool flag6;
						if (flag4)
						{
							flag6 = TileObject.Place(tileObject);
							WorldGen.SquareTileFrame(Player.tileTargetX, Player.tileTargetY, true);
							Main.PlaySound(0, Player.tileTargetX * 16, Player.tileTargetY * 16, 1, 1f, 0f);
						}
						else
						{
							flag6 = WorldGen.PlaceTile(Player.tileTargetX, Player.tileTargetY, this.inventory[this.selectedItem].createTile, false, forced, this.whoAmI, num47);
						}
						if (this.inventory[this.selectedItem].type == 213 && !flag6 && Main.tile[Player.tileTargetX, Player.tileTargetY].type == 1 && Main.tile[Player.tileTargetX, Player.tileTargetY].active())
						{
							int num52 = 0;
							int num53 = 0;
							Point point = base.Center.ToTileCoordinates();
							Dictionary<ushort, int> dictionary = new Dictionary<ushort, int>();
							WorldUtils.Gen(new Point(point.X - 25, point.Y - 25), new Shapes.Rectangle(50, 50), new Actions.TileScanner(new ushort[]
									{
										182,
										180,
										179,
										183,
										181,
										381
									}).Output(dictionary));
							foreach (KeyValuePair<ushort, int> current in dictionary)
							{
								if (current.Value > num53)
								{
									num53 = current.Value;
									num52 = (int)current.Key;
								}
							}
							if (num53 == 0)
							{
								num52 = Utils.SelectRandom<int>(Main.rand, new int[]
									{
										182,
										180,
										179,
										183,
										181
									});
							}
							if (num52 != 0)
							{
								Main.tile[Player.tileTargetX, Player.tileTargetY].type = (ushort)num52;
								WorldGen.SquareTileFrame(Player.tileTargetX, Player.tileTargetY, true);
								NetMessage.SendTileSquare(-1, Player.tileTargetX, Player.tileTargetY, 1, TileChangeType.None);
								flag6 = true;
							}
						}
						if (flag6)
						{
							this.itemTime = (int)((float)this.inventory[this.selectedItem].useTime * this.tileSpeed / PlayerHooks.TotalUseTimeMultiplier(this, this.inventory[this.selectedItem]));
							if (flag4)
							{
								TileObjectData.CallPostPlacementPlayerHook(Player.tileTargetX, Player.tileTargetY, this.inventory[this.selectedItem].createTile, num47, this.direction, tileObject);
								if (Main.netMode == 1 && !Main.tileContainer[this.inventory[this.selectedItem].createTile] && this.inventory[this.selectedItem].createTile != 423)
								{
									NetMessage.SendObjectPlacment(-1, Player.tileTargetX, Player.tileTargetY, tileObject.type, tileObject.style, tileObject.alternate, tileObject.random, this.direction);
								}
							}
							else
							{
								NetMessage.SendData(17, -1, -1, "", 1, (float)Player.tileTargetX, (float)Player.tileTargetY, (float)this.inventory[this.selectedItem].createTile, num47, 0, 0);
								if (this.inventory[this.selectedItem].createTile == 15)
								{
									if (this.direction == 1)
									{
										Tile expr_310C = Main.tile[Player.tileTargetX, Player.tileTargetY];
										expr_310C.frameX += 18;
										Tile expr_3131 = Main.tile[Player.tileTargetX, Player.tileTargetY - 1];
										expr_3131.frameX += 18;
									}
									if (Main.netMode == 1)
									{
										NetMessage.SendTileSquare(-1, Player.tileTargetX - 1, Player.tileTargetY - 1, 3, TileChangeType.None);
									}
								}
								else if ((this.inventory[this.selectedItem].createTile == 79 || this.inventory[this.selectedItem].createTile == 90) && Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, Player.tileTargetX, Player.tileTargetY, 5, TileChangeType.None);
								}
							}
							if (this.inventory[this.selectedItem].createTile == 137)
							{
								if (this.direction == 1)
								{
									Tile expr_31DC = Main.tile[Player.tileTargetX, Player.tileTargetY];
									expr_31DC.frameX += 18;
								}
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, Player.tileTargetX, Player.tileTargetY, 1, TileChangeType.None);
								}
							}
							if (this.inventory[this.selectedItem].createTile == 419)
							{
								if (Main.netMode == 1)
								{
									NetMessage.SendData(17, -1, -1, "", 18, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
								}
								else
								{
									Wiring.PokeLogicGate(Player.tileTargetX, Player.tileTargetY);
								}
							}
							if (this.inventory[this.selectedItem].createTile >= 0 && TileID.Sets.Platforms[this.inventory[this.selectedItem].createTile] && Main.SmartCursorEnabled)
							{
								int num54 = Player.tileTargetX;
								int num55 = Player.tileTargetY;
								int num56 = -1;
								int num57 = 0;
								int num58 = 0;
								bool flag7 = true;
								for (int num59 = -1; num59 < 2; num59++)
								{
									for (int num60 = -1; num60 < 2; num60++)
									{
										if ((num59 != 0 || num60 != 0) && TileID.Sets.Platforms[(int)Main.tile[num54 + num59, num55 + num60].type])
										{
											flag7 = false;
										}
									}
								}
								if (!flag7)
								{
									Tile tile7 = Main.tile[num54 - 1, num55 - 1];
									if (tile7.active() && TileID.Sets.Platforms[(int)tile7.type] && tile7.slope() != 2)
									{
										num57++;
									}
									tile7 = Main.tile[num54 - 1, num55 + 1];
									if (tile7.active() && TileID.Sets.Platforms[(int)tile7.type] && tile7.slope() != 1)
									{
										num58++;
									}
									tile7 = Main.tile[num54 + 1, num55 - 1];
									if (tile7.active() && TileID.Sets.Platforms[(int)tile7.type] && tile7.slope() != 1)
									{
										num58++;
									}
									tile7 = Main.tile[num54 + 1, num55 + 1];
									if (tile7.active() && TileID.Sets.Platforms[(int)tile7.type] && tile7.slope() != 2)
									{
										num57++;
									}
									tile7 = Main.tile[num54 - 1, num55];
									if (WorldGen.SolidTile(tile7))
									{
										num57++;
										if (TileID.Sets.Platforms[(int)tile7.type] && tile7.slope() == 0)
										{
											num57++;
										}
									}
									tile7 = Main.tile[num54 + 1, num55];
									if (WorldGen.SolidTile(tile7))
									{
										num58++;
										if (TileID.Sets.Platforms[(int)tile7.type] && tile7.slope() == 0)
										{
											num58++;
										}
									}
									if (num57 > num58)
									{
										num56 = 1;
									}
									else if (num58 > num57)
									{
										num56 = 2;
									}
									tile7 = Main.tile[num54 - 1, num55];
									if (tile7.active() && TileID.Sets.Platforms[(int)tile7.type])
									{
										num56 = 0;
									}
									tile7 = Main.tile[num54 + 1, num55];
									if (tile7.active() && TileID.Sets.Platforms[(int)tile7.type])
									{
										num56 = 0;
									}
									if (num56 != -1)
									{
										WorldGen.SlopeTile(num54, num55, num56);
										int num61 = (int)Main.tile[num54, num55].slope();
										if (Main.netMode == 1)
										{
											NetMessage.SendData(17, -1, -1, "", 14, (float)Player.tileTargetX, (float)Player.tileTargetY, (float)num61, 0, 0, 0);
										}
										int num62;
										int num63;
										if (num56 == 1)
										{
											num62 = -1;
											num63 = -1;
										}
										else
										{
											num62 = 1;
											num63 = -1;
										}
										tile7 = Main.tile[num54 + num62, num55 + num63];
										if (tile7.active() && TileID.Sets.Platforms[(int)tile7.type] && tile7.slope() == 0 && (!Main.tile[num54 + num62 + num62, num55 + num63].active() || !TileID.Sets.Platforms[(int)Main.tile[num54 + num62 + num62, num55 + num63].type] || !Main.tile[num54 + num62 + num62, num55 + num63].halfBrick()))
										{
											WorldGen.SlopeTile(num54 + num62, num55 + num63, num56);
											num61 = (int)tile7.slope();
											if (Main.netMode == 1)
											{
												NetMessage.SendData(17, -1, -1, "", 14, (float)(num54 + num62), (float)(num55 + num63), (float)num61, 0, 0, 0);
											}
										}
										if (num56 == 1)
										{
											num62 = 1;
											num63 = 1;
										}
										else
										{
											num62 = -1;
											num63 = 1;
										}
										tile7 = Main.tile[num54 + num62, num55 + num63];
										if (tile7.active() && TileID.Sets.Platforms[(int)tile7.type] && tile7.slope() == 0 && WorldGen.PlatformProperSides(num54 + num62, num55 + num63, true) <= 0)
										{
											WorldGen.SlopeTile(num54 + num62, num55 + num63, num56);
											num61 = (int)tile7.slope();
											if (Main.netMode == 1)
											{
												NetMessage.SendData(17, -1, -1, "", 14, (float)(num54 + num62), (float)(num55 + num63), (float)num61, 0, 0, 0);
											}
										}
									}
									else
									{
										int num62 = -1;
										tile7 = Main.tile[num54 + num62, num55];
										if (tile7.active() && TileID.Sets.Platforms[(int)tile7.type] && tile7.slope() != 0)
										{
											int num64 = (tile7.slope() == 1).ToDirectionInt() * num62;
											num56 = (int)((num64 == -1) ? 0 : tile7.slope());
											bool flag8 = true;
											if (Main.tile[num54 + num62 * 2, num55 + num64].active() && TileID.Sets.Platforms[(int)Main.tile[num54 + num62 * 2, num55].type] && num56 == (int)Main.tile[num54 + num62 * 2, num55 + num64].slope())
											{
												flag8 = false;
											}
											if (Main.tile[num54, num55 - num64].active() && TileID.Sets.Platforms[(int)Main.tile[num54, num55 - num64].type] && tile7.slope() == Main.tile[num54, num55 - num64].slope())
											{
												flag8 = false;
											}
											if (flag8)
											{
												WorldGen.SlopeTile(num54 + num62, num55, num56);
												int num65 = (int)tile7.slope();
												if (Main.netMode == 1)
												{
													NetMessage.SendData(17, -1, -1, "", 14, (float)(num54 + num62), (float)num55, (float)num65, 0, 0, 0);
												}
											}
										}
										num62 = 1;
										int num63 = 0;
										tile7 = Main.tile[num54 + num62, num55 + num63];
										if (tile7.active() && TileID.Sets.Platforms[(int)tile7.type] && tile7.slope() != 0)
										{
											int num66 = (tile7.slope() == 1).ToDirectionInt() * num62;
											num56 = (int)((num66 == -1) ? 0 : tile7.slope());
											bool flag9 = true;
											if (Main.tile[num54 + num62 * 2, num55 + num66].active() && TileID.Sets.Platforms[(int)Main.tile[num54 + num62 * 2, num55].type] && num56 == (int)Main.tile[num54 + num62 * 2, num55 + num66].slope())
											{
												flag9 = false;
											}
											if (Main.tile[num54, num55 - num66].active() && TileID.Sets.Platforms[(int)Main.tile[num54, num55 - num66].type] && tile7.slope() == Main.tile[num54, num55 - num66].slope())
											{
												flag9 = false;
											}
											if (flag9)
											{
												WorldGen.SlopeTile(num54 + num62, num55, num56);
												int num65 = (int)tile7.slope();
												if (Main.netMode == 1)
												{
													NetMessage.SendData(17, -1, -1, "", 14, (float)(num54 + num62), (float)num55, (float)num65, 0, 0, 0);
												}
											}
										}
										if (num57 == num58 && WorldGen.PlatformProperSides(num54, num55, false) == 0)
										{
											tile7 = Main.tile[num54, num55 + 1];
											if (tile7.active() && !tile7.halfBrick() && tile7.slope() == 0 && Main.tileSolid[(int)tile7.type])
											{
												num56 = ((this.direction == 1) ? 2 : 1);
												WorldGen.SlopeTile(num54, num55, num56);
												int num65 = (int)Main.tile[num54, num55].slope();
												if (Main.netMode == 1)
												{
													NetMessage.SendData(17, -1, -1, "", 14, (float)Player.tileTargetX, (float)Player.tileTargetY, (float)num65, 0, 0, 0);
												}
											}
										}
									}
								}
							}
							if (Main.tileSolid[this.inventory[this.selectedItem].createTile] && (this.inventory[this.selectedItem].createTile < 0 || !TileID.Sets.Platforms[this.inventory[this.selectedItem].createTile]))
							{
								int num67 = Player.tileTargetX;
								int num68 = Player.tileTargetY + 1;
								if (Main.tile[num67, num68] != null && !TileID.Sets.Platforms[(int)Main.tile[num67, num68].type] && (Main.tile[num67, num68].topSlope() || Main.tile[num67, num68].halfBrick()))
								{
									WorldGen.SlopeTile(num67, num68, 0);
									if (Main.netMode == 1)
									{
										NetMessage.SendData(17, -1, -1, "", 14, (float)num67, (float)num68, 0f, 0, 0, 0);
									}
								}
								num67 = Player.tileTargetX;
								num68 = Player.tileTargetY - 1;
								if (Main.tile[num67, num68] != null && !TileID.Sets.Platforms[(int)Main.tile[num67, num68].type] && Main.tile[num67, num68].bottomSlope())
								{
									WorldGen.SlopeTile(num67, num68, 0);
									if (Main.netMode == 1)
									{
										NetMessage.SendData(17, -1, -1, "", 14, (float)num67, (float)num68, 0f, 0, 0, 0);
									}
								}
							}
							if (Main.tileSolid[this.inventory[this.selectedItem].createTile])
							{
								for (int num69 = Player.tileTargetX - 1; num69 <= Player.tileTargetX + 1; num69++)
								{
									for (int num70 = Player.tileTargetY - 1; num70 <= Player.tileTargetY + 1; num70++)
									{
										if (Main.tile[num69, num70].active() && this.inventory[this.selectedItem].createTile != (int)Main.tile[num69, num70].type && (Main.tile[num69, num70].type == 2 || Main.tile[num69, num70].type == 23 || Main.tile[num69, num70].type == 60 || Main.tile[num69, num70].type == 70 || Main.tile[num69, num70].type == 109 || Main.tile[num69, num70].type == 199))
										{
											bool flag10 = true;
											for (int num71 = num69 - 1; num71 <= num69 + 1; num71++)
											{
												for (int num72 = num70 - 1; num72 <= num70 + 1; num72++)
												{
													if (!WorldGen.SolidTile(num71, num72))
													{
														flag10 = false;
													}
												}
											}
											if (flag10)
											{
												WorldGen.KillTile(num69, num70, true, false, false);
												if (Main.netMode == 1)
												{
													NetMessage.SendData(17, -1, -1, "", 0, (float)num69, (float)num70, 1f, 0, 0, 0);
												}
											}
										}
									}
								}
							}
							if (this.autoPaint || this.autoActuator)
							{
								int num73 = 0;
								int num74 = 0;
								int num75 = 11;
								int num76 = 11;
								if (!Main.tileFrameImportant[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type])
								{
									num74 = (num73 = 5);
									num76 = (num75 = 6);
								}
								for (int num77 = num73; num77 < num75; num77++)
								{
									for (int num78 = num74; num78 < num76; num78++)
									{
										int num79 = Player.tileTargetX - 5 + num77;
										int num80 = Player.tileTargetY - 5 + num78;
										if ((Main.tile[num79, num80].active() || array[num77, num78] != -1) && (!Main.tile[num79, num80].active() || (array[num77, num78] != (int)Main.tile[num79, num80].type && (int)Main.tile[num79, num80].type == this.inventory[this.selectedItem].createTile)))
										{
											if (this.autoPaint && this.builderAccStatus[3] == 0)
											{
												int num81 = -1;
												int num82 = -1;
												for (int num83 = 0; num83 < 58; num83++)
												{
													if (this.inventory[num83].stack > 0 && this.inventory[num83].paint > 0)
													{
														num81 = (int)this.inventory[num83].paint;
														num82 = num83;
														break;
													}
												}
												if (num81 > 0 && (int)Main.tile[num79, num80].color() != num81 && WorldGen.paintTile(num79, num80, (byte)num81, true))
												{
													int num84 = num82;
													this.inventory[num84].stack--;
													if (this.inventory[num84].stack <= 0)
													{
														this.inventory[num84].SetDefaults(0, false);
													}
													this.itemTime = (int)((float)this.inventory[this.selectedItem].useTime * this.tileSpeed / PlayerHooks.TotalUseTimeMultiplier(this, this.inventory[this.selectedItem]));
												}
											}
											if (this.autoActuator && this.builderAccStatus[2] == 0)
											{
												bool flag11 = Main.tileSolid[(int)Main.tile[num79, num80].type] && !TileID.Sets.NotReallySolid[(int)Main.tile[num79, num80].type];
												ushort type2 = Main.tile[num79, num80].type;
												if (type2 == 314)
												{
													goto IL_3FF1;
												}
												switch (type2)
												{
													case 386:
													case 387:
													case 388:
													case 389:
														goto IL_3FF1;
												}
												IL_3FF4:
												if (!flag11)
												{
													goto IL_4090;
												}
												int num85 = this.FindItem(849);
												if (num85 > -1 && WorldGen.PlaceActuator(num79, num80))
												{
													NetMessage.SendData(17, -1, -1, "", 8, (float)num79, (float)num80, 0f, 0, 0, 0);
													this.inventory[num85].stack--;
													if (this.inventory[num85].stack <= 0)
													{
														this.inventory[num85].SetDefaults(0, false);
													}
													this.itemTime = (int)((float)this.inventory[this.selectedItem].useTime * this.tileSpeed / PlayerHooks.TotalUseTimeMultiplier(this, this.inventory[this.selectedItem]));
													goto IL_4090;
												}
												goto IL_4090;
												IL_3FF1:
												flag11 = false;
												goto IL_3FF4;
											}
										}
										IL_4090:
										;
									}
								}
							}
							if (PlayerInput.UsingGamepad && ItemID.Sets.SingleUseInGamepad[this.inventory[this.selectedItem].type] && Main.myPlayer == this.whoAmI && !Main.SmartCursorEnabled)
							{
								Main.blockMouse = true;
							}

							TileLoader.PlaceInWorld(Player.tileTargetX, Player.tileTargetY, this.inventory[this.selectedItem]);
						}
					}
				}
			}
			if (this.inventory[this.selectedItem].createWall >= 0 && this.position.X / 16f - (float)Player.tileRangeX - (float)this.inventory[this.selectedItem].tileBoost <= (float)Player.tileTargetX && (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX + (float)this.inventory[this.selectedItem].tileBoost - 1f >= (float)Player.tileTargetX && this.position.Y / 16f - (float)Player.tileRangeY - (float)this.inventory[this.selectedItem].tileBoost <= (float)Player.tileTargetY && (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY + (float)this.inventory[this.selectedItem].tileBoost - 2f >= (float)Player.tileTargetY)
			{
				this.showItemIcon = true;
				if (this.itemTime == 0 && this.itemAnimation > 0 && this.controlUseItem && (Main.tile[Player.tileTargetX + 1, Player.tileTargetY].active() || Main.tile[Player.tileTargetX + 1, Player.tileTargetY].wall > 0 || Main.tile[Player.tileTargetX - 1, Player.tileTargetY].active() || Main.tile[Player.tileTargetX - 1, Player.tileTargetY].wall > 0 || Main.tile[Player.tileTargetX, Player.tileTargetY + 1].active() || Main.tile[Player.tileTargetX, Player.tileTargetY + 1].wall > 0 || Main.tile[Player.tileTargetX, Player.tileTargetY - 1].active() || Main.tile[Player.tileTargetX, Player.tileTargetY - 1].wall > 0) && (int)Main.tile[Player.tileTargetX, Player.tileTargetY].wall != this.inventory[this.selectedItem].createWall)
				{
					if (Player.SmartCursorSettings.SmartWallReplacement && Main.tile[Player.tileTargetX, Player.tileTargetY].wall != 0 && WorldGen.NearFriendlyWall(Player.tileTargetX, Player.tileTargetY))
					{
						WorldGen.KillWall(Player.tileTargetX, Player.tileTargetY, false);
						if (Main.tile[Player.tileTargetX, Player.tileTargetY].wall == 0 && Main.netMode == 1)
						{
							NetMessage.SendData(17, -1, -1, "", 2, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
						}
						if (this.inventory[this.selectedItem].consumable)
						{
							this.inventory[this.selectedItem].stack++;
						}
						this.itemTime = (int)((float)this.inventory[this.selectedItem].useTime * this.wallSpeed / PlayerHooks.TotalUseTimeMultiplier(this, this.inventory[this.selectedItem]));
						return;
					}

					WorldGen.PlaceWall(Player.tileTargetX, Player.tileTargetY, this.inventory[this.selectedItem].createWall, false);

					if ((int)Main.tile[Player.tileTargetX, Player.tileTargetY].wall == this.inventory[this.selectedItem].createWall)
					{
						WallLoader.PlaceInWorld(Player.tileTargetX, Player.tileTargetY, this.inventory[this.selectedItem]);
						this.itemTime = (int)((float)this.inventory[this.selectedItem].useTime * this.wallSpeed / PlayerHooks.TotalUseTimeMultiplier(this, this.inventory[this.selectedItem]));
						if (Main.netMode == 1)
						{
							NetMessage.SendData(17, -1, -1, "", 3, (float)Player.tileTargetX, (float)Player.tileTargetY, (float)this.inventory[this.selectedItem].createWall, 0, 0, 0);
						}
						if (this.inventory[this.selectedItem].stack > 1)
						{
							int createWall = this.inventory[this.selectedItem].createWall;
							for (int num86 = 0; num86 < 4; num86++)
							{
								int num87 = Player.tileTargetX;
								int num88 = Player.tileTargetY;
								if (num86 == 0)
								{
									num87--;
								}
								if (num86 == 1)
								{
									num87++;
								}
								if (num86 == 2)
								{
									num88--;
								}
								if (num86 == 3)
								{
									num88++;
								}
								if (Main.tile[num87, num88].wall == 0)
								{
									int num89 = 0;
									for (int num90 = 0; num90 < 4; num90++)
									{
										int num91 = num87;
										int num92 = num88;
										if (num90 == 0)
										{
											num91--;
										}
										if (num90 == 1)
										{
											num91++;
										}
										if (num90 == 2)
										{
											num92--;
										}
										if (num90 == 3)
										{
											num92++;
										}
										if ((int)Main.tile[num91, num92].wall == createWall)
										{
											num89++;
										}
									}
									if (num89 == 4)
									{
										WorldGen.PlaceWall(num87, num88, createWall, false);
										if ((int)Main.tile[num87, num88].wall == createWall)
										{
											this.inventory[this.selectedItem].stack--;
											if (this.inventory[this.selectedItem].stack == 0)
											{
												this.inventory[this.selectedItem].SetDefaults(0, false);
											}
											if (Main.netMode == 1)
											{
												NetMessage.SendData(17, -1, -1, "", 3, (float)num87, (float)num88, (float)createWall, 0, 0, 0);
											}
											if (this.autoPaint && this.builderAccStatus[3] == 0)
											{
												int num93 = num87;
												int num94 = num88;
												int num95 = -1;
												int num96 = -1;
												for (int num97 = 0; num97 < 58; num97++)
												{
													if (this.inventory[num97].stack > 0 && this.inventory[num97].paint > 0)
													{
														num95 = (int)this.inventory[num97].paint;
														num96 = num97;
														break;
													}
												}
												if (num95 > 0 && (int)Main.tile[num93, num94].wallColor() != num95 && WorldGen.paintWall(num93, num94, (byte)num95, true))
												{
													int num98 = num96;
													this.inventory[num98].stack--;
													if (this.inventory[num98].stack <= 0)
													{
														this.inventory[num98].SetDefaults(0, false);
													}
													this.itemTime = (int)((float)this.inventory[this.selectedItem].useTime * this.wallSpeed / PlayerHooks.TotalUseTimeMultiplier(this, this.inventory[this.selectedItem]));
												}
											}
										}
									}
								}
							}
						}
						if (this.autoPaint && this.builderAccStatus[3] == 0)
						{
							int num99 = Player.tileTargetX;
							int num100 = Player.tileTargetY;
							int num101 = -1;
							int num102 = -1;
							for (int num103 = 0; num103 < 58; num103++)
							{
								if (this.inventory[num103].stack > 0 && this.inventory[num103].paint > 0)
								{
									num101 = (int)this.inventory[num103].paint;
									num102 = num103;
									break;
								}
							}
							if (num101 > 0 && (int)Main.tile[num99, num100].wallColor() != num101 && WorldGen.paintWall(num99, num100, (byte)num101, true))
							{
								int num104 = num102;
								this.inventory[num104].stack--;
								if (this.inventory[num104].stack <= 0)
								{
									this.inventory[num104].SetDefaults(0, false);
								}
								this.itemTime = (int)((float)this.inventory[this.selectedItem].useTime * this.wallSpeed / PlayerHooks.TotalUseTimeMultiplier(this, this.inventory[this.selectedItem]));
							}
						}
					}
				}
			}
		}

		private void ShootFromCannon(int x, int y)
		{
			int num = 0;
			if (Main.tile[x, y].frameX < 72)
			{
				if (this.inventory[this.selectedItem].type == 929)
				{
					num = 1;
				}
			}
			else if (Main.tile[x, y].frameX < 144)
			{
				if (this.inventory[this.selectedItem].type == 1338)
				{
					num = 2;
				}
			}
			else if (Main.tile[x, y].frameX < 288 && this.inventory[this.selectedItem].type == 1345)
			{
				num = 3;
			}
			if (num > 0)
			{
				this.showItemIcon = true;
				if (this.itemTime == 0 && this.itemAnimation > 0 && this.controlUseItem)
				{
					int i = (int)(Main.tile[x, y].frameX / 18);
					int num2 = 0;
					int num3 = 0;
					while (i >= 4)
					{
						num2++;
						i -= 4;
					}
					i = x - i;
					int j;
					for (j = (int)(Main.tile[x, y].frameY / 18); j >= 3; j -= 3)
					{
						num3++;
					}
					j = y - j;
					this.itemTime = (int)(this.inventory[this.selectedItem].useTime / PlayerHooks.TotalUseTimeMultiplier(this, this.inventory[this.selectedItem]));
					WorldGen.ShootFromCannon(i, j, num3, num, this.inventory[this.selectedItem].damage, 8f, Main.myPlayer);
				}
			}
		}

		private static void ExtractinatorUse(int extractType)
		{
			int num = 5000;
			int num2 = 25;
			int num3 = 50;
			int num4 = -1;
			if (extractType == ItemID.DesertFossil)
			{
				num /= 3;
				num2 *= 2;
				num3 /= 2;
				num4 = 10;
			}
			int num5 = 1;
			int num6 = 0;
			if (num4 != -1 && Main.rand.Next(num4) == 0)
			{
				num6 = 3380;
				if (Main.rand.Next(5) == 0)
				{
					num5 += Main.rand.Next(2);
				}
				if (Main.rand.Next(10) == 0)
				{
					num5 += Main.rand.Next(3);
				}
				if (Main.rand.Next(15) == 0)
				{
					num5 += Main.rand.Next(4);
				}
			}
			else if (Main.rand.Next(2) == 0)
			{
				if (Main.rand.Next(12000) == 0)
				{
					num6 = 74;
					if (Main.rand.Next(14) == 0)
					{
						num5 += Main.rand.Next(0, 2);
					}
					if (Main.rand.Next(14) == 0)
					{
						num5 += Main.rand.Next(0, 2);
					}
					if (Main.rand.Next(14) == 0)
					{
						num5 += Main.rand.Next(0, 2);
					}
				}
				else if (Main.rand.Next(800) == 0)
				{
					num6 = 73;
					if (Main.rand.Next(6) == 0)
					{
						num5 += Main.rand.Next(1, 21);
					}
					if (Main.rand.Next(6) == 0)
					{
						num5 += Main.rand.Next(1, 21);
					}
					if (Main.rand.Next(6) == 0)
					{
						num5 += Main.rand.Next(1, 21);
					}
					if (Main.rand.Next(6) == 0)
					{
						num5 += Main.rand.Next(1, 21);
					}
					if (Main.rand.Next(6) == 0)
					{
						num5 += Main.rand.Next(1, 20);
					}
				}
				else if (Main.rand.Next(60) == 0)
				{
					num6 = 72;
					if (Main.rand.Next(4) == 0)
					{
						num5 += Main.rand.Next(5, 26);
					}
					if (Main.rand.Next(4) == 0)
					{
						num5 += Main.rand.Next(5, 26);
					}
					if (Main.rand.Next(4) == 0)
					{
						num5 += Main.rand.Next(5, 26);
					}
					if (Main.rand.Next(4) == 0)
					{
						num5 += Main.rand.Next(5, 25);
					}
				}
				else
				{
					num6 = 71;
					if (Main.rand.Next(3) == 0)
					{
						num5 += Main.rand.Next(10, 26);
					}
					if (Main.rand.Next(3) == 0)
					{
						num5 += Main.rand.Next(10, 26);
					}
					if (Main.rand.Next(3) == 0)
					{
						num5 += Main.rand.Next(10, 26);
					}
					if (Main.rand.Next(3) == 0)
					{
						num5 += Main.rand.Next(10, 25);
					}
				}
			}
			else if (num != -1 && Main.rand.Next(num) == 0)
			{
				num6 = 1242;
			}
			else if (num2 != -1 && Main.rand.Next(num2) == 0)
			{
				num6 = Main.rand.Next(6);
				if (num6 == 0)
				{
					num6 = 181;
				}
				else if (num6 == 1)
				{
					num6 = 180;
				}
				else if (num6 == 2)
				{
					num6 = 177;
				}
				else if (num6 == 3)
				{
					num6 = 179;
				}
				else if (num6 == 4)
				{
					num6 = 178;
				}
				else
				{
					num6 = 182;
				}
				if (Main.rand.Next(20) == 0)
				{
					num5 += Main.rand.Next(0, 2);
				}
				if (Main.rand.Next(30) == 0)
				{
					num5 += Main.rand.Next(0, 3);
				}
				if (Main.rand.Next(40) == 0)
				{
					num5 += Main.rand.Next(0, 4);
				}
				if (Main.rand.Next(50) == 0)
				{
					num5 += Main.rand.Next(0, 5);
				}
				if (Main.rand.Next(60) == 0)
				{
					num5 += Main.rand.Next(0, 6);
				}
			}
			else if (num3 != -1 && Main.rand.Next(num3) == 0)
			{
				num6 = 999;
				if (Main.rand.Next(20) == 0)
				{
					num5 += Main.rand.Next(0, 2);
				}
				if (Main.rand.Next(30) == 0)
				{
					num5 += Main.rand.Next(0, 3);
				}
				if (Main.rand.Next(40) == 0)
				{
					num5 += Main.rand.Next(0, 4);
				}
				if (Main.rand.Next(50) == 0)
				{
					num5 += Main.rand.Next(0, 5);
				}
				if (Main.rand.Next(60) == 0)
				{
					num5 += Main.rand.Next(0, 6);
				}
			}
			else if (Main.rand.Next(3) == 0)
			{
				if (Main.rand.Next(5000) == 0)
				{
					num6 = 74;
					if (Main.rand.Next(10) == 0)
					{
						num5 += Main.rand.Next(0, 3);
					}
					if (Main.rand.Next(10) == 0)
					{
						num5 += Main.rand.Next(0, 3);
					}
					if (Main.rand.Next(10) == 0)
					{
						num5 += Main.rand.Next(0, 3);
					}
					if (Main.rand.Next(10) == 0)
					{
						num5 += Main.rand.Next(0, 3);
					}
					if (Main.rand.Next(10) == 0)
					{
						num5 += Main.rand.Next(0, 3);
					}
				}
				else if (Main.rand.Next(400) == 0)
				{
					num6 = 73;
					if (Main.rand.Next(5) == 0)
					{
						num5 += Main.rand.Next(1, 21);
					}
					if (Main.rand.Next(5) == 0)
					{
						num5 += Main.rand.Next(1, 21);
					}
					if (Main.rand.Next(5) == 0)
					{
						num5 += Main.rand.Next(1, 21);
					}
					if (Main.rand.Next(5) == 0)
					{
						num5 += Main.rand.Next(1, 21);
					}
					if (Main.rand.Next(5) == 0)
					{
						num5 += Main.rand.Next(1, 20);
					}
				}
				else if (Main.rand.Next(30) == 0)
				{
					num6 = 72;
					if (Main.rand.Next(3) == 0)
					{
						num5 += Main.rand.Next(5, 26);
					}
					if (Main.rand.Next(3) == 0)
					{
						num5 += Main.rand.Next(5, 26);
					}
					if (Main.rand.Next(3) == 0)
					{
						num5 += Main.rand.Next(5, 26);
					}
					if (Main.rand.Next(3) == 0)
					{
						num5 += Main.rand.Next(5, 25);
					}
				}
				else
				{
					num6 = 71;
					if (Main.rand.Next(2) == 0)
					{
						num5 += Main.rand.Next(10, 26);
					}
					if (Main.rand.Next(2) == 0)
					{
						num5 += Main.rand.Next(10, 26);
					}
					if (Main.rand.Next(2) == 0)
					{
						num5 += Main.rand.Next(10, 26);
					}
					if (Main.rand.Next(2) == 0)
					{
						num5 += Main.rand.Next(10, 25);
					}
				}
			}
			else
			{
				num6 = Main.rand.Next(8);
				if (num6 == 0)
				{
					num6 = 12;
				}
				else if (num6 == 1)
				{
					num6 = 11;
				}
				else if (num6 == 2)
				{
					num6 = 14;
				}
				else if (num6 == 3)
				{
					num6 = 13;
				}
				else if (num6 == 4)
				{
					num6 = 699;
				}
				else if (num6 == 5)
				{
					num6 = 700;
				}
				else if (num6 == 6)
				{
					num6 = 701;
				}
				else
				{
					num6 = 702;
				}
				if (Main.rand.Next(20) == 0)
				{
					num5 += Main.rand.Next(0, 2);
				}
				if (Main.rand.Next(30) == 0)
				{
					num5 += Main.rand.Next(0, 3);
				}
				if (Main.rand.Next(40) == 0)
				{
					num5 += Main.rand.Next(0, 4);
				}
				if (Main.rand.Next(50) == 0)
				{
					num5 += Main.rand.Next(0, 5);
				}
				if (Main.rand.Next(60) == 0)
				{
					num5 += Main.rand.Next(0, 6);
				}
			}
			ItemLoader.ExtractinatorUse(ref num6, ref num5, extractType);
			if (num6 > 0)
			{
				Vector2 vector = Main.ReverseGravitySupport(Main.MouseScreen, 0f) + Main.screenPosition;
				int number = Item.NewItem((int)vector.X, (int)vector.Y, 1, 1, num6, num5, false, -1, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, "", number, 1f, 0f, 0f, 0, 0, 0);
				}
			}
		}

		public void ChangeDir(int dir)
		{
			if (!this.pulley || this.pulleyDir != 2)
			{
				this.direction = dir;
				return;
			}
			if (this.pulleyDir == 2 && dir == this.direction)
			{
				return;
			}
			int num = (int)(this.position.X + (float)(this.width / 2)) / 16;
			int num2 = num * 16 + 8 - this.width / 2;
			if (!Collision.SolidCollision(new Vector2((float)num2, this.position.Y), this.width, this.height))
			{
				if (this.whoAmI == Main.myPlayer)
				{
					Main.cameraX = Main.cameraX + this.position.X - (float)num2;
				}
				this.pulleyDir = 1;
				this.position.X = (float)num2;
				this.direction = dir;
			}
		}

		public Rectangle getRect()
		{
			return new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height);
		}

		private void pumpkinSword(int i, int dmg, float kb)
		{
			int num = Main.rand.Next(100, 300);
			int num2 = Main.rand.Next(100, 300);
			if (Main.rand.Next(2) == 0)
			{
				num -= Main.maxScreenW / 2 + num;
			}
			else
			{
				num += Main.maxScreenW / 2 - num;
			}
			if (Main.rand.Next(2) == 0)
			{
				num2 -= Main.maxScreenH / 2 + num2;
			}
			else
			{
				num2 += Main.maxScreenH / 2 - num2;
			}
			num += (int)this.position.X;
			num2 += (int)this.position.Y;
			float num3 = 8f;
			Vector2 vector = new Vector2((float)num, (float)num2);
			float num4 = Main.npc[i].position.X - vector.X;
			float num5 = Main.npc[i].position.Y - vector.Y;
			float num6 = (float)Math.Sqrt((double)(num4 * num4 + num5 * num5));
			num6 = num3 / num6;
			num4 *= num6;
			num5 *= num6;
			Projectile.NewProjectile((float)num, (float)num2, num4, num5, 321, dmg, kb, this.whoAmI, (float)i, 0f);
		}

		public void PutItemInInventory(int type, int selItem = -1)
		{
			for (int i = 0; i < 58; i++)
			{
				Item item = this.inventory[i];
				if (item.stack > 0 && item.type == type && item.stack < item.maxStack)
				{
					item.stack++;
					return;
				}
			}
			if (selItem >= 0 && (this.inventory[selItem].type == 0 || this.inventory[selItem].stack <= 0))
			{
				this.inventory[selItem].SetDefaults(type, false);
				return;
			}
			Item item2 = new Item();
			item2.SetDefaults(type, false);
			Item item3 = this.GetItem(this.whoAmI, item2, false, false);
			if (item3.stack > 0)
			{
				int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, type, 1, false, 0, true, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, "", number, 1f, 0f, 0f, 0, 0, 0);
					return;
				}
			}
			else
			{
				item2.position.X = base.Center.X - (float)(item2.width / 2);
				item2.position.Y = base.Center.Y - (float)(item2.height / 2);
				item2.active = true;
				ItemText.NewText(item2, 0, false, false);
			}
		}

		public bool SummonItemCheck()
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && ((this.inventory[this.selectedItem].type == 43 && Main.npc[i].type == 4) || (this.inventory[this.selectedItem].type == 70 && Main.npc[i].type == 13) || ((this.inventory[this.selectedItem].type == 560 & Main.npc[i].type == 50) || (this.inventory[this.selectedItem].type == 544 && Main.npc[i].type == 125)) || (this.inventory[this.selectedItem].type == 544 && Main.npc[i].type == 126) || (this.inventory[this.selectedItem].type == 556 && Main.npc[i].type == 134) || (this.inventory[this.selectedItem].type == 557 && Main.npc[i].type == 127) || (this.inventory[this.selectedItem].type == 1133 && Main.npc[i].type == 222) || (this.inventory[this.selectedItem].type == 1331 && Main.npc[i].type == 266)))
				{
					return false;
				}
			}
			return true;
		}

		public int FishingLevel()
		{
			int num = 0;
			int fishingPole = this.inventory[this.selectedItem].fishingPole;
			int bestFishingPoleIndex = this.selectedItem;
			if (fishingPole == 0)
			{
				for (int i = 0; i < 58; i++)
				{
					if (this.inventory[i].fishingPole > fishingPole)
					{
						fishingPole = this.inventory[i].fishingPole;
						bestFishingPoleIndex = i;
					}
				}
			}
			int j = 0;
			while (j < 58)
			{
				if (this.inventory[j].stack > 0 && this.inventory[j].bait > 0)
				{
					if (this.inventory[j].type == 2673)
					{
						return -1;
					}
					num = this.inventory[j].bait;
					break;
				}
				else
				{
					j++;
				}
			}
			if (num == 0 || fishingPole == 0)
			{
				return 0;
			}
			int num2 = num + fishingPole + this.fishingSkill;
			if (Main.raining)
			{
				num2 = (int)((float)num2 * 1.2f);
			}
			if (Main.cloudBGAlpha > 0f)
			{
				num2 = (int)((float)num2 * 1.1f);
			}
			if (Main.dayTime && (Main.time < 5400.0 || Main.time > 48600.0))
			{
				num2 = (int)((float)num2 * 1.3f);
			}
			if (Main.dayTime && Main.time > 16200.0 && Main.time < 37800.0)
			{
				num2 = (int)((float)num2 * 0.8f);
			}
			if (!Main.dayTime && Main.time > 6480.0 && Main.time < 25920.0)
			{
				num2 = (int)((float)num2 * 0.8f);
			}
			if (Main.moonPhase == 0)
			{
				num2 = (int)((float)num2 * 1.1f);
			}
			if (Main.moonPhase == 1 || Main.moonPhase == 7)
			{
				num2 = (int)((float)num2 * 1.05f);
			}
			if (Main.moonPhase == 3 || Main.moonPhase == 5)
			{
				num2 = (int)((float)num2 * 0.95f);
			}
			if (Main.moonPhase == 4)
			{
				num2 = (int)((float)num2 * 0.9f);
			}
			PlayerHooks.GetFishingLevel(this, this.inventory[bestFishingPoleIndex], this.inventory[j], ref num2);
			return num2;
		}

		public bool HasUnityPotion()
		{
			for (int i = 0; i < 58; i++)
			{
				if (this.inventory[i].type == 2997 && this.inventory[i].stack > 0)
				{
					return true;
				}
			}
			return false;
		}

		public void TakeUnityPotion()
		{
			for (int i = 0; i < 400; i++)
			{
				if (this.inventory[i].type == 2997 && this.inventory[i].stack > 0)
				{
					this.inventory[i].stack--;
					if (this.inventory[i].stack <= 0)
					{
						this.inventory[i].SetDefaults(0, false);
					}
					return;
				}
			}
		}

		public void UnityTeleport(Vector2 telePos)
		{
			int num = 3;
			if (Main.netMode == 0)
			{
				this.Teleport(telePos, num, 0);
				return;
			}
			NetMessage.SendData(65, -1, -1, "", 2, (float)this.whoAmI, telePos.X, telePos.Y, num, 0, 0);
		}

		private void PayDD2CrystalsBeforeUse(Item item)
		{
			int requiredDD2CrystalsToUse = this.GetRequiredDD2CrystalsToUse(item);
			for (int i = 0; i < requiredDD2CrystalsToUse; i++)
			{
				this.ConsumeItem(3822, true);
			}
		}

		private bool CheckDD2CrystalPaymentLock(Item item)
		{
			if (!DD2Event.Ongoing)
			{
				return true;
			}
			int requiredDD2CrystalsToUse = this.GetRequiredDD2CrystalsToUse(item);
			return this.CountItem(3822, requiredDD2CrystalsToUse) >= requiredDD2CrystalsToUse;
		}

		private int GetRequiredDD2CrystalsToUse(Item item)
		{
			switch (item.type)
			{
				case 3818:
				case 3819:
				case 3820:
					return 10;
				case 3824:
				case 3825:
				case 3826:
					return 10;
				case 3829:
				case 3830:
				case 3831:
					return 10;
				case 3832:
				case 3833:
				case 3834:
					return 10;
			}
			return 0;
		}

		public void SporeSac()
		{
			int damage = 70;
			float knockBack = 1.5f;
			if (Main.rand.Next(15) == 0)
			{
				int num = 0;
				for (int i = 0; i < 1000; i++)
				{
					if (Main.projectile[i].active && Main.projectile[i].owner == this.whoAmI && (Main.projectile[i].type == 567 || Main.projectile[i].type == 568))
					{
						num++;
					}
				}
				if (Main.rand.Next(15) >= num && num < 10)
				{
					int num2 = 50;
					int num3 = 24;
					int num4 = 90;
					for (int j = 0; j < num2; j++)
					{
						int num5 = Main.rand.Next(200 - j * 2, 400 + j * 2);
						Vector2 center = base.Center;
						center.X += (float)Main.rand.Next(-num5, num5 + 1);
						center.Y += (float)Main.rand.Next(-num5, num5 + 1);
						if (!Collision.SolidCollision(center, num3, num3) && !Collision.WetCollision(center, num3, num3))
						{
							center.X += (float)(num3 / 2);
							center.Y += (float)(num3 / 2);
							if (Collision.CanHit(new Vector2(base.Center.X, this.position.Y), 1, 1, center, 1, 1) || Collision.CanHit(new Vector2(base.Center.X, this.position.Y - 50f), 1, 1, center, 1, 1))
							{
								int num6 = (int)center.X / 16;
								int num7 = (int)center.Y / 16;
								bool flag = false;
								if (Main.rand.Next(3) == 0 && Main.tile[num6, num7] != null && Main.tile[num6, num7].wall > 0)
								{
									flag = true;
								}
								else
								{
									center.X -= (float)(num4 / 2);
									center.Y -= (float)(num4 / 2);
									if (Collision.SolidCollision(center, num4, num4))
									{
										center.X += (float)(num4 / 2);
										center.Y += (float)(num4 / 2);
										flag = true;
									}
								}
								if (flag)
								{
									for (int k = 0; k < 1000; k++)
									{
										if (Main.projectile[k].active && Main.projectile[k].owner == this.whoAmI && Main.projectile[k].aiStyle == 105 && (center - Main.projectile[k].Center).Length() < 48f)
										{
											flag = false;
											break;
										}
									}
									if (flag && Main.myPlayer == this.whoAmI)
									{
										Projectile.NewProjectile(center.X, center.Y, 0f, 0f, 567 + Main.rand.Next(2), damage, knockBack, this.whoAmI, 0f, 0f);
										return;
									}
								}
							}
						}
					}
				}
			}
		}

		public bool CanHit(Entity ent)
		{
			return Collision.CanHit(this.position, this.width, this.height, ent.position, ent.width, ent.height) || Collision.CanHitLine(base.Center + new Vector2((float)(this.direction * this.width / 2), this.gravDir * (float)(-(float)this.height) / 3f), 0, 0, ent.Center + new Vector2(0f, (float)(-(float)ent.height / 3)), 0, 0) || Collision.CanHitLine(base.Center + new Vector2((float)(this.direction * this.width / 2), this.gravDir * (float)(-(float)this.height) / 3f), 0, 0, ent.Center, 0, 0) || Collision.CanHitLine(base.Center + new Vector2((float)(this.direction * this.width / 2), 0f), 0, 0, ent.Center + new Vector2(0f, (float)(ent.height / 3)), 0, 0);
		}

		public void ItemCheck(int i)
		{
			if (!PlayerHooks.PreItemCheck(this))
			{
				return;
			}
			if (this.webbed || this.frozen || this.stoned)
			{
				return;
			}
			bool flag = false;
			float num = (float)this.mount.PlayerOffsetHitbox;
			Item item = this.inventory[this.selectedItem];
			if (this.mount.Active)
			{
				MountLoader.UseAbility(this, Vector2.Zero, false);
				if (this.mount.Type == 8)
				{
					this.noItems = true;
					if (this.controlUseItem)
					{
						this.channel = true;
						if (this.releaseUseItem)
						{
							this.mount.UseAbility(this, Vector2.Zero, true);
						}
						this.releaseUseItem = false;
					}
				}
				if (this.whoAmI == Main.myPlayer && this.gravDir == -1f)
				{
					this.mount.Dismount(this);
				}
			}
			int weaponDamage = this.GetWeaponDamage(item);
			if (item.autoReuse && !this.noItems)
			{
				this.releaseUseItem = true;
				if (this.itemAnimation == 1 && item.stack > 0)
				{
					if (item.shoot > 0 && this.whoAmI != Main.myPlayer && this.controlUseItem && item.useStyle == 5)
					{
						this.ApplyAnimation(item);
						if (item.UseSound != null)
						{
							Main.PlaySound(item.UseSound, base.Center);
						}
					}
					else
					{
						this.itemAnimation = 0;
					}
				}
			}
			if (item.fishingPole > 0)
			{
				item.holdStyle = 0;
				if (this.itemTime == 0 && this.itemAnimation == 0)
				{
					for (int j = 0; j < 1000; j++)
					{
						if (Main.projectile[j].active && Main.projectile[j].owner == this.whoAmI && Main.projectile[j].bobber)
						{
							item.holdStyle = 1;
						}
					}
				}
			}
			if (this.itemAnimation == 0 && this.reuseDelay > 0)
			{
				this.itemAnimation = this.reuseDelay;
				this.itemTime = this.reuseDelay;
				this.reuseDelay = 0;
			}
			if (this.controlUseItem && this.releaseUseItem && (item.headSlot > 0 || item.bodySlot > 0 || item.legSlot > 0))
			{
				if (item.useStyle == 0)
				{
					this.releaseUseItem = false;
				}
				if (this.position.X / 16f - (float)Player.tileRangeX - (float)item.tileBoost <= (float)Player.tileTargetX && (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX + (float)item.tileBoost - 1f >= (float)Player.tileTargetX && this.position.Y / 16f - (float)Player.tileRangeY - (float)item.tileBoost <= (float)Player.tileTargetY && (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY + (float)item.tileBoost - 2f >= (float)Player.tileTargetY)
				{
					int num2 = Player.tileTargetX;
					int num3 = Player.tileTargetY;
					if (Main.tile[num2, num3].active() && (Main.tile[num2, num3].type == 128 || Main.tile[num2, num3].type == 269))
					{
						int num4 = (int)Main.tile[num2, num3].frameY;
						int k = 0;
						if (item.bodySlot >= 0)
						{
							k = 1;
						}
						if (item.legSlot >= 0)
						{
							k = 2;
						}
						num4 /= 18;
						while (k > num4)
						{
							num3++;
							num4 = (int)Main.tile[num2, num3].frameY;
							num4 /= 18;
						}
						while (k < num4)
						{
							num3--;
							num4 = (int)Main.tile[num2, num3].frameY;
							num4 /= 18;
						}
						int l;
						for (l = (int)Main.tile[num2, num3].frameX; l >= 100; l -= 100)
						{
						}
						if (l >= 36)
						{
							l -= 36;
						}
						num2 -= l / 18;
						int m = (int)Main.tile[num2, num3].frameX;
						WorldGen.KillTile(num2, num3, true, false, false);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(17, -1, -1, "", 0, (float)num2, (float)num3, 1f, 0, 0, 0);
						}
						while (m >= 100)
						{
							m -= 100;
						}
						if (num4 == 0 && item.headSlot >= 0)
						{
							Main.blockMouse = true;
							Main.tile[num2, num3].frameX = (short)(m + item.headSlot * 100);
							if (Main.netMode == 1)
							{
								NetMessage.SendTileSquare(-1, num2, num3, 1, TileChangeType.None);
							}
							item.stack--;
							if (item.stack <= 0)
							{
								item.SetDefaults(0, false);
								Main.mouseItem.SetDefaults(0, false);
							}
							if (this.selectedItem == 58)
							{
								Main.mouseItem = item.Clone();
							}
							this.releaseUseItem = false;
							this.mouseInterface = true;
						}
						else if (num4 == 1 && item.bodySlot >= 0)
						{
							Main.blockMouse = true;
							Main.tile[num2, num3].frameX = (short)(m + item.bodySlot * 100);
							if (Main.netMode == 1)
							{
								NetMessage.SendTileSquare(-1, num2, num3, 1, TileChangeType.None);
							}
							item.stack--;
							if (item.stack <= 0)
							{
								item.SetDefaults(0, false);
								Main.mouseItem.SetDefaults(0, false);
							}
							if (this.selectedItem == 58)
							{
								Main.mouseItem = item.Clone();
							}
							this.releaseUseItem = false;
							this.mouseInterface = true;
						}
						else if (num4 == 2 && item.legSlot >= 0 && !ArmorIDs.Legs.Sets.MannequinIncompatible.Contains(item.legSlot))
						{
							Main.blockMouse = true;
							Main.tile[num2, num3].frameX = (short)(m + item.legSlot * 100);
							if (Main.netMode == 1)
							{
								NetMessage.SendTileSquare(-1, num2, num3, 1, TileChangeType.None);
							}
							item.stack--;
							if (item.stack <= 0)
							{
								item.SetDefaults(0, false);
								Main.mouseItem.SetDefaults(0, false);
							}
							if (this.selectedItem == 58)
							{
								Main.mouseItem = item.Clone();
							}
							this.releaseUseItem = false;
							this.mouseInterface = true;
						}
					}
				}
			}
			if (Main.myPlayer == i && this.itemAnimation == 0 && TileObjectData.CustomPlace(item.createTile, item.placeStyle))
			{
				TileObject tileObject;
				int hackCreateTile = item.createTile;
				int hackPlaceStyle = item.placeStyle;
				if (hackCreateTile == TileID.Saplings)
				{
					Tile soil = Main.tile[Player.tileTargetX, Player.tileTargetY + 1];
					if (soil.active())
					{
						TileLoader.SaplingGrowthType(soil.type, ref hackCreateTile, ref hackPlaceStyle);
					}
				}
				TileObject.CanPlace(Player.tileTargetX, Player.tileTargetY, hackCreateTile, hackPlaceStyle, this.direction, out tileObject, true);
			}
			if (this.itemAnimation == 0 && this.altFunctionUse == 2)
			{
				this.altFunctionUse = 0;
			}
			if (this.controlUseItem && this.itemAnimation == 0 && this.releaseUseItem && item.useStyle > 0)
			{
				if (this.altFunctionUse == 1)
				{
					this.altFunctionUse = 2;
				}
				bool flag2 = ItemLoader.CanUseItem(item, this);
				if (item.shoot == 0)
				{
					this.itemRotation = 0f;
				}
				if (item.type == 3335 && (this.extraAccessory || !Main.expertMode))
				{
					flag2 = false;
				}
				if (this.pulley && item.fishingPole > 0)
				{
					flag2 = false;
				}
				if (item.type == 3611 && (WiresUI.Settings.ToolMode & (WiresUI.Settings.MultiToolMode.Red | WiresUI.Settings.MultiToolMode.Green | WiresUI.Settings.MultiToolMode.Blue | WiresUI.Settings.MultiToolMode.Yellow | WiresUI.Settings.MultiToolMode.Actuator)) == (WiresUI.Settings.MultiToolMode)0)
				{
					flag2 = false;
				}
				if ((item.type == 3611 || item.type == 3625) && this.wireOperationsCooldown > 0)
				{
					flag2 = false;
				}
				if (!this.CheckDD2CrystalPaymentLock(item))
				{
					flag2 = false;
				}
				if (this.whoAmI == Main.myPlayer && item.shoot > -1 && ProjectileID.Sets.IsADD2Turret[item.shoot] && !this.downedDD2EventAnyDifficulty && !DD2Event.Ongoing)
				{
					flag2 = false;
				}
				if (item.shoot > -1 && ProjectileID.Sets.IsADD2Turret[item.shoot] && DD2Event.Ongoing && i == Main.myPlayer)
				{
					int worldX;
					int worldY;
					int num5;
					this.FindSentryRestingSpot(item.shoot, out worldX, out worldY, out num5);
					if (Player.WouldSpotOverlapWithSentry(worldX, worldY))
					{
						flag2 = false;
					}
				}
				if (item.shoot > -1 && ProjectileID.Sets.IsADD2Turret[item.shoot] && i == Main.myPlayer)
				{
					int num6;
					int num7;
					int num8;
					this.FindSentryRestingSpot(item.shoot, out num6, out num7, out num8);
					num6 /= 16;
					num7 /= 16;
					num7--;
					if (WorldGen.SolidTile(num6, num7))
					{
						flag2 = false;
					}
				}
				if (this.wet && (item.shoot == 85 || item.shoot == 15 || item.shoot == 34))
				{
					flag2 = false;
				}
				if (item.makeNPC > 0 && !NPC.CanReleaseNPCs(this.whoAmI))
				{
					flag2 = false;
				}
				if (this.whoAmI == Main.myPlayer && item.type == 603 && !Main.cEd)
				{
					flag2 = false;
				}
				if (item.type == 1071 || item.type == 1072)
				{
					bool flag3 = false;
					for (int n = 0; n < 58; n++)
					{
						if (this.inventory[n].paint > 0)
						{
							flag3 = true;
							break;
						}
					}
					if (!flag3)
					{
						flag2 = false;
					}
				}
				if (this.noItems)
				{
					flag2 = false;
				}
				if (item.tileWand > 0)
				{
					int tileWand = item.tileWand;
					flag2 = false;
					for (int num9 = 0; num9 < 58; num9++)
					{
						if (tileWand == this.inventory[num9].type && this.inventory[num9].stack > 0)
						{
							flag2 = true;
							break;
						}
					}
				}
				if (item.fishingPole > 0)
				{
					for (int num10 = 0; num10 < 1000; num10++)
					{
						if (Main.projectile[num10].active && Main.projectile[num10].owner == this.whoAmI && Main.projectile[num10].bobber)
						{
							flag2 = false;
							if (this.whoAmI == Main.myPlayer && Main.projectile[num10].ai[0] == 0f)
							{
								Main.projectile[num10].ai[0] = 1f;
								float num11 = -10f;
								if (Main.projectile[num10].wet && Main.projectile[num10].velocity.Y > num11)
								{
									Main.projectile[num10].velocity.Y = num11;
								}
								Main.projectile[num10].netUpdate2 = true;
								if (Main.projectile[num10].ai[1] < 0f && Main.projectile[num10].localAI[1] != 0f)
								{
									bool flag4 = false;
									int num12 = 0;
									for (int num13 = 0; num13 < 58; num13++)
									{
										if (this.inventory[num13].stack > 0 && this.inventory[num13].bait > 0)
										{
											bool flag5 = false;
											int num14 = 1 + this.inventory[num13].bait / 5;
											if (num14 < 1)
											{
												num14 = 1;
											}
											if (this.accTackleBox)
											{
												num14++;
											}
											if (Main.rand.Next(num14) == 0)
											{
												flag5 = true;
											}
											if (Main.projectile[num10].localAI[1] < 0f)
											{
												flag5 = true;
											}
											if (Main.projectile[num10].localAI[1] > 0f)
											{
												Item item2 = new Item();
												item2.SetDefaults((int)Main.projectile[num10].localAI[1], false);
												if (item2.rare < 0)
												{
													flag5 = false;
												}
											}
											if (flag5)
											{
												num12 = this.inventory[num13].type;
												this.inventory[num13].stack--;
												if (this.inventory[num13].stack <= 0)
												{
													this.inventory[num13].SetDefaults(0, false);
												}
											}
											flag4 = true;
											break;
										}
									}
									if (flag4)
									{
										if (num12 == 2673)
										{
											if (Main.netMode != 1)
											{
												NPC.SpawnOnPlayer(this.whoAmI, 370);
											}
											else
											{
												NetMessage.SendData(61, -1, -1, "", this.whoAmI, 370f, 0f, 0f, 0, 0, 0);
											}
											Main.projectile[num10].ai[0] = 2f;
										}
										else if (Main.rand.Next(7) == 0 && !this.accFishingLine)
										{
											Main.projectile[num10].ai[0] = 2f;
										}
										else
										{
											Main.projectile[num10].ai[1] = Main.projectile[num10].localAI[1];
										}
										Main.projectile[num10].netUpdate = true;
									}
								}
							}
						}
					}
				}
				if (item.shoot == 6 || item.shoot == 19 || item.shoot == 33 || item.shoot == 52 || item.shoot == 113 || item.shoot == 320 || item.shoot == 333 || item.shoot == 383 || item.shoot == 491)
				{
					for (int num15 = 0; num15 < 1000; num15++)
					{
						if (Main.projectile[num15].active && Main.projectile[num15].owner == Main.myPlayer && Main.projectile[num15].type == item.shoot)
						{
							flag2 = false;
						}
					}
				}
				if (item.shoot == 106)
				{
					int num16 = 0;
					for (int num17 = 0; num17 < 1000; num17++)
					{
						if (Main.projectile[num17].active && Main.projectile[num17].owner == Main.myPlayer && Main.projectile[num17].type == item.shoot)
						{
							num16++;
						}
					}
					if (num16 >= item.stack)
					{
						flag2 = false;
					}
				}
				if (item.shoot == 272)
				{
					int num18 = 0;
					for (int num19 = 0; num19 < 1000; num19++)
					{
						if (Main.projectile[num19].active && Main.projectile[num19].owner == Main.myPlayer && Main.projectile[num19].type == item.shoot)
						{
							num18++;
						}
					}
					if (num18 >= item.stack)
					{
						flag2 = false;
					}
				}
				if (item.shoot == 13 || item.shoot == 32 || (item.shoot >= 230 && item.shoot <= 235) || item.shoot == 315 || item.shoot == 331 || item.shoot == 372)
				{
					for (int num20 = 0; num20 < 1000; num20++)
					{
						if (Main.projectile[num20].active && Main.projectile[num20].owner == Main.myPlayer && Main.projectile[num20].type == item.shoot && Main.projectile[num20].ai[0] != 2f)
						{
							flag2 = false;
						}
					}
				}
				if (item.shoot == 332)
				{
					int num21 = 0;
					for (int num22 = 0; num22 < 1000; num22++)
					{
						if (Main.projectile[num22].active && Main.projectile[num22].owner == Main.myPlayer && Main.projectile[num22].type == item.shoot && Main.projectile[num22].ai[0] != 2f)
						{
							num21++;
						}
					}
					if (num21 >= 3)
					{
						flag2 = false;
					}
				}
				if (item.potion && flag2)
				{
					if (this.potionDelay <= 0)
					{
						if (item.type == 227)
						{
							this.potionDelay = this.restorationDelayTime;
							this.AddBuff(21, this.potionDelay, true);
						}
						else
						{
							this.potionDelay = this.potionDelayTime;
							this.AddBuff(21, this.potionDelay, true);
						}
					}
					else
					{
						flag2 = false;
					}
				}
				if (item.mana > 0 && this.silence)
				{
					flag2 = false;
				}
				if (item.mana > 0 && flag2)
				{
					bool flag6 = false;
					if (item.type == 2795)
					{
						flag6 = true;
					}
					if (item.shoot > 0 && ProjectileID.Sets.TurretFeature[item.shoot] && this.altFunctionUse == 2)
					{
						flag6 = true;
					}
					if (item.shoot > 0 && ProjectileID.Sets.MinionTargettingFeature[item.shoot] && this.altFunctionUse == 2)
					{
						flag6 = true;
					}
					if (item.type != 127 || !this.spaceGun)
					{
						if (this.statMana >= (int)((float)item.mana * this.manaCost))
						{
							if (!flag6)
							{
								this.statMana -= (int)((float)item.mana * this.manaCost);
							}
						}
						else if (this.manaFlower)
						{
							this.QuickMana();
							if (this.statMana >= (int)((float)item.mana * this.manaCost))
							{
								if (!flag6)
								{
									this.statMana -= (int)((float)item.mana * this.manaCost);
								}
							}
							else
							{
								flag2 = false;
							}
						}
						else
						{
							flag2 = false;
						}
					}
					if (this.whoAmI == Main.myPlayer && item.buffType != 0 && item.buffTime != 0 && flag2)
					{
						this.AddBuff(item.buffType, item.buffTime, true);
					}
				}
				if (item.shoot <= 0 || !ProjectileID.Sets.MinionTargettingFeature[item.shoot] || this.altFunctionUse != 2)
				{
					this.ItemCheck_ApplyPetBuffs(item);
				}
				if (this.whoAmI == Main.myPlayer && this.gravDir == 1f && item.mountType != -1 && this.mount.CanMount(item.mountType, this))
				{
					this.mount.SetMount(item.mountType, this, false);
				}
				if (item.type == 43 && Main.dayTime)
				{
					flag2 = false;
				}
				if (item.type == 544 && Main.dayTime)
				{
					flag2 = false;
				}
				if (item.type == 556 && Main.dayTime)
				{
					flag2 = false;
				}
				if (item.type == 557 && Main.dayTime)
				{
					flag2 = false;
				}
				if (item.type == 70 && !this.ZoneCorrupt)
				{
					flag2 = false;
				}
				if (item.type == 1133 && !this.ZoneJungle)
				{
					flag2 = false;
				}
				if (item.type == 1844 && (Main.dayTime || Main.pumpkinMoon || Main.snowMoon || DD2Event.Ongoing))
				{
					flag2 = false;
				}
				if (item.type == 1958 && (Main.dayTime || Main.pumpkinMoon || Main.snowMoon || DD2Event.Ongoing))
				{
					flag2 = false;
				}
				if (item.type == 2767 && (!Main.dayTime || Main.eclipse || !Main.hardMode))
				{
					flag2 = false;
				}
				if (item.type == 3601 && (!NPC.downedGolemBoss || !Main.hardMode || NPC.AnyDanger() || NPC.AnyoneNearCultists()))
				{
					flag2 = false;
				}
				if (!this.SummonItemCheck())
				{
					flag2 = false;
				}
				if (item.shoot == 17 && flag2 && i == Main.myPlayer)
				{
					int num23 = (int)((float)Main.mouseX + Main.screenPosition.X) / 16;
					int num24 = (int)((float)Main.mouseY + Main.screenPosition.Y) / 16;
					if (this.gravDir == -1f)
					{
						num24 = (int)(Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY) / 16;
					}
					Tile tile = Main.tile[num23, num24];
					if (tile.active() && (tile.type == 0 || tile.type == 2 || tile.type == 23 || tile.type == 109 || tile.type == 199))
					{
						WorldGen.KillTile(num23, num24, false, false, true);
						if (!Main.tile[num23, num24].active())
						{
							if (Main.netMode == 1)
							{
								NetMessage.SendData(17, -1, -1, "", 4, (float)num23, (float)num24, 0f, 0, 0, 0);
							}
						}
						else
						{
							flag2 = false;
						}
					}
					else
					{
						flag2 = false;
					}
				}
				if (flag2)
				{
					flag2 = this.HasAmmo(item, flag2);
				}
				if (flag2)
				{
					if (item.pick > 0 || item.axe > 0 || item.hammer > 0)
					{
						this.toolTime = 1;
					}
					if (this.grappling[0] > -1)
					{
						this.pulley = false;
						this.pulleyDir = 1;
						if (this.controlRight)
						{
							this.direction = 1;
						}
						else if (this.controlLeft)
						{
							this.direction = -1;
						}
					}
					this.channel = item.channel;
					this.attackCD = 0;
					this.ApplyAnimation(item);
					if (item.UseSound != null)
					{
						Main.PlaySound(item.UseSound, base.Center);
					}
				}
				if ((item.shoot <= 0 || !ProjectileID.Sets.MinionTargettingFeature[item.shoot] || this.altFunctionUse != 2) && flag2 && this.whoAmI == Main.myPlayer && item.shoot >= 0 && (ProjectileID.Sets.LightPet[item.shoot] || Main.projPet[item.shoot]))
				{
					if (ProjectileID.Sets.MinionSacrificable[item.shoot])
					{
						List<int> list = new List<int>();
						float num25 = 0f;
						for (int num26 = 0; num26 < 1000; num26++)
						{
							if (Main.projectile[num26].active && Main.projectile[num26].owner == i && Main.projectile[num26].minion)
							{
								int num27;
								for (num27 = 0; num27 < list.Count; num27++)
								{
									if (Main.projectile[list[num27]].minionSlots > Main.projectile[num26].minionSlots)
									{
										list.Insert(num27, num26);
										break;
									}
								}
								if (num27 == list.Count)
								{
									list.Add(num26);
								}
								num25 += Main.projectile[num26].minionSlots;
							}
						}
						float num28 = (float)ItemID.Sets.StaffMinionSlotsRequired[item.type];
						float num29 = 0f;
						int num30 = 388;
						int num31 = -1;
						for (int num32 = 0; num32 < list.Count; num32++)
						{
							int type = Main.projectile[list[num32]].type;
							if (type == 626)
							{
								list.RemoveAt(num32);
								num32--;
							}
							if (type == 627)
							{
								if (Main.projectile[(int)Main.projectile[list[num32]].localAI[1]].type == 628)
								{
									num31 = list[num32];
								}
								list.RemoveAt(num32);
								num32--;
							}
						}
						if (num31 != -1)
						{
							list.Add(num31);
							list.Add(Projectile.GetByUUID(Main.projectile[num31].owner, Main.projectile[num31].ai[0]));
						}
						int num33 = 0;
						while (num33 < list.Count && num25 - num29 > (float)this.maxMinions - num28)
						{
							int type2 = Main.projectile[list[num33]].type;
							if (type2 != num30 && type2 != 625 && type2 != 628 && type2 != 623)
							{
								if (type2 == 388 && num30 == 387)
								{
									num30 = 388;
								}
								if (type2 == 387 && num30 == 388)
								{
									num30 = 387;
								}
								num29 += Main.projectile[list[num33]].minionSlots;
								if (type2 == 626 || type2 == 627)
								{
									int byUUID = Projectile.GetByUUID(Main.projectile[list[num33]].owner, Main.projectile[list[num33]].ai[0]);
									if (byUUID >= 0)
									{
										Projectile projectile = Main.projectile[byUUID];
										if (projectile.type != 625)
										{
											projectile.localAI[1] = Main.projectile[list[num33]].localAI[1];
										}
										projectile = Main.projectile[(int)Main.projectile[list[num33]].localAI[1]];
										projectile.ai[0] = Main.projectile[list[num33]].ai[0];
										projectile.ai[1] = 1f;
										projectile.netUpdate = true;
									}
								}
								Main.projectile[list[num33]].Kill();
							}
							num33++;
						}
						list.Clear();
						if (num25 + num28 >= 9f)
						{
							AchievementsHelper.HandleSpecialEvent(this, 6);
						}
					}
					else
					{
						for (int num34 = 0; num34 < 1000; num34++)
						{
							if (Main.projectile[num34].active && Main.projectile[num34].owner == i && Main.projectile[num34].type == item.shoot)
							{
								Main.projectile[num34].Kill();
							}
							if (item.shoot == 72)
							{
								if (Main.projectile[num34].active && Main.projectile[num34].owner == i && Main.projectile[num34].type == 86)
								{
									Main.projectile[num34].Kill();
								}
								if (Main.projectile[num34].active && Main.projectile[num34].owner == i && Main.projectile[num34].type == 87)
								{
									Main.projectile[num34].Kill();
								}
							}
						}
					}
				}
			}
			if (!this.controlUseItem)
			{
				bool arg_193E_0 = this.channel;
				this.channel = false;
			}
			if (this.itemAnimation > 0)
			{
				if (item.melee)
				{
					this.itemAnimationMax = (int)((float)item.useAnimation * this.meleeSpeed / PlayerHooks.TotalMeleeSpeedMultiplier(this, item));
				}
				else
				{
					this.itemAnimationMax = (int)(item.useAnimation / PlayerHooks.TotalMeleeSpeedMultiplier(this, item));
				}
				if (item.mana > 0 && !flag && (item.type != 127 || !this.spaceGun))
				{
					this.manaRegenDelay = (int)this.maxRegenDelay;
				}
				if (Main.dedServ)
				{
					this.itemHeight = item.height;
					this.itemWidth = item.width;
				}
				else
				{
					this.itemHeight = Main.itemTexture[item.type].Height;
					this.itemWidth = Main.itemTexture[item.type].Width;
				}
				this.itemAnimation--;
				if (!Main.dedServ)
				{
					if (item.useStyle == 1)
					{
						if (item.type > -1 && Item.claw[item.type])
						{
							if ((double)this.itemAnimation < (double)this.itemAnimationMax * 0.333)
							{
								float num35 = 10f;
								this.itemLocation.X = this.position.X + (float)this.width * 0.5f + ((float)Main.itemTexture[item.type].Width * 0.5f - num35) * (float)this.direction;
								this.itemLocation.Y = this.position.Y + 26f + num;
							}
							else if ((double)this.itemAnimation < (double)this.itemAnimationMax * 0.666)
							{
								float num36 = 8f;
								this.itemLocation.X = this.position.X + (float)this.width * 0.5f + ((float)Main.itemTexture[item.type].Width * 0.5f - num36) * (float)this.direction;
								num36 = 24f;
								this.itemLocation.Y = this.position.Y + num36 + num;
							}
							else
							{
								float num37 = 6f;
								this.itemLocation.X = this.position.X + (float)this.width * 0.5f - ((float)Main.itemTexture[item.type].Width * 0.5f - num37) * (float)this.direction;
								num37 = 20f;
								this.itemLocation.Y = this.position.Y + num37 + num;
							}
							this.itemRotation = ((float)this.itemAnimation / (float)this.itemAnimationMax - 0.5f) * (float)(-(float)this.direction) * 3.5f - (float)this.direction * 0.3f;
						}
						else
						{
							if ((double)this.itemAnimation < (double)this.itemAnimationMax * 0.333)
							{
								float num38 = 10f;
								if (Main.itemTexture[item.type].Width > 32)
								{
									num38 = 14f;
								}
								if (Main.itemTexture[item.type].Width >= 52)
								{
									num38 = 24f;
								}
								if (Main.itemTexture[item.type].Width >= 64)
								{
									num38 = 28f;
								}
								if (Main.itemTexture[item.type].Width >= 92)
								{
									num38 = 38f;
								}
								if (item.type == 2330 || item.type == 2320 || item.type == 2341)
								{
									num38 += 8f;
								}
								this.itemLocation.X = this.position.X + (float)this.width * 0.5f + ((float)Main.itemTexture[item.type].Width * 0.5f - num38) * (float)this.direction;
								this.itemLocation.Y = this.position.Y + 24f + num;
							}
							else if ((double)this.itemAnimation < (double)this.itemAnimationMax * 0.666)
							{
								float num39 = 10f;
								if (Main.itemTexture[item.type].Width > 32)
								{
									num39 = 18f;
								}
								if (Main.itemTexture[item.type].Width >= 52)
								{
									num39 = 24f;
								}
								if (Main.itemTexture[item.type].Width >= 64)
								{
									num39 = 28f;
								}
								if (Main.itemTexture[item.type].Width >= 92)
								{
									num39 = 38f;
								}
								if (item.type == 2330 || item.type == 2320 || item.type == 2341)
								{
									num39 += 4f;
								}
								this.itemLocation.X = this.position.X + (float)this.width * 0.5f + ((float)Main.itemTexture[item.type].Width * 0.5f - num39) * (float)this.direction;
								num39 = 10f;
								if (Main.itemTexture[item.type].Height > 32)
								{
									num39 = 8f;
								}
								if (Main.itemTexture[item.type].Height > 52)
								{
									num39 = 12f;
								}
								if (Main.itemTexture[item.type].Height > 64)
								{
									num39 = 14f;
								}
								if (item.type == 2330 || item.type == 2320 || item.type == 2341)
								{
									num39 += 4f;
								}
								this.itemLocation.Y = this.position.Y + num39 + num;
							}
							else
							{
								float num40 = 6f;
								if (Main.itemTexture[item.type].Width > 32)
								{
									num40 = 14f;
								}
								if (Main.itemTexture[item.type].Width >= 48)
								{
									num40 = 18f;
								}
								if (Main.itemTexture[item.type].Width >= 52)
								{
									num40 = 24f;
								}
								if (Main.itemTexture[item.type].Width >= 64)
								{
									num40 = 28f;
								}
								if (Main.itemTexture[item.type].Width >= 92)
								{
									num40 = 38f;
								}
								if (item.type == 2330 || item.type == 2320 || item.type == 2341)
								{
									num40 += 4f;
								}
								this.itemLocation.X = this.position.X + (float)this.width * 0.5f - ((float)Main.itemTexture[item.type].Width * 0.5f - num40) * (float)this.direction;
								num40 = 10f;
								if (Main.itemTexture[item.type].Height > 32)
								{
									num40 = 10f;
								}
								if (Main.itemTexture[item.type].Height > 52)
								{
									num40 = 12f;
								}
								if (Main.itemTexture[item.type].Height > 64)
								{
									num40 = 14f;
								}
								if (item.type == 2330 || item.type == 2320 || item.type == 2341)
								{
									num40 += 4f;
								}
								this.itemLocation.Y = this.position.Y + num40 + num;
							}
							this.itemRotation = ((float)this.itemAnimation / (float)this.itemAnimationMax - 0.5f) * (float)(-(float)this.direction) * 3.5f - (float)this.direction * 0.3f;
						}
						if (this.gravDir == -1f)
						{
							this.itemRotation = -this.itemRotation;
							this.itemLocation.Y = this.position.Y + (float)this.height + (this.position.Y - this.itemLocation.Y);
						}
					}
					else if (item.useStyle == 2)
					{
						this.itemRotation = (float)this.itemAnimation / (float)this.itemAnimationMax * (float)this.direction * 2f + -1.4f * (float)this.direction;
						if ((double)this.itemAnimation < (double)this.itemAnimationMax * 0.5)
						{
							this.itemLocation.X = this.position.X + (float)this.width * 0.5f + ((float)Main.itemTexture[item.type].Width * 0.5f - 9f - this.itemRotation * 12f * (float)this.direction) * (float)this.direction;
							this.itemLocation.Y = this.position.Y + 38f + this.itemRotation * (float)this.direction * 4f + num;
						}
						else
						{
							this.itemLocation.X = this.position.X + (float)this.width * 0.5f + ((float)Main.itemTexture[item.type].Width * 0.5f - 9f - this.itemRotation * 16f * (float)this.direction) * (float)this.direction;
							this.itemLocation.Y = this.position.Y + 38f + this.itemRotation * (float)this.direction + num;
						}
						if (this.gravDir == -1f)
						{
							this.itemRotation = -this.itemRotation;
							this.itemLocation.Y = this.position.Y + (float)this.height + (this.position.Y - this.itemLocation.Y);
						}
					}
					else if (item.useStyle == 3)
					{
						if ((double)this.itemAnimation > (double)this.itemAnimationMax * 0.666)
						{
							this.itemLocation.X = -1000f;
							this.itemLocation.Y = -1000f;
							this.itemRotation = -1.3f * (float)this.direction;
						}
						else
						{
							this.itemLocation.X = this.position.X + (float)this.width * 0.5f + ((float)Main.itemTexture[item.type].Width * 0.5f - 4f) * (float)this.direction;
							this.itemLocation.Y = this.position.Y + 24f + num;
							float num41 = (float)this.itemAnimation / (float)this.itemAnimationMax * (float)Main.itemTexture[item.type].Width * (float)this.direction * item.scale * 1.2f - (float)(10 * this.direction);
							if (num41 > -4f && this.direction == -1)
							{
								num41 = -8f;
							}
							if (num41 < 4f && this.direction == 1)
							{
								num41 = 8f;
							}
							this.itemLocation.X = this.itemLocation.X - num41;
							this.itemRotation = 0.8f * (float)this.direction;
						}
						if (this.gravDir == -1f)
						{
							this.itemRotation = -this.itemRotation;
							this.itemLocation.Y = this.position.Y + (float)this.height + (this.position.Y - this.itemLocation.Y);
						}
					}
					else if (item.useStyle == 4)
					{
						int num42 = 0;
						if (item.type == 3601)
						{
							num42 = 10;
						}
						this.itemRotation = 0f;
						this.itemLocation.X = this.position.X + (float)this.width * 0.5f + ((float)Main.itemTexture[item.type].Width * 0.5f - 9f - this.itemRotation * 14f * (float)this.direction - 4f - (float)num42) * (float)this.direction;
						this.itemLocation.Y = this.position.Y + (float)Main.itemTexture[item.type].Height * 0.5f + 4f + num;
						if (this.gravDir == -1f)
						{
							this.itemRotation = -this.itemRotation;
							this.itemLocation.Y = this.position.Y + (float)this.height + (this.position.Y - this.itemLocation.Y);
						}
					}
					else if (item.useStyle == 5)
					{
						if (item.type == 3779)
						{
							this.itemRotation = 0f;
							this.itemLocation.X = base.Center.X + (float)(6 * this.direction);
							this.itemLocation.Y = this.MountedCenter.Y + 6f;
						}
						else if (Item.staff[item.type])
						{
							float scaleFactor = 6f;
							if (item.type == 3476)
							{
								scaleFactor = 14f;
							}
							this.itemLocation = this.MountedCenter;
							this.itemLocation += this.itemRotation.ToRotationVector2() * scaleFactor * (float)this.direction;
						}
						else
						{
							this.itemLocation.X = this.position.X + (float)this.width * 0.5f - (float)Main.itemTexture[item.type].Width * 0.5f - (float)(this.direction * 2);
							this.itemLocation.Y = this.MountedCenter.Y - (float)Main.itemTexture[item.type].Height * 0.5f;
						}
					}
					ItemLoader.UseStyle(item, this);
				}
			}
			else if (item.holdStyle == 1 && !this.pulley)
			{
				if (Main.dedServ)
				{
					this.itemLocation.X = this.position.X + (float)this.width * 0.5f + 20f * (float)this.direction;
				}
				else if (item.type == 930)
				{
					this.itemLocation.X = this.position.X + (float)(this.width / 2) * 0.5f - 12f - (float)(2 * this.direction);
					float num43 = this.position.X + (float)(this.width / 2) + (float)(38 * this.direction);
					if (this.direction == 1)
					{
						num43 -= 10f;
					}
					float num44 = this.MountedCenter.Y - 4f * this.gravDir;
					if (this.gravDir == -1f)
					{
						num44 -= 8f;
					}
					this.RotateRelativePoint(ref num43, ref num44);
					int num45 = 0;
					for (int num46 = 54; num46 < 58; num46++)
					{
						if (this.inventory[num46].stack > 0 && this.inventory[num46].ammo == 931)
						{
							num45 = this.inventory[num46].type;
							break;
						}
					}
					if (num45 == 0)
					{
						for (int num47 = 0; num47 < 54; num47++)
						{
							if (this.inventory[num47].stack > 0 && this.inventory[num47].ammo == 931)
							{
								num45 = this.inventory[num47].type;
								break;
							}
						}
					}
					if (num45 == 931)
					{
						num45 = 127;
					}
					else if (num45 == 1614)
					{
						num45 = 187;
					}
					if (num45 > 0)
					{
						int num48 = Dust.NewDust(new Vector2(num43, num44 + this.gfxOffY), 6, 6, num45, 0f, 0f, 100, default(Color), 1.6f);
						Main.dust[num48].noGravity = true;
						Dust expr_294C_cp_0 = Main.dust[num48];
						expr_294C_cp_0.velocity.Y = expr_294C_cp_0.velocity.Y - 4f * this.gravDir;
					}
				}
				else if (item.type == 968)
				{
					this.itemLocation.X = this.position.X + (float)this.width * 0.5f + (float)(8 * this.direction);
					if (this.whoAmI == Main.myPlayer)
					{
						int num49 = (int)(this.itemLocation.X + (float)Main.itemTexture[item.type].Width * 0.8f * (float)this.direction) / 16;
						int num50 = (int)(this.itemLocation.Y + num + (float)(Main.itemTexture[item.type].Height / 2)) / 16;
						if (Main.tile[num49, num50] == null)
						{
							Main.tile[num49, num50] = new Tile();
						}
						if (Main.tile[num49, num50].active() && Main.tile[num49, num50].type == 215 && Main.tile[num49, num50].frameY < 54)
						{
							this.miscTimer++;
							if (Main.rand.Next(5) == 0)
							{
								this.miscTimer++;
							}
							if (this.miscTimer > 900)
							{
								this.miscTimer = 0;
								item.SetDefaults(969, false);
								if (this.selectedItem == 58)
								{
									Main.mouseItem.SetDefaults(969, false);
								}
								for (int num51 = 0; num51 < 58; num51++)
								{
									if (this.inventory[num51].type == item.type && num51 != this.selectedItem && this.inventory[num51].stack < this.inventory[num51].maxStack)
									{
										Main.PlaySound(7, -1, -1, 1, 1f, 0f);
										this.inventory[num51].stack++;
										item.SetDefaults(0, false);
										if (this.selectedItem == 58)
										{
											Main.mouseItem.SetDefaults(0, false);
										}
									}
								}
							}
						}
						else
						{
							this.miscTimer = 0;
						}
					}
				}
				else if (item.type == 856)
				{
					this.itemLocation.X = this.position.X + (float)this.width * 0.5f + (float)(4 * this.direction);
				}
				else if (item.fishingPole > 0)
				{
					this.itemLocation.X = this.position.X + (float)this.width * 0.5f + (float)Main.itemTexture[item.type].Width * 0.18f * (float)this.direction;
				}
				else
				{
					this.itemLocation.X = this.position.X + (float)this.width * 0.5f + ((float)Main.itemTexture[item.type].Width * 0.5f + 2f) * (float)this.direction;
					if (item.type == 282 || item.type == 286 || item.type == 3112)
					{
						this.itemLocation.X = this.itemLocation.X - (float)(this.direction * 2);
						this.itemLocation.Y = this.itemLocation.Y + 4f;
					}
					else if (item.type == 3002)
					{
						this.itemLocation.X = this.itemLocation.X - (float)(4 * this.direction);
						this.itemLocation.Y = this.itemLocation.Y + 2f;
					}
				}
				this.itemLocation.Y = this.position.Y + 24f + num;
				if (item.type == 856)
				{
					this.itemLocation.Y = this.position.Y + 34f + num;
				}
				if (item.type == 930)
				{
					this.itemLocation.Y = this.position.Y + 9f + num;
				}
				if (item.fishingPole > 0)
				{
					this.itemLocation.Y = this.itemLocation.Y + 4f;
				}
				else if (item.type == 3476)
				{
					this.itemLocation.X = base.Center.X + (float)(14 * this.direction);
					this.itemLocation.Y = this.MountedCenter.Y;
				}
				else if (item.type == 3779)
				{
					this.itemLocation.X = base.Center.X + (float)(6 * this.direction);
					this.itemLocation.Y = this.MountedCenter.Y + 6f;
				}
				else if (item.type == 353)
				{
					this.itemLocation.X = base.Center.X + (float)(8 * this.direction);
					this.itemLocation.Y = this.MountedCenter.Y + 11f;
				}
				this.itemRotation = 0f;
				if (this.gravDir == -1f)
				{
					this.itemRotation = -this.itemRotation;
					this.itemLocation.Y = this.position.Y + (float)this.height + (this.position.Y - this.itemLocation.Y) + num;
					if (item.type == 930)
					{
						this.itemLocation.Y = this.itemLocation.Y - 24f;
					}
				}
			}
			else if (item.holdStyle == 2 && !this.pulley)
			{
				if (item.type == 946)
				{
					this.itemRotation = 0f;
					this.itemLocation.X = this.position.X + (float)this.width * 0.5f - (float)(16 * this.direction);
					this.itemLocation.Y = this.position.Y + 22f + num;
					this.fallStart = (int)(this.position.Y / 16f);
					if (this.gravDir == -1f)
					{
						this.itemRotation = -this.itemRotation;
						this.itemLocation.Y = this.position.Y + (float)this.height + (this.position.Y - this.itemLocation.Y);
						if (this.velocity.Y < -2f)
						{
							this.velocity.Y = -2f;
						}
					}
					else if (this.velocity.Y > 2f)
					{
						this.velocity.Y = 2f;
					}
				}
				else
				{
					this.itemLocation.X = this.position.X + (float)this.width * 0.5f + (float)(6 * this.direction);
					this.itemLocation.Y = this.position.Y + 16f + num;
					this.itemRotation = 0.79f * (float)(-(float)this.direction);
					if (this.gravDir == -1f)
					{
						this.itemRotation = -this.itemRotation;
						this.itemLocation.Y = this.position.Y + (float)this.height + (this.position.Y - this.itemLocation.Y);
					}
				}
			}
			else if (item.holdStyle == 3 && !this.pulley && !Main.dedServ)
			{
				this.itemLocation.X = this.position.X + (float)this.width * 0.5f - (float)Main.itemTexture[item.type].Width * 0.5f - (float)(this.direction * 2);
				this.itemLocation.Y = this.MountedCenter.Y - (float)Main.itemTexture[item.type].Height * 0.5f;
				this.itemRotation = 0f;
			}
			ItemLoader.HoldStyle(item, this);
			if ((((item.type == 974 || item.type == 8 || item.type == 1245 || item.type == 2274 || item.type == 3004 || item.type == 3045 || item.type == 3114 || (item.type >= 427 && item.type <= 433)) && !this.wet) || item.type == 523 || item.type == 1333) && !this.pulley)
			{
				float num52 = 1f;
				float num53 = 0.95f;
				float num54 = 0.8f;
				int num55 = 0;
				if (item.type == 523)
				{
					num55 = 8;
				}
				else if (item.type == 974)
				{
					num55 = 9;
				}
				else if (item.type == 1245)
				{
					num55 = 10;
				}
				else if (item.type == 1333)
				{
					num55 = 11;
				}
				else if (item.type == 2274)
				{
					num55 = 12;
				}
				else if (item.type == 3004)
				{
					num55 = 13;
				}
				else if (item.type == 3045)
				{
					num55 = 14;
				}
				else if (item.type == 3114)
				{
					num55 = 15;
				}
				else if (item.type >= 427)
				{
					num55 = item.type - 426;
				}
				if (num55 == 1)
				{
					num52 = 0f;
					num53 = 0.1f;
					num54 = 1.3f;
				}
				else if (num55 == 2)
				{
					num52 = 1f;
					num53 = 0.1f;
					num54 = 0.1f;
				}
				else if (num55 == 3)
				{
					num52 = 0f;
					num53 = 1f;
					num54 = 0.1f;
				}
				else if (num55 == 4)
				{
					num52 = 0.9f;
					num53 = 0f;
					num54 = 0.9f;
				}
				else if (num55 == 5)
				{
					num52 = 1.3f;
					num53 = 1.3f;
					num54 = 1.3f;
				}
				else if (num55 == 6)
				{
					num52 = 0.9f;
					num53 = 0.9f;
					num54 = 0f;
				}
				else if (num55 == 7)
				{
					num52 = 0.5f * Main.demonTorch + 1f * (1f - Main.demonTorch);
					num53 = 0.3f;
					num54 = 1f * Main.demonTorch + 0.5f * (1f - Main.demonTorch);
				}
				else if (num55 == 8)
				{
					num54 = 0.7f;
					num52 = 0.85f;
					num53 = 1f;
				}
				else if (num55 == 9)
				{
					num54 = 1f;
					num52 = 0.7f;
					num53 = 0.85f;
				}
				else if (num55 == 10)
				{
					num54 = 0f;
					num52 = 1f;
					num53 = 0.5f;
				}
				else if (num55 == 11)
				{
					num54 = 0.8f;
					num52 = 1.25f;
					num53 = 1.25f;
				}
				else if (num55 == 12)
				{
					num52 *= 0.75f;
					num53 *= 1.3499999f;
					num54 *= 1.5f;
				}
				else if (num55 == 13)
				{
					num52 = 0.95f;
					num53 = 0.65f;
					num54 = 1.3f;
				}
				else if (num55 == 14)
				{
					num52 = (float)Main.DiscoR / 255f;
					num53 = (float)Main.DiscoG / 255f;
					num54 = (float)Main.DiscoB / 255f;
				}
				else if (num55 == 15)
				{
					num52 = 1f;
					num53 = 0f;
					num54 = 1f;
				}
				int num56 = num55;
				if (num56 == 0)
				{
					num56 = 6;
				}
				else if (num56 == 8)
				{
					num56 = 75;
				}
				else if (num56 == 9)
				{
					num56 = 135;
				}
				else if (num56 == 10)
				{
					num56 = 158;
				}
				else if (num56 == 11)
				{
					num56 = 169;
				}
				else if (num56 == 12)
				{
					num56 = 156;
				}
				else if (num56 == 13)
				{
					num56 = 234;
				}
				else if (num56 == 14)
				{
					num56 = 66;
				}
				else if (num56 == 15)
				{
					num56 = 242;
				}
				else
				{
					num56 = 58 + num56;
				}
				int maxValue = 30;
				if (this.itemAnimation > 0)
				{
					maxValue = 7;
				}
				if (this.direction == -1)
				{
					if (Main.rand.Next(maxValue) == 0)
					{
						int num57 = Dust.NewDust(new Vector2(this.itemLocation.X - 16f, this.itemLocation.Y - 14f * this.gravDir), 4, 4, num56, 0f, 0f, 100, default(Color), 1f);
						if (Main.rand.Next(3) != 0)
						{
							Main.dust[num57].noGravity = true;
						}
						Main.dust[num57].velocity *= 0.3f;
						Dust expr_367E_cp_0 = Main.dust[num57];
						expr_367E_cp_0.velocity.Y = expr_367E_cp_0.velocity.Y - 1.5f;
						Main.dust[num57].position = this.RotatedRelativePoint(Main.dust[num57].position, true);
						if (num56 == 66)
						{
							Main.dust[num57].color = new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB);
							Main.dust[num57].noGravity = true;
						}
					}
					Vector2 position = this.RotatedRelativePoint(new Vector2(this.itemLocation.X - 12f + this.velocity.X, this.itemLocation.Y - 14f + this.velocity.Y), true);
					Lighting.AddLight(position, num52, num53, num54);
				}
				else
				{
					if (Main.rand.Next(maxValue) == 0)
					{
						int num58 = Dust.NewDust(new Vector2(this.itemLocation.X + 6f, this.itemLocation.Y - 14f * this.gravDir), 4, 4, num56, 0f, 0f, 100, default(Color), 1f);
						if (Main.rand.Next(3) != 0)
						{
							Main.dust[num58].noGravity = true;
						}
						Main.dust[num58].velocity *= 0.3f;
						Dust expr_37ED_cp_0 = Main.dust[num58];
						expr_37ED_cp_0.velocity.Y = expr_37ED_cp_0.velocity.Y - 1.5f;
						Main.dust[num58].position = this.RotatedRelativePoint(Main.dust[num58].position, true);
						if (num56 == 66)
						{
							Main.dust[num58].color = new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB);
							Main.dust[num58].noGravity = true;
						}
					}
					Vector2 position2 = this.RotatedRelativePoint(new Vector2(this.itemLocation.X + 12f + this.velocity.X, this.itemLocation.Y - 14f + this.velocity.Y), true);
					Lighting.AddLight(position2, num52, num53, num54);
				}
			}
			if ((item.type == 105 || item.type == 713) && !this.wet && !this.pulley)
			{
				int maxValue2 = 20;
				if (this.itemAnimation > 0)
				{
					maxValue2 = 7;
				}
				if (this.direction == -1)
				{
					if (Main.rand.Next(maxValue2) == 0)
					{
						int num59 = Dust.NewDust(new Vector2(this.itemLocation.X - 12f, this.itemLocation.Y - 20f * this.gravDir), 4, 4, 6, 0f, 0f, 100, default(Color), 1f);
						if (Main.rand.Next(3) != 0)
						{
							Main.dust[num59].noGravity = true;
						}
						Main.dust[num59].velocity *= 0.3f;
						Dust expr_39A2_cp_0 = Main.dust[num59];
						expr_39A2_cp_0.velocity.Y = expr_39A2_cp_0.velocity.Y - 1.5f;
						Main.dust[num59].position = this.RotatedRelativePoint(Main.dust[num59].position, true);
					}
					Vector2 position3 = this.RotatedRelativePoint(new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), true);
					Lighting.AddLight(position3, 1f, 0.95f, 0.8f);
				}
				else
				{
					if (Main.rand.Next(maxValue2) == 0)
					{
						int num60 = Dust.NewDust(new Vector2(this.itemLocation.X + 4f, this.itemLocation.Y - 20f * this.gravDir), 4, 4, 6, 0f, 0f, 100, default(Color), 1f);
						if (Main.rand.Next(3) != 0)
						{
							Main.dust[num60].noGravity = true;
						}
						Main.dust[num60].velocity *= 0.3f;
						Dust expr_3AD8_cp_0 = Main.dust[num60];
						expr_3AD8_cp_0.velocity.Y = expr_3AD8_cp_0.velocity.Y - 1.5f;
						Main.dust[num60].position = this.RotatedRelativePoint(Main.dust[num60].position, true);
					}
					Vector2 position4 = this.RotatedRelativePoint(new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), true);
					Lighting.AddLight(position4, 1f, 0.95f, 0.8f);
				}
			}
			else if (item.type == 148 && !this.wet)
			{
				int maxValue3 = 10;
				if (this.itemAnimation > 0)
				{
					maxValue3 = 7;
				}
				if (this.direction == -1)
				{
					if (Main.rand.Next(maxValue3) == 0)
					{
						int num61 = Dust.NewDust(new Vector2(this.itemLocation.X - 12f, this.itemLocation.Y - 20f * this.gravDir), 4, 4, 172, 0f, 0f, 100, default(Color), 1f);
						if (Main.rand.Next(3) != 0)
						{
							Main.dust[num61].noGravity = true;
						}
						Main.dust[num61].velocity *= 0.3f;
						Dust expr_3C49_cp_0 = Main.dust[num61];
						expr_3C49_cp_0.velocity.Y = expr_3C49_cp_0.velocity.Y - 1.5f;
						Main.dust[num61].position = this.RotatedRelativePoint(Main.dust[num61].position, true);
					}
					Vector2 position5 = this.RotatedRelativePoint(new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), true);
					Lighting.AddLight(position5, 0f, 0.5f, 1f);
				}
				else
				{
					if (Main.rand.Next(maxValue3) == 0)
					{
						int num62 = Dust.NewDust(new Vector2(this.itemLocation.X + 4f, this.itemLocation.Y - 20f * this.gravDir), 4, 4, 172, 0f, 0f, 100, default(Color), 1f);
						if (Main.rand.Next(3) != 0)
						{
							Main.dust[num62].noGravity = true;
						}
						Main.dust[num62].velocity *= 0.3f;
						Dust expr_3D83_cp_0 = Main.dust[num62];
						expr_3D83_cp_0.velocity.Y = expr_3D83_cp_0.velocity.Y - 1.5f;
						Main.dust[num62].position = this.RotatedRelativePoint(Main.dust[num62].position, true);
					}
					Vector2 position6 = this.RotatedRelativePoint(new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), true);
					Lighting.AddLight(position6, 0f, 0.5f, 1f);
				}
			}
			else if (item.type == 3117 && !this.wet)
			{
				this.itemLocation.X = this.itemLocation.X - (float)(this.direction * 4);
				int maxValue4 = 10;
				if (this.itemAnimation > 0)
				{
					maxValue4 = 7;
				}
				if (this.direction == -1)
				{
					if (Main.rand.Next(maxValue4) == 0)
					{
						int num63 = Dust.NewDust(new Vector2(this.itemLocation.X - 10f, this.itemLocation.Y - 20f * this.gravDir), 4, 4, 242, 0f, 0f, 100, default(Color), 1f);
						if (Main.rand.Next(3) != 0)
						{
							Main.dust[num63].noGravity = true;
						}
						Main.dust[num63].velocity *= 0.3f;
						Dust expr_3F0F_cp_0 = Main.dust[num63];
						expr_3F0F_cp_0.velocity.Y = expr_3F0F_cp_0.velocity.Y - 1.5f;
						Main.dust[num63].position = this.RotatedRelativePoint(Main.dust[num63].position, true);
					}
					Vector2 position7 = this.RotatedRelativePoint(new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), true);
					Lighting.AddLight(position7, 0.9f, 0.1f, 0.75f);
				}
				else
				{
					if (Main.rand.Next(maxValue4) == 0)
					{
						int num64 = Dust.NewDust(new Vector2(this.itemLocation.X + 6f, this.itemLocation.Y - 20f * this.gravDir), 4, 4, 242, 0f, 0f, 100, default(Color), 1f);
						if (Main.rand.Next(3) != 0)
						{
							Main.dust[num64].noGravity = true;
						}
						Main.dust[num64].velocity *= 0.3f;
						Dust expr_4049_cp_0 = Main.dust[num64];
						expr_4049_cp_0.velocity.Y = expr_4049_cp_0.velocity.Y - 1.5f;
						Main.dust[num64].position = this.RotatedRelativePoint(Main.dust[num64].position, true);
					}
					Vector2 position8 = this.RotatedRelativePoint(new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), true);
					Lighting.AddLight(position8, 0.9f, 0.1f, 0.75f);
				}
			}
			if (item.type == 282 && !this.pulley)
			{
				if (this.direction == -1)
				{
					Vector2 position9 = this.RotatedRelativePoint(new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), true);
					Lighting.AddLight(position9, 0.7f, 1f, 0.8f);
				}
				else
				{
					Vector2 position10 = this.RotatedRelativePoint(new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), true);
					Lighting.AddLight(position10, 0.7f, 1f, 0.8f);
				}
			}
			if (item.type == 3002 && !this.pulley)
			{
				float r = 1.05f;
				float g = 0.95f;
				float b = 0.55f;
				if (this.direction == -1)
				{
					Vector2 position11 = this.RotatedRelativePoint(new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), true);
					Lighting.AddLight(position11, r, g, b);
				}
				else
				{
					Vector2 position12 = this.RotatedRelativePoint(new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), true);
					Lighting.AddLight(position12, r, g, b);
				}
				this.spelunkerTimer += 1;
				if (this.spelunkerTimer >= 10)
				{
					this.spelunkerTimer = 0;
					int num65 = 30;
					int num66 = (int)base.Center.X / 16;
					int num67 = (int)base.Center.Y / 16;
					for (int num68 = num66 - num65; num68 <= num66 + num65; num68++)
					{
						for (int num69 = num67 - num65; num69 <= num67 + num65; num69++)
						{
							if (Main.rand.Next(4) == 0)
							{
								Vector2 vector = new Vector2((float)(num66 - num68), (float)(num67 - num69));
								if (vector.Length() < (float)num65 && num68 > 0 && num68 < Main.maxTilesX - 1 && num69 > 0 && num69 < Main.maxTilesY - 1 && Main.tile[num68, num69] != null && Main.tile[num68, num69].active())
								{
									bool flag7 = false;
									if (Main.tile[num68, num69].type == 185 && Main.tile[num68, num69].frameY == 18)
									{
										if (Main.tile[num68, num69].frameX >= 576 && Main.tile[num68, num69].frameX <= 882)
										{
											flag7 = true;
										}
									}
									else if (Main.tile[num68, num69].type == 186 && Main.tile[num68, num69].frameX >= 864 && Main.tile[num68, num69].frameX <= 1170)
									{
										flag7 = true;
									}
									if (flag7 || Main.tileSpelunker[(int)Main.tile[num68, num69].type] || (Main.tileAlch[(int)Main.tile[num68, num69].type] && Main.tile[num68, num69].type != 82))
									{
										int num70 = Dust.NewDust(new Vector2((float)(num68 * 16), (float)(num69 * 16)), 16, 16, 204, 0f, 0f, 150, default(Color), 0.3f);
										Main.dust[num70].fadeIn = 0.75f;
										Main.dust[num70].velocity *= 0.1f;
										Main.dust[num70].noLight = true;
									}
								}
							}
						}
					}
				}
			}
			if (item.type == 286 && !this.pulley)
			{
				if (this.direction == -1)
				{
					Vector2 position13 = this.RotatedRelativePoint(new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), true);
					Lighting.AddLight(position13, 0.7f, 0.8f, 1f);
				}
				else
				{
					Vector2 position14 = this.RotatedRelativePoint(new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), true);
					Lighting.AddLight(position14, 0.7f, 0.8f, 1f);
				}
			}
			if (item.type == 3112 && !this.pulley)
			{
				if (this.direction == -1)
				{
					Vector2 position15 = this.RotatedRelativePoint(new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), true);
					Lighting.AddLight(position15, 1f, 0.6f, 0.85f);
				}
				else
				{
					Vector2 position16 = this.RotatedRelativePoint(new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), true);
					Lighting.AddLight(position16, 1f, 0.6f, 0.85f);
				}
			}
			ItemLoader.HoldItem(item, this);
			if (this.controlUseItem)
			{
				this.releaseUseItem = false;
			}
			else
			{
				this.releaseUseItem = true;
			}
			if (this.itemTime > 0)
			{
				this.itemTime--;
				if (this.itemTime == 0 && this.whoAmI == Main.myPlayer)
				{
					int type3 = item.type;
					if (type3 == 65 || type3 == 676 || type3 == 723 || type3 == 724 || type3 == 989 || type3 == 1226 || type3 == 1227)
					{
						Main.PlaySound(25, -1, -1, 1, 1f, 0f);
						for (int num71 = 0; num71 < 5; num71++)
						{
							int num72 = Dust.NewDust(this.position, this.width, this.height, 45, 0f, 0f, 255, default(Color), (float)Main.rand.Next(20, 26) * 0.1f);
							Main.dust[num72].noLight = true;
							Main.dust[num72].noGravity = true;
							Main.dust[num72].velocity *= 0.5f;
						}
					}
				}
			}
			if (i == Main.myPlayer)
			{
				bool flag8 = true;
				int type4 = item.type;
				if ((type4 == 65 || type4 == 676 || type4 == 723 || type4 == 724 || type4 == 757 || type4 == 674 || type4 == 675 || type4 == 989 || type4 == 1226 || type4 == 1227) && this.itemAnimation != this.itemAnimationMax - 1)
				{
					flag8 = false;
				}
				if (type4 == 3852)
				{
					if (this.itemAnimation < this.itemAnimationMax - 12)
					{
						flag8 = false;
					}
					if (this.altFunctionUse == 2 && this.itemAnimation != this.itemAnimationMax - 1)
					{
						flag8 = false;
					}
				}
				if (item.shoot > 0 && ProjectileID.Sets.TurretFeature[item.shoot] && this.altFunctionUse == 2 && flag8 && this.itemTime == 0)
				{
					this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
					for (int num73 = 0; num73 < 1000; num73++)
					{
						Projectile projectile2 = Main.projectile[num73];
						if (projectile2.active && projectile2.owner == Main.myPlayer && ProjectileID.Sets.TurretFeature[projectile2.type])
						{
							projectile2.Kill();
						}
					}
				}
				if (item.shoot > 0 && ProjectileID.Sets.MinionTargettingFeature[item.shoot] && this.altFunctionUse == 2 && flag8 && this.itemTime == 0)
				{
					this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
					this.MinionNPCTargetAim();
				}
				flag8 = flag8 && ItemLoader.CheckProjOnSwing(this, item);
				if (item.shoot > 0 && this.itemAnimation > 0 && this.itemTime == 0 && flag8)
				{
					int num74 = item.shoot;
					float num75 = item.shootSpeed;
					if (this.inventory[this.selectedItem].thrown && num75 < 16f)
					{
						num75 *= this.thrownVelocity;
						if (num75 > 16f)
						{
							num75 = 16f;
						}
					}
					if (item.melee && num74 != 25 && num74 != 26 && num74 != 35)
					{
						num75 /= this.meleeSpeed;
					}
					bool flag9 = false;
					int num76 = weaponDamage;
					float num77 = item.knockBack;
					if (num74 == 13 || num74 == 32 || num74 == 315 || (num74 >= 230 && num74 <= 235) || num74 == 331)
					{
						this.grappling[0] = -1;
						this.grapCount = 0;
						for (int num78 = 0; num78 < 1000; num78++)
						{
							if (Main.projectile[num78].active && Main.projectile[num78].owner == i)
							{
								if (Main.projectile[num78].type == 13)
								{
									Main.projectile[num78].Kill();
								}
								if (Main.projectile[num78].type == 331)
								{
									Main.projectile[num78].Kill();
								}
								if (Main.projectile[num78].type == 315)
								{
									Main.projectile[num78].Kill();
								}
								if (Main.projectile[num78].type >= 230 && Main.projectile[num78].type <= 235)
								{
									Main.projectile[num78].Kill();
								}
							}
						}
					}
					if (item.useAmmo > 0)
					{
						this.PickAmmo(item, ref num74, ref num75, ref flag9, ref num76, ref num77, ItemID.Sets.gunProj[item.type]);
					}
					else
					{
						flag9 = true;
					}
					if (ItemID.Sets.gunProj[item.type])
					{
						num77 = item.knockBack;
						num76 = weaponDamage;
						num75 = item.shootSpeed;
					}
					if (item.type == 71)
					{
						flag9 = false;
					}
					if (item.type == 72)
					{
						flag9 = false;
					}
					if (item.type == 73)
					{
						flag9 = false;
					}
					if (item.type == 74)
					{
						flag9 = false;
					}
					if (item.type == 1254 && num74 == 14)
					{
						num74 = 242;
					}
					if (item.type == 1255 && num74 == 14)
					{
						num74 = 242;
					}
					if (item.type == 1265 && num74 == 14)
					{
						num74 = 242;
					}
					if (item.type == 3542)
					{
						bool flag10 = Main.rand.Next(100) < 20;
						if (flag10)
						{
							num74++;
							num76 *= 3;
						}
						else
						{
							num75 -= 1f;
						}
					}
					if (num74 == 73)
					{
						for (int num79 = 0; num79 < 1000; num79++)
						{
							if (Main.projectile[num79].active && Main.projectile[num79].owner == i)
							{
								if (Main.projectile[num79].type == 73)
								{
									num74 = 74;
								}
								if (num74 == 74 && Main.projectile[num79].type == 74)
								{
									flag9 = false;
								}
							}
						}
					}
					if (flag9)
					{
						num77 = this.GetWeaponKnockback(item, num77);
						if (num74 == 228)
						{
							num77 = 0f;
						}
						if (num74 == 1 && item.type == 120)
						{
							num74 = 2;
						}
						if (item.type == 682)
						{
							num74 = 117;
						}
						if (item.type == 725)
						{
							num74 = 120;
						}
						if (item.type == 2796)
						{
							num74 = 442;
						}
						if (item.type == 2223)
						{
							num74 = 357;
						}
						this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
						Vector2 vector2 = this.RotatedRelativePoint(this.MountedCenter, true);
						bool flag11 = true;
						int type5 = item.type;
						if (type5 == 3611)
						{
							flag11 = false;
						}
						Vector2 value = Vector2.UnitX.RotatedBy((double)this.fullRotation, default(Vector2));
						Vector2 vector3 = Main.MouseWorld - vector2;
						Vector2 vector4 = this.itemRotation.ToRotationVector2() * (float)this.direction;
						if (item.type == 3852 && this.itemAnimation != this.itemAnimationMax - 1)
						{
							vector3 = vector4;
						}
						if (vector3 != Vector2.Zero)
						{
							vector3.Normalize();
						}
						float num80 = Vector2.Dot(value, vector3);
						if (flag11)
						{
							if (num80 > 0f)
							{
								this.ChangeDir(1);
							}
							else
							{
								this.ChangeDir(-1);
							}
						}
						if (item.type == 3094 || item.type == 3378 || item.type == 3543)
						{
							vector2.Y = this.position.Y + (float)(this.height / 3);
						}
						if (item.type == 2611)
						{
							Vector2 vector5 = vector3;
							if (vector5 != Vector2.Zero)
							{
								vector5.Normalize();
							}
							vector2 += vector5;
						}
						if (item.type == 3827)
						{
							vector2 += vector3.SafeNormalize(Vector2.Zero).RotatedBy((double)((float)this.direction * -1.57079637f), default(Vector2)) * 24f;
						}
						if (num74 == 9)
						{
							vector2 = new Vector2(this.position.X + (float)this.width * 0.5f + (float)(Main.rand.Next(201) * -(float)this.direction) + ((float)Main.mouseX + Main.screenPosition.X - this.position.X), this.MountedCenter.Y - 600f);
							num77 = 0f;
							num76 *= 2;
						}
						if (item.type == 986 || item.type == 281)
						{
							vector2.X += (float)(6 * this.direction);
							vector2.Y -= 6f * this.gravDir;
						}
						if (item.type == 3007)
						{
							vector2.X -= (float)(4 * this.direction);
							vector2.Y -= 1f * this.gravDir;
						}
						float num81 = (float)Main.mouseX + Main.screenPosition.X - vector2.X;
						float num82 = (float)Main.mouseY + Main.screenPosition.Y - vector2.Y;
						if (item.type == 3852 && this.itemAnimation != this.itemAnimationMax - 1)
						{
							Vector2 vector6 = vector4;
							num81 = vector6.X;
							num82 = vector6.Y;
						}
						if (this.gravDir == -1f)
						{
							num82 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - vector2.Y;
						}
						float num83 = (float)Math.Sqrt((double)(num81 * num81 + num82 * num82));
						float num84 = num83;
						if ((float.IsNaN(num81) && float.IsNaN(num82)) || (num81 == 0f && num82 == 0f))
						{
							num81 = (float)this.direction;
							num82 = 0f;
							num83 = num75;
						}
						else
						{
							num83 = num75 / num83;
						}
						if (item.type == 1929 || item.type == 2270)
						{
							num81 += (float)Main.rand.Next(-50, 51) * 0.03f / num83;
							num82 += (float)Main.rand.Next(-50, 51) * 0.03f / num83;
						}
						num81 *= num83;
						num82 *= num83;
						if (item.type == 757)
						{
							num76 = (int)((float)num76 * 1.25f);
						}
						if (num74 == 250)
						{
							for (int num85 = 0; num85 < 1000; num85++)
							{
								if (Main.projectile[num85].active && Main.projectile[num85].owner == this.whoAmI && (Main.projectile[num85].type == 250 || Main.projectile[num85].type == 251))
								{
									Main.projectile[num85].Kill();
								}
							}
						}
						if (num74 == 12)
						{
							vector2.X += num81 * 3f;
							vector2.Y += num82 * 3f;
						}
						if (item.useStyle == 5)
						{
							if (item.type == 3029)
							{
								Vector2 vector7 = new Vector2(num81, num82);
								vector7.X = (float)Main.mouseX + Main.screenPosition.X - vector2.X;
								vector7.Y = (float)Main.mouseY + Main.screenPosition.Y - vector2.Y - 1000f;
								this.itemRotation = (float)Math.Atan2((double)(vector7.Y * (float)this.direction), (double)(vector7.X * (float)this.direction));
								NetMessage.SendData(13, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
								NetMessage.SendData(41, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
							}
							else if (item.type == 3779)
							{
								this.itemRotation = 0f;
								NetMessage.SendData(13, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
								NetMessage.SendData(41, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
							}
							else
							{
								this.itemRotation = (float)Math.Atan2((double)(num82 * (float)this.direction), (double)(num81 * (float)this.direction)) - this.fullRotation;
								NetMessage.SendData(13, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
								NetMessage.SendData(41, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
							}
						}
						if (num74 == 17)
						{
							vector2.X = (float)Main.mouseX + Main.screenPosition.X;
							vector2.Y = (float)Main.mouseY + Main.screenPosition.Y;
							if (this.gravDir == -1f)
							{
								vector2.Y = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY;
							}
						}
						if (num74 == 76)
						{
							num74 += Main.rand.Next(3);
							num84 /= (float)(Main.screenHeight / 2);
							if (num84 > 1f)
							{
								num84 = 1f;
							}
							float num86 = num81 + (float)Main.rand.Next(-40, 41) * 0.01f;
							float num87 = num82 + (float)Main.rand.Next(-40, 41) * 0.01f;
							num86 *= num84 + 0.25f;
							num87 *= num84 + 0.25f;
							int num88 = Projectile.NewProjectile(vector2.X, vector2.Y, num86, num87, num74, num76, num77, i, 0f, 0f);
							Main.projectile[num88].ai[1] = 1f;
							num84 = num84 * 2f - 1f;
							if (num84 < -1f)
							{
								num84 = -1f;
							}
							if (num84 > 1f)
							{
								num84 = 1f;
							}
							Main.projectile[num88].ai[0] = num84;
							NetMessage.SendData(27, -1, -1, "", num88, 0f, 0f, 0f, 0, 0, 0);
						}
						else if (item.type == 3029)
						{
							int num89 = 3;
							if (Main.rand.Next(3) == 0)
							{
								num89++;
							}
							for (int num90 = 0; num90 < num89; num90++)
							{
								vector2 = new Vector2(this.position.X + (float)this.width * 0.5f + (float)(Main.rand.Next(201) * -(float)this.direction) + ((float)Main.mouseX + Main.screenPosition.X - this.position.X), this.MountedCenter.Y - 600f);
								vector2.X = (vector2.X * 10f + base.Center.X) / 11f + (float)Main.rand.Next(-100, 101);
								vector2.Y -= (float)(150 * num90);
								num81 = (float)Main.mouseX + Main.screenPosition.X - vector2.X;
								num82 = (float)Main.mouseY + Main.screenPosition.Y - vector2.Y;
								if (num82 < 0f)
								{
									num82 *= -1f;
								}
								if (num82 < 20f)
								{
									num82 = 20f;
								}
								num83 = (float)Math.Sqrt((double)(num81 * num81 + num82 * num82));
								num83 = num75 / num83;
								num81 *= num83;
								num82 *= num83;
								float num91 = num81 + (float)Main.rand.Next(-40, 41) * 0.03f;
								float speedY = num82 + (float)Main.rand.Next(-40, 41) * 0.03f;
								num91 *= (float)Main.rand.Next(75, 150) * 0.01f;
								vector2.X += (float)Main.rand.Next(-50, 51);
								int num92 = Projectile.NewProjectile(vector2.X, vector2.Y, num91, speedY, num74, num76, num77, i, 0f, 0f);
								Main.projectile[num92].noDropItem = true;
							}
						}
						else if (item.type == 98 || item.type == 533)
						{
							float speedX = num81 + (float)Main.rand.Next(-40, 41) * 0.01f;
							float speedY2 = num82 + (float)Main.rand.Next(-40, 41) * 0.01f;
							Projectile.NewProjectile(vector2.X, vector2.Y, speedX, speedY2, num74, num76, num77, i, 0f, 0f);
						}
						else if (item.type == 1319)
						{
							float speedX2 = num81 + (float)Main.rand.Next(-40, 41) * 0.02f;
							float speedY3 = num82 + (float)Main.rand.Next(-40, 41) * 0.02f;
							int num93 = Projectile.NewProjectile(vector2.X, vector2.Y, speedX2, speedY3, num74, num76, num77, i, 0f, 0f);
							Main.projectile[num93].ranged = true;
							Main.projectile[num93].thrown = false;
						}
						else if (item.type == 3107)
						{
							float speedX3 = num81 + (float)Main.rand.Next(-40, 41) * 0.02f;
							float speedY4 = num82 + (float)Main.rand.Next(-40, 41) * 0.02f;
							Projectile.NewProjectile(vector2.X, vector2.Y, speedX3, speedY4, num74, num76, num77, i, 0f, 0f);
						}
						else if (item.type == 3053)
						{
							Vector2 value2 = new Vector2(num81, num82);
							value2.Normalize();
							Vector2 value3 = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
							value3.Normalize();
							value2 = value2 * 4f + value3;
							value2.Normalize();
							value2 *= item.shootSpeed;
							float num94 = (float)Main.rand.Next(10, 80) * 0.001f;
							if (Main.rand.Next(2) == 0)
							{
								num94 *= -1f;
							}
							float num95 = (float)Main.rand.Next(10, 80) * 0.001f;
							if (Main.rand.Next(2) == 0)
							{
								num95 *= -1f;
							}
							Projectile.NewProjectile(vector2.X, vector2.Y, value2.X, value2.Y, num74, num76, num77, i, num95, num94);
						}
						else if (item.type == 3019)
						{
							Vector2 value4 = new Vector2(num81, num82);
							float num96 = value4.Length();
							value4.X += (float)Main.rand.Next(-100, 101) * 0.01f * num96 * 0.15f;
							value4.Y += (float)Main.rand.Next(-100, 101) * 0.01f * num96 * 0.15f;
							float num97 = num81 + (float)Main.rand.Next(-40, 41) * 0.03f;
							float num98 = num82 + (float)Main.rand.Next(-40, 41) * 0.03f;
							value4.Normalize();
							value4 *= num96;
							num97 *= (float)Main.rand.Next(50, 150) * 0.01f;
							num98 *= (float)Main.rand.Next(50, 150) * 0.01f;
							Vector2 value5 = new Vector2(num97, num98);
							value5.X += (float)Main.rand.Next(-100, 101) * 0.025f;
							value5.Y += (float)Main.rand.Next(-100, 101) * 0.025f;
							value5.Normalize();
							value5 *= num96;
							num97 = value5.X;
							num98 = value5.Y;
							Projectile.NewProjectile(vector2.X, vector2.Y, num97, num98, num74, num76, num77, i, value4.X, value4.Y);
						}
						else if (item.type == 2797)
						{
							Vector2 value6 = Vector2.Normalize(new Vector2(num81, num82)) * 40f * item.scale;
							if (Collision.CanHit(vector2, 0, 0, vector2 + value6, 0, 0))
							{
								vector2 += value6;
							}
							float ai = new Vector2(num81, num82).ToRotation();
							float num99 = 2.09439516f;
							int num100 = Main.rand.Next(4, 5);
							if (Main.rand.Next(4) == 0)
							{
								num100++;
							}
							for (int num101 = 0; num101 < num100; num101++)
							{
								float scaleFactor2 = (float)Main.rand.NextDouble() * 0.2f + 0.05f;
								Vector2 vector8 = new Vector2(num81, num82).RotatedBy((double)(num99 * (float)Main.rand.NextDouble() - num99 / 2f), default(Vector2)) * scaleFactor2;
								int num102 = Projectile.NewProjectile(vector2.X, vector2.Y, vector8.X, vector8.Y, 444, num76, num77, i, ai, 0f);
								Main.projectile[num102].localAI[0] = (float)num74;
								Main.projectile[num102].localAI[1] = num75;
							}
						}
						else if (item.type == 2270)
						{
							float num103 = num81 + (float)Main.rand.Next(-40, 41) * 0.05f;
							float num104 = num82 + (float)Main.rand.Next(-40, 41) * 0.05f;
							if (Main.rand.Next(3) == 0)
							{
								num103 *= 1f + (float)Main.rand.Next(-30, 31) * 0.02f;
								num104 *= 1f + (float)Main.rand.Next(-30, 31) * 0.02f;
							}
							Projectile.NewProjectile(vector2.X, vector2.Y, num103, num104, num74, num76, num77, i, 0f, 0f);
						}
						else if (item.type == 1930)
						{
							int num105 = 2 + Main.rand.Next(3);
							for (int num106 = 0; num106 < num105; num106++)
							{
								float num107 = num81;
								float num108 = num82;
								float num109 = 0.025f * (float)num106;
								num107 += (float)Main.rand.Next(-35, 36) * num109;
								num108 += (float)Main.rand.Next(-35, 36) * num109;
								num83 = (float)Math.Sqrt((double)(num107 * num107 + num108 * num108));
								num83 = num75 / num83;
								num107 *= num83;
								num108 *= num83;
								float x = vector2.X + num81 * (float)(num105 - num106) * 1.75f;
								float y = vector2.Y + num82 * (float)(num105 - num106) * 1.75f;
								Projectile.NewProjectile(x, y, num107, num108, num74, num76, num77, i, (float)Main.rand.Next(0, 10 * (num106 + 1)), 0f);
							}
						}
						else if (item.type == 1931)
						{
							int num110 = 2;
							for (int num111 = 0; num111 < num110; num111++)
							{
								vector2 = new Vector2(this.position.X + (float)this.width * 0.5f + (float)(Main.rand.Next(201) * -(float)this.direction) + ((float)Main.mouseX + Main.screenPosition.X - this.position.X), this.MountedCenter.Y - 600f);
								vector2.X = (vector2.X + base.Center.X) / 2f + (float)Main.rand.Next(-200, 201);
								vector2.Y -= (float)(100 * num111);
								num81 = (float)Main.mouseX + Main.screenPosition.X - vector2.X;
								num82 = (float)Main.mouseY + Main.screenPosition.Y - vector2.Y;
								if (num82 < 0f)
								{
									num82 *= -1f;
								}
								if (num82 < 20f)
								{
									num82 = 20f;
								}
								num83 = (float)Math.Sqrt((double)(num81 * num81 + num82 * num82));
								num83 = num75 / num83;
								num81 *= num83;
								num82 *= num83;
								float speedX4 = num81 + (float)Main.rand.Next(-40, 41) * 0.02f;
								float speedY5 = num82 + (float)Main.rand.Next(-40, 41) * 0.02f;
								Projectile.NewProjectile(vector2.X, vector2.Y, speedX4, speedY5, num74, num76, num77, i, 0f, (float)Main.rand.Next(5));
							}
						}
						else if (item.type == 2750)
						{
							int num112 = 1;
							for (int num113 = 0; num113 < num112; num113++)
							{
								vector2 = new Vector2(this.position.X + (float)this.width * 0.5f + (float)(Main.rand.Next(201) * -(float)this.direction) + ((float)Main.mouseX + Main.screenPosition.X - this.position.X), this.MountedCenter.Y - 600f);
								vector2.X = (vector2.X + base.Center.X) / 2f + (float)Main.rand.Next(-200, 201);
								vector2.Y -= (float)(100 * num113);
								num81 = (float)Main.mouseX + Main.screenPosition.X - vector2.X + (float)Main.rand.Next(-40, 41) * 0.03f;
								num82 = (float)Main.mouseY + Main.screenPosition.Y - vector2.Y;
								if (num82 < 0f)
								{
									num82 *= -1f;
								}
								if (num82 < 20f)
								{
									num82 = 20f;
								}
								num83 = (float)Math.Sqrt((double)(num81 * num81 + num82 * num82));
								num83 = num75 / num83;
								num81 *= num83;
								num82 *= num83;
								float num114 = num81;
								float num115 = num82 + (float)Main.rand.Next(-40, 41) * 0.02f;
								Projectile.NewProjectile(vector2.X, vector2.Y, num114 * 0.75f, num115 * 0.75f, num74 + Main.rand.Next(3), num76, num77, i, 0f, 0.5f + (float)Main.rand.NextDouble() * 0.3f);
							}
						}
						else if (item.type == 3570)
						{
							int num116 = 3;
							for (int num117 = 0; num117 < num116; num117++)
							{
								vector2 = new Vector2(this.position.X + (float)this.width * 0.5f + (float)(Main.rand.Next(201) * -(float)this.direction) + ((float)Main.mouseX + Main.screenPosition.X - this.position.X), this.MountedCenter.Y - 600f);
								vector2.X = (vector2.X + base.Center.X) / 2f + (float)Main.rand.Next(-200, 201);
								vector2.Y -= (float)(100 * num117);
								num81 = (float)Main.mouseX + Main.screenPosition.X - vector2.X;
								num82 = (float)Main.mouseY + Main.screenPosition.Y - vector2.Y;
								float ai2 = num82 + vector2.Y;
								if (num82 < 0f)
								{
									num82 *= -1f;
								}
								if (num82 < 20f)
								{
									num82 = 20f;
								}
								num83 = (float)Math.Sqrt((double)(num81 * num81 + num82 * num82));
								num83 = num75 / num83;
								num81 *= num83;
								num82 *= num83;
								Vector2 vector9 = new Vector2(num81, num82) / 2f;
								Projectile.NewProjectile(vector2.X, vector2.Y, vector9.X, vector9.Y, num74, num76, num77, i, 0f, ai2);
							}
						}
						else if (item.type == 3065)
						{
							Vector2 value7 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY);
							float num118 = value7.Y;
							if (num118 > base.Center.Y - 200f)
							{
								num118 = base.Center.Y - 200f;
							}
							for (int num119 = 0; num119 < 3; num119++)
							{
								vector2 = base.Center + new Vector2((float)(-(float)Main.rand.Next(0, 401) * this.direction), -600f);
								vector2.Y -= (float)(100 * num119);
								Vector2 value8 = value7 - vector2;
								if (value8.Y < 0f)
								{
									value8.Y *= -1f;
								}
								if (value8.Y < 20f)
								{
									value8.Y = 20f;
								}
								value8.Normalize();
								value8 *= num75;
								num81 = value8.X;
								num82 = value8.Y;
								float speedX5 = num81;
								float speedY6 = num82 + (float)Main.rand.Next(-40, 41) * 0.02f;
								Projectile.NewProjectile(vector2.X, vector2.Y, speedX5, speedY6, num74, num76 * 2, num77, i, 0f, num118);
							}
						}
						else if (item.type == 2624)
						{
							float num120 = 0.314159274f;
							int num121 = 5;
							Vector2 vector10 = new Vector2(num81, num82);
							vector10.Normalize();
							vector10 *= 40f;
							bool flag12 = Collision.CanHit(vector2, 0, 0, vector2 + vector10, 0, 0);
							for (int num122 = 0; num122 < num121; num122++)
							{
								float num123 = (float)num122 - ((float)num121 - 1f) / 2f;
								Vector2 value9 = vector10.RotatedBy((double)(num120 * num123), default(Vector2));
								if (!flag12)
								{
									value9 -= vector10;
								}
								int num124 = Projectile.NewProjectile(vector2.X + value9.X, vector2.Y + value9.Y, num81, num82, num74, num76, num77, i, 0f, 0f);
								Main.projectile[num124].noDropItem = true;
							}
						}
						else if (item.type == 1929)
						{
							float speedX6 = num81 + (float)Main.rand.Next(-40, 41) * 0.03f;
							float speedY7 = num82 + (float)Main.rand.Next(-40, 41) * 0.03f;
							Projectile.NewProjectile(vector2.X, vector2.Y, speedX6, speedY7, num74, num76, num77, i, 0f, 0f);
						}
						else if (item.type == 1553)
						{
							float speedX7 = num81 + (float)Main.rand.Next(-40, 41) * 0.005f;
							float speedY8 = num82 + (float)Main.rand.Next(-40, 41) * 0.005f;
							Projectile.NewProjectile(vector2.X, vector2.Y, speedX7, speedY8, num74, num76, num77, i, 0f, 0f);
						}
						else if (item.type == 518)
						{
							float num125 = num81;
							float num126 = num82;
							num125 += (float)Main.rand.Next(-40, 41) * 0.04f;
							num126 += (float)Main.rand.Next(-40, 41) * 0.04f;
							Projectile.NewProjectile(vector2.X, vector2.Y, num125, num126, num74, num76, num77, i, 0f, 0f);
						}
						else if (item.type == 1265)
						{
							float num127 = num81;
							float num128 = num82;
							num127 += (float)Main.rand.Next(-30, 31) * 0.03f;
							num128 += (float)Main.rand.Next(-30, 31) * 0.03f;
							Projectile.NewProjectile(vector2.X, vector2.Y, num127, num128, num74, num76, num77, i, 0f, 0f);
						}
						else if (item.type == 534)
						{
							int num129 = Main.rand.Next(4, 6);
							for (int num130 = 0; num130 < num129; num130++)
							{
								float num131 = num81;
								float num132 = num82;
								num131 += (float)Main.rand.Next(-40, 41) * 0.05f;
								num132 += (float)Main.rand.Next(-40, 41) * 0.05f;
								Projectile.NewProjectile(vector2.X, vector2.Y, num131, num132, num74, num76, num77, i, 0f, 0f);
							}
						}
						else if (item.type == 2188)
						{
							int num133 = 4;
							if (Main.rand.Next(3) == 0)
							{
								num133++;
							}
							if (Main.rand.Next(4) == 0)
							{
								num133++;
							}
							if (Main.rand.Next(5) == 0)
							{
								num133++;
							}
							for (int num134 = 0; num134 < num133; num134++)
							{
								float num135 = num81;
								float num136 = num82;
								float num137 = 0.05f * (float)num134;
								num135 += (float)Main.rand.Next(-35, 36) * num137;
								num136 += (float)Main.rand.Next(-35, 36) * num137;
								num83 = (float)Math.Sqrt((double)(num135 * num135 + num136 * num136));
								num83 = num75 / num83;
								num135 *= num83;
								num136 *= num83;
								float x2 = vector2.X;
								float y2 = vector2.Y;
								Projectile.NewProjectile(x2, y2, num135, num136, num74, num76, num77, i, 0f, 0f);
							}
						}
						else if (item.type == 1308)
						{
							int num138 = 3;
							if (Main.rand.Next(3) == 0)
							{
								num138++;
							}
							for (int num139 = 0; num139 < num138; num139++)
							{
								float num140 = num81;
								float num141 = num82;
								float num142 = 0.05f * (float)num139;
								num140 += (float)Main.rand.Next(-35, 36) * num142;
								num141 += (float)Main.rand.Next(-35, 36) * num142;
								num83 = (float)Math.Sqrt((double)(num140 * num140 + num141 * num141));
								num83 = num75 / num83;
								num140 *= num83;
								num141 *= num83;
								float x3 = vector2.X;
								float y3 = vector2.Y;
								Projectile.NewProjectile(x3, y3, num140, num141, num74, num76, num77, i, 0f, 0f);
							}
						}
						else if (item.type == 1258)
						{
							float num143 = num81;
							float num144 = num82;
							num143 += (float)Main.rand.Next(-40, 41) * 0.01f;
							num144 += (float)Main.rand.Next(-40, 41) * 0.01f;
							vector2.X += (float)Main.rand.Next(-40, 41) * 0.05f;
							vector2.Y += (float)Main.rand.Next(-45, 36) * 0.05f;
							Projectile.NewProjectile(vector2.X, vector2.Y, num143, num144, num74, num76, num77, i, 0f, 0f);
						}
						else if (item.type == 964)
						{
							int num145 = Main.rand.Next(3, 5);
							for (int num146 = 0; num146 < num145; num146++)
							{
								float num147 = num81;
								float num148 = num82;
								num147 += (float)Main.rand.Next(-35, 36) * 0.04f;
								num148 += (float)Main.rand.Next(-35, 36) * 0.04f;
								Projectile.NewProjectile(vector2.X, vector2.Y, num147, num148, num74, num76, num77, i, 0f, 0f);
							}
						}
						else if (item.type == 1569)
						{
							int num149 = 4;
							if (Main.rand.Next(2) == 0)
							{
								num149++;
							}
							if (Main.rand.Next(4) == 0)
							{
								num149++;
							}
							if (Main.rand.Next(8) == 0)
							{
								num149++;
							}
							if (Main.rand.Next(16) == 0)
							{
								num149++;
							}
							for (int num150 = 0; num150 < num149; num150++)
							{
								float num151 = num81;
								float num152 = num82;
								float num153 = 0.05f * (float)num150;
								num151 += (float)Main.rand.Next(-35, 36) * num153;
								num152 += (float)Main.rand.Next(-35, 36) * num153;
								num83 = (float)Math.Sqrt((double)(num151 * num151 + num152 * num152));
								num83 = num75 / num83;
								num151 *= num83;
								num152 *= num83;
								float x4 = vector2.X;
								float y4 = vector2.Y;
								Projectile.NewProjectile(x4, y4, num151, num152, num74, num76, num77, i, 0f, 0f);
							}
						}
						else if (item.type == 1572 || item.type == 2366 || item.type == 3571 || item.type == 3569)
						{
							bool flag13 = item.type == 3571 || item.type == 3569;
							int num154 = (int)((float)Main.mouseX + Main.screenPosition.X) / 16;
							int num155 = (int)((float)Main.mouseY + Main.screenPosition.Y) / 16;
							if (this.gravDir == -1f)
							{
								num155 = (int)(Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY) / 16;
							}
							if (!flag13)
							{
								while (num155 < Main.maxTilesY - 10 && Main.tile[num154, num155] != null && !WorldGen.SolidTile2(num154, num155) && Main.tile[num154 - 1, num155] != null && !WorldGen.SolidTile2(num154 - 1, num155) && Main.tile[num154 + 1, num155] != null && !WorldGen.SolidTile2(num154 + 1, num155))
								{
									num155++;
								}
								num155--;
							}
							Projectile.NewProjectile((float)Main.mouseX + Main.screenPosition.X, (float)(num155 * 16 - 24), 0f, 15f, num74, num76, num77, i, 0f, 0f);
							this.UpdateMaxTurrets();
						}
						else if (item.type == 1244 || item.type == 1256)
						{
							int num156 = Projectile.NewProjectile(vector2.X, vector2.Y, num81, num82, num74, num76, num77, i, 0f, 0f);
							Main.projectile[num156].ai[0] = (float)Main.mouseX + Main.screenPosition.X;
							Main.projectile[num156].ai[1] = (float)Main.mouseY + Main.screenPosition.Y;
						}
						else if (item.type == 1229)
						{
							int num157 = Main.rand.Next(2, 4);
							if (Main.rand.Next(5) == 0)
							{
								num157++;
							}
							for (int num158 = 0; num158 < num157; num158++)
							{
								float num159 = num81;
								float num160 = num82;
								if (num158 > 0)
								{
									num159 += (float)Main.rand.Next(-35, 36) * 0.04f;
									num160 += (float)Main.rand.Next(-35, 36) * 0.04f;
								}
								if (num158 > 1)
								{
									num159 += (float)Main.rand.Next(-35, 36) * 0.04f;
									num160 += (float)Main.rand.Next(-35, 36) * 0.04f;
								}
								if (num158 > 2)
								{
									num159 += (float)Main.rand.Next(-35, 36) * 0.04f;
									num160 += (float)Main.rand.Next(-35, 36) * 0.04f;
								}
								int num161 = Projectile.NewProjectile(vector2.X, vector2.Y, num159, num160, num74, num76, num77, i, 0f, 0f);
								Main.projectile[num161].noDropItem = true;
							}
						}
						else if (item.type == 1121)
						{
							int num162 = Main.rand.Next(1, 4);
							if (Main.rand.Next(6) == 0)
							{
								num162++;
							}
							if (Main.rand.Next(6) == 0)
							{
								num162++;
							}
							if (this.strongBees && Main.rand.Next(3) == 0)
							{
								num162++;
							}
							for (int num163 = 0; num163 < num162; num163++)
							{
								float num164 = num81;
								float num165 = num82;
								num164 += (float)Main.rand.Next(-35, 36) * 0.02f;
								num165 += (float)Main.rand.Next(-35, 36) * 0.02f;
								int num166 = Projectile.NewProjectile(vector2.X, vector2.Y, num164, num165, this.beeType(), this.beeDamage(num76), this.beeKB(num77), i, 0f, 0f);
								Main.projectile[num166].magic = true;
							}
						}
						else if (item.type == 1155)
						{
							int num167 = Main.rand.Next(2, 5);
							if (Main.rand.Next(5) == 0)
							{
								num167++;
							}
							if (Main.rand.Next(5) == 0)
							{
								num167++;
							}
							for (int num168 = 0; num168 < num167; num168++)
							{
								float num169 = num81;
								float num170 = num82;
								num169 += (float)Main.rand.Next(-35, 36) * 0.02f;
								num170 += (float)Main.rand.Next(-35, 36) * 0.02f;
								Projectile.NewProjectile(vector2.X, vector2.Y, num169, num170, num74, num76, num77, i, 0f, 0f);
							}
						}
						else if (item.type == 1801)
						{
							int num171 = Main.rand.Next(1, 4);
							for (int num172 = 0; num172 < num171; num172++)
							{
								float num173 = num81;
								float num174 = num82;
								num173 += (float)Main.rand.Next(-35, 36) * 0.05f;
								num174 += (float)Main.rand.Next(-35, 36) * 0.05f;
								Projectile.NewProjectile(vector2.X, vector2.Y, num173, num174, num74, num76, num77, i, 0f, 0f);
							}
						}
						else if (item.type == 679)
						{
							for (int num175 = 0; num175 < 6; num175++)
							{
								float num176 = num81;
								float num177 = num82;
								num176 += (float)Main.rand.Next(-40, 41) * 0.05f;
								num177 += (float)Main.rand.Next(-40, 41) * 0.05f;
								Projectile.NewProjectile(vector2.X, vector2.Y, num176, num177, num74, num76, num77, i, 0f, 0f);
							}
						}
						else if (item.type == 2623)
						{
							for (int num178 = 0; num178 < 3; num178++)
							{
								float num179 = num81;
								float num180 = num82;
								num179 += (float)Main.rand.Next(-40, 41) * 0.1f;
								num180 += (float)Main.rand.Next(-40, 41) * 0.1f;
								Projectile.NewProjectile(vector2.X, vector2.Y, num179, num180, num74, num76, num77, i, 0f, 0f);
							}
						}
						else if (item.type == 3210)
						{
							Vector2 value10 = new Vector2(num81, num82);
							value10.X += (float)Main.rand.Next(-30, 31) * 0.04f;
							value10.Y += (float)Main.rand.Next(-30, 31) * 0.03f;
							value10.Normalize();
							value10 *= (float)Main.rand.Next(70, 91) * 0.1f;
							value10.X += (float)Main.rand.Next(-30, 31) * 0.04f;
							value10.Y += (float)Main.rand.Next(-30, 31) * 0.03f;
							Projectile.NewProjectile(vector2.X, vector2.Y, value10.X, value10.Y, num74, num76, num77, i, (float)Main.rand.Next(20), 0f);
						}
						else if (item.type == 434)
						{
							float num181 = num81;
							float num182 = num82;
							if (this.itemAnimation < 5)
							{
								num181 += (float)Main.rand.Next(-40, 41) * 0.01f;
								num182 += (float)Main.rand.Next(-40, 41) * 0.01f;
								num181 *= 1.1f;
								num182 *= 1.1f;
							}
							else if (this.itemAnimation < 10)
							{
								num181 += (float)Main.rand.Next(-20, 21) * 0.01f;
								num182 += (float)Main.rand.Next(-20, 21) * 0.01f;
								num181 *= 1.05f;
								num182 *= 1.05f;
							}
							Projectile.NewProjectile(vector2.X, vector2.Y, num181, num182, num74, num76, num77, i, 0f, 0f);
						}
						else if (item.type == 1157)
						{
							num74 = Main.rand.Next(191, 195);
							num81 = 0f;
							num82 = 0f;
							vector2.X = (float)Main.mouseX + Main.screenPosition.X;
							vector2.Y = (float)Main.mouseY + Main.screenPosition.Y;
							int num183 = Projectile.NewProjectile(vector2.X, vector2.Y, num81, num82, num74, num76, num77, i, 0f, 0f);
							Main.projectile[num183].localAI[0] = 30f;
						}
						else if (item.type == 1802)
						{
							num81 = 0f;
							num82 = 0f;
							vector2.X = (float)Main.mouseX + Main.screenPosition.X;
							vector2.Y = (float)Main.mouseY + Main.screenPosition.Y;
							Projectile.NewProjectile(vector2.X, vector2.Y, num81, num82, num74, num76, num77, i, 0f, 0f);
						}
						else if (item.type == 2364 || item.type == 2365)
						{
							num81 = 0f;
							num82 = 0f;
							vector2.X = (float)Main.mouseX + Main.screenPosition.X;
							vector2.Y = (float)Main.mouseY + Main.screenPosition.Y;
							Projectile.NewProjectile(vector2.X, vector2.Y, num81, num82, num74, num76, num77, i, 0f, 0f);
						}
						else if (item.type == 2535)
						{
							num81 = 0f;
							num82 = 0f;
							vector2.X = (float)Main.mouseX + Main.screenPosition.X;
							vector2.Y = (float)Main.mouseY + Main.screenPosition.Y;
							Vector2 spinningpoint = new Vector2(num81, num82);
							spinningpoint = spinningpoint.RotatedBy(1.5707963705062866, default(Vector2));
							Projectile.NewProjectile(vector2.X + spinningpoint.X, vector2.Y + spinningpoint.Y, spinningpoint.X, spinningpoint.Y, num74, num76, num77, i, 0f, 0f);
							spinningpoint = spinningpoint.RotatedBy(-3.1415927410125732, default(Vector2));
							Projectile.NewProjectile(vector2.X + spinningpoint.X, vector2.Y + spinningpoint.Y, spinningpoint.X, spinningpoint.Y, num74 + 1, num76, num77, i, 0f, 0f);
						}
						else if (item.type == 2551)
						{
							num81 = 0f;
							num82 = 0f;
							vector2.X = (float)Main.mouseX + Main.screenPosition.X;
							vector2.Y = (float)Main.mouseY + Main.screenPosition.Y;
							Projectile.NewProjectile(vector2.X, vector2.Y, num81, num82, num74 + Main.rand.Next(3), num76, num77, i, 0f, 0f);
						}
						else if (item.type == 2584)
						{
							num81 = 0f;
							num82 = 0f;
							vector2.X = (float)Main.mouseX + Main.screenPosition.X;
							vector2.Y = (float)Main.mouseY + Main.screenPosition.Y;
							Projectile.NewProjectile(vector2.X, vector2.Y, num81, num82, num74 + Main.rand.Next(3), num76, num77, i, 0f, 0f);
						}
						else if (item.type == 2621)
						{
							num81 = 0f;
							num82 = 0f;
							vector2.X = (float)Main.mouseX + Main.screenPosition.X;
							vector2.Y = (float)Main.mouseY + Main.screenPosition.Y;
							Projectile.NewProjectile(vector2.X, vector2.Y, num81, num82, num74, num76, num77, i, 0f, 0f);
						}
						else if (item.type == 2749 || item.type == 3249 || item.type == 3474)
						{
							num81 = 0f;
							num82 = 0f;
							vector2.X = (float)Main.mouseX + Main.screenPosition.X;
							vector2.Y = (float)Main.mouseY + Main.screenPosition.Y;
							Projectile.NewProjectile(vector2.X, vector2.Y, num81, num82, num74, num76, num77, i, 0f, 0f);
						}
						else if (item.type == 3531)
						{
							int num184 = -1;
							int num185 = -1;
							for (int num186 = 0; num186 < 1000; num186++)
							{
								if (Main.projectile[num186].active && Main.projectile[num186].owner == Main.myPlayer)
								{
									if (num184 == -1 && Main.projectile[num186].type == 625)
									{
										num184 = num186;
									}
									if (num185 == -1 && Main.projectile[num186].type == 628)
									{
										num185 = num186;
									}
									if (num184 != -1 && num185 != -1)
									{
										break;
									}
								}
							}
							if (num184 == -1 && num185 == -1)
							{
								num81 = 0f;
								num82 = 0f;
								vector2.X = (float)Main.mouseX + Main.screenPosition.X;
								vector2.Y = (float)Main.mouseY + Main.screenPosition.Y;
								int num187 = Projectile.NewProjectile(vector2.X, vector2.Y, num81, num82, num74, num76, num77, i, 0f, 0f);
								num187 = Projectile.NewProjectile(vector2.X, vector2.Y, num81, num82, num74 + 1, num76, num77, i, (float)num187, 0f);
								int num188 = num187;
								num187 = Projectile.NewProjectile(vector2.X, vector2.Y, num81, num82, num74 + 2, num76, num77, i, (float)num187, 0f);
								Main.projectile[num188].localAI[1] = (float)num187;
								num188 = num187;
								num187 = Projectile.NewProjectile(vector2.X, vector2.Y, num81, num82, num74 + 3, num76, num77, i, (float)num187, 0f);
								Main.projectile[num188].localAI[1] = (float)num187;
							}
							else if (num184 != -1 && num185 != -1)
							{
								int num189 = Projectile.NewProjectile(vector2.X, vector2.Y, num81, num82, num74 + 1, num76, num77, i, (float)Projectile.GetByUUID(Main.myPlayer, Main.projectile[num185].ai[0]), 0f);
								int num190 = num189;
								num189 = Projectile.NewProjectile(vector2.X, vector2.Y, num81, num82, num74 + 2, num76, num77, i, (float)num189, 0f);
								Main.projectile[num190].localAI[1] = (float)num189;
								Main.projectile[num190].netUpdate = true;
								Main.projectile[num190].ai[1] = 1f;
								Main.projectile[num189].localAI[1] = (float)num185;
								Main.projectile[num189].netUpdate = true;
								Main.projectile[num189].ai[1] = 1f;
								Main.projectile[num185].ai[0] = (float)Main.projectile[num189].projUUID;
								Main.projectile[num185].netUpdate = true;
								Main.projectile[num185].ai[1] = 1f;
							}
						}
						else if (item.type == 1309)
						{
							num81 = 0f;
							num82 = 0f;
							vector2.X = (float)Main.mouseX + Main.screenPosition.X;
							vector2.Y = (float)Main.mouseY + Main.screenPosition.Y;
							Projectile.NewProjectile(vector2.X, vector2.Y, num81, num82, num74, num76, num77, i, 0f, 0f);
						}
						else if (item.shoot > 0 && (Main.projPet[item.shoot] || item.shoot == 72 || item.shoot == 18 || item.shoot == 500 || item.shoot == 650) && !item.summon)
						{
							for (int num191 = 0; num191 < 1000; num191++)
							{
								if (Main.projectile[num191].active && Main.projectile[num191].owner == this.whoAmI)
								{
									if (item.shoot == 72)
									{
										if (Main.projectile[num191].type == 72 || Main.projectile[num191].type == 86 || Main.projectile[num191].type == 87)
										{
											Main.projectile[num191].Kill();
										}
									}
									else if (item.shoot == Main.projectile[num191].type)
									{
										Main.projectile[num191].Kill();
									}
								}
							}
							Projectile.NewProjectile(vector2.X, vector2.Y, num81, num82, num74, num76, num77, i, 0f, 0f);
						}
						else if (item.type == 3006)
						{
							Vector2 vector11;
							vector11.X = (float)Main.mouseX + Main.screenPosition.X;
							vector11.Y = (float)Main.mouseY + Main.screenPosition.Y;
							while (Collision.CanHitLine(this.position, this.width, this.height, vector2, 1, 1))
							{
								vector2.X += num81;
								vector2.Y += num82;
								if ((vector2 - vector11).Length() < 20f + Math.Abs(num81) + Math.Abs(num82))
								{
									vector2 = vector11;
									break;
								}
							}
							Projectile.NewProjectile(vector2.X, vector2.Y, 0f, 0f, num74, num76, num77, i, 0f, 0f);
						}
						else if (item.type == 3014)
						{
							Vector2 vector12;
							vector12.X = (float)Main.mouseX + Main.screenPosition.X;
							vector12.Y = (float)Main.mouseY + Main.screenPosition.Y;
							while (Collision.CanHitLine(this.position, this.width, this.height, vector2, 1, 1))
							{
								vector2.X += num81;
								vector2.Y += num82;
								if ((vector2 - vector12).Length() < 20f + Math.Abs(num81) + Math.Abs(num82))
								{
									vector2 = vector12;
									break;
								}
							}
							bool flag14 = false;
							int num192 = (int)vector2.Y / 16;
							int num193 = (int)vector2.X / 16;
							int num194 = num192;
							while (num192 < Main.maxTilesY - 10 && num192 - num194 < 30 && !WorldGen.SolidTile(num193, num192) && !TileID.Sets.Platforms[(int)Main.tile[num193, num192].type])
							{
								num192++;
							}
							if (!WorldGen.SolidTile(num193, num192) && !TileID.Sets.Platforms[(int)Main.tile[num193, num192].type])
							{
								flag14 = true;
							}
							float num195 = (float)(num192 * 16);
							num192 = num194;
							while (num192 > 10 && num194 - num192 < 30 && !WorldGen.SolidTile(num193, num192))
							{
								num192--;
							}
							float num196 = (float)(num192 * 16 + 16);
							float num197 = num195 - num196;
							int num198 = 10;
							if (num197 > (float)(16 * num198))
							{
								num197 = (float)(16 * num198);
							}
							num196 = num195 - num197;
							vector2.X = (float)((int)(vector2.X / 16f) * 16);
							if (!flag14)
							{
								Projectile.NewProjectile(vector2.X, vector2.Y, 0f, 0f, num74, num76, num77, i, num196, num197);
							}
						}
						else if (item.type == 3384)
						{
							int num199 = (this.altFunctionUse == 2) ? 1 : 0;
							Projectile.NewProjectile(vector2.X, vector2.Y, num81, num82, num74, num76, num77, i, 0f, (float)num199);
						}
						else if (item.type == 3473)
						{
							float ai3 = (Main.rand.NextFloat() - 0.5f) * 0.7853982f;
							Vector2 vector13 = new Vector2(num81, num82);
							Projectile.NewProjectile(vector2.X, vector2.Y, vector13.X, vector13.Y, num74, num76, num77, i, 0f, ai3);
						}
						else if (item.type == 3836)
						{
							float ai4 = Main.rand.NextFloat() * num75 * 0.75f * (float)this.direction;
							Vector2 velocity = new Vector2(num81, num82);
							Projectile.NewProjectile(vector2, velocity, num74, num76, num77, i, ai4, 0f);
						}
						else if (item.type == 3858)
						{
							bool flag15 = this.altFunctionUse == 2;
							Vector2 vector14 = new Vector2(num81, num82);
							if (flag15)
							{
								vector14 *= 1.5f;
								float ai5 = (0.3f + 0.7f * Main.rand.NextFloat()) * num75 * 1.75f * (float)this.direction;
								Projectile.NewProjectile(vector2, vector14, 708, (int)((float)num76 * 0.75f), num77 + 4f, i, ai5, 0f);
							}
							else
							{
								Projectile.NewProjectile(vector2, vector14, num74, num76, num77, i, 0f, 0f);
							}
						}
						else if (item.type == 3859)
						{
							Vector2 vector15 = new Vector2(num81, num82);
							num74 = 710;
							num76 = (int)((float)num76 * 0.7f);
							vector15 *= 0.8f;
							Vector2 value11 = vector15.SafeNormalize(-Vector2.UnitY);
							float num200 = 0.0174532924f * (float)(-(float)this.direction);
							for (float num201 = -2.5f; num201 < 3f; num201 += 1f)
							{
								Projectile.NewProjectile(vector2, (vector15 + value11 * num201 * 0.5f).RotatedBy((double)(num201 * num200), default(Vector2)), num74, num76, num77, i, 0f, 0f);
							}
						}
						else if (item.type == 3870)
						{
							Vector2 value12 = Vector2.Normalize(new Vector2(num81, num82)) * 40f * item.scale;
							if (Collision.CanHit(vector2, 0, 0, vector2 + value12, 0, 0))
							{
								vector2 += value12;
							}
							Vector2 vector16 = new Vector2(num81, num82);
							vector16 *= 0.8f;
							Vector2 value13 = vector16.SafeNormalize(-Vector2.UnitY);
							float num202 = 0.0174532924f * (float)(-(float)this.direction);
							for (int num203 = 0; num203 <= 2; num203++)
							{
								Projectile.NewProjectile(vector2, (vector16 + value13 * (float)num203 * 1f).RotatedBy((double)((float)num203 * num202), default(Vector2)), num74, num76, num77, i, 0f, 0f);
							}
						}
						else if (item.type == 3542)
						{
							float num204 = (Main.rand.NextFloat() - 0.5f) * 0.7853982f * 0.7f;
							int num205 = 0;
							while (num205 < 10 && !Collision.CanHit(vector2, 0, 0, vector2 + new Vector2(num81, num82).RotatedBy((double)num204, default(Vector2)) * 100f, 0, 0))
							{
								num204 = (Main.rand.NextFloat() - 0.5f) * 0.7853982f * 0.7f;
								num205++;
							}
							Vector2 vector17 = new Vector2(num81, num82).RotatedBy((double)num204, default(Vector2)) * (0.95f + Main.rand.NextFloat() * 0.3f);
							Projectile.NewProjectile(vector2.X, vector2.Y, vector17.X, vector17.Y, num74, num76, num77, i, 0f, 0f);
						}
						else if (item.type == 3779)
						{
							float num206 = Main.rand.NextFloat() * 6.28318548f;
							int num207 = 0;
							while (num207 < 10 && !Collision.CanHit(vector2, 0, 0, vector2 + new Vector2(num81, num82).RotatedBy((double)num206, default(Vector2)) * 100f, 0, 0))
							{
								num206 = Main.rand.NextFloat() * 6.28318548f;
								num207++;
							}
							Vector2 value14 = new Vector2(num81, num82).RotatedBy((double)num206, default(Vector2)) * (0.95f + Main.rand.NextFloat() * 0.3f);
							Projectile.NewProjectile(vector2 + value14 * 30f, Vector2.Zero, num74, num76, num77, i, -2f, 0f);
						}
						else if (item.type == 3787)
						{
							float f = Main.rand.NextFloat() * 6.28318548f;
							float value15 = 20f;
							float value16 = 60f;
							Vector2 vector18 = vector2 + f.ToRotationVector2() * MathHelper.Lerp(value15, value16, Main.rand.NextFloat());
							for (int num208 = 0; num208 < 50; num208++)
							{
								vector18 = vector2 + f.ToRotationVector2() * MathHelper.Lerp(value15, value16, Main.rand.NextFloat());
								if (Collision.CanHit(vector2, 0, 0, vector18 + (vector18 - vector2).SafeNormalize(Vector2.UnitX) * 8f, 0, 0))
								{
									break;
								}
								f = Main.rand.NextFloat() * 6.28318548f;
							}
							Vector2 mouseWorld = Main.MouseWorld;
							Vector2 vector19 = mouseWorld - vector18;
							Vector2 vector20 = new Vector2(num81, num82).SafeNormalize(Vector2.UnitY) * num75;
							vector19 = vector19.SafeNormalize(vector20) * num75;
							vector19 = Vector2.Lerp(vector19, vector20, 0.25f);
							Projectile.NewProjectile(vector18, vector19, num74, num76, num77, i, 0f, 0f);
						}
						else if (item.type == 3788)
						{
							Vector2 vector21 = new Vector2(num81, num82);
							float num209 = 0.7853982f;
							for (int num210 = 0; num210 < 2; num210++)
							{
								Projectile.NewProjectile(vector2, vector21 + vector21.SafeNormalize(Vector2.Zero).RotatedBy((double)(num209 * (Main.rand.NextFloat() * 0.5f + 0.5f)), default(Vector2)) * Main.rand.NextFloatDirection() * 2f, num74, num76, num77, i, 0f, 0f);
								Projectile.NewProjectile(vector2, vector21 + vector21.SafeNormalize(Vector2.Zero).RotatedBy((double)(-(double)num209 * (Main.rand.NextFloat() * 0.5f + 0.5f)), default(Vector2)) * Main.rand.NextFloatDirection() * 2f, num74, num76, num77, i, 0f, 0f);
							}
							Projectile.NewProjectile(vector2, vector21.SafeNormalize(Vector2.UnitX * (float)this.direction) * (num75 * 1.3f), 661, num76 * 2, num77, i, 0f, 0f);
						}
						else if (item.type == 3475)
						{
							Projectile.NewProjectile(vector2.X, vector2.Y, num81, num82, 615, num76, num77, i, (float)(5 * Main.rand.Next(0, 20)), 0f);
						}
						else if (item.type == 3540)
						{
							Projectile.NewProjectile(vector2.X, vector2.Y, num81, num82, 630, num76, num77, i, 0f, 0f);
						}
						else if (item.type == 3854)
						{
							Projectile.NewProjectile(vector2.X, vector2.Y, num81, num82, 705, num76, num77, i, 0f, 0f);
						}
						else if (item.type == 3546)
						{
							for (int num211 = 0; num211 < 2; num211++)
							{
								float num212 = num81;
								float num213 = num82;
								num212 += (float)Main.rand.Next(-40, 41) * 0.05f;
								num213 += (float)Main.rand.Next(-40, 41) * 0.05f;
								Vector2 vector22 = vector2 + Vector2.Normalize(new Vector2(num212, num213).RotatedBy((double)(-1.57079637f * (float)this.direction), default(Vector2))) * 6f;
								Projectile.NewProjectile(vector22.X, vector22.Y, num212, num213, 167 + Main.rand.Next(4), num76, num77, i, 0f, 1f);
							}
						}
						else if (item.type == 3350)
						{
							float num214 = num81;
							float num215 = num82;
							num214 += (float)Main.rand.Next(-1, 2) * 0.5f;
							num215 += (float)Main.rand.Next(-1, 2) * 0.5f;
							if (Collision.CanHitLine(base.Center, 0, 0, vector2 + new Vector2(num214, num215) * 2f, 0, 0))
							{
								vector2 += new Vector2(num214, num215);
							}
							Projectile.NewProjectile(vector2.X, vector2.Y - this.gravDir * 4f, num214, num215, num74, num76, num77, i, 0f, (float)Main.rand.Next(12) / 6f);
						}
						else if (item.type == 3852)
						{
							bool flag16 = this.altFunctionUse == 2;
							if (flag16)
							{
								Projectile.NewProjectile(vector2.X, base.Bottom.Y - 100f, (float)this.direction * num75, 0f, 704, num76 * 2, num77, i, 0f, 0f);
							}
							else
							{
								Projectile.NewProjectile(vector2.X, vector2.Y, num81, num82, num74, num76, num77, i, 0f, 0f);
							}
						}
						else if (item.type == 3818 || item.type == 3819 || item.type == 3820 || item.type == 3824 || item.type == 3825 || item.type == 3826 || item.type == 3829 || item.type == 3830 || item.type == 3831 || item.type == 3832 || item.type == 3833 || item.type == 3834)
						{
							this.PayDD2CrystalsBeforeUse(item);
							int num216;
							int num217;
							int num218;
							this.FindSentryRestingSpot(item.shoot, out num216, out num217, out num218);
							Projectile.NewProjectile((float)num216, (float)(num217 - num218), 0f, 0f, num74, num76, num77, i, 0f, 0f);
							this.UpdateMaxTurrets();
						}
						else if (PlayerHooks.Shoot(this, item, ref vector2, ref num81, ref num82, ref num74, ref num76, ref num77)
							&& ItemLoader.Shoot(item, this, ref vector2, ref num81, ref num82, ref num74, ref num76, ref num77))
						{
							int num219 = Projectile.NewProjectile(vector2.X, vector2.Y, num81, num82, num74, num76, num77, i, 0f, 0f);
							if (item.type == 726)
							{
								Main.projectile[num219].magic = true;
							}
							if (item.type == 724 || item.type == 676)
							{
								Main.projectile[num219].melee = true;
							}
							if (num74 == 80)
							{
								Main.projectile[num219].ai[0] = (float)Player.tileTargetX;
								Main.projectile[num219].ai[1] = (float)Player.tileTargetY;
							}
							if (num74 == 442)
							{
								Main.projectile[num219].ai[0] = (float)Player.tileTargetX;
								Main.projectile[num219].ai[1] = (float)Player.tileTargetY;
							}
							if ((this.thrownCost50 || this.thrownCost33) && this.inventory[this.selectedItem].thrown)
							{
								Main.projectile[num219].noDropItem = true;
							}
							if (Main.projectile[num219].aiStyle == 99)
							{
								AchievementsHelper.HandleSpecialEvent(this, 7);
							}
						}
					}
					else if (item.useStyle == 5)
					{
						this.itemRotation = 0f;
						NetMessage.SendData(41, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
					}
				}
				if (this.whoAmI == Main.myPlayer && (item.type == 509 || item.type == 510 || item.type == 849 || item.type == 850 || item.type == 851 || item.type == 3612 || item.type == 3620 || item.type == 3625) && this.position.X / 16f - (float)Player.tileRangeX - (float)item.tileBoost - (float)this.blockRange <= (float)Player.tileTargetX && (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX + (float)item.tileBoost - 1f + (float)this.blockRange >= (float)Player.tileTargetX && this.position.Y / 16f - (float)Player.tileRangeY - (float)item.tileBoost - (float)this.blockRange <= (float)Player.tileTargetY && (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY + (float)item.tileBoost - 2f + (float)this.blockRange >= (float)Player.tileTargetY)
				{
					if (!Main.GamepadDisableCursorItemIcon)
					{
						this.showItemIcon = true;
						Main.ItemIconCacheUpdate(item.type);
					}
					if (this.itemAnimation > 0 && this.itemTime == 0 && this.controlUseItem)
					{
						int num220 = Player.tileTargetX;
						int num221 = Player.tileTargetY;
						if (item.type == 509)
						{
							int num222 = -1;
							for (int num223 = 0; num223 < 58; num223++)
							{
								if (this.inventory[num223].stack > 0 && this.inventory[num223].type == 530)
								{
									num222 = num223;
									break;
								}
							}
							if (num222 >= 0 && WorldGen.PlaceWire(num220, num221))
							{
								this.inventory[num222].stack--;
								if (this.inventory[num222].stack <= 0)
								{
									this.inventory[num222].SetDefaults(0, false);
								}
								this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
								NetMessage.SendData(17, -1, -1, "", 5, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
							}
						}
						else if (item.type == 850)
						{
							int num224 = -1;
							for (int num225 = 0; num225 < 58; num225++)
							{
								if (this.inventory[num225].stack > 0 && this.inventory[num225].type == 530)
								{
									num224 = num225;
									break;
								}
							}
							if (num224 >= 0 && WorldGen.PlaceWire2(num220, num221))
							{
								this.inventory[num224].stack--;
								if (this.inventory[num224].stack <= 0)
								{
									this.inventory[num224].SetDefaults(0, false);
								}
								this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
								NetMessage.SendData(17, -1, -1, "", 10, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
							}
						}
						if (item.type == 851)
						{
							int num226 = -1;
							for (int num227 = 0; num227 < 58; num227++)
							{
								if (this.inventory[num227].stack > 0 && this.inventory[num227].type == 530)
								{
									num226 = num227;
									break;
								}
							}
							if (num226 >= 0 && WorldGen.PlaceWire3(num220, num221))
							{
								this.inventory[num226].stack--;
								if (this.inventory[num226].stack <= 0)
								{
									this.inventory[num226].SetDefaults(0, false);
								}
								this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
								NetMessage.SendData(17, -1, -1, "", 12, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
							}
						}
						if (item.type == 3612)
						{
							int num228 = -1;
							for (int num229 = 0; num229 < 58; num229++)
							{
								if (this.inventory[num229].stack > 0 && this.inventory[num229].type == 530)
								{
									num228 = num229;
									break;
								}
							}
							if (num228 >= 0 && WorldGen.PlaceWire4(num220, num221))
							{
								this.inventory[num228].stack--;
								if (this.inventory[num228].stack <= 0)
								{
									this.inventory[num228].SetDefaults(0, false);
								}
								this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
								NetMessage.SendData(17, -1, -1, "", 16, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
							}
						}
						else if (item.type == 510)
						{
							if (WorldGen.KillActuator(num220, num221))
							{
								this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
								NetMessage.SendData(17, -1, -1, "", 9, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
							}
							else if (WorldGen.KillWire4(num220, num221))
							{
								this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
								NetMessage.SendData(17, -1, -1, "", 17, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
							}
							else if (WorldGen.KillWire3(num220, num221))
							{
								this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
								NetMessage.SendData(17, -1, -1, "", 13, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
							}
							else if (WorldGen.KillWire2(num220, num221))
							{
								this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
								NetMessage.SendData(17, -1, -1, "", 11, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
							}
							else if (WorldGen.KillWire(num220, num221))
							{
								this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
								NetMessage.SendData(17, -1, -1, "", 6, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
							}
						}
						else if (item.type == 849 && item.stack > 0 && WorldGen.PlaceActuator(num220, num221))
						{
							this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
							NetMessage.SendData(17, -1, -1, "", 8, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
							item.stack--;
							if (item.stack <= 0)
							{
								item.SetDefaults(0, false);
							}
						}
						if (item.type == 3620)
						{
							Tile tile2 = Main.tile[num220, num221];
							if (tile2 != null && tile2.actuator())
							{
								bool flag17 = tile2.inActive();
								if ((!this.ActuationRodLock || this.ActuationRodLockSetting == tile2.inActive()) && Wiring.Actuate(num220, num221) && flag17 != tile2.inActive())
								{
									this.ActuationRodLock = true;
									this.ActuationRodLockSetting = !tile2.inActive();
									this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
									NetMessage.SendData(17, -1, -1, "", 19, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
								}
							}
						}
						if (item.type == 3625)
						{
							Point point = new Point(Player.tileTargetX, Player.tileTargetY);
							this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
							WiresUI.Settings.MultiToolMode toolMode = WiresUI.Settings.ToolMode;
							WiresUI.Settings.ToolMode &= ~WiresUI.Settings.MultiToolMode.Actuator;
							if (Main.netMode == 1)
							{
								NetMessage.SendData(109, -1, -1, "", point.X, (float)point.Y, (float)point.X, (float)point.Y, (int)WiresUI.Settings.ToolMode, 0, 0);
							}
							else
							{
								Wiring.MassWireOperation(point, point, this);
							}
							WiresUI.Settings.ToolMode = toolMode;
						}
					}
				}
				if (this.itemAnimation > 0 && this.itemTime == 0 && (item.type == 507 || item.type == 508))
				{
					this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
					Vector2 vector23 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
					float num230 = (float)Main.mouseX + Main.screenPosition.X - vector23.X;
					float num231 = (float)Main.mouseY + Main.screenPosition.Y - vector23.Y;
					float num232 = (float)Math.Sqrt((double)(num230 * num230 + num231 * num231));
					num232 /= (float)(Main.screenHeight / 2);
					if (num232 > 1f)
					{
						num232 = 1f;
					}
					num232 = num232 * 2f - 1f;
					if (num232 < -1f)
					{
						num232 = -1f;
					}
					if (num232 > 1f)
					{
						num232 = 1f;
					}
					Main.harpNote = num232;
					LegacySoundStyle type6 = SoundID.Item26;
					if (item.type == 507)
					{
						type6 = SoundID.Item35;
					}
					Main.PlaySound(type6, this.position);
					NetMessage.SendData(58, -1, -1, "", this.whoAmI, num232, 0f, 0f, 0, 0, 0);
				}
				if (((item.type >= 205 && item.type <= 207) || item.type == 1128 || item.type == 3031 || item.type == 3032) && !this.noBuilding && this.position.X / 16f - (float)Player.tileRangeX - (float)item.tileBoost <= (float)Player.tileTargetX && (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX + (float)item.tileBoost - 1f >= (float)Player.tileTargetX && this.position.Y / 16f - (float)Player.tileRangeY - (float)item.tileBoost <= (float)Player.tileTargetY && (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY + (float)item.tileBoost - 2f >= (float)Player.tileTargetY)
				{
					if (!Main.GamepadDisableCursorItemIcon)
					{
						this.showItemIcon = true;
						Main.ItemIconCacheUpdate(item.type);
					}
					if (this.itemTime == 0 && this.itemAnimation > 0 && this.controlUseItem)
					{
						if (item.type == 205 || (item.type == 3032 && Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType() == 0))
						{
							int num233 = (int)Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType();
							int num234 = 0;
							for (int num235 = Player.tileTargetX - 1; num235 <= Player.tileTargetX + 1; num235++)
							{
								for (int num236 = Player.tileTargetY - 1; num236 <= Player.tileTargetY + 1; num236++)
								{
									if ((int)Main.tile[num235, num236].liquidType() == num233)
									{
										num234 += (int)Main.tile[num235, num236].liquid;
									}
								}
							}
							if (Main.tile[Player.tileTargetX, Player.tileTargetY].liquid > 0 && (num234 > 100 || item.type == 3032))
							{
								int liquidType = (int)Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType();
								if (item.type != 3032)
								{
									if (!Main.tile[Player.tileTargetX, Player.tileTargetY].lava())
									{
										if (Main.tile[Player.tileTargetX, Player.tileTargetY].honey())
										{
											item.stack--;
											this.PutItemInInventory(1128, this.selectedItem);
										}
										else
										{
											item.stack--;
											this.PutItemInInventory(206, this.selectedItem);
										}
									}
									else
									{
										item.stack--;
										this.PutItemInInventory(207, this.selectedItem);
									}
								}
								Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
								this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
								int num237 = (int)Main.tile[Player.tileTargetX, Player.tileTargetY].liquid;
								Main.tile[Player.tileTargetX, Player.tileTargetY].liquid = 0;
								Main.tile[Player.tileTargetX, Player.tileTargetY].lava(false);
								Main.tile[Player.tileTargetX, Player.tileTargetY].honey(false);
								WorldGen.SquareTileFrame(Player.tileTargetX, Player.tileTargetY, false);
								if (Main.netMode == 1)
								{
									NetMessage.sendWater(Player.tileTargetX, Player.tileTargetY);
								}
								else
								{
									Liquid.AddWater(Player.tileTargetX, Player.tileTargetY);
								}
								for (int num238 = Player.tileTargetX - 1; num238 <= Player.tileTargetX + 1; num238++)
								{
									for (int num239 = Player.tileTargetY - 1; num239 <= Player.tileTargetY + 1; num239++)
									{
										if (num237 < 256 && (int)Main.tile[num238, num239].liquidType() == num233)
										{
											int num240 = (int)Main.tile[num238, num239].liquid;
											if (num240 + num237 > 255)
											{
												num240 = 255 - num237;
											}
											num237 += num240;
											Tile expr_A1B4 = Main.tile[num238, num239];
											expr_A1B4.liquid -= (byte)num240;
											Main.tile[num238, num239].liquidType(liquidType);
											if (Main.tile[num238, num239].liquid == 0)
											{
												Main.tile[num238, num239].lava(false);
												Main.tile[num238, num239].honey(false);
											}
											WorldGen.SquareTileFrame(num238, num239, false);
											if (Main.netMode == 1)
											{
												NetMessage.sendWater(num238, num239);
											}
											else
											{
												Liquid.AddWater(num238, num239);
											}
										}
									}
								}
							}
						}
						else if (Main.tile[Player.tileTargetX, Player.tileTargetY].liquid < 200 && (!Main.tile[Player.tileTargetX, Player.tileTargetY].nactive() || !Main.tileSolid[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type] || Main.tileSolidTop[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type]))
						{
							if (item.type == 207)
							{
								if (Main.tile[Player.tileTargetX, Player.tileTargetY].liquid == 0 || Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType() == 1)
								{
									Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
									Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType(1);
									Main.tile[Player.tileTargetX, Player.tileTargetY].liquid = 255;
									WorldGen.SquareTileFrame(Player.tileTargetX, Player.tileTargetY, true);
									item.stack--;
									this.PutItemInInventory(205, this.selectedItem);
									this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
									if (Main.netMode == 1)
									{
										NetMessage.sendWater(Player.tileTargetX, Player.tileTargetY);
									}
								}
							}
							else if (item.type == 206 || item.type == 3031)
							{
								if (Main.tile[Player.tileTargetX, Player.tileTargetY].liquid == 0 || Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType() == 0)
								{
									Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
									Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType(0);
									Main.tile[Player.tileTargetX, Player.tileTargetY].liquid = 255;
									WorldGen.SquareTileFrame(Player.tileTargetX, Player.tileTargetY, true);
									if (item.type != 3031)
									{
										item.stack--;
										this.PutItemInInventory(205, this.selectedItem);
									}
									this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
									if (Main.netMode == 1)
									{
										NetMessage.sendWater(Player.tileTargetX, Player.tileTargetY);
									}
								}
							}
							else if (item.type == 1128 && (Main.tile[Player.tileTargetX, Player.tileTargetY].liquid == 0 || Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType() == 2))
							{
								Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1, 1f, 0f);
								Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType(2);
								Main.tile[Player.tileTargetX, Player.tileTargetY].liquid = 255;
								WorldGen.SquareTileFrame(Player.tileTargetX, Player.tileTargetY, true);
								item.stack--;
								this.PutItemInInventory(205, this.selectedItem);
								this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
								if (Main.netMode == 1)
								{
									NetMessage.sendWater(Player.tileTargetX, Player.tileTargetY);
								}
							}
						}
					}
				}
				if (!this.channel)
				{
					this.toolTime = this.itemTime;
				}
				else
				{
					this.toolTime--;
					if (this.toolTime < 0)
					{
						if (item.pick > 0)
						{
							this.toolTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
						}
						else
						{
							this.toolTime = (int)((float)item.useTime * this.pickSpeed / PlayerHooks.TotalUseTimeMultiplier(this, item));
						}
					}
				}
				if (item.pick > 0 || item.axe > 0 || item.hammer > 0)
				{
					bool flag18 = this.position.X / 16f - (float)Player.tileRangeX - (float)item.tileBoost <= (float)Player.tileTargetX && (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX + (float)item.tileBoost - 1f >= (float)Player.tileTargetX && this.position.Y / 16f - (float)Player.tileRangeY - (float)item.tileBoost <= (float)Player.tileTargetY && (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY + (float)item.tileBoost - 2f >= (float)Player.tileTargetY;
					if (this.noBuilding)
					{
						flag18 = false;
					}
					if (flag18)
					{
						int num241 = 0;
						bool flag19 = true;
						if (!Main.GamepadDisableCursorItemIcon)
						{
							this.showItemIcon = true;
							Main.ItemIconCacheUpdate(item.type);
						}
						if (this.toolTime == 0 && this.itemAnimation > 0 && this.controlUseItem && (!Main.tile[Player.tileTargetX, Player.tileTargetY].active() || (!Main.tileHammer[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type] && !Main.tileSolid[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type] && Main.tile[Player.tileTargetX, Player.tileTargetY].type != 314 && Main.tile[Player.tileTargetX, Player.tileTargetY].type != 424 && Main.tile[Player.tileTargetX, Player.tileTargetY].type != 442 && Main.tile[Player.tileTargetX, Player.tileTargetY].type != 351)))
						{
							this.poundRelease = false;
						}
						if (Main.tile[Player.tileTargetX, Player.tileTargetY].active())
						{
							if ((item.pick > 0 && !Main.tileAxe[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type] && !Main.tileHammer[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type]) || (item.axe > 0 && Main.tileAxe[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type]) || (item.hammer > 0 && Main.tileHammer[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type]))
							{
								flag19 = false;
							}
							if (this.toolTime == 0 && this.itemAnimation > 0 && this.controlUseItem)
							{
								int tileId = this.hitTile.HitObject(Player.tileTargetX, Player.tileTargetY, 1);
								if (Main.tileNoFail[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type])
								{
									num241 = 100;
								}
								if (Main.tileHammer[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type])
								{
									flag19 = false;
									if (item.hammer > 0)
									{
										TileLoader.MineDamage(item.hammer, ref num241);
										num241 += item.hammer;
										if (!WorldGen.CanKillTile(Player.tileTargetX, Player.tileTargetY))
										{
											num241 = 0;
										}
										if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 26 && (item.hammer < 80 || !Main.hardMode))
										{
											num241 = 0;
											this.Hurt(PlayerDeathReason.ByOther(4), this.statLife / 2, -this.direction, false, false, false, -1);
										}
										AchievementsHelper.CurrentlyMining = true;
										if (this.hitTile.AddDamage(tileId, num241, true) >= 100)
										{
											this.hitTile.Clear(tileId);
											WorldGen.KillTile(Player.tileTargetX, Player.tileTargetY, false, false, false);
											if (Main.netMode == 1)
											{
												NetMessage.SendData(17, -1, -1, "", 0, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
											}
										}
										else
										{
											WorldGen.KillTile(Player.tileTargetX, Player.tileTargetY, true, false, false);
											if (Main.netMode == 1)
											{
												NetMessage.SendData(17, -1, -1, "", 0, (float)Player.tileTargetX, (float)Player.tileTargetY, 1f, 0, 0, 0);
											}
										}
										if (num241 != 0)
										{
											this.hitTile.Prune();
										}
										this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
										AchievementsHelper.CurrentlyMining = false;
									}
								}
								else if (Main.tileAxe[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type])
								{
									if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 80)
									{
										num241 += item.axe * 3;
									}
									else
									{
										TileLoader.MineDamage(item.axe, ref num241);
									}
									if (item.axe > 0)
									{
										AchievementsHelper.CurrentlyMining = true;
										if (!WorldGen.CanKillTile(Player.tileTargetX, Player.tileTargetY))
										{
											num241 = 0;
										}
										if (this.hitTile.AddDamage(tileId, num241, true) >= 100)
										{
											this.hitTile.Clear(tileId);
											WorldGen.KillTile(Player.tileTargetX, Player.tileTargetY, false, false, false);
											if (Main.netMode == 1)
											{
												NetMessage.SendData(17, -1, -1, "", 0, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
											}
										}
										else
										{
											WorldGen.KillTile(Player.tileTargetX, Player.tileTargetY, true, false, false);
											if (Main.netMode == 1)
											{
												NetMessage.SendData(17, -1, -1, "", 0, (float)Player.tileTargetX, (float)Player.tileTargetY, 1f, 0, 0, 0);
											}
										}
										if (num241 != 0)
										{
											this.hitTile.Prune();
										}
										this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
										AchievementsHelper.CurrentlyMining = false;
									}
								}
								else if (item.pick > 0)
								{
									this.PickTile(Player.tileTargetX, Player.tileTargetY, item.pick);
									this.itemTime = (int)((float)item.useTime * this.pickSpeed / PlayerHooks.TotalUseTimeMultiplier(this, item));
								}
								if (item.pick > 0)
								{
									this.itemTime = (int)((float)item.useTime * this.pickSpeed / PlayerHooks.TotalUseTimeMultiplier(this, item));
								}
								if (item.hammer > 0 && Main.tile[Player.tileTargetX, Player.tileTargetY].active() && ((Main.tileSolid[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type] && Main.tile[Player.tileTargetX, Player.tileTargetY].type != 10) || Main.tile[Player.tileTargetX, Player.tileTargetY].type == 314 || Main.tile[Player.tileTargetX, Player.tileTargetY].type == 351 || Main.tile[Player.tileTargetX, Player.tileTargetY].type == 424 || Main.tile[Player.tileTargetX, Player.tileTargetY].type == 442) && this.poundRelease)
								{
									flag19 = false;
									this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
									num241 += (int)((double)item.hammer * 1.25);
									num241 = 100;
									if (Main.tile[Player.tileTargetX, Player.tileTargetY - 1].active() && Main.tile[Player.tileTargetX, Player.tileTargetY - 1].type == 10)
									{
										num241 = 0;
									}
									if (Main.tile[Player.tileTargetX, Player.tileTargetY + 1].active() && Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type == 10)
									{
										num241 = 0;
									}
									if (this.hitTile.AddDamage(tileId, num241, true) >= 100)
									{
										this.hitTile.Clear(tileId);
										if (this.poundRelease)
										{
											int num242 = Player.tileTargetX;
											int num243 = Player.tileTargetY;
											if (TileLoader.Slope(num242, num243, Main.tile[num242, num243].type))
											{
											}
											else if (TileID.Sets.Platforms[(int)Main.tile[num242, num243].type])
											{
												if (Main.tile[num242, num243].halfBrick())
												{
													WorldGen.PoundTile(num242, num243);
													if (Main.netMode == 1)
													{
														NetMessage.SendData(17, -1, -1, "", 7, (float)Player.tileTargetX, (float)Player.tileTargetY, 1f, 0, 0, 0);
													}
												}
												else
												{
													int num244 = 1;
													int slope = 2;
													if (TileID.Sets.Platforms[(int)Main.tile[num242 + 1, num243 - 1].type] || TileID.Sets.Platforms[(int)Main.tile[num242 - 1, num243 + 1].type] || (WorldGen.SolidTile(num242 + 1, num243) && !WorldGen.SolidTile(num242 - 1, num243)))
													{
														num244 = 2;
														slope = 1;
													}
													if (Main.tile[num242, num243].slope() == 0)
													{
														WorldGen.SlopeTile(num242, num243, num244);
														int num245 = (int)Main.tile[num242, num243].slope();
														if (Main.netMode == 1)
														{
															NetMessage.SendData(17, -1, -1, "", 14, (float)Player.tileTargetX, (float)Player.tileTargetY, (float)num245, 0, 0, 0);
														}
													}
													else if ((int)Main.tile[num242, num243].slope() == num244)
													{
														WorldGen.SlopeTile(num242, num243, slope);
														int num246 = (int)Main.tile[num242, num243].slope();
														if (Main.netMode == 1)
														{
															NetMessage.SendData(17, -1, -1, "", 14, (float)Player.tileTargetX, (float)Player.tileTargetY, (float)num246, 0, 0, 0);
														}
													}
													else
													{
														WorldGen.SlopeTile(num242, num243, 0);
														int num247 = (int)Main.tile[num242, num243].slope();
														if (Main.netMode == 1)
														{
															NetMessage.SendData(17, -1, -1, "", 14, (float)Player.tileTargetX, (float)Player.tileTargetY, (float)num247, 0, 0, 0);
														}
														WorldGen.PoundTile(num242, num243);
														if (Main.netMode == 1)
														{
															NetMessage.SendData(17, -1, -1, "", 7, (float)Player.tileTargetX, (float)Player.tileTargetY, 1f, 0, 0, 0);
														}
													}
												}
											}
											else if (Main.tile[num242, num243].type == 314)
											{
												if (Minecart.FrameTrack(num242, num243, true, false) && Main.netMode == 1)
												{
													NetMessage.SendData(17, -1, -1, "", 15, (float)Player.tileTargetX, (float)Player.tileTargetY, 1f, 0, 0, 0);
												}
											}
											else if (Main.tile[num242, num243].type == 137)
											{
												int num248 = 0;
												switch (Main.tile[num242, num243].frameY / 18)
												{
													case 0:
													case 1:
													case 2:
														switch (Main.tile[num242, num243].frameX / 18)
														{
															case 0:
																num248 = 2;
																break;
															case 1:
																num248 = 3;
																break;
															case 2:
																num248 = 4;
																break;
															case 3:
																num248 = 5;
																break;
															case 4:
																num248 = 1;
																break;
															case 5:
																num248 = 0;
																break;
														}
														break;
													case 3:
													case 4:
														switch (Main.tile[num242, num243].frameX / 18)
														{
															case 0:
															case 1:
																num248 = 3;
																break;
															case 2:
																num248 = 4;
																break;
															case 3:
																num248 = 2;
																break;
															case 4:
																num248 = 0;
																break;
														}
														break;
												}
												Main.tile[num242, num243].frameX = (short)(num248 * 18);
												if (Main.netMode == 1)
												{
													NetMessage.SendTileSquare(-1, Player.tileTargetX, Player.tileTargetY, 1, TileChangeType.None);
												}
											}
											else if (Main.tile[num242, num243].type == 424)
											{
												if (Main.tile[num242, num243].frameX == 0)
												{
													Main.tile[num242, num243].frameX = 18;
												}
												else if (Main.tile[num242, num243].frameX == 18)
												{
													Main.tile[num242, num243].frameX = 36;
												}
												else
												{
													Main.tile[num242, num243].frameX = 0;
												}
												if (Main.netMode == 1)
												{
													NetMessage.SendTileSquare(-1, Player.tileTargetX, Player.tileTargetY, 1, TileChangeType.None);
												}
											}
											else if (Main.tile[num242, num243].type == 442)
											{
												Tile tile3 = Main.tile[num242, num243 - 1];
												Tile tile4 = Main.tile[num242, num243 + 1];
												Tile tile5 = Main.tile[num242 - 1, num243];
												Tile tile6 = Main.tile[num242 + 1, num243];
												Tile tile7 = Main.tile[num242 - 1, num243 + 1];
												Tile tile8 = Main.tile[num242 + 1, num243 + 1];
												Tile tile9 = Main.tile[num242 - 1, num243 - 1];
												Tile tile10 = Main.tile[num242 + 1, num243 - 1];
												int num249 = -1;
												int num250 = -1;
												int num251 = -1;
												int num252 = -1;
												int num253 = -1;
												int num254 = -1;
												int num255 = -1;
												int num256 = -1;
												if (tile3 != null && tile3.nactive() && !tile3.bottomSlope())
												{
													num250 = (int)tile3.type;
												}
												if (tile4 != null && tile4.nactive() && !tile4.halfBrick() && !tile4.topSlope())
												{
													num249 = (int)tile4.type;
												}
												if (tile5 != null && tile5.nactive() && (tile5.slope() == 0 || tile5.slope() % 2 != 1))
												{
													num251 = (int)tile5.type;
												}
												if (tile6 != null && tile6.nactive() && (tile6.slope() == 0 || tile6.slope() % 2 != 0))
												{
													num252 = (int)tile6.type;
												}
												if (tile7 != null && tile7.nactive())
												{
													num253 = (int)tile7.type;
												}
												if (tile8 != null && tile8.nactive())
												{
													num254 = (int)tile8.type;
												}
												if (tile9 != null && tile9.nactive())
												{
													num255 = (int)tile9.type;
												}
												if (tile10 != null && tile10.nactive())
												{
													num256 = (int)tile10.type;
												}
												bool flag20 = false;
												bool flag21 = false;
												bool flag22 = false;
												bool flag23 = false;
												if (num249 >= 0 && Main.tileSolid[num249] && (!Main.tileNoAttach[num249] || TileID.Sets.Platforms[num249]) && (tile4.bottomSlope() || tile4.slope() == 0) && !tile4.halfBrick())
												{
													flag23 = true;
												}
												if (num250 >= 0 && Main.tileSolid[num250] && (!Main.tileNoAttach[num250] || (TileID.Sets.Platforms[num250] && tile3.halfBrick())) && (tile3.topSlope() || tile3.slope() == 0 || tile3.halfBrick()))
												{
													flag20 = true;
												}
												if ((num251 >= 0 && Main.tileSolid[num251] && !Main.tileNoAttach[num251] && (tile5.leftSlope() || tile5.slope() == 0) && !tile5.halfBrick()) || num251 == 124 || (num251 == 5 && num255 == 5 && num253 == 5))
												{
													flag21 = true;
												}
												if ((num252 >= 0 && Main.tileSolid[num252] && !Main.tileNoAttach[num252] && (tile6.rightSlope() || tile6.slope() == 0) && !tile6.halfBrick()) || num252 == 124 || (num252 == 5 && num256 == 5 && num254 == 5))
												{
													flag22 = true;
												}
												int num257 = (int)(Main.tile[num242, num243].frameX / 22);
												short num258 = -2;
												switch (num257)
												{
													case 0:
														if (flag21)
														{
															num258 = 2;
														}
														else if (flag20)
														{
															num258 = 1;
														}
														else if (flag22)
														{
															num258 = 3;
														}
														else
														{
															num258 = -1;
														}
														break;
													case 1:
														if (flag22)
														{
															num258 = 3;
														}
														else if (flag23)
														{
															num258 = 0;
														}
														else if (flag21)
														{
															num258 = 2;
														}
														else
														{
															num258 = -1;
														}
														break;
													case 2:
														if (flag20)
														{
															num258 = 1;
														}
														else if (flag22)
														{
															num258 = 3;
														}
														else if (flag23)
														{
															num258 = 0;
														}
														else
														{
															num258 = -1;
														}
														break;
													case 3:
														if (flag23)
														{
															num258 = 0;
														}
														else if (flag21)
														{
															num258 = 2;
														}
														else if (flag20)
														{
															num258 = 1;
														}
														else
														{
															num258 = -1;
														}
														break;
												}
												if (num258 != -1)
												{
													if (num258 == -2)
													{
														num258 = 0;
													}
													Main.tile[num242, num243].frameX = (short)(22 * num258);
													if (Main.netMode == 1)
													{
														NetMessage.SendTileSquare(-1, Player.tileTargetX, Player.tileTargetY, 1, TileChangeType.None);
													}
												}
											}
											else if ((Main.tile[num242, num243].halfBrick() || Main.tile[num242, num243].slope() != 0) && !Main.tileSolidTop[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type])
											{
												int num259 = 1;
												int num260 = 1;
												int num261 = 2;
												if ((WorldGen.SolidTile(num242 + 1, num243) || Main.tile[num242 + 1, num243].slope() == 1 || Main.tile[num242 + 1, num243].slope() == 3) && !WorldGen.SolidTile(num242 - 1, num243))
												{
													num260 = 2;
													num261 = 1;
												}
												if (WorldGen.SolidTile(num242, num243 - 1) && !WorldGen.SolidTile(num242, num243 + 1))
												{
													num259 = -1;
												}
												if (num259 == 1)
												{
													if (Main.tile[num242, num243].slope() == 0)
													{
														WorldGen.SlopeTile(num242, num243, num260);
													}
													else if ((int)Main.tile[num242, num243].slope() == num260)
													{
														WorldGen.SlopeTile(num242, num243, num261);
													}
													else if ((int)Main.tile[num242, num243].slope() == num261)
													{
														WorldGen.SlopeTile(num242, num243, num260 + 2);
													}
													else if ((int)Main.tile[num242, num243].slope() == num260 + 2)
													{
														WorldGen.SlopeTile(num242, num243, num261 + 2);
													}
													else
													{
														WorldGen.SlopeTile(num242, num243, 0);
													}
												}
												else if (Main.tile[num242, num243].slope() == 0)
												{
													WorldGen.SlopeTile(num242, num243, num260 + 2);
												}
												else if ((int)Main.tile[num242, num243].slope() == num260 + 2)
												{
													WorldGen.SlopeTile(num242, num243, num261 + 2);
												}
												else if ((int)Main.tile[num242, num243].slope() == num261 + 2)
												{
													WorldGen.SlopeTile(num242, num243, num260);
												}
												else if ((int)Main.tile[num242, num243].slope() == num260)
												{
													WorldGen.SlopeTile(num242, num243, num261);
												}
												else
												{
													WorldGen.SlopeTile(num242, num243, 0);
												}
												int num262 = (int)Main.tile[num242, num243].slope();
												if (Main.netMode == 1)
												{
													NetMessage.SendData(17, -1, -1, "", 14, (float)Player.tileTargetX, (float)Player.tileTargetY, (float)num262, 0, 0, 0);
												}
											}
											else
											{
												WorldGen.PoundTile(num242, num243);
												if (Main.netMode == 1)
												{
													NetMessage.SendData(17, -1, -1, "", 7, (float)Player.tileTargetX, (float)Player.tileTargetY, 1f, 0, 0, 0);
												}
											}
											this.poundRelease = false;
										}
									}
									else
									{
										WorldGen.KillTile(Player.tileTargetX, Player.tileTargetY, true, true, false);
										Main.PlaySound(0, Player.tileTargetX * 16, Player.tileTargetY * 16, 1, 1f, 0f);
									}
								}
								else
								{
									this.poundRelease = false;
								}
							}
						}
						if (this.releaseUseItem)
						{
							this.poundRelease = true;
						}
						int num263 = Player.tileTargetX;
						int num264 = Player.tileTargetY;
						bool flag24 = true;
						if (Main.tile[num263, num264].wall > 0)
						{
							if (!Main.wallHouse[(int)Main.tile[num263, num264].wall])
							{
								for (int num265 = num263 - 1; num265 < num263 + 2; num265++)
								{
									for (int num266 = num264 - 1; num266 < num264 + 2; num266++)
									{
										if (Main.tile[num265, num266].wall != Main.tile[num263, num264].wall)
										{
											flag24 = false;
											break;
										}
									}
								}
							}
							else
							{
								flag24 = false;
							}
						}
						if (flag24 && !Main.tile[num263, num264].active())
						{
							int num267 = -1;
							if ((double)(((float)Main.mouseX + Main.screenPosition.X) / 16f) < Math.Round((double)(((float)Main.mouseX + Main.screenPosition.X) / 16f)))
							{
								num267 = 0;
							}
							int num268 = -1;
							if ((double)(((float)Main.mouseY + Main.screenPosition.Y) / 16f) < Math.Round((double)(((float)Main.mouseY + Main.screenPosition.Y) / 16f)))
							{
								num268 = 0;
							}
							for (int num269 = Player.tileTargetX + num267; num269 <= Player.tileTargetX + num267 + 1; num269++)
							{
								for (int num270 = Player.tileTargetY + num268; num270 <= Player.tileTargetY + num268 + 1; num270++)
								{
									if (flag24)
									{
										num263 = num269;
										num264 = num270;
										if (Main.tile[num263, num264].wall > 0)
										{
											if (!Main.wallHouse[(int)Main.tile[num263, num264].wall])
											{
												for (int num271 = num263 - 1; num271 < num263 + 2; num271++)
												{
													for (int num272 = num264 - 1; num272 < num264 + 2; num272++)
													{
														if (Main.tile[num271, num272].wall != Main.tile[num263, num264].wall)
														{
															flag24 = false;
															break;
														}
													}
												}
											}
											else
											{
												flag24 = false;
											}
										}
									}
								}
							}
						}
						if (flag19 && Main.tile[num263, num264].wall > 0 && (!Main.tile[num263, num264].active() || num263 != Player.tileTargetX || num264 != Player.tileTargetY || (!Main.tileHammer[(int)Main.tile[num263, num264].type] && !this.poundRelease)) && this.toolTime == 0 && this.itemAnimation > 0 && this.controlUseItem && item.hammer > 0)
						{
							bool flag25 = true;
							if (!Main.wallHouse[(int)Main.tile[num263, num264].wall])
							{
								flag25 = false;
								for (int num273 = num263 - 1; num273 < num263 + 2; num273++)
								{
									for (int num274 = num264 - 1; num274 < num264 + 2; num274++)
									{
										if (Main.tile[num273, num274].wall == 0 || Main.wallHouse[(int)Main.tile[num273, num274].wall])
										{
											flag25 = true;
											break;
										}
									}
								}
							}
							if (flag25)
							{
								int tileId = this.hitTile.HitObject(num263, num264, 2);
								num241 += (int)((float)item.hammer * 1.5f);
								if (this.hitTile.AddDamage(tileId, num241, true) >= 100)
								{
									this.hitTile.Clear(tileId);
									WorldGen.KillWall(num263, num264, false);
									if (Main.netMode == 1)
									{
										NetMessage.SendData(17, -1, -1, "", 2, (float)num263, (float)num264, 0f, 0, 0, 0);
									}
								}
								else
								{
									WorldGen.KillWall(num263, num264, true);
									if (Main.netMode == 1)
									{
										NetMessage.SendData(17, -1, -1, "", 2, (float)num263, (float)num264, 1f, 0, 0, 0);
									}
								}
								if (num241 != 0)
								{
									this.hitTile.Prune();
								}
								this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item)) / 2;
							}
						}
					}
				}
				if (Main.myPlayer == this.whoAmI && item.type == 1326 && this.itemAnimation > 0 && this.itemTime == 0)
				{
					this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
					Vector2 vector24;
					vector24.X = (float)Main.mouseX + Main.screenPosition.X;
					if (this.gravDir == 1f)
					{
						vector24.Y = (float)Main.mouseY + Main.screenPosition.Y - (float)this.height;
					}
					else
					{
						vector24.Y = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY;
					}
					vector24.X -= (float)(this.width / 2);
					if (vector24.X > 50f && vector24.X < (float)(Main.maxTilesX * 16 - 50) && vector24.Y > 50f && vector24.Y < (float)(Main.maxTilesY * 16 - 50))
					{
						int num275 = (int)(vector24.X / 16f);
						int num276 = (int)(vector24.Y / 16f);
						if ((Main.tile[num275, num276].wall != 87 || (double)num276 <= Main.worldSurface || NPC.downedPlantBoss) && !Collision.SolidCollision(vector24, this.width, this.height))
						{
							this.Teleport(vector24, 1, 0);
							NetMessage.SendData(65, -1, -1, "", 0, (float)this.whoAmI, vector24.X, vector24.Y, 1, 0, 0);
							if (this.chaosState)
							{
								this.statLife -= this.statLifeMax2 / 7;
								if (Lang.lang <= 1)
								{
									PlayerDeathReason damageSource = PlayerDeathReason.ByOther(13);
									if (Main.rand.Next(2) == 0)
									{
										damageSource = PlayerDeathReason.ByOther(this.Male ? 14 : 15);
									}
									if (this.statLife <= 0)
									{
										this.KillMe(damageSource, 1.0, 0, false);
									}
								}
								else if (this.statLife <= 0)
								{
									this.KillMe(PlayerDeathReason.LegacyEmpty(), 1.0, 0, false);
								}
								this.lifeRegenCount = 0;
								this.lifeRegenTime = 0;
							}
							this.AddBuff(88, 360, true);
						}
					}
				}
				if (item.type == 29 && this.itemAnimation > 0 && this.statLifeMax < 400 && this.itemTime == 0)
				{
					this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
					this.statLifeMax += 20;
					this.statLifeMax2 += 20;
					this.statLife += 20;
					if (Main.myPlayer == this.whoAmI)
					{
						this.HealEffect(20, true);
					}
					AchievementsHelper.HandleSpecialEvent(this, 0);
				}
				if (item.type == 1291 && this.itemAnimation > 0 && this.statLifeMax >= 400 && this.statLifeMax < 500 && this.itemTime == 0)
				{
					this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
					this.statLifeMax += 5;
					this.statLifeMax2 += 5;
					this.statLife += 5;
					if (Main.myPlayer == this.whoAmI)
					{
						this.HealEffect(5, true);
					}
					AchievementsHelper.HandleSpecialEvent(this, 2);
				}
				if (item.type == 109 && this.itemAnimation > 0 && this.statManaMax < 200 && this.itemTime == 0)
				{
					this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
					this.statManaMax += 20;
					this.statManaMax2 += 20;
					this.statMana += 20;
					if (Main.myPlayer == this.whoAmI)
					{
						this.ManaEffect(20);
					}
					AchievementsHelper.HandleSpecialEvent(this, 1);
				}
				if (item.type == 3335 && this.itemAnimation > 0 && !this.extraAccessory && Main.expertMode && this.itemTime == 0)
				{
					this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
					this.extraAccessory = true;
					NetMessage.SendData(4, -1, -1, Main.player[this.whoAmI].name, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
				}
				this.PlaceThing();
			}
			if (item.type == 3542)
			{
				Vector2 vector25 = Main.OffsetsPlayerOnhand[this.bodyFrame.Y / 56] * 2f;
				if (this.direction != 1)
				{
					vector25.X = (float)this.bodyFrame.Width - vector25.X;
				}
				if (this.gravDir != 1f)
				{
					vector25.Y = (float)this.bodyFrame.Height - vector25.Y;
				}
				vector25 -= new Vector2((float)(this.bodyFrame.Width - this.width), (float)(this.bodyFrame.Height - 42)) / 2f;
				Vector2 position17 = this.RotatedRelativePoint(this.position + vector25, true) - this.velocity;
				for (int num277 = 0; num277 < 4; num277++)
				{
					Dust dust = Main.dust[Dust.NewDust(base.Center, 0, 0, 242, (float)(this.direction * 2), 0f, 150, default(Color), 1.3f)];
					dust.position = position17;
					dust.velocity *= 0f;
					dust.noGravity = true;
					dust.fadeIn = 1f;
					dust.velocity += this.velocity;
					if (Main.rand.Next(2) == 0)
					{
						dust.position += Utils.RandomVector2(Main.rand, -4f, 4f);
						dust.scale += Main.rand.NextFloat();
						if (Main.rand.Next(2) == 0)
						{
							dust.customData = this;
						}
					}
				}
			}
			if (((item.damage >= 0 && item.type > 0 && !item.noMelee) || item.type == 1450 || item.type == 1991 || item.type == 3183 || item.type == 3542 || item.type == 3779) && this.itemAnimation > 0)
			{
				bool flag26 = false;
				Rectangle r2 = new Rectangle((int)this.itemLocation.X, (int)this.itemLocation.Y, 32, 32);
				if (!Main.dedServ)
				{
					r2 = new Rectangle((int)this.itemLocation.X, (int)this.itemLocation.Y, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height);
				}
				r2.Width = (int)((float)r2.Width * item.scale);
				r2.Height = (int)((float)r2.Height * item.scale);
				if (this.direction == -1)
				{
					r2.X -= r2.Width;
				}
				if (this.gravDir == 1f)
				{
					r2.Y -= r2.Height;
				}
				if (item.useStyle == 1)
				{
					if ((double)this.itemAnimation < (double)this.itemAnimationMax * 0.333)
					{
						if (this.direction == -1)
						{
							r2.X -= (int)((double)r2.Width * 1.4 - (double)r2.Width);
						}
						r2.Width = (int)((double)r2.Width * 1.4);
						r2.Y += (int)((double)r2.Height * 0.5 * (double)this.gravDir);
						r2.Height = (int)((double)r2.Height * 1.1);
					}
					else if ((double)this.itemAnimation >= (double)this.itemAnimationMax * 0.666)
					{
						if (this.direction == 1)
						{
							r2.X -= (int)((double)r2.Width * 1.2);
						}
						r2.Width *= 2;
						r2.Y -= (int)(((double)r2.Height * 1.4 - (double)r2.Height) * (double)this.gravDir);
						r2.Height = (int)((double)r2.Height * 1.4);
					}
				}
				else if (item.useStyle == 3)
				{
					//patch file: flag24
					if ((double)this.itemAnimation > (double)this.itemAnimationMax * 0.666)
					{
						flag26 = true;
					}
					else
					{
						if (this.direction == -1)
						{
							r2.X -= (int)((double)r2.Width * 1.4 - (double)r2.Width);
						}
						r2.Width = (int)((double)r2.Width * 1.4);
						r2.Y += (int)((double)r2.Height * 0.6);
						r2.Height = (int)((double)r2.Height * 0.6);
					}
				}
				ItemLoader.UseItemHitbox(item, this, ref r2, ref flag26);
				float arg_CC3F_0 = this.gravDir;
				if (item.type == 1450 && Main.rand.Next(3) == 0)
				{
					int num278 = -1;
					float x5 = (float)(r2.X + Main.rand.Next(r2.Width));
					float y5 = (float)(r2.Y + Main.rand.Next(r2.Height));
					if (Main.rand.Next(500) == 0)
					{
						num278 = Gore.NewGore(new Vector2(x5, y5), default(Vector2), 415, (float)Main.rand.Next(51, 101) * 0.01f);
					}
					else if (Main.rand.Next(250) == 0)
					{
						num278 = Gore.NewGore(new Vector2(x5, y5), default(Vector2), 414, (float)Main.rand.Next(51, 101) * 0.01f);
					}
					else if (Main.rand.Next(80) == 0)
					{
						num278 = Gore.NewGore(new Vector2(x5, y5), default(Vector2), 413, (float)Main.rand.Next(51, 101) * 0.01f);
					}
					else if (Main.rand.Next(10) == 0)
					{
						num278 = Gore.NewGore(new Vector2(x5, y5), default(Vector2), 412, (float)Main.rand.Next(51, 101) * 0.01f);
					}
					else if (Main.rand.Next(3) == 0)
					{
						num278 = Gore.NewGore(new Vector2(x5, y5), default(Vector2), 411, (float)Main.rand.Next(51, 101) * 0.01f);
					}
					if (num278 >= 0)
					{
						Gore expr_CE51_cp_0 = Main.gore[num278];
						expr_CE51_cp_0.velocity.X = expr_CE51_cp_0.velocity.X + (float)(this.direction * 2);
						Gore expr_CE75_cp_0 = Main.gore[num278];
						expr_CE75_cp_0.velocity.Y = expr_CE75_cp_0.velocity.Y * 0.3f;
					}
				}
				if (item.type == 3542)
				{
					flag26 = true;
				}
				if (item.type == 3779)
				{
					flag26 = true;
					Vector2 vector26 = this.itemLocation + new Vector2((float)(this.direction * 30), -8f);
					int arg_CEDF_0 = this.itemAnimation;
					int arg_CEDE_0 = this.itemAnimationMax - 2;
					Vector2 value17 = vector26 - this.position;
					for (float num279 = 0f; num279 < 1f; num279 += 0.2f)
					{
						Vector2 position18 = Vector2.Lerp(this.oldPosition + value17 + new Vector2(0f, this.gfxOffY), vector26, num279);
						Dust dust2 = Main.dust[Dust.NewDust(vector26 - Vector2.One * 8f, 16, 16, 27, 0f, -2f, 0, default(Color), 1f)];
						dust2.noGravity = true;
						dust2.position = position18;
						dust2.velocity = new Vector2(0f, -this.gravDir * 2f);
						dust2.scale = 1.2f;
						dust2.alpha = 200;
					}
				}
				if (!flag26)
				{
					if (item.type == 989 && Main.rand.Next(5) == 0)
					{
						int num280 = Main.rand.Next(3);
						if (num280 == 0)
						{
							num280 = 15;
						}
						else if (num280 == 1)
						{
							num280 = 57;
						}
						else
						{
							num280 = 58;
						}
						int num281 = Dust.NewDust(new Vector2((float)r2.X, (float)r2.Y), r2.Width, r2.Height, num280, (float)(this.direction * 2), 0f, 150, default(Color), 1.3f);
						Main.dust[num281].velocity *= 0.2f;
					}
					if (item.type == 2880 && Main.rand.Next(2) == 0)
					{
						int type7 = Utils.SelectRandom<int>(Main.rand, new int[]
							{
								226,
								229
							});
						int num282 = Dust.NewDust(new Vector2((float)r2.X, (float)r2.Y), r2.Width, r2.Height, type7, (float)(this.direction * 2), 0f, 150, default(Color), 1f);
						Main.dust[num282].velocity *= 0.2f;
						Main.dust[num282].noGravity = true;
					}
					if ((item.type == 44 || item.type == 45 || item.type == 46 || item.type == 103 || item.type == 104) && Main.rand.Next(15) == 0)
					{
						Dust.NewDust(new Vector2((float)r2.X, (float)r2.Y), r2.Width, r2.Height, 14, (float)(this.direction * 2), 0f, 150, default(Color), 1.3f);
					}
					if (item.type == 273 || item.type == 675)
					{
						if (Main.rand.Next(5) == 0)
						{
							Dust.NewDust(new Vector2((float)r2.X, (float)r2.Y), r2.Width, r2.Height, 14, (float)(this.direction * 2), 0f, 150, default(Color), 1.4f);
						}
						int num283 = Dust.NewDust(new Vector2((float)r2.X, (float)r2.Y), r2.Width, r2.Height, 27, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 1.2f);
						Main.dust[num283].noGravity = true;
						Dust expr_D359_cp_0 = Main.dust[num283];
						expr_D359_cp_0.velocity.X = expr_D359_cp_0.velocity.X / 2f;
						Dust expr_D379_cp_0 = Main.dust[num283];
						expr_D379_cp_0.velocity.Y = expr_D379_cp_0.velocity.Y / 2f;
					}
					if (item.type == 723 && Main.rand.Next(2) == 0)
					{
						int num284 = Dust.NewDust(new Vector2((float)r2.X, (float)r2.Y), r2.Width, r2.Height, 64, 0f, 0f, 150, default(Color), 1.2f);
						Main.dust[num284].noGravity = true;
					}
					if (item.type == 65)
					{
						if (Main.rand.Next(5) == 0)
						{
							Dust.NewDust(new Vector2((float)r2.X, (float)r2.Y), r2.Width, r2.Height, 58, 0f, 0f, 150, default(Color), 1.2f);
						}
						if (Main.rand.Next(10) == 0)
						{
							Gore.NewGore(new Vector2((float)r2.X, (float)r2.Y), default(Vector2), Main.rand.Next(16, 18), 1f);
						}
					}
					if (item.type == 3065)
					{
						int num285 = Dust.NewDust(new Vector2((float)r2.X, (float)r2.Y), r2.Width, r2.Height, 58, 0f, 0f, 150, default(Color), 1.2f);
						Main.dust[num285].velocity *= 0.5f;
						if (Main.rand.Next(8) == 0)
						{
							int num286 = Gore.NewGore(new Vector2((float)r2.Center.X, (float)r2.Center.Y), default(Vector2), 16, 1f);
							Main.gore[num286].velocity *= 0.5f;
							Main.gore[num286].velocity += new Vector2((float)this.direction, 0f);
						}
					}
					if (item.type == 190)
					{
						int num287 = Dust.NewDust(new Vector2((float)r2.X, (float)r2.Y), r2.Width, r2.Height, 40, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 0, default(Color), 1.2f);
						Main.dust[num287].noGravity = true;
					}
					else if (item.type == 213)
					{
						int num288 = Dust.NewDust(new Vector2((float)r2.X, (float)r2.Y), r2.Width, r2.Height, 3, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 0, default(Color), 1.2f);
						Main.dust[num288].noGravity = true;
					}
					if (item.type == 121)
					{
						for (int num289 = 0; num289 < 2; num289++)
						{
							int num290 = Dust.NewDust(new Vector2((float)r2.X, (float)r2.Y), r2.Width, r2.Height, 6, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 2.5f);
							Main.dust[num290].noGravity = true;
							Dust expr_D7C7_cp_0 = Main.dust[num290];
							expr_D7C7_cp_0.velocity.X = expr_D7C7_cp_0.velocity.X * 2f;
							Dust expr_D7E7_cp_0 = Main.dust[num290];
							expr_D7E7_cp_0.velocity.Y = expr_D7E7_cp_0.velocity.Y * 2f;
						}
					}
					if (item.type == 122 || item.type == 217)
					{
						int num291 = Dust.NewDust(new Vector2((float)r2.X, (float)r2.Y), r2.Width, r2.Height, 6, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 1.9f);
						Main.dust[num291].noGravity = true;
					}
					if (item.type == 155)
					{
						int num292 = Dust.NewDust(new Vector2((float)r2.X, (float)r2.Y), r2.Width, r2.Height, 172, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 0.9f);
						Main.dust[num292].noGravity = true;
						Main.dust[num292].velocity *= 0.1f;
					}
					if (item.type == 676 && Main.rand.Next(3) == 0)
					{
						int num293 = Dust.NewDust(new Vector2((float)r2.X, (float)r2.Y), r2.Width, r2.Height, 67, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 90, default(Color), 1.5f);
						Main.dust[num293].noGravity = true;
						Main.dust[num293].velocity *= 0.2f;
					}
					if (item.type == 3063)
					{
						int num294 = Dust.NewDust(r2.TopLeft(), r2.Width, r2.Height, 66, 0f, 0f, 150, Color.Transparent, 0.85f);
						Main.dust[num294].color = Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f);
						Main.dust[num294].noGravity = true;
						Main.dust[num294].velocity /= 2f;
					}
					if (item.type == 3823)
					{
						Dust dust3 = Dust.NewDustDirect(r2.TopLeft(), r2.Width, r2.Height, 6, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, Color.Transparent, 0.7f);
						dust3.noGravity = true;
						dust3.velocity *= 2f;
						dust3.fadeIn = 0.9f;
					}
					if (item.type == 724 && Main.rand.Next(5) == 0)
					{
						int num295 = Dust.NewDust(new Vector2((float)r2.X, (float)r2.Y), r2.Width, r2.Height, 67, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 90, default(Color), 1.5f);
						Main.dust[num295].noGravity = true;
						Main.dust[num295].velocity *= 0.2f;
					}
					if (item.type >= 795 && item.type <= 802 && Main.rand.Next(3) == 0)
					{
						int num296 = Dust.NewDust(new Vector2((float)r2.X, (float)r2.Y), r2.Width, r2.Height, 115, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 140, default(Color), 1.5f);
						Main.dust[num296].noGravity = true;
						Main.dust[num296].velocity *= 0.25f;
					}
					if (item.type == 367 || item.type == 368 || item.type == 674)
					{
						if (Main.rand.Next(3) == 0)
						{
							int num297 = Dust.NewDust(new Vector2((float)r2.X, (float)r2.Y), r2.Width, r2.Height, 57, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 1.1f);
							Main.dust[num297].noGravity = true;
							Dust expr_DDE3_cp_0 = Main.dust[num297];
							expr_DDE3_cp_0.velocity.X = expr_DDE3_cp_0.velocity.X / 2f;
							Dust expr_DE03_cp_0 = Main.dust[num297];
							expr_DE03_cp_0.velocity.Y = expr_DE03_cp_0.velocity.Y / 2f;
							Dust expr_DE23_cp_0 = Main.dust[num297];
							expr_DE23_cp_0.velocity.X = expr_DE23_cp_0.velocity.X + (float)(this.direction * 2);
						}
						if (Main.rand.Next(4) == 0)
						{
							int num297 = Dust.NewDust(new Vector2((float)r2.X, (float)r2.Y), r2.Width, r2.Height, 43, 0f, 0f, 254, default(Color), 0.3f);
							Main.dust[num297].velocity *= 0f;
						}
					}
					if ((item.type >= 198 && item.type <= 203) || (item.type >= 3764 && item.type <= 3769))
					{
						float num298 = 0.5f;
						float num299 = 0.5f;
						float num300 = 0.5f;
						if (item.type == 198 || item.type == 3764)
						{
							num298 *= 0.1f;
							num299 *= 0.5f;
							num300 *= 1.2f;
						}
						else if (item.type == 199 || item.type == 3765)
						{
							num298 *= 1f;
							num299 *= 0.2f;
							num300 *= 0.1f;
						}
						else if (item.type == 200 || item.type == 3766)
						{
							num298 *= 0.1f;
							num299 *= 1f;
							num300 *= 0.2f;
						}
						else if (item.type == 201 || item.type == 3767)
						{
							num298 *= 0.8f;
							num299 *= 0.1f;
							num300 *= 1f;
						}
						else if (item.type == 202 || item.type == 3768)
						{
							num298 *= 0.8f;
							num299 *= 0.9f;
							num300 *= 1f;
						}
						else if (item.type == 203 || item.type == 3769)
						{
							num298 *= 0.9f;
							num299 *= 0.9f;
							num300 *= 0.1f;
						}
						Lighting.AddLight((int)((this.itemLocation.X + 6f + this.velocity.X) / 16f), (int)((this.itemLocation.Y - 14f) / 16f), num298, num299, num300);
					}
					if (this.frostBurn && item.melee && !item.noMelee && !item.noUseGraphic && Main.rand.Next(2) == 0)
					{
						int num301 = Dust.NewDust(new Vector2((float)r2.X, (float)r2.Y), r2.Width, r2.Height, 135, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 2.5f);
						Main.dust[num301].noGravity = true;
						Main.dust[num301].velocity *= 0.7f;
						Dust expr_E200_cp_0 = Main.dust[num301];
						expr_E200_cp_0.velocity.Y = expr_E200_cp_0.velocity.Y - 0.5f;
					}
					if (item.melee && !item.noMelee && !item.noUseGraphic && this.meleeEnchant > 0)
					{
						if (this.meleeEnchant == 1)
						{
							if (Main.rand.Next(3) == 0)
							{
								int num302 = Dust.NewDust(new Vector2((float)r2.X, (float)r2.Y), r2.Width, r2.Height, 171, 0f, 0f, 100, default(Color), 1f);
								Main.dust[num302].noGravity = true;
								Main.dust[num302].fadeIn = 1.5f;
								Main.dust[num302].velocity *= 0.25f;
							}
						}
						else if (this.meleeEnchant == 2)
						{
							if (Main.rand.Next(2) == 0)
							{
								int num303 = Dust.NewDust(new Vector2((float)r2.X, (float)r2.Y), r2.Width, r2.Height, 75, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 2.5f);
								Main.dust[num303].noGravity = true;
								Main.dust[num303].velocity *= 0.7f;
								Dust expr_E3CB_cp_0 = Main.dust[num303];
								expr_E3CB_cp_0.velocity.Y = expr_E3CB_cp_0.velocity.Y - 0.5f;
							}
						}
						else if (this.meleeEnchant == 3)
						{
							if (Main.rand.Next(2) == 0)
							{
								int num304 = Dust.NewDust(new Vector2((float)r2.X, (float)r2.Y), r2.Width, r2.Height, 6, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 2.5f);
								Main.dust[num304].noGravity = true;
								Main.dust[num304].velocity *= 0.7f;
								Dust expr_E4B1_cp_0 = Main.dust[num304];
								expr_E4B1_cp_0.velocity.Y = expr_E4B1_cp_0.velocity.Y - 0.5f;
							}
						}
						else if (this.meleeEnchant == 4)
						{
							if (Main.rand.Next(2) == 0)
							{
								int num305 = Dust.NewDust(new Vector2((float)r2.X, (float)r2.Y), r2.Width, r2.Height, 57, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 1.1f);
								Main.dust[num305].noGravity = true;
								Dust expr_E57E_cp_0 = Main.dust[num305];
								expr_E57E_cp_0.velocity.X = expr_E57E_cp_0.velocity.X / 2f;
								Dust expr_E59E_cp_0 = Main.dust[num305];
								expr_E59E_cp_0.velocity.Y = expr_E59E_cp_0.velocity.Y / 2f;
							}
						}
						else if (this.meleeEnchant == 5)
						{
							if (Main.rand.Next(2) == 0)
							{
								int num306 = Dust.NewDust(new Vector2((float)r2.X, (float)r2.Y), r2.Width, r2.Height, 169, 0f, 0f, 100, default(Color), 1f);
								Dust expr_E637_cp_0 = Main.dust[num306];
								expr_E637_cp_0.velocity.X = expr_E637_cp_0.velocity.X + (float)this.direction;
								Dust expr_E659_cp_0 = Main.dust[num306];
								expr_E659_cp_0.velocity.Y = expr_E659_cp_0.velocity.Y + 0.2f;
								Main.dust[num306].noGravity = true;
							}
						}
						else if (this.meleeEnchant == 6)
						{
							if (Main.rand.Next(2) == 0)
							{
								int num307 = Dust.NewDust(new Vector2((float)r2.X, (float)r2.Y), r2.Width, r2.Height, 135, 0f, 0f, 100, default(Color), 1f);
								Dust expr_E702_cp_0 = Main.dust[num307];
								expr_E702_cp_0.velocity.X = expr_E702_cp_0.velocity.X + (float)this.direction;
								Dust expr_E724_cp_0 = Main.dust[num307];
								expr_E724_cp_0.velocity.Y = expr_E724_cp_0.velocity.Y + 0.2f;
								Main.dust[num307].noGravity = true;
							}
						}
						else if (this.meleeEnchant == 7)
						{
							if (Main.rand.Next(20) == 0)
							{
								int type8 = Main.rand.Next(139, 143);
								int num308 = Dust.NewDust(new Vector2((float)r2.X, (float)r2.Y), r2.Width, r2.Height, type8, this.velocity.X, this.velocity.Y, 0, default(Color), 1.2f);
								Dust expr_E7F0_cp_0 = Main.dust[num308];
								expr_E7F0_cp_0.velocity.X = expr_E7F0_cp_0.velocity.X * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
								Dust expr_E826_cp_0 = Main.dust[num308];
								expr_E826_cp_0.velocity.Y = expr_E826_cp_0.velocity.Y * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
								Dust expr_E85C_cp_0 = Main.dust[num308];
								expr_E85C_cp_0.velocity.X = expr_E85C_cp_0.velocity.X + (float)Main.rand.Next(-50, 51) * 0.05f;
								Dust expr_E88C_cp_0 = Main.dust[num308];
								expr_E88C_cp_0.velocity.Y = expr_E88C_cp_0.velocity.Y + (float)Main.rand.Next(-50, 51) * 0.05f;
								Main.dust[num308].scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							}
							if (Main.rand.Next(40) == 0)
							{
								int type9 = Main.rand.Next(276, 283);
								int num309 = Gore.NewGore(new Vector2((float)r2.X, (float)r2.Y), this.velocity, type9, 1f);
								Gore expr_E947_cp_0 = Main.gore[num309];
								expr_E947_cp_0.velocity.X = expr_E947_cp_0.velocity.X * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
								Gore expr_E97D_cp_0 = Main.gore[num309];
								expr_E97D_cp_0.velocity.Y = expr_E97D_cp_0.velocity.Y * (1f + (float)Main.rand.Next(-50, 51) * 0.01f);
								Main.gore[num309].scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
								Gore expr_E9E4_cp_0 = Main.gore[num309];
								expr_E9E4_cp_0.velocity.X = expr_E9E4_cp_0.velocity.X + (float)Main.rand.Next(-50, 51) * 0.05f;
								Gore expr_EA14_cp_0 = Main.gore[num309];
								expr_EA14_cp_0.velocity.Y = expr_EA14_cp_0.velocity.Y + (float)Main.rand.Next(-50, 51) * 0.05f;
							}
						}
						else if (this.meleeEnchant == 8 && Main.rand.Next(4) == 0)
						{
							int num310 = Dust.NewDust(new Vector2((float)r2.X, (float)r2.Y), r2.Width, r2.Height, 46, 0f, 0f, 100, default(Color), 1f);
							Main.dust[num310].noGravity = true;
							Main.dust[num310].fadeIn = 1.5f;
							Main.dust[num310].velocity *= 0.25f;
						}
					}
					if (this.magmaStone && item.melee && !item.noMelee && !item.noUseGraphic && Main.rand.Next(3) != 0)
					{
						int num311 = Dust.NewDust(new Vector2((float)r2.X, (float)r2.Y), r2.Width, r2.Height, 6, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, default(Color), 2.5f);
						Main.dust[num311].noGravity = true;
						Dust expr_EBBF_cp_0 = Main.dust[num311];
						expr_EBBF_cp_0.velocity.X = expr_EBBF_cp_0.velocity.X * 2f;
						Dust expr_EBDF_cp_0 = Main.dust[num311];
						expr_EBDF_cp_0.velocity.Y = expr_EBDF_cp_0.velocity.Y * 2f;
					}
					ItemLoader.MeleeEffects(item, this, r2);
					PlayerHooks.MeleeEffects(this, item, r2);
					if (Main.myPlayer == i && (item.type == 1991 || item.type == 3183))
					{
						for (int num312 = 0; num312 < 200; num312++)
						{
							if (Main.npc[num312].active && Main.npc[num312].catchItem > 0)
							{
								Rectangle value18 = new Rectangle((int)Main.npc[num312].position.X, (int)Main.npc[num312].position.Y, Main.npc[num312].width, Main.npc[num312].height);
								if (r2.Intersects(value18) && (item.type == 3183 || Main.npc[num312].noTileCollide || this.CanHit(Main.npc[num312])))
								{
									NPC.CatchNPC(num312, i);
								}
							}
						}
					}
					if (Main.myPlayer == i && (item.damage > 0 || item.type == 3183))
					{
						int num313 = item.damage;
						if (item.melee)
						{
							num313 = (int)((float)item.damage * this.meleeDamage);
						}
						if (item.ranged)
						{
							num313 = (int)((float)item.damage * this.rangedDamage);
						}
						if (item.magic)
						{
							num313 = (int)((float)item.damage * this.magicDamage);
						}
						if (item.summon)
						{
							num313 = (int)((float)item.damage * this.minionDamage);
						}
						if (item.thrown)
						{
							num313 = (int)((float)item.damage * this.thrownDamage);
						}
						ItemLoader.GetWeaponDamage(item, this, ref num313);
						PlayerHooks.GetWeaponDamage(this, item, ref num313);
						float num314 = item.knockBack;
						float num315 = 1f;
						if (this.kbGlove)
						{
							num315 += 1f;
						}
						if (this.kbBuff)
						{
							num315 += 0.5f;
						}
						num314 *= num315;
						if (this.inventory[this.selectedItem].type == 3106)
						{
							num314 += num314 * (1f - this.stealth);
						}
						ItemLoader.GetWeaponKnockback(item, this, ref num314);
						PlayerHooks.GetWeaponKnockback(this, item, ref num314);
						List<ushort> list2 = null;
						int type5 = item.type;
						if (type5 == 213)
						{
							list2 = new List<ushort>(new ushort[]
								{
									3,
									24,
									52,
									61,
									62,
									71,
									73,
									74,
									82,
									83,
									84,
									110,
									113,
									115,
									184,
									205,
									201
								});
						}
						int num316 = r2.X / 16;
						int num317 = (r2.X + r2.Width) / 16 + 1;
						int num318 = r2.Y / 16;
						int num319 = (r2.Y + r2.Height) / 16 + 1;
						for (int num320 = num316; num320 < num317; num320++)
						{
							for (int num321 = num318; num321 < num319; num321++)
							{
								if (Main.tile[num320, num321] != null && Main.tileCut[(int)Main.tile[num320, num321].type] && (list2 == null || !list2.Contains(Main.tile[num320, num321].type)) && WorldGen.CanCutTile(num320, num321, TileCuttingContext.AttackMelee))
								{
									if (item.type == 1786)
									{
										int type10 = (int)Main.tile[num320, num321].type;
										WorldGen.KillTile(num320, num321, false, false, false);
										if (!Main.tile[num320, num321].active())
										{
											int num322 = 0;
											if (type10 == 3 || type10 == 24 || type10 == 61 || type10 == 110 || type10 == 201)
											{
												num322 = Main.rand.Next(1, 3);
											}
											if (type10 == 73 || type10 == 74 || type10 == 113)
											{
												num322 = Main.rand.Next(2, 5);
											}
											if (num322 > 0)
											{
												int number = Item.NewItem(num320 * 16, num321 * 16, 16, 16, 1727, num322, false, 0, false, false);
												if (Main.netMode == 1)
												{
													NetMessage.SendData(21, -1, -1, "", number, 1f, 0f, 0f, 0, 0, 0);
												}
											}
										}
										if (Main.netMode == 1)
										{
											NetMessage.SendData(17, -1, -1, "", 0, (float)num320, (float)num321, 0f, 0, 0, 0);
										}
									}
									else
									{
										WorldGen.KillTile(num320, num321, false, false, false);
										if (Main.netMode == 1)
										{
											NetMessage.SendData(17, -1, -1, "", 0, (float)num320, (float)num321, 0f, 0, 0, 0);
										}
									}
								}
							}
						}
						if (item.type != 3183)
						{
							for (int num323 = 0; num323 < 200; num323++)
							{
								if (Main.npc[num323].active && Main.npc[num323].immune[i] == 0 && this.attackCD == 0)
								{
									if (!Main.npc[num323].dontTakeDamage)
									{
										bool? modCanHit = ItemLoader.CanHitNPC(item, this, Main.npc[num323]);
										if (modCanHit.HasValue && !modCanHit.Value)
										{
											continue;
										}
										bool? modCanBeHit = NPCLoader.CanBeHitByItem(Main.npc[num323], this, item);
										if (modCanBeHit.HasValue && !modCanBeHit.Value)
										{
											continue;
										}
										bool? modCanHit2 = PlayerHooks.CanHitNPC(this, item, Main.npc[num323]);
										if (modCanHit2.HasValue && !modCanHit2.Value)
										{
											continue;
										}
										bool canHitFlag = (modCanHit.HasValue && modCanHit.Value) || (modCanBeHit.HasValue && modCanBeHit.Value) || (modCanHit2.HasValue && modCanHit2.Value);
										if (!Main.npc[num323].friendly || (Main.npc[num323].type == 22 && this.killGuide) || (Main.npc[num323].type == 54 && this.killClothier) || canHitFlag)
										{
											Rectangle value19 = new Rectangle((int)Main.npc[num323].position.X, (int)Main.npc[num323].position.Y, Main.npc[num323].width, Main.npc[num323].height);
											if (r2.Intersects(value19) && (Main.npc[num323].noTileCollide || this.CanHit(Main.npc[num323])))
											{
												bool flag27 = false;
												if (item.melee && Main.rand.Next(1, 101) <= this.meleeCrit)
												{
													flag27 = true;
												}
												if (item.ranged && Main.rand.Next(1, 101) <= this.rangedCrit)
												{
													flag27 = true;
												}
												if (item.magic && Main.rand.Next(1, 101) <= this.magicCrit)
												{
													flag27 = true;
												}
												if (item.thrown && Main.rand.Next(1, 101) <= this.thrownCrit)
												{
													flag27 = true;
												}
												int num324 = Item.NPCtoBanner(Main.npc[num323].BannerID());
												if (num324 > 0 && this.NPCBannerBuff[num324])
												{
													if (Main.expertMode)
													{
														num313 = (int)((float)num313 * ItemID.Sets.BannerStrength[Item.BannerToItem(num324)].ExpertDamageDealt);
													}
													else
													{
														num313 = (int)((float)num313 * ItemID.Sets.BannerStrength[Item.BannerToItem(num324)].NormalDamageDealt);
													}
												}
												if (this.parryDamageBuff && item.melee)
												{
													num313 *= 5;
													this.parryDamageBuff = false;
													this.ClearBuff(198);
												}
												int num325 = Main.DamageVar((float)num313);
												ItemLoader.ModifyHitNPC(item, this, Main.npc[num323], ref num325, ref num314, ref flag27);
												NPCLoader.ModifyHitByItem(Main.npc[num323], this, item, ref num325, ref num314, ref flag27);
												PlayerHooks.ModifyHitNPC(this, item, Main.npc[num323], ref num325, ref num314, ref flag27);
												this.StatusNPC(item.type, num323);
												this.OnHit(Main.npc[num323].Center.X, Main.npc[num323].Center.Y, Main.npc[num323]);
												if (this.armorPenetration > 0)
												{
													num325 += Main.npc[num323].checkArmorPenetration(this.armorPenetration);
												}
												//patch file: num314, flag27, num326
												int num326 = (int)Main.npc[num323].StrikeNPC(num325, num314, this.direction, flag27, false, false);
												if (this.inventory[this.selectedItem].type == 3211)
												{
													Vector2 value20 = new Vector2((float)(this.direction * 100 + Main.rand.Next(-25, 26)), (float)Main.rand.Next(-75, 76));
													value20.Normalize();
													value20 *= (float)Main.rand.Next(30, 41) * 0.1f;
													Vector2 value21 = new Vector2((float)(r2.X + Main.rand.Next(r2.Width)), (float)(r2.Y + Main.rand.Next(r2.Height)));
													value21 = (value21 + Main.npc[num323].Center * 2f) / 3f;
													Projectile.NewProjectile(value21.X, value21.Y, value20.X, value20.Y, 524, (int)((double)num313 * 0.7), num314 * 0.7f, this.whoAmI, 0f, 0f);
												}
												bool flag28 = !Main.npc[num323].immortal;
												if (this.beetleOffense && flag28)
												{
													this.beetleCounter += (float)num326;
													this.beetleCountdown = 0;
												}
												if (item.type == 1826 && (Main.npc[num323].value > 0f || (Main.npc[num323].damage > 0 && !Main.npc[num323].friendly)))
												{
													this.pumpkinSword(num323, (int)((double)num313 * 1.5), num314);
												}
												if (this.meleeEnchant == 7)
												{
													Projectile.NewProjectile(Main.npc[num323].Center.X, Main.npc[num323].Center.Y, Main.npc[num323].velocity.X, Main.npc[num323].velocity.Y, 289, 0, 0f, this.whoAmI, 0f, 0f);
												}
												if (this.inventory[this.selectedItem].type == 3106)
												{
													this.stealth = 1f;
													if (Main.netMode == 1)
													{
														NetMessage.SendData(84, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
													}
												}
												if (item.type == 1123 && flag28)
												{
													int num327 = Main.rand.Next(1, 4);
													if (this.strongBees && Main.rand.Next(3) == 0)
													{
														num327++;
													}
													for (int num328 = 0; num328 < num327; num328++)
													{
														float num329 = (float)(this.direction * 2) + (float)Main.rand.Next(-35, 36) * 0.02f;
														float num330 = (float)Main.rand.Next(-35, 36) * 0.02f;
														num329 *= 0.2f;
														num330 *= 0.2f;
														Projectile.NewProjectile((float)(r2.X + r2.Width / 2), (float)(r2.Y + r2.Height / 2), num329, num330, this.beeType(), this.beeDamage(num325 / 3), this.beeKB(0f), i, 0f, 0f);
													}
												}
												if (Main.npc[num323].value > 0f && this.coins && Main.rand.Next(5) == 0)
												{
													int type11 = 71;
													if (Main.rand.Next(10) == 0)
													{
														type11 = 72;
													}
													if (Main.rand.Next(100) == 0)
													{
														type11 = 73;
													}
													int num331 = Item.NewItem((int)Main.npc[num323].position.X, (int)Main.npc[num323].position.Y, Main.npc[num323].width, Main.npc[num323].height, type11, 1, false, 0, false, false);
													Main.item[num331].stack = Main.rand.Next(1, 11);
													Main.item[num331].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
													Main.item[num331].velocity.X = (float)Main.rand.Next(10, 31) * 0.2f * (float)this.direction;
													if (Main.netMode == 1)
													{
														NetMessage.SendData(21, -1, -1, "", num331, 0f, 0f, 0f, 0, 0, 0);
													}
												}
												ItemLoader.OnHitNPC(item, this, Main.npc[num323], num326, num314, flag27);
												NPCLoader.OnHitByItem(Main.npc[num323], this, item, num326, num314, flag27);
												PlayerHooks.OnHitNPC(this, item, Main.npc[num323], num326, num314, flag27);
												int num332 = Item.NPCtoBanner(Main.npc[num323].BannerID());
												if (num332 >= 0)
												{
													this.lastCreatureHit = num332;
												}
												if (Main.netMode != 0)
												{
													if (flag27)
													{
														NetMessage.SendData(28, -1, -1, "", num323, (float)num325, num314, (float)this.direction, 1, 0, 0);
													}
													else
													{
														NetMessage.SendData(28, -1, -1, "", num323, (float)num325, num314, (float)this.direction, 0, 0, 0);
													}
												}
												if (this.accDreamCatcher)
												{
													this.addDPS(num325);
												}
												Main.npc[num323].immune[i] = this.itemAnimation;
												this.attackCD = (int)((double)this.itemAnimationMax * 0.33);
											}
										}
									}
									else if (Main.npc[num323].type == 63 || Main.npc[num323].type == 64 || Main.npc[num323].type == 103 || Main.npc[num323].type == 242)
									{
										Rectangle value22 = new Rectangle((int)Main.npc[num323].position.X, (int)Main.npc[num323].position.Y, Main.npc[num323].width, Main.npc[num323].height);
										if (r2.Intersects(value22) && (Main.npc[num323].noTileCollide || this.CanHit(Main.npc[num323])))
										{
											this.Hurt(PlayerDeathReason.LegacyDefault(), (int)((double)Main.npc[num323].damage * 1.3), -this.direction, false, false, false, -1);
											Main.npc[num323].immune[i] = this.itemAnimation;
											this.attackCD = (int)((double)this.itemAnimationMax * 0.33);
										}
									}
								}
							}
							if (this.hostile)
							{
								for (int num333 = 0; num333 < 255; num333++)
								{
									bool flag29 = num333 != i && Main.player[num333].active && Main.player[num333].hostile && !Main.player[num333].immune && !Main.player[num333].dead;
									if (flag29 && (Main.player[i].team == 0 || Main.player[i].team != Main.player[num333].team))
									{
										Rectangle value23 = new Rectangle((int)Main.player[num333].position.X, (int)Main.player[num333].position.Y, Main.player[num333].width, Main.player[num333].height);
										if (ItemLoader.CanHitPvp(item, this, Main.player[num333]) && PlayerHooks.CanHitPvp(this, item, Main.player[num333]) && r2.Intersects(value23) && this.CanHit(Main.player[num333]))
										{
											bool flag30 = false;
											if (Main.rand.Next(1, 101) <= 10)
											{
												flag30 = true;
											}
											int num334 = Main.DamageVar((float)num313);
											ItemLoader.ModifyHitPvp(item, this, Main.player[num333], ref num334, ref flag30);
											PlayerHooks.ModifyHitPvp(this, item, Main.player[num333], ref num334, ref flag30);
											this.StatusPvP(item.type, num333);
											this.OnHit(Main.player[num333].Center.X, Main.player[num333].Center.Y, Main.player[num333]);
											PlayerDeathReason playerDeathReason = PlayerDeathReason.ByPlayer(this.whoAmI);
											int num335 = (int)Main.player[num333].Hurt(playerDeathReason, num334, this.direction, true, false, flag30, -1);
											if (this.inventory[this.selectedItem].type == 3211)
											{
												Vector2 value24 = new Vector2((float)(this.direction * 100 + Main.rand.Next(-25, 26)), (float)Main.rand.Next(-75, 76));
												value24.Normalize();
												value24 *= (float)Main.rand.Next(30, 41) * 0.1f;
												Vector2 value25 = new Vector2((float)(r2.X + Main.rand.Next(r2.Width)), (float)(r2.Y + Main.rand.Next(r2.Height)));
												value25 = (value25 + Main.player[num333].Center * 2f) / 3f;
												Projectile.NewProjectile(value25.X, value25.Y, value24.X, value24.Y, 524, (int)((double)num313 * 0.7), num314 * 0.7f, this.whoAmI, 0f, 0f);
											}
											if (this.beetleOffense)
											{
												this.beetleCounter += (float)num335;
												this.beetleCountdown = 0;
											}
											if (this.meleeEnchant == 7)
											{
												Projectile.NewProjectile(Main.player[num333].Center.X, Main.player[num333].Center.Y, Main.player[num333].velocity.X, Main.player[num333].velocity.Y, 289, 0, 0f, this.whoAmI, 0f, 0f);
											}
											if (item.type == 1123)
											{
												int num336 = Main.rand.Next(1, 4);
												if (this.strongBees && Main.rand.Next(3) == 0)
												{
													num336++;
												}
												for (int num337 = 0; num337 < num336; num337++)
												{
													float num338 = (float)(this.direction * 2) + (float)Main.rand.Next(-35, 36) * 0.02f;
													float num339 = (float)Main.rand.Next(-35, 36) * 0.02f;
													num338 *= 0.2f;
													num339 *= 0.2f;
													Projectile.NewProjectile((float)(r2.X + r2.Width / 2), (float)(r2.Y + r2.Height / 2), num338, num339, this.beeType(), this.beeDamage(num334 / 3), this.beeKB(0f), i, 0f, 0f);
												}
											}
											if (this.inventory[this.selectedItem].type == 3106)
											{
												this.stealth = 1f;
												if (Main.netMode == 1)
												{
													NetMessage.SendData(84, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
												}
											}
											if (item.type == 1826 && Main.npc[num333].value > 0f)
											{
												this.pumpkinSword(num333, (int)((double)num313 * 1.5), num314);
											}
											ItemLoader.OnHitPvp(item, this, Main.player[num333], num335, flag30);
											PlayerHooks.OnHitPvp(this, item, Main.player[num333], num335, flag30);
											if (Main.netMode != 0)
											{
												NetMessage.SendPlayerHurt(num333, playerDeathReason, num334, this.direction, flag30, true, -1, -1, -1);
											}
											this.attackCD = (int)((double)this.itemAnimationMax * 0.33);
										}
									}
								}
							}
							if (item.type == 787 && (this.itemAnimation == (int)((double)this.itemAnimationMax * 0.1) || this.itemAnimation == (int)((double)this.itemAnimationMax * 0.3) || this.itemAnimation == (int)((double)this.itemAnimationMax * 0.5) || this.itemAnimation == (int)((double)this.itemAnimationMax * 0.7) || this.itemAnimation == (int)((double)this.itemAnimationMax * 0.9)))
							{
								float num340 = 0f;
								float num341 = 0f;
								float num342 = 0f;
								float num343 = 0f;
								if (this.itemAnimation == (int)((double)this.itemAnimationMax * 0.9))
								{
									num340 = -7f;
								}
								if (this.itemAnimation == (int)((double)this.itemAnimationMax * 0.7))
								{
									num340 = -6f;
									num341 = 2f;
								}
								if (this.itemAnimation == (int)((double)this.itemAnimationMax * 0.5))
								{
									num340 = -4f;
									num341 = 4f;
								}
								if (this.itemAnimation == (int)((double)this.itemAnimationMax * 0.3))
								{
									num340 = -2f;
									num341 = 6f;
								}
								if (this.itemAnimation == (int)((double)this.itemAnimationMax * 0.1))
								{
									num341 = 7f;
								}
								if (this.itemAnimation == (int)((double)this.itemAnimationMax * 0.7))
								{
									num343 = 26f;
								}
								if (this.itemAnimation == (int)((double)this.itemAnimationMax * 0.3))
								{
									num343 -= 4f;
									num342 -= 20f;
								}
								if (this.itemAnimation == (int)((double)this.itemAnimationMax * 0.1))
								{
									num342 += 6f;
								}
								if (this.direction == -1)
								{
									if (this.itemAnimation == (int)((double)this.itemAnimationMax * 0.9))
									{
										num343 -= 8f;
									}
									if (this.itemAnimation == (int)((double)this.itemAnimationMax * 0.7))
									{
										num343 -= 6f;
									}
								}
								num340 *= 1.5f;
								num341 *= 1.5f;
								num343 *= (float)this.direction;
								num342 *= this.gravDir;
								Projectile.NewProjectile((float)(r2.X + r2.Width / 2) + num343, (float)(r2.Y + r2.Height / 2) + num342, (float)this.direction * num341, num340 * this.gravDir, 131, num313 / 2, 0f, i, 0f, 0f);
							}
						}
					}
				}
			}
			if (this.itemTime == 0 && this.itemAnimation > 0)
			{
				if (ItemLoader.UseItem(item, this))
				{
					this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
				}
				if (item.hairDye >= 0)
				{
					this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
					if (this.whoAmI == Main.myPlayer)
					{
						this.hairDye = (byte)item.hairDye;
						NetMessage.SendData(4, -1, -1, Main.player[this.whoAmI].name, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
					}
				}
				if (item.healLife > 0)
				{
					this.statLife += item.healLife;
					this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
					if (Main.myPlayer == this.whoAmI)
					{
						this.HealEffect(item.healLife, true);
					}
				}
				if (item.healMana > 0)
				{
					this.statMana += item.healMana;
					this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
					if (Main.myPlayer == this.whoAmI)
					{
						this.AddBuff(94, Player.manaSickTime, true);
						this.ManaEffect(item.healMana);
					}
				}
				if (item.buffType > 0)
				{
					if (this.whoAmI == Main.myPlayer && item.buffType != 90 && item.buffType != 27)
					{
						this.AddBuff(item.buffType, item.buffTime, true);
					}
					this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
				}
				if (item.type == 678)
				{
					this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
					if (this.whoAmI == Main.myPlayer)
					{
						this.AddBuff(20, 216000, true);
						this.AddBuff(22, 216000, true);
						this.AddBuff(23, 216000, true);
						this.AddBuff(24, 216000, true);
						this.AddBuff(30, 216000, true);
						this.AddBuff(31, 216000, true);
						this.AddBuff(32, 216000, true);
						this.AddBuff(33, 216000, true);
						this.AddBuff(35, 216000, true);
						this.AddBuff(36, 216000, true);
						this.AddBuff(68, 216000, true);
					}
				}
			}
			if (this.whoAmI == Main.myPlayer)
			{
				if (this.itemTime == 0 && this.itemAnimation > 0 && item.type == 361 && Main.CanStartInvasion(1, true))
				{
					this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
					Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
					if (Main.netMode != 1)
					{
						if (Main.invasionType == 0)
						{
							Main.invasionDelay = 0;
							Main.StartInvasion(1);
						}
					}
					else
					{
						NetMessage.SendData(61, -1, -1, "", this.whoAmI, -1f, 0f, 0f, 0, 0, 0);
					}
				}
				if (this.itemTime == 0 && this.itemAnimation > 0 && item.type == 602 && Main.CanStartInvasion(2, true))
				{
					this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
					Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
					if (Main.netMode != 1)
					{
						if (Main.invasionType == 0)
						{
							Main.invasionDelay = 0;
							Main.StartInvasion(2);
						}
					}
					else
					{
						NetMessage.SendData(61, -1, -1, "", this.whoAmI, -2f, 0f, 0f, 0, 0, 0);
					}
				}
				if (this.itemTime == 0 && this.itemAnimation > 0 && item.type == 1315 && Main.CanStartInvasion(3, true))
				{
					this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
					Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
					if (Main.netMode != 1)
					{
						if (Main.invasionType == 0)
						{
							Main.invasionDelay = 0;
							Main.StartInvasion(3);
						}
					}
					else
					{
						NetMessage.SendData(61, -1, -1, "", this.whoAmI, -3f, 0f, 0f, 0, 0, 0);
					}
				}
				if (this.itemTime == 0 && this.itemAnimation > 0 && item.type == 1844 && !Main.dayTime && !Main.pumpkinMoon && !Main.snowMoon && !DD2Event.Ongoing)
				{
					this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
					Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
					if (Main.netMode != 1)
					{
						Main.NewText(Lang.misc[31], 50, 255, 130, false);
						Main.startPumpkinMoon();
					}
					else
					{
						NetMessage.SendData(61, -1, -1, "", this.whoAmI, -4f, 0f, 0f, 0, 0, 0);
					}
				}
				if (this.itemTime == 0 && this.itemAnimation > 0 && item.type == 2767 && Main.dayTime && !Main.eclipse)
				{
					Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
					this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
					if (Main.netMode == 0)
					{
						Main.eclipse = true;
						Main.NewText(Lang.misc[20], 50, 255, 130, false);
					}
					else
					{
						NetMessage.SendData(61, -1, -1, "", this.whoAmI, -6f, 0f, 0f, 0, 0, 0);
					}
				}
				if (this.itemTime == 0 && this.itemAnimation > 0 && item.type == 3601 && NPC.downedGolemBoss && Main.hardMode && !NPC.AnyDanger() && !NPC.AnyoneNearCultists())
				{
					Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
					this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
					if (Main.netMode == 0)
					{
						WorldGen.StartImpendingDoom();
					}
					else
					{
						NetMessage.SendData(61, -1, -1, "", this.whoAmI, -8f, 0f, 0f, 0, 0, 0);
					}
				}
				if (this.itemTime == 0 && this.itemAnimation > 0 && item.type == 1958 && !Main.dayTime && !Main.pumpkinMoon && !Main.snowMoon && !DD2Event.Ongoing)
				{
					this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
					Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
					if (Main.netMode != 1)
					{
						Main.NewText(Lang.misc[34], 50, 255, 130, false);
						Main.startSnowMoon();
					}
					else
					{
						NetMessage.SendData(61, -1, -1, "", this.whoAmI, -5f, 0f, 0f, 0, 0, 0);
					}
				}
				if (this.itemTime == 0 && this.itemAnimation > 0 && item.makeNPC > 0 && this.controlUseItem && this.position.X / 16f - (float)Player.tileRangeX - (float)item.tileBoost <= (float)Player.tileTargetX && (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX + (float)item.tileBoost - 1f >= (float)Player.tileTargetX && this.position.Y / 16f - (float)Player.tileRangeY - (float)item.tileBoost <= (float)Player.tileTargetY && (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY + (float)item.tileBoost - 2f >= (float)Player.tileTargetY)
				{
					int num344 = Main.mouseX + (int)Main.screenPosition.X;
					int num345 = Main.mouseY + (int)Main.screenPosition.Y;
					this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
					int i2 = num344 / 16;
					int j2 = num345 / 16;
					if (!WorldGen.SolidTile(i2, j2))
					{
						NPC.ReleaseNPC(num344, num345, (int)item.makeNPC, item.placeStyle, this.whoAmI);
					}
				}
				if (this.itemTime == 0 && this.itemAnimation > 0 && (item.type == 43 || item.type == 70 || item.type == 544 || item.type == 556 || item.type == 557 || item.type == 560 || item.type == 1133 || item.type == 1331) && this.SummonItemCheck())
				{
					if (item.type == 560)
					{
						this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
						Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
						if (Main.netMode != 1)
						{
							NPC.SpawnOnPlayer(i, 50);
						}
						else
						{
							NetMessage.SendData(61, -1, -1, "", this.whoAmI, 50f, 0f, 0f, 0, 0, 0);
						}
					}
					else if (item.type == 43)
					{
						if (!Main.dayTime)
						{
							this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
							Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
							if (Main.netMode != 1)
							{
								NPC.SpawnOnPlayer(i, 4);
							}
							else
							{
								NetMessage.SendData(61, -1, -1, "", this.whoAmI, 4f, 0f, 0f, 0, 0, 0);
							}
						}
					}
					else if (item.type == 70)
					{
						if (this.ZoneCorrupt)
						{
							this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
							Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
							if (Main.netMode != 1)
							{
								NPC.SpawnOnPlayer(i, 13);
							}
							else
							{
								NetMessage.SendData(61, -1, -1, "", this.whoAmI, 13f, 0f, 0f, 0, 0, 0);
							}
						}
					}
					else if (item.type == 544)
					{
						if (!Main.dayTime)
						{
							this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
							Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
							if (Main.netMode != 1)
							{
								NPC.SpawnOnPlayer(i, 125);
								NPC.SpawnOnPlayer(i, 126);
							}
							else
							{
								NetMessage.SendData(61, -1, -1, "", this.whoAmI, 125f, 0f, 0f, 0, 0, 0);
								NetMessage.SendData(61, -1, -1, "", this.whoAmI, 126f, 0f, 0f, 0, 0, 0);
							}
						}
					}
					else if (item.type == 556)
					{
						if (!Main.dayTime)
						{
							this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
							Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
							if (Main.netMode != 1)
							{
								NPC.SpawnOnPlayer(i, 134);
							}
							else
							{
								NetMessage.SendData(61, -1, -1, "", this.whoAmI, 134f, 0f, 0f, 0, 0, 0);
							}
						}
					}
					else if (item.type == 557)
					{
						if (!Main.dayTime)
						{
							this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
							Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
							if (Main.netMode != 1)
							{
								NPC.SpawnOnPlayer(i, 127);
							}
							else
							{
								NetMessage.SendData(61, -1, -1, "", this.whoAmI, 127f, 0f, 0f, 0, 0, 0);
							}
						}
					}
					else if (item.type == 1133)
					{
						this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
						Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
						if (Main.netMode != 1)
						{
							NPC.SpawnOnPlayer(i, 222);
						}
						else
						{
							NetMessage.SendData(61, -1, -1, "", this.whoAmI, 222f, 0f, 0f, 0, 0, 0);
						}
					}
					else if (item.type == 1331 && this.ZoneCrimson)
					{
						this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
						Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0, 1f, 0f);
						if (Main.netMode != 1)
						{
							NPC.SpawnOnPlayer(i, 266);
						}
						else
						{
							NetMessage.SendData(61, -1, -1, "", this.whoAmI, 266f, 0f, 0f, 0, 0, 0);
						}
					}
				}
			}
			if ((item.type == 50 || item.type == 3124 || item.type == 3199) && this.itemAnimation > 0)
			{
				if (Main.rand.Next(2) == 0)
				{
					Dust.NewDust(this.position, this.width, this.height, 15, 0f, 0f, 150, default(Color), 1.1f);
				}
				if (this.itemTime == 0)
				{
					this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
				}
				else if (this.itemTime == (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item)) / 2)
				{
					for (int num346 = 0; num346 < 70; num346++)
					{
						Dust.NewDust(this.position, this.width, this.height, 15, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 150, default(Color), 1.5f);
					}
					this.grappling[0] = -1;
					this.grapCount = 0;
					for (int num347 = 0; num347 < 1000; num347++)
					{
						if (Main.projectile[num347].active && Main.projectile[num347].owner == i && Main.projectile[num347].aiStyle == 7)
						{
							Main.projectile[num347].Kill();
						}
					}
					this.Spawn();
					for (int num348 = 0; num348 < 70; num348++)
					{
						Dust.NewDust(this.position, this.width, this.height, 15, 0f, 0f, 150, default(Color), 1.5f);
					}
				}
			}
			if (item.type == 2350 && this.itemAnimation > 0)
			{
				if (this.itemTime == 0)
				{
					this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
				}
				else if (this.itemTime == 2)
				{
					for (int num349 = 0; num349 < 70; num349++)
					{
						Main.dust[Dust.NewDust(this.position, this.width, this.height, 15, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 150, Color.Cyan, 1.2f)].velocity *= 0.5f;
					}
					this.grappling[0] = -1;
					this.grapCount = 0;
					for (int num350 = 0; num350 < 1000; num350++)
					{
						if (Main.projectile[num350].active && Main.projectile[num350].owner == i && Main.projectile[num350].aiStyle == 7)
						{
							Main.projectile[num350].Kill();
						}
					}
					bool flag31 = this.immune;
					int num351 = this.immuneTime;
					this.Spawn();
					this.immune = flag31;
					this.immuneTime = num351;
					for (int num352 = 0; num352 < 70; num352++)
					{
						Main.dust[Dust.NewDust(this.position, this.width, this.height, 15, 0f, 0f, 150, Color.Cyan, 1.2f)].velocity *= 0.5f;
					}
					if (item.stack > 0)
					{
						item.stack--;
					}
				}
			}
			if (item.type == 2351 && this.itemAnimation > 0)
			{
				if (this.itemTime == 0)
				{
					this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
				}
				else if (this.itemTime == 2)
				{
					if (Main.netMode == 0)
					{
						this.TeleportationPotion();
					}
					else if (Main.netMode == 1 && this.whoAmI == Main.myPlayer)
					{
						NetMessage.SendData(73, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
					}
					if (item.stack > 0)
					{
						item.stack--;
					}
				}
			}
			if (item.type == 2756 && this.itemAnimation > 0)
			{
				if (this.itemTime == 0)
				{
					this.itemTime = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
				}
				else if (this.itemTime == 2)
				{
					if (this.whoAmI == Main.myPlayer)
					{
						this.Male = !this.Male;
						if (Main.netMode == 1)
						{
							NetMessage.SendData(4, -1, -1, this.name, this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
						}
					}
					if (item.stack > 0)
					{
						item.stack--;
					}
				}
				else
				{
					float num353 = (float)item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item);
					num353 = (num353 - (float)this.itemTime) / num353;
					float x6 = 15f;
					float num354 = 44f;
					float num355 = 9.424778f;
					Vector2 vector27 = new Vector2(x6, 0f).RotatedBy((double)(num355 * num353), default(Vector2));
					vector27.X *= (float)this.direction;
					for (int num356 = 0; num356 < 2; num356++)
					{
						int type12 = 221;
						if (num356 == 1)
						{
							vector27.X *= -1f;
							type12 = 219;
						}
						Vector2 vector28 = new Vector2(vector27.X, num354 * (1f - num353) - num354 + (float)(this.height / 2));
						vector28 += base.Center;
						int num357 = Dust.NewDust(vector28, 0, 0, type12, 0f, 0f, 100, default(Color), 1f);
						Main.dust[num357].position = vector28;
						Main.dust[num357].noGravity = true;
						Main.dust[num357].velocity = Vector2.Zero;
						Main.dust[num357].scale = 1.3f;
						Main.dust[num357].customData = this;
					}
				}
			}
			if (i == Main.myPlayer)
			{
				if (this.itemTime == (int)((float)item.useTime * this.tileSpeed / PlayerHooks.TotalUseTimeMultiplier(this, item)) && item.tileWand > 0)
				{
					int tileWand2 = item.tileWand;
					int num358 = 0;
					while (num358 < 58)
					{
						if (tileWand2 == this.inventory[num358].type && this.inventory[num358].stack > 0)
						{
							this.inventory[num358].stack--;
							if (this.inventory[num358].stack <= 0)
							{
								this.inventory[num358] = new Item();
								break;
							}
							break;
						}
						else
						{
							num358++;
						}
					}
				}
				int num359;
				if (item.createTile >= 0)
				{
					num359 = (int)((float)item.useTime * this.tileSpeed / PlayerHooks.TotalUseTimeMultiplier(this, item));
				}
				else if (item.createWall > 0)
				{
					num359 = (int)((float)item.useTime * this.wallSpeed / PlayerHooks.TotalUseTimeMultiplier(this, item));
				}
				else
				{
					num359 = (int)(item.useTime / PlayerHooks.TotalUseTimeMultiplier(this, item));
				}
				if (this.itemTime == num359 && item.consumable)
				{
					bool flag32 = true;
					if (item.type == 2350 || item.type == 2351)
					{
						flag32 = false;
					}
					if (item.type == 2756)
					{
						flag32 = false;
					}
					if (item.ranged)
					{
						if (this.ammoCost80 && Main.rand.Next(5) == 0)
						{
							flag32 = false;
						}
						if (this.ammoCost75 && Main.rand.Next(4) == 0)
						{
							flag32 = false;
						}
					}
					if (item.thrown)
					{
						if (this.thrownCost50 && Main.rand.Next(100) < 50)
						{
							flag32 = false;
						}
						if (this.thrownCost33 && Main.rand.Next(100) < 33)
						{
							flag32 = false;
						}
					}
					if (item.type >= 71 && item.type <= 74)
					{
						flag32 = true;
					}
					if (flag32 && ItemLoader.ConsumeItem(item, this))
					{
						if (item.stack > 0)
						{
							item.stack--;
						}
						if (item.stack <= 0)
						{
							this.itemTime = this.itemAnimation;
							Main.blockMouse = true;
						}
					}
				}
				if (item.stack <= 0 && this.itemAnimation == 0)
				{
					this.inventory[this.selectedItem] = new Item();
				}
				if (this.selectedItem == 58)
				{
					if (this.itemAnimation == 0)
					{
						return;
					}
					Main.mouseItem = item.Clone();
				}
			}
			PlayerHooks.PostItemCheck(this);
		}

		public static bool WouldSpotOverlapWithSentry(int worldX, int worldY)
		{
			Point value = new Point(worldX, worldY - 8);
			Point value2 = new Point(worldX + 16, worldY - 8);
			Point value3 = new Point(worldX - 16, worldY - 8);
			bool result = false;
			for (int i = 0; i < 1000; i++)
			{
				Projectile projectile = Main.projectile[i];
				if (projectile.active && projectile.sentry)
				{
					Rectangle hitbox = projectile.Hitbox;
					if (hitbox.Contains(value) || hitbox.Contains(value2) || hitbox.Contains(value3))
					{
						result = true;
						break;
					}
				}
			}
			return result;
		}

		public void FindSentryRestingSpot(int checkProj, out int worldX, out int worldY, out int pushYUp)
		{
			bool flag = false;
			int num = (int)((float)Main.mouseX + Main.screenPosition.X) / 16;
			int num2 = (int)((float)Main.mouseY + Main.screenPosition.Y) / 16;
			if (this.gravDir == -1f)
			{
				num2 = (int)(Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY) / 16;
			}
			worldX = num * 16 + 8;
			pushYUp = 41;
			switch (checkProj)
			{
				case 663:
					worldX += this.direction;
					break;
				case 664:
				case 666:
					break;
				case 665:
					pushYUp += 2;
					break;
				case 667:
					pushYUp += 3;
					break;
				default:
					switch (checkProj)
					{
						case 677:
							worldX += this.direction;
							break;
						case 678:
							worldX += this.direction;
							break;
						case 679:
							break;
						default:
							switch (checkProj)
							{
								case 691:
								case 692:
								case 693:
									pushYUp = 20;
									worldX += this.direction;
									pushYUp += 2;
									break;
							}
							break;
					}
					break;
			}
			if (!flag)
			{
				while (num2 < Main.maxTilesY - 10 && Main.tile[num, num2] != null && !WorldGen.SolidTile2(num, num2) && Main.tile[num - 1, num2] != null && !WorldGen.SolidTile2(num - 1, num2) && Main.tile[num + 1, num2] != null && !WorldGen.SolidTile2(num + 1, num2))
				{
					num2++;
				}
				num2++;
			}
			num2--;
			pushYUp -= 14;
			worldY = num2 * 16;
		}

		public void WipeOldestTurret()
		{
			List<Projectile> list = new List<Projectile>();
			for (int i = 0; i < 1000; i++)
			{
				if (Main.projectile[i].WipableTurret)
				{
					list.Add(Main.projectile[i]);
				}
			}
			if (list.Count == 0)
			{
				return;
			}
			Projectile projectile = list[0];
			for (int j = 1; j < list.Count; j++)
			{
				if (list[j].timeLeft < projectile.timeLeft)
				{
					projectile = list[j];
				}
			}
			projectile.Kill();
		}

		public void UpdateMaxTurrets()
		{
			List<Projectile> list = new List<Projectile>();
			for (int i = 0; i < 1000; i++)
			{
				if (Main.projectile[i].WipableTurret)
				{
					list.Add(Main.projectile[i]);
				}
			}
			int num = 0;
			while (list.Count > this.maxTurrets)
			{
				if (++num >= 1000)
				{
					return;
				}
				Projectile projectile = list[0];
				for (int j = 1; j < list.Count; j++)
				{
					if (list[j].timeLeft < projectile.timeLeft)
					{
						projectile = list[j];
					}
				}
				projectile.Kill();
				list.Remove(projectile);
			}
		}

		private void ItemCheck_ApplyPetBuffs(Item sItem)
		{
			if (this.whoAmI == Main.myPlayer && sItem.type == 603 && Main.cEd)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 669)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 115)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 3060)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 3628)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 3062)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 3577)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 425)
			{
				int num = Main.rand.Next(3);
				if (num == 0)
				{
					num = 27;
				}
				if (num == 1)
				{
					num = 101;
				}
				if (num == 2)
				{
					num = 102;
				}
				for (int i = 0; i < 22; i++)
				{
					if (this.buffType[i] == 27 || this.buffType[i] == 101 || this.buffType[i] == 102)
					{
						this.DelBuff(i);
						i--;
					}
				}
				this.AddBuff(num, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 753)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 994)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1169)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1170)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1171)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1172)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1180)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1181)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1182)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1183)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1242)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1157)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1309)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1311)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1837)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1312)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1798)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1799)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1802)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1810)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1927)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 1959)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 2364)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 2365)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 3043)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 2420)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 2535)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 2551)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 2584)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 2587)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 2621)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 2749)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 3249)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 3474)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI == Main.myPlayer && sItem.type == 3531)
			{
				this.AddBuff(sItem.buffType, 3600, true);
			}
			if (this.whoAmI != Main.myPlayer)
			{
				return;
			}
			switch (sItem.type)
			{
				case 3855:
				case 3856:
				case 3857:
					this.AddBuff(sItem.buffType, 3600, true);
					return;
				default:
					return;
			}
		}

		public float GetWeaponKnockback(Item sItem, float KnockBack)
		{
			if (sItem.summon)
			{
				KnockBack += this.minionKB;
			}
			if (sItem.melee && this.kbGlove)
			{
				KnockBack *= 2f;
			}
			if (this.kbBuff)
			{
				KnockBack *= 1.5f;
			}
			if (sItem.ranged && this.shroomiteStealth)
			{
				KnockBack *= 1f + (1f - this.stealth) * 0.5f;
			}
			if (sItem.ranged && this.setVortex)
			{
				KnockBack *= 1f + (1f - this.stealth) * 0.5f;
			}
			ItemLoader.GetWeaponKnockback(sItem, this, ref KnockBack);
			PlayerHooks.GetWeaponKnockback(this, sItem, ref KnockBack);
			return KnockBack;
		}

		public int GetWeaponDamage(Item sItem)
		{
			int num = sItem.damage;
			if (num > 0)
			{
				if (sItem.melee)
				{
					num = (int)((float)num * this.meleeDamage + 5E-06f);
				}
				else if (sItem.ranged)
				{
					num = (int)((float)num * this.rangedDamage + 5E-06f);
					if (sItem.useAmmo == AmmoID.Arrow || sItem.useAmmo == AmmoID.Stake)
					{
						num = (int)((float)num * this.arrowDamage + 5E-06f);
					}
					if (sItem.useAmmo == AmmoID.Bullet || sItem.useAmmo == AmmoID.CandyCorn)
					{
						num = (int)((float)num * this.bulletDamage + 5E-06f);
					}
					if (sItem.useAmmo == AmmoID.Rocket || sItem.useAmmo == AmmoID.StyngerBolt || sItem.useAmmo == AmmoID.JackOLantern || sItem.useAmmo == AmmoID.NailFriendly)
					{
						num = (int)((float)num * this.rocketDamage + 5E-06f);
					}
				}
				else if (sItem.thrown)
				{
					num = (int)((float)num * this.thrownDamage + 5E-06f);
				}
				else if (sItem.magic)
				{
					num = (int)((float)num * this.magicDamage + 5E-06f);
				}
				else if (sItem.summon)
				{
					num = (int)((float)num * this.minionDamage);
				}
			}
			ItemLoader.GetWeaponDamage(sItem, this, ref num);
			PlayerHooks.GetWeaponDamage(this, sItem, ref num);
			return num;
		}

		private void ApplyAnimation(Item sItem)
		{
			if (sItem.melee)
			{
				this.itemAnimation = (int)((float)sItem.useAnimation * this.meleeSpeed / PlayerHooks.TotalMeleeSpeedMultiplier(this, sItem));
				this.itemAnimationMax = this.itemAnimation;
				return;
			}
			if (sItem.createTile >= 0)
			{
				this.itemAnimation = (int)((float)sItem.useAnimation * this.tileSpeed / PlayerHooks.TotalMeleeSpeedMultiplier(this, sItem));
				this.itemAnimationMax = this.itemAnimation;
				return;
			}
			if (sItem.createWall >= 0)
			{
				this.itemAnimation = (int)((float)sItem.useAnimation * this.wallSpeed / PlayerHooks.TotalMeleeSpeedMultiplier(this, sItem));
				this.itemAnimationMax = this.itemAnimation;
				return;
			}
			this.itemAnimation = (int)(sItem.useAnimation / PlayerHooks.TotalMeleeSpeedMultiplier(this, sItem));
			this.itemAnimationMax = this.itemAnimation;
			this.reuseDelay = (int)(sItem.reuseDelay / PlayerHooks.TotalUseTimeMultiplier(this, sItem));
		}

		public bool HasAmmo(Item sItem, bool canUse)
		{
			if (sItem.useAmmo > 0)
			{
				canUse = false;
				for (int i = 0; i < 58; i++)
				{
					if (this.inventory[i].ammo == sItem.useAmmo && this.inventory[i].stack > 0)
					{
						canUse = true;
						break;
					}
				}
			}
			return canUse;
		}

		public void PickAmmo(Item sItem, ref int shoot, ref float speed, ref bool canShoot, ref int Damage, ref float KnockBack, bool dontConsume = false)
		{
			Item item = new Item();
			bool flag = false;
			for (int i = 54; i < 58; i++)
			{
				if (this.inventory[i].ammo == sItem.useAmmo && this.inventory[i].stack > 0)
				{
					item = this.inventory[i];
					canShoot = true;
					flag = true;
					break;
				}
			}
			if (!flag)
			{
				for (int j = 0; j < 54; j++)
				{
					if (this.inventory[j].ammo == sItem.useAmmo && this.inventory[j].stack > 0)
					{
						item = this.inventory[j];
						canShoot = true;
						break;
					}
				}
			}
			if (canShoot)
			{
				if (sItem.type == 1946)
				{
					shoot = 338 + item.type - 771;
				}
				else if (sItem.useAmmo == AmmoID.Rocket)
				{
					shoot += item.shoot;
				}
				else if (sItem.useAmmo == 780)
				{
					shoot += item.shoot;
				}
				else if (item.shoot > 0)
				{
					shoot = item.shoot;
				}
				if (sItem.type == 3019 && shoot == 1)
				{
					shoot = 485;
				}
				if (sItem.type == 3052)
				{
					shoot = 495;
				}
				if (sItem.type == 3245 && shoot == 21)
				{
					shoot = 532;
				}
				if (shoot == 42)
				{
					if (item.type == 370)
					{
						shoot = 65;
						Damage += 5;
					}
					else if (item.type == 408)
					{
						shoot = 68;
						Damage += 5;
					}
					else if (item.type == 1246)
					{
						shoot = 354;
						Damage += 5;
					}
				}
				if (this.inventory[this.selectedItem].type == 2888 && shoot == 1)
				{
					shoot = 469;
				}
				if (this.magicQuiver && (sItem.useAmmo == AmmoID.Arrow || sItem.useAmmo == AmmoID.Stake))
				{
					KnockBack = (float)((int)((double)KnockBack * 1.1));
					speed *= 1.1f;
				}
				speed += item.shootSpeed;
				if (item.ranged)
				{
					if (item.damage > 0)
					{
						Damage += (int)((float)item.damage * this.rangedDamage);
					}
				}
				else
				{
					Damage += item.damage;
				}
				if (sItem.useAmmo == AmmoID.Arrow && this.archery)
				{
					if (speed < 20f)
					{
						speed *= 1.2f;
						if (speed > 20f)
						{
							speed = 20f;
						}
					}
					Damage = (int)((double)((float)Damage) * 1.2);
				}
				KnockBack += item.knockBack;
				ItemLoader.PickAmmo(item, this, ref shoot, ref speed, ref Damage, ref KnockBack);
				bool flag2 = dontConsume;
				if (sItem.type == 3245)
				{
					if (Main.rand.Next(3) == 0)
					{
						flag2 = true;
					}
					else if (this.thrownCost33 && Main.rand.Next(100) < 33)
					{
						flag2 = true;
					}
					else if (this.thrownCost50 && Main.rand.Next(100) < 50)
					{
						flag2 = true;
					}
				}
				if (sItem.type == 3475 && Main.rand.Next(3) != 0)
				{
					flag2 = true;
				}
				if (sItem.type == 3540 && Main.rand.Next(3) != 0)
				{
					flag2 = true;
				}
				if (this.magicQuiver && sItem.useAmmo == AmmoID.Arrow && Main.rand.Next(5) == 0)
				{
					flag2 = true;
				}
				if (this.ammoBox && Main.rand.Next(5) == 0)
				{
					flag2 = true;
				}
				if (this.ammoPotion && Main.rand.Next(5) == 0)
				{
					flag2 = true;
				}
				if (sItem.type == 1782 && Main.rand.Next(3) == 0)
				{
					flag2 = true;
				}
				if (sItem.type == 98 && Main.rand.Next(3) == 0)
				{
					flag2 = true;
				}
				if (sItem.type == 2270 && Main.rand.Next(2) == 0)
				{
					flag2 = true;
				}
				if (sItem.type == 533 && Main.rand.Next(2) == 0)
				{
					flag2 = true;
				}
				if (sItem.type == 1929 && Main.rand.Next(2) == 0)
				{
					flag2 = true;
				}
				if (sItem.type == 1553 && Main.rand.Next(2) == 0)
				{
					flag2 = true;
				}
				if (sItem.type == 434 && this.itemAnimation < (int)(sItem.useAnimation / PlayerHooks.TotalMeleeSpeedMultiplier(this, sItem)) - 2)
				{
					flag2 = true;
				}
				if (this.ammoCost80 && Main.rand.Next(5) == 0)
				{
					flag2 = true;
				}
				if (this.ammoCost75 && Main.rand.Next(4) == 0)
				{
					flag2 = true;
				}
				if (shoot == 85 && this.itemAnimation < this.itemAnimationMax - 6)
				{
					flag2 = true;
				}
				if ((shoot == 145 || shoot == 146 || shoot == 147 || shoot == 148 || shoot == 149) && this.itemAnimation < this.itemAnimationMax - 5)
				{
					flag2 = true;
				}
				if (!PlayerHooks.ConsumeAmmo(this, sItem, item))
				{
					flag2 = true;
				}
				if (!ItemLoader.ConsumeAmmo(sItem, item, this))
				{
					flag2 = true;
				}
				if (!flag2 && item.consumable)
				{
					item.stack--;
					if (item.stack <= 0)
					{
						item.active = false;
						item.TurnToAir();
					}
				}
			}
		}

		public void PickTile(int x, int y, int pickPower)
		{
			int num = 0;
			int tileId = this.hitTile.HitObject(x, y, 1);
			Tile tile = Main.tile[x, y];
			if (Main.tileNoFail[(int)tile.type])
			{
				num = 100;
			}
			if (Main.tileDungeon[(int)tile.type] || tile.type == 25 || tile.type == 58 || tile.type == 117 || tile.type == 203)
			{
				num += pickPower / 2;
			}
			else if (tile.type == 48 || tile.type == 232)
			{
				num += pickPower / 4;
			}
			else if (tile.type == 226)
			{
				num += pickPower / 4;
			}
			else if (tile.type == 107 || tile.type == 221)
			{
				num += pickPower / 2;
			}
			else if (tile.type == 108 || tile.type == 222)
			{
				num += pickPower / 3;
			}
			else if (tile.type == 111 || tile.type == 223)
			{
				num += pickPower / 4;
			}
			else if (tile.type == 211)
			{
				num += pickPower / 5;
			}
			else
			{
				TileLoader.MineDamage(pickPower, ref num);
			}
			if (tile.type == 211 && pickPower < 200)
			{
				num = 0;
			}
			if ((tile.type == 25 || tile.type == 203) && pickPower < 65)
			{
				num = 0;
			}
			else if (tile.type == 117 && pickPower < 65)
			{
				num = 0;
			}
			else if (tile.type == 37 && pickPower < 50)
			{
				num = 0;
			}
			else if (tile.type == 404 && pickPower < 65)
			{
				num = 0;
			}
			else if ((tile.type == 22 || tile.type == 204) && (double)y > Main.worldSurface && pickPower < 55)
			{
				num = 0;
			}
			else if (tile.type == 56 && pickPower < 65)
			{
				num = 0;
			}
			else if (tile.type == 58 && pickPower < 65)
			{
				num = 0;
			}
			else if ((tile.type == 226 || tile.type == 237) && pickPower < 210)
			{
				num = 0;
			}
			else if (Main.tileDungeon[(int)tile.type] && pickPower < 65)
			{
				if ((double)x < (double)Main.maxTilesX * 0.35 || (double)x > (double)Main.maxTilesX * 0.65)
				{
					num = 0;
				}
			}
			else if (tile.type == 107 && pickPower < 100)
			{
				num = 0;
			}
			else if (tile.type == 108 && pickPower < 110)
			{
				num = 0;
			}
			else if (tile.type == 111 && pickPower < 150)
			{
				num = 0;
			}
			else if (tile.type == 221 && pickPower < 100)
			{
				num = 0;
			}
			else if (tile.type == 222 && pickPower < 110)
			{
				num = 0;
			}
			else if (tile.type == 223 && pickPower < 150)
			{
				num = 0;
			}
			else
			{
				TileLoader.PickPowerCheck(tile, pickPower, ref num);
			}
			if (tile.type == 147 || tile.type == 0 || tile.type == 40 || tile.type == 53 || tile.type == 57 || tile.type == 59 || tile.type == 123 || tile.type == 224 || tile.type == 397)
			{
				num += pickPower;
			}
			if (tile.type == 165 || Main.tileRope[(int)tile.type] || tile.type == 199 || Main.tileMoss[(int)tile.type])
			{
				num = 100;
			}
			if (this.hitTile.AddDamage(tileId, num, false) >= 100 && (tile.type == 2 || tile.type == 23 || tile.type == 60 || tile.type == 70 || tile.type == 109 || tile.type == 199 || Main.tileMoss[(int)tile.type]))
			{
				num = 0;
			}
			if (tile.type == 128 || tile.type == 269)
			{
				if (tile.frameX == 18 || tile.frameX == 54)
				{
					x--;
					tile = Main.tile[x, y];
					this.hitTile.UpdatePosition(tileId, x, y);
				}
				if (tile.frameX >= 100)
				{
					num = 0;
					Main.blockMouse = true;
				}
			}
			if (tile.type == 334)
			{
				if (tile.frameY == 0)
				{
					y++;
					tile = Main.tile[x, y];
					this.hitTile.UpdatePosition(tileId, x, y);
				}
				if (tile.frameY == 36)
				{
					y--;
					tile = Main.tile[x, y];
					this.hitTile.UpdatePosition(tileId, x, y);
				}
				int i = (int)tile.frameX;
				bool flag = i >= 5000;
				bool flag2 = false;
				if (!flag)
				{
					int num2 = i / 18;
					num2 %= 3;
					x -= num2;
					tile = Main.tile[x, y];
					if (tile.frameX >= 5000)
					{
						flag = true;
					}
				}
				if (flag)
				{
					i = (int)tile.frameX;
					int num3 = 0;
					while (i >= 5000)
					{
						i -= 5000;
						num3++;
					}
					if (num3 != 0)
					{
						flag2 = true;
					}
				}
				if (flag2)
				{
					num = 0;
					Main.blockMouse = true;
				}
			}
			if (!WorldGen.CanKillTile(x, y))
			{
				num = 0;
			}
			if (this.hitTile.AddDamage(tileId, num, true) >= 100)
			{
				AchievementsHelper.CurrentlyMining = true;
				this.hitTile.Clear(tileId);
				if (Main.netMode == 1 && Main.tileContainer[(int)Main.tile[x, y].type])
				{
					WorldGen.KillTile(x, y, true, false, false);
					NetMessage.SendData(17, -1, -1, "", 0, (float)x, (float)y, 1f, 0, 0, 0);
					if (TileLoader.IsChest(Main.tile[x, y].type))
					{
						NetMessage.SendData(34, -1, -1, "", 1, (float)x, (float)y, 0f, 0, 0, 0);
					}
					if (TileLoader.IsDresser(Main.tile[x, y].type))
					{
						NetMessage.SendData(34, -1, -1, "", 3, (float)x, (float)y, 0f, 0, 0, 0);
					}
				}
				else
				{
					int num4 = y;
					bool flag3 = Main.tile[x, num4].active();
					WorldGen.KillTile(x, num4, false, false, false);
#if CLIENT
					if (flag3 && !Main.tile[x, num4].active())
					{
						AchievementsHelper.HandleMining();
					}
#endif
					if (Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, "", 0, (float)x, (float)num4, 0f, 0, 0, 0);
					}
				}
				AchievementsHelper.CurrentlyMining = false;
			}
			else
			{
				WorldGen.KillTile(x, y, true, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(17, -1, -1, "", 0, (float)x, (float)y, 1f, 0, 0, 0);
				}
			}
			if (num != 0)
			{
				this.hitTile.Prune();
			}
		}

		public bool ItemFitsWeaponRack(Item i)
		{
			bool flag = false;
			if (i.fishingPole > 0)
			{
				flag = true;
			}
			int netID = i.netID;
			if (netID == 905 || netID == 1326)
			{
				flag = true;
			}
			return (i.damage > 0 || flag) && i.useStyle > 0 && i.stack > 0;
		}

		public void PlaceWeapon(int x, int y)
		{
			if (!Main.tile[x, y].active() || Main.tile[x, y].type != 334)
			{
				return;
			}
			int num = (int)Main.tile[x, y].frameY;
			int i = 1;
			num /= 18;
			while (i > num)
			{
				y++;
				num = (int)Main.tile[x, y].frameY;
				num /= 18;
			}
			while (i < num)
			{
				y--;
				num = (int)Main.tile[x, y].frameY;
				num /= 18;
			}
			int j = (int)Main.tile[x, y].frameX;
			int num2 = 0;
			while (j >= 5000)
			{
				j -= 5000;
				num2++;
			}
			if (num2 != 0)
			{
				j = (num2 - 1) * 18;
			}
			bool flag = false;
			if (j >= 54)
			{
				j -= 54;
				flag = true;
			}
			x -= j / 18;
			int k = (int)Main.tile[x, y].frameX;
			WorldGen.KillTile(x, y, true, false, false);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(17, -1, -1, "", 0, (float)x, (float)y, 1f, 0, 0, 0);
			}
			if (Main.netMode == 1)
			{
				NetMessage.SendData(17, -1, -1, "", 0, (float)(x + 1), (float)y, 1f, 0, 0, 0);
			}
			while (k >= 5000)
			{
				k -= 5000;
			}
			Main.blockMouse = true;
			int num3 = 5000;
			int num4 = 10000;
			if (flag)
			{
				num3 = 20000;
				num4 = 25000;
			}
			Main.tile[x, y].frameX = (short)(this.inventory[this.selectedItem].netID + num3 + 100);
			Main.tile[x + 1, y].frameX = (short)((int)this.inventory[this.selectedItem].prefix + num4);
			if (Main.netMode == 1)
			{
				NetMessage.SendTileSquare(-1, x, y, 1, TileChangeType.None);
			}
			if (Main.netMode == 1)
			{
				NetMessage.SendTileSquare(-1, x + 1, y, 1, TileChangeType.None);
			}
			this.inventory[this.selectedItem].stack--;
			if (this.inventory[this.selectedItem].stack <= 0)
			{
				this.inventory[this.selectedItem].SetDefaults(0, false);
				Main.mouseItem.SetDefaults(0, false);
			}
			if (this.selectedItem == 58)
			{
				Main.mouseItem = this.inventory[this.selectedItem].Clone();
			}
			this.releaseUseItem = false;
			this.mouseInterface = true;
		}

		public bool ItemFitsItemFrame(Item i)
		{
			return i.stack > 0;
		}

		public void PlaceItemInFrame(int x, int y)
		{
			if (Main.tile[x, y].frameX % 36 != 0)
			{
				x--;
			}
			if (Main.tile[x, y].frameY % 36 != 0)
			{
				y--;
			}
			int num = TEItemFrame.Find(x, y);
			if (num == -1)
			{
				return;
			}
			if (((TEItemFrame)TileEntity.ByID[num]).item.stack > 0)
			{
				WorldGen.KillTile(x, y, true, false, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(17, -1, -1, "", 0, (float)Player.tileTargetX, (float)y, 1f, 0, 0, 0);
				}
			}
			if (Main.netMode == 1)
			{
				NetMessage.SendData(89, -1, -1, "", x, (float)y, (float)this.selectedItem, (float)this.whoAmI, 0, 0, 0);
			}
			else
			{
				TEItemFrame.TryPlacing(x, y, this.inventory[this.selectedItem].netID, (int)this.inventory[this.selectedItem].prefix, this.inventory[this.selectedItem].stack);
			}
			this.inventory[this.selectedItem].stack--;
			if (this.inventory[this.selectedItem].stack <= 0)
			{
				this.inventory[this.selectedItem].SetDefaults(0, false);
				Main.mouseItem.SetDefaults(0, false);
			}
			if (this.selectedItem == 58)
			{
				Main.mouseItem = this.inventory[this.selectedItem].Clone();
			}
			this.releaseUseItem = false;
			this.mouseInterface = true;
		}

		public Color GetImmuneAlpha(Color newColor, float alphaReduction)
		{
			float num = (float)(255 - this.immuneAlpha) / 255f;
			if (alphaReduction > 0f)
			{
				num *= 1f - alphaReduction;
			}
			if (this.immuneAlpha > 125)
			{
				return Color.Transparent;
			}
			return Color.Multiply(newColor, num);
		}

		public Color GetImmuneAlphaPure(Color newColor, float alphaReduction)
		{
			float num = (float)(255 - this.immuneAlpha) / 255f;
			if (alphaReduction > 0f)
			{
				num *= 1f - alphaReduction;
			}
			return Color.Multiply(newColor, num);
		}

		public Color GetDeathAlpha(Color newColor)
		{
			int r = (int)newColor.R + (int)((double)this.immuneAlpha * 0.9);
			int g = (int)newColor.G + (int)((double)this.immuneAlpha * 0.5);
			int b = (int)newColor.B + (int)((double)this.immuneAlpha * 0.5);
			int num = (int)newColor.A + (int)((double)this.immuneAlpha * 0.4);
			if (num < 0)
			{
				num = 0;
			}
			if (num > 255)
			{
				num = 255;
			}
			return new Color(r, g, b, num);
		}

		public void addDPS(int dmg)
		{
			if (this.dpsStarted)
			{
				this.dpsLastHit = DateTime.Now;
				this.dpsDamage += dmg;
				this.dpsEnd = DateTime.Now;
				return;
			}
			this.dpsStarted = true;
			this.dpsStart = DateTime.Now;
			this.dpsEnd = DateTime.Now;
			this.dpsLastHit = DateTime.Now;
			this.dpsDamage = dmg;
		}

		public void checkDPSTime()
		{
			int num = 3;
			if (!this.dpsStarted)
			{
				return;
			}
			if ((DateTime.Now - this.dpsLastHit).Seconds >= num)
			{
				this.dpsStarted = false;
			}
		}

		public int getDPS()
		{
			TimeSpan timeSpan = this.dpsEnd - this.dpsStart;
			float num = (float)timeSpan.Milliseconds / 1000f;
			num += (float)timeSpan.Seconds;
			num += (float)timeSpan.Minutes / 60f;
			if (num >= 3f)
			{
				this.dpsStart = DateTime.Now;
				this.dpsStart = this.dpsStart.AddSeconds(-1.0);
				this.dpsDamage = (int)((float)this.dpsDamage / num);
				timeSpan = this.dpsEnd - this.dpsStart;
				num = (float)timeSpan.Milliseconds / 1000f;
				num += (float)timeSpan.Seconds;
				num += (float)timeSpan.Minutes / 60f;
			}
			if (num < 1f)
			{
				num = 1f;
			}
			float num2 = (float)this.dpsDamage / num;
			return (int)num2;
		}

		public int DropCoins()
		{
			int num = 0;
			for (int i = 0; i < 59; i++)
			{
				if (this.inventory[i].type >= 71 && this.inventory[i].type <= 74)
				{
					int num2 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, this.inventory[i].type, 1, false, 0, false, false);
					int num3 = this.inventory[i].stack / 2;
					if (Main.expertMode)
					{
						num3 = (int)((double)this.inventory[i].stack * 0.25);
					}
					num3 = this.inventory[i].stack - num3;
					this.inventory[i].stack -= num3;
					if (this.inventory[i].type == 71)
					{
						num += num3;
					}
					if (this.inventory[i].type == 72)
					{
						num += num3 * 100;
					}
					if (this.inventory[i].type == 73)
					{
						num += num3 * 10000;
					}
					if (this.inventory[i].type == 74)
					{
						num += num3 * 1000000;
					}
					if (this.inventory[i].stack <= 0)
					{
						this.inventory[i] = new Item();
					}
					Main.item[num2].stack = num3;
					Main.item[num2].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
					Main.item[num2].velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
					Main.item[num2].noGrabDelay = 100;
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", num2, 0f, 0f, 0f, 0, 0, 0);
					}
					if (i == 58)
					{
						Main.mouseItem = this.inventory[i].Clone();
					}
				}
			}
			this.lostCoins = num;
			this.lostCoinString = Main.ValueToCoins(this.lostCoins);
			return num;
		}

		public void DropItems()
		{
			IList<Item> startInventory = PlayerHooks.SetupStartInventory(this);
			IDictionary<int, int> startCounts = new Dictionary<int, int>();
			foreach (Item item in startInventory)
			{
				if (!startCounts.ContainsKey(item.netID))
				{
					startCounts[item.netID] = 0;
				}
				startCounts[item.netID] += item.stack;
			}
			for (int i = 0; i < 59; i++)
			{
				Item item = this.inventory[i];
				if (item.stack > 0 && (!startCounts.ContainsKey(item.netID) || startCounts[item.netID] < item.stack) && item.type != ModLoader.ModLoader.GetMod("ModLoader").ItemType("StartBag"))
				{
					int stack = item.stack;
					if (startCounts.ContainsKey(item.netID))
					{
						stack -= startCounts[item.netID];
						startCounts[item.netID] = 0;
					}
					int num = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, this.inventory[i].type, 1, false, 0, false, false);
					Main.item[num].netDefaults(this.inventory[i].netID);
					Main.item[num].Prefix((int)this.inventory[i].prefix);
					Main.item[num].stack = stack;
					Main.item[num].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
					Main.item[num].velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
					Main.item[num].noGrabDelay = 100;
					Main.item[num].newAndShiny = false;
					Main.item[num].modItem = this.inventory[i].modItem;
					Main.item[num].itemInfo = this.inventory[i].itemInfo;
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", num, 0f, 0f, 0f, 0, 0, 0);
					}
				}
				else if (item.stack > 0 && startCounts.ContainsKey(item.netID))
				{
					startCounts[item.netID] -= item.stack;
				}
				this.inventory[i] = new Item();
				if (i < this.armor.Length)
				{
					if (this.armor[i].stack > 0)
					{
						int num2 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, this.armor[i].type, 1, false, 0, false, false);
						Main.item[num2].netDefaults(this.armor[i].netID);
						Main.item[num2].Prefix((int)this.armor[i].prefix);
						Main.item[num2].stack = this.armor[i].stack;
						Main.item[num2].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
						Main.item[num2].velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
						Main.item[num2].noGrabDelay = 100;
						Main.item[num2].newAndShiny = false;
						Main.item[num2].modItem = this.armor[i].modItem;
						Main.item[num2].itemInfo = this.armor[i].itemInfo;
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", num2, 0f, 0f, 0f, 0, 0, 0);
						}
					}
					this.armor[i] = new Item();
				}
				if (i < this.dye.Length)
				{
					if (this.dye[i].stack > 0)
					{
						int num3 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, this.dye[i].type, 1, false, 0, false, false);
						Main.item[num3].netDefaults(this.dye[i].netID);
						Main.item[num3].Prefix((int)this.dye[i].prefix);
						Main.item[num3].stack = this.dye[i].stack;
						Main.item[num3].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
						Main.item[num3].velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
						Main.item[num3].noGrabDelay = 100;
						Main.item[num3].newAndShiny = false;
						Main.item[num3].modItem = this.dye[i].modItem;
						Main.item[num3].itemInfo = this.dye[i].itemInfo;
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", num3, 0f, 0f, 0f, 0, 0, 0);
						}
					}
					this.dye[i] = new Item();
				}
				if (i < this.miscEquips.Length)
				{
					if (this.miscEquips[i].stack > 0)
					{
						int num4 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, this.miscEquips[i].type, 1, false, 0, false, false);
						Main.item[num4].netDefaults(this.miscEquips[i].netID);
						Main.item[num4].Prefix((int)this.miscEquips[i].prefix);
						Main.item[num4].stack = this.miscEquips[i].stack;
						Main.item[num4].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
						Main.item[num4].velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
						Main.item[num4].noGrabDelay = 100;
						Main.item[num4].newAndShiny = false;
						Main.item[num4].modItem = this.miscEquips[i].modItem;
						Main.item[num4].itemInfo = this.miscEquips[i].itemInfo;
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", num4, 0f, 0f, 0f, 0, 0, 0);
						}
					}
					this.miscEquips[i] = new Item();
				}
				if (i < this.miscDyes.Length)
				{
					if (this.miscDyes[i].stack > 0)
					{
						int num5 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, this.miscDyes[i].type, 1, false, 0, false, false);
						Main.item[num5].netDefaults(this.miscDyes[i].netID);
						Main.item[num5].Prefix((int)this.miscDyes[i].prefix);
						Main.item[num5].stack = this.miscDyes[i].stack;
						Main.item[num5].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
						Main.item[num5].velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
						Main.item[num5].noGrabDelay = 100;
						Main.item[num5].newAndShiny = false;
						Main.item[num5].modItem = this.miscDyes[i].modItem;
						Main.item[num5].itemInfo = this.miscDyes[i].itemInfo;
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, "", num5, 0f, 0f, 0f, 0, 0, 0);
						}
					}
					this.miscDyes[i] = new Item();
				}
			}
			PlayerHooks.SetStartInventory(this, startInventory);
			Main.mouseItem = new Item();
		}

		public object Clone()
		{
			return base.MemberwiseClone();
		}

		public object clientClone()
		{
			Player player = new Player(false);
			player.zone1 = this.zone1;
			player.zone2 = this.zone2;
			player.zone3 = this.zone3;
			player.zone4 = this.zone4;
			PlayerHooks.CopyCustomBiomesTo(this, player);
			player.extraAccessory = this.extraAccessory;
			player.MinionRestTargetPoint = this.MinionRestTargetPoint;
			player.MinionAttackTargetNPC = this.MinionAttackTargetNPC;
			player.direction = this.direction;
			player.selectedItem = this.selectedItem;
			player.controlUp = this.controlUp;
			player.controlDown = this.controlDown;
			player.controlLeft = this.controlLeft;
			player.controlRight = this.controlRight;
			player.controlJump = this.controlJump;
			player.controlUseItem = this.controlUseItem;
			player.statLife = this.statLife;
			player.statLifeMax = this.statLifeMax;
			player.statMana = this.statMana;
			player.statManaMax = this.statManaMax;
			player.position.X = this.position.X;
			player.chest = this.chest;
			player.talkNPC = this.talkNPC;
			player.hideVisual = this.hideVisual;
			player.hideMisc = this.hideMisc;
			for (int i = 0; i < 59; i++)
			{
				player.inventory[i] = this.inventory[i].Clone();
				if (i < this.armor.Length)
				{
					player.armor[i] = this.armor[i].Clone();
				}
				if (i < this.dye.Length)
				{
					player.dye[i] = this.dye[i].Clone();
				}
				if (i < this.miscEquips.Length)
				{
					player.miscEquips[i] = this.miscEquips[i].Clone();
				}
				if (i < this.miscDyes.Length)
				{
					player.miscDyes[i] = this.miscDyes[i].Clone();
				}
				if (i < this.bank.item.Length)
				{
					player.bank.item[i] = this.bank.item[i].Clone();
				}
				if (i < this.bank2.item.Length)
				{
					player.bank2.item[i] = this.bank2.item[i].Clone();
				}
				if (i < this.bank3.item.Length)
				{
					player.bank3.item[i] = this.bank3.item[i].Clone();
				}
			}
			player.trashItem = this.trashItem.Clone();
			for (int j = 0; j < 22; j++)
			{
				player.buffType[j] = this.buffType[j];
				player.buffTime[j] = this.buffTime[j];
			}
			this.DpadRadial.CopyTo(player.DpadRadial);
			this.CircularRadial.CopyTo(player.CircularRadial);
			PlayerHooks.clientClone(this, player);
			return player;
		}

		public static bool CheckSpawn(int x, int y)
		{
			if (x < 10 || x > Main.maxTilesX - 10 || y < 10 || y > Main.maxTilesX - 10)
			{
				return false;
			}
			if (Main.tile[x, y - 1] == null)
			{
				return false;
			}
			if (!Main.tile[x, y - 1].active() || (Main.tile[x, y - 1].type != 79 && !TileLoader.IsModBed(Main.tile[x, y - 1].type)))
			{
				return false;
			}
			for (int i = x - 1; i <= x + 1; i++)
			{
				for (int j = y - 3; j < y; j++)
				{
					if (Main.tile[i, j] == null)
					{
						return false;
					}
					if (Main.tile[i, j].nactive() && Main.tileSolid[(int)Main.tile[i, j].type] && !Main.tileSolidTop[(int)Main.tile[i, j].type])
					{
						Main.NewText(Language.GetTextValue("Game.BedObstructed"), 255, 240, 20, false);
						return false;
					}
				}
			}
			return WorldGen.StartRoomCheck(x, y - 1);
		}

		public void FindSpawn()
		{
			for (int i = 0; i < 200; i++)
			{
				if (this.spN[i] == null)
				{
					this.SpawnX = -1;
					this.SpawnY = -1;
					return;
				}
				if (this.spN[i] == Main.worldName && this.spI[i] == Main.worldID)
				{
					this.SpawnX = this.spX[i];
					this.SpawnY = this.spY[i];
					return;
				}
			}
		}

		public void RemoveSpawn()
		{
			this.SpawnX = -1;
			this.SpawnY = -1;
			for (int i = 0; i < 200; i++)
			{
				if (this.spN[i] == null)
				{
					return;
				}
				if (this.spN[i] == Main.worldName && this.spI[i] == Main.worldID)
				{
					for (int j = i; j < 199; j++)
					{
						this.spN[j] = this.spN[j + 1];
						this.spI[j] = this.spI[j + 1];
						this.spX[j] = this.spX[j + 1];
						this.spY[j] = this.spY[j + 1];
					}
					this.spN[199] = null;
					this.spI[199] = 0;
					this.spX[199] = 0;
					this.spY[199] = 0;
					return;
				}
			}
		}

		public void ChangeSpawn(int x, int y)
		{
			int num = 0;
			while (num < 200 && this.spN[num] != null)
			{
				if (this.spN[num] == Main.worldName && this.spI[num] == Main.worldID)
				{
					for (int i = num; i > 0; i--)
					{
						this.spN[i] = this.spN[i - 1];
						this.spI[i] = this.spI[i - 1];
						this.spX[i] = this.spX[i - 1];
						this.spY[i] = this.spY[i - 1];
					}
					this.spN[0] = Main.worldName;
					this.spI[0] = Main.worldID;
					this.spX[0] = x;
					this.spY[0] = y;
					return;
				}
				num++;
			}
			for (int j = 199; j > 0; j--)
			{
				if (this.spN[j - 1] != null)
				{
					this.spN[j] = this.spN[j - 1];
					this.spI[j] = this.spI[j - 1];
					this.spX[j] = this.spX[j - 1];
					this.spY[j] = this.spY[j - 1];
				}
			}
			this.spN[0] = Main.worldName;
			this.spI[0] = Main.worldID;
			this.spX[0] = x;
			this.spY[0] = y;
		}

		public static void SavePlayer(PlayerFileData playerFile, bool skipMapSave = false)
		{
			Main.Achievements.Save();
			string path = playerFile.Path;
			Player player = playerFile.Player;
			bool isCloudSave = playerFile.IsCloudSave;
			if (!skipMapSave)
			{
				try
				{
					if (Main.mapEnabled)
					{
						Main.Map.Save();
					}
				}
				catch
				{
				}
				try
				{
					if (!isCloudSave)
					{
						Directory.CreateDirectory(Main.PlayerPath);
					}
				}
				catch
				{
				}
			}
			if (Main.ServerSideCharacter)
			{
				return;
			}
			if (path == null || path == "")
			{
				return;
			}
			if (FileUtilities.Exists(path, isCloudSave))
			{
				FileUtilities.Copy(path, path + ".bak", isCloudSave, true);
			}
			RijndaelManaged rijndaelManaged = new RijndaelManaged();
			using (Stream stream = isCloudSave ? (Stream)new MemoryStream(2000) : (Stream)new FileStream(path, FileMode.Create))
			{
				using (CryptoStream cryptoStream = new CryptoStream(stream, rijndaelManaged.CreateEncryptor(Player.ENCRYPTION_KEY, Player.ENCRYPTION_KEY), CryptoStreamMode.Write))
				{
					using (BinaryWriter binaryWriter = new BinaryWriter(cryptoStream))
					{
						binaryWriter.Write(188);
						playerFile.Metadata.Write(binaryWriter);
						binaryWriter.Write(player.name);
						binaryWriter.Write(player.difficulty);
						binaryWriter.Write(playerFile.GetPlayTime().Ticks);
						binaryWriter.Write(player.hair);
						binaryWriter.Write(player.hairDye);
						BitsByte bb = 0;
						for (int i = 0; i < 8; i++)
						{
							bb[i] = player.hideVisual[i];
						}
						binaryWriter.Write(bb);
						bb = 0;
						for (int j = 0; j < 2; j++)
						{
							bb[j] = player.hideVisual[j + 8];
						}
						binaryWriter.Write(bb);
						binaryWriter.Write(player.hideMisc);
						binaryWriter.Write((byte)player.skinVariant);
						binaryWriter.Write(player.statLife);
						binaryWriter.Write(player.statLifeMax);
						binaryWriter.Write(player.statMana);
						binaryWriter.Write(player.statManaMax);
						binaryWriter.Write(player.extraAccessory);
						binaryWriter.Write(player.downedDD2EventAnyDifficulty);
						binaryWriter.Write(player.taxMoney);
						binaryWriter.Write(player.hairColor.R);
						binaryWriter.Write(player.hairColor.G);
						binaryWriter.Write(player.hairColor.B);
						binaryWriter.Write(player.skinColor.R);
						binaryWriter.Write(player.skinColor.G);
						binaryWriter.Write(player.skinColor.B);
						binaryWriter.Write(player.eyeColor.R);
						binaryWriter.Write(player.eyeColor.G);
						binaryWriter.Write(player.eyeColor.B);
						binaryWriter.Write(player.shirtColor.R);
						binaryWriter.Write(player.shirtColor.G);
						binaryWriter.Write(player.shirtColor.B);
						binaryWriter.Write(player.underShirtColor.R);
						binaryWriter.Write(player.underShirtColor.G);
						binaryWriter.Write(player.underShirtColor.B);
						binaryWriter.Write(player.pantsColor.R);
						binaryWriter.Write(player.pantsColor.G);
						binaryWriter.Write(player.pantsColor.B);
						binaryWriter.Write(player.shoeColor.R);
						binaryWriter.Write(player.shoeColor.G);
						binaryWriter.Write(player.shoeColor.B);
						for (int k = 0; k < player.armor.Length; k++)
						{
							if (player.armor[k].name == null)
							{
								player.armor[k].name = "";
							}
							ItemIO.WriteVanillaID(player.armor[k], binaryWriter);
							binaryWriter.Write(player.armor[k].prefix);
						}
						for (int l = 0; l < player.dye.Length; l++)
						{
							ItemIO.WriteVanillaID(player.dye[l], binaryWriter);
							binaryWriter.Write(player.dye[l].prefix);
						}
						for (int m = 0; m < 58; m++)
						{
							if (player.inventory[m].name == null)
							{
								player.inventory[m].name = "";
							}
							ItemIO.WriteVanillaID(player.inventory[m], binaryWriter);
							binaryWriter.Write(player.inventory[m].stack);
							binaryWriter.Write(player.inventory[m].prefix);
							binaryWriter.Write(player.inventory[m].favorited);
						}
						for (int n = 0; n < player.miscEquips.Length; n++)
						{
							ItemIO.WriteVanillaID(player.miscEquips[n], binaryWriter);
							binaryWriter.Write(player.miscEquips[n].prefix);
							ItemIO.WriteVanillaID(player.miscDyes[n], binaryWriter);
							binaryWriter.Write(player.miscDyes[n].prefix);
						}
						for (int num = 0; num < 40; num++)
						{
							if (player.bank.item[num].name == null)
							{
								player.bank.item[num].name = "";
							}
							ItemIO.WriteVanillaID(player.bank.item[num], binaryWriter);
							binaryWriter.Write(player.bank.item[num].stack);
							binaryWriter.Write(player.bank.item[num].prefix);
						}
						for (int num2 = 0; num2 < 40; num2++)
						{
							if (player.bank2.item[num2].name == null)
							{
								player.bank2.item[num2].name = "";
							}
							ItemIO.WriteVanillaID(player.bank2.item[num2], binaryWriter);
							binaryWriter.Write(player.bank2.item[num2].stack);
							binaryWriter.Write(player.bank2.item[num2].prefix);
						}
						for (int num3 = 0; num3 < 40; num3++)
						{
							if (player.bank3.item[num3].name == null)
							{
								player.bank3.item[num3].name = "";
							}
							ItemIO.WriteVanillaID(player.bank3.item[num3], binaryWriter);
							binaryWriter.Write(player.bank3.item[num3].stack);
							binaryWriter.Write(player.bank3.item[num3].prefix);
						}
						for (int num4 = 0; num4 < 22; num4++)
						{
							if (Main.buffNoSave[player.buffType[num4]] || BuffLoader.IsModBuff(player.buffType[num4]))
							{
								binaryWriter.Write(0);
								binaryWriter.Write(0);
							}
							else
							{
								binaryWriter.Write(player.buffType[num4]);
								binaryWriter.Write(player.buffTime[num4]);
							}
						}
						for (int num5 = 0; num5 < 200; num5++)
						{
							if (player.spN[num5] == null)
							{
								binaryWriter.Write(-1);
								break;
							}
							binaryWriter.Write(player.spX[num5]);
							binaryWriter.Write(player.spY[num5]);
							binaryWriter.Write(player.spI[num5]);
							binaryWriter.Write(player.spN[num5]);
						}
						binaryWriter.Write(player.hbLocked);
						for (int num6 = 0; num6 < player.hideInfo.Length; num6++)
						{
							binaryWriter.Write(player.hideInfo[num6]);
						}
						binaryWriter.Write(player.anglerQuestsFinished);
						for (int num7 = 0; num7 < player.DpadRadial.Bindings.Length; num7++)
						{
							binaryWriter.Write(player.DpadRadial.Bindings[num7]);
						}
						for (int num8 = 0; num8 < player.builderAccStatus.Length; num8++)
						{
							binaryWriter.Write(player.builderAccStatus[num8]);
						}
						binaryWriter.Write(player.bartenderQuestLog);
						binaryWriter.Flush();
						cryptoStream.FlushFinalBlock();
						stream.Flush();
						if (isCloudSave && SocialAPI.Cloud != null)
						{
							SocialAPI.Cloud.Write(playerFile.Path, ((MemoryStream)stream).ToArray());
						}
					}
				}
			}
			PlayerIO.Save(player, path, isCloudSave);
		}

		public static PlayerFileData LoadPlayer(string playerPath, bool cloudSave)
		{
			PlayerFileData playerFileData = new PlayerFileData(playerPath, cloudSave);
			if (cloudSave && SocialAPI.Cloud == null)
			{
				return playerFileData;
			}
			if (Main.rand == null)
			{
				Main.rand = new UnifiedRandom((int)DateTime.Now.Ticks);
			}
			Player player = new Player();
			try
			{
				RijndaelManaged rijndaelManaged = new RijndaelManaged();
				rijndaelManaged.Padding = PaddingMode.None;
				byte[] buffer = FileUtilities.ReadAllBytes(playerPath, cloudSave);
				PlayerFileData result;
				using (MemoryStream memoryStream = new MemoryStream(buffer))
				{
					using (CryptoStream cryptoStream = new CryptoStream(memoryStream, rijndaelManaged.CreateDecryptor(Player.ENCRYPTION_KEY, Player.ENCRYPTION_KEY), CryptoStreamMode.Read))
					{
						using (BinaryReader binaryReader = new BinaryReader(cryptoStream))
						{
							int num = binaryReader.ReadInt32();
							if (num >= 135)
							{
								playerFileData.Metadata = FileMetadata.Read(binaryReader, FileType.Player);
							}
							else
							{
								playerFileData.Metadata = FileMetadata.FromCurrentSettings(FileType.Player);
							}
							if (num > 188)
							{
								player.loadStatus = 1;
								player.name = binaryReader.ReadString();
								playerFileData.Player = player;
								result = playerFileData;
								return result;
							}
							player.name = binaryReader.ReadString();
							if (num >= 10)
							{
								if (num >= 17)
								{
									player.difficulty = binaryReader.ReadByte();
								}
								else
								{
									bool flag = binaryReader.ReadBoolean();
									if (flag)
									{
										player.difficulty = 2;
									}
								}
							}
							if (num >= 138)
							{
								playerFileData.SetPlayTime(new TimeSpan(binaryReader.ReadInt64()));
							}
							else
							{
								playerFileData.SetPlayTime(TimeSpan.Zero);
							}
							player.hair = binaryReader.ReadInt32();
							if (num >= 82)
							{
								player.hairDye = binaryReader.ReadByte();
							}
							if (num >= 124)
							{
								BitsByte bitsByte = binaryReader.ReadByte();
								for (int i = 0; i < 8; i++)
								{
									player.hideVisual[i] = bitsByte[i];
								}
								bitsByte = binaryReader.ReadByte();
								for (int j = 0; j < 2; j++)
								{
									player.hideVisual[j + 8] = bitsByte[j];
								}
							}
							else if (num >= 83)
							{
								BitsByte bitsByte2 = binaryReader.ReadByte();
								for (int k = 0; k < 8; k++)
								{
									player.hideVisual[k] = bitsByte2[k];
								}
							}
							if (num >= 119)
							{
								player.hideMisc = binaryReader.ReadByte();
							}
							if (num <= 17)
							{
								if (player.hair == 5 || player.hair == 6 || player.hair == 9 || player.hair == 11)
								{
									player.Male = false;
								}
								else
								{
									player.Male = true;
								}
							}
							else if (num < 107)
							{
								player.Male = binaryReader.ReadBoolean();
							}
							else
							{
								player.skinVariant = (int)binaryReader.ReadByte();
							}
							if (num < 161 && player.skinVariant == 7)
							{
								player.skinVariant = 9;
							}
							player.statLife = binaryReader.ReadInt32();
							player.statLifeMax = binaryReader.ReadInt32();
							if (player.statLifeMax > 500)
							{
								player.statLifeMax = 500;
							}
							player.statMana = binaryReader.ReadInt32();
							player.statManaMax = binaryReader.ReadInt32();
							if (player.statManaMax > 200)
							{
								player.statManaMax = 200;
							}
							if (player.statMana > 400)
							{
								player.statMana = 400;
							}
							if (num >= 125)
							{
								player.extraAccessory = binaryReader.ReadBoolean();
							}
							if (num >= 182)
							{
								player.downedDD2EventAnyDifficulty = binaryReader.ReadBoolean();
							}
							if (num >= 128)
							{
								player.taxMoney = binaryReader.ReadInt32();
							}
							player.hairColor = binaryReader.ReadRGB();
							player.skinColor = binaryReader.ReadRGB();
							player.eyeColor = binaryReader.ReadRGB();
							player.shirtColor = binaryReader.ReadRGB();
							player.underShirtColor = binaryReader.ReadRGB();
							player.pantsColor = binaryReader.ReadRGB();
							player.shoeColor = binaryReader.ReadRGB();
							Main.player[Main.myPlayer].shirtColor = player.shirtColor;
							Main.player[Main.myPlayer].pantsColor = player.pantsColor;
							Main.player[Main.myPlayer].hairColor = player.hairColor;
							if (num >= 38)
							{
								if (num < 124)
								{
									int num2 = 11;
									if (num >= 81)
									{
										num2 = 16;
									}
									for (int l = 0; l < num2; l++)
									{
										int num3 = l;
										if (num3 >= 8)
										{
											num3 += 2;
										}
										player.armor[num3].netDefaults(binaryReader.ReadInt32());
										player.armor[num3].Prefix((int)binaryReader.ReadByte());
									}
								}
								else
								{
									int num4 = 20;
									for (int m = 0; m < num4; m++)
									{
										player.armor[m].netDefaults(binaryReader.ReadInt32());
										player.armor[m].Prefix((int)binaryReader.ReadByte());
									}
								}
								if (num >= 47)
								{
									int num5 = 3;
									if (num >= 81)
									{
										num5 = 8;
									}
									if (num >= 124)
									{
										num5 = 10;
									}
									for (int n = 0; n < num5; n++)
									{
										int num6 = n;
										player.dye[num6].netDefaults(binaryReader.ReadInt32());
										player.dye[num6].Prefix((int)binaryReader.ReadByte());
									}
								}
								if (num >= 58)
								{
									for (int num7 = 0; num7 < 58; num7++)
									{
										int num8 = binaryReader.ReadInt32();
										if (num8 >= 3884)
										{
											player.inventory[num7].netDefaults(0);
											binaryReader.ReadInt32();
											binaryReader.ReadByte();
											if (num >= 114)
											{
												binaryReader.ReadBoolean();
											}
										}
										else
										{
											player.inventory[num7].netDefaults(num8);
											player.inventory[num7].stack = binaryReader.ReadInt32();
											player.inventory[num7].Prefix((int)binaryReader.ReadByte());
											if (num >= 114)
											{
												player.inventory[num7].favorited = binaryReader.ReadBoolean();
											}
										}
									}
								}
								else
								{
									for (int num9 = 0; num9 < 48; num9++)
									{
										int num10 = binaryReader.ReadInt32();
										if (num10 >= 3884)
										{
											player.inventory[num9].netDefaults(0);
											binaryReader.ReadInt32();
											binaryReader.ReadByte();
										}
										else
										{
											player.inventory[num9].netDefaults(num10);
											player.inventory[num9].stack = binaryReader.ReadInt32();
											player.inventory[num9].Prefix((int)binaryReader.ReadByte());
										}
									}
								}
								if (num >= 117)
								{
									if (num < 136)
									{
										for (int num11 = 0; num11 < 5; num11++)
										{
											if (num11 != 1)
											{
												int num12 = binaryReader.ReadInt32();
												if (num12 >= 3884)
												{
													player.miscEquips[num11].netDefaults(0);
													binaryReader.ReadByte();
												}
												else
												{
													player.miscEquips[num11].netDefaults(num12);
													player.miscEquips[num11].Prefix((int)binaryReader.ReadByte());
												}
												num12 = binaryReader.ReadInt32();
												if (num12 >= 3884)
												{
													player.miscDyes[num11].netDefaults(0);
													binaryReader.ReadByte();
												}
												else
												{
													player.miscDyes[num11].netDefaults(num12);
													player.miscDyes[num11].Prefix((int)binaryReader.ReadByte());
												}
											}
										}
									}
									else
									{
										for (int num13 = 0; num13 < 5; num13++)
										{
											int num14 = binaryReader.ReadInt32();
											if (num14 >= 3884)
											{
												player.miscEquips[num13].netDefaults(0);
												binaryReader.ReadByte();
											}
											else
											{
												player.miscEquips[num13].netDefaults(num14);
												player.miscEquips[num13].Prefix((int)binaryReader.ReadByte());
											}
											num14 = binaryReader.ReadInt32();
											if (num14 >= 3884)
											{
												player.miscDyes[num13].netDefaults(0);
												binaryReader.ReadByte();
											}
											else
											{
												player.miscDyes[num13].netDefaults(num14);
												player.miscDyes[num13].Prefix((int)binaryReader.ReadByte());
											}
										}
									}
								}
								if (num >= 58)
								{
									for (int num15 = 0; num15 < 40; num15++)
									{
										player.bank.item[num15].netDefaults(binaryReader.ReadInt32());
										player.bank.item[num15].stack = binaryReader.ReadInt32();
										player.bank.item[num15].Prefix((int)binaryReader.ReadByte());
									}
									for (int num16 = 0; num16 < 40; num16++)
									{
										player.bank2.item[num16].netDefaults(binaryReader.ReadInt32());
										player.bank2.item[num16].stack = binaryReader.ReadInt32();
										player.bank2.item[num16].Prefix((int)binaryReader.ReadByte());
									}
								}
								else
								{
									for (int num17 = 0; num17 < 20; num17++)
									{
										player.bank.item[num17].netDefaults(binaryReader.ReadInt32());
										player.bank.item[num17].stack = binaryReader.ReadInt32();
										player.bank.item[num17].Prefix((int)binaryReader.ReadByte());
									}
									for (int num18 = 0; num18 < 20; num18++)
									{
										player.bank2.item[num18].netDefaults(binaryReader.ReadInt32());
										player.bank2.item[num18].stack = binaryReader.ReadInt32();
										player.bank2.item[num18].Prefix((int)binaryReader.ReadByte());
									}
								}
								if (num >= 182)
								{
									for (int num19 = 0; num19 < 40; num19++)
									{
										player.bank3.item[num19].netDefaults(binaryReader.ReadInt32());
										player.bank3.item[num19].stack = binaryReader.ReadInt32();
										player.bank3.item[num19].Prefix((int)binaryReader.ReadByte());
									}
								}
							}
							else
							{
								for (int num20 = 0; num20 < 8; num20++)
								{
									player.armor[num20].SetDefaults(Item.VersionName(binaryReader.ReadString(), num));
									if (num >= 36)
									{
										player.armor[num20].Prefix((int)binaryReader.ReadByte());
									}
								}
								if (num >= 6)
								{
									for (int num21 = 8; num21 < 11; num21++)
									{
										player.armor[num21].SetDefaults(Item.VersionName(binaryReader.ReadString(), num));
										if (num >= 36)
										{
											player.armor[num21].Prefix((int)binaryReader.ReadByte());
										}
									}
								}
								for (int num22 = 0; num22 < 44; num22++)
								{
									player.inventory[num22].SetDefaults(Item.VersionName(binaryReader.ReadString(), num));
									player.inventory[num22].stack = binaryReader.ReadInt32();
									if (num >= 36)
									{
										player.inventory[num22].Prefix((int)binaryReader.ReadByte());
									}
								}
								if (num >= 15)
								{
									for (int num23 = 44; num23 < 48; num23++)
									{
										player.inventory[num23].SetDefaults(Item.VersionName(binaryReader.ReadString(), num));
										player.inventory[num23].stack = binaryReader.ReadInt32();
										if (num >= 36)
										{
											player.inventory[num23].Prefix((int)binaryReader.ReadByte());
										}
									}
								}
								for (int num24 = 0; num24 < 20; num24++)
								{
									player.bank.item[num24].SetDefaults(Item.VersionName(binaryReader.ReadString(), num));
									player.bank.item[num24].stack = binaryReader.ReadInt32();
									if (num >= 36)
									{
										player.bank.item[num24].Prefix((int)binaryReader.ReadByte());
									}
								}
								if (num >= 20)
								{
									for (int num25 = 0; num25 < 20; num25++)
									{
										player.bank2.item[num25].SetDefaults(Item.VersionName(binaryReader.ReadString(), num));
										player.bank2.item[num25].stack = binaryReader.ReadInt32();
										if (num >= 36)
										{
											player.bank2.item[num25].Prefix((int)binaryReader.ReadByte());
										}
									}
								}
							}
							if (num < 58)
							{
								for (int num26 = 40; num26 < 48; num26++)
								{
									player.inventory[num26 + 10] = player.inventory[num26].Clone();
									player.inventory[num26].SetDefaults(0, false);
								}
							}
							if (num >= 11)
							{
								int num27 = 22;
								if (num < 74)
								{
									num27 = 10;
								}
								for (int num28 = 0; num28 < num27; num28++)
								{
									player.buffType[num28] = binaryReader.ReadInt32();
									player.buffTime[num28] = binaryReader.ReadInt32();
									if (player.buffType[num28] == 0)
									{
										num28--;
										num27--;
									}
								}
							}
							for (int num29 = 0; num29 < 200; num29++)
							{
								int num30 = binaryReader.ReadInt32();
								if (num30 == -1)
								{
									break;
								}
								player.spX[num29] = num30;
								player.spY[num29] = binaryReader.ReadInt32();
								player.spI[num29] = binaryReader.ReadInt32();
								player.spN[num29] = binaryReader.ReadString();
							}
							if (num >= 16)
							{
								player.hbLocked = binaryReader.ReadBoolean();
							}
							if (num >= 115)
							{
								int num31 = 13;
								for (int num32 = 0; num32 < num31; num32++)
								{
									player.hideInfo[num32] = binaryReader.ReadBoolean();
								}
							}
							if (num >= 98)
							{
								player.anglerQuestsFinished = binaryReader.ReadInt32();
							}
							if (num >= 162)
							{
								for (int num33 = 0; num33 < 4; num33++)
								{
									player.DpadRadial.Bindings[num33] = binaryReader.ReadInt32();
								}
							}
							if (num >= 164)
							{
								int num34 = 8;
								if (num >= 167)
								{
									num34 = 10;
								}
								for (int num35 = 0; num35 < num34; num35++)
								{
									player.builderAccStatus[num35] = binaryReader.ReadInt32();
								}
							}
							if (num >= 181)
							{
								player.bartenderQuestLog = binaryReader.ReadInt32();
							}
							player.skinVariant = (int)MathHelper.Clamp((float)player.skinVariant, 0f, 9f);
							PlayerIO.Load(player, playerPath, cloudSave);
							for (int num36 = 3; num36 < 8 + player.extraAccessorySlots; num36++)
							{
								int type = player.armor[num36].type;
								if (type == 908)
								{
									player.lavaMax += 420;
								}
								if (type == 906)
								{
									player.lavaMax += 420;
								}
								if (player.wingsLogic == 0 && player.armor[num36].wingSlot >= 0)
								{
									player.wingsLogic = (int)player.armor[num36].wingSlot;
								}
								if (type == 158 || type == 396 || type == 1250 || type == 1251 || type == 1252)
								{
									player.noFallDmg = true;
								}
								player.lavaTime = player.lavaMax;
							}
							player.ResetEffects();
						}
					}
				}
				player.PlayerFrame();
				player.loadStatus = 0;
				playerFileData.Player = player;
				result = playerFileData;
				return result;
			}
			catch (CustomModDataException e)
			{
				playerFileData.customDataFail = e;
			}
			catch
			{
			}
			Player player2 = new Player();
			player2.loadStatus = 2;
			if (player.name != "")
			{
				player2.name = player.name;
			}
			else
			{
				string[] array = playerPath.Split(new char[]
					{
						Path.DirectorySeparatorChar
					});
				player.name = array[array.Length - 1].Split(new char[]
					{
						'.'
					})[0];
			}
			playerFileData.Player = player2;
			return playerFileData;
		}

		public static PlayerFileData GetFileData(string file, bool cloudSave)
		{
			if (file == null || (cloudSave && SocialAPI.Cloud == null))
			{
				return null;
			}
			PlayerFileData playerFileData = Player.LoadPlayer(file, cloudSave);
			if (playerFileData.Player != null)
			{
				if (playerFileData.Player.loadStatus != 0 && playerFileData.Player.loadStatus != 1)
				{
					CustomModDataException customDataFail = playerFileData.customDataFail;
					if (FileUtilities.Exists(file + ".bak", cloudSave))
					{
						FileUtilities.Move(file + ".bak", file, cloudSave, true);
						PlayerIO.LoadBackup(file, cloudSave);
					}
					playerFileData = Player.LoadPlayer(file, cloudSave);
					if (playerFileData.Player == null)
					{
						return null;
					}
					playerFileData.customDataFail = customDataFail;
				}
				return playerFileData;
			}
			return null;
		}

		public Color GetHairColor(bool useLighting = true)
		{
			Color color = Lighting.GetColor((int)((double)this.position.X + (double)this.width * 0.5) / 16, (int)(((double)this.position.Y + (double)this.height * 0.25) / 16.0));
			return GameShaders.Hair.GetColor((short)this.hairDye, this, useLighting ? color : Color.White);
		}

		public bool HasItem(int type)
		{
			for (int i = 0; i < 58; i++)
			{
				if (type == this.inventory[i].type && this.inventory[i].stack > 0)
				{
					return true;
				}
			}
			return false;
		}

		public int FindItem(int netid)
		{
			for (int i = 0; i < 58; i++)
			{
				if (netid == this.inventory[i].netID && this.inventory[i].stack > 0)
				{
					return i;
				}
			}
			return -1;
		}

		public int FindItem(List<int> netids)
		{
			for (int i = 0; i < 58; i++)
			{
				if (this.inventory[i].stack > 0 && netids.Contains(this.inventory[i].netID))
				{
					return i;
				}
			}
			return -1;
		}

		public int FindItem(bool[] validtypes)
		{
			for (int i = 0; i < 58; i++)
			{
				if (this.inventory[i].stack > 0 && validtypes[this.inventory[i].type])
				{
					return i;
				}
			}
			return -1;
		}

		internal ModPlayer[] modPlayers = new ModPlayer[0];

		public ModPlayer GetModPlayer(Mod mod, string name)
		{
			return PlayerHooks.GetModPlayer(this, mod, name);
		}

		public T GetModPlayer<T>(Mod mod) where T : ModPlayer
		{
			return (T)GetModPlayer(mod, typeof(T).Name);
		}

		public Player(bool startupInventory = true)
		{
			int[] array = new int[10];
			this.builderAccStatus = array;
			this.lostCoinString = "";
			this.NPCBannerBuff = new bool[NPCLoader.NPCCount];
			this.extraAccessorySlots = 2;
			this.tankPet = -1;
			this.solarShieldPos = new Vector2[3];
			this.solarShieldVel = new Vector2[3];
			this.flameRingScale = 1f;
			this.beetlePos = new Vector2[3];
			this.beetleVel = new Vector2[3];
			this.itemFlamePos = new Vector2[7];
			this.lifeSteal = 99999f;
			this.gem = -1;
			this.carpetFrame = -1;
			this.maxMinions = 1;
			this.zone1 = 0;
			this.zone2 = 0;
			this.zone3 = 0;
			this.zone4 = 0;
			this.doubleTapCardinalTimer = new int[4];
			this.holdDownCardinalTimer = new int[4];
			this.speedSlice = new float[60];
			this.sign = -1;
			this.changeItem = -1;
			this.armor = new Item[20];
			this.dye = new Item[10];
			this.miscEquips = new Item[5];
			this.miscDyes = new Item[5];
			this.trashItem = new Item();
			this.ghostDir = 1f;
			this.buffType = new int[22];
			this.buffTime = new int[22];
			this.buffImmune = new bool[BuffLoader.BuffCount];
			this.heldProj = -1;
			this.breathMax = 200;
			this.breath = 200;
			this.stealth = 1f;
			this.setBonus = "";
			this.inventory = new Item[59];
			this.inventoryChestStack = new bool[59];
			this.bank = new Chest(true);
			this.bank2 = new Chest(true);
			this.bank3 = new Chest(true);
			this.fullRotationOrigin = Vector2.Zero;
			this.nonTorch = -1;
			this.stepSpeed = 1f;
			this.head = -1;
			this.body = -1;
			this.legs = -1;
			this.handon = -1;
			this.handoff = -1;
			this.back = -1;
			this.front = -1;
			this.shoe = -1;
			this.waist = -1;
			this.shield = -1;
			this.neck = -1;
			this.face = -1;
			this.balloon = -1;
			this.hideVisual = new bool[10];
			this.hideMisc = 0;
			this.showItemIconText = "";
			this.shadowPos = new Vector2[3];
			this.shadowRotation = new float[3];
			this.shadowOrigin = new Vector2[3];
			this.shadowDirection = new int[3];
			this.manaCost = 1f;
			this.step = -1;
			this.statLifeMax = 100;
			this.statLifeMax2 = 100;
			this.statLife = 100;
			this.gravDir = 1f;
			this.lastBoost = Vector2.Zero;
			this.meleeCrit = 4;
			this.rangedCrit = 4;
			this.magicCrit = 4;
			this.thrownCrit = 4;
			this.meleeDamage = 1f;
			this.rangedDamage = 1f;
			this.thrownDamage = 1f;
			this.bulletDamage = 1f;
			this.arrowDamage = 1f;
			this.rocketDamage = 1f;
			this.magicDamage = 1f;
			this.minionDamage = 1f;
			this.meleeSpeed = 1f;
			this.thrownVelocity = 1f;
			this.moveSpeed = 1f;
			this.pickSpeed = 1f;
			this.wallSpeed = 1f;
			this.tileSpeed = 1f;
			this.SpawnX = -1;
			this.SpawnY = -1;
			this.spX = new int[200];
			this.spY = new int[200];
			this.spN = new string[200];
			this.spI = new int[200];
			this.gravity = Player.defaultGravity;
			this.maxFallSpeed = 10f;
			this.maxRunSpeed = 3f;
			this.runAcceleration = 0.08f;
			this.runSlowdown = 0.2f;
			this.adjTile = new bool[467];
			this.oldAdjTile = new bool[467];
			this.hairDyeColor = Color.Transparent;
			this.hairColor = new Color(215, 90, 55);
			this.skinColor = new Color(255, 125, 90);
			this.eyeColor = new Color(105, 90, 75);
			this.shirtColor = new Color(175, 165, 140);
			this.underShirtColor = new Color(160, 180, 215);
			this.pantsColor = new Color(255, 230, 175);
			this.shoeColor = new Color(160, 105, 60);
			this.hermesStepSound = new SoundPlaySet();
			this.lastCreatureHit = -1;
			this.bestOre = -1;
			this.displayedFishingInfo = "";
			this.grappling = new int[20];
			this.rocketTimeMax = 7;
			this.maxTurrets = 1;
			this.maxTurretsOld = 1;
			this.flyingPigChest = -1;
			this.chest = -1;
			this.talkNPC = -1;
			this.potionDelayTime = Item.potionDelay;
			this.restorationDelayTime = Item.restorationDelay;
			this.ownedProjectileCounts = new int[ProjectileLoader.ProjectileCount];
			this.npcTypeNoAggro = new bool[NPCLoader.NPCCount];
			this.MinionRestTargetPoint = Vector2.Zero;
			this.MinionAttackTargetNPC = -1;
			this.TouchedTiles = new List<Point>();
			this._stormShaderObstruction = 1f;
			this._shaderObstructionInternalValue = 1f;
			PlayerHooks.SetupPlayer(this);
			int[] array2 = new int[2];
			this.hurtCooldowns = array2;
			this.width = 20;
			this.height = 42;
			this.name = string.Empty;
			for (int i = 0; i < 59; i++)
			{
				if (i < this.armor.Length)
				{
					this.armor[i] = new Item();
					this.armor[i].name = "";
				}
				this.inventory[i] = new Item();
				this.inventory[i].name = "";
			}
			for (int j = 0; j < 40; j++)
			{
				this.bank.item[j] = new Item();
				this.bank.item[j].name = "";
				this.bank2.item[j] = new Item();
				this.bank2.item[j].name = "";
				this.bank3.item[j] = new Item();
				this.bank3.item[j].name = "";
			}
			for (int k = 0; k < this.dye.Length; k++)
			{
				this.dye[k] = new Item();
			}
			for (int l = 0; l < this.miscEquips.Length; l++)
			{
				this.miscEquips[l] = new Item();
			}
			for (int m = 0; m < this.miscDyes.Length; m++)
			{
				this.miscDyes[m] = new Item();
			}
			this.trashItem = new Item();
			this.grappling[0] = -1;
			if (startupInventory)
			{
				PlayerHooks.SetStartInventory(this);
			}
			this.statManaMax = 20;
			this.extraAccessory = false;
			if (Main.cEd)
			{
				this.inventory[3].SetDefaults(603, false);
			}
			for (int n = 0; n < adjTile.Length; n++)
			{
				this.adjTile[n] = false;
				this.oldAdjTile[n] = false;
			}
			this.hitTile = new HitTile();
			this.mount = new Mount();
		}

		public void TeleportationPotion()
		{
			bool flag = false;
			int teleportStartX = 100;
			int teleportRangeX = Main.maxTilesX - 200;
			int teleportStartY = 100;
			int teleportRangeY = Main.maxTilesY - 200;
			Vector2 vector = this.TestTeleport(ref flag, teleportStartX, teleportRangeX, teleportStartY, teleportRangeY);
			if (flag)
			{
				Vector2 newPos = vector;
				this.Teleport(newPos, 2, 0);
				this.velocity = Vector2.Zero;
				if (Main.netMode == 2)
				{
					RemoteClient.CheckSection(this.whoAmI, this.position, 1);
					NetMessage.SendData(65, -1, -1, "", 0, (float)this.whoAmI, newPos.X, newPos.Y, 3, 0, 0);
				}
			}
		}

		private Vector2 TestTeleport(ref bool canSpawn, int teleportStartX, int teleportRangeX, int teleportStartY, int teleportRangeY)
		{
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			int width = this.width;
			Vector2 vector = new Vector2((float)num2, (float)num3) * 16f + new Vector2((float)(-(float)width / 2 + 8), (float)(-(float)this.height));
			while (!canSpawn && num < 1000)
			{
				num++;
				num2 = teleportStartX + Main.rand.Next(teleportRangeX);
				num3 = teleportStartY + Main.rand.Next(teleportRangeY);
				vector = new Vector2((float)num2, (float)num3) * 16f + new Vector2((float)(-(float)width / 2 + 8), (float)(-(float)this.height));
				if (!Collision.SolidCollision(vector, width, this.height))
				{
					if (Main.tile[num2, num3] == null)
					{
						Main.tile[num2, num3] = new Tile();
					}
					if ((Main.tile[num2, num3].wall != 87 || (double)num3 <= Main.worldSurface || NPC.downedPlantBoss) && (!Main.wallDungeon[(int)Main.tile[num2, num3].wall] || (double)num3 <= Main.worldSurface || NPC.downedBoss3))
					{
						int i = 0;
						while (i < 100)
						{
							if (Main.tile[num2, num3 + i] == null)
							{
								Main.tile[num2, num3 + i] = new Tile();
							}
							Tile tile = Main.tile[num2, num3 + i];
							vector = new Vector2((float)num2, (float)(num3 + i)) * 16f + new Vector2((float)(-(float)width / 2 + 8), (float)(-(float)this.height));
							Vector4 vector2 = Collision.SlopeCollision(vector, this.velocity, width, this.height, this.gravDir, false);
							bool flag = !Collision.SolidCollision(vector, width, this.height);
							if (vector2.Z == this.velocity.X)
							{
								float arg_1D4_0 = this.velocity.Y;
							}
							if (flag)
							{
								i++;
							}
							else
							{
								if (tile.active() && !tile.inActive() && Main.tileSolid[(int)tile.type])
								{
									break;
								}
								i++;
							}
						}
						if (!Collision.LavaCollision(vector, width, this.height) && Collision.HurtTiles(vector, this.velocity, width, this.height, false).Y <= 0f)
						{
							Collision.SlopeCollision(vector, this.velocity, width, this.height, this.gravDir, false);
							if (Collision.SolidCollision(vector, width, this.height) && i < 99)
							{
								Vector2 vector3 = Vector2.UnitX * 16f;
								if (!(Collision.TileCollision(vector - vector3, vector3, this.width, this.height, false, false, (int)this.gravDir) != vector3))
								{
									vector3 = -Vector2.UnitX * 16f;
									if (!(Collision.TileCollision(vector - vector3, vector3, this.width, this.height, false, false, (int)this.gravDir) != vector3))
									{
										vector3 = Vector2.UnitY * 16f;
										if (!(Collision.TileCollision(vector - vector3, vector3, this.width, this.height, false, false, (int)this.gravDir) != vector3))
										{
											vector3 = -Vector2.UnitY * 16f;
											if (!(Collision.TileCollision(vector - vector3, vector3, this.width, this.height, false, false, (int)this.gravDir) != vector3))
											{
												canSpawn = true;
												num3 += i;
												break;
											}
										}
									}
								}
							}
						}
					}
				}
			}
			return vector;
		}

		public void GetAnglerReward()
		{
			List<Item> rewardItems = new List<Item>();
			Item item = new Item();
			item.type = 0;
			float num = 1f;
			if (this.anglerQuestsFinished <= 50)
			{
				num -= (float)this.anglerQuestsFinished * 0.01f;
			}
			else if (this.anglerQuestsFinished <= 100)
			{
				num = 0.5f - (float)(this.anglerQuestsFinished - 50) * 0.005f;
			}
			else if (this.anglerQuestsFinished <= 150)
			{
				num = 0.25f - (float)(this.anglerQuestsFinished - 100) * 0.002f;
			}
			else
			{
				num = 0.15f;
			}
			if (this.anglerQuestsFinished == 5)
			{
				item.SetDefaults(2428, false);
			}
			else if (this.anglerQuestsFinished == 10)
			{
				item.SetDefaults(2367, false);
			}
			else if (this.anglerQuestsFinished == 15)
			{
				item.SetDefaults(2368, false);
			}
			else if (this.anglerQuestsFinished == 20)
			{
				item.SetDefaults(2369, false);
			}
			else if (this.anglerQuestsFinished == 30)
			{
				item.SetDefaults(2294, false);
			}
			else if (this.anglerQuestsFinished > 75 && Main.rand.Next((int)(250f * num)) == 0)
			{
				item.SetDefaults(2294, false);
			}
			else if (Main.hardMode && this.anglerQuestsFinished > 25 && Main.rand.Next((int)(100f * num)) == 0)
			{
				item.SetDefaults(2422, false);
			}
			else if (Main.hardMode && this.anglerQuestsFinished > 10 && Main.rand.Next((int)(70f * num)) == 0)
			{
				item.SetDefaults(2494, false);
			}
			else if (Main.hardMode && this.anglerQuestsFinished > 10 && Main.rand.Next((int)(70f * num)) == 0)
			{
				item.SetDefaults(3031, false);
			}
			else if (Main.hardMode && this.anglerQuestsFinished > 10 && Main.rand.Next((int)(70f * num)) == 0)
			{
				item.SetDefaults(3032, false);
			}
			else if (Main.rand.Next((int)(80f * num)) == 0)
			{
				item.SetDefaults(3183, false);
			}
			else if (Main.rand.Next((int)(60f * num)) == 0)
			{
				item.SetDefaults(2360, false);
			}
			else if (Main.rand.Next((int)(40f * num)) == 0)
			{
				item.SetDefaults(2373, false);
			}
			else if (Main.rand.Next((int)(40f * num)) == 0)
			{
				item.SetDefaults(2374, false);
			}
			else if (Main.rand.Next((int)(40f * num)) == 0)
			{
				item.SetDefaults(2375, false);
			}
			else if (Main.rand.Next((int)(40f * num)) == 0)
			{
				item.SetDefaults(3120, false);
			}
			else if (Main.rand.Next((int)(40f * num)) == 0)
			{
				item.SetDefaults(3037, false);
			}
			else if (Main.rand.Next((int)(40f * num)) == 0)
			{
				item.SetDefaults(3096, false);
			}
			else if (Main.rand.Next((int)(40f * num)) == 0)
			{
				item.SetDefaults(2417, false);
			}
			else if (Main.rand.Next((int)(40f * num)) == 0)
			{
				item.SetDefaults(2498, false);
			}
			else
			{
				int num2 = Main.rand.Next(70);
				if (num2 == 0)
				{
					item.SetDefaults(2442, false);
				}
				else if (num2 == 1)
				{
					item.SetDefaults(2443, false);
				}
				else if (num2 == 2)
				{
					item.SetDefaults(2444, false);
				}
				else if (num2 == 3)
				{
					item.SetDefaults(2445, false);
				}
				else if (num2 == 4)
				{
					item.SetDefaults(2497, false);
				}
				else if (num2 == 5)
				{
					item.SetDefaults(2495, false);
				}
				else if (num2 == 6)
				{
					item.SetDefaults(2446, false);
				}
				else if (num2 == 7)
				{
					item.SetDefaults(2447, false);
				}
				else if (num2 == 8)
				{
					item.SetDefaults(2448, false);
				}
				else if (num2 == 9)
				{
					item.SetDefaults(2449, false);
				}
				else if (num2 == 10)
				{
					item.SetDefaults(2490, false);
				}
				else if (num2 == 11)
				{
					item.SetDefaults(2435, false);
					item.stack = Main.rand.Next(50, 151);
				}
				else if (num2 == 12)
				{
					item.SetDefaults(2496, false);
				}
				else
				{
					int num3 = Main.rand.Next(3);
					if (num3 == 0)
					{
						item.SetDefaults(2354, false);
						item.stack = Main.rand.Next(2, 6);
					}
					else if (num3 == 1)
					{
						item.SetDefaults(2355, false);
						item.stack = Main.rand.Next(2, 6);
					}
					else
					{
						item.SetDefaults(2356, false);
						item.stack = Main.rand.Next(2, 6);
					}
				}
			}
			rewardItems.Add(item);
			if (item.type == 2417)
			{
				Item item3 = new Item();
				Item item4 = new Item();
				item3.SetDefaults(2418, false);
				rewardItems.Add(item3);
				item4.SetDefaults(2419, false);
				rewardItems.Add(item4);
			}
			else if (item.type == 2498)
			{
				Item item5 = new Item();
				Item item6 = new Item();
				item5.SetDefaults(2499, false);
				rewardItems.Add(item5);
				item6.SetDefaults(2500, false);
				rewardItems.Add(item6);
			}
			Item item7 = new Item();
			int num4 = (this.anglerQuestsFinished + 50) / 2;
			num4 = (int)((float)(num4 * Main.rand.Next(50, 201)) * 0.015f);
			num4 = (int)((double)num4 * 1.5);
			if (Main.expertMode)
			{
				num4 *= 2;
			}
			if (num4 > 100)
			{
				num4 /= 100;
				if (num4 > 10)
				{
					num4 = 10;
				}
				if (num4 < 1)
				{
					num4 = 1;
				}
				item7.SetDefaults(73, false);
				item7.stack = num4;
			}
			else
			{
				if (num4 > 99)
				{
					num4 = 99;
				}
				if (num4 < 1)
				{
					num4 = 1;
				}
				item7.SetDefaults(72, false);
				item7.stack = num4;
			}
			rewardItems.Add(item7);
			if (Main.rand.Next((int)(100f * num)) <= 50)
			{
				Item item8 = new Item();
				if (Main.rand.Next((int)(15f * num)) == 0)
				{
					item8.SetDefaults(2676, false);
				}
				else if (Main.rand.Next((int)(5f * num)) == 0)
				{
					item8.SetDefaults(2675, false);
				}
				else
				{
					item8.SetDefaults(2674, false);
				}
				if (Main.rand.Next(25) <= this.anglerQuestsFinished)
				{
					item8.stack++;
				}
				if (Main.rand.Next(50) <= this.anglerQuestsFinished)
				{
					item8.stack++;
				}
				if (Main.rand.Next(100) <= this.anglerQuestsFinished)
				{
					item8.stack++;
				}
				if (Main.rand.Next(150) <= this.anglerQuestsFinished)
				{
					item8.stack++;
				}
				if (Main.rand.Next(200) <= this.anglerQuestsFinished)
				{
					item8.stack++;
				}
				if (Main.rand.Next(250) <= this.anglerQuestsFinished)
				{
					item8.stack++;
				}
				rewardItems.Add(item8);
			}
			PlayerHooks.AnglerQuestReward(this, num, rewardItems);
			foreach (Item rewardItem in rewardItems)
			{
				rewardItem.position = base.Center;
				Item getItem = this.GetItem(this.whoAmI, rewardItem, true, false);
				if (getItem.stack > 0)
				{
					int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, getItem.type, getItem.stack, false, 0, true, false);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, "", number, 1f, 0f, 0f, 0, 0, 0);
					}
				}
			}
		}

		public void GetDyeTraderReward()
		{
			List<int> list = new List<int>
			{
				3560,
				3028,
				3041,
				3040,
				3025,
				3190,
				3027,
				3026,
				3554,
				3553,
				3555,
				2872,
				3534,
				2871
			};
			if (Main.hardMode)
			{
				list.Add(3039);
				list.Add(3038);
				list.Add(3598);
				list.Add(3597);
				list.Add(3600);
				list.Add(3042);
				list.Add(3533);
				list.Add(3561);
				if (NPC.downedMechBossAny)
				{
					list.Add(2883);
					list.Add(2869);
					list.Add(2873);
					list.Add(2870);
				}
				if (NPC.downedPlantBoss)
				{
					list.Add(2878);
					list.Add(2879);
					list.Add(2884);
					list.Add(2885);
				}
				if (NPC.downedMartians)
				{
					list.Add(2864);
					list.Add(3556);
				}
				if (NPC.downedMoonlord)
				{
					list.Add(3024);
				}
			}
			PlayerHooks.GetDyeTraderReward(this, list);
			int type = list[Main.rand.Next(list.Count)];
			Item item = new Item();
			item.SetDefaults(type, false);
			item.stack = 3;
			item.position = base.Center;
			Item item2 = this.GetItem(this.whoAmI, item, true, false);
			if (item2.stack > 0)
			{
				int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, item2.type, item2.stack, false, 0, true, false);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, "", number, 1f, 0f, 0f, 0, 0, 0);
				}
			}
		}

		public bool CheckMana(int amount, bool pay = false, bool blockQuickMana = false)
		{
			int num = (int)((float)amount * this.manaCost);
			if (this.statMana >= num)
			{
				if (pay)
				{
					this.statMana -= num;
				}
				return true;
			}
			if (!this.manaFlower || blockQuickMana)
			{
				return false;
			}
			this.QuickMana();
			if (this.statMana >= num)
			{
				if (pay)
				{
					this.statMana -= num;
				}
				return true;
			}
			return false;
		}

		public void TryPortalJumping()
		{
			if (this.mount.Active || this.dead)
			{
				return;
			}
			PortalHelper.TryGoingThroughPortals(this);
		}

		public bool ConsumeSolarFlare()
		{
			if (!this.setSolar || this.solarShields <= 0)
			{
				return false;
			}
			if (Main.netMode == 1 && this.whoAmI != Main.myPlayer)
			{
				return true;
			}
			this.solarShields--;
			for (int i = 0; i < 22; i++)
			{
				if (this.buffType[i] >= 170 && this.buffType[i] <= 172)
				{
					this.DelBuff(i);
				}
			}
			if (this.solarShields > 0)
			{
				this.AddBuff(170 + this.solarShields - 1, 5, false);
			}
			this.solarCounter = 0;
			return true;
		}

		public void KeyDoubleTap(int keyDir)
		{
			int num = 0;
			if (Main.ReversedUpDownArmorSetBonuses)
			{
				num = 1;
			}
			if (keyDir == num)
			{
				if (this.setVortex && !this.mount.Active)
				{
					this.vortexStealthActive = !this.vortexStealthActive;
				}
				if (this.setStardust)
				{
					this.MinionRestTargetAim();
				}
				if (this.setForbidden)
				{
					this.MinionRestTargetAim();
					if (!this.setForbiddenCooldownLocked)
					{
						this.CommandForbiddenStorm();
					}
				}
			}
		}

		public void UpdateForbiddenSetLock()
		{
			List<int> list = new List<int>();
			for (int i = 0; i < 1000; i++)
			{
				Projectile projectile = Main.projectile[i];
				if (projectile.active && projectile.type == 656 && projectile.owner == this.whoAmI)
				{
					list.Add(i);
				}
			}
			this.setForbiddenCooldownLocked = (list.Count > 1);
		}

		public void CommandForbiddenStorm()
		{
			List<int> list = new List<int>();
			for (int i = 0; i < 1000; i++)
			{
				Projectile projectile = Main.projectile[i];
				if (projectile.active && projectile.type == 656 && projectile.owner == this.whoAmI)
				{
					list.Add(i);
				}
			}
			bool flag = StrayMethods.CanSpawnSandstormFriendly(this.MinionRestTargetPoint, 30, 30);
			bool flag2 = this.MinionRestTargetPoint == Vector2.Zero;
			Vector2 center = base.Center;
			Vector2 value = this.MinionRestTargetPoint;
			if (flag2)
			{
				value = center;
			}
			bool flag3 = false;
			float[] array = new float[10];
			Vector2 v = value - center;
			Collision.LaserScan(center, v.SafeNormalize(Vector2.Zero), 60f, v.Length(), array);
			float num = 0f;
			for (int j = 0; j < array.Length; j++)
			{
				if (array[j] > num)
				{
					num = array[j];
				}
			}
			float[] array2 = array;
			for (int k = 0; k < array2.Length; k++)
			{
				float num2 = array2[k];
				if (Math.Abs(num2 - v.Length()) < 10f)
				{
					flag3 = true;
					break;
				}
			}
			if (list.Count <= 1)
			{
				Vector2 vector = center + v.SafeNormalize(Vector2.Zero) * num;
				Vector2 value2 = vector - center;
				if (value2.Length() > 0f)
				{
					for (float num3 = 0f; num3 < value2.Length(); num3 += 15f)
					{
						Vector2 position = center + value2 * (num3 / value2.Length());
						Dust dust = Main.dust[Dust.NewDust(position, 0, 0, 269, 0f, 0f, 0, default(Color), 1f)];
						dust.position = position;
						dust.fadeIn = 0.5f;
						dust.scale = 0.7f;
						dust.velocity *= 0.4f;
						dust.noLight = true;
					}
				}
				for (float num4 = 0f; num4 < 6.28318548f; num4 += 0.209439516f)
				{
					Dust dust2 = Main.dust[Dust.NewDust(vector, 0, 0, 269, 0f, 0f, 0, default(Color), 1f)];
					dust2.position = vector;
					dust2.fadeIn = 1f;
					dust2.scale = 0.3f;
					dust2.noLight = true;
				}
			}
			flag &= (list.Count <= 1);
			flag &= flag3;
			if (flag)
			{
				flag = this.CheckMana(20, true, false);
				if (flag)
				{
					this.manaRegenDelay = (int)this.maxRegenDelay;
				}
			}
			if (!flag)
			{
				return;
			}
			foreach (int current in list)
			{
				Projectile projectile2 = Main.projectile[current];
				if (projectile2.ai[0] < 780f)
				{
					projectile2.ai[0] = 780f + projectile2.ai[0] % 60f;
					projectile2.netUpdate = true;
				}
			}
			int damage = (int)(20f * (1f + this.magicDamage + this.minionDamage - 2f));
			Projectile arg_37A_0 = Main.projectile[Projectile.NewProjectile(this.MinionRestTargetPoint, Vector2.Zero, 656, damage, 0f, Main.myPlayer, 0f, 0f)];
		}

		public void KeyHoldDown(int keyDir, int holdTime)
		{
			int num = 0;
			if (Main.ReversedUpDownArmorSetBonuses)
			{
				num = 1;
			}
			if (keyDir == num)
			{
				if (this.setStardust && holdTime >= 60)
				{
					this.MinionRestTargetPoint = Vector2.Zero;
				}
				if (this.setForbidden && holdTime >= 60)
				{
					this.MinionRestTargetPoint = Vector2.Zero;
				}
			}
		}

		public void MinionNPCTargetAim()
		{
			Vector2 mouseWorld = Main.MouseWorld;
			int num = -1;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].CanBeChasedBy(this, false) && (num == -1 || Main.npc[i].Hitbox.Distance(mouseWorld) < Main.npc[num].Hitbox.Distance(mouseWorld)))
				{
					num = i;
				}
			}
			if (this.MinionAttackTargetNPC == num)
			{
				this.MinionAttackTargetNPC = -1;
				return;
			}
			this.MinionAttackTargetNPC = num;
		}

		public void MinionRestTargetAim()
		{
			Vector2 mouseWorld = Main.MouseWorld;
			float y = mouseWorld.Y;
			int num = (int)mouseWorld.X / 16;
			int num2 = (int)y / 16;
			int num3 = 0;
			bool flag = Main.tile[num, num2].nactive() && Main.tileSolid[(int)Main.tile[num, num2].type] && !Main.tileSolidTop[(int)Main.tile[num, num2].type];
			if (flag)
			{
				int num4 = 0;
				int num5 = 0;
				while (num5 > -20 && num2 + num5 > 1)
				{
					int num6 = num2 + num5;
					bool flag2 = Main.tile[num, num6].nactive() && Main.tileSolid[(int)Main.tile[num, num6].type] && !Main.tileSolidTop[(int)Main.tile[num, num6].type];
					if (!flag2)
					{
						num4 = num5;
						break;
					}
					num4 = num5;
					num5--;
				}
				int num7 = 0;
				int num8 = 0;
				while (num8 < 20 && num2 + num8 < Main.maxTilesY)
				{
					int num9 = num2 + num8;
					bool flag3 = Main.tile[num, num9].nactive() && Main.tileSolid[(int)Main.tile[num, num9].type] && !Main.tileSolidTop[(int)Main.tile[num, num9].type];
					if (!flag3)
					{
						num7 = num8;
						break;
					}
					num7 = num8;
					num8++;
				}
				bool flag4 = num7 > -num4;
				if (flag4)
				{
					num3 = num4 - 2;
				}
				else
				{
					num3 = num7 + 3;
				}
			}
			int num10 = num2 + num3;
			bool flag5 = false;
			for (int i = num10; i < num10 + 5; i++)
			{
				if (WorldGen.SolidTileAllowBottomSlope(num, i))
				{
					flag5 = true;
				}
			}
			while (!flag5)
			{
				num10++;
				for (int j = num10; j < num10 + 5; j++)
				{
					if (WorldGen.SolidTileAllowBottomSlope(num, j))
					{
						flag5 = true;
					}
				}
			}
			Vector2 vector = new Vector2((float)(num * 16 + 8), (float)(num10 * 16));
			if (base.Distance(vector) <= 1000f)
			{
				this.MinionRestTargetPoint = vector;
			}
		}

		public void UpdateMinionTarget()
		{
			if (this.whoAmI != Main.myPlayer)
			{
				return;
			}
			if (base.Distance(this.MinionRestTargetPoint) > 1000f)
			{
				this.MinionRestTargetPoint = Vector2.Zero;
			}
			if (this.MinionAttackTargetNPC != -1 && (!Main.npc[this.MinionAttackTargetNPC].CanBeChasedBy(this, false) || Main.npc[this.MinionAttackTargetNPC].Hitbox.Distance(base.Center) > 3000f))
			{
				this.MinionAttackTargetNPC = -1;
			}
			if (this.stardustGuardian && this.HasMinionRestTarget)
			{
				Vector2 minionRestTargetPoint = this.MinionRestTargetPoint;
				float num = (float)this.miscCounter / 150f;
				float num2 = 2.09439516f;
				for (int i = 0; i < 3; i++)
				{
					int num3 = Dust.NewDust(minionRestTargetPoint, 0, 0, 135, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num3].noGravity = true;
					Main.dust[num3].velocity = Vector2.Zero;
					Main.dust[num3].noLight = true;
					Main.dust[num3].position = minionRestTargetPoint + (num * 6.28318548f + num2 * (float)i).ToRotationVector2() * 4f;
					Main.dust[num3].shader = GameShaders.Armor.GetSecondaryShader(this.cPet, this);
				}
			}
			if (this.MinionAttackTargetNPC != -1)
			{
				Vector2 center = Main.npc[this.MinionAttackTargetNPC].Center;
				float num4 = (float)this.miscCounter / 60f;
				float num5 = 2.09439516f;
				for (int j = 0; j < 3; j++)
				{
					int num6 = Dust.NewDust(center, 0, 0, 272, 0f, 0f, 100, default(Color), 0.5f);
					Main.dust[num6].noGravity = true;
					Main.dust[num6].velocity = Vector2.Zero;
					Main.dust[num6].noLight = true;
					Main.dust[num6].position = center + (num4 * 6.28318548f + num5 * (float)j).ToRotationVector2() * 12f;
				}
			}
		}

		public void NebulaLevelup(int type)
		{
			if (this.whoAmI == Main.myPlayer)
			{
				int time = 480;
				for (int i = 0; i < 22; i++)
				{
					if (this.buffType[i] >= type && this.buffType[i] < type + 3)
					{
						this.DelBuff(i);
					}
				}
				if (type == 173)
				{
					this.nebulaLevelLife = (int)MathHelper.Clamp((float)(this.nebulaLevelLife + 1), 0f, 3f);
					this.AddBuff(type + this.nebulaLevelLife - 1, time, true);
					return;
				}
				if (type == 176)
				{
					this.nebulaLevelMana = (int)MathHelper.Clamp((float)(this.nebulaLevelMana + 1), 0f, 3f);
					this.AddBuff(type + this.nebulaLevelMana - 1, time, true);
					return;
				}
				if (type != 179)
				{
					return;
				}
				this.nebulaLevelDamage = (int)MathHelper.Clamp((float)(this.nebulaLevelDamage + 1), 0f, 3f);
				this.AddBuff(type + this.nebulaLevelDamage - 1, time, true);
			}
		}

		public void UpdateTouchingTiles()
		{
			this.TouchedTiles.Clear();
			List<Point> list = null;
			List<Point> list2 = null;
			if (!Collision.IsClearSpotTest(this.position + this.velocity, 16f, this.width, this.height, false, false, (int)this.gravDir, true, true))
			{
				list = Collision.FindCollisionTile((Math.Sign(this.velocity.Y) == 1) ? 2 : 3, this.position + this.velocity, 16f, this.width, this.height, false, false, (int)this.gravDir, true, false);
			}
			if (!Collision.IsClearSpotTest(this.position, Math.Abs(this.velocity.Y), this.width, this.height, false, false, (int)this.gravDir, true, true))
			{
				list2 = Collision.FindCollisionTile((Math.Sign(this.velocity.Y) == 1) ? 2 : 3, this.position, Math.Abs(this.velocity.Y), this.width, this.height, false, false, (int)this.gravDir, true, true);
			}
			if (list != null && list2 != null)
			{
				for (int i = 0; i < list2.Count; i++)
				{
					if (!list.Contains(list2[i]))
					{
						list.Add(list2[i]);
					}
				}
			}
			if (list == null && list2 != null)
			{
				list = list2;
			}
			if (list != null)
			{
				this.TouchedTiles = list;
			}
		}
	}
}
